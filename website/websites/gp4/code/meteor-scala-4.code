<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl slc">// Most for-comprehension replaced by while loops</span>
<span class="hl slc">// BoardCells occupied by each Piece orientation are cached</span>
<span class="hl slc">// Piece orientations are cached</span>

<span class="hl kwa">import</span> scala<span class="hl sym">.</span>collection<span class="hl sym">.</span>mutable<span class="hl sym">.</span>_

<span class="hl kwa">object</span> meteor <span class="hl sym">{</span>
   <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
      <span class="hl kwa">val</span> solver <span class="hl sym">=</span> <span class="hl kwa">new</span> Solver<span class="hl sym">(</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)) )</span>
      solver<span class="hl sym">.</span>findSolutions
      solver<span class="hl sym">.</span>printSolutions
   <span class="hl sym">}</span>
<span class="hl sym">}</span>




<span class="hl slc">// Solver.scala</span>
<span class="hl slc">// import scala.collection.mutable._</span>

<span class="hl kwa">final class</span> Solver <span class="hl sym">(</span>n<span class="hl sym">:</span> Int<span class="hl sym">) {</span>
   <span class="hl kwa">private var</span> countdown <span class="hl sym">=</span> n
   <span class="hl kwa">private var</span> first<span class="hl sym">:</span> <span class="hl kwc">String</span> <span class="hl sym">=</span> _
   <span class="hl kwa">private var</span> last<span class="hl sym">:</span> <span class="hl kwc">String</span> <span class="hl sym">=</span> _

   <span class="hl kwa">private val</span> board <span class="hl sym">=</span> <span class="hl kwa">new</span> Board<span class="hl sym">()</span>

   <span class="hl kwa">val</span> pieces <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>
      <span class="hl kwa">new</span> Piece<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> <span class="hl kwa">new</span> Piece<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> <span class="hl kwa">new</span> Piece<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">),</span> <span class="hl kwa">new</span> Piece<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">),</span> <span class="hl kwa">new</span> Piece<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">),</span>
      <span class="hl kwa">new</span> Piece<span class="hl sym">(</span><span class="hl num">5</span><span class="hl sym">),</span> <span class="hl kwa">new</span> Piece<span class="hl sym">(</span><span class="hl num">6</span><span class="hl sym">),</span> <span class="hl kwa">new</span> Piece<span class="hl sym">(</span><span class="hl num">7</span><span class="hl sym">),</span> <span class="hl kwa">new</span> Piece<span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">),</span> <span class="hl kwa">new</span> Piece<span class="hl sym">(</span><span class="hl num">9</span><span class="hl sym">) )</span>

   <span class="hl kwa">val</span> unplaced <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BitSet</span><span class="hl sym">(</span>pieces<span class="hl sym">.</span>length<span class="hl sym">)</span>

   <span class="hl sym">{</span> unplaced <span class="hl sym">++=</span> <span class="hl kwc">Iterator</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>unplaced<span class="hl sym">.</span>capacity<span class="hl sym">) }</span>


   <span class="hl kwa">def</span> findSolutions<span class="hl sym">():</span> Unit <span class="hl sym">= {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>countdown <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">return</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>unplaced<span class="hl sym">.</span>size <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">){</span>
         <span class="hl kwa">val</span> emptyCellIndex <span class="hl sym">=</span> board<span class="hl sym">.</span>firstEmptyCellIndex

         <span class="hl kwa">var</span> k <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;</span> pieces<span class="hl sym">.</span>length<span class="hl sym">){</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>unplaced<span class="hl sym">.</span>contains<span class="hl sym">(</span>k<span class="hl sym">)){</span>
               unplaced <span class="hl sym">-=</span> k

               <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
               <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> Piece<span class="hl sym">.</span>orientations<span class="hl sym">){</span>
                  <span class="hl kwa">val</span> piece <span class="hl sym">=</span> pieces<span class="hl sym">(</span>k<span class="hl sym">).</span>nextOrientation

                  <span class="hl kwa">var</span> j <span class="hl sym">=</span> <span class="hl num">0</span>
                  <span class="hl kwa">while</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;</span> Piece<span class="hl sym">.</span>size<span class="hl sym">){</span>
                     <span class="hl kwa">if</span> <span class="hl sym">(</span>board<span class="hl sym">.</span>add<span class="hl sym">(</span>j<span class="hl sym">,</span>emptyCellIndex<span class="hl sym">,</span>piece<span class="hl sym">)) {</span>

                        <span class="hl kwa">if</span> <span class="hl sym">(!</span>shouldPrune<span class="hl sym">)</span> findSolutions

                        board<span class="hl sym">.</span>remove<span class="hl sym">(</span>piece<span class="hl sym">)</span>
                     <span class="hl sym">}</span>
                     j <span class="hl sym">=</span> j <span class="hl sym">+</span> <span class="hl num">1</span>
                  <span class="hl sym">}</span>
                  i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
               <span class="hl sym">}</span>
               unplaced <span class="hl sym">+=</span> k
            <span class="hl sym">}</span>
            k <span class="hl sym">=</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
         puzzleSolved
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> puzzleSolved<span class="hl sym">() = {</span>
      <span class="hl kwa">val</span> b <span class="hl sym">=</span> board<span class="hl sym">.</span>asString
      <span class="hl kwa">if</span> <span class="hl sym">(</span>first <span class="hl sym">==</span> null<span class="hl sym">){</span>
         first <span class="hl sym">=</span> b<span class="hl sym">;</span> last <span class="hl sym">=</span> b
      <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>b <span class="hl sym">&lt;</span> first<span class="hl sym">){</span> first <span class="hl sym">=</span> b <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>b <span class="hl sym">&gt;</span> last<span class="hl sym">){</span> last <span class="hl sym">=</span> b <span class="hl sym">} }</span>
      <span class="hl sym">}</span>
      countdown <span class="hl sym">=</span> countdown <span class="hl sym">-</span> <span class="hl num">1</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> shouldPrune<span class="hl sym">():</span> <span class="hl kwc">Boolean</span> <span class="hl sym">= {</span>
      board<span class="hl sym">.</span>unmark
      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> board<span class="hl sym">.</span>cells<span class="hl sym">.</span>length<span class="hl sym">){</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>board<span class="hl sym">.</span>cells<span class="hl sym">(</span>i<span class="hl sym">).</span>contiguousEmptyCells <span class="hl sym">%</span> Piece<span class="hl sym">.</span>size <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">return</span> true
         i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
      false
   <span class="hl sym">}</span>


   <span class="hl kwa">def</span> printSolutions<span class="hl sym">() = {</span>

      <span class="hl kwa">def</span> printBoard<span class="hl sym">(</span>s<span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">) = {</span>
         <span class="hl kwa">var</span> indent <span class="hl sym">=</span> false
         <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> s<span class="hl sym">.</span>length<span class="hl sym">){</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>indent<span class="hl sym">)</span> Console<span class="hl sym">.</span>print<span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">)</span>
            <span class="hl kwa">var</span> j <span class="hl sym">=</span> <span class="hl num">0</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>j <span class="hl sym">&lt;</span> Board<span class="hl sym">.</span>cols<span class="hl sym">){</span>
               Console<span class="hl sym">.</span>print<span class="hl sym">(</span>s<span class="hl sym">.</span>charAt<span class="hl sym">(</span>i<span class="hl sym">));</span> Console<span class="hl sym">.</span>print<span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">)</span>
               j <span class="hl sym">=</span> j <span class="hl sym">+</span> <span class="hl num">1</span>
               i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
            <span class="hl sym">}</span>
            Console<span class="hl sym">.</span>print<span class="hl sym">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span>
            indent <span class="hl sym">= !</span>indent
         <span class="hl sym">}</span>
         Console<span class="hl sym">.</span>print<span class="hl sym">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span>
      <span class="hl sym">}</span>

      Console<span class="hl sym">.</span>print<span class="hl sym">(</span>n <span class="hl sym">+</span> <span class="hl str">&quot; solutions found</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
      printBoard<span class="hl sym">(</span>first<span class="hl sym">)</span>
      printBoard<span class="hl sym">(</span>last<span class="hl sym">)</span>
   <span class="hl sym">}</span>

<span class="hl com">/*</span>
<span class="hl com">   def printPieces() =</span>
<span class="hl com">      for (val i &lt;- Iterator.range(0,Board.pieces)) pieces(i).print</span>
<span class="hl com">*/</span>

<span class="hl sym">}</span>



<span class="hl slc">// Board.scala</span>
<span class="hl slc">// import scala.collection.mutable._</span>

<span class="hl kwa">object</span> Board <span class="hl sym">{</span>
   <span class="hl kwa">val</span> cols <span class="hl sym">=</span> <span class="hl num">5</span>
   <span class="hl kwa">val</span> rows <span class="hl sym">=</span> <span class="hl num">10</span>
   <span class="hl kwa">val</span> size <span class="hl sym">=</span> rows <span class="hl sym">*</span> cols
   <span class="hl kwa">val</span> pieces <span class="hl sym">=</span> <span class="hl num">10</span>
   <span class="hl kwa">val</span> noFit <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>BoardCell<span class="hl sym">](</span><span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl sym">}</span>

<span class="hl kwa">final class</span> Board <span class="hl sym">{</span>
   <span class="hl kwa">val</span> cells <span class="hl sym">=</span> boardCells<span class="hl sym">()</span>

   <span class="hl kwa">val</span> cellsPieceWillFill <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>BoardCell<span class="hl sym">](</span>Piece<span class="hl sym">.</span>size<span class="hl sym">)</span>
   <span class="hl kwa">var</span> cellCount <span class="hl sym">=</span> <span class="hl num">0</span>

   <span class="hl kwa">def</span> unmark<span class="hl sym">() = {</span>
      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> cells<span class="hl sym">.</span>length<span class="hl sym">){</span>
         cells<span class="hl sym">(</span>i<span class="hl sym">).</span>unmark
         i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> asString<span class="hl sym">() =</span>
      <span class="hl kwa">new</span> <span class="hl kwc">String</span><span class="hl sym">(</span> cells map<span class="hl sym">(</span>
         c <span class="hl sym">=&gt;</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>c<span class="hl sym">.</span>piece <span class="hl sym">==</span> null<span class="hl sym">)</span> <span class="hl str">'-'</span><span class="hl sym">.</span>toByte
              <span class="hl kwa">else</span> <span class="hl sym">(</span>c<span class="hl sym">.</span>piece<span class="hl sym">.</span>number <span class="hl sym">+</span> <span class="hl num">48</span><span class="hl sym">).</span>toByte <span class="hl sym">))</span>

   <span class="hl kwa">def</span> firstEmptyCellIndex<span class="hl sym">() =</span> cells<span class="hl sym">.</span>findIndexOf<span class="hl sym">(</span>c <span class="hl sym">=&gt;</span> c<span class="hl sym">.</span>isEmpty<span class="hl sym">)</span>


   <span class="hl kwa">private val</span> cache<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">Array</span><span class="hl sym">[</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>BoardCell<span class="hl sym">] ]]]] =</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> i <span class="hl sym">&lt;-</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>Board<span class="hl sym">.</span>pieces<span class="hl sym">))</span>
         <span class="hl kwa">yield</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> j <span class="hl sym">&lt;-</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>Piece<span class="hl sym">.</span>orientations<span class="hl sym">))</span>
               <span class="hl kwa">yield</span>
                  <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> k <span class="hl sym">&lt;-</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>Piece<span class="hl sym">.</span>size<span class="hl sym">))</span> <span class="hl slc">// piece cell index</span>
                     <span class="hl kwa">yield</span>
                        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> m <span class="hl sym">&lt;-</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>Board<span class="hl sym">.</span>size<span class="hl sym">))</span> <span class="hl slc">// board cell index</span>
                           <span class="hl kwa">yield</span> null


   <span class="hl kwa">def</span> add<span class="hl sym">(</span>pieceIndex<span class="hl sym">:</span> Int<span class="hl sym">,</span> boardIndex<span class="hl sym">:</span> Int<span class="hl sym">,</span> p<span class="hl sym">:</span> Piece<span class="hl sym">):</span> <span class="hl kwc">Boolean</span> <span class="hl sym">= {</span>
      <span class="hl kwa">var</span> a <span class="hl sym">=</span> cache<span class="hl sym">(</span>p<span class="hl sym">.</span>number<span class="hl sym">)(</span>p<span class="hl sym">.</span>orientation<span class="hl sym">)(</span>pieceIndex<span class="hl sym">)(</span>boardIndex<span class="hl sym">)</span>

      cellCount <span class="hl sym">=</span> <span class="hl num">0</span>
      p<span class="hl sym">.</span>unmark

      <span class="hl kwa">if</span> <span class="hl sym">(</span>a <span class="hl sym">==</span> null<span class="hl sym">){</span>
         find<span class="hl sym">(</span>p<span class="hl sym">.</span>cells<span class="hl sym">(</span>pieceIndex<span class="hl sym">),</span> cells<span class="hl sym">(</span>boardIndex<span class="hl sym">))</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>cellCount <span class="hl sym">!=</span> Piece<span class="hl sym">.</span>size<span class="hl sym">){</span>
            cache<span class="hl sym">(</span>p<span class="hl sym">.</span>number<span class="hl sym">)(</span>p<span class="hl sym">.</span>orientation<span class="hl sym">)(</span>pieceIndex<span class="hl sym">)(</span>boardIndex<span class="hl sym">) =</span> Board<span class="hl sym">.</span>noFit
            <span class="hl kwa">return</span> false
         <span class="hl sym">}</span>

         a <span class="hl sym">=</span> cellsPieceWillFill <span class="hl sym">.</span>filter<span class="hl sym">(</span>c <span class="hl sym">=&gt;</span> true<span class="hl sym">)</span>
         cache<span class="hl sym">(</span>p<span class="hl sym">.</span>number<span class="hl sym">)(</span>p<span class="hl sym">.</span>orientation<span class="hl sym">)(</span>pieceIndex<span class="hl sym">)(</span>boardIndex<span class="hl sym">) =</span> a
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>a <span class="hl sym">==</span> Board<span class="hl sym">.</span>noFit<span class="hl sym">)</span> <span class="hl kwa">return</span> false
      <span class="hl sym">}</span>

      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> a<span class="hl sym">.</span>length<span class="hl sym">){</span>
         <span class="hl kwa">if</span> <span class="hl sym">(!</span>a<span class="hl sym">(</span>i<span class="hl sym">).</span>isEmpty<span class="hl sym">)</span> <span class="hl kwa">return</span> false
         i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>

      i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> a<span class="hl sym">.</span>length<span class="hl sym">){</span>
         a<span class="hl sym">(</span>i<span class="hl sym">).</span>piece <span class="hl sym">=</span> p
         i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>

      true
   <span class="hl sym">}</span>


   <span class="hl kwa">def</span> remove<span class="hl sym">(</span>piece<span class="hl sym">:</span> Piece<span class="hl sym">) = {</span>
      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> cells<span class="hl sym">.</span>length<span class="hl sym">){</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>cells<span class="hl sym">(</span>i<span class="hl sym">).</span>piece <span class="hl sym">==</span> piece<span class="hl sym">)</span> cells<span class="hl sym">(</span>i<span class="hl sym">).</span>empty
         i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">private def</span> find<span class="hl sym">(</span>p<span class="hl sym">:</span> PieceCell<span class="hl sym">,</span> b<span class="hl sym">:</span> BoardCell<span class="hl sym">):</span> Unit <span class="hl sym">= {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>p <span class="hl sym">!=</span> null <span class="hl sym">&amp;&amp; !</span>p<span class="hl sym">.</span>marked <span class="hl sym">&amp;&amp;</span> b <span class="hl sym">!=</span> null<span class="hl sym">){</span>
         cellsPieceWillFill<span class="hl sym">(</span>cellCount<span class="hl sym">) =</span> b
         cellCount <span class="hl sym">=</span> cellCount <span class="hl sym">+</span> <span class="hl num">1</span>
         p<span class="hl sym">.</span>mark

         <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> Cell<span class="hl sym">.</span>sides<span class="hl sym">){</span>
            find<span class="hl sym">(</span>p<span class="hl sym">.</span>next<span class="hl sym">(</span>i<span class="hl sym">),</span> b<span class="hl sym">.</span>next<span class="hl sym">(</span>i<span class="hl sym">))</span>
            i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">private def</span> boardCells<span class="hl sym">() = {</span>
      <span class="hl kwa">val</span> a <span class="hl sym">=</span> <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> i <span class="hl sym">&lt;-</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>Board<span class="hl sym">.</span>size<span class="hl sym">))</span> <span class="hl kwa">yield new</span> BoardCell<span class="hl sym">(</span>i<span class="hl sym">)</span>
      <span class="hl kwa">val</span> m <span class="hl sym">= (</span>Board<span class="hl sym">.</span>size <span class="hl sym">/</span> Board<span class="hl sym">.</span>cols<span class="hl sym">) -</span> <span class="hl num">1</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> i <span class="hl sym">&lt;-</span> <span class="hl kwc">Iterator</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>a<span class="hl sym">.</span>length<span class="hl sym">)){</span>
         <span class="hl kwa">val</span> row <span class="hl sym">=</span> i <span class="hl sym">/</span> Board<span class="hl sym">.</span>cols
         <span class="hl kwa">val</span> isFirst <span class="hl sym">=</span> i <span class="hl sym">%</span> Board<span class="hl sym">.</span>cols <span class="hl sym">==</span> <span class="hl num">0</span>
         <span class="hl kwa">val</span> isLast <span class="hl sym">= (</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) %</span> Board<span class="hl sym">.</span>cols <span class="hl sym">==</span> <span class="hl num">0</span>
         <span class="hl kwa">val</span> c <span class="hl sym">=</span> a<span class="hl sym">(</span>i<span class="hl sym">)</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">%</span> <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">1</span><span class="hl sym">) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(!</span>isLast<span class="hl sym">)</span> c<span class="hl sym">.</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">-(</span>Board<span class="hl sym">.</span>cols<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
            c<span class="hl sym">.</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">-</span>Board<span class="hl sym">.</span>cols<span class="hl sym">)</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">!=</span> m<span class="hl sym">) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(!</span>isLast<span class="hl sym">)</span> c<span class="hl sym">.</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">+(</span>Board<span class="hl sym">.</span>cols<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
               c<span class="hl sym">.</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">+</span>Board<span class="hl sym">.</span>cols<span class="hl sym">)</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(!</span>isFirst<span class="hl sym">)</span> c<span class="hl sym">.</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">-(</span>Board<span class="hl sym">.</span>cols<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
               c<span class="hl sym">.</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">-</span>Board<span class="hl sym">.</span>cols<span class="hl sym">)</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">!=</span> m<span class="hl sym">) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(!</span>isFirst<span class="hl sym">)</span> c<span class="hl sym">.</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">+(</span>Board<span class="hl sym">.</span>cols<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
               c<span class="hl sym">.</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">+</span>Board<span class="hl sym">.</span>cols<span class="hl sym">)</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(!</span>isFirst<span class="hl sym">)</span> c<span class="hl sym">.</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
         <span class="hl kwa">if</span> <span class="hl sym">(!</span>isLast<span class="hl sym">)</span> c<span class="hl sym">.</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl sym">}</span>
      a
   <span class="hl sym">}</span>


<span class="hl com">/*</span>
<span class="hl com">// Printing all the board cells and their neighbours</span>
<span class="hl com">// helps check that they are connected properly</span>
<span class="hl com"></span>
<span class="hl com">   def printBoardCellsAndNeighbours() = {</span>
<span class="hl com">      Console.println(&quot;cell\tNW NE W  E  SW SE&quot;)</span>
<span class="hl com">      for (val i &lt;- Iterator.range(0,Board.size)){</span>
<span class="hl com">         Console.print(i + &quot;\t&quot;)</span>
<span class="hl com">         for (val j &lt;- Iterator.range(0,Cell.sides)){</span>
<span class="hl com">            val c = cells(i).next(j)</span>
<span class="hl com">            if (c == null)</span>
<span class="hl com">               Console.print(&quot;-- &quot;)</span>
<span class="hl com">            else</span>
<span class="hl com">               Console.printf(&quot;{0,number,00} &quot;)(c.number)</span>
<span class="hl com">         }</span>
<span class="hl com">         Console.println(&quot;&quot;)</span>
<span class="hl com">      }</span>
<span class="hl com">      Console.println(&quot;&quot;)</span>
<span class="hl com">   }</span>
<span class="hl com">*/</span>

<span class="hl sym">}</span>




<span class="hl slc">// Piece.scala</span>

<span class="hl kwa">object</span> Piece <span class="hl sym">{</span>
   <span class="hl kwa">val</span> size <span class="hl sym">=</span> <span class="hl num">5</span>
   <span class="hl kwa">val</span> rotations <span class="hl sym">=</span> Cell<span class="hl sym">.</span>sides
   <span class="hl kwa">val</span> flips <span class="hl sym">=</span> <span class="hl num">2</span>
   <span class="hl kwa">val</span> orientations <span class="hl sym">=</span> rotations <span class="hl sym">*</span> flips
<span class="hl sym">}</span>

<span class="hl kwa">final class</span> Piece<span class="hl sym">(</span>_number<span class="hl sym">:</span> Int<span class="hl sym">) {</span>
   <span class="hl kwa">val</span> number <span class="hl sym">=</span> _number

   <span class="hl kwa">def</span> unmark<span class="hl sym">() = {</span>
      <span class="hl kwa">val</span> c <span class="hl sym">=</span> cache<span class="hl sym">(</span>orientation<span class="hl sym">)</span>
      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> c<span class="hl sym">.</span>length<span class="hl sym">){</span>
         c<span class="hl sym">(</span>i<span class="hl sym">).</span>unmark
         i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> cells <span class="hl sym">=</span> cache<span class="hl sym">(</span>orientation<span class="hl sym">)</span>

   <span class="hl kwa">private val</span> cache <span class="hl sym">=</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> i <span class="hl sym">&lt;-</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>Piece<span class="hl sym">.</span>orientations<span class="hl sym">))</span>
         <span class="hl kwa">yield</span> pieceOrientation<span class="hl sym">(</span>i<span class="hl sym">)</span>

   <span class="hl kwa">var</span> orientation <span class="hl sym">=</span> <span class="hl num">0</span>

   <span class="hl kwa">def</span> nextOrientation<span class="hl sym">() = {</span>
      orientation <span class="hl sym">= (</span>orientation <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) %</span> Piece<span class="hl sym">.</span>orientations
      <span class="hl kwa">this</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">private def</span> pieceOrientation<span class="hl sym">(</span>k<span class="hl sym">:</span> Int<span class="hl sym">) = {</span>
      <span class="hl kwa">val</span> cells <span class="hl sym">=</span> <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> i <span class="hl sym">&lt;-</span> <span class="hl kwc">Array</span><span class="hl sym">.</span>range<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>Piece<span class="hl sym">.</span>size<span class="hl sym">))</span> <span class="hl kwa">yield new</span> PieceCell<span class="hl sym">()</span>
      makePiece<span class="hl sym">(</span>number<span class="hl sym">,</span>cells<span class="hl sym">)</span>

      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> k<span class="hl sym">){</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">%</span> Piece<span class="hl sym">.</span>rotations <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> c <span class="hl sym">&lt;-</span> cells<span class="hl sym">)</span> c<span class="hl sym">.</span>flip
         <span class="hl kwa">else</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> c <span class="hl sym">&lt;-</span> cells<span class="hl sym">)</span> c<span class="hl sym">.</span>rotate

         i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
      cells
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> makePiece<span class="hl sym">(</span>number<span class="hl sym">:</span> Int<span class="hl sym">,</span> cells<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      number match <span class="hl sym">{</span>
         <span class="hl kwa">case</span> <span class="hl num">0</span> <span class="hl sym">=&gt;</span> make0<span class="hl sym">(</span>cells<span class="hl sym">)</span>
         <span class="hl kwa">case</span> <span class="hl num">1</span> <span class="hl sym">=&gt;</span> make1<span class="hl sym">(</span>cells<span class="hl sym">)</span>
         <span class="hl kwa">case</span> <span class="hl num">2</span> <span class="hl sym">=&gt;</span> make2<span class="hl sym">(</span>cells<span class="hl sym">)</span>
         <span class="hl kwa">case</span> <span class="hl num">3</span> <span class="hl sym">=&gt;</span> make3<span class="hl sym">(</span>cells<span class="hl sym">)</span>
         <span class="hl kwa">case</span> <span class="hl num">4</span> <span class="hl sym">=&gt;</span> make4<span class="hl sym">(</span>cells<span class="hl sym">)</span>
         <span class="hl kwa">case</span> <span class="hl num">5</span> <span class="hl sym">=&gt;</span> make5<span class="hl sym">(</span>cells<span class="hl sym">)</span>
         <span class="hl kwa">case</span> <span class="hl num">6</span> <span class="hl sym">=&gt;</span> make6<span class="hl sym">(</span>cells<span class="hl sym">)</span>
         <span class="hl kwa">case</span> <span class="hl num">7</span> <span class="hl sym">=&gt;</span> make7<span class="hl sym">(</span>cells<span class="hl sym">)</span>
         <span class="hl kwa">case</span> <span class="hl num">8</span> <span class="hl sym">=&gt;</span> make8<span class="hl sym">(</span>cells<span class="hl sym">)</span>
         <span class="hl kwa">case</span> <span class="hl num">9</span> <span class="hl sym">=&gt;</span> make9<span class="hl sym">(</span>cells<span class="hl sym">)</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> make0<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> make1<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> make2<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> make3<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> make4<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> make5<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> make6<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> make7<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> make8<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private def</span> make9<span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">]) = {</span>
      a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      a<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">).</span>next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> a<span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
   <span class="hl sym">}</span>

<span class="hl com">/*</span>
<span class="hl com">   def print() = {</span>
<span class="hl com">      Console.println(&quot;Piece # &quot; + number)</span>
<span class="hl com">      Console.println(&quot;cell\tNW NE W  E  SW SE&quot;)</span>
<span class="hl com">      for (val i &lt;- Iterator.range(0,Piece.size)){</span>
<span class="hl com">         Console.print(i + &quot;\t&quot;)</span>
<span class="hl com">         for (val j &lt;- Iterator.range(0,Cell.sides)){</span>
<span class="hl com">            val c = cells(i).next(j)</span>
<span class="hl com">            if (c == null)</span>
<span class="hl com">               Console.print(&quot;-- &quot;)</span>
<span class="hl com">            else</span>
<span class="hl com">               for (val k &lt;- Iterator.range(0,Piece.size)){</span>
<span class="hl com">                  if (cells(k) == c) Console.printf(&quot; {0,number,0} &quot;)(k)</span>
<span class="hl com">               }</span>
<span class="hl com">         }</span>
<span class="hl com">         Console.println(&quot;&quot;)</span>
<span class="hl com">      }</span>
<span class="hl com">      Console.println(&quot;&quot;)</span>
<span class="hl com">   }</span>
<span class="hl com">*/</span>
<span class="hl sym">}</span>





<span class="hl slc">// Cell.scala</span>

<span class="hl kwa">object</span> Cell <span class="hl sym">{</span>
   <span class="hl kwa">val</span> NW <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwa">val</span> NE <span class="hl sym">=</span> <span class="hl num">1</span>
   <span class="hl kwa">val</span> W  <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> <span class="hl kwa">val</span> E  <span class="hl sym">=</span> <span class="hl num">3</span>
   <span class="hl kwa">val</span> SW <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span> <span class="hl kwa">val</span> SE <span class="hl sym">=</span> <span class="hl num">5</span>

   <span class="hl kwa">val</span> sides <span class="hl sym">=</span> <span class="hl num">6</span>
<span class="hl sym">}</span>

<span class="hl kwa">abstract class</span> Cell <span class="hl sym">{</span>
   <span class="hl kwa">var</span> marked <span class="hl sym">=</span> false

   <span class="hl kwa">def</span> mark<span class="hl sym">() =</span> marked <span class="hl sym">=</span> true
   <span class="hl kwa">def</span> unmark<span class="hl sym">() =</span> marked <span class="hl sym">=</span> false
<span class="hl sym">}</span>




<span class="hl slc">// BoardCell.scala</span>

<span class="hl kwa">final class</span> BoardCell<span class="hl sym">(</span>_number<span class="hl sym">:</span> Int<span class="hl sym">)</span> <span class="hl kwa">extends</span> Cell <span class="hl sym">{</span>
   <span class="hl kwa">val</span> next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>BoardCell<span class="hl sym">](</span>Cell<span class="hl sym">.</span>sides<span class="hl sym">)</span>
   <span class="hl kwa">val</span> number <span class="hl sym">=</span> _number
   <span class="hl kwa">var</span> piece<span class="hl sym">:</span> Piece <span class="hl sym">=</span> _

   <span class="hl kwa">def</span> isEmpty<span class="hl sym">() =</span> piece <span class="hl sym">==</span> null
   <span class="hl kwa">def</span> empty<span class="hl sym">() =</span> piece <span class="hl sym">=</span> null

   <span class="hl kwa">def</span> contiguousEmptyCells<span class="hl sym">():</span> Int <span class="hl sym">= {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span>marked <span class="hl sym">&amp;&amp;</span> isEmpty<span class="hl sym">){</span>
         mark
         <span class="hl kwa">var</span> count <span class="hl sym">=</span> <span class="hl num">1</span>

         <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> next<span class="hl sym">.</span>length<span class="hl sym">){</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>next<span class="hl sym">(</span>i<span class="hl sym">) !=</span> null <span class="hl sym">&amp;&amp;</span> next<span class="hl sym">(</span>i<span class="hl sym">).</span>isEmpty<span class="hl sym">)</span>
               count <span class="hl sym">=</span> count <span class="hl sym">+</span> next<span class="hl sym">(</span>i<span class="hl sym">).</span>contiguousEmptyCells
            i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
         <span class="hl sym">}</span>

         count <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span> <span class="hl num">0</span> <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>




<span class="hl slc">// PieceCell.scala</span>

<span class="hl kwa">final class</span> PieceCell <span class="hl kwa">extends</span> Cell <span class="hl sym">{</span>
   <span class="hl kwa">val</span> next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span>PieceCell<span class="hl sym">](</span>Cell<span class="hl sym">.</span>sides<span class="hl sym">)</span>

   <span class="hl kwa">def</span> flip <span class="hl sym">= {</span>
      <span class="hl kwa">var</span> swap <span class="hl sym">=</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> swap

      swap <span class="hl sym">=</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> swap

      swap <span class="hl sym">=</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> swap
   <span class="hl sym">}</span>

   <span class="hl kwa">def</span> rotate <span class="hl sym">= {</span>
      <span class="hl kwa">var</span> swap <span class="hl sym">=</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>E<span class="hl sym">) =</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NE<span class="hl sym">) =</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>NW<span class="hl sym">) =</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>W<span class="hl sym">) =</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SW<span class="hl sym">) =</span> next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">)</span>
      next<span class="hl sym">(</span>Cell<span class="hl sym">.</span>SE<span class="hl sym">) =</span> swap
   <span class="hl sym">}</span>
<span class="hl sym">}</span>




