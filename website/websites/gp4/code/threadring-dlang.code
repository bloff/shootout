<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Alexander Suhoverhov</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">:</span> writef<span class="hl sym">;</span>
<span class="hl kwa">import</span> <span class="hl kwc">str</span> <span class="hl sym">=</span> std<span class="hl sym">.</span>string<span class="hl sym">:</span> toString<span class="hl sym">;</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>thread <span class="hl sym">:</span> Thread<span class="hl sym">;</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>conv<span class="hl sym">:</span> toInt<span class="hl sym">;</span>

<span class="hl kwa">const</span> NUM_THREADS <span class="hl sym">=</span> <span class="hl num">503</span><span class="hl sym">;</span>

<span class="hl kwa">int</span> n<span class="hl sym">;</span>

bool finished <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>

<span class="hl kwa">alias char</span><span class="hl sym">[]</span> string<span class="hl sym">;</span>

<span class="hl kwa">class</span> MessageThread<span class="hl sym">:</span> Thread <span class="hl sym">{</span>
   MessageThread next_<span class="hl sym">;</span>
   <span class="hl kwa">int</span> message_<span class="hl sym">;</span>
   string name_<span class="hl sym">;</span>

   <span class="hl kwa">this</span><span class="hl sym">(</span>string name<span class="hl sym">) {</span>
      <span class="hl kwa">super</span><span class="hl sym">();</span>
      name_ <span class="hl sym">=</span> name<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   MessageThread <span class="hl kwd">next</span><span class="hl sym">(</span>MessageThread n<span class="hl sym">) {</span>
      <span class="hl kwa">return</span> next_ <span class="hl sym">=</span> n<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   MessageThread <span class="hl kwd">next</span><span class="hl sym">() {</span>
      <span class="hl kwa">return</span> next_<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">void</span> <span class="hl kwd">message</span><span class="hl sym">(</span><span class="hl kwa">int</span> m<span class="hl sym">) {</span>
      message_ <span class="hl sym">=</span> m<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">int</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
      <span class="hl kwa">while</span><span class="hl sym">(!</span>finished<span class="hl sym">) {</span>
         <span class="hl kwa">while</span><span class="hl sym">(</span>message_ <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp; !</span>finished<span class="hl sym">) {</span>
            yield<span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>finished<span class="hl sym">)</span>
            <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

         <span class="hl kwa">if</span><span class="hl sym">(</span>message_ <span class="hl sym">==</span> n<span class="hl sym">) {</span>
            finished <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
            <span class="hl kwd">writef</span><span class="hl sym">(</span>name_<span class="hl sym">);</span>
            <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">auto</span> m <span class="hl sym">=</span> message_<span class="hl sym">;</span>
         message_ <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         next_<span class="hl sym">.</span><span class="hl kwd">message</span><span class="hl sym">(</span>m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span>string<span class="hl sym">[]</span> args<span class="hl sym">) {</span>

   n <span class="hl sym">=</span> <span class="hl kwd">toInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>

   <span class="hl kwa">auto</span> head <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MessageThread</span><span class="hl sym">(</span><span class="hl str">&quot;1&quot;</span><span class="hl sym">);</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">auto</span> tail <span class="hl sym">=</span> head<span class="hl sym">;</span>

      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">auto</span> i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> NUM_THREADS<span class="hl sym">; ++</span>i<span class="hl sym">) {</span>
         tail<span class="hl sym">.</span>next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MessageThread</span><span class="hl sym">(</span><span class="hl kwd">toString</span><span class="hl sym">(</span>i<span class="hl sym">));</span>
         tail <span class="hl sym">=</span> tail<span class="hl sym">.</span>next<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      tail<span class="hl sym">.</span>next <span class="hl sym">=</span> head<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">auto</span> current <span class="hl sym">=</span> head<span class="hl sym">;</span>
   <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> NUM_THREADS<span class="hl sym">; ++</span>i<span class="hl sym">) {</span>
      current<span class="hl sym">.</span>start<span class="hl sym">;</span>
      current <span class="hl sym">=</span> current<span class="hl sym">.</span>next<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   head<span class="hl sym">.</span><span class="hl kwd">message</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>

   <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> NUM_THREADS<span class="hl sym">; ++</span>i<span class="hl sym">) {</span>
      current<span class="hl sym">.</span><span class="hl kwc">wait</span><span class="hl sym">;</span>
      current <span class="hl sym">=</span> current<span class="hl sym">.</span>next<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
