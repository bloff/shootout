<span class="com">(* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Matías Giovannini</span>
<span class="com">*)</span>

<span class="kwa">let</span> length <span class="sym">=</span> <span class="num">100</span>

<span class="kwa">let</span> perm     <span class="sym">=</span> Array.make length <span class="num">0</span>
<span class="kwa">and</span> perm1    <span class="sym">=</span> Array.make length <span class="num">0</span>
<span class="kwa">and</span> number   <span class="sym">=</span> Array.make length <span class="num">0</span>
<span class="kwa">and</span> perm_max <span class="sym">=</span> Array.make length <span class="num">0</span>

<span class="kwa">let rec</span> flip inversions <span class="sym">=</span>
   <span class="kwa">let</span> k <span class="sym">=</span> perm.<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">in</span>
   <span class="kwa">if</span> k <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> inversions <span class="kwa">else begin</span>
      <span class="kwa">let</span> m <span class="sym">= (</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">lsr</span> <span class="num">1</span> <span class="kwa">in</span>
      <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> m <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
         <span class="kwa">let</span> temp <span class="sym">=</span> perm.<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">in</span>
         perm.<span class="sym">(</span>i<span class="sym">) &lt;-</span> perm.<span class="sym">(</span>k <span class="sym">-</span> i<span class="sym">);</span>
         perm.<span class="sym">(</span>k <span class="sym">-</span> i<span class="sym">) &lt;-</span> temp
      <span class="kwa">done</span><span class="sym">;</span>
      <span class="kwd">flip</span> <span class="sym">(</span>inversions <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
   <span class="kwa">end</span>

<span class="kwa">let</span> fannkuch n <span class="sym">=</span>
   <span class="kwa">let</span> last <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span> <span class="kwa">in</span>
   <span class="kwa">let</span> maxsofar <span class="sym">=</span> <span class="kwd">ref</span> <span class="sym">(-</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">in</span>

   <span class="kwa">let rec</span> inner r t <span class="sym">=</span>
      <span class="kwa">if</span> r <span class="sym">!=</span> n <span class="kwa">then begin</span>
         <span class="kwa">let</span> k <span class="sym">=</span> perm1.<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">in</span>
         <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> r <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span> perm1.<span class="sym">(</span>i<span class="sym">) &lt;-</span> perm1.<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
         perm1.<span class="sym">(</span>r<span class="sym">) &lt;-</span> k<span class="sym">;</span>
         <span class="kwa">let</span> i <span class="sym">=</span> number.<span class="sym">(</span>r<span class="sym">) -</span> <span class="num">1</span> <span class="kwa">in</span>
         number.<span class="sym">(</span>r<span class="sym">) &lt;-</span> i<span class="sym">;</span>
         <span class="kwa">if</span> i <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> <span class="kwd">inner</span> <span class="sym">(</span>r<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> t <span class="kwa">else</span> outer <span class="kwd">r</span> <span class="sym">(</span>t<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
      <span class="kwa">end</span>

   <span class="kwa">and</span> outer r t <span class="sym">=</span>
      <span class="kwa">if</span> t <span class="sym">&lt;</span> <span class="num">30</span> <span class="kwa">then begin</span>
         <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> last <span class="kwa">do</span> <span class="kwd">print_int</span> <span class="sym">(</span>perm1.<span class="sym">(</span>i<span class="sym">) +</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
         <span class="kwd">print_newline</span> <span class="sym">()</span>
      <span class="kwa">end</span><span class="sym">;</span>
      <span class="kwa">for</span> i <span class="sym">=</span> r <span class="kwa">downto</span> <span class="num">2</span> <span class="kwa">do</span> number.<span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">) &lt;-</span> i <span class="kwa">done</span><span class="sym">;</span>
      <span class="kwa">if</span> perm1.<span class="sym">(</span><span class="num">0</span><span class="sym">) !=</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> perm1.<span class="sym">(</span>last<span class="sym">) !=</span> last <span class="kwa">then begin</span>
         <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> last <span class="kwa">do</span> perm.<span class="sym">(</span>i<span class="sym">) &lt;-</span> perm1.<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
         <span class="kwa">let</span> inversions <span class="sym">=</span> flip <span class="num">0</span> <span class="kwa">in</span>
         <span class="kwa">if</span> <span class="sym">!</span>maxsofar <span class="sym">&lt;</span> inversions <span class="kwa">then begin</span>
            maxsofar <span class="sym">:=</span> inversions<span class="sym">;</span>
            <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> last <span class="kwa">do</span> perm_max.<span class="sym">(</span>i<span class="sym">) &lt;-</span> perm1.<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">done</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span><span class="sym">;</span>
      inner <span class="num">1</span> t
   <span class="kwa">in</span>

   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> last <span class="kwa">do</span> perm1.<span class="sym">(</span>i<span class="sym">) &lt;-</span> i <span class="kwa">done</span><span class="sym">;</span>
   outer n <span class="num">0</span><span class="sym">;</span>
   <span class="sym">!</span>maxsofar

<span class="kwa">let</span> <span class="sym">() =</span>
   <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> <span class="kwd">int_of_string</span> <span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">7</span> <span class="kwa">in</span>
   Printf.printf <span class="str">&quot;Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwd">n</span> <span class="sym">(</span>fannkuch n<span class="sym">);</span>
   exit <span class="num">0</span>
