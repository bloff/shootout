<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   cribbed from Kannan Goundan's Scala #2 program</span>
<span class="com">*/</span>

<span class="kwa">class</span> TreeNode <span class="sym">{</span>
   <span class="sym">?</span>TreeNode left <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
   <span class="sym">?</span>TreeNode right <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
   <span class="kwb">int</span> item<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> check<span class="sym">(?</span>TreeNode tree<span class="sym">) =</span>
   tree <span class="sym">==</span> <span class="kwa">null</span> <span class="sym">?</span> <span class="num">0</span> <span class="sym">:</span> tree<span class="sym">.</span>item <span class="sym">+</span> check<span class="sym">(</span>tree<span class="sym">.</span>left<span class="sym">) -</span> check<span class="sym">(</span>tree<span class="sym">.</span>right<span class="sym">);</span>

<span class="sym">?</span>TreeNode makeTree<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> depth<span class="sym">) =</span>
   depth <span class="sym">==</span> <span class="num">0</span>
      <span class="sym">?</span> <span class="kwa">null</span>
      <span class="sym">:</span> <span class="kwa">new</span> TreeNode<span class="sym">(</span>
         left<span class="sym">:</span> makeTree<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">),</span>
         right<span class="sym">:</span> makeTree<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">),</span>
         item<span class="sym">:</span> i<span class="sym">);</span>


<span class="kwa">let</span> <span class="kwb">int</span> minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>

<span class="kwb">void</span> main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">){</span>
   <span class="kwa">let</span> n <span class="sym">=</span> Integer<span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
   <span class="kwa">let</span> maxDepth <span class="sym">=</span> Math<span class="sym">.</span>max<span class="sym">(</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">);</span>
   <span class="kwa">let</span> stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

   print<span class="sym">(</span><span class="str">&quot;stretch tree&quot;</span><span class="sym">,</span> stretchDepth<span class="sym">,</span> makeTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>stretchDepth<span class="sym">).</span>check<span class="sym">);</span>

   <span class="kwa">let</span> longLivedTree <span class="sym">=</span> makeTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">);</span>

   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> depth<span class="sym">=</span>minDepth<span class="sym">;</span> depth<span class="sym">&lt;=</span>maxDepth<span class="sym">;</span> depth<span class="sym">+=</span><span class="num">2</span><span class="sym">){</span>
      <span class="kwa">let</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);</span>

      <span class="kwa">var</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>iterations<span class="sym">;</span> i<span class="sym">++)</span>
         sum <span class="sym">+=</span> makeTree<span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">).</span>check <span class="sym">+</span> makeTree<span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">).</span>check<span class="sym">;</span>

      print<span class="sym">(</span>iterations<span class="sym">*</span><span class="num">2</span> <span class="sym">+</span> <span class="str">&quot;\t trees&quot;</span><span class="sym">,</span> depth<span class="sym">,</span> sum<span class="sym">);</span>
   <span class="sym">}</span>

   print<span class="sym">(</span><span class="str">&quot;long lived tree&quot;</span><span class="sym">,</span> maxDepth<span class="sym">,</span> longLivedTree<span class="sym">.</span>check<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> print<span class="sym">(</span>String name<span class="sym">,</span> <span class="kwb">int</span> depth<span class="sym">,</span> <span class="kwb">int</span> check<span class="sym">) =</span>
   println<span class="sym">(</span>name <span class="sym">+</span> <span class="str">&quot; of depth &quot;</span> <span class="sym">+</span> depth <span class="sym">+</span> <span class="str">&quot;\t check: &quot;</span> <span class="sym">+</span> check<span class="sym">);</span>
