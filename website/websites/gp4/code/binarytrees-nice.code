<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   cribbed from Kannan Goundan's Scala #2 program</span>
<span class="hl com">*/</span>

<span class="hl kwa">class</span> <span class="hl kwc">TreeNode</span> <span class="hl sym">{</span>
   ?<span class="hl kwc">TreeNode</span> left <span class="hl sym">=</span> null<span class="hl sym">;</span>
   ?<span class="hl kwc">TreeNode</span> right <span class="hl sym">=</span> null<span class="hl sym">;</span>
   <span class="hl kwb">int</span> item<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> check<span class="hl sym">(</span>?<span class="hl kwc">TreeNode</span> tree<span class="hl sym">) =</span>
   tree <span class="hl sym">==</span> null ? <span class="hl num">0</span> <span class="hl sym">:</span> tree<span class="hl sym">.</span>item <span class="hl sym">+</span> check<span class="hl sym">(</span>tree<span class="hl sym">.</span>left<span class="hl sym">) -</span> check<span class="hl sym">(</span>tree<span class="hl sym">.</span>right<span class="hl sym">);</span>

?<span class="hl kwc">TreeNode</span> makeTree<span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">) =</span>
   depth <span class="hl sym">==</span> <span class="hl num">0</span>
      ? <span class="hl kwa">new</span> <span class="hl kwc">TreeNode</span><span class="hl sym">(</span>item<span class="hl sym">:</span> i<span class="hl sym">)</span>
      <span class="hl sym">:</span> <span class="hl kwa">new</span> <span class="hl kwc">TreeNode</span><span class="hl sym">(</span>
         left<span class="hl sym">:</span> makeTree<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
         right<span class="hl sym">:</span> makeTree<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
         item<span class="hl sym">:</span> i<span class="hl sym">);</span>


<span class="hl kwa">let</span> <span class="hl kwb">int</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
   <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
   <span class="hl kwa">let</span> maxDepth <span class="hl sym">=</span> <span class="hl kwc">Math</span><span class="hl sym">.</span>max<span class="hl sym">(</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> n<span class="hl sym">);</span>
   <span class="hl kwa">let</span> stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>

   print<span class="hl sym">(</span><span class="hl str">&quot;stretch tree&quot;</span><span class="hl sym">,</span> stretchDepth<span class="hl sym">,</span> makeTree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>stretchDepth<span class="hl sym">).</span>check<span class="hl sym">);</span>

   <span class="hl kwa">let</span> longLivedTree <span class="hl sym">=</span> makeTree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>maxDepth<span class="hl sym">);</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> depth<span class="hl sym">=</span>minDepth<span class="hl sym">;</span> depth<span class="hl sym">&lt;=</span>maxDepth<span class="hl sym">;</span> depth<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">){</span>
      <span class="hl kwa">let</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>

      var sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>iterations<span class="hl sym">;</span> i<span class="hl sym">++)</span>
         sum <span class="hl sym">+=</span> makeTree<span class="hl sym">(</span>i<span class="hl sym">,</span>depth<span class="hl sym">).</span>check <span class="hl sym">+</span> makeTree<span class="hl sym">(-</span>i<span class="hl sym">,</span>depth<span class="hl sym">).</span>check<span class="hl sym">;</span>

      print<span class="hl sym">(</span>iterations<span class="hl sym">*</span><span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees&quot;</span><span class="hl sym">,</span> depth<span class="hl sym">,</span> sum<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   print<span class="hl sym">(</span><span class="hl str">&quot;long lived tree&quot;</span><span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> longLivedTree<span class="hl sym">.</span>check<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> print<span class="hl sym">(</span><span class="hl kwc">String</span> name<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">,</span> <span class="hl kwb">int</span> check<span class="hl sym">) =</span>
   println<span class="hl sym">(</span>name <span class="hl sym">+</span> <span class="hl str">&quot; of depth &quot;</span> <span class="hl sym">+</span> depth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> check<span class="hl sym">);</span>
