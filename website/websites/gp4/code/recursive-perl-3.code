<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># recursive test, by Justin Ossevoort, Mar 27 2006</span>

<span class="slc"># This is the C-like version</span>

<span class="slc">### Don't use warnings because at N=3 the Ack() method will</span>
<span class="slc">### start complaining about deep recursion (though it'll still</span>
<span class="slc">### function as expected)</span>

<span class="kwa">use</span> strict<span class="sym">;</span>
<span class="slc"># use warnings;</span>

<span class="kwa">sub</span> Ack
<span class="sym">{</span>
	<span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$x</span><span class="sym">,</span> <span class="kwb">$y</span><span class="sym">) =</span> <span class="kwb">&#64;_</span><span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$x</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
	<span class="sym">{</span>
		<span class="kwa">return</span> <span class="kwb">$y</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">elsif</span> <span class="sym">(</span><span class="kwb">$y</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
	<span class="sym">{</span>
		<span class="kwa">return</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">$x</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">else</span>
	<span class="sym">{</span>
		<span class="kwa">return</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">$x</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">$x</span><span class="sym">,</span> <span class="kwb">$y</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">));</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">sub</span> Fib
<span class="sym">{</span>
	<span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$n</span><span class="sym">) =</span> <span class="kwb">&#64;_</span><span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$n</span> <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span>
	<span class="sym">{</span>
		<span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">else</span>
	<span class="sym">{</span>
		<span class="kwa">return</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="kwb">$n</span> <span class="sym">-</span> <span class="num">2</span><span class="sym">) +</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="kwb">$n</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">sub</span> Tak
<span class="sym">{</span>
	<span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$x</span><span class="sym">,</span> <span class="kwb">$y</span><span class="sym">,</span> <span class="kwb">$z</span><span class="sym">) =</span> <span class="kwb">&#64;_</span><span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$y</span> <span class="sym">&lt;</span> <span class="kwb">$x</span><span class="sym">)</span>
	<span class="sym">{</span>
		<span class="kwa">return</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">$x</span> <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> <span class="kwb">$y</span><span class="sym">,</span> <span class="kwb">$z</span><span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">$y</span> <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> <span class="kwb">$z</span><span class="sym">,</span> <span class="kwb">$x</span><span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">$z</span> <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> <span class="kwb">$x</span><span class="sym">,</span> <span class="kwb">$y</span><span class="sym">));</span>
	<span class="sym">}</span>
	<span class="kwa">else</span>
	<span class="sym">{</span>
		<span class="kwa">return</span> <span class="kwb">$z</span><span class="sym">;</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">0</span><span class="sym">;</span>
printf <span class="str">&quot;Ack(3,%d): %d</span><span class="esc">\n</span><span class="str">Fib(%.1f): %.1f</span><span class="esc">\n</span><span class="str">Tak(%d,%d,%d): %d</span><span class="esc">\n</span><span class="str">Fib(3): %d</span><span class="esc">\n</span><span class="str">Tak(3.0,2.0,1.0): %.1f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	<span class="kwb">$n</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">+</span><span class="num">1</span><span class="sym">),</span>
	<span class="num">28.0</span> <span class="sym">+</span> <span class="kwb">$n</span><span class="sym">,</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="num">28.0</span> <span class="sym">+</span> <span class="kwb">$n</span><span class="sym">),</span>
	<span class="kwb">$n</span> <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> <span class="kwb">$n</span> <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">,</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">$n</span> <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> <span class="kwb">$n</span> <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">),</span>
	<span class="kwd">Fib</span><span class="sym">(</span><span class="num">3</span><span class="sym">),</span>
	<span class="kwd">Tak</span><span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">)</span>
<span class="sym">;</span>
