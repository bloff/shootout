
REBOL <span class="sym">[</span>
  Title<span class="sym">:</span> recursive
  Name<span class="sym">: {</span>The Great Computer Language Shootout<span class="sym">}</span>
  Home<span class="sym">: {</span>http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/}</span>
  Author<span class="sym">: {</span>Anthony Borla<span class="sym">}</span>
  Date<span class="sym">:</span> <span class="num">2006</span><span class="sym">-</span><span class="num">02</span><span class="sym">-</span><span class="num">27</span>
  Version<span class="sym">:</span> <span class="num">1.0</span>
  Notes<span class="sym">:</span> Code based on <span class="sym">/</span> inspired by existing<span class="sym">,</span> relevant Shootout submissions
<span class="sym">]</span>

<span class="sym">; -------------</span>

ack<span class="sym">:</span> func <span class="sym">[</span>x y<span class="sym">] [</span>
  <span class="kwa">if</span> x <span class="sym">==</span> <span class="num">0</span> <span class="sym">[</span><span class="kwa">return</span> y <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>
  <span class="kwa">if</span> y <span class="sym">==</span> <span class="num">0</span> <span class="sym">[</span><span class="kwa">return</span> <span class="sym">(</span>ack x <span class="sym">-</span> <span class="num">1 1</span><span class="sym">)]</span>
  <span class="kwa">return</span> <span class="sym">(</span>ack x <span class="sym">-</span> <span class="kwd">1</span> <span class="sym">(</span>ack x y <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
<span class="sym">]</span>

<span class="sym">; -------------</span>

fib<span class="sym">:</span> func <span class="sym">[</span>n<span class="sym">] [</span>
  <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="sym">[</span><span class="kwa">return</span> <span class="num">1</span><span class="sym">]</span>
  <span class="kwa">return</span> <span class="sym">(</span>fib n <span class="sym">-</span> <span class="num">2</span><span class="sym">) + (</span>fib n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
<span class="sym">]</span>

<span class="sym">; -------------</span>

tak<span class="sym">:</span> func <span class="sym">[</span>x y z<span class="sym">] [</span>
  <span class="kwa">if</span> y <span class="sym">&lt;</span> x <span class="sym">[</span><span class="kwa">return</span> <span class="sym">(</span><span class="kwd">tak</span> <span class="sym">(</span>tak x <span class="sym">-</span> <span class="num">1.0</span> y z<span class="sym">) (</span>tak y <span class="sym">-</span> <span class="num">1.0</span> z x<span class="sym">) (</span>tak z <span class="sym">-</span> <span class="num">1.0</span> x y<span class="sym">))]</span>
  <span class="kwa">return</span> z
<span class="sym">]</span>

<span class="sym">; -------------</span>

N<span class="sym">:</span> either N<span class="sym">:</span> system<span class="sym">/</span>script<span class="sym">/</span>args <span class="sym">[</span>to<span class="sym">-</span>integer N<span class="sym">][</span><span class="num">1</span><span class="sym">]</span>

print rejoin <span class="sym">[</span><span class="str">&quot;Ack(3,&quot;</span> N <span class="str">&quot;): &quot;</span> <span class="sym">(</span>ack <span class="num">3</span> N<span class="sym">)]</span>
print rejoin <span class="sym">[</span><span class="str">&quot;Fib(&quot;</span> <span class="sym">(</span><span class="num">27.0</span> <span class="sym">+</span> N<span class="sym">)</span> <span class="str">&quot;): &quot;</span> round<span class="sym">/</span><span class="kwd">to</span> <span class="sym">(</span>fib <span class="num">27.0</span> <span class="sym">+</span> N<span class="sym">)</span> <span class="num">0.1</span><span class="sym">]</span>

N<span class="sym">:</span> N <span class="sym">-</span> <span class="num">1</span>
print rejoin <span class="sym">[</span><span class="str">&quot;Tak(&quot;</span> <span class="sym">(</span>N <span class="sym">*</span> <span class="num">3</span><span class="sym">)</span> <span class="str">&quot;,&quot;</span> <span class="sym">(</span>N <span class="sym">*</span> <span class="num">2</span><span class="sym">)</span> <span class="str">&quot;,&quot;</span> N <span class="str">&quot;): &quot;</span> round<span class="sym">/</span><span class="kwd">to</span> <span class="sym">(</span>tak N <span class="sym">*</span> <span class="num">3</span> N <span class="sym">*</span> <span class="num">2</span> N<span class="sym">)</span> <span class="num">1</span><span class="sym">]</span>

print rejoin <span class="sym">[</span><span class="str">&quot;Fib(3): &quot;</span> <span class="sym">(</span>fib <span class="num">3</span><span class="sym">)]</span>
print rejoin <span class="sym">[</span><span class="str">&quot;Tak(3.0,2.0,1.0): &quot;</span> round<span class="sym">/</span><span class="kwd">to</span> <span class="sym">(</span>tak <span class="num">3.0 2.0 1.0</span><span class="sym">)</span> <span class="num">0.1</span><span class="sym">]</span>

quit<span class="sym">/</span><span class="kwa">return</span> <span class="num">0</span>

