<span class="slc">--
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- Mandelbrot for SE by jos&eacute;
</span><span class="slc">--
</span>
<span class="kwa">class</span> MANDELBROT creation make <span class="kwa">feature

</span>	make <span class="kwa">is local
</span>		size<span class="sym">,</span> i<span class="sym">,</span> iter<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">:</span> <span class="kwb">INTEGER
</span>		zr<span class="sym">,</span> zi<span class="sym">,</span> cr<span class="sym">,</span> ci<span class="sym">,</span> pr<span class="sym">,</span> pi<span class="sym">,</span> limit<span class="sym">:</span> <span class="kwb">DOUBLE
</span>		stop<span class="sym">,</span> gone<span class="sym">:</span> <span class="kwb">BOOLEAN
</span>		bit<span class="sym">,</span> bit_accu<span class="sym">:</span> INTEGER_8
	<span class="kwa">do
		check</span> argument_count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">end
		check</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer <span class="kwa">end
</span>		size <span class="sym">:=</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
		<span class="kwa">check</span> size <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">end

</span>		<span class="slc">-- write header
</span>		std_output.put_string<span class="sym">(</span><span class="str">&quot;P4%N&quot;</span><span class="sym">)
</span>		std_output.put_string<span class="sym">(</span>argument<span class="sym">(</span><span class="num">1</span><span class="sym">))
</span>		std_output.put_character<span class="sym">(</span><span class="str">' '</span><span class="sym">)
</span>		std_output.put_string<span class="sym">(</span>argument<span class="sym">(</span><span class="num">1</span><span class="sym">))
</span>		std_output.put_character<span class="sym">(</span><span class="str">'%N'</span><span class="sym">)

</span>		<span class="slc">-- compute mandelbrot's bitmap
</span>		limit <span class="sym">:=</span> <span class="num">4.0
</span>		iter <span class="sym">:=</span> <span class="num">50
</span>		bit <span class="sym">:=</span> <span class="num">0x80
</span>		<span class="kwa">from</span> y<span class="sym">:=</span><span class="num">0</span> until y<span class="sym">=</span>size <span class="kwa">loop
</span>			ci <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> y <span class="sym">/</span> size <span class="num">- 1.0

</span>			<span class="kwa">from</span> x<span class="sym">:=</span><span class="num">0</span> until x<span class="sym">=</span>size <span class="kwa">loop
</span>				cr <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> x <span class="sym">/</span> size <span class="num">- 1.5

</span>				zr<span class="sym">:=</span><span class="num">0</span> zi<span class="sym">:=</span><span class="num">0</span> pr<span class="sym">:=</span><span class="num">0</span> pi<span class="sym">:=</span><span class="num">0
</span>				<span class="kwa">from</span> i<span class="sym">:=</span><span class="num">0</span> stop<span class="sym">:=</span><span class="kwa">False</span> until stop <span class="kwa">loop
</span>					zi <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> zr <span class="sym">*</span> zi <span class="sym">+</span> ci
					zr <span class="sym">:=</span> pr <span class="sym">-</span> pi <span class="sym">+</span> cr
					pi <span class="sym">:=</span> zi <span class="sym">*</span> zi
					pr <span class="sym">:=</span> zr <span class="sym">*</span> zr
					<span class="kwa">if</span> pi<span class="sym">+</span>pr<span class="sym">&gt;</span>limit <span class="kwa">then
</span>						stop <span class="sym">:=</span> <span class="kwa">True
</span>						gone <span class="sym">:=</span> <span class="kwa">True
					else
</span>						i <span class="sym">:=</span> i<span class="sym">+</span><span class="num">1
</span>						stop <span class="sym">:=</span> i <span class="sym">=</span> iter
					<span class="kwa">end
				end

				if</span> gone <span class="kwa">then
</span>					gone <span class="sym">:=</span> <span class="kwa">False
				else
</span>					bit_accu <span class="sym">:=</span> bit_accu <span class="sym">|</span> bit
				<span class="kwa">end

				if</span> bit <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then
</span>					std_output.put_character<span class="sym">(</span>bit_accu.to_character<span class="sym">)
</span>					bit_accu <span class="sym">:=</span> <span class="num">0
</span>					bit <span class="sym">:=</span> <span class="num">0x80
</span>				<span class="kwa">else
</span>					bit <span class="sym">:=</span> bit <span class="sym">|&gt;&gt;&gt;</span> <span class="num">1
</span>				<span class="kwa">end
</span>				x <span class="sym">:=</span> x<span class="sym">+</span><span class="num">1
</span>			<span class="kwa">end

			if</span> bit <span class="sym">/=</span> <span class="num">0x80</span> <span class="kwa">then
</span>				std_output.put_character<span class="sym">(</span>bit_accu.to_character<span class="sym">)
</span>				bit_accu <span class="sym">:=</span> <span class="num">0
</span>				bit <span class="sym">:=</span> <span class="num">0x80
</span>			<span class="kwa">end

</span>			y <span class="sym">:=</span> y<span class="sym">+</span><span class="num">1
</span>		<span class="kwa">end
	end
end
</span>
