<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * Contributed by Paul Kitchin</span>
<span class="hl com"> */</span>


<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;sstream&gt;</span>

<span class="hl kwc">class</span> Tree
<span class="hl sym">{</span>

      <span class="hl kwb">struct</span> Node
      <span class="hl sym">{</span>

         <span class="hl kwd">Node</span><span class="hl sym">(</span><span class="hl kwb">int</span> value<span class="hl sym">,</span> std<span class="hl sym">::</span><span class="hl kwb">size_t</span> depth<span class="hl sym">,</span> std<span class="hl sym">::</span><span class="hl kwb">size_t</span> index<span class="hl sym">,</span> Node <span class="hl sym">*</span> nodes<span class="hl sym">,</span> std<span class="hl sym">::</span><span class="hl kwb">size_t</span> max<span class="hl sym">)</span>
            <span class="hl sym">:</span>
            <span class="hl kwd">value</span><span class="hl sym">(</span>value<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>index <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">&lt;</span> max<span class="hl sym">)</span>
            <span class="hl sym">{</span>
               <span class="hl kwa">new</span> <span class="hl sym">(</span>nodes <span class="hl sym">+</span> index <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwd">Node</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> value <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> index <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> nodes<span class="hl sym">,</span> max<span class="hl sym">);</span>
               <span class="hl kwa">new</span> <span class="hl sym">(</span>nodes <span class="hl sym">+</span> index <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwd">Node</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> value<span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> index <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> nodes<span class="hl sym">,</span> max<span class="hl sym">);</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>

         <span class="hl kwb">int</span> <span class="hl kwd">check</span><span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwb">size_t</span> index<span class="hl sym">,</span> Node <span class="hl sym">*</span> nodes<span class="hl sym">,</span> std<span class="hl sym">::</span><span class="hl kwb">size_t</span> max<span class="hl sym">)</span> <span class="hl kwb">const</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>index <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">&lt;</span> max<span class="hl sym">)</span>
            <span class="hl sym">{</span>
               <span class="hl kwa">return</span> nodes<span class="hl sym">[</span>index <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">].</span><span class="hl kwd">check</span><span class="hl sym">(</span>index <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> nodes<span class="hl sym">,</span> max<span class="hl sym">) +</span> value <span class="hl sym">-</span> nodes<span class="hl sym">[</span>index <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">].</span><span class="hl kwd">check</span><span class="hl sym">(</span>index <span class="hl sym">*</span> <span class="hl num">2</span> <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> nodes<span class="hl sym">,</span> max<span class="hl sym">);</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">return</span> value<span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl kwb">int</span> value<span class="hl sym">;</span>

      <span class="hl sym">};</span>

   <span class="hl kwc">public</span><span class="hl sym">:</span>

      <span class="hl kwd">Tree</span><span class="hl sym">(</span><span class="hl kwb">int</span> value<span class="hl sym">,</span> std<span class="hl sym">::</span><span class="hl kwb">size_t</span> depth<span class="hl sym">)</span>
         <span class="hl sym">:</span>
         <span class="hl kwd">size</span><span class="hl sym">((</span><span class="hl num">2</span> <span class="hl sym">&lt;&lt;</span> depth<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">),</span>
         <span class="hl kwd">nodes</span><span class="hl sym">(</span><span class="hl kwa">static_cast</span><span class="hl sym">&lt;</span> Node <span class="hl sym">* &gt;(</span><span class="hl kwc">operator</span> <span class="hl kwa">new</span><span class="hl sym">(</span>size <span class="hl sym">*</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>Node<span class="hl sym">))))</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">new</span> <span class="hl sym">(</span>nodes<span class="hl sym">)</span> <span class="hl kwd">Node</span><span class="hl sym">(</span>value<span class="hl sym">,</span> depth<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> nodes<span class="hl sym">,</span> size<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl sym">~</span><span class="hl kwd">Tree</span><span class="hl sym">()</span>
      <span class="hl sym">{</span>
         <span class="hl kwc">operator</span> <span class="hl kwa">delete</span><span class="hl sym">(</span>nodes<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwb">int</span> <span class="hl kwd">check</span><span class="hl sym">()</span> <span class="hl kwb">const</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">return</span> nodes<span class="hl sym">-&gt;</span><span class="hl kwd">check</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> nodes<span class="hl sym">,</span> size<span class="hl sym">);</span>
      <span class="hl sym">}</span>

   <span class="hl kwc">private</span><span class="hl sym">:</span>

      std<span class="hl sym">::</span><span class="hl kwb">size_t</span> size<span class="hl sym">;</span>
      Node <span class="hl sym">*</span> nodes<span class="hl sym">;</span>

<span class="hl sym">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">* *</span> argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   std<span class="hl sym">::</span><span class="hl kwb">size_t</span> user_depth <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">==</span> <span class="hl num">2</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span>istringstream <span class="hl kwd">convertor</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!(</span>convertor <span class="hl sym">&gt;&gt;</span> user_depth<span class="hl sym">) || !</span>convertor<span class="hl sym">.</span><span class="hl kwd">eof</span><span class="hl sym">())</span>
      <span class="hl sym">{</span>
         std<span class="hl sym">::</span>cerr <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Usage: &quot;</span> <span class="hl sym">&lt;&lt;</span> argv<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl str">&quot; [n]</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         std<span class="hl sym">::</span>cerr <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">n must be an integer</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   std<span class="hl sym">::</span><span class="hl kwb">size_t</span> minimum_depth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
   std<span class="hl sym">::</span><span class="hl kwb">size_t</span> maximum_depth <span class="hl sym">=</span> std<span class="hl sym">::</span><span class="hl kwd">max</span><span class="hl sym">(</span>minimum_depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> user_depth<span class="hl sym">);</span>
   <span class="hl sym">{</span>
      Tree <span class="hl kwd">tree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maximum_depth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
      std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;stretch tree of depth &quot;</span> <span class="hl sym">&lt;&lt; (</span>maximum_depth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">&lt;&lt;</span> tree<span class="hl sym">.</span><span class="hl kwd">check</span><span class="hl sym">() &lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   Tree <span class="hl kwd">long_lived_tree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maximum_depth<span class="hl sym">);</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>std<span class="hl sym">::</span><span class="hl kwb">size_t</span> depth <span class="hl sym">=</span> minimum_depth<span class="hl sym">;</span> depth <span class="hl sym">&lt;=</span> maximum_depth<span class="hl sym">;</span> depth <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maximum_depth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minimum_depth<span class="hl sym">);</span>
      <span class="hl kwb">int</span> check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iteration <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> iteration <span class="hl sym">&lt;=</span> iterations<span class="hl sym">; ++</span>iteration<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         Tree <span class="hl kwd">first</span><span class="hl sym">(</span>iteration<span class="hl sym">,</span> depth<span class="hl sym">);</span>
         Tree <span class="hl kwd">second</span><span class="hl sym">(-</span>iteration<span class="hl sym">,</span> depth<span class="hl sym">);</span>
         check <span class="hl sym">+=</span> first<span class="hl sym">.</span><span class="hl kwd">check</span><span class="hl sym">() +</span> second<span class="hl sym">.</span><span class="hl kwd">check</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt; (</span><span class="hl num">2</span> <span class="hl sym">*</span> iterations<span class="hl sym">) &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> depth <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">&lt;&lt;</span> check <span class="hl sym">&lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;long lived tree of depth &quot;</span> <span class="hl sym">&lt;&lt;</span> maximum_depth <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">&lt;&lt;</span> long_lived_tree<span class="hl sym">.</span><span class="hl kwd">check</span><span class="hl sym">() &lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
