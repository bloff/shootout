\ The Computer Language Shootout
\ http<span class="hl sym">:</span><span class="hl slc">//shootout.alioth.debian.org/</span>
\ Contributed by Ian Osgood
\ modified by Anton Ertl
\ Joshua Grams removed most of the <span class="hl kwb">double</span> cell manipulation
\  <span class="hl kwa">and</span> added island detection<span class="hl sym">.</span>

<span class="hl sym">:</span> <span class="hl kwb">enum</span> <span class="hl sym">(</span> n <span class="hl sym">-- )</span>  <span class="hl num">0</span> <span class="hl kwa">do</span> I constant loop <span class="hl sym">;</span>
<span class="hl sym">:</span> table create does<span class="hl sym">&gt; (</span> i <span class="hl sym">--</span> t<span class="hl sym">[</span>i<span class="hl sym">] )</span>  swap cells <span class="hl sym">+</span> &#64; <span class="hl sym">;</span>

<span class="hl num">7</span> <span class="hl kwb">enum</span>         E   SE   SW    W   NW   NE   STOP
table offset   <span class="hl num">1</span> <span class="hl sym">,</span>  <span class="hl num">7</span> <span class="hl sym">,</span>  <span class="hl num">6</span> <span class="hl sym">, -</span><span class="hl num">1</span> <span class="hl sym">, -</span><span class="hl num">7</span> <span class="hl sym">, -</span><span class="hl num">6</span> <span class="hl sym">,</span>    <span class="hl num">0</span> <span class="hl sym">,</span>
table rotate  SE <span class="hl sym">,</span> SW <span class="hl sym">,</span>  W <span class="hl sym">,</span> NW <span class="hl sym">,</span> NE <span class="hl sym">,</span>  E <span class="hl sym">,</span> STOP <span class="hl sym">,</span>
table reflect  E <span class="hl sym">,</span> NE <span class="hl sym">,</span> NW <span class="hl sym">,</span>  W <span class="hl sym">,</span> SW <span class="hl sym">,</span> SE <span class="hl sym">,</span> STOP <span class="hl sym">,</span>

\ paths are more easily transformable than bit masks

create path    <span class="hl num">5</span> cells allot
create offsets <span class="hl num">6</span> cells allot

<span class="hl num">1024</span> allot \ padding <span class="hl kwa">for</span> Pentium <span class="hl num">4</span> <span class="hl kwa">and</span> bigforth shortcomings

<span class="hl sym">:</span> init<span class="hl sym">-</span><span class="hl kwd">path</span> <span class="hl sym">(</span> <span class="hl num">4</span><span class="hl sym">*</span>dirs <span class="hl sym">-- )</span>
	E path <span class="hl num">5 0</span> <span class="hl kwa">do</span> tuck <span class="hl sym">!</span> cell<span class="hl sym">+</span> loop drop <span class="hl sym">;</span>
<span class="hl sym">:</span> rotate<span class="hl sym">-</span>path
	path <span class="hl num">5 0</span> <span class="hl kwa">do</span> dup &#64; rotate  over <span class="hl sym">!</span> cell<span class="hl sym">+</span> loop drop <span class="hl sym">;</span>
<span class="hl sym">:</span> reflect<span class="hl sym">-</span>path
	path <span class="hl num">5 0</span> <span class="hl kwa">do</span> dup &#64; reflect over <span class="hl sym">!</span> cell<span class="hl sym">+</span> loop drop <span class="hl sym">;</span>

<span class="hl sym">:</span> path<span class="hl sym">-</span>offsets
	<span class="hl num">0</span> offsets <span class="hl sym">!</span>
	path offsets
	<span class="hl num">5 0</span> <span class="hl kwa">do</span>
		over &#64; offset
		over &#64; <span class="hl sym">+</span>
		over cell<span class="hl sym">+ !</span>
		swap cell<span class="hl sym">+</span> swap cell<span class="hl sym">+</span>
	loop <span class="hl num">2</span>drop <span class="hl sym">;</span>
<span class="hl sym">:</span> minimum<span class="hl sym">-</span><span class="hl kwd">offset</span> <span class="hl sym">( --</span> n <span class="hl sym">)</span>
	offsets &#64;
	<span class="hl num">6 1</span> <span class="hl kwa">do</span> offsets I cells <span class="hl sym">+</span> &#64; min loop <span class="hl sym">;</span>
<span class="hl sym">:</span> normalize<span class="hl sym">-</span>offsets
	minimum<span class="hl sym">-</span>offset negate
	<span class="hl num">6 0</span> <span class="hl kwa">do</span> dup offsets I cells <span class="hl sym">+ +!</span> loop drop <span class="hl sym">;</span>
<span class="hl sym">:</span> offsets<span class="hl sym">-</span><span class="hl kwd">mask</span> <span class="hl sym">( --</span> mask <span class="hl sym">)</span>
	<span class="hl num">0</span>
	<span class="hl num">6 0</span> <span class="hl kwa">do</span>
		offsets I cells <span class="hl sym">+</span> &#64;
		<span class="hl num">1</span> swap lshift <span class="hl kwa">or</span>
	loop <span class="hl sym">;</span>

\ make <span class="hl kwa">and</span> store the twelve transformations of the path

<span class="hl sym">:</span> path<span class="hl sym">-</span><span class="hl kwd">mask</span> <span class="hl sym">( --</span> mask <span class="hl sym">)</span>  path<span class="hl sym">-</span>offsets normalize<span class="hl sym">-</span>offsets offsets<span class="hl sym">-</span>mask <span class="hl sym">;</span>
<span class="hl sym">:</span> path<span class="hl sym">-</span><span class="hl kwd">masks</span> <span class="hl sym">(</span> <span class="hl num">4</span><span class="hl sym">*</span>dirs <span class="hl sym">-- )</span>
	                       <span class="hl kwa">false</span> <span class="hl sym">,</span> \ used flag
	         init<span class="hl sym">-</span>path path<span class="hl sym">-</span>mask <span class="hl sym">,</span>
	<span class="hl num">5 0</span> <span class="hl kwa">do</span> rotate<span class="hl sym">-</span>path path<span class="hl sym">-</span>mask <span class="hl sym">,</span> loop
	      reflect<span class="hl sym">-</span>path path<span class="hl sym">-</span>mask <span class="hl sym">,</span>
	<span class="hl num">5 0</span> <span class="hl kwa">do</span> rotate<span class="hl sym">-</span>path path<span class="hl sym">-</span>mask <span class="hl sym">,</span> loop <span class="hl sym">;</span>

<span class="hl num">13</span> cells constant <span class="hl sym">/</span>piece

\  all paths start with an implicit E

create pieces
 STOP SE  E  E path<span class="hl sym">-</span>masks
 STOP NE  E SE path<span class="hl sym">-</span>masks
 STOP SW SE  E path<span class="hl sym">-</span>masks
 STOP SE SW  E path<span class="hl sym">-</span>masks
   SW  W  E SE path<span class="hl sym">-</span>masks \ one backtrack<span class="hl sym">,</span> since <span class="hl kwa">this</span> shape branches
 STOP SE NE SE path<span class="hl sym">-</span>masks
 STOP NE SE SE path<span class="hl sym">-</span>masks
 STOP  E SW SE path<span class="hl sym">-</span>masks
 STOP  E SE  E path<span class="hl sym">-</span>masks
 STOP NE SE  E path<span class="hl sym">-</span>masks

variable <span class="hl dir">#solutions</span>
create smallest <span class="hl num">64</span> allot
create largest  <span class="hl num">64</span> allot

variable board    \ high word of board<span class="hl sym">;</span> low word on stack

<span class="hl num">1024</span> allot \ padding <span class="hl kwa">for</span> Pentium <span class="hl num">4</span> <span class="hl kwa">and</span> bigforth shortcomings

<span class="hl sym">:</span> put<span class="hl sym">-</span><span class="hl kwd">piece</span> <span class="hl sym">(</span> piece shift <span class="hl sym">-- )</span>
	over pieces <span class="hl sym">- /</span>piece <span class="hl sym">/ [</span><span class="hl kwb">char</span><span class="hl sym">]</span> <span class="hl num">0</span> <span class="hl sym">+ &gt;</span><span class="hl kwd">r</span> <span class="hl sym">(</span> R<span class="hl sym">:</span> piece<span class="hl sym">-</span><span class="hl kwb">char</span> <span class="hl sym">)</span>
	here <span class="hl sym">+</span> swap &#64; <span class="hl sym">(</span> buf mask <span class="hl sym">)</span>
	begin
		dup <span class="hl num">1</span> <span class="hl kwa">and if</span> over r&#64; swap c<span class="hl sym">!</span> then
		swap <span class="hl kwb">char</span><span class="hl sym">+</span> swap <span class="hl num">2</span><span class="hl sym">/</span>
	dup <span class="hl num">0</span><span class="hl sym">=</span> until <span class="hl num">2</span>drop r<span class="hl sym">&gt;</span> drop <span class="hl sym">;</span>

\ extract solution from stack <span class="hl kwa">and</span> store at HERE
\ <span class="hl sym">(</span>non<span class="hl sym">-</span>destructive because we need the data <span class="hl kwa">for</span> backtracking<span class="hl sym">).</span>
<span class="hl sym">:</span> store<span class="hl sym">-</span><span class="hl kwd">solution</span> <span class="hl sym">(</span> pieceN shiftN <span class="hl sym">...</span> piece0 board <span class="hl sym">)</span>
	\ here <span class="hl num">64</span> <span class="hl sym">[</span><span class="hl kwb">char</span><span class="hl sym">] *</span> fill
	<span class="hl kwd">0</span> <span class="hl sym">(</span> absolute<span class="hl sym">-</span>shift <span class="hl sym">)</span>
	depth <span class="hl num">1</span><span class="hl sym">-</span> <span class="hl num">2</span> swap <span class="hl kwa">do</span>
		i pick over put<span class="hl sym">-</span>piece
		i <span class="hl num">1</span><span class="hl sym">-</span> pick <span class="hl sym">+</span>
	<span class="hl sym">-</span><span class="hl num">2</span> <span class="hl sym">+</span>loop drop <span class="hl sym">;</span>

<span class="hl sym">: .</span><span class="hl kwd">line</span> <span class="hl sym">(</span> line <span class="hl sym">--</span> line<span class="hl sym">+</span><span class="hl num">6</span> <span class="hl sym">)</span>
	<span class="hl num">5 0</span> <span class="hl kwa">do</span> dup c&#64; emit space <span class="hl kwb">char</span><span class="hl sym">+</span> loop cr <span class="hl kwb">char</span><span class="hl sym">+ ;</span>
<span class="hl sym">: .</span><span class="hl kwd">solution</span> <span class="hl sym">(</span> buffer <span class="hl sym">-- )</span>
	<span class="hl num">5 0</span> <span class="hl kwa">do</span> <span class="hl sym">.</span>line <span class="hl kwb">char</span><span class="hl sym">+</span>  space <span class="hl sym">.</span>line loop drop cr <span class="hl sym">;</span>

<span class="hl sym">:</span> <span class="hl kwd">record</span> <span class="hl sym">( [</span>st<span class="hl sym">] -- [</span>st<span class="hl sym">] )</span>
	store<span class="hl sym">-</span>solution  \ here <span class="hl sym">.</span>solution
	here <span class="hl num">64</span> smallest <span class="hl num">64</span> compare <span class="hl num">0</span><span class="hl sym">&lt;</span> <span class="hl kwa">if</span> here smallest <span class="hl num">64</span> move then
	largest <span class="hl num">64</span>  here <span class="hl num">64</span> compare <span class="hl num">0</span><span class="hl sym">&lt;</span> <span class="hl kwa">if</span> here  largest <span class="hl num">64</span> move then
	<span class="hl num">1</span> <span class="hl dir">#solutions +! ;  \ throw if #solutions == NUM</span>

\ initial board<span class="hl sym">,</span> with edges filled in
<span class="hl num">2</span> base <span class="hl sym">!</span>
<span class="hl num">0000011.000001.0000011.000001.0000011.000001.0000011.000001.0000011.00000</span>
<span class="hl num">2</span>constant init<span class="hl sym">-</span>board

\ board mask <span class="hl kwa">for</span> a hexagon with an empty center
<span class="hl num">110000101000011</span> constant empty<span class="hl sym">-</span>hex

hex
<span class="hl num">80000000</span> constant hi<span class="hl sym">-</span>bit

decimal

\ is it a single<span class="hl sym">-</span>cell island?
	\ the <span class="hl kwd">center</span> <span class="hl sym">(</span>empty<span class="hl sym">)</span> cell is <span class="hl num">7</span> bits in<span class="hl sym">.</span>
<span class="hl sym">:</span> island? <span class="hl sym">(</span> board bit <span class="hl sym">--</span> flag <span class="hl sym">)</span>  empty<span class="hl sym">-</span>hex <span class="hl sym">*</span> <span class="hl num">7</span> rshift tuck <span class="hl kwa">and</span> <span class="hl sym">= ;</span>

\ fun with bit manipulation <span class="hl sym">:)</span>
<span class="hl sym">:</span> fill<span class="hl sym">-</span><span class="hl kwd">leading</span> <span class="hl sym">(</span> u <span class="hl sym">--</span> u<span class="hl str">' )  dup 1- or ;</span>
<span class="hl str">: first-empty ( u -- bit )  dup dup 1+ or xor ;</span>
<span class="hl str"></span>
<span class="hl str"></span><span class="hl esc">\ </span><span class="hl str">return a bit-mask for the second empty cell on the board.</span>
<span class="hl str">: second ( board -- bit )  fill-leading first-empty ;</span>
<span class="hl str"></span>
<span class="hl str"></span><span class="hl esc">\ </span><span class="hl str">check two spots for single-cell islands</span>
<span class="hl str">: prune? ( board -- flag )</span>
<span class="hl str">	dup 1 island? if drop true else dup second island? then ;</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str"></span><span class="hl esc">\ </span><span class="hl str">remove filled cells at the beginning of the board</span>
<span class="hl str">: shift-board ( board -- shift board'</span> <span class="hl sym">)</span>
	<span class="hl num">0</span> swap board &#64; begin
		over <span class="hl num">1</span> <span class="hl kwa">and while</span> d2<span class="hl sym">/</span> hi<span class="hl sym">-</span>bit <span class="hl kwa">or</span>  rot <span class="hl num">1</span><span class="hl sym">+ -</span>rot
	repeat board <span class="hl sym">! ;</span>

\ restore filled cells at the beginning of the board
<span class="hl sym">:</span> unshift<span class="hl sym">-</span><span class="hl kwd">board</span> <span class="hl sym">(</span> shift board <span class="hl sym">--</span> board<span class="hl str">' )</span>
<span class="hl str">	board &#64; rot 0 ?do d2* swap 1+ swap loop board ! ;</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">: solve ( board -- board )</span>
<span class="hl str">	dup prune? if exit then</span>
<span class="hl str">	pieces  10 0 do</span>
<span class="hl str">		dup &#64; if</span>
<span class="hl str">			/piece +</span>
<span class="hl str">		else</span>
<span class="hl str">			true over ! cell+</span>        <span class="hl esc">\ </span><span class="hl str">mark used</span>
<span class="hl str">			12 0 do</span>
<span class="hl str">				2dup &#64; and 0= if</span>
<span class="hl str">					tuck &#64; xor</span>       <span class="hl esc">\ </span><span class="hl str">add piece</span>
<span class="hl str">					dup invert if</span>
<span class="hl str">						shift-board recurse unshift-board</span>
<span class="hl str">					else record then</span>
<span class="hl str">					over &#64; xor swap</span>  <span class="hl esc">\ </span><span class="hl str">remove piece</span>
<span class="hl str">				then</span>
<span class="hl str">			cell+ loop</span>
<span class="hl str">			false over /piece - !</span>    <span class="hl esc">\ </span><span class="hl str">mark unused</span>
<span class="hl str">		then</span>
<span class="hl str">	loop drop ;</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">: main</span>
<span class="hl str">	0 #solutions !</span>
<span class="hl str">	smallest 64 [char] 9 fill</span>
<span class="hl str">	largest  64 [char] 0 fill</span>
<span class="hl str">		init-board board ! solve drop</span>
<span class="hl str">	#solutions &#64; . .&quot; solutions found&quot; cr cr</span>
<span class="hl str">	smallest .solution</span>
<span class="hl str">	largest  .solution ;</span>
<span class="hl str"></span>
<span class="hl str">main bye</span>
