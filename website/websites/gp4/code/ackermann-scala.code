<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   contributed by Isaac Gouy (Scala novice)</span>
<span class="com"></span>
<span class="com">To compile:</span>
<span class="com">   scalac ackermann.scala</span>
<span class="com"></span>
<span class="com">To run:</span>
<span class="com">   scala ackermann 8</span>
<span class="com">*/</span>


<span class="kwa">object</span> ackermann <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> n <span class="sym">=</span> toPositiveInt<span class="sym">(</span>args<span class="sym">);</span>
      Console println<span class="sym">(</span><span class="str">&quot;Ack(3, &quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;): &quot;</span> <span class="sym">+</span> ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span>n<span class="sym">));</span>
   <span class="sym">}</span>


   <span class="kwa">def</span> ack<span class="sym">(</span>m<span class="sym">:</span> Int<span class="sym">,</span> n<span class="sym">:</span> Int<span class="sym">):</span> Int <span class="sym">=</span>
      <span class="kwa">if</span> <span class="sym">(</span>m <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">else if</span> <span class="sym">(</span>n <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ack<span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
      <span class="kwa">else</span> ack<span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> ack<span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>


   <span class="kwa">private def</span> toPositiveInt<span class="sym">(</span>s<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> i <span class="sym">=</span>
         <span class="kwa">try</span> <span class="sym">{</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">(</span><span class="num">0</span><span class="sym">)); }</span>
         <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> _ <span class="sym">=&gt;</span> <span class="num">1</span> <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> i<span class="sym">;</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>



