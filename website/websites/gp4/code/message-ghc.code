<span class="slc">-- $Id: message-ghc.code,v 1.22 2005-11-21 17:57:56 igouy-guest Exp $</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- Contributed by Einar Karttunen</span>

<span class="kwa">import</span> Control.Concurrent
<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> System

thread <span class="sym">::</span> MVar <span class="kwb">Int</span> <span class="sym">-&gt;</span> MVar <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">()</span>
thread inp out <span class="sym">=</span> takeMVar inp <span class="sym">&gt;&gt;=</span> putMVar out . <span class="sym">(+</span><span class="num">1</span><span class="sym">) &gt;&gt;</span> thread inp out

spawn cur _ <span class="sym">=</span> <span class="kwa">do</span> next <span class="sym">&lt;-</span> newEmptyMVar
                 forkIO $ thread cur next
                 return next

main <span class="sym">=</span> <span class="kwa">do</span> n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO.head
          s <span class="sym">&lt;-</span> newEmptyMVar
          e <span class="sym">&lt;-</span> foldM spawn s <span class="sym">[</span><span class="num">1</span>.<span class="num">.500</span><span class="sym">]</span>
          f <span class="sym">&lt;-</span> newEmptyMVar
          forkIO $ replicateM n <span class="sym">(</span>takeMVar e<span class="sym">) &gt;&gt;=</span> putMVar f . sum
          replicateM n <span class="sym">(</span>putMVar s <span class="num">0</span><span class="sym">)</span>
          takeMVar f <span class="sym">&gt;&gt;=</span> print

<span class="slc">-- vim: ts=4 ft=haskell</span>
