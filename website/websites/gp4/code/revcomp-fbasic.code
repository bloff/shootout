rem The Computer Language Shootout
rem http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
rem contributed by Josh Goldfoot

option explicit

<span class="kwa">function</span> toupper<span class="sym">(</span>b <span class="kwa">as</span> byte<span class="sym">)</span> <span class="kwa">as</span> byte
   <span class="kwa">if</span> b <span class="sym">&gt;</span> <span class="num">90</span> <span class="kwa">then</span> return b <span class="sym">-</span> <span class="num">32</span> <span class="slc">' 90 is Z</span>
   return b
<span class="kwa">end function</span>

<span class="kwa">sub</span> reverse_in_place<span class="sym">(</span><span class="kwa">byref</span> buf <span class="kwa">as</span> <span class="kwb">string</span> <span class="sym">)</span>
   static comp<span class="sym">(</span><span class="num">65</span> <span class="kwa">to</span> <span class="num">90</span><span class="sym">)</span> <span class="kwa">as</span> byte <span class="sym">=&gt; {</span><span class="num">84</span><span class="sym">,</span> <span class="num">86</span><span class="sym">,</span> <span class="num">71</span><span class="sym">,</span> <span class="num">72</span><span class="sym">,</span> <span class="num">69</span><span class="sym">,</span> <span class="num">70</span><span class="sym">,</span> <span class="num">67</span><span class="sym">,</span> <span class="num">68</span><span class="sym">,</span> <span class="num">73</span><span class="sym">,</span> <span class="num">74</span><span class="sym">,</span> _
     <span class="num">77</span><span class="sym">,</span> <span class="num">76</span><span class="sym">,</span> <span class="num">75</span><span class="sym">,</span> <span class="num">78</span><span class="sym">,</span> <span class="num">79</span><span class="sym">,</span> <span class="num">80</span><span class="sym">,</span> <span class="num">81</span><span class="sym">,</span> <span class="num">89</span><span class="sym">,</span> <span class="num">83</span><span class="sym">,</span> <span class="num">65</span><span class="sym">,</span> <span class="num">85</span><span class="sym">,</span> <span class="num">66</span><span class="sym">,</span> <span class="num">87</span><span class="sym">,</span> <span class="num">88</span><span class="sym">,</span> <span class="num">82</span><span class="sym">,</span> <span class="num">90</span><span class="sym">}</span>
   <span class="kwa">dim as</span> byte tmp
   <span class="kwa">dim as</span> <span class="kwb">integer</span> starti<span class="sym">,</span> stopi
   stopi <span class="sym">=</span> len<span class="sym">(</span>buf<span class="sym">) -</span> <span class="num">1</span>

   <span class="kwa">while</span> starti <span class="sym">&lt;</span> stopi
      tmp <span class="sym">=</span> comp<span class="sym">(</span>toupper<span class="sym">(</span>buf<span class="sym">[</span>starti<span class="sym">]))</span>
      buf<span class="sym">[</span>starti<span class="sym">] =</span> comp<span class="sym">(</span>toupper<span class="sym">(</span>buf<span class="sym">[</span>stopi<span class="sym">]))</span>
      buf<span class="sym">[</span>stopi<span class="sym">] =</span> tmp
      starti <span class="sym">+=</span> <span class="num">1</span>
      stopi <span class="sym">-=</span> <span class="num">1</span>
   wend
<span class="kwa">end sub</span>

<span class="kwa">sub</span> print60<span class="sym">(</span><span class="kwa">byref</span> buf <span class="kwa">as</span> <span class="kwb">string</span><span class="sym">)</span>
   <span class="kwa">dim as</span> <span class="kwb">integer</span> buflen<span class="sym">,</span> i
   buflen <span class="sym">=</span> len<span class="sym">(</span>buf<span class="sym">)</span>
   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> buflen <span class="kwa">step</span> <span class="num">60</span>
      print mid<span class="sym">(</span>buf<span class="sym">,</span>i<span class="sym">,</span><span class="num">60</span><span class="sym">)</span>
   <span class="kwa">next</span> i
<span class="kwa">end sub</span>

<span class="kwa">sub</span> main<span class="sym">()</span>
   <span class="kwa">dim as</span> <span class="kwb">integer</span> stdin
   <span class="kwa">dim as</span> <span class="kwb">string</span> zline<span class="sym">,</span> buffer
   stdin <span class="sym">=</span> freefile
   open cons <span class="kwa">as</span> stdin
   line input #stdin<span class="sym">,</span> zline
   <span class="kwa">while</span> zline <span class="sym">&lt;&gt;</span> <span class="str">&quot;&quot;</span>
      <span class="kwa">if</span> zline<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="num">62</span> <span class="kwa">then</span>  <span class="slc">' 62 = asc(&quot;&gt;&quot;)</span>
         <span class="kwa">if</span> buffer <span class="sym">&lt;&gt;</span> <span class="str">&quot;&quot;</span> <span class="kwa">then</span>
            reverse_in_place<span class="sym">(</span>buffer<span class="sym">)</span>
            print60<span class="sym">(</span>buffer<span class="sym">)</span>
            buffer <span class="sym">=</span> <span class="str">&quot;&quot;</span>
         <span class="kwa">end if</span>
         print zline
      <span class="kwa">else</span>
         buffer <span class="sym">+=</span> zline
      <span class="kwa">end if</span>
      line input #stdin<span class="sym">,</span> zline
   wend
   reverse_in_place<span class="sym">(</span>buffer<span class="sym">)</span>
   print60<span class="sym">(</span>buffer<span class="sym">)</span>
<span class="kwa">end sub</span>

main<span class="sym">()</span>

