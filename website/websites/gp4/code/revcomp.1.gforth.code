\ reverse<span class="hl sym">-</span>complement<span class="hl sym">.</span>gforth
\ http<span class="hl sym">:</span><span class="hl slc">//shootout.alioth.debian.org/</span>
\
\ Submitted by Ian Osgood

\ complement mappings
create map s<span class="hl str">&quot; TVGHefCDijMlKNopqYSAABWxRz&quot;</span> mem<span class="hl sym">,</span>

<span class="hl sym">:</span> map<span class="hl sym">-</span><span class="hl kwd">c</span> <span class="hl sym">(</span> c <span class="hl sym">--</span> comp <span class="hl sym">)</span> <span class="hl num">32</span> <span class="hl kwa">or</span> <span class="hl str">'a - map + c&#64; ;</span>
<span class="hl str"></span>
<span class="hl str">60 constant line-len</span>
<span class="hl str"></span>
<span class="hl str">: rev-comp ( end -- start ) line-len</span>
<span class="hl str">  begin  over pad u&gt;</span>
<span class="hl str">  while  swap 1- dup c&#64; map-c emit</span>
<span class="hl str">         swap 1- dup 0= if cr line-len + then</span>
<span class="hl str">  repeat line-len &lt; if cr then ;</span>
<span class="hl str"></span>
<span class="hl str">: main   pad ( end )</span>
<span class="hl str">  begin  dup 80 stdin read-line throw</span>
<span class="hl str">  while  over c&#64; '</span><span class="hl sym">&gt; =</span>
         <span class="hl kwa">if</span>   over  rev<span class="hl sym">-</span>comp  <span class="hl sym">-</span>rot type cr
         <span class="hl kwa">else</span> <span class="hl sym">+</span> then
  repeat drop rev<span class="hl sym">-</span>comp drop <span class="hl sym">;</span>

main bye  \ done<span class="hl sym">!</span>

