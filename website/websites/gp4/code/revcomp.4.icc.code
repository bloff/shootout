<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Bob W</span>
<span class="hl com"> */</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>

<span class="hl dir">#define JBFSIZE 82</span>      <span class="hl slc">// line input buffer size</span>
<span class="hl dir"></span><span class="hl dir">#define QBFSIZE 5200</span>     <span class="hl slc">// output buffer initial size</span>
<span class="hl dir"></span><span class="hl dir">#define Z16</span>     <span class="hl dstr">&quot;</span><span class="hl esc">\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><span class="hl dstr">&quot;</span><span class="hl dir"></span>
<span class="hl dir">#define V32</span>     <span class="hl dstr">&quot;</span><span class="hl esc">\0</span><span class="hl dstr">TVGH</span><span class="hl esc">\0\0</span><span class="hl dstr">CD</span><span class="hl esc">\0\0</span><span class="hl dstr">M</span><span class="hl esc">\0</span><span class="hl dstr">KN</span><span class="hl esc">\0\0\0</span><span class="hl dstr">YSA</span><span class="hl esc">\0</span><span class="hl dstr">BW</span><span class="hl esc">\0</span><span class="hl dstr">R</span><span class="hl esc">\0\0\0\0\0\0</span><span class="hl dstr">&quot;</span><span class="hl dir"></span>
<span class="hl dir">#define VALL    Z16 Z16 Z16 Z16 V32 V32 Z16 Z16 Z16 Z16 Z16 Z16 Z16 Z16</span>

<span class="hl kwb">int</span> <span class="hl kwd">errex</span><span class="hl sym">(</span><span class="hl kwb">char</span> <span class="hl sym">*</span>s<span class="hl sym">,</span> <span class="hl kwb">int</span> n<span class="hl sym">) {</span>      <span class="hl slc">// error message+value, return 1</span>
  <span class="hl kwd">fprintf</span><span class="hl sym">(</span>stderr<span class="hl sym">,</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">*** Error: %s [%d]!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> s<span class="hl sym">,</span> n<span class="hl sym">);</span>
  <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">() {</span>                    <span class="hl slc">// ***** main *****</span>
  <span class="hl kwb">char</span> <span class="hl sym">*</span>pj<span class="hl sym">, *</span>pq<span class="hl sym">, *</span>pr<span class="hl sym">;</span>            <span class="hl slc">// buffer pointers: inp,out,/out</span>
  <span class="hl kwb">char</span> <span class="hl sym">*</span>jjj <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>JBFSIZE<span class="hl sym">);</span>   <span class="hl slc">// allocate input line buffer</span>
  <span class="hl kwb">char</span> <span class="hl sym">*</span>qqq <span class="hl sym">=</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>QBFSIZE<span class="hl sym">);</span>   <span class="hl slc">// output buffer (dyn. size)</span>
  <span class="hl kwb">char</span> <span class="hl sym">*</span>pqstop <span class="hl sym">=</span> qqq<span class="hl sym">+</span>QBFSIZE<span class="hl sym">;</span>    <span class="hl slc">// end-of-buffer pointer</span>
  <span class="hl kwb">char</span> xtab<span class="hl sym">[</span><span class="hl num">256</span><span class="hl sym">] =</span> VALL<span class="hl sym">;</span>         <span class="hl slc">// char conversion table</span>

  <span class="hl kwa">if</span> <span class="hl sym">(!</span>jjj <span class="hl sym">|| !</span>qqq<span class="hl sym">)</span>
    <span class="hl kwa">return</span> <span class="hl kwd">errex</span><span class="hl sym">(</span><span class="hl str">&quot;Buffer allocation&quot;</span><span class="hl sym">, !</span>jjj <span class="hl sym">+ !</span>qqq<span class="hl sym">);</span>
  pj <span class="hl sym">=</span> <span class="hl kwd">fgets</span><span class="hl sym">(</span>jjj<span class="hl sym">,</span>JBFSIZE<span class="hl sym">,</span>stdin<span class="hl sym">);</span>         <span class="hl slc">// fetch 1st line</span>
  <span class="hl kwa">if</span> <span class="hl sym">(!</span>pj<span class="hl sym">)</span>
    <span class="hl kwa">return</span> <span class="hl kwd">errex</span><span class="hl sym">(</span><span class="hl str">&quot;No input data&quot;</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">);</span>
  <span class="hl kwa">if</span> <span class="hl sym">(*</span>jjj <span class="hl sym">!=</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span>
    <span class="hl kwa">return</span> <span class="hl kwd">errex</span><span class="hl sym">(</span><span class="hl str">&quot;1st char not '&gt;'&quot;</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>

  <span class="hl kwa">while</span> <span class="hl sym">(</span>pj<span class="hl sym">) {</span>                           <span class="hl slc">// MAIN LOOP: process data</span>
    <span class="hl kwd">fputs</span><span class="hl sym">(</span>jjj<span class="hl sym">,</span> stdout<span class="hl sym">);</span>                  <span class="hl slc">// output ID line</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>pq<span class="hl sym">=</span>qqq<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> pr<span class="hl sym">=</span>pqstop<span class="hl sym">; ;</span> pq<span class="hl sym">++) {</span>  <span class="hl slc">// LOOP: fill output buffer</span>
      pj <span class="hl sym">=</span> <span class="hl kwd">fgets</span><span class="hl sym">(</span>jjj<span class="hl sym">,</span> JBFSIZE<span class="hl sym">,</span> stdin<span class="hl sym">);</span>   <span class="hl slc">// get line from stdin</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!</span>pj <span class="hl sym">|| (*</span>jjj<span class="hl sym">==</span><span class="hl str">'&gt;'</span><span class="hl sym">))</span>  <span class="hl kwa">break</span><span class="hl sym">;</span>    <span class="hl slc">// EOF or new ID line</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>pr <span class="hl sym">&lt;= (</span>pq<span class="hl sym">+</span><span class="hl num">61</span><span class="hl sym">)) {</span>               <span class="hl slc">// need to resize buffer</span>
        <span class="hl kwb">char</span> <span class="hl sym">*</span>newstop <span class="hl sym">=</span> pqstop <span class="hl sym">+</span> <span class="hl num">12777888</span><span class="hl sym">;</span>
        <span class="hl kwb">char</span> <span class="hl sym">*</span>newptr  <span class="hl sym">=</span> <span class="hl kwd">realloc</span><span class="hl sym">(</span>qqq<span class="hl sym">,</span> newstop<span class="hl sym">-</span>qqq<span class="hl sym">);</span>
        <span class="hl kwa">if</span> <span class="hl sym">(!</span>newptr<span class="hl sym">)</span>
          <span class="hl kwa">return</span> <span class="hl kwd">errex</span><span class="hl sym">(</span><span class="hl str">&quot;Out of memory&quot;</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>newptr <span class="hl sym">!=</span> qqq<span class="hl sym">) {</span>             <span class="hl slc">// new base: adj. pointers</span>
          <span class="hl kwb">size_t</span> x <span class="hl sym">=</span> newptr<span class="hl sym">-</span>qqq<span class="hl sym">;</span>         <span class="hl slc">// offset for pointer update</span>
          pq<span class="hl sym">+=</span>x<span class="hl sym">;</span>  pr<span class="hl sym">+=</span>x<span class="hl sym">;</span>  qqq<span class="hl sym">+=</span>x<span class="hl sym">;</span>
          newstop<span class="hl sym">+=</span>x<span class="hl sym">;</span>  pqstop<span class="hl sym">+=</span>x<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        pr <span class="hl sym">=</span> <span class="hl kwd">__builtin_memmove</span><span class="hl sym">(</span>newstop<span class="hl sym">-(</span>pqstop<span class="hl sym">-</span>pr<span class="hl sym">),</span> pr<span class="hl sym">,</span> pqstop<span class="hl sym">-</span>pr<span class="hl sym">);</span>
        pqstop <span class="hl sym">=</span> newstop<span class="hl sym">;</span>                <span class="hl slc">// buffer resize complete</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">while</span> <span class="hl sym">(*</span>pj<span class="hl sym">) {</span>                      <span class="hl slc">// LOOP: conv. &amp; revert line</span>
        <span class="hl kwb">char</span> c <span class="hl sym">=</span> xtab<span class="hl sym">[(</span><span class="hl kwb">unsigned char</span><span class="hl sym">)(*</span>pj<span class="hl sym">++)];</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>c<span class="hl sym">)</span>                           <span class="hl slc">// conversion valid</span>
          <span class="hl sym">*(--</span>pr<span class="hl sym">) =</span> c<span class="hl sym">;</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>pq <span class="hl sym">=</span> qqq<span class="hl sym">;</span> pr<span class="hl sym">&lt;</span>pqstop<span class="hl sym">; ) {</span>        <span class="hl slc">// LOOP: format output</span>
      <span class="hl kwb">size_t</span> x <span class="hl sym">= (</span>pqstop<span class="hl sym">-</span>pr<span class="hl sym">)&lt;</span><span class="hl num">60</span> ? pqstop<span class="hl sym">-</span>pr <span class="hl sym">:</span> <span class="hl num">60</span><span class="hl sym">;</span>
      <span class="hl kwd">__builtin_memmove</span><span class="hl sym">(</span>pq<span class="hl sym">,</span>pr<span class="hl sym">,</span>x<span class="hl sym">);</span>        <span class="hl slc">// move line to free space</span>
      pr<span class="hl sym">+=</span>x<span class="hl sym">;</span>  pq<span class="hl sym">+=</span>x<span class="hl sym">;  *(</span>pq<span class="hl sym">++) =</span> <span class="hl num">0xA</span><span class="hl sym">;</span>     <span class="hl slc">// adjust pointers, add LF</span>
    <span class="hl sym">}</span>
    <span class="hl kwd">fwrite</span><span class="hl sym">(</span>qqq<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> pq<span class="hl sym">-</span>qqq<span class="hl sym">,</span> stdout<span class="hl sym">);</span>      <span class="hl slc">// output converted data</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
