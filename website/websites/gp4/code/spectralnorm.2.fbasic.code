<span class="hl slc">' The Computer Language Shootout</span>
<span class="hl slc">' http://shootout.alioth.debian.org/</span>
<span class="hl slc">' contributed by Josh Goldfoot</span>
<span class="hl slc">' based on the C version by Sebastien Loisel</span>
<span class="hl slc">' modified by Antoni Gual</span>

<span class="hl slc">'#define eval_A(i, j) 1.0/((i+j)*(i+j+1)/2.0+i+1.0)</span>

<span class="hl kwa">function</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>i <span class="hl kwa">as</span> <span class="hl kwb">integer</span><span class="hl sym">,</span> j <span class="hl kwa">as</span> <span class="hl kwb">integer</span><span class="hl sym">)</span> <span class="hl kwa">as</span> <span class="hl kwb">double</span>
   <span class="hl kwa">return</span> <span class="hl num">1.0</span><span class="hl sym">/((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2.0</span><span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1.0</span><span class="hl sym">)</span>
<span class="hl kwa">end function</span>

<span class="hl kwa">sub</span> <span class="hl kwd">eval_A_times_u</span><span class="hl sym">(</span><span class="hl kwa">ByVal</span> N <span class="hl kwa">as</span> <span class="hl kwb">integer</span><span class="hl sym">,</span> <span class="hl kwd">u</span><span class="hl sym">()</span> <span class="hl kwa">as</span> <span class="hl kwb">double</span><span class="hl sym">,</span> <span class="hl kwd">Au</span><span class="hl sym">()</span> <span class="hl kwa">as</span> <span class="hl kwb">double</span><span class="hl sym">)</span>
  <span class="hl kwa">Dim As</span> <span class="hl kwb">Integer</span> i<span class="hl sym">,</span> j
   <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> N <span class="hl sym">-</span> <span class="hl num">1</span>
      <span class="hl kwd">Au</span><span class="hl sym">(</span>i<span class="hl sym">) =</span> <span class="hl num">0</span>
      <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> N <span class="hl sym">-</span> <span class="hl num">1</span>
         <span class="hl kwd">Au</span><span class="hl sym">(</span>i<span class="hl sym">) +=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">)*</span><span class="hl kwd">u</span><span class="hl sym">(</span>j<span class="hl sym">)</span>
      <span class="hl kwa">next</span> j
   <span class="hl kwa">next</span> i
<span class="hl kwa">end sub</span>

<span class="hl kwa">sub</span> <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span><span class="hl kwa">ByVal</span> N <span class="hl kwa">as</span> <span class="hl kwb">integer</span><span class="hl sym">,</span> <span class="hl kwd">u</span><span class="hl sym">()</span> <span class="hl kwa">as</span> <span class="hl kwb">double</span><span class="hl sym">,</span> <span class="hl kwd">Au</span><span class="hl sym">()</span> <span class="hl kwa">as</span> <span class="hl kwb">double</span><span class="hl sym">)</span>
  <span class="hl kwa">Dim As</span> <span class="hl kwb">Integer</span> i<span class="hl sym">,</span> j
   <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> N<span class="hl sym">-</span><span class="hl num">1</span>
      <span class="hl kwd">Au</span><span class="hl sym">(</span>i<span class="hl sym">) =</span> <span class="hl num">0</span>
      <span class="hl kwa">for</span> j <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> N<span class="hl sym">-</span><span class="hl num">1</span>
         <span class="hl kwd">Au</span><span class="hl sym">(</span>i<span class="hl sym">) +=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>j<span class="hl sym">,</span>i<span class="hl sym">) *</span> <span class="hl kwd">u</span><span class="hl sym">(</span>j<span class="hl sym">)</span>
      <span class="hl kwa">next</span> j
   <span class="hl kwa">next</span> i
<span class="hl kwa">end sub</span>

<span class="hl kwa">sub</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span><span class="hl kwa">ByVal</span> N <span class="hl kwa">as</span> <span class="hl kwb">integer</span><span class="hl sym">,</span> <span class="hl kwd">u</span><span class="hl sym">()</span> <span class="hl kwa">as</span> <span class="hl kwb">double</span><span class="hl sym">,</span> <span class="hl kwd">AtAu</span><span class="hl sym">()</span> <span class="hl kwa">as</span> <span class="hl kwb">double</span><span class="hl sym">)</span>
   <span class="hl kwa">dim</span> <span class="hl kwd">v</span><span class="hl sym">(</span>N<span class="hl sym">)</span> <span class="hl kwa">as</span> <span class="hl kwb">double</span>
   <span class="hl kwd">eval_A_times_u</span><span class="hl sym">(</span>N<span class="hl sym">,</span><span class="hl kwd">u</span><span class="hl sym">(),</span><span class="hl kwd">v</span><span class="hl sym">())</span>
   <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span>N<span class="hl sym">,</span><span class="hl kwd">v</span><span class="hl sym">(),</span><span class="hl kwd">AtAu</span><span class="hl sym">() )</span>
<span class="hl kwa">end sub</span>

<span class="hl kwa">Dim As</span> <span class="hl kwb">Integer</span> i<span class="hl sym">,</span> j<span class="hl sym">,</span> N

N <span class="hl sym">=</span> <span class="hl kwd">valint</span><span class="hl sym">(</span>COMMAND<span class="hl kwb">$)</span>
<span class="hl kwa">if</span> N <span class="hl sym">&lt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span> N <span class="hl sym">=</span> <span class="hl num">100</span>
<span class="hl kwa">dim as</span> <span class="hl kwb">double</span> <span class="hl kwd">u</span><span class="hl sym">(</span>N<span class="hl sym">),</span> <span class="hl kwd">v</span><span class="hl sym">(</span>N<span class="hl sym">),</span> vBv<span class="hl sym">,</span> vv
<span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> N<span class="hl sym">-</span><span class="hl num">1</span>
   <span class="hl kwd">u</span><span class="hl sym">(</span>i<span class="hl sym">) =</span> <span class="hl num">1</span>
<span class="hl kwa">next</span> i
<span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">9</span>
   <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>N<span class="hl sym">,</span><span class="hl kwd">u</span><span class="hl sym">(),</span><span class="hl kwd">v</span><span class="hl sym">() )</span>
   <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>N<span class="hl sym">,</span><span class="hl kwd">v</span><span class="hl sym">(),</span><span class="hl kwd">u</span><span class="hl sym">() )</span>
<span class="hl kwa">next</span> i
vBv<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl sym">:</span> vv<span class="hl sym">=</span><span class="hl num">0</span>
<span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> N <span class="hl sym">-</span> <span class="hl num">1</span>
   vBv <span class="hl sym">+=</span> <span class="hl kwd">u</span><span class="hl sym">(</span>i<span class="hl sym">)*</span><span class="hl kwd">v</span><span class="hl sym">(</span>i<span class="hl sym">) :</span> vv <span class="hl sym">+=</span> <span class="hl kwd">v</span><span class="hl sym">(</span>i<span class="hl sym">)*</span><span class="hl kwd">v</span><span class="hl sym">(</span>i<span class="hl sym">)</span>
<span class="hl kwa">next</span> i

<span class="hl kwa">dim</span> result <span class="hl kwa">as</span> <span class="hl kwb">double</span>
result <span class="hl sym">=</span> <span class="hl kwd">sqr</span><span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">)</span>
REM this is necessary because <span class="hl str">&quot;print using&quot;</span> rounds poorly
<span class="hl kwa">dim</span> factor <span class="hl kwa">as</span> longint
factor <span class="hl sym">=</span> <span class="hl num">1000000000</span>
result <span class="hl sym">=</span> <span class="hl kwd">clngint</span><span class="hl sym">(</span>result <span class="hl sym">*</span> factor<span class="hl sym">) /</span> factor
print <span class="hl kwd">str</span><span class="hl sym">(</span>result<span class="hl sym">)</span>

