<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy &quot;</span>
<span class="com"></span>
<span class="com">!SmallInteger methodsFor: 'shootout'!</span>
<span class="com"></span>
<span class="com">ackermann: aSmallInteger</span>
<span class="com">   ^self == 0</span>
<span class="com">      ifTrue: [aSmallInteger + 1]</span>
<span class="com">      ifFalse: [</span>
<span class="com">         aSmallInteger == 0</span>
<span class="com">            ifTrue: [self - 1 ackermann:  1]</span>
<span class="com">            ifFalse: [self - 1 ackermann: (self ackermann: aSmallInteger - 1)] ] !</span>
<span class="com"></span>
<span class="com">fibonacci</span>
<span class="com">   ^self &lt; 2</span>
<span class="com">      ifTrue: [1]</span>
<span class="com">      ifFalse: [(self - 2) fibonacci + (self - 1) fibonacci] !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">tak: y z: z</span>
<span class="com">   ^y &lt; self</span>
<span class="com">      ifTrue: [ ((self - 1) tak: y z: z)</span>
<span class="com">           tak: ((y - 1) tak: z z: self)</span>
<span class="com">             z: ((z - 1) tak: self z: y)</span>
<span class="com">         ]</span>
<span class="com">      ifFalse: [z] ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Float methodsFor: 'shootout'!</span>
<span class="com"></span>
<span class="com">fibonacci</span>
<span class="com">   ^self &lt; 2.0</span>
<span class="com">      ifTrue: [1.0]</span>
<span class="com">      ifFalse: [(self - 2.0) fibonacci + (self - 1.0) fibonacci] !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">tak: y z: z</span>
<span class="com">   ^y &lt; self</span>
<span class="com">      ifTrue: [ ((self - 1.0) tak: y z: z)</span>
<span class="com">           tak: ((y - 1.0) tak: z z: self)</span>
<span class="com">             z: ((z - 1.0) tak: self z: y)</span>
<span class="com">         ]</span>
<span class="com">      ifFalse: [z] ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">| n |</span>
<span class="com">n := Smalltalk arguments first asInteger.</span>
<span class="com"></span>
<span class="com">Transcript show: 'Ack(3,'; show: n printString; show: '): ';</span>
<span class="com">   show: (3 ackermann: n) printString; nl.</span>
<span class="com"></span>
<span class="com">Transcript show: 'Fib('.</span>
<span class="com">((27.0+n) asScaledDecimal: 1) display. Transcript show: '): '.</span>
<span class="com">((27.0+n) fibonacci asScaledDecimal: 1) displayNl.</span>
<span class="com"></span>
<span class="com">n := n - 1.</span>
<span class="com">Transcript show: 'Tak('; show: (3*n) printString; show: ',';</span>
<span class="com">   show: (2*n) printString; show: ','; show: n printString; show: '): '.</span>
<span class="com">((3*n tak: 2*n z: n) asScaledDecimal: 1) displayNl.</span>
<span class="com"></span>
<span class="com">Transcript show: 'Fib(3): '; show: 3 fibonacci printString; nl.</span>
<span class="com"></span>
<span class="com">Transcript show: 'Tak(3.0,2.0,1.0): '.</span>
<span class="com">((3.0 tak: 2.0 z: 1.0) asScaledDecimal: 1) displayNl !</span>
