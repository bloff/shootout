<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;</span>

<span class="kwc">class</span> fasta
<span class="sym">{</span>
   <span class="kwb">static void</span> <span class="kwd">Main</span><span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){</span>
      <span class="kwd">MakeCumulative</span><span class="sym">(</span>HomoSapiens<span class="sym">);</span>
      <span class="kwd">MakeCumulative</span><span class="sym">(</span>IUB<span class="sym">);</span>

      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1000</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

      <span class="kwa">using</span> <span class="sym">(</span>StreamWriter s <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StreamWriter</span><span class="sym">(</span>Console<span class="sym">.</span><span class="kwd">OpenStandardOutput</span><span class="sym">())){</span>
         <span class="kwd">MakeRepeatFasta</span><span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> ALU<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">,</span> s<span class="sym">);</span>
         <span class="kwd">MakeRandomFasta</span><span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> IUB<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">,</span> s<span class="sym">);</span>
         <span class="kwd">MakeRandomFasta</span><span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> HomoSapiens<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">,</span> s<span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="slc">// The usual pseudo-random number generator</span>

   <span class="kwb">const int</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>
   <span class="kwb">const int</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span>
   <span class="kwb">const int</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>
   <span class="kwb">static int</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>

   <span class="kwb">static double</span> <span class="kwd">random</span><span class="sym">(</span><span class="kwb">double</span> max<span class="sym">)</span>
   <span class="sym">{</span>
      last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;</span>
      <span class="kwa">return</span> max <span class="sym">*</span> last <span class="sym">/</span> IM <span class="sym">;</span>
   <span class="sym">}</span>


   <span class="slc">// Weighted selection from alphabet</span>

   <span class="kwb">static</span> String ALU <span class="sym">=</span>
      <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="sym">+</span>
      <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="sym">+</span>
      <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="sym">+</span>
      <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="sym">+</span>
      <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="sym">+</span>
      <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="sym">+</span>
      <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;</span>

   <span class="kwb">struct</span> Frequency <span class="sym">{</span>
      <span class="kwc">public</span> <span class="kwb">char</span> c<span class="sym">;</span>
      <span class="kwc">public</span> <span class="kwb">double</span> p<span class="sym">;</span>

      <span class="kwc">public</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="kwb">char</span> c<span class="sym">,</span> <span class="kwb">double</span> p<span class="sym">) {</span>
         <span class="kwa">this</span><span class="sym">.</span>c <span class="sym">=</span> c<span class="sym">;</span>
         <span class="kwa">this</span><span class="sym">.</span>p <span class="sym">=</span> p<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwb">static</span> Frequency<span class="sym">[]</span> IUB <span class="sym">= {</span>
       <span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">)</span>

      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
   <span class="sym">};</span>

   <span class="kwb">static</span> Frequency<span class="sym">[]</span> HomoSapiens <span class="sym">= {</span>
       <span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">)</span>
      <span class="sym">,</span><span class="kwa">new</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">)</span>
   <span class="sym">};</span>

   <span class="kwb">static void</span> <span class="kwd">MakeCumulative</span><span class="sym">(</span>Frequency<span class="sym">[]</span> a<span class="sym">) {</span>
      <span class="kwb">double</span> cp <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> a<span class="sym">.</span>Length<span class="sym">;</span> i<span class="sym">++){</span>
         cp <span class="sym">+=</span> a<span class="sym">[</span>i<span class="sym">].</span>p<span class="sym">;</span>
         a<span class="sym">[</span>i<span class="sym">].</span>p <span class="sym">=</span> cp<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="slc">// naive</span>
   <span class="kwb">static char</span> <span class="kwd">SelectRandom</span><span class="sym">(</span>Frequency<span class="sym">[]</span> a<span class="sym">) {</span>
      <span class="kwb">double</span> r <span class="sym">=</span> <span class="kwd">random</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> a<span class="sym">.</span>Length<span class="sym">;</span> i<span class="sym">++)</span>
         <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&lt;</span> a<span class="sym">[</span>i<span class="sym">].</span>p<span class="sym">)</span> <span class="kwa">return</span> a<span class="sym">[</span>i<span class="sym">].</span>c<span class="sym">;</span>

      <span class="kwa">return</span> a<span class="sym">[</span>a<span class="sym">.</span>Length<span class="sym">-</span><span class="num">1</span><span class="sym">].</span>c<span class="sym">;</span>
   <span class="sym">}</span>


   <span class="kwb">const int</span> LineLength <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>

   <span class="kwb">static void</span> <span class="kwd">MakeRandomFasta</span><span class="sym">(</span>
         String id<span class="sym">,</span> String desc<span class="sym">,</span> Frequency<span class="sym">[]</span> a<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">,</span> StreamWriter s<span class="sym">) {</span>

      <span class="kwb">int</span> m <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      s<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;&gt;{0} {1}&quot;</span><span class="sym">,</span> id<span class="sym">,</span>desc<span class="sym">);</span>

      <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
         <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> LineLength<span class="sym">)</span> m <span class="sym">=</span> n<span class="sym">;</span> <span class="kwa">else</span> m <span class="sym">=</span> LineLength<span class="sym">;</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>m<span class="sym">;</span> i<span class="sym">++)</span> s<span class="sym">.</span><span class="kwd">Write</span><span class="sym">(</span><span class="kwd">SelectRandom</span><span class="sym">(</span>a<span class="sym">));</span>
         s<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">();</span>
         n <span class="sym">-=</span> LineLength<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwb">static void</span> <span class="kwd">MakeRepeatFasta</span><span class="sym">(</span>
         String id<span class="sym">,</span> String desc<span class="sym">,</span> String alu<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">,</span> StreamWriter s<span class="sym">) {</span>

      <span class="kwb">int</span> m <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> kn <span class="sym">=</span> alu<span class="sym">.</span>Length<span class="sym">;</span>
      s<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;&gt;{0} {1}&quot;</span><span class="sym">,</span> id<span class="sym">,</span>desc<span class="sym">);</span>

      <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
         <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> LineLength<span class="sym">)</span> m <span class="sym">=</span> n<span class="sym">;</span> <span class="kwa">else</span> m <span class="sym">=</span> LineLength<span class="sym">;</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>m<span class="sym">;</span> i<span class="sym">++){</span>
            <span class="kwa">if</span> <span class="sym">(</span>k <span class="sym">==</span> kn<span class="sym">)</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            s<span class="sym">.</span><span class="kwd">Write</span><span class="sym">(</span>alu<span class="sym">[</span>k<span class="sym">]);</span>
            k<span class="sym">++;</span>
         <span class="sym">}</span>
         s<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">();</span>
         n <span class="sym">-=</span> LineLength<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>

