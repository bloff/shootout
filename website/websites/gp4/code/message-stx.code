<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Paolo Bonzini *&quot;</span><span class="hl sym">!</span>

<span class="hl com">&quot;* SPLITFILE=Tests.st *&quot;</span><span class="hl sym">!</span>

Object subclass<span class="hl sym">:#</span>Tests
   instanceVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   classVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span><span class="hl str">''</span>
   category<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span><span class="hl sym">!</span>

message<span class="hl sym">:</span> n   <span class="hl sym">|</span> tail head sum <span class="hl sym">|</span>   head <span class="hl sym">:=</span> tail <span class="hl sym">:=</span> Consumer new<span class="hl sym">.</span>   <span class="hl num">500</span> timesRepeat<span class="hl sym">: [</span>head <span class="hl sym">:=</span> ProducerConsumer fork<span class="hl sym">:</span> head<span class="hl sym">].</span>   sum <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   n timesRepeat<span class="hl sym">:      [</span>head msg<span class="hl sym">:</span> <span class="hl num">0</span><span class="hl sym">.</span>      sum <span class="hl sym">:=</span> sum <span class="hl sym">+</span> tail msg<span class="hl sym">].   ^</span>sum
<span class="hl sym">!</span>

main
    Stdout print<span class="hl sym">: (</span><span class="hl kwa">self</span> message<span class="hl sym">:</span> Smalltalk commandLineArguments last asNumber<span class="hl sym">);</span> cr
<span class="hl sym">! !</span>

<span class="hl com">&quot;* SPLITFILE=Consumer.st *&quot;</span>

Object subclass<span class="hl sym">: #</span>Consumer
   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'semaphore msg'</span>
   classVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span> <span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>Consumer class methodsFor<span class="hl sym">:</span><span class="hl str">'instance creation'</span><span class="hl sym">!</span>
new    <span class="hl sym">|</span> var <span class="hl sym">|</span>    var <span class="hl sym">:=</span> <span class="hl kwa">self</span> basicNew<span class="hl sym">.</span>    var semaphore<span class="hl sym">:</span> Semaphore new<span class="hl sym">.    ^</span>var
<span class="hl sym">! !</span>

<span class="hl sym">!</span>Consumer methodsFor<span class="hl sym">:</span><span class="hl str">'accessing'</span><span class="hl sym">!</span>
msg    semaphore wait<span class="hl sym">.    ^</span>msg
<span class="hl sym">!</span>

msg<span class="hl sym">:</span> data    msg <span class="hl sym">:=</span> data<span class="hl sym">.</span>    semaphore signal
<span class="hl sym">!</span>

semaphore<span class="hl sym">:</span> aSemaphore    semaphore <span class="hl sym">:=</span> aSemaphore
<span class="hl sym">! !</span>

<span class="hl com">&quot;* SPLITFILE=ProducerConsumer.st *&quot;</span>

Consumer subclass<span class="hl sym">: #</span>ProducerConsumer
   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'consumer'</span>
   classVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span> <span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>ProducerConsumer class methodsFor<span class="hl sym">:</span><span class="hl str">'instance creation'</span><span class="hl sym">!</span>
fork<span class="hl sym">:</span> consumer    <span class="hl sym">|</span> proc <span class="hl sym">|</span>    proc <span class="hl sym">:=</span> <span class="hl kwa">self</span> new<span class="hl sym">.</span>    proc consumer<span class="hl sym">:</span> consumer<span class="hl sym">.</span>    proc fork<span class="hl sym">.    ^</span>proc
<span class="hl sym">! !</span>


<span class="hl sym">!</span>ProducerConsumer methodsFor<span class="hl sym">:</span><span class="hl str">'accessing'</span><span class="hl sym">!</span>
consumer<span class="hl sym">:</span> aProcess    consumer <span class="hl sym">:=</span> aProcess
<span class="hl sym">!</span>

fork    <span class="hl sym">[</span> <span class="hl kwa">self</span> run <span class="hl sym">]</span> fork
<span class="hl sym">!</span>

run    <span class="hl sym">[</span> consumer msg<span class="hl sym">:</span> <span class="hl kwa">self</span> msg <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">]</span> repeat
<span class="hl sym">! !</span>


