<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc"># contributed by Tupteq</span>
<span class="hl slc">#</span>
<span class="hl slc"># Based on codes from PDF and Nice #3 version.</span>
<span class="hl slc"># Before use of threading.Condition I tried semaphores (code similar to</span>
<span class="hl slc"># C code from PDF), but it was slower.</span>

<span class="hl kwa">from</span> __future__ <span class="hl kwa">import</span> with_statement  <span class="hl slc"># Required until Python 2.6</span>

<span class="hl kwa">import</span> sys
<span class="hl kwa">from</span> threading <span class="hl kwa">import</span> Thread<span class="hl sym">,</span> Condition

<span class="hl slc"># Constatnts</span>
all_colors <span class="hl sym">=</span> blue<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow <span class="hl sym">=</span> <span class="hl str">&quot;blue&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;red&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;yellow&quot;</span>
stop <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> blue  <span class="hl slc"># Stop condition</span>


<span class="hl kwa">def</span> <span class="hl kwd">complement</span><span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">):</span>
    <span class="hl slc"># I used 'is' except '==' here, it's faster</span>
    <span class="hl kwa">return</span> <span class="hl sym">(</span>c1 <span class="hl kwa">if</span> c1 <span class="hl kwa">is</span> c2
        <span class="hl kwa">else</span> <span class="hl sym">(</span>yellow <span class="hl kwa">if</span> c2 <span class="hl kwa">is</span> red <span class="hl kwa">else</span> red<span class="hl sym">)</span> <span class="hl kwa">if</span> c1 <span class="hl kwa">is</span> blue
        <span class="hl kwa">else</span> <span class="hl sym">(</span>yellow <span class="hl kwa">if</span> c2 <span class="hl kwa">is</span> blue <span class="hl kwa">else</span> blue<span class="hl sym">)</span> <span class="hl kwa">if</span> c1 <span class="hl kwa">is</span> red
        <span class="hl kwa">else</span> <span class="hl sym">(</span>red <span class="hl kwa">if</span> c2 <span class="hl kwa">is</span> blue <span class="hl kwa">else</span> blue<span class="hl sym">))</span>


<span class="hl kwa">def</span> <span class="hl kwd">print_color_changes</span><span class="hl sym">():</span>
    <span class="hl slc"># Print complement for each combination</span>
    <span class="hl kwa">for</span> c1 <span class="hl kwa">in</span> all_colors<span class="hl sym">:</span>
        <span class="hl kwa">for</span> c2 <span class="hl kwa">in</span> all_colors<span class="hl sym">:</span>
            <span class="hl kwa">print</span> <span class="hl str">&quot;%s + %s -&gt; %s&quot;</span> <span class="hl sym">% (</span>c1<span class="hl sym">,</span> c2<span class="hl sym">,</span> <span class="hl kwd">complement</span><span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">))</span>


<span class="hl kwa">class</span> Mall<span class="hl sym">:</span>
    <span class="hl kwa">def</span> <span class="hl kwd">__init__</span><span class="hl sym">(</span>self<span class="hl sym">,</span> n<span class="hl sym">):</span>
        self<span class="hl sym">.</span>first <span class="hl sym">=</span> <span class="hl kwa">True</span>
        self<span class="hl sym">.</span>must_wait <span class="hl sym">=</span> <span class="hl kwa">False</span>
        self<span class="hl sym">.</span>counter <span class="hl sym">=</span> n
        self<span class="hl sym">.</span>cond <span class="hl sym">=</span> <span class="hl kwd">Condition</span><span class="hl sym">()</span>

    <span class="hl kwa">def</span> <span class="hl kwd">notify</span><span class="hl sym">(</span>self<span class="hl sym">,</span> me<span class="hl sym">):</span>
        <span class="hl slc"># &quot;with&quot; makes all the job (no acquire() and release() needed)</span>
        with self<span class="hl sym">.</span>cond<span class="hl sym">:</span>
            <span class="hl kwa">while</span> self<span class="hl sym">.</span>must_wait <span class="hl kwa">and</span> self<span class="hl sym">.</span>counter <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">:</span>
                self<span class="hl sym">.</span>cond<span class="hl sym">.</span><span class="hl kwd">wait</span><span class="hl sym">()</span>

            <span class="hl kwa">if</span> self<span class="hl sym">.</span>first<span class="hl sym">:</span>
                <span class="hl slc"># Creature is first</span>
                self<span class="hl sym">.</span>a <span class="hl sym">=</span> me
                self<span class="hl sym">.</span>first <span class="hl sym">=</span> <span class="hl kwa">False</span>

                <span class="hl kwa">while not</span> self<span class="hl sym">.</span>first <span class="hl kwa">and</span> self<span class="hl sym">.</span>counter <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">:</span>
                    self<span class="hl sym">.</span>cond<span class="hl sym">.</span><span class="hl kwd">wait</span><span class="hl sym">()</span>

                he <span class="hl sym">=</span> self<span class="hl sym">.</span>b
                self<span class="hl sym">.</span>must_wait <span class="hl sym">=</span> <span class="hl kwa">False</span>
                self<span class="hl sym">.</span>cond<span class="hl sym">.</span><span class="hl kwd">notifyAll</span><span class="hl sym">()</span>

                self<span class="hl sym">.</span>counter <span class="hl sym">-=</span> <span class="hl num">1</span>
            <span class="hl kwa">else</span><span class="hl sym">:</span>
                <span class="hl slc"># Creature is second</span>
                self<span class="hl sym">.</span>b <span class="hl sym">=</span> me
                he <span class="hl sym">=</span> self<span class="hl sym">.</span>a
                self<span class="hl sym">.</span>first <span class="hl sym">=</span> <span class="hl kwa">True</span>
                self<span class="hl sym">.</span>must_wait <span class="hl sym">=</span> <span class="hl kwa">True</span>
                self<span class="hl sym">.</span>cond<span class="hl sym">.</span><span class="hl kwd">notifyAll</span><span class="hl sym">()</span>

            <span class="hl kwa">return</span> he <span class="hl kwa">if</span> self<span class="hl sym">.</span>counter <span class="hl sym">&gt;=</span> <span class="hl num">0</span> <span class="hl kwa">else</span> stop


<span class="hl kwa">class</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>Thread<span class="hl sym">):</span>
    <span class="hl kwa">def</span> <span class="hl kwd">__init__</span><span class="hl sym">(</span>self<span class="hl sym">,</span> name<span class="hl sym">,</span> color<span class="hl sym">,</span> mall<span class="hl sym">):</span>
        <span class="hl slc"># Thread initialization, thread built in name is not used</span>
        Thread<span class="hl sym">.</span><span class="hl kwd">__init__</span><span class="hl sym">(</span>self<span class="hl sym">)</span>
        self<span class="hl sym">.</span>name <span class="hl sym">=</span> name
        self<span class="hl sym">.</span>color <span class="hl sym">=</span> color
        self<span class="hl sym">.</span>mall <span class="hl sym">=</span> mall
        self<span class="hl sym">.</span>self_met <span class="hl sym">=</span> <span class="hl num">0</span>
        self<span class="hl sym">.</span>met <span class="hl sym">=</span> <span class="hl num">0</span>

    <span class="hl kwa">def</span> <span class="hl kwd">run</span><span class="hl sym">(</span>self<span class="hl sym">):</span>
        <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl sym">:</span>
            <span class="hl slc"># Go to meeting place</span>
            his_name<span class="hl sym">,</span> his_color <span class="hl sym">=</span> self<span class="hl sym">.</span>mall<span class="hl sym">.</span><span class="hl kwd">notify</span><span class="hl sym">((</span>self<span class="hl sym">.</span>name<span class="hl sym">,</span> self<span class="hl sym">.</span>color<span class="hl sym">))</span>
            <span class="hl kwa">if</span> his_name <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">:</span>
                <span class="hl kwa">break</span>

            <span class="hl slc"># Change color and increment counters</span>
            self<span class="hl sym">.</span>color <span class="hl sym">=</span> <span class="hl kwd">complement</span><span class="hl sym">(</span>self<span class="hl sym">.</span>color<span class="hl sym">,</span> his_color<span class="hl sym">)</span>
            <span class="hl kwa">if</span> self<span class="hl sym">.</span>name <span class="hl kwa">is</span> his_name<span class="hl sym">:</span>
                self<span class="hl sym">.</span>self_met <span class="hl sym">+=</span> <span class="hl num">1</span>
            self<span class="hl sym">.</span>met <span class="hl sym">+=</span> <span class="hl num">1</span>


<span class="hl kwa">def</span> <span class="hl kwd">simulate</span><span class="hl sym">(</span>colors<span class="hl sym">,</span> n<span class="hl sym">):</span>
    <span class="hl slc"># Prepare and execute simulation</span>
    r <span class="hl sym">=</span> <span class="hl kwd">Mall</span><span class="hl sym">(</span>n<span class="hl sym">)</span>
    creatures <span class="hl sym">= [</span><span class="hl kwd">Creature</span><span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> color<span class="hl sym">,</span> r<span class="hl sym">)</span> <span class="hl kwa">for</span> i<span class="hl sym">,</span> color <span class="hl kwa">in</span> <span class="hl kwb">enumerate</span><span class="hl sym">(</span>colors<span class="hl sym">)]</span>
    <span class="hl kwa">for</span> c <span class="hl kwa">in</span> creatures<span class="hl sym">:</span>
        c<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">()</span>
    <span class="hl kwa">for</span> c <span class="hl kwa">in</span> creatures<span class="hl sym">:</span>
        c<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">()</span>

    <span class="hl slc"># Prepare spellout function</span>
    numbers <span class="hl sym">= (</span><span class="hl str">&quot;zero&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;one&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;two&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;three&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;four&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;five&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;six&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;seven&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;eight&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;nine&quot;</span><span class="hl sym">)</span>
    <span class="hl kwa">def</span> <span class="hl kwd">spellout</span><span class="hl sym">(</span>i<span class="hl sym">):</span>
        <span class="hl kwa">return</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span>numbers<span class="hl sym">[</span><span class="hl kwb">int</span><span class="hl sym">(</span>x<span class="hl sym">)]</span> <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">str</span><span class="hl sym">(</span>i<span class="hl sym">))</span>

    <span class="hl slc"># Print results</span>
    <span class="hl kwa">print</span>
    <span class="hl kwa">print</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span>colors<span class="hl sym">)</span>
    <span class="hl kwb">sum</span> <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">for</span> c <span class="hl kwa">in</span> creatures<span class="hl sym">:</span>
        <span class="hl kwb">sum</span> <span class="hl sym">+=</span> c<span class="hl sym">.</span>met
        <span class="hl kwa">print</span> <span class="hl kwb">str</span><span class="hl sym">(</span>c<span class="hl sym">.</span>met<span class="hl sym">) +</span> <span class="hl kwd">spellout</span><span class="hl sym">(</span>c<span class="hl sym">.</span>self_met<span class="hl sym">)</span>
    <span class="hl kwa">print</span> <span class="hl kwd">spellout</span><span class="hl sym">(</span><span class="hl kwb">sum</span><span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl sym">():</span>
    n <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
    <span class="hl kwd">print_color_changes</span><span class="hl sym">()</span>
    <span class="hl kwd">simulate</span><span class="hl sym">([</span>blue<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow<span class="hl sym">],</span> n<span class="hl sym">)</span>
    <span class="hl kwd">simulate</span><span class="hl sym">([</span>blue<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow<span class="hl sym">,</span> blue<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow<span class="hl sym">,</span> red<span class="hl sym">,</span> blue<span class="hl sym">],</span> n<span class="hl sym">)</span>

<span class="hl kwd">main</span><span class="hl sym">()</span>
