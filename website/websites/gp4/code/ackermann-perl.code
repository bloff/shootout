<span class="slc">#!/usr/bin/perl</span>
<span class="slc"># $Id: ackermann-perl.code,v 1.10 2005-11-02 20:20:50 igouy-guest Exp $</span>
<span class="slc"># http://www.bagley.org/~doug/shootout/</span>

<span class="slc"># With help from Ernesto Hernandez-Novich</span>
<span class="kwa">use</span> integer<span class="sym">;</span>

<span class="slc"># It's prettier but slower to do this</span>
<span class="slc">#sub Ack {</span>
<span class="slc">#    my($M, $N) = &#64;_;</span>
<span class="slc">#    return( $N + 1 )         if ($M == 0);</span>
<span class="slc">#    return( Ack($M - 1, 1) ) if ($N == 0);</span>
<span class="slc">#    Ack($M - 1, Ack($M, $N - 1));</span>
<span class="slc">#}</span>

<span class="slc"># in our quest for speed, we must get ugly:</span>
<span class="slc"># it helps reduce stack frame size a little bit</span>
<span class="slc"># from Leif Stensson</span>
<span class="kwa">sub</span> Ack <span class="sym">{</span>
    <span class="kwa">return</span> <span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]</span> ? <span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">1</span><span class="sym">]</span> ? <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwb">$_</span><span class="sym">[</span><span class="num">1</span><span class="sym">]-</span><span class="num">1</span><span class="sym">))</span>
		    <span class="sym">:</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
	<span class="sym">:</span> <span class="kwb">$_</span><span class="sym">[</span><span class="num">1</span><span class="sym">]+</span><span class="num">1</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">my</span> <span class="kwb">$NUM</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwb">$NUM</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$NUM</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">);</span>
<span class="kwc">my</span> <span class="kwb">$ack</span> <span class="sym">=</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">$NUM</span><span class="sym">);</span>
print <span class="str">&quot;Ack(3,$NUM): $ack</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
