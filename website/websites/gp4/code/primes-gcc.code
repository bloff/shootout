<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Steven Noonan</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;math.h&gt;</span>

<span class="hl kwb">int</span>
<span class="hl kwd">isPrime</span> <span class="hl sym">(</span> <span class="hl kwb">unsigned long</span> _candidate <span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwb">unsigned long</span> i<span class="hl sym">,</span> limit<span class="hl sym">;</span>

	<span class="hl com">/* 0 and 1 aren't prime. */</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span> _candidate <span class="hl sym">&lt;</span> <span class="hl num">2</span> <span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl com">/* All numbers less than 4 are prime, except '1' */</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span> _candidate <span class="hl sym">&lt;</span> <span class="hl num">4</span> <span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl com">/* Other than 2, even numbers are not prime */</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span> _candidate <span class="hl sym">%</span> <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

	<span class="hl com">/* All primes are of the form 6k+i (where i = -1 or 1), except for 2 or 3. */</span>
    <span class="hl kwa">if</span> <span class="hl sym">( (</span> _candidate <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">) %</span> <span class="hl num">6</span> <span class="hl sym">!=</span> <span class="hl num">0</span>
      <span class="hl sym">&amp;&amp; (</span> _candidate <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">) %</span> <span class="hl num">6</span> <span class="hl sym">!=</span> <span class="hl num">0</span> <span class="hl sym">)</span>
    	<span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl com">/*</span>
<span class="hl com">       if n is composite then it can be factored into two values,</span>
<span class="hl com">       at least one of which is less than or equal to sqrt(n)</span>
<span class="hl com">     */</span>
    limit <span class="hl sym">= (</span><span class="hl kwb">unsigned long</span><span class="hl sym">)</span><span class="hl kwd">sqrt</span> <span class="hl sym">((</span><span class="hl kwb">double</span><span class="hl sym">)</span>_candidate<span class="hl sym">);</span>

    <span class="hl com">/* Now test all other odd numbers up to sqrt(n) */</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span> i <span class="hl sym">=</span> <span class="hl num">3</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> limit<span class="hl sym">;</span> i <span class="hl sym">+=</span> <span class="hl num">2</span> <span class="hl sym">)</span> <span class="hl kwa">if</span> <span class="hl sym">(</span> _candidate <span class="hl sym">%</span> i <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">unsigned long</span>
<span class="hl kwd">nthPrime</span> <span class="hl sym">(</span> <span class="hl kwb">unsigned long</span> _primeToFind <span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwb">unsigned long</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> num<span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span> num <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> count <span class="hl sym">&lt;</span> _primeToFind<span class="hl sym">;</span> num<span class="hl sym">++ )</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span> <span class="hl kwd">isPrime</span> <span class="hl sym">(</span> num <span class="hl sym">) )</span>
        <span class="hl sym">{</span>
            count<span class="hl sym">++;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl com">/* Returning num-1 because we hit a num++ between isPrime and here. */</span>
    <span class="hl kwa">return</span> num <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span> <span class="hl sym">(</span> <span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv <span class="hl sym">)</span>
<span class="hl sym">{</span>
	<span class="hl kwb">unsigned long</span> i<span class="hl sym">,</span> n<span class="hl sym">;</span>

	<span class="hl kwa">if</span> <span class="hl sym">(</span> argc <span class="hl sym">&lt;</span> <span class="hl num">2</span> <span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>

	n <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>

	<span class="hl kwd">printf</span> <span class="hl sym">(</span> <span class="hl str">&quot;1st prime is %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwd">nthPrime</span> <span class="hl sym">(</span> <span class="hl num">1</span> <span class="hl sym">) );</span>
	<span class="hl kwd">printf</span> <span class="hl sym">(</span> <span class="hl str">&quot;2nd prime is %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwd">nthPrime</span> <span class="hl sym">(</span> <span class="hl num">2</span> <span class="hl sym">) );</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span> i <span class="hl sym">=</span> <span class="hl num">10</span> <span class="hl sym">*</span> n<span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> <span class="hl num">50</span> <span class="hl sym">*</span> n<span class="hl sym">;</span> i <span class="hl sym">+=</span> <span class="hl num">10</span> <span class="hl sym">*</span> n <span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwd">printf</span> <span class="hl sym">(</span> <span class="hl str">&quot;%uth prime is %u</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> i<span class="hl sym">,</span> <span class="hl kwd">nthPrime</span> <span class="hl sym">(</span> i <span class="hl sym">) );</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
