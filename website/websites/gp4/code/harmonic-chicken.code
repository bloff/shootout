<span class="slc">;;;; The Great Computer Language Shootout</span>
<span class="slc">;;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;;</span>
<span class="slc">;; OCaml version contributed by Will M. Farr</span>

<span class="slc">;; ported to Chicken by Felix</span>

<span class="slc">;; to compile: csc harmonic.scm -O3 -unsafe-libraries -d0 -lambda-lift -o harmonic_chicken</span>


<span class="sym">(</span>declare <span class="sym">(</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span>uses format<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>sum<span class="sym">-</span>harmonic4 n<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">([</span>i <span class="num">1</span> <span class="sym">(</span>fx<span class="sym">+</span> i <span class="num">1</span><span class="sym">)]</span>
       <span class="sym">[</span>sum <span class="num">1.0</span> <span class="sym">(+</span> sum <span class="sym">(/</span> ifloat<span class="sym">))]</span>
       <span class="sym">[</span>ifloat <span class="num">2.0</span> <span class="sym">(+</span> ifloat <span class="num">1</span><span class="sym">)] )</span>
      <span class="sym">((</span>fx<span class="sym">&gt;=</span> i n<span class="sym">)</span> sum<span class="sym">) ) )</span>

<span class="sym">(</span>format #t <span class="str">&quot;~,9f~%&quot;</span>
	<span class="sym">(</span>sum<span class="sym">-</span>harmonic4
	 <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(:</span>optional <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)</span> <span class="str">&quot;10000000&quot;</span><span class="sym">))))</span>
