REBOL <span class="sym">[</span>
	Title<span class="sym">:</span> <span class="str">&quot;mandelbrot&quot;</span>
	Author<span class="sym">:</span> <span class="str">&quot;Robert Brandner&quot;</span>
<span class="sym">]</span>

n<span class="sym">:</span> either n<span class="sym">:</span> system<span class="sym">/</span>script<span class="sym">/</span>args <span class="sym">[</span>to<span class="sym">-</span>integer n<span class="sym">] [</span><span class="num">200</span><span class="sym">]</span>

header<span class="sym">:</span> rejoin <span class="sym">[</span><span class="str">&quot;P4^(0A)&quot;</span> n <span class="str">&quot; &quot;</span> n <span class="str">&quot;^(0A)&quot;</span><span class="sym">]</span>
write<span class="sym">-</span>io system<span class="sym">/</span>ports<span class="sym">/</span>output header length? header  <span class="sym">;</span> to write newline as <span class="num">0</span>A in windows

epsilon<span class="sym">:</span> <span class="num">0.00001</span>
nn<span class="sym">:</span> n <span class="sym">-</span> <span class="num">1</span>
iter<span class="sym">:</span> <span class="num">50</span>
limit2<span class="sym">:</span> <span class="num">4.0</span>
byte_acc<span class="sym">:</span> <span class="dir">#</span><span class="dstr">&quot;^&#64;&quot;</span><span class="dir"></span>
bit_num<span class="sym">:</span> <span class="num">0</span>

<span class="kwa">for</span> y <span class="num">0</span> nn <span class="num">1</span> <span class="sym">[</span>
	<span class="kwa">for</span> x <span class="num">0</span> nn <span class="num">1</span> <span class="sym">[</span>
		zr<span class="sym">:</span> zi<span class="sym">:</span> <span class="num">0.0</span>
		zr2<span class="sym">:</span> zi2<span class="sym">:</span> <span class="num">0.0</span>
		cr<span class="sym">: ((</span><span class="num">2.0</span> <span class="sym">*</span> x<span class="sym">) /</span> n<span class="sym">) -</span> <span class="num">1.5</span>
        ci<span class="sym">: ((</span><span class="num">2.0</span> <span class="sym">*</span> y<span class="sym">) /</span> n<span class="sym">) -</span> <span class="num">1.0</span>
        cr<span class="sym">:</span> round<span class="sym">/</span>to cr epsilon
        ci<span class="sym">:</span> round<span class="sym">/</span>to ci epsilon
        dot<span class="sym">:</span> <span class="kwa">true</span>
        loop iter <span class="sym">[</span>
        	tr<span class="sym">:</span> zr2 <span class="sym">-</span> zi2 <span class="sym">+</span> cr
            ti<span class="sym">: (</span><span class="num">2</span> <span class="sym">* (</span>zr <span class="sym">*</span> zi<span class="sym">)) +</span> ci
    		zr<span class="sym">:</span> tr
    		zi<span class="sym">:</span> ti
        	zr2<span class="sym">:</span> zr <span class="sym">*</span> zr
        	zi2<span class="sym">:</span> zi <span class="sym">*</span> zi
    		<span class="kwa">if</span> <span class="sym">((</span>zr2 <span class="sym">+</span> zi2<span class="sym">) &gt;</span> limit2<span class="sym">) [</span>dot<span class="sym">:</span> <span class="kwa">false break</span><span class="sym">]</span>
    	<span class="sym">]</span>
		byte_acc<span class="sym">:</span> byte_acc <span class="sym">*</span> <span class="num">2</span>
		<span class="kwa">if</span> dot <span class="sym">[</span>byte_acc<span class="sym">:</span> byte_acc <span class="kwa">or</span> <span class="num">1</span><span class="sym">]</span>
		bit_num<span class="sym">:</span> bit_num <span class="sym">+</span> <span class="num">1</span>

        <span class="kwa">if</span> <span class="sym">(</span>bit_num <span class="sym">==</span> <span class="num">8</span><span class="sym">)</span> <span class="kwa">or</span> <span class="sym">(</span>x <span class="sym">==</span> nn<span class="sym">) [</span>
        	byte_acc<span class="sym">:</span> byte_acc <span class="sym">* (</span><span class="num">2</span> <span class="sym">** (</span><span class="num">8</span> <span class="sym">-</span> bit_num<span class="sym">))</span>
			write<span class="sym">-</span>io system<span class="sym">/</span>ports<span class="sym">/</span>output to<span class="sym">-</span>string byte_acc <span class="num">1</span>  <span class="sym">;</span> needed to write ^<span class="sym">(</span>null<span class="sym">)</span>
			byte_acc<span class="sym">:</span> <span class="dir">#</span><span class="dstr">&quot;^&#64;&quot;</span><span class="dir"></span>
			bit_num<span class="sym">:</span> <span class="num">0</span>
    	<span class="sym">]</span>
	<span class="sym">]</span>
<span class="sym">]</span>
