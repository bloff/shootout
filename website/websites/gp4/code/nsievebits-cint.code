<span class="com">/*</span>
<span class="com"> * The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * Written by Dima Dorfman, 2004</span>
<span class="com"> * Modified by Greg Buchholz and Isaac Gouy for CINT</span>
<span class="com"> */</span>

<span class="dir">#include &lt;limits.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>

<span class="kwc">typedef</span> <span class="kwb">unsigned char</span> bits<span class="sym">;</span>
<span class="dir">#define	NBITS	(8 * sizeof(bits))</span>

<span class="kwb">static unsigned long</span>
<span class="kwd">nsieve</span><span class="sym">(</span><span class="kwb">const unsigned long</span> m<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwb">unsigned long</span> count<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">;</span>
	bits a<span class="sym">[</span>m <span class="sym">/</span> NBITS<span class="sym">];</span>

	<span class="kwd">memset</span><span class="sym">(</span>a<span class="sym">, (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> <span class="num">8</span><span class="sym">) -</span> <span class="num">1</span><span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>a<span class="sym">));</span>
	count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> m<span class="sym">; ++</span>i<span class="sym">)</span>
		<span class="kwa">if</span> <span class="sym">(</span>a<span class="sym">[</span>i <span class="sym">/</span> NBITS<span class="sym">] &amp; (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> i <span class="sym">%</span> NBITS<span class="sym">)) {</span>
			<span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> i <span class="sym">+</span> i<span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">;</span> j <span class="sym">+=</span> i<span class="sym">)</span>
				a<span class="sym">[</span>j <span class="sym">/</span> NBITS<span class="sym">] &amp;= ~(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> j <span class="sym">%</span> NBITS<span class="sym">);</span>
			<span class="sym">++</span>count<span class="sym">;</span>
		<span class="sym">}</span>
	<span class="kwa">return</span> <span class="sym">(</span>count<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">static void</span>
<span class="kwd">test</span><span class="sym">(</span><span class="kwb">unsigned long</span> n<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwb">unsigned long</span> count<span class="sym">,</span> m<span class="sym">;</span>

	m <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
	count <span class="sym">=</span> <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">);</span>
	<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Primes up to %8u %8u</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> count<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> ac<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>av<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwb">unsigned long</span> n<span class="sym">;</span>
	<span class="kwb">char</span> <span class="sym">*</span>cp<span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span>ac <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">) {</span>
usage<span class="sym">:</span>		<span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;usage: nsieve N</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
		<span class="kwd">exit</span><span class="sym">(</span><span class="num">2</span><span class="sym">);</span>
	<span class="sym">}</span>
	n <span class="sym">=</span> <span class="kwd">strtoul</span><span class="sym">(</span>av<span class="sym">[</span><span class="num">1</span><span class="sym">], &amp;</span>cp<span class="sym">,</span> <span class="num">10</span><span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(*</span>av<span class="sym">[</span><span class="num">1</span><span class="sym">] ==</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span> <span class="sym">|| *</span>cp <span class="sym">!=</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span> <span class="sym">||</span> n <span class="sym">==</span> ULONG_MAX<span class="sym">)</span>
		<span class="kwa">goto</span> usage<span class="sym">;</span>
	<span class="kwd">test</span><span class="sym">(</span>n<span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">)</span>
		<span class="kwd">test</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">)</span>
		<span class="kwd">test</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">);</span>
	<span class="kwd">exit</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
