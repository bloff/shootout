<span class="com">(* fannkuch.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 * Translated to SML by sweeks&#64;sweeks.com.
 *)</span>

<span class="kwa">val</span> sub <span class="sym">=</span> Array.sub
<span class="kwa">val</span> update <span class="sym">=</span> Array.update

<span class="kwa">fun</span> countFlips perm <span class="sym">=
</span>   <span class="kwa">let
      fun</span> loop c <span class="sym">=
</span>	 <span class="kwa">let
	    val</span> k <span class="sym">=</span> sub <span class="sym">(</span>perm<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span>	 <span class="kwa">in
	    if</span> k <span class="sym">=</span> <span class="num">0
</span>	       <span class="kwa">then</span> c
	    <span class="kwa">else
	       let
		  val</span> <span class="sym">() =
</span>		     for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> k div <span class="num">2</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span>			  <span class="kwa">let
			     val</span> k_i <span class="sym">=</span> k <span class="sym">-</span> i
			     <span class="kwa">val</span> perm_i <span class="sym">=</span> sub <span class="sym">(</span>perm<span class="sym">,</span> i<span class="sym">)
</span>			  <span class="kwa">in
</span>			     update <span class="sym">(</span>perm<span class="sym">,</span> i<span class="sym">,</span> sub <span class="sym">(</span>perm<span class="sym">,</span> k_i<span class="sym">))
			     ;</span> update <span class="sym">(</span>perm<span class="sym">,</span> k_i<span class="sym">,</span> perm_i<span class="sym">)
</span>			  <span class="kwa">end</span><span class="sym">)
</span>	       <span class="kwa">in
</span>		  loop <span class="sym">(</span>c <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span>	       <span class="kwa">end
	 end
   in
</span>      loop <span class="num">0
</span>   <span class="kwa">end

fun</span> pfannkuchen n <span class="sym">=
</span>  <span class="kwa">let
     val</span> perm <span class="sym">=</span> Array.tabulate <span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> i<span class="sym">)
</span>     <span class="kwa">val</span> perm' <span class="sym">=</span> Array.array <span class="sym">(</span>n<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span>     <span class="kwa">val</span> count <span class="sym">=</span> Array.tabulate <span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span>     <span class="kwa">val</span> m <span class="sym">=</span> n <span class="num">- 1
</span>     <span class="kwa">fun</span> loop <span class="sym">(</span>maxflips<span class="sym">,</span> r<span class="sym">) =
</span>	<span class="kwa">if</span> r <span class="sym">=</span> n
	   <span class="kwa">then</span> maxflips
	<span class="kwa">else
	   let
</span>	      <span class="com">(* Rotate perm.(0 .. r-1) *)</span>
	      <span class="kwa">val</span> perm0 <span class="sym">=</span> sub <span class="sym">(</span>perm<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span>	      <span class="kwa">val</span> <span class="sym">() =
</span>		 for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> r<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> update <span class="sym">(</span>perm<span class="sym">,</span> i<span class="sym">,</span> sub <span class="sym">(</span>perm<span class="sym">,</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)))
</span>	      <span class="kwa">val</span> <span class="sym">() =</span> update <span class="sym">(</span>perm<span class="sym">,</span> r<span class="sym">,</span> perm0<span class="sym">)
</span>	      <span class="kwa">val</span> <span class="sym">() =</span> update <span class="sym">(</span>count<span class="sym">,</span> r<span class="sym">,</span> sub <span class="sym">(</span>count<span class="sym">,</span> r<span class="sym">) -</span> <span class="num">1</span><span class="sym">)
</span>	   <span class="kwa">in
	      if</span> sub <span class="sym">(</span>count<span class="sym">,</span> r<span class="sym">) &gt;</span> <span class="num">0
</span>		 <span class="kwa">then
		    let
		       val</span> <span class="sym">() =</span> for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> r<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> update <span class="sym">(</span>count<span class="sym">,</span> i<span class="sym">,</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span>		    <span class="kwa">in
		       if</span> sub <span class="sym">(</span>perm<span class="sym">,</span> <span class="num">0</span><span class="sym">) &lt;&gt;</span> <span class="num">0</span> <span class="kwa">andalso</span> sub <span class="sym">(</span>perm<span class="sym">,</span> m<span class="sym">) &lt;&gt;</span> m
			  <span class="kwa">then
</span>			     <span class="sym">(</span>for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> m <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span>				   update <span class="sym">(</span>perm'<span class="sym">,</span> i<span class="sym">,</span> sub <span class="sym">(</span>perm<span class="sym">,</span> i<span class="sym">)))
			      ;</span> loop <span class="sym">(</span><span class="kwa">Int</span>.max <span class="sym">(</span>countFlips perm'<span class="sym">,</span> maxflips<span class="sym">),
</span>				      <span class="num">1</span><span class="sym">))
</span>		       <span class="kwa">else</span> loop <span class="sym">(</span>maxflips<span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span>		    <span class="kwa">end
	      else</span> loop <span class="sym">(</span>maxflips<span class="sym">,</span> r <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span>	   <span class="kwa">end
  in
</span>     loop <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span>  <span class="kwa">end

val</span> n <span class="sym">=</span> valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString <span class="sym">(</span>hd <span class="sym">(</span>CommandLine.arguments <span class="sym">())))</span> <span class="kwa">handle</span> _ <span class="sym">=&gt;</span> <span class="num">1

</span><span class="kwa">val</span> <span class="sym">() =</span> print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString n<span class="sym">,</span> <span class="str">&quot;) = &quot;</span><span class="sym">,
</span>			<span class="kwa">Int</span>.toString <span class="sym">(</span>pfannkuchen n<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])</span>
