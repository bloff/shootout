<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">// modified by bearophile, Dec 1 2007</span>


<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>string<span class="hl sym">,</span> std<span class="hl sym">.</span>cstream<span class="hl sym">;</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>regexp<span class="hl sym">:</span> RegExp<span class="hl sym">,</span> search<span class="hl sym">,</span> resplit <span class="hl sym">=</span> split<span class="hl sym">;</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">() {</span>
    <span class="hl kwa">char</span><span class="hl sym">[][]</span> sseq<span class="hl sym">;</span>
    <span class="hl kwa">int</span> n<span class="hl sym">;</span>
    <span class="hl kwa">char</span><span class="hl sym">[</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">15</span><span class="hl sym">]</span> cbuf<span class="hl sym">;</span>

    <span class="hl slc">// auto seq = din.toString(); // SLOW</span>
    <span class="hl kwa">while</span> <span class="hl sym">((</span>n <span class="hl sym">=</span> din<span class="hl sym">.</span><span class="hl kwd">readBlock</span><span class="hl sym">(</span>cbuf<span class="hl sym">.</span>ptr<span class="hl sym">,</span> cbuf<span class="hl sym">.</span>length<span class="hl sym">)) &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl slc">// sseq ~= cbuf[0 .. n][]; // slow</span>
        sseq <span class="hl sym">~=</span> cbuf<span class="hl sym">[</span><span class="hl num">0</span> <span class="hl sym">..</span> n<span class="hl sym">].</span>dup<span class="hl sym">;</span>
    <span class="hl kwa">auto</span> seq <span class="hl sym">=</span> sseq<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
    <span class="hl kwa">auto</span> ilen <span class="hl sym">=</span> seq<span class="hl sym">.</span>length<span class="hl sym">;</span>

    <span class="hl slc">//seq = sub(seq, &quot;&gt;.*\n|\n&quot;, &quot;&quot;, &quot;g&quot;); // SLOW!!</span>
    seq <span class="hl sym">=</span> <span class="hl kwd">resplit</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> <span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">).</span><span class="hl kwd">join</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
    <span class="hl kwa">int</span> clen <span class="hl sym">=</span> seq<span class="hl sym">.</span>length<span class="hl sym">;</span>

    <span class="hl kwa">foreach</span><span class="hl sym">(</span>p<span class="hl sym">;</span> <span class="hl kwd">split</span><span class="hl sym">(</span><span class="hl str">&quot;agggtaaa|tttaccct</span>
<span class="hl str">                      [cgt]gggtaaa|tttaccc[acg]</span>
<span class="hl str">                      a[act]ggtaaa|tttacc[agt]t</span>
<span class="hl str">                      ag[act]gtaaa|tttac[agt]ct</span>
<span class="hl str">                      agg[act]taaa|ttta[agt]cct</span>
<span class="hl str">                      aggg[acg]aaa|ttt[cgt]ccct</span>
<span class="hl str">                      agggt[cgt]aa|tt[acg]accct</span>
<span class="hl str">                      agggta[cgt]a|t[acg]taccct</span>
<span class="hl str">                      agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl sym">)) {</span>
        <span class="hl kwa">int</span> m <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">foreach</span><span class="hl sym">(</span>_<span class="hl sym">;</span> <span class="hl kwd">RegExp</span><span class="hl sym">(</span>p<span class="hl sym">).</span><span class="hl kwd">search</span><span class="hl sym">(</span>seq<span class="hl sym">))</span>
            m<span class="hl sym">++;</span>
        <span class="hl kwd">writefln</span><span class="hl sym">(</span>p<span class="hl sym">,</span> <span class="hl str">' '</span><span class="hl sym">,</span> m<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">foreach</span><span class="hl sym">(</span>el<span class="hl sym">;</span> <span class="hl kwd">split</span><span class="hl sym">(</span><span class="hl str">&quot;B(c|g|t) D(a|g|t) H(a|c|t) K(g|t) M(a|c)</span>
<span class="hl str">                       N(a|c|g|t) R(a|g) S(c|g) V(a|c|g) W(a|t) Y(c|t)&quot;</span><span class="hl sym">))</span>
        <span class="hl slc">// seq = RegExp(el[0..1], &quot;g&quot;).replace(seq, el[1..$]); // Slow</span>
        seq <span class="hl sym">= (</span><span class="hl kwa">new</span> <span class="hl kwd">RegExp</span><span class="hl sym">(</span>el<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.1</span><span class="hl sym">],</span> <span class="hl str">&quot;g&quot;</span><span class="hl sym">)).</span><span class="hl kwd">replace</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> el<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">..</span>$<span class="hl sym">]);</span>

    <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> ilen<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> clen<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> seq<span class="hl sym">.</span>length<span class="hl sym">);</span>
<span class="hl sym">}</span>
