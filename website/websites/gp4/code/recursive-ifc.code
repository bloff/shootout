<span class="hl slc">! The Computer Language Shootout</span>
<span class="hl slc">!   http://shootout.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">!   contributed by Steve Decker</span>
<span class="hl slc">!</span>
<span class="hl slc">! compilation:</span>
<span class="hl slc">!   g95 -O3 -fomit-frame-pointer -ffast-math recursive.f90</span>
<span class="hl slc">!   gfortran -O2 -fomit-frame-pointer -ffast-math recursive.f90</span>
<span class="hl slc">!   ifort -O3 -ip -static recursive.f90</span>

module recursives
  implicit none

  integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> dp <span class="hl sym">=</span> selected_real_kind<span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)</span>

contains

  integer recursive function ack<span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">)</span> result <span class="hl sym">(</span>a<span class="hl sym">)</span>
    integer<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> x<span class="hl sym">,</span> y

    if <span class="hl sym">(</span>x <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> then
       a <span class="hl sym">=</span> y <span class="hl sym">+</span> <span class="hl num">1</span>
    else if <span class="hl sym">(</span>y <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> then
       a <span class="hl sym">=</span> ack<span class="hl sym">(</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
    else
       a <span class="hl sym">=</span> ack<span class="hl sym">(</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> ack<span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
    end if
  end function ack

  integer recursive function fibI<span class="hl sym">(</span>n<span class="hl sym">)</span> result <span class="hl sym">(</span>f<span class="hl sym">)</span>
    integer<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> n

    if <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span> then
       f <span class="hl sym">=</span> <span class="hl num">1</span>
    else
       f <span class="hl sym">=</span> fibI<span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">) +</span> fibI<span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
    end if
  end function fibI

  real<span class="hl sym">(</span>dp<span class="hl sym">)</span> recursive function fibR<span class="hl sym">(</span>n<span class="hl sym">)</span> result <span class="hl sym">(</span>f<span class="hl sym">)</span>
    real<span class="hl sym">(</span>dp<span class="hl sym">),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> n

    if <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span> then
       f <span class="hl sym">=</span> <span class="hl num">1</span>
    else
       f <span class="hl sym">=</span> fibR<span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">) +</span> fibR<span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
    end if
  end function fibR

  integer recursive function takI<span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">,</span> z<span class="hl sym">)</span> result <span class="hl sym">(</span>t<span class="hl sym">)</span>
    integer<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> x<span class="hl sym">,</span> y<span class="hl sym">,</span> z

    if <span class="hl sym">(</span>y <span class="hl sym">&lt;</span> x<span class="hl sym">)</span> then
       t <span class="hl sym">=</span> takI<span class="hl sym">(</span>takI<span class="hl sym">(</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">,</span> z<span class="hl sym">),</span> takI<span class="hl sym">(</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> z<span class="hl sym">,</span> x<span class="hl sym">),</span> takI<span class="hl sym">(</span>z<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> x<span class="hl sym">,</span> y<span class="hl sym">))</span>
    else
       t <span class="hl sym">=</span> z
    end if
  end function takI

  real<span class="hl sym">(</span>dp<span class="hl sym">)</span> recursive function takR<span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">,</span> z<span class="hl sym">)</span> result <span class="hl sym">(</span>t<span class="hl sym">)</span>
    real<span class="hl sym">(</span>dp<span class="hl sym">),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> x<span class="hl sym">,</span> y<span class="hl sym">,</span> z

    if <span class="hl sym">(</span>y <span class="hl sym">&lt;</span> x<span class="hl sym">)</span> then
       t <span class="hl sym">=</span> takR<span class="hl sym">(</span>takR<span class="hl sym">(</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">,</span> z<span class="hl sym">),</span> takR<span class="hl sym">(</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> z<span class="hl sym">,</span> x<span class="hl sym">),</span> takR<span class="hl sym">(</span>z<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> x<span class="hl sym">,</span> y<span class="hl sym">))</span>
    else
       t <span class="hl sym">=</span> z
    end if
  end function takR
end module recursives

program recurs
  use recursives
  implicit none

  real<span class="hl sym">(</span>dp<span class="hl sym">)               ::</span> fr
  integer<span class="hl sym">,</span>  dimension<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">) ::</span> ti
  integer                <span class="hl sym">::</span> n
  character<span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">)       ::</span> argv

  call get_command_argument<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> argv<span class="hl sym">)</span>
  read <span class="hl sym">(</span>argv<span class="hl sym">,</span> <span class="hl str">&quot;(i2)&quot;</span><span class="hl sym">)</span> n

  fr <span class="hl sym">=</span> n <span class="hl sym">+</span> <span class="hl num">27</span>
  ti <span class="hl sym">= (/</span> <span class="hl num">3</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">1</span> <span class="hl sym">/) * (</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>

  write<span class="hl sym">(*,</span> <span class="hl str">&quot;(2(a,i0))&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;Ack(3,&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">&quot;): &quot;</span><span class="hl sym">,</span> ack<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> n<span class="hl sym">)</span>
  write<span class="hl sym">(*,</span> <span class="hl str">&quot;(2(a,f0.1))&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;Fib(&quot;</span><span class="hl sym">,</span> fr<span class="hl sym">,</span> <span class="hl str">&quot;): &quot;</span><span class="hl sym">,</span> fibR<span class="hl sym">(</span>fr<span class="hl sym">)</span>
  write<span class="hl sym">(*,</span> <span class="hl str">&quot;(4(a,i0))&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;Tak(&quot;</span><span class="hl sym">,</span> ti<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> <span class="hl str">&quot;,&quot;</span><span class="hl sym">,</span> ti<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">),</span> <span class="hl str">&quot;,&quot;</span><span class="hl sym">,</span> ti<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">),</span> <span class="hl str">&quot;): &quot;</span><span class="hl sym">,</span> takI<span class="hl sym">(</span>ti<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> ti<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">),</span> ti<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">))</span>
  write<span class="hl sym">(*,</span> <span class="hl str">&quot;(a,i0)&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;Fib(3): &quot;</span><span class="hl sym">,</span> fibI<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
  write<span class="hl sym">(*,</span> <span class="hl str">&quot;(a,f0.1)&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;Tak(3.0,2.0,1.0): &quot;</span><span class="hl sym">,</span> takR<span class="hl sym">(</span><span class="hl num">3</span>d0<span class="hl sym">,</span> <span class="hl num">2</span>d0<span class="hl sym">,</span> <span class="hl num">1</span>d0<span class="hl sym">)</span>
end program recurs
