<span class="hl slc">' The Computer Language Shootout</span>
<span class="hl slc">' http://shootout.alioth.debian.org/</span>
<span class="hl slc">' gcc program contributed by Mike Pall</span>
<span class="hl slc">' converted to FreeBASIC from gcc by Simon Nash</span>

#include <span class="hl str">&quot;crt.bi&quot;</span>
#include <span class="hl str">&quot;pcre/pcre.bi&quot;</span>
<span class="hl slc">'#include &quot;pcre/pcreposix.bi&quot;</span>

<span class="hl kwa">Type</span> fbuf_t
  <span class="hl kwa">As</span> ZString ptr buf
  <span class="hl kwa">As</span> size_t size<span class="hl sym">,</span> len
<span class="hl kwa">End Type</span>

<span class="hl kwa">Function</span> <span class="hl kwd">fb_need</span><span class="hl sym">(</span><span class="hl kwa">ByVal</span> b <span class="hl kwa">As</span> fbuf_t ptr<span class="hl sym">,</span> <span class="hl kwa">ByVal</span> need <span class="hl kwa">As</span> size_t<span class="hl sym">)</span> <span class="hl kwa">As</span> ZString ptr
  need <span class="hl sym">+=</span> b<span class="hl sym">-&gt;</span>len
  <span class="hl kwa">If</span> need <span class="hl sym">&gt;</span> b<span class="hl sym">-&gt;</span>size <span class="hl kwa">Then</span>
    <span class="hl kwa">If</span> b<span class="hl sym">-&gt;</span>size <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">Then</span>
      b<span class="hl sym">-&gt;</span>size <span class="hl sym">=</span> need
    <span class="hl kwa">Else</span>
      <span class="hl kwa">While</span> need <span class="hl sym">&gt;</span> b<span class="hl sym">-&gt;</span>size
        b<span class="hl sym">-&gt;</span>size <span class="hl sym">+=</span> b<span class="hl sym">-&gt;</span>size
      <span class="hl kwa">Wend</span>
    <span class="hl kwa">End If</span>
    b<span class="hl sym">-&gt;</span>buf <span class="hl sym">=</span> <span class="hl kwd">realloc</span><span class="hl sym">(</span>b<span class="hl sym">-&gt;</span>buf<span class="hl sym">,</span> b<span class="hl sym">-&gt;</span>size<span class="hl sym">)</span>
    <span class="hl kwa">If</span> b<span class="hl sym">-&gt;</span>buf <span class="hl sym">=</span> NULL <span class="hl kwa">Then End</span> <span class="hl num">1</span>
  <span class="hl kwa">End If</span>
  <span class="hl kwa">Return</span> b<span class="hl sym">-&gt;</span>buf<span class="hl sym">+</span>b<span class="hl sym">-&gt;</span>len
<span class="hl kwa">End Function</span>

#define <span class="hl kwd">FB_MINREAD</span>  <span class="hl sym">(</span><span class="hl num">3</span> shl <span class="hl num">16</span><span class="hl sym">)</span>

<span class="hl slc">' Read all of a stdio stream into dst buffer</span>
<span class="hl kwa">Function</span> <span class="hl kwd">fb_readall</span><span class="hl sym">(</span><span class="hl kwa">ByVal</span> dst <span class="hl kwa">As</span> fbuf_t ptr<span class="hl sym">,</span> <span class="hl kwa">ByVal</span> fp <span class="hl kwa">As</span> FILE ptr<span class="hl sym">)</span> <span class="hl kwa">As</span> size_t
  <span class="hl kwa">Dim As</span> ZString ptr dp
  <span class="hl kwa">Dim As</span> <span class="hl kwb">Integer</span> n
    dp <span class="hl sym">=</span> <span class="hl kwd">fb_need</span><span class="hl sym">(</span>dst<span class="hl sym">,</span> FB_MINREAD<span class="hl sym">)</span>
    <span class="hl kwa">Do</span>
      n <span class="hl sym">=</span> <span class="hl kwd">fread</span><span class="hl sym">(</span>dp<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> dst<span class="hl sym">-&gt;</span>size<span class="hl sym">-</span>dst<span class="hl sym">-&gt;</span>len<span class="hl sym">,</span> fp<span class="hl sym">)</span>
      <span class="hl kwa">If</span> n <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">Then Exit Do</span>
      dst<span class="hl sym">-&gt;</span>len <span class="hl sym">+=</span> n
      dp <span class="hl sym">=</span> <span class="hl kwd">fb_need</span><span class="hl sym">(</span>dst<span class="hl sym">,</span> FB_MINREAD<span class="hl sym">)</span>
    <span class="hl kwa">Loop</span>
    <span class="hl kwa">If</span> <span class="hl kwd">ferror</span><span class="hl sym">(</span>fp<span class="hl sym">) &lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">Then End</span> <span class="hl num">1</span>
    <span class="hl kwa">Return</span> dst<span class="hl sym">-&gt;</span>len
<span class="hl kwa">End Function</span>

<span class="hl slc">' Substitute pattern p with replacement r, copying from src to dst buffer.</span>
<span class="hl kwa">Function</span> <span class="hl kwd">fb_subst</span><span class="hl sym">(</span><span class="hl kwa">ByVal</span> dst <span class="hl kwa">As</span> fbuf_t ptr<span class="hl sym">,</span> <span class="hl kwa">ByVal</span> src <span class="hl kwa">As</span> fbuf_t ptr<span class="hl sym">,</span> _
                  <span class="hl kwa">ByVal</span> p <span class="hl kwa">As</span> ZString ptr<span class="hl sym">,</span> <span class="hl kwa">ByVal</span> r <span class="hl kwa">As</span> ZString ptr<span class="hl sym">)</span> <span class="hl kwa">As</span> size_t
  <span class="hl kwa">Dim As</span> pcre ptr re
  <span class="hl kwa">Dim As</span> pcre_extra ptr re_ex
  <span class="hl kwa">Dim As</span> ZString ptr re_e
  <span class="hl kwa">Dim As</span> ZString ptr dp
  <span class="hl kwa">Dim As</span> <span class="hl kwb">Integer</span> re_eo<span class="hl sym">,</span> <span class="hl kwd">m</span><span class="hl sym">(</span><span class="hl num">0</span> <span class="hl kwa">To</span> <span class="hl num">2</span><span class="hl sym">),</span> _pos<span class="hl sym">,</span> rlen<span class="hl sym">,</span> clen
    re <span class="hl sym">=</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span>p<span class="hl sym">,</span> PCRE_CASELESS<span class="hl sym">,</span> &#64;re_e<span class="hl sym">,</span> &#64;re_eo<span class="hl sym">,</span> NULL<span class="hl sym">)</span>
    <span class="hl kwa">If</span> re <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">Then End</span> <span class="hl num">1</span>
    re_ex <span class="hl sym">=</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span>re<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> &#64;re_e<span class="hl sym">)</span>
    rlen <span class="hl sym">=</span> <span class="hl kwd">strlen</span><span class="hl sym">(</span>r<span class="hl sym">)</span>
    dst<span class="hl sym">-&gt;</span>len <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">Do</span>
      <span class="hl kwa">If</span> <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>re<span class="hl sym">,</span> re_ex<span class="hl sym">,</span> src<span class="hl sym">-&gt;</span>buf<span class="hl sym">,</span> src<span class="hl sym">-&gt;</span>len<span class="hl sym">,</span> _pos<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> &#64;<span class="hl kwd">m</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> <span class="hl num">3</span><span class="hl sym">) &lt;</span> <span class="hl num">0</span> <span class="hl kwa">Then Exit Do</span>
      clen <span class="hl sym">=</span> <span class="hl kwd">m</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)-</span>_pos
      dp <span class="hl sym">=</span> <span class="hl kwd">fb_need</span><span class="hl sym">(</span>dst<span class="hl sym">,</span> clen<span class="hl sym">+</span>rlen<span class="hl sym">)</span>
      dst<span class="hl sym">-&gt;</span>len <span class="hl sym">+=</span> clen<span class="hl sym">+</span>rlen
      <span class="hl kwd">memcpy</span><span class="hl sym">(</span>dp<span class="hl sym">,</span> src<span class="hl sym">-&gt;</span>buf<span class="hl sym">+</span>_pos<span class="hl sym">,</span> clen<span class="hl sym">)</span>
      <span class="hl kwd">memcpy</span><span class="hl sym">(</span>dp<span class="hl sym">+</span>clen<span class="hl sym">,</span> r<span class="hl sym">,</span> rlen<span class="hl sym">)</span>
      _pos <span class="hl sym">=</span> <span class="hl kwd">m</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">Loop</span>
    clen <span class="hl sym">=</span> src<span class="hl sym">-&gt;</span>len<span class="hl sym">-</span>_pos
    dp <span class="hl sym">=</span> <span class="hl kwd">fb_need</span><span class="hl sym">(</span>dst<span class="hl sym">,</span> clen<span class="hl sym">)</span>
    dst<span class="hl sym">-&gt;</span>len <span class="hl sym">+=</span> clen
    <span class="hl kwd">memcpy</span><span class="hl sym">(</span>dp<span class="hl sym">,</span> src<span class="hl sym">-&gt;</span>buf<span class="hl sym">+</span>_pos<span class="hl sym">,</span> clen<span class="hl sym">)</span>
    <span class="hl kwa">Return</span> dst<span class="hl sym">-&gt;</span>len
<span class="hl kwa">End Function</span>

<span class="hl slc">' Count all matches with pattern p in src buffer.</span>
<span class="hl kwa">Function</span> <span class="hl kwd">fb_countmatches</span><span class="hl sym">(</span><span class="hl kwa">ByVal</span> src <span class="hl kwa">As</span> fbuf_t ptr<span class="hl sym">,</span> <span class="hl kwa">ByVal</span> p <span class="hl kwa">As</span> ZString ptr<span class="hl sym">)</span> <span class="hl kwa">As</span> <span class="hl kwb">Integer</span>
  <span class="hl kwa">Dim As</span> pcre ptr re
  <span class="hl kwa">Dim As</span> pcre_extra ptr re_ex
  <span class="hl kwa">Dim As</span> ZString ptr re_e
  <span class="hl kwa">Dim As</span> <span class="hl kwb">Integer</span> re_eo<span class="hl sym">,</span> <span class="hl kwd">m</span><span class="hl sym">(</span><span class="hl num">0</span> <span class="hl kwa">To</span> <span class="hl num">2</span><span class="hl sym">),</span> _pos<span class="hl sym">,</span> count
    re <span class="hl sym">=</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span>p<span class="hl sym">,</span> PCRE_CASELESS<span class="hl sym">,</span> &#64;re_e<span class="hl sym">,</span> &#64;re_eo<span class="hl sym">,</span> NULL<span class="hl sym">)</span>
    <span class="hl kwa">If</span> re <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">Then End</span> <span class="hl num">1</span>
    re_ex <span class="hl sym">=</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span>re<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> &#64;re_e<span class="hl sym">)</span>
    <span class="hl kwa">Do</span>
      <span class="hl kwa">If</span> <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>re<span class="hl sym">,</span> re_ex<span class="hl sym">,</span> src<span class="hl sym">-&gt;</span>buf<span class="hl sym">,</span> src<span class="hl sym">-&gt;</span>len<span class="hl sym">,</span> _pos<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> &#64;<span class="hl kwd">m</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> <span class="hl num">3</span><span class="hl sym">) &lt;</span> <span class="hl num">0</span> <span class="hl kwa">Then Exit Do</span>
      count <span class="hl sym">+=</span> <span class="hl num">1</span>
      _pos <span class="hl sym">=</span> <span class="hl kwd">m</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">Loop</span>
    <span class="hl kwa">Return</span> count
<span class="hl kwa">End Function</span>

<span class="hl kwa">Dim</span> Shared <span class="hl kwa">As</span> ZString ptr <span class="hl kwd">variants</span><span class="hl sym">(</span><span class="hl num">0</span> <span class="hl kwa">To</span> <span class="hl num">9</span><span class="hl sym">) = {</span> _
  &#64;<span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>         &#64;<span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span> _
  &#64;<span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span> _
  &#64;<span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span> _
  &#64;<span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span> _
  &#64;<span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl sym">,</span> NULL _
<span class="hl sym">}</span>

<span class="hl kwa">Dim</span> Shared <span class="hl kwa">As</span> ZString ptr <span class="hl kwd">subst</span><span class="hl sym">(</span><span class="hl num">0</span> <span class="hl kwa">To</span> <span class="hl num">22</span><span class="hl sym">) = {</span> _
  &#64;<span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">,</span>   &#64;<span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">,</span> _
  &#64;<span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">,</span>   &#64;<span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">,</span>   &#64;<span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">,</span> _
  &#64;<span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">,</span>     &#64;<span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> &#64;<span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">,</span>   NULL _
<span class="hl sym">}</span>


<span class="hl kwa">Dim As</span> fbuf_t <span class="hl kwd">seq</span><span class="hl sym">(</span><span class="hl num">0</span> <span class="hl kwa">To</span> <span class="hl num">1</span><span class="hl sym">)</span>
<span class="hl kwa">Dim As</span> ZString ptr ptr pp
<span class="hl kwa">Dim As</span> size_t ilen<span class="hl sym">,</span> clen<span class="hl sym">,</span> slen
<span class="hl kwa">Dim As</span> <span class="hl kwb">Integer</span> _flip

  ilen <span class="hl sym">=</span> <span class="hl kwd">fb_readall</span><span class="hl sym">(</span>&#64;<span class="hl kwd">seq</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> stdin<span class="hl sym">)</span>
  clen <span class="hl sym">=</span> <span class="hl kwd">fb_subst</span><span class="hl sym">(</span>&#64;<span class="hl kwd">seq</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> &#64;<span class="hl kwd">seq</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> <span class="hl str">&quot;&gt;.*|&quot;</span> <span class="hl sym">&amp;</span> <span class="hl kwd">Chr</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">),</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>

  pp <span class="hl sym">=</span> &#64;<span class="hl kwd">variants</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">While</span> <span class="hl sym">*</span>pp
    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%s %d%c&quot;</span><span class="hl sym">, *</span>pp<span class="hl sym">,</span> <span class="hl kwd">fb_countmatches</span><span class="hl sym">(</span>&#64;<span class="hl kwd">seq</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">), *</span>pp<span class="hl sym">),</span> <span class="hl num">10</span><span class="hl sym">)</span>
    pp <span class="hl sym">+=</span> <span class="hl num">1</span>
  <span class="hl kwa">Wend</span>

  _flip <span class="hl sym">=</span> <span class="hl num">1</span>
  pp <span class="hl sym">=</span> &#64;<span class="hl kwd">subst</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl kwa">Do</span>
    <span class="hl kwa">If</span> <span class="hl sym">*</span>pp <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">Then Exit Do</span>
    slen <span class="hl sym">=</span> <span class="hl kwd">fb_subst</span><span class="hl sym">(</span>&#64;<span class="hl kwd">seq</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span>_flip<span class="hl sym">),</span> &#64;<span class="hl kwd">seq</span><span class="hl sym">(</span>_flip<span class="hl sym">), *</span>pp<span class="hl sym">,</span> pp<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
    pp <span class="hl sym">+=</span> <span class="hl num">2</span>
    _flip <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">-</span>_flip
  <span class="hl kwa">Loop</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%c%zu%c%zu%c%zu%c&quot;</span><span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">,</span> ilen<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">,</span> clen<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">,</span> slen<span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">)</span>

