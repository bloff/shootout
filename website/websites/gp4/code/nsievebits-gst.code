<span class="hl com">&quot;* The Computer Language Shootout</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Isaac Gouy</span>
<span class="hl com">    modified by Eliot Miranda *&quot;</span><span class="hl sym">!</span>

ArrayedCollection variableByteSubclass<span class="hl sym">: #</span>BitArray   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>   classVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>   poolDictionaries<span class="hl sym">:</span> <span class="hl str">''</span>   category<span class="hl sym">:</span> <span class="hl str">'Shootout'</span><span class="hl sym">!</span>

<span class="hl sym">!</span>BitArray methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>at<span class="hl sym">:</span> index    <span class="hl sym">|</span> wordIndex bitMask <span class="hl sym">|</span>    wordIndex <span class="hl sym">:= ((</span>index <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> bitShift<span class="hl sym">: -</span><span class="hl num">3</span><span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">.</span>    bitMask <span class="hl sym">:=</span> <span class="hl num">1</span> bitShift<span class="hl sym">: (</span>index <span class="hl sym">-</span> <span class="hl num">1</span> bitAnd<span class="hl sym">:</span> <span class="hl num">7</span><span class="hl sym">).    ^((</span><span class="hl kwa">self</span> basicAt<span class="hl sym">:</span> wordIndex<span class="hl sym">)</span> bitAnd<span class="hl sym">:</span> bitMask<span class="hl sym">) &gt;</span> <span class="hl num">0</span><span class="hl sym">! !</span>
<span class="hl sym">!</span>BitArray methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>at<span class="hl sym">:</span> index put<span class="hl sym">:</span> bit    <span class="hl sym">|</span> wordIndex bitMask word <span class="hl sym">|</span>    wordIndex <span class="hl sym">:= ((</span>index <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> bitShift<span class="hl sym">: -</span><span class="hl num">3</span><span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">.</span>    bitMask <span class="hl sym">:=</span> <span class="hl num">1</span> bitShift<span class="hl sym">: (</span>index <span class="hl sym">-</span> <span class="hl num">1</span> bitAnd<span class="hl sym">:</span> <span class="hl num">7</span><span class="hl sym">).</span>    word <span class="hl sym">:=</span> <span class="hl kwa">self</span> basicAt<span class="hl sym">:</span> wordIndex<span class="hl sym">.</span>    word <span class="hl sym">:=</span> word bitOr<span class="hl sym">:</span> bitMask<span class="hl sym">.</span>    bit ifFalse<span class="hl sym">: [</span>word <span class="hl sym">:=</span> word <span class="hl sym">-</span> bitMask<span class="hl sym">].</span>    <span class="hl kwa">self</span> basicAt<span class="hl sym">:</span> wordIndex put<span class="hl sym">:</span> word<span class="hl sym">.    ^</span>bit<span class="hl sym">! !!</span>BitArray methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>atAllPut<span class="hl sym">:</span> anObject    &quot;Put anObject at every one of the receivers indices<span class="hl sym">.</span>&quot;   <span class="hl sym">|</span> value <span class="hl sym">|</span>   value <span class="hl sym">:=</span> anObject ifTrue<span class="hl sym">: [</span><span class="hl num">255</span><span class="hl sym">]</span> ifFalse<span class="hl sym">: [</span><span class="hl num">0</span><span class="hl sym">].</span>   <span class="hl num">1</span> to<span class="hl sym">:</span> <span class="hl kwa">self</span> basicSize do<span class="hl sym">: [:</span>index <span class="hl sym">|</span> <span class="hl kwa">self</span> basicAt<span class="hl sym">:</span> index put<span class="hl sym">:</span> value<span class="hl sym">]! !!</span>BitArray class methodsFor<span class="hl sym">:</span> <span class="hl str">'instance creation'</span><span class="hl sym">!</span>new<span class="hl sym">:</span> size    <span class="hl sym">^</span><span class="hl kwa">super</span> new<span class="hl sym">: (</span>size <span class="hl sym">+</span> <span class="hl num">7</span> bitShift<span class="hl sym">: -</span><span class="hl num">3</span><span class="hl sym">)! !!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmark scripts'</span><span class="hl sym">!</span>nsievebits   <span class="hl sym">|</span> n <span class="hl sym">|</span>   n <span class="hl sym">:=</span> <span class="hl kwa">self</span> arg<span class="hl sym">.   (</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span> ifTrue<span class="hl sym">: [</span>n <span class="hl sym">:=</span> <span class="hl num">2</span><span class="hl sym">].</span>   <span class="hl kwa">self</span> primeBenchmarkFor<span class="hl sym">:</span> n to<span class="hl sym">:</span> <span class="hl kwa">self</span> stdout using<span class="hl sym">:</span> BitArray<span class="hl sym">.   ^</span><span class="hl str">''</span><span class="hl sym">! !!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>nsieve<span class="hl sym">:</span> n using<span class="hl sym">:</span> arrayClass    <span class="hl sym">|</span> count isPrime <span class="hl sym">|</span>   count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   isPrime <span class="hl sym">:=</span> arrayClass new<span class="hl sym">:</span> n withAll<span class="hl sym">:</span> <span class="hl kwa">true</span><span class="hl sym">.</span>   <span class="hl num">2</span> to<span class="hl sym">:</span> n do<span class="hl sym">:      [:</span>i <span class="hl sym">|       (</span>isPrime at<span class="hl sym">:</span> i<span class="hl sym">)</span> ifTrue<span class="hl sym">:          [</span>i <span class="hl sym">+</span> i to<span class="hl sym">:</span> n by<span class="hl sym">:</span> i do<span class="hl sym">:            [:</span>k <span class="hl sym">|</span> isPrime at<span class="hl sym">:</span> k put<span class="hl sym">:</span> <span class="hl kwa">false</span><span class="hl sym">].</span>         count <span class="hl sym">:=</span> count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">]].   ^</span>count<span class="hl sym">! !!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>primeBenchmarkFor<span class="hl sym">:</span> v to<span class="hl sym">:</span> output using<span class="hl sym">:</span> arrayClass   v to<span class="hl sym">:</span> v <span class="hl sym">-</span> <span class="hl num">2</span> by<span class="hl sym">: -</span><span class="hl num">1</span> do<span class="hl sym">:      [:</span>n<span class="hl sym">| |</span> m <span class="hl sym">|</span>      m <span class="hl sym">:= (</span><span class="hl num">2</span> raisedTo<span class="hl sym">:</span> n<span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">.</span>      output         nextPutAll<span class="hl sym">:</span> <span class="hl str">'Primes up to '</span><span class="hl sym">;</span>
         print<span class="hl sym">:</span> m paddedTo<span class="hl sym">:</span> <span class="hl num">8</span><span class="hl sym">;</span>
         print<span class="hl sym">: (</span><span class="hl kwa">self</span> nsieve<span class="hl sym">:</span> m using<span class="hl sym">:</span> arrayClass<span class="hl sym">)</span> paddedTo<span class="hl sym">:</span> <span class="hl num">9</span><span class="hl sym">;</span> nl
      <span class="hl sym">]! !</span>

Tests nsievebits<span class="hl sym">!</span>
