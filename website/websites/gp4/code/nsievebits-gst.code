<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   modified by Paolo Bonzini *&quot;</span>

Object
    variableByteSubclass<span class="sym">: #</span>BitArray
    instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
    classVariableNames<span class="sym">:</span> <span class="str">''</span>
    poolDictionaries<span class="sym">:</span> <span class="str">''</span>
    category<span class="sym">:</span> <span class="kwa">nil</span> <span class="sym">!</span>

<span class="sym">!</span>BitArray class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

new<span class="sym">:</span> size
    <span class="sym">^</span><span class="kwa">super</span> new<span class="sym">: (</span>size <span class="sym">+</span> <span class="num">7</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">)! !</span>

<span class="sym">!</span>BitArray methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

at<span class="sym">:</span> index
    <span class="sym">|</span> wordIndex bitMask <span class="sym">|</span>
    wordIndex <span class="sym">:= ((</span>index <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">.</span>
    bitMask <span class="sym">:=</span> <span class="num">1</span> bitShift<span class="sym">: (</span>index <span class="sym">-</span> <span class="num">1</span> bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">).</span>
    <span class="sym">^((</span><span class="kwa">self</span> basicAt<span class="sym">:</span> wordIndex<span class="sym">)</span> bitAnd<span class="sym">:</span> bitMask<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">!</span>

at<span class="sym">:</span> index put<span class="sym">:</span> bit
    <span class="sym">|</span> wordIndex bitMask word <span class="sym">|</span>
    wordIndex <span class="sym">:= ((</span>index <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> bitShift<span class="sym">: -</span><span class="num">3</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">.</span>
    bitMask <span class="sym">:=</span> <span class="num">1</span> bitShift<span class="sym">: (</span>index <span class="sym">-</span> <span class="num">1</span> bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">).</span>

    word <span class="sym">:=</span> <span class="kwa">self</span> basicAt<span class="sym">:</span> wordIndex<span class="sym">.</span>
    word <span class="sym">:=</span> word bitOr<span class="sym">:</span> bitMask<span class="sym">.</span>
    bit ifFalse<span class="sym">: [</span>word <span class="sym">:=</span> word <span class="sym">-</span> bitMask<span class="sym">].</span>
    <span class="kwa">self</span> basicAt<span class="sym">:</span> wordIndex put<span class="sym">:</span> word<span class="sym">.</span>
    <span class="sym">^</span>bit<span class="sym">! !</span>

<span class="sym">!</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'shootout'</span><span class="sym">!</span>

nsieve
    <span class="sym">|</span> count isComposite <span class="sym">|</span>
    <span class="kwa">self</span> <span class="sym">&lt;</span> <span class="num">2</span> ifTrue<span class="sym">: [ ^</span><span class="num">0</span> <span class="sym">].</span>

    isComposite <span class="sym">:=</span> BitArray new<span class="sym">:</span> <span class="kwa">self</span><span class="sym">.</span>
    count <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
    <span class="num">2</span> to<span class="sym">:</span> <span class="kwa">self</span> do<span class="sym">: [ :</span>i <span class="sym">|</span>
	<span class="sym">(</span>isComposite at<span class="sym">:</span> i<span class="sym">)</span> ifFalse<span class="sym">: [</span>
	    count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
	    i <span class="sym">+</span> i to<span class="sym">:</span> <span class="kwa">self</span> by<span class="sym">:</span> i do<span class="sym">: [ :</span>k <span class="sym">|</span>
		isComposite at<span class="sym">:</span> k put<span class="sym">:</span> <span class="kwa">true</span> <span class="sym">] ].</span>
    <span class="sym">].</span>
    <span class="sym">^</span>count<span class="sym">!</span>


asPaddedString<span class="sym">:</span> anInteger
    <span class="sym">|</span> s <span class="sym">|</span>
    s <span class="sym">:=</span> <span class="kwa">self</span> printString<span class="sym">.</span>
    <span class="sym">^(</span>String new<span class="sym">: (</span>anInteger <span class="sym">-</span> s size<span class="sym">)</span> withAll<span class="sym">: $ ),</span> s <span class="sym">!</span>


primes
    <span class="sym">|</span> m <span class="sym">|</span>
    m <span class="sym">:= (</span><span class="num">2</span> raisedTo<span class="sym">:</span> <span class="kwa">self</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">.</span>
    Transcript
	show<span class="sym">:</span> <span class="str">'Primes up to '</span><span class="sym">;</span> show<span class="sym">: (</span>m asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);</span>
	show<span class="sym">: (</span>m nsieve asPaddedString<span class="sym">:</span> <span class="num">9</span><span class="sym">);</span> nl <span class="sym">! !</span>


<span class="sym">|</span> n <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger<span class="sym">.</span>
<span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>n <span class="sym">:=</span> <span class="num">2</span><span class="sym">].</span>

 n      primes<span class="sym">.</span>
<span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> primes<span class="sym">.</span>
<span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">)</span> primes <span class="sym">!</span>
