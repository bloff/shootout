<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   modified by Paolo Bonzini &quot;</span>
<span class="com"></span>
<span class="com">Object</span>
<span class="com">    variableByteSubclass: #BitArray</span>
<span class="com">    instanceVariableNames: ''</span>
<span class="com">    classVariableNames: ''</span>
<span class="com">    poolDictionaries: ''</span>
<span class="com">    category: nil !</span>
<span class="com"></span>
<span class="com">!BitArray class methodsFor: 'instance creation'!</span>
<span class="com"></span>
<span class="com">new: size</span>
<span class="com">    ^super new: (size + 7 bitShift: -3)! !</span>
<span class="com"></span>
<span class="com">!BitArray methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">at: index</span>
<span class="com">    | wordIndex bitMask |</span>
<span class="com">    wordIndex := ((index - 1) bitShift: -3) + 1.</span>
<span class="com">    bitMask := 1 bitShift: (index - 1 bitAnd: 7).</span>
<span class="com">    ^((self basicAt: wordIndex) bitAnd: bitMask) &gt; 0!</span>
<span class="com"></span>
<span class="com">at: index put: bit</span>
<span class="com">    | wordIndex bitMask word |</span>
<span class="com">    wordIndex := ((index - 1) bitShift: -3) + 1.</span>
<span class="com">    bitMask := 1 bitShift: (index - 1 bitAnd: 7).</span>
<span class="com"></span>
<span class="com">    word := self basicAt: wordIndex.</span>
<span class="com">    word := word bitOr: bitMask.</span>
<span class="com">    bit ifFalse: [word := word - bitMask].</span>
<span class="com">    self basicAt: wordIndex put: word.</span>
<span class="com">    ^bit! !</span>
<span class="com"></span>
<span class="com">!SmallInteger methodsFor: 'shootout'!</span>
<span class="com"></span>
<span class="com">nsieve</span>
<span class="com">    | count isComposite |</span>
<span class="com">    self &lt; 2 ifTrue: [ ^0 ].</span>
<span class="com"></span>
<span class="com">    isComposite := BitArray new: self.</span>
<span class="com">    count := 0.</span>
<span class="com">    2 to: self do: [ :i |</span>
<span class="com">	(isComposite at: i) ifFalse: [</span>
<span class="com">	    count := count + 1.</span>
<span class="com">	    i + i to: self by: i do: [ :k |</span>
<span class="com">		isComposite at: k put: true ] ].</span>
<span class="com">    ].</span>
<span class="com">    ^count!</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">asPaddedString: anInteger</span>
<span class="com">    | s |</span>
<span class="com">    s := self printString.</span>
<span class="com">    ^(String new: (anInteger - s size) withAll: $ ), s !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">primes</span>
<span class="com">    | m |</span>
<span class="com">    m := (2 raisedTo: self) * 10000.</span>
<span class="com">    Transcript</span>
<span class="com">	show: 'Primes up to '; show: (m asPaddedString: 8);</span>
<span class="com">	show: (m nsieve asPaddedString: 9); nl ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">| n |</span>
<span class="com">n := Smalltalk arguments first asInteger.</span>
<span class="com">(n &lt; 2) ifTrue: [n := 2].</span>
<span class="com"></span>
<span class="com"> n      primes.</span>
<span class="com">(n - 1) primes.</span>
<span class="com">(n - 2) primes !</span>
