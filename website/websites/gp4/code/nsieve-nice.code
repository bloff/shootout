<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwb">int</span> nsieve<span class="hl sym">(</span><span class="hl kwb">int</span> m<span class="hl sym">,</span> <span class="hl kwb">boolean</span><span class="hl sym">[]</span> isPrime<span class="hl sym">){</span>
   <span class="hl kwa">for</span><span class="hl sym">(</span>var i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> i<span class="hl sym">++)</span> isPrime<span class="hl sym">[</span>i<span class="hl sym">] =</span> true<span class="hl sym">;</span>
   var count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwa">for</span><span class="hl sym">(</span>var i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> i<span class="hl sym">++){</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>isPrime<span class="hl sym">[</span>i<span class="hl sym">]){</span>
         <span class="hl kwa">for</span><span class="hl sym">(</span>var k<span class="hl sym">=</span>i<span class="hl sym">+</span>i<span class="hl sym">;</span> k <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> k<span class="hl sym">+=</span>i<span class="hl sym">)</span> isPrime<span class="hl sym">[</span>k<span class="hl sym">] =</span> false<span class="hl sym">;</span>
         count<span class="hl sym">++;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
   var n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>n<span class="hl sym">&lt;</span><span class="hl num">2</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>

   var m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
   <span class="hl kwa">let</span> flags <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">boolean</span><span class="hl sym">[</span>m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
   println<span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span>  pad<span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">) +</span> pad<span class="hl sym">(</span>nsieve<span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">),</span><span class="hl num">9</span><span class="hl sym">) );</span>

   m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
   println<span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span>  pad<span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">) +</span> pad<span class="hl sym">(</span>nsieve<span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">),</span><span class="hl num">9</span><span class="hl sym">) );</span>

   m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
   println<span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span>  pad<span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">) +</span> pad<span class="hl sym">(</span>nsieve<span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">),</span><span class="hl num">9</span><span class="hl sym">) );</span>
<span class="hl sym">}</span>

<span class="hl kwc">String</span> pad<span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> width<span class="hl sym">){</span>
   var s <span class="hl sym">=</span> i<span class="hl sym">.</span>toString<span class="hl sym">;</span>
   var p <span class="hl sym">=</span> width <span class="hl sym">-</span> s<span class="hl sym">.</span>length<span class="hl sym">;</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span>p<span class="hl sym">-- &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> s <span class="hl sym">=</span> <span class="hl str">' '</span> <span class="hl sym">+</span> s<span class="hl sym">;</span>
   <span class="hl kwa">return</span> s<span class="hl sym">;</span>
<span class="hl sym">}</span>
