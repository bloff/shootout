<span class="com">(*
   Requires the Bigarray module for larger values of n
    (&gt;= 9 on 32 bit systems), so compile with something like:
      ocamlopt -noassert -unsafe -o nseive bigarray.cmxa nseive.ml
   i.e. include the bigarray.cmxa library... *)</span>

  <span class="kwa">open</span> Bigarray<span class="sym">;;
 
 </span><span class="kwa">let</span> big_nseive m <span class="sym">=
 </span>  <span class="kwa">let</span> s <span class="sym">=</span> Array1.create Bigarray.char c_layout <span class="sym">(</span>succ m<span class="sym">)</span> <span class="kwa">in
 </span>  Array1.fill s <span class="str">'t'</span><span class="sym">;
 </span>  <span class="kwa">let rec</span> step i cnt <span class="sym">=
 </span>    <span class="kwa">let rec</span> whack j <span class="sym">=</span> <span class="kwa">if</span> j <span class="sym">&lt;=</span> m <span class="kwa">then</span> <span class="sym">(</span>Array1.set s j <span class="str">'f'</span><span class="sym">;</span> whack <span class="sym">(</span>j <span class="sym">+</span> i<span class="sym">))</span> <span class="kwa">in
     if</span> i <span class="sym">&lt;=</span> m <span class="kwa">then
 </span>      <span class="sym">(</span><span class="kwa">if</span> Array1.get s i <span class="sym">=</span> <span class="str">'t'</span> <span class="kwa">then
  </span>        <span class="sym">(</span>whack <span class="sym">(</span>i <span class="kwa">lsl</span> <span class="num">1</span><span class="sym">);</span> step <span class="sym">(</span>succ i<span class="sym">) (</span>succ cnt<span class="sym">))
 </span>      <span class="kwa">else</span> step <span class="sym">(</span>succ i<span class="sym">)</span> cnt<span class="sym">)
 </span>    <span class="kwa">else</span> cnt <span class="kwa">in
 </span>  Printf.printf <span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span> m <span class="sym">(</span>step <span class="num">2 0</span><span class="sym">);;
 
                 </span><span class="kwa">let</span> _ <span class="sym">=
  </span>  <span class="kwa">let</span> n <span class="sym">= (</span>int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">))</span> <span class="kwa">in
 </span>  big_nseive <span class="sym">((</span><span class="num">1</span> <span class="kwa">lsl</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">);
 </span>  big_nseive <span class="sym">((</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">);
 </span>  big_nseive <span class="sym">((</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>n<span class="num">-2</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">);;
 
   </span>     
