<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">// Java version by Stefan Krause</span>
<span class="hl slc">// Adapted from the Java version by bearophile</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>conv<span class="hl sym">;</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[][]</span> args<span class="hl sym">) {</span>
    <span class="hl kwa">const double</span> LIMITSQUARED <span class="hl sym">=</span> <span class="hl num">4.0</span><span class="hl sym">;</span>
    <span class="hl kwa">const int</span> ITERATIONS <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>

    <span class="hl kwa">int</span> size <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">toInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">10</span><span class="hl sym">;</span>
    <span class="hl kwa">real</span> fac <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> size<span class="hl sym">;</span> <span class="hl slc">// can't this be a double?</span>
    <span class="hl kwa">int</span> offset <span class="hl sym">=</span> size <span class="hl sym">%</span> <span class="hl num">8</span><span class="hl sym">;</span>
    <span class="hl kwa">int</span> shift <span class="hl sym">= (</span>offset <span class="hl sym">==</span> <span class="hl num">0</span> ? <span class="hl num">0</span> <span class="hl sym">: (</span><span class="hl num">8</span> <span class="hl sym">-</span> offset<span class="hl sym">));</span>

    <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d&quot;</span><span class="hl sym">,</span> size<span class="hl sym">,</span> size<span class="hl sym">);</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> size<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
        <span class="hl kwa">ubyte</span> bits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">double</span> Ci <span class="hl sym">=</span> y <span class="hl sym">*</span> fac <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">;</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> size<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
            <span class="hl kwa">int</span> i <span class="hl sym">=</span> ITERATIONS<span class="hl sym">;</span>
            <span class="hl kwa">double</span> Zr <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> Zi <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> ZrN <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> ZiN <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">double</span> Cr <span class="hl sym">=</span> x <span class="hl sym">*</span> fac <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">;</span>

            <span class="hl kwa">do</span> <span class="hl sym">{</span>
                Zi <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> Zr <span class="hl sym">*</span> Zi <span class="hl sym">+</span> Ci<span class="hl sym">;</span>
                Zr <span class="hl sym">=</span> ZrN <span class="hl sym">-</span> ZiN <span class="hl sym">+</span> Cr<span class="hl sym">;</span>
                ZiN <span class="hl sym">=</span> Zi <span class="hl sym">*</span> Zi<span class="hl sym">;</span>
                ZrN <span class="hl sym">=</span> Zr <span class="hl sym">*</span> Zr<span class="hl sym">;</span>
            <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(!(</span>ZiN <span class="hl sym">+</span> ZrN <span class="hl sym">&gt;</span> LIMITSQUARED<span class="hl sym">) &amp;&amp; --</span>i<span class="hl sym">);</span>

            bits <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(!</span>i<span class="hl sym">)</span>
                bits<span class="hl sym">++;</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>x <span class="hl sym">%</span> <span class="hl num">8</span> <span class="hl sym">==</span> <span class="hl num">7</span><span class="hl sym">) {</span>
                <span class="hl kwd">putchar</span><span class="hl sym">(</span>bits<span class="hl sym">);</span>
                bits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">if</span> <span class="hl sym">(</span>shift<span class="hl sym">) {</span>
            bits <span class="hl sym">&lt;&lt;=</span> shift<span class="hl sym">;</span>
            <span class="hl kwd">putchar</span><span class="hl sym">(</span>bits<span class="hl sym">);</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
