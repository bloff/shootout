<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Josh Goldfoot</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;semaphore.h&gt;</span>
<span class="hl dir">#include &lt;pthread.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">enum</span> <span class="hl sym">{</span> Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Faded <span class="hl sym">}</span> color<span class="hl sym">;</span>

sem_t AtMostTwo<span class="hl sym">;</span>
sem_t Mutex<span class="hl sym">;</span>
sem_t SemPriv<span class="hl sym">;</span>

<span class="hl kwb">int</span> mpStatus <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
color aColor<span class="hl sym">,</span> bColor<span class="hl sym">;</span>
<span class="hl kwb">long</span> meetingsLeft<span class="hl sym">;</span>
<span class="hl kwb">long</span> reports<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">];</span>

color <span class="hl kwd">complementaryColor</span> <span class="hl sym">(</span>color c1<span class="hl sym">,</span> color c2<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>c2 <span class="hl sym">==</span> Faded<span class="hl sym">)</span> <span class="hl kwa">return</span> Faded<span class="hl sym">;</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>c1 <span class="hl sym">==</span> c2<span class="hl sym">)</span> <span class="hl kwa">return</span> c1<span class="hl sym">;</span>
  <span class="hl kwa">switch</span> <span class="hl sym">(</span>c1<span class="hl sym">)</span>
    <span class="hl sym">{</span>
    <span class="hl kwa">case</span> Blue<span class="hl sym">:</span>
      <span class="hl kwa">return</span> c2 <span class="hl sym">==</span> Red ? Yellow <span class="hl sym">:</span> Red<span class="hl sym">;</span>
    <span class="hl kwa">case</span> Red<span class="hl sym">:</span>
      <span class="hl kwa">return</span> c2 <span class="hl sym">==</span> Blue ? Yellow <span class="hl sym">:</span> Blue<span class="hl sym">;</span>
    <span class="hl kwa">case</span> Yellow<span class="hl sym">:</span>
      <span class="hl kwa">return</span> c2 <span class="hl sym">==</span> Blue ? Red <span class="hl sym">:</span> Blue<span class="hl sym">;</span>
    <span class="hl kwa">default</span><span class="hl sym">:</span>
      <span class="hl kwa">return</span> c1<span class="hl sym">;</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

color <span class="hl kwd">Cooperation</span> <span class="hl sym">(</span><span class="hl kwb">int</span> id<span class="hl sym">,</span> color c<span class="hl sym">)</span>
<span class="hl sym">{</span>
  color otherColor<span class="hl sym">;</span>

  <span class="hl kwd">sem_wait</span> <span class="hl sym">(&amp;</span>AtMostTwo<span class="hl sym">);</span>
  <span class="hl kwd">sem_wait</span> <span class="hl sym">(&amp;</span>Mutex<span class="hl sym">);</span>
  <span class="hl kwa">switch</span> <span class="hl sym">(</span>mpStatus<span class="hl sym">)</span>
    <span class="hl sym">{</span>
    <span class="hl kwa">case</span> <span class="hl num">1</span><span class="hl sym">:</span>
      aColor <span class="hl sym">=</span> c<span class="hl sym">;</span>
      mpStatus <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>
      <span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>Mutex<span class="hl sym">);</span>
      <span class="hl kwd">sem_wait</span> <span class="hl sym">(&amp;</span>SemPriv<span class="hl sym">);</span>
      otherColor <span class="hl sym">=</span> bColor<span class="hl sym">;</span>
      <span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>Mutex<span class="hl sym">);</span>
      <span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>AtMostTwo<span class="hl sym">);</span>
      <span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>AtMostTwo<span class="hl sym">);</span>
      <span class="hl kwa">break</span><span class="hl sym">;</span>
    <span class="hl kwa">case</span> <span class="hl num">2</span><span class="hl sym">:</span>
      mpStatus <span class="hl sym">= (--</span>meetingsLeft <span class="hl sym">&gt;</span> <span class="hl num">0</span> ? <span class="hl num">1</span> <span class="hl sym">:</span> <span class="hl num">3</span><span class="hl sym">);</span>
      bColor <span class="hl sym">=</span> c<span class="hl sym">;</span>
      otherColor <span class="hl sym">=</span> aColor<span class="hl sym">;</span>
      <span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>SemPriv<span class="hl sym">);</span>
      <span class="hl kwa">break</span><span class="hl sym">;</span>
    <span class="hl kwa">case</span> <span class="hl num">3</span><span class="hl sym">:</span>
    <span class="hl kwa">default</span><span class="hl sym">:</span>
      otherColor <span class="hl sym">=</span> Faded<span class="hl sym">;</span>
      <span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>Mutex<span class="hl sym">);</span>
      <span class="hl kwd">sem_post</span> <span class="hl sym">(&amp;</span>AtMostTwo<span class="hl sym">);</span>
    <span class="hl sym">}</span>
  <span class="hl kwa">return</span> otherColor<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">chameneosCode</span> <span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*</span>args<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">int</span> myId<span class="hl sym">;</span>
  <span class="hl kwb">long</span> meetings<span class="hl sym">;</span>
  color myColor<span class="hl sym">,</span> otherColor<span class="hl sym">;</span>
  <span class="hl kwd">sscanf</span> <span class="hl sym">((</span><span class="hl kwb">char</span> <span class="hl sym">*)</span> args<span class="hl sym">,</span> <span class="hl str">&quot;%d %d&quot;</span><span class="hl sym">, &amp;</span>myId<span class="hl sym">, &amp;</span>myColor<span class="hl sym">);</span>
  meetings <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>myColor <span class="hl sym">!=</span> Faded<span class="hl sym">)</span>
    <span class="hl sym">{</span>
      otherColor <span class="hl sym">=</span> <span class="hl kwd">Cooperation</span> <span class="hl sym">(</span>myId<span class="hl sym">,</span> myColor<span class="hl sym">);</span>
      myColor <span class="hl sym">=</span> <span class="hl kwd">complementaryColor</span> <span class="hl sym">(</span>myColor<span class="hl sym">,</span> otherColor<span class="hl sym">);</span>
      meetings<span class="hl sym">++;</span>
    <span class="hl sym">}</span>
  reports<span class="hl sym">[</span>myId<span class="hl sym">] =</span> meetings <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span>argv<span class="hl sym">[])</span>
<span class="hl sym">{</span>
  color tabColor<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">] = {</span> Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Blue <span class="hl sym">};</span>
  pthread_t tabPid<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">];</span>
  <span class="hl kwb">char</span> theArgs<span class="hl sym">[</span><span class="hl num">32</span><span class="hl sym">][</span><span class="hl num">4</span><span class="hl sym">];</span>
  <span class="hl kwb">int</span> i<span class="hl sym">;</span>

  <span class="hl kwd">sem_init</span> <span class="hl sym">(&amp;</span>AtMostTwo<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>
  <span class="hl kwd">sem_init</span> <span class="hl sym">(&amp;</span>Mutex<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwd">sem_init</span> <span class="hl sym">(&amp;</span>SemPriv<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>

  meetingsLeft <span class="hl sym">= (</span>argc <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> ? <span class="hl kwd">atoi</span> <span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">1000000</span><span class="hl sym">;</span>

  <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
      <span class="hl kwd">sprintf</span> <span class="hl sym">(</span>theArgs<span class="hl sym">[</span>i<span class="hl sym">],</span> <span class="hl str">&quot;%d %d&quot;</span><span class="hl sym">,</span> i<span class="hl sym">,</span> tabColor<span class="hl sym">[</span>i<span class="hl sym">]);</span>
      <span class="hl kwd">pthread_create</span> <span class="hl sym">(&amp;</span>tabPid<span class="hl sym">[</span>i<span class="hl sym">],</span> NULL<span class="hl sym">, (</span><span class="hl kwb">void</span> <span class="hl sym">*(*)(</span><span class="hl kwb">void</span> <span class="hl sym">*))</span> chameneosCode<span class="hl sym">,</span>
		      theArgs<span class="hl sym">[</span>i<span class="hl sym">]);</span>
    <span class="hl sym">}</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
    <span class="hl kwd">pthread_join</span> <span class="hl sym">(</span>tabPid<span class="hl sym">[</span>i<span class="hl sym">],</span> NULL<span class="hl sym">);</span>

  <span class="hl kwb">long</span> sum <span class="hl sym">=</span> reports<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
    sum <span class="hl sym">+=</span> reports<span class="hl sym">[</span>i<span class="hl sym">];</span>
  <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
