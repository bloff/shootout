<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>

#lang scheme<span class="hl sym">/</span>base
<span class="hl sym">(</span>require scheme<span class="hl sym">/</span>cmdline<span class="hl sym">)</span>

<span class="hl sym">(</span>define translation <span class="hl sym">(</span>make-vector <span class="hl num">128</span><span class="hl sym">))</span>

<span class="hl sym">(</span>for-each <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>from-to<span class="hl sym">)</span>
            <span class="hl sym">(</span>let <span class="hl sym">([</span>char <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>sym<span class="hl sym">)</span>
                          <span class="hl sym">(</span>string-ref <span class="hl sym">(</span>symbol-<span class="hl sym">&gt;</span>string sym<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">))])</span>
              <span class="hl sym">(</span>let <span class="hl sym">([</span>from <span class="hl sym">(</span>char <span class="hl sym">(</span><span class="hl kwa">car</span> from-to<span class="hl sym">))]</span>
                    <span class="hl sym">[</span>to <span class="hl sym">(</span>char-<span class="hl sym">&gt;</span>integer <span class="hl sym">(</span>char-upcase <span class="hl sym">(</span>char <span class="hl sym">(</span><span class="hl kwa">cadr</span> from-to<span class="hl sym">))))])</span>
                <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> translation <span class="hl sym">(</span>char-<span class="hl sym">&gt;</span>integer from<span class="hl sym">)</span> to<span class="hl sym">)</span>
                <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> translation <span class="hl sym">(</span>char-<span class="hl sym">&gt;</span>integer <span class="hl sym">(</span>char-upcase from<span class="hl sym">))</span> to<span class="hl sym">))))</span>
          <span class="hl sym">'([</span>a t<span class="hl sym">]</span>
            <span class="hl sym">[</span>c g<span class="hl sym">]</span>
            <span class="hl sym">[</span>g c<span class="hl sym">]</span>
            <span class="hl sym">[</span>t a<span class="hl sym">]</span>
            <span class="hl sym">[</span>u a<span class="hl sym">]</span>
            <span class="hl sym">[</span>m k<span class="hl sym">]</span>
            <span class="hl sym">[</span>r y<span class="hl sym">]</span>
            <span class="hl sym">[</span>w w<span class="hl sym">]</span>
            <span class="hl sym">[</span>s s<span class="hl sym">]</span>
            <span class="hl sym">[</span>y R<span class="hl sym">]</span>
            <span class="hl sym">[</span>k M<span class="hl sym">]</span>
            <span class="hl sym">[</span>v b<span class="hl sym">]</span>
            <span class="hl sym">[</span>h d<span class="hl sym">]</span>
            <span class="hl sym">[</span>d h<span class="hl sym">]</span>
            <span class="hl sym">[</span>b v<span class="hl sym">]</span>
            <span class="hl sym">[</span>n n<span class="hl sym">]))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>output lines<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ([</span>str <span class="hl sym">(</span><span class="hl kwa">apply</span> bytes-<span class="hl kwa">append</span> lines<span class="hl sym">)]</span>
         <span class="hl sym">[</span>o <span class="hl sym">(</span>current-output-port<span class="hl sym">)]</span>
         <span class="hl sym">[</span>len <span class="hl sym">(</span>bytes-<span class="hl kwa">length</span> str<span class="hl sym">)])</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>offset <span class="hl sym">(</span>in-range <span class="hl num">0</span> len <span class="hl num">60</span><span class="hl sym">)])</span>
      <span class="hl sym">(</span>write-bytes str o offset <span class="hl sym">(</span><span class="hl kwa">min</span> len <span class="hl sym">(+</span> offset <span class="hl num">60</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span>newline o<span class="hl sym">))))</span>

<span class="hl sym">(</span>let <span class="hl sym">([</span>in <span class="hl sym">(</span>current-input-port<span class="hl sym">)])</span>
  <span class="hl sym">(</span>let loop <span class="hl sym">([</span>accum <span class="hl kwa">null</span><span class="hl sym">])</span>
    <span class="hl sym">(</span>let <span class="hl sym">([</span>l <span class="hl sym">(</span><span class="hl kwa">read</span>-bytes-<span class="hl kwa">line</span> in<span class="hl sym">)])</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>eof-object? l<span class="hl sym">)</span>
          <span class="hl sym">(</span>output accum<span class="hl sym">)</span>
          <span class="hl sym">(</span><span class="hl kwa">cond</span>
           <span class="hl sym">[(</span>regexp-match? #rx#<span class="hl str">&quot;^&gt;&quot;</span> l<span class="hl sym">)</span>
            <span class="hl sym">(</span>output accum<span class="hl sym">)</span>
            <span class="hl sym">(</span>printf <span class="hl str">&quot;~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> l<span class="hl sym">)</span>
            <span class="hl sym">(</span>loop <span class="hl kwa">null</span><span class="hl sym">)]</span>
           <span class="hl sym">[</span>else
            <span class="hl sym">(</span>let<span class="hl sym">* ([</span>len <span class="hl sym">(</span>bytes-<span class="hl kwa">length</span> l<span class="hl sym">)]</span>
                   <span class="hl sym">[</span>dest <span class="hl sym">(</span>make-bytes len<span class="hl sym">)])</span>
              <span class="hl sym">(</span>for <span class="hl sym">([</span>i <span class="hl sym">(</span>in-range len<span class="hl sym">)])</span>
                <span class="hl sym">(</span>bytes-<span class="hl kwa">set</span><span class="hl sym">!</span> dest
                            <span class="hl sym">(</span>- <span class="hl sym">(</span>- len i<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)</span>
                            <span class="hl sym">(</span>vector-ref translation <span class="hl sym">(</span>bytes-ref l i<span class="hl sym">))))</span>
              <span class="hl sym">(</span>loop <span class="hl sym">(</span><span class="hl kwa">cons</span> dest accum<span class="hl sym">)))])))))</span>
