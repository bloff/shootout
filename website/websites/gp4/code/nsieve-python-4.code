<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc"># Written by Dima Dorfman, 2004</span>

<span class="hl slc"># modified by Heinrich Acker</span>
<span class="hl slc"># modified by Dani Nanz 2007-10-03</span>

<span class="hl kwa">import</span> sys
<span class="hl kwa">from</span> itertools <span class="hl kwa">import</span> count<span class="hl sym">,</span> islice<span class="hl sym">,</span> izip


<span class="hl kwa">def</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span> c<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">):</span>

    a <span class="hl sym">= [</span><span class="hl kwa">True</span><span class="hl sym">] * (</span>m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
    iu <span class="hl sym">=</span> m <span class="hl sym">//</span> <span class="hl num">2</span>    <span class="hl slc"># faster but not compliant: iu = int(m ** 0.5)</span>
    <span class="hl kwa">for</span> i<span class="hl sym">,</span> x <span class="hl kwa">in</span> <span class="hl kwd">izip</span><span class="hl sym">(</span><span class="hl kwd">count</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">),</span> <span class="hl kwd">islice</span><span class="hl sym">(</span>a<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl kwa">None</span><span class="hl sym">)):</span>
        <span class="hl kwa">if</span> x<span class="hl sym">:</span>
            c <span class="hl sym">+=</span> <span class="hl num">1</span>
            <span class="hl kwa">if</span> i <span class="hl sym">&lt;=</span> iu<span class="hl sym">:</span>
                a<span class="hl sym">[</span>i <span class="hl sym">+</span> i <span class="hl sym">::</span> i<span class="hl sym">] = (</span><span class="hl kwa">False</span><span class="hl sym">, ) * ((</span>m <span class="hl sym">-</span> i<span class="hl sym">) //</span> i<span class="hl sym">)</span>
    <span class="hl kwa">print</span> <span class="hl str">'Primes up to %8d %8d'</span> <span class="hl sym">% (</span>m<span class="hl sym">,</span> c<span class="hl sym">)</span>


<span class="hl kwa">for</span> k <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">:</span>
    <span class="hl kwd">nsieve</span><span class="hl sym">((</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span><span class="hl kwb">int</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) -</span> k<span class="hl sym">)) *</span> <span class="hl num">10000</span><span class="hl sym">)</span>
