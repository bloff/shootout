<span class="com">{-# OPTIONS_GHC -fglasgow-exts -O2 -optc-O3 -funbox-strict-fields #-}</span>
<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- Simon Marlow</span>
<span class="slc">-- Shortened by Don Stewart</span>

<span class="kwa">import</span> System<span class="sym">;</span> <span class="kwa">import</span> Text.Printf<span class="sym">;</span> <span class="kwa">import</span> Monad

<span class="kwa">data</span> Tree <span class="sym">=</span> Nil <span class="sym">|</span> Node <span class="sym">!</span><span class="kwb">Int</span> Tree Tree

min' <span class="sym">=</span> <span class="num">4</span> <span class="sym">::</span> <span class="kwb">Int</span>

main <span class="sym">=</span> <span class="kwa">do</span> max' <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> return . max <span class="sym">(</span>min'<span class="sym">+</span><span class="num">2</span><span class="sym">)</span> . read . head
          printf <span class="str">&quot;stretch tree of depth %d\t check: %d\n&quot;</span> <span class="sym">(</span>max'<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>itemCheck $ make <span class="num">0</span> <span class="sym">(</span>max'<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
          depthLoop min' max'
          printf <span class="str">&quot;long lived tree of depth %d\t check: %d\n&quot;</span> max' <span class="sym">(</span>itemCheck $ make <span class="num">0</span> max'<span class="sym">)</span>

depthLoop d m <span class="sym">=</span> when <span class="sym">(</span>d <span class="sym">&lt;=</span> m<span class="sym">)</span> $ <span class="kwa">do</span>
    printf <span class="str">&quot;%d\t trees of depth %d\t check: %d\n&quot;</span> <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">)</span> d <span class="sym">(</span>sumLoop n d <span class="num">0</span><span class="sym">)</span>
    depthLoop <span class="sym">(</span>d<span class="sym">+</span><span class="num">2</span><span class="sym">)</span> m
    <span class="kwa">where</span> n <span class="sym">=</span> <span class="num">2</span>^<span class="sym">(</span>m <span class="sym">-</span> d <span class="sym">+</span> min'<span class="sym">)</span>

sumLoop <span class="num">0</span> d acc <span class="sym">=</span> acc
sumLoop k d acc <span class="sym">=</span> c `seq` sumLoop <span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> d <span class="sym">(</span>acc <span class="sym">+</span> c <span class="sym">+</span> c'<span class="sym">)</span>
    <span class="kwa">where</span> <span class="sym">(</span>c<span class="sym">,</span>c'<span class="sym">)  = (</span>itemCheck <span class="sym">(</span>make k d<span class="sym">),</span> itemCheck <span class="sym">(</span>make <span class="sym">(-</span><span class="num">1</span><span class="sym">*</span>k<span class="sym">)</span> d<span class="sym">))</span>

make i <span class="sym">(</span><span class="num">0</span><span class="sym">::</span><span class="kwb">Int</span><span class="sym">) =</span> i `seq` Nil
make i  d       <span class="sym">=</span> Node i <span class="sym">(</span>make <span class="sym">((</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">)-</span><span class="num">1</span><span class="sym">) (</span>d<span class="sym">-</span><span class="num">1</span><span class="sym">)) (</span>make <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">) (</span>d<span class="sym">-</span><span class="num">1</span><span class="sym">))</span>

itemCheck Nil <span class="sym">=</span> <span class="num">0</span>
itemCheck <span class="sym">(</span>Node x l r<span class="sym">) =</span> x <span class="sym">+</span> itemCheck l <span class="sym">-</span> itemCheck r
