<span class="com">(* The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Sebastien Loisel</span>
<span class="com"> * Cleanup by Troestler Christophe</span>
<span class="com"> *)</span>

<span class="kwa">let</span> eval_A i j <span class="sym">=</span> <span class="num">1</span>. <span class="sym">/</span>. <span class="kwb">float</span><span class="sym">((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

<span class="kwa">let</span> eval_A_times_u u v <span class="sym">=</span>
  <span class="kwa">let</span> n <span class="sym">=</span> Array.length v <span class="sym">-</span> <span class="num">1</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span>  n <span class="kwa">do</span>
    v.<span class="sym">(</span>i<span class="sym">) &lt;-</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> n <span class="kwa">do</span> v.<span class="sym">(</span>i<span class="sym">) &lt;-</span> v.<span class="sym">(</span>i<span class="sym">) +</span>. eval_A i j <span class="sym">*</span>. u.<span class="sym">(</span>j<span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
  <span class="kwa">done</span>

<span class="kwa">let</span> eval_At_times_u u v <span class="sym">=</span>
  <span class="kwa">let</span> n <span class="sym">=</span> Array.length v <span class="sym">-</span><span class="num">1</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> n <span class="kwa">do</span>
    v.<span class="sym">(</span>i<span class="sym">) &lt;-</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> n <span class="kwa">do</span> v.<span class="sym">(</span>i<span class="sym">) &lt;-</span> v.<span class="sym">(</span>i<span class="sym">) +</span>. eval_A j i <span class="sym">*</span>. u.<span class="sym">(</span>j<span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
  <span class="kwa">done</span>

<span class="kwa">let</span> eval_AtA_times_u u v <span class="sym">=</span>
  <span class="kwa">let</span> w <span class="sym">=</span> Array.<span class="kwd">make</span> <span class="sym">(</span>Array.length u<span class="sym">)</span> <span class="num">0.0</span> <span class="kwa">in</span>
  eval_A_times_u u w<span class="sym">;</span> eval_At_times_u w v


<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> <span class="kwd">int_of_string</span><span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span>  <span class="num">2000</span> <span class="kwa">in</span>
  <span class="kwa">let</span> u <span class="sym">=</span> Array.make n <span class="num">1.0</span>  <span class="kwa">and</span>  v <span class="sym">=</span> Array.make n <span class="num">0.0</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="num">9</span> <span class="kwa">do</span>
    eval_AtA_times_u u v<span class="sym">;</span> eval_AtA_times_u v u
  <span class="kwa">done</span><span class="sym">;</span>

  <span class="kwa">let</span> vv <span class="sym">=</span> ref <span class="num">0.0</span>  <span class="kwa">and</span>  vBv <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span> <span class="kwa">to</span> n<span class="sym">-</span><span class="num">1</span> <span class="kwa">do</span>
    vv <span class="sym">:= !</span>vv <span class="sym">+</span>. v.<span class="sym">(</span>i<span class="sym">) *</span>. v.<span class="sym">(</span>i<span class="sym">);</span>
    vBv <span class="sym">:= !</span>vBv <span class="sym">+</span>. u.<span class="sym">(</span>i<span class="sym">) *</span>. v.<span class="sym">(</span>i<span class="sym">)</span>
  <span class="kwa">done</span><span class="sym">;</span>
  Printf.printf <span class="str">&quot;%0.9f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span><span class="kwd">sqrt</span><span class="sym">(!</span>vBv <span class="sym">/</span>. <span class="sym">!</span>vv<span class="sym">))</span>
