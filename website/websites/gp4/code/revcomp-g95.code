<span class="slc">! -*- mode: f90 -*-</span>
<span class="slc">!</span>
<span class="slc">! $Id: revcomp-g95.code,v 1.1 2005-10-29 16:20:54 igouy-guest Exp $ ; $Name:  $</span>
<span class="slc">!</span>
<span class="slc">! The Great Computer Language Shootout</span>
<span class="slc">! http://shootout.alioth.debian.org/</span>
<span class="slc">!</span>
<span class="slc">! contributed by Simon Geard, 25/03/2005</span>
<span class="slc">!</span>
<span class="slc">! ifort rev-comp.f90 -O3 -static-libcxa -o rev-comp</span>
<span class="slc">!</span>
<span class="slc">! $Id: revcomp-g95.code,v 1.1 2005-10-29 16:20:54 igouy-guest Exp $ ; $Name:  $</span>
<span class="slc">!</span>
program revcomp
  implicit none
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">1</span><span class="sym">),</span> parameter                         <span class="sym">::</span> end_str <span class="sym">=</span> <span class="str">'&gt;'</span>
  integer<span class="sym">,</span> parameter                                  <span class="sym">::</span> lineWidth <span class="sym">=</span> <span class="num">60</span>
  logical                                             <span class="sym">::</span> insection
  integer                                             <span class="sym">::</span> as<span class="sym">,</span> bcount
  character<span class="sym">(</span>len<span class="sym">=</span>lineWidth<span class="sym">)                            ::</span> line
  character<span class="sym">(</span>len<span class="sym">=</span>lineWidth<span class="sym">)                            ::</span> title
  character<span class="sym">(</span>len<span class="sym">=</span>lineWidth<span class="sym">),</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> data
  character<span class="sym">(</span>len<span class="sym">=</span>lineWidth<span class="sym">),</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> w

  <span class="slc">! Read and process</span>
  insection <span class="sym">=</span> .false.
  allocate<span class="sym">(</span>data<span class="sym">(</span><span class="num">100</span><span class="sym">))</span>  <span class="slc">! Allocate enough lines so that we don't have to grow the array for the test</span>
  readFile<span class="sym">:</span> do
     read<span class="sym">(*,</span><span class="str">'(a)'</span><span class="sym">,</span>end<span class="sym">=</span><span class="num">100</span><span class="sym">)</span> line
     if <span class="sym">(</span>line<span class="sym">(</span><span class="num">1</span><span class="sym">:</span><span class="num">1</span><span class="sym">) ==</span> end_str<span class="sym">)</span> then
        if <span class="sym">(</span>insection<span class="sym">)</span> then
           write<span class="sym">(*,</span><span class="str">'(a)'</span><span class="sym">)</span> trim<span class="sym">(</span>title<span class="sym">)</span>
           call printReverseFasta<span class="sym">(</span>data<span class="sym">,</span> bcount<span class="sym">)</span>
        else
           insection <span class="sym">=</span> .true.
        end if
        title <span class="sym">=</span> line
        bcount <span class="sym">=</span> <span class="num">0</span>
        cycle readFile
     end if
     bcount <span class="sym">=</span> bcount <span class="sym">+</span> <span class="num">1</span>
     if <span class="sym">(</span>bcount <span class="sym">&gt;</span> size<span class="sym">(</span>data<span class="sym">))</span> then <span class="slc">! Included for completeness - it shouldn't be called in the test</span>
        allocate<span class="sym">(</span>w<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">)))</span>
        w <span class="sym">=</span> data
        deallocate<span class="sym">(</span>data<span class="sym">)</span>
        allocate<span class="sym">(</span>data<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>size<span class="sym">(</span>w<span class="sym">)),</span>stat<span class="sym">=</span>as<span class="sym">)</span>
        if <span class="sym">(</span>as <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> then
           write<span class="sym">(*,</span><span class="str">'(a,i0)'</span><span class="sym">)</span> <span class="str">'***failed to allocate '</span><span class="sym">,</span><span class="num">2</span><span class="sym">*</span>size<span class="sym">(</span>w<span class="sym">)</span>
        end if
        data <span class="sym">=</span> w
        deallocate<span class="sym">(</span>w<span class="sym">)</span>
     end if
     data<span class="sym">(</span>bcount<span class="sym">) =</span> line
  end do readFile
<span class="num">100</span> continue
  write<span class="sym">(*,</span><span class="str">'(a)'</span><span class="sym">)</span> trim<span class="sym">(</span>title<span class="sym">)</span>
  call printReverseFasta<span class="sym">(</span>data<span class="sym">,</span> bcount<span class="sym">)</span>
  stop

contains
  subroutine printReverseFasta<span class="sym">(</span>data<span class="sym">,</span> bcount<span class="sym">)</span>
    <span class="slc">! Output the data in reverse order and with the complement</span>
    character<span class="sym">(</span>len<span class="sym">=*),</span> dimension<span class="sym">(:),</span> allocatable<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> data
    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> bcount
    integer <span class="sym">::</span> i<span class="sym">,</span> j<span class="sym">,</span> k

    k <span class="sym">=</span> <span class="num">0</span>
    do i<span class="sym">=</span>bcount<span class="sym">,</span><span class="num">1</span><span class="sym">,-</span><span class="num">1</span>
       do j<span class="sym">=</span>len<span class="sym">(</span>trim<span class="sym">(</span>data<span class="sym">(</span>i<span class="sym">))),</span><span class="num">1</span><span class="sym">,-</span><span class="num">1</span>
          k <span class="sym">=</span> k<span class="sym">+</span><span class="num">1</span>
          if <span class="sym">(</span>k <span class="sym">==</span> lineWidth<span class="sym">)</span> then
             write<span class="sym">(*,</span><span class="str">'(a1)'</span><span class="sym">)</span> complement<span class="sym">(</span>data<span class="sym">(</span>i<span class="sym">)(</span>j<span class="sym">:</span>j<span class="sym">))</span>
             k <span class="sym">=</span> <span class="num">0</span>
          else
             write<span class="sym">(*,</span><span class="str">'(a1)'</span><span class="sym">,</span>advance<span class="sym">=</span><span class="str">'no'</span><span class="sym">)</span> complement<span class="sym">(</span>data<span class="sym">(</span>i<span class="sym">)(</span>j<span class="sym">:</span>j<span class="sym">))</span>
          end if
       end do
    end do
    if <span class="sym">(</span>k <span class="sym">/=</span> <span class="num">0</span><span class="sym">)</span> write<span class="sym">(*,</span><span class="str">'(a)'</span><span class="sym">)</span> <span class="str">''</span>
  end subroutine printReverseFasta

  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">1</span><span class="sym">)</span> function complement<span class="sym">(</span>c<span class="sym">)</span>
    <span class="slc">! Return the complement of c</span>
    character<span class="sym">(</span>len<span class="sym">=*),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> c
    select case<span class="sym">(</span>c<span class="sym">)</span>
       case<span class="sym">(</span><span class="str">'T'</span><span class="sym">,</span><span class="str">'U'</span><span class="sym">,</span><span class="str">'t'</span><span class="sym">,</span><span class="str">'u'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'A'</span>
       case<span class="sym">(</span><span class="str">'V'</span><span class="sym">,</span><span class="str">'v'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'B'</span>
       case<span class="sym">(</span><span class="str">'G'</span><span class="sym">,</span><span class="str">'g'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'C'</span>
       case<span class="sym">(</span><span class="str">'H'</span><span class="sym">,</span><span class="str">'h'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'D'</span>
       case<span class="sym">(</span><span class="str">'C'</span><span class="sym">,</span><span class="str">'c'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'G'</span>
       case<span class="sym">(</span><span class="str">'D'</span><span class="sym">,</span><span class="str">'d'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'H'</span>
       case<span class="sym">(</span><span class="str">'M'</span><span class="sym">,</span><span class="str">'m'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'K'</span>
       case<span class="sym">(</span><span class="str">'K'</span><span class="sym">,</span><span class="str">'k'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'M'</span>
       case<span class="sym">(</span><span class="str">'N'</span><span class="sym">,</span><span class="str">'n'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'N'</span>
       case<span class="sym">(</span><span class="str">'Y'</span><span class="sym">,</span><span class="str">'y'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'R'</span>
       case<span class="sym">(</span><span class="str">'S'</span><span class="sym">,</span><span class="str">'s'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'S'</span>
       case<span class="sym">(</span><span class="str">'A'</span><span class="sym">,</span><span class="str">'a'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'T'</span>
       case<span class="sym">(</span><span class="str">'B'</span><span class="sym">,</span><span class="str">'b'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'V'</span>
       case<span class="sym">(</span><span class="str">'W'</span><span class="sym">,</span><span class="str">'w'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'W'</span>
       case<span class="sym">(</span><span class="str">'R'</span><span class="sym">,</span><span class="str">'r'</span><span class="sym">)</span>
          complement <span class="sym">=</span> <span class="str">'Y'</span>
       case default
          print <span class="sym">*,</span><span class="str">'*** no complement for'</span><span class="sym">,</span>c <span class="slc">! Should never reach here</span>
          complement <span class="sym">=</span> c
       end select
     end function complement
end program revcomp
