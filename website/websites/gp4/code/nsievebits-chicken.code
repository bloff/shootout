<span class="hl slc">;;; The Great Computer Language Shootout</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Adapted from CMUCL code by Dima Dorfman; bit-vector stuff by Alex Shinn;</span>
<span class="hl slc">;; cobbled together by felix</span>

<span class="hl slc">;(use format lolevel)</span>
<span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum<span class="hl sym">) (</span>block<span class="hl sym">) (</span>disable-interrupts<span class="hl sym">))</span>

<span class="hl sym">(</span>require-extension format lolevel<span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make-bit-vector size . o<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>fill <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>pair? o<span class="hl sym">) (</span><span class="hl kwa">car</span> o<span class="hl sym">))</span> #b11111111 <span class="hl num">0</span><span class="hl sym">))</span>
         <span class="hl sym">(</span>len <span class="hl sym">(</span>quotient <span class="hl sym">(+</span> size <span class="hl num">7</span><span class="hl sym">)</span> <span class="hl num">8</span><span class="hl sym">))</span>
         <span class="hl sym">(</span>res <span class="hl sym">(</span>make-byte-vector len fill<span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>zero? fill<span class="hl sym">)</span>
      res
      <span class="hl sym">(</span>let <span class="hl sym">((</span>off <span class="hl sym">(</span>remainder size <span class="hl num">8</span><span class="hl sym">)))</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>zero? off<span class="hl sym">))</span>
          <span class="hl sym">(</span>byte-vector-<span class="hl kwa">set</span><span class="hl sym">!</span> res <span class="hl sym">(</span>- len <span class="hl num">1</span><span class="hl sym">) (</span>- <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> off<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)))</span>
        res<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>bit-vector-ref vec i<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>byte <span class="hl sym">(</span>quotient i <span class="hl num">8</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>off <span class="hl sym">(</span>remainder i <span class="hl num">8</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(&lt;</span> byte <span class="hl sym">(</span>byte-vector-<span class="hl kwa">length</span> vec<span class="hl sym">))</span>
         <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>zero? <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> <span class="hl sym">(</span>byte-vector-ref vec byte<span class="hl sym">)</span>
                                  <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> off<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>bit-vector-<span class="hl kwa">set</span><span class="hl sym">!</span> vec i x<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>byte <span class="hl sym">(</span>quotient i <span class="hl num">8</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>off <span class="hl sym">(</span>remainder i <span class="hl num">8</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>len <span class="hl sym">(</span>byte-vector-<span class="hl kwa">length</span> vec<span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">cond</span>
      <span class="hl sym">((&lt;</span> byte len<span class="hl sym">)</span>
       <span class="hl sym">(</span>byte-vector-<span class="hl kwa">set</span><span class="hl sym">!</span> vec byte
                      <span class="hl sym">(</span><span class="hl kwa">if</span> x
                        <span class="hl sym">(</span>bitwise-ior <span class="hl sym">(</span>byte-vector-ref vec byte<span class="hl sym">)</span>
                                     <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> off<span class="hl sym">))</span>
                        <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> <span class="hl sym">(</span>byte-vector-ref vec byte<span class="hl sym">)</span>
                                     <span class="hl sym">(</span>bitwise-<span class="hl kwa">not</span> <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> off<span class="hl sym">)))))</span>
       vec<span class="hl sym">)</span>
      <span class="hl sym">((</span><span class="hl kwa">not</span> x<span class="hl sym">)</span> vec<span class="hl sym">)</span>
      <span class="hl sym">(</span>else <span class="hl sym">(</span>bit-vector-<span class="hl kwa">set</span><span class="hl sym">! (</span>bit-vector-grow vec i<span class="hl sym">)</span> i x<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>nsievebits m<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>a <span class="hl sym">(</span>make-bit-vector m #t<span class="hl sym">)))</span>
    <span class="hl sym">(</span>define <span class="hl sym">(</span>clear i<span class="hl sym">)</span>
      <span class="hl sym">(</span>do <span class="hl sym">([</span>j <span class="hl sym">(+</span> i i<span class="hl sym">) (+</span> j i<span class="hl sym">)])</span>
	  <span class="hl sym">((&gt;=</span> j m<span class="hl sym">))</span>
	<span class="hl sym">(</span>bit-vector-<span class="hl kwa">set</span><span class="hl sym">!</span> a j #f<span class="hl sym">) ) )</span>
    <span class="hl sym">(</span>let <span class="hl sym">([</span>c <span class="hl num">0</span><span class="hl sym">])</span>
      <span class="hl sym">(</span>do <span class="hl sym">([</span>i <span class="hl num">2</span> <span class="hl sym">(</span>add1 i<span class="hl sym">)])</span>
	  <span class="hl sym">((&gt;=</span> i m<span class="hl sym">)</span> c<span class="hl sym">)</span>
	<span class="hl sym">(</span>when <span class="hl sym">(</span>bit-vector-ref a i<span class="hl sym">)</span>
	  <span class="hl sym">(</span>clear i<span class="hl sym">)</span>
	  <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> c <span class="hl sym">(</span>add1 c<span class="hl sym">)) ) ) ) ) )</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>test n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>m <span class="hl sym">(*</span> <span class="hl num">10000</span> <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> n<span class="hl sym">))))</span>
    <span class="hl sym">(</span>format #t <span class="hl str">&quot;Primes up to ~8d ~8d~%&quot;</span> m <span class="hl sym">(</span>nsievebits m<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>n <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">car</span> args<span class="hl sym">))])</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">0</span><span class="hl sym">) (</span>test n<span class="hl sym">))</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">1</span><span class="hl sym">) (</span>test <span class="hl sym">(</span>- n <span class="hl num">1</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">2</span><span class="hl sym">) (</span>test <span class="hl sym">(</span>- n <span class="hl num">2</span><span class="hl sym">)))))</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">))</span>

