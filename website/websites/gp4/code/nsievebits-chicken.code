<span class="slc">;;; The Great Computer Language Shootout
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;
</span><span class="slc">;; Adapted from CMUCL code by Dima Dorfman; bit-vector stuff by Alex Shinn;
</span><span class="slc">;; cobbled together by felix
</span>
<span class="sym">(</span>declare
  <span class="sym">(</span>uses format lolevel<span class="sym">)
  (</span>disable<span class="sym">-</span>interrupts<span class="sym">)
  (</span>fixnum<span class="sym">)
  (</span>block<span class="sym">) )

(</span>define <span class="sym">(</span>make<span class="sym">-</span>bit<span class="sym">-</span>vector size . o<span class="sym">)
  (</span>let<span class="sym">* ((</span>fill <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(</span>pair? o<span class="sym">) (</span><span class="kwa">car</span> o<span class="sym">))</span> #b11111111 <span class="num">0</span><span class="sym">))
         (</span>len <span class="sym">(</span>quotient <span class="sym">(+</span> size <span class="num">7</span><span class="sym">)</span> <span class="num">8</span><span class="sym">))
         (</span>res <span class="sym">(</span>make<span class="sym">-</span>byte<span class="sym">-</span>vector len fill<span class="sym">)))
    (</span><span class="kwa">if</span> <span class="sym">(</span>zero? fill<span class="sym">)
</span>      res
      <span class="sym">(</span>let <span class="sym">((</span>off <span class="sym">(</span>remainder size <span class="num">8</span><span class="sym">)))
        (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>zero? off<span class="sym">))
          (</span>byte<span class="sym">-</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> res <span class="sym">(-</span> len <span class="num">1</span><span class="sym">) (- (</span>arithmetic<span class="sym">-</span>shift <span class="num">1</span> off<span class="sym">)</span> <span class="num">1</span><span class="sym">)))
</span>        res<span class="sym">))))

(</span>define <span class="sym">(</span>bit<span class="sym">-</span>vector<span class="sym">-</span>ref vec i<span class="sym">)
  (</span>let <span class="sym">((</span>byte <span class="sym">(</span>quotient i <span class="num">8</span><span class="sym">))
        (</span>off <span class="sym">(</span>remainder i <span class="num">8</span><span class="sym">)))
    (</span><span class="kwa">and</span> <span class="sym">(&lt;</span> byte <span class="sym">(</span>byte<span class="sym">-</span>vector<span class="sym">-</span><span class="kwa">length</span> vec<span class="sym">))
         (</span><span class="kwa">not</span> <span class="sym">(</span>zero? <span class="sym">(</span>bitwise<span class="sym">-</span><span class="kwa">and</span> <span class="sym">(</span>byte<span class="sym">-</span>vector<span class="sym">-</span>ref vec byte<span class="sym">)
                                  (</span>arithmetic<span class="sym">-</span>shift <span class="num">1</span> off<span class="sym">)))))))

(</span>define <span class="sym">(</span>bit<span class="sym">-</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> vec i x<span class="sym">)
  (</span>let <span class="sym">((</span>byte <span class="sym">(</span>quotient i <span class="num">8</span><span class="sym">))
        (</span>off <span class="sym">(</span>remainder i <span class="num">8</span><span class="sym">))
        (</span>len <span class="sym">(</span>byte<span class="sym">-</span>vector<span class="sym">-</span><span class="kwa">length</span> vec<span class="sym">)))
    (</span><span class="kwa">cond
</span>      <span class="sym">((&lt;</span> byte len<span class="sym">)
       (</span>byte<span class="sym">-</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> vec byte
                      <span class="sym">(</span><span class="kwa">if</span> x
                        <span class="sym">(</span>bitwise<span class="sym">-</span>ior <span class="sym">(</span>byte<span class="sym">-</span>vector<span class="sym">-</span>ref vec byte<span class="sym">)
                                     (</span>arithmetic<span class="sym">-</span>shift <span class="num">1</span> off<span class="sym">))
                        (</span>bitwise<span class="sym">-</span><span class="kwa">and</span> <span class="sym">(</span>byte<span class="sym">-</span>vector<span class="sym">-</span>ref vec byte<span class="sym">)
                                     (</span>bitwise<span class="sym">-</span><span class="kwa">not</span> <span class="sym">(</span>arithmetic<span class="sym">-</span>shift <span class="num">1</span> off<span class="sym">)))))
</span>       vec<span class="sym">)
      ((</span><span class="kwa">not</span> x<span class="sym">)</span> vec<span class="sym">)
      (</span>else <span class="sym">(</span>bit<span class="sym">-</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span>bit<span class="sym">-</span>vector<span class="sym">-</span>grow vec i<span class="sym">)</span> i x<span class="sym">)))))

(</span>define <span class="sym">(</span>nsievebits m<span class="sym">)
  (</span>let <span class="sym">((</span>a <span class="sym">(</span>make<span class="sym">-</span>bit<span class="sym">-</span>vector m #t<span class="sym">)))
    (</span>define <span class="sym">(</span>clear i<span class="sym">)
      (</span>do <span class="sym">([</span>j <span class="sym">(+</span> i i<span class="sym">) (+</span> j i<span class="sym">)])
	  ((&gt;=</span> j m<span class="sym">))
	(</span>bit<span class="sym">-</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a j #f<span class="sym">) ) )
    (</span>let <span class="sym">([</span>c <span class="num">0</span><span class="sym">])
      (</span>do <span class="sym">([</span>i <span class="num">2</span> <span class="sym">(</span>add1 i<span class="sym">)])
	  ((&gt;=</span> i m<span class="sym">)</span> c<span class="sym">)
	(</span>when <span class="sym">(</span>bit<span class="sym">-</span>vector<span class="sym">-</span>ref a i<span class="sym">)
	  (</span>clear i<span class="sym">)
	  (</span><span class="kwa">set</span><span class="sym">!</span> c <span class="sym">(</span>add1 c<span class="sym">)) ) ) ) ) )

(</span>define <span class="sym">(</span>test n<span class="sym">)
  (</span>let <span class="sym">((</span>m <span class="sym">(*</span> <span class="num">10000</span> <span class="sym">(</span>arithmetic<span class="sym">-</span>shift <span class="num">1</span> n<span class="sym">))))
    (</span>format #t <span class="str">&quot;Primes up to ~8d ~8d~%&quot;</span> m <span class="sym">(</span>nsievebits m<span class="sym">))))

(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let <span class="sym">([</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">))])
    (</span>when <span class="sym">(&gt;=</span> n <span class="num">0</span><span class="sym">) (</span>test n<span class="sym">))
    (</span>when <span class="sym">(&gt;=</span> n <span class="num">1</span><span class="sym">) (</span>test <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)))
    (</span>when <span class="sym">(&gt;=</span> n <span class="num">2</span><span class="sym">) (</span>test <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)))))

(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))
</span>
