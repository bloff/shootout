<span class="hl sym">/*</span> The Computer Language Benchmarks Game
   http<span class="hl sym">://</span>shootout.alioth.debian.org<span class="hl sym">/</span>
   contributed by Xavier Oswald
<span class="hl sym">*/</span>

Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> SPECTRALNORM<span class="hl sym">;</span>

Section Inherit

  <span class="hl sym">-</span> parent_any<span class="hl sym">:</span>OBJECT <span class="hl sym">:=</span> OBJECT<span class="hl sym">;</span>

Section Private

  <span class="hl sym">-</span> n<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

  <span class="hl sym">-</span> eval_a<span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">:</span>INTEGER<span class="hl sym">) :</span>REAL_64 <span class="hl sym">&lt;-</span>
  <span class="hl sym">(</span>
    <span class="hl num">1.0</span> <span class="hl sym">/((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span><span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> eval_a_times_u<span class="hl sym">(</span>u<span class="hl sym">,</span>au<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>REAL_64<span class="hl sym">]) &lt;-</span>
  <span class="hl sym">(</span>
    <span class="hl num">0</span>.to n do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      au.put <span class="hl num">0</span> to i<span class="hl sym">;</span>
      <span class="hl num">0</span>.to n do <span class="hl sym">{</span> j<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
        au.put <span class="hl sym">(</span>au.item i <span class="hl sym">+</span> eval_a<span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">) *</span> u.item j<span class="hl sym">)</span> to i<span class="hl sym">;</span>
      <span class="hl sym">};</span>
    <span class="hl sym">};</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> eval_at_times_u<span class="hl sym">(</span>u<span class="hl sym">,</span>au<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>REAL_64<span class="hl sym">]) &lt;-</span>
  <span class="hl sym">(</span>
    <span class="hl num">0</span>.to n do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      au.put <span class="hl num">0</span> to i<span class="hl sym">;</span>
      <span class="hl num">0</span>.to n do <span class="hl sym">{</span> j<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
        au.put <span class="hl sym">(</span>au.item i <span class="hl sym">+</span> eval_a<span class="hl sym">(</span>j<span class="hl sym">,</span>i<span class="hl sym">) *</span> u.item j<span class="hl sym">)</span> to i<span class="hl sym">;</span>
      <span class="hl sym">};</span>
    <span class="hl sym">};</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> vtmp<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>REAL_64<span class="hl sym">];</span>

  <span class="hl sym">-</span> eval_ata_times_u<span class="hl sym">(</span>u<span class="hl sym">,</span>atau<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>REAL_64<span class="hl sym">]) &lt;-</span>
  <span class="hl sym">(</span>
    eval_a_times_u<span class="hl sym">(</span>u<span class="hl sym">,</span>vtmp<span class="hl sym">);</span>
    eval_at_times_u<span class="hl sym">(</span>vtmp<span class="hl sym">,</span>atau<span class="hl sym">);</span>
  <span class="hl sym">);</span>

Section Public

  <span class="hl sym">-</span> main <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> vbv<span class="hl sym">,</span>vv<span class="hl sym">:</span>REAL_64<span class="hl sym">;</span>
    <span class="hl sym">+</span> u <span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>REAL_64<span class="hl sym">];</span>
    <span class="hl sym">+</span> v <span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>REAL_64<span class="hl sym">];</span>

    <span class="hl sym">(</span> COMMAND_LINE.upper <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
      n <span class="hl sym">:=</span> COMMAND_LINE.item <span class="hl num">1</span>.to_integer<span class="hl sym">;</span>
    <span class="hl sym">}</span> else <span class="hl sym">{</span>
      n <span class="hl sym">:=</span> <span class="hl num">2000</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>

    u    <span class="hl sym">:=</span> NATIVE_ARRAY<span class="hl sym">[</span>REAL_64<span class="hl sym">]</span>.calloc_intern n<span class="hl sym">;</span>
    vtmp <span class="hl sym">:=</span> NATIVE_ARRAY<span class="hl sym">[</span>REAL_64<span class="hl sym">]</span>.calloc_intern n<span class="hl sym">;</span>
    v    <span class="hl sym">:=</span> NATIVE_ARRAY<span class="hl sym">[</span>REAL_64<span class="hl sym">]</span>.calloc_intern n<span class="hl sym">;</span>

    n <span class="hl sym">:=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl num">0</span>.to n do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      u.put <span class="hl num">1</span> to i<span class="hl sym">;</span>
    <span class="hl sym">};</span>

    <span class="hl num">0</span>.to <span class="hl num">9</span> do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      eval_ata_times_u<span class="hl sym">(</span>u<span class="hl sym">,</span>v<span class="hl sym">);</span>
      eval_ata_times_u<span class="hl sym">(</span>v<span class="hl sym">,</span>u<span class="hl sym">);</span>
    <span class="hl sym">};</span>

    <span class="hl num">0</span>.to n do <span class="hl sym">{</span>Â i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      vbv <span class="hl sym">:=</span> vbv <span class="hl sym">+</span> u.item i <span class="hl sym">*</span> v.item i<span class="hl sym">;</span>
      vv  <span class="hl sym">:=</span>  vv <span class="hl sym">+</span> v.item i <span class="hl sym">*</span> v.item i<span class="hl sym">;</span>
    <span class="hl sym">};</span>

    <span class="hl sym">((</span>vbv<span class="hl sym">/</span>vv<span class="hl sym">)</span>.sqrt<span class="hl sym">)</span>.print_format_c <span class="hl str">&quot;%.9f\n&quot;</span><span class="hl sym">;</span>
  <span class="hl sym">);</span>
