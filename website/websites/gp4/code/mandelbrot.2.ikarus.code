<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; Derived by Michael D. Adams from the Chicken variant by Anthony Borla</span>


<span class="hl sym">(</span>import <span class="hl sym">(</span>rnrs<span class="hl sym">))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">*</span>limit-sqr<span class="hl sym">*</span> <span class="hl num">4.0</span><span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">*</span>iterations<span class="hl sym">*</span> <span class="hl num">50</span><span class="hl sym">)</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mandelbrot x frac2<span class="hl sym">/</span>n ci<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>cr <span class="hl sym">(</span>fl- <span class="hl sym">(</span>fl<span class="hl sym">* (</span>inexact x<span class="hl sym">)</span> frac2<span class="hl sym">/</span>n<span class="hl sym">)</span> <span class="hl num">1.5</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">) (</span>zr <span class="hl num">0.0</span><span class="hl sym">) (</span>zi <span class="hl num">0.0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;</span> i <span class="hl sym">*</span>iterations<span class="hl sym">*)</span>
          <span class="hl num">1</span>
          <span class="hl sym">(</span>let <span class="hl sym">((</span>zrq <span class="hl sym">(</span>fl<span class="hl sym">*</span> zr zr<span class="hl sym">))</span>
                <span class="hl sym">(</span>ziq <span class="hl sym">(</span>fl<span class="hl sym">*</span> zi zi<span class="hl sym">)))</span>
            <span class="hl sym">(</span><span class="hl kwa">cond</span>
             <span class="hl sym">((</span>fl<span class="hl sym">&gt;</span>? <span class="hl sym">(</span>fl<span class="hl sym">+</span> zrq ziq<span class="hl sym">) *</span>limit-sqr<span class="hl sym">*)</span> <span class="hl num">0</span><span class="hl sym">)</span>
             <span class="hl sym">(</span>else <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)</span>
                         <span class="hl sym">(</span>fl<span class="hl sym">+ (</span>fl- zrq ziq<span class="hl sym">)</span> cr<span class="hl sym">)</span>
                         <span class="hl sym">(</span>fl<span class="hl sym">+ (</span>fl<span class="hl sym">*</span> <span class="hl num">2.0</span> zr zi<span class="hl sym">)</span> ci<span class="hl sym">)))))))))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">cadr</span> args<span class="hl sym">)))</span>
        <span class="hl sym">(</span>frac2<span class="hl sym">/</span>n <span class="hl sym">(/</span> <span class="hl num">2.0</span> <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">cadr</span> args<span class="hl sym">))))</span>
        <span class="hl sym">(</span>out <span class="hl sym">(</span>standard-output-port<span class="hl sym">)))</span>
    <span class="hl sym">(</span>display <span class="hl str">&quot;P4&quot;</span><span class="hl sym">) (</span>newline<span class="hl sym">)</span>
    <span class="hl sym">(</span>display n<span class="hl sym">) (</span>display <span class="hl str">&quot; &quot;</span><span class="hl sym">) (</span>display n<span class="hl sym">) (</span>newline<span class="hl sym">)</span>
    <span class="hl sym">(</span>let loop-y <span class="hl sym">((</span>y <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>when <span class="hl sym">(&lt;</span> y n<span class="hl sym">)</span>
            <span class="hl sym">(</span>let <span class="hl sym">([</span>ci <span class="hl sym">(</span>fl- <span class="hl sym">(</span>fl<span class="hl sym">* (</span>inexact y<span class="hl sym">)</span> frac2<span class="hl sym">/</span>n<span class="hl sym">)</span> <span class="hl num">1.0</span><span class="hl sym">)])</span>
              <span class="hl sym">(</span>let loop-x <span class="hl sym">((</span>x <span class="hl num">0</span><span class="hl sym">) (</span>bitnum <span class="hl num">0</span><span class="hl sym">) (</span>byteacc <span class="hl num">0</span><span class="hl sym">))</span>
                <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;</span> x n<span class="hl sym">)</span>
                    <span class="hl sym">(</span>let <span class="hl sym">([</span>bitnum <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> bitnum<span class="hl sym">)]</span>
                          <span class="hl sym">[</span>byteacc <span class="hl sym">(</span>fx<span class="hl sym">+ (</span>fxarithmetic-shift-left byteacc <span class="hl num">1</span><span class="hl sym">)</span>
                                        <span class="hl sym">(</span>mandelbrot x frac2<span class="hl sym">/</span>n ci<span class="hl sym">))])</span>
                      <span class="hl sym">(</span><span class="hl kwa">cond</span>
                       <span class="hl sym">[(=</span> bitnum <span class="hl num">8</span><span class="hl sym">)</span>
                        <span class="hl sym">(</span>put-u8 out byteacc<span class="hl sym">)</span>
                        <span class="hl sym">(</span>loop-x <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> x<span class="hl sym">)</span> <span class="hl num">0 0</span><span class="hl sym">)]</span>
                       <span class="hl sym">[</span>else <span class="hl sym">(</span>loop-x <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> x<span class="hl sym">)</span> bitnum byteacc<span class="hl sym">)]))</span>
                    <span class="hl sym">(</span>begin
                      <span class="hl sym">(</span>when <span class="hl sym">(</span>positive? bitnum<span class="hl sym">)</span>
                            <span class="hl sym">(</span>put-u8 out <span class="hl sym">(</span>fxarithmetic-shift-left byteacc <span class="hl sym">(</span>fx- <span class="hl num">8</span> <span class="hl sym">(</span>fxand n #x7<span class="hl sym">)))))</span>
                      <span class="hl sym">(</span>loop-y <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> y<span class="hl sym">))))))))</span>
    <span class="hl sym">(</span>flush-output-port out<span class="hl sym">)))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span><span class="hl sym">))</span>
