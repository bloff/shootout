<span class="slc">' The Computer Language Shootout</span>
<span class="slc">' http://shootout.alioth.debian.org/</span>
<span class="slc">' by Antoni Gual</span>

option explicit

#define iter <span class="num">50</span>

<span class="kwa">dim</span> shared w<span class="sym">,</span>h

<span class="kwa">sub</span> calcmandel<span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>byte_acc<span class="sym">)</span>
  <span class="kwa">dim as</span> double limit<span class="sym">,</span> zr<span class="sym">,</span> zi<span class="sym">,</span> cr<span class="sym">,</span> ci<span class="sym">,</span> tr<span class="sym">,</span> ti
  <span class="kwa">dim</span> i

  limit<span class="sym">=</span><span class="num">4.0</span>
  zr <span class="sym">=</span> <span class="num">0.0</span> <span class="sym">:</span> zi <span class="sym">=</span> <span class="num">0.0</span>
  tr<span class="sym">=</span><span class="num">0.0</span> <span class="sym">:</span>ti<span class="sym">=</span><span class="num">0.0</span>
  cr <span class="sym">= (</span><span class="num">2.0</span><span class="sym">*</span>x<span class="sym">/</span>w <span class="sym">-</span> <span class="num">1.5</span><span class="sym">) :</span> ci<span class="sym">=(</span><span class="num">2.0</span><span class="sym">*</span>y<span class="sym">/</span>h <span class="sym">-</span> <span class="num">1.0</span><span class="sym">)</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> iter<span class="sym">-</span><span class="num">1</span>
    zi <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>zr<span class="sym">*</span>zi <span class="sym">+</span> ci
    zr <span class="sym">=</span> tr <span class="sym">-</span> ti <span class="sym">+</span> cr
    tr<span class="sym">=</span>zr<span class="sym">*</span>zr <span class="sym">:</span> ti<span class="sym">=</span>zi<span class="sym">*</span>zi
    <span class="kwa">if</span> tr<span class="sym">+</span>ti <span class="sym">&gt;</span> limit <span class="kwa">then</span> exit <span class="kwa">for</span>
  <span class="kwa">next</span> i
  byte_acc shl<span class="sym">=</span> <span class="num">1</span>
  <span class="kwa">if</span> tr<span class="sym">+</span>ti<span class="sym">&lt;=</span>limit <span class="kwa">then</span> byte_acc <span class="kwa">or</span><span class="sym">=</span><span class="num">1</span>
<span class="kwa">end sub</span>

<span class="kwa">dim</span>  x<span class="sym">,</span> y<span class="sym">,</span>  i<span class="sym">,</span> bit_num<span class="sym">,</span>byte_acc

  w <span class="sym">=</span> val<span class="sym">(</span>command$<span class="sym">)</span>
  <span class="kwa">if</span> w <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> w <span class="sym">=</span> <span class="num">300</span>
  h <span class="sym">=</span> w

  print  <span class="str">&quot;P4&quot;</span>
  print  str<span class="sym">(</span>w<span class="sym">);</span>h

  <span class="kwa">for</span> y <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> h<span class="sym">-</span><span class="num">1</span>
      <span class="kwa">for</span> x <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> w<span class="sym">-</span><span class="num">1</span>

         calcmandel<span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>byte_acc<span class="sym">)</span>
         bit_num <span class="sym">+=</span> <span class="num">1</span>

          <span class="kwa">if</span> bit_num <span class="sym">=</span> <span class="num">8</span> <span class="kwa">then</span>               <span class="slc">'eob</span>
              print chr<span class="sym">(</span>byte_acc<span class="sym">);</span>
              byte_acc <span class="sym">=</span> <span class="num">0</span>
              bit_num <span class="sym">=</span> <span class="num">0</span>
          <span class="kwa">elseif</span> x <span class="sym">=</span> w<span class="sym">-</span><span class="num">1</span> <span class="kwa">then</span>              <span class="slc">'eol</span>
              byte_acc <span class="sym">=</span> byte_acc shl <span class="sym">(</span><span class="num">8</span> <span class="sym">-</span> w mod <span class="num">8</span><span class="sym">)</span>
              print chr<span class="sym">(</span>byte_acc<span class="sym">);</span>
              byte_acc <span class="sym">=</span> <span class="num">0</span>
              bit_num <span class="sym">=</span> <span class="num">0</span>
          <span class="kwa">end if</span>
      <span class="kwa">next</span> x
  <span class="kwa">next</span> y
<span class="kwa">end</span>

