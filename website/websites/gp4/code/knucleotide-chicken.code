<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Anthony Borla</span>

<span class="hl sym">(</span>require-extension format<span class="hl sym">)</span>

<span class="hl sym">(</span>declare <span class="hl sym">(</span>uses srfi-<span class="hl num">1</span> srfi-<span class="hl num">13</span><span class="hl sym">))</span>


<span class="hl sym">(</span>define <span class="hl sym">(</span>make-stringbuffer #<span class="hl sym">!</span>optional <span class="hl sym">(</span>blocksize #e512<span class="hl sym">) (</span>initial-capacity #e32<span class="hl sym">))</span>
  <span class="hl sym">(</span>let<span class="hl sym">*</span>

    <span class="hl sym">((</span>capacity initial-capacity<span class="hl sym">)</span>

    <span class="hl sym">(</span>buffer <span class="hl sym">(</span>make-vector capacity <span class="hl sym">(</span>make-string <span class="hl num">0</span><span class="hl sym">)))</span>

    <span class="hl sym">(</span>spill-buffer <span class="hl sym">(</span>make-string <span class="hl num">0</span><span class="hl sym">))</span>

    <span class="hl sym">(</span>next-entry #e0<span class="hl sym">)</span>

    <span class="hl sym">(</span>grow-buffer
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
        <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> capacity <span class="hl sym">(</span>fx<span class="hl sym">*</span> #e2 capacity<span class="hl sym">))</span>
        <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> buffer <span class="hl sym">(</span>vector-resize buffer capacity <span class="hl sym">(</span>make-string <span class="hl num">0</span><span class="hl sym">))) ))</span>

    <span class="hl sym">(</span>sb-free
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
        <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i <span class="hl sym">(</span>sub1 next-entry<span class="hl sym">)))</span>
          <span class="hl sym">(</span><span class="hl kwa">cond</span>
            <span class="hl sym">((</span>zero? i<span class="hl sym">) '())</span>
            <span class="hl sym">(</span>else
              <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> buffer i <span class="hl sym">(</span>make-string <span class="hl num">0</span><span class="hl sym">))</span>
              <span class="hl sym">(</span>loop <span class="hl sym">(</span>sub1 i<span class="hl sym">)))))</span>

        <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> buffer <span class="hl sym">(</span>make-vector initial-capacity <span class="hl sym">(</span>make-string <span class="hl num">0</span><span class="hl sym">)))</span>
        <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> spill-buffer <span class="hl sym">(</span>make-string <span class="hl num">0</span><span class="hl sym">))</span>
        <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> next-entry #e0<span class="hl sym">) ))</span>

    <span class="hl sym">(</span>sb-<span class="hl kwa">append</span><span class="hl sym">!</span>
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>value<span class="hl sym">)</span>
        <span class="hl sym">(</span>let<span class="hl sym">* ((</span>new-value <span class="hl sym">(</span>string-<span class="hl kwa">append</span> spill-buffer value<span class="hl sym">))</span>
               <span class="hl sym">(</span>new-value-<span class="hl kwa">length</span> <span class="hl sym">(</span>string-<span class="hl kwa">length</span> new-value<span class="hl sym">)))</span>
          <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> spill-buffer <span class="hl sym">(</span>make-string <span class="hl num">0</span><span class="hl sym">))</span>
          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>fx<span class="hl sym">=</span> next-entry capacity<span class="hl sym">)</span>
            <span class="hl sym">(</span>grow-buffer<span class="hl sym">))</span>
          <span class="hl sym">(</span><span class="hl kwa">cond</span>
            <span class="hl sym">((</span>fx<span class="hl sym">&lt;</span> new-value-<span class="hl kwa">length</span> blocksize<span class="hl sym">) (</span><span class="hl kwa">set</span><span class="hl sym">!</span> spill-buffer new-value<span class="hl sym">))</span>
            <span class="hl sym">((</span>fx<span class="hl sym">&gt;</span> new-value-<span class="hl kwa">length</span> blocksize<span class="hl sym">)</span>
              <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>fx<span class="hl sym">&gt;= (</span>fx<span class="hl sym">+ (</span>fxmod new-value-<span class="hl kwa">length</span> blocksize<span class="hl sym">)</span> next-entry<span class="hl sym">)</span> capacity<span class="hl sym">)</span>
                <span class="hl sym">(</span>grow-buffer<span class="hl sym">))</span>
              <span class="hl sym">(</span>for-each
                <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>block<span class="hl sym">)</span>
                  <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> buffer next-entry block<span class="hl sym">)</span>
                  <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> next-entry <span class="hl sym">(</span>add1 next-entry<span class="hl sym">)))</span>
                <span class="hl sym">(</span>string-chop new-value blocksize<span class="hl sym">))</span>
              <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>fx<span class="hl sym">&lt; (</span>string-<span class="hl kwa">length</span> <span class="hl sym">(</span>vector-ref buffer <span class="hl sym">(</span>sub1 next-entry<span class="hl sym">)))</span> blocksize<span class="hl sym">)</span>
              <span class="hl sym">(</span>begin
                <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> spill-buffer <span class="hl sym">(</span>vector-ref buffer <span class="hl sym">(</span>sub1 next-entry<span class="hl sym">)))</span>
                <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> buffer <span class="hl sym">(</span>sub1 next-entry<span class="hl sym">) (</span>make-string <span class="hl num">0</span><span class="hl sym">))</span>
                <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> next-entry <span class="hl sym">(</span>sub1 next-entry<span class="hl sym">)))))</span>
            <span class="hl sym">(</span>else
              <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> buffer next-entry new-value<span class="hl sym">)</span>
              <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> next-entry <span class="hl sym">(</span>add1 next-entry<span class="hl sym">)))) )))</span>

    <span class="hl sym">(</span>sb-slice
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>i <span class="hl kwa">length</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>let<span class="hl sym">* ((</span>start-block <span class="hl sym">(</span>fx<span class="hl sym">/</span> i blocksize<span class="hl sym">))</span>
               <span class="hl sym">(</span>start-offset <span class="hl sym">(</span>fxmod i blocksize<span class="hl sym">))</span>
               <span class="hl sym">(</span>so<span class="hl sym">+</span><span class="hl kwa">length</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> start-offset <span class="hl kwa">length</span><span class="hl sym">)))</span>
          <span class="hl sym">(</span><span class="hl kwa">cond</span>
            <span class="hl sym">((</span>fx<span class="hl sym">&gt;</span> start-block next-entry<span class="hl sym">)</span>
              <span class="hl sym">(</span>make-string <span class="hl num">0</span><span class="hl sym">))</span>
            <span class="hl sym">((</span>fx<span class="hl sym">=</span> start-block next-entry<span class="hl sym">)</span>
              <span class="hl sym">(</span>let <span class="hl sym">((</span>extract-<span class="hl kwa">length</span> <span class="hl sym">(</span>fxmin <span class="hl kwa">length</span> <span class="hl sym">(</span>string-<span class="hl kwa">length</span> spill-buffer<span class="hl sym">))))</span>
                <span class="hl sym">(</span>substring spill-buffer start-offset <span class="hl sym">(</span>fx<span class="hl sym">+</span> start-offset extract-<span class="hl kwa">length</span><span class="hl sym">))))</span>
            <span class="hl sym">(</span>else
              <span class="hl sym">(</span><span class="hl kwa">cond</span>
                <span class="hl sym">((</span>fx<span class="hl sym">&lt;=</span> so<span class="hl sym">+</span><span class="hl kwa">length</span> blocksize<span class="hl sym">)</span>
                  <span class="hl sym">(</span>substring <span class="hl sym">(</span>vector-ref buffer start-block<span class="hl sym">)</span> start-offset <span class="hl sym">(</span>fx<span class="hl sym">+</span> start-offset <span class="hl kwa">length</span><span class="hl sym">)))</span>
                <span class="hl sym">(</span>else <span class="hl slc">;;; (fx&gt; so+length blocksize)</span>
                  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>fx<span class="hl sym">/</span> so<span class="hl sym">+</span><span class="hl kwa">length</span> blocksize<span class="hl sym">))</span>
                        <span class="hl sym">(</span><span class="hl kwa">last</span>-block-<span class="hl kwa">length</span> <span class="hl sym">(</span>fxmod so<span class="hl sym">+</span><span class="hl kwa">length</span> blocksize<span class="hl sym">)))</span>
                    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i <span class="hl sym">(</span>add1 start-block<span class="hl sym">))</span>
                               <span class="hl sym">(</span>s <span class="hl sym">(</span>substring <span class="hl sym">(</span>vector-ref buffer start-block<span class="hl sym">)</span> start-offset<span class="hl sym">)))</span>
                      <span class="hl sym">(</span><span class="hl kwa">cond</span>
                        <span class="hl sym">((</span>fx<span class="hl sym">&gt;=</span> i n<span class="hl sym">)</span>
                          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>fx<span class="hl sym">&gt;=</span> i next-entry<span class="hl sym">)</span>
                            <span class="hl sym">(</span>let <span class="hl sym">((</span>spill-<span class="hl kwa">length</span> <span class="hl sym">(</span>string-<span class="hl kwa">length</span> spill-buffer<span class="hl sym">)))</span>
                              <span class="hl sym">(</span><span class="hl kwa">cond</span>
                                <span class="hl sym">((</span>zero? spill-<span class="hl kwa">length</span><span class="hl sym">)</span> s<span class="hl sym">)</span>
                                <span class="hl sym">((</span>fx<span class="hl sym">&lt;</span> spill-<span class="hl kwa">length last</span>-block-<span class="hl kwa">length</span><span class="hl sym">) (</span>string-<span class="hl kwa">append</span> s spill-buffer<span class="hl sym">))</span>
                                <span class="hl sym">(</span>else <span class="hl sym">(</span>string-<span class="hl kwa">append</span> s <span class="hl sym">(</span>substring spill-buffer <span class="hl num">0</span> <span class="hl kwa">last</span>-block-<span class="hl kwa">length</span><span class="hl sym">)) )))</span>
                          <span class="hl slc">; else</span>
                            <span class="hl sym">(</span>string-<span class="hl kwa">append</span> s <span class="hl sym">(</span>substring <span class="hl sym">(</span>vector-ref buffer i<span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl kwa">last</span>-block-<span class="hl kwa">length</span><span class="hl sym">)) ))</span>
                        <span class="hl sym">(</span>else
                          <span class="hl sym">(</span>loop <span class="hl sym">(</span>add1 i<span class="hl sym">) (</span>string-<span class="hl kwa">append</span> s <span class="hl sym">(</span>substring <span class="hl sym">(</span>vector-ref buffer i<span class="hl sym">)</span> <span class="hl num">0</span> blocksize<span class="hl sym">) ))) ))) )) )) )))</span>

    <span class="hl sym">(</span>sb-<span class="hl kwa">length</span>
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
        <span class="hl sym">(</span>fx<span class="hl sym">+ (</span>fx<span class="hl sym">*</span> blocksize next-entry<span class="hl sym">) (</span>string-<span class="hl kwa">length</span> spill-buffer<span class="hl sym">)))) )</span>

    <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>op<span class="hl sym">)</span>
      <span class="hl sym">(</span><span class="hl kwa">cond</span>
        <span class="hl sym">((</span><span class="hl kwa">eq</span>? op <span class="hl sym">'</span>free<span class="hl sym">)</span> sb-free<span class="hl sym">)</span>
        <span class="hl sym">((</span><span class="hl kwa">eq</span>? op <span class="hl sym">'</span><span class="hl kwa">append</span><span class="hl sym">!)</span> sb-<span class="hl kwa">append</span><span class="hl sym">!)</span>
        <span class="hl sym">((</span><span class="hl kwa">eq</span>? op <span class="hl sym">'</span>slice<span class="hl sym">)</span> sb-slice<span class="hl sym">)</span>
        <span class="hl sym">((</span><span class="hl kwa">eq</span>? op <span class="hl sym">'</span><span class="hl kwa">length</span><span class="hl sym">)</span> sb-<span class="hl kwa">length</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>else <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">() (</span>display <span class="hl str">&quot;*** make-stringbuffer:invalid operation ***</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">))))) ))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>stringbuffer-<span class="hl kwa">append</span><span class="hl sym">!</span> sb value<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">apply</span> <span class="hl sym">(</span>sb <span class="hl sym">'</span><span class="hl kwa">append</span><span class="hl sym">!) (</span><span class="hl kwa">list</span> value<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>stringbuffer-slice sb i <span class="hl kwa">length</span><span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">apply</span> <span class="hl sym">(</span>sb <span class="hl sym">'</span>slice<span class="hl sym">) (</span><span class="hl kwa">list</span> i <span class="hl kwa">length</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>stringbuffer-<span class="hl kwa">length</span> sb<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">apply</span> <span class="hl sym">(</span>sb <span class="hl sym">'</span><span class="hl kwa">length</span><span class="hl sym">) '()))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make-knucleotide #<span class="hl sym">!</span>optional <span class="hl sym">(</span>blocksize #e4096<span class="hl sym">))</span>
  <span class="hl sym">(</span>let<span class="hl sym">*</span>

    <span class="hl sym">((</span><span class="hl kwa">load</span>-sequence
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>sb <span class="hl sym">(</span>make-stringbuffer blocksize<span class="hl sym">)))</span>
          <span class="hl sym">(</span>let loop <span class="hl sym">((</span><span class="hl kwa">line</span> <span class="hl sym">(</span><span class="hl kwa">read</span>-<span class="hl kwa">line</span><span class="hl sym">)))</span>
            <span class="hl sym">(</span><span class="hl kwa">cond</span>
              <span class="hl sym">((</span><span class="hl kwa">and</span>
                <span class="hl sym">(</span>char<span class="hl sym">=</span>? <span class="hl sym">(</span>string-ref <span class="hl kwa">line</span> <span class="hl num">0</span><span class="hl sym">)</span> #\&gt;<span class="hl sym">)</span>
                <span class="hl sym">(</span>string<span class="hl sym">=</span>? <span class="hl sym">(</span>substring <span class="hl kwa">line</span> <span class="hl num">0 6</span><span class="hl sym">)</span> <span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">)) '())</span>
              <span class="hl sym">(</span>else
                <span class="hl sym">(</span>loop <span class="hl sym">(</span><span class="hl kwa">read</span>-<span class="hl kwa">line</span><span class="hl sym">)) )))</span>
          <span class="hl sym">(</span>let loop <span class="hl sym">((</span><span class="hl kwa">line</span> <span class="hl sym">(</span><span class="hl kwa">read</span>-<span class="hl kwa">line</span><span class="hl sym">)))</span>
            <span class="hl sym">(</span><span class="hl kwa">cond</span>
              <span class="hl sym">((</span>eof-object? <span class="hl kwa">line</span><span class="hl sym">) '())</span>
              <span class="hl sym">((</span>char<span class="hl sym">=</span>? <span class="hl sym">(</span>string-ref <span class="hl kwa">line</span> <span class="hl num">0</span><span class="hl sym">)</span> #\&gt;<span class="hl sym">) '())</span>
              <span class="hl sym">((</span>char<span class="hl sym">=</span>? <span class="hl sym">(</span>string-ref <span class="hl kwa">line</span> <span class="hl num">0</span><span class="hl sym">)</span> #\;<span class="hl sym">) (</span>loop <span class="hl sym">(</span><span class="hl kwa">read</span>-<span class="hl kwa">line</span><span class="hl sym">)))</span>
              <span class="hl sym">(</span>else
                <span class="hl sym">(</span>string-upcase<span class="hl sym">!</span> <span class="hl kwa">line</span><span class="hl sym">)</span>
                <span class="hl sym">(</span>stringbuffer-<span class="hl kwa">append</span><span class="hl sym">!</span> sb <span class="hl kwa">line</span><span class="hl sym">)</span>
                <span class="hl sym">(</span>loop <span class="hl sym">(</span><span class="hl kwa">read</span>-<span class="hl kwa">line</span><span class="hl sym">)) )))</span>
          sb<span class="hl sym">)))</span>

    <span class="hl sym">(</span>sequence <span class="hl sym">(</span><span class="hl kwa">load</span>-sequence<span class="hl sym">))</span>

    <span class="hl sym">(</span>generate-counts
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>fragment-<span class="hl kwa">length</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>count-table <span class="hl sym">(</span>make-hash-table<span class="hl sym">))</span>
              <span class="hl sym">(</span><span class="hl kwa">last</span>-idx <span class="hl sym">(</span>add1 <span class="hl sym">(</span>fx- <span class="hl sym">(</span>stringbuffer-<span class="hl kwa">length</span> sequence<span class="hl sym">)</span> fragment-<span class="hl kwa">length</span><span class="hl sym">)) ))</span>
          <span class="hl sym">(</span>let loop-i <span class="hl sym">((</span>i #e0<span class="hl sym">))</span>
            <span class="hl sym">(</span><span class="hl kwa">cond</span>
              <span class="hl sym">((</span>fx<span class="hl sym">&gt;=</span> i fragment-<span class="hl kwa">length</span><span class="hl sym">) '())</span>
              <span class="hl sym">(</span>else
                <span class="hl sym">(</span>let loop-j <span class="hl sym">((</span>j i<span class="hl sym">) (</span>key <span class="hl sym">(</span>stringbuffer-slice sequence i fragment-<span class="hl kwa">length</span><span class="hl sym">)))</span>
                  <span class="hl sym">(</span><span class="hl kwa">cond</span>
                    <span class="hl sym">((</span>fx<span class="hl sym">&gt;=</span> j <span class="hl kwa">last</span>-idx<span class="hl sym">) '())</span>
                    <span class="hl sym">(</span>else
                      <span class="hl sym">(</span>hash-table-<span class="hl kwa">set</span><span class="hl sym">!</span> count-table key
                        <span class="hl sym">(</span>add1 <span class="hl sym">(</span>hash-table-ref<span class="hl sym">/</span>default count-table key #e0<span class="hl sym">)))</span>
                      <span class="hl sym">(</span>loop-j <span class="hl sym">(</span>fx<span class="hl sym">+</span> j fragment-<span class="hl kwa">length</span><span class="hl sym">)</span>
                              <span class="hl sym">(</span>stringbuffer-slice
                                sequence <span class="hl sym">(</span>fx<span class="hl sym">+</span> j fragment-<span class="hl kwa">length</span><span class="hl sym">)</span> fragment-<span class="hl kwa">length</span><span class="hl sym">)) )))</span>
                <span class="hl sym">(</span>loop-i <span class="hl sym">(</span>add1 i<span class="hl sym">)))))</span>
          count-table<span class="hl sym">)))</span>

    <span class="hl sym">(</span><span class="hl kwa">print</span>-frequencies
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>fragment-<span class="hl kwa">length</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>let<span class="hl sym">* ((</span>count-table <span class="hl sym">(</span>generate-counts fragment-<span class="hl kwa">length</span><span class="hl sym">))</span>
               <span class="hl sym">(</span>count-sum
                 <span class="hl sym">(</span>exact-<span class="hl sym">&gt;</span>inexact
                   <span class="hl sym">(</span>hash-table-fold
                     count-table
                       <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>key value accum<span class="hl sym">) (</span>fx<span class="hl sym">+</span> accum value<span class="hl sym">))</span> #e0<span class="hl sym">)))</span>
               <span class="hl sym">(</span>freq-<span class="hl kwa">list</span>
                 <span class="hl sym">(</span>map
                   <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>pair<span class="hl sym">)</span>
                     <span class="hl sym">(</span><span class="hl kwa">cons</span>
                       <span class="hl sym">(</span><span class="hl kwa">car</span> pair<span class="hl sym">)</span>
                       <span class="hl sym">(</span>fp<span class="hl sym">*</span> #i100 <span class="hl sym">(</span>fp<span class="hl sym">/ (</span>exact-<span class="hl sym">&gt;</span>inexact <span class="hl sym">(</span><span class="hl kwa">cdr</span> pair<span class="hl sym">))</span> count-sum<span class="hl sym">))))</span>
                   <span class="hl sym">(</span>hash-table-<span class="hl sym">&gt;</span>alist count-table<span class="hl sym">)))</span>
               <span class="hl sym">(</span>sorted-freq-<span class="hl kwa">list</span>
                 <span class="hl sym">(</span>sort
                   freq-<span class="hl kwa">list</span>
                   <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">)</span>
                     <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>fp<span class="hl sym">= (</span><span class="hl kwa">cdr</span> x<span class="hl sym">) (</span><span class="hl kwa">cdr</span> y<span class="hl sym">))</span>
                       <span class="hl sym">(</span>string-ci<span class="hl sym">&gt;</span>? <span class="hl sym">(</span><span class="hl kwa">car</span> x<span class="hl sym">) (</span><span class="hl kwa">car</span> y<span class="hl sym">))</span>
                     <span class="hl slc">; else</span>
                       <span class="hl sym">(&gt; (</span><span class="hl kwa">cdr</span> x<span class="hl sym">) (</span><span class="hl kwa">cdr</span> y<span class="hl sym">)))) )))</span>
          <span class="hl sym">(</span>for-each
            <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>pair<span class="hl sym">) (</span>format #t <span class="hl str">&quot;~A ~,3F~%&quot;</span> <span class="hl sym">(</span><span class="hl kwa">car</span> pair<span class="hl sym">) (</span><span class="hl kwa">cdr</span> pair<span class="hl sym">)))</span>
            sorted-freq-<span class="hl kwa">list</span><span class="hl sym">)</span>
          <span class="hl sym">(</span>newline<span class="hl sym">))))</span>

    <span class="hl sym">(</span><span class="hl kwa">print</span>-count
      <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>fragment<span class="hl sym">)</span>
        <span class="hl sym">(</span>let<span class="hl sym">* ((</span>count-table <span class="hl sym">(</span>generate-counts <span class="hl sym">(</span>string-<span class="hl kwa">length</span> fragment<span class="hl sym">)))</span>
               <span class="hl sym">(</span>fragment-count <span class="hl sym">(</span>hash-table-ref<span class="hl sym">/</span>default count-table fragment #e0<span class="hl sym">) ))</span>
          <span class="hl sym">(</span><span class="hl kwa">print</span> fragment-count <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">&quot;</span> fragment<span class="hl sym">) ))))</span>

    <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>op<span class="hl sym">)</span>
      <span class="hl sym">(</span><span class="hl kwa">cond</span>
        <span class="hl sym">((</span><span class="hl kwa">eq</span>? op <span class="hl sym">'</span><span class="hl kwa">print</span>-frequencies<span class="hl sym">)</span> <span class="hl kwa">print</span>-frequencies<span class="hl sym">)</span>
        <span class="hl sym">((</span><span class="hl kwa">eq</span>? op <span class="hl sym">'</span><span class="hl kwa">print</span>-count<span class="hl sym">)</span> <span class="hl kwa">print</span>-count<span class="hl sym">)</span>
        <span class="hl sym">(</span>else <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">() (</span>display <span class="hl str">&quot;*** make-knucleotide:invalid operation ***</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">))))) ))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span><span class="hl kwa">print</span>-frequencies knucleotide fragment-<span class="hl kwa">length</span><span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">apply</span> <span class="hl sym">(</span>knucleotide <span class="hl sym">'</span><span class="hl kwa">print</span>-frequencies<span class="hl sym">) (</span><span class="hl kwa">list</span> fragment-<span class="hl kwa">length</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span><span class="hl kwa">print</span>-count knucleotide fragment<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">apply</span> <span class="hl sym">(</span>knucleotide <span class="hl sym">'</span><span class="hl kwa">print</span>-count<span class="hl sym">) (</span><span class="hl kwa">list</span> fragment<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>knucleotide <span class="hl sym">(</span>make-knucleotide #e16384<span class="hl sym">)))</span>

    <span class="hl sym">(</span><span class="hl kwa">print</span>-frequencies knucleotide <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-frequencies knucleotide <span class="hl num">2</span><span class="hl sym">)</span>

    <span class="hl sym">(</span><span class="hl kwa">print</span>-count knucleotide <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-count knucleotide <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-count knucleotide <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-count knucleotide <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-count knucleotide <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>main<span class="hl sym">)</span>

