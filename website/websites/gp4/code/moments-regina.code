<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Dennis Decker Jensen</span>
<span class="com">              and Vladimir Zabrodsky (the sqrt-function)</span>
<span class="com"></span>
<span class="com">Vladimir Zabrodsky has a &quot;Album of Algorithms and Techniques for</span>
<span class="com">Standard Rexx&quot; containing, among other things, the sqrt-function,</span>
<span class="com">which has been slightly edited for this program.</span>
<span class="com"></span>
<span class="com">http://www.geocities.com/SiliconValley/Garage/3323/aat/a_sqrt.html</span>
<span class="com"></span>
<span class="com">*/</span>

numeric digits <span class="num">11</span> <span class="com">/* only 11 digits precision needed for correctness */</span>
sum <span class="sym">=</span> <span class="num">0</span>
line <span class="sym">=</span> <span class="kwd">linein</span><span class="sym">()</span>
<span class="kwa">do</span> n <span class="sym">=</span> <span class="num">1</span> <span class="kwa">while</span> line \= <span class="str">&quot;&quot;</span>
	sum <span class="sym">=</span> sum <span class="sym">+</span> line
	nums<span class="sym">.</span>n <span class="sym">=</span> line
	line <span class="sym">=</span> <span class="kwd">linein</span><span class="sym">()</span>
end
n <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span> <span class="com">/* last line blank */</span>
nums<span class="num">.0</span> <span class="sym">=</span> n

mean <span class="sym">=</span> sum <span class="sym">/</span> n

parse value <span class="num">0 0 0 0</span> with average_deviation variance skew kurtosis

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> n
	deviation <span class="sym">=</span> nums<span class="sym">.</span>i <span class="sym">-</span> mean
	average_deviation <span class="sym">=</span> average_deviation <span class="sym">+</span> <span class="kwd">abs</span><span class="sym">(</span>deviation<span class="sym">)</span>
	variance <span class="sym">=</span> variance <span class="sym">+</span> deviation <span class="sym">**</span> <span class="num">2</span>
	skew <span class="sym">=</span> skew <span class="sym">+</span> deviation <span class="sym">**</span> <span class="num">3</span>
	kurtosis <span class="sym">=</span> kurtosis <span class="sym">+</span> deviation <span class="sym">**</span> <span class="num">4</span>
end

average_deviation <span class="sym">=</span> average_deviation <span class="sym">/</span> n
variance <span class="sym">=</span> variance <span class="sym">/ (</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
standard_deviation <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span>variance<span class="sym">)</span>
<span class="kwa">if</span> variance <span class="sym">&gt;</span> <span class="num">0</span> then <span class="kwa">do</span>
	skew <span class="sym">=</span> skew <span class="sym">/ (</span>n <span class="sym">*</span> variance <span class="sym">*</span> standard_deviation<span class="sym">)</span>
	kurtosis <span class="sym">=</span> kurtosis <span class="sym">/ (</span>n <span class="sym">*</span> variance <span class="sym">*</span> variance<span class="sym">) -</span> <span class="num">3.0</span>
end

call qsort <span class="num">1</span><span class="sym">,</span> nums<span class="num">.0</span>
mid <span class="sym">=</span> <span class="kwd">trunc</span><span class="sym">(</span>n <span class="sym">/</span> <span class="num">2</span><span class="sym">)</span>
k <span class="sym">=</span> mid <span class="sym">+</span> <span class="num">1</span>
<span class="kwa">if</span> n <span class="slc">// 2 = 1 then</span>
	median <span class="sym">=</span> nums<span class="sym">.</span>k
<span class="kwa">else</span>
	median <span class="sym">= (</span>nums<span class="sym">.</span>mid <span class="sym">+</span> nums<span class="sym">.</span>k<span class="sym">) /</span> <span class="num">2</span>

say <span class="str">&quot;n:                 &quot;</span> n
say <span class="str">&quot;median:            &quot;</span> <span class="kwd">format</span><span class="sym">(</span>median<span class="sym">, ,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;mean:              &quot;</span> <span class="kwd">format</span><span class="sym">(</span>mean<span class="sym">, ,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;average_deviation: &quot;</span> <span class="kwd">format</span><span class="sym">(</span>average_deviation<span class="sym">, ,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;standard_deviation:&quot;</span> <span class="kwd">format</span><span class="sym">(</span>standard_deviation<span class="sym">, ,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;variance:          &quot;</span> <span class="kwd">format</span><span class="sym">(</span>variance<span class="sym">, ,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;skew:              &quot;</span> <span class="kwd">format</span><span class="sym">(</span>skew<span class="sym">, ,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;kurtosis:          &quot;</span> <span class="kwd">format</span><span class="sym">(</span>kurtosis<span class="sym">, ,</span> <span class="num">6</span><span class="sym">)</span>

exit

sqrt<span class="sym">:</span> procedure
parse arg N<span class="sym">,</span> P
<span class="kwa">if</span> P \= <span class="str">&quot;&quot;</span> then numeric digits P
parse value <span class="kwd">format</span><span class="sym">(</span>N<span class="sym">, , , ,</span> <span class="num">0</span><span class="sym">)</span> with N <span class="str">&quot;E&quot;</span> Exp
	<span class="kwa">if</span> Exp <span class="sym">=</span> <span class="str">&quot;&quot;</span> then Exp <span class="sym">=</span> <span class="num">0</span>
<span class="kwa">if</span> <span class="sym">(</span>Exp <span class="slc">// 2) \= 0 then /* Odd exponent? */</span>
	<span class="kwa">if</span> Exp <span class="sym">&gt;</span> <span class="num">0</span>
		then parse value N<span class="sym">*</span><span class="num">10</span> Exp<span class="sym">-</span><span class="num">1</span> with N Exp
		<span class="kwa">else</span> parse value N<span class="sym">/</span><span class="num">10</span> Exp<span class="sym">+</span><span class="num">1</span> with N Exp
X <span class="sym">=</span> <span class="num">0.5</span> <span class="sym">* (</span>N <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="com">/* a &quot;reasonable&quot; start guess */</span>
<span class="kwa">do</span> forever
	NewX <span class="sym">=</span> <span class="num">0.5</span> <span class="sym">* (</span>X <span class="sym">+</span> N<span class="sym">/</span>X<span class="sym">)</span>
	<span class="kwa">if</span> X <span class="sym">=</span> NewX then <span class="kwa">return</span> X <span class="sym">*</span> <span class="num">10</span><span class="sym">**(</span>Exp <span class="sym">%</span> <span class="num">2</span><span class="sym">)</span>
	X <span class="sym">=</span> NewX
end

qsort<span class="sym">:</span> procedure expose nums<span class="sym">.</span>
arg l<span class="sym">,</span> r
<span class="kwa">if</span> r <span class="sym">-</span> l <span class="sym">&lt;=</span> <span class="num">1</span> then <span class="kwa">return</span> <span class="com">/* nothing to do */</span>
i <span class="sym">=</span> <span class="kwd">random</span><span class="sym">(</span>l<span class="sym">,</span> r<span class="sym">)</span> <span class="com">/* pick a random pivot */</span>
parse value nums<span class="sym">.</span>l nums<span class="sym">.</span>i with nums<span class="sym">.</span>i nums<span class="sym">.</span>l <span class="com">/* swap pivot to start */</span>
last <span class="sym">=</span> l
<span class="kwa">do</span> i <span class="sym">=</span> l<span class="sym">+</span><span class="num">1</span> to r <span class="com">/* partition */</span>
	<span class="kwa">if</span> nums<span class="sym">.</span>i <span class="sym">&lt;</span> nums<span class="sym">.</span>l then <span class="kwa">do</span>
		last <span class="sym">=</span> last <span class="sym">+</span> <span class="num">1</span>
		parse value nums<span class="sym">.</span>last nums<span class="sym">.</span>i with nums<span class="sym">.</span>i nums<span class="sym">.</span>last
	end
end
parse value nums<span class="sym">.</span>l nums<span class="sym">.</span>last with nums<span class="sym">.</span>last nums<span class="sym">.</span>l <span class="com">/* restore pivot */</span>
call qsort l<span class="sym">,</span> last
call qsort last<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> r
<span class="kwa">return</span>

