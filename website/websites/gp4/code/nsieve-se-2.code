<span class="slc">--</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Written by Philippe Ribet</span>
<span class="slc">--</span>

<span class="kwa">class</span> NSIEVE

insert
    ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
    make

<span class="kwa">feature</span> <span class="sym">{}</span>
    make <span class="kwa">is</span>
        <span class="kwa">local</span>
            n<span class="sym">:</span> INTEGER_8<span class="sym">;</span> flags<span class="sym">:</span> BIT_STRING<span class="sym">;</span> flags_count<span class="sym">:</span> <span class="kwb">INTEGER</span>
        <span class="kwa">do</span>
            <span class="kwa">check</span>
                argument_count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">and</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer
            <span class="kwa">end</span>
            n <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer.to_integer_8
            <span class="kwa">check</span>
                n <span class="sym">&gt;</span> <span class="num">1</span>
            <span class="kwa">end</span>
            flags_count <span class="sym">:= {</span><span class="kwb">INTEGER</span> <span class="num">1</span><span class="sym">} |&lt;&lt;</span> n
            flags_count <span class="sym">:=</span> <span class="num">10000</span> <span class="sym">*</span> flags_count
            <span class="kwa">create</span> flags.<span class="kwd">make</span><span class="sym">(</span>flags_count<span class="sym">)</span>
            <span class="kwd">print_line</span><span class="sym">(</span>flags_count<span class="sym">,</span> <span class="kwd">nsieves</span><span class="sym">(</span>flags<span class="sym">,</span> flags_count<span class="sym">))</span>
            flags_count <span class="sym">:=</span> flags_count #<span class="sym">//</span> <span class="num">2</span>
            flags.clear_all
            <span class="kwd">print_line</span><span class="sym">(</span>flags_count<span class="sym">,</span> <span class="kwd">nsieves</span><span class="sym">(</span>flags<span class="sym">,</span> flags_count<span class="sym">))</span>
            flags_count <span class="sym">:=</span> flags_count #<span class="sym">//</span> <span class="num">2</span>
            flags.clear_all
            <span class="kwd">print_line</span><span class="sym">(</span>flags_count<span class="sym">,</span> <span class="kwd">nsieves</span><span class="sym">(</span>flags<span class="sym">,</span> flags_count<span class="sym">))</span>
        <span class="kwa">end</span>

    <span class="kwd">nsieves</span> <span class="sym">(</span>flags<span class="sym">:</span> BIT_STRING<span class="sym">;</span> flags_count<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">) :</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span>
        <span class="kwa">local</span>
            i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">INTEGER</span>
        <span class="kwa">do</span>
            <span class="kwa">from</span>
                i <span class="sym">:=</span> <span class="num">2</span>
            until
                i <span class="sym">=</span> flags_count
            <span class="kwa">loop</span>
                <span class="kwa">if not</span> flags.<span class="kwd">item</span><span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">then</span>
                    <span class="kwa">from</span>
                        j <span class="sym">:=</span> i <span class="sym">+</span> i
                    until
                        j <span class="sym">&gt;=</span> flags_count
                    <span class="kwa">loop</span>
                        flags.<span class="kwd">put</span><span class="sym">(</span><span class="kwa">True</span><span class="sym">,</span> j<span class="sym">)</span>
                        j <span class="sym">:=</span> j <span class="sym">+</span> i
                    <span class="kwa">end</span>
                    <span class="kwa">Result</span> <span class="sym">:=</span> <span class="kwa">Result</span> <span class="sym">+</span> <span class="num">1</span>
                <span class="kwa">end</span>
                i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>
            <span class="kwa">end</span>
        <span class="kwa">end</span>

    <span class="kwd">print_line</span> <span class="sym">(</span>flags_count<span class="sym">,</span> nsieves_result<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
        <span class="kwa">local</span>
            buffer<span class="sym">:</span> STRING
        <span class="kwa">do</span>
            buffer <span class="sym">:=</span> <span class="kwa">once</span> <span class="str">&quot;........... local STRING buffer ....................&quot;</span>
            buffer.<span class="kwd">copy</span><span class="sym">(</span><span class="kwa">once</span> <span class="str">&quot;Primes up to &quot;</span><span class="sym">)</span>
            flags_count.<span class="kwd">append_in_format</span><span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">8</span><span class="sym">)</span>
            buffer.<span class="kwd">extend</span><span class="sym">(</span><span class="str">' '</span><span class="sym">)</span>
            nsieves_result.<span class="kwd">append_in_format</span><span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">8</span><span class="sym">)</span>
            buffer.<span class="kwd">extend</span><span class="sym">(</span><span class="str">'%N'</span><span class="sym">)</span>
            standard_streams.std_output.<span class="kwd">put_string</span><span class="sym">(</span>buffer<span class="sym">)</span>
        <span class="kwa">end</span>

<span class="kwa">end</span>
