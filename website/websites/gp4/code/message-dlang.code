<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release message.d</span>
<span class="com">*/</span>

import std<span class="sym">.</span>thread<span class="sym">,</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">const int</span> length <span class="sym">=</span> <span class="num">500</span><span class="sym">;</span>
    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    EndLink chainEnd <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">EndLink</span><span class="sym">(</span>length <span class="sym">*</span> n<span class="sym">);</span>
    chainEnd<span class="sym">.</span><span class="kwd">start</span><span class="sym">();</span>

    Link chain <span class="sym">=</span> chainEnd<span class="sym">;</span>
    <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--)</span>
    <span class="sym">{</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> length<span class="sym">;</span> i<span class="sym">++)</span>
        <span class="sym">{</span>
            Link link <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Link</span><span class="sym">(</span>chain<span class="sym">);</span>
            chain <span class="sym">=</span> link<span class="sym">;</span>
        <span class="sym">}</span>

        chain<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
        <span class="kwa">while</span><span class="sym">(</span>chain<span class="sym">.</span>next<span class="sym">)</span>
        <span class="sym">{</span>
            chain<span class="sym">.</span><span class="kwd">start</span><span class="sym">();</span>
            chain<span class="sym">.</span><span class="kwd">wait</span><span class="sym">();</span>
            chain <span class="sym">=</span> chain<span class="sym">.</span>next<span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    chainEnd<span class="sym">.</span><span class="kwd">wait</span><span class="sym">();</span>
    <span class="kwd">writefln</span><span class="sym">(</span>chainEnd<span class="sym">.</span>count<span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">class</span> Link<span class="sym">:</span> Thread
<span class="sym">{</span>
<span class="kwc">private</span><span class="sym">:</span>
    <span class="kwb">int</span> message <span class="sym">= -</span><span class="num">1</span><span class="sym">;</span>

<span class="kwc">public</span><span class="sym">:</span>
    Link next<span class="sym">;</span>

    <span class="kwa">this</span><span class="sym">(</span>Link t<span class="sym">)</span>
    <span class="sym">{</span>
        next <span class="sym">=</span> t<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">int</span> <span class="kwd">run</span><span class="sym">()</span>
    <span class="sym">{</span>
        next<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span><span class="kwd">take</span><span class="sym">());</span>
        <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>

    synchronized <span class="kwb">void</span> <span class="kwd">put</span><span class="sym">(</span><span class="kwb">int</span> m<span class="sym">)</span>
    <span class="sym">{</span>
        message <span class="sym">=</span> m<span class="sym">;</span>
        <span class="kwd">yield</span><span class="sym">();</span>
    <span class="sym">}</span>

<span class="kwc">protected</span><span class="sym">:</span>
    synchronized <span class="kwb">int</span> <span class="kwd">take</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>message <span class="sym">!= -</span><span class="num">1</span><span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwb">int</span> m <span class="sym">=</span> message<span class="sym">;</span>
            message <span class="sym">= -</span><span class="num">1</span><span class="sym">;</span>
            <span class="kwa">return</span> m <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwd">yield</span><span class="sym">();</span>
        <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">class</span> EndLink<span class="sym">:</span> Link
<span class="sym">{</span>
<span class="kwc">private</span><span class="sym">:</span>
    <span class="kwb">int</span> finalCount<span class="sym">;</span>

<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">super</span><span class="sym">(</span>null<span class="sym">);</span>
        finalCount <span class="sym">=</span> i<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">int</span> <span class="kwd">run</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">while</span><span class="sym">(</span>count <span class="sym">&lt;</span> finalCount<span class="sym">)</span>
        <span class="sym">{</span>
            count <span class="sym">+=</span> <span class="kwa">this</span><span class="sym">.</span><span class="kwd">take</span><span class="sym">();</span>
            <span class="kwd">yield</span><span class="sym">();</span>
        <span class="sym">}</span>
        <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>
