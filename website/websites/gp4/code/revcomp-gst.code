<span class="com">&quot;The Computer Language Shootout</span>
<span class="com"> http://shootout.alioth.debian.org/</span>
<span class="com"> contributed by Isaac Gouy&quot;</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">! FileStream methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">readFasta: anId</span>
<span class="com">   | idString newline buffer description line char |</span>
<span class="com">   idString := '&gt;',anId.</span>
<span class="com">   newline := Character nl.</span>
<span class="com"></span>
<span class="com">   &quot;find start of particular fasta sequence&quot;</span>
<span class="com">   [(self atEnd) or: [</span>
<span class="com">         (self peek = $&gt;)</span>
<span class="com">            ifTrue: [(line := self nextLine) startsWith: idString]</span>
<span class="com">            ifFalse: [self skipTo: newline. false]]</span>
<span class="com">      ] whileFalse.</span>
<span class="com"></span>
<span class="com">   &quot;line-by-line read - it would be a lot faster to block read&quot;</span>
<span class="com">   description := line.</span>
<span class="com">   buffer := ByteStream on: (String new: 1028).</span>
<span class="com">   [(self atEnd) or: [(char := self peek) = $&gt;]] whileFalse: [</span>
<span class="com">      (char = $;)</span>
<span class="com">         ifTrue: [self nextLine]</span>
<span class="com">         ifFalse: [buffer nextPutAll: self nextLine]</span>
<span class="com">      ].</span>
<span class="com"></span>
<span class="com">   ^Association key: description value: buffer contents !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">writeReverseComplementFasta: aString sequence: aSequence</span>
<span class="com">   | lineLength n iub |</span>
<span class="com">   (aString isNil) ifTrue: [^self].</span>
<span class="com"></span>
<span class="com">   lineLength := 60. n := aSequence size.</span>
<span class="com"></span>
<span class="com">   iub := String new: 128 withAll: $*.</span>
<span class="com">   iub at: $a value put: $T. iub at: $A value put: $T.</span>
<span class="com">   iub at: $b value put: $V. iub at: $B value put: $V.</span>
<span class="com">   iub at: $c value put: $G. iub at: $C value put: $G.</span>
<span class="com">   iub at: $d value put: $H. iub at: $D value put: $H.</span>
<span class="com">   iub at: $g value put: $C. iub at: $G value put: $C.</span>
<span class="com">   iub at: $h value put: $D. iub at: $H value put: $D.</span>
<span class="com">   iub at: $k value put: $M. iub at: $K value put: $M.</span>
<span class="com">   iub at: $m value put: $K. iub at: $M value put: $K.</span>
<span class="com">   iub at: $n value put: $N. iub at: $N value put: $N.</span>
<span class="com">   iub at: $r value put: $Y. iub at: $R value put: $Y.</span>
<span class="com">   iub at: $s value put: $S. iub at: $S value put: $S.</span>
<span class="com">   iub at: $t value put: $A. iub at: $T value put: $A.</span>
<span class="com">   iub at: $v value put: $B. iub at: $V value put: $B.</span>
<span class="com">   iub at: $w value put: $W. iub at: $W value put: $W.</span>
<span class="com">   iub at: $y value put: $R. iub at: $Y value put: $R.</span>
<span class="com"></span>
<span class="com">   self nextPutAll: aString; nl.</span>
<span class="com"></span>
<span class="com">   [n &gt; 0] whileTrue: [</span>
<span class="com">         1 to: ((n &lt; lineLength) ifTrue: [n] ifFalse: [lineLength]) do:</span>
<span class="com">            [:i | self nextPut: (iub at: (aSequence at: n - i + 1) value)].</span>
<span class="com">         self nl.</span>
<span class="com">         n := n - lineLength.</span>
<span class="com">      ] ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">| in out fasta |</span>
<span class="com">in := FileStream stdin bufferSize: 4096.</span>
<span class="com">out := FileStream stdout bufferSize: 4096.</span>
<span class="com"></span>
<span class="com">fasta := in readFasta: 'ONE'.</span>
<span class="com">out writeReverseComplementFasta: fasta key sequence: fasta value.</span>
<span class="com"></span>
<span class="com">fasta := in readFasta: 'TWO'.</span>
<span class="com">out writeReverseComplementFasta: fasta key sequence: fasta value.</span>
<span class="com"></span>
<span class="com">fasta := in readFasta: 'THREE'.</span>
<span class="com">out writeReverseComplementFasta: fasta key sequence: fasta value.</span>
<span class="com"></span>
<span class="com">in close. out close !</span>
