<span class="hl sym">/*</span> The Computer Language Benchmarks Game
   http<span class="hl sym">://</span>shootout.alioth.debian.org<span class="hl sym">/</span>
   contributed by Xavier Oswald
<span class="hl sym">*/</span>

<span class="hl sym">//</span> SPLITFILE<span class="hl sym">=</span>binarytrees.li
Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> BINARYTREES<span class="hl sym">;</span>

Section Inherit

  <span class="hl sym">-</span> parent_any<span class="hl sym">:</span>OBJECT <span class="hl sym">:=</span> OBJECT<span class="hl sym">;</span>

Section Private

  <span class="hl sym">-</span> min_depth <span class="hl sym">:</span>INTEGER <span class="hl sym">:=</span> <span class="hl num">4</span><span class="hl sym">;</span>

Section Public

  <span class="hl sym">-</span> main <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> n<span class="hl sym">,</span> check        <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> max_depth       <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> stretch_depth   <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> depth           <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> iterations      <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> long_lived_tree <span class="hl sym">:</span>TREENODE<span class="hl sym">;</span>

    <span class="hl sym">(</span>COMMAND_LINE.upper <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
      n <span class="hl sym">:=</span> COMMAND_LINE.item <span class="hl num">1</span>.to_integer<span class="hl sym">;</span>
    <span class="hl sym">};</span>

    <span class="hl sym">(</span>min_depth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">&gt;</span> n<span class="hl sym">)</span>.if <span class="hl sym">{</span>
      max_depth <span class="hl sym">:=</span> min_depth<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">;</span>
    <span class="hl sym">}</span> else <span class="hl sym">{</span>
      max_depth <span class="hl sym">:=</span> n<span class="hl sym">;</span>
    <span class="hl sym">};</span>
    stretch_depth <span class="hl sym">:=</span> max_depth<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
    check <span class="hl sym">:=</span> TREENODE.bottom_up_tree <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>stretch_depth<span class="hl sym">)</span>.item_check<span class="hl sym">;</span>

    <span class="hl str">&quot;stretch tree of depth &quot;</span>.print<span class="hl sym">;</span>
    stretch_depth.print<span class="hl sym">;</span>
    <span class="hl str">&quot;\t check: &quot;</span>.print<span class="hl sym">;</span>
    check.print<span class="hl sym">;</span>
    <span class="hl str">'\n'</span>.print<span class="hl sym">;</span>

    long_lived_tree <span class="hl sym">:=</span> TREENODE.bottom_up_tree <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> max_depth<span class="hl sym">);</span>
    depth <span class="hl sym">:=</span> min_depth<span class="hl sym">;</span>
    <span class="hl sym">{</span>depth <span class="hl sym">&lt;=</span> max_depth<span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
      iterations <span class="hl sym">:=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>max_depth <span class="hl sym">-</span> depth  <span class="hl sym">+</span> min_depth<span class="hl sym">);</span>
      check <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl num">1</span>.to iterations do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
        check <span class="hl sym">:=</span> check <span class="hl sym">+</span> TREENODE.bottom_up_tree <span class="hl sym">(</span>i<span class="hl sym">,</span>depth<span class="hl sym">)</span> .item_check<span class="hl sym">;</span>
        check <span class="hl sym">:=</span> check <span class="hl sym">+</span> TREENODE.bottom_up_tree <span class="hl sym">(-</span>i<span class="hl sym">,</span>depth<span class="hl sym">)</span>.item_check<span class="hl sym">;</span>
      <span class="hl sym">};</span>
      <span class="hl sym">(</span>iterations <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">)</span>.print<span class="hl sym">;</span>
      <span class="hl str">&quot;\t trees of depth &quot;</span>.print<span class="hl sym">;</span>
      depth.print<span class="hl sym">;</span>
      <span class="hl str">&quot;\t check: &quot;</span>.print<span class="hl sym">;</span>
      check.print<span class="hl sym">;</span>
      <span class="hl str">'\n'</span>.print<span class="hl sym">;</span>
      depth <span class="hl sym">:=</span> depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>

    <span class="hl str">&quot;long lived tree of depth &quot;</span>.print<span class="hl sym">;</span>
    max_depth.print<span class="hl sym">;</span>
    <span class="hl str">&quot;\t check: &quot;</span>.print<span class="hl sym">;</span>
    long_lived_tree.item_check.print<span class="hl sym">;</span>
    <span class="hl str">'\n'</span>.print<span class="hl sym">;</span>
  <span class="hl sym">);</span>
<span class="hl sym">//</span> class BINARYTREES

<span class="hl sym">//</span> SPLITFILE<span class="hl sym">=</span>treenode.li
Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> TREENODE<span class="hl sym">;</span>

Section Inherit

  <span class="hl sym">-</span> parent_any<span class="hl sym">:</span>OBJECT <span class="hl sym">:=</span> OBJECT<span class="hl sym">;</span>

Section Private

  <span class="hl sym">+</span> left  <span class="hl sym">:</span>TREENODE<span class="hl sym">;</span>

  <span class="hl sym">+</span> right <span class="hl sym">:</span>TREENODE<span class="hl sym">;</span>

  <span class="hl sym">+</span> item  <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

Section Public

  <span class="hl sym">-</span> item_check<span class="hl sym">:</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> item_tmp<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

    <span class="hl sym">(</span>left <span class="hl sym">=</span> NULL<span class="hl sym">)</span>.if <span class="hl sym">{</span>
      item_tmp <span class="hl sym">:=</span> item<span class="hl sym">;</span>
    <span class="hl sym">}</span> else <span class="hl sym">{</span>
      item_tmp <span class="hl sym">:=</span> item <span class="hl sym">+</span> left.item_check <span class="hl sym">-</span> right.item_check<span class="hl sym">;</span>
    <span class="hl sym">};</span>
    item_tmp
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> bottom_up_tree <span class="hl sym">(</span>item<span class="hl sym">,</span> depth<span class="hl sym">:</span>INTEGER<span class="hl sym">) :</span>SELF <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> result <span class="hl sym">:</span>SELF<span class="hl sym">;</span>

    result <span class="hl sym">:=</span> clone<span class="hl sym">;</span>

    <span class="hl sym">(</span>depth <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
      result.make <span class="hl sym">(</span>
        bottom_up_tree<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
        bottom_up_tree<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
        item
      <span class="hl sym">);</span>
    <span class="hl sym">}</span> else <span class="hl sym">{</span>
      result.make_item_only item<span class="hl sym">;</span>
    <span class="hl sym">};</span>
    result
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> make <span class="hl sym">(</span>l<span class="hl sym">,</span> r<span class="hl sym">:</span>TREENODE<span class="hl sym">,</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">) &lt;-</span>
  <span class="hl sym">(</span>
    left  <span class="hl sym">:=</span> l<span class="hl sym">;</span>
    right <span class="hl sym">:=</span> r<span class="hl sym">;</span>
    item  <span class="hl sym">:=</span> i<span class="hl sym">;</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> make_item_only i<span class="hl sym">:</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl sym">(</span>
    item <span class="hl sym">:=</span> i<span class="hl sym">;</span>
  <span class="hl sym">);</span>
<span class="hl sym">//</span> class TREENODE

