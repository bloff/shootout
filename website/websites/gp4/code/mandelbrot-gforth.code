<span class="slc">\ The Great Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>
<span class="slc">\ mandelbrot.gforth</span>
<span class="slc">\ Contributed by Ian Osgood</span>
<span class="slc">\ run:  gforth mandel.f 600 &gt;out.pbm</span>

<span class="slc">\ read NUM from last command line argument</span>
<span class="num">0</span><span class="sym">.</span> argc <span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

NUM s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f fconstant FNUM

<span class="sym">:</span> flush  drop emit <span class="num">0 128</span> <span class="sym">;</span>
<span class="sym">: ?</span>flush  dup <span class="num">128</span> <span class="sym">&lt;</span> if flush then <span class="sym">;</span>
<span class="sym">:</span> write<span class="sym">-</span>bit <span class="com">( b m f -- b' m' )</span>
  if tuck or swap then
  <span class="num">2</span><span class="sym">/</span> dup <span class="num">0</span><span class="sym">=</span> if flush then <span class="sym">;</span>

<span class="sym">:</span> mandel <span class="num">0</span>e <span class="num">0</span>e { F<span class="sym">:</span> Zi F<span class="sym">:</span> Zr <span class="sym">--</span> }
  <span class="sym">.</span><span class="str">&quot; P4&quot;</span> cr NUM dup <span class="sym">.</span> <span class="num">1</span> u<span class="sym">.</span>r cr
  <span class="num">0 128</span>  <span class="com">( byte-accumulator bit-mask )</span>
  NUM <span class="num">0</span> do
    i <span class="num">2</span><span class="sym">*</span> s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f FNUM f<span class="sym">/</span> <span class="num">1</span>e f<span class="sym">-</span> to Zi
    NUM <span class="num">0</span> do
      i <span class="num">2</span><span class="sym">*</span> s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f FNUM f<span class="sym">/</span> <span class="num">1.5</span>e f<span class="sym">-</span> to Zr
      Zr Zi <span class="num">51</span>
      begin  <span class="num">1</span><span class="sym">-</span> dup
      while  fover fdup f<span class="sym">*</span> fover fdup f<span class="sym">*</span>
             fover fover f<span class="sym">+</span> <span class="num">4</span>e f<span class="sym">&lt;</span>
      while  f<span class="sym">-</span> Zr f<span class="sym">+</span> frot frot f<span class="sym">*</span> <span class="num">2</span>e f<span class="sym">*</span> Zi f<span class="sym">+</span>
      repeat fdrop fdrop
      then <span class="num">0</span><span class="sym">=</span> write<span class="sym">-</span>bit fdrop fdrop
    loop <span class="sym">?</span>flush
  loop <span class="num">2</span>drop <span class="sym">;</span>

<span class="slc">\ run and write PPM to stdout</span>
mandel bye  <span class="slc">\ done!</span>
