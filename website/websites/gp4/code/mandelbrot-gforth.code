\ The Great Computer Language Shootout
\ http<span class="hl sym">:</span><span class="hl slc">//shootout.alioth.debian.org/</span>
\ mandelbrot<span class="hl sym">.</span>gforth
\ Contributed by Ian Osgood
\ run<span class="hl sym">:</span>  gforth mandel<span class="hl sym">.</span>f <span class="hl num">600</span> <span class="hl sym">&gt;</span>out<span class="hl sym">.</span>pbm

\ read NUM from last command line argument
<span class="hl num">0</span><span class="hl sym">.</span> argc &#64; <span class="hl num">1</span><span class="hl sym">-</span> arg <span class="hl sym">&gt;</span>number <span class="hl num">2</span>drop drop constant NUM

NUM s<span class="hl sym">&gt;</span>d d<span class="hl sym">&gt;</span>f fconstant FNUM

<span class="hl sym">:</span> flush  drop emit <span class="hl num">0 128</span> <span class="hl sym">;</span>
<span class="hl sym">:</span> ?flush  dup <span class="hl num">128</span> <span class="hl sym">&lt;</span> <span class="hl kwa">if</span> flush then <span class="hl sym">;</span>
<span class="hl sym">:</span> write<span class="hl sym">-</span><span class="hl kwd">bit</span> <span class="hl sym">(</span> b m f <span class="hl sym">--</span> b<span class="hl str">' m'</span> <span class="hl sym">)</span>
  <span class="hl kwa">if</span> tuck <span class="hl kwa">or</span> swap then
  <span class="hl num">2</span><span class="hl sym">/</span> dup <span class="hl num">0</span><span class="hl sym">=</span> <span class="hl kwa">if</span> flush then <span class="hl sym">;</span>

<span class="hl sym">:</span> mandel <span class="hl num">0</span>e <span class="hl num">0</span>e <span class="hl sym">{</span> F<span class="hl sym">:</span> Zi F<span class="hl sym">:</span> Zr <span class="hl sym">-- }</span>
  <span class="hl sym">.</span><span class="hl str">&quot; P4&quot;</span> cr NUM dup <span class="hl sym">.</span> <span class="hl num">1</span> u<span class="hl sym">.</span>r cr
  <span class="hl num">0</span> <span class="hl kwd">128</span>  <span class="hl sym">(</span> byte<span class="hl sym">-</span>accumulator bit<span class="hl sym">-</span>mask <span class="hl sym">)</span>
  NUM <span class="hl num">0</span> <span class="hl kwa">do</span>
    i <span class="hl num">2</span><span class="hl sym">*</span> s<span class="hl sym">&gt;</span>d d<span class="hl sym">&gt;</span>f FNUM f<span class="hl sym">/</span> <span class="hl num">1</span>e f<span class="hl sym">-</span> to Zi
    NUM <span class="hl num">0</span> <span class="hl kwa">do</span>
      i <span class="hl num">2</span><span class="hl sym">*</span> s<span class="hl sym">&gt;</span>d d<span class="hl sym">&gt;</span>f FNUM f<span class="hl sym">/</span> <span class="hl num">1.5</span>e f<span class="hl sym">-</span> to Zr
      Zr Zi <span class="hl num">51</span>
      begin  <span class="hl num">1</span><span class="hl sym">-</span> dup
      <span class="hl kwa">while</span>  fover fdup f<span class="hl sym">*</span> fover fdup f<span class="hl sym">*</span>
             fover fover f<span class="hl sym">+</span> <span class="hl num">4</span>e f<span class="hl sym">&lt;</span>
      <span class="hl kwa">while</span>  f<span class="hl sym">-</span> Zr f<span class="hl sym">+</span> frot frot f<span class="hl sym">*</span> <span class="hl num">2</span>e f<span class="hl sym">*</span> Zi f<span class="hl sym">+</span>
      repeat fdrop fdrop
      then <span class="hl num">0</span><span class="hl sym">=</span> write<span class="hl sym">-</span>bit fdrop fdrop
    loop ?flush
  loop <span class="hl num">2</span>drop <span class="hl sym">;</span>

\ run <span class="hl kwa">and</span> write PPM to stdout
mandel bye  \ done<span class="hl sym">!</span>
