<span class="hl slc">! The Computer Language Shootout</span>
<span class="hl slc">! http://shootout.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! contributed by Steve Decker, modified from the version by Simon Geard</span>
<span class="hl slc">! compilation:</span>
<span class="hl slc">!   g95 -O3 reverse.f90</span>
<span class="hl slc">!   ifort -ipo -O3 -static reverse.f90</span>

program revcomp
  implicit none

  character<span class="hl sym">,</span> parameter <span class="hl sym">::</span> EndStr <span class="hl sym">=</span> <span class="hl str">&quot;&gt;&quot;</span>
  integer<span class="hl sym">,</span>   parameter <span class="hl sym">::</span> LineWidth <span class="hl sym">=</span> <span class="hl num">60</span>

  character<span class="hl sym">(</span>len<span class="hl sym">=</span>LineWidth<span class="hl sym">),</span> dimension<span class="hl sym">(:),</span> allocatable <span class="hl sym">::</span> data<span class="hl sym">,</span> w
  logical                  <span class="hl sym">::</span> insection <span class="hl sym">=</span> .false.
  integer                  <span class="hl sym">::</span> stat<span class="hl sym">,</span> bcount
  character<span class="hl sym">(</span>len<span class="hl sym">=</span>LineWidth<span class="hl sym">) ::</span> line<span class="hl sym">,</span> title

  <span class="hl slc">! Read and process</span>
  allocate<span class="hl sym">(</span>data<span class="hl sym">(</span><span class="hl num">100</span><span class="hl sym">))</span>  <span class="hl slc">! Allocate enough lines so that we don't have to grow the array for the test</span>
  readFile<span class="hl sym">:</span> do
     read<span class="hl sym">(*,</span> <span class="hl str">&quot;(a)&quot;</span><span class="hl sym">,</span> iostat<span class="hl sym">=</span>stat<span class="hl sym">)</span> line
     if <span class="hl sym">(</span>stat <span class="hl sym">/=</span> <span class="hl num">0</span><span class="hl sym">)</span> exit readFile
     if <span class="hl sym">(</span>line<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span><span class="hl num">1</span><span class="hl sym">) ==</span> EndStr<span class="hl sym">)</span> then
        if <span class="hl sym">(</span>insection<span class="hl sym">)</span> then
           write<span class="hl sym">(*,</span> <span class="hl str">&quot;(a)&quot;</span><span class="hl sym">)</span> trim<span class="hl sym">(</span>title<span class="hl sym">)</span>
           call printReverseFasta
        else
           insection <span class="hl sym">=</span> .true.
        end if
        title <span class="hl sym">=</span> line
        bcount <span class="hl sym">=</span> <span class="hl num">0</span>
        cycle readFile
     end if
     bcount <span class="hl sym">=</span> bcount <span class="hl sym">+</span> <span class="hl num">1</span>
     if <span class="hl sym">(</span>bcount <span class="hl sym">&gt;</span> size<span class="hl sym">(</span>data<span class="hl sym">))</span> then <span class="hl slc">! Included for completeness - it shouldn't be called in the test</span>
        allocate<span class="hl sym">(</span>w<span class="hl sym">(</span>size<span class="hl sym">(</span>data<span class="hl sym">)))</span>
        w <span class="hl sym">=</span> data
        deallocate<span class="hl sym">(</span>data<span class="hl sym">)</span>
        allocate<span class="hl sym">(</span>data<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>size<span class="hl sym">(</span>w<span class="hl sym">)))</span>
        data<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">:</span>size<span class="hl sym">(</span>w<span class="hl sym">)) =</span> w
        deallocate<span class="hl sym">(</span>w<span class="hl sym">)</span>
     end if
     data<span class="hl sym">(</span>bcount<span class="hl sym">) =</span> line
  end do readFile

  write<span class="hl sym">(*,</span> <span class="hl str">&quot;(a)&quot;</span><span class="hl sym">)</span> trim<span class="hl sym">(</span>title<span class="hl sym">)</span>
  call printReverseFasta

contains

  subroutine printReverseFasta
    <span class="hl slc">! Output the data in reverse order and with the complement</span>
    character<span class="hl sym">,</span> dimension<span class="hl sym">(</span><span class="hl num">65</span><span class="hl sym">:</span><span class="hl num">121</span><span class="hl sym">),</span> parameter <span class="hl sym">::</span> Complement <span class="hl sym">= (/</span> <span class="hl str">&quot;T&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;G&quot;</span><span class="hl sym">, &amp;</span>
         <span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;E&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;F&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;C&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;I&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;J&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;L&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;O&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;P&quot;</span><span class="hl sym">,  &amp;</span>
         <span class="hl str">&quot;Q&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;A&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;A&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;X&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;R&quot;</span><span class="hl sym">, (</span><span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> stat <span class="hl sym">=</span> <span class="hl num">90</span><span class="hl sym">,</span> <span class="hl num">96</span><span class="hl sym">),  &amp;</span>
         <span class="hl str">&quot;T&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;G&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;E&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;F&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;C&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;I&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;J&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;L&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;K&quot;</span><span class="hl sym">,  &amp;</span>
         <span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;O&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;P&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Q&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;A&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;A&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;X&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;R&quot;</span> <span class="hl sym">/)</span>

    integer <span class="hl sym">::</span> fLine<span class="hl sym">,</span> fChar<span class="hl sym">,</span> bLine<span class="hl sym">,</span> bChar
    character <span class="hl sym">::</span> c

    fLine <span class="hl sym">=</span> <span class="hl num">1</span>
    fChar <span class="hl sym">=</span> <span class="hl num">1</span>
    bLine <span class="hl sym">=</span> bcount
    bChar <span class="hl sym">=</span> len_trim<span class="hl sym">(</span>data<span class="hl sym">(</span>bLine<span class="hl sym">))</span>
    do
       if <span class="hl sym">(</span>fLine <span class="hl sym">&gt;</span> bLine .or. fLine <span class="hl sym">==</span> bLine .and. fChar <span class="hl sym">&gt;=</span> bChar<span class="hl sym">)</span> exit
       c <span class="hl sym">=</span> data<span class="hl sym">(</span>fLine<span class="hl sym">)(</span>fChar<span class="hl sym">:</span>fChar<span class="hl sym">)</span>
       data<span class="hl sym">(</span>fLine<span class="hl sym">)(</span>fChar<span class="hl sym">:</span>fChar<span class="hl sym">) =</span> Complement<span class="hl sym">(</span>iachar<span class="hl sym">(</span>data<span class="hl sym">(</span>bLine<span class="hl sym">)(</span>bChar<span class="hl sym">:</span>bChar<span class="hl sym">)))</span>
       data<span class="hl sym">(</span>bLine<span class="hl sym">)(</span>bChar<span class="hl sym">:</span>bChar<span class="hl sym">) =</span> Complement<span class="hl sym">(</span>iachar<span class="hl sym">(</span>c<span class="hl sym">))</span>
       fChar <span class="hl sym">=</span> fChar <span class="hl sym">+</span> <span class="hl num">1</span>
       if <span class="hl sym">(</span>fChar <span class="hl sym">&gt;</span> LineWidth<span class="hl sym">)</span> then
          fChar <span class="hl sym">=</span> <span class="hl num">1</span>
          fLine <span class="hl sym">=</span> fLine <span class="hl sym">+</span> <span class="hl num">1</span>
       end if
       bChar <span class="hl sym">=</span> bChar <span class="hl sym">-</span> <span class="hl num">1</span>
       if <span class="hl sym">(</span>bChar <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> then
          bChar <span class="hl sym">=</span> LineWidth
          bLine <span class="hl sym">=</span> bLine <span class="hl sym">-</span> <span class="hl num">1</span>
       end if
    end do
    if <span class="hl sym">(</span>fLine <span class="hl sym">==</span> bLine .and. fChar <span class="hl sym">==</span> bChar<span class="hl sym">)  &amp;</span>
         data<span class="hl sym">(</span>fLine<span class="hl sym">)(</span>fChar<span class="hl sym">:</span>fChar<span class="hl sym">) =</span> Complement<span class="hl sym">(</span>iachar<span class="hl sym">(</span>data<span class="hl sym">(</span>fLine<span class="hl sym">)(</span>fChar<span class="hl sym">:</span>fChar<span class="hl sym">)))</span>
    do fLine <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> bcount<span class="hl sym">-</span><span class="hl num">1</span>
       write<span class="hl sym">(*,</span> <span class="hl str">&quot;(a)&quot;</span><span class="hl sym">)</span> data<span class="hl sym">(</span>fLine<span class="hl sym">)</span>
    end do
    write<span class="hl sym">(*,</span> <span class="hl str">&quot;(a)&quot;</span><span class="hl sym">)</span> trim<span class="hl sym">(</span>data<span class="hl sym">(</span>bcount<span class="hl sym">))</span>
  end subroutine printReverseFasta
end program revcomp
