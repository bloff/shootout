<span class="dir">#!/bin/env groovy</span>
<span class="com">/*</span>
<span class="com">	$Id: mandelbrot-groovy.code,v 1.2 2005-10-29 23:09:23 igouy-guest Exp $</span>
<span class="com"></span>
<span class="com">	The Great Computer Language Shootout</span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">	contributed by Jochen Hinrichsen</span>
<span class="com">*/</span>

<span class="kwb">double</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> Tr<span class="sym">,</span> Ti<span class="sym">,</span> Zr<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> Zi<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> limit_sq <span class="sym">=</span> <span class="num">4.0</span>
<span class="kwb">int</span> res<span class="sym">,</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> y<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> pos<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> acc<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> iter <span class="sym">=</span> <span class="num">50</span>
res <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">)</span> ? Integer<span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="num">10</span><span class="sym">) :</span> <span class="num">200</span>
<span class="kwb">int</span> max <span class="sym">= (</span>res <span class="sym">*</span> res<span class="sym">) &gt;&gt;&gt;</span> <span class="num">3</span>
def pbm_data <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span> max <span class="sym">]</span>
String pbm_header <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;P4&quot;</span> <span class="sym">+ ((</span><span class="kwb">char</span><span class="sym">)</span> <span class="num">012</span><span class="sym">) +</span> res <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> res <span class="sym">+ ((</span><span class="kwb">char</span><span class="sym">)</span> <span class="num">012</span><span class="sym">))</span>

System<span class="sym">.</span>out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>pbm_header<span class="sym">.</span><span class="kwd">getBytes</span><span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> pbm_header<span class="sym">.</span><span class="kwd">length</span><span class="sym">())</span>

<span class="slc">// for ( ; pos &lt; max; x%=res, Zr=Zi=i=0) {</span>
<span class="kwa">while</span> <span class="sym">(</span>pos <span class="sym">&lt;</span> max<span class="sym">) {</span>
	Cr <span class="sym">= (</span><span class="num">2</span><span class="sym">*((</span><span class="kwb">double</span><span class="sym">)</span>x<span class="sym">++)/</span>res <span class="sym">-</span> <span class="num">1.5</span><span class="sym">);</span>
	Ci<span class="sym">=(</span><span class="num">2</span><span class="sym">*((</span><span class="kwb">double</span><span class="sym">)</span>y<span class="sym">)/</span>res <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>

	<span class="slc">// for(acc&lt;&lt;=1; (acc&amp;1)==0 &amp;&amp; i++ &lt; iter; acc |= Zr*Zr+Zi*Zi &gt; limit_sq ? 1 : 0) {</span>
	acc<span class="sym">&lt;&lt;=</span><span class="num">1</span>
	<span class="kwa">while</span> <span class="sym">(((</span>acc<span class="sym">&amp;</span><span class="num">1</span><span class="sym">)==</span><span class="num">0</span><span class="sym">) &amp;&amp; (</span>i<span class="sym">++ &lt;</span> iter<span class="sym">)) {</span>
		Tr <span class="sym">=</span> Zr<span class="sym">*</span>Zr <span class="sym">-</span> Zi<span class="sym">*</span>Zi <span class="sym">+</span> Cr
		Ti <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci
		Zr <span class="sym">=</span> Tr
		Zi <span class="sym">=</span> Ti

		<span class="slc">// println &quot;Zr^2 + Zi^2 = ${Zr*Zr+Zi*Zi}&quot;</span>
		acc <span class="sym">|= (</span>Zr<span class="sym">*</span>Zr<span class="sym">+</span>Zi<span class="sym">*</span>Zi <span class="sym">&gt;</span> limit_sq<span class="sym">)</span> ? <span class="num">1</span> <span class="sym">:</span> <span class="num">0</span>
		<span class="slc">// println &quot;acc = ${acc}&quot;</span>
	<span class="sym">}</span>

	<span class="kwa">if</span> <span class="sym">(</span>x<span class="sym">==</span>res<span class="sym">) {</span>
		y<span class="sym">++</span>
		<span class="kwa">if</span> <span class="sym">(</span>acc<span class="sym">&lt;</span><span class="num">256</span><span class="sym">)</span> acc <span class="sym">&lt;&lt;= (</span><span class="num">8</span><span class="sym">-</span>res<span class="sym">%</span><span class="num">8</span><span class="sym">)</span>
	<span class="sym">}</span>
	<span class="kwa">if</span> <span class="sym">(</span>acc<span class="sym">&gt;</span><span class="num">255</span><span class="sym">) {</span>
		pbm_data <span class="sym">[</span> pos<span class="sym">++ ] = (</span>byte<span class="sym">) (</span>acc^<span class="sym">=</span><span class="num">255</span><span class="sym">)</span>
		acc <span class="sym">=</span> <span class="num">1</span>
	<span class="sym">}</span>

	x<span class="sym">%=</span>res
	Zr<span class="sym">=</span>Zi<span class="sym">=</span>i<span class="sym">=</span><span class="num">0</span>

	<span class="slc">// println &quot;acc = ${acc}&quot;</span>
	<span class="slc">// println &quot;pos = ${pos}&quot;</span>
	<span class="slc">// println &quot;--------------------------------------&quot;</span>
<span class="sym">}</span>

System<span class="sym">.</span>out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span> pbm_data<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> pos<span class="sym">);</span>

<span class="slc">// EOF</span>

