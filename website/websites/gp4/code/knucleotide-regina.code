<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Dennis Decker Jensen</span>
<span class="com">*/</span>

segment <span class="sym">=</span> <span class="str">&quot;&quot;</span>
<span class="kwa">do</span> until segment <span class="sym">=</span> <span class="str">&quot;&gt;THREE&quot;</span>
	parse upper linein <span class="sym">=</span><span class="num">1</span> segment <span class="sym">+</span><span class="num">6</span>
end

sequence <span class="sym">=</span> <span class="str">&quot;&quot;</span>
parse upper linein line
<span class="kwa">do while</span> line \= <span class="str">&quot;&quot;</span>
	<span class="kwa">if</span> <span class="kwd">verify</span><span class="sym">(</span>line<span class="sym">,</span> <span class="str">&quot;&gt;;&quot;</span><span class="sym">,</span> <span class="str">&quot;Match&quot;</span><span class="sym">)</span> then leave
	sequence <span class="sym">=</span> sequence <span class="sym">||</span> line
	parse upper linein line
end

call kfrequency sequence<span class="sym">,</span> <span class="num">1</span>
call kfrequency sequence<span class="sym">,</span> <span class="num">2</span>

say <span class="kwd">countdna</span><span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">,</span> sequence<span class="sym">)</span>
say <span class="kwd">countdna</span><span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">,</span> sequence<span class="sym">)</span>
say <span class="kwd">countdna</span><span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">,</span> sequence<span class="sym">)</span>
say <span class="kwd">countdna</span><span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">,</span> sequence<span class="sym">)</span>
say <span class="kwd">countdna</span><span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">,</span> sequence<span class="sym">)</span>

exit <span class="num">0</span>

countdna<span class="sym">:</span> procedure
parse arg nucleotide<span class="sym">,</span> sequence
<span class="kwa">return</span> <span class="kwd">countstr</span><span class="sym">(</span>nucleotide<span class="sym">,</span> sequence<span class="sym">) ||</span> <span class="kwd">d2c</span><span class="sym">(</span><span class="num">9</span><span class="sym">) ||</span> nucleotide

kfrequency<span class="sym">:</span> procedure
parse arg sequence<span class="sym">,</span> sublen <span class="sym">.</span>

len <span class="sym">=</span> <span class="kwd">length</span><span class="sym">(</span>sequence<span class="sym">) -</span> sublen
table<span class="sym">. =</span> <span class="num">0</span>
table<span class="sym">.</span>subs <span class="sym">=</span> <span class="str">&quot;&quot;</span>
<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> sublen
	<span class="kwa">do</span> j <span class="sym">=</span> i to len by sublen
		sub <span class="sym">=</span> <span class="kwd">substr</span><span class="sym">(</span>sequence<span class="sym">,</span> j<span class="sym">,</span> sublen<span class="sym">)</span>
		table<span class="sym">.</span>sub <span class="sym">=</span> table<span class="sym">.</span>sub <span class="sym">+</span> <span class="num">1</span>
		<span class="kwa">if</span> <span class="kwd">pos</span><span class="sym">(</span>sub<span class="sym">,</span> table<span class="sym">.</span>subs<span class="sym">) =</span> <span class="num">0</span> then
			table<span class="sym">.</span>subs <span class="sym">=</span> table<span class="sym">.</span>subs sub
	end
end
table<span class="num">.0</span> <span class="sym">=</span> <span class="kwd">words</span><span class="sym">(</span>table<span class="sym">.</span>subs<span class="sym">)</span>

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> table<span class="num">.0</span>
	sub <span class="sym">=</span> <span class="kwd">word</span><span class="sym">(</span>table<span class="sym">.</span>subs<span class="sym">,</span> i<span class="sym">)</span>
	seqs<span class="sym">.</span>i <span class="sym">=</span> sub
	counts<span class="sym">.</span>i <span class="sym">=</span> table<span class="sym">.</span>sub
end
call qsort <span class="num">1</span><span class="sym">,</span> table<span class="num">.0</span>

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> table<span class="num">.0</span>
	say seqs<span class="sym">.</span>i <span class="kwd">format</span><span class="sym">(</span>counts<span class="sym">.</span>i<span class="sym">*</span><span class="num">100</span><span class="sym">/</span>len<span class="sym">, ,</span> <span class="num">3</span><span class="sym">)</span>
end
say
<span class="kwa">return</span>

qsort<span class="sym">:</span> procedure expose seqs<span class="sym">.</span> counts<span class="sym">.</span>
arg l<span class="sym">,</span> r
<span class="kwa">if</span> r <span class="sym">-</span> l <span class="sym">&lt;=</span> <span class="num">1</span> then <span class="kwa">return</span>      <span class="com">/* nothing to do */</span>
i <span class="sym">=</span> <span class="kwd">random</span><span class="sym">(</span>l<span class="sym">,</span> r<span class="sym">)</span>               <span class="com">/* pick a random pivot */</span>
parse value seqs<span class="sym">.</span>l seqs<span class="sym">.</span>i with seqs<span class="sym">.</span>i seqs<span class="sym">.</span>l <span class="com">/* swap pivot to start */</span>
parse value counts<span class="sym">.</span>l counts<span class="sym">.</span>i with counts<span class="sym">.</span>i counts<span class="sym">.</span>l
last <span class="sym">=</span> l
<span class="kwa">do</span> i <span class="sym">=</span> l<span class="sym">+</span><span class="num">1</span> to r                <span class="com">/* partition */</span>
	<span class="kwa">if</span> counts<span class="sym">.</span>i <span class="sym">&gt;</span> counts<span class="sym">.</span>l <span class="sym">| ,</span>
	   counts<span class="sym">.</span>i <span class="sym">=</span> counts<span class="sym">.</span>l <span class="sym">&amp;</span> seqs<span class="sym">.</span>i <span class="sym">&lt;</span> seqs<span class="sym">.</span>l then <span class="kwa">do</span>
		last <span class="sym">=</span> last <span class="sym">+</span> <span class="num">1</span>
		parse value seqs<span class="sym">.</span>last seqs<span class="sym">.</span>i <span class="sym">,</span>
		       with seqs<span class="sym">.</span>i seqs<span class="sym">.</span>last
		parse value counts<span class="sym">.</span>last counts<span class="sym">.</span>i <span class="sym">,</span>
		       with counts<span class="sym">.</span>i counts<span class="sym">.</span>last
	end
end
parse value seqs<span class="sym">.</span>l seqs<span class="sym">.</span>last <span class="sym">,</span> <span class="com">/* restore pivot */</span>
       with seqs<span class="sym">.</span>last seqs<span class="sym">.</span>l
parse value counts<span class="sym">.</span>l counts<span class="sym">.</span>last <span class="sym">,</span>
       with counts<span class="sym">.</span>last counts<span class="sym">.</span>l
call qsort l<span class="sym">,</span> last             <span class="com">/* recurse */</span>
call qsort last<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> r
<span class="kwa">return</span>

