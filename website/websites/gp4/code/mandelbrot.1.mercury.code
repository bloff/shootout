<span class="hl slc">% The Computer Language Shootout Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">% Based on work by Anthony Borla</span>
<span class="hl slc">% Modified for Mercury by Glendon Holst</span>

<span class="hl sym">:-</span> module mandelbrot.
<span class="hl sym">:-</span> interface.
<span class="hl sym">:-</span> import_module io.

<span class="hl sym">:-</span> pred main<span class="hl sym">(</span>io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> implementation.

<span class="hl sym">:-</span> import_module list.
<span class="hl sym">:-</span> import_module bool.
<span class="hl sym">:-</span> import_module int.
<span class="hl sym">:-</span> import_module char.
<span class="hl sym">:-</span> import_module <span class="hl kwb">float</span>.
<span class="hl sym">:-</span> import_module string.

<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> type byte <span class="hl sym">==</span> int.

<span class="hl slc">% ----------------------------------------------------------------------</span>

main<span class="hl sym">(!</span>IO<span class="hl sym">) :-</span>
	io.command_line_arguments<span class="hl sym">(</span>Args<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
	<span class="hl sym">(</span>
		if
			Args <span class="hl sym">= [</span>AString<span class="hl sym">|</span>_<span class="hl sym">],</span>
			string.to_int<span class="hl sym">(</span>string.strip<span class="hl sym">(</span>AString<span class="hl sym">),</span> Aint<span class="hl sym">)</span>
		then
			N <span class="hl sym">=</span> Aint
		else
			N <span class="hl kwa">is</span> <span class="hl num">3000</span>
	<span class="hl sym">),</span>

  Width <span class="hl sym">=</span> N<span class="hl sym">,</span> Height <span class="hl sym">=</span> N<span class="hl sym">,</span>

  io.format<span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%i %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,[</span>i<span class="hl sym">(</span>Height<span class="hl sym">),</span> i<span class="hl sym">(</span>Width<span class="hl sym">)], !</span>IO<span class="hl sym">),</span>
  io.flush_output<span class="hl sym">(!</span>IO<span class="hl sym">),</span>
  pointsY<span class="hl sym">(</span>Height<span class="hl sym">,</span> Width<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> _<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> _<span class="hl sym">, !</span>IO <span class="hl sym">)</span>.

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred pointsY<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span>
	int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>out<span class="hl sym">,</span>
	byte<span class="hl sym">::</span>in<span class="hl sym">,</span> byte<span class="hl sym">::</span>out<span class="hl sym">,</span>
	io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

pointsY<span class="hl sym">(</span>Height<span class="hl sym">,</span> Width<span class="hl sym">,</span> Y<span class="hl sym">,</span> X<span class="hl sym">,</span> BitN0<span class="hl sym">,</span> BitN<span class="hl sym">,</span> ByteOut0<span class="hl sym">,</span> ByteOut<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	Y1 <span class="hl kwa">is</span> Y <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span>
	Height <span class="hl sym">&gt;=</span> Y1 <span class="hl sym">-&gt;</span>
	pointsX<span class="hl sym">(</span>Height<span class="hl sym">,</span> Width<span class="hl sym">,</span> Y<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> BitN0<span class="hl sym">,</span> BitN1<span class="hl sym">,</span> ByteOut0<span class="hl sym">,</span> ByteOut1<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
	pointsY<span class="hl sym">(</span>Height<span class="hl sym">,</span> Width<span class="hl sym">,</span> Y1<span class="hl sym">,</span> X<span class="hl sym">,</span> BitN1<span class="hl sym">,</span> BitN<span class="hl sym">,</span> ByteOut1<span class="hl sym">,</span> ByteOut<span class="hl sym">, !</span>IO<span class="hl sym">)</span>
<span class="hl sym">;</span>
	BitN <span class="hl sym">=</span> BitN0<span class="hl sym">,</span>
	ByteOut <span class="hl sym">=</span> ByteOut0
<span class="hl sym">)</span>.


<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred pointsX<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span>
	int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>out<span class="hl sym">,</span>
	byte<span class="hl sym">::</span>in<span class="hl sym">,</span> byte<span class="hl sym">::</span>out<span class="hl sym">,</span>
	io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

pointsX<span class="hl sym">(</span>Height<span class="hl sym">,</span> Width<span class="hl sym">,</span> Y<span class="hl sym">,</span> X<span class="hl sym">,</span> BitN0<span class="hl sym">,</span> BitN<span class="hl sym">,</span> ByteOut0<span class="hl sym">,</span> ByteOut<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	X1 <span class="hl kwa">is</span> X <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span>
	Width <span class="hl sym">&gt;=</span> X1 <span class="hl sym">-&gt;</span>

	<span class="hl sym">(</span>
		mandel<span class="hl sym">(</span>Height<span class="hl sym">,</span> Width<span class="hl sym">,</span> Y<span class="hl sym">,</span> X<span class="hl sym">,</span> <span class="hl num">50</span><span class="hl sym">) -&gt;</span>
		ByteOut1 <span class="hl kwa">is</span> <span class="hl sym">(</span>ByteOut0 <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">)</span>
	<span class="hl sym">;</span>
		ByteOut1 <span class="hl kwa">is</span> <span class="hl sym">(</span>ByteOut0 <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">)</span> \/ <span class="hl num">0x1</span>
	<span class="hl sym">),</span>

	BitN1 <span class="hl kwa">is</span> BitN0 <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span>

	<span class="hl sym">(</span>
		Width <span class="hl sym">=</span> X1<span class="hl sym">,</span>
		BitN1 \= <span class="hl num">8</span> <span class="hl sym">-&gt;</span>
		ByteOut2 <span class="hl kwa">is</span> ByteOut1 <span class="hl sym">&lt;&lt; (</span><span class="hl num">8</span> <span class="hl sym">-</span> Width <span class="hl kwa">mod</span> <span class="hl num">8</span><span class="hl sym">),</span>
		BitN2 <span class="hl sym">=</span> <span class="hl num">8</span>
	<span class="hl sym">;</span>
		ByteOut2 <span class="hl sym">=</span> ByteOut1<span class="hl sym">,</span>
		BitN2 <span class="hl sym">=</span> BitN1
	<span class="hl sym">),</span>

	<span class="hl sym">(</span>
		BitN2 <span class="hl sym">=</span> <span class="hl num">8</span> <span class="hl sym">-&gt;</span>
		io.write_byte<span class="hl sym">(</span>ByteOut2<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
		BitN3 <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span>
		ByteOut3 <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl sym">;</span>
		BitN3 <span class="hl sym">=</span> BitN2<span class="hl sym">,</span>
		ByteOut3 <span class="hl sym">=</span> ByteOut2
	<span class="hl sym">),</span>

	pointsX<span class="hl sym">(</span>Height<span class="hl sym">,</span> Width<span class="hl sym">,</span> Y<span class="hl sym">,</span> X1<span class="hl sym">,</span> BitN3<span class="hl sym">,</span> BitN<span class="hl sym">,</span> ByteOut3<span class="hl sym">,</span> ByteOut<span class="hl sym">, !</span>IO<span class="hl sym">)</span>

<span class="hl sym">;</span>
	BitN <span class="hl sym">=</span> BitN0<span class="hl sym">,</span>
	ByteOut <span class="hl sym">=</span> ByteOut0
<span class="hl sym">)</span>.

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred mandel<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">)</span> <span class="hl kwa">is</span> semidet.
<span class="hl sym">:-</span> pred mandel_<span class="hl sym">(</span><span class="hl kwb">float</span><span class="hl sym">::</span>in<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">::</span>in<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">::</span>in<span class="hl sym">,</span> <span class="hl kwb">float</span><span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">)</span> <span class="hl kwa">is</span> semidet.

mandel<span class="hl sym">(</span>Height<span class="hl sym">,</span> Width<span class="hl sym">,</span> Y<span class="hl sym">,</span> X<span class="hl sym">,</span> Repetitions<span class="hl sym">) :-</span>
	mandel_<span class="hl sym">((</span><span class="hl num">2.0</span> <span class="hl sym">*</span> <span class="hl kwb">float</span><span class="hl sym">(</span>X<span class="hl sym">) /</span> <span class="hl kwb">float</span><span class="hl sym">(</span>Width<span class="hl sym">) -</span> <span class="hl num">1.5</span><span class="hl sym">),</span>
		<span class="hl sym">(</span><span class="hl num">2.0</span> <span class="hl sym">*</span> <span class="hl kwb">float</span><span class="hl sym">(</span>Y<span class="hl sym">) /</span> <span class="hl kwb">float</span><span class="hl sym">(</span>Height<span class="hl sym">) -</span> <span class="hl num">1.0</span><span class="hl sym">),</span> <span class="hl num">0.0</span><span class="hl sym">,</span> <span class="hl num">0.0</span><span class="hl sym">,</span> Repetitions<span class="hl sym">)</span>.

mandel_<span class="hl sym">(</span>Cr<span class="hl sym">,</span> Ci<span class="hl sym">,</span> Zr<span class="hl sym">,</span> Zi<span class="hl sym">,</span> N<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	N <span class="hl sym">=&lt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
	<span class="hl sym">(</span>Zr <span class="hl sym">*</span> Zr <span class="hl sym">+</span> Zi <span class="hl sym">*</span> Zi<span class="hl sym">) &gt;</span> <span class="hl num">4.0</span>
<span class="hl sym">;</span>
	Zr1 <span class="hl kwa">is</span> Zr <span class="hl sym">*</span> Zr <span class="hl sym">-</span> Zi <span class="hl sym">*</span> Zi <span class="hl sym">+</span> Cr<span class="hl sym">,</span> Zi1 <span class="hl kwa">is</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> Zr <span class="hl sym">*</span> Zi <span class="hl sym">+</span> Ci<span class="hl sym">,</span>
	<span class="hl sym">(</span>Zr1 <span class="hl sym">*</span> Zr1 <span class="hl sym">+</span> Zi1 <span class="hl sym">*</span> Zi1<span class="hl sym">) =&lt;</span> <span class="hl num">4.0</span> <span class="hl sym">-&gt;</span>
	mandel_<span class="hl sym">(</span>Cr<span class="hl sym">,</span> Ci<span class="hl sym">,</span> Zr1<span class="hl sym">,</span> Zi1<span class="hl sym">,</span> N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
<span class="hl sym">;</span>
	<span class="hl kwa">true</span>
<span class="hl sym">)</span>.

<span class="hl slc">% ------------------------------- %</span>
