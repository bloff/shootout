<span class="hl com">(* regexdna.ml</span>
<span class="hl com"> *</span>
<span class="hl com"> * The Great Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Christophe TROESTLER</span>
<span class="hl com"> *)</span>

<span class="hl kwa">open</span> Printf

<span class="hl kwa">let</span> variants <span class="hl sym">= [</span><span class="hl str">&quot;agggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttaccct&quot;</span><span class="hl sym">;</span>          <span class="hl str">&quot;[cgt]gggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttaccc[acg]&quot;</span><span class="hl sym">;</span>
                <span class="hl str">&quot;a[act]ggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttacc[agt]t&quot;</span><span class="hl sym">;</span>  <span class="hl str">&quot;ag[act]gtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttac[agt]ct&quot;</span><span class="hl sym">;</span>
                <span class="hl str">&quot;agg[act]taaa</span><span class="hl esc">\\</span><span class="hl str">|ttta[agt]cct&quot;</span><span class="hl sym">;</span>  <span class="hl str">&quot;aggg[acg]aaa</span><span class="hl esc">\\</span><span class="hl str">|ttt[cgt]ccct&quot;</span><span class="hl sym">;</span>
                <span class="hl str">&quot;agggt[cgt]aa</span><span class="hl esc">\\</span><span class="hl str">|tt[acg]accct&quot;</span><span class="hl sym">;</span>  <span class="hl str">&quot;agggta[cgt]a</span><span class="hl esc">\\</span><span class="hl str">|t[acg]taccct&quot;</span><span class="hl sym">;</span>
                <span class="hl str">&quot;agggtaa[cgt]</span><span class="hl esc">\\</span><span class="hl str">|[acg]ttaccct&quot;</span><span class="hl sym">]</span>

<span class="hl com">(* Remove the &quot;\\&quot; which is mandatory in OCaml regex. *)</span>
<span class="hl kwa">let</span> re_bs <span class="hl sym">=</span> Str.regexp_string <span class="hl str">&quot;</span><span class="hl esc">\\</span><span class="hl str">&quot;</span>
<span class="hl kwa">let</span> to_string <span class="hl sym">=</span> Str.global_replace re_bs <span class="hl str">&quot;&quot;</span>

<span class="hl kwa">let</span> subst <span class="hl sym">= [</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">;</span>   <span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">;</span>
             <span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">;</span>   <span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">;</span>   <span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">;</span>
             <span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">;</span> <span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">;</span>     <span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">]</span>

<span class="hl com">(* Read all of a redirected FASTA format file from stdin. *)</span>
<span class="hl kwa">let</span> file_data<span class="hl sym">,</span> file_length <span class="hl sym">=</span>
  <span class="hl kwa">let</span> b <span class="hl sym">=</span> Buffer.create <span class="hl num">0xFFFF</span> <span class="hl kwa">and</span> s <span class="hl sym">=</span> String.create <span class="hl num">0xFFF</span> <span class="hl kwa">and</span> r <span class="hl sym">=</span> ref <span class="hl num">1</span> <span class="hl kwa">in</span>
  <span class="hl kwa">while</span> <span class="hl sym">!</span>r <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
    r <span class="hl sym">:=</span> input stdin s <span class="hl num">0 0xFFF</span><span class="hl sym">;</span>   Buffer.add_substring b s <span class="hl num">0</span> <span class="hl sym">!</span>r
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  Buffer.contents b<span class="hl sym">,</span> Buffer.length b

<span class="hl com">(* Remove FASTA sequence descriptions and all linefeed characters.  *)</span>
<span class="hl kwa">let</span> dna <span class="hl sym">=</span> Str.<span class="hl kwd">global_replace</span> <span class="hl sym">(</span>Str.regexp <span class="hl str">&quot;^&gt;.*$</span><span class="hl esc">\\</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;&quot;</span> file_data
<span class="hl kwa">let</span> code_length <span class="hl sym">=</span> String.length dna

<span class="hl com">(* Count matches of [re]. *)</span>
<span class="hl kwa">let</span> count re s <span class="hl sym">=</span>
  <span class="hl kwa">let</span> re <span class="hl sym">=</span> Str.regexp_case_fold re <span class="hl kwa">and</span> i <span class="hl sym">=</span> ref <span class="hl num">0</span> <span class="hl kwa">and</span> n <span class="hl sym">=</span> ref <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">try</span>
    <span class="hl kwa">while true do</span> i <span class="hl sym">:=</span> <span class="hl num">1</span> <span class="hl sym">+</span> Str.search_forward re s <span class="hl sym">!</span>i<span class="hl sym">;</span> incr n <span class="hl kwa">done</span><span class="hl sym">;</span> <span class="hl kwa">assert false</span>
  <span class="hl kwa">with</span> Not_found <span class="hl sym">-&gt; !</span>n


<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  List.<span class="hl kwd">iter</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> re <span class="hl sym">-&gt;</span> printf <span class="hl str">&quot;%s %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span>to_string re<span class="hl sym">) (</span>count re dna<span class="hl sym">))</span> variants<span class="hl sym">;</span>
  <span class="hl kwa">let</span> b <span class="hl sym">=</span> ref dna <span class="hl kwa">in</span>
  List.<span class="hl kwd">iter</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>re<span class="hl sym">,</span> s<span class="hl sym">) -&gt;</span>
               b <span class="hl sym">:=</span> Str.<span class="hl kwd">global_replace</span> <span class="hl sym">(</span>Str.regexp_case_fold re<span class="hl sym">)</span> s <span class="hl sym">!</span>b<span class="hl sym">)</span> subst<span class="hl sym">;</span>
  printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> file_length <span class="hl kwd">code_length</span> <span class="hl sym">(</span>String.length <span class="hl sym">!</span>b<span class="hl sym">)</span>
