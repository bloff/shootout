
<span class="sym">(</span>module revcomp mzscheme

  <span class="sym">(</span>define translation <span class="sym">(</span>make<span class="sym">-</span>vector <span class="num">128</span><span class="sym">))</span>

  <span class="sym">(</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>from<span class="sym">-</span>to<span class="sym">)</span>
	      <span class="sym">(</span>let <span class="sym">([</span>char <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>sym<span class="sym">)</span>
			    <span class="sym">(</span>string<span class="sym">-</span>ref <span class="sym">(</span>symbol<span class="sym">-&gt;</span>string sym<span class="sym">)</span> <span class="num">0</span><span class="sym">))])</span>
		<span class="sym">(</span>let <span class="sym">([</span>from <span class="sym">(</span>char <span class="sym">(</span><span class="kwa">car</span> from<span class="sym">-</span>to<span class="sym">))]</span>
		      <span class="sym">[</span>to <span class="sym">(</span>char<span class="sym">-&gt;</span>integer <span class="sym">(</span>char<span class="sym">-</span>upcase <span class="sym">(</span>char <span class="sym">(</span><span class="kwa">cadr</span> from<span class="sym">-</span>to<span class="sym">))))])</span>
		  <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> translation <span class="sym">(</span>char<span class="sym">-&gt;</span>integer from<span class="sym">)</span> to<span class="sym">)</span>
		  <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> translation <span class="sym">(</span>char<span class="sym">-&gt;</span>integer <span class="sym">(</span>char<span class="sym">-</span>upcase from<span class="sym">))</span> to<span class="sym">))))</span>
	    <span class="sym">'([</span>a t<span class="sym">]</span>
	      <span class="sym">[</span>c g<span class="sym">]</span>
	      <span class="sym">[</span>g c<span class="sym">]</span>
	      <span class="sym">[</span>t a<span class="sym">]</span>
	      <span class="sym">[</span>u a<span class="sym">]</span>
	      <span class="sym">[</span>m k<span class="sym">]</span>
	      <span class="sym">[</span>r y<span class="sym">]</span>
	      <span class="sym">[</span>w w<span class="sym">]</span>
	      <span class="sym">[</span>s s<span class="sym">]</span>
	      <span class="sym">[</span>y R<span class="sym">]</span>
	      <span class="sym">[</span>k M<span class="sym">]</span>
	      <span class="sym">[</span>v b<span class="sym">]</span>
	      <span class="sym">[</span>h d<span class="sym">]</span>
	      <span class="sym">[</span>d h<span class="sym">]</span>
	      <span class="sym">[</span>b v<span class="sym">]</span>
	      <span class="sym">[</span>n n<span class="sym">]))</span>

  <span class="sym">(</span>define <span class="sym">(</span>output lines<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ([</span>str <span class="sym">(</span><span class="kwa">apply</span> bytes<span class="sym">-</span><span class="kwa">append</span> lines<span class="sym">)]</span>
	   <span class="sym">[</span>o <span class="sym">(</span>current<span class="sym">-</span>output<span class="sym">-</span>port<span class="sym">)]</span>
	   <span class="sym">[</span>len <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">length</span> str<span class="sym">)])</span>
      <span class="sym">(</span>let loop <span class="sym">([</span>offset <span class="num">0</span><span class="sym">])</span>
	<span class="sym">(</span>when <span class="sym">(&lt;</span> offset len<span class="sym">)</span>
	  <span class="sym">(</span>write<span class="sym">-</span>bytes str o offset <span class="sym">(</span><span class="kwa">min</span> len <span class="sym">(+</span> offset <span class="num">60</span><span class="sym">)))</span>
	  <span class="sym">(</span>newline o<span class="sym">)</span>
	  <span class="sym">(</span>loop <span class="sym">(+</span> offset <span class="num">60</span><span class="sym">))))))</span>

  <span class="sym">(</span>let <span class="sym">([</span>in <span class="sym">(</span>current<span class="sym">-</span>input<span class="sym">-</span>port<span class="sym">)])</span>
    <span class="sym">(</span>let loop <span class="sym">([</span>accum <span class="kwa">null</span><span class="sym">])</span>
      <span class="sym">(</span>let <span class="sym">([</span>l <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>bytes<span class="sym">-</span><span class="kwa">line</span> in<span class="sym">)])</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>eof<span class="sym">-</span>object? l<span class="sym">)</span>
	    <span class="sym">(</span>output accum<span class="sym">)</span>
	    <span class="sym">(</span><span class="kwa">cond</span>
	     <span class="sym">[(</span>regexp<span class="sym">-</span>match #rx#<span class="str">&quot;^&gt;&quot;</span> l<span class="sym">)</span>
	      <span class="sym">(</span>output accum<span class="sym">)</span>
	      <span class="sym">(</span>printf <span class="str">&quot;~a</span><span class="esc">\n</span><span class="str">&quot;</span> l<span class="sym">)</span>
	      <span class="sym">(</span>loop <span class="kwa">null</span><span class="sym">)]</span>
	     <span class="sym">[</span>else
	      <span class="sym">(</span>let<span class="sym">* ([</span>len <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">length</span> l<span class="sym">)]</span>
		     <span class="sym">[</span>dest <span class="sym">(</span>make<span class="sym">-</span>bytes len<span class="sym">)]</span>
		     <span class="sym">[</span>len<span class="sym">-</span><span class="num">1</span> <span class="sym">(-</span> len <span class="num">1</span><span class="sym">)])</span>
		<span class="sym">(</span>let loop <span class="sym">([</span>i <span class="num">0</span><span class="sym">])</span>
		  <span class="sym">(</span>unless <span class="sym">(=</span> i len<span class="sym">)</span>
		    <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> dest
				<span class="sym">(-</span> len<span class="sym">-</span><span class="num">1</span> i<span class="sym">)</span>
				<span class="sym">(</span>vector<span class="sym">-</span>ref translation <span class="sym">(</span>bytes<span class="sym">-</span>ref l i<span class="sym">)))</span>
		    <span class="sym">(</span>loop <span class="sym">(</span>add1 i<span class="sym">))))</span>
		<span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">cons</span> dest accum<span class="sym">)))]))))))</span>

