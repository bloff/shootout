<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com"> contributed by Klaus Friedel</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">Exchanger</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>atomic<span class="hl sym">.</span><span class="hl kwc">AtomicInteger</span><span class="hl sym">;</span>

<span class="hl kwa">public class</span> chameneos <span class="hl sym">{</span>
  enum Colour <span class="hl sym">{</span>
    RED<span class="hl sym">,</span> BLUE<span class="hl sym">,</span> YELLOW<span class="hl sym">,</span> FADED<span class="hl sym">;</span>

    <span class="hl kwa">public</span> Colour <span class="hl kwd">complement</span><span class="hl sym">(</span>Colour other<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">this</span> <span class="hl sym">==</span> other<span class="hl sym">) {</span>
        <span class="hl kwa">return this</span><span class="hl sym">;</span>
      <span class="hl sym">}</span> <span class="hl kwa">else if</span> <span class="hl sym">(</span><span class="hl kwa">this</span> <span class="hl sym">==</span> Colour<span class="hl sym">.</span>BLUE<span class="hl sym">) {</span>
        <span class="hl kwa">return</span> other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>RED ? Colour<span class="hl sym">.</span>YELLOW <span class="hl sym">:</span> Colour<span class="hl sym">.</span>RED<span class="hl sym">;</span>
      <span class="hl sym">}</span> <span class="hl kwa">else if</span> <span class="hl sym">(</span><span class="hl kwa">this</span> <span class="hl sym">==</span> Colour<span class="hl sym">.</span>YELLOW<span class="hl sym">) {</span>
        <span class="hl kwa">return</span> other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>BLUE ? Colour<span class="hl sym">.</span>RED <span class="hl sym">:</span> Colour<span class="hl sym">.</span>BLUE<span class="hl sym">;</span>
      <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
        <span class="hl kwa">return</span> other <span class="hl sym">==</span> Colour<span class="hl sym">.</span>YELLOW ? Colour<span class="hl sym">.</span>BLUE <span class="hl sym">:</span> Colour<span class="hl sym">.</span>YELLOW<span class="hl sym">;</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">class</span> Creature <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>
    <span class="hl kwa">private</span> Colour colour<span class="hl sym">;</span>
    <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl kwa">public</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>Colour initialColour<span class="hl sym">) {</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>colour <span class="hl sym">=</span> initialColour<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
      <span class="hl kwa">try</span> <span class="hl sym">{</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
          Colour other <span class="hl sym">=</span> mp<span class="hl sym">.</span><span class="hl kwd">meet</span><span class="hl sym">(</span>colour<span class="hl sym">);</span>
          colour <span class="hl sym">=</span> colour<span class="hl sym">.</span><span class="hl kwd">complement</span><span class="hl sym">(</span>other<span class="hl sym">);</span>
          count<span class="hl sym">++;</span>
        <span class="hl sym">}</span>
      <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> e<span class="hl sym">) {</span>
        colour <span class="hl sym">=</span> Colour<span class="hl sym">.</span>FADED<span class="hl sym">;</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">static class</span> MeetingPlace <span class="hl sym">{</span>
    <span class="hl kwa">final</span> <span class="hl kwc">Exchanger</span><span class="hl sym">&lt;</span>Colour<span class="hl sym">&gt;</span> exchanger <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Exchanger</span><span class="hl sym">&lt;</span>Colour<span class="hl sym">&gt;();</span>
    <span class="hl kwa">final</span> <span class="hl kwc">AtomicInteger</span> meetingsLeft<span class="hl sym">;</span>

    <span class="hl kwa">public</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span><span class="hl kwb">int</span> meetings<span class="hl sym">) {</span>
      <span class="hl kwa">this</span><span class="hl sym">.</span>meetingsLeft <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicInteger</span><span class="hl sym">(</span>meetings<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public</span> Colour <span class="hl kwd">meet</span><span class="hl sym">(</span>Colour myColor<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">InterruptedException</span> <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>meetingsLeft<span class="hl sym">.</span><span class="hl kwd">decrementAndGet</span><span class="hl sym">() &lt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">throw new</span> <span class="hl kwc">InterruptedException</span><span class="hl sym">();</span>
      <span class="hl kwa">return</span> exchanger<span class="hl sym">.</span><span class="hl kwd">exchange</span><span class="hl sym">(</span>myColor<span class="hl sym">);</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">final</span> MeetingPlace mp<span class="hl sym">;</span>
  <span class="hl kwa">final</span> Creature<span class="hl sym">[]</span> creatures<span class="hl sym">;</span>

  <span class="hl kwa">public</span> <span class="hl kwd">chameneos</span><span class="hl sym">(</span><span class="hl kwb">int</span> meetings<span class="hl sym">) {</span>
    <span class="hl kwa">this</span><span class="hl sym">.</span>mp <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span>meetings<span class="hl sym">);</span>
    <span class="hl kwa">this</span><span class="hl sym">.</span>creatures <span class="hl sym">=</span> <span class="hl kwa">new</span> Creature<span class="hl sym">[]{</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>BLUE<span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>RED<span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>YELLOW<span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>BLUE<span class="hl sym">)</span>
    <span class="hl sym">};</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">()</span> <span class="hl kwa">throws</span> <span class="hl kwc">InterruptedException</span> <span class="hl sym">{</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>Creature creature <span class="hl sym">:</span> creatures<span class="hl sym">) {</span>
      creature<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>
    <span class="hl kwb">int</span> meetings <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>Creature creature <span class="hl sym">:</span> creatures<span class="hl sym">) {</span>
      creature<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">();</span>
      meetings <span class="hl sym">+=</span> creature<span class="hl sym">.</span>count<span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>meetings<span class="hl sym">);</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
    <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">5000000</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;=</span> <span class="hl num">1</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
    chameneos cham <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">chameneos</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
    cham<span class="hl sym">.</span><span class="hl kwd">run</span><span class="hl sym">();</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
