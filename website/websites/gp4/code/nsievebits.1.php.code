<span class="sym">&lt;</span>?php

<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Michael Hansen</span>
<span class="com">*/</span>

<span class="kwa">define</span><span class="sym">(</span>BPC<span class="sym">,</span> <span class="num">32</span><span class="sym">);</span>
<span class="kwa">define</span><span class="sym">(</span>FLAG_MAX<span class="sym">,</span> <span class="num">0xFFFFFFFF</span><span class="sym">);</span>

<span class="kwa">function</span> primes<span class="sym">(</span><span class="kwb">$n</span><span class="sym">) {</span>
    <span class="kwb">$size</span> <span class="sym">=</span> <span class="num">10000</span> <span class="sym">*</span> <span class="kwa">pow</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">);</span>
    <span class="kwb">$flags</span> <span class="sym">=</span> <span class="kwa">array</span><span class="sym">();</span>
    <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;(</span><span class="kwb">$size</span><span class="sym">/</span>BPC <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span> <span class="kwb">$i</span><span class="sym">++)</span>
        <span class="kwb">$flags</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">] =</span> FLAG_MAX<span class="sym">;</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">$prime</span><span class="sym">=</span><span class="num">2</span><span class="sym">;</span> <span class="kwb">$prime</span><span class="sym">&lt;</span><span class="kwb">$size</span><span class="sym">;</span> <span class="kwb">$prime</span><span class="sym">++) {</span>
        <span class="kwb">$offset</span> <span class="sym">=</span> <span class="kwb">$prime</span> <span class="sym">/</span> BPC<span class="sym">;</span>
        <span class="kwb">$mask</span> <span class="sym">=</span> <span class="kwa">pow</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="kwb">$prime</span> % BPC<span class="sym">);</span>
        <span class="kwa">if</span> <span class="sym">((</span><span class="kwb">$flags</span><span class="sym">[</span><span class="kwb">$offset</span><span class="sym">] &amp;</span> <span class="kwb">$mask</span><span class="sym">) !=</span> <span class="num">0</span><span class="sym">) {</span>
            <span class="kwb">$count</span><span class="sym">++;</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=(</span><span class="kwb">$prime</span><span class="sym">*</span><span class="num">2</span><span class="sym">);</span> <span class="kwb">$i</span><span class="sym">&lt;=</span><span class="kwb">$size</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">+=</span> <span class="kwb">$prime</span><span class="sym">) {</span>
                <span class="kwb">$offset</span> <span class="sym">=</span> <span class="kwb">$i</span> <span class="sym">/</span> BPC<span class="sym">;</span>
                <span class="kwb">$mask</span> <span class="sym">=</span> <span class="kwa">pow</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="kwb">$i</span> % BPC<span class="sym">);</span>
                <span class="kwa">if</span> <span class="sym">((</span><span class="kwb">$flags</span><span class="sym">[</span><span class="kwb">$offset</span><span class="sym">] &amp;</span> <span class="kwb">$mask</span><span class="sym">) !=</span> <span class="num">0</span><span class="sym">)</span>
                    <span class="kwb">$flags</span><span class="sym">[</span><span class="kwb">$offset</span><span class="sym">]</span> ^<span class="sym">=</span> <span class="kwb">$mask</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$size</span><span class="sym">,</span> <span class="kwb">$count</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">$n</span> <span class="sym">= (</span><span class="kwb">$argv</span><span class="sym">[</span><span class="num">1</span><span class="sym">] !=</span> <span class="str">''</span><span class="sym">)</span> ? <span class="kwb">$argv</span><span class="sym">[</span><span class="num">1</span><span class="sym">] :</span> <span class="num">1</span><span class="sym">;</span>
<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;</span><span class="num">3</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++)</span> primes<span class="sym">(</span><span class="kwb">$n</span><span class="sym">-</span><span class="kwb">$i</span><span class="sym">);</span>

?<span class="sym">&gt;</span>
