<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy&quot;!</span>
<span class="com"></span>
<span class="com">!Shootout.Tests class methodsFor: 'benchmarking'!</span>
<span class="com"></span>
<span class="com">knucleotide</span>
<span class="com">   | stdin sequence writeFrequencies writeCount |</span>
<span class="com">   stdin := ExternalReadStream on:</span>
<span class="com">      (ExternalConnection ioAccessor: (UnixDiskFileAccessor new handle: 0)).</span>
<span class="com">   sequence := (stdin readFasta: 'THREE') value asUppercase.</span>
<span class="com"></span>
<span class="com">   writeFrequencies := [:k | | frequencies count |</span>
<span class="com">      frequencies := SortedCollection sortBlock: [:a :b|</span>
<span class="com">         (a value = b value) ifTrue: [b key &lt; a key] ifFalse: [b value &lt; a value]].</span>
<span class="com"></span>
<span class="com">      count := 0.0.</span>
<span class="com">      (sequence substringFrequencies: k)</span>
<span class="com">         associationsDo: [:each| frequencies add: each. count := count + each value].</span>
<span class="com"></span>
<span class="com">      frequencies do: [:each | | percentage |</span>
<span class="com">         percentage := (each value / count) * 100.0.</span>
<span class="com">         OS.Stdout nextPutAll: each key; nextPutAll: ' ';</span>
<span class="com">            nextPutAll: (percentage asStringWith: 3); cr.</span>
<span class="com">         ].</span>
<span class="com">   ].</span>
<span class="com"></span>
<span class="com">   writeCount := [:nucleotideFragment | | frequencies count |</span>
<span class="com">      frequencies := sequence substringFrequencies: nucleotideFragment size.</span>
<span class="com">      count := frequencies at: nucleotideFragment ifAbsent: [0].</span>
<span class="com">      OS.Stdout nextPutAll: count printString; nextPut: Character tab;</span>
<span class="com">         nextPutAll: nucleotideFragment; cr</span>
<span class="com">   ].</span>
<span class="com"></span>
<span class="com">   writeFrequencies value: 1. OS.Stdout cr.</span>
<span class="com">   writeFrequencies value: 2. OS.Stdout cr.</span>
<span class="com"></span>
<span class="com">   writeCount value: 'GGT'.</span>
<span class="com">   writeCount value: 'GGTA'.</span>
<span class="com">   writeCount value: 'GGTATT'.</span>
<span class="com">   writeCount value: 'GGTATTTTAATT'.</span>
<span class="com">   writeCount value: 'GGTATTTTAATTTATAGT'.</span>
<span class="com">   ^'' ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!String methodsFor: 'computer language shootout'!</span>
<span class="com"></span>
<span class="com">substringFrequencies: aLength</span>
<span class="com">   | answer |</span>
<span class="com">   answer := Dictionary new.</span>
<span class="com">   1 to: aLength do: [:i |</span>
<span class="com">      self inject1: answer intoSubstringFrequencies: aLength offset: i].</span>
<span class="com">   ^answer !</span>
<span class="com"></span>
<span class="com">inject: aDictionary intoSubstringFrequencies: aLength offset: anInteger</span>
<span class="com">   anInteger to: self size - aLength + 1 by: aLength do: [:i |</span>
<span class="com">      | fragment assoc |</span>
<span class="com">      fragment := self copyFrom: i to: i + aLength - 1.</span>
<span class="com"></span>
<span class="com">      (assoc := aDictionary associationAt: fragment ifAbsent: []) isNil</span>
<span class="com">         ifTrue: [aDictionary at: fragment put: 1]</span>
<span class="com">         ifFalse: [assoc value: (assoc value + 1)] ] ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!ExternalReadStream methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">readFasta: anId</span>
<span class="com">   | idString newline buffer description line char |</span>
<span class="com">   idString := '&gt;',anId.</span>
<span class="com">   newline := Character cr.</span>
<span class="com"></span>
<span class="com">   &quot;find start of particular fasta sequence&quot;</span>
<span class="com">   [(self atEnd) or: [</span>
<span class="com">         (self peek = $&gt;)</span>
<span class="com">            ifTrue: [((line := self upTo: newline)</span>
<span class="com">               indexOfSubCollection: idString startingAt: 1) = 1]</span>
<span class="com">            ifFalse: [self skipThrough: newline. false]]</span>
<span class="com">      ] whileFalse.</span>
<span class="com"></span>
<span class="com">   &quot;line-by-line read - it would be a lot faster to block read&quot;</span>
<span class="com">   description := line.</span>
<span class="com">   buffer := ReadWriteStream on: (String new: 1028).</span>
<span class="com">   [(self atEnd) or: [(char := self peek) = $&gt;]] whileFalse: [</span>
<span class="com">      (char = $;)</span>
<span class="com">         ifTrue: [self upTo: newline]</span>
<span class="com">         ifFalse: [buffer nextPutAll: (self upTo: newline)]</span>
<span class="com">      ].</span>
<span class="com">   ^Association key: description value: buffer contents ! !</span>
