<span class="str">&quot;  The Computer Language Shootout</span>
<span class="str">   http://shootout.alioth.debian.org/</span>
<span class="str">   contributed by Isaac Gouy&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Shootout.Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

knucleotide
   <span class="sym">|</span> stdin sequence writeFrequencies writeCount <span class="sym">|</span>
   stdin <span class="sym">:=</span> ExternalReadStream on<span class="sym">:</span>
      <span class="sym">(</span>ExternalConnection ioAccessor<span class="sym">: (</span>UnixDiskFileAccessor new handle<span class="sym">:</span> <span class="num">0</span><span class="sym">))</span>.
   sequence <span class="sym">:= (</span>stdin readFasta<span class="sym">:</span> <span class="str">'THREE'</span><span class="sym">)</span> value asUppercase.

   writeFrequencies <span class="sym">:= [:</span>k <span class="sym">| |</span> frequencies count <span class="sym">|</span>
      frequencies <span class="sym">:=</span> SortedCollection sortBlock<span class="sym">: [:</span>a <span class="sym">:</span>b<span class="sym">|</span>
         <span class="sym">(</span>a value <span class="sym">=</span> b value<span class="sym">)</span> ifTrue<span class="sym">: [</span>b key <span class="sym">&lt;</span> a key<span class="sym">]</span> ifFalse<span class="sym">: [</span>b value <span class="sym">&lt;</span> a value<span class="sym">]]</span>.

      count <span class="sym">:=</span> <span class="num">0.0</span>.
      <span class="sym">(</span>sequence substringFrequencies<span class="sym">:</span> k<span class="sym">)</span>
         associationsDo<span class="sym">: [:</span>each<span class="sym">|</span> frequencies add<span class="sym">:</span> each. count <span class="sym">:=</span> count <span class="sym">+</span> each value<span class="sym">]</span>.

      frequencies <span class="kwa">do</span><span class="sym">: [:</span>each <span class="sym">| |</span> percentage <span class="sym">|</span>
         percentage <span class="sym">:= (</span>each value <span class="sym">/</span> count<span class="sym">) *</span> <span class="num">100.0</span>.
         OS.Stdout nextPutAll<span class="sym">:</span> each key<span class="sym">;</span> nextPutAll<span class="sym">:</span> <span class="str">' '</span><span class="sym">;</span>
            nextPutAll<span class="sym">: (</span>percentage asStringWith<span class="sym">:</span> <span class="num">3</span><span class="sym">);</span> cr.
         <span class="sym">]</span>.
   <span class="sym">]</span>.

   writeCount <span class="sym">:= [:</span>nucleotideFragment <span class="sym">| |</span> frequencies count <span class="sym">|</span>
      frequencies <span class="sym">:=</span> sequence substringFrequencies<span class="sym">:</span> nucleotideFragment size.
      count <span class="sym">:=</span> frequencies at<span class="sym">:</span> nucleotideFragment ifAbsent<span class="sym">: [</span><span class="num">0</span><span class="sym">]</span>.
      OS.Stdout nextPutAll<span class="sym">:</span> count printString<span class="sym">;</span> nextPut<span class="sym">:</span> Character tab<span class="sym">;</span>
         nextPutAll<span class="sym">:</span> nucleotideFragment<span class="sym">;</span> cr
   <span class="sym">]</span>.

   writeFrequencies value<span class="sym">:</span> <span class="num">1</span>. OS.Stdout cr.
   writeFrequencies value<span class="sym">:</span> <span class="num">2</span>. OS.Stdout cr.

   writeCount value<span class="sym">:</span> <span class="str">'GGT'</span>.
   writeCount value<span class="sym">:</span> <span class="str">'GGTA'</span>.
   writeCount value<span class="sym">:</span> <span class="str">'GGTATT'</span>.
   writeCount value<span class="sym">:</span> <span class="str">'GGTATTTTAATT'</span>.
   writeCount value<span class="sym">:</span> <span class="str">'GGTATTTTAATTTATAGT'</span>.
   ^<span class="str">''</span> <span class="sym">! !</span>


<span class="sym">!</span>String methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

substringFrequencies<span class="sym">:</span> aLength
   <span class="sym">|</span> answer <span class="sym">|</span>
   answer <span class="sym">:=</span> Dictionary new.
   <span class="num">1</span> to<span class="sym">:</span> aLength <span class="kwa">do</span><span class="sym">: [:</span>i <span class="sym">|</span>
      self inject1<span class="sym">:</span> answer intoSubstringFrequencies<span class="sym">:</span> aLength offset<span class="sym">:</span> i<span class="sym">]</span>.
   ^answer <span class="sym">!</span>

inject<span class="sym">:</span> aDictionary intoSubstringFrequencies<span class="sym">:</span> aLength offset<span class="sym">:</span> anInteger
   anInteger to<span class="sym">:</span> self size <span class="sym">-</span> aLength <span class="sym">+</span> <span class="num">1</span> by<span class="sym">:</span> aLength <span class="kwa">do</span><span class="sym">: [:</span>i <span class="sym">|</span>
      <span class="sym">|</span> fragment assoc <span class="sym">|</span>
      fragment <span class="sym">:=</span> self copyFrom<span class="sym">:</span> i to<span class="sym">:</span> i <span class="sym">+</span> aLength <span class="sym">-</span> <span class="num">1</span>.

      <span class="sym">(</span>assoc <span class="sym">:=</span> aDictionary associationAt<span class="sym">:</span> fragment ifAbsent<span class="sym">: [])</span> isNil
         ifTrue<span class="sym">: [</span>aDictionary at<span class="sym">:</span> fragment put<span class="sym">:</span> <span class="num">1</span><span class="sym">]</span>
         ifFalse<span class="sym">: [</span>assoc value<span class="sym">: (</span>assoc value <span class="sym">+</span> <span class="num">1</span><span class="sym">)] ] ! !</span>


<span class="sym">!</span>ExternalReadStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

readFasta<span class="sym">:</span> anId
   <span class="sym">|</span> idString newline buffer description line char <span class="sym">|</span>
   idString <span class="sym">:=</span> <span class="str">'&gt;'</span><span class="sym">,</span>anId.
   newline <span class="sym">:=</span> Character cr.

   <span class="str">&quot;find start of particular fasta sequence&quot;</span>
   <span class="sym">[(</span>self atEnd<span class="sym">)</span> <span class="kwa">or</span><span class="sym">: [</span>
         <span class="sym">(</span>self peek <span class="sym">= $&gt;)</span>
            ifTrue<span class="sym">: [((</span>line <span class="sym">:=</span> self upTo<span class="sym">:</span> newline<span class="sym">)</span>
               indexOfSubCollection<span class="sym">:</span> idString startingAt<span class="sym">:</span> <span class="num">1</span><span class="sym">) =</span> <span class="num">1</span><span class="sym">]</span>
            ifFalse<span class="sym">: [</span>self skipThrough<span class="sym">:</span> newline. false<span class="sym">]]</span>
      <span class="sym">]</span> whileFalse.

   <span class="str">&quot;line-by-line read - it would be a lot faster to block read&quot;</span>
   description <span class="sym">:=</span> line.
   buffer <span class="sym">:=</span> ReadWriteStream on<span class="sym">: (</span>String new<span class="sym">:</span> <span class="num">1028</span><span class="sym">)</span>.
   <span class="sym">[(</span>self atEnd<span class="sym">)</span> <span class="kwa">or</span><span class="sym">: [(</span>char <span class="sym">:=</span> self peek<span class="sym">) = $&gt;]]</span> whileFalse<span class="sym">: [</span>
      <span class="sym">(</span>char <span class="sym">= $;)</span>
         ifTrue<span class="sym">: [</span>self upTo<span class="sym">:</span> newline<span class="sym">]</span>
         ifFalse<span class="sym">: [</span>buffer nextPutAll<span class="sym">: (</span>self upTo<span class="sym">:</span> newline<span class="sym">)]</span>
      <span class="sym">]</span>.
   ^Association key<span class="sym">:</span> description value<span class="sym">:</span> buffer contents <span class="sym">! !</span>
