<span class="hl com">{-# OPTIONS -O3 #-}</span>
<span class="hl com">{-</span>
<span class="hl com">	The Computer Language Benchmarks Game</span>
<span class="hl com">   	http://shootout.alioth.debian.org/</span>
<span class="hl com">   	contributed by Bertram Felgenhauer</span>
<span class="hl com">-}</span>

<span class="hl kwa">import</span> Data.Word
<span class="hl kwa">import</span> Data.Array
<span class="hl kwa">import</span> Data.Bits
<span class="hl kwa">import</span> System

pieces <span class="hl sym">= [</span>
    <span class="hl sym">[(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">)],</span>
    <span class="hl sym">[(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)],</span>
    <span class="hl sym">[(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)],</span>
    <span class="hl sym">[(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)],</span>
    <span class="hl sym">[(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)],</span>
    <span class="hl sym">[(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">)],</span>
    <span class="hl sym">[(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)],</span>
    <span class="hl sym">[(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">)],</span>
    <span class="hl sym">[(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">)],</span>
    <span class="hl sym">[(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">),(</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">)]]</span>

transform p <span class="hl sym">=</span>
    <span class="hl sym">[</span> map <span class="hl sym">(</span>\<span class="hl sym">(</span>y<span class="hl sym">,</span>x<span class="hl sym">) -&gt; (</span>y<span class="hl sym">-</span>dy<span class="hl sym">,</span>x<span class="hl sym">-</span>dx<span class="hl sym">))</span> p<span class="hl str">''</span>
    <span class="hl sym">|</span> p<span class="hl str">' &lt;- take 6 (iterate (map (\(y,x) -&gt; (x+y,-y))) p),</span>
<span class="hl str">      p'</span><span class="hl str">' &lt;- take 2 (iterate (map (\(y,x) -&gt; (x,y))) p'</span><span class="hl sym">),</span>
      <span class="hl kwa">let</span> <span class="hl sym">(</span>dy<span class="hl sym">,</span>dx<span class="hl sym">) =</span> minimum p<span class="hl str">''</span><span class="hl sym">]</span>

pieceMasks <span class="hl sym">=</span> listArray <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">9</span><span class="hl sym">) (</span>map <span class="hl sym">(</span>pieceMasks<span class="hl str">' . transform) pieces) where</span>
<span class="hl str">    pieceMasks'</span> ps <span class="hl sym">=</span> listArray <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">9</span><span class="hl sym">) [</span>pieceMasks<span class="hl str">''</span> ps <span class="hl sym">(</span>y<span class="hl sym">,</span>x<span class="hl sym">) |</span> y <span class="hl sym">&lt;- [</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">],</span> x <span class="hl sym">&lt;- [</span><span class="hl num">0</span>.<span class="hl num">.4</span><span class="hl sym">]]</span>
    pieceMasks<span class="hl str">''</span> ps pos <span class="hl sym">= [</span>m <span class="hl sym">|</span> p <span class="hl sym">&lt;-</span> ps<span class="hl sym">,</span> m <span class="hl sym">&lt;-</span> mask <span class="hl num">0</span> pos p<span class="hl sym">]</span>
    mask m <span class="hl sym">(</span>dy<span class="hl sym">,</span>dx<span class="hl sym">) [] = [</span>m<span class="hl sym">]</span>
    mask m <span class="hl sym">(</span>dy<span class="hl sym">,</span>dx<span class="hl sym">) ((</span>y<span class="hl sym">,</span>x<span class="hl sym">):</span>ps<span class="hl sym">)</span>
        <span class="hl sym">|</span> x<span class="hl str">' &lt; 0 || x'</span> <span class="hl sym">&gt;</span> <span class="hl num">4</span> <span class="hl sym">= []</span>
        <span class="hl sym">|</span> <span class="hl kwa">True</span> <span class="hl sym">=</span> mask <span class="hl sym">(</span>m .<span class="hl sym">|</span>. shiftL <span class="hl num">1</span> <span class="hl sym">((</span>dy<span class="hl sym">+</span>y<span class="hl sym">)*</span><span class="hl num">5</span><span class="hl sym">+</span>x<span class="hl str">')) (dy,dx) ps</span>
<span class="hl str">        where x'</span> <span class="hl sym">=</span> x <span class="hl sym">+</span> dx <span class="hl sym">+</span> div <span class="hl sym">(</span>y<span class="hl sym">+</span>dy<span class="hl sym">)</span> <span class="hl num">2</span>

search m <span class="hl num">50</span> p ps <span class="hl sym">= [</span>ps<span class="hl sym">]</span>
search m i p ps <span class="hl sym">| (</span>m .<span class="hl sym">&amp;</span>. shiftL <span class="hl num">1</span> i<span class="hl sym">) &gt;</span> <span class="hl num">0</span> <span class="hl sym">=</span> search m <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> p ps
search m i p ps <span class="hl sym">=</span> <span class="hl kwa">let</span> <span class="hl sym">(</span>q<span class="hl sym">,</span>r<span class="hl sym">) =</span> divMod i <span class="hl num">10</span> <span class="hl kwa">in</span>
    <span class="hl sym">[</span> ps<span class="hl str">'</span>
<span class="hl str">    | p'</span> <span class="hl sym">&lt;- [</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">],</span> p .<span class="hl sym">&amp;</span>. shiftL <span class="hl num">1</span> p<span class="hl str">' == 0,</span>
<span class="hl str">      mask &lt;- pieceMasks ! p'</span> <span class="hl sym">!</span> r<span class="hl sym">,</span>
      <span class="hl kwa">let</span> mask<span class="hl str">' = shiftL mask (10*q),</span>
<span class="hl str">      m .&amp;. mask'</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">,</span>
      ps<span class="hl str">' &lt;- search (m .|. mask'</span><span class="hl sym">) (</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>p .<span class="hl sym">|</span>. shiftL <span class="hl num">1</span> p<span class="hl str">') ((p'</span><span class="hl sym">,</span>mask<span class="hl str">'):ps)]</span>
<span class="hl str"></span>
<span class="hl str">rows ps = [[i | x &lt;- [0..4], (i,m) &lt;- ps, shiftL 1 (y*5+x) .&amp;. m /= 0] | y &lt;- [0..9]]</span>
<span class="hl str"></span>
<span class="hl str">main = do</span>
<span class="hl str">    n &lt;- readIO . head =&lt;&lt; getArgs</span>
<span class="hl str">    let sols = map rows (take n (search (-shiftL 1 50 :: Word64) 0 (0 :: Word) []))</span>
<span class="hl str">    putStrLn (show (length sols) ++ &quot; solutions found\n&quot;)</span>
<span class="hl str">    mapM (putStrLn . unlines . (zipWith (++) (cycle [&quot;&quot;,&quot; &quot;]))</span>
<span class="hl str">         . map ((++ &quot; &quot;) . unwords . map show)) [minimum sols,maximum sols]</span>
