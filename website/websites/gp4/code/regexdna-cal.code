<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
module Regexdna<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude using
    typeClass <span class="hl sym">=</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">;</span>
    typeConstructor <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">,</span> <span class="hl kwc">Boolean</span><span class="hl sym">,</span> JObject<span class="hl sym">,</span> Int<span class="hl sym">;</span>
    function <span class="hl sym">=</span>
        eager<span class="hl sym">,</span> stringToInt<span class="hl sym">,</span> add<span class="hl sym">,</span> not<span class="hl sym">,</span> seq<span class="hl sym">,</span> input<span class="hl sym">,</span> fromInt<span class="hl sym">,</span> snd<span class="hl sym">,</span> fst<span class="hl sym">,</span>
        induceComparator<span class="hl sym">,</span> combineComparators<span class="hl sym">,</span> reverseComparator<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Debug using
    typeClass <span class="hl sym">=</span> Show<span class="hl sym">;</span>
    function <span class="hl sym">=</span> show<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span><span class="hl kwc">String</span> using
    function <span class="hl sym">=</span>
        length<span class="hl sym">,</span> subscript<span class="hl sym">,</span> toUpperCase<span class="hl sym">,</span> startsWith<span class="hl sym">,</span> substring<span class="hl sym">,</span> replaceAllString<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwc">List</span> using
    function <span class="hl sym">=</span>
        foldLeft1Strict<span class="hl sym">,</span> map<span class="hl sym">,</span> takeWhile<span class="hl sym">,</span> dropWhile<span class="hl sym">,</span> tail<span class="hl sym">,</span> foldLeftStrict<span class="hl sym">,</span>
        sortBy<span class="hl sym">,</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwc">Map</span> using
    typeConstructor <span class="hl sym">=</span> <span class="hl kwc">Map</span><span class="hl sym">;</span>
    function <span class="hl sym">=</span> fromList<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Utilities</span><span class="hl sym">.</span><span class="hl kwc">MessageFormat</span> using
    function <span class="hl sym">=</span> formatWithPattern<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Utilities</span><span class="hl sym">.</span><span class="hl kwc">Locale</span> using
    function <span class="hl sym">=</span> invariantLocale<span class="hl sym">;</span>
    <span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.BufferedReader&quot;</span> <span class="hl kwa">private</span> JBufferedReader<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.InputStream&quot;</span> <span class="hl kwa">private</span> JInputStream<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.InputStreamReader&quot;</span>
    <span class="hl kwa">private</span> JInputStreamReader<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.Reader&quot;</span> <span class="hl kwa">private</span> JReader<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.FileReader&quot;</span> <span class="hl kwa">private</span> JFileReader<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.PrintStream&quot;</span> <span class="hl kwa">private</span> JPrintStream<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.lang.StringBuffer&quot;</span>
    <span class="hl kwa">private</span> JStringBuffer deriving Show<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.util.regex.Matcher&quot;</span> <span class="hl kwa">private</span> JMatcher<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.util.regex.Pattern&quot;</span> <span class="hl kwa">private</span> JPattern<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.lang.CharSequence&quot;</span> <span class="hl kwa">private</span> JCharSequence<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;static method java.util.regex.Pattern.compile&quot;</span>
    <span class="hl kwa">private</span> compilePattern <span class="hl sym">::</span> <span class="hl kwc">String</span> <span class="hl sym">-&gt;</span> JPattern<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method matcher&quot;</span>
    <span class="hl kwa">private</span> getMatcher <span class="hl sym">::</span> JPattern <span class="hl sym">-&gt;</span> JCharSequence <span class="hl sym">-&gt;</span> JMatcher<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method find&quot;</span> <span class="hl kwa">private</span> find <span class="hl sym">::</span> JMatcher <span class="hl sym">-&gt;</span> <span class="hl kwc">Boolean</span><span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createStringBuffer <span class="hl sym">::</span> JStringBuffer<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createBufferedReader <span class="hl sym">::</span> JReader <span class="hl sym">-&gt;</span> JBufferedReader<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createInputStreamReaderStream <span class="hl sym">::</span> JInputStream <span class="hl sym">-&gt;</span> JInputStreamReader<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method append&quot;</span>
    <span class="hl kwa">private</span> append <span class="hl sym">::</span> JStringBuffer <span class="hl sym">-&gt;</span> JCharArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> JStringBuffer<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method read&quot;</span>
    <span class="hl kwa">private</span> read <span class="hl sym">::</span> JBufferedReader <span class="hl sym">-&gt;</span> JCharArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;static field java.lang.System.out&quot;</span>
    <span class="hl kwa">private</span> stdout <span class="hl sym">::</span> JPrintStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;static field java.lang.System.in&quot;</span>
    <span class="hl kwa">private</span> stdin <span class="hl sym">::</span> JInputStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method print&quot;</span>
    <span class="hl kwa">private</span> print <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> <span class="hl kwc">String</span> <span class="hl sym">-&gt; ();</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method println&quot;</span>
    <span class="hl kwa">private</span> printLn <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> <span class="hl kwc">String</span> <span class="hl sym">-&gt; ();</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;char[]&quot;</span> JCharArray<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;newArray&quot;</span> char_newArray <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JCharArray<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;cast&quot;</span>
    jInputStreamReaderToJReader <span class="hl sym">::</span> JInputStreamReader <span class="hl sym">-&gt;</span> JReader<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;cast&quot;</span>
    stringToJCharSequence <span class="hl sym">::</span> <span class="hl kwc">String</span> <span class="hl sym">-&gt;</span> JCharSequence<span class="hl sym">;</span>

<span class="hl com">/**read a dna file from stdin into a buffer*/</span>
readFile <span class="hl sym">::</span> JBufferedReader <span class="hl sym">-&gt;</span> <span class="hl kwc">String</span><span class="hl sym">;</span>
readFile <span class="hl sym">!</span>bufferedReader <span class="hl sym">=</span>
    let
        charBuffer <span class="hl sym">::</span> JCharArray<span class="hl sym">;</span>
        charBuffer <span class="hl sym">=</span> eager $ char_newArray <span class="hl num">10240</span><span class="hl sym">;</span>

        stringBuffer <span class="hl sym">::</span> JStringBuffer<span class="hl sym">;</span>
        stringBuffer <span class="hl sym">=</span> eager $ createStringBuffer<span class="hl sym">;</span>

        readAll <span class="hl sym">::</span> JCharArray <span class="hl sym">-&gt;</span> JStringBuffer <span class="hl sym">-&gt;</span> <span class="hl kwc">String</span><span class="hl sym">;</span>
        readAll <span class="hl sym">!</span>charBuffer <span class="hl sym">!</span>stringBuffer <span class="hl sym">=</span>
            let
                charsRead <span class="hl sym">::</span> Int<span class="hl sym">;</span>
                charsRead <span class="hl sym">=</span> read bufferedReader charBuffer <span class="hl num">0 10240</span><span class="hl sym">;</span>
            in
                <span class="hl kwa">if</span> charsRead <span class="hl sym">!= -</span><span class="hl num">1</span> then
                    append stringBuffer charBuffer <span class="hl num">0</span> charsRead
                    `seq`
                    readAll charBuffer stringBuffer
                <span class="hl kwa">else</span>
                    show stringBuffer
            <span class="hl sym">;</span>
    in
        readAll charBuffer stringBuffer
    <span class="hl sym">;</span>

<span class="hl com">/** Counts the number of matches remaining in a matcher*/</span>
countMatches <span class="hl sym">::</span> JMatcher <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
countMatches <span class="hl sym">!</span>matcher <span class="hl sym">!</span>count <span class="hl sym">=</span>
    <span class="hl kwa">if</span> find matcher then
        countMatches <span class="hl kwd">matcher</span> <span class="hl sym">(</span>count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">else</span>
        count
    <span class="hl sym">;</span>

<span class="hl com">/** List of variants to search for */</span>
variants <span class="hl sym">:: [</span><span class="hl kwc">String</span><span class="hl sym">];</span>
variants <span class="hl sym">=</span>
    <span class="hl sym">[</span>
        <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
        <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
    <span class="hl sym">]</span>
    <span class="hl sym">;</span>

<span class="hl com">/** list of replacements to make (from, to)*/</span>
replacements <span class="hl sym">=</span>
    <span class="hl sym">[</span>
        <span class="hl sym">(</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">),</span>
        <span class="hl sym">(</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">),</span>
        <span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">),</span>
        <span class="hl sym">(</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">),</span>
        <span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">),</span>
        <span class="hl sym">(</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">),</span>
        <span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">),</span>
        <span class="hl sym">(</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">),</span>
        <span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">),</span>
        <span class="hl sym">(</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">),</span>
        <span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">]</span>
    <span class="hl sym">;</span>

doReplacement <span class="hl sym">!</span>str <span class="hl sym">!</span>replacement <span class="hl sym">=</span>
    <span class="hl kwa">case</span> replacement of
    <span class="hl sym">(</span>stringToReplace<span class="hl sym">,</span> newValue<span class="hl sym">)</span>
    <span class="hl sym">-&gt;</span> replaceAllString str stringToReplace newValue<span class="hl sym">;</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span><span class="hl kwc">String</span><span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main args <span class="hl sym">=</span>
    let
        bufferReader <span class="hl sym">::</span> JBufferedReader<span class="hl sym">;</span>
        bufferReader <span class="hl sym">=</span>
            eager
            $ createBufferedReader
                <span class="hl sym">(</span>jInputStreamReaderToJReader
                    <span class="hl sym">(</span>createInputStreamReaderStream stdin<span class="hl sym">)</span>
                <span class="hl sym">)</span>
            <span class="hl sym">;</span>

        input <span class="hl sym">::</span> <span class="hl kwc">String</span><span class="hl sym">;</span>
        input <span class="hl sym">=</span> eager $ readFile bufferReader<span class="hl sym">;</span>

        sequence <span class="hl sym">::</span> <span class="hl kwc">String</span><span class="hl sym">;</span>
        sequence <span class="hl sym">=</span> replaceAllString input <span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">;</span>
    in

        print
            stdout
            <span class="hl sym">(</span>foldLeftStrict
                <span class="hl sym">(</span>
                    \accumulator variant <span class="hl sym">-&gt;</span>
                        accumulator
                        <span class="hl sym">++</span> variant
                        <span class="hl sym">++</span> <span class="hl str">&quot; &quot;</span>
                        <span class="hl sym">++</span> show
                            <span class="hl sym">(</span>countMatches
                                <span class="hl sym">(</span>getMatcher
                                    <span class="hl sym">(</span>compilePattern variant<span class="hl sym">)</span>
                                    <span class="hl sym">(</span>stringToJCharSequence sequence<span class="hl sym">)</span>
                                <span class="hl sym">)</span>
                                <span class="hl num">0</span>
                            <span class="hl sym">)</span>
                        <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
                <span class="hl sym">)</span>
                <span class="hl str">&quot;&quot;</span>
                variants
            <span class="hl sym">)</span>
        `seq`
        printLn stdout <span class="hl str">&quot;&quot;</span>
        `seq`
        printLn <span class="hl kwd">stdout</span> <span class="hl sym">(</span>show $ length input<span class="hl sym">)</span>
        `seq`
        printLn <span class="hl kwd">stdout</span> <span class="hl sym">(</span>show $ length sequence<span class="hl sym">)</span>
        `seq`
        printLn
            stdout
            <span class="hl sym">(</span>
                show
                $ <span class="hl kwd">length</span> <span class="hl sym">(</span>foldLeftStrict doReplacement sequence replacements<span class="hl sym">)</span>
            <span class="hl sym">)</span>
    <span class="hl sym">;</span>

