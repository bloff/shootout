<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span>
   Application System Open
   S at <span class="str">'../../Include/oz/shootout.ozf'</span>

<span class="kwa">define</span>
   Sequence

   <span class="kwa">proc</span> <span class="sym">{</span>FindSequence F Id<span class="sym">}</span>
      <span class="kwa">case</span> <span class="sym">{</span>F getS<span class="sym">($)}</span>
      <span class="kwa">of false then skip</span>
      elseof <span class="sym">&amp;&gt;|</span>T <span class="kwa">then</span>
         <span class="kwa">if</span> <span class="sym">{</span>List<span class="sym">.</span>isPrefix Id T<span class="sym">}</span> <span class="kwa">then skip else</span> <span class="sym">{</span>FindSequence F Id<span class="sym">}</span> <span class="kwa">end</span>
      <span class="kwa">else</span> <span class="sym">{</span>FindSequence F Id<span class="sym">}</span> <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>ReadSequence F S<span class="sym">}</span>
      <span class="kwa">case</span> <span class="sym">{</span>F getS<span class="sym">($)}</span>
      <span class="kwa">of false then</span> S
      elseof <span class="sym">&amp;&gt;|</span>_ <span class="kwa">then</span> S
      elseof <span class="sym">&amp;;|</span>_ <span class="kwa">then</span> <span class="sym">{</span>ReadSequence F S<span class="sym">}</span>
      elseof Line <span class="kwa">then</span> <span class="sym">{</span>ReadSequence F S<span class="sym">#{</span>Map Line Char<span class="sym">.</span>toUpper<span class="sym">}}</span> <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>GenerateFrequencies Length<span class="sym">}</span>
      D <span class="sym">= {</span>NewDictionary<span class="sym">}</span>

      <span class="kwa">proc</span> <span class="sym">{</span>KFrequency Offset J<span class="sym">}</span>
         N <span class="sym">= {</span>ByteString<span class="sym">.</span>length Sequence<span class="sym">} -</span> J <span class="sym">+</span> <span class="num">1</span>
      <span class="kwa">in</span>
         <span class="kwa">for</span> I <span class="kwa">in</span> Offset<span class="sym">;</span> I<span class="sym">&lt;</span>N<span class="sym">;</span> I<span class="sym">+</span>J do
            Slice <span class="sym">= {</span>ByteString<span class="sym">.</span>slice Sequence I I<span class="sym">+</span>J<span class="sym">}</span>
            K <span class="sym">= {</span>String<span class="sym">.</span>toAtom <span class="sym">{</span>ByteString<span class="sym">.</span>toString Slice<span class="sym">}}</span>
            V <span class="sym">= {</span>Dictionary<span class="sym">.</span>condGet D K nil<span class="sym">}</span>
         <span class="kwa">in</span>
            <span class="kwa">if</span> V <span class="sym">==</span> nil <span class="kwa">then</span> <span class="sym">{</span>Dictionary<span class="sym">.</span>put D K <span class="sym">{</span>NewCell <span class="num">1</span><span class="sym">}}</span>
            <span class="kwa">else</span> V <span class="sym">:= &#64;</span>V <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">in</span>
      <span class="kwa">for</span> Offset <span class="kwa">in</span> <span class="num">0</span><span class="sym">;</span> Offset<span class="sym">&lt;</span>Length<span class="sym">;</span> Offset<span class="sym">+</span><span class="num">1</span> do
         <span class="sym">{</span>KFrequency Offset Length<span class="sym">}</span>
      <span class="kwa">end</span>
      D
   <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>WriteFrequencies J<span class="sym">}</span>
      D <span class="sym">= {</span>GenerateFrequencies J<span class="sym">}</span>
      F <span class="sym">=</span> <span class="kwa">fun</span> <span class="sym">{$</span> Ak<span class="sym">#</span>Av Bk<span class="sym">#</span>Bv<span class="sym">}</span> <span class="kwa">if</span> <span class="sym">&#64;</span>Av<span class="sym">==&#64;</span>Bv <span class="kwa">then</span> Ak<span class="sym">&gt;</span>Bk <span class="kwa">else</span> <span class="sym">&#64;</span>Av<span class="sym">&gt;&#64;</span>Bv <span class="kwa">end end</span>
      L <span class="sym">= {</span>Sort <span class="sym">{</span>Dictionary<span class="sym">.</span>entries D<span class="sym">}</span> F<span class="sym">}</span>
      N <span class="sym">= {</span>IntToFloat <span class="sym">{</span>ByteString<span class="sym">.</span>length Sequence<span class="sym">} -</span> J <span class="sym">+</span> <span class="num">1</span><span class="sym">}</span>
   <span class="kwa">in</span>
      <span class="kwa">for</span> K<span class="sym">#</span>V <span class="kwa">in</span> L do
         Percentage <span class="sym">= {</span>IntToFloat <span class="sym">&#64;</span>V<span class="sym">} /</span> N <span class="sym">*</span> <span class="num">100.0</span>
      <span class="kwa">in</span>
         <span class="sym">{</span>System<span class="sym">.</span>showInfo K <span class="sym">#</span> &quot; &quot; <span class="sym"># {</span>S<span class="sym">.</span>floatToString Percentage <span class="num">3</span><span class="sym">}}</span>
      <span class="kwa">end</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;&quot;<span class="sym">}</span>
   <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>WriteCount Fragment<span class="sym">}</span>
      D <span class="sym">= {</span>GenerateFrequencies <span class="sym">{</span>Length Fragment<span class="sym">}}</span>
      K <span class="sym">= {</span>String<span class="sym">.</span>toAtom Fragment<span class="sym">}</span>
      Count <span class="sym">= {</span>Dictionary<span class="sym">.</span>condGet D K <span class="sym">{</span>NewCell <span class="num">0</span><span class="sym">}}</span>
   <span class="kwa">in</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="sym">&#64;</span>Count <span class="sym">#</span> &quot;<span class="sym">\</span>t&quot; <span class="sym">#</span> Fragment<span class="sym">}</span>
   <span class="kwa">end</span>

   <span class="kwa">class</span> TextFile <span class="kwa">from</span> Open<span class="sym">.</span>file Open<span class="sym">.</span>text <span class="kwa">end</span>
   StdIn <span class="sym">= {</span>New TextFile init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}</span>

<span class="kwa">in</span>
   <span class="sym">{</span>FindSequence StdIn &quot;THREE&quot;<span class="sym">}</span>
   Sequence <span class="sym">= {</span>VirtualString<span class="sym">.</span>toByteString <span class="sym">{</span>ReadSequence StdIn nil<span class="sym">}}</span>

   <span class="sym">{</span>WriteFrequencies <span class="num">1</span><span class="sym">}</span>
   <span class="sym">{</span>WriteFrequencies <span class="num">2</span><span class="sym">}</span>

   <span class="sym">{</span>WriteCount &quot;GGT&quot;<span class="sym">}</span>
   <span class="sym">{</span>WriteCount &quot;GGTA&quot;<span class="sym">}</span>
   <span class="sym">{</span>WriteCount &quot;GGTATT&quot;<span class="sym">}</span>
   <span class="sym">{</span>WriteCount &quot;GGTATTTTAATT&quot;<span class="sym">}</span>
   <span class="sym">{</span>WriteCount &quot;GGTATTTTAATTTATAGT&quot;<span class="sym">}</span>

   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
