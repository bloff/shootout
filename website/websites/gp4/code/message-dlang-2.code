<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Dave Fladebo</span>
<span class="hl com"></span>
<span class="hl com">   compile: dmd -O -inline -release message2.d</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>string<span class="hl sym">,</span> std<span class="hl sym">.</span>thread<span class="hl sym">,</span> std<span class="hl sym">.</span>c<span class="hl sym">.</span>linux<span class="hl sym">.</span>linux<span class="hl sym">;</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[][]</span> args<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">const int</span> threads <span class="hl sym">=</span> <span class="hl num">500</span><span class="hl sym">;</span>
    <span class="hl kwa">int</span> n <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">2</span><span class="hl sym">;</span>

    Link chain <span class="hl sym">=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
    Link<span class="hl sym">.</span>total <span class="hl sym">=</span> threads <span class="hl sym">*</span> n<span class="hl sym">;</span>
    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> threads<span class="hl sym">;</span> i<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
        Link next <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Link</span><span class="hl sym">(</span>chain<span class="hl sym">);</span>
        chain <span class="hl sym">=</span> next<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    Link first <span class="hl sym">=</span> chain<span class="hl sym">;</span>
    <span class="hl kwa">while</span><span class="hl sym">(</span>chain<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        chain<span class="hl sym">.</span>start<span class="hl sym">;</span>
        chain <span class="hl sym">=</span> chain<span class="hl sym">.</span>next<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    chain <span class="hl sym">=</span> first<span class="hl sym">;</span>
    <span class="hl kwa">while</span><span class="hl sym">(</span>n<span class="hl sym">--)</span> chain<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>

    <span class="hl kwa">while</span><span class="hl sym">(</span>chain<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        chain<span class="hl sym">.</span><span class="hl kwc">wait</span><span class="hl sym">;</span>
        chain <span class="hl sym">=</span> chain<span class="hl sym">.</span>next<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwd">writefln</span><span class="hl sym">(</span>Link<span class="hl sym">.</span>sum<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">class</span> Link <span class="hl sym">:</span> Thread
<span class="hl sym">{</span>
<span class="hl kwa">private</span><span class="hl sym">:</span>
    <span class="hl kwa">int</span> message <span class="hl sym">= -</span><span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">static</span> threads <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

<span class="hl kwa">public</span><span class="hl sym">:</span>
    Link next<span class="hl sym">;</span>
    <span class="hl kwa">static int</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> total <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl kwa">this</span><span class="hl sym">(</span>Link next<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">super</span><span class="hl sym">(</span><span class="hl num">1024</span> <span class="hl sym">*</span> <span class="hl num">16</span><span class="hl sym">);</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>next <span class="hl sym">=</span> next<span class="hl sym">;</span>
        threads<span class="hl sym">++;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">int</span> <span class="hl kwd">run</span><span class="hl sym">()</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">while</span><span class="hl sym">(</span>sum <span class="hl sym">&lt;</span> total<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">if</span><span class="hl sym">(</span>message <span class="hl sym">&gt; -</span><span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">if</span><span class="hl sym">(</span>next<span class="hl sym">)</span>
                <span class="hl sym">{</span>
		    next<span class="hl sym">.</span>message <span class="hl sym">=</span> message <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
                <span class="hl sym">}</span>
                <span class="hl kwa">else</span>
                <span class="hl sym">{</span>
                    sum <span class="hl sym">+=</span> message <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>
            <span class="hl kwd">yield</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">void</span> <span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl kwa">int</span> msg<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        message <span class="hl sym">=</span> msg<span class="hl sym">;</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
