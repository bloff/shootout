<span class="slc">%   The Computer Language Shootout</span>
<span class="slc">%   http://shootout.alioth.debian.or</span>
<span class="slc">% contributed by Richard Carlsson</span>
<span class="slc">% &#64;copyright 2006 Richard Carlsson</span>

<span class="sym">-</span><span class="kwa">module</span><span class="sym">(</span>bsieve<span class="sym">).</span>

<span class="sym">-</span><span class="kwa">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">]).</span>

<span class="sym">-</span><span class="kwd">compile</span><span class="sym">([</span>inline<span class="sym">]).</span>

<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>WORDSIZE<span class="sym">,</span> <span class="num">27</span><span class="sym">).</span>
<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span><span class="kwd">TRUEBITS</span><span class="sym">(</span>N<span class="sym">), ((</span><span class="num">1</span> <span class="kwa">bsl</span> <span class="sym">(</span>N<span class="sym">)) -</span> <span class="num">1</span><span class="sym">)).</span>

<span class="kwd">main</span><span class="sym">() -&gt;</span> <span class="kwd">main</span><span class="sym">([</span><span class="str">&quot;2&quot;</span><span class="sym">]).</span>

<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
    <span class="kwa">if</span> N <span class="sym">&gt;=</span> <span class="num">2</span> <span class="sym">-&gt;</span>
	    <span class="kwd">sieve</span><span class="sym">((</span><span class="num">1</span> <span class="kwa">bsl</span> N<span class="sym">) *</span> <span class="num">10000</span><span class="sym">),</span>
	    <span class="kwd">sieve</span><span class="sym">((</span><span class="num">1</span> <span class="kwa">bsl</span> <span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">),</span>
	    <span class="kwd">sieve</span><span class="sym">((</span><span class="num">1</span> <span class="kwa">bsl</span> <span class="sym">(</span>N <span class="sym">-</span> <span class="num">2</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">);</span>
       true <span class="sym">-&gt;</span>
	    erlang<span class="sym">:</span><span class="kwd">error</span><span class="sym">(</span>badarg<span class="sym">)</span>
    <span class="kwa">end</span><span class="sym">.</span>


<span class="kwd">sieve</span><span class="sym">(</span>M<span class="sym">) -&gt;</span>
    Arr <span class="sym">=</span> <span class="kwd">make_array</span><span class="sym">(</span>M<span class="sym">),</span>
    Count <span class="sym">=</span> <span class="kwd">sieve</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="kwd">lookup_word</span><span class="sym">(</span>Arr<span class="sym">,</span> <span class="num">0</span><span class="sym">),</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> M <span class="kwa">div</span> <span class="sym">?</span>WORDSIZE<span class="sym">,</span> Arr<span class="sym">),</span>
    io<span class="sym">:</span><span class="kwd">format</span><span class="sym">(</span><span class="str">&quot;Primes up to ~8w~8w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>M<span class="sym">,</span> Count<span class="sym">]),</span>
    ets<span class="sym">:</span><span class="kwd">delete</span><span class="sym">(</span>Arr<span class="sym">),</span>
    Count<span class="sym">.</span>

<span class="kwd">sieve</span><span class="sym">(</span>Bit<span class="sym">,</span> Curr<span class="sym">,</span> Word<span class="sym">,</span> Count<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">)</span> <span class="kwa">when</span> Bit <span class="sym">&lt; ?</span>WORDSIZE <span class="sym">-&gt;</span>
    <span class="kwa">case</span> Curr <span class="kwa">band</span> <span class="sym">(</span><span class="num">1</span> <span class="kwa">bsl</span> Bit<span class="sym">)</span> <span class="kwa">of</span>
	<span class="num">0</span> <span class="sym">-&gt;</span>
	    <span class="kwd">sieve</span><span class="sym">(</span>Bit <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> Curr<span class="sym">,</span> Word<span class="sym">,</span> Count<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">);</span>
	_ <span class="sym">-&gt;</span>
	    <span class="kwd">clear</span><span class="sym">(</span>Bit<span class="sym">,</span> Curr<span class="sym">,</span> Word<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">),</span>
	    <span class="kwd">sieve</span><span class="sym">(</span>Bit <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="kwd">lookup_word</span><span class="sym">(</span>Arr<span class="sym">,</span> Word<span class="sym">),</span> Word<span class="sym">,</span>
		  Count <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">)</span>
    <span class="kwa">end</span><span class="sym">;</span>
<span class="kwd">sieve</span><span class="sym">(</span>_Bit<span class="sym">,</span> _Curr<span class="sym">,</span> Word<span class="sym">,</span> Count<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">) -&gt;</span>
    NextWord <span class="sym">=</span> Word <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span>
    <span class="kwa">if</span> NextWord <span class="sym">=&lt;</span> LastWord <span class="sym">-&gt;</span>
	    <span class="kwd">sieve</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="kwd">lookup_word</span><span class="sym">(</span>Arr<span class="sym">,</span> NextWord<span class="sym">),</span>
		  NextWord<span class="sym">,</span> Count<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">);</span>
       true <span class="sym">-&gt;</span>
	    Count
    <span class="kwa">end</span><span class="sym">.</span>


<span class="kwd">clear</span><span class="sym">(</span>Bit<span class="sym">,</span> Curr<span class="sym">,</span> Word<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">) -&gt;</span>
    Step <span class="sym">= ?</span>WORDSIZE <span class="sym">*</span> Word <span class="sym">+</span> Bit<span class="sym">,</span>
    <span class="kwd">clear_next</span><span class="sym">(</span>Bit <span class="sym">+</span> Step<span class="sym">,</span> Curr<span class="sym">,</span> Word<span class="sym">,</span> Step<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">).</span>

<span class="kwd">clear</span><span class="sym">(</span>Bit<span class="sym">,</span> Curr<span class="sym">,</span> Word<span class="sym">,</span> Step<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">) -&gt;</span>
    <span class="kwd">clear_next</span><span class="sym">(</span>Bit <span class="sym">+</span> Step<span class="sym">,</span> Curr <span class="kwa">band</span> <span class="sym">(</span><span class="kwa">bnot</span> <span class="sym">(</span><span class="num">1</span> <span class="kwa">bsl</span> Bit<span class="sym">)),</span>
	       Word<span class="sym">,</span> Step<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">).</span>

<span class="kwd">clear_next</span><span class="sym">(</span>Bit<span class="sym">,</span> Curr<span class="sym">,</span> Word<span class="sym">,</span> Step<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">)</span> <span class="kwa">when</span> Bit <span class="sym">&lt; ?</span>WORDSIZE <span class="sym">-&gt;</span>
    <span class="kwd">clear</span><span class="sym">(</span>Bit<span class="sym">,</span> Curr<span class="sym">,</span> Word<span class="sym">,</span> Step<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">);</span>
<span class="kwd">clear_next</span><span class="sym">(</span>Bit<span class="sym">,</span> Curr<span class="sym">,</span> Word<span class="sym">,</span> Step<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">) -&gt;</span>
    ets<span class="sym">:</span><span class="kwd">insert</span><span class="sym">(</span>Arr<span class="sym">, {</span>Word<span class="sym">,</span> Curr<span class="sym">}),</span>
    NextWord <span class="sym">=</span> Word <span class="sym">+</span> Bit <span class="kwa">div</span> <span class="sym">?</span>WORDSIZE<span class="sym">,</span>
    <span class="kwa">if</span> NextWord <span class="sym">=&lt;</span> LastWord <span class="sym">-&gt;</span>
	    <span class="kwd">clear</span><span class="sym">(</span>Bit <span class="kwa">rem</span> <span class="sym">?</span>WORDSIZE<span class="sym">,</span> <span class="kwd">lookup_word</span><span class="sym">(</span>Arr<span class="sym">,</span> NextWord<span class="sym">),</span>
		  NextWord<span class="sym">,</span> Step<span class="sym">,</span> LastWord<span class="sym">,</span> Arr<span class="sym">);</span>
       true <span class="sym">-&gt;</span> ok
    <span class="kwa">end</span><span class="sym">.</span>


<span class="kwd">lookup_word</span><span class="sym">(</span>Arr<span class="sym">,</span> Word<span class="sym">) -&gt;</span>
    <span class="kwb">element</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="kwb">hd</span><span class="sym">(</span>ets<span class="sym">:</span><span class="kwd">lookup</span><span class="sym">(</span>Arr<span class="sym">,</span> Word<span class="sym">))).</span>

<span class="kwd">make_array</span><span class="sym">(</span>M<span class="sym">) -&gt;</span>
    T <span class="sym">=</span> ets<span class="sym">:</span><span class="kwd">new</span><span class="sym">(?</span>MODULE<span class="sym">, [</span>ordered_set<span class="sym">,</span> private<span class="sym">]),</span>
    <span class="kwd">init_array</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> M <span class="kwa">div</span> <span class="sym">?</span>WORDSIZE<span class="sym">,</span> M <span class="kwa">rem</span> <span class="sym">?</span>WORDSIZE<span class="sym">,</span> T<span class="sym">).</span>

<span class="kwd">init_array</span><span class="sym">(</span>I<span class="sym">,</span> W<span class="sym">,</span> R<span class="sym">,</span> T<span class="sym">)</span> <span class="kwa">when</span> I <span class="sym">&lt;</span> W <span class="sym">-&gt;</span>
    ets<span class="sym">:</span><span class="kwd">insert</span><span class="sym">(</span>T<span class="sym">, {</span>I<span class="sym">, ?</span><span class="kwd">TRUEBITS</span><span class="sym">(?</span>WORDSIZE<span class="sym">)}),</span>
    <span class="kwd">init_array</span><span class="sym">(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> W<span class="sym">,</span> R<span class="sym">,</span> T<span class="sym">);</span>
<span class="kwd">init_array</span><span class="sym">(</span>I<span class="sym">,</span> _<span class="sym">,</span> R<span class="sym">,</span> T<span class="sym">) -&gt;</span>
    ets<span class="sym">:</span><span class="kwd">insert</span><span class="sym">(</span>T<span class="sym">, {</span>I<span class="sym">, ?</span><span class="kwd">TRUEBITS</span><span class="sym">(</span>R<span class="sym">)}),</span>
    T<span class="sym">.</span>
