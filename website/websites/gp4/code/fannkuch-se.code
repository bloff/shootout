<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">--   http://shootout.alioth.debian.org</span>
<span class="slc">--</span>
<span class="slc">--   contributed by josé</span>
<span class="slc">--</span>
<span class="slc">--   To run:   fannkuch 9</span>

<span class="kwa">class</span> FANNKUCH

insert
	ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>

   n<span class="sym">:</span> <span class="kwb">INTEGER</span>

   make <span class="kwa">is</span>
         <span class="kwa">do</span>
         <span class="kwa">check</span> argument_count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">end</span>
         <span class="kwa">check</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer <span class="kwa">end</span>
         n <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
         <span class="kwa">check</span> n <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">end</span>
         std_output.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">)</span>
         std_output.<span class="kwd">put_integer</span><span class="sym">(</span>n<span class="sym">)</span>
         std_output.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;) = &quot;</span><span class="sym">)</span>
         std_output.<span class="kwd">put_integer</span><span class="sym">(</span><span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">))</span>
         std_output.put_new_line
      <span class="kwa">end</span>

   <span class="kwd">fannkuch</span><span class="sym">(</span>x<span class="sym">:</span> <span class="kwa">like</span> n<span class="sym">):</span> <span class="kwa">like</span> n <span class="kwa">is</span>
      <span class="kwa">require</span>
         x <span class="sym">&gt;</span> <span class="num">1</span>
      <span class="kwa">local</span>
         perm<span class="sym">,</span> perm1<span class="sym">,</span> count<span class="sym">,</span> maxperm<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span><span class="kwa">like</span> n<span class="sym">]</span>
         rot_rank<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> upper<span class="sym">,</span> cnt<span class="sym">,</span> flip_count<span class="sym">,</span> tmp<span class="sym">,</span> p0<span class="sym">:</span> <span class="kwa">like</span> n
      <span class="kwa">do</span>
         <span class="kwa">create</span> perm.<span class="kwd">make</span><span class="sym">(</span>x<span class="sym">)</span>
         <span class="kwa">create</span> perm1.<span class="kwd">make</span><span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
         <span class="kwa">create</span> count.<span class="kwd">make</span><span class="sym">(</span>x<span class="sym">)</span>
         <span class="kwa">create</span> maxperm.<span class="kwd">make</span><span class="sym">(</span>x<span class="sym">)</span>
         <span class="kwa">from</span> i<span class="sym">:=</span><span class="num">0</span> until i<span class="sym">=</span>x <span class="kwa">loop</span> perm1.<span class="kwd">put</span><span class="sym">(</span>i<span class="sym">,</span>i<span class="sym">)</span> i<span class="sym">:=</span>i<span class="sym">+</span><span class="num">1</span> <span class="kwa">end</span>
         upper <span class="sym">:=</span> x<span class="sym">-</span><span class="num">1</span>
         count.<span class="kwd">put</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span>upper<span class="sym">)</span>
         <span class="kwa">from</span> rot_rank<span class="sym">:=</span>upper<span class="sym">-</span><span class="num">1</span> cnt<span class="sym">:=</span>x until rot_rank<span class="sym">=</span>upper <span class="kwa">loop</span>
            <span class="slc">--</span>
            <span class="slc">-- update rotation counters</span>
            <span class="slc">--</span>
			count.<span class="kwd">put</span><span class="sym">(</span>cnt<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>rot_rank<span class="sym">)</span>
			<span class="kwa">from</span> until rot_rank<span class="sym">=</span><span class="num">0</span> <span class="kwa">loop</span> count.<span class="kwd">put</span><span class="sym">(</span>rot_rank<span class="sym">,</span>rot_rank<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> rot_rank<span class="sym">:=</span>rot_rank<span class="sym">-</span><span class="num">1</span> <span class="kwa">end</span>
            <span class="slc">--</span>
            <span class="slc">-- count the needed flips</span>
            <span class="slc">--</span>
            p0<span class="sym">:=</span>perm1.<span class="kwd">item</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
            <span class="kwa">if</span> p0<span class="sym">/=</span><span class="num">0</span> <span class="kwa">and then</span> perm1.<span class="kwd">item</span><span class="sym">(</span>upper<span class="sym">)/=</span>upper <span class="kwa">then</span>
               <span class="kwa">from</span> i<span class="sym">:=</span><span class="num">0</span> until i<span class="sym">=</span>x <span class="kwa">loop</span> perm.<span class="kwd">put</span><span class="sym">(</span>perm1.<span class="kwd">item</span><span class="sym">(</span>i<span class="sym">),</span>i<span class="sym">)</span> i<span class="sym">:=</span>i<span class="sym">+</span><span class="num">1</span> <span class="kwa">end</span>
               flip_count <span class="sym">:=</span> <span class="num">0</span>
               <span class="kwa">from</span> k<span class="sym">:=</span>p0 until k<span class="sym">=</span><span class="num">0</span> <span class="kwa">loop</span>
                  tmp <span class="sym">:=</span> perm.<span class="kwd">item</span><span class="sym">(</span>k<span class="sym">)</span>
                  perm.<span class="kwd">put</span><span class="sym">(</span>k<span class="sym">,</span>k<span class="sym">)</span>
                  j <span class="sym">:=</span> k<span class="sym">-</span><span class="num">1</span>
                  k <span class="sym">:=</span> tmp
                  <span class="kwa">from</span> i<span class="sym">:=</span><span class="num">1</span> until i<span class="sym">&gt;=</span>j <span class="kwa">loop</span>
                     tmp <span class="sym">:=</span> perm.<span class="kwd">item</span><span class="sym">(</span>i<span class="sym">)</span>
                     perm.<span class="kwd">put</span><span class="sym">(</span>perm.<span class="kwd">item</span><span class="sym">(</span>j<span class="sym">),</span>i<span class="sym">)</span>
                     perm.<span class="kwd">put</span><span class="sym">(</span>tmp<span class="sym">,</span>j<span class="sym">)</span>
                     i <span class="sym">:=</span> i<span class="sym">+</span><span class="num">1</span>
                     j <span class="sym">:=</span> j<span class="sym">-</span><span class="num">1</span>
                  <span class="kwa">end</span>
                  flip_count <span class="sym">:=</span> flip_count <span class="sym">+</span> <span class="num">1</span>
               <span class="kwa">end</span>
               <span class="kwa">if</span> flip_count<span class="sym">&gt;</span><span class="kwa">Result then</span>
                  <span class="kwa">Result</span> <span class="sym">:=</span> flip_count
                  <span class="kwa">from</span> i<span class="sym">:=</span><span class="num">0</span> until i<span class="sym">=</span>x <span class="kwa">loop</span> maxperm.<span class="kwd">put</span><span class="sym">(</span>perm1.<span class="kwd">item</span><span class="sym">(</span>i<span class="sym">),</span>i<span class="sym">)</span> i<span class="sym">:=</span>i<span class="sym">+</span><span class="num">1</span> <span class="kwa">end</span>
               <span class="kwa">end</span>
            <span class="kwa">end</span>
            <span class="slc">--</span>
            <span class="slc">-- next permutation</span>
            <span class="slc">--</span>
            perm1.<span class="kwd">put</span><span class="sym">(</span>perm1.<span class="kwd">item</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span><span class="num">0</span><span class="sym">)</span> perm1.<span class="kwd">put</span><span class="sym">(</span>p0<span class="sym">,</span><span class="num">1</span><span class="sym">)</span>
			cnt <span class="sym">:=</span> count.<span class="kwd">item</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
			<span class="kwa">from</span> i<span class="sym">:=</span><span class="num">1</span> until cnt<span class="sym">/=</span><span class="num">0</span> <span class="kwa">loop</span>
				rot_rank <span class="sym">:=</span> i
				tmp <span class="sym">:=</span> perm1.<span class="kwd">item</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
				<span class="kwa">from</span> i<span class="sym">:=</span><span class="num">0</span> until i<span class="sym">&gt;</span>rot_rank <span class="kwa">loop</span>
					j<span class="sym">:=</span>i<span class="sym">+</span><span class="num">1</span> perm1.<span class="kwd">put</span><span class="sym">(</span>perm1.<span class="kwd">item</span><span class="sym">(</span>j<span class="sym">),</span>i<span class="sym">)</span> i<span class="sym">:=</span>j
				<span class="kwa">end</span>
				perm1.<span class="kwd">put</span><span class="sym">(</span>tmp<span class="sym">,</span>i<span class="sym">)</span>
				cnt <span class="sym">:=</span> count.<span class="kwd">item</span><span class="sym">(</span>rot_rank<span class="sym">)</span>
			<span class="kwa">end</span>
         <span class="kwa">end</span>
      <span class="kwa">ensure</span>
         <span class="kwa">Result</span> <span class="sym">&gt;=</span> <span class="num">0</span>
      <span class="kwa">end</span>

<span class="kwa">end</span>


