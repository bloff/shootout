<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="dir">#include &lt;cctype&gt;</span>
<span class="dir">#include &lt;deque&gt;</span>
<span class="dir">#include &lt;queue&gt;</span>
<span class="dir">#include &lt;string&gt;</span>
<span class="dir">#include &lt;algorithm&gt;</span>
<span class="dir">#include &lt;iterator&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwb">const int</span> LINELENGTH <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
<span class="kwb">const char</span> ENDLINE <span class="sym">=</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">,</span> SEGMARKER <span class="sym">=</span> <span class="str">'&gt;'</span><span class="sym">;</span>

<span class="kwc">typedef</span> queue<span class="sym">&lt;</span>string<span class="sym">,</span> deque<span class="sym">&lt;</span>string<span class="sym">&gt; &gt;</span> Header<span class="sym">;</span>
<span class="kwc">typedef</span> string Segment<span class="sym">;</span>

<span class="kwc">typedef</span> ostreambuf_iterator<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt;</span> StreamIterOut<span class="sym">;</span>

<span class="kwc">inline</span> Segment<span class="sym">&amp;</span> <span class="kwd">transformSegment</span><span class="sym">(</span>Segment<span class="sym">&amp;</span> segment<span class="sym">);</span>
<span class="kwb">void</span> <span class="kwd">dumpSegment</span><span class="sym">(</span>Header<span class="sym">&amp;</span> header<span class="sym">,</span> Segment<span class="sym">&amp;</span> segment<span class="sym">,</span> ostream<span class="sym">&amp;</span> out <span class="sym">=</span> cout<span class="sym">);</span>
<span class="kwc">inline</span> <span class="kwb">char</span> <span class="kwd">complement</span><span class="sym">(</span><span class="kwb">char</span> element<span class="sym">);</span>

<span class="com">/* ----------------------------- */</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
  ios_base<span class="sym">::</span><span class="kwd">sync_with_stdio</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">);</span>

  <span class="kwb">bool</span> okToDump <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span> string line<span class="sym">;</span> Segment segment<span class="sym">;</span> Header header<span class="sym">;</span>

  <span class="kwa">while</span> <span class="sym">(</span><span class="kwd">getline</span><span class="sym">(</span>cin<span class="sym">,</span> line<span class="sym">,</span> ENDLINE<span class="sym">))</span>
  <span class="sym">{</span>
    <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> SEGMARKER<span class="sym">)</span>
    <span class="sym">{</span>
      header<span class="sym">.</span><span class="kwd">push</span><span class="sym">(</span>line<span class="sym">);</span> <span class="kwa">if</span> <span class="sym">(!</span>okToDump<span class="sym">) {</span> okToDump <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span> <span class="kwa">continue</span><span class="sym">; }</span>
      <span class="kwd">dumpSegment</span><span class="sym">(</span>header<span class="sym">,</span> <span class="kwd">transformSegment</span><span class="sym">(</span>segment<span class="sym">));</span>
    <span class="sym">}</span>
    <span class="kwa">else</span>
    <span class="sym">{</span>
      segment <span class="sym">+=</span> line<span class="sym">;</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwd">dumpSegment</span><span class="sym">(</span>header<span class="sym">,</span> <span class="kwd">transformSegment</span><span class="sym">(</span>segment<span class="sym">));</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* ----------------------------- */</span>

Segment<span class="sym">&amp;</span> <span class="kwd">transformSegment</span><span class="sym">(</span>Segment<span class="sym">&amp;</span> segment<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwd">reverse</span><span class="sym">(</span>segment<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> segment<span class="sym">.</span><span class="kwd">end</span><span class="sym">());</span>
  <span class="kwd">transform</span><span class="sym">(</span>segment<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> segment<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> segment<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> complement<span class="sym">);</span>
  <span class="kwa">return</span> segment<span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* ----------------------------- */</span>

<span class="kwb">void</span> <span class="kwd">dumpSegment</span><span class="sym">(</span>Header<span class="sym">&amp;</span> header<span class="sym">,</span> Segment<span class="sym">&amp;</span> segment<span class="sym">,</span> ostream<span class="sym">&amp;</span> out<span class="sym">)</span>
<span class="sym">{</span>
  out <span class="sym">&lt;&lt;</span> header<span class="sym">.</span><span class="kwd">front</span><span class="sym">() &lt;&lt;</span> ENDLINE<span class="sym">;</span> header<span class="sym">.</span><span class="kwd">pop</span><span class="sym">();</span>

  Segment<span class="sym">::</span>iterator begin <span class="sym">=</span> segment<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> i <span class="sym">=</span> segment<span class="sym">.</span><span class="kwd">begin</span><span class="sym">();</span>

  <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">!=</span> segment<span class="sym">.</span><span class="kwd">end</span><span class="sym">())</span>
  <span class="sym">{</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">distance</span><span class="sym">(</span>begin<span class="sym">,</span> i<span class="sym">) ==</span> LINELENGTH<span class="sym">)</span>
    <span class="sym">{</span>
       <span class="kwd">copy</span><span class="sym">(</span>begin<span class="sym">,</span> i<span class="sym">,</span> <span class="kwd">StreamIterOut</span><span class="sym">(</span>out<span class="sym">));</span> out <span class="sym">&lt;&lt;</span> ENDLINE<span class="sym">;</span>
       begin <span class="sym">=</span> i<span class="sym">;</span>
    <span class="sym">}</span>
    <span class="sym">++</span>i<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwd">copy</span><span class="sym">(</span>begin<span class="sym">,</span> i<span class="sym">,</span> <span class="kwd">StreamIterOut</span><span class="sym">(</span>out<span class="sym">));</span> out <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>

  segment<span class="sym">.</span><span class="kwd">resize</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/* ----------------------------- */</span>

<span class="kwb">char</span> <span class="kwd">complement</span><span class="sym">(</span><span class="kwb">char</span> element<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">static char</span> charMap<span class="sym">[] =</span>
  <span class="sym">{</span>
    <span class="str">'T'</span><span class="sym">,</span> <span class="str">'V'</span><span class="sym">,</span> <span class="str">'G'</span><span class="sym">,</span> <span class="str">'H'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'C'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'M'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'K'</span><span class="sym">,</span>
    <span class="str">'N'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">,</span> <span class="str">'A'</span><span class="sym">,</span> <span class="str">'A'</span><span class="sym">,</span> <span class="str">'B'</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'R'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span>
  <span class="sym">};</span>

  <span class="kwa">return</span> charMap<span class="sym">[</span><span class="kwd">toupper</span><span class="sym">(</span>element<span class="sym">) -</span> <span class="str">'A'</span><span class="sym">];</span>
<span class="sym">}</span>
