<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* Modified by Vaclav Haisman                                         */</span>
<span class="com">/* Changed to match style of Perl example: Greg Buchholz              */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="dir">#include &lt;cctype&gt;</span>
<span class="dir">#include &lt;string&gt;</span>
<span class="dir">#include &lt;algorithm&gt;</span>
<span class="dir">#include &lt;iterator&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwb">const int</span> LINELENGTH <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>

<span class="kwc">typedef</span> string Header<span class="sym">;</span>
<span class="kwc">typedef</span> string Segment<span class="sym">;</span>

<span class="kwc">inline</span> <span class="kwb">char</span> <span class="kwd">complement</span><span class="sym">(</span><span class="kwb">char</span> element<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">static const char</span> charMap<span class="sym">[] =</span>
    <span class="sym">{</span>
      <span class="str">'T'</span><span class="sym">,</span> <span class="str">'V'</span><span class="sym">,</span> <span class="str">'G'</span><span class="sym">,</span> <span class="str">'H'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'C'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'M'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'K'</span><span class="sym">,</span>
      <span class="str">'N'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">,</span> <span class="str">'A'</span><span class="sym">,</span> <span class="str">'A'</span><span class="sym">,</span> <span class="str">'B'</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'R'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span>
    <span class="sym">};</span>

  <span class="kwa">return</span> charMap<span class="sym">[</span><span class="kwd">toupper</span><span class="sym">(</span>element<span class="sym">) -</span> <span class="str">'A'</span><span class="sym">];</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">print_revcomp</span><span class="sym">(</span>Header <span class="kwb">const</span><span class="sym">&amp;</span> header<span class="sym">,</span> Segment <span class="kwb">const</span><span class="sym">&amp;</span> seg<span class="sym">,</span> ostream<span class="sym">&amp;</span> out <span class="sym">=</span> std<span class="sym">::</span>cout<span class="sym">)</span>
<span class="sym">{</span>
    out <span class="sym">&lt;&lt;</span> header <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>

    Segment <span class="kwd">comp</span><span class="sym">(</span>seg<span class="sym">.</span><span class="kwd">rbegin</span><span class="sym">(),</span>seg<span class="sym">.</span><span class="kwd">rend</span><span class="sym">());</span>
    <span class="kwd">transform</span><span class="sym">(</span>comp<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span>comp<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> comp<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> complement<span class="sym">);</span>

    <span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">size_t</span> stop <span class="sym">=</span> comp<span class="sym">.</span><span class="kwd">length</span><span class="sym">()/</span>LINELENGTH <span class="sym">+ ((</span>comp<span class="sym">.</span><span class="kwd">length</span><span class="sym">()%</span>LINELENGTH<span class="sym">)</span>?<span class="num">1</span><span class="sym">:</span><span class="num">0</span><span class="sym">);</span>

    <span class="kwa">while</span><span class="sym">(</span>i <span class="sym">&lt;</span> stop<span class="sym">)</span>
        out <span class="sym">&lt;&lt;</span> comp<span class="sym">.</span><span class="kwd">substr</span><span class="sym">(</span>i<span class="sym">++*</span>LINELENGTH<span class="sym">,</span>LINELENGTH<span class="sym">) &lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span> <span class="sym">()</span>
<span class="sym">{</span>
  ios_base<span class="sym">::</span><span class="kwd">sync_with_stdio</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">);</span>

  Segment line<span class="sym">,</span> segment<span class="sym">;</span>
  Header header<span class="sym">;</span>

  <span class="kwa">while</span> <span class="sym">(</span><span class="kwd">getline</span><span class="sym">(</span>cin<span class="sym">,</span> line<span class="sym">))</span>
  <span class="sym">{</span>
      <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
      <span class="sym">{</span>
          <span class="kwa">if</span> <span class="sym">(!</span> segment<span class="sym">.</span><span class="kwd">empty</span><span class="sym">())</span>
            <span class="kwd">print_revcomp</span><span class="sym">(</span>header<span class="sym">,</span> segment<span class="sym">);</span>
          header <span class="sym">=</span> line<span class="sym">;</span>
          segment<span class="sym">.</span><span class="kwd">clear</span><span class="sym">();</span>
      <span class="sym">}</span>
      <span class="kwa">else</span>
          segment <span class="sym">+=</span> line<span class="sym">;</span>
  <span class="sym">}</span>
  <span class="kwd">print_revcomp</span><span class="sym">(</span>header<span class="sym">,</span> segment<span class="sym">);</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

