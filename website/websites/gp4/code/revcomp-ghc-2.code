<span class="hl com">{-# OPTIONS -fbang-patterns #-}</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Don Stewart</span>
<span class="hl slc">--</span>

<span class="hl kwa">import qualified</span> Data.ByteString.Char8 <span class="hl kwa">as</span> S
<span class="hl kwa">import</span> Data.ByteString.Base
<span class="hl kwa">import</span> Foreign

main <span class="hl sym">=</span> <span class="hl kwa">do</span>
    <span class="hl sym">(</span>s<span class="hl sym">:</span>ss<span class="hl sym">) &lt;-</span> S.lines `fmap` S.getContents
    process s ss <span class="hl sym">[]</span>

process <span class="hl sym">!</span>s xs&#64;<span class="hl sym">(</span>~<span class="hl sym">(</span>x<span class="hl sym">:</span>xx<span class="hl sym">))</span> acc
    <span class="hl sym">|</span> S.null s      <span class="hl sym">=</span> writeFasta acc
    <span class="hl sym">|</span> null xs       <span class="hl sym">=</span> revcomp s <span class="hl sym">&gt;&gt;</span> writeFasta <span class="hl sym">(</span>s<span class="hl sym">:</span>acc<span class="hl sym">)</span>
    <span class="hl sym">|</span> h <span class="hl sym">==</span> <span class="hl str">'&gt;'</span>      <span class="hl sym">=</span> writeFasta acc <span class="hl sym">&gt;&gt;</span> S.putStrLn s <span class="hl sym">&gt;&gt;</span> process x xx <span class="hl sym">[]</span>
    <span class="hl sym">|</span> otherwise     <span class="hl sym">=</span> revcomp s <span class="hl sym">&gt;&gt;</span> process x xx <span class="hl sym">(</span>s<span class="hl sym">:</span>acc<span class="hl sym">)</span>
  <span class="hl kwa">where</span>
    <span class="hl sym">(</span>h<span class="hl sym">,</span>t<span class="hl sym">)  =</span> uncons s

uncons s <span class="hl sym">= (</span>w2c <span class="hl sym">(</span>unsafeHead s<span class="hl sym">),</span> unsafeTail s<span class="hl sym">)</span>

comp c <span class="hl sym">=</span> c2w $ <span class="hl kwa">case</span> w2c c <span class="hl kwa">of</span>
    <span class="hl str">'A'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'T'</span><span class="hl sym">;</span> <span class="hl str">'a'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'T'</span><span class="hl sym">;</span> <span class="hl str">'C'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'G'</span><span class="hl sym">;</span> <span class="hl str">'c'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'G'</span><span class="hl sym">;</span> <span class="hl str">'G'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'C'</span>
    <span class="hl str">'g'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'C'</span><span class="hl sym">;</span> <span class="hl str">'T'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'A'</span><span class="hl sym">;</span> <span class="hl str">'t'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'A'</span><span class="hl sym">;</span> <span class="hl str">'U'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'A'</span><span class="hl sym">;</span> <span class="hl str">'u'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'A'</span>
    <span class="hl str">'M'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'K'</span><span class="hl sym">;</span> <span class="hl str">'m'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'K'</span><span class="hl sym">;</span> <span class="hl str">'R'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'Y'</span><span class="hl sym">;</span> <span class="hl str">'r'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'Y'</span><span class="hl sym">;</span> <span class="hl str">'Y'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'R'</span>
    <span class="hl str">'y'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'R'</span><span class="hl sym">;</span> <span class="hl str">'K'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'M'</span><span class="hl sym">;</span> <span class="hl str">'k'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'M'</span><span class="hl sym">;</span> <span class="hl str">'V'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'B'</span><span class="hl sym">;</span> <span class="hl str">'v'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'B'</span>
    <span class="hl str">'H'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'D'</span><span class="hl sym">;</span> <span class="hl str">'h'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'D'</span><span class="hl sym">;</span> <span class="hl str">'D'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'H'</span><span class="hl sym">;</span> <span class="hl str">'d'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'H'</span><span class="hl sym">;</span> <span class="hl str">'B'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'V'</span><span class="hl sym">;</span> <span class="hl str">'b'</span> <span class="hl sym">-&gt;</span> <span class="hl str">'V'</span><span class="hl sym">;</span> x  <span class="hl sym">-&gt;</span> x

writeFasta <span class="hl sym">[]     =</span> return <span class="hl sym">()</span>
writeFasta <span class="hl sym">(</span>t<span class="hl sym">:</span>ts<span class="hl sym">) =</span> go ts t
  <span class="hl kwa">where</span>
    go <span class="hl sym">[] !</span>s
        <span class="hl sym">|</span> S.null s  <span class="hl sym">=</span> return <span class="hl sym">()</span>
        <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> S.putStrLn l <span class="hl sym">&gt;&gt;</span> go <span class="hl sym">[]</span> r
        <span class="hl kwa">where</span> <span class="hl sym">(</span>l<span class="hl sym">,</span>r<span class="hl sym">) =</span> S.splitAt <span class="hl num">60</span> s
    go ss <span class="hl sym">!</span>s
        <span class="hl sym">|</span> ln <span class="hl sym">&gt;=</span> <span class="hl num">60</span>  <span class="hl sym">=</span> S.putStrLn l               <span class="hl sym">&gt;&gt;</span> go ss r
        <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> S.putStr s <span class="hl sym">&gt;&gt;</span> S.putStrLn a <span class="hl sym">&gt;&gt;</span> go <span class="hl sym">(</span>tail ss<span class="hl sym">)</span> b
        <span class="hl kwa">where</span>
            ln    <span class="hl sym">=</span> S.length s
            <span class="hl sym">(</span>l<span class="hl sym">,</span>r<span class="hl sym">) =</span> S.splitAt <span class="hl num">60</span> s
            <span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">) =</span> S.splitAt <span class="hl sym">(</span><span class="hl num">60</span><span class="hl sym">-</span>ln<span class="hl sym">) (</span>head ss<span class="hl sym">)</span>

<span class="hl slc">--</span>
<span class="hl slc">-- An inplace reverse. Since we have a uniquness here, just use the FFI as an ST monad</span>
<span class="hl slc">--</span>
revcomp <span class="hl sym">(</span>PS fp s l<span class="hl sym">) =</span> withForeignPtr fp $ \p <span class="hl sym">-&gt;</span> rc <span class="hl sym">(</span>p `plusPtr` s<span class="hl sym">)</span> <span class="hl num">0</span> <span class="hl sym">(</span>l<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">where</span>
    rc <span class="hl sym">::</span> Ptr Word8 <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
    rc <span class="hl sym">!</span>p <span class="hl sym">!</span>i <span class="hl sym">!</span>j
        <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> j <span class="hl sym">=</span> <span class="hl kwa">do</span>
            x <span class="hl sym">&lt;-</span> peekByteOff p i
            pokeByteOff p i . comp <span class="hl sym">=&lt;&lt;</span> peekByteOff p j
            pokeByteOff p j <span class="hl sym">(</span>comp x<span class="hl sym">)</span>
            rc p <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span>j<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> if i <span class="hl sym">==</span> j <span class="hl kwa">then</span> pokeByteOff p i . comp <span class="hl sym">=&lt;&lt;</span> peekByteOff p i
                                <span class="hl kwa">else</span> return <span class="hl sym">()</span>
