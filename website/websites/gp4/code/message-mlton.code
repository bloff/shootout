<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * Contributed by Vesa Karvonen</span>
<span class="hl com"> *</span>
<span class="hl com"> * Cheap concurrency on top of MLton's user level threads.</span>
<span class="hl com"> *)</span>

<span class="hl kwa">open</span> MLton.Thread

<span class="hl com">(* these should be in a library *)</span>
<span class="hl kwa">fun</span> pop l <span class="hl sym">=</span> <span class="hl kwa">case</span> <span class="hl sym">!</span>l <span class="hl kwa">of</span> v<span class="hl sym">::</span>s <span class="hl sym">=&gt;</span> v <span class="hl kwa">before</span> l <span class="hl sym">:=</span> s
<span class="hl kwa">fun</span> push l v <span class="hl sym">=</span> l <span class="hl sym">:=</span> v <span class="hl sym">:: !</span>l

<span class="hl kwa">fun</span> repeat n f x <span class="hl sym">=</span> <span class="hl kwa">if</span> n<span class="hl sym">&lt;=</span><span class="hl num">0</span> <span class="hl kwa">then</span> x <span class="hl kwa">else</span> repeat <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> f <span class="hl sym">(</span>f x<span class="hl sym">)</span>

<span class="hl com">(* an implementation of cooperative asynchronous message passing *)</span>
<span class="hl kwa">val</span> rdy <span class="hl sym">=</span> ref <span class="hl sym">([] :</span> Runnable.t list<span class="hl sym">)</span>
<span class="hl kwa">fun</span> newC <span class="hl sym">() = (</span>ref <span class="hl sym">[],</span> ref <span class="hl sym">[])</span>
<span class="hl kwa">fun</span> put <span class="hl sym">(</span>ms<span class="hl sym">,</span> gs<span class="hl sym">)</span> m <span class="hl sym">=</span>
    <span class="hl kwa">case</span> <span class="hl sym">!</span>gs <span class="hl kwa">of</span> <span class="hl sym">[] =&gt;</span> push ms m
              <span class="hl sym">|</span> g<span class="hl sym">::</span>s <span class="hl sym">=&gt;</span> switch <span class="hl sym">(</span><span class="hl kwa">fn</span> t <span class="hl sym">=&gt; (</span>push rdy <span class="hl sym">(</span>prepare <span class="hl sym">(</span>t<span class="hl sym">, ()))</span>
                                       <span class="hl sym">;</span> prepare <span class="hl sym">(</span>g<span class="hl sym">,</span> m<span class="hl sym">)</span> <span class="hl kwa">before</span> gs <span class="hl sym">:=</span> s<span class="hl sym">))</span>
<span class="hl kwa">fun</span> get <span class="hl sym">(</span>ms<span class="hl sym">,</span> gs<span class="hl sym">) =</span> <span class="hl kwa">case</span> <span class="hl sym">!</span>ms <span class="hl kwa">of</span> <span class="hl sym">[] =&gt;</span> switch <span class="hl sym">(</span><span class="hl kwa">fn</span> t <span class="hl sym">=&gt; (</span>push gs t <span class="hl sym">;</span> pop rdy<span class="hl sym">))</span>
                             <span class="hl sym">|</span> m<span class="hl sym">::</span>s <span class="hl sym">=&gt;</span> m <span class="hl kwa">before</span> ms <span class="hl sym">:=</span> s

<span class="hl com">(* main program *)</span>
<span class="hl kwa">fun</span> mkLink om <span class="hl sym">=</span> <span class="hl kwa">let val</span> im <span class="hl sym">=</span> newC <span class="hl sym">()</span> <span class="hl kwa">fun</span> lp <span class="hl sym">() = (</span>put om <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">+</span> get im<span class="hl sym">) ;</span> lp <span class="hl sym">())</span>
                <span class="hl kwa">in</span> push rdy <span class="hl sym">(</span>prepare <span class="hl sym">(</span>new lp<span class="hl sym">, ())) ;</span> im <span class="hl kwa">end</span>
<span class="hl kwa">val</span> e <span class="hl sym">=</span> newC <span class="hl sym">()</span>
<span class="hl kwa">val</span> b <span class="hl sym">=</span> repeat <span class="hl num">500</span> mkLink e
<span class="hl kwa">val</span> n <span class="hl sym">=</span> valOf <span class="hl sym">(</span><span class="hl kwa">Int</span>.fromString <span class="hl sym">(</span>hd <span class="hl sym">(</span>CommandLine.arguments <span class="hl sym">())))</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> print <span class="hl sym">(</span><span class="hl kwa">Int</span>.toString <span class="hl sym">(</span>repeat n <span class="hl sym">(</span><span class="hl kwa">fn</span> s <span class="hl sym">=&gt; (</span>put b <span class="hl num">0</span> <span class="hl sym">;</span> s<span class="hl sym">+</span>get e<span class="hl sym">))</span> <span class="hl num">0</span><span class="hl sym">)</span>^<span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
