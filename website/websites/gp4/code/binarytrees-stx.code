<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Isaac Gouy *&quot;</span><span class="hl sym">!</span>

<span class="hl com">&quot;* SPLITFILE=binarytrees.st *&quot;</span><span class="hl sym">!</span>

Object subclass<span class="hl sym">:#</span>TreeNode
   instanceVariableNames<span class="hl sym">:</span><span class="hl str">'left right item'</span>
   classVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span><span class="hl str">''</span>
   category<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>TreeNode class methodsFor<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span><span class="hl sym">!</span>
main   <span class="hl kwa">self</span> binarytrees<span class="hl sym">:</span> Smalltalk commandLineArguments last asNumber to<span class="hl sym">:</span> Stdout
<span class="hl sym">!</span>

binarytrees<span class="hl sym">:</span> n to<span class="hl sym">:</span> output   <span class="hl sym">|</span> minDepth maxDepth stretchDepth check longLivedTree iterations <span class="hl sym">|</span>   minDepth <span class="hl sym">:=</span> <span class="hl num">4</span><span class="hl sym">.</span>   maxDepth <span class="hl sym">:=</span> minDepth <span class="hl sym">+</span> <span class="hl num">2</span> max<span class="hl sym">:</span> n<span class="hl sym">.</span>   stretchDepth <span class="hl sym">:=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">.</span>   check <span class="hl sym">:= (</span>TreeNode bottomUpTree<span class="hl sym">:</span> <span class="hl num">0</span> depth<span class="hl sym">:</span> stretchDepth<span class="hl sym">)</span> itemCheck<span class="hl sym">.</span>   output      nextPutAll<span class="hl sym">:</span> <span class="hl str">'stretch tree of depth '</span><span class="hl sym">;</span> print<span class="hl sym">:</span> stretchDepth<span class="hl sym">;</span> tab<span class="hl sym">;</span>      nextPutAll<span class="hl sym">:</span> <span class="hl str">' check: '</span><span class="hl sym">;</span> print<span class="hl sym">:</span> check<span class="hl sym">;</span> cr<span class="hl sym">.</span>   longLivedTree <span class="hl sym">:=</span> TreeNode bottomUpTree<span class="hl sym">:</span> <span class="hl num">0</span> depth<span class="hl sym">:</span> maxDepth<span class="hl sym">.</span>   minDepth to<span class="hl sym">:</span> maxDepth by<span class="hl sym">:</span> <span class="hl num">2</span> do<span class="hl sym">: [:</span>depth<span class="hl sym">|</span>      iterations <span class="hl sym">:=</span> <span class="hl num">1</span> bitShift<span class="hl sym">:</span> maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">.</span>      check <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>      <span class="hl num">1</span> to<span class="hl sym">:</span> iterations do<span class="hl sym">: [:</span>i<span class="hl sym">|</span>         check <span class="hl sym">:=</span> check <span class="hl sym">+ (</span>TreeNode bottomUpTree<span class="hl sym">:</span> i depth<span class="hl sym">:</span> depth<span class="hl sym">)</span> itemCheck<span class="hl sym">.</span>         check <span class="hl sym">:=</span> check <span class="hl sym">+ (</span>TreeNode bottomUpTree<span class="hl sym">: -</span><span class="hl num">1</span><span class="hl sym">*</span>i depth<span class="hl sym">:</span> depth<span class="hl sym">)</span> itemCheck         <span class="hl sym">].</span>      output         print<span class="hl sym">:  (</span><span class="hl num">2</span><span class="hl sym">*</span>iterations<span class="hl sym">);</span> tab<span class="hl sym">;</span>         nextPutAll<span class="hl sym">:</span> <span class="hl str">' trees of depth '</span><span class="hl sym">;</span> print<span class="hl sym">:</span> depth<span class="hl sym">;</span> tab<span class="hl sym">;</span>         nextPutAll<span class="hl sym">:</span> <span class="hl str">' check: '</span><span class="hl sym">;</span> print<span class="hl sym">:</span> check<span class="hl sym">;</span> cr      <span class="hl sym">].</span>   output      nextPutAll<span class="hl sym">:</span> <span class="hl str">'long lived tree of depth '</span><span class="hl sym">;</span> print<span class="hl sym">:</span> maxDepth<span class="hl sym">;</span> tab<span class="hl sym">;</span>      nextPutAll<span class="hl sym">:</span> <span class="hl str">' check: '</span><span class="hl sym">;</span> print<span class="hl sym">:</span> longLivedTree itemCheck<span class="hl sym">;</span> cr
<span class="hl sym">! !</span>

<span class="hl sym">!</span>TreeNode methodsFor<span class="hl sym">:</span> <span class="hl str">'initialize-release'</span><span class="hl sym">!</span>left<span class="hl sym">:</span> leftChild right<span class="hl sym">:</span> rightChild item<span class="hl sym">:</span> anItem   left <span class="hl sym">:=</span> leftChild<span class="hl sym">.</span>   right <span class="hl sym">:=</span> rightChild<span class="hl sym">.</span>   item <span class="hl sym">:=</span> anItem
<span class="hl sym">! !!</span>TreeNode methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>itemCheck   <span class="hl sym">^</span>left isNil       ifTrue<span class="hl sym">: [</span>item<span class="hl sym">]</span> ifFalse<span class="hl sym">: [</span>item <span class="hl sym">+ (</span>left itemCheck <span class="hl sym">-</span> right itemCheck<span class="hl sym">)]</span>
<span class="hl sym">! !!</span>TreeNode class methodsFor<span class="hl sym">:</span> <span class="hl str">'instance creation'</span><span class="hl sym">!</span>bottomUpTree<span class="hl sym">:</span> anItem depth<span class="hl sym">:</span> anInteger   <span class="hl sym">^(</span>anInteger <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>       ifTrue<span class="hl sym">: [</span>         <span class="hl kwa">self</span>             left<span class="hl sym">: (</span><span class="hl kwa">self</span> bottomUpTree<span class="hl sym">:</span> <span class="hl num">2</span><span class="hl sym">*</span>anItem <span class="hl sym">-</span> <span class="hl num">1</span> depth<span class="hl sym">:</span> anInteger <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>             right<span class="hl sym">: (</span><span class="hl kwa">self</span> bottomUpTree<span class="hl sym">:</span> <span class="hl num">2</span><span class="hl sym">*</span>anItem depth<span class="hl sym">:</span> anInteger <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>              item<span class="hl sym">:</span> anItem         <span class="hl sym">]</span>      ifFalse<span class="hl sym">: [</span><span class="hl kwa">self</span> left<span class="hl sym">:</span> <span class="hl kwa">nil</span> right<span class="hl sym">:</span> <span class="hl kwa">nil</span> item<span class="hl sym">:</span> anItem<span class="hl sym">]</span>
<span class="hl sym">!</span>left<span class="hl sym">:</span> leftChild right<span class="hl sym">:</span> rightChild item<span class="hl sym">:</span> anItem         <span class="hl sym">^(</span><span class="hl kwa">super</span> new<span class="hl sym">)</span> left<span class="hl sym">:</span> leftChild right<span class="hl sym">:</span> rightChild item<span class="hl sym">:</span> anItem
<span class="hl sym">! !</span>

