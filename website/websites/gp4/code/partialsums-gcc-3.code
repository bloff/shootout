<span class="com">/*</span>
<span class="com">The Computer Language Shootout</span>
<span class="com">http://shootout.alioth.debian.org/</span>
<span class="com">Contributed by Mike Pall</span>
<span class="com">Modified by bearophile, Jan 28 2006</span>
<span class="com"></span>
<span class="com">Compile with:</span>
<span class="com">-O3 -s -fomit-frame-pointer -funroll-loops -ffast-math</span>
<span class="com">*/</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;math.h&gt;</span>

<span class="kwb">void</span> <span class="kwd">compute</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
    <span class="kwc">register</span> <span class="kwb">int</span> k <span class="sym">=</span> n<span class="sym">;</span>
    <span class="kwb">double</span> sum1 <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> sum2 <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> sum3 <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> sum4 <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> sum5 <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> sum6 <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>

    <span class="com">/*</span>
<span class="com">    Yes, I (Mike Pall) tried using a double as a primary or secondary loop variable.</span>
<span class="com">    But the x86 ABI requires a cleared x87 FPU stack before every call</span>
<span class="com">    (e.g. to pow()) which nullifies any performance gains.</span>
<span class="com">    */</span>
    <span class="dir">#define kd ((double)k)</span>

    <span class="kwa">for</span><span class="sym">(;</span> k<span class="sym">--; )</span> sum1 <span class="sym">+=</span> <span class="kwd">pow</span><span class="sym">(</span><span class="num">2.0</span><span class="sym">/</span><span class="num">3.0</span><span class="sym">,</span> kd<span class="sym">);</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">(2/3)^k</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum1<span class="sym">);</span>

	sum1 <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">;</span> k<span class="sym">++) {</span>
        sum1 <span class="sym">+=</span> <span class="kwd">pow</span><span class="sym">(</span>kd<span class="sym">, -</span><span class="num">0.5</span><span class="sym">);</span>
        sum2 <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/(</span>kd<span class="sym">*(</span>kd<span class="sym">+</span><span class="num">1.0</span><span class="sym">));</span>
        <span class="kwb">double</span> sk <span class="sym">=</span> <span class="kwd">sin</span><span class="sym">(</span>kd<span class="sym">);</span>
        sum3 <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/(</span>kd<span class="sym">*</span>kd<span class="sym">*</span>kd <span class="sym">*</span> sk<span class="sym">*</span>sk<span class="sym">);</span>
        <span class="kwb">double</span> ck <span class="sym">=</span> <span class="kwd">cos</span><span class="sym">(</span>kd<span class="sym">);</span>
        sum4 <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/(</span>kd<span class="sym">*</span>kd<span class="sym">*</span>kd <span class="sym">*</span> ck<span class="sym">*</span>ck<span class="sym">);</span>
        sum5 <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/</span>kd<span class="sym">;</span>
        sum6 <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/(</span>kd<span class="sym">*</span>kd<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">k^-0.5</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum1<span class="sym">);</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">1/k(k+1)</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum2<span class="sym">);</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Flint Hills</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum3<span class="sym">);</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Cookson Hills</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum4<span class="sym">);</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Harmonic</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum5<span class="sym">);</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Riemann Zeta</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum6<span class="sym">);</span>

    sum1 <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">)</span> sum1 <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/</span>kd<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">)</span> sum1 <span class="sym">-=</span> <span class="num">1.0</span><span class="sym">/</span>kd<span class="sym">;</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Alternating Harmonic</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum1<span class="sym">);</span>

    sum1 <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">&lt;=</span> <span class="num">2</span><span class="sym">*</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> k <span class="sym">+=</span> <span class="num">4</span><span class="sym">)</span> sum1 <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/</span>kd<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">3</span><span class="sym">;</span> k <span class="sym">&lt;=</span> <span class="num">2</span><span class="sym">*</span>n<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">4</span><span class="sym">)</span> sum1 <span class="sym">-=</span> <span class="num">1.0</span><span class="sym">/</span>kd<span class="sym">;</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Gregory</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum1<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">) {</span>
	<span class="kwd">compute</span><span class="sym">(</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) );</span>
	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
