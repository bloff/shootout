<span class="slc">%  The Great Computer Language Shootout</span>
<span class="slc">%   http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">%   contributed by Mark Scandariato</span>
<span class="slc">%</span>
<span class="slc">%   erl -noshell -noinput -run pidigits main 7</span>


<span class="sym">-</span><span class="kwa">module</span><span class="sym">(</span>pidigits<span class="sym">).</span>
<span class="sym">-</span><span class="kwa">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">]).</span>

<span class="slc">% conversion</span>
<span class="kwd">is_safe</span><span class="sym">(</span>Z<span class="sym">,</span> N<span class="sym">) -&gt;</span> N <span class="sym">==</span> <span class="kwd">extr</span><span class="sym">(</span>Z<span class="sym">,</span> <span class="num">4</span><span class="sym">).</span>
<span class="kwd">next</span><span class="sym">(</span>Z<span class="sym">)       -&gt;</span> <span class="kwd">extr</span><span class="sym">(</span>Z<span class="sym">,</span> <span class="num">3</span><span class="sym">).</span>
<span class="kwd">prod</span><span class="sym">(</span>Z<span class="sym">,</span> N<span class="sym">)    -&gt;</span> <span class="kwd">comp</span><span class="sym">({</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>N<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">},</span> Z<span class="sym">).</span>
<span class="kwd">cons</span><span class="sym">(</span>Z<span class="sym">,</span> Zp<span class="sym">)   -&gt;</span> <span class="kwd">comp</span><span class="sym">(</span>Z<span class="sym">,</span> Zp<span class="sym">).</span>

<span class="slc">% LFT</span>
<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>unit<span class="sym">, {</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">}).</span>
<span class="kwd">comp</span><span class="sym">({</span>Q<span class="sym">,</span>R<span class="sym">,</span>S<span class="sym">,</span>T<span class="sym">}, {</span>Qp<span class="sym">,</span> Rp<span class="sym">,</span> Sp<span class="sym">,</span> Tp<span class="sym">}) -&gt;</span>
    <span class="sym">{</span>Q<span class="sym">*</span>Qp <span class="sym">+</span> R<span class="sym">*</span>Sp<span class="sym">,</span> Q<span class="sym">*</span>Rp <span class="sym">+</span> R<span class="sym">*</span>Tp<span class="sym">,</span> S<span class="sym">*</span>Qp <span class="sym">+</span> T<span class="sym">*</span>Sp<span class="sym">,</span> S<span class="sym">*</span>Rp <span class="sym">+</span> T<span class="sym">*</span>Tp<span class="sym">}.</span>
<span class="kwd">extr</span><span class="sym">({</span>Q<span class="sym">,</span>R<span class="sym">,</span>S<span class="sym">,</span>T<span class="sym">},</span> X<span class="sym">) -&gt; (</span>Q <span class="sym">*</span> X <span class="sym">+</span> R<span class="sym">)</span> <span class="kwa">div</span> <span class="sym">(</span>S <span class="sym">*</span> X <span class="sym">+</span> T<span class="sym">).</span>

<span class="kwd">lft</span><span class="sym">(</span>K<span class="sym">) -&gt; {</span>K<span class="sym">,</span> <span class="num">4</span><span class="sym">*</span>K<span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>K<span class="sym">+</span><span class="num">1</span><span class="sym">}.</span>

<span class="kwd">stream</span><span class="sym">(</span>N<span class="sym">) -&gt;</span> <span class="kwd">stream</span><span class="sym">(</span>N<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">, ?</span>unit<span class="sym">, []).</span>
<span class="kwd">stream</span><span class="sym">(</span>N<span class="sym">,</span> N<span class="sym">,</span> _<span class="sym">,</span> _<span class="sym">,</span> P<span class="sym">) -&gt;</span> <span class="kwd">print</span><span class="sym">(</span>N<span class="sym">,</span>P<span class="sym">);</span>
<span class="kwd">stream</span><span class="sym">(</span>N<span class="sym">,</span> C<span class="sym">,</span> K<span class="sym">,</span> Z<span class="sym">,</span> P<span class="sym">) -&gt;</span>
    Y <span class="sym">=</span> <span class="kwd">next</span><span class="sym">(</span>Z<span class="sym">),</span>
    <span class="kwa">case</span> <span class="kwd">is_safe</span><span class="sym">(</span>Z<span class="sym">,</span> Y<span class="sym">)</span> <span class="kwa">of</span>
        true  <span class="sym">-&gt;</span>
            <span class="kwd">stream</span><span class="sym">(</span>N<span class="sym">,</span> C<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> K<span class="sym">,</span> <span class="kwd">prod</span><span class="sym">(</span>Z<span class="sym">,</span>Y<span class="sym">),</span> <span class="kwd">update</span><span class="sym">(</span>C<span class="sym">,</span>Y<span class="sym">,</span>P<span class="sym">));</span>
        false <span class="sym">-&gt;</span>
            <span class="kwd">stream</span><span class="sym">(</span>N<span class="sym">,</span> C<span class="sym">,</span> K<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">cons</span><span class="sym">(</span>Z<span class="sym">,</span> <span class="kwd">lft</span><span class="sym">(</span>K<span class="sym">)),</span> P<span class="sym">)</span>
    <span class="kwa">end</span><span class="sym">.</span>


<span class="kwd">update</span><span class="sym">(</span>C<span class="sym">,</span> D<span class="sym">,</span> P<span class="sym">)</span> <span class="kwa">when</span> C <span class="kwa">rem</span> <span class="num">10</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">,</span> C <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">-&gt;</span>
    <span class="kwd">print</span><span class="sym">(</span>C<span class="sym">,</span> P<span class="sym">),</span>
    <span class="sym">[</span>D<span class="sym">];</span>

<span class="kwd">update</span><span class="sym">(</span>_<span class="sym">,</span> D<span class="sym">,</span> P<span class="sym">) -&gt; [</span>D<span class="sym">|</span>P<span class="sym">].</span>


<span class="kwd">print</span><span class="sym">(</span>C<span class="sym">,</span> P<span class="sym">) -&gt;</span> <span class="kwd">do_print</span><span class="sym">(</span>C<span class="sym">,</span> lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>P<span class="sym">)).</span>


<span class="kwd">do_print</span><span class="sym">(</span>C<span class="sym">, [])</span> <span class="kwa">when</span> C <span class="kwa">rem</span> <span class="num">10</span> <span class="sym">==</span> <span class="num">0</span> <span class="sym">-&gt;</span> io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:~p~n&quot;</span><span class="sym">, [</span>C<span class="sym">]);</span>
<span class="kwd">do_print</span><span class="sym">(</span>C<span class="sym">, []) -&gt;</span> io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;~*.1c:~p~n&quot;</span><span class="sym">, [</span><span class="num">10</span> <span class="sym">-</span> C <span class="kwa">rem</span> <span class="num">10</span><span class="sym">,</span> $\t<span class="sym">,</span> C<span class="sym">]);</span>
<span class="kwd">do_print</span><span class="sym">(</span>C<span class="sym">, [</span>H<span class="sym">|</span>T<span class="sym">]) -&gt;</span> io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;~p&quot;</span><span class="sym">, [</span>H<span class="sym">]),</span> <span class="kwd">do_print</span><span class="sym">(</span>C<span class="sym">,</span> T<span class="sym">).</span>


<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
    <span class="kwd">main</span><span class="sym">(</span>N<span class="sym">),</span>
    erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>

<span class="kwd">main</span><span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">when</span> N <span class="sym">&gt;</span> <span class="num">1</span> <span class="sym">-&gt;</span> <span class="kwd">stream</span><span class="sym">(</span>N<span class="sym">).</span>
