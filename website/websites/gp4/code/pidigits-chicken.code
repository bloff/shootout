<span class="hl slc">; The Computer Language Shootout</span>
<span class="hl slc">; http://shootout.alioth.debian.org/</span>
<span class="hl slc">; pidigits: chicken version</span>
<span class="hl slc">; Sven Hartrumpf 2005-04-12</span>
<span class="hl slc">; Implements 'Spigot' algorithm origionally due to Stanly Rabinowitz.</span>
<span class="hl slc">; This program is based on an implementation for SCM by Aubrey Jaffer and</span>
<span class="hl slc">; Jerry D. Hedden.</span>

<span class="hl sym">(</span>declare <span class="hl sym">(</span>disable-interrupts<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>pi n d<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* (</span><span class="hl slc">;(r (inexact-&gt;exact (floor (exp (* d (log 10)))))) ; 10^d</span>
         <span class="hl sym">(</span>r <span class="hl sym">(</span>do <span class="hl sym">((</span>s <span class="hl num">1</span> <span class="hl sym">(*</span> <span class="hl num">10</span> s<span class="hl sym">)) (</span>i d <span class="hl sym">(</span>- i <span class="hl num">1</span><span class="hl sym">))) ((</span>zero? i<span class="hl sym">)</span> s<span class="hl sym">)))</span> <span class="hl slc">; chicken: this line is faster</span>
         <span class="hl sym">(</span>p <span class="hl sym">(+ (</span>quotient n d<span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">))</span>
         <span class="hl sym">(</span>m <span class="hl sym">(</span>quotient <span class="hl sym">(*</span> p d <span class="hl num">3322</span><span class="hl sym">)</span> <span class="hl num">1000</span><span class="hl sym">))</span>
         <span class="hl sym">(</span>a <span class="hl sym">(</span>make-vector <span class="hl sym">(+</span> m <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">))</span>
         <span class="hl sym">(</span>digits <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> a m <span class="hl num">4</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span>j <span class="hl num">1</span> <span class="hl sym">(+</span> j <span class="hl num">1</span><span class="hl sym">))</span>
         <span class="hl sym">(</span>q <span class="hl num">0 0</span><span class="hl sym">)</span>
         <span class="hl sym">(</span>b <span class="hl num">2</span> <span class="hl sym">(</span>remainder q r<span class="hl sym">)))</span>
      <span class="hl sym">((&gt;</span> j p<span class="hl sym">))</span>
      <span class="hl sym">(</span>do <span class="hl sym">((</span>k m <span class="hl sym">(</span>- k <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">((</span>zero? k<span class="hl sym">))</span>
        <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> q <span class="hl sym">(+</span> q <span class="hl sym">(* (</span>vector-ref a k<span class="hl sym">)</span> r<span class="hl sym">)))</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>t <span class="hl sym">(+ (*</span> k <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)))</span> <span class="hl slc">; maybe use something like bit-lsh</span>
          <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> a k <span class="hl sym">(</span>remainder q t<span class="hl sym">))</span> <span class="hl slc">; quotient/remainder like in mzscheme would speedup this and the the next line</span>
          <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> q <span class="hl sym">(*</span> k <span class="hl sym">(</span>quotient q t<span class="hl sym">)))))</span>
      <span class="hl sym">(</span>let<span class="hl sym">* ((</span>s <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string <span class="hl sym">(+</span> b <span class="hl sym">(</span>quotient q r<span class="hl sym">))))</span>
             <span class="hl sym">(</span>l <span class="hl sym">(</span>string-<span class="hl kwa">length</span> s<span class="hl sym">)))</span>
        <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span><span class="hl kwa">and</span> <span class="hl sym">(&gt;</span> l <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl slc">; chicken: needs this cond because it uses floats for d&gt;5 (leads to appended . or .0), for version after 1.89 use 2, before 1.89 use 1 in this line and the following 2 lines</span>
                    <span class="hl sym">(</span>char<span class="hl sym">=</span>? <span class="hl sym">(</span>string-ref s <span class="hl sym">(</span>- l <span class="hl num">1</span><span class="hl sym">))</span> #\.<span class="hl sym">))</span>
               <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> l <span class="hl sym">(</span>- l <span class="hl num">1</span><span class="hl sym">))))</span>
        <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((&gt;</span> j <span class="hl num">1</span><span class="hl sym">)</span>
               <span class="hl sym">(</span>do <span class="hl sym">((</span>l l <span class="hl sym">(+</span> l <span class="hl num">1</span><span class="hl sym">)))</span>
                 <span class="hl sym">((&gt;=</span> l d<span class="hl sym">))</span>
                 <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((&lt;</span> digits n<span class="hl sym">)</span>
                        <span class="hl sym">(</span>write-char #\0<span class="hl sym">)</span>
                        <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> digits <span class="hl sym">(+</span> digits <span class="hl num">1</span><span class="hl sym">))</span>
                        <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span>zero? <span class="hl sym">(</span>modulo digits <span class="hl num">10</span><span class="hl sym">))</span>
                               <span class="hl sym">(</span>display <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">) (</span>write digits<span class="hl sym">) (</span>newline<span class="hl sym">))))))))</span>
        <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
          <span class="hl sym">((=</span> i l<span class="hl sym">))</span>
          <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((&lt;</span> digits n<span class="hl sym">)</span>
                 <span class="hl sym">(</span>write-char <span class="hl sym">(</span>string-ref s i<span class="hl sym">))</span>
                 <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> digits <span class="hl sym">(+</span> digits <span class="hl num">1</span><span class="hl sym">))</span>
                 <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((</span>zero? <span class="hl sym">(</span>modulo digits <span class="hl num">10</span><span class="hl sym">))</span>
                        <span class="hl sym">(</span>display <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">) (</span>write digits<span class="hl sym">) (</span>newline<span class="hl sym">))))))))))</span>

<span class="hl slc">; chicken: d maximally 10 (when using inexact-&gt;exact in r calculation: 9), d minimally (still with correct results) 3</span>

<span class="hl sym">(</span>pi <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">)))</span> <span class="hl num">10</span><span class="hl sym">)</span><span class="hl slc">; implements the shootout benchmark</span>
<span class="hl slc">;(do ((i (string-&gt;number (car (command-line-arguments))) (+ i 10)) (n 100 (- n 1))) ((&lt;= n 0)) (pi i 10)) ; for getting measurable runtime</span>
