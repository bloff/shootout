<span class="slc">#!/usr/bin/ruby</span>
<span class="slc">#</span>
<span class="slc"># The Great Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># fannkuch in Ruby</span>
<span class="slc"># Contributed by Glenn Parker, March 2005</span>

<span class="kwa">def</span> <span class="kwd">permute</span><span class="sym">(</span>size<span class="sym">, &amp;</span>block)
  <span class="kwa">def</span> <span class="kwd">permute1</span><span class="sym">(</span>head<span class="sym">,</span> tail<span class="sym">, &amp;</span>block)
    tail<span class="sym">.</span>length<span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span>i<span class="sym">|</span>
      head<span class="sym">.</span><span class="kwd">push</span><span class="sym">(</span>tail<span class="sym">.</span><span class="kwd">delete_at</span><span class="sym">(</span>i))
      <span class="kwa">if</span> tail<span class="sym">.</span>empty?
	<span class="kwa">yield</span> head<span class="sym">.</span>dup
      <span class="kwa">else</span>
	<span class="kwd">permute1</span><span class="sym">(</span>head<span class="sym">,</span> tail<span class="sym">, &amp;</span>block)
      <span class="kwa">end</span>
      tail<span class="sym">.</span><span class="kwd">insert</span><span class="sym">(</span>i<span class="sym">,</span> head<span class="sym">.</span>pop)
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwd">permute1</span><span class="sym">([], (</span><span class="num">1</span><span class="sym">..</span>size)<span class="sym">.</span>to_a<span class="sym">, &amp;</span>block)
<span class="kwa">end</span>

N = <span class="sym">(</span><span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">1</span>)<span class="sym">.</span>to_i

maxflips = <span class="num">0</span>
<span class="kwd">permute</span><span class="sym">(</span>N) <span class="kwa">do</span> <span class="sym">|</span>list<span class="sym">|</span>
  flips = <span class="num">0</span>
  <span class="kwa">while</span> <span class="sym">(</span>count = list<span class="sym">.</span>first) <span class="sym">!</span>= <span class="num">1</span>
    list<span class="sym">[</span><span class="num">0</span><span class="sym">...</span>count<span class="sym">]</span> = list<span class="sym">[</span><span class="num">0</span><span class="sym">...</span>count<span class="sym">].</span>reverse<span class="sym">!</span>
    flips <span class="sym">+</span>= <span class="num">1</span>
  <span class="kwa">end</span>
  maxflips = flips <span class="kwa">if</span> maxflips <span class="sym">&lt;</span> flips
<span class="kwa">end</span>

puts <span class="str">&quot;Pfannkuchen(#{N})</span> = <span class="slc">#{maxflips}&quot;</span>

