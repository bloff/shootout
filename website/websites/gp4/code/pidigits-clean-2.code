<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy (Clean novice)</span>
<span class="com">*/</span>

<span class="kwa">module</span> pidigits
<span class="kwa">import</span> StdEnv<span class="sym">,</span>LanguageShootout<span class="sym">,</span>BigInt

Start <span class="sym">=</span> format <span class="num">1 1</span> <span class="sym">(</span>stream argi <span class="sym">[]</span> unit ts<span class="sym">)</span> <span class="str">&quot;&quot;</span>

stream n digits z <span class="sym">[</span>x<span class="sym">:</span>xs<span class="sym">]</span>
   <span class="sym">|</span> n &gt; <span class="num">0</span>
      <span class="sym">|</span> isSafe z y
         <span class="sym">=</span> stream <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>digits <span class="sym">++ [</span>toChar<span class="sym">(</span>y <span class="sym">+</span> <span class="num">48</span><span class="sym">)])(</span>produce z y<span class="sym">) [</span>x<span class="sym">:</span>xs<span class="sym">]</span>
         <span class="sym">=</span> stream n digits <span class="sym">(</span>consume z x<span class="sym">)</span> xs
   <span class="sym">=</span> digits
   <span class="kwa">where</span> y <span class="sym">=</span> next z

ts <span class="sym">= [</span>T <span class="sym">(</span>toBigInt k<span class="sym">) (</span>toBigInt<span class="sym">(</span><span class="num">4</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span><span class="sym">))</span> zero <span class="sym">(</span>toBigInt<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">)) \\</span> k <span class="sym">&lt;- [</span><span class="num">1</span><span class="sym">..]]</span>
next z <span class="sym">=</span> entier <span class="sym">(</span>toReal <span class="sym">(</span>extract z three<span class="sym">))</span>
isSafe z n <span class="sym">= (</span>n <span class="sym">==</span> entier <span class="sym">(</span>toReal <span class="sym">(</span>extract z four<span class="sym">)) )</span>
produce z n <span class="sym">=</span> compose <span class="sym">(</span>T ten <span class="sym">(</span>toBigInt <span class="sym">(-</span><span class="num">10</span><span class="sym">*</span>n<span class="sym">))</span> zero one<span class="sym">)</span> z
consume z z` <span class="sym">=</span> compose z z`

<span class="sym">::</span> Transform <span class="sym">=</span> T BigInt BigInt BigInt BigInt
extract <span class="sym">(</span>T q r s t<span class="sym">)</span> x <span class="sym">= (</span>q <span class="sym">*</span> x <span class="sym">+</span> r<span class="sym">) / (</span>s <span class="sym">*</span> x <span class="sym">+</span> t<span class="sym">)</span>
unit <span class="sym">=</span> T one zero zero one
compose <span class="sym">(</span>T q r s t<span class="sym">) (</span>T q` r` s` t`<span class="sym">)</span>
	<span class="sym">= (</span>T <span class="sym">(</span>q<span class="sym">*</span>q` <span class="sym">+</span> r<span class="sym">*</span>s`<span class="sym">)(</span>q<span class="sym">*</span>r` <span class="sym">+</span> r<span class="sym">*</span>t`<span class="sym">)(</span>s<span class="sym">*</span>q` <span class="sym">+</span> t<span class="sym">*</span>s`<span class="sym">)(</span>s<span class="sym">*</span>r` <span class="sym">+</span> t<span class="sym">*</span>t`<span class="sym">))</span>

<span class="slc">// BigInt constants</span>
three <span class="sym">=</span> toBigInt <span class="num">3</span>
four <span class="sym">=</span> toBigInt <span class="num">4</span>
ten <span class="sym">=</span> toBigInt <span class="num">10</span>


format <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!.[</span><span class="kwb">Char</span><span class="sym">] !{#</span><span class="kwb">Char</span><span class="sym">} -&gt; {#</span><span class="kwb">Char</span><span class="sym">}</span>
format n i <span class="sym">[]</span> s
   <span class="sym">|</span> n <span class="sym">==</span> <span class="num">1</span>   <span class="sym">=</span> s
   <span class="sym">|</span> n &lt; <span class="num">10</span>   <span class="sym">=</span> format <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> i <span class="sym">[] (</span>s <span class="sym">+++</span> <span class="str">&quot; &quot;</span><span class="sym">)</span>
              <span class="sym">= (</span>s <span class="sym">+++</span> <span class="str">&quot;\t :&quot;</span> <span class="sym">+++</span> toString <span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span><span class="sym">)</span>
format n i <span class="sym">[</span>c<span class="sym">:</span>digits<span class="sym">]</span> s
   <span class="sym">|</span> n &lt; <span class="num">10</span>   <span class="sym">=</span> format <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> digits s`
              <span class="sym">=</span> format  <span class="num">1</span>   <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> digits <span class="sym">(</span>s` <span class="sym">+++</span> <span class="str">&quot;\t :&quot;</span> <span class="sym">+++</span> toString i <span class="sym">+++</span> <span class="str">&quot;\n&quot;</span><span class="sym">)</span>
   <span class="kwa">where</span> s` <span class="sym">=</span> s <span class="sym">+++</span> toString c




