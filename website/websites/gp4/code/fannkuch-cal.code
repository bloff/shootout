<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
module Fannkuch<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude using
    typeClass <span class="hl sym">=</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">;</span>
    typeConstructor <span class="hl sym">=</span> <span class="hl kwc">Boolean</span><span class="hl sym">,</span> Int<span class="hl sym">,</span> <span class="hl kwc">String</span><span class="hl sym">;</span>
    dataConstructor <span class="hl sym">=</span> False<span class="hl sym">,</span> True<span class="hl sym">;</span>
    function <span class="hl sym">=</span> seq<span class="hl sym">,</span> max<span class="hl sym">,</span> eager<span class="hl sym">,</span> stringToInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Debug using
    function <span class="hl sym">=</span> show<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Bits using
    function <span class="hl sym">=</span> bitwiseXor<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwc">List</span> using
    function <span class="hl sym">=</span> map<span class="hl sym">,</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Utilities</span><span class="hl sym">.</span><span class="hl kwc">MessageFormat</span> using
    function <span class="hl sym">=</span> formatWithPattern<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Utilities</span><span class="hl sym">.</span><span class="hl kwc">Locale</span> using
    function <span class="hl sym">=</span> invariantLocale<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Utilities</span><span class="hl sym">.</span><span class="hl kwc">Math</span> using
    function <span class="hl sym">=</span> power<span class="hl sym">,</span> sin<span class="hl sym">,</span> cos<span class="hl sym">,</span> sqrt<span class="hl sym">;</span>
    <span class="hl sym">;</span>


data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.PrintStream&quot;</span> <span class="hl kwa">private</span> JPrintStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;static field java.lang.System.out&quot;</span>
    <span class="hl kwa">private</span> stdout <span class="hl sym">::</span> JPrintStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method print&quot;</span>
    <span class="hl kwa">private</span> print <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> <span class="hl kwc">String</span> <span class="hl sym">-&gt; ();</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;int[]&quot;</span> JIntArray<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;newArray&quot;</span> newArray <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JIntArray<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;subscriptArray&quot;</span> subscript <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;updateArray&quot;</span> update <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>

<span class="hl com">/** creates an initial sequence, 0 1 2 3 ...*/</span>
initSeq <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> JIntArray<span class="hl sym">;</span>
initSeq <span class="hl sym">!</span>size <span class="hl sym">=</span>
    let
        go <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> JIntArray<span class="hl sym">;</span>
        go <span class="hl sym">!</span>array <span class="hl sym">!</span>i <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">==</span> size then
                array
            <span class="hl kwa">else</span>
                update array i i
                `seq`
                go <span class="hl kwd">array</span> <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">;</span>
    in
        <span class="hl kwd">go</span> <span class="hl sym">(</span>newArray size<span class="hl sym">)</span> <span class="hl num">0</span>
    <span class="hl sym">;</span>

<span class="hl com">/** prints a sequence*/</span>
printSeq <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
printSeq <span class="hl sym">!</span>array <span class="hl sym">!</span>start <span class="hl sym">!</span>end <span class="hl sym">=</span>
    <span class="hl kwa">if</span> start <span class="hl sym">==</span> end then
        print stdout <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
    <span class="hl kwa">else</span>
        print <span class="hl kwd">stdout</span> <span class="hl sym">(</span><span class="hl kwd">show</span> <span class="hl sym">(</span>array `subscript` start <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">))</span>
        `seq`
        printSeq <span class="hl kwd">array</span> <span class="hl sym">(</span>start <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> end
    <span class="hl sym">;</span>

<span class="hl com">/** rotate elements of array left by one place,</span>
<span class="hl com"> * e.g. 1 2 3 -&gt; 2 3 1.</span>
<span class="hl com"> */</span>
rotateL <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
rotateL <span class="hl sym">!</span>array <span class="hl sym">!</span>length <span class="hl sym">=</span>
    let
        elem0 <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        elem0 <span class="hl sym">=</span> eager $ array `subscript` <span class="hl num">0</span><span class="hl sym">;</span>

        go <span class="hl sym">::</span> Int <span class="hl sym">-&gt; ();</span>
        go <span class="hl sym">!</span>i <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">==</span> length then
                <span class="hl sym">()</span>
            <span class="hl kwa">else</span>
                update array <span class="hl kwd">i</span> <span class="hl sym">(</span>array `subscript` <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">))</span>
                `seq`
                <span class="hl kwd">go</span> <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">;</span>
    in
        elem0
        `seq`
        go <span class="hl num">0</span>
        `seq`
        update array length elem0
    <span class="hl sym">;</span>

<span class="hl com">/** copy an array*/</span>
copyArray <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> JIntArray <span class="hl sym">-&gt;</span> JIntArray <span class="hl sym">-&gt;</span> JIntArray<span class="hl sym">;</span>
copyArray <span class="hl sym">!</span>start <span class="hl sym">!</span>end <span class="hl sym">!</span>to <span class="hl sym">!</span>from <span class="hl sym">=</span>
    <span class="hl kwa">if</span> start <span class="hl sym">==</span> end then
        to
    <span class="hl kwa">else</span>
        update to <span class="hl kwd">start</span> <span class="hl sym">(</span>from `subscript` start<span class="hl sym">)</span>
        `seq`
        <span class="hl kwd">copyArray</span> <span class="hl sym">(</span>start <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> end to from
    <span class="hl sym">;</span>

<span class="hl com">/** reverse elements of an array between start and end (inclusive)*/</span>
reverse <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
reverse <span class="hl sym">!</span>array <span class="hl sym">!</span>start <span class="hl sym">!</span>end <span class="hl sym">=</span>
    let
        swapHelper <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        swapHelper <span class="hl sym">!</span>array <span class="hl sym">!</span>i <span class="hl sym">!</span>j <span class="hl sym">!</span>iValue <span class="hl sym">!</span>jValue <span class="hl sym">=</span>
            update array i jValue
            `seq`
            update array j iValue
            <span class="hl sym">;</span>
    in
        <span class="hl kwa">if</span> start <span class="hl sym">&lt;</span> end then
            swapHelper
                array
                start
                end
                <span class="hl sym">(</span>array `subscript` start<span class="hl sym">)</span>
                <span class="hl sym">(</span>array `subscript` end<span class="hl sym">)</span>
            `seq`
            reverse <span class="hl kwd">array</span> <span class="hl sym">(</span>start <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) (</span>end <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl kwa">else</span>
            <span class="hl sym">()</span>
    <span class="hl sym">;</span>

<span class="hl com">/** count the 'flips' until 1 is at the head of the array*/</span>
countFlips <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
countFlips <span class="hl sym">!</span>array <span class="hl sym">!</span>count <span class="hl sym">!</span>m <span class="hl sym">=</span>
    <span class="hl kwa">if</span> subscript array <span class="hl num">0</span> <span class="hl sym">==</span> <span class="hl num">0</span> then
        count
    <span class="hl kwa">else</span>
        reverse array <span class="hl kwd">0</span> <span class="hl sym">(</span>array `subscript` <span class="hl num">0</span><span class="hl sym">)</span>
        `seq`
        countFlips <span class="hl kwd">array</span> <span class="hl sym">(</span>count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> m
    <span class="hl sym">;</span>

<span class="hl com">/** set counts for controlling next permutations*/</span>
setCount <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
setCount <span class="hl sym">!</span>array <span class="hl sym">!</span>r <span class="hl sym">=</span>
    <span class="hl kwa">if</span> r <span class="hl sym">==</span> <span class="hl num">1</span> then
        r
    <span class="hl kwa">else</span>
        update <span class="hl kwd">array</span> <span class="hl sym">(</span>r <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> r
        `seq`
        setCount <span class="hl kwd">array</span> <span class="hl sym">(</span>r <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">;</span>

<span class="hl com">/** compute the next permuation - return -1 if there are no more*/</span>
nextPerm <span class="hl sym">::</span> JIntArray <span class="hl sym">-&gt;</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
nextPerm <span class="hl sym">!</span>perm <span class="hl sym">!</span>counts <span class="hl sym">!</span>r <span class="hl sym">!</span>n <span class="hl sym">=</span>
    <span class="hl kwa">if</span> r <span class="hl sym">==</span> n then
        <span class="hl sym">-</span><span class="hl num">1</span>
    <span class="hl kwa">else</span>
        rotateL perm r
        `seq`
        <span class="hl sym">(</span>
            <span class="hl kwa">if</span> update counts <span class="hl kwd">r</span> <span class="hl sym">(</span>counts `subscript` r <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) &gt;</span> <span class="hl num">0</span> then
                r
            <span class="hl kwa">else</span>
                nextPerm perm <span class="hl kwd">counts</span> <span class="hl sym">(</span>r <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> n
        <span class="hl sym">)</span>
    <span class="hl sym">;</span>

fannkuch <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
fannkuch <span class="hl sym">!</span>n <span class="hl sym">=</span>
    let
        loop <span class="hl sym">::</span>
            JIntArray <span class="hl sym">-&gt;</span> JIntArray <span class="hl sym">-&gt;</span> JIntArray <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        loop <span class="hl sym">!</span>perm <span class="hl sym">!</span>permCopy <span class="hl sym">!</span>count <span class="hl sym">!</span>r <span class="hl sym">!</span>maxFlips <span class="hl sym">!</span>dispCount <span class="hl sym">=</span>
            <span class="hl kwa">if</span> r <span class="hl sym">== -</span><span class="hl num">1</span> then
                maxFlips
            <span class="hl kwa">else</span>
                copyArray <span class="hl num">0</span> n permCopy perm
                `seq`
                <span class="hl sym">(</span>
                    <span class="hl slc">//we want to display the first 30 sequences</span>
                    <span class="hl kwa">if</span> dispCount <span class="hl sym">&lt; (</span><span class="hl num">30</span> <span class="hl sym">::</span> Int<span class="hl sym">)</span> then
                        printSeq perm <span class="hl num">0</span> n
                        `seq`
                        loop
                            perm
                            permCopy
                            count
                            <span class="hl sym">(</span>nextPerm perm <span class="hl kwd">count</span> <span class="hl sym">(</span>setCount count r<span class="hl sym">)</span> n<span class="hl sym">)</span>
                            <span class="hl sym">(</span>max <span class="hl kwd">maxFlips</span> <span class="hl sym">(</span>countFlips permCopy <span class="hl kwd">0</span> <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)))</span>
                            <span class="hl sym">(</span>dispCount <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                    <span class="hl kwa">else</span>

                        loop
                            perm
                            permCopy
                            count
                            <span class="hl sym">(</span>nextPerm perm <span class="hl kwd">count</span> <span class="hl sym">(</span>setCount count r<span class="hl sym">)</span> n<span class="hl sym">)</span>
                            <span class="hl sym">(</span>max <span class="hl kwd">maxFlips</span> <span class="hl sym">(</span>countFlips permCopy <span class="hl kwd">0</span> <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)))</span>
                            dispCount
                <span class="hl sym">)</span>
            <span class="hl sym">;</span>
    in
        <span class="hl kwd">loop</span> <span class="hl sym">(</span>initSeq n<span class="hl sym">) (</span>newArray n<span class="hl sym">) (</span>newArray n<span class="hl sym">)</span> n <span class="hl num">0 0</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span><span class="hl kwc">String</span><span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    let
        n <span class="hl sym">=</span> eager $ <span class="hl kwd">stringToInt</span> <span class="hl sym">(</span>head args<span class="hl sym">);</span>
    in
        print
            stdout
            <span class="hl sym">(</span>
                <span class="hl str">&quot;Pfannkuchen(&quot;</span>
                <span class="hl sym">++</span> show n
                <span class="hl sym">++</span> <span class="hl str">&quot;) = &quot;</span>
                <span class="hl sym">++</span> <span class="hl kwd">show</span> <span class="hl sym">(</span>fannkuch n<span class="hl sym">)</span>
                <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
            <span class="hl sym">)</span>
    <span class="hl sym">;</span>

