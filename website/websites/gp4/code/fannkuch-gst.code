<span class="str">&quot;  The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy

   To run: gst -QI /usr/local/share/smalltalk/gst.im fannkuch.st -a 7
&quot;</span>

<span class="sym">!</span>Integer methodsFor<span class="sym">:</span> <span class="str">'arithmetic'</span><span class="sym">!

</span>fannkuch
   <span class="str">&quot;adjust for 1-indexed-arrays&quot;</span>
   <span class="sym">|</span> perm perm1 count maxPerm maxFlipsCount m n r  <span class="sym">|
</span>   perm <span class="sym">:=</span> Array new<span class="sym">:</span> self withAll<span class="sym">:</span> <span class="num">1</span>.
   perm1 <span class="sym">:= (</span><span class="num">1</span> to<span class="sym">:</span> self<span class="sym">)</span> asArray.
   count <span class="sym">:=</span> Array new<span class="sym">:</span> self withAll<span class="sym">:</span> <span class="num">1</span>.
   maxPerm <span class="sym">:=</span> Array new<span class="sym">:</span> self withAll<span class="sym">:</span> <span class="num">1</span>.
   maxFlipsCount <span class="sym">:=</span> <span class="num">0</span>.
   m <span class="sym">:=</span> self.
   n <span class="sym">:=</span> self <span class="sym">+</span> <span class="num">1</span>.
   r <span class="sym">:=</span> n.

   <span class="sym">[	|</span> flipsCount k k2  <span class="sym">|

      [</span>r ~<span class="sym">=</span><span class="num">2</span><span class="sym">]</span> whileTrue<span class="sym">: [
</span>         count at<span class="sym">:</span> r <span class="num">- 1</span> put<span class="sym">:</span> r.
         r <span class="sym">:=</span> r <span class="num">- 1
</span>      <span class="sym">]</span>.

      <span class="sym">((</span>perm1 at<span class="sym">:</span> <span class="num">1</span><span class="sym">) =</span> <span class="num">1</span> <span class="kwa">or</span><span class="sym">: [(</span>perm1 at<span class="sym">:</span> m<span class="sym">) =</span> m<span class="sym">])</span> ifFalse<span class="sym">: [
</span>         <span class="num">1</span> to<span class="sym">:</span> self <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span> perm at<span class="sym">:</span> i put<span class="sym">: (</span>perm1 at<span class="sym">:</span> i<span class="sym">)]</span>.
         flipsCount <span class="sym">:=</span> <span class="num">0</span>.

         <span class="sym">[(</span>k <span class="sym">:=</span> perm at<span class="sym">:</span> <span class="num">1</span><span class="sym">) =</span> <span class="num">1</span><span class="sym">]</span> whileFalse<span class="sym">: [
</span>            k2 <span class="sym">:=</span> k<span class="sym">+</span><span class="num">1</span> bitShift<span class="sym">: -</span><span class="num">1</span>.
            <span class="num">1</span> to<span class="sym">:</span> k2 <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">| |</span> temp ki <span class="sym">|
</span>               ki <span class="sym">:=</span> k <span class="sym">-</span> i <span class="sym">+</span> <span class="num">1</span>.  <span class="str">&quot;adjust for 1-indexed-arrays&quot;</span>
               temp <span class="sym">:=</span> perm at<span class="sym">:</span> i.
               perm at<span class="sym">:</span> i put<span class="sym">: (</span>perm at<span class="sym">:</span> ki<span class="sym">)</span>.
               perm at<span class="sym">:</span> ki put<span class="sym">:</span> temp
            <span class="sym">]</span>.
            flipsCount <span class="sym">:=</span> flipsCount <span class="sym">+</span> <span class="num">1</span>.
         <span class="sym">]</span>.

         <span class="sym">(</span>flipsCount <span class="sym">&gt;</span> maxFlipsCount<span class="sym">)</span> ifTrue<span class="sym">: [
</span>            maxFlipsCount <span class="sym">:=</span> flipsCount.
            <span class="num">1</span> to<span class="sym">:</span> self <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span> maxPerm at<span class="sym">:</span> i put<span class="sym">: (</span>perm1 at<span class="sym">:</span> i<span class="sym">)]</span>.
         <span class="sym">]</span>.
      <span class="sym">]</span>.

      <span class="sym">[	|</span>  perm0 i break <span class="sym">|
         (</span>r <span class="sym">=</span> n<span class="sym">)</span> ifTrue<span class="sym">: [</span>^maxFlipsCount<span class="sym">]</span>.
         perm0 <span class="sym">:=</span> perm1 at<span class="sym">:</span> <span class="num">1</span>.
         i <span class="sym">:=</span> <span class="num">1</span>.
         <span class="sym">[</span>i <span class="sym">&lt;</span> r<span class="sym">]</span> whileTrue<span class="sym">: [ |</span> j <span class="sym">|
</span>            j <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>.
            perm1 at<span class="sym">:</span> i put<span class="sym">: (</span>perm1 at<span class="sym">:</span> j<span class="sym">)</span>.
            i <span class="sym">:=</span> j
         <span class="sym">]</span>.
         perm1 at<span class="sym">:</span> r put<span class="sym">:</span> perm0.

         count at<span class="sym">:</span> r put<span class="sym">: (</span>count at<span class="sym">:</span> r<span class="sym">) -</span> <span class="num">1</span>.
         <span class="sym">(</span>break <span class="sym">:= (</span>count at<span class="sym">:</span> r<span class="sym">) &gt;</span> <span class="num">1</span><span class="sym">)</span> ifFalse<span class="sym">: [</span>r <span class="sym">:=</span> r <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>.
         break
      <span class="sym">]</span> whileFalse.
   <span class="sym">]</span> repeat <span class="sym">! !


</span>Smalltalk arguments first asInteger fannkuch displayNl <span class="sym">!
</span>
