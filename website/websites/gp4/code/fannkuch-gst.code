<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Paolo Bonzini *&quot;</span><span class="sym">!</span>


Object subclass<span class="sym">: #</span>PermGenerator   instanceVariableNames<span class="sym">:</span> <span class="str">'timesRotated perm atEnd'</span>   classVariableNames<span class="sym">:</span> <span class="str">''</span>   poolDictionaries<span class="sym">:</span> <span class="str">''</span>   category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>

<span class="sym">!</span>Array methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>pfannkuchen    <span class="sym">|</span> first complement a b k <span class="sym">|</span>    k <span class="sym">:=</span> <span class="num">0</span><span class="sym">.    [ (</span>first <span class="sym">:=</span> <span class="kwa">self</span> at<span class="sym">:</span> <span class="num">1</span><span class="sym">) ==</span> <span class="num">1</span> <span class="sym">]</span> whileFalse<span class="sym">: [</span>   k <span class="sym">:=</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>   complement <span class="sym">:=</span> first <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>   <span class="num">1</span> to<span class="sym">:</span> first <span class="sym">//</span> <span class="num">2</span> do<span class="sym">: [ :</span>i <span class="sym">|</span>       a <span class="sym">:=</span> <span class="kwa">self</span> at<span class="sym">:</span> i<span class="sym">.</span>       b <span class="sym">:=</span> <span class="kwa">self</span> at<span class="sym">:</span> complement <span class="sym">-</span> i<span class="sym">.</span>       <span class="kwa">self</span> at<span class="sym">:</span> i put<span class="sym">:</span> b<span class="sym">.</span>       <span class="kwa">self</span> at<span class="sym">:</span> complement <span class="sym">-</span> i put<span class="sym">:</span> a<span class="sym">.   ]    ].    ^</span>k<span class="sym">! !!</span>PermGenerator methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>initialize<span class="sym">:</span> size    perm <span class="sym">:= (</span><span class="num">1</span> to<span class="sym">:</span> size<span class="sym">)</span> asArray<span class="sym">.</span>    timesRotated <span class="sym">:=</span> Array new<span class="sym">:</span> size withAll<span class="sym">:</span> <span class="num">0</span><span class="sym">.</span>    atEnd <span class="sym">:=</span> <span class="kwa">false</span><span class="sym">! !!</span>PermGenerator methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>makeNext    <span class="sym">|</span> temp remainder <span class="sym">|</span>    &quot;Generate the next permutation<span class="sym">.</span>&quot;    <span class="num">2</span> to<span class="sym">:</span> perm size do<span class="sym">: [ :</span>r <span class="sym">|</span>   &quot;Rotate the first r items to the left<span class="sym">.</span>&quot;        temp <span class="sym">:=</span> perm at<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span>        <span class="num">1</span> to<span class="sym">:</span> r <span class="sym">-</span> <span class="num">1</span> do<span class="sym">: [ :</span>i <span class="sym">|</span> perm at<span class="sym">:</span> i put<span class="sym">: (</span>perm at<span class="sym">:</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">) ].</span>        perm at<span class="sym">:</span> r put<span class="sym">:</span> temp<span class="sym">.</span>        remainder <span class="sym">:=</span> timesRotated at<span class="sym">:</span> r put<span class="sym">: ((</span>timesRotated at<span class="sym">:</span> r<span class="sym">) +</span> <span class="num">1</span><span class="sym">) \\</span> r<span class="sym">.</span>        remainder <span class="sym">=</span> <span class="num">0</span> ifFalse<span class="sym">: [ ^</span><span class="kwa">self</span> <span class="sym">].</span>   &quot;After r rotations<span class="sym">,</span> the first r items are in their original positions<span class="sym">.</span>    Go on rotating the first r<span class="sym">+</span><span class="num">1</span> items<span class="sym">.</span>&quot;    <span class="sym">].</span>    &quot;We are past the final permutation<span class="sym">.</span>&quot;    atEnd <span class="sym">:=</span> <span class="kwa">true</span><span class="sym">! !!</span>PermGenerator methodsFor<span class="sym">:</span> <span class="str">'benchmarks'</span><span class="sym">!</span>maxPfannkuchenTo<span class="sym">:</span> output   <span class="sym">|</span> max permutation check <span class="sym">|</span>   max <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>   check <span class="sym">:=</span> <span class="num">0</span><span class="sym">.   [</span><span class="kwa">self</span> atEnd<span class="sym">]</span> whileFalse<span class="sym">:      [</span>permutation <span class="sym">:=</span> <span class="kwa">self</span> next<span class="sym">.</span>      check <span class="sym">&lt;</span> <span class="num">30</span> ifTrue<span class="sym">:         [</span>permutation do<span class="sym">: [:</span>each <span class="sym">|</span> output print<span class="sym">:</span> each<span class="sym">].</span>         output nl<span class="sym">.</span>         check <span class="sym">:=</span> check <span class="sym">+</span> <span class="num">1</span><span class="sym">].</span>      max <span class="sym">:=</span> max max<span class="sym">:</span> permutation pfannkuchen<span class="sym">].   ^</span>max<span class="sym">! !!</span>PermGenerator methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>atEnd    <span class="sym">^</span>atEnd<span class="sym">! !!</span>PermGenerator methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>next    <span class="sym">|</span> result <span class="sym">|</span>    result <span class="sym">:=</span> perm copy<span class="sym">.</span>    <span class="kwa">self</span> makeNext<span class="sym">.    ^</span>result<span class="sym">! !!</span>PermGenerator class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>new<span class="sym">:</span> size    <span class="sym">^</span><span class="kwa">self</span> new   initialize<span class="sym">:</span> size<span class="sym">;</span>   yourself<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>fannkuch<span class="sym">:</span> n to<span class="sym">:</span> output   <span class="sym">^(</span>PermGenerator new<span class="sym">:</span> n<span class="sym">)</span> maxPfannkuchenTo<span class="sym">:</span> output<span class="sym">! !</span>
<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>fannkuch   <span class="sym">|</span> n f <span class="sym">|</span>   n <span class="sym">:=</span> <span class="kwa">self</span> arg<span class="sym">.</span>   f <span class="sym">:=</span> <span class="kwa">self</span> fannkuch<span class="sym">:</span> n to<span class="sym">:</span> <span class="kwa">self</span> stdout<span class="sym">.</span>   <span class="kwa">self</span> stdout      nextPutAll<span class="sym">:</span> <span class="str">'Pfannkuchen('</span><span class="sym">,</span> n printString<span class="sym">,</span> <span class="str">') = '</span><span class="sym">;</span>      print<span class="sym">:</span> f printString<span class="sym">;</span> nl<span class="sym">.   ^</span><span class="str">''</span><span class="sym">! !</span>

Tests fannkuch<span class="sym">!</span>
