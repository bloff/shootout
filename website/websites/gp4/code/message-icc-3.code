<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed contributed by Ian Chiew</span>
<span class="hl com"> */</span>

<span class="hl dir">#include &lt;pthread.h&gt;</span>
<span class="hl dir">#include &lt;semaphore.h&gt;</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;assert.h&gt;</span>

<span class="hl dir">#define THREADS 500</span>
<span class="hl dir">#define THREAD_STACK_SIZE (1024 * 100)</span>

<span class="hl kwb">struct</span> inbox <span class="hl sym">{</span>
    sem_t sem<span class="hl sym">;</span>
    <span class="hl kwb">int</span> n<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwb">struct</span> worker <span class="hl sym">{</span>
    <span class="hl kwb">struct</span> inbox inbox<span class="hl sym">, *</span>next_inbox<span class="hl sym">;</span>
    pthread_t thread<span class="hl sym">;</span>
<span class="hl sym">};</span>

<span class="hl kwb">void</span> <span class="hl sym">*</span><span class="hl kwd">work</span><span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*</span>data<span class="hl sym">) {</span>
    <span class="hl kwb">struct</span> worker <span class="hl sym">*</span>worker <span class="hl sym">= (</span><span class="hl kwb">struct</span> worker <span class="hl sym">*)</span>data<span class="hl sym">;</span>

    <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) {</span>
        <span class="hl kwd">assert</span><span class="hl sym">(</span><span class="hl kwd">sem_wait</span><span class="hl sym">(&amp;</span>worker<span class="hl sym">-&gt;</span>inbox<span class="hl sym">.</span>sem<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">);</span>
        worker<span class="hl sym">-&gt;</span>next_inbox<span class="hl sym">-&gt;</span>n <span class="hl sym">=</span> worker<span class="hl sym">-&gt;</span>inbox<span class="hl sym">.</span>n <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl kwd">assert</span><span class="hl sym">(</span><span class="hl kwd">sem_post</span><span class="hl sym">(&amp;</span>worker<span class="hl sym">-&gt;</span>next_inbox<span class="hl sym">-&gt;</span>sem<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">return</span> NULL<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">) {</span>
    <span class="hl kwb">struct</span> worker workers<span class="hl sym">[</span>THREADS<span class="hl sym">];</span>
    <span class="hl kwb">struct</span> inbox main_inbox<span class="hl sym">;</span>
    pthread_attr_t attr<span class="hl sym">;</span>
    <span class="hl kwb">int</span> n<span class="hl sym">,</span> i<span class="hl sym">,</span> j<span class="hl sym">,</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl kwd">assert</span><span class="hl sym">(</span>argc <span class="hl sym">==</span> <span class="hl num">2</span> <span class="hl sym">&amp;&amp; (</span>n <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])) != -</span><span class="hl num">1</span><span class="hl sym">);</span>
    <span class="hl kwd">assert</span><span class="hl sym">(</span><span class="hl kwd">sem_init</span><span class="hl sym">(&amp;</span>main_inbox<span class="hl sym">.</span>sem<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">);</span>
    <span class="hl kwd">assert</span><span class="hl sym">(</span><span class="hl kwd">pthread_attr_init</span><span class="hl sym">(&amp;</span>attr<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">);</span>
    <span class="hl kwd">assert</span><span class="hl sym">(</span><span class="hl kwd">pthread_attr_setstacksize</span><span class="hl sym">(&amp;</span>attr<span class="hl sym">,</span> THREAD_STACK_SIZE<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">);</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> THREADS<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
        workers<span class="hl sym">[</span>i<span class="hl sym">].</span>next_inbox <span class="hl sym">=</span> i <span class="hl sym">==</span> <span class="hl num">0</span> ? <span class="hl sym">&amp;</span>main_inbox <span class="hl sym">: &amp;</span>workers<span class="hl sym">[</span>i <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">].</span>inbox<span class="hl sym">;</span>
        <span class="hl kwd">sem_init</span><span class="hl sym">(&amp;</span>workers<span class="hl sym">[</span>i<span class="hl sym">].</span>inbox<span class="hl sym">.</span>sem<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
        <span class="hl kwd">assert</span><span class="hl sym">(</span><span class="hl kwd">pthread_create</span><span class="hl sym">(&amp;</span>workers<span class="hl sym">[</span>i<span class="hl sym">].</span>thread<span class="hl sym">, &amp;</span>attr<span class="hl sym">,</span> work<span class="hl sym">, &amp;</span>workers<span class="hl sym">[</span>i<span class="hl sym">]) ==</span> <span class="hl num">0</span><span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> j<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
        workers<span class="hl sym">[</span>THREADS <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">].</span>inbox<span class="hl sym">.</span>n <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwd">assert</span><span class="hl sym">(</span><span class="hl kwd">sem_post</span><span class="hl sym">(&amp;</span>workers<span class="hl sym">[</span>THREADS <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">].</span>inbox<span class="hl sym">.</span>sem<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">);</span>
        <span class="hl kwd">assert</span><span class="hl sym">(</span><span class="hl kwd">sem_wait</span><span class="hl sym">(&amp;</span>main_inbox<span class="hl sym">.</span>sem<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">);</span>
        sum <span class="hl sym">+=</span> main_inbox<span class="hl sym">.</span>n<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>
    <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl sym">}</span>
