<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;</span>

<span class="kwb">int</span> nsievebits<span class="sym">(</span><span class="kwb">int</span> m<span class="sym">){</span>
   <span class="kwa">let</span> notPrime <span class="sym">=</span> <span class="kwa">new</span> BitSet<span class="sym">(</span>m<span class="sym">);</span>
   notPrime<span class="sym">.</span>set<span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
   notPrime<span class="sym">.</span>set<span class="sym">(</span><span class="num">1</span><span class="sym">);</span>

   <span class="kwa">for</span><span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> m<span class="sym">;</span> i<span class="sym">++){</span>
      <span class="kwa">if</span> <span class="sym">(!</span>notPrime<span class="sym">.</span>get<span class="sym">(</span>i<span class="sym">)){</span>
         <span class="kwa">for</span><span class="sym">(</span><span class="kwa">var</span> k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> k <span class="sym">&lt;</span> m<span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">)</span> notPrime<span class="sym">.</span>set<span class="sym">(</span>k<span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwa">return</span> m <span class="sym">-</span> notPrime<span class="sym">.</span>cardinality<span class="sym">;</span>
<span class="sym">}</span>


<span class="kwb">void</span> main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">){</span>

   <span class="kwb">void</span> printPrimes<span class="sym">(</span><span class="kwb">int</span> m<span class="sym">){</span>

      String pad<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> width<span class="sym">){</span>
         <span class="kwa">var</span> s <span class="sym">=</span> i<span class="sym">.</span>toString<span class="sym">;</span>
         <span class="kwa">var</span> p <span class="sym">=</span> width <span class="sym">-</span> s<span class="sym">.</span>length<span class="sym">;</span>
         <span class="kwa">while</span> <span class="sym">(</span>p<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)</span> s <span class="sym">=</span> <span class="str">' '</span> <span class="sym">+</span> s<span class="sym">;</span>
         <span class="kwa">return</span> s<span class="sym">;</span>
      <span class="sym">}</span>

      println<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span> <span class="sym">+</span>  pad<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">) +</span> pad<span class="sym">(</span>nsievebits<span class="sym">(</span>m<span class="sym">),</span><span class="num">9</span><span class="sym">));</span>
   <span class="sym">}</span>

   <span class="kwa">var</span> n <span class="sym">=</span> Integer<span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
   printPrimes<span class="sym">( (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n  <span class="sym">)*</span><span class="num">10000</span> <span class="sym">);</span>
   printPrimes<span class="sym">( (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)*</span><span class="num">10000</span> <span class="sym">);</span>
   printPrimes<span class="sym">( (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)*</span><span class="num">10000</span> <span class="sym">) ;</span>
<span class="sym">}</span>

