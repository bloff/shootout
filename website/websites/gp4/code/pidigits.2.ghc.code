<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Branimir Maksimovic</span>

<span class="com">{- original Haskell implementation from spigot.pdf document</span>
<span class="com"> - I've just added printPi and main, also replaced floor and / with div</span>
<span class="com"> - because for some reason div is much faster</span>
<span class="com"> -}</span>

<span class="kwa">module</span> Main <span class="kwa">where</span>
<span class="kwa">import</span> System
main <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">[</span>n<span class="sym">] &lt;-</span> getArgs
          printPi $ take <span class="sym">(</span>read n<span class="sym">)</span> Main.pi

printPi digits <span class="sym">=</span> printPi' digits <span class="num">10 0</span>
  <span class="kwa">where</span> printPi' <span class="sym">[]</span> ndigs sum' <span class="sym">=</span> <span class="kwa">do</span> mapM_ <span class="sym">(</span>\_ <span class="sym">-&gt;</span> putChar ' '<span class="sym">) [</span><span class="num">1</span>..ndigs<span class="sym">]</span>
                                    putStr $ <span class="str">&quot;\t:&quot;</span> <span class="sym">++</span> show sum' <span class="sym">++</span> <span class="str">&quot;\n&quot;</span>
        printPi' xxs <span class="num">0</span> sum' <span class="sym">=</span> <span class="kwa">do</span> putStr $ <span class="str">&quot;\t:&quot;</span> <span class="sym">++</span> show sum' <span class="sym">++</span> <span class="str">&quot;\n&quot;</span>
                                 printPi' xxs <span class="num">10</span> sum'
        printPi' <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">)</span> ndigs sum' <span class="sym">=</span> <span class="kwa">do</span> putStr $ show x
                                        printPi' xs <span class="sym">(</span>ndigs<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>sum'<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

stream <span class="sym">:: (</span>b<span class="sym">-&gt;</span>c<span class="sym">) -&gt; (</span>b<span class="sym">-&gt;</span>c<span class="sym">-&gt;</span><span class="kwb">Bool</span><span class="sym">) -&gt; (</span>b<span class="sym">-&gt;</span>c<span class="sym">-&gt;</span>b<span class="sym">) -&gt; (</span>b<span class="sym">-&gt;</span>a<span class="sym">-&gt;</span>b<span class="sym">) -&gt;</span> b <span class="sym">-&gt; [</span>a<span class="sym">] -&gt; [</span>c<span class="sym">]</span>
stream next safe prod cons z <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">)</span>
  <span class="sym">=</span> if safe z y
       <span class="kwa">then</span> y <span class="sym">:</span> stream next safe prod cons <span class="sym">(</span>prod z y<span class="sym">) (</span>x<span class="sym">:</span>xs<span class="sym">)</span>
       <span class="kwa">else</span> stream next safe prod cons <span class="sym">(</span>cons z x<span class="sym">)</span> xs
  <span class="kwa">where</span> y <span class="sym">=</span> next z

<span class="kwa">type</span> LFT <span class="sym">= (</span>Integer<span class="sym">,</span> Integer<span class="sym">,</span> Integer<span class="sym">,</span> Integer<span class="sym">)</span>
floorExtr <span class="sym">::</span> LFT <span class="sym">-&gt;</span> Integer <span class="sym">-&gt;</span> Integer
floorExtr <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">)</span> x <span class="sym">= ((</span>fromInteger q<span class="sym">) *</span> fromInteger x <span class="sym">+ (</span>fromInteger r<span class="sym">))</span> `div`
                        <span class="sym">((</span>fromInteger s<span class="sym">) *</span> fromInteger x <span class="sym">+ (</span>fromInteger t<span class="sym">))</span>
unit <span class="sym">::</span> LFT
unit <span class="sym">= (</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">)</span>
comp <span class="sym">::</span> LFT <span class="sym">-&gt;</span> LFT <span class="sym">-&gt;</span> LFT
comp <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">) (</span>u<span class="sym">,</span>v<span class="sym">,</span>w<span class="sym">,</span>x<span class="sym">) = (</span>q<span class="sym">*</span>u<span class="sym">+</span>r<span class="sym">*</span>w<span class="sym">,</span>q<span class="sym">*</span>v<span class="sym">+</span>r<span class="sym">*</span>x<span class="sym">,</span>s<span class="sym">*</span>u<span class="sym">+</span>t<span class="sym">*</span>w<span class="sym">,</span>s<span class="sym">*</span>v<span class="sym">+</span>t<span class="sym">*</span>x<span class="sym">)</span>

pi <span class="sym">=</span> stream next safe prod cons init lfts
  <span class="kwa">where</span>
        init <span class="sym">=</span> unit
        lfts <span class="sym">= [(</span>k<span class="sym">,</span> <span class="num">4</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">) |</span> k<span class="sym">&lt;-[</span><span class="num">1</span>..<span class="sym">]]</span>
        next z <span class="sym">=</span> floorExtr z <span class="num">3</span>
        safe z n <span class="sym">= (</span>n <span class="sym">==</span> floorExtr z <span class="num">4</span><span class="sym">)</span>
        prod z n <span class="sym">=</span> comp <span class="sym">(</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>n<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span> z
        cons z z'  <span class="sym">=</span> comp z z'

