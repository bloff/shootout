<span class="com">&quot;  The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   modified by Ian Osgood &quot;</span>
<span class="com"></span>
<span class="com">!SmallInteger methodsFor: 'shootout'!</span>
<span class="com"></span>
<span class="com">nsieve</span>
<span class="com">   | count isPrime |</span>
<span class="com">   count := 0.</span>
<span class="com">   isPrime := Array new: self withAll: true.</span>
<span class="com"></span>
<span class="com">   2 to: self do: [:i|</span>
<span class="com">      (isPrime at: i) ifTrue: [</span>
<span class="com">         i+i to: self by: i do: [:k| isPrime at: k put: false].</span>
<span class="com">         count := count + 1.</span>
<span class="com">         ].</span>
<span class="com">      ].</span>
<span class="com"></span>
<span class="com">   ^count !</span>
<span class="com"></span>
<span class="com">asPaddedString: width</span>
<span class="com">   | s |</span>
<span class="com">   s := self printString.</span>
<span class="com">   ^(String new: (width - s size) withAll: $ ), s !</span>
<span class="com"></span>
<span class="com">primes</span>
<span class="com">   | m |</span>
<span class="com">   m := (2 raisedTo: self) * 10000.</span>
<span class="com">   Transcript</span>
<span class="com">      show: 'Primes up to '; show: (m asPaddedString: 8);</span>
<span class="com">      show: ((m nsieve) asPaddedString: 9); nl ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">| n |</span>
<span class="com">n := Smalltalk arguments first asInteger.</span>
<span class="com">(n &lt; 2) ifTrue: [n := 2].</span>
<span class="com"></span>
<span class="com"> n      primes.</span>
<span class="com">(n - 1) primes.</span>
<span class="com">(n - 2) primes !</span>
<span class="com"></span>
