<span class="com">&quot;*  The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   modified by Ian Osgood *&quot;</span>

<span class="sym">!</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'shootout'</span><span class="sym">!</span>

nsieve
   <span class="sym">|</span> count isPrime <span class="sym">|</span>
   count <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   isPrime <span class="sym">:=</span> Array new<span class="sym">:</span> <span class="kwa">self</span> withAll<span class="sym">:</span> <span class="kwa">true</span><span class="sym">.</span>

   <span class="num">2</span> to<span class="sym">:</span> <span class="kwa">self</span> do<span class="sym">: [:</span>i<span class="sym">|</span>
      <span class="sym">(</span>isPrime at<span class="sym">:</span> i<span class="sym">)</span> ifTrue<span class="sym">: [</span>
         i<span class="sym">+</span>i to<span class="sym">:</span> <span class="kwa">self</span> by<span class="sym">:</span> i do<span class="sym">: [:</span>k<span class="sym">|</span> isPrime at<span class="sym">:</span> k put<span class="sym">:</span> <span class="kwa">false</span><span class="sym">].</span>
         count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
         <span class="sym">].</span>
      <span class="sym">].</span>

   <span class="sym">^</span>count <span class="sym">!</span>

asPaddedString<span class="sym">:</span> width
   <span class="sym">|</span> s <span class="sym">|</span>
   s <span class="sym">:=</span> <span class="kwa">self</span> printString<span class="sym">.</span>
   <span class="sym">^(</span>String new<span class="sym">: (</span>width <span class="sym">-</span> s size<span class="sym">)</span> withAll<span class="sym">: $ ),</span> s <span class="sym">!</span>

primes
   <span class="sym">|</span> m <span class="sym">|</span>
   m <span class="sym">:= (</span><span class="num">2</span> raisedTo<span class="sym">:</span> <span class="kwa">self</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">.</span>
   Transcript
      show<span class="sym">:</span> <span class="str">'Primes up to '</span><span class="sym">;</span> show<span class="sym">: (</span>m asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);</span>
      show<span class="sym">: ((</span>m nsieve<span class="sym">)</span> asPaddedString<span class="sym">:</span> <span class="num">9</span><span class="sym">);</span> nl <span class="sym">! !</span>


<span class="sym">|</span> n <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger<span class="sym">.</span>
<span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>n <span class="sym">:=</span> <span class="num">2</span><span class="sym">].</span>

 n      primes<span class="sym">.</span>
<span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> primes<span class="sym">.</span>
<span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">)</span> primes <span class="sym">!</span>

