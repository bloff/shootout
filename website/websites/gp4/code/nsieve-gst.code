<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Isaac Gouy</span>
<span class="com">    modified by Eliot Miranda *&quot;</span><span class="sym">!!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>nsieve   <span class="sym">|</span> n <span class="sym">|</span>   n <span class="sym">:=</span> <span class="kwa">self</span> arg<span class="sym">.   (</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>n <span class="sym">:=</span> <span class="num">2</span><span class="sym">].</span>   <span class="kwa">self</span> primeBenchmarkFor<span class="sym">:</span> n to<span class="sym">:</span> <span class="kwa">self</span> stdout using<span class="sym">:</span> Array<span class="sym">.   ^</span><span class="str">''</span><span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>nsieve<span class="sym">:</span> n using<span class="sym">:</span> arrayClass    <span class="sym">|</span> count isPrime <span class="sym">|</span>   count <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>   isPrime <span class="sym">:=</span> arrayClass new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="kwa">true</span><span class="sym">.</span>   <span class="num">2</span> to<span class="sym">:</span> n do<span class="sym">:      [:</span>i <span class="sym">|       (</span>isPrime at<span class="sym">:</span> i<span class="sym">)</span> ifTrue<span class="sym">:          [</span>i <span class="sym">+</span> i to<span class="sym">:</span> n by<span class="sym">:</span> i do<span class="sym">:            [:</span>k <span class="sym">|</span> isPrime at<span class="sym">:</span> k put<span class="sym">:</span> <span class="kwa">false</span><span class="sym">].</span>         count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">]].   ^</span>count<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>primeBenchmarkFor<span class="sym">:</span> v to<span class="sym">:</span> output using<span class="sym">:</span> arrayClass   v to<span class="sym">:</span> v <span class="sym">-</span> <span class="num">2</span> by<span class="sym">: -</span><span class="num">1</span> do<span class="sym">:      [:</span>n<span class="sym">| |</span> m <span class="sym">|</span>      m <span class="sym">:= (</span><span class="num">2</span> raisedTo<span class="sym">:</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">.</span>      output         nextPutAll<span class="sym">:</span> <span class="str">'Primes up to '</span><span class="sym">;</span> nextPutAll<span class="sym">: (</span>m asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);</span>         nextPutAll<span class="sym">: ((</span><span class="kwa">self</span> nsieve<span class="sym">:</span> m using<span class="sym">:</span> arrayClass<span class="sym">)</span> asPaddedString<span class="sym">:</span> <span class="num">9</span><span class="sym">);</span>          nextPut<span class="sym">:</span> Character lf<span class="sym">]! !</span>

Tests nsieve<span class="sym">!</span>
