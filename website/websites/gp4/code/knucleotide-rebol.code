<span class="sym">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> knucleotide<span class="sym">.</span>rebol
rebol<span class="sym">[</span>
        Title<span class="sym">:</span>  <span class="str">&quot;k-nucleotide&quot;</span>
        Author<span class="sym">:</span> <span class="str">&quot;Tom Conlin&quot;</span>
        Date<span class="sym">:</span>    <span class="num">2005</span><span class="sym">-</span><span class="num">11</span><span class="sym">-</span><span class="num">14</span>
        purpose<span class="sym">: {</span>        The Great Computer Language Shootout
                    http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
                 <span class="sym">}</span>
<span class="sym">]</span>

<span class="sym">;;;</span> pedantic padder <span class="kwa">for</span> fixed field wack jobs
pad<span class="sym">:</span> func <span class="sym">[</span>d<span class="sym">[</span>number<span class="sym">!]</span> p<span class="sym">[</span>integer<span class="sym">!]/</span>local r s<span class="sym">][</span>
        s<span class="sym">:</span> to string<span class="sym">!</span> d
        either r<span class="sym">:</span> find<span class="sym">/</span>tail s <span class="str">&quot;.&quot;</span>
                <span class="sym">[</span>insert<span class="sym">/</span>dup tail r <span class="str">&quot;0&quot;</span> p <span class="sym">-</span> length? r<span class="sym">]</span>
                <span class="sym">[</span>insert tail s <span class="str">&quot;.&quot;</span> insert<span class="sym">/</span>dup tail s <span class="str">&quot;0&quot;</span> p<span class="sym">]</span>
        s
<span class="sym">]</span>
<span class="sym">=======</span>
rebol<span class="sym">[</span>
	Title<span class="sym">:</span>  <span class="str">&quot;k-nucleotide&quot;</span>
	Author<span class="sym">:</span> <span class="str">&quot;Tom Conlin&quot;</span>
	Date<span class="sym">:</span>    <span class="num">2005</span><span class="sym">-</span><span class="num">11</span><span class="sym">-</span><span class="num">14</span>
	purpose<span class="sym">: {</span>	The Great Computer Language Shootout
	            http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
	         <span class="sym">}</span>
    version<span class="sym">:</span>
<span class="sym">]</span>

<span class="sym">;;;</span> pedantic padder <span class="kwa">for</span> fixed field wack jobs
pad<span class="sym">:</span> func <span class="sym">[</span>d<span class="sym">[</span>number<span class="sym">!]</span> p<span class="sym">[</span>integer<span class="sym">!]/</span>local r s<span class="sym">][</span>
	s<span class="sym">:</span> to string<span class="sym">!</span> d
	either r<span class="sym">:</span> find<span class="sym">/</span>tail s <span class="str">&quot;.&quot;</span>
		<span class="sym">[</span>insert<span class="sym">/</span>dup tail r <span class="str">&quot;0&quot;</span> p <span class="sym">-</span> length? r<span class="sym">]</span>
		<span class="sym">[</span>insert tail s <span class="str">&quot;.&quot;</span> insert<span class="sym">/</span>dup tail s <span class="str">&quot;0&quot;</span> p<span class="sym">]</span>
	s
<span class="sym">]</span>
<span class="sym">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="num">1.4</span>

<span class="sym">;;;</span> read line<span class="sym">-</span>by<span class="sym">-</span>line a redirected FASTA format file from stdin
set<span class="sym">-</span>modes system<span class="sym">/</span>ports<span class="sym">/</span>input <span class="sym">[</span>lines<span class="sym">:</span> <span class="kwa">false</span> binary<span class="sym">:</span> <span class="kwa">false</span><span class="sym">]</span>

<span class="sym">;;;</span> extract DNA sequence THREE
here<span class="sym">:</span> find<span class="sym">/</span>tail find<span class="sym">/</span>tail copy system<span class="sym">/</span>ports<span class="sym">/</span>input <span class="str">&quot;^/&gt;THREE &quot;</span> <span class="str">&quot;^/&quot;</span>
fasta<span class="sym">:</span> replace<span class="sym">/</span>all  here <span class="str">&quot;^/&quot;</span> <span class="str">&quot;&quot;</span>
len<span class="sym">:</span> length? fasta

k<span class="sym">-</span>nucl<span class="sym">:</span> func <span class="sym">[</span><span class="str">&quot;function to update a hash of k-nucleotide keys and count values&quot;</span>
    k <span class="sym">[</span>integer<span class="sym">!]</span> n<span class="sym">[</span>series<span class="sym">!]</span> hash <span class="sym">[</span>block<span class="sym">!] /</span>local l m <span class="sym">][</span>
        m<span class="sym">:</span> copy<span class="sym">/</span>part n k
        either k <span class="sym">=</span> length? m
        <span class="sym">[</span>either l<span class="sym">:</span> find hash<span class="sym">/:</span>k m
                <span class="sym">[</span>l<span class="sym">:</span> next l change l <span class="num">1</span> <span class="sym">+</span> first l<span class="sym">]</span>
                <span class="sym">[</span>insert tail hash<span class="sym">/:</span>k m insert tail hash<span class="sym">/:</span>k <span class="num">1</span><span class="sym">]</span>
        <span class="sym">][</span><span class="kwa">return</span><span class="sym">]</span>
<span class="sym">]</span>

<span class="sym">;;;</span> count all the <span class="num">3</span><span class="sym">-</span> <span class="num">4</span><span class="sym">-</span> <span class="num">6</span><span class="sym">-</span> <span class="num">12</span><span class="sym">-</span> <span class="kwa">and</span> <span class="num">18</span><span class="sym">-</span>nucleotide sequences<span class="sym">,</span>
kay<span class="sym">: [</span><span class="num">1 2 3 4 6 12 18</span><span class="sym">]</span>
mers<span class="sym">:</span> make block<span class="sym">!</span> last kay <span class="sym">;;;</span> could sort <span class="kwa">if not</span> ordered
loop last kay <span class="sym">[</span>insert<span class="sym">/</span>only tail mers make hash<span class="sym">![]]</span>

forall fasta<span class="sym">[</span> kay<span class="sym">:</span> head kay
        forall kay<span class="sym">[</span>k<span class="sym">-</span>nucl first kay fasta mers<span class="sym">]</span>
<span class="sym">]</span>

<span class="sym">;;;</span> <span class="kwa">for</span> all the <span class="num">1</span><span class="sym">-</span>nucleotide <span class="kwa">and</span> <span class="num">2</span><span class="sym">-</span>nucleotide sequences<span class="sym">,</span>
<span class="sym">;;;</span> sorted by descending frequency <span class="kwa">and</span> then ascending k<span class="sym">-</span>nucleotide key
<span class="sym">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> knucleotide<span class="sym">.</span>rebol
repeat i <span class="num">2</span> <span class="sym">[</span>sort<span class="sym">/</span>skip mers<span class="sym">/:</span>i <span class="num">2</span> sort<span class="sym">/</span>skip head reverse mers<span class="sym">/:</span>i <span class="num">2</span>
        foreach <span class="sym">[</span>n c<span class="sym">]</span> head reverse mers<span class="sym">/:</span>i<span class="sym">[</span>print<span class="sym">[</span>uppercase n <span class="kwd">pad</span> <span class="sym">(</span><span class="num">100</span> <span class="sym">*</span> c <span class="sym">/</span> len<span class="sym">)</span> <span class="num">3</span><span class="sym">]]</span>
        print <span class="str">&quot;&quot;</span>
<span class="sym">=======</span>
repeat i <span class="num">2</span> <span class="sym">[</span>sort<span class="sym">/</span>skip mers<span class="sym">/:</span>i <span class="num">2</span> sort<span class="sym">/</span>skip head reverse mers<span class="sym">/:</span>i <span class="num">2</span>
        foreach <span class="sym">[</span>n c<span class="sym">]</span> head reverse mers<span class="sym">/:</span>i<span class="sym">[</span>
            print<span class="sym">[</span>uppercase n <span class="kwd">pad</span>  <span class="sym">(</span>to integer<span class="sym">!(</span><span class="num">100000</span> <span class="sym">*</span> c <span class="sym">/</span> len <span class="sym">+</span> <span class="num">.5</span><span class="sym">))/</span> <span class="num">1000 3</span><span class="sym">]</span>
        <span class="sym">]</span>print <span class="str">&quot;&quot;</span>
<span class="sym">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="num">1.4</span>
<span class="sym">]</span>

<span class="sym">;;;</span> write the count <span class="kwa">and</span> code <span class="kwa">for</span> specific sequences
foreach seq <span class="sym">[</span><span class="str">&quot;GGT&quot;</span> <span class="str">&quot;GGTA&quot;</span> <span class="str">&quot;GGTATT&quot;</span> <span class="str">&quot;GGTATTTTAATT&quot;</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">][</span>
        l<span class="sym">:</span> length? seq <span class="sym">;;;</span> newer REBOL versions would <span class="kwa">not</span> need <span class="kwa">this</span> line
<span class="sym">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> knucleotide<span class="sym">.</span>rebol
        prin <span class="sym">[</span>either c<span class="sym">:</span> select mers<span class="sym">/:</span>l seq <span class="sym">[</span>c<span class="sym">][</span><span class="num">0</span><span class="sym">]]</span> prin tab print seq
<span class="sym">]</span>
<span class="sym">=======</span>
        print rejoin<span class="sym">[</span>either c<span class="sym">:</span> select mers<span class="sym">/:</span>l seq <span class="sym">[</span>c<span class="sym">][</span><span class="str">&quot;0&quot;</span><span class="sym">]</span> tab seq<span class="sym">]</span>
<span class="sym">]</span>
<span class="sym">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="num">1.4</span>
