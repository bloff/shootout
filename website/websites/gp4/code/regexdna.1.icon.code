<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># Icon  regex-dna</span>
<span class="slc"># regex-dna.icn</span>
<span class="slc"># contributed by Charles Evans 2005/12/24</span>

<span class="kwa">link</span> regexp

<span class="kwa">procedure</span> main<span class="sym">()</span>
seq<span class="sym">:=</span><span class="str">&quot;&quot;</span>
<span class="kwa">while</span> seq<span class="sym">||:=</span>reads<span class="sym">(,</span><span class="num">500000</span><span class="sym">)</span>
ilen <span class="sym">:= *</span>seq

map<span class="sym">(</span>seq<span class="sym">)</span> ? <span class="sym">{</span>seq<span class="sym">:=</span><span class="str">&quot;&quot;</span>
		 <span class="kwa">while</span> seq <span class="sym">||:= (</span>tab<span class="sym">(</span>upto<span class="sym">(</span><span class="str">'&gt;</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)))</span>
		   <span class="kwa">do</span> <span class="sym">=</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> tab<span class="sym">(</span>find<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span>
<span class="slc"># \n is more frequent, so check for it alone for speed.</span>
	<span class="sym">}</span>
clen <span class="sym">:= *</span>seq

variants <span class="sym">:= [</span>
      <span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">,</span>
      <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span>
      <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span>
      <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span>
      <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span>
      <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span>
      <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span>
      <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span>
      <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">]</span>
Re_Ordered <span class="sym">:=</span> <span class="num">1</span> <span class="slc"># we don't want duplicate matches from regexp</span>
<span class="kwa">every</span> f<span class="sym">:=!</span>variants <span class="kwa">do</span> <span class="sym">{</span>
	c<span class="sym">:=</span><span class="num">0</span>
	seq ? <span class="kwa">every</span> <span class="sym">(</span>ReFind<span class="sym">(</span>f<span class="sym">))</span> <span class="kwa">do</span> c<span class="sym">+:=</span><span class="num">1</span>
	write<span class="sym">(</span>f<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> c<span class="sym">)</span>
<span class="sym">}</span>
subst <span class="sym">:=[</span>
      <span class="str">&quot;B&quot;</span> <span class="sym">,</span> <span class="str">&quot;(c|g|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;D&quot;</span> <span class="sym">,</span> <span class="str">&quot;(a|g|t)&quot;</span><span class="sym">,</span>   <span class="str">&quot;H&quot;</span> <span class="sym">,</span> <span class="str">&quot;(a|c|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;K&quot;</span> <span class="sym">,</span> <span class="str">&quot;(g|t)&quot;</span><span class="sym">,</span>
      <span class="str">&quot;M&quot;</span> <span class="sym">,</span> <span class="str">&quot;(a|c)&quot;</span><span class="sym">,</span>   <span class="str">&quot;N&quot;</span> <span class="sym">,</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;R&quot;</span> <span class="sym">,</span> <span class="str">&quot;(a|g)&quot;</span><span class="sym">,</span>   <span class="str">&quot;S&quot;</span> <span class="sym">,</span> <span class="str">&quot;(c|g)&quot;</span><span class="sym">,</span>
      <span class="str">&quot;V&quot;</span> <span class="sym">,</span> <span class="str">&quot;(a|c|g)&quot;</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span> <span class="sym">,</span> <span class="str">&quot;(a|t)&quot;</span><span class="sym">,</span>     <span class="str">&quot;Y&quot;</span> <span class="sym">,</span> <span class="str">&quot;(c|t)&quot;</span><span class="sym">]</span>
<span class="slc">#write(&amp;errout,&amp;time)</span>
seq<span class="sym">:=</span>lmap<span class="sym">(</span>subst<span class="sym">,</span>seq<span class="sym">)</span>

<span class="kwa">every</span> write<span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">|</span>ilen<span class="sym">|</span>clen<span class="sym">|*</span>seq<span class="sym">)</span>
<span class="slc">#write(&amp;errout,&amp;time) # 500k=183s</span>
<span class="kwa">end</span> <span class="slc"># main</span>



<span class="kwa">procedure</span> lmap<span class="sym">(</span>pairlist<span class="sym">,</span>str<span class="sym">)</span>
<span class="kwa">local</span> lt<span class="sym">,</span>ss<span class="sym">,</span>cs<span class="sym">,</span>c<span class="sym">,</span>st
lt<span class="sym">:=</span><span class="kwb">list</span><span class="sym">(*</span><span class="kwa">&amp;ascii</span><span class="sym">);</span> ss<span class="sym">:=</span><span class="str">&quot;&quot;</span>

<span class="kwa">while</span> c<span class="sym">:=</span>map<span class="sym">(</span>pop<span class="sym">(</span>pairlist<span class="sym">))</span> <span class="kwa">do</span> <span class="sym">{</span>
  <span class="sym">*</span>c<span class="sym">=</span><span class="num">1</span> <span class="sym">|</span> stop<span class="sym">(</span><span class="str">&quot;lmap got a search string not of length 1&quot;</span><span class="sym">)</span>
  ss<span class="sym">||:=</span>c
  lt<span class="sym">[</span>ord<span class="sym">(</span>c<span class="sym">)]:=</span>pop<span class="sym">(</span>pairlist<span class="sym">)</span>
<span class="sym">}</span>
cs<span class="sym">:=</span><span class="kwb">cset</span><span class="sym">(</span>ss<span class="sym">);</span> st<span class="sym">:=</span><span class="str">&quot;&quot;</span>
str ? <span class="kwa">while</span> st<span class="sym">||:=</span>tab<span class="sym">(</span>upto<span class="sym">(</span>cs<span class="sym">)) |</span> tab<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
	<span class="kwa">do</span> st<span class="sym">||:=</span> lt<span class="sym">[</span>ord<span class="sym">(</span>move<span class="sym">(</span><span class="num">1</span><span class="sym">))] |</span> <span class="kwa">return</span> st
<span class="kwa">end</span> <span class="slc"># lmap</span>
