BUILD COMMANDS FOR: spectralnorm.fsharp

Fri May 23 11:45:11 PDT 2008

cp /home/dunham/gp4/shootout/bench/spectralnorm/spectralnorm.fsharp spectralnorm.fs
rm -f spectralnorm.fsharp_run
/usr/local/bin/mono --runtime=v2.0.50727 /opt/FSharp-1.9.4.17/bin/fscp10.exe -O3  -o spectralnorm.fsharp_run.exe spectralnorm.fs

spectralnorm.fs(13,4): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(15,8): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(15,17): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(15,38): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(18,10): warning FS0035: This construct is deprecated: In a future release of F# expressions of the form '-expr' and '+expr' in composite expressions will be treated as arguments. Consider using either 'expr-expr' or 'expr - expr' for infix subtraction, but not 'expr -expr', and likewise for addition

spectralnorm.fs(20,4): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(22,8): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(22,17): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(22,38): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(41,15): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(41,23): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(42,17): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(42,25): warning FS0062: This construct is for compatibility with OCaml. The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'

spectralnorm.fs(31,14): warning FS0062: This construct is for compatibility with OCaml. Consider using the overloaded operator 'int' instead. This warning can be disabled using '--ml-compatibility', '--no-warn 62' or '#nowarn "62"'
rm spectralnorm.fs

=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/local/bin/mono spectralnorm.fsharp_run.exe %A


PROGRAM OUTPUT
==============
1.274224153
