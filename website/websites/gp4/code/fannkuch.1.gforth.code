\ The Computer Language Shootout
\ http<span class="hl sym">:</span><span class="hl slc">//shootout.alioth.debian.org</span>

\ Contributed by Ian Osgood

\ read NUM from last command line argument
<span class="hl num">0</span><span class="hl sym">.</span> argc &#64; <span class="hl num">1</span><span class="hl sym">-</span> arg <span class="hl sym">&gt;</span>number <span class="hl num">2</span>drop drop constant NUM

create a NUM allot
a NUM <span class="hl num">1</span><span class="hl sym">- +</span> constant a<span class="hl sym">-</span>last
create pan NUM allot
create counts NUM allot
<span class="hl num">0</span> value <span class="hl dir">#perms</span>

<span class="hl sym">: .</span><span class="hl kwd">pan</span> <span class="hl sym">(</span> a <span class="hl sym">-- )</span> NUM <span class="hl num">0</span> <span class="hl kwa">do</span> dup c&#64; <span class="hl num">1</span> u<span class="hl sym">.</span>r <span class="hl num">1</span><span class="hl sym">+</span> loop drop cr <span class="hl sym">;</span>

<span class="hl sym">:</span> <span class="hl kwd">flip</span> <span class="hl sym">(</span> n <span class="hl sym">-- )</span>
  dup pan <span class="hl sym">+</span>  swap <span class="hl num">2</span><span class="hl sym">/</span> pan <span class="hl sym">+</span>  pan <span class="hl kwa">do</span>
    <span class="hl num">1</span><span class="hl sym">-</span>  i c&#64; over c&#64;  i c<span class="hl sym">!</span> over c<span class="hl sym">!</span>
  loop drop <span class="hl sym">;</span>

<span class="hl sym">:</span> <span class="hl kwd">flips</span> <span class="hl sym">( --</span> n <span class="hl sym">)</span>
  <span class="hl num">0</span> begin pan c&#64; <span class="hl num">1</span> <span class="hl sym">&gt;</span> <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl sym">+</span>  pan c&#64; flip repeat <span class="hl sym">;</span>

<span class="hl sym">:</span> <span class="hl kwd">fannkuch</span> <span class="hl sym">( --</span> max<span class="hl sym">-</span>flips <span class="hl sym">)</span>
  NUM <span class="hl num">0</span> <span class="hl kwa">do</span> i <span class="hl num">1</span><span class="hl sym">+</span>  a i <span class="hl sym">+</span> c<span class="hl sym">!</span> loop
  <span class="hl num">0</span> <span class="hl kwd">NUM</span> <span class="hl sym">(</span> max<span class="hl sym">-</span>flips r <span class="hl sym">)</span>
  begin
    \ print first <span class="hl num">30</span> permutations
    <span class="hl dir">#perms 30 &lt; if a .pan  #perms 1+ to #perms then</span>

    \ eliminate bad pans
    a c&#64; <span class="hl num">1</span> <span class="hl sym">&gt;</span> <span class="hl kwa">if</span> a<span class="hl sym">-</span>last c&#64; NUM <span class="hl sym">&lt;</span> <span class="hl kwa">if</span>
      \ fill the pan <span class="hl kwa">and</span> start flipping
      a pan NUM move
      swap flips max swap
    then then

    \ next permutation
    begin dup <span class="hl num">1</span> <span class="hl sym">&gt;</span> <span class="hl kwa">while</span> dup <span class="hl num">1</span><span class="hl sym">-</span> tuck counts <span class="hl sym">+</span> c<span class="hl sym">!</span> repeat
    begin dup <span class="hl sym">&gt;</span>r  a c&#64;  a <span class="hl num">1</span><span class="hl sym">+</span> a r&#64; cmove  a r<span class="hl sym">&gt; +</span> c<span class="hl sym">!</span>      \ roll
          dup counts <span class="hl sym">+</span>  dup c&#64; <span class="hl num">1</span><span class="hl sym">-</span>  dup rot c<span class="hl sym">!</span>  <span class="hl num">0</span><span class="hl sym">=</span>
    <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl sym">+</span>  dup NUM <span class="hl sym">=</span> <span class="hl kwa">if</span> drop exit then
    repeat
  again <span class="hl sym">;</span>

fannkuch <span class="hl sym">.</span><span class="hl str">&quot; Pfannkuchen(&quot;</span> NUM <span class="hl num">1</span> u<span class="hl sym">.</span>r <span class="hl sym">.</span><span class="hl str">&quot; ) = &quot;</span> <span class="hl num">1</span> u<span class="hl sym">.</span>r cr bye
