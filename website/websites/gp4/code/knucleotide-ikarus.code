<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; Derived by Michael D. Adams from the MzScheme varient</span>


<span class="hl sym">(</span>import <span class="hl sym">(</span>rnrs<span class="hl sym">))</span>

<span class="hl slc">;;; Stupid boiler-plate for formatting floating point values</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>roundto digits n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ([</span>e <span class="hl sym">(</span><span class="hl kwa">expt</span> <span class="hl num">10</span> digits<span class="hl sym">)]</span>
         <span class="hl sym">[</span>num <span class="hl sym">(</span>round <span class="hl sym">(</span><span class="hl kwa">abs</span> <span class="hl sym">(*</span> e <span class="hl sym">(</span>exact n<span class="hl sym">))))]</span>
         <span class="hl sym">[</span>str <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string <span class="hl sym">(</span>mod num e<span class="hl sym">))])</span>
    <span class="hl sym">(</span>string-<span class="hl kwa">append</span>
     <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>negative? n<span class="hl sym">)</span> <span class="hl str">&quot;-&quot;</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>
     <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string <span class="hl sym">(</span>div num e<span class="hl sym">))</span>
     <span class="hl str">&quot;.&quot;</span>
     <span class="hl sym">(</span>make-string <span class="hl sym">(</span>- digits <span class="hl sym">(</span>string-<span class="hl kwa">length</span> str<span class="hl sym">))</span> #\0<span class="hl sym">)</span>
     str<span class="hl sym">)))</span>

<span class="hl slc">;; TODO: ikarus doesn't have string-upcase yet</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>upcase str<span class="hl sym">) (</span><span class="hl kwa">list</span>-<span class="hl sym">&gt;</span>string <span class="hl sym">(</span>map char-upcase <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span><span class="hl kwa">list</span> str<span class="hl sym">))))</span>

<span class="hl slc">;; TODO: This function is where the time is spent</span>
<span class="hl slc">;; TODO: could be improved by using string-hash and avoiding string-&gt;symbol</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>all-counts len dna<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>table <span class="hl sym">(</span>make-<span class="hl kwa">eq</span>-hashtable<span class="hl sym">)])</span> <span class="hl slc">;; use string-hash??</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">([</span>s <span class="hl sym">(</span>- <span class="hl sym">(</span>string-<span class="hl kwa">length</span> dna<span class="hl sym">)</span> len<span class="hl sym">)])</span>
      <span class="hl sym">(</span>let<span class="hl sym">* ([</span>seq <span class="hl sym">(</span>substring dna s <span class="hl sym">(+</span> s len<span class="hl sym">))]</span>
             <span class="hl sym">[</span>key <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>symbol seq<span class="hl sym">)]</span> <span class="hl slc">;; slow??</span>
             <span class="hl sym">[</span>cnt <span class="hl sym">(</span>hashtable-ref table key <span class="hl num">0</span><span class="hl sym">)])</span>
        <span class="hl sym">(</span>hashtable-<span class="hl kwa">set</span><span class="hl sym">!</span> table key <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> cnt<span class="hl sym">)))</span>
      <span class="hl sym">(</span>unless <span class="hl sym">(</span>zero? s<span class="hl sym">)</span>
              <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx- s <span class="hl num">1</span><span class="hl sym">))))</span>
    table<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>write-freqs table<span class="hl sym">)</span>
  <span class="hl sym">(</span>let-values <span class="hl sym">([(</span>keys values<span class="hl sym">) (</span>hashtable-entries table<span class="hl sym">)])</span>
    <span class="hl sym">(</span>let <span class="hl sym">([</span>total <span class="hl sym">(</span>inexact <span class="hl sym">(</span><span class="hl kwa">apply</span> <span class="hl sym">+ (</span>vector-<span class="hl sym">&gt;</span><span class="hl kwa">list</span> values<span class="hl sym">)))])</span>
      <span class="hl sym">(</span>vector-for-each
       <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>a<span class="hl sym">)</span>
         <span class="hl sym">(</span>display <span class="hl sym">(</span><span class="hl kwa">car</span> a<span class="hl sym">)) (</span>display <span class="hl str">&quot; &quot;</span><span class="hl sym">)</span>
         <span class="hl sym">(</span>display <span class="hl sym">(</span>roundto <span class="hl num">3</span> <span class="hl sym">(*</span> <span class="hl num">100</span> <span class="hl sym">(/ (</span><span class="hl kwa">cdr</span> a<span class="hl sym">)</span> total<span class="hl sym">)))) (</span>newline<span class="hl sym">))</span>
       <span class="hl sym">(</span>vector-sort <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>a b<span class="hl sym">) (&gt; (</span><span class="hl kwa">cdr</span> a<span class="hl sym">) (</span><span class="hl kwa">cdr</span> b<span class="hl sym">)))</span>
                    <span class="hl sym">(</span>vector-map <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>a b<span class="hl sym">) (</span><span class="hl kwa">cons</span> a b<span class="hl sym">))</span>
                                keys values<span class="hl sym">))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>write-one-freq table key<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>cnt <span class="hl sym">(</span>hashtable-ref table key <span class="hl num">0</span><span class="hl sym">)])</span>
    <span class="hl sym">(</span>display cnt<span class="hl sym">) (</span>display <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>display key<span class="hl sym">) (</span>display <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>define dna
  <span class="hl sym">(</span>let <span class="hl sym">([</span>port <span class="hl sym">(</span>current-input-port<span class="hl sym">)]</span>
        <span class="hl sym">[</span>start <span class="hl str">&quot;&gt;THREE Homo sapiens frequency&quot;</span><span class="hl sym">])</span>
    <span class="hl sym">(</span>let skip <span class="hl sym">((</span>x <span class="hl sym">(</span>get-<span class="hl kwa">line</span> port<span class="hl sym">)))</span>
      <span class="hl sym">(</span>unless <span class="hl sym">(</span>string<span class="hl sym">=</span>? x start<span class="hl sym">)</span>
              <span class="hl sym">(</span>skip <span class="hl sym">(</span>get-<span class="hl kwa">line</span> port<span class="hl sym">))))</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>x <span class="hl sym">(</span>get-<span class="hl kwa">line</span> port<span class="hl sym">))</span>
               <span class="hl sym">(</span>s <span class="hl sym">'()))</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>eof-object? x<span class="hl sym">)</span>
          <span class="hl sym">(</span>upcase <span class="hl sym">(</span><span class="hl kwa">apply</span> string-<span class="hl kwa">append</span> <span class="hl sym">(</span><span class="hl kwa">reverse</span> s<span class="hl sym">)))</span>
          <span class="hl sym">(</span>loop <span class="hl sym">(</span>get-<span class="hl kwa">line</span> port<span class="hl sym">)</span>
                <span class="hl sym">(</span><span class="hl kwa">cons</span> x s<span class="hl sym">))))))</span>

<span class="hl slc">;; 1-nucleotide counts:</span>
<span class="hl sym">(</span>write-freqs <span class="hl sym">(</span>all-counts <span class="hl num">1</span> dna<span class="hl sym">))</span>
<span class="hl sym">(</span>newline<span class="hl sym">)</span>

<span class="hl slc">;; 2-nucleotide counts:</span>
<span class="hl sym">(</span>write-freqs <span class="hl sym">(</span>all-counts <span class="hl num">2</span> dna<span class="hl sym">))</span>
<span class="hl sym">(</span>newline<span class="hl sym">)</span>

<span class="hl slc">;; Specific sequences:</span>
<span class="hl sym">(</span>for-each <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>seq<span class="hl sym">)</span>
            <span class="hl sym">(</span>write-one-freq <span class="hl sym">(</span>all-counts <span class="hl sym">(</span>string-<span class="hl kwa">length</span> seq<span class="hl sym">)</span> dna<span class="hl sym">)</span>
                            <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>symbol seq<span class="hl sym">)))</span>
          <span class="hl sym">'(</span><span class="hl str">&quot;GGT&quot;</span> <span class="hl str">&quot;GGTA&quot;</span> <span class="hl str">&quot;GGTATT&quot;</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">))</span>
