<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    adapted from a program by Paolo Bonzini</span>
<span class="hl com">    contributed by Isaac Gouy *&quot;</span><span class="hl sym">!</span>

Object subclass<span class="hl sym">: #</span>Thread   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'name nextThread token semaphore done'</span>   classVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>   poolDictionaries<span class="hl sym">:</span> <span class="hl str">''</span>   category<span class="hl sym">:</span> <span class="hl str">'BenchmarksGame'</span> <span class="hl sym">!</span>

<span class="hl sym">!</span>Thread methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>
name<span class="hl sym">:</span> anInteger   name <span class="hl sym">:=</span> anInteger <span class="hl sym">! !</span>

<span class="hl sym">!</span>Thread methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>
nextThread<span class="hl sym">:</span> aThread   nextThread <span class="hl sym">:=</span> aThread <span class="hl sym">! !</span>

<span class="hl sym">!</span>Thread methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>tokenNotDone   semaphore wait<span class="hl sym">.   ^</span>token <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">! !</span>

<span class="hl sym">!</span>Thread methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>semaphore<span class="hl sym">:</span> aSemaphore   semaphore <span class="hl sym">:=</span> aSemaphore <span class="hl sym">! !</span>

<span class="hl sym">!</span>Thread methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>done<span class="hl sym">:</span> aSemaphore   done <span class="hl sym">:=</span> aSemaphore <span class="hl sym">! !</span>

<span class="hl sym">!</span>Thread methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>
fork   <span class="hl sym">[</span> <span class="hl kwa">self</span> run <span class="hl sym">]</span> fork <span class="hl sym">! !</span>

<span class="hl sym">!</span>Thread methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>
run
   <span class="hl sym">[</span> <span class="hl kwa">self</span> tokenNotDone <span class="hl sym">]</span> whileTrue<span class="hl sym">: [</span> nextThread takeToken<span class="hl sym">:</span> token <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl sym">].</span>
   Tests stdout print<span class="hl sym">:</span> name<span class="hl sym">;</span> nl<span class="hl sym">.</span>
   done signal <span class="hl sym">! !</span>

<span class="hl sym">!</span>Thread methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>takeToken<span class="hl sym">:</span> x   token <span class="hl sym">:=</span> x<span class="hl sym">.</span>   semaphore signal <span class="hl sym">! !</span>


<span class="hl sym">!</span>Thread class methodsFor<span class="hl sym">:</span> <span class="hl str">'instance creation'</span><span class="hl sym">!</span>new
   <span class="hl sym">^</span><span class="hl kwa">self</span> basicNew semaphore<span class="hl sym">:</span> Semaphore new <span class="hl sym">! !</span>

<span class="hl sym">!</span>Thread class methodsFor<span class="hl sym">:</span> <span class="hl str">'instance creation'</span><span class="hl sym">!</span>named<span class="hl sym">:</span> anInteger next<span class="hl sym">:</span> aThread done<span class="hl sym">:</span> aSemaphore   <span class="hl sym">^</span><span class="hl kwa">self</span> new name<span class="hl sym">:</span> anInteger<span class="hl sym">;</span> nextThread<span class="hl sym">:</span> aThread<span class="hl sym">;</span> done<span class="hl sym">:</span> aSemaphore<span class="hl sym">;</span> fork <span class="hl sym">! !</span>


<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>threadRing<span class="hl sym">:</span> aSemaphore   <span class="hl sym">|</span> first last <span class="hl sym">|</span>
   <span class="hl num">503</span> to<span class="hl sym">:</span> <span class="hl num">1</span> by<span class="hl sym">: -</span><span class="hl num">1</span> do<span class="hl sym">: [:</span>i<span class="hl sym">|</span>
      first <span class="hl sym">:=</span> Thread named<span class="hl sym">:</span> i next<span class="hl sym">:</span> first done<span class="hl sym">:</span> aSemaphore<span class="hl sym">.</span>
      last isNil ifTrue<span class="hl sym">: [</span> last <span class="hl sym">:=</span> first <span class="hl sym">].</span>
   <span class="hl sym">].</span>
   last nextThread<span class="hl sym">:</span> first<span class="hl sym">.   ^</span>first <span class="hl sym">! !</span>

<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>threadring
   <span class="hl sym">|</span> done <span class="hl sym">|   (</span><span class="hl kwa">self</span> threadRing<span class="hl sym">: (</span>done <span class="hl sym">:=</span> Semaphore new<span class="hl sym">))</span> takeToken<span class="hl sym">:</span> <span class="hl kwa">self</span> arg<span class="hl sym">.</span>
   done wait<span class="hl sym">.   ^</span><span class="hl str">''</span><span class="hl sym">! !</span>


