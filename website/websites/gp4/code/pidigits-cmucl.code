<span class="slc">;;    The Computer Language Shootout</span>
<span class="slc">;;    http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;;    contributed by Christopher Neufeld</span>
<span class="slc">;;    modified by Juho Snellman 2005-10-25</span>
<span class="sym">::</span>    modified by Jason Wolfe

<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">)))</span>

<span class="sym">(</span>defconstant <span class="sym">*</span>digits<span class="sym">-</span>per<span class="sym">-</span><span class="kwa">line</span><span class="sym">*</span> <span class="num">10</span><span class="sym">)</span>
<span class="sym">(</span>defconstant <span class="sym">*</span>default<span class="sym">-</span>stop<span class="sym">-</span>digits<span class="sym">*</span> <span class="str">&quot;1000&quot;</span><span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> compute<span class="sym">-</span>pi <span class="sym">(</span>stop<span class="sym">-</span>digits z cur<span class="sym">-</span>state<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum stop<span class="sym">-</span>digits<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>vector <span class="num">4</span><span class="sym">)</span> z<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array fixnum <span class="sym">(</span><span class="num">4</span><span class="sym">))</span> cur<span class="sym">-</span>state<span class="sym">))</span>
  <span class="sym">(</span>do <span class="sym">((</span>digits<span class="sym">-</span>out <span class="num">0</span><span class="sym">))</span>
      <span class="sym">((&gt;=</span> digits<span class="sym">-</span>out stop<span class="sym">-</span>digits<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>fixnum digits<span class="sym">-</span>out<span class="sym">))</span>
    <span class="sym">(</span>let <span class="sym">((</span>y <span class="sym">(</span>extr z <span class="num">3</span><span class="sym">)))</span>
      <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((=</span> y <span class="sym">(</span>extr z <span class="num">4</span><span class="sym">))</span>
	     <span class="sym">(</span>format t <span class="str">&quot;~D&quot;</span> y<span class="sym">)</span>
	     <span class="sym">(</span>when <span class="sym">(</span><span class="kwa">zerop</span> <span class="sym">(</span>mod <span class="sym">(</span>incf digits<span class="sym">-</span>out<span class="sym">) *</span>digits<span class="sym">-</span>per<span class="sym">-</span><span class="kwa">line</span><span class="sym">*))</span>
	       <span class="sym">(</span>format t <span class="str">&quot;~A:~D~%&quot;</span> #\Tab digits<span class="sym">-</span>out<span class="sym">))</span>
	     <span class="sym">(</span>update<span class="sym">-</span><span class="num">1</span> z y<span class="sym">))</span>
	    <span class="sym">(</span>t <span class="sym">(</span>update<span class="sym">-</span><span class="num">2</span> z cur<span class="sym">-</span>state<span class="sym">))))))</span>


<span class="sym">(</span><span class="kwa">defun</span> extr <span class="sym">(</span>z x<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>vector <span class="num">4</span><span class="sym">)</span> z<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>integer <span class="num">0 10</span><span class="sym">)</span> x<span class="sym">))</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>z0 <span class="sym">(</span>aref z <span class="num">0</span><span class="sym">)) (</span>z1 <span class="sym">(</span>aref z <span class="num">1</span><span class="sym">)) (</span>z2 <span class="sym">(</span>aref z <span class="num">2</span><span class="sym">)) (</span>z3 <span class="sym">(</span>aref z <span class="num">3</span><span class="sym">))</span>
	 <span class="sym">(</span>ret <span class="sym">(</span>floor <span class="sym">(+ (*</span> z0 x<span class="sym">)</span> z1<span class="sym">)</span>
		     <span class="sym">(+ (*</span> z2 x<span class="sym">)</span> z3<span class="sym">))))</span>
    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> integer z0 z1 z2 z3<span class="sym">) (</span><span class="kwa">type</span> <span class="sym">(</span>integer <span class="num">0 10</span><span class="sym">)</span> ret<span class="sym">))</span>
    ret<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> update<span class="sym">-</span><span class="num">1</span> <span class="sym">(</span>z n<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>vector <span class="num">4</span><span class="sym">)</span> z<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>integer <span class="num">0 10</span><span class="sym">)</span> n<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>z0 <span class="sym">(</span>aref z <span class="num">0</span><span class="sym">)) (</span>z1 <span class="sym">(</span>aref z <span class="num">1</span><span class="sym">)) (</span>z2 <span class="sym">(</span>aref z <span class="num">2</span><span class="sym">)) (</span>z3 <span class="sym">(</span>aref z <span class="num">3</span><span class="sym">)))</span>
    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> integer z0 z1 z2 z3<span class="sym">))</span>
    <span class="sym">(</span>setf <span class="sym">(</span>aref z <span class="num">0</span><span class="sym">) (+ (*</span> <span class="num">10</span> z0<span class="sym">)</span>
			<span class="sym">(* -</span><span class="num">10</span> n z2<span class="sym">))</span>
	  <span class="sym">(</span>aref z <span class="num">1</span><span class="sym">) (+ (*</span> <span class="num">10</span> z1<span class="sym">)</span>
			<span class="sym">(* -</span><span class="num">10</span> n z3<span class="sym">)))))</span>


<span class="sym">(</span><span class="kwa">defun</span> update<span class="sym">-</span><span class="num">2</span> <span class="sym">(</span>z cs<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>vector <span class="num">4</span><span class="sym">)</span> z<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array fixnum <span class="sym">(</span><span class="num">4</span><span class="sym">))</span> cs<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>z0 <span class="sym">(</span>aref z <span class="num">0</span><span class="sym">)) (</span>z1 <span class="sym">(</span>aref z <span class="num">1</span><span class="sym">)) (</span>z2 <span class="sym">(</span>aref z <span class="num">2</span><span class="sym">)) (</span>z3 <span class="sym">(</span>aref z <span class="num">3</span><span class="sym">))</span>
	<span class="sym">(</span>c0 <span class="sym">(</span>incf <span class="sym">(</span>aref cs <span class="num">0</span><span class="sym">))) (</span>c1 <span class="sym">(</span>incf <span class="sym">(</span>aref cs <span class="num">1</span><span class="sym">)</span> <span class="num">4</span><span class="sym">)) (</span>c2 <span class="sym">(</span>aref cs <span class="num">2</span><span class="sym">)) (</span>c3 <span class="sym">(</span>incf <span class="sym">(</span>aref cs <span class="num">3</span><span class="sym">)</span> <span class="num">2</span><span class="sym">)))</span>
    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> integer z0 z1 z2 z3<span class="sym">)</span>
	     <span class="sym">(</span><span class="kwa">type</span> fixnum c0 c1 c2 c3<span class="sym">))</span>
    <span class="sym">(</span>setf <span class="sym">(</span>aref z <span class="num">0</span><span class="sym">) (+ (*</span> z0 c0<span class="sym">)</span>
			<span class="sym">(*</span> z1 c2<span class="sym">))</span>
	  <span class="sym">(</span>aref z <span class="num">1</span><span class="sym">) (+ (*</span> z0 c1<span class="sym">)</span>
			<span class="sym">(*</span> z1 c3<span class="sym">))</span>
	  <span class="sym">(</span>aref z <span class="num">2</span><span class="sym">) (+ (*</span> z2 c0<span class="sym">)</span>
			<span class="sym">(*</span> z3 c2<span class="sym">))</span>
	  <span class="sym">(</span>aref z <span class="num">3</span><span class="sym">) (+ (*</span> z2 c1<span class="sym">)</span>
			<span class="sym">(*</span> z3 c3<span class="sym">)))))</span>



<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
					 #<span class="sym">+</span>clisp ext<span class="sym">:*</span>args<span class="sym">*</span>
					 #<span class="sym">+</span>cmu <span class="sym">(</span><span class="kwa">cdr</span> extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*)</span>
					 #<span class="sym">+</span>gcl si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*)) *</span>default<span class="sym">-</span>stop<span class="sym">-</span>digits<span class="sym">*))))</span>
    <span class="sym">(</span>compute<span class="sym">-</span>pi n
		<span class="sym">(</span>make<span class="sym">-</span>array <span class="num">4</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="sym">'</span>integer <span class="sym">:</span>initial<span class="sym">-</span>contents #<span class="sym">(</span><span class="num">1 0 0 1</span><span class="sym">))</span>
		<span class="sym">(</span>make<span class="sym">-</span>array <span class="num">4</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="sym">'</span>fixnum <span class="sym">:</span>initial<span class="sym">-</span>contents #<span class="sym">(</span><span class="num">0 2 0 1</span><span class="sym">)))))</span>
