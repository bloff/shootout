<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
module Mandelbrot<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude using
    typeClass <span class="hl sym">=</span> Inputable<span class="hl sym">,</span> Outputable<span class="hl sym">;</span>
    typeConstructor <span class="hl sym">=</span> <span class="hl kwc">Boolean</span><span class="hl sym">,</span> Int<span class="hl sym">,</span> <span class="hl kwc">String</span><span class="hl sym">,</span> <span class="hl kwc">Byte</span><span class="hl sym">,</span> <span class="hl kwc">Double</span><span class="hl sym">;</span>
    dataConstructor <span class="hl sym">=</span> False<span class="hl sym">,</span> True<span class="hl sym">;</span>
    function <span class="hl sym">=</span> seq<span class="hl sym">,</span> max<span class="hl sym">,</span> eager<span class="hl sym">,</span> fromInt<span class="hl sym">,</span> stringToInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Debug using
    function <span class="hl sym">=</span> show<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Bits using
    function <span class="hl sym">=</span> bitwiseXor<span class="hl sym">,</span> shiftL<span class="hl sym">,</span> bitwiseOr<span class="hl sym">,</span> bitwiseAnd<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwc">List</span> using
    function <span class="hl sym">=</span> map<span class="hl sym">,</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Utilities</span><span class="hl sym">.</span><span class="hl kwc">Math</span> using
    function <span class="hl sym">=</span> power<span class="hl sym">,</span> sin<span class="hl sym">,</span> cos<span class="hl sym">,</span> sqrt<span class="hl sym">;</span>
    <span class="hl sym">;</span>


data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.PrintStream&quot;</span> <span class="hl kwa">private</span> JPrintStream<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.FilterOutputStream&quot;</span>
    <span class="hl kwa">private</span> JFilterOutputStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;static field java.lang.System.out&quot;</span>
    <span class="hl kwa">private</span> stdout <span class="hl sym">::</span> JPrintStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method print&quot;</span>
    <span class="hl kwa">private</span> print <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> <span class="hl kwc">String</span> <span class="hl sym">-&gt; ();</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.OutputStream&quot;</span> <span class="hl kwa">private</span> JOutputStream<span class="hl sym">;</span>

data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.BufferedOutputStream&quot;</span>
    <span class="hl kwa">private</span> JBufferedOutputStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;constructor&quot;</span>
    <span class="hl kwa">private</span> createBufferedOutputStream <span class="hl sym">::</span> JOutputStream <span class="hl sym">-&gt;</span> JBufferedOutputStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method write&quot;</span>
    <span class="hl kwa">private</span> write <span class="hl sym">::</span> JBufferedOutputStream <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method flush&quot;</span>
    <span class="hl kwa">private</span> flush <span class="hl sym">::</span> JBufferedOutputStream <span class="hl sym">-&gt; ();</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;cast&quot;</span>
    jPrintStreamToJOutputStream <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> JOutputStream<span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * compute a binary mandelbrot image and write to stdout as a pbm file</span>
<span class="hl com"> */</span>
main <span class="hl sym">:: [</span><span class="hl kwc">String</span><span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    let
        size <span class="hl sym">=</span> eager $ <span class="hl kwd">stringToInt</span> <span class="hl sym">(</span>head args<span class="hl sym">);</span>

        bufferedOutput <span class="hl sym">=</span>
            eager
            $ <span class="hl kwd">createBufferedOutputStream</span> <span class="hl sym">(</span>jPrintStreamToJOutputStream stdout<span class="hl sym">)</span>
            <span class="hl sym">;</span>

        maxIterations <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        maxIterations <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>

        <span class="hl com">/** write out the byte buffer every 8th pixel*/</span>
        outputBitBuffer <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        outputBitBuffer <span class="hl sym">!</span>x <span class="hl sym">!</span>buffer <span class="hl sym">=</span>
            <span class="hl kwa">if</span> bitwiseAnd x <span class="hl num">7</span> <span class="hl sym">==</span> <span class="hl num">7</span> then
                <span class="hl slc">//write the buffer</span>
                write bufferedOutput buffer
                `seq`
                <span class="hl num">0</span>
            <span class="hl kwa">else</span>
                <span class="hl slc">//no, output buffer is not yet full</span>
                buffer
            <span class="hl sym">;</span>
        <span class="hl com">/** write out partial byte buffer at the end of line if necessary*/</span>
        outputPartialBuffer <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
        outputPartialBuffer <span class="hl sym">!</span>x <span class="hl sym">!</span>buffer <span class="hl sym">=</span>
            <span class="hl kwa">if</span> bitwiseAnd x <span class="hl num">7</span> <span class="hl sym">!=</span> <span class="hl num">0</span> then
                write <span class="hl kwd">bufferedOutput</span> <span class="hl sym">(</span>shiftL <span class="hl kwd">buffer</span> <span class="hl sym">(</span><span class="hl num">8</span> <span class="hl sym">-</span> bitwiseAnd x <span class="hl num">7</span><span class="hl sym">))</span>
            <span class="hl kwa">else</span>
                <span class="hl sym">()</span>
            <span class="hl sym">;</span>
        <span class="hl com">/** compute and output every pixel in the image*/</span>
        process <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
        process <span class="hl sym">!</span>x <span class="hl sym">!</span>y <span class="hl sym">!</span>bitBuffer <span class="hl sym">=</span>
            <span class="hl kwa">if</span> x <span class="hl sym">&lt;</span> size then
                let
                    calculateBit <span class="hl sym">::</span>
                        Int<span class="hl sym">-&gt;</span> <span class="hl kwc">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Double</span> <span class="hl sym">-&gt;</span> <span class="hl kwc">Double</span> <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
                    calculateBit <span class="hl sym">!</span>i <span class="hl sym">!</span>zr <span class="hl sym">!</span>zi <span class="hl sym">!</span>cr <span class="hl sym">!</span>ci <span class="hl sym">=</span>
                        <span class="hl kwa">if</span> i <span class="hl sym">==</span> maxIterations then
                            <span class="hl num">1</span>
                        <span class="hl kwa">else if</span> zr <span class="hl sym">*</span> zr <span class="hl sym">+</span> zi <span class="hl sym">*</span> zi <span class="hl sym">&gt;</span> <span class="hl num">4</span> then
                            <span class="hl num">0</span>
                        <span class="hl kwa">else</span>
                            calculateBit
                                <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                                <span class="hl sym">(</span>zr <span class="hl sym">*</span> zr <span class="hl sym">-</span> zi <span class="hl sym">*</span> zi <span class="hl sym">+</span> cr<span class="hl sym">)</span>
                                <span class="hl sym">(</span><span class="hl num">2.0</span> <span class="hl sym">*</span> zr <span class="hl sym">*</span> zi <span class="hl sym">+</span> ci<span class="hl sym">)</span>
                                cr
                                ci
                        <span class="hl sym">;</span>
                in
                    process
                        <span class="hl sym">(</span>x <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                        y
                        <span class="hl sym">(</span>outputBitBuffer
                            x
                            <span class="hl sym">(</span>
                                eager
                                $ bitwiseOr
                                    <span class="hl sym">(</span>eager $ shiftL bitBuffer <span class="hl num">1</span><span class="hl sym">)</span>
                                    <span class="hl sym">(</span>
                                        eager
                                        $ calculateBit
                                            <span class="hl num">0</span>
                                            <span class="hl sym">(</span>
                                                <span class="hl kwd">fromInt</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> x<span class="hl sym">)</span>
                                                    <span class="hl sym">/</span> fromInt size
                                                <span class="hl sym">-</span> <span class="hl num">1.5</span>
                                            <span class="hl sym">)</span>
                                            <span class="hl sym">(</span>
                                                <span class="hl kwd">fromInt</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> y<span class="hl sym">)</span>
                                                    <span class="hl sym">/</span> fromInt size
                                                <span class="hl sym">-</span> <span class="hl num">1.0</span>
                                            <span class="hl sym">)</span>
                                            <span class="hl sym">(</span>
                                                <span class="hl kwd">fromInt</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> x<span class="hl sym">)</span>
                                                    <span class="hl sym">/</span> fromInt size
                                                <span class="hl sym">-</span> <span class="hl num">1.5</span>
                                            <span class="hl sym">)</span>
                                            <span class="hl sym">(</span>
                                                <span class="hl kwd">fromInt</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> y<span class="hl sym">)</span>
                                                    <span class="hl sym">/</span> fromInt size
                                                <span class="hl sym">-</span> <span class="hl num">1.0</span>
                                            <span class="hl sym">)</span>
                                    <span class="hl sym">)</span>
                            <span class="hl sym">)</span>
                        <span class="hl sym">)</span>

            <span class="hl kwa">else if</span> y <span class="hl sym">&lt;</span> size <span class="hl sym">-</span> <span class="hl num">1</span> then
                outputPartialBuffer x bitBuffer
                `seq`
                process <span class="hl kwd">0</span> <span class="hl sym">(</span>y <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">0</span>
            <span class="hl kwa">else</span>
                outputPartialBuffer x bitBuffer
                `seq`
                flush bufferedOutput
            <span class="hl sym">;</span>
    in
        <span class="hl slc">//write out the image header</span>
        print <span class="hl kwd">stdout</span> <span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">++</span> show size <span class="hl sym">++</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">++</span> show size <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
        `seq`
        <span class="hl slc">//compute and write out the binary image body</span>
        process <span class="hl num">0 0 0</span>
    <span class="hl sym">;</span>

