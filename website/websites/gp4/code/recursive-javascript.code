<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// contributed by Isaac Gouy</span>

<span class="kwa">function</span> <span class="kwd">ack</span><span class="sym">(</span>m<span class="sym">,</span>n<span class="sym">){</span>
   <span class="kwa">if</span> <span class="sym">(</span>m<span class="sym">==</span><span class="num">0</span><span class="sym">) {</span> <span class="kwa">return</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">; }</span>
   <span class="kwa">if</span> <span class="sym">(</span>n<span class="sym">==</span><span class="num">0</span><span class="sym">) {</span> <span class="kwa">return</span> <span class="kwd">ack</span><span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">); }</span>
   <span class="kwa">return</span> <span class="kwd">ack</span><span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">ack</span><span class="sym">(</span>m<span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">) );</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">fib</span><span class="sym">(</span>n<span class="sym">) {</span>
    <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">){</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">; }</span>
    <span class="kwa">return</span> <span class="kwd">fib</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">) +</span> <span class="kwd">fib</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">tak</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">) {</span>
  <span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&lt;</span> x<span class="sym">){</span> <span class="kwd">tak</span><span class="sym">(</span><span class="kwd">tak</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span> <span class="kwd">tak</span><span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span> <span class="kwd">tak</span><span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">)); }</span>
  <span class="kwa">return</span> z<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwa">var</span> x <span class="sym">=</span> <span class="num">27.0</span> <span class="sym">+</span> n<span class="sym">;</span>
<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;): &quot;</span> <span class="sym">+</span> <span class="kwd">ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span>n<span class="sym">));</span>
<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Fib(&quot;</span> <span class="sym">+</span> x<span class="sym">.</span><span class="kwd">toFixed</span><span class="sym">(</span><span class="num">1</span><span class="sym">) +</span> <span class="str">&quot;): &quot;</span> <span class="sym">+</span> <span class="kwd">fib</span><span class="sym">(</span>x<span class="sym">).</span><span class="kwd">toFixed</span><span class="sym">(</span><span class="num">1</span><span class="sym">));</span>
<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Tak(&quot;</span> <span class="sym">+</span> <span class="num">3</span><span class="sym">*</span>n <span class="sym">+</span> <span class="str">&quot;,&quot;</span> <span class="sym">+</span> <span class="num">2</span><span class="sym">*</span>n <span class="sym">+</span> <span class="str">&quot;,&quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;): &quot;</span> <span class="sym">+</span> <span class="kwd">tak</span><span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span>n<span class="sym">));</span>
<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Fib(3): &quot;</span> <span class="sym">+</span> <span class="kwd">fib</span><span class="sym">(</span><span class="num">3</span><span class="sym">));</span>
<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Tak(3.0,2.0,1.0): &quot;</span> <span class="sym">+</span> <span class="kwd">tak</span><span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span><span class="num">2.0</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">).</span><span class="kwd">toFixed</span><span class="sym">(</span><span class="num">1</span><span class="sym">));</span>
