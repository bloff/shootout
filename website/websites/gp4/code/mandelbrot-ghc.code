<span class="com">{-# OPTIONS -fbang-patterns #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Trevor McCort, Spencer Janssen and Don Stewart</span>
<span class="slc">--</span>

<span class="kwa">import</span> System
<span class="kwa">import</span> Foreign
<span class="kwa">import qualified</span> Data.ByteString.Lazy <span class="kwa">as</span> B

main <span class="sym">=</span> <span class="kwa">do</span>
    <span class="sym">(!</span>w<span class="sym">) &lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head

    <span class="kwa">let</span> sh <span class="sym">=</span> show $ fromEnum w
        <span class="sym">!</span>bw <span class="sym">=</span> ceiling <span class="sym">(</span>w <span class="sym">/</span> <span class="num">8</span><span class="sym">) ::</span> <span class="kwb">Int</span>
        <span class="sym">!</span>iw <span class="sym">=</span> <span class="num">2</span><span class="sym">/</span>w

        gb <span class="sym">!</span>ci <span class="sym">!</span>x <span class="sym">!</span>b <span class="sym">!</span>n
            <span class="sym">|</span> x <span class="sym">==</span> w    <span class="sym">=</span> b `shiftL` n
            <span class="sym">|</span> n <span class="sym">==</span> <span class="num">0</span>    <span class="sym">=</span> b
            <span class="sym">|</span> otherwise <span class="sym">=</span> gb ci <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>b<span class="sym">+</span>b<span class="sym">+(</span>lp <span class="num">0 0</span> <span class="sym">(</span>x <span class="sym">*</span> iw <span class="sym">-</span> <span class="num">1.5</span><span class="sym">)</span> ci <span class="num">50</span><span class="sym">)) (</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>

        ms <span class="sym">(</span>bx<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> ci<span class="sym">)</span>
            <span class="sym">|</span> y  <span class="sym">==</span> w   <span class="sym">=</span> Nothing
            <span class="sym">|</span> bx <span class="sym">==</span> bw  <span class="sym">=</span> Just <span class="sym">(</span>gb ci x <span class="num">0 8</span><span class="sym">,(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> iw<span class="sym">+</span>ci<span class="sym">))</span>
            <span class="sym">|</span> otherwise <span class="sym">=</span> Just <span class="sym">(</span>gb ci x <span class="num">0 8</span><span class="sym">,(</span>bx<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>x<span class="sym">+</span><span class="num">8</span><span class="sym">,</span>y<span class="sym">,</span>ci<span class="sym">))</span>

    putStrLn <span class="sym">(</span><span class="str">&quot;P4\n&quot;</span><span class="sym">++</span>sh<span class="sym">++</span><span class="str">&quot; &quot;</span><span class="sym">++</span>sh<span class="sym">)</span>
    B.putStr <span class="sym">(</span>B.unfoldr ms <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">, (-</span><span class="num">1</span><span class="sym">)))</span>

lp <span class="sym">::</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> Word8
lp <span class="sym">!</span>r <span class="sym">!</span>i <span class="sym">!</span>cr <span class="sym">!</span>ci <span class="sym">!</span>k
    <span class="sym">|</span> r2 <span class="sym">+</span> i2 <span class="sym">&gt;</span> <span class="num">4</span>  <span class="sym">=</span> <span class="num">0</span>
    <span class="sym">|</span> k <span class="sym">==</span>  <span class="num">0</span>      <span class="sym">=</span> <span class="num">1</span>
    <span class="sym">|</span> otherwise    <span class="sym">=</span> lp <span class="sym">(</span>r2<span class="sym">-</span>i2<span class="sym">+</span>cr<span class="sym">) ((</span>r<span class="sym">+</span>r<span class="sym">)*</span>i<span class="sym">+</span>ci<span class="sym">)</span> cr ci <span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
  <span class="kwa">where</span>
    <span class="sym">(!</span>r2<span class="sym">,!</span>i2<span class="sym">) = (</span>r<span class="sym">*</span>r<span class="sym">,</span>i<span class="sym">*</span>i<span class="sym">)</span>
<span class="com">{-# INLINE lp #-}</span>
