<span class="com">(*</span>
<span class="com">   The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Anthony Borla</span>
<span class="com">*)</span>

<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
  <span class="kwa">val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>

  <span class="kwa">fun</span> sum n <span class="sym">=</span>
    <span class="kwa">let</span>
      <span class="kwa">val</span> twothirds <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">/</span> <span class="num">3.0</span>

      <span class="kwa">fun</span> sum' <span class="sym">(</span>k<span class="sym">,</span> n<span class="sym">,</span> alt<span class="sym">,</span> a1<span class="sym">,</span> a2<span class="sym">,</span> a3<span class="sym">,</span> a4<span class="sym">,</span> a5<span class="sym">,</span> a6<span class="sym">,</span> a7<span class="sym">,</span> a8<span class="sym">,</span> a9<span class="sym">) =</span>
        <span class="kwa">if</span> k <span class="sym">&gt;</span> n <span class="kwa">then</span>
          <span class="sym">(</span>a1<span class="sym">,</span> a2<span class="sym">,</span> a3<span class="sym">,</span> a4<span class="sym">,</span> a5<span class="sym">,</span> a6<span class="sym">,</span> a7<span class="sym">,</span> a8<span class="sym">,</span> a9<span class="sym">)</span>
        <span class="kwa">else</span>
          <span class="kwa">let</span>
            <span class="kwa">val</span> k2 <span class="sym">=</span> k <span class="sym">*</span> k
            <span class="kwa">val</span> k3 <span class="sym">=</span> k2 <span class="sym">*</span> k
            <span class="kwa">val</span> s1 <span class="sym">=</span> Math.sin k
            <span class="kwa">val</span> s2 <span class="sym">=</span> s1 <span class="sym">*</span> s1
            <span class="kwa">val</span> c1 <span class="sym">=</span> Math.cos k
            <span class="kwa">val</span> c2 <span class="sym">=</span> c1 <span class="sym">*</span> c1
          <span class="kwa">in</span>
            sum'
              <span class="sym">(</span>k <span class="sym">+</span> <span class="num">1.0</span><span class="sym">,</span>
               n<span class="sym">,</span>
               ~alt<span class="sym">,</span>
               a1 <span class="sym">+</span> Math.pow<span class="sym">(</span>twothirds<span class="sym">,</span> k <span class="sym">-</span> <span class="num">1.0</span><span class="sym">),</span>
               a2 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/</span> Math.sqrt<span class="sym">(</span>k<span class="sym">),</span>
               a3 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/ (</span>k <span class="sym">* (</span>k <span class="sym">+</span> <span class="num">1.0</span><span class="sym">)),</span>
               a4 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/ (</span>k3 <span class="sym">*</span> s2<span class="sym">),</span>
               a5 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/ (</span>k3 <span class="sym">*</span> c2<span class="sym">),</span>
               a6 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/</span> k<span class="sym">,</span>
               a7 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/</span> k2<span class="sym">,</span>
               a8 <span class="sym">+</span> alt <span class="sym">/</span> k<span class="sym">,</span>
               a9 <span class="sym">+</span> alt <span class="sym">/ (</span><span class="num">2.0</span> <span class="sym">*</span> k <span class="sym">-</span> <span class="num">1.0</span><span class="sym">))</span>
          <span class="kwa">end</span>
    <span class="kwa">in</span>
      sum' <span class="sym">(</span><span class="num">1.0</span><span class="sym">, (</span><span class="kwa">Real</span>.fromInt n<span class="sym">),</span> <span class="num">1.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span>
    <span class="kwa">end</span>

  <span class="kwa">fun</span> main' n <span class="sym">=</span>
    <span class="kwa">let</span>
      <span class="kwa">val</span> <span class="sym">(</span>a1<span class="sym">,</span> a2<span class="sym">,</span> a3<span class="sym">,</span> a4<span class="sym">,</span> a5<span class="sym">,</span> a6<span class="sym">,</span> a7<span class="sym">,</span> a8<span class="sym">,</span> a9<span class="sym">) =</span> sum n

      <span class="kwa">open</span> Format
    <span class="kwa">in</span>

      formatf <span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">(2/3)^k</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\%</span><span class="str">.9f</span><span class="esc">\t</span><span class="str">k^-0.5</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\%</span><span class="str">.9f</span><span class="esc">\t</span><span class="str">1/k(k+1)</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\%</span><span class="str">.9f</span><span class="esc">\t</span><span class="str">Flint Hills</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\%</span><span class="str">.9f</span><span class="esc">\t</span><span class="str">Cookson Hills</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\%</span><span class="str">.9f</span><span class="esc">\t</span><span class="str">Harmonic</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\%</span><span class="str">.9f</span><span class="esc">\t</span><span class="str">Riemann Zeta</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\%</span><span class="str">.9f</span><span class="esc">\t</span><span class="str">Alternating Harmonic</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\%</span><span class="str">.9f</span><span class="esc">\t</span><span class="str">Gregory</span><span class="esc">\n</span><span class="str">&quot;</span>

      print <span class="sym">[</span>REAL a1<span class="sym">,</span> REAL a2<span class="sym">,</span> REAL a3<span class="sym">,</span> REAL a4<span class="sym">,</span>
             REAL a5<span class="sym">,</span> REAL a6<span class="sym">,</span> REAL a7<span class="sym">,</span> REAL a8<span class="sym">,</span>
             REAL a9<span class="sym">];</span>

      OS.Process.success
    <span class="kwa">end</span>

  <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1</span>
    <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>

<span class="kwa">end</span>

