<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; $Id: takfp-sbcl.code,v 1.7 2005-11-02 01:28:22 igouy-guest Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; Contributed by Brent Fulgham
</span>
<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))

(</span><span class="kwa">defun</span> tak <span class="sym">(</span>x y z<span class="sym">)
  (</span>declare <span class="sym">(</span>single<span class="sym">-</span><span class="kwa">float</span> x y z<span class="sym">))
  (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(&lt;</span> y x<span class="sym">))
</span>      z
      <span class="sym">(</span>tak <span class="sym">(</span>tak <span class="sym">(-</span> x <span class="num">1</span><span class="sym">)</span> y z<span class="sym">) (</span>tak <span class="sym">(-</span> y <span class="num">1</span><span class="sym">)</span> z x<span class="sym">) (</span>tak <span class="sym">(-</span> z <span class="num">1</span><span class="sym">)</span> x y<span class="sym">))))

(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let <span class="sym">((</span>n <span class="sym">(*</span> <span class="num">1.0</span> <span class="sym">(</span>parse<span class="sym">-</span>integer
		   <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span>				  #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*
</span>				  #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">)))))
    (</span>format t <span class="str">&quot;~d~%&quot;</span> <span class="sym">(</span>tak <span class="sym">(*</span> n <span class="num">3.0</span><span class="sym">) (*</span> n <span class="num">2.0</span><span class="sym">) (*</span> n <span class="num">1.0</span><span class="sym">) ))))

</span><span class="slc">;;; vim: ts=4 ft=lisp</span>
