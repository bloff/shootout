<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: takfp-sbcl.code,v 1.24 2005-11-22 23:02:52 igouy-guest Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; Contributed by Brent Fulgham</span>
<span class="slc">;;; Modified by Juho Snellman 2005-11-19</span>
<span class="slc">;;;   * Use an auxiliary local function to avoid boxing the return values</span>
<span class="slc">;;;     on 32-bit CMUCL/SBCL (about 80% speedup for N=10)</span>

<span class="sym">(</span><span class="kwa">defun</span> tak <span class="sym">(</span>x y z<span class="sym">)</span>
  <span class="sym">(</span>labels <span class="sym">((</span>aux <span class="sym">(</span>x y z<span class="sym">)</span>
             <span class="sym">(</span>declare <span class="sym">(</span>single<span class="sym">-</span><span class="kwa">float</span> x y z<span class="sym">))</span>
             <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(&lt;</span> y x<span class="sym">))</span>
                 z
                 <span class="sym">(</span>aux <span class="sym">(</span>aux <span class="sym">(-</span> x <span class="num">1</span><span class="sym">)</span> y z<span class="sym">) (</span>aux <span class="sym">(-</span> y <span class="num">1</span><span class="sym">)</span> z x<span class="sym">) (</span>aux <span class="sym">(-</span> z <span class="num">1</span><span class="sym">)</span> x y<span class="sym">)))))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>inline aux<span class="sym">))</span>
    <span class="sym">(</span>aux x y z<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(*</span> <span class="num">1.0</span> <span class="sym">(</span>parse<span class="sym">-</span>integer
		   <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
				  #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
				  #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">)))))</span>
    <span class="sym">(</span>format t <span class="str">&quot;~d~%&quot;</span> <span class="sym">(</span>tak <span class="sym">(*</span> n <span class="num">3.0</span><span class="sym">) (*</span> n <span class="num">2.0</span><span class="sym">) (*</span> n <span class="num">1.0</span><span class="sym">) ))))</span>
