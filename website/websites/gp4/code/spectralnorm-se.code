<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- Original C contributed by Sebastien Loisel
</span><span class="slc">-- Conversion to eiffel by jos from C++ version of Jon Harrop
</span><span class="slc">-- Compile: compile -boost -o spectralnorm spectralnorm
</span>
<span class="kwa">class</span> SPECTRALNORM

creation <span class="sym">{</span>ANY<span class="sym">}
</span>	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	make <span class="kwa">is
		local
</span>			i<span class="sym">,</span> n<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> u<span class="sym">,</span> v<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span>REAL_64<span class="sym">];</span> vv<span class="sym">,</span> vbv<span class="sym">:</span> REAL_64
		<span class="kwa">do
			check
</span>				argument_count <span class="sym">=</span> <span class="num">1
</span>			<span class="kwa">end
			check
</span>				argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer
			<span class="kwa">end
</span>			n <span class="sym">:=</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
			<span class="kwa">check
</span>				n <span class="sym">&gt;</span> <span class="num">0
</span>			<span class="kwa">end
			create</span> u.make<span class="sym">(</span>n<span class="sym">)
</span>			<span class="kwa">create</span> v.make<span class="sym">(</span>n<span class="sym">)
</span>			u.set_all_with<span class="sym">(</span><span class="num">1.0</span><span class="sym">)
</span>			<span class="kwa">from
</span>			until
				i <span class="sym">=</span> <span class="num">10
</span>			<span class="kwa">loop
</span>				eval_ata_times_u<span class="sym">(</span>u<span class="sym">,</span> v<span class="sym">)
</span>				u.set_all_with<span class="sym">(</span><span class="num">0.0</span><span class="sym">)
</span>				eval_ata_times_u<span class="sym">(</span>v<span class="sym">,</span> u<span class="sym">)
</span>				i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1
</span>			<span class="kwa">end
			from
</span>				i <span class="sym">:=</span> <span class="num">0
</span>			until
				i <span class="sym">=</span> n
			<span class="kwa">loop
</span>				vbv <span class="sym">:=</span> vbv <span class="sym">+</span> u.item<span class="sym">(</span>i<span class="sym">) *</span> v.item<span class="sym">(</span>i<span class="sym">)
</span>				vv <span class="sym">:=</span> vv <span class="sym">+</span> v.item<span class="sym">(</span>i<span class="sym">) *</span> v.item<span class="sym">(</span>i<span class="sym">)
</span>				i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1
</span>			<span class="kwa">end
</span>			io.put_real_format<span class="sym">((</span>vbv <span class="sym">/</span> vv<span class="sym">)</span>.sqrt<span class="sym">,</span> <span class="num">9</span><span class="sym">)
</span>			io.put_new_line
		<span class="kwa">end

</span>	eval_ata_times_u <span class="sym">(</span>u<span class="sym">,</span> atau<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span>REAL_64<span class="sym">])</span> <span class="kwa">is
		local
</span>			tmp<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span>REAL_64<span class="sym">]
</span>		<span class="kwa">do
			create</span> tmp.make<span class="sym">(</span>u.count<span class="sym">)
</span>			eval_a_times_u<span class="sym">(</span>u<span class="sym">,</span> tmp<span class="sym">)
</span>			eval_at_times_u<span class="sym">(</span>tmp<span class="sym">,</span> atau<span class="sym">)
</span>		<span class="kwa">end

</span>	eval_a_times_u <span class="sym">(</span>u<span class="sym">,</span> au<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span>REAL_64<span class="sym">])</span> <span class="kwa">is
		local
</span>			i<span class="sym">,</span> j<span class="sym">,</span> n<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> x<span class="sym">:</span> REAL_64
		<span class="kwa">do
			from
</span>				n <span class="sym">:=</span> u.count
			until
				i <span class="sym">=</span> n
			<span class="kwa">loop
</span>				x <span class="sym">:=</span> au.item<span class="sym">(</span>i<span class="sym">)
</span>				<span class="kwa">from
</span>					j <span class="sym">:=</span> <span class="num">0
</span>				until
					j <span class="sym">=</span> n
				<span class="kwa">loop
</span>					x <span class="sym">:=</span> x <span class="sym">+</span> eval_a<span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) *</span> u.item<span class="sym">(</span>j<span class="sym">)
</span>					j <span class="sym">:=</span> j <span class="sym">+</span> <span class="num">1
</span>				<span class="kwa">end
</span>				au.put<span class="sym">(</span>x<span class="sym">,</span> i<span class="sym">)
</span>				i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1
</span>			<span class="kwa">end
		end

</span>	eval_at_times_u <span class="sym">(</span>u<span class="sym">,</span> au<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span>REAL_64<span class="sym">])</span> <span class="kwa">is
		local
</span>			i<span class="sym">,</span> j<span class="sym">,</span> n<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> x<span class="sym">:</span> REAL_64
		<span class="kwa">do
			from
</span>				n <span class="sym">:=</span> u.count
			until
				i <span class="sym">=</span> n
			<span class="kwa">loop
</span>				x <span class="sym">:=</span> au.item<span class="sym">(</span>i<span class="sym">)
</span>				<span class="kwa">from
</span>					j <span class="sym">:=</span> <span class="num">0
</span>				until
					j <span class="sym">=</span> n
				<span class="kwa">loop
</span>					x <span class="sym">:=</span> x <span class="sym">+</span> eval_a<span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">) *</span> u.item<span class="sym">(</span>j<span class="sym">)
</span>					j <span class="sym">:=</span> j <span class="sym">+</span> <span class="num">1
</span>				<span class="kwa">end
</span>				au.put<span class="sym">(</span>x<span class="sym">,</span> i<span class="sym">)
</span>				i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1
</span>			<span class="kwa">end
		end

</span>	eval_a <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">):</span> REAL_64 <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> <span class="num">1.0</span> <span class="sym">/ (((</span>i <span class="sym">+</span> j<span class="sym">) * (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span> #<span class="sym">//</span> <span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>.to_real_64
		<span class="kwa">end

end</span> <span class="slc">-- class SPECTRALNORM</span>
