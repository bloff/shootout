<span class="dir">#!/bin/env groovy</span>
<span class="com">/*</span>
<span class="com">	$Id: spectralnorm-groovy.code,v 1.1 2005-10-29 16:20:55 igouy-guest Exp $</span>
<span class="com"></span>
<span class="com">	The Great Computer Language Shootout</span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">	contributed by Jochen Hinrichsen</span>
<span class="com">*/</span>

def <span class="kwd">approximate</span><span class="sym">(</span>n<span class="sym">) {</span>
    <span class="slc">// create unit vector</span>
	def u <span class="sym">= [</span><span class="num">1.0</span>D<span class="sym">] *</span> n

    <span class="slc">// 20 steps of the power method</span>
	def v <span class="sym">= [</span><span class="num">0.0</span>D<span class="sym">] *</span> n

    <span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">1</span><span class="sym">.</span><span class="num">.10</span><span class="sym">) {</span>
        <span class="kwd">MultiplyAtAv</span><span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">)</span>
        <span class="kwd">MultiplyAtAv</span><span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">)</span>
    <span class="sym">}</span>

    <span class="slc">// B=AtA         A multiplied by A transposed</span>
    <span class="slc">// v.Bv /(v.v)   eigenvalue of v</span>
    <span class="kwb">double</span> vBv <span class="sym">=</span> vv <span class="sym">=</span> <span class="num">0.0</span>D
    <span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>n<span class="sym">) {</span>
        vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">]</span>
        vv  <span class="sym">+=</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">]</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> Math<span class="sym">.</span><span class="kwd">sqrt</span><span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">)</span>
<span class="sym">}</span>


<span class="com">/* return element i,j of infinite matrix A */</span>
def <span class="kwd">A</span><span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) {</span>
    <span class="kwa">return</span> <span class="sym">(</span><span class="num">1.0</span>D<span class="sym">) / ((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+(</span><span class="num">1.0</span>D<span class="sym">))/(</span><span class="num">2.0</span>D<span class="sym">) +</span>i<span class="sym">+(</span><span class="num">1.0</span>D<span class="sym">))</span>
<span class="sym">}</span>

<span class="com">/* multiply vector v by matrix A */</span>
def <span class="kwd">MultiplyAv</span><span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> Av<span class="sym">){</span>
    <span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>n<span class="sym">) {</span>
        Av<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0.0</span>D
        <span class="kwa">for</span> <span class="sym">(</span>j in <span class="num">0</span><span class="sym">..&lt;</span>n<span class="sym">)</span> Av<span class="sym">[</span>i<span class="sym">] +=</span> <span class="kwd">A</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">]</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="com">/* multiply vector v by matrix A transposed */</span>
def <span class="kwd">MultiplyAtv</span><span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> Atv<span class="sym">){</span>
    <span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>n<span class="sym">) {</span>
        Atv<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0.0</span>D
        <span class="kwa">for</span> <span class="sym">(</span>j in <span class="num">0</span><span class="sym">..&lt;</span>n<span class="sym">)</span> Atv<span class="sym">[</span>i<span class="sym">] +=</span> <span class="kwd">A</span><span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">]</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
def <span class="kwd">MultiplyAtAv</span><span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> AtAv<span class="sym">){</span>
    <span class="kwb">double</span><span class="sym">[]</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">]</span>
    <span class="kwd">MultiplyAv</span><span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> u<span class="sym">)</span>
    <span class="kwd">MultiplyAtv</span><span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> AtAv<span class="sym">)</span>
<span class="sym">}</span>

def n <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span> ? <span class="num">100</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span><span class="kwd">toInteger</span><span class="sym">())</span>
def nf <span class="sym">=</span> java<span class="sym">.</span>text<span class="sym">.</span>NumberFormat<span class="sym">.</span><span class="kwd">getInstance</span><span class="sym">()</span>
nf<span class="sym">.</span><span class="kwd">setMaximumFractionDigits</span><span class="sym">(</span><span class="num">9</span><span class="sym">)</span>
nf<span class="sym">.</span><span class="kwd">setMinimumFractionDigits</span><span class="sym">(</span><span class="num">9</span><span class="sym">)</span>
nf<span class="sym">.</span><span class="kwd">setGroupingUsed</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">)</span>
<span class="kwd">println</span><span class="sym">(</span>nf<span class="sym">.</span><span class="kwd">format</span><span class="sym">(</span><span class="kwd">approximate</span><span class="sym">(</span>n<span class="sym">)))</span>

<span class="slc">// EOF</span>

