<span class="hl slc">;;   The Computer Language Shootout</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;   contributed by Wade Humeniuk</span>
<span class="hl slc">;;   Thanks to James McIlree and Juho Snellman</span>
<span class="hl slc">;;   for the previous Lisp SBCL submisson.</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;   Thanks to Robert Brown for pointing</span>
<span class="hl slc">;;   out define-hash-table-test.</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;   Use of macros was removed.</span>
<span class="hl slc">;;</span>

<span class="hl sym">(</span>defvar <span class="hl sym">*</span>gene<span class="hl sym">*</span> nil<span class="hl sym">)</span>
<span class="hl sym">(</span>defvar <span class="hl sym">*</span>k<span class="hl sym">*</span> <span class="hl num">0</span><span class="hl sym">)</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> gene<span class="hl sym">= (</span>gene1 gene2<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
	   <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span><span class="hl kwa">or</span> simple-base-string fixnum<span class="hl sym">)</span> gene1 gene2<span class="hl sym">))</span>
  <span class="hl sym">(</span>when <span class="hl sym">(</span>stringp gene2<span class="hl sym">) (</span>rotatef gene1 gene2<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>gene <span class="hl sym">*</span>gene<span class="hl sym">*) (</span>k <span class="hl sym">*</span>k<span class="hl sym">*))</span>
    <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> simple-base-string gene<span class="hl sym">)</span>
	     <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum k<span class="hl sym">))</span>
    <span class="hl sym">(</span>when <span class="hl sym">(</span>stringp gene2<span class="hl sym">) (</span>rotatef gene1 gene2<span class="hl sym">))</span>
    <span class="hl sym">(</span><span class="hl kwa">cond</span>
      <span class="hl sym">((</span><span class="hl kwa">and</span> <span class="hl sym">(</span>typep gene1 <span class="hl sym">'</span>fixnum<span class="hl sym">) (</span>typep gene2 <span class="hl sym">'</span>fixnum<span class="hl sym">))</span>
       <span class="hl sym">(</span>loop for i1 from gene1 below <span class="hl sym">(</span>the fixnum <span class="hl sym">(+</span> gene1 k<span class="hl sym">))</span>
	     for i2 from gene2 below <span class="hl sym">(</span>the fixnum <span class="hl sym">(+</span> gene2 k<span class="hl sym">))</span>
	     always <span class="hl sym">(</span>char<span class="hl sym">= (</span>schar gene i1<span class="hl sym">) (</span>schar gene i2<span class="hl sym">))))</span>
      <span class="hl sym">((</span>typep gene2 <span class="hl sym">'</span>fixnum<span class="hl sym">)</span>
       <span class="hl sym">(</span>loop for c of-<span class="hl kwa">type</span> base-char across gene1
	     for i from gene2 below <span class="hl sym">(</span>the fixnum <span class="hl sym">(+</span> gene2 k<span class="hl sym">))</span>
	     always <span class="hl sym">(</span>char<span class="hl sym">=</span> c <span class="hl sym">(</span>schar gene i<span class="hl sym">))))</span>
      <span class="hl sym">(</span>t
       <span class="hl sym">(</span>error <span class="hl str">&quot;Invalid Gene Comparison&quot;</span><span class="hl sym">)))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> sxhash-gene <span class="hl sym">(</span>gene<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
	   <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span><span class="hl kwa">or</span> simple-base-string fixnum<span class="hl sym">)</span> gene<span class="hl sym">)</span>
	   <span class="hl sym">(</span><span class="hl kwa">type</span> simple-base-string <span class="hl sym">*</span>gene<span class="hl sym">*)</span>
	   <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum <span class="hl sym">*</span>k<span class="hl sym">*))</span>
  <span class="hl sym">(</span>macrolet <span class="hl sym">((</span><span class="hl kwa">set</span>-result <span class="hl sym">(</span>form<span class="hl sym">)</span>
               `<span class="hl sym">(</span>setf result <span class="hl sym">(</span>ldb <span class="hl sym">(</span>byte <span class="hl num">32 0</span><span class="hl sym">) ,</span>form<span class="hl sym">))))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>result <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> <span class="hl sym">(</span>unsigned-byte <span class="hl num">32</span><span class="hl sym">)</span> result<span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>stringp gene<span class="hl sym">)</span>
	  <span class="hl sym">(</span>loop for c of-<span class="hl kwa">type</span> base-char across gene do
		<span class="hl sym">(</span><span class="hl kwa">set</span>-result <span class="hl sym">(+</span> result <span class="hl sym">(</span>char-code c<span class="hl sym">)))</span>
		<span class="hl sym">(</span><span class="hl kwa">set</span>-result <span class="hl sym">(+</span> result <span class="hl sym">(</span>ash result <span class="hl num">10</span><span class="hl sym">)))</span>
		<span class="hl sym">(</span><span class="hl kwa">set</span>-result <span class="hl sym">(</span>logxor result <span class="hl sym">(</span>ash result -<span class="hl num">6</span><span class="hl sym">))))</span>
	  <span class="hl sym">(</span>loop for i from gene below <span class="hl sym">(</span>the fixnum <span class="hl sym">(+</span> gene <span class="hl sym">*</span>k<span class="hl sym">*))</span> do
		<span class="hl sym">(</span><span class="hl kwa">set</span>-result <span class="hl sym">(+</span> result <span class="hl sym">(</span>char-code <span class="hl sym">(</span>aref <span class="hl sym">*</span>gene<span class="hl sym">*</span> i<span class="hl sym">))))</span>
		<span class="hl sym">(</span><span class="hl kwa">set</span>-result <span class="hl sym">(+</span> result <span class="hl sym">(</span>ash result <span class="hl num">10</span><span class="hl sym">)))</span>
		<span class="hl sym">(</span><span class="hl kwa">set</span>-result <span class="hl sym">(</span>logxor result <span class="hl sym">(</span>ash result -<span class="hl num">6</span><span class="hl sym">)))))</span>
      <span class="hl sym">(</span><span class="hl kwa">set</span>-result <span class="hl sym">(+</span> result <span class="hl sym">(</span>ash result <span class="hl num">3</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span><span class="hl kwa">set</span>-result <span class="hl sym">(</span>logxor result <span class="hl sym">(</span>ash result -<span class="hl num">11</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span><span class="hl kwa">set</span>-result <span class="hl sym">(</span>logxor result <span class="hl sym">(</span>ash result <span class="hl num">15</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span><span class="hl kwa">logand</span> result most-positive-fixnum<span class="hl sym">))))</span>

<span class="hl sym">(</span>sb-int<span class="hl sym">:</span>define-hash-table-test <span class="hl sym">'</span>gene #<span class="hl sym">'</span>gene<span class="hl sym">=</span> #<span class="hl sym">'</span>sxhash-gene<span class="hl sym">)</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> slice-<span class="hl kwa">and</span>-dice <span class="hl sym">(</span>gene k<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">))</span>
	   <span class="hl sym">(</span><span class="hl kwa">type</span> simple-base-string gene<span class="hl sym">)</span>
	   <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum k<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((*</span>gene<span class="hl sym">*</span> gene<span class="hl sym">)</span>
	<span class="hl sym">(*</span>k<span class="hl sym">*</span> k<span class="hl sym">)</span>
	<span class="hl sym">(</span>hash-table <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> k <span class="hl num">1</span><span class="hl sym">)</span>
			<span class="hl sym">(</span>make-hash-table <span class="hl sym">:</span>test <span class="hl sym">'</span>eql<span class="hl sym">)</span>
			<span class="hl sym">(</span>make-hash-table <span class="hl sym">:</span>test <span class="hl sym">'</span>gene<span class="hl sym">))))</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> k <span class="hl num">1</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>loop for i from <span class="hl num">0</span> to <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>- <span class="hl sym">(</span><span class="hl kwa">length</span> gene<span class="hl sym">)</span> k<span class="hl sym">))</span> do
	      <span class="hl sym">(</span>incf <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>gethash <span class="hl sym">(</span>schar gene i<span class="hl sym">)</span> hash-table <span class="hl num">0</span><span class="hl sym">))))</span>
	<span class="hl sym">(</span>loop for i from <span class="hl num">0</span> to <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>- <span class="hl sym">(</span><span class="hl kwa">length</span> gene<span class="hl sym">)</span> k<span class="hl sym">))</span> do
	      <span class="hl sym">(</span>incf <span class="hl sym">(</span>the fixnum <span class="hl sym">(</span>gethash i hash-table <span class="hl num">0</span><span class="hl sym">)))))</span>
    hash-table<span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> discard-data-header <span class="hl sym">(</span>stream<span class="hl sym">)</span>
  <span class="hl sym">(</span>loop for <span class="hl kwa">line</span> <span class="hl sym">= (</span><span class="hl kwa">read</span>-<span class="hl kwa">line</span> stream nil nil<span class="hl sym">)</span>
	<span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">and line</span> <span class="hl sym">(</span>string<span class="hl sym">/=</span> <span class="hl str">&quot;&gt;THREE&quot;</span> <span class="hl kwa">line</span> <span class="hl sym">:</span>end2 <span class="hl num">6</span><span class="hl sym">))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun read</span>-data <span class="hl sym">(</span>stream<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>data <span class="hl sym">(</span>make-array <span class="hl num">0</span> <span class="hl sym">:</span>element-<span class="hl kwa">type</span> <span class="hl sym">'</span>base-char <span class="hl sym">:</span>adjustable t <span class="hl sym">:</span>fill-pointer <span class="hl num">0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>do <span class="hl sym">((</span><span class="hl kwa">line</span> <span class="hl sym">(</span><span class="hl kwa">read</span>-<span class="hl kwa">line</span> stream nil <span class="hl sym">'</span>eof<span class="hl sym">) (</span><span class="hl kwa">read</span>-<span class="hl kwa">line</span> stream nil <span class="hl sym">'</span>eof<span class="hl sym">)))</span>
        <span class="hl sym">((</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">eq line</span> <span class="hl sym">'</span>eof<span class="hl sym">) (</span>char<span class="hl sym">= (</span>schar <span class="hl kwa">line</span> <span class="hl num">0</span><span class="hl sym">)</span> #\&gt;<span class="hl sym">)))</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>char<span class="hl sym">= (</span>schar <span class="hl kwa">line</span> <span class="hl num">0</span><span class="hl sym">)</span> #\;<span class="hl sym">))</span>
          <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>char-index <span class="hl sym">(</span><span class="hl kwa">length line</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>vector-push-extend <span class="hl sym">(</span>char-upcase <span class="hl sym">(</span>the base-char <span class="hl sym">(</span>schar <span class="hl kwa">line</span> char-index<span class="hl sym">)))</span> data<span class="hl sym">))))</span>
    <span class="hl sym">(</span>coerce data <span class="hl sym">'</span>simple-base-string<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun print</span>-precentages <span class="hl sym">(</span>gene k<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> simple-base-string gene<span class="hl sym">)</span>
	   <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum k<span class="hl sym">))</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>ht <span class="hl sym">(</span>slice-<span class="hl kwa">and</span>-dice gene k<span class="hl sym">))</span>
	 <span class="hl sym">(</span>sorted-frequencies<span class="hl sym">)</span>
	 <span class="hl sym">(</span>sum <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>maphash <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>key v<span class="hl sym">)</span>
	       <span class="hl sym">(</span>incf sum v<span class="hl sym">)</span>
	       <span class="hl sym">(</span>push <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> k <span class="hl num">1</span><span class="hl sym">)</span> key
			       <span class="hl sym">(</span>subseq gene key <span class="hl sym">(+</span> key k<span class="hl sym">)))</span>
			   v<span class="hl sym">)</span>
		     sorted-frequencies<span class="hl sym">))</span>
	     ht<span class="hl sym">)</span>
    <span class="hl sym">(</span>setf sorted-frequencies
	  <span class="hl sym">(</span>sort sorted-frequencies
		<span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>v1 v2<span class="hl sym">)</span>
		  <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((&gt; (</span><span class="hl kwa">cdr</span> v1<span class="hl sym">) (</span><span class="hl kwa">cdr</span> v2<span class="hl sym">))</span> t<span class="hl sym">)</span>
			<span class="hl sym">((&lt; (</span><span class="hl kwa">cdr</span> v1<span class="hl sym">) (</span><span class="hl kwa">cdr</span> v2<span class="hl sym">))</span> nil<span class="hl sym">)</span>
			<span class="hl sym">(</span>t <span class="hl sym">(</span>string<span class="hl sym">&lt; (</span><span class="hl kwa">car</span> v1<span class="hl sym">) (</span><span class="hl kwa">car</span> v2<span class="hl sym">)))))))</span>
    <span class="hl sym">(</span>dolist <span class="hl sym">(</span>entry sorted-frequencies<span class="hl sym">)</span>
      <span class="hl sym">(</span>format t <span class="hl str">&quot;~A ~,3F~%&quot;</span>
	      <span class="hl sym">(</span><span class="hl kwa">car</span> entry<span class="hl sym">)</span>
	      <span class="hl sym">(* (/ (</span><span class="hl kwa">cdr</span> entry<span class="hl sym">) (</span><span class="hl kwa">float</span> sum<span class="hl sym">))</span> <span class="hl num">100.0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">terpri</span><span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun print</span>-occurence <span class="hl sym">(</span>slice gene<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>ht <span class="hl sym">(</span>slice-<span class="hl kwa">and</span>-dice gene <span class="hl sym">(</span><span class="hl kwa">length</span> slice<span class="hl sym">))))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;~A~C~A~%&quot;</span> <span class="hl sym">(</span>gethash slice ht <span class="hl num">0</span><span class="hl sym">)</span> #\Tab slice<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> slice <span class="hl sym">(</span>string<span class="hl sym">) (</span>coerce string <span class="hl sym">'</span>simple-base-string<span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">0</span><span class="hl sym">) (</span>safety <span class="hl num">1</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>discard-data-header <span class="hl sym">*</span>standard-input<span class="hl sym">*)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>gene <span class="hl sym">(</span><span class="hl kwa">read</span>-data <span class="hl sym">*</span>standard-input<span class="hl sym">*)))</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-precentages gene <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-precentages gene <span class="hl num">2</span><span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-occurence <span class="hl sym">(</span>slice <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">)</span> gene<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-occurence <span class="hl sym">(</span>slice <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">)</span> gene<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-occurence <span class="hl sym">(</span>slice <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">)</span> gene<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-occurence <span class="hl sym">(</span>slice <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">)</span> gene<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">print</span>-occurence <span class="hl sym">(</span>slice <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">)</span> gene<span class="hl sym">)))</span>


<span class="hl sym">(</span><span class="hl kwa">defun</span> test <span class="hl sym">()</span>
  <span class="hl sym">(</span>with-<span class="hl kwa">open</span>-file <span class="hl sym">(*</span>standard-input<span class="hl sym">*</span> <span class="hl str">&quot;/home/wade/lisp/knucleotide/knucleotide-input.txt&quot;</span>
				    <span class="hl sym">:</span>direction <span class="hl sym">:</span>input<span class="hl sym">)</span>
    <span class="hl sym">(</span>with-<span class="hl kwa">open</span>-file <span class="hl sym">(*</span>standard-output<span class="hl sym">*</span> <span class="hl str">&quot;/home/wade/lisp/knucleotide/output.txt&quot;</span>
				       <span class="hl sym">:</span>direction <span class="hl sym">:</span>output
				       <span class="hl sym">:</span><span class="hl kwa">if</span>-does-<span class="hl kwa">not</span>-exist <span class="hl sym">:</span>create
				       <span class="hl sym">:</span><span class="hl kwa">if</span>-exists <span class="hl sym">:</span>supersede<span class="hl sym">)</span>
      <span class="hl sym">(</span>main<span class="hl sym">))))</span>
