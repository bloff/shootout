<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Anthony Borla</span>
<span class="hl slc">;;; modified by Tobia Conforto</span>

<span class="hl sym">(</span>define-constant <span class="hl sym">+</span>limit-sqr<span class="hl sym">+</span> <span class="hl num">4.0</span><span class="hl sym">)</span>

<span class="hl sym">(</span>define-constant <span class="hl sym">+</span>iterations<span class="hl sym">+</span> <span class="hl num">50</span><span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>mandelbrot x y n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>cr <span class="hl sym">(</span>- <span class="hl sym">(/ (*</span> <span class="hl num">2.0</span> x<span class="hl sym">)</span> n<span class="hl sym">)</span> <span class="hl num">1.5</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>ci <span class="hl sym">(</span>- <span class="hl sym">(/ (*</span> <span class="hl num">2.0</span> y<span class="hl sym">)</span> n<span class="hl sym">)</span> <span class="hl num">1.0</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">)</span>
               <span class="hl sym">(</span>zr <span class="hl num">0.0</span><span class="hl sym">)</span>
               <span class="hl sym">(</span>zi <span class="hl num">0.0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>zrq <span class="hl sym">(</span>fp<span class="hl sym">*</span> zr zr<span class="hl sym">))</span>
            <span class="hl sym">(</span>ziq <span class="hl sym">(</span>fp<span class="hl sym">*</span> zi zi<span class="hl sym">)))</span>
        <span class="hl sym">(</span><span class="hl kwa">cond</span>
         <span class="hl sym">((</span>fx<span class="hl sym">&gt;</span> i <span class="hl sym">+</span>iterations<span class="hl sym">+)</span> <span class="hl num">1</span><span class="hl sym">)</span>
         <span class="hl sym">((</span>fp<span class="hl sym">&gt; (</span>fp<span class="hl sym">+</span> zrq ziq<span class="hl sym">) +</span>limit-sqr<span class="hl sym">+)</span> <span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl sym">(</span>else
          <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl sym">(</span>fp<span class="hl sym">+</span> cr <span class="hl sym">(</span>fp- zrq ziq<span class="hl sym">))</span>
                <span class="hl sym">(</span>fp<span class="hl sym">+</span> ci <span class="hl sym">(</span>fp<span class="hl sym">*</span> <span class="hl num">2.0</span> <span class="hl sym">(</span>fp<span class="hl sym">*</span> zr zi<span class="hl sym">))))))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main n<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">print</span> <span class="hl str">&quot;P4&quot;</span><span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">print</span> n <span class="hl str">&quot; &quot;</span> n<span class="hl sym">)</span>
  <span class="hl sym">(</span>do <span class="hl sym">((</span>y <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> y <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">((</span>fx<span class="hl sym">=</span> y n<span class="hl sym">)</span> #f<span class="hl sym">)</span>
    <span class="hl sym">(</span>let loop-x <span class="hl sym">((</span>x <span class="hl num">0</span><span class="hl sym">)</span>
                 <span class="hl sym">(</span>bitnum <span class="hl num">0</span><span class="hl sym">)</span>
                 <span class="hl sym">(</span>bits <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">cond</span>
       <span class="hl sym">((</span>fx<span class="hl sym">=</span> x n<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>fx<span class="hl sym">&gt;</span> bitnum <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl sym">(</span>write-char <span class="hl sym">(</span>integer-<span class="hl sym">&gt;</span>char <span class="hl sym">(</span>fxshl bits <span class="hl sym">(</span>fx- <span class="hl num">8</span> <span class="hl sym">(</span>fxmod n <span class="hl num">8</span><span class="hl sym">)))))</span>
            #f<span class="hl sym">))</span>
       <span class="hl sym">((</span>fx<span class="hl sym">=</span> bitnum <span class="hl num">8</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>write-char <span class="hl sym">(</span>integer-<span class="hl sym">&gt;</span>char bits<span class="hl sym">))</span>
        <span class="hl sym">(</span>loop-x <span class="hl sym">(</span>fx<span class="hl sym">+</span> x <span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl num">1</span>
                <span class="hl sym">(</span>mandelbrot x y n<span class="hl sym">)))</span>
       <span class="hl sym">(</span>else
        <span class="hl sym">(</span>loop-x <span class="hl sym">(</span>fx<span class="hl sym">+</span> x <span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl sym">(</span>fx<span class="hl sym">+</span> bitnum <span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl sym">(</span>fxior <span class="hl sym">(</span>fxshl bits <span class="hl num">1</span><span class="hl sym">)</span>
                       <span class="hl sym">(</span>mandelbrot x y n<span class="hl sym">))))))))</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">))))</span>
