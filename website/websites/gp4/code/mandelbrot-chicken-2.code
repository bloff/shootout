<span class="slc">;;; The Great Computer Language Shootout
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; implemented by Greg Buchholz
</span><span class="slc">;;; optimized by Alex Shinn
</span><span class="slc">;;;
</span><span class="slc">;;; compile:  csc mandelbrot.chicken -O3 -d0 -disable-interrupts -block -lambda-lift -o mandelbrot
</span>
<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">))))
    (</span>display <span class="str">&quot;P4&quot;</span><span class="sym">) (</span>newline<span class="sym">) (</span>display n<span class="sym">) (</span>display <span class="str">&quot; &quot;</span><span class="sym">) (</span>display n<span class="sym">) (</span>newline<span class="sym">)
    (</span>printPBM n<span class="sym">)))

(</span>define<span class="sym">-</span>inline <span class="sym">(</span>square x<span class="sym">) (</span>fx<span class="sym">*</span> x x<span class="sym">))

(</span>define <span class="sym">(</span>points x y n<span class="sym">)
  (</span>mandel <span class="sym">(</span>fp<span class="sym">- (</span>fp<span class="sym">*</span> <span class="num">2.0</span> <span class="sym">(</span>exact<span class="sym">-&gt;</span>inexact <span class="sym">(/</span> x n<span class="sym">)))</span> <span class="num">1.5</span><span class="sym">)
          (</span>fp<span class="sym">- (</span>fp<span class="sym">*</span> <span class="num">2.0</span> <span class="sym">(</span>exact<span class="sym">-&gt;</span>inexact <span class="sym">(/</span> y n<span class="sym">)))</span> <span class="num">1.0</span><span class="sym">)
</span>          <span class="num">0.0
          0.0
          50</span><span class="sym">))

(</span>define <span class="sym">(</span>mandel c1 c2 z1 z2 iter<span class="sym">)
  (</span><span class="kwa">if</span> <span class="sym">(</span>fx<span class="sym">=</span> iter <span class="num">0</span><span class="sym">)
</span>    <span class="num">1
</span>    <span class="sym">(</span>let<span class="sym">* ((</span>z3 <span class="sym">(</span>fp<span class="sym">- (</span>fp<span class="sym">*</span> z1 z1<span class="sym">) (</span>fp<span class="sym">*</span> z2 z2<span class="sym">)))
           (</span>z4 <span class="sym">(</span>fp<span class="sym">+ (</span>fp<span class="sym">*</span> z1 z2<span class="sym">) (</span>fp<span class="sym">*</span> z2 z1<span class="sym">)))
           (</span>n1 <span class="sym">(</span>fp<span class="sym">+</span> c1 z3<span class="sym">))
           (</span>n2 <span class="sym">(</span>fp<span class="sym">+</span> c2 z4<span class="sym">)))
      (</span><span class="kwa">if</span> <span class="sym">(</span>fp<span class="sym">&gt; (</span>fp<span class="sym">+ (</span>fp<span class="sym">*</span> n1 n1<span class="sym">) (</span>fp<span class="sym">*</span> n2 n2<span class="sym">))</span> <span class="num">4.0</span><span class="sym">)
</span>        <span class="num">0
</span>        <span class="sym">(</span>mandel c1 c2 n1 n2 <span class="sym">(</span>fx<span class="sym">-</span> iter <span class="num">1</span><span class="sym">))))))

(</span>define <span class="sym">(</span>printPBM n<span class="sym">)
  (</span>do <span class="sym">((</span>y <span class="num">0</span> <span class="sym">(</span>fx<span class="sym">+</span> y <span class="num">1</span><span class="sym">)))
      ((</span>fx<span class="sym">=</span> y n<span class="sym">))
    (</span>let lp <span class="sym">((</span>x <span class="num">1</span><span class="sym">) (</span>acc <span class="sym">(</span>points <span class="num">0</span> y n<span class="sym">)))
      (</span><span class="kwa">cond
</span>        <span class="sym">((</span>fx<span class="sym">=</span> x n<span class="sym">)
         (</span>display <span class="sym">(</span>integer<span class="sym">-&gt;</span>char <span class="sym">(</span>fx<span class="sym">*</span> acc <span class="sym">(</span>square <span class="sym">(</span>fxand x #b111<span class="sym">))))))
        ((</span>fx<span class="sym">=</span> <span class="num">0</span> <span class="sym">(</span>fxand x #b111<span class="sym">))
         (</span>display <span class="sym">(</span>integer<span class="sym">-&gt;</span>char acc<span class="sym">))
         (</span>lp <span class="sym">(</span>fx<span class="sym">+</span> x <span class="num">1</span><span class="sym">) (</span>points x y n<span class="sym">)))
        (</span>else
         <span class="sym">(</span>lp <span class="sym">(</span>fx<span class="sym">+</span> x <span class="num">1</span><span class="sym">) (</span>fx<span class="sym">+ (</span>fxshl acc <span class="num">1</span><span class="sym">) (</span>points x y n<span class="sym">))))))))

(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
