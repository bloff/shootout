<span class="slc">// ---------------------------------------------------------------------</span>
<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Redesigned [though minimally, and 'spirit' of original maintained as</span>
<span class="slc">// far as possible] by Anthony Borla based on code originally contributed</span>
<span class="slc">// by Jochen Hinrichsen.</span>
<span class="slc">//</span>
<span class="slc">// Original redesign used string concatenation to create segments but this</span>
<span class="slc">// proved extremely inefficient and slow, so modified code to utilise a</span>
<span class="slc">// StringBuffer</span>
<span class="slc">// ---------------------------------------------------------------------</span>

def <span class="kwd">revcomp</span><span class="sym">(</span>sequence<span class="sym">)</span>
<span class="sym">{</span>
  def complement <span class="sym">= [</span><span class="str">'A'</span><span class="sym">:</span><span class="str">'T'</span><span class="sym">,</span> <span class="str">'C'</span><span class="sym">:</span><span class="str">'G'</span><span class="sym">,</span> <span class="str">'G'</span><span class="sym">:</span><span class="str">'C'</span><span class="sym">,</span> <span class="str">'T'</span><span class="sym">:</span><span class="str">'A'</span><span class="sym">,</span> <span class="str">'M'</span><span class="sym">:</span><span class="str">'K'</span><span class="sym">,</span> <span class="str">'R'</span><span class="sym">:</span><span class="str">'Y'</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">:</span><span class="str">'W'</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">:</span><span class="str">'S'</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">:</span><span class="str">'R'</span><span class="sym">,</span> <span class="str">'K'</span><span class="sym">:</span><span class="str">'M'</span><span class="sym">,</span> <span class="str">'V'</span><span class="sym">:</span><span class="str">'B'</span><span class="sym">,</span> <span class="str">'H'</span><span class="sym">:</span><span class="str">'D'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">:</span><span class="str">'H'</span><span class="sym">,</span> <span class="str">'B'</span><span class="sym">:</span><span class="str">'V'</span><span class="sym">,</span> <span class="str">'N'</span><span class="sym">:</span><span class="str">'N'</span><span class="sym">]</span>
  def compseq <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StringBuffer</span><span class="sym">()</span>

  sequence<span class="sym">.</span><span class="kwd">reverse</span><span class="sym">().</span><span class="kwd">toUpperCase</span><span class="sym">().</span><span class="kwd">each</span><span class="sym">()</span>
  <span class="sym">{</span>
    compseq<span class="sym">.</span><span class="kwd">insert</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> complement<span class="sym">[</span>it<span class="sym">])</span>
  <span class="sym">}</span>

  compseq<span class="sym">.</span><span class="kwd">toString</span><span class="sym">()</span>
<span class="sym">}</span>

<span class="slc">// --------------</span>

def <span class="kwd">dumpSegment</span><span class="sym">(</span>segment<span class="sym">,</span> length<span class="sym">)</span>
<span class="sym">{</span>
  def segsize <span class="sym">=</span> segment<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ;</span> <span class="kwa">if</span> <span class="sym">(</span>segsize <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span>

  def start <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> def end <span class="sym">=</span> length <span class="sym">-</span> <span class="num">1</span>

  <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">)</span>
  <span class="sym">{</span>
    println segment<span class="sym">[</span>start <span class="sym">..</span> end<span class="sym">]</span>

    <span class="kwa">if</span> <span class="sym">(</span>end <span class="sym">+</span> length <span class="sym">&lt;</span> segsize <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
    <span class="sym">{</span>
      start <span class="sym">+=</span> length <span class="sym">;</span> end <span class="sym">+=</span> length
    <span class="sym">}</span>
    <span class="kwa">else</span>
    <span class="sym">{</span>
      println segment<span class="sym">[</span>end <span class="sym">+</span> <span class="num">1</span> <span class="sym">..</span> segsize <span class="sym">-</span> <span class="num">1</span><span class="sym">] ;</span> <span class="kwa">break</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  segment<span class="sym">.</span><span class="kwd">setLength</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
<span class="sym">}</span>

<span class="slc">// --------------------------------</span>

def <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
  System<span class="sym">.</span>in<span class="sym">.</span><span class="kwd">newReader</span><span class="sym">().</span>withReader <span class="sym">{</span> reader <span class="sym">-&gt;</span>

    def segment <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StringBuffer</span><span class="sym">();</span> def sequence <span class="sym">=</span> <span class="str">&quot;&quot;</span>

    <span class="kwa">while</span> <span class="sym">((</span>sequence <span class="sym">=</span> reader<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">()) !=</span> null<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">if</span> <span class="sym">(</span>sequence<span class="sym">.</span><span class="kwd">startsWith</span><span class="sym">(</span><span class="str">'&gt;'</span><span class="sym">))</span>
      <span class="sym">{</span>
        <span class="kwd">dumpSegment</span><span class="sym">(</span>segment<span class="sym">,</span> <span class="num">60</span><span class="sym">) ;</span> println sequence
      <span class="sym">}</span>
      <span class="kwa">else</span>
      <span class="sym">{</span>
        segment<span class="sym">.</span><span class="kwd">insert</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="kwd">revcomp</span><span class="sym">(</span>sequence<span class="sym">))</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwd">dumpSegment</span><span class="sym">(</span>segment<span class="sym">,</span> <span class="num">60</span><span class="sym">)</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="slc">// --------------------------------</span>

<span class="kwd">main</span><span class="sym">()</span>

