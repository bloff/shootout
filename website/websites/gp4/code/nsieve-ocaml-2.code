<span class="com">(*</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Christophe TROESTLER</span>
<span class="com"> *)</span>


<span class="kwa">module</span> Bit <span class="sym">=</span>
<span class="kwa">struct</span>
  <span class="kwa">let</span> get a i <span class="sym">=</span>
    Char.<span class="kwd">code</span><span class="sym">(</span>a.<span class="sym">[</span>i <span class="kwa">lsr</span> <span class="num">3</span><span class="sym">])</span> <span class="kwa">land</span> <span class="sym">(</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>i <span class="kwa">land</span> <span class="num">7</span><span class="sym">)) &gt;</span> <span class="num">0</span>

  <span class="kwa">let</span> set_false a i <span class="sym">=</span>
    <span class="kwa">let</span> ic <span class="sym">=</span> i <span class="kwa">lsr</span> <span class="num">3</span> <span class="kwa">in</span>
    a.<span class="sym">[</span>ic<span class="sym">] &lt;-</span> Char.<span class="kwd">chr</span><span class="sym">(</span>Char.<span class="kwd">code</span><span class="sym">(</span>a.<span class="sym">[</span>ic<span class="sym">])</span> <span class="kwa">land</span> <span class="kwd">lnot</span><span class="sym">(</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>i <span class="kwa">land</span> <span class="num">7</span><span class="sym">)))</span>

  <span class="kwa">let</span> nsieve m <span class="sym">=</span>
    <span class="kwa">let</span> a <span class="sym">=</span> String.<span class="kwd">make</span> <span class="sym">((</span>m <span class="kwa">lsr</span> <span class="num">3</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> '\2<span class="com">55' (* Fill with 1-bits *) in</span>
<span class="com">    let count = ref 0 in</span>
<span class="com">    for i = 2 to m - 1 do</span>
<span class="com">      if get a i then (</span>
<span class="com">	let j = ref(2*i) in</span>
<span class="com">	while !j &lt; m do set_false a !j;  j := !j + i done;</span>
<span class="com">	incr count</span>
<span class="com">      )</span>
<span class="com">    done;</span>
<span class="com">    !count</span>
<span class="com">end</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">let test n =</span>
<span class="com">  let m = (1 lsl n) * 10000 in</span>
<span class="com">  Printf.printf &quot;Primes up to %8i %8i\n&quot; m (Bit.nsieve m)</span>
<span class="com"></span>
<span class="com">let () =</span>
<span class="com">  let n = int_of_string Sys.argv.(1) in</span>
<span class="com">  test n;</span>
<span class="com">  if n &gt;= 1 then test(n-1);</span>
<span class="com">  if n &gt;= 2 then test(n-2)</span>
