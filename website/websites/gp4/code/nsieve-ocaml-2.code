<span class="com">(*</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Christophe TROESTLER</span>
<span class="com"> *)</span>


<span class="kwa">module</span> Bit <span class="sym">=</span>
<span class="kwa">struct</span>
  <span class="kwa">let</span> get a i <span class="sym">=</span>
    Char.<span class="kwd">code</span><span class="sym">(</span>a.<span class="sym">[</span>i <span class="kwa">lsr</span> <span class="num">3</span><span class="sym">])</span> <span class="kwa">land</span> <span class="sym">(</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>i <span class="kwa">land</span> <span class="num">7</span><span class="sym">)) &gt;</span> <span class="num">0</span>

  <span class="kwa">let</span> set_false a i <span class="sym">=</span>
    <span class="kwa">let</span> ic <span class="sym">=</span> i <span class="kwa">lsr</span> <span class="num">3</span> <span class="kwa">in</span>
    a.<span class="sym">[</span>ic<span class="sym">] &lt;-</span> Char.<span class="kwd">chr</span><span class="sym">(</span>Char.<span class="kwd">code</span><span class="sym">(</span>a.<span class="sym">[</span>ic<span class="sym">])</span> <span class="kwa">land</span> <span class="kwd">lnot</span><span class="sym">(</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>i <span class="kwa">land</span> <span class="num">7</span><span class="sym">)))</span>

  <span class="kwa">let</span> nsieve m <span class="sym">=</span>
    <span class="kwa">let</span> a <span class="sym">=</span> String.<span class="kwd">make</span> <span class="sym">((</span>m <span class="kwa">lsr</span> <span class="num">3</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> <span class="str">'</span><span class="esc">\2</span><span class="str">55'</span> <span class="com">(* Fill with 1-bits *)</span> <span class="kwa">in</span>
    <span class="kwa">let</span> count <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in</span>
    <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">2</span> <span class="kwa">to</span> m <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
      <span class="kwa">if</span> get a i <span class="kwa">then</span> <span class="sym">(</span>
	<span class="kwa">let</span> j <span class="sym">=</span> <span class="kwd">ref</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">)</span> <span class="kwa">in</span>
	<span class="kwa">while</span> <span class="sym">!</span>j <span class="sym">&lt;</span> m <span class="kwa">do</span> set_false a <span class="sym">!</span>j<span class="sym">;</span>  j <span class="sym">:= !</span>j <span class="sym">+</span> i <span class="kwa">done</span><span class="sym">;</span>
	incr count
      <span class="sym">)</span>
    <span class="kwa">done</span><span class="sym">;</span>
    <span class="sym">!</span>count
<span class="kwa">end</span>


<span class="kwa">let</span> test n <span class="sym">=</span>
  <span class="kwa">let</span> m <span class="sym">= (</span><span class="num">1</span> <span class="kwa">lsl</span> n<span class="sym">) *</span> <span class="num">10000</span> <span class="kwa">in</span>
  Printf.printf <span class="str">&quot;Primes up to %8i %8i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwd">m</span> <span class="sym">(</span>Bit.nsieve m<span class="sym">)</span>

<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> n <span class="sym">=</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">in</span>
  test n<span class="sym">;</span>
  <span class="kwa">if</span> n <span class="sym">&gt;=</span> <span class="num">1</span> <span class="kwa">then</span> <span class="kwd">test</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
  <span class="kwa">if</span> n <span class="sym">&gt;=</span> <span class="num">2</span> <span class="kwa">then</span> <span class="kwd">test</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)</span>
