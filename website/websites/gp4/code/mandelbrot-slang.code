<span class="dir">#!/usr/bin/env slsh</span>
<span class="sym">%</span> The Computer Language Shootout Benchmarks
<span class="sym">%</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
<span class="sym">%</span>
<span class="sym">%</span> contributed by John E<span class="sym">.</span> Davis

define <span class="kwd">slsh_main</span> <span class="sym">()</span>
<span class="sym">{</span>
   variable w <span class="sym">=</span> <span class="num">100</span><span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> w <span class="sym">=</span> <span class="kwd">integer</span> <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>

   variable h <span class="sym">=</span> w<span class="sym">,</span> iter <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>
   variable byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   variable limit <span class="sym">=</span> <span class="num">2.0</span><span class="sym">;</span>

   <span class="sym">() =</span> <span class="kwd">fprintf</span> <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> w<span class="sym">,</span> h<span class="sym">);</span>

   <span class="kwd">_for</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> h<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
     <span class="sym">{</span>
	variable y <span class="sym">= ();</span>
	variable x <span class="sym">= [</span><span class="num">0</span><span class="sym">:</span>w<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
	variable z <span class="sym">=</span> Complex_Type<span class="sym">[</span>w<span class="sym">];</span>
	variable c <span class="sym">= ((</span><span class="num">2.0</span><span class="sym">*</span>x<span class="sym">)/</span>w <span class="sym">+ ((</span><span class="num">2</span>i<span class="sym">*</span>y<span class="sym">)/</span>h <span class="sym">-</span> <span class="num">1</span>i <span class="sym">-</span> <span class="num">1.5</span><span class="sym">));</span>
	variable i<span class="sym">;</span>
	<span class="kwd">loop</span> <span class="sym">(</span>iter<span class="sym">)</span>
	  <span class="sym">{</span>
	     z <span class="sym">=</span> z<span class="sym">*</span>z <span class="sym">+</span> c<span class="sym">;</span>
	     i <span class="sym">=</span> <span class="kwd">where</span> <span class="sym">(</span><span class="kwd">abs</span><span class="sym">(</span>z<span class="sym">) &lt;</span> limit<span class="sym">);</span>
	     z <span class="sym">=</span> z<span class="sym">[</span>i<span class="sym">];</span> c <span class="sym">=</span> c<span class="sym">[</span>i<span class="sym">];</span> x <span class="sym">=</span> x<span class="sym">[</span>i<span class="sym">];</span>
	  <span class="sym">}</span>
	variable bytes <span class="sym">=</span> UChar_Type<span class="sym">[(</span>w<span class="sym">-</span><span class="num">1</span><span class="sym">)/</span><span class="num">8</span><span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
	variable bits <span class="sym">= (</span><span class="num">1</span> <span class="kwd">shl</span> <span class="sym">(</span><span class="num">7</span> <span class="sym">- (</span>x mod <span class="num">8</span><span class="sym">)));</span>
	x <span class="sym">/=</span> <span class="num">8</span><span class="sym">;</span>
	<span class="kwd">_for</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="kwd">length</span> <span class="sym">(</span>x<span class="sym">)-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
	  <span class="sym">{</span>
	     i <span class="sym">= ();</span>
	     bytes<span class="sym">[</span>x<span class="sym">[</span>i<span class="sym">]] |=</span> bits<span class="sym">[</span>i<span class="sym">];</span>
	  <span class="sym">}</span>
	<span class="sym">() =</span> <span class="kwd">fwrite</span> <span class="sym">(</span>bytes<span class="sym">,</span> stdout<span class="sym">);</span>
     <span class="sym">}</span>
<span class="sym">}</span>
