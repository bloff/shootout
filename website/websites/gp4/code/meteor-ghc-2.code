<span class="hl com">{-# OPTIONS -fglasgow-exts #-}</span>

<span class="hl com">{-</span>
<span class="hl com">   The Computer Language Shootout</span>
<span class="hl com">      http://shootout.alioth.debian.org/</span>
<span class="hl com">      contributed by Olof Kraigher</span>
<span class="hl com">-}</span>

<span class="hl kwa">module</span> Main <span class="hl kwa">where</span>

<span class="hl kwa">import</span> System<span class="hl sym">(</span>getArgs<span class="hl sym">);</span>      <span class="hl kwa">import</span> Data.List<span class="hl sym">;</span>   <span class="hl kwa">import</span> Data.Bits<span class="hl sym">;</span>      <span class="hl kwa">import</span> Data.Array.IArray<span class="hl sym">;</span>
<span class="hl kwa">import</span> Data.Word<span class="hl sym">(</span>Word64<span class="hl sym">);</span>   <span class="hl kwa">import</span> Data.Maybe<span class="hl sym">;</span>   <span class="hl kwa">import</span> Control.Monad<span class="hl sym">;</span>

<span class="hl kwa">data</span> Direction <span class="hl sym">=</span> E <span class="hl sym">|</span> SE <span class="hl sym">|</span> SW <span class="hl sym">|</span> W <span class="hl sym">|</span> NW <span class="hl sym">|</span> NE <span class="hl kwa">deriving</span> <span class="hl sym">(</span>Enum<span class="hl sym">,</span> Eq<span class="hl sym">,</span> Ord<span class="hl sym">,</span> Show<span class="hl sym">)</span>
<span class="hl kwa">type</span> Piece <span class="hl sym">= [</span>Direction<span class="hl sym">]</span>
<span class="hl kwa">type</span> Cell <span class="hl sym">= (</span><span class="hl kwb">Int</span><span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">)</span>
<span class="hl kwa">type</span> Mask <span class="hl sym">=</span> Word64
<span class="hl kwa">type</span> Color <span class="hl sym">=</span> <span class="hl kwb">Int</span>

<span class="hl kwa">class</span> Rotatable a <span class="hl kwa">where</span>
   rot <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> a

<span class="hl kwa">class</span> Floppable a <span class="hl kwa">where</span>
   flop <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> a

<span class="hl kwa">class</span> Maskable a <span class="hl kwa">where</span>
   mask <span class="hl sym">::</span> a <span class="hl sym">-&gt;</span> Mask

<span class="hl kwa">instance</span> Rotatable Direction <span class="hl kwa">where</span>
   rot NE <span class="hl sym">=</span> E
   rot d <span class="hl sym">=</span> succ d

<span class="hl kwa">instance</span> Rotatable Piece <span class="hl kwa">where</span>
   rot a <span class="hl sym">=</span> map rot a

<span class="hl kwa">instance</span> Floppable Direction <span class="hl kwa">where</span>
   flop E <span class="hl sym">=</span> W
   flop W <span class="hl sym">=</span> E
   flop SE <span class="hl sym">=</span> SW
   flop SW <span class="hl sym">=</span> SE
   flop NE <span class="hl sym">=</span> NW
   flop NW <span class="hl sym">=</span> NE

<span class="hl kwa">instance</span> Floppable Piece <span class="hl kwa">where</span>
   flop a <span class="hl sym">=</span> map flop a

<span class="hl kwa">instance</span> Maskable Cell <span class="hl kwa">where</span>
   mask <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) =</span> bit <span class="hl sym">(</span>x <span class="hl sym">+</span> y<span class="hl sym">*</span>width<span class="hl sym">)</span>

<span class="hl kwa">instance</span> Maskable <span class="hl sym">[</span>Cell<span class="hl sym">]</span> <span class="hl kwa">where</span>
   mask p <span class="hl sym">=</span> foldl<span class="hl str">' (\a b -&gt; a .|. mask b) 0 p</span>
<span class="hl str"></span>
<span class="hl str">width :: Int</span>
<span class="hl str">width = 5</span>
<span class="hl str"></span>
<span class="hl str">height :: Int</span>
<span class="hl str">height = 10</span>
<span class="hl str"></span>
<span class="hl str">cells :: [Cell]</span>
<span class="hl str">cells = [(x,y) | y &lt;- [0..height-1], x &lt;- [0..width-1]]</span>
<span class="hl str"></span>
<span class="hl str">fullMask :: Mask</span>
<span class="hl str">fullMask = 0x3FFFFFFFFFFFF</span>
<span class="hl str"></span>
<span class="hl str">pieces :: Array Color Piece</span>
<span class="hl str">pieces = array (0,9) $ zip [0..9] $</span>
<span class="hl str">      [   [E,    E,  E,  SE],</span>
<span class="hl str">         [SE, SW, W,  SW],</span>
<span class="hl str">         [W,  W,  SW, SE],</span>
<span class="hl str">         [E,  E,  SW, SE],</span>
<span class="hl str">         [NW, W,  NW, SE, SW],</span>
<span class="hl str">         [E,  E,  NE, W],</span>
<span class="hl str">         [NW, NE, NE, W],</span>
<span class="hl str">         [NE, SE, E,  NE],</span>
<span class="hl str">         [SE, SE, E,  SE],</span>
<span class="hl str">         [E,  NW, NW, NW]]</span>
<span class="hl str"></span>
<span class="hl str">valid :: Cell -&gt; Maybe Cell</span>
<span class="hl str">valid p&#64;(x,y)</span>
<span class="hl str">   | 0 &lt;= x, x &lt; width, 0 &lt;= y, y &lt; height = Just p</span>
<span class="hl str">   |otherwise = Nothing</span>
<span class="hl str"></span>
<span class="hl str">move :: Cell -&gt; Direction -&gt; Maybe Cell</span>
<span class="hl str">move (x,y) E = valid (x+1,y)</span>
<span class="hl str">move (x,y) W = valid (x-1,y)</span>
<span class="hl str">move (x,y) NE = valid (x+(mod y 2),y-1)</span>
<span class="hl str">move (x,y) NW = valid (x+(mod y 2)-1,y-1)</span>
<span class="hl str">move (x,y) SE = valid (x+(mod y 2),y+1)</span>
<span class="hl str">move (x,y) SW = valid (x+(mod y 2)-1,y+1)</span>
<span class="hl str"></span>
<span class="hl str">overlap :: Mask -&gt; Mask -&gt; Bool</span>
<span class="hl str">overlap a b = (a .&amp;. b) /= 0</span>
<span class="hl str"></span>
<span class="hl str">bitCount :: Mask -&gt; Int</span>
<span class="hl str">bitCount 0 = 0</span>
<span class="hl str">bitCount mask = (fromIntegral $ (mask .&amp;. 1)) + (bitCount (shiftR mask 1))</span>
<span class="hl str"></span>
<span class="hl str">floodFill :: Mask -&gt; Cell -&gt; Mask</span>
<span class="hl str">floodFill mask cell&#64;(x,y)</span>
<span class="hl str">   | overlap mask (bit $ x + y*width) = mask</span>
<span class="hl str">   | otherwise =</span>
<span class="hl str">      let mask'</span> <span class="hl sym">=</span> mask .<span class="hl sym">|</span>. <span class="hl sym">(</span>bit $ x <span class="hl sym">+</span> y<span class="hl sym">*</span>width<span class="hl sym">)</span>
      <span class="hl kwa">in</span>   foldl<span class="hl str">' floodFill mask'</span> $ mapMaybe <span class="hl sym">(</span>move cell<span class="hl sym">) [</span>E .. NE<span class="hl sym">]</span>

findFreeCell <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Cell
findFreeCell mask <span class="hl sym">=</span>
   fromJust $ find <span class="hl sym">(</span>\<span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">) -&gt;</span> not $ overlap mask <span class="hl sym">(</span>bit $ x <span class="hl sym">+</span> y<span class="hl sym">*</span>width<span class="hl sym">))</span> cells

noIslands <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> <span class="hl kwb">Bool</span>
noIslands mask <span class="hl sym">=</span> not $ any <span class="hl sym">(&lt;</span><span class="hl num">5</span><span class="hl sym">)</span> $ diffs $ noIslands<span class="hl str">' mask where</span>
<span class="hl str">   noIslands'</span> mask
      <span class="hl sym">|</span> mask <span class="hl sym">==</span> fullMask <span class="hl sym">= [</span>bitCount mask<span class="hl sym">]</span>
      <span class="hl sym">|</span> otherwise <span class="hl sym">= (</span>bitCount mask<span class="hl sym">) : (</span>noIslands<span class="hl str">' $ floodFill mask $ findFreeCell mask)</span>
<span class="hl str">   diffs l = zipWith (-) (tail l) l</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">placePiece :: Piece -&gt; Cell -&gt; Maybe [Cell]</span>
<span class="hl str">placePiece [] cell = Just [cell]</span>
<span class="hl str">placePiece (p:ps) cell = move cell p &gt;&gt;= (placePiece ps) &gt;&gt;= return . (cell:)</span>
<span class="hl str"></span>
<span class="hl str">pieceMasks :: Array Color [Mask]</span>
<span class="hl str">pieceMasks = amap pieceMasks'</span> pieces <span class="hl kwa">where</span>
   pieceMasks<span class="hl str">' piece</span>
<span class="hl str">      | piece == (pieces!5) = do</span>
<span class="hl str">         piece'</span> <span class="hl sym">&lt;- (</span>take <span class="hl num">3</span> $ iterate rot piece<span class="hl sym">) ++ (</span>take <span class="hl num">3</span> $ iterate rot $ flop $ piece<span class="hl sym">)</span>
         filter noIslands $ map mask $ mapMaybe <span class="hl sym">(</span>placePiece piece<span class="hl str">') cells</span>
<span class="hl str"></span>
<span class="hl str">      | otherwise = do</span>
<span class="hl str">         piece'</span> <span class="hl sym">&lt;- (</span>take <span class="hl num">6</span> $ iterate rot piece<span class="hl sym">) ++ (</span>take <span class="hl num">6</span> $ iterate rot $ flop $ piece<span class="hl sym">)</span>
         filter noIslands $ map mask $ mapMaybe <span class="hl sym">(</span>placePiece piece<span class="hl str">') cells</span>
<span class="hl str"></span>
<span class="hl str">pieceMasksAtCell :: Array Color (Array Cell [Mask])</span>
<span class="hl str">pieceMasksAtCell = amap pieceMasksAtCell'</span> pieceMasks <span class="hl kwa">where</span>
   pieceMasksAtCell<span class="hl str">' masks = array ((0,0),(width-1,height-1)) $ pieceMasksAtCell'</span><span class="hl str">' masks cells where</span>
<span class="hl str">      pieceMasksAtCell'</span><span class="hl str">' masks [] = []</span>
<span class="hl str">      pieceMasksAtCell'</span><span class="hl str">' masks (c:cs) =</span>
<span class="hl str">         let (a,b) = partition (overlap (mask c)) masks</span>
<span class="hl str">         in (c,a) : (pieceMasksAtCell'</span><span class="hl str">' b cs)</span>
<span class="hl str"></span>
<span class="hl str">nextCell :: Cell -&gt; Cell</span>
<span class="hl str">nextCell (4,y) = (0,y+1)</span>
<span class="hl str">nextCell (x,y) =  (x+1,y)</span>
<span class="hl str"></span>
<span class="hl str">solutions :: [String]</span>
<span class="hl str">solutions = solutions'</span> <span class="hl num">0</span> <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">) [</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">] []</span> <span class="hl kwa">where</span>

   solutions<span class="hl str">' :: Mask -&gt; Cell -&gt; [Color] -&gt; [(Color, Mask)]-&gt; [String]</span>
<span class="hl str">   solutions'</span> _ _ <span class="hl sym">[]</span> usedMasks <span class="hl sym">=</span>    <span class="hl kwa">let</span> s <span class="hl sym">=</span> stringOfColorMasks usedMasks <span class="hl kwa">in</span>   <span class="hl sym">[</span>s<span class="hl sym">,</span> invertString s<span class="hl sym">]</span>
   solutions<span class="hl str">' board cell colorsLeft usedMasks</span>
<span class="hl str">      | overlap board (mask cell) = solutions'</span> board <span class="hl sym">(</span>nextCell cell<span class="hl sym">)</span> colorsLeft usedMasks
      <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> <span class="hl kwa">do</span>
         color <span class="hl sym">&lt;-</span> colorsLeft
         mask <span class="hl sym">&lt;-</span> filter <span class="hl sym">(</span>not.<span class="hl sym">(</span>overlap board<span class="hl sym">))</span> $ pieceMasksAtCell<span class="hl sym">!</span>color<span class="hl sym">!</span>cell
         solutions<span class="hl str">' (board .|. mask) (nextCell cell) (colorsLeft \\ [color]) ((color, mask):usedMasks)</span>
<span class="hl str"></span>
<span class="hl str">stringOfColorMasks :: [(Color, Mask)] -&gt; String</span>
<span class="hl str">stringOfColorMasks colorMasks =</span>
<span class="hl str">   tail.show.(+10^(width*height)).sum $ map (\(c,m) -&gt; (fromIntegral c) * (binToDec m)) colorMasks where</span>
<span class="hl str">   binToDec :: Mask -&gt; Integer</span>
<span class="hl str">   binToDec 0 = 0</span>
<span class="hl str">   binToDec n = (fromIntegral (mod n 2)) + 10*(binToDec $ div n 2)</span>
<span class="hl str"></span>
<span class="hl str">invertString :: String -&gt; String</span>
<span class="hl str">invertString s = map (\(x,y) -&gt; s!!(width-x-1 + (height-y-1)*width)) cells</span>
<span class="hl str"></span>
<span class="hl str">printSolution :: String -&gt; IO ()</span>
<span class="hl str">printSolution solution = printSolution'</span> <span class="hl num">0</span> solution <span class="hl kwa">where</span>
   printSolution<span class="hl str">' cell [] = return ()</span>
<span class="hl str">   printSolution'</span> cell <span class="hl sym">(</span>s<span class="hl sym">:</span>ss<span class="hl sym">) =</span> <span class="hl kwa">do</span>
      putStr $ s<span class="hl sym">:</span><span class="hl str">&quot; &quot;</span>
      <span class="hl kwa">case</span> mod <span class="hl sym">(</span>cell<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> width <span class="hl kwa">of</span>
         <span class="hl num">0</span> <span class="hl sym">-&gt;</span> <span class="hl kwa">case</span> mod <span class="hl sym">(</span>cell<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) (</span><span class="hl num">2</span><span class="hl sym">*</span>width<span class="hl sym">)</span> <span class="hl kwa">of</span>
            <span class="hl num">0</span> <span class="hl sym">-&gt;</span> putStr <span class="hl str">&quot;\n&quot;</span>
            _ <span class="hl sym">-&gt;</span> putStr <span class="hl str">&quot;\n &quot;</span>
         _ <span class="hl sym">-&gt;</span> return <span class="hl sym">()</span>

      printSolution<span class="hl str">' (cell+1) ss</span>
<span class="hl str"></span>
<span class="hl str">main = do</span>
<span class="hl str">   (n :: Int) &lt;- return.read.head =&lt;&lt; getArgs</span>
<span class="hl str">   let nsolutions = take n solutions</span>
<span class="hl str">   putStrLn $ (show $ length nsolutions) ++ &quot; solutions found\n&quot;</span>
<span class="hl str">   printSolution $ minimum nsolutions</span>
<span class="hl str">   putStr &quot;\n&quot;</span>
<span class="hl str">   printSolution $ maximum nsolutions</span>
<span class="hl str">   putStr &quot;\n&quot;</span>
