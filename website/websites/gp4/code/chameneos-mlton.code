<span class="com">(* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Vesa Karvonen.</span>
<span class="com"> *</span>
<span class="com"> *)</span>

<span class="com">(* abbreviations *)</span>
<span class="kwa">structure</span> A<span class="sym">=</span>CommandLine <span class="kwa">and</span> C<span class="sym">=</span>CML <span class="kwa">and</span> I<span class="sym">=</span><span class="kwa">Int and</span> R<span class="sym">=</span>RunCML

<span class="com">(* color manipulation *)</span>
<span class="kwa">datatype</span> color <span class="sym">=</span> R <span class="sym">|</span> B <span class="sym">|</span> Y

<span class="kwa">val</span> compl <span class="sym">=</span> <span class="kwa">fn</span> <span class="sym">(</span>B<span class="sym">,</span>B<span class="sym">) =&gt;</span> B <span class="sym">| (</span>B<span class="sym">,</span>R<span class="sym">) =&gt;</span> Y <span class="sym">| (</span>B<span class="sym">,</span>Y<span class="sym">) =&gt;</span> R <span class="sym">| (</span>R<span class="sym">,</span>B<span class="sym">) =&gt;</span> Y <span class="sym">| (</span>R<span class="sym">,</span>R<span class="sym">) =&gt;</span> R
             <span class="sym">| (</span>R<span class="sym">,</span>Y<span class="sym">) =&gt;</span> B <span class="sym">| (</span>Y<span class="sym">,</span>B<span class="sym">) =&gt;</span> R <span class="sym">| (</span>Y<span class="sym">,</span>R<span class="sym">) =&gt;</span> B <span class="sym">| (</span>Y<span class="sym">,</span>Y<span class="sym">) =&gt;</span> Y

<span class="com">(* creates the meeting place *)</span>
<span class="kwa">fun</span> place n <span class="sym">=</span>
   <span class="kwa">let val</span> p <span class="sym">=</span> C.channel <span class="sym">()</span>
       <span class="kwa">fun</span> lp <span class="num">0</span> <span class="sym">= (</span>C.send <span class="sym">(</span>#<span class="num">1</span> <span class="sym">(</span>C.recv p<span class="sym">),</span> NONE<span class="sym">) ;</span> lp <span class="num">0</span><span class="sym">)</span>
         <span class="sym">|</span> lp n <span class="sym">=</span> <span class="kwa">let val</span> <span class="sym">((</span>a1<span class="sym">,</span> c1<span class="sym">), (</span>a2<span class="sym">,</span> c2<span class="sym">)) = (</span>C.recv p<span class="sym">,</span> C.recv p<span class="sym">)</span>
                  <span class="kwa">in</span> C.send <span class="sym">(</span>a1<span class="sym">,</span> SOME c2<span class="sym">) ;</span> C.send <span class="sym">(</span>a2<span class="sym">,</span> SOME c1<span class="sym">) ;</span> lp <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">end</span>
   <span class="kwa">in</span> ignore <span class="sym">(</span>C.spawn <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt;</span> lp n<span class="sym">)) ;</span> p <span class="kwa">end</span>

<span class="com">(* creates an animal *)</span>
<span class="kwa">fun</span> animal p m c <span class="sym">=</span> <span class="kwa">let val</span> a <span class="sym">=</span> C.channel <span class="sym">()</span>
                       <span class="kwa">fun</span> lp <span class="sym">(</span>n<span class="sym">,</span> c<span class="sym">) = (</span>C.send <span class="sym">(</span>p<span class="sym">, (</span>a<span class="sym">,</span> c<span class="sym">))</span>
                                      <span class="sym">;</span> <span class="kwa">case</span> C.recv a <span class="kwa">of</span>
                                            NONE <span class="sym">=&gt;</span> C.send <span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">)</span>
                                          <span class="sym">|</span> SOME oc <span class="sym">=&gt;</span> lp <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> compl <span class="sym">(</span>c<span class="sym">,</span> oc<span class="sym">)))</span>
                   <span class="kwa">in</span> ignore <span class="sym">(</span>C.spawn <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt;</span> lp <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> c<span class="sym">)))</span> <span class="kwa">end</span>

<span class="com">(* driver *)</span>
<span class="kwa">fun</span> go n <span class="sym">() =</span> <span class="kwa">let val</span> <span class="sym">(</span>p<span class="sym">,</span> m<span class="sym">) = (</span>place n<span class="sym">,</span> C.channel <span class="sym">())</span>
              <span class="kwa">in</span> foldl <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">(</span>c<span class="sym">,</span> f<span class="sym">) =&gt; (</span>animal p m c <span class="sym">;</span> f <span class="kwa">o</span> <span class="sym">(</span><span class="kwa">fn</span> s <span class="sym">=&gt;</span> s<span class="sym">+</span>C.recv m<span class="sym">)))</span>
                       <span class="sym">(</span><span class="kwa">fn</span> s <span class="sym">=&gt;</span> print <span class="sym">(</span>I.toString s^<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)) [</span>B<span class="sym">,</span> R<span class="sym">,</span> Y<span class="sym">,</span> B<span class="sym">]</span> <span class="num">0</span> <span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> R.doit <span class="sym">(</span>go<span class="sym">(</span>valOf<span class="sym">(</span>I.fromString<span class="sym">(</span>hd<span class="sym">(</span>A.arguments<span class="sym">())))</span> <span class="kwa">handle</span> _ <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">),</span> NONE<span class="sym">)</span>
