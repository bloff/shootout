<span class="slc">--</span>
<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Chris Kuklewicz and Don Stewart</span>
<span class="slc">--</span>

<span class="kwa">import</span> System<span class="sym">;</span> <span class="kwa">import</span> Numeric

main <span class="sym">=</span> <span class="kwa">do</span> n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head
          <span class="kwa">let</span> run <span class="sym">:: (</span>String<span class="sym">,</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span><span class="sym">) -&gt;</span> IO <span class="sym">()</span>
              run <span class="sym">(</span>s<span class="sym">,</span>f<span class="sym">) =</span> putStrLn $ <span class="sym">(</span>showFFloat <span class="sym">(</span>Just <span class="num">9</span><span class="sym">) (</span>f n <span class="num">0</span><span class="sym">) []) ++</span> <span class="str">&quot;\t&quot;</span> <span class="sym">++</span> s
          mapM_ run <span class="sym">[(</span><span class="str">&quot;(2/3)^k&quot;</span><span class="sym">,</span>      twth<span class="sym">), (</span><span class="str">&quot;k^-0.5&quot;</span> <span class="sym">,</span>             k05<span class="sym">)</span>
                    <span class="sym">,(</span><span class="str">&quot;1/k(k+1)&quot;</span><span class="sym">,</span>     kk1<span class="sym">),  (</span><span class="str">&quot;Flint Hills&quot;</span><span class="sym">,</span>         flhl<span class="sym">)</span>
                    <span class="sym">,(</span><span class="str">&quot;Cookson Hills&quot;</span><span class="sym">,</span>cook<span class="sym">), (</span><span class="str">&quot;Harmonic&quot;</span><span class="sym">,</span>            harm<span class="sym">)</span>
                    <span class="sym">,(</span><span class="str">&quot;Riemann Zeta&quot;</span><span class="sym">,</span> rmzt<span class="sym">), (</span><span class="str">&quot;Alternating Harmonic&quot;</span><span class="sym">,</span>alth<span class="sym">)</span>
                    <span class="sym">,(</span><span class="str">&quot;Gregory&quot;</span><span class="sym">,</span>      greg<span class="sym">)]</span>

twth k s <span class="sym">=</span> if k <span class="sym">== -</span><span class="num">1</span> <span class="kwa">then</span> s <span class="kwa">else</span> twth <span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>s<span class="sym">+((</span><span class="num">2</span><span class="sym">/</span><span class="num">3</span><span class="sym">)**</span>fromIntegral k<span class="sym">))</span>

k05 k s  <span class="sym">=</span> if k <span class="sym">==</span> <span class="num">0</span>  <span class="kwa">then</span> s <span class="kwa">else</span> k05 <span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>s<span class="sym">+(</span>fromIntegral k<span class="sym">**(-</span><span class="num">0.5</span><span class="sym">)))</span>

kk1 k s  <span class="sym">=</span> if k <span class="sym">==</span> <span class="num">0</span>  <span class="kwa">then</span> s <span class="kwa">else let</span> j <span class="sym">=</span> fromIntegral k <span class="kwa">in</span> kk1 <span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>s<span class="sym">+</span><span class="num">1</span><span class="sym">/(</span>j<span class="sym">*(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)))</span>

harm k s <span class="sym">=</span> if k <span class="sym">==</span> <span class="num">0</span>  <span class="kwa">then</span> s <span class="kwa">else</span> harm <span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>s<span class="sym">+</span><span class="num">1</span><span class="sym">/</span>fromIntegral k<span class="sym">)</span>

rmzt k s <span class="sym">=</span> if k <span class="sym">==</span> <span class="num">0</span>  <span class="kwa">then</span> s <span class="kwa">else</span> rmzt <span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>s<span class="sym">+</span><span class="num">1</span><span class="sym">/(</span>fromIntegral k<span class="sym">**</span><span class="num">2</span><span class="sym">))</span>

flhl k s <span class="sym">=</span> if k <span class="sym">==</span> <span class="num">0</span>  <span class="kwa">then</span> s <span class="kwa">else let</span> j <span class="sym">=</span> fromIntegral k <span class="kwa">in</span> flhl <span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>s<span class="sym">+</span><span class="num">1</span><span class="sym">/((</span>j<span class="sym">**</span><span class="num">3</span><span class="sym">)*(</span>sin j<span class="sym">**</span><span class="num">2</span><span class="sym">)))</span>

cook n s <span class="sym">=</span> loop <span class="num">1</span> s
    <span class="kwa">where</span> loop k s <span class="sym">=</span> if k <span class="sym">==</span> n <span class="kwa">then</span> s
                     <span class="kwa">else let</span> j <span class="sym">=</span> fromIntegral k <span class="kwa">in</span> loop <span class="sym">(</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>s<span class="sym">+</span><span class="num">1</span><span class="sym">/((</span>j<span class="sym">**</span><span class="num">3</span><span class="sym">)*((</span>cos j<span class="sym">)**</span><span class="num">2</span><span class="sym">)))</span>

alth k s <span class="sym">=</span> loop k <span class="sym">(-</span><span class="num">1</span><span class="sym">)</span> s
    <span class="kwa">where</span> loop k a s <span class="sym">=</span> if k <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> s <span class="kwa">else</span> loop <span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">) (-</span>a<span class="sym">) (</span>s<span class="sym">+</span>a<span class="sym">/</span>fromIntegral k<span class="sym">)</span>

greg k s <span class="sym">=</span> loop k <span class="sym">(-</span><span class="num">1</span><span class="sym">)</span> s
    <span class="kwa">where</span> loop k a s <span class="sym">=</span> if k <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> s <span class="kwa">else</span> loop <span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">) (-</span>a<span class="sym">) (</span>s<span class="sym">+</span>a<span class="sym">/(</span><span class="num">2</span><span class="sym">*</span>fromIntegral k<span class="sym">-</span><span class="num">1</span><span class="sym">))</span>

