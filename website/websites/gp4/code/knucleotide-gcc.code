<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Josh Goldfoot</span>
<span class="com">   to compile, use gcc -O3</span>
<span class="com"></span>
<span class="com">   This revision uses &quot;simple_hash.h,&quot; available from</span>
<span class="com">   http://cvs.alioth.debian.org/cgi-bin/cvsweb.cgi/shootout/bench/Include/?cvsroot=shootout</span>
<span class="com"></span>
<span class="com">*/</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;ctype.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include</span> <span class="dstr">&quot;../../Include/simple_hash.h&quot;</span><span class="dir"></span>

<span class="kwb">long</span>
<span class="kwd">hash_table_size</span> <span class="sym">(</span><span class="kwb">int</span> fl<span class="sym">,</span> <span class="kwb">long</span> buflen<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">long</span> maxsize1<span class="sym">,</span> maxsize2<span class="sym">;</span>

  maxsize1 <span class="sym">=</span> buflen <span class="sym">-</span> fl<span class="sym">;</span>
  maxsize2 <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
  <span class="kwa">while</span> <span class="sym">(--</span>fl <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> maxsize2 <span class="sym">&lt;</span> maxsize1<span class="sym">)</span>
    maxsize2 <span class="sym">=</span> maxsize2 <span class="sym">*</span> <span class="num">4</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>maxsize1 <span class="sym">&lt;</span> maxsize2<span class="sym">)</span>
    <span class="kwa">return</span> maxsize1<span class="sym">;</span>
  <span class="kwa">return</span> maxsize2<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">struct</span> ht_ht <span class="sym">*</span>
<span class="kwd">generate_frequencies</span> <span class="sym">(</span><span class="kwb">int</span> fl<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>buffer<span class="sym">,</span> <span class="kwb">long</span> buflen<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">struct</span> ht_ht <span class="sym">*</span>ht<span class="sym">;</span>
  <span class="kwb">char</span> <span class="sym">*</span>reader<span class="sym">;</span>
  <span class="kwb">long</span> i<span class="sym">;</span>
  <span class="kwb">char</span> nulled<span class="sym">;</span>

  <span class="kwa">if</span> <span class="sym">(</span>fl <span class="sym">&gt;</span> buflen<span class="sym">)</span>
    <span class="kwa">return</span> NULL<span class="sym">;</span>

  ht <span class="sym">=</span> <span class="kwd">ht_create</span> <span class="sym">(</span><span class="kwd">hash_table_size</span> <span class="sym">(</span>fl<span class="sym">,</span> buflen<span class="sym">));</span>
  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> buflen <span class="sym">-</span> fl <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
      reader <span class="sym">= &amp;(</span>buffer<span class="sym">[</span>i<span class="sym">]);</span>
      nulled <span class="sym">=</span> reader<span class="sym">[</span>fl<span class="sym">];</span>
      reader<span class="sym">[</span>fl<span class="sym">] =</span> <span class="num">0x00</span><span class="sym">;</span>
      <span class="kwd">ht_find_new</span> <span class="sym">(</span>ht<span class="sym">,</span> reader<span class="sym">)-&gt;</span>val<span class="sym">++;</span>
      reader<span class="sym">[</span>fl<span class="sym">] =</span> nulled<span class="sym">;</span>
    <span class="sym">}</span>
  <span class="kwa">return</span> ht<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> ssorter
<span class="sym">{</span>
  <span class="kwb">char</span> <span class="sym">*</span>string<span class="sym">;</span>
  <span class="kwb">int</span> num<span class="sym">;</span>
<span class="sym">}</span> sorter<span class="sym">;</span>

<span class="kwb">void</span>
<span class="kwd">write_frequencies</span> <span class="sym">(</span><span class="kwb">int</span> fl<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>buffer<span class="sym">,</span> <span class="kwb">long</span> buflen<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">struct</span> ht_ht <span class="sym">*</span>ht<span class="sym">;</span>
  <span class="kwb">long</span> total<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">,</span> size<span class="sym">;</span>
  <span class="kwb">struct</span> ht_node <span class="sym">*</span>nd<span class="sym">;</span>
  sorter <span class="sym">*</span>s<span class="sym">;</span>
  sorter tmp<span class="sym">;</span>

  ht <span class="sym">=</span> <span class="kwd">generate_frequencies</span> <span class="sym">(</span>fl<span class="sym">,</span> buffer<span class="sym">,</span> buflen<span class="sym">);</span>
  total <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  size <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>nd <span class="sym">=</span> <span class="kwd">ht_first</span> <span class="sym">(</span>ht<span class="sym">);</span> nd <span class="sym">!=</span> NULL<span class="sym">;</span> nd <span class="sym">=</span> <span class="kwd">ht_next</span> <span class="sym">(</span>ht<span class="sym">))</span>
    <span class="sym">{</span>
      total <span class="sym">=</span> total <span class="sym">+</span> nd<span class="sym">-&gt;</span>val<span class="sym">;</span>
      size<span class="sym">++;</span>
    <span class="sym">}</span>
  s <span class="sym">=</span> <span class="kwd">calloc</span> <span class="sym">(</span>size<span class="sym">,</span> <span class="kwa">sizeof</span> <span class="sym">(</span>sorter<span class="sym">));</span>
  i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>nd <span class="sym">=</span> <span class="kwd">ht_first</span> <span class="sym">(</span>ht<span class="sym">);</span> nd <span class="sym">!=</span> NULL<span class="sym">;</span> nd <span class="sym">=</span> <span class="kwd">ht_next</span> <span class="sym">(</span>ht<span class="sym">))</span>
    <span class="sym">{</span>
      s<span class="sym">[</span>i<span class="sym">].</span>string <span class="sym">=</span> nd<span class="sym">-&gt;</span>key<span class="sym">;</span>
      s<span class="sym">[</span>i<span class="sym">++].</span>num <span class="sym">=</span> nd<span class="sym">-&gt;</span>val<span class="sym">;</span>
    <span class="sym">}</span>
  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> size <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span> i<span class="sym">++)</span>
    <span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;</span> size<span class="sym">;</span> j<span class="sym">++)</span>
      <span class="kwa">if</span> <span class="sym">(</span>s<span class="sym">[</span>i<span class="sym">].</span>num <span class="sym">&lt;</span> s<span class="sym">[</span>j<span class="sym">].</span>num<span class="sym">)</span>
	<span class="sym">{</span>
	  <span class="kwd">memcpy</span> <span class="sym">(&amp;</span>tmp<span class="sym">, &amp;(</span>s<span class="sym">[</span>i<span class="sym">]),</span> <span class="kwa">sizeof</span> <span class="sym">(</span>sorter<span class="sym">));</span>
	  <span class="kwd">memcpy</span> <span class="sym">(&amp;(</span>s<span class="sym">[</span>i<span class="sym">]), &amp;(</span>s<span class="sym">[</span>j<span class="sym">]),</span> <span class="kwa">sizeof</span> <span class="sym">(</span>sorter<span class="sym">));</span>
	  <span class="kwd">memcpy</span> <span class="sym">(&amp;(</span>s<span class="sym">[</span>j<span class="sym">]), &amp;</span>tmp<span class="sym">,</span> <span class="kwa">sizeof</span> <span class="sym">(</span>sorter<span class="sym">));</span>
	<span class="sym">}</span>
  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> size<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;%s %.3f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> s<span class="sym">[</span>i<span class="sym">].</span>string<span class="sym">,</span> <span class="num">100</span> <span class="sym">* (</span><span class="kwb">float</span><span class="sym">)</span> s<span class="sym">[</span>i<span class="sym">].</span>num <span class="sym">/</span> total<span class="sym">);</span>
  <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
  <span class="kwd">ht_destroy</span> <span class="sym">(</span>ht<span class="sym">);</span>
  <span class="kwd">free</span> <span class="sym">(</span>s<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span>
<span class="kwd">write_count</span> <span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>searchFor<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>buffer<span class="sym">,</span> <span class="kwb">long</span> buflen<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">struct</span> ht_ht <span class="sym">*</span>ht<span class="sym">;</span>

  ht <span class="sym">=</span> <span class="kwd">generate_frequencies</span> <span class="sym">(</span><span class="kwd">strlen</span> <span class="sym">(</span>searchFor<span class="sym">),</span> buffer<span class="sym">,</span> buflen<span class="sym">);</span>
  <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\t</span><span class="str">%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">ht_find_new</span> <span class="sym">(</span>ht<span class="sym">,</span> searchFor<span class="sym">)-&gt;</span>val<span class="sym">,</span> searchFor<span class="sym">);</span>
  <span class="kwd">ht_destroy</span> <span class="sym">(</span>ht<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span>
<span class="kwd">main</span> <span class="sym">()</span>
<span class="sym">{</span>
  <span class="kwb">char</span> c<span class="sym">;</span>
  <span class="kwb">char</span> <span class="sym">*</span>line<span class="sym">, *</span>buffer<span class="sym">, *</span>tmp<span class="sym">, *</span>x<span class="sym">;</span>
  <span class="kwb">int</span> i<span class="sym">,</span> linelen<span class="sym">,</span> nothree<span class="sym">;</span>
  <span class="kwb">long</span> buflen<span class="sym">,</span> seqlen<span class="sym">;</span>

  line <span class="sym">=</span> <span class="kwd">malloc</span> <span class="sym">(</span><span class="num">256</span><span class="sym">);</span>
  <span class="kwa">if</span> <span class="sym">(!</span>line<span class="sym">)</span>
    <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
  seqlen <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  nothree <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>

  <span class="kwa">while</span> <span class="sym">(</span>nothree <span class="sym">&amp;&amp;</span> <span class="kwd">fgets</span> <span class="sym">(</span>line<span class="sym">,</span> <span class="num">255</span><span class="sym">,</span> stdin<span class="sym">))</span>
    <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span> <span class="sym">&amp;&amp;</span> line<span class="sym">[</span><span class="num">1</span><span class="sym">] ==</span> <span class="str">'T'</span> <span class="sym">&amp;&amp;</span> line<span class="sym">[</span><span class="num">2</span><span class="sym">] ==</span> <span class="str">'H'</span><span class="sym">)</span>
      nothree <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwd">free</span> <span class="sym">(</span>line<span class="sym">);</span>

  buflen <span class="sym">=</span> <span class="num">10240</span><span class="sym">;</span>
  buffer <span class="sym">=</span> <span class="kwd">malloc</span> <span class="sym">(</span>buflen <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwa">if</span> <span class="sym">(!</span>buffer<span class="sym">)</span>
    <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
  x <span class="sym">=</span> buffer<span class="sym">;</span>

  <span class="kwa">while</span> <span class="sym">(</span><span class="kwd">fgets</span> <span class="sym">(</span>x<span class="sym">,</span> <span class="num">255</span><span class="sym">,</span> stdin<span class="sym">))</span>
    <span class="sym">{</span>
      linelen <span class="sym">=</span> <span class="kwd">strlen</span> <span class="sym">(</span>x<span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span>linelen<span class="sym">)</span>
	<span class="sym">{</span>
	  <span class="kwa">if</span> <span class="sym">(</span>x<span class="sym">[</span>linelen <span class="sym">-</span> <span class="num">1</span><span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span>
	    linelen<span class="sym">--;</span>
	  c <span class="sym">=</span> x<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
	  <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
	    <span class="kwa">break</span><span class="sym">;</span>
	  <span class="kwa">else if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)</span>
	    <span class="sym">{</span>
	      seqlen <span class="sym">=</span> seqlen <span class="sym">+</span> linelen<span class="sym">;</span>
	      <span class="kwa">if</span> <span class="sym">(</span>seqlen <span class="sym">+</span> <span class="num">512</span> <span class="sym">&gt;=</span> buflen<span class="sym">)</span>
		<span class="sym">{</span>
		  buflen <span class="sym">=</span> buflen <span class="sym">+</span> <span class="num">10240</span><span class="sym">;</span>
		  tmp <span class="sym">=</span> <span class="kwd">realloc</span> <span class="sym">(</span>buffer<span class="sym">,</span> buflen <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
		  <span class="kwa">if</span> <span class="sym">(</span>tmp <span class="sym">==</span> NULL<span class="sym">)</span>
		    <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
		  buffer <span class="sym">=</span> tmp<span class="sym">;</span>
		  x <span class="sym">= &amp;(</span>buffer<span class="sym">[</span>seqlen<span class="sym">]);</span>
		<span class="sym">}</span>
	      <span class="kwa">else</span>
		x <span class="sym">= &amp;(</span>x<span class="sym">[</span>linelen<span class="sym">]);</span>
	      x<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> seqlen<span class="sym">;</span> i<span class="sym">++)</span>
    buffer<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">toupper</span> <span class="sym">(</span>buffer<span class="sym">[</span>i<span class="sym">]);</span>
  <span class="kwd">write_frequencies</span> <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
  <span class="kwd">write_frequencies</span> <span class="sym">(</span><span class="num">2</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
  <span class="kwd">write_count</span> <span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
  <span class="kwd">write_count</span> <span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
  <span class="kwd">write_count</span> <span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
  <span class="kwd">write_count</span> <span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
  <span class="kwd">write_count</span> <span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
  <span class="kwd">free</span> <span class="sym">(</span>buffer<span class="sym">);</span>
  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
