<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">object</span> revcomp
<span class="sym">{</span>
  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">var</span> segment<span class="sym">:</span> <span class="kwc">StringBuffer</span> <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span>
    <span class="kwa">var</span> sequence<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> Console<span class="sym">.</span>readLine<span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>sequence <span class="sym">!=</span> null<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">if</span> <span class="sym">(</span>sequence<span class="sym">.</span>charAt<span class="sym">(</span><span class="num">0</span><span class="sym">) ==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
      <span class="sym">{</span>
        <span class="kwa">if</span> <span class="sym">(</span>segment<span class="sym">.</span>length<span class="sym">() !=</span> <span class="num">0</span><span class="sym">)</span> dumpSegment<span class="sym">(</span>segment<span class="sym">,</span> <span class="num">60</span><span class="sym">);</span>
        Console<span class="sym">.</span>println<span class="sym">(</span>sequence<span class="sym">);</span>
      <span class="sym">}</span>
      <span class="kwa">else</span>
      <span class="sym">{</span>
        segment<span class="sym">.</span>append<span class="sym">(</span>sequence<span class="sym">);</span>
      <span class="sym">}</span>

      sequence <span class="sym">=</span> Console<span class="sym">.</span>readLine<span class="sym">;</span>
    <span class="sym">}</span>

    dumpSegment<span class="sym">(</span>segment<span class="sym">,</span> <span class="num">60</span><span class="sym">);</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> dumpSegment<span class="sym">(</span>segment<span class="sym">:</span> <span class="kwc">StringBuffer</span><span class="sym">,</span> splitlength<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    splitAndPrint<span class="sym">(</span>complement<span class="sym">(</span>segment<span class="sym">.</span>reverse<span class="sym">()),</span> splitlength<span class="sym">);</span> segment<span class="sym">.</span>setLength<span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> complement<span class="sym">(</span>segment<span class="sym">:</span> <span class="kwc">StringBuffer</span><span class="sym">):</span> <span class="kwc">StringBuffer</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">def</span> complement<span class="sym">(</span>code<span class="sym">:</span> <span class="kwb">char</span><span class="sym">):</span> <span class="kwb">char</span> <span class="sym">=</span>
    <span class="sym">{</span>
      <span class="kwa">return</span> <span class="str">&quot;TVGH</span><span class="esc">\0\0</span><span class="str">CD</span><span class="esc">\0\0</span><span class="str">M</span><span class="esc">\0</span><span class="str">KN</span><span class="esc">\0\0\0</span><span class="str">YSAABW</span><span class="esc">\0</span><span class="str">R</span><span class="esc">\0</span><span class="str">&quot;</span><span class="sym">.</span>charAt<span class="sym">(</span><span class="kwc">Character</span><span class="sym">.</span>toUpperCase<span class="sym">(</span>code<span class="sym">) -</span> <span class="str">'A'</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">val</span> length<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> segment<span class="sym">.</span>length<span class="sym">();</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> length<span class="sym">)</span>
    <span class="sym">{</span>
      segment<span class="sym">.</span>setCharAt<span class="sym">(</span>i<span class="sym">,</span> complement<span class="sym">(</span>segment<span class="sym">.</span>charAt<span class="sym">(</span>i<span class="sym">)));</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> segment<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> splitAndPrint<span class="sym">(</span>segment<span class="sym">:</span> <span class="kwc">StringBuffer</span><span class="sym">,</span> splitlength<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">var</span> start<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">val</span> length<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> segment<span class="sym">.</span>length<span class="sym">();</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> length<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">%</span> splitlength <span class="sym">==</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> i <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
      <span class="sym">{</span>
        Console<span class="sym">.</span>println<span class="sym">(</span>segment<span class="sym">.</span>substring<span class="sym">(</span>start<span class="sym">,</span> i<span class="sym">));</span> start <span class="sym">=</span> i<span class="sym">;</span>
      <span class="sym">}</span>

      i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>

    Console<span class="sym">.</span>println<span class="sym">(</span>segment<span class="sym">.</span>substring<span class="sym">(</span>start<span class="sym">,</span> i<span class="sym">));</span>
  <span class="sym">}</span>
<span class="sym">}</span>

