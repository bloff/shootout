<span class="hl slc">;;; The Computer Language Shootout</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; Contributed by: Shyamal Prasad, modified by Albert Krewinkel</span>

<span class="hl sym">(</span>in-package <span class="hl sym">:</span>bleifreidenker<span class="hl sym">)</span>
<span class="hl sym">(</span>defmacro partial-sum-to-n <span class="hl sym">((</span>partial-sum-name iter-start <span class="hl sym">&amp;</span>optional alternating<span class="hl sym">)</span>
                            <span class="hl sym">&amp;</span>body body<span class="hl sym">)</span>
  <span class="hl slc">;; The variable capture of k, a and n is intended</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>k-fixnum <span class="hl sym">(</span>gensym<span class="hl sym">)))</span>
   `<span class="hl sym">(</span>format t <span class="hl sym">,(</span>format nil <span class="hl str">&quot;~~,9f~A~A~~%&quot;</span> #\tab partial-sum-name<span class="hl sym">)</span>
     <span class="hl sym">(</span>loop
        <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>when alternating
                <span class="hl sym">'(</span>initially <span class="hl sym">(</span>setf a -<span class="hl num">1</span>d0<span class="hl sym">)</span>
                  for a double-<span class="hl kwa">float</span> <span class="hl sym">= (</span>- a<span class="hl sym">)))</span>
        for <span class="hl sym">,</span>k-fixnum fixnum from <span class="hl sym">,</span>iter-start to n
        sum <span class="hl sym">(</span>symbol-macrolet <span class="hl sym">((</span>k <span class="hl sym">(</span>coerce <span class="hl sym">,</span>k-fixnum <span class="hl sym">'</span>double-<span class="hl kwa">float</span><span class="hl sym">)))</span>
              <span class="hl sym">,</span>&#64;body<span class="hl sym">)</span>
        double-<span class="hl kwa">float</span><span class="hl sym">))))</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>inline ^<span class="hl num">2</span> ^<span class="hl num">3</span><span class="hl sym">))</span>
<span class="hl sym">(</span><span class="hl kwa">defun</span> ^<span class="hl num">2</span> <span class="hl sym">(</span>x<span class="hl sym">) (</span>declare <span class="hl sym">(</span>double-<span class="hl kwa">float</span> x<span class="hl sym">)) (</span>the double-<span class="hl kwa">float</span> <span class="hl sym">(*</span> x x<span class="hl sym">)))</span>
<span class="hl sym">(</span><span class="hl kwa">defun</span> ^<span class="hl num">3</span> <span class="hl sym">(</span>x<span class="hl sym">) (</span>declare <span class="hl sym">(</span>double-<span class="hl kwa">float</span> x<span class="hl sym">)) (</span>the double-<span class="hl kwa">float</span> <span class="hl sym">(*</span> x x x<span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">(&amp;</span>optional
	     <span class="hl sym">(</span>n <span class="hl sym">(</span>parse-integer
		 <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">last</span> #<span class="hl sym">+</span>sbcl sb-ext<span class="hl sym">:*</span>posix-argv<span class="hl sym">*</span>
				#<span class="hl sym">+</span>cmu  extensions<span class="hl sym">:*</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-strings<span class="hl sym">*))))))</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum n<span class="hl sym">)</span>
	   <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>compilation-speed <span class="hl num">0</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>macrolet <span class="hl sym">((</span>partial-sum-<span class="hl kwa">list</span> <span class="hl sym">(&amp;</span>rest partsum-<span class="hl kwa">list</span><span class="hl sym">)</span>
               `<span class="hl sym">(</span><span class="hl kwa">progn</span>
                  <span class="hl sym">,</span>&#64;<span class="hl sym">(</span>loop for <span class="hl sym">(</span>name start expr alternate<span class="hl sym">)</span> in partsum-<span class="hl kwa">list</span>
                       collect `<span class="hl sym">(</span>partial-sum-to-n <span class="hl sym">(,</span>name <span class="hl sym">,</span>start <span class="hl sym">,</span>alternate<span class="hl sym">)</span>
                                  <span class="hl sym">,</span>expr<span class="hl sym">)))))</span>
    <span class="hl sym">(</span>partial-sum-<span class="hl kwa">list</span>
     <span class="hl sym">(</span><span class="hl str">&quot;(2/3)^k&quot;</span>       <span class="hl num">0</span>    <span class="hl sym">(</span><span class="hl kwa">expt</span> #.<span class="hl sym">(</span>coerce <span class="hl num">2</span><span class="hl sym">/</span><span class="hl num">3</span> <span class="hl sym">'</span>double-<span class="hl kwa">float</span><span class="hl sym">)</span> k<span class="hl sym">))</span>
     <span class="hl sym">(</span><span class="hl str">&quot;k^-0.5&quot;</span>        <span class="hl num">1</span>    <span class="hl sym">(/</span> <span class="hl num">1.0</span>d0 <span class="hl sym">(</span><span class="hl kwa">sqrt</span> k<span class="hl sym">)))</span>
     <span class="hl sym">(</span><span class="hl str">&quot;1/k(k+1)&quot;</span>      <span class="hl num">1</span>    <span class="hl sym">(/</span> <span class="hl num">1</span>d0   <span class="hl sym">(*</span> k <span class="hl sym">(+</span> k <span class="hl num">1</span>d0<span class="hl sym">))))</span>
     <span class="hl sym">(</span><span class="hl str">&quot;Flint Hills&quot;</span>   <span class="hl num">1</span>    <span class="hl sym">(/</span> <span class="hl num">1.0</span>d0 <span class="hl sym">(* (</span>^<span class="hl num">3</span> k<span class="hl sym">)</span>
                                       <span class="hl sym">(</span>^<span class="hl num">2</span> <span class="hl sym">(</span><span class="hl kwa">sin</span> k<span class="hl sym">)))))</span>
     <span class="hl sym">(</span><span class="hl str">&quot;Cookson Hills&quot;</span> <span class="hl num">1</span>    <span class="hl sym">(/</span> <span class="hl num">1</span>d0   <span class="hl sym">(* (</span>^<span class="hl num">3</span> k<span class="hl sym">) (</span>^<span class="hl num">2</span> <span class="hl sym">(</span><span class="hl kwa">cos</span> k<span class="hl sym">)))))</span>
     <span class="hl sym">(</span><span class="hl str">&quot;Harmonic&quot;</span>      <span class="hl num">1</span>    <span class="hl sym">(/</span> <span class="hl num">1</span>d0   k<span class="hl sym">))</span>
     <span class="hl sym">(</span><span class="hl str">&quot;Riemann Zeta&quot;</span>  <span class="hl num">1</span>    <span class="hl sym">(/</span> <span class="hl num">1</span>d0   <span class="hl sym">(</span>^<span class="hl num">2</span> k<span class="hl sym">)))</span>
     <span class="hl sym">(</span><span class="hl str">&quot;Alternative Harmonic&quot;</span>   <span class="hl num">1</span>  <span class="hl sym">(/</span> a k<span class="hl sym">)</span>           t<span class="hl sym">)</span>
     <span class="hl sym">(</span><span class="hl str">&quot;Gregory&quot;</span>       <span class="hl num">1</span>    <span class="hl sym">(/</span> a <span class="hl sym">(</span>- <span class="hl sym">(*</span> <span class="hl num">2</span>d0 k<span class="hl sym">)</span> <span class="hl num">1</span>d0<span class="hl sym">))</span>  t<span class="hl sym">))))</span>
