BUILD COMMANDS FOR: message.sbcl

Fri Nov 10 09:38:32 PST 2006

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "message.sbcl_compile")'
### START message.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "message.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END message.sbcl_compile

; compiling file "/home/dunham/gp4/shootout/bench/message/tmp/message.sbcl" (written 10 NOV 2006 09:38:32 AM):
; compiling (DEFCONSTANT +SERIALIZE-THREADS+ ...)
; compiling (DEFPARAMETER *SERIALIZE-THREADS-MUTEX* ...)
; compiling (DEFPARAMETER *SERIALIZE-THREADS-COND* ...)
; compiling (DEFPARAMETER *SERIALIZE-THREADS-FLAG* ...)
; compiling (DEFPARAMETER *N-THREADS* ...)
; compiling (DEFMACRO FOREVER ...)
; compiling (DEFUN CREATE-COND ...)
; compiling (DEFUN CREATE-MUTEX ...)
; compiling (DEFUN LOCK-MUTEX ...)
; compiling (DEFUN RELEASE-MUTEX ...)
; compiling (DEFUN WAIT-ON-COND ...)
; compiling (DEFUN AWAKEN-COND-WAITER ...)
; compiling (DEFUN SPAWN-THREAD ...)
; compiling (DEFCLASS WORKER ...)
; compiling (DEFGENERIC WORK-FCN ...)
; compiling (DEFGENERIC MAIN-REAPER ...)
; compiling (DEFUN WAIT-FOR-MSG ...)
; file: /home/dunham/gp4/shootout/bench/message/tmp/message.sbcl
; in: DEFUN WAIT-FOR-MSG
;     (FUNCALL GET-MSG-FORM)
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN FUNCTION)
; 
; note: unable to
;   optimize away possible call to FDEFINITION at runtime
; due to type uncertainty:
;   The first argument is a (OR FUNCTION SYMBOL), not a FUNCTION.

; compiling (DEFMETHOD WORK-FCN ...)
; file: /home/dunham/gp4/shootout/bench/message/tmp/message.sbcl
; in: DEFMETHOD WORK-FCN (WORKER)
;     (1+ MSG)
; ==>
;   (+ MSG 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling (DEFMETHOD MAIN-REAPER ...)
; compiling (DEFUN MAIN ...)
; file: /home/dunham/gp4/shootout/bench/message/tmp/message.sbcl
; in: DEFUN MAIN
;     (INCF ACCUMULATOR (MAIN-REAPER MAINTHREAD))
; --> LET* 
; ==>
;   (+ ACCUMULATOR #:G80)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
;   The second argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
;   The second argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a SINGLE-FLOAT.
;   The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a DOUBLE-FLOAT.
;   The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;   The second argument is a NUMBER, not a REAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a REAL.
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;   The second argument is a NUMBER, not a REAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a REAL.
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (DOTIMES (I *N-THREADS*)
;     (SETF WORKER (MAKE-INSTANCE 'WORKER))
;     (SETF (GET-CLIENT WORKER) LAST-OBJ)
;     (SETF LAST-OBJ WORKER)
;     (WHEN +SERIALIZE-THREADS+ (SETF *SERIALIZE-THREADS-FLAG* NIL))
;     (SPAWN-THREAD #'(LAMBDA () (WORK-FCN WORKER)))
;     (WHEN +SERIALIZE-THREADS+
;       (LOCK-MUTEX *SERIALIZE-THREADS-MUTEX*)
;       (DO ()
;           (*SERIALIZE-THREADS-FLAG*)
;         (OR *SERIALIZE-THREADS-FLAG*
;             (WAIT-ON-COND *SERIALIZE-THREADS-COND* *SERIALIZE-THREADS-MUTEX*)))
;       (RELEASE-MUTEX *SERIALIZE-THREADS-MUTEX*)))
; --> DO BLOCK LET TAGBODY UNLESS COND IF NOT IF >= IF 
; ==>
;   (< I #:G65)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

; --> DO BLOCK LET TAGBODY PSETQ PSETF LET* MULTIPLE-VALUE-BIND LET 1+ 
; ==>
;   (+ I 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

;     (DOTIMES (I N)
;     (LOCK-MUTEX (GET-MUTEX WORKER))
;     (SETF (GET-MESSAGE WORKER) 0)
;     (AWAKEN-COND-WAITER (GET-COND WORKER))
;     (RELEASE-MUTEX (GET-MUTEX WORKER))
;     (INCF ACCUMULATOR (MAIN-REAPER MAINTHREAD)))
; --> DO BLOCK LET TAGBODY UNLESS COND IF NOT IF >= IF 
; ==>
;   (< I #:G74)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

;     (INCF ACCUMULATOR (MAIN-REAPER MAINTHREAD))
; --> LET* 
; ==>
;   (+ ACCUMULATOR #:G80)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a DOUBLE-FLOAT.
;       The second argument is a NUMBER, not a DOUBLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES DOUBLE-FLOAT
;                                                                &REST T).
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a SINGLE-FLOAT.
;       The second argument is a NUMBER, not a SINGLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES SINGLE-FLOAT
;                                                                &REST T).
;       etc.

;     (DOTIMES (I N)
;     (LOCK-MUTEX (GET-MUTEX WORKER))
;     (SETF (GET-MESSAGE WORKER) 0)
;     (AWAKEN-COND-WAITER (GET-COND WORKER))
;     (RELEASE-MUTEX (GET-MUTEX WORKER))
;     (INCF ACCUMULATOR (MAIN-REAPER MAINTHREAD)))
; --> DO BLOCK LET TAGBODY PSETQ PSETF LET* MULTIPLE-VALUE-BIND LET 1+ 
; ==>
;   (+ I 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

; compiling (IF +SERIALIZE-THREADS+ ...); 
; compilation unit finished
;   printed 20 notes


; /home/dunham/gp4/shootout/bench/message/tmp/message.fasl written
; compilation finished in 0:00:00
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /home/dunham/gp4/shootout/bench/message/tmp/sbcl.core:
writing 18778792 bytes from the read-only space at 0x01000000
writing 3880112 bytes from the static space at 0x05000000
writing 8192 bytes from the dynamic space at 0x09000000
done]
### START message.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END message.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load message.sbcl_run %A


PROGRAM OUTPUT
==============
7500000
