<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy *&quot;</span>

<span class="sym">!</span>Number methodsFor<span class="sym">:</span> <span class="str">'shootout'</span><span class="sym">!</span>

ackermann<span class="sym">:</span> aNumber
   <span class="sym">^</span><span class="kwa">self</span> <span class="sym">=</span> <span class="num">0</span>
      ifTrue<span class="sym">: [</span>aNumber <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>
      ifFalse<span class="sym">: [</span>
         aNumber <span class="sym">=</span> <span class="num">0</span>
            ifTrue<span class="sym">: [</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">1</span> ackermann<span class="sym">:</span>  <span class="num">1</span><span class="sym">]</span>
            ifFalse<span class="sym">: [</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">1</span> ackermann<span class="sym">: (</span><span class="kwa">self</span> ackermann<span class="sym">:</span> aNumber <span class="sym">-</span> <span class="num">1</span><span class="sym">)] ] !</span>

fibonacci
   <span class="sym">^</span><span class="kwa">self</span> <span class="sym">&lt;</span> <span class="num">2</span>
      ifTrue<span class="sym">: [</span><span class="kwa">self</span> unity<span class="sym">]</span>
      ifFalse<span class="sym">: [(</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">2</span><span class="sym">)</span> fibonacci <span class="sym">+ (</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> fibonacci<span class="sym">] !</span>


tak<span class="sym">:</span> y z<span class="sym">:</span> z
   <span class="sym">^</span>y <span class="sym">&lt;</span> <span class="kwa">self</span>
      ifTrue<span class="sym">: [ ((</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> y z<span class="sym">:</span> z<span class="sym">)</span>
           tak<span class="sym">: ((</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> z z<span class="sym">:</span> <span class="kwa">self</span><span class="sym">)</span>
             z<span class="sym">: ((</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> <span class="kwa">self</span> z<span class="sym">:</span> y<span class="sym">)</span>
         <span class="sym">]</span>
      ifFalse<span class="sym">: [</span>z<span class="sym">] ! !</span>


<span class="sym">|</span> n <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger<span class="sym">.</span>

Transcript show<span class="sym">:</span> <span class="str">'Ack(3,'</span><span class="sym">;</span> show<span class="sym">:</span> n printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">'): '</span><span class="sym">;</span>
   show<span class="sym">: (</span><span class="num">3</span> ackermann<span class="sym">:</span> n<span class="sym">)</span> printString<span class="sym">;</span> nl<span class="sym">.</span>

Transcript show<span class="sym">:</span> <span class="str">'Fib('</span><span class="sym">.</span>
<span class="sym">((</span><span class="num">27.0</span><span class="sym">+</span>n<span class="sym">)</span> asScaledDecimal<span class="sym">:</span> <span class="num">1</span><span class="sym">)</span> display<span class="sym">.</span> Transcript show<span class="sym">:</span> <span class="str">'): '</span><span class="sym">.</span>
<span class="sym">((</span><span class="num">27.0</span><span class="sym">+</span>n<span class="sym">)</span> fibonacci asScaledDecimal<span class="sym">:</span> <span class="num">1</span><span class="sym">)</span> displayNl<span class="sym">.</span>

n <span class="sym">:=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">.</span>
Transcript show<span class="sym">:</span> <span class="str">'Tak('</span><span class="sym">;</span> show<span class="sym">: (</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">)</span> printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">','</span><span class="sym">;</span>
   show<span class="sym">: (</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">)</span> printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">','</span><span class="sym">;</span> show<span class="sym">:</span> n printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">'): '</span><span class="sym">.</span>
<span class="sym">((</span><span class="num">3</span><span class="sym">*</span>n tak<span class="sym">:</span> <span class="num">2</span><span class="sym">*</span>n z<span class="sym">:</span> n<span class="sym">)</span> asScaledDecimal<span class="sym">:</span> <span class="num">1</span><span class="sym">)</span> displayNl<span class="sym">.</span>

Transcript show<span class="sym">:</span> <span class="str">'Fib(3): '</span><span class="sym">;</span> show<span class="sym">:</span> <span class="num">3</span> fibonacci printString<span class="sym">;</span> nl<span class="sym">.</span>

Transcript show<span class="sym">:</span> <span class="str">'Tak(3.0,2.0,1.0): '</span><span class="sym">.</span>
<span class="sym">((</span><span class="num">3.0</span> tak<span class="sym">:</span> <span class="num">2.0</span> z<span class="sym">:</span> <span class="num">1.0</span><span class="sym">)</span> asScaledDecimal<span class="sym">:</span> <span class="num">1</span><span class="sym">)</span> displayNl <span class="sym">!</span>
