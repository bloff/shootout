<span class="str">&quot;  The Computer Language Shootout</span>
<span class="str">   http://shootout.alioth.debian.org/</span>
<span class="str">   contributed by Isaac Gouy &quot;</span>

<span class="sym">!</span>Integer methodsFor<span class="sym">:</span> <span class="str">'shootout'</span><span class="sym">!</span>

ackermann<span class="sym">:</span> anInteger
   ^self <span class="sym">=</span> <span class="num">0</span>
      ifTrue<span class="sym">: [</span>anInteger <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>
      ifFalse<span class="sym">: [</span>
         anInteger <span class="sym">=</span> <span class="num">0</span>
            ifTrue<span class="sym">: [</span>self <span class="sym">-</span> <span class="num">1</span> ackermann<span class="sym">:</span>  <span class="num">1</span><span class="sym">]</span>
            ifFalse<span class="sym">: [</span>self <span class="sym">-</span> <span class="num">1</span> ackermann<span class="sym">: (</span>self ackermann<span class="sym">:</span> anInteger <span class="sym">-</span> <span class="num">1</span><span class="sym">)] ] ! !</span>


<span class="sym">!</span>Number methodsFor<span class="sym">:</span> <span class="str">'shootout'</span><span class="sym">!</span>

fibonacci
   ^self <span class="sym">&lt;</span> <span class="num">2</span>
      ifTrue<span class="sym">: [</span>self unity<span class="sym">]</span>
      ifFalse<span class="sym">: [(</span>self <span class="sym">-</span> <span class="num">2</span><span class="sym">)</span> fibonacci <span class="sym">+ (</span>self <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> fibonacci<span class="sym">] !</span>


tak<span class="sym">:</span> y z<span class="sym">:</span> z
   ^y <span class="sym">&lt;</span> self
      ifTrue<span class="sym">: [ ((</span>self <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> y z<span class="sym">:</span> z<span class="sym">)</span>
           tak<span class="sym">: ((</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> z z<span class="sym">:</span> self<span class="sym">)</span>
             z<span class="sym">: ((</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> self z<span class="sym">:</span> y<span class="sym">)</span>
         <span class="sym">]</span>
      ifFalse<span class="sym">: [</span>z<span class="sym">] ! !</span>


<span class="sym">|</span> n m <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger.

m <span class="sym">:=</span> n<span class="sym">+</span><span class="num">4</span>.
Transcript show<span class="sym">:</span> <span class="str">'Ack(3,'</span><span class="sym">;</span> show<span class="sym">:</span> m printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">'): '</span><span class="sym">;</span>
   show<span class="sym">: (</span><span class="num">3</span> ackermann<span class="sym">:</span> m<span class="sym">)</span> printString<span class="sym">;</span> nl.

m <span class="sym">:=</span> n<span class="sym">+</span><span class="num">9</span>.
Transcript show<span class="sym">:</span> <span class="str">'Fib('</span><span class="sym">;</span> show<span class="sym">:</span> m printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">'): '</span><span class="sym">;</span>
   show<span class="sym">:</span> m fibonacci printString<span class="sym">;</span> nl.

m <span class="sym">:=</span> n<span class="sym">+</span><span class="num">32</span>.
Transcript show<span class="sym">:</span> <span class="str">'Fib('</span><span class="sym">;</span> show<span class="sym">:</span> m printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">'): '</span>.
<span class="sym">((</span>m<span class="sym">*</span><span class="num">1.0</span>d0<span class="sym">)</span> fibonacci asScaledDecimal<span class="sym">:</span> <span class="num">1</span><span class="sym">)</span> displayNl.

Transcript show<span class="sym">:</span> <span class="str">'Tak('</span><span class="sym">;</span> show<span class="sym">: (</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">)</span> printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">','</span><span class="sym">;</span>
   show<span class="sym">: (</span>n<span class="sym">*</span><span class="num">2</span><span class="sym">)</span> printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">','</span><span class="sym">;</span> show<span class="sym">:</span> n printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">'): '</span><span class="sym">;</span>
   show<span class="sym">: ((</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">)</span> tak<span class="sym">:</span> n<span class="sym">*</span><span class="num">2</span> z<span class="sym">:</span> n<span class="sym">)</span> printString<span class="sym">;</span> nl.

m <span class="sym">:=</span> n<span class="sym">+</span><span class="num">2</span>.
Transcript show<span class="sym">:</span> <span class="str">'Tak('</span><span class="sym">;</span> show<span class="sym">: (</span>m<span class="sym">*</span><span class="num">3</span><span class="sym">)</span> printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">','</span><span class="sym">;</span>
   show<span class="sym">: (</span>m<span class="sym">*</span><span class="num">2</span><span class="sym">)</span> printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">','</span><span class="sym">;</span> show<span class="sym">:</span> m printString<span class="sym">;</span> show<span class="sym">:</span> <span class="str">'): '</span>.
<span class="sym">(((</span>m<span class="sym">*</span><span class="num">3.0</span>d0<span class="sym">)</span> tak<span class="sym">:</span> m<span class="sym">*</span><span class="num">2.0</span>d0 z<span class="sym">:</span> m<span class="sym">*</span><span class="num">1.0</span>d0<span class="sym">)</span> asScaledDecimal<span class="sym">:</span> <span class="num">1</span><span class="sym">)</span> displayNl <span class="sym">!</span>


