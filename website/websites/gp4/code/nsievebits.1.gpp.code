<span class="hl com">/*   The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   written by Jon Harrop, 2005</span>
<span class="hl com">   modified by Paul Kitchin, 2006</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;iomanip&gt;</span>
<span class="hl dir">#include &lt;limits&gt;</span>
<span class="hl dir">#include &lt;sstream&gt;</span>
<span class="hl dir">#include &lt;vector&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl kwb">int</span> max<span class="hl sym">)</span>
<span class="hl sym">{</span>
   std<span class="hl sym">::</span><span class="hl kwb">size_t const</span> bits <span class="hl sym">=</span> std<span class="hl sym">::</span>numeric_limits<span class="hl sym">&lt;</span> <span class="hl kwb">unsigned int</span> <span class="hl sym">&gt;::</span>digits<span class="hl sym">;</span>
   std<span class="hl sym">::</span>vector<span class="hl sym">&lt;</span> <span class="hl kwb">unsigned int</span> <span class="hl sym">&gt;</span> <span class="hl kwd">sieve</span><span class="hl sym">((</span>max <span class="hl sym">/</span> bits<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> value <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> value <span class="hl sym">&lt;=</span> max<span class="hl sym">; ++</span>value<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!(</span>sieve<span class="hl sym">[</span>value <span class="hl sym">/</span> bits<span class="hl sym">] &amp; (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>value <span class="hl sym">%</span> bits<span class="hl sym">))))</span>
      <span class="hl sym">{</span>
         <span class="hl sym">++</span>count<span class="hl sym">;</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> multiple <span class="hl sym">=</span> value <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">;</span> multiple <span class="hl sym">&lt;=</span> max<span class="hl sym">;</span> multiple <span class="hl sym">+=</span> value<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(!(</span>sieve<span class="hl sym">[</span>multiple <span class="hl sym">/</span> bits<span class="hl sym">] &amp; (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>multiple <span class="hl sym">%</span> bits<span class="hl sym">))))</span>
            <span class="hl sym">{</span>
               sieve<span class="hl sym">[</span>multiple <span class="hl sym">/</span> bits<span class="hl sym">]</span> ^<span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>multiple <span class="hl sym">%</span> bits<span class="hl sym">));</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">test</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> m <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> n<span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">;</span>
   std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">&lt;&lt;</span> std<span class="hl sym">::</span><span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">) &lt;&lt;</span> m <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">&lt;&lt;</span> std<span class="hl sym">::</span><span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">) &lt;&lt;</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">) &lt;&lt;</span> std<span class="hl sym">::</span>endl<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">* *</span> argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">!=</span> <span class="hl num">2</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span>cerr <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;usage: nsieve &lt;n&gt;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   std<span class="hl sym">::</span>istringstream <span class="hl kwd">convertor</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
   <span class="hl kwb">int</span> n<span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(!(</span>convertor <span class="hl sym">&gt;&gt;</span> n<span class="hl sym">) || !</span>convertor<span class="hl sym">.</span><span class="hl kwd">eof</span><span class="hl sym">())</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span>cerr <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;usage: nsieve &lt;n&gt;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
      std<span class="hl sym">::</span>cerr <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;   n must be an integer</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwd">test</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> <span class="hl num">1</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">test</span><span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">test</span><span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
