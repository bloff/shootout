<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Xavier Oswald</span>
<span class="hl com">*/</span>

Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> FANNKUCH<span class="hl sym">;</span>

Section Inherit

  <span class="hl sym">-</span> parent_any<span class="hl sym">:</span>OBJECT <span class="hl sym">:=</span> OBJECT<span class="hl sym">;</span>

Section Private

  <span class="hl sym">-</span> fannkuch<span class="hl sym">(</span>n<span class="hl sym">:</span>INTEGER<span class="hl sym">) :</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> perm            <span class="hl sym">:</span>FAST_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">];</span>
    <span class="hl sym">+</span> perm1           <span class="hl sym">:</span>FAST_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">];</span>
    <span class="hl sym">+</span> count           <span class="hl sym">:</span>FAST_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">];</span>
    <span class="hl sym">+</span> max_perm        <span class="hl sym">:</span>FAST_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">];</span>
    <span class="hl sym">+</span> exit<span class="hl sym">,</span> exit1     <span class="hl sym">:</span>BOOLEAN<span class="hl sym">;</span>
    <span class="hl sym">+</span> check           <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> perm0           <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> max_flips_count <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> flips_count     <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> k<span class="hl sym">,</span> k2           <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> i1<span class="hl sym">,</span> j           <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> r<span class="hl sym">,</span> m            <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    m <span class="hl sym">:=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

    perm     <span class="hl sym">:=</span> FAST_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">]</span>.create n<span class="hl sym">;</span>
    count    <span class="hl sym">:=</span> FAST_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">]</span>.create n<span class="hl sym">;</span>
    max_perm <span class="hl sym">:=</span> FAST_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">]</span>.create n<span class="hl sym">;</span>
    perm1    <span class="hl sym">:=</span> FAST_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">]</span>.create_with_capacity n<span class="hl sym">;</span>

    <span class="hl num">0</span>.to m do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      perm1.add_last i<span class="hl sym">;</span>
    <span class="hl sym">};</span>
    r <span class="hl sym">:=</span> n<span class="hl sym">;</span>

    <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
      exit <span class="hl sym">:=</span> TRUE<span class="hl sym">;</span>
    <span class="hl sym">};</span>

    <span class="hl sym">{</span>exit <span class="hl sym">=</span> FALSE<span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
      <span class="hl sym">(</span>check <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
        perm1.foreach <span class="hl sym">{</span> elt <span class="hl sym">:</span> INTEGER<span class="hl sym">;</span>
          <span class="hl sym">(</span>elt<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>.print<span class="hl sym">;</span>
        <span class="hl sym">};</span>
        <span class="hl str">'\n'</span>.print<span class="hl sym">;</span>
        check <span class="hl sym">:=</span> check <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">};</span>

      <span class="hl sym">{</span>r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
        count.put r to <span class="hl sym">(</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span>
        r <span class="hl sym">:=</span> r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">};</span>

      <span class="hl sym">(! ((</span>perm1.item <span class="hl num">0</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">) || {</span>perm1.item m <span class="hl sym">=</span> m<span class="hl sym">}))</span>.if <span class="hl sym">{</span>
        <span class="hl num">0</span>.to m do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
          perm.put <span class="hl sym">(</span>perm1.item i<span class="hl sym">)</span> to i<span class="hl sym">;</span>
        <span class="hl sym">};</span>

        flips_count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        k <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>

        <span class="hl sym">{!((</span>k<span class="hl sym">:=</span> perm.item <span class="hl num">0</span><span class="hl sym">) =</span> <span class="hl num">0</span><span class="hl sym">)}</span>.while_do <span class="hl sym">{</span>
          k2 <span class="hl sym">:= (</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
          j <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
          <span class="hl sym">{</span>j <span class="hl sym">&lt;</span> k2<span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
            perm.swap j with <span class="hl sym">(</span>k<span class="hl sym">-</span>j<span class="hl sym">);</span>
            j <span class="hl sym">:=</span> j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
          <span class="hl sym">};</span>
          flips_count <span class="hl sym">:=</span> flips_count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl sym">};</span>

        <span class="hl sym">(</span>flips_count <span class="hl sym">&gt;</span> max_flips_count<span class="hl sym">)</span>.if <span class="hl sym">{</span>
          max_flips_count <span class="hl sym">:=</span> flips_count<span class="hl sym">;</span>
          <span class="hl num">0</span>.to m do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
            max_perm.put <span class="hl sym">(</span>perm1.item i<span class="hl sym">)</span> to i<span class="hl sym">;</span>
          <span class="hl sym">};</span>
        <span class="hl sym">};</span>
      <span class="hl sym">};</span>

      exit1 <span class="hl sym">:=</span> FALSE<span class="hl sym">;</span>
      <span class="hl sym">{</span>exit1 <span class="hl sym">=</span> FALSE<span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
        <span class="hl sym">(</span>r <span class="hl sym">=</span> n<span class="hl sym">)</span>.if <span class="hl sym">{</span>
          exit  <span class="hl sym">:=</span> TRUE<span class="hl sym">;</span>
          exit1 <span class="hl sym">:=</span> TRUE<span class="hl sym">;</span>
        <span class="hl sym">};</span>
        perm0 <span class="hl sym">:=</span> perm1.item <span class="hl num">0</span><span class="hl sym">;</span>
        i1 <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl sym">{</span>i1 <span class="hl sym">&lt;</span> r<span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
          j <span class="hl sym">:=</span> i1<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
          perm1.put <span class="hl sym">(</span>perm1.item j<span class="hl sym">)</span> to i1<span class="hl sym">;</span>
          i1 <span class="hl sym">:=</span> j<span class="hl sym">;</span>
        <span class="hl sym">};</span>
        perm1.put perm0 to r<span class="hl sym">;</span>
        count.put <span class="hl sym">((</span>count.item r<span class="hl sym">) -</span><span class="hl num">1</span><span class="hl sym">)</span> to r<span class="hl sym">;</span>
        <span class="hl sym">(</span>count.item r <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
          exit1 <span class="hl sym">:=</span> TRUE<span class="hl sym">;</span>
        <span class="hl sym">}</span> else <span class="hl sym">{</span>
          r <span class="hl sym">:=</span> r<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl sym">};</span>
      <span class="hl sym">};</span>
    <span class="hl sym">};</span>
    max_flips_count
  <span class="hl sym">);</span>

Section Public

  <span class="hl sym">-</span> main <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> n      <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> result <span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

    <span class="hl sym">(</span>COMMAND_LINE.upper <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
      n <span class="hl sym">:=</span> COMMAND_LINE.item <span class="hl num">1</span>.to_integer<span class="hl sym">;</span>
    <span class="hl sym">}</span> else <span class="hl sym">{</span>
      n <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>
    result <span class="hl sym">:=</span> fannkuch<span class="hl sym">(</span>n<span class="hl sym">);</span>
    <span class="hl str">&quot;Pfannkuchen(&quot;</span>.print<span class="hl sym">;</span>
    n.print<span class="hl sym">;</span>
    <span class="hl str">&quot;) = &quot;</span>.print<span class="hl sym">;</span>
    result.print<span class="hl sym">;</span>
    <span class="hl str">'\n'</span>.print<span class="hl sym">;</span>
  <span class="hl sym">);</span>
