<span class="slc">#!/usr/bin/env ruby</span>
<span class="slc">#</span>
<span class="slc"># The Computer Language Shootout</span>
<span class="slc">#   http://shootout.alioth.debian.org</span>
<span class="slc">#   contributed by Kevin Barnes (Ruby novice)</span>

<span class="kwa">def</span> blank_board
  <span class="num">0b111111100000100000100000100000100000100000100000100000100000100000</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">is_even</span><span class="sym">(</span> location)
  <span class="sym">(</span>location % <span class="num">12</span>) <span class="sym">&lt;</span> <span class="num">6</span>
<span class="kwa">end</span>

<span class="kwa">def</span> create_collector_support
    odd_map = <span class="sym">[</span><span class="num">0b11</span><span class="sym">,</span> <span class="num">0b110</span><span class="sym">,</span> <span class="num">0b1100</span><span class="sym">,</span> <span class="num">0b11000</span><span class="sym">,</span> <span class="num">0b10000</span><span class="sym">]</span>
    even_map = <span class="sym">[</span><span class="num">0b1</span><span class="sym">,</span> <span class="num">0b11</span><span class="sym">,</span> <span class="num">0b110</span><span class="sym">,</span> <span class="num">0b1100</span><span class="sym">,</span> <span class="num">0b11000</span><span class="sym">]</span>

    all_odds = Array<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span><span class="num">0b100000</span>)
    all_evens = Array<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span><span class="num">0b100000</span>)
    bit_counts = Array<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span><span class="num">0b100000</span>)
    new_regions = Array<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span><span class="num">0b100000</span>)
    <span class="num">0</span><span class="sym">.</span><span class="kwd">upto</span><span class="sym">(</span><span class="num">0b11111</span>) <span class="kwa">do</span> <span class="sym">|</span> i <span class="sym">|</span>
      bit_count = odd = even = <span class="num">0</span>
      <span class="num">0</span><span class="sym">.</span><span class="kwd">upto</span><span class="sym">(</span><span class="num">4</span>) <span class="kwa">do</span> <span class="sym">|</span> bit <span class="sym">|</span>
        <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">[</span>bit<span class="sym">]</span> == <span class="num">1</span>) <span class="kwa">then</span>
          bit_count <span class="sym">+</span>= <span class="num">1</span>
          odd <span class="sym">|</span>= odd_map<span class="sym">[</span>bit<span class="sym">]</span>
          even <span class="sym">|</span>= even_map<span class="sym">[</span>bit<span class="sym">]</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>
      all_odds<span class="sym">[</span>i<span class="sym">]</span> = odd
      all_evens<span class="sym">[</span>i<span class="sym">]</span> = even
      bit_counts<span class="sym">[</span>i<span class="sym">]</span> = bit_count
      new_regions<span class="sym">[</span>i<span class="sym">]</span> = <span class="kwd">create_regions</span><span class="sym">(</span> i)
    <span class="kwa">end</span>

    &#64;&#64;converter = <span class="sym">[]</span>
    <span class="num">10</span><span class="sym">.</span>times <span class="sym">{ |</span> row <span class="sym">|</span> &#64;&#64;converter<span class="sym">.</span><span class="kwd">push</span><span class="sym">((</span>row % <span class="num">2</span> == <span class="num">0</span>) ? all_evens <span class="sym">:</span> all_odds) <span class="sym">}</span>
    &#64;&#64;bit_counts = bit_counts
    &#64;&#64;regions = new_regions<span class="sym">.</span>collect <span class="sym">{ |</span> set <span class="sym">|</span> set<span class="sym">.</span>collect <span class="sym">{ |</span> value <span class="sym">| [</span> value<span class="sym">,</span> bit_counts<span class="sym">[</span>value<span class="sym">],</span> value<span class="sym">] } }</span>

  <span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">prunable</span><span class="sym">(</span> board<span class="sym">,</span> location<span class="sym">,</span> slotting = <span class="kwa">false</span>)
  collectors = <span class="sym">[]</span>
  <span class="sym">(</span>location <span class="sym">/</span> <span class="num">6</span>)<span class="sym">.</span>to_i<span class="sym">.</span><span class="kwd">upto</span><span class="sym">(</span><span class="num">9</span>) <span class="kwa">do</span> <span class="sym">|</span> row_on <span class="sym">|</span>
    regions = &#64;&#64;regions<span class="sym">[(</span>board <span class="sym">&gt;&gt; (</span>row_on <span class="sym">*</span> <span class="num">6</span>)) <span class="sym">&amp;</span> <span class="num">0b11111</span> ^ <span class="num">0b11111</span><span class="sym">]</span>
    converter = &#64;&#64;converter<span class="sym">[</span>row_on<span class="sym">]</span>
    initial_collector_count = collectors<span class="sym">.</span>length
    regions<span class="sym">.</span>each <span class="kwa">do</span> <span class="sym">|</span> region <span class="sym">|</span>
      collector_found = <span class="kwa">nil</span>
      region_mask = region<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
      initial_collector_count<span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span> collector_num <span class="sym">|</span>
        collector = collectors<span class="sym">[</span>collector_num<span class="sym">]</span>
        <span class="kwa">if</span> <span class="sym">(</span>collector) <span class="kwa">then</span>
          collector_mask = collector<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
          <span class="kwa">if</span> <span class="sym">(</span>collector_mask <span class="sym">&amp;</span> region_mask <span class="sym">!</span>= <span class="num">0</span>) <span class="kwa">then</span>
            <span class="kwa">if</span> <span class="sym">(</span>collector_found) <span class="kwa">then</span>
              collector_found<span class="sym">[</span><span class="num">0</span><span class="sym">] |</span>= collector_mask
              collector_found<span class="sym">[</span><span class="num">1</span><span class="sym">] +</span>= collector<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
              collector_found<span class="sym">[</span><span class="num">2</span><span class="sym">] |</span>= collector<span class="sym">[</span><span class="num">2</span><span class="sym">]</span>
              collectors<span class="sym">[</span>collector_num<span class="sym">]</span> = <span class="kwa">nil</span>
            <span class="kwa">else</span>
              collector_found = collector
              collector<span class="sym">[</span><span class="num">1</span><span class="sym">] +</span>= region<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
              collector<span class="sym">[</span><span class="num">2</span><span class="sym">] |</span>= region_mask
            <span class="kwa">end</span>
          <span class="kwa">end</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>
      <span class="kwa">if</span> <span class="sym">(</span>collector_found == <span class="kwa">nil</span>) <span class="kwa">then</span>
        collectors<span class="sym">.</span><span class="kwd">push</span><span class="sym">(</span>Array<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span>region))
      <span class="kwa">end</span>
    <span class="kwa">end</span>
    collectors<span class="sym">.</span>length<span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span> collector_num <span class="sym">|</span>
      collector = collectors<span class="sym">[</span>collector_num<span class="sym">]</span>
      <span class="kwa">if</span> <span class="sym">(</span>collector) <span class="kwa">then</span>
        <span class="kwa">if</span> <span class="sym">(</span>collector<span class="sym">[</span><span class="num">2</span><span class="sym">]</span> == <span class="num">0</span>) <span class="kwa">then</span>
          <span class="kwa">return true if</span> <span class="sym">(</span>collector<span class="sym">[</span><span class="num">1</span><span class="sym">]</span> % <span class="num">5</span> <span class="sym">!</span>= <span class="num">0</span>)
          collectors<span class="sym">[</span>collector_num<span class="sym">]</span> = <span class="kwa">nil</span>
        <span class="kwa">else</span>
          <span class="kwa">return false if</span> <span class="sym">(</span>collector<span class="sym">[</span><span class="num">2</span><span class="sym">]</span> == <span class="num">0b11111</span> <span class="sym">&amp;&amp; !</span>slotting)
          collector<span class="sym">[</span><span class="num">0</span><span class="sym">]</span> = converter<span class="sym">[</span>collector<span class="sym">[</span><span class="num">2</span><span class="sym">]]</span>
          collector<span class="sym">[</span><span class="num">2</span><span class="sym">]</span> = <span class="num">0</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
    collectors<span class="sym">.</span>compact<span class="sym">!</span>
  <span class="kwa">end</span>
  <span class="kwa">return false if</span> <span class="sym">(</span>collectors<span class="sym">.</span>length <span class="sym">&lt;</span>= <span class="num">1</span>)
  collectors<span class="sym">.</span>any? <span class="sym">{ |</span> collector <span class="sym">| (</span>collector<span class="sym">[</span><span class="num">1</span><span class="sym">]</span> % <span class="num">5</span>) <span class="sym">!</span>= <span class="num">0</span> <span class="sym">}</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">as_binary</span><span class="sym">(</span> value)
  rtn = <span class="str">&quot;&quot;</span>
  <span class="num">5</span><span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span> i <span class="sym">|</span>
    rtn <span class="sym">+</span>= <span class="str">&quot;#{value[i]}&quot;</span>
  <span class="kwa">end</span>
  rtn
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">create_regions</span><span class="sym">(</span> value )
  regions = <span class="sym">[]</span>
  cur_region = <span class="num">0</span>
  <span class="num">5</span><span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span> bit <span class="sym">|</span>
    <span class="kwa">if</span> <span class="sym">(</span>value<span class="sym">[</span>bit<span class="sym">]</span> == <span class="num">1</span>) <span class="kwa">then</span>
      cur_region <span class="sym">|</span>= <span class="num">1</span> <span class="sym">&lt;&lt;</span> bit
    <span class="kwa">else</span>
      <span class="kwa">if</span> <span class="sym">(</span>cur_region <span class="sym">!</span>=<span class="num">0</span> ) <span class="kwa">then</span>
        regions<span class="sym">.</span><span class="kwd">push</span><span class="sym">(</span> cur_region)
        cur_region = <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  regions<span class="sym">.</span><span class="kwd">push</span><span class="sym">(</span>cur_region) <span class="kwa">if</span> <span class="sym">(</span>cur_region <span class="sym">!</span>= <span class="num">0</span>)
  regions
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">print_board</span><span class="sym">(</span> board<span class="sym">,</span> padding = <span class="str">&quot;&quot;</span><span class="sym">,</span> rows = <span class="num">10</span><span class="sym">,</span> row_offset = <span class="num">0</span>)
  rows<span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span> row <span class="sym">|</span>
    rtn = padding
    rtn = <span class="str">&quot;#{rtn} &quot;</span> <span class="kwa">if</span> <span class="sym">((</span>row <span class="sym">+</span> row_offset) % <span class="num">2</span>) == <span class="num">1</span>
    <span class="num">6</span><span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span> col <span class="sym">|</span>
      rtn = <span class="str">&quot;#{rtn}#{board[row*6+col]} &quot;</span>
    <span class="kwa">end</span>
    print <span class="str">&quot;#{rtn}</span><span class="esc">\n</span><span class="str">&quot;</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">class</span> Rotation
  attr_reader <span class="sym">:</span>start_masks

  &#64;&#64;rotation_even_adder = <span class="sym">{ :</span>west =<span class="sym">&gt; -</span><span class="num">1</span><span class="sym">, :</span>east =<span class="sym">&gt;</span> <span class="num">1</span><span class="sym">, :</span>nw =<span class="sym">&gt; -</span><span class="num">7</span><span class="sym">, :</span>ne =<span class="sym">&gt; -</span><span class="num">6</span><span class="sym">, :</span>sw =<span class="sym">&gt;</span> <span class="num">5</span><span class="sym">, :</span>se =<span class="sym">&gt;</span> <span class="num">6</span> <span class="sym">}</span>
  &#64;&#64;rotation_odd_adder = <span class="sym">{ :</span>west =<span class="sym">&gt; -</span><span class="num">1</span><span class="sym">, :</span>east =<span class="sym">&gt;</span> <span class="num">1</span><span class="sym">, :</span>nw =<span class="sym">&gt; -</span><span class="num">6</span><span class="sym">, :</span>ne =<span class="sym">&gt; -</span><span class="num">5</span><span class="sym">, :</span>sw =<span class="sym">&gt;</span> <span class="num">6</span><span class="sym">, :</span>se =<span class="sym">&gt;</span> <span class="num">7</span> <span class="sym">}</span>

  <span class="kwa">def</span> <span class="kwd">initialize</span><span class="sym">(</span> directions )
    values<span class="sym">,</span> min = <span class="kwd">get_values</span><span class="sym">(</span> directions )
    &#64;even_offsets<span class="sym">,</span> &#64;odd_offsets = <span class="kwd">normalize_offsets</span><span class="sym">(</span> values<span class="sym">,</span> min)

    &#64;even_mask = <span class="kwd">mask_for_offsets</span><span class="sym">(</span> &#64;even_offsets)
    &#64;odd_mask = <span class="kwd">mask_for_offsets</span><span class="sym">(</span> &#64;odd_offsets)

    &#64;start_masks = Array<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span><span class="num">60</span>)

    <span class="num">0</span><span class="sym">.</span><span class="kwd">upto</span><span class="sym">(</span><span class="num">59</span>) <span class="kwa">do</span> <span class="sym">|</span> offset <span class="sym">|</span>
      mask = <span class="kwd">is_even</span><span class="sym">(</span>offset) ? <span class="sym">(</span>&#64;even_mask <span class="sym">&lt;&lt;</span> offset) <span class="sym">: (</span>&#64;odd_mask <span class="sym">&lt;&lt;</span> offset)
      <span class="kwa">if</span> <span class="sym">(</span>blank_board <span class="sym">&amp;</span> mask == <span class="num">0</span> <span class="sym">&amp;&amp; !</span><span class="kwd">prunable</span><span class="sym">(</span>blank_board <span class="sym">|</span> mask<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">true</span>)) <span class="kwa">then</span>
        &#64;start_masks<span class="sym">[</span>offset<span class="sym">]</span> = mask
      <span class="kwa">else</span>
        &#64;start_masks<span class="sym">[</span>offset<span class="sym">]</span> = <span class="kwa">false</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">offsets</span><span class="sym">(</span> location)
    <span class="kwa">if</span> <span class="kwd">is_even</span><span class="sym">(</span> location) <span class="kwa">then</span>
      &#64;even_offsets<span class="sym">.</span>collect <span class="sym">{ |</span> value <span class="sym">|</span> value <span class="sym">+</span> location <span class="sym">}</span>
    <span class="kwa">else</span>
      &#64;odd_offsets<span class="sym">.</span>collect <span class="sym">{ |</span> value <span class="sym">|</span> value <span class="sym">+</span> location <span class="sym">}</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">normalize_offsets</span><span class="sym">(</span> values<span class="sym">,</span> min)
    even_min = <span class="kwd">is_even</span><span class="sym">(</span>min)
    other_min = even_min ? min <span class="sym">+</span> <span class="num">6</span> <span class="sym">:</span> min <span class="sym">+</span> <span class="num">7</span>
    other_values = values<span class="sym">.</span>collect <span class="kwa">do</span> <span class="sym">|</span> value <span class="sym">|</span>
      <span class="kwa">if</span> <span class="kwd">is_even</span><span class="sym">(</span>value) <span class="kwa">then</span>
        value <span class="sym">+</span> <span class="num">6</span> <span class="sym">-</span> other_min
      <span class="kwa">else</span>
        value <span class="sym">+</span> <span class="num">7</span> <span class="sym">-</span> other_min
      <span class="kwa">end</span>
    <span class="kwa">end</span>
    values<span class="sym">.</span>collect<span class="sym">! { |</span> value <span class="sym">|</span> value <span class="sym">-</span> min <span class="sym">}</span>

    <span class="kwa">if</span> even_min <span class="kwa">then</span>
      <span class="sym">[</span>values<span class="sym">,</span> other_values<span class="sym">]</span>
    <span class="kwa">else</span>
      <span class="sym">[</span>other_values<span class="sym">,</span> values<span class="sym">]</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">mask_for_offsets</span><span class="sym">(</span> offsets )
    mask = <span class="num">0</span>
    offsets<span class="sym">.</span>each <span class="sym">{ |</span> value <span class="sym">|</span> mask = mask <span class="sym">+ (</span> <span class="num">1</span> <span class="sym">&lt;&lt;</span> value ) <span class="sym">}</span>
    mask
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">start_adjust</span><span class="sym">(</span> directions )
    south = east = <span class="num">0</span><span class="sym">;</span>
    directions<span class="sym">.</span>each <span class="kwa">do</span> <span class="sym">|</span> direction <span class="sym">|</span>
      east <span class="sym">+</span>= <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span> direction == <span class="sym">:</span>sw <span class="sym">||</span> direction == <span class="sym">:</span>nw <span class="sym">||</span> direction == <span class="sym">:</span>west )
      south <span class="sym">+</span>= <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span> direction == <span class="sym">:</span>nw <span class="sym">||</span> direction == <span class="sym">:</span>ne )
    <span class="kwa">end</span>
    <span class="sym">[</span>south<span class="sym">,</span> east<span class="sym">]</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">get_values</span> <span class="sym">(</span> directions )
    south<span class="sym">,</span> east = <span class="kwd">start_adjust</span><span class="sym">(</span>directions)
    min = start = south <span class="sym">*</span> <span class="num">6</span> <span class="sym">+</span> east
    values = <span class="sym">[</span> start <span class="sym">]</span>
    directions<span class="sym">.</span>each <span class="kwa">do</span> <span class="sym">|</span> direction <span class="sym">|</span>
      <span class="kwa">if</span> <span class="sym">(</span>start % <span class="num">12</span> <span class="sym">&gt;</span>= <span class="num">6</span>) <span class="kwa">then</span>
        start <span class="sym">+</span>= &#64;&#64;rotation_odd_adder<span class="sym">[</span>direction<span class="sym">]</span>
      <span class="kwa">else</span>
        start <span class="sym">+</span>= &#64;&#64;rotation_even_adder<span class="sym">[</span>direction<span class="sym">]</span>
      <span class="kwa">end</span>
      min = start <span class="kwa">if</span> <span class="sym">(</span>start <span class="sym">&lt;</span> min)
      values <span class="sym">+</span>= <span class="sym">[</span> start <span class="sym">]</span>
    <span class="kwa">end</span>

    <span class="kwa">if</span> <span class="sym">(</span>values<span class="sym">.</span>length <span class="sym">!</span>= <span class="num">5</span>)
      values<span class="sym">.</span>uniq<span class="sym">!</span>
    <span class="kwa">end</span>

    <span class="sym">[</span> values<span class="sym">,</span> min <span class="sym">]</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">class</span> Piece
  attr_reader <span class="sym">:</span>rotations<span class="sym">, :</span>type<span class="sym">, :</span>masks
  attr_accessor <span class="sym">:</span>placed

  &#64;&#64;flip_converter = <span class="sym">{ :</span>west =<span class="sym">&gt; :</span>west<span class="sym">, :</span>east =<span class="sym">&gt; :</span>east<span class="sym">, :</span>nw =<span class="sym">&gt; :</span>sw<span class="sym">, :</span>ne =<span class="sym">&gt; :</span>se<span class="sym">, :</span>sw =<span class="sym">&gt; :</span>nw<span class="sym">, :</span>se =<span class="sym">&gt; :</span>ne <span class="sym">}</span>
  &#64;&#64;rotate_converter = <span class="sym">{ :</span>west =<span class="sym">&gt; :</span>nw<span class="sym">, :</span>east =<span class="sym">&gt; :</span>se<span class="sym">, :</span>nw =<span class="sym">&gt; :</span>ne<span class="sym">, :</span>ne =<span class="sym">&gt; :</span>east<span class="sym">, :</span>sw =<span class="sym">&gt; :</span>west<span class="sym">, :</span>se =<span class="sym">&gt; :</span>sw <span class="sym">}</span>

  <span class="kwa">def</span> <span class="kwd">initialize</span><span class="sym">(</span> directions<span class="sym">,</span> type )
    &#64;type = type
    &#64;rotations = Array<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span>)<span class="sym">;</span>
    &#64;map = <span class="sym">{}</span>
    <span class="kwd">generate_rotations</span><span class="sym">(</span> directions )
    directions<span class="sym">.</span>collect<span class="sym">! { |</span> value <span class="sym">|</span> &#64;&#64;flip_converter<span class="sym">[</span>value<span class="sym">] }</span>
    <span class="kwd">generate_rotations</span><span class="sym">(</span> directions )

    &#64;masks = Array<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span>)<span class="sym">;</span>
    <span class="num">0</span><span class="sym">.</span><span class="kwd">upto</span><span class="sym">(</span><span class="num">59</span>) <span class="kwa">do</span> <span class="sym">|</span> i <span class="sym">|</span>
      &#64;masks<span class="sym">[</span>i<span class="sym">]</span> = &#64;rotations<span class="sym">.</span>collect <span class="kwa">do</span> <span class="sym">|</span> rotation <span class="sym">|</span>
        mask = rotation<span class="sym">.</span>start_masks<span class="sym">[</span>i<span class="sym">]</span>
        &#64;map<span class="sym">[</span>mask<span class="sym">]</span> = <span class="sym">[</span> i<span class="sym">,</span> rotation <span class="sym">]</span> <span class="kwa">if</span> <span class="sym">(</span>mask)
        mask <span class="sym">||</span> <span class="kwa">nil</span>
      <span class="kwa">end</span>
      &#64;masks<span class="sym">[</span>i<span class="sym">].</span>compact<span class="sym">!</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">generate_rotations</span><span class="sym">(</span> directions )
    <span class="num">6</span><span class="sym">.</span>times <span class="kwa">do</span>
      rotations<span class="sym">.</span><span class="kwd">push</span><span class="sym">(</span> Rotation<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span>directions))
      directions<span class="sym">.</span>collect<span class="sym">! { |</span> value <span class="sym">|</span> &#64;&#64;rotate_converter<span class="sym">[</span>value<span class="sym">] }</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">fill_array</span><span class="sym">(</span> board_array)
    location<span class="sym">,</span> rotation = &#64;map<span class="sym">[</span>&#64;placed<span class="sym">]</span>
    rotation<span class="sym">.</span><span class="kwd">offsets</span><span class="sym">(</span>location)<span class="sym">.</span>each <span class="kwa">do</span> <span class="sym">|</span> offset <span class="sym">|</span>
      row<span class="sym">,</span> col = offset<span class="sym">.</span><span class="kwd">divmod</span><span class="sym">(</span><span class="num">6</span>)
      board_array<span class="sym">[</span> row<span class="sym">*</span><span class="num">5</span> <span class="sym">+</span> col <span class="sym">]</span> = &#64;type<span class="sym">.</span>to_s
    <span class="kwa">end</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">class</span> Processor
  attr <span class="sym">:</span>pieces<span class="sym">, :</span>board

  <span class="kwa">def</span> <span class="kwd">initialize</span><span class="sym">(</span>)
    create_collector_support
    &#64;pieces = <span class="sym">[</span>
      Piece<span class="sym">.</span><span class="kwd">new</span><span class="sym">( [ :</span>east<span class="sym">, :</span>east<span class="sym">, :</span>east<span class="sym">, :</span>se <span class="sym">],</span> <span class="num">0</span>)<span class="sym">,</span>
      Piece<span class="sym">.</span><span class="kwd">new</span><span class="sym">( [ :</span>ne<span class="sym">, :</span>east<span class="sym">, :</span>ne<span class="sym">, :</span>nw <span class="sym">],</span> <span class="num">1</span>)<span class="sym">,</span>
      Piece<span class="sym">.</span><span class="kwd">new</span><span class="sym">( [ :</span>nw<span class="sym">, :</span>ne<span class="sym">, :</span>east<span class="sym">, :</span>east <span class="sym">],</span> <span class="num">2</span>)<span class="sym">,</span>
      Piece<span class="sym">.</span><span class="kwd">new</span><span class="sym">( [ :</span>east<span class="sym">, :</span>east<span class="sym">, :</span>sw<span class="sym">, :</span>se <span class="sym">],</span> <span class="num">3</span>)<span class="sym">,</span>
      Piece<span class="sym">.</span><span class="kwd">new</span><span class="sym">( [ :</span>ne<span class="sym">, :</span>nw<span class="sym">, :</span>se<span class="sym">, :</span>east<span class="sym">, :</span>se <span class="sym">],</span> <span class="num">4</span>)<span class="sym">,</span>
      Piece<span class="sym">.</span><span class="kwd">new</span><span class="sym">( [ :</span>east<span class="sym">, :</span>ne<span class="sym">, :</span>se<span class="sym">, :</span>ne <span class="sym">],</span> <span class="num">5</span>)<span class="sym">,</span>
      Piece<span class="sym">.</span><span class="kwd">new</span><span class="sym">( [ :</span>east<span class="sym">, :</span>sw<span class="sym">, :</span>sw<span class="sym">, :</span>se <span class="sym">],</span> <span class="num">6</span>)<span class="sym">,</span>
      Piece<span class="sym">.</span><span class="kwd">new</span><span class="sym">( [ :</span>ne<span class="sym">, :</span>se<span class="sym">, :</span>east<span class="sym">, :</span>ne <span class="sym">],</span> <span class="num">7</span>)<span class="sym">,</span>
      Piece<span class="sym">.</span><span class="kwd">new</span><span class="sym">( [ :</span>se<span class="sym">, :</span>se<span class="sym">, :</span>east<span class="sym">, :</span>se <span class="sym">],</span> <span class="num">8</span>)<span class="sym">,</span>
      Piece<span class="sym">.</span><span class="kwd">new</span><span class="sym">( [ :</span>se<span class="sym">, :</span>se<span class="sym">, :</span>se<span class="sym">, :</span>west <span class="sym">],</span> <span class="num">9</span>) <span class="sym">];</span>

    &#64;all_pieces = Array<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span> &#64;pieces)

    &#64;min_board = <span class="str">&quot;99999999999999999999999999999999999999999999999999&quot;</span>
    &#64;max_board = <span class="str">&quot;00000000000000000000000000000000000000000000000000&quot;</span>
    &#64;stop_count = <span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">].</span>to_i <span class="sym">||</span> <span class="num">2089</span>
    &#64;all_boards = <span class="sym">{}</span>
    &#64;boards_found = <span class="num">0</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> find_all
    <span class="kwd">find_top</span><span class="sym">(</span> <span class="num">0</span>)
    <span class="kwd">find_top</span><span class="sym">(</span> <span class="num">1</span>)
    print_results
  <span class="kwa">end</span>

  <span class="kwa">def</span> print_results
    print <span class="str">&quot;#{&#64;boards_found} solutions found</span><span class="esc">\n\n</span><span class="str">&quot;</span>
    <span class="kwd">print_full_board</span><span class="sym">(</span> &#64;min_board)
    print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
    <span class="kwd">print_full_board</span><span class="sym">(</span> &#64;max_board)
    print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">find_top</span><span class="sym">(</span> rotation_skip)
    board = blank_board
    &#64;pieces<span class="sym">.</span>length<span class="sym">.</span>times <span class="kwa">do</span>
      piece = &#64;pieces<span class="sym">.</span>shift
      piece<span class="sym">.</span>masks<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>each <span class="kwa">do</span> <span class="sym">|</span> mask <span class="sym">|</span>
        <span class="kwa">if</span> <span class="sym">((</span>rotation_skip <span class="sym">+</span>= <span class="num">1</span>) % <span class="num">2</span> == <span class="num">0</span>) <span class="kwa">then</span>
          piece<span class="sym">.</span>placed = mask
          <span class="kwd">find</span><span class="sym">(</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> board <span class="sym">|</span> mask)
        <span class="kwa">end</span>
      <span class="kwa">end</span>
      &#64;pieces<span class="sym">.</span><span class="kwd">push</span><span class="sym">(</span>piece)
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">find</span><span class="sym">(</span> start_location<span class="sym">,</span> placed<span class="sym">,</span> board)
    <span class="kwa">while</span> board<span class="sym">[</span>start_location<span class="sym">]</span> == <span class="num">1</span>
      start_location <span class="sym">+</span>= <span class="num">1</span>
    <span class="kwa">end</span>

    <span class="kwa">return if</span> <span class="sym">(</span>start_location <span class="sym">&lt;</span> <span class="num">28</span> <span class="sym">&amp;&amp;</span> <span class="kwd">prunable</span><span class="sym">(</span> board<span class="sym">,</span> start_location))

    &#64;pieces<span class="sym">.</span>length<span class="sym">.</span>times <span class="kwa">do</span>
      piece = &#64;pieces<span class="sym">.</span>shift
      piece<span class="sym">.</span>masks<span class="sym">[</span>start_location<span class="sym">].</span>each <span class="kwa">do</span> <span class="sym">|</span> mask <span class="sym">|</span>
        <span class="kwa">if</span> <span class="sym">(</span>mask <span class="sym">&amp;</span> board == <span class="num">0</span>) <span class="kwa">then</span>
          piece<span class="sym">.</span>placed = mask
          <span class="kwa">if</span> <span class="sym">(</span>placed == <span class="num">9</span>) <span class="kwa">then</span>
            add_board
          <span class="kwa">else</span>
            <span class="kwd">find</span><span class="sym">(</span> start_location <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> placed <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> board <span class="sym">|</span> mask)
          <span class="kwa">end</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>
      &#64;pieces<span class="sym">.</span><span class="kwd">push</span><span class="sym">(</span>piece)
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">print_full_board</span><span class="sym">(</span> board_string)
    <span class="num">10</span><span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span> row <span class="sym">|</span>
      print <span class="str">&quot; &quot;</span> <span class="kwa">if</span> <span class="sym">(</span>row % <span class="num">2</span> == <span class="num">1</span>)
      <span class="num">5</span><span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span> col <span class="sym">|</span>
        print <span class="str">&quot;#{board_string[row*5 + col,1]} &quot;</span>
      <span class="kwa">end</span>
      print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> add_board
    board_array = Array<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span><span class="num">50</span>)
    &#64;all_pieces<span class="sym">.</span>each <span class="kwa">do</span> <span class="sym">|</span> piece <span class="sym">|</span>
      piece<span class="sym">.</span><span class="kwd">fill_array</span><span class="sym">(</span> board_array )
    <span class="kwa">end</span>
    start_board = board_string = board_array<span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span><span class="str">&quot;&quot;</span>)
    <span class="kwd">save</span><span class="sym">(</span> board_string)
    board_string = <span class="kwd">flip</span><span class="sym">(</span> board_string)
    <span class="kwd">save</span><span class="sym">(</span> board_string)
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">flip</span><span class="sym">(</span> board_string)
    new_string = <span class="str">&quot;&quot;</span>
    <span class="num">50</span><span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span> i <span class="sym">|</span>
      row<span class="sym">,</span> col = i<span class="sym">.</span><span class="kwd">divmod</span><span class="sym">(</span><span class="num">5</span>)
      new_string <span class="sym">+</span>= board_string<span class="sym">[((</span><span class="num">9</span> <span class="sym">-</span> row) <span class="sym">*</span> <span class="num">5</span>) <span class="sym">+ (</span><span class="num">4</span> <span class="sym">-</span> col)<span class="sym">,</span> <span class="num">1</span><span class="sym">]</span>
    <span class="kwa">end</span>
    new_string
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">save</span><span class="sym">(</span> board_string)
    <span class="kwa">if</span> <span class="sym">(</span>&#64;all_boards<span class="sym">[</span>board_string<span class="sym">]</span> == <span class="kwa">nil</span>) <span class="kwa">then</span>
      &#64;min_board = board_string <span class="kwa">if</span> <span class="sym">(</span>board_string <span class="sym">&lt;</span> &#64;min_board)
      &#64;max_board = board_string <span class="kwa">if</span> <span class="sym">(</span>board_string <span class="sym">&gt;</span> &#64;max_board)
      &#64;all_boards<span class="sym">.</span><span class="kwd">store</span><span class="sym">(</span>board_string<span class="sym">,</span><span class="kwa">true</span>)
      &#64;boards_found <span class="sym">+</span>= <span class="num">1</span>

      <span class="kwa">if</span> <span class="sym">(</span>&#64;boards_found == &#64;stop_count) <span class="kwa">then</span>
        print_results
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">0</span>)
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

<span class="kwa">end</span>

proc = Processor<span class="sym">.</span>new<span class="sym">.</span>find_all

