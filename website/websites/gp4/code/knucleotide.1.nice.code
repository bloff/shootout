<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy, following James McIlree's Java program</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> Include<span class="hl sym">;</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
   <span class="hl kwa">let</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">));</span>
   <span class="hl kwa">let</span> buffer <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">();</span>
   var ?<span class="hl kwc">String</span> line<span class="hl sym">;</span>

   <span class="hl kwa">while</span> <span class="hl sym">((</span>line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine<span class="hl sym">()) !=</span> null<span class="hl sym">){</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">.</span>startsWith<span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">))</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">while</span> <span class="hl sym">((</span>line <span class="hl sym">=</span> r<span class="hl sym">.</span>readLine<span class="hl sym">()) !=</span> null<span class="hl sym">){</span>
      <span class="hl kwa">let</span> c <span class="hl sym">=</span> line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">==</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span>
         <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl kwa">else if</span> <span class="hl sym">(</span>c <span class="hl sym">!=</span> <span class="hl str">';'</span><span class="hl sym">)</span>
         buffer<span class="hl sym">.</span>append<span class="hl sym">(</span>line<span class="hl sym">.</span>toUpperCase<span class="hl sym">());</span>
   <span class="hl sym">}</span>
   r<span class="hl sym">.</span>close<span class="hl sym">;</span>

   <span class="hl kwa">let</span> kn <span class="hl sym">=</span> <span class="hl kwa">new</span> KNucleotide<span class="hl sym">(</span>sequence<span class="hl sym">:</span> buffer<span class="hl sym">.</span>toString<span class="hl sym">());</span>
   kn<span class="hl sym">.</span>writeFrequencies<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
   kn<span class="hl sym">.</span>writeFrequencies<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">);</span>

   kn<span class="hl sym">.</span>writeCount<span class="hl sym">(</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">);</span>
   kn<span class="hl sym">.</span>writeCount<span class="hl sym">(</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">);</span>
   kn<span class="hl sym">.</span>writeCount<span class="hl sym">(</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">);</span>
   kn<span class="hl sym">.</span>writeCount<span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">);</span>
   kn<span class="hl sym">.</span>writeCount<span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">);</span>
<span class="hl sym">}</span>


<span class="hl kwa">class</span> KNucleotide <span class="hl sym">{</span>
   <span class="hl kwc">String</span> sequence<span class="hl sym">;</span>
   <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>


   <span class="hl kwb">void</span> writeFrequencies<span class="hl sym">(</span><span class="hl kwb">int</span> k<span class="hl sym">) {</span>
      <span class="hl kwa">let</span> frequencies <span class="hl sym">=</span> <span class="hl kwa">this</span><span class="hl sym">.</span>generateFrequencies<span class="hl sym">(</span>k<span class="hl sym">);</span>

      <span class="hl kwa">let</span> list <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">ArrayList</span><span class="hl sym">(</span>frequencies<span class="hl sym">.</span>values<span class="hl sym">);</span>
      sort<span class="hl sym">(</span>list<span class="hl sym">,</span>
            <span class="hl sym">(</span>KNucleotide k1<span class="hl sym">,</span> KNucleotide k2<span class="hl sym">) =&gt; {</span>
               <span class="hl kwa">let</span> i <span class="hl sym">=</span> k2<span class="hl sym">.</span>count <span class="hl sym">-</span> k1<span class="hl sym">.</span>count<span class="hl sym">;</span>
               <span class="hl kwa">return</span> i <span class="hl sym">!=</span> <span class="hl num">0</span> ? i <span class="hl sym">:</span> k2<span class="hl sym">.</span>sequence<span class="hl sym">.</span>compareTo<span class="hl sym">(</span>k1<span class="hl sym">.</span>sequence<span class="hl sym">);</span>
               <span class="hl sym">}</span>
            <span class="hl sym">);</span>

      <span class="hl kwa">let</span> sum <span class="hl sym">=</span> sequence<span class="hl sym">.</span>length <span class="hl sym">-</span> k <span class="hl sym">+</span> <span class="hl num">1.0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>kn <span class="hl sym">:</span> list<span class="hl sym">)</span>
         println<span class="hl sym">(</span>kn<span class="hl sym">.</span>sequence <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+ (</span>kn<span class="hl sym">.</span>count<span class="hl sym">/</span>sum <span class="hl sym">*</span> <span class="hl num">100.0</span><span class="hl sym">).</span>toStringWith<span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">));</span>

      println<span class="hl sym">();</span>
   <span class="hl sym">}</span>


   <span class="hl kwb">void</span> writeCount<span class="hl sym">(</span><span class="hl kwc">String</span> nucleotideFragment<span class="hl sym">) {</span>
      <span class="hl kwa">let</span> frequencies <span class="hl sym">=</span> <span class="hl kwa">this</span><span class="hl sym">.</span>generateFrequencies<span class="hl sym">(</span>nucleotideFragment<span class="hl sym">.</span>length<span class="hl sym">);</span>
      var count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">let</span> item <span class="hl sym">=</span> frequencies<span class="hl sym">[</span>nucleotideFragment<span class="hl sym">];</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>item <span class="hl sym">!=</span> null<span class="hl sym">)</span> count <span class="hl sym">=</span> item<span class="hl sym">.</span>count<span class="hl sym">;</span>
      println<span class="hl sym">(</span>count <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">&quot;</span> <span class="hl sym">+</span> nucleotideFragment<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span>KNucleotide<span class="hl sym">&gt;</span> generateFrequencies<span class="hl sym">(</span><span class="hl kwb">int</span> length<span class="hl sym">) {</span>
      <span class="hl kwa">let</span> <span class="hl kwc">HashMap</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span>KNucleotide<span class="hl sym">&gt;</span> frequencies <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">HashMap</span><span class="hl sym">();</span>

      <span class="hl kwb">void</span> kFrequency<span class="hl sym">(</span><span class="hl kwb">int</span> offset<span class="hl sym">,</span> <span class="hl kwb">int</span> k<span class="hl sym">) {</span>
         <span class="hl kwa">let</span> n <span class="hl sym">=</span> sequence<span class="hl sym">.</span>length <span class="hl sym">-</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span>offset<span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">+=</span>k<span class="hl sym">) {</span>
            <span class="hl kwa">let</span> fragment <span class="hl sym">=</span> sequence<span class="hl sym">.</span>substring<span class="hl sym">(</span>i<span class="hl sym">,</span>i<span class="hl sym">+</span>k<span class="hl sym">);</span>
            <span class="hl kwa">let</span> item <span class="hl sym">=</span> frequencies<span class="hl sym">[</span>fragment<span class="hl sym">];</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>item <span class="hl sym">!=</span> null<span class="hl sym">)</span>
               item<span class="hl sym">.</span>count<span class="hl sym">++;</span>
            <span class="hl kwa">else</span>
               frequencies<span class="hl sym">[</span>fragment<span class="hl sym">] =</span> <span class="hl kwa">new</span> KNucleotide<span class="hl sym">(</span>sequence<span class="hl sym">:</span> fragment<span class="hl sym">);</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> offset<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> offset<span class="hl sym">&lt;</span>length<span class="hl sym">;</span> offset<span class="hl sym">++)</span> kFrequency<span class="hl sym">(</span>offset<span class="hl sym">,</span>length<span class="hl sym">);</span>
      <span class="hl kwa">return</span> frequencies<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
