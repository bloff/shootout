<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Greg Buchholz</span>
<span class="hl com">   compile:  g++ -O3</span>
<span class="hl com">*/</span>

<span class="hl dir">#include&lt;iostream&gt;</span>
<span class="hl dir">#include&lt;complex&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">char</span>  bit_num <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwb">const int</span> iter <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>
  <span class="hl kwb">const double</span> lim <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> <span class="hl num">2.0</span><span class="hl sym">;</span>

  std<span class="hl sym">::</span>ios_base<span class="hl sym">::</span><span class="hl kwd">sync_with_stdio</span><span class="hl sym">(</span><span class="hl kwa">false</span><span class="hl sym">);</span>
  <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>

  std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">&lt;&lt;</span> n <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">&lt;&lt;</span> n <span class="hl sym">&lt;&lt;</span> std<span class="hl sym">::</span>endl<span class="hl sym">;</span>

  <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> y<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> y<span class="hl sym">&lt;</span>n<span class="hl sym">; ++</span>y<span class="hl sym">)</span>
    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> x<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> x<span class="hl sym">&lt;</span>n<span class="hl sym">; ++</span>x<span class="hl sym">)</span>
    <span class="hl sym">{</span>
       std<span class="hl sym">::</span><span class="hl kwb">complex</span><span class="hl sym">&lt;</span><span class="hl kwb">double</span><span class="hl sym">&gt;</span> <span class="hl kwd">Z</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),</span><span class="hl kwd">C</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*(</span><span class="hl kwb">double</span><span class="hl sym">)</span>x<span class="hl sym">/</span>n <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*(</span><span class="hl kwb">double</span><span class="hl sym">)</span>y<span class="hl sym">/</span>n <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">);</span>

       <span class="hl slc">//manually inlining &quot;norm&quot; results in a 5x-7x speedup on gcc</span>
       <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>iter <span class="hl kwa">and</span> Z<span class="hl sym">.</span><span class="hl kwd">real</span><span class="hl sym">()*</span>Z<span class="hl sym">.</span><span class="hl kwd">real</span><span class="hl sym">() +</span> Z<span class="hl sym">.</span><span class="hl kwd">imag</span><span class="hl sym">()*</span>Z<span class="hl sym">.</span><span class="hl kwd">imag</span><span class="hl sym">() &lt;=</span> lim<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
         Z <span class="hl sym">=</span> Z<span class="hl sym">*</span>Z <span class="hl sym">+</span> C<span class="hl sym">;</span>

       byte_acc <span class="hl sym">= (</span>byte_acc <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">) | ((</span><span class="hl kwd">norm</span><span class="hl sym">(</span>Z<span class="hl sym">) &gt;</span> lim<span class="hl sym">)</span> ? <span class="hl num">0x00</span><span class="hl sym">:</span><span class="hl num">0x01</span><span class="hl sym">);</span>

       <span class="hl kwa">if</span><span class="hl sym">(++</span>bit_num <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">){</span> std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> byte_acc<span class="hl sym">;</span> bit_num <span class="hl sym">=</span> byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">; }</span>
       <span class="hl kwa">else if</span><span class="hl sym">(</span>x <span class="hl sym">==</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) {</span> byte_acc  <span class="hl sym">&lt;&lt;= (</span><span class="hl num">8</span><span class="hl sym">-</span>n<span class="hl sym">%</span><span class="hl num">8</span><span class="hl sym">);</span>
                           std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> byte_acc<span class="hl sym">;</span>
                           bit_num <span class="hl sym">=</span> byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">; }</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
