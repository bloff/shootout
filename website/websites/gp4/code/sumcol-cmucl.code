<span class="hl slc">;;; -*- mode: lisp -*-</span>
<span class="hl slc">;;; $Id: sumcol-cmucl.code,v 1.50 2007-10-28 17:51:51 igouy-guest Exp $</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; by Risto Laakso 12/2005</span>

<span class="hl sym">(</span>declaim <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">)</span> #-gcl <span class="hl sym">(</span>debug <span class="hl num">0</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">)))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>flet <span class="hl sym">((</span><span class="hl kwa">read</span>-int <span class="hl sym">(</span>x<span class="hl sym">)</span>
	   <span class="hl sym">(</span>let <span class="hl sym">((</span>int <span class="hl num">0</span><span class="hl sym">) (</span>sgn <span class="hl num">1</span><span class="hl sym">) (</span>eof t<span class="hl sym">))</span>
	     <span class="hl sym">(</span>declare <span class="hl sym">(</span><span class="hl kwa">type</span> fixnum int sgn<span class="hl sym">))</span>
	     <span class="hl sym">(</span>loop for byte of-<span class="hl kwa">type</span> fixnum <span class="hl sym">= (</span>char-code <span class="hl sym">(</span><span class="hl kwa">read</span>-char x nil #\null<span class="hl sym">))</span>
		   for num of-<span class="hl kwa">type</span> fixnum <span class="hl sym">= (</span>- byte <span class="hl sym">(</span>char-code #\0<span class="hl sym">))</span>
		   when <span class="hl sym">(=</span> byte <span class="hl sym">(</span>char-code #\-<span class="hl sym">))</span> do <span class="hl sym">(</span><span class="hl kwa">setq</span> sgn -<span class="hl num">1</span><span class="hl sym">)</span>
		   when <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(/=</span> byte <span class="hl sym">(</span>char-code #\-<span class="hl sym">)) (</span><span class="hl kwa">or</span> <span class="hl sym">(&lt;</span> num <span class="hl num">0</span><span class="hl sym">) (&gt;=</span> num <span class="hl num">10</span><span class="hl sym">)))</span> do <span class="hl sym">(</span>return <span class="hl sym">(</span><span class="hl kwa">if</span> eof nil <span class="hl sym">(*</span> int sgn<span class="hl sym">)))</span>
		   when <span class="hl sym">(/=</span> byte <span class="hl sym">(</span>char-code #\-<span class="hl sym">))</span> do
		   <span class="hl sym">(</span><span class="hl kwa">if</span> eof <span class="hl sym">(</span><span class="hl kwa">setq</span> eof nil<span class="hl sym">))</span>
		   <span class="hl sym">(</span><span class="hl kwa">setq</span> int <span class="hl sym">(+ (</span>the fixnum <span class="hl sym">(*</span> int <span class="hl num">10</span><span class="hl sym">))</span> num<span class="hl sym">))))))</span>

    <span class="hl sym">(</span><span class="hl kwa">princ</span>
     <span class="hl sym">(</span>loop for int <span class="hl sym">= (</span><span class="hl kwa">read</span>-int <span class="hl sym">*</span>standard-input<span class="hl sym">*)</span>
	   when <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span><span class="hl kwa">null</span> int<span class="hl sym">))</span> sum <span class="hl sym">(</span>the fixnum int<span class="hl sym">)</span> into res
	   when <span class="hl sym">(</span><span class="hl kwa">null</span> int<span class="hl sym">)</span> do <span class="hl sym">(</span>return res<span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">terpri</span><span class="hl sym">)))</span>


