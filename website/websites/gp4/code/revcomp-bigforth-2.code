<span class="slc">\ The Great Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>
<span class="slc">\ contributed by Ian Osgood</span>
<span class="slc">\ modified by Bernd Paysan</span>
<span class="slc">\ use option &quot;-d 32M&quot; to have enough memory to run this program</span>

<span class="sym">:</span> mem<span class="sym">,</span>
  <span class="kwa">here over allot swap move</span> <span class="sym">;</span>

<span class="slc">\ complement mappings</span>
<span class="kwa">create</span> map s<span class="str">&quot; TVGHefCDijMlKNopqYSAABWxRz&quot;</span> mem<span class="sym">,</span>

<span class="sym">:</span> map<span class="sym">-</span><span class="kwa">c</span> <span class="com">( c -- comp )</span> <span class="num">32</span> <span class="kwa">or</span> <span class="sym">'</span>a <span class="sym">-</span> map <span class="sym">+</span> <span class="kwa">c</span><span class="sym">&#64; ;</span>

<span class="num">60</span> <span class="kwa">constant</span> line<span class="sym">-</span>len
<span class="num">128</span> <span class="kwa">constant</span> lines
line<span class="sym">-</span>len <span class="num">1</span><span class="sym">+</span> lines <span class="sym">*</span> <span class="kwa">Constant</span> buf<span class="sym">-</span>size

<span class="slc">\ data arrays</span>
<span class="kwa">Variable</span> linebuf buf<span class="sym">-</span>size <span class="kwa">allot</span>

<span class="sym">:</span> flush<span class="sym">,</span> linebuf <span class="sym">&#64;+</span> <span class="kwa">swap</span> type linebuf off <span class="sym">;</span>
<span class="sym">:</span> <span class="kwa">emit</span><span class="sym">,</span> <span class="com">( char -- )</span>  linebuf <span class="sym">&#64;+ +</span> <span class="kwa">c</span><span class="sym">!</span>  <span class="num">1</span> linebuf <span class="sym">+! ;</span>
<span class="sym">:</span> <span class="kwa">cr</span><span class="sym">,  #</span>lf <span class="kwa">emit</span><span class="sym">,</span> linebuf <span class="sym">&#64;</span> buf<span class="sym">-</span>size <span class="sym">=</span> <span class="kwa">IF</span>
	flush<span class="sym">,</span>
    <span class="kwa">THEN</span> <span class="sym">;</span>

<span class="sym">:</span> rev<span class="sym">-</span>comp <span class="com">( end -- start )</span> line<span class="sym">-</span>len
  <span class="kwa">begin  over pad</span> u<span class="sym">&gt;</span>
  <span class="kwa">while  swap</span> <span class="num">1</span><span class="sym">-</span> <span class="kwa">dup c</span><span class="sym">&#64;</span> map<span class="sym">-</span><span class="kwa">c emit</span><span class="sym">,</span>
         <span class="kwa">swap</span> <span class="num">1</span><span class="sym">-</span> <span class="kwa">dup</span> <span class="num">0</span><span class="sym">=</span> <span class="kwa">if cr</span><span class="sym">,</span> line<span class="sym">-</span>len <span class="sym">+</span> <span class="kwa">then</span>
  <span class="kwa">repeat</span> line<span class="sym">-</span>len <span class="sym">&lt;</span> <span class="kwa">if cr</span><span class="sym">,</span> <span class="kwa">then</span> flush<span class="sym">, ;</span>

<span class="sym">:</span> main   <span class="kwa">pad</span> <span class="com">( end )</span>
  <span class="kwa">begin  dup</span> <span class="num">80</span> stdin read<span class="sym">-</span>line throw
  <span class="kwa">while  over c</span><span class="sym">&#64; '&gt; =</span>
         <span class="kwa">if   over</span>  rev<span class="sym">-</span>comp  <span class="sym">-</span><span class="kwa">rot</span> type <span class="kwa">cr</span>
         <span class="kwa">else</span> <span class="sym">+</span> <span class="kwa">then</span>
  <span class="kwa">repeat drop</span> rev<span class="sym">-</span>comp <span class="kwa">drop</span> <span class="sym">;</span>

main bye  <span class="slc">\ done!</span>

