<span class="hl com">(* The Great Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Vesa Karvonen.</span>
<span class="hl com"> *)</span>

<span class="hl com">(* abbreviations *)</span>
<span class="hl kwa">structure</span> A<span class="hl sym">=</span>CommandLine <span class="hl kwa">and</span> C<span class="hl sym">=</span>CML <span class="hl kwa">and</span> I<span class="hl sym">=</span><span class="hl kwa">Int and</span> R<span class="hl sym">=</span>RunCML

<span class="hl com">(* utilities *)</span>
<span class="hl kwa">val</span> <span class="hl sym">(</span>i2s<span class="hl sym">,</span> s2i<span class="hl sym">) = (</span>I.toString<span class="hl sym">,</span> I.fromString<span class="hl sym">)</span>
<span class="hl kwa">fun</span> repeat n f x <span class="hl sym">=</span> <span class="hl kwa">if</span> n<span class="hl sym">&lt;=</span><span class="hl num">0</span> <span class="hl kwa">then</span> x <span class="hl kwa">else</span> repeat <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> f <span class="hl sym">(</span>f x<span class="hl sym">)</span>

<span class="hl com">(* makes a link thread *)</span>
<span class="hl kwa">fun</span> mkLink s <span class="hl sym">=</span> <span class="hl kwa">let val</span> c <span class="hl sym">=</span> C.channel <span class="hl sym">()</span>
                   <span class="hl kwa">fun</span> lp <span class="hl sym">() = (</span>C.send <span class="hl sym">(</span>s<span class="hl sym">,</span> C.recv c<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) ;</span> lp <span class="hl sym">())</span>
               <span class="hl kwa">in</span> ignore <span class="hl sym">(</span>C.spawn lp<span class="hl sym">) ;</span> c <span class="hl kwa">end</span>

<span class="hl com">(* driver *)</span>
<span class="hl kwa">fun</span> go n m <span class="hl sym">() =</span>
  <span class="hl kwa">let val</span> <span class="hl sym">(</span>b<span class="hl sym">,</span> e<span class="hl sym">) =</span> <span class="hl kwa">let val</span> e <span class="hl sym">=</span> C.channel <span class="hl sym">()</span> <span class="hl kwa">in</span> <span class="hl sym">(</span>repeat m mkLink e<span class="hl sym">,</span> e<span class="hl sym">)</span> <span class="hl kwa">end</span>
  <span class="hl kwa">in</span> print <span class="hl sym">(</span>i2s <span class="hl sym">(</span>repeat n <span class="hl sym">(</span><span class="hl kwa">fn</span> s <span class="hl sym">=&gt; (</span>C.send <span class="hl sym">(</span>b<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) ;</span> C.recv e<span class="hl sym">+</span>s<span class="hl sym">))</span> <span class="hl num">0</span><span class="hl sym">)</span>^<span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span> <span class="hl kwa">end</span>

<span class="hl kwa">val</span> _ <span class="hl sym">=</span> R.doit <span class="hl sym">(</span>go <span class="hl sym">(</span>valOf<span class="hl sym">(</span>s2i<span class="hl sym">(</span>hd<span class="hl sym">(</span>A.arguments<span class="hl sym">())))</span> <span class="hl kwa">handle</span> _ <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">500</span><span class="hl sym">,</span> NONE<span class="hl sym">)</span>
