<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Joost van der Sluis</span>
<span class="hl com"></span>
<span class="hl com">   converted to D by Dave Fladebo</span>
<span class="hl com">   compile: dmd -O -inline -release nsievebits2.d</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>string<span class="hl sym">;</span>

<span class="hl kwa">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[][]</span> args<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">int</span> n <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">3</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl kwd">primes</span><span class="hl sym">(</span>n<span class="hl sym">-</span>i<span class="hl sym">);</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">primes</span><span class="hl sym">(</span><span class="hl kwa">int</span> n<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">const uint</span> bpc <span class="hl sym">=</span> <span class="hl kwa">uint</span><span class="hl sym">.</span>sizeof <span class="hl sym">*</span> <span class="hl num">8</span><span class="hl sym">;</span>
    <span class="hl kwa">int</span> count<span class="hl sym">,</span> prime<span class="hl sym">,</span> size <span class="hl sym">=</span> <span class="hl num">10000</span> <span class="hl sym">&lt;&lt;</span> n<span class="hl sym">;</span>
    <span class="hl kwa">uint</span><span class="hl sym">[]</span> flags<span class="hl sym">;</span>

    flags<span class="hl sym">.</span>length <span class="hl sym">=</span> size <span class="hl sym">/</span> bpc <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
    flags<span class="hl sym">[] =</span> <span class="hl kwa">uint</span><span class="hl sym">.</span>max<span class="hl sym">;</span>

    <span class="hl kwa">for</span><span class="hl sym">(</span>prime <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> prime <span class="hl sym">&lt;=</span> size<span class="hl sym">;</span> prime<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
        bool <span class="hl kwd">IsSet</span><span class="hl sym">(</span><span class="hl kwa">uint</span> i<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">int</span> offset <span class="hl sym">=</span> i <span class="hl sym">/</span> bpc<span class="hl sym">;</span>
            <span class="hl kwa">uint</span> mask   <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>i <span class="hl sym">%</span> bpc<span class="hl sym">);</span>
            <span class="hl kwa">return</span> <span class="hl sym">(</span>flags<span class="hl sym">[</span>offset<span class="hl sym">] &amp;</span> mask<span class="hl sym">) &lt;&gt;</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">if</span><span class="hl sym">(</span><span class="hl kwd">IsSet</span><span class="hl sym">(</span>prime<span class="hl sym">))</span>
        <span class="hl sym">{</span>
            count<span class="hl sym">++;</span>
            <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> prime <span class="hl sym">+</span> prime<span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> size<span class="hl sym">;</span> i <span class="hl sym">+=</span> prime<span class="hl sym">)</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">void</span> <span class="hl kwd">Clear</span><span class="hl sym">(</span><span class="hl kwa">uint</span> i<span class="hl sym">)</span>
                <span class="hl sym">{</span>
                    <span class="hl kwa">int</span> offset <span class="hl sym">=</span> i <span class="hl sym">/</span> bpc<span class="hl sym">;</span>
                    <span class="hl kwa">uint</span> mask   <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>i <span class="hl sym">%</span> bpc<span class="hl sym">);</span>
                    <span class="hl kwa">if</span><span class="hl sym">((</span>flags<span class="hl sym">[</span>offset<span class="hl sym">] &amp;</span> mask<span class="hl sym">) &lt;&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> flags<span class="hl sym">[</span>offset<span class="hl sym">] =</span> flags<span class="hl sym">[</span>offset<span class="hl sym">]</span> ^ mask<span class="hl sym">;</span>
                <span class="hl sym">}</span>
                <span class="hl kwd">Clear</span><span class="hl sym">(</span>i<span class="hl sym">);</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8d %8d&quot;</span><span class="hl sym">,</span> size<span class="hl sym">,</span> count<span class="hl sym">);</span>
<span class="hl sym">}</span>
