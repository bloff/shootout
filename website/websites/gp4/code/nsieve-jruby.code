<span class="hl slc"># The Computer Language Shootout</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Glenn Parker, March 2005</span>
<span class="hl slc"># modified by Evan Phoenix, Sept 2006</span>

<span class="hl kwa">def</span> <span class="hl kwd">sieve</span><span class="hl sym">(</span>m<span class="hl sym">)</span>
  flags <span class="hl sym">=</span> Flags<span class="hl sym">.</span>dup<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">,</span>m<span class="hl sym">]</span>
  count <span class="hl sym">=</span> <span class="hl num">0</span>
  pmax <span class="hl sym">=</span> m <span class="hl sym">-</span> <span class="hl num">1</span>
  p <span class="hl sym">=</span> <span class="hl num">2</span>
  <span class="hl kwa">while</span> p <span class="hl sym">&lt;=</span> pmax
    <span class="hl kwa">unless</span> flags<span class="hl sym">[</span>p<span class="hl sym">].</span>zero<span class="hl sym">?</span>
      count <span class="hl sym">+=</span> <span class="hl num">1</span>
      mult <span class="hl sym">=</span> p
      <span class="hl kwa">while</span> mult <span class="hl sym">&lt;=</span> pmax
        flags<span class="hl sym">[</span>mult<span class="hl sym">] =</span> <span class="hl num">0</span>
        mult <span class="hl sym">+=</span> p
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    p <span class="hl sym">+=</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span>
  count
<span class="hl kwa">end</span>

n <span class="hl sym">= (</span><span class="hl kwc">ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ||</span> <span class="hl num">2</span><span class="hl sym">).</span>to_i

Flags <span class="hl sym">=</span> <span class="hl str">&quot;</span><span class="hl esc">\x</span><span class="hl str">1&quot;</span> <span class="hl sym">* (</span> <span class="hl num">2</span> <span class="hl sym">**</span> n <span class="hl sym">*</span> <span class="hl num">10_000</span><span class="hl sym">)</span>

n<span class="hl sym">.</span><span class="hl kwd">downto</span><span class="hl sym">(</span>n-2<span class="hl sym">)</span> <span class="hl kwa">do</span> <span class="hl sym">|</span>exponent<span class="hl sym">|</span>
  <span class="hl kwa">break if</span> exponent <span class="hl sym">&lt;</span> <span class="hl num">0</span>
  m <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> exponent<span class="hl sym">) *</span> <span class="hl num">10_000</span>
  <span class="hl slc"># m = (2 ** exponent) * 10_000</span>
  count <span class="hl sym">=</span> <span class="hl kwd">sieve</span><span class="hl sym">(</span>m<span class="hl sym">)</span>
  printf <span class="hl str">&quot;Primes up to %8d %8d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> count
<span class="hl kwa">end</span>
