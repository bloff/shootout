<span class="slc">// $Id: takfp-gpp.code,v 1.9 2005-11-02 07:49:45 igouy-guest Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org</span>
<span class="slc">// Contributed by Brent Fulgham</span>

<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwb">float</span> <span class="kwd">Tak</span> <span class="sym">(</span><span class="kwb">float</span> x<span class="sym">,</span> <span class="kwb">float</span> y<span class="sym">,</span> <span class="kwb">float</span> z<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&gt;=</span> x<span class="sym">)</span> <span class="kwa">return</span> z<span class="sym">;</span>
	<span class="kwa">return</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwd">Tak</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">));</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[])</span>
<span class="sym">{</span>
	<span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>
	cout <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>fixed <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setprecision</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
	cout <span class="sym">&lt;&lt;</span> <span class="kwd">Tak</span><span class="sym">(</span>n<span class="sym">*</span><span class="num">3.0</span><span class="sym">,</span> n<span class="sym">*</span><span class="num">2.0</span><span class="sym">,</span> n<span class="sym">*</span><span class="num">1.0</span><span class="sym">) &lt;&lt;</span> endl<span class="sym">;</span>
	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="slc">// vim: ts=4 ft=c</span>
