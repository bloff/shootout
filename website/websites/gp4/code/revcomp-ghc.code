<span class="hl slc">-- The Great Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Jeff Newbern</span>

<span class="hl slc">-- Note: This code has not been optimized *at all*.  It is written to be clear</span>
<span class="hl slc">-- and concise, using standard Haskell idioms.  Performance is decent with</span>
<span class="hl slc">-- ghc -O2, but if it can be improved without sacrificing the clarity of the</span>
<span class="hl slc">-- code, by all means go for it!</span>

<span class="hl kwa">import</span> Data.<span class="hl kwb">Char</span><span class="hl sym">(</span>toLower<span class="hl sym">)</span>

<span class="hl kwa">type</span> Base <span class="hl sym">=</span> <span class="hl kwb">Char</span>
<span class="hl kwa">type</span> Sequence <span class="hl sym">= [</span>Base<span class="hl sym">]</span>

complement <span class="hl sym">::</span> Base <span class="hl sym">-&gt;</span> Base
complement <span class="hl str">'A'</span> <span class="hl sym">=</span> <span class="hl str">'T'</span>
complement <span class="hl str">'a'</span> <span class="hl sym">=</span> <span class="hl str">'T'</span>
complement <span class="hl str">'C'</span> <span class="hl sym">=</span> <span class="hl str">'G'</span>
complement <span class="hl str">'c'</span> <span class="hl sym">=</span> <span class="hl str">'G'</span>
complement <span class="hl str">'G'</span> <span class="hl sym">=</span> <span class="hl str">'C'</span>
complement <span class="hl str">'g'</span> <span class="hl sym">=</span> <span class="hl str">'C'</span>
complement <span class="hl str">'T'</span> <span class="hl sym">=</span> <span class="hl str">'A'</span>
complement <span class="hl str">'t'</span> <span class="hl sym">=</span> <span class="hl str">'A'</span>
complement <span class="hl str">'U'</span> <span class="hl sym">=</span> <span class="hl str">'A'</span>
complement <span class="hl str">'u'</span> <span class="hl sym">=</span> <span class="hl str">'A'</span>
complement <span class="hl str">'M'</span> <span class="hl sym">=</span> <span class="hl str">'K'</span>
complement <span class="hl str">'m'</span> <span class="hl sym">=</span> <span class="hl str">'K'</span>
complement <span class="hl str">'R'</span> <span class="hl sym">=</span> <span class="hl str">'Y'</span>
complement <span class="hl str">'r'</span> <span class="hl sym">=</span> <span class="hl str">'Y'</span>
complement <span class="hl str">'Y'</span> <span class="hl sym">=</span> <span class="hl str">'R'</span>
complement <span class="hl str">'y'</span> <span class="hl sym">=</span> <span class="hl str">'R'</span>
complement <span class="hl str">'K'</span> <span class="hl sym">=</span> <span class="hl str">'M'</span>
complement <span class="hl str">'k'</span> <span class="hl sym">=</span> <span class="hl str">'M'</span>
complement <span class="hl str">'V'</span> <span class="hl sym">=</span> <span class="hl str">'B'</span>
complement <span class="hl str">'v'</span> <span class="hl sym">=</span> <span class="hl str">'B'</span>
complement <span class="hl str">'H'</span> <span class="hl sym">=</span> <span class="hl str">'D'</span>
complement <span class="hl str">'h'</span> <span class="hl sym">=</span> <span class="hl str">'D'</span>
complement <span class="hl str">'D'</span> <span class="hl sym">=</span> <span class="hl str">'H'</span>
complement <span class="hl str">'d'</span> <span class="hl sym">=</span> <span class="hl str">'H'</span>
complement <span class="hl str">'B'</span> <span class="hl sym">=</span> <span class="hl str">'V'</span>
complement <span class="hl str">'b'</span> <span class="hl sym">=</span> <span class="hl str">'V'</span>
complement  x  <span class="hl sym">=</span> x

<span class="hl slc">-- write a sequence in Fasta format</span>
writeFasta <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> Sequence <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
writeFasta <span class="hl sym">[]</span>     _        <span class="hl sym">=</span> <span class="hl kwa">do</span> return <span class="hl sym">()</span>
writeFasta header sequence <span class="hl sym">=</span>
  <span class="hl kwa">do</span> putStrLn header
     writeWrapped <span class="hl num">60</span> sequence
  <span class="hl kwa">where</span> writeWrapped _   <span class="hl sym">[]  =</span> <span class="hl kwa">do</span> return <span class="hl sym">()</span>
        writeWrapped len str <span class="hl sym">=</span> <span class="hl kwa">do let</span> <span class="hl sym">(</span>s1<span class="hl sym">,</span>s2<span class="hl sym">) =</span> splitAt len str
                                  putStrLn s1
                                  writeWrapped len s2

<span class="hl slc">-- recurse over input stream, accumulating and writing processed sequences</span>
process <span class="hl sym">:: (</span>String<span class="hl sym">,[</span>Base<span class="hl sym">],</span>String<span class="hl sym">) -&gt;</span> IO<span class="hl sym">()</span>
process <span class="hl sym">(</span>header<span class="hl sym">,</span>bases<span class="hl sym">,[])         =</span> writeFasta header bases
process <span class="hl sym">(</span>header<span class="hl sym">,</span>bases<span class="hl sym">,</span>c&#64;<span class="hl sym">(</span><span class="hl str">'&gt;'</span><span class="hl sym">:</span>cs<span class="hl sym">)) =</span> <span class="hl kwa">do</span> writeFasta header bases
                                       <span class="hl kwa">let</span> <span class="hl sym">(</span>header<span class="hl str">',cs'</span><span class="hl sym">) =</span> break <span class="hl sym">(</span>\c<span class="hl sym">-&gt;</span>c <span class="hl sym">==</span> <span class="hl str">'\n'</span><span class="hl sym">)</span> c
                                       process <span class="hl sym">(</span>header<span class="hl str">',[],cs'</span><span class="hl sym">)</span>
process <span class="hl sym">(</span>header<span class="hl sym">,</span>bases<span class="hl sym">,(</span><span class="hl str">'\n'</span><span class="hl sym">:</span>cs<span class="hl sym">))  =</span> process <span class="hl sym">(</span>header<span class="hl sym">,</span>bases<span class="hl sym">,</span>cs<span class="hl sym">)</span>
process <span class="hl sym">(</span>header<span class="hl sym">,</span>bases<span class="hl sym">,(</span>c<span class="hl sym">:</span>cs<span class="hl sym">))     =</span> process <span class="hl sym">(</span>header<span class="hl sym">,((</span>complement c<span class="hl sym">):</span>bases<span class="hl sym">),</span>cs<span class="hl sym">)</span>

main <span class="hl sym">=</span> <span class="hl kwa">do</span> cs <span class="hl sym">&lt;-</span> getContents
          process <span class="hl sym">([],[],</span>cs<span class="hl sym">)</span>

