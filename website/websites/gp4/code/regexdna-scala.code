<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Modelled on Pike version                                           */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>regex<span class="sym">.</span>_<span class="sym">;</span>

<span class="kwa">object</span> regexdna
<span class="sym">{</span>
  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="slc">// Read input data into string and record its length</span>
    <span class="kwa">var</span> sequence<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> loadSequence<span class="sym">;</span>
    <span class="kwa">val</span> initial_length<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> sequence<span class="sym">.</span>length<span class="sym">;</span>

    <span class="slc">// Remove newline and segment divider line occurrences; record new length</span>
    sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span>compile<span class="sym">(</span><span class="str">&quot;&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">).</span>matcher<span class="sym">(</span>sequence<span class="sym">).</span>replaceAll<span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
    <span class="kwa">val</span> code_length<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> sequence<span class="sym">.</span>length<span class="sym">;</span>

    <span class="slc">// Perform regexp counts</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> VARIANTS<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">var</span> count<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">val</span> m<span class="sym">:</span> <span class="kwc">Matcher</span> <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span>compile<span class="sym">(</span><span class="str">&quot;(?i)&quot;</span> <span class="sym">+</span> i<span class="sym">).</span>matcher<span class="sym">(</span>sequence<span class="sym">);</span>
      <span class="kwa">while</span> <span class="sym">(</span>m<span class="sym">.</span>find<span class="sym">())</span> count <span class="sym">=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      Console<span class="sym">.</span>println<span class="sym">(</span>i <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> count<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="slc">// Perform replacements</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> IUBS<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">var</span> iub<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">] =</span> i<span class="sym">.</span>split<span class="sym">(</span><span class="str">&quot;:&quot;</span><span class="sym">);</span>
      sequence <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span>compile<span class="sym">(</span>iub<span class="sym">(</span><span class="num">0</span><span class="sym">)).</span>matcher<span class="sym">(</span>sequence<span class="sym">).</span>replaceAll<span class="sym">(</span>iub<span class="sym">(</span><span class="num">1</span><span class="sym">));</span>
    <span class="sym">}</span>

    <span class="slc">// Print statistics</span>
    Console<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span> initial_length <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span> code_length <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span> sequence<span class="sym">.</span>length<span class="sym">);</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> loadSequence<span class="sym">():</span> <span class="kwc">String</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> buffer<span class="sym">:</span> <span class="kwc">StringBuffer</span> <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span>

    <span class="kwa">var</span> line<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> Console<span class="sym">.</span>readLine<span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>line <span class="sym">!=</span> null<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="slc">// Needless work, but benchmark mandates sequence contain newlines</span>
      buffer<span class="sym">.</span>append<span class="sym">(</span>line<span class="sym">).</span>append<span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span> line <span class="sym">=</span> Console<span class="sym">.</span>readLine<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> buffer<span class="sym">.</span>toString<span class="sym">();</span>
  <span class="sym">}</span>

  <span class="kwa">val</span> VARIANTS<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">] =</span> <span class="kwc">Array</span><span class="sym">(</span><span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">,</span>
    <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span> <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span>
    <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span> <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span>
    <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span>
    <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">);</span>

  <span class="kwa">val</span> IUBS<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">] =</span> <span class="kwc">Array</span><span class="sym">(</span><span class="str">&quot;B:(c|g|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;D:(a|g|t)&quot;</span><span class="sym">,</span>
    <span class="str">&quot;H:(a|c|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;K:(g|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;M:(a|c)&quot;</span><span class="sym">,</span> <span class="str">&quot;N:(a|c|g|t)&quot;</span><span class="sym">,</span>
    <span class="str">&quot;R:(a|g)&quot;</span><span class="sym">,</span> <span class="str">&quot;S:(c|g)&quot;</span><span class="sym">,</span> <span class="str">&quot;V:(a|c|g)&quot;</span><span class="sym">,</span> <span class="str">&quot;W:(a|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;Y:(c|t)&quot;</span><span class="sym">);</span>
<span class="sym">}</span>

