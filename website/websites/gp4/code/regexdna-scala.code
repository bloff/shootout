<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">InputStreamReader</span><span class="hl sym">,</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>regex<span class="hl sym">.</span>_

<span class="hl kwa">object</span> regexdna <span class="hl sym">{</span>
   <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>

      <span class="hl kwa">var</span> sequence <span class="hl sym">=</span> readFully<span class="hl sym">()</span>
      <span class="hl kwa">val</span> initialLength <span class="hl sym">=</span> sequence<span class="hl sym">.</span>length

      <span class="hl slc">// remove FASTA sequence descriptions and new-lines</span>
      <span class="hl kwa">var</span> m <span class="hl sym">=</span> <span class="hl kwc">Pattern</span><span class="hl sym">.</span>compile<span class="hl sym">(</span><span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">).</span>matcher<span class="hl sym">(</span>sequence<span class="hl sym">)</span>
      sequence <span class="hl sym">=</span> m<span class="hl sym">.</span>replaceAll<span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>
      <span class="hl kwa">val</span> codeLength <span class="hl sym">=</span> sequence<span class="hl sym">.</span>length

      <span class="hl slc">// regex match</span>
      <span class="hl kwa">val</span> variants <span class="hl sym">=</span> <span class="hl kwc">Array</span> <span class="hl sym">(</span>
         <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span>
         <span class="hl sym">,</span><span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
         <span class="hl sym">,</span><span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
         <span class="hl sym">,</span><span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
         <span class="hl sym">,</span><span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
         <span class="hl sym">,</span><span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
         <span class="hl sym">,</span><span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
         <span class="hl sym">,</span><span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
         <span class="hl sym">,</span><span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
         <span class="hl sym">)</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> v <span class="hl sym">&lt;-</span> variants<span class="hl sym">){</span>
         <span class="hl kwa">var</span> count <span class="hl sym">=</span> <span class="hl num">0</span>
         m <span class="hl sym">=</span> <span class="hl kwc">Pattern</span><span class="hl sym">.</span>compile<span class="hl sym">(</span>v<span class="hl sym">).</span>matcher<span class="hl sym">(</span>sequence<span class="hl sym">)</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>m<span class="hl sym">.</span>find<span class="hl sym">())</span> count <span class="hl sym">=</span> count <span class="hl sym">+</span> <span class="hl num">1</span>
         Console<span class="hl sym">.</span>println<span class="hl sym">(</span>v <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> count<span class="hl sym">)</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// regex substitution</span>
      <span class="hl kwa">val</span> codes <span class="hl sym">=</span> <span class="hl kwc">Array</span> <span class="hl sym">(</span>
             Pair<span class="hl sym">(</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">,</span>Pair<span class="hl sym">(</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">,</span>Pair<span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">,</span>Pair<span class="hl sym">(</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">,</span>Pair<span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">,</span>Pair<span class="hl sym">(</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">,</span>Pair<span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">,</span>Pair<span class="hl sym">(</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">,</span>Pair<span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">,</span>Pair<span class="hl sym">(</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">)</span>
            <span class="hl sym">,</span>Pair<span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)</span>
         <span class="hl sym">)</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">val</span> iub <span class="hl sym">&lt;-</span> codes<span class="hl sym">){</span>
         iub match <span class="hl sym">{</span>
            <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>code<span class="hl sym">,</span>alternative<span class="hl sym">) =&gt;</span>
               sequence <span class="hl sym">=</span> <span class="hl kwc">Pattern</span><span class="hl sym">.</span>compile<span class="hl sym">(</span>code<span class="hl sym">).</span>matcher<span class="hl sym">(</span>sequence<span class="hl sym">).</span>replaceAll<span class="hl sym">(</span>alternative<span class="hl sym">)</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      Console<span class="hl sym">.</span>println<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">+</span> initialLength <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">+</span> codeLength <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">+</span> sequence<span class="hl sym">.</span>length<span class="hl sym">)</span>
   <span class="hl sym">}</span>


   <span class="hl kwa">def</span> readFully<span class="hl sym">() = {</span>
      <span class="hl kwa">val</span> blockSize <span class="hl sym">=</span> <span class="hl num">10240</span>
      <span class="hl kwa">val</span> block <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwb">char</span><span class="hl sym">](</span>blockSize<span class="hl sym">)</span>
      <span class="hl kwa">val</span> buffer <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">(</span>blockSize<span class="hl sym">)</span>
      <span class="hl kwa">val</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">)</span>

      <span class="hl kwa">var</span> charsRead <span class="hl sym">=</span> r<span class="hl sym">.</span>read<span class="hl sym">(</span>block<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> blockSize<span class="hl sym">)</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>charsRead <span class="hl sym">&gt; -</span><span class="hl num">1</span><span class="hl sym">){</span>
         buffer<span class="hl sym">.</span>append<span class="hl sym">(</span>block<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span>charsRead<span class="hl sym">)</span>
         charsRead <span class="hl sym">=</span> r<span class="hl sym">.</span>read<span class="hl sym">(</span>block<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> blockSize<span class="hl sym">)</span>
      <span class="hl sym">}</span>

      r<span class="hl sym">.</span>close
      buffer<span class="hl sym">.</span>toString
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
