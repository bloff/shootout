<span class="hl com">/*</span>
<span class="hl com">	The Computer Language Shootout</span>
<span class="hl com">	http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">	contributed by Jochen Hinrichsen</span>
<span class="hl com">*/</span>

def sequence <span class="hl sym">=</span> <span class="hl kwd">readSequence</span><span class="hl sym">(</span>System<span class="hl sym">.</span>in<span class="hl sym">,</span> <span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl sym">).</span><span class="hl kwd">toUpperCase</span><span class="hl sym">()</span>
assert sequence<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">() &gt;</span> <span class="hl num">1000</span>

<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">].</span><span class="hl kwd">each</span><span class="hl sym">() {</span>
    <span class="hl kwd">writeFrequency</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> it<span class="hl sym">)</span>
<span class="hl sym">}</span>

<span class="hl sym">[</span> <span class="hl str">&quot;GGT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span> <span class="hl sym">].</span><span class="hl kwd">each</span><span class="hl sym">() {</span>
        println <span class="hl str">&quot;${sequence.count(it)}</span><span class="hl esc">\t</span><span class="hl str">${it}&quot;</span>
<span class="hl sym">}</span>

def <span class="hl kwd">readSequence</span><span class="hl sym">(</span>streamin<span class="hl sym">,</span> id<span class="hl sym">) {</span>
    def sequence <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span>
    def record <span class="hl sym">=</span> <span class="hl kwa">false</span>
    streamin<span class="hl sym">.</span><span class="hl kwd">eachLine</span><span class="hl sym">() {</span> line <span class="hl sym">-&gt;</span>
        <span class="hl kwa">switch</span> <span class="hl sym">(</span>line<span class="hl sym">) {</span>
            <span class="hl kwa">case</span> <span class="hl sym">~</span><span class="hl str">&quot;^$id.*&quot;</span><span class="hl sym">:</span>
                record <span class="hl sym">=</span> <span class="hl kwa">true</span>
                <span class="hl kwa">break</span>

            <span class="hl kwa">case</span> <span class="hl sym">[~</span><span class="hl str">&quot;^&gt;.*&quot;</span><span class="hl sym">, ~</span><span class="hl str">&quot;^;.*&quot;</span><span class="hl sym">]:</span>
                record <span class="hl sym">=</span> <span class="hl kwa">false</span>
                <span class="hl kwa">break</span>

            <span class="hl kwa">default</span><span class="hl sym">:</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span>record<span class="hl sym">) {</span>
                    sequence <span class="hl sym">+=</span> line
                <span class="hl sym">}</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
    sequence
<span class="hl sym">}</span>

def <span class="hl kwd">writeFrequency</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> f<span class="hl sym">) {</span>
    def count <span class="hl sym">= [:]</span>
    def formater <span class="hl sym">=</span> <span class="hl kwa">new</span> java<span class="hl sym">.</span>text<span class="hl sym">.</span><span class="hl kwd">DecimalFormat</span><span class="hl sym">(</span><span class="hl str">&quot;#0.000&quot;</span><span class="hl sym">)</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>offset in <span class="hl num">0</span><span class="hl sym">..&lt;</span>f<span class="hl sym">)</span> <span class="hl kwd">frequency</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> f<span class="hl sym">,</span> offset<span class="hl sym">,</span> count<span class="hl sym">)</span>

    <span class="hl slc">// default sort() is smallest first</span>
    <span class="hl slc">// sort for multiple properties: [ it.value, it.key ]</span>
    count<span class="hl sym">.</span><span class="hl kwd">values</span><span class="hl sym">().</span><span class="hl kwd">sort</span><span class="hl sym">({</span> l<span class="hl sym">,</span> r <span class="hl sym">-&gt;</span> r <span class="hl sym">&lt;=&gt;</span> l<span class="hl sym">}).</span><span class="hl kwd">each</span><span class="hl sym">() {</span> value <span class="hl sym">-&gt;</span>
        def entry <span class="hl sym">=</span> count<span class="hl sym">.</span><span class="hl kwd">find</span><span class="hl sym">() {</span> entry <span class="hl sym">-&gt;</span>
            entry<span class="hl sym">.</span><span class="hl kwd">getValue</span><span class="hl sym">() ==</span> value
        <span class="hl sym">}</span>

        println <span class="hl str">&quot;${entry.key} ${formater.format(100.0*value/(sequence.size()-f+1))}&quot;</span>
    <span class="hl sym">}</span>

    println <span class="hl str">&quot;&quot;</span>
<span class="hl sym">}</span>

def <span class="hl kwd">frequency</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> f<span class="hl sym">,</span> offset<span class="hl sym">,</span> count<span class="hl sym">) {</span>
    def n <span class="hl sym">=</span> sequence<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">()</span>
    def last <span class="hl sym">=</span> n <span class="hl sym">-</span> f <span class="hl sym">+</span> <span class="hl num">1</span>

    <span class="hl sym">(</span>offset<span class="hl sym">..&lt;</span>last<span class="hl sym">).</span><span class="hl kwd">step</span><span class="hl sym">(</span>f<span class="hl sym">) {</span> i <span class="hl sym">-&gt;</span>
        def key <span class="hl sym">=</span> sequence<span class="hl sym">[</span>i<span class="hl sym">..&lt;</span>i<span class="hl sym">+</span>f<span class="hl sym">]</span>
        <span class="hl slc">// No automatic defaulting</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>count<span class="hl sym">[</span>key<span class="hl sym">] ==</span> null<span class="hl sym">)</span> count<span class="hl sym">[</span>key<span class="hl sym">] =</span> <span class="hl num">1</span>
        <span class="hl slc">// ++ results in error</span>
        <span class="hl kwa">else</span> count<span class="hl sym">[</span>key<span class="hl sym">] +=</span> <span class="hl num">1</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl slc">// EOF</span>

