<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
<span class="hl kwa">module</span> Message<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Int<span class="hl sym">,</span> String<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> eager<span class="hl sym">,</span> error<span class="hl sym">,</span> intToString<span class="hl sym">,</span> seq<span class="hl sym">,</span> stringToInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>IO<span class="hl sym">.</span>Console <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> printLine<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Experimental<span class="hl sym">.</span>Concurrent<span class="hl sym">.</span>Parallel <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> par<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Experimental<span class="hl sym">.</span>Concurrent<span class="hl sym">.</span>BlockingQueue <span class="hl kwa">using</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> BlockingQueue<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> makeBlockingQueue<span class="hl sym">,</span> take<span class="hl sym">,</span> put<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>System <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> concurrentRuntime<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl com">/** this value is used to tell the workers to end */</span>
end <span class="hl sym">::</span> Int<span class="hl sym">;</span>
end <span class="hl sym">= -</span><span class="hl num">1</span><span class="hl sym">;</span>

<span class="hl com">/** default queue length */</span>
queueLength <span class="hl sym">=</span> <span class="hl num">256</span><span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * an indivual worker which takes values from the upstream queue, adds one, and</span>
<span class="hl com"> * puts them on the downstream queue.</span>
<span class="hl com"> */</span>
worker <span class="hl sym">::</span> BlockingQueue Int <span class="hl sym">-&gt;</span> BlockingQueue Int <span class="hl sym">-&gt; ();</span>
worker <span class="hl sym">!</span>inq <span class="hl sym">!</span>outq <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        input <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        input <span class="hl sym">=</span> eager $ take inq<span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>input <span class="hl sym">==</span> end<span class="hl sym">)</span> <span class="hl kwa">then</span>
            put outq end
            <span class="hl sym">`</span>seq<span class="hl sym">`</span>
            <span class="hl sym">()</span>
        <span class="hl kwa">else</span>
            <span class="hl sym">(</span>
                put outq <span class="hl sym">(</span>input <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                worker inq outq
            <span class="hl sym">)</span>
    <span class="hl sym">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * create a chain of worker functions running in parallel this is done using</span>
<span class="hl com"> * the par function.</span>
<span class="hl com"> */</span>
createChain <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> BlockingQueue Int <span class="hl sym">-&gt;</span> BlockingQueue Int<span class="hl sym">;</span>
createChain <span class="hl sym">!</span>length <span class="hl sym">!</span>input <span class="hl sym">=</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>length <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
        input
    <span class="hl kwa">else</span>
        <span class="hl sym">(</span>
            <span class="hl kwa">let</span>
                output <span class="hl sym">::</span> BlockingQueue Int<span class="hl sym">;</span>
                output <span class="hl sym">=</span> makeBlockingQueue queueLength<span class="hl sym">;</span>
            <span class="hl kwa">in</span>
                worker input output
                <span class="hl sym">`</span>par<span class="hl sym">`</span>
                createChain <span class="hl sym">(</span>length <span class="hl sym">- (</span><span class="hl num">1</span> <span class="hl sym">::</span> Int<span class="hl sym">))</span> output
        <span class="hl sym">)</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        n <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        n <span class="hl sym">=</span> eager $ stringToInt <span class="hl sym">(</span>head args<span class="hl sym">);</span>

        inQueue <span class="hl sym">::</span> BlockingQueue Int<span class="hl sym">;</span>
        inQueue <span class="hl sym">=</span> eager $ makeBlockingQueue queueLength<span class="hl sym">;</span>

        outQueue <span class="hl sym">::</span> BlockingQueue Int<span class="hl sym">;</span>
        outQueue <span class="hl sym">=</span> eager $ createChain <span class="hl sym">(</span><span class="hl num">500</span> <span class="hl sym">::</span> Int<span class="hl sym">)</span> inQueue<span class="hl sym">;</span>

        <span class="hl com">/** this feeds n 0's into the first queue */</span>
        feedQueue <span class="hl sym">::</span> Int <span class="hl sym">-&gt; ();</span>
        feedQueue n <span class="hl sym">=</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
                put inQueue end
            <span class="hl kwa">else</span>
                put inQueue <span class="hl sym">(</span><span class="hl num">0</span> <span class="hl sym">::</span> Int<span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                feedQueue <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">;</span>

        <span class="hl com">/** this collects n values from the last queue */</span>
        sumResult <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        sumResult <span class="hl sym">!</span>n <span class="hl sym">!</span>sum <span class="hl sym">=</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
                sum
            <span class="hl kwa">else</span>
                sumResult <span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) (</span>sum <span class="hl sym">+ (</span>take outQueue<span class="hl sym">))</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> concurrentRuntime <span class="hl kwa">then</span>
            feedQueue n
            <span class="hl sym">`</span>par<span class="hl sym">`</span>
            printLine <span class="hl sym">(</span>intToString $ sumResult n <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl kwa">else</span>
            error
                <span class="hl str">&quot;You must define the VM arg org.openquark.cal.machine.lecc.concurrent_runtime to run this program&quot;</span>
    <span class="hl sym">;</span>
