<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by David Pyke, March 2005</span>
<span class="hl slc"># optimized by Steffen Mueller, Sept 2007</span>
<span class="hl slc"># optimized by Laimonas VÄ—bra, Nov 2007</span>

<span class="hl kwa">use</span> integer<span class="hl sym">;</span>
<span class="hl kwa">use</span> strict<span class="hl sym">;</span>


<span class="hl kwa">sub</span> nsieve <span class="hl sym">{</span>
   <span class="hl kwc">my</span> <span class="hl sym">(</span><span class="hl kwb">$m</span><span class="hl sym">) =</span> <span class="hl kwb">&#64;_</span><span class="hl sym">;</span>
   <span class="hl kwc">my</span> <span class="hl kwb">$i</span><span class="hl sym">,</span> <span class="hl kwc">my</span> <span class="hl kwb">$j</span><span class="hl sym">,</span> <span class="hl kwc">my</span> <span class="hl kwb">$a</span><span class="hl sym">;</span>
   <span class="hl kwc">my</span> <span class="hl kwb">$count</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwb">$a</span> <span class="hl sym">=</span> <span class="hl num">0</span> x <span class="hl kwb">$m</span><span class="hl sym">;</span>

   <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">$i</span> <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> <span class="hl kwb">$i</span> <span class="hl sym">&lt;</span> <span class="hl kwb">$m</span><span class="hl sym">;</span> <span class="hl kwb">$i</span><span class="hl sym">++) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">substr</span><span class="hl sym">(</span><span class="hl kwb">$a</span><span class="hl sym">,</span> <span class="hl kwb">$i</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">ne</span> <span class="hl str">'1'</span><span class="hl sym">) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">$j</span> <span class="hl sym">=</span> <span class="hl kwb">$i</span> <span class="hl sym">+</span> <span class="hl kwb">$i</span><span class="hl sym">;</span> <span class="hl kwb">$j</span> <span class="hl sym">&lt;</span> <span class="hl kwb">$m</span><span class="hl sym">;</span> <span class="hl kwb">$j</span> <span class="hl sym">+=</span> <span class="hl kwb">$i</span><span class="hl sym">){</span>
            <span class="hl kwd">substr</span><span class="hl sym">(</span><span class="hl kwb">$a</span><span class="hl sym">,</span> <span class="hl kwb">$j</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">) =</span> <span class="hl str">'1'</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl sym">++</span><span class="hl kwb">$count</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> <span class="hl kwb">$count</span><span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwa">sub</span> nsieve_test <span class="hl sym">{</span>
   <span class="hl kwc">my</span><span class="hl sym">(</span><span class="hl kwb">$n</span><span class="hl sym">) =</span> <span class="hl kwb">&#64;_</span><span class="hl sym">;</span>

   <span class="hl kwc">my</span> <span class="hl kwb">$m</span> <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span><span class="hl kwb">$n</span><span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">;</span>
   <span class="hl kwc">my</span> <span class="hl kwb">$ncount</span><span class="hl sym">=</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl kwb">$m</span><span class="hl sym">);</span>
   printf <span class="hl str">&quot;Primes up to %8u %8u</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwb">$m</span><span class="hl sym">,</span> <span class="hl kwb">$ncount</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwc">my</span> <span class="hl kwb">$N</span> <span class="hl sym">= (</span><span class="hl kwb">$ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;</span> <span class="hl num">1</span><span class="hl sym">)</span> ? <span class="hl num">1</span> <span class="hl sym">:</span> <span class="hl kwb">$ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>

<span class="hl kwd">nsieve_test</span><span class="hl sym">(</span><span class="hl kwb">$N</span><span class="hl sym">);</span>
<span class="hl kwd">nsieve_test</span><span class="hl sym">(</span><span class="hl kwb">$N</span><span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>  <span class="hl kwa">if</span> <span class="hl kwb">$N</span> <span class="hl sym">&gt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
<span class="hl kwd">nsieve_test</span><span class="hl sym">(</span><span class="hl kwb">$N</span><span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)</span>  <span class="hl kwa">if</span> <span class="hl kwb">$N</span> <span class="hl sym">&gt;=</span> <span class="hl num">2</span><span class="hl sym">;</span>
