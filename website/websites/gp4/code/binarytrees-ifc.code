<span class="hl slc">! -*- mode: f90 -*-</span>
<span class="hl slc">!</span>
<span class="hl slc">! $Id: binarytrees-ifc.code,v 1.28 2008-03-04 05:35:19 igouy-guest Exp $ ; $Name:  $</span>
<span class="hl slc">!</span>
<span class="hl slc">! The Computer Language Shootout Benchmarks</span>
<span class="hl slc">! http://shootout.alioth.debian.org/</span>

<span class="hl slc">! contributed by Steve Decker</span>
<span class="hl slc">! based on the C version by Kevin Carson</span>
<span class="hl slc">! compilation:</span>
<span class="hl slc">!    gfortran -O3 -fomit-frame-pointer -funroll-loops binarytrees.f90</span>
<span class="hl slc">!</span>
<span class="hl slc">! This implementation does not need TR15581</span>
<span class="hl slc">!</span>
module b_tree
  implicit none
  save

  integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> short <span class="hl sym">=</span> selected_int_kind<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>

  type treeNode
     integer <span class="hl sym">::</span> item
     type<span class="hl sym">(</span>treeNode<span class="hl sym">),</span> pointer <span class="hl sym">::</span> left
     type<span class="hl sym">(</span>treeNode<span class="hl sym">),</span> pointer <span class="hl sym">::</span> right
  end type treeNode

contains

  subroutine NewTreeNode<span class="hl sym">(</span>left<span class="hl sym">,</span> right<span class="hl sym">,</span> item<span class="hl sym">,</span> node<span class="hl sym">)</span>
    type<span class="hl sym">(</span>treeNode<span class="hl sym">),</span> target<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> left<span class="hl sym">,</span> right
    integer<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> item
    type<span class="hl sym">(</span>treeNode<span class="hl sym">),</span> pointer <span class="hl sym">::</span> node

    allocate<span class="hl sym">(</span>node<span class="hl sym">)</span>
    node <span class="hl sym">=</span> treeNode<span class="hl sym">(</span>item<span class="hl sym">,</span> left<span class="hl sym">,</span> right<span class="hl sym">)</span>
  end subroutine NewTreeNode

  recursive function ItemCheck<span class="hl sym">(</span>tree<span class="hl sym">)</span> result <span class="hl sym">(</span>check<span class="hl sym">)</span>
    type<span class="hl sym">(</span>treeNode<span class="hl sym">),</span> pointer <span class="hl sym">::</span> tree
    integer <span class="hl sym">::</span> check

    if <span class="hl sym">(</span>.not. associated<span class="hl sym">(</span>tree<span class="hl sym">%</span>left<span class="hl sym">))</span> then
       check <span class="hl sym">=</span> tree<span class="hl sym">%</span>item
    else
       check <span class="hl sym">=</span> tree<span class="hl sym">%</span>item <span class="hl sym">+</span> ItemCheck<span class="hl sym">(</span>tree<span class="hl sym">%</span>left<span class="hl sym">) -</span> ItemCheck<span class="hl sym">(</span>tree<span class="hl sym">%</span>right<span class="hl sym">)</span>
    end if
    deallocate<span class="hl sym">(</span>tree<span class="hl sym">)</span>
  end function ItemCheck

  recursive subroutine BottomUpTree<span class="hl sym">(</span>item<span class="hl sym">,</span> depth<span class="hl sym">,</span> node<span class="hl sym">)</span>
    integer<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> item
    integer<span class="hl sym">(</span>kind<span class="hl sym">=</span>short<span class="hl sym">),</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> depth
    type<span class="hl sym">(</span>treeNode<span class="hl sym">),</span> pointer <span class="hl sym">::</span> node

    type<span class="hl sym">(</span>treeNode<span class="hl sym">),</span> pointer <span class="hl sym">::</span> left<span class="hl sym">,</span> right

    nullify<span class="hl sym">(</span>left<span class="hl sym">,</span> right<span class="hl sym">)</span>

    if <span class="hl sym">(</span>depth <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> then
       call BottomUpTree<span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> item <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span>_short<span class="hl sym">,</span> left<span class="hl sym">)</span>
       call BottomUpTree<span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> item<span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span>_short<span class="hl sym">,</span> right<span class="hl sym">)</span>
    end if
    call NewTreeNode<span class="hl sym">(</span>left<span class="hl sym">,</span> right<span class="hl sym">,</span> item<span class="hl sym">,</span> node<span class="hl sym">)</span>
  end subroutine BottomUpTree
end module b_tree

program binarytrees
  use b_tree
  implicit none

  integer<span class="hl sym">(</span>kind<span class="hl sym">=</span>short<span class="hl sym">),</span> parameter <span class="hl sym">::</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span>_short
  character<span class="hl sym">,</span>           parameter <span class="hl sym">::</span> tab <span class="hl sym">=</span> achar<span class="hl sym">(</span><span class="hl num">9</span><span class="hl sym">)</span>

  integer <span class="hl sym">::</span> i<span class="hl sym">,</span> iterations<span class="hl sym">,</span> check
  integer<span class="hl sym">(</span>kind<span class="hl sym">=</span>short<span class="hl sym">) ::</span> N<span class="hl sym">,</span> depth<span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> stretchDepth
  character<span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">) ::</span> argv
  type<span class="hl sym">(</span>treeNode<span class="hl sym">),</span> pointer <span class="hl sym">::</span> stretchTree <span class="hl sym">=&gt;</span> null<span class="hl sym">(),</span> longLivedTree <span class="hl sym">=&gt;</span> null<span class="hl sym">(),  &amp;</span>
                             tempTree <span class="hl sym">=&gt;</span> null<span class="hl sym">()</span>

  call get_command_argument<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> argv<span class="hl sym">)</span>
  read <span class="hl sym">(</span>argv<span class="hl sym">,</span> <span class="hl str">&quot;(i2)&quot;</span><span class="hl sym">)</span> N

  maxDepth <span class="hl sym">=</span> max<span class="hl sym">(</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span>_short<span class="hl sym">,</span> N<span class="hl sym">)</span>

  stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span>_short
  call BottomUpTree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> stretchDepth<span class="hl sym">,</span> stretchTree<span class="hl sym">)</span>
  write<span class="hl sym">(*,</span><span class="hl str">&quot;(2(a,i0))&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl sym">,</span> stretchDepth<span class="hl sym">,  &amp;</span>
       tab<span class="hl sym">//</span><span class="hl str">&quot; check: &quot;</span><span class="hl sym">,</span> ItemCheck<span class="hl sym">(</span>stretchTree<span class="hl sym">)</span>

  call BottomUpTree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> longLivedTree<span class="hl sym">)</span>

  do depth <span class="hl sym">=</span> minDepth<span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> <span class="hl num">2</span>
     iterations <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">**(</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">)</span>
     check <span class="hl sym">=</span> <span class="hl num">0</span>
     do i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> iterations
        call BottomUpTree<span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">,</span> tempTree<span class="hl sym">)</span>
        check <span class="hl sym">=</span> check <span class="hl sym">+</span> ItemCheck<span class="hl sym">(</span>tempTree<span class="hl sym">)</span>

        call BottomUpTree<span class="hl sym">(-</span>i<span class="hl sym">,</span> depth<span class="hl sym">,</span> tempTree<span class="hl sym">)</span>
        check <span class="hl sym">=</span> check <span class="hl sym">+</span> ItemCheck<span class="hl sym">(</span>tempTree<span class="hl sym">)</span>
     end do
     write<span class="hl sym">(*,</span><span class="hl str">&quot;(2(i0,a),i0)&quot;</span><span class="hl sym">)</span> iterations<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">,</span> tab<span class="hl sym">//</span><span class="hl str">&quot; trees of depth &quot;</span><span class="hl sym">,</span> depth<span class="hl sym">,  &amp;</span>
          tab<span class="hl sym">//</span><span class="hl str">&quot; check: &quot;</span><span class="hl sym">,</span> check
  end do

  write<span class="hl sym">(*,</span><span class="hl str">&quot;(2(a,i0))&quot;</span><span class="hl sym">)</span> <span class="hl str">&quot;long lived tree of depth &quot;</span><span class="hl sym">,</span> maxDepth<span class="hl sym">,  &amp;</span>
       tab<span class="hl sym">//</span><span class="hl str">&quot; check: &quot;</span><span class="hl sym">,</span> ItemCheck<span class="hl sym">(</span>longLivedTree<span class="hl sym">)</span>
end program binarytrees
