<span class="slc">#!/usr/bin/tclsh</span>
<span class="slc">##</span>
<span class="slc">## The Computer Lannguage Shootout</span>
<span class="slc">## http://shootout.alioth.debian.org/</span>
<span class="slc">## Contributed by Heiner Marxen</span>
<span class="slc">##</span>
<span class="slc">## &quot;binary-trees&quot;	for Tcl</span>
<span class="slc">## Call:	tclsh binarytrees.tcl 16</span>
<span class="slc">##</span>
<span class="slc">## $Id: binarytrees-tcl.code,v 1.2 2006-02-14 19:12:38 igouy-guest Exp $</span>

<span class="slc">## A tree node is implemented as a [list] with 3 elements:</span>
<span class="slc">##	[0] left  subtree</span>
<span class="slc">##	[1] right subtree</span>
<span class="slc">##	[2] item</span>
<span class="slc">## An empty tree is an empty list {}, an thus has [llength] 0.</span>

<span class="kwa">proc</span> ItemCheck <span class="sym">{</span>tree<span class="sym">} {</span>
    <span class="kwa">if</span> <span class="sym">{![</span><span class="kwa">llength</span> <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$tree</span> <span class="num">0</span><span class="sym">]]} {</span>
	<span class="kwa">return</span> <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$tree</span> <span class="num">2</span><span class="sym">]</span>
    <span class="sym">}</span> else <span class="sym">{</span>
	<span class="kwa">return</span> <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{             [</span><span class="kwa">lindex</span> <span class="kwb">$tree</span> <span class="num">2</span><span class="sym">]</span>
		      <span class="sym">+ [</span>ItemCheck <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$tree</span> <span class="num">0</span><span class="sym">]]</span>
		      <span class="sym">- [</span>ItemCheck <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$tree</span> <span class="num">1</span><span class="sym">]]}]</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">proc</span> BottomUpTree <span class="sym">{</span>item depth<span class="sym">} {</span>
    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$depth</span> <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">} {</span>
	<span class="kwa">set</span> ndepth <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$depth</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">}]</span>
	<span class="kwa">return</span> <span class="sym">[</span><span class="kwa">list</span> <span class="sym">[</span>BottomUpTree <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="num">2</span> <span class="sym">*</span> <span class="kwb">$item</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">}]</span> <span class="kwb">$ndepth</span><span class="sym">]</span> \
		     <span class="sym">[</span>BottomUpTree <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="num">2</span> <span class="sym">*</span> <span class="kwb">$item</span>    <span class="sym">}]</span> <span class="kwb">$ndepth</span><span class="sym">]</span> \
		     <span class="kwb">$item</span>
	       <span class="sym">]</span>
    <span class="sym">}</span> else <span class="sym">{</span>
	<span class="kwa">return</span> <span class="sym">[</span><span class="kwa">list</span> <span class="sym">{} {}</span> <span class="kwb">$item</span><span class="sym">]</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">proc</span> tellTree <span class="sym">{</span>typ depth check<span class="sym">} {</span>
    <span class="kwa">puts</span> <span class="str">&quot;$typ tree of depth $depth</span><span class="esc">\t</span> <span class="str">check: $check&quot;</span>
<span class="sym">}</span>

<span class="kwa">proc</span> main <span class="sym">{</span>argv<span class="sym">} {</span>
    <span class="kwa">set</span> N <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]</span>

    <span class="kwa">set</span> minDepth <span class="num">4</span>

    <span class="kwa">if</span> <span class="sym">{(</span><span class="kwb">$minDepth</span> <span class="sym">+</span> <span class="num">2</span><span class="sym">) &gt;</span> <span class="kwb">$N</span><span class="sym">} {</span>
	<span class="kwa">set</span> maxDepth <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$minDepth</span> <span class="sym">+</span> <span class="num">2</span><span class="sym">}]</span>
    <span class="sym">}</span> else <span class="sym">{</span>
	<span class="kwa">set</span> maxDepth <span class="kwb">$N</span>
    <span class="sym">}</span>

    <span class="kwa">set</span> stretchDepth <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$maxDepth</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">}]</span>

    <span class="kwa">set</span> stretchTree <span class="sym">[</span>BottomUpTree <span class="num">0</span> <span class="kwb">$stretchDepth</span><span class="sym">]</span>
    tellTree <span class="str">&quot;stretch&quot;</span> <span class="kwb">$stretchDepth</span> <span class="sym">[</span>ItemCheck <span class="kwb">$stretchTree</span><span class="sym">]</span>
    <span class="kwa">set</span> stretchTree <span class="sym">{}</span>

    <span class="kwa">set</span> longLivedTree <span class="sym">[</span>BottomUpTree <span class="num">0</span> <span class="kwb">$maxDepth</span><span class="sym">]</span>

    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> dep <span class="kwb">$minDepth</span><span class="sym">} {</span><span class="kwb">$dep</span> <span class="sym">&lt;=</span> <span class="kwb">$maxDepth</span><span class="sym">} {</span><span class="kwa">incr</span> dep <span class="num">2</span><span class="sym">} {</span>
	<span class="kwa">set</span> iterations <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span><span class="kwb">$maxDepth</span> <span class="sym">-</span> <span class="kwb">$dep</span> <span class="sym">+</span> <span class="kwb">$minDepth</span><span class="sym">)}]</span>
	<span class="kwa">set</span> check <span class="num">0</span>
	<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">1</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="kwb">$iterations</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	    <span class="kwa">set</span> tempTree <span class="sym">[</span>BottomUpTree <span class="kwb">$i $dep</span><span class="sym">]</span>
	    <span class="kwa">set</span> check <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$check</span> <span class="sym">+ [</span>ItemCheck <span class="kwb">$tempTree</span><span class="sym">]}]</span>
	    <span class="kwa">set</span> tempTree <span class="sym">{}</span>

	    <span class="kwa">set</span> tempTree <span class="sym">[</span>BottomUpTree <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{-</span><span class="kwb">$i</span><span class="sym">}]</span> <span class="kwb">$dep</span><span class="sym">]</span>
	    <span class="kwa">set</span> check <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$check</span> <span class="sym">+ [</span>ItemCheck <span class="kwb">$tempTree</span><span class="sym">]}]</span>
	    <span class="kwa">set</span> tempTree <span class="sym">{}</span>
	<span class="sym">}</span>

	<span class="kwa">puts</span> <span class="str">&quot;[expr {$iterations * 2}]</span><span class="esc">\t</span> <span class="str">trees of depth $dep</span><span class="esc">\t</span> <span class="str">check: $check&quot;</span>
    <span class="sym">}</span>

    tellTree <span class="str">&quot;long lived&quot;</span> <span class="kwb">$maxDepth</span> <span class="sym">[</span>ItemCheck <span class="kwb">$longLivedTree</span><span class="sym">]</span>

    <span class="kwa">return</span> <span class="num">0</span>
<span class="sym">}</span>

main <span class="kwb">$argv</span>
