<span class="slc">#!/usr/bin/tclsh</span>
<span class="slc"># $Id: pidigits-tcl.code,v 1.4 2005-10-30 08:04:15 igouy-guest Exp $</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># Requires bignum package from tcllib module -- however this will be</span>
<span class="slc"># very slow because bignum package is implemented in pure-tcl. Once</span>
<span class="slc"># Mpexpr extension is installed on your system, this benchmark can</span>
<span class="slc"># be replaced with the mpexpr version that I have submitted separately.</span>
<span class="slc">#</span>
<span class="slc"># Contributed by Hemang Lavana</span>

<span class="kwa">package</span> require math<span class="sym">::</span>bignum

<span class="kwa">proc</span> compose <span class="sym">{</span>aQRST bQRST<span class="sym">} {</span>
    <span class="kwa">foreach</span> <span class="sym">{</span>aQ aR aS aT<span class="sym">}</span> <span class="kwb">$aQRST</span> <span class="kwa">break</span>
    <span class="kwa">foreach</span> <span class="sym">{</span>bQ bR bS bT<span class="sym">}</span> <span class="kwb">$bQRST</span> <span class="kwa">break</span>

    <span class="slc"># rQ = aQ * bQ</span>
    <span class="kwa">set</span> rQ <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>mul <span class="kwb">$aQ $bQ</span><span class="sym">]</span>

    <span class="slc"># rR = aQ * bR + aR * bT</span>
    <span class="kwa">set</span> rR <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>add <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>mul <span class="kwb">$aQ $bR</span><span class="sym">] [::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>mul <span class="kwb">$aR $bT</span><span class="sym">]]</span>

    <span class="slc"># rS = aS * bQ + aT * bS</span>
    <span class="kwa">set</span> rS <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>add <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>mul <span class="kwb">$aS $bQ</span><span class="sym">] [::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>mul <span class="kwb">$aT $bS</span><span class="sym">]]</span>

    <span class="slc"># rT = aS * bR + aT * bT</span>
    <span class="kwa">set</span> rT <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>add <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>mul <span class="kwb">$aS $bR</span><span class="sym">] [::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>mul <span class="kwb">$aT $bT</span><span class="sym">]]</span>

    <span class="kwa">return</span> <span class="sym">[</span><span class="kwa">list</span> <span class="kwb">$rQ $rR $rS $rT</span><span class="sym">]</span>
<span class="sym">}</span>

<span class="kwa">proc</span> produce <span class="sym">{</span>QRST j<span class="sym">} {</span>
    <span class="kwa">global</span> big pidigit
    <span class="kwa">set</span> D <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>fromstr <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{-</span><span class="num">10</span><span class="sym">*</span><span class="kwb">$j</span><span class="sym">}]]</span>
    <span class="kwa">set</span> INV <span class="sym">[</span><span class="kwa">list</span> <span class="kwb">$big</span><span class="sym">(</span><span class="num">10</span><span class="sym">)</span> <span class="kwb">$D $big</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwb">$big</span><span class="sym">(</span><span class="num">1</span><span class="sym">)]</span>
    <span class="kwa">return</span> <span class="sym">[</span>compose <span class="kwb">$INV $QRST</span><span class="sym">]</span>
<span class="sym">}</span>

<span class="kwa">proc</span> extract <span class="sym">{</span>QRST j<span class="sym">} {</span>
    <span class="kwa">foreach</span> <span class="sym">{</span>Q R S T<span class="sym">}</span> <span class="kwb">$QRST</span> <span class="kwa">break</span>
    <span class="slc"># result = (Q*J + R) / (S*J + T)</span>
    <span class="kwa">set</span> J <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>fromstr <span class="kwb">$j</span><span class="sym">]</span>
    <span class="kwa">set</span> N <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>add <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>mul <span class="kwb">$Q $J</span><span class="sym">]</span> <span class="kwb">$R</span><span class="sym">]</span>
    <span class="kwa">set</span> D <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>add <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>mul <span class="kwb">$S $J</span><span class="sym">]</span> <span class="kwb">$T</span><span class="sym">]</span>
    <span class="kwa">set</span> result <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>tostr <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>div <span class="kwb">$N $D</span><span class="sym">]]</span>
    <span class="kwa">return</span> <span class="kwb">$result</span>
<span class="sym">}</span>

<span class="kwa">proc</span> nextX <span class="sym">{} {</span>
    <span class="kwa">global</span> big pidigit
    <span class="kwa">set</span> k <span class="sym">[</span><span class="kwa">incr</span> pidigit<span class="sym">(</span>k<span class="sym">)]</span>
    <span class="kwa">set</span> rQ <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>fromstr <span class="kwb">$k</span><span class="sym">]</span>
    <span class="kwa">set</span> rR <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>fromstr <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="num">4</span><span class="sym">*</span><span class="kwb">$k</span><span class="sym">+</span><span class="num">2</span><span class="sym">}]]</span>
    <span class="kwa">set</span> rS <span class="kwb">$big</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
    <span class="kwa">set</span> rT <span class="sym">[::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>fromstr <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="num">2</span><span class="sym">*</span><span class="kwb">$k</span><span class="sym">+</span><span class="num">1</span><span class="sym">}]]</span>
    <span class="kwa">return</span> <span class="sym">[</span><span class="kwa">list</span> <span class="kwb">$rQ $rR $rS $rT</span><span class="sym">]</span>
<span class="sym">}</span>

<span class="kwa">proc</span> nextPidigit <span class="sym">{} {</span>
    <span class="kwa">global</span> pidigit
    <span class="kwa">set</span> digit <span class="sym">[</span>extract <span class="kwb">$pidigit</span><span class="sym">(</span>z<span class="sym">)</span> <span class="num">3</span><span class="sym">]</span>
    <span class="kwa">while</span> <span class="sym">{</span><span class="kwb">$digit</span> <span class="sym">!= [</span>extract <span class="kwb">$pidigit</span><span class="sym">(</span>z<span class="sym">)</span> <span class="num">4</span><span class="sym">]} {</span>
        <span class="kwa">set</span> pidigit<span class="sym">(</span>z<span class="sym">) [</span>compose <span class="kwb">$pidigit</span><span class="sym">(</span>z<span class="sym">) [</span>nextX<span class="sym">]]</span>
        <span class="kwa">set</span> digit <span class="sym">[</span>extract <span class="kwb">$pidigit</span><span class="sym">(</span>z<span class="sym">)</span> <span class="num">3</span><span class="sym">]</span>
    <span class="sym">}</span>
    <span class="kwa">set</span> pidigit<span class="sym">(</span>z<span class="sym">) [</span>produce <span class="kwb">$pidigit</span><span class="sym">(</span>z<span class="sym">)</span> <span class="kwb">$digit</span><span class="sym">]</span>
    <span class="kwa">return</span> <span class="kwb">$digit</span>
<span class="sym">}</span>

<span class="kwa">proc</span> newPidigit <span class="sym">{} {</span>
    <span class="kwa">global</span> big pidigit

    <span class="kwa">set</span> big<span class="sym">(</span><span class="num">0</span><span class="sym">)  [::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>fromstr  <span class="num">0</span><span class="sym">]</span>
    <span class="kwa">set</span> big<span class="sym">(</span><span class="num">1</span><span class="sym">)  [::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>fromstr  <span class="num">1</span><span class="sym">]</span>
    <span class="kwa">set</span> big<span class="sym">(</span><span class="num">10</span><span class="sym">) [::</span>math<span class="sym">::</span>bignum<span class="sym">::</span>fromstr <span class="num">10</span><span class="sym">]</span>

    <span class="kwa">set</span> pidigit<span class="sym">(</span>z<span class="sym">) [</span><span class="kwa">list</span> <span class="kwb">$big</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwb">$big</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwb">$big</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwb">$big</span><span class="sym">(</span><span class="num">1</span><span class="sym">)]</span>
    <span class="kwa">set</span> pidigit<span class="sym">(</span>k<span class="sym">)</span> <span class="num">0</span>

    <span class="kwa">return</span>
<span class="sym">}</span>

<span class="kwa">proc</span> generatePidigits <span class="sym">{</span>n<span class="sym">} {</span>
    <span class="kwa">set</span> pi_digits <span class="sym">[</span>newPidigit<span class="sym">]</span>
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span><span class="kwa">append</span> pi_digits <span class="sym">[</span>nextPidigit<span class="sym">]}</span>
    <span class="kwa">return</span> <span class="kwb">$pi_digits</span>
<span class="sym">}</span>

<span class="kwa">proc</span> main <span class="sym">{</span>n<span class="sym">} {</span>
    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$n</span> eq <span class="str">&quot;&quot;</span> <span class="sym">||</span> <span class="kwb">$n</span> <span class="sym">&lt;</span> <span class="num">27</span><span class="sym">} {</span><span class="kwa">set</span> n <span class="num">27</span><span class="sym">}</span>
    <span class="kwa">set</span> pi_digits <span class="sym">[</span>generatePidigits <span class="kwb">$n</span><span class="sym">]</span>

    <span class="kwa">set</span> width <span class="num">10</span>
    <span class="kwa">set</span> max <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$n</span><span class="sym">-</span><span class="kwb">$width</span><span class="sym">}]</span>
    <span class="kwa">set</span> len <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$width</span><span class="sym">-</span><span class="num">1</span><span class="sym">}]</span>
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$max</span><span class="sym">} {} {</span>
        <span class="kwa">puts</span> <span class="str">&quot;[string range $pi_digits $i [incr i $len]]</span><span class="esc">\t</span><span class="str">:[incr i]&quot;</span>
    <span class="sym">}</span>
    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">} {</span>
        <span class="kwa">puts</span> <span class="sym">[</span><span class="kwa">format</span> <span class="str">&quot;%-${width}s</span><span class="esc">\t</span><span class="str">:%s&quot;</span> <span class="sym">[</span><span class="kwa">string</span> range <span class="kwb">$pi_digits $i $n</span><span class="sym">]</span> <span class="kwb">$n</span><span class="sym">]</span>
    <span class="sym">}</span>
<span class="sym">}</span>
main <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]</span>
