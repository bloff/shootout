REBOL <span class="sym">[</span>
	Title<span class="sym">:</span> <span class="str">&quot;sieve of eratosthenes&quot;</span>
	File<span class="sym">: %</span>sieve<span class="sym">.</span>r
	Version<span class="sym">:</span> <span class="num">0.2</span>
	Author<span class="sym">:</span> <span class="str">&quot;Robert Brandner&quot;</span>
	Date<span class="sym">:</span> <span class="num">26</span><span class="sym">-</span>January<span class="sym">-</span><span class="num">2006</span>
<span class="sym">]</span>

n<span class="sym">:</span> either n<span class="sym">:</span> system<span class="sym">/</span>script<span class="sym">/</span>args <span class="sym">[</span>to integer<span class="sym">!</span> n<span class="sym">] [</span><span class="num">2</span><span class="sym">]</span>

sieve<span class="sym">:</span> func <span class="sym">[</span>m<span class="sym">] [</span>
	prim<span class="sym">:</span> make block<span class="sym">!</span> m
	insert<span class="sym">/</span>dup prim <span class="kwa">true</span> m
	head prim
	cnt<span class="sym">:</span> <span class="num">0</span>
	<span class="kwa">for</span> i <span class="num">2</span> m <span class="num">1</span> <span class="sym">[</span>
		<span class="kwa">if</span> <span class="sym">(</span>pick prim i<span class="sym">) [</span>
			cnt<span class="sym">:</span> cnt <span class="sym">+</span> <span class="num">1</span>
			<span class="kwa">for</span> <span class="kwd">k</span> <span class="sym">(</span>i <span class="sym">+</span> i<span class="sym">)</span> m i <span class="sym">[</span>
				poke prim k <span class="kwa">false</span>
			<span class="sym">]</span>
		<span class="sym">]</span>
	<span class="sym">]</span>
	<span class="kwa">return</span> cnt
<span class="sym">]</span>

<span class="sym">;</span> couldn<span class="str">'t find something like printf in rebol ...</span>
<span class="str">pretty: func [n] [</span>
<span class="str">	str: make string! 8</span>
<span class="str">	insert/dup str &quot; &quot; (8 - (length? to-string n))</span>
<span class="str">	append str n</span>
<span class="str">]</span>
<span class="str"></span>
<span class="str">m: to-integer (2 ** n) * 10000</span>
<span class="str">print [&quot;Primes up to&quot; pretty m pretty sieve m]</span>
<span class="str">m: to-integer (2 ** (n - 1)) * 10000</span>
<span class="str">print [&quot;Primes up to&quot; pretty m pretty sieve m]</span>
<span class="str">m: to-integer (2 ** (n - 2)) * 10000</span>
<span class="str">print [&quot;Primes up to&quot; pretty m pretty sieve m]</span>
