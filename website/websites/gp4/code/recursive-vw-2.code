<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   modified by Eliot Miranda *&quot;</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>Tests
   superclass<span class="sym">: #</span>{Core<span class="sym">.</span>Object}
   indexedType<span class="sym">: #</span>none
   private<span class="sym">:</span> <span class="kwa">false</span>
   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   imports<span class="sym">:</span> <span class="str">''</span>
   category<span class="sym">:</span> <span class="str">'ComputerLanguageShootout'</span> <span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>

recursive2
   <span class="kwa">self</span> recursive<span class="sym">:</span> CEnvironment argv first asNumber to<span class="sym">:</span> Stdout<span class="sym">.</span>
   <span class="sym">^</span><span class="str">''</span> <span class="sym">! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarks'</span><span class="sym">!</span>

recursive<span class="sym">:</span> nArg to<span class="sym">:</span> output
   <span class="sym">|</span> n <span class="sym">|</span>
   n <span class="sym">:=</span> nArg<span class="sym">.</span>
   output
      nextPutAll<span class="sym">:</span> <span class="str">'Ack(3,'</span><span class="sym">;</span> print<span class="sym">:</span> n<span class="sym">;</span> nextPutAll<span class="sym">:</span> <span class="str">'): '</span><span class="sym">;</span>
      print<span class="sym">: (</span><span class="num">3</span> ack<span class="sym">:</span> n<span class="sym">);</span> cr<span class="sym">;</span>
      nextPutAll<span class="sym">:</span> <span class="str">'Fib('</span> <span class="sym">, (</span><span class="num">27.0</span>d <span class="sym">+</span> n asStringWith<span class="sym">:</span> <span class="num">1</span><span class="sym">) ,</span> <span class="str">'): '</span><span class="sym">,</span>
         <span class="sym">((</span><span class="num">27.0</span>d <span class="sym">+</span> n<span class="sym">)</span> fib asStringWith<span class="sym">:</span> <span class="num">1</span><span class="sym">);</span> cr<span class="sym">.</span>
   n <span class="sym">:=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">.</span>
   output
      nextPutAll<span class="sym">:</span> <span class="str">'Tak('</span><span class="sym">;</span> print<span class="sym">:</span> <span class="num">3</span> <span class="sym">*</span> n<span class="sym">;</span> nextPut<span class="sym">: $,;</span> print<span class="sym">:</span> <span class="num">2</span> <span class="sym">*</span> n<span class="sym">;</span>
      nextPut<span class="sym">: $,;</span> print<span class="sym">:</span> n<span class="sym">;</span> nextPutAll<span class="sym">:</span> <span class="str">'): '</span><span class="sym">;</span>
      print<span class="sym">: (</span><span class="num">3</span> <span class="sym">*</span> n tak<span class="sym">:</span> <span class="num">2</span> <span class="sym">*</span> n z<span class="sym">:</span> n<span class="sym">);</span> cr<span class="sym">;</span>
      nextPutAll<span class="sym">:</span> <span class="str">'Fib(3): '</span><span class="sym">;</span> print<span class="sym">:</span> <span class="num">3</span> fib<span class="sym">;</span> cr<span class="sym">;</span>
      nextPutAll<span class="sym">:</span> <span class="str">'Tak(3.0,2.0,1.0): '</span><span class="sym">,</span>
         <span class="sym">((</span><span class="num">3.0</span>d tak<span class="sym">:</span> <span class="num">2.0</span>d z<span class="sym">:</span> <span class="num">1.0</span>d<span class="sym">)</span> asStringWith<span class="sym">:</span> <span class="num">1</span><span class="sym">);</span> cr <span class="sym">! !</span>

<span class="sym">!</span>Core<span class="sym">.</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

ack<span class="sym">:</span> aSmallInteger
   <span class="sym">^</span><span class="kwa">self</span> <span class="sym">==</span> <span class="num">0</span>
      ifTrue<span class="sym">: [</span>aSmallInteger <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>
      ifFalse<span class="sym">: [</span>
         aSmallInteger <span class="sym">==</span> <span class="num">0</span>
            ifTrue<span class="sym">: [</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">1</span> ack<span class="sym">:</span>  <span class="num">1</span><span class="sym">]</span>
            ifFalse<span class="sym">: [</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">1</span> ack<span class="sym">: (</span><span class="kwa">self</span> ack<span class="sym">:</span> aSmallInteger <span class="sym">-</span> <span class="num">1</span><span class="sym">)] ] !</span>

fib
   <span class="sym">^</span><span class="kwa">self</span> <span class="sym">&lt;</span> <span class="num">2</span> ifTrue<span class="sym">: [</span><span class="num">1</span><span class="sym">]</span> ifFalse<span class="sym">: [(</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">2</span><span class="sym">)</span> fib <span class="sym">+ (</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> fib<span class="sym">] !</span>

tak<span class="sym">:</span> y z<span class="sym">:</span> z
   <span class="sym">^</span>y <span class="sym">&lt;</span> <span class="kwa">self</span>
      ifTrue<span class="sym">: [((</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> y z<span class="sym">:</span> z<span class="sym">)</span> tak<span class="sym">:</span>
         <span class="sym">((</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> z z<span class="sym">:</span> <span class="kwa">self</span><span class="sym">)</span> z<span class="sym">: ((</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> tak<span class="sym">:</span> <span class="kwa">self</span> z<span class="sym">:</span> y<span class="sym">)]</span>
      ifFalse<span class="sym">: [</span>z<span class="sym">] ! !</span>


<span class="sym">!</span>Core<span class="sym">.</span>Double methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

fib
   <span class="sym">^</span><span class="kwa">self</span> <span class="sym">&lt;</span> <span class="num">2.0</span>d ifTrue<span class="sym">: [</span><span class="num">1.0</span>d<span class="sym">]</span> ifFalse<span class="sym">: [(</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">2.0</span>d<span class="sym">)</span> fib <span class="sym">+ (</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">1.0</span>d<span class="sym">)</span> fib<span class="sym">] !</span>

tak<span class="sym">:</span> y z<span class="sym">:</span> z
   <span class="sym">^</span>y <span class="sym">&lt;</span> <span class="kwa">self</span>
      ifTrue<span class="sym">: [((</span><span class="kwa">self</span> <span class="sym">-</span> <span class="num">1.0</span>d<span class="sym">)</span> tak<span class="sym">:</span> y z<span class="sym">:</span> z<span class="sym">)</span> tak<span class="sym">:</span>
         <span class="sym">((</span>y <span class="sym">-</span> <span class="num">1.0</span>d<span class="sym">)</span> tak<span class="sym">:</span> z z<span class="sym">:</span> <span class="kwa">self</span><span class="sym">)</span> z<span class="sym">: ((</span>z <span class="sym">-</span> <span class="num">1.0</span>d<span class="sym">)</span> tak<span class="sym">:</span> <span class="kwa">self</span> z<span class="sym">:</span> y<span class="sym">)]</span>
      ifFalse<span class="sym">: [</span>z<span class="sym">] ! !</span>


<span class="sym">!</span>Core<span class="sym">.</span>LimitedPrecisionReal methodsFor<span class="sym">:</span> <span class="str">'converting'</span><span class="sym">!</span>

asStringWith<span class="sym">:</span> anInteger
   <span class="sym">^(</span><span class="kwa">self</span> asFixedPoint<span class="sym">:</span> anInteger<span class="sym">)</span> printString copyWithout<span class="sym">: $</span>s <span class="sym">! !</span>




