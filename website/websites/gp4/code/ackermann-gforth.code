<span class="slc">\ $Id: ackermann-gforth.code,v 1.8 2006-02-14 19:12:38 igouy-guest Exp $</span>
<span class="slc">\ ackermann's function</span>
<span class="slc">\ http://www.bagley.org/~doug/shootout/</span>
<span class="slc">\ from Andrew Pahi</span>
<span class="slc">\ enhanced by mmihai&#64;delajii.net</span>

<span class="slc">\ if x = 0 		A(x,y) = y + 1</span>
<span class="slc">\ if y = 0		A(x,y) = A(x-1,1)</span>
<span class="slc">\ A(x,y) = A(x-1, A(x, y-1))</span>

<span class="slc">\ read NUM from last command line argument</span>
<span class="num">0</span><span class="sym">.</span> argc <span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

<span class="sym">: -</span>ack <span class="com">( y x -- n )</span>
   <span class="sym">?</span>dup if
     swap <span class="sym">?</span>dup
      if
         <span class="num">1</span><span class="sym">-</span> over recurse swap <span class="num">1</span><span class="sym">-</span> recurse
      else
         <span class="num">1</span><span class="sym">-</span> <span class="num">1</span> swap recurse
      then
   else
      <span class="num">1</span><span class="sym">+</span>
   then <span class="sym">;</span>

<span class="slc">\ run ack(3, NUM) and print result from stack</span>
<span class="sym">.</span><span class="str">&quot; Ack(3,&quot;</span> NUM <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">.</span><span class="str">&quot; ): &quot;</span> NUM <span class="num">3</span> <span class="sym">-</span>ack <span class="num">1</span> u<span class="sym">.</span>r cr

bye <span class="slc">\ th-th-that's all folks!</span>
