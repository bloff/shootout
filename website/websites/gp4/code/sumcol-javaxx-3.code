<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Amir K aka Razii</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>

<span class="hl kwa">public final class</span> sumcol <span class="hl sym">{</span>

   <span class="hl kwa">static final</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> buf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span> <span class="hl sym">[</span><span class="hl num">32768</span><span class="hl sym">];</span>
   <span class="hl kwa">static final</span> <span class="hl kwc">DataInputStream</span> in <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">DataInputStream</span> <span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">);</span>
   <span class="hl kwa">static</span> <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">static</span> <span class="hl kwb">int</span> token <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">static</span> <span class="hl kwb">int</span> index <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
      <span class="hl kwb">int</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>count <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">){</span>
      	  <span class="hl kwd">readToken</span><span class="hl sym">();</span>
          sum <span class="hl sym">+=</span> token<span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>sum<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">readToken</span><span class="hl sym">()</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span>
   <span class="hl sym">{</span>
   	    <span class="hl kwb">int</span> c <span class="hl sym">=</span> <span class="hl kwd">read</span><span class="hl sym">();</span>
	    <span class="hl kwb">boolean</span> neg <span class="hl sym">=</span> false<span class="hl sym">;</span>
	    <span class="hl kwa">if</span> <span class="hl sym">(</span>c <span class="hl sym">==</span> <span class="hl str">'-'</span><span class="hl sym">) {</span>
	    	neg <span class="hl sym">=</span> true<span class="hl sym">;</span>
	    	c <span class="hl sym">=</span> <span class="hl kwd">read</span><span class="hl sym">();</span>
	    <span class="hl sym">}</span>
	    token <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
	    <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
	      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl str">'0'</span> <span class="hl sym">&lt;=</span> c <span class="hl sym">&amp;&amp;</span> c <span class="hl sym">&lt;=</span> <span class="hl str">'9'</span><span class="hl sym">) {</span>
		  token <span class="hl sym">=</span> token <span class="hl sym">*</span> <span class="hl num">10</span> <span class="hl sym">+ (</span>c <span class="hl sym">-</span> <span class="hl str">'0'</span><span class="hl sym">);</span>
		  <span class="hl sym">}</span> <span class="hl kwa">else</span>
		      <span class="hl kwa">break</span><span class="hl sym">;</span>
		  c <span class="hl sym">=</span> <span class="hl kwd">read</span><span class="hl sym">();</span>
	    <span class="hl sym">}</span>
	    token <span class="hl sym">=</span> neg ? <span class="hl sym">-</span>token <span class="hl sym">:</span> token<span class="hl sym">;</span>
	    <span class="hl kwa">return</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span> <span class="hl kwd">read</span><span class="hl sym">()</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span>
   <span class="hl sym">{</span>
   	   <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
   	   <span class="hl sym">{</span>
   	   	count <span class="hl sym">=</span> in<span class="hl sym">.</span><span class="hl kwd">read</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
   	   	<span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">== -</span><span class="hl num">1</span><span class="hl sym">)</span>
   	   	   <span class="hl kwa">return</span> <span class="hl str">'</span><span class="hl esc">\0</span><span class="hl str">'</span><span class="hl sym">;</span>
   	   	index <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   	   <span class="hl sym">}</span>
   	  count<span class="hl sym">--;</span>
      <span class="hl kwa">return</span> buf <span class="hl sym">[</span>index<span class="hl sym">++];</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
