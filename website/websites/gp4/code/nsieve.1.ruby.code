<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by Glenn Parker, March 2005</span>
<span class="slc"># modified by Evan Phoenix, Sept 2006</span>

<span class="kwa">def</span> <span class="kwd">sieve</span><span class="sym">(</span>m)
  flags = Flags<span class="sym">.</span>dup<span class="sym">[</span><span class="num">0</span><span class="sym">,</span>m<span class="sym">]</span>
  count = <span class="num">0</span>
  pmax = m <span class="sym">-</span> <span class="num">1</span>
  p = <span class="num">2</span>
  <span class="kwa">while</span> p <span class="sym">&lt;</span>= pmax
    <span class="kwa">unless</span> flags<span class="sym">[</span>p<span class="sym">].</span>zero?
      count <span class="sym">+</span>= <span class="num">1</span>
      mult = p
      <span class="kwa">while</span> mult <span class="sym">&lt;</span>= pmax
        flags<span class="sym">[</span>mult<span class="sym">]</span> = <span class="num">0</span>
        mult <span class="sym">+</span>= p
      <span class="kwa">end</span>
    <span class="kwa">end</span>
    p <span class="sym">+</span>= <span class="num">1</span>
  <span class="kwa">end</span>
  count
<span class="kwa">end</span>

n = <span class="sym">(</span><span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">2</span>)<span class="sym">.</span>to_i

Flags = <span class="str">&quot;</span><span class="esc">\x</span><span class="str">1&quot;</span> <span class="sym">* (</span> <span class="num">2</span> <span class="sym">**</span> n <span class="sym">*</span> <span class="num">10_000</span>)

n<span class="sym">.</span><span class="kwd">downto</span><span class="sym">(</span>n-2) <span class="kwa">do</span> <span class="sym">|</span>exponent<span class="sym">|</span>
  <span class="kwa">break if</span> exponent <span class="sym">&lt;</span> <span class="num">0</span>
  m = <span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> exponent) <span class="sym">*</span> <span class="num">10_000</span>
  <span class="slc"># m = (2 ** exponent) * 10_000</span>
  count = <span class="kwd">sieve</span><span class="sym">(</span>m)
  printf <span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> count
<span class="kwa">end</span>
