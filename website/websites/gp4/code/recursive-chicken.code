<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Code based on / inspired by existing, relevant Shootout submissions</span>
<span class="slc">;;</span>
<span class="slc">;; Utilises extension, 'format'. If not available can be installed by</span>
<span class="slc">;; issuing the following shell command [as 'root']:</span>
<span class="slc">;;</span>
<span class="slc">;; # chicken-setup format</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>require<span class="sym">-</span>extension format<span class="sym">)</span>

<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>ack m n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span>zero? m<span class="sym">) (+</span> n <span class="num">1</span><span class="sym">))</span>
        <span class="sym">((</span>zero? n<span class="sym">) (</span>ack <span class="sym">(-</span> m <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
        <span class="sym">(</span>else <span class="sym">(</span>ack <span class="sym">(-</span> m <span class="num">1</span><span class="sym">) (</span>ack m <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>fib n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> n <span class="num">2</span><span class="sym">)</span> <span class="num">1</span><span class="sym">)</span>
	<span class="sym">(</span>else <span class="sym">(+ (</span>fib <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)) (</span>fib <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>tak x y z<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">not</span> <span class="sym">(&lt;</span> y x<span class="sym">))</span> z<span class="sym">)</span>
        <span class="sym">(</span>else <span class="sym">(</span>tak <span class="sym">(</span>tak <span class="sym">(-</span> x <span class="num">1</span><span class="sym">)</span> y z<span class="sym">) (</span>tak <span class="sym">(-</span> y <span class="num">1</span><span class="sym">)</span> z x<span class="sym">) (</span>tak <span class="sym">(-</span> z <span class="num">1</span><span class="sym">)</span> x y<span class="sym">)))))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? args<span class="sym">)</span>
               <span class="num">1</span>
               <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">)))))</span>

    <span class="sym">(</span>format #t <span class="str">&quot;Ack(3,~A): ~A~%&quot;</span> n <span class="sym">(</span>ack <span class="num">3</span> n<span class="sym">))</span>
    <span class="sym">(</span>format #t <span class="str">&quot;Fib(~1F): ~,1F~%&quot;</span> <span class="sym">(+</span> <span class="num">27</span> n<span class="sym">) (</span>fib <span class="sym">(+</span> <span class="num">27</span> n<span class="sym">)))</span>

    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> n <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))</span>
    <span class="sym">(</span>format #t <span class="str">&quot;Tak(~A,~A,~A): ~A~%&quot;</span> <span class="sym">(*</span> n <span class="num">3</span><span class="sym">) (*</span> n <span class="num">2</span><span class="sym">)</span> n <span class="sym">(</span>tak <span class="sym">(*</span> n <span class="num">3</span><span class="sym">) (*</span> n <span class="num">2</span><span class="sym">)</span> n<span class="sym">))</span>

    <span class="sym">(</span>format #t <span class="str">&quot;Fib(3): ~A~%&quot;</span> <span class="sym">(</span>fib <span class="num">3</span><span class="sym">))</span>
    <span class="sym">(</span>format #t <span class="str">&quot;Tak(3.0,2.0,1.0): ~,1F~%&quot;</span> <span class="sym">(</span>tak <span class="num">3 2 1</span><span class="sym">))))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>

