<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc"># Contributed by Sokolov Yura</span>
<span class="hl slc"># Modified by Ryan Williams</span>
<span class="hl slc"># Modified by Isaac Gouy</span>

<span class="hl kwa">def</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">)</span>
   maxFlips<span class="hl sym">,</span> m<span class="hl sym">,</span> r<span class="hl sym">,</span> check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> n-1<span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl num">0</span>
   count <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">..</span>n<span class="hl sym">).</span>to_a
   perm <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">..</span>n<span class="hl sym">).</span>to_a

   <span class="hl kwa">while true</span>
      <span class="hl kwa">if</span> check <span class="hl sym">&lt;</span> <span class="hl num">30</span>
         puts <span class="hl str">&quot;#{perm.join}&quot;</span>
         check <span class="hl sym">+=</span> <span class="hl num">1</span>
      <span class="hl kwa">end</span>

      <span class="hl kwa">while</span> r <span class="hl sym">!=</span> <span class="hl num">1</span>
         count<span class="hl sym">[</span>r-1<span class="hl sym">] =</span> r
         r <span class="hl sym">-=</span> <span class="hl num">1</span>
      <span class="hl kwa">end</span>

      <span class="hl kwa">if</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl num">1</span> <span class="hl kwa">and</span> perm<span class="hl sym">[</span>m<span class="hl sym">] !=</span> n
         perml <span class="hl sym">=</span> perm<span class="hl sym">.</span>clone <span class="hl slc">#.dup</span>
         flips <span class="hl sym">=</span> <span class="hl num">0</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">=</span> perml<span class="hl sym">.</span>first <span class="hl sym">) !=</span> <span class="hl num">1</span>
            perml <span class="hl sym">=</span> perml<span class="hl sym">.</span>slice<span class="hl sym">!(</span><span class="hl num">0</span><span class="hl sym">,</span> k<span class="hl sym">).</span>reverse <span class="hl sym">+</span> perml
            flips <span class="hl sym">+=</span> <span class="hl num">1</span>
         <span class="hl kwa">end</span>
         maxFlips <span class="hl sym">=</span> flips <span class="hl kwa">if</span> flips <span class="hl sym">&gt;</span> maxFlips
      <span class="hl kwa">end</span>
      <span class="hl kwa">while true</span>
         <span class="hl kwa">return</span> maxFlips <span class="hl kwa">if</span> r <span class="hl sym">==</span> n
         perm<span class="hl sym">.</span>insert r<span class="hl sym">,</span>perm<span class="hl sym">.</span>shift
         <span class="hl kwa">break if</span> <span class="hl sym">(</span>count<span class="hl sym">[</span>r<span class="hl sym">] -=</span> <span class="hl num">1</span><span class="hl sym">) &gt;</span> <span class="hl num">0</span>
         r <span class="hl sym">+=</span> <span class="hl num">1</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

N <span class="hl sym">= (</span><span class="hl kwc">ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ||</span> <span class="hl num">1</span><span class="hl sym">).</span>to_i
puts <span class="hl str">&quot;Pfannkuchen(#{N}) = #{fannkuch(N)}&quot;</span>

