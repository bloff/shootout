<span class="kwa">import</span> System
<span class="com">{-</span>
<span class="com"> Simple functional implementation.</span>
<span class="com"> Just the easiest possible implementation, no optimization at all.</span>
<span class="com"> By Sebastian Sylvan</span>
<span class="com">-}</span>

<span class="slc">-- generate permutations</span>
selections <span class="sym">[]     = []</span>
selections <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) = (</span>x<span class="sym">,</span>xs<span class="sym">) : [(</span>y<span class="sym">,</span>x<span class="sym">:</span>ys<span class="sym">) | (</span>y<span class="sym">,</span>ys<span class="sym">) &lt;-</span> selections xs<span class="sym">]</span>

perms <span class="sym">[] = [[]]</span>
perms xs <span class="sym">= [</span>y <span class="sym">:</span> zs <span class="sym">| (</span>y<span class="sym">,</span>ys<span class="sym">) &lt;-</span> selections xs<span class="sym">,</span> zs <span class="sym">&lt;-</span> perms ys<span class="sym">]</span>

flop <span class="sym">(</span><span class="num">1</span><span class="sym">:</span>_<span class="sym">) =</span> <span class="num">0</span>
flop xs&#64;<span class="sym">(</span>x<span class="sym">:</span>_<span class="sym">) =</span> <span class="num">1</span> <span class="sym">+</span> flop <span class="sym">(</span>rev x xs<span class="sym">)</span>

rev x xs <span class="sym">=</span> reverse a <span class="sym">++</span> b
    <span class="kwa">where</span> <span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) =</span> splitAt x xs

fannuch xs <span class="sym">=</span> maximum $ map flop xs

main <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">[</span>n<span class="sym">] &lt;-</span> getArgs
          <span class="kwa">let</span> n<span class="str">' = read n</span>
<span class="str">              xs = perms [1..n'</span><span class="sym">]</span>
          putStr $ unlines $ map <span class="sym">(</span>concatMap show<span class="sym">)</span> $ take <span class="num">30</span> xs
          putStr $ <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">++</span> n <span class="sym">++</span> <span class="str">&quot;) = &quot;</span>
          print <span class="sym">(</span>fannuch xs<span class="sym">)</span>
