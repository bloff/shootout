\ The Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\ must use flags <span class="str">&quot;-d 8M -r 8M&quot;</span> when running gforth <span class="kwa">for</span> NUM<span class="sym">=</span><span class="num">10</span>

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

<span class="sym">:</span> <span class="kwd">ack</span> <span class="sym">(</span> y x <span class="sym">--</span> n <span class="sym">)</span>
  ?dup <span class="kwa">if</span> swap ?dup <span class="kwa">if</span> <span class="num">1</span><span class="sym">-</span> over recurse swap <span class="num">1</span><span class="sym">-</span> recurse
                  <span class="kwa">else</span>               <span class="num">1</span> swap <span class="num">1</span><span class="sym">-</span> recurse then
     <span class="kwa">else</span> <span class="num">1</span><span class="sym">+</span> then <span class="sym">;</span>

<span class="sym">:</span> <span class="kwd">ffib</span> <span class="sym">(</span> f <span class="sym">--</span> ffib <span class="sym">)</span>
  fdup <span class="num">2</span>e f<span class="sym">&lt;</span> <span class="kwa">if</span> fdrop <span class="num">1</span>e
           <span class="kwa">else</span> <span class="num">1</span>e f<span class="sym">-</span> fdup recurse fswap <span class="num">1</span>e f<span class="sym">-</span> recurse f<span class="sym">+</span> then <span class="sym">;</span>

<span class="sym">:</span> <span class="kwd">fib</span> <span class="sym">(</span> n <span class="sym">--</span> fib <span class="sym">)</span>
  dup <span class="num">2</span> <span class="sym">&lt;</span> <span class="kwa">if</span> drop <span class="num">1</span>
        <span class="kwa">else</span> <span class="num">1</span><span class="sym">-</span> dup recurse swap <span class="num">1</span><span class="sym">-</span> recurse <span class="sym">+</span> then <span class="sym">;</span>

<span class="sym">:</span> tak <span class="sym">{</span> z y x <span class="sym">--</span> n <span class="sym">}</span>
  y x <span class="sym">&lt;</span> <span class="kwa">if</span>
    y x z <span class="num">1</span><span class="sym">-</span> recurse
    x z y <span class="num">1</span><span class="sym">-</span> recurse
    z y x <span class="num">1</span><span class="sym">-</span> recurse
    recurse
  <span class="kwa">else</span> z then <span class="sym">;</span>

<span class="sym">:</span> ftak <span class="sym">{</span> F<span class="sym">:</span> z F<span class="sym">:</span> y F<span class="sym">:</span> x <span class="sym">--</span> n <span class="sym">}</span>
  y x f<span class="sym">&lt;</span> <span class="kwa">if</span>
    y x z <span class="num">1</span>e f<span class="sym">-</span> recurse
    x z y <span class="num">1</span>e f<span class="sym">-</span> recurse
    z y x <span class="num">1</span>e f<span class="sym">-</span> recurse
    recurse
  <span class="kwa">else</span> z then <span class="sym">;</span>

<span class="sym">:</span> ff<span class="sym">.</span>   f<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>s <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">.</span><span class="str">&quot; .0&quot;</span> <span class="sym">;</span>

NUM <span class="num">1</span><span class="sym">+   .</span><span class="str">&quot; Ack(3,&quot;</span> dup <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">.</span><span class="str">&quot; ): &quot;</span> <span class="num">3</span> ack <span class="num">1</span> u<span class="sym">.</span>r cr
NUM <span class="num">29</span> <span class="sym">+ .</span><span class="str">&quot; Fib(&quot;</span> dup <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">.</span><span class="str">&quot; .0): &quot;</span> s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f ffib ff<span class="sym">.</span> cr
<span class="sym">.</span><span class="str">&quot; Tak(&quot;</span> NUM <span class="num">3</span> <span class="sym">*</span> <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">.</span><span class="str">&quot; ,&quot;</span> NUM <span class="num">2</span><span class="sym">*</span> <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">.</span><span class="str">&quot; ,&quot;</span> NUM <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">.</span><span class="str">&quot; ): &quot;</span>
                     NUM dup <span class="num">2</span><span class="sym">*</span> <span class="num">2</span>dup <span class="sym">+</span> tak <span class="num">1</span> u<span class="sym">.</span>r cr
<span class="sym">.</span><span class="str">&quot; Fib(3): &quot;</span> <span class="num">3</span> fib <span class="num">1</span> u<span class="sym">.</span>r cr
<span class="sym">.</span><span class="str">&quot; Tak(3.0,2.0,1.0): &quot;</span> <span class="num">1</span>e <span class="num">2</span>e <span class="num">3</span>e ftak ff<span class="sym">.</span> cr

bye
