<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by CTips (ctips&#64;bestweb.net)</span>
<span class="hl com"> * modified by</span>
<span class="hl com"> */</span>
<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;ctype.h&gt;</span>
<span class="hl dir">#include &lt;limits.h&gt;</span>

<span class="hl dir">#define MAXLINELEN	128</span>

<span class="hl com">/* the progam sums each digit position separately; the formula below gives</span>
<span class="hl com"> * a coservative estimate of the number of digits required</span>
<span class="hl com"> */</span>
<span class="hl dir">#define MAXDIGITS 	((int)(1+((sizeof(int)*CHAR_BIT)/3)))</span>

<span class="hl com">/* stdin is may be unbuffered by default in the operating system.</span>
<span class="hl com"> * Provide a buffer as shown below to make sure that it is buffered</span>
<span class="hl com"> */</span>
<span class="hl dir">#ifndef IOBUFSIZE</span>
<span class="hl dir">#define IOBUFSIZE	(16*1024)</span>
<span class="hl dir">#endif</span>

<span class="hl com">/* according to the benchmark requiremnents, we need to use &quot;line-oriented&quot;</span>
<span class="hl com"> * I/O functions. I'm going to assume that requires line-buffering as well,</span>
<span class="hl com"> * but we can override the behavior here</span>
<span class="hl com"> */</span>
<span class="hl dir">#define IOBUFMODE	_IOLBF</span>

<span class="hl com">/* gets or fgets */</span>
<span class="hl dir">#ifndef USE_GETS</span>
<span class="hl dir">#define USE_GETS	1</span>
<span class="hl dir">#endif</span>

<span class="hl dir">#if USE_GETS</span>
<span class="hl dir">#define IOGET(_line)	gets(_line)</span>
<span class="hl dir">#else</span>
<span class="hl dir">#define IOGET(_line)	fgets(_line, sizeof(_line), stdin)</span>
<span class="hl dir">#endif</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">void</span><span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">char</span>		line<span class="hl sym">[</span>MAXLINELEN<span class="hl sym">];</span>
  <span class="hl kwb">int</span>		digitsum<span class="hl sym">[</span>MAXDIGITS<span class="hl sym">];</span>
  <span class="hl kwb">char</span>		iobuf<span class="hl sym">[</span>IOBUFSIZE<span class="hl sym">];</span>
  <span class="hl kwb">int</span> 		sum<span class="hl sym">;</span>
  <span class="hl kwb">int</span>		i<span class="hl sym">;</span>

  <span class="hl kwd">setvbuf</span><span class="hl sym">(</span>stdin<span class="hl sym">,</span> iobuf<span class="hl sym">,</span> IOBUFMODE<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>iobuf<span class="hl sym">));</span>

  <span class="hl kwa">for</span><span class="hl sym">(</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> MAXDIGITS<span class="hl sym">;</span> i<span class="hl sym">++ ) {</span>
    digitsum<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">while</span><span class="hl sym">(</span> <span class="hl kwd">IOGET</span><span class="hl sym">(</span>line<span class="hl sym">) ) {</span>
    <span class="hl kwb">char</span> <span class="hl sym">*</span>	p <span class="hl sym">=</span> line<span class="hl sym">;</span>
    <span class="hl kwb">char</span>	digits<span class="hl sym">[</span><span class="hl num">15</span><span class="hl sym">];</span>
    <span class="hl kwb">int</span>		ndigits<span class="hl sym">;</span>
    <span class="hl kwb">int</span>		isneg<span class="hl sym">;</span>

    <span class="hl kwa">while</span><span class="hl sym">(</span> <span class="hl kwd">isspace</span><span class="hl sym">(*</span>p<span class="hl sym">) ) {</span>
      p<span class="hl sym">++;</span>
    <span class="hl sym">}</span>

    isneg <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span><span class="hl sym">( *</span>p <span class="hl sym">==</span> <span class="hl str">'-'</span> <span class="hl sym">) {</span>
      p<span class="hl sym">++;</span>
      isneg <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>

    ndigits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">while</span><span class="hl sym">(</span> <span class="hl kwd">isdigit</span><span class="hl sym">(*</span>p<span class="hl sym">) ) {</span>
      digits<span class="hl sym">[</span>ndigits<span class="hl sym">] = *</span>p<span class="hl sym">;</span>
      ndigits<span class="hl sym">++;</span>
      p<span class="hl sym">++;</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">if</span><span class="hl sym">(</span> isneg <span class="hl sym">) {</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> ndigits<span class="hl sym">;</span> i<span class="hl sym">++ ) {</span>
	digitsum<span class="hl sym">[</span>i<span class="hl sym">] -=</span> digits<span class="hl sym">[</span>ndigits<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">-</span>i<span class="hl sym">] -</span> <span class="hl str">'0'</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">else</span> <span class="hl sym">{</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> ndigits<span class="hl sym">;</span> i<span class="hl sym">++ ) {</span>
	digitsum<span class="hl sym">[</span>i<span class="hl sym">] +=</span> digits<span class="hl sym">[</span>ndigits<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">-</span>i<span class="hl sym">] -</span> <span class="hl str">'0'</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span><span class="hl sym">(</span> i <span class="hl sym">=</span> MAXDIGITS<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">-- ) {</span>
    sum <span class="hl sym">=</span> sum<span class="hl sym">*</span><span class="hl num">10</span> <span class="hl sym">+</span> digitsum<span class="hl sym">[</span>i<span class="hl sym">];</span>
  <span class="hl sym">}</span>
  <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>
  <span class="hl kwa">return</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl sym">}</span>
