<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>


<span class="kwa">import</span> scala<span class="sym">.</span>concurrent<span class="sym">.</span>_

<span class="kwa">object</span> message <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">))</span>
      <span class="kwa">val</span> nActors <span class="sym">=</span> <span class="num">500</span>
      <span class="kwa">val</span> finalSum <span class="sym">=</span> n <span class="sym">*</span> nActors

      <span class="kwa">case class</span> Message<span class="sym">(</span>value<span class="sym">:</span> Int<span class="sym">)</span>

      <span class="kwa">class</span> Incrementor<span class="sym">(</span>next<span class="sym">:</span> Actor<span class="sym">)</span> <span class="kwa">extends</span> Actor <span class="sym">{</span>
         <span class="kwa">var</span> sum <span class="sym">=</span> <span class="num">0</span>

         <span class="kwa">override def</span> run<span class="sym">() = {</span>
            <span class="kwa">while</span> <span class="sym">(</span>true<span class="sym">) {</span>
               receive <span class="sym">{</span>
                  <span class="kwa">case</span> Message<span class="sym">(</span>value<span class="sym">) =&gt;</span>
                     <span class="kwa">val</span> j <span class="sym">=</span> value <span class="sym">+</span> <span class="num">1</span>
                     <span class="kwa">if</span> <span class="sym">(</span>next <span class="sym">!=</span> null<span class="sym">){</span>
                        next<span class="sym">.</span>send<span class="sym">(</span> Message<span class="sym">(</span>j<span class="sym">) )</span>
                     <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                        sum <span class="sym">=</span> sum <span class="sym">+</span> j
                        <span class="kwa">if</span> <span class="sym">(</span>sum <span class="sym">&gt;=</span> finalSum<span class="sym">){</span>
                           Console<span class="sym">.</span>println<span class="sym">(</span>sum<span class="sym">);</span>
                           <span class="kwc">System</span><span class="sym">.</span>exit<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="slc">// exit without cleaning up</span>
                        <span class="sym">}</span>
                     <span class="sym">}</span>
               <span class="sym">}</span>
            <span class="sym">}</span>
         <span class="sym">}</span>

         <span class="kwa">def</span> istart<span class="sym">() = {</span> <span class="kwa">this</span><span class="sym">.</span>start<span class="sym">;</span> <span class="kwa">this</span> <span class="sym">}</span>
      <span class="sym">}</span>

      <span class="kwa">def</span> actorChain<span class="sym">(</span>i<span class="sym">:</span> Int<span class="sym">,</span> a<span class="sym">:</span> Actor<span class="sym">):</span> Actor <span class="sym">=</span>
         <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> actorChain<span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwa">new</span> Incrementor<span class="sym">(</span>a<span class="sym">).</span>istart <span class="sym">)</span> <span class="kwa">else</span> a

      <span class="kwa">val</span> firstActor <span class="sym">=</span> actorChain<span class="sym">(</span>nActors<span class="sym">,</span> null<span class="sym">)</span>
      <span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;</span> <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span> firstActor<span class="sym">.</span>send<span class="sym">(</span> Message<span class="sym">(</span><span class="num">0</span><span class="sym">) );</span> i <span class="sym">=</span> i<span class="sym">-</span><span class="num">1</span> <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>
