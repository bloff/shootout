<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>


<span class="hl kwa">import</span> scala<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>_

<span class="hl kwa">object</span> message <span class="hl sym">{</span>
   <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
      <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl kwa">val</span> nActors <span class="hl sym">=</span> <span class="hl num">500</span>
      <span class="hl kwa">val</span> finalSum <span class="hl sym">=</span> n <span class="hl sym">*</span> nActors

      <span class="hl kwa">case class</span> Message<span class="hl sym">(</span>value<span class="hl sym">:</span> Int<span class="hl sym">)</span>

      <span class="hl kwa">class</span> Incrementor<span class="hl sym">(</span>next<span class="hl sym">:</span> Pid<span class="hl sym">)</span> <span class="hl kwa">extends</span> Actor <span class="hl sym">{</span>
         <span class="hl kwa">var</span> sum <span class="hl sym">=</span> <span class="hl num">0</span>

         <span class="hl kwa">override def</span> run<span class="hl sym">() = {</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
               receive <span class="hl sym">{</span>
                  <span class="hl kwa">case</span> Message<span class="hl sym">(</span>value<span class="hl sym">) =&gt;</span>
                     <span class="hl kwa">val</span> j <span class="hl sym">=</span> value <span class="hl sym">+</span> <span class="hl num">1</span>
                     <span class="hl kwa">if</span> <span class="hl sym">(</span>null <span class="hl sym">!=</span> next<span class="hl sym">){</span>
                        next <span class="hl sym">!</span> Message<span class="hl sym">(</span>j<span class="hl sym">)</span>
                     <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
                        sum <span class="hl sym">=</span> sum <span class="hl sym">+</span> j
                        <span class="hl kwa">if</span> <span class="hl sym">(</span>sum <span class="hl sym">&gt;=</span> finalSum<span class="hl sym">){</span>
                           Console<span class="hl sym">.</span>println<span class="hl sym">(</span>sum<span class="hl sym">);</span>
                           <span class="hl kwc">System</span><span class="hl sym">.</span>exit<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl slc">// exit without cleaning up</span>
                        <span class="hl sym">}</span>
                     <span class="hl sym">}</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">def</span> pid<span class="hl sym">() = {</span> <span class="hl kwa">this</span><span class="hl sym">.</span>start<span class="hl sym">;</span> <span class="hl kwa">this</span><span class="hl sym">.</span>self <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">def</span> actorChain<span class="hl sym">(</span>i<span class="hl sym">:</span> Int<span class="hl sym">,</span> a<span class="hl sym">:</span> Pid<span class="hl sym">):</span> Pid <span class="hl sym">=</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> actorChain<span class="hl sym">(</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl kwa">new</span> Incrementor<span class="hl sym">(</span>a<span class="hl sym">).</span>pid <span class="hl sym">)</span> <span class="hl kwa">else</span> a

      <span class="hl kwa">val</span> firstActor <span class="hl sym">=</span> actorChain<span class="hl sym">(</span>nActors<span class="hl sym">,</span> null<span class="hl sym">)</span>
      <span class="hl kwa">var</span> i <span class="hl sym">=</span> n<span class="hl sym">;</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">){</span> firstActor <span class="hl sym">!</span> Message<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span> i <span class="hl sym">=</span> i<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
