<span class="hl slc">-- The Great Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Jeff Newbern</span>

<span class="hl slc">-- Note: This code has not been optimized *at all*.  It is written to be clear</span>
<span class="hl slc">-- and concise, using standard Haskell idioms.  Performance is decent with</span>
<span class="hl slc">-- ghc -O2, but if it can be improved without sacrificing the clarity of the</span>
<span class="hl slc">-- code, by all means go for it!</span>

<span class="hl kwa">import</span> Data.<span class="hl kwb">Char</span><span class="hl sym">(</span>toLower<span class="hl sym">)</span>

<span class="hl kwa">type</span> Base <span class="hl sym">=</span> <span class="hl kwb">Char</span>
<span class="hl kwa">type</span> Sequence <span class="hl sym">= [</span>Base<span class="hl sym">]</span>

complement <span class="hl sym">::</span> Base <span class="hl sym">-&gt;</span> Base
complement 'A' <span class="hl sym">=</span> 'T'
complement 'a' <span class="hl sym">=</span> 'T'
complement 'C' <span class="hl sym">=</span> 'G'
complement 'c' <span class="hl sym">=</span> 'G'
complement 'G' <span class="hl sym">=</span> 'C'
complement 'g' <span class="hl sym">=</span> 'C'
complement 'T' <span class="hl sym">=</span> 'A'
complement 't' <span class="hl sym">=</span> 'A'
complement 'U' <span class="hl sym">=</span> 'A'
complement 'u' <span class="hl sym">=</span> 'A'
complement 'M' <span class="hl sym">=</span> 'K'
complement 'm' <span class="hl sym">=</span> 'K'
complement 'R' <span class="hl sym">=</span> 'Y'
complement 'r' <span class="hl sym">=</span> 'Y'
complement 'Y' <span class="hl sym">=</span> 'R'
complement 'y' <span class="hl sym">=</span> 'R'
complement 'K' <span class="hl sym">=</span> 'M'
complement 'k' <span class="hl sym">=</span> 'M'
complement 'V' <span class="hl sym">=</span> 'B'
complement 'v' <span class="hl sym">=</span> 'B'
complement 'H' <span class="hl sym">=</span> 'D'
complement 'h' <span class="hl sym">=</span> 'D'
complement 'D' <span class="hl sym">=</span> 'H'
complement 'd' <span class="hl sym">=</span> 'H'
complement 'B' <span class="hl sym">=</span> 'V'
complement 'b' <span class="hl sym">=</span> 'V'
complement  x  <span class="hl sym">=</span> x

<span class="hl slc">-- write a sequence in Fasta format</span>
writeFasta <span class="hl sym">::</span> String <span class="hl sym">-&gt;</span> Sequence <span class="hl sym">-&gt;</span> IO <span class="hl sym">()</span>
writeFasta <span class="hl sym">[]</span>     _        <span class="hl sym">=</span> <span class="hl kwa">do</span> return <span class="hl sym">()</span>
writeFasta header sequence <span class="hl sym">=</span>
  <span class="hl kwa">do</span> putStrLn header
     writeWrapped <span class="hl num">60</span> sequence
  <span class="hl kwa">where</span> writeWrapped _   <span class="hl sym">[]  =</span> <span class="hl kwa">do</span> return <span class="hl sym">()</span>
        writeWrapped len str <span class="hl sym">=</span> <span class="hl kwa">do let</span> <span class="hl sym">(</span>s1<span class="hl sym">,</span>s2<span class="hl sym">) =</span> splitAt len str
                                  putStrLn s1
                                  writeWrapped len s2

<span class="hl slc">-- recurse over input stream, accumulating and writing processed sequences</span>
process <span class="hl sym">:: (</span>String<span class="hl sym">,[</span>Base<span class="hl sym">],</span>String<span class="hl sym">) -&gt;</span> IO<span class="hl sym">()</span>
process <span class="hl sym">(</span>header<span class="hl sym">,</span>bases<span class="hl sym">,[])         =</span> writeFasta header bases
process <span class="hl sym">(</span>header<span class="hl sym">,</span>bases<span class="hl sym">,</span>c&#64;<span class="hl sym">(</span>'<span class="hl sym">&gt;</span>'<span class="hl sym">:</span>cs<span class="hl sym">)) =</span> <span class="hl kwa">do</span> writeFasta header bases
                                       <span class="hl kwa">let</span> <span class="hl sym">(</span>header'<span class="hl sym">,</span>cs'<span class="hl sym">) =</span> break <span class="hl sym">(</span>\c<span class="hl sym">-&gt;</span>c <span class="hl sym">==</span> '\n'<span class="hl sym">)</span> c
                                       process <span class="hl sym">(</span>header'<span class="hl sym">,[],</span>cs'<span class="hl sym">)</span>
process <span class="hl sym">(</span>header<span class="hl sym">,</span>bases<span class="hl sym">,(</span>'\n'<span class="hl sym">:</span>cs<span class="hl sym">))  =</span> process <span class="hl sym">(</span>header<span class="hl sym">,</span>bases<span class="hl sym">,</span>cs<span class="hl sym">)</span>
process <span class="hl sym">(</span>header<span class="hl sym">,</span>bases<span class="hl sym">,(</span>c<span class="hl sym">:</span>cs<span class="hl sym">))     =</span> process <span class="hl sym">(</span>header<span class="hl sym">,((</span>complement c<span class="hl sym">):</span>bases<span class="hl sym">),</span>cs<span class="hl sym">)</span>

main <span class="hl sym">=</span> <span class="hl kwa">do</span> cs <span class="hl sym">&lt;-</span> getContents
          process <span class="hl sym">([],[],</span>cs<span class="hl sym">)</span>

