#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Imperative-style implementation based on the SBCL implementation by</span>
<span class="slc">;; Patrick Frankenberger and Juho Snellman, but using only native Scheme</span>
<span class="slc">;; idioms like 'named let' and 'do' special form.</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla, then converted for mzscheme</span>
<span class="slc">;; by Matthew Flatt and Brent Fulgham</span>

#|
Correct output N <span class="sym">=</span> <span class="num">1000</span> is

<span class="sym">-</span><span class="num">0.169075164</span>
<span class="sym">-</span><span class="num">0.169087605</span>
|#
<span class="sym">(</span>module nbody mzscheme
  <span class="sym">(</span>provide main<span class="sym">)</span>

  <span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;string.ss&quot;</span> <span class="str">&quot;srfi&quot;</span> <span class="str">&quot;13&quot;</span><span class="sym">))</span>

  <span class="slc">;;; Stupid boiler-plate for formatting floating point value</span>
  <span class="slc">;;; Stupid boiler-plate for formatting floating point value</span>
  <span class="sym">(</span>define <span class="sym">(</span>roundto digits num<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ((</span>numstr <span class="sym">(</span>number<span class="sym">-&gt;</span>string num<span class="sym">))</span>
	   <span class="sym">(</span>digidx <span class="sym">(</span>add1 <span class="sym">(</span>string<span class="sym">-</span>index numstr #\.<span class="sym">)))</span>
	   <span class="sym">(</span>prestr <span class="sym">(</span>substring numstr <span class="num">0</span> digidx<span class="sym">))</span>
	   <span class="sym">(</span>outval <span class="sym">(</span>string<span class="sym">-&gt;</span>number
		     <span class="sym">(</span>substring numstr digidx <span class="sym">(+</span> digidx digits<span class="sym">))))</span>
	   <span class="sym">(</span>lastchar
	     <span class="sym">(</span>char<span class="sym">-&gt;</span>integer <span class="sym">(</span>string<span class="sym">-</span>ref numstr <span class="sym">(+</span> digidx digits<span class="sym">))))</span>
	   <span class="sym">(</span>poststr
	     <span class="sym">(</span>number<span class="sym">-&gt;</span>string
	       <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> lastchar <span class="num">52</span><span class="sym">)</span>
		 <span class="sym">(</span>add1 outval<span class="sym">)</span>
		 outval<span class="sym">))))</span>
      <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span>
	prestr
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt; (</span>string<span class="sym">-</span><span class="kwa">length</span> poststr<span class="sym">)</span> digits<span class="sym">)</span>
	    <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> poststr <span class="sym">(</span>make<span class="sym">-</span>string <span class="sym">(-</span> digits <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> poststr<span class="sym">)</span> <span class="num">1</span><span class="sym">)</span> #\0<span class="sym">))</span>
	    poststr<span class="sym">))))</span>

<span class="sym">(</span>define<span class="sym">-</span>syntax define<span class="sym">-</span>constant
  <span class="sym">(</span>syntax<span class="sym">-</span>rules <span class="sym">()</span>
    <span class="sym">[(</span>_ id v<span class="sym">) (</span>define id v<span class="sym">)]))</span>

<span class="sym">(</span>define<span class="sym">-</span>syntax define<span class="sym">-</span>record
  <span class="sym">(</span>syntax<span class="sym">-</span>rules <span class="sym">()</span>
    <span class="sym">[(</span>_ id field ...<span class="sym">)</span>
     <span class="sym">(</span>begin
       <span class="sym">(</span>define<span class="sym">-</span>struct id <span class="sym">(</span>field ...<span class="sym">))</span>
       <span class="sym">(</span>define<span class="sym">-</span>assignment<span class="sym">-</span>alias id field<span class="sym">)</span> ...<span class="sym">)]))</span>

<span class="sym">(</span>define<span class="sym">-</span>syntax <span class="sym">(</span>define<span class="sym">-</span>assignment<span class="sym">-</span>alias stx<span class="sym">)</span>
  <span class="sym">(</span>syntax<span class="sym">-</span>case stx <span class="sym">()</span>
    <span class="sym">[(</span>_ id field<span class="sym">)</span>
     <span class="sym">(</span>with<span class="sym">-</span>syntax <span class="sym">([</span>orig <span class="sym">(</span>datum<span class="sym">-&gt;</span>syntax<span class="sym">-</span>object
			  #<span class="sym">'</span>id
			  <span class="sym">(</span>string<span class="sym">-&gt;</span>symbol
			   <span class="sym">(</span>format <span class="str">&quot;set-~a-~a!&quot;</span>
				   <span class="sym">(</span>syntax<span class="sym">-</span>e #<span class="sym">'</span>id<span class="sym">)</span>
				   <span class="sym">(</span>syntax<span class="sym">-</span>e #<span class="sym">'</span>field<span class="sym">))))]</span>
		   <span class="sym">[</span>new <span class="sym">(</span>datum<span class="sym">-&gt;</span>syntax<span class="sym">-</span>object
			  #<span class="sym">'</span>id
			  <span class="sym">(</span>string<span class="sym">-&gt;</span>symbol
			   <span class="sym">(</span>format <span class="str">&quot;~a-~a-set!&quot;</span>
				   <span class="sym">(</span>syntax<span class="sym">-</span>e #<span class="sym">'</span>id<span class="sym">)</span>
				   <span class="sym">(</span>syntax<span class="sym">-</span>e #<span class="sym">'</span>field<span class="sym">))))])</span>
       #<span class="sym">'(</span>define new orig<span class="sym">))]))</span>

<span class="slc">;; ------------------------------</span>
<span class="slc">;; define planetary masses, initial positions &amp; velocity</span>

<span class="sym">(</span>define<span class="sym">-</span>constant <span class="sym">+</span>pi<span class="sym">+</span> <span class="num">3.141592653589793</span><span class="sym">)</span>
<span class="sym">(</span>define<span class="sym">-</span>constant <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+</span> <span class="num">365.24</span><span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+ (*</span> <span class="num">4</span> <span class="sym">+</span>pi<span class="sym">+ +</span>pi<span class="sym">+))</span>

<span class="sym">(</span>define<span class="sym">-</span>record body x y z vx vy vz mass<span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">*</span>sun<span class="sym">*</span>
  <span class="sym">(</span>make<span class="sym">-</span>body <span class="num">0.0 0.0 0.0 0.0 0.0 0.0</span> <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+))</span>

<span class="sym">(</span>define <span class="sym">*</span>jupiter<span class="sym">*</span>
  <span class="sym">(</span>make<span class="sym">-</span>body <span class="num">4.84143144246472090</span>
             <span class="sym">-</span><span class="num">1.16032004402742839</span>
             <span class="sym">-</span><span class="num">1.03622044471123109e-1</span>
             <span class="sym">(*</span> <span class="num">1.66007664274403694e-3</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(*</span> <span class="num">7.69901118419740425e-3</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(* -</span><span class="num">6.90460016972063023e-5</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(*</span> <span class="num">9.54791938424326609e-4</span> <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+)))</span>

<span class="sym">(</span>define <span class="sym">*</span>saturn<span class="sym">*</span>
  <span class="sym">(</span>make<span class="sym">-</span>body <span class="num">8.34336671824457987</span>
             <span class="num">4.12479856412430479</span>
             <span class="sym">-</span><span class="num">4.03523417114321381e-1</span>
             <span class="sym">(* -</span><span class="num">2.76742510726862411e-3</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(*</span> <span class="num">4.99852801234917238e-3</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(*</span> <span class="num">2.30417297573763929e-5</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(*</span> <span class="num">2.85885980666130812e-4</span> <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+)))</span>

<span class="sym">(</span>define <span class="sym">*</span>uranus<span class="sym">*</span>
  <span class="sym">(</span>make<span class="sym">-</span>body <span class="num">1.28943695621391310</span>e1
             <span class="sym">-</span><span class="num">1.51111514016986312</span>e1
             <span class="sym">-</span><span class="num">2.23307578892655734e-1</span>
             <span class="sym">(*</span> <span class="num">2.96460137564761618e-03</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(*</span> <span class="num">2.37847173959480950e-03</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(* -</span><span class="num">2.96589568540237556e-05</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(*</span>  <span class="num">4.36624404335156298e-05</span> <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+)))</span>

<span class="sym">(</span>define <span class="sym">*</span>neptune<span class="sym">*</span>
  <span class="sym">(</span>make<span class="sym">-</span>body <span class="num">1.53796971148509165e+01</span>
             <span class="sym">-</span><span class="num">2.59193146099879641e+01</span>
             <span class="num">1.79258772950371181e-01</span>
             <span class="sym">(*</span> <span class="num">2.68067772490389322e-03</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(*</span> <span class="num">1.62824170038242295e-03</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(* -</span><span class="num">9.51592254519715870e-05</span> <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+)</span>
             <span class="sym">(*</span> <span class="num">5.15138902046611451e-05</span> <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+)))</span>

<span class="slc">; -------------------------------</span>
<span class="sym">(</span>define <span class="sym">(</span>offset<span class="sym">-</span>momentum system<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>px <span class="num">0.0</span><span class="sym">) (</span>py <span class="num">0.0</span><span class="sym">) (</span>pz <span class="num">0.0</span><span class="sym">))</span>

    <span class="sym">(</span>let loop<span class="sym">-</span>i <span class="sym">((</span>i system<span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? i<span class="sym">) '()</span>
	<span class="sym">(</span>begin
	  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> px <span class="sym">(+</span> px <span class="sym">(* (</span>body<span class="sym">-</span>vx <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)) (</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)))))</span>
	  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> py <span class="sym">(+</span> py <span class="sym">(* (</span>body<span class="sym">-</span>vy <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)) (</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)))))</span>
	  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> pz <span class="sym">(+</span> pz <span class="sym">(* (</span>body<span class="sym">-</span>vz <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)) (</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)))))</span>
	  <span class="sym">(</span>loop<span class="sym">-</span>i <span class="sym">(</span><span class="kwa">cdr</span> i<span class="sym">)))))</span>

    <span class="sym">(</span>body<span class="sym">-</span>vx<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> system<span class="sym">) (/ (-</span> px<span class="sym">) +</span>solar<span class="sym">-</span>mass<span class="sym">+))</span>
    <span class="sym">(</span>body<span class="sym">-</span>vy<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> system<span class="sym">) (/ (-</span> py<span class="sym">) +</span>solar<span class="sym">-</span>mass<span class="sym">+))</span>
    <span class="sym">(</span>body<span class="sym">-</span>vz<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> system<span class="sym">) (/ (-</span> pz<span class="sym">) +</span>solar<span class="sym">-</span>mass<span class="sym">+))))</span>

<span class="slc">; -------------------------------</span>
<span class="sym">(</span>define <span class="sym">(</span>energy system<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>e <span class="num">0.0</span><span class="sym">))</span>

    <span class="sym">(</span>let loop<span class="sym">-</span>o <span class="sym">((</span>o system<span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? o<span class="sym">) '()</span>
	<span class="sym">(</span>begin
	  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> e <span class="sym">(+</span> e <span class="sym">(*</span> <span class="num">0.5</span> <span class="sym">(</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">))</span>
			  <span class="sym">(+ (* (</span>body<span class="sym">-</span>vx <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (</span>body<span class="sym">-</span>vx <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)))</span>
			     <span class="sym">(* (</span>body<span class="sym">-</span>vy <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (</span>body<span class="sym">-</span>vy <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)))</span>
			     <span class="sym">(* (</span>body<span class="sym">-</span>vz <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (</span>body<span class="sym">-</span>vz <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)))))))</span>

	  <span class="sym">(</span>let loop<span class="sym">-</span>i <span class="sym">((</span>i <span class="sym">(</span><span class="kwa">cdr</span> o<span class="sym">)))</span>
	    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? i<span class="sym">) '()</span>
	      <span class="sym">(</span>begin
		<span class="sym">(</span>let<span class="sym">* ((</span>dx <span class="sym">(- (</span>body<span class="sym">-</span>x <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (</span>body<span class="sym">-</span>x <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">))))</span>
		       <span class="sym">(</span>dy <span class="sym">(- (</span>body<span class="sym">-</span>y <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (</span>body<span class="sym">-</span>y <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">))))</span>
		       <span class="sym">(</span>dz <span class="sym">(- (</span>body<span class="sym">-</span>z <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (</span>body<span class="sym">-</span>z <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">))))</span>
		       <span class="sym">(</span><span class="kwa">distance</span> <span class="sym">(</span><span class="kwa">sqrt</span> <span class="sym">(+ (*</span> dx dx<span class="sym">) (*</span> dy dy<span class="sym">) (*</span> dz dz<span class="sym">)))))</span>
		  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> e <span class="sym">(-</span> e <span class="sym">(/ (* (</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)))</span> <span class="kwa">distance</span><span class="sym">))))</span>

		<span class="sym">(</span>loop<span class="sym">-</span>i <span class="sym">(</span><span class="kwa">cdr</span> i<span class="sym">)))))</span>

	  <span class="sym">(</span>loop<span class="sym">-</span>o <span class="sym">(</span><span class="kwa">cdr</span> o<span class="sym">)))))</span>
    e<span class="sym">))</span>


<span class="slc">; -------------------------------</span>
<span class="sym">(</span>define <span class="sym">(</span>advance system dt<span class="sym">)</span>
  <span class="sym">(</span>let loop<span class="sym">-</span>o <span class="sym">((</span>o system<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? o<span class="sym">) '()</span>
      <span class="sym">(</span>begin
	<span class="sym">(</span>let loop<span class="sym">-</span>i <span class="sym">((</span>i <span class="sym">(</span><span class="kwa">cdr</span> o<span class="sym">)))</span>
	  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? i<span class="sym">) '()</span>
	    <span class="sym">(</span>begin
	      <span class="sym">(</span>let<span class="sym">* ((</span>dx <span class="sym">(- (</span>body<span class="sym">-</span>x <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (</span>body<span class="sym">-</span>x <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">))))</span>
		     <span class="sym">(</span>dy <span class="sym">(- (</span>body<span class="sym">-</span>y <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (</span>body<span class="sym">-</span>y <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">))))</span>
		     <span class="sym">(</span>dz <span class="sym">(- (</span>body<span class="sym">-</span>z <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (</span>body<span class="sym">-</span>z <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">))))</span>
		     <span class="sym">(</span><span class="kwa">distance</span> <span class="sym">(</span><span class="kwa">sqrt</span> <span class="sym">(+ (*</span> dx dx<span class="sym">) (*</span> dy dy<span class="sym">) (*</span> dz dz<span class="sym">))))</span>
		     <span class="sym">(</span>mag <span class="sym">(/</span> dt <span class="sym">(*</span> <span class="kwa">distance distance distance</span><span class="sym">)))</span>
		     <span class="sym">(</span>dxmag <span class="sym">(*</span> dx mag<span class="sym">))</span>
		     <span class="sym">(</span>dymag <span class="sym">(*</span> dy mag<span class="sym">))</span>
		     <span class="sym">(</span>dzmag <span class="sym">(*</span> dz mag<span class="sym">)))</span>
		<span class="sym">(</span>body<span class="sym">-</span>vx<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> o<span class="sym">) (- (</span>body<span class="sym">-</span>vx <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (*</span> dxmag <span class="sym">(</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)))))</span>
		<span class="sym">(</span>body<span class="sym">-</span>vy<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> o<span class="sym">) (- (</span>body<span class="sym">-</span>vy <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (*</span> dymag <span class="sym">(</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)))))</span>
		<span class="sym">(</span>body<span class="sym">-</span>vz<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> o<span class="sym">) (- (</span>body<span class="sym">-</span>vz <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (*</span> dzmag <span class="sym">(</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)))))</span>
		<span class="sym">(</span>body<span class="sym">-</span>vx<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> i<span class="sym">) (+ (</span>body<span class="sym">-</span>vx <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)) (*</span> dxmag <span class="sym">(</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)))))</span>
		<span class="sym">(</span>body<span class="sym">-</span>vy<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> i<span class="sym">) (+ (</span>body<span class="sym">-</span>vy <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)) (*</span> dymag <span class="sym">(</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)))))</span>
		<span class="sym">(</span>body<span class="sym">-</span>vz<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> i<span class="sym">) (+ (</span>body<span class="sym">-</span>vz <span class="sym">(</span><span class="kwa">car</span> i<span class="sym">)) (*</span> dzmag <span class="sym">(</span>body<span class="sym">-</span>mass <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">))))))</span>

	      <span class="sym">(</span>loop<span class="sym">-</span>i <span class="sym">(</span><span class="kwa">cdr</span> i<span class="sym">)))))</span>

	<span class="sym">(</span>loop<span class="sym">-</span>o <span class="sym">(</span><span class="kwa">cdr</span> o<span class="sym">)))))</span>

  <span class="sym">(</span>let loop<span class="sym">-</span>o <span class="sym">((</span>o system<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? o<span class="sym">) '()</span>
      <span class="sym">(</span>begin
	<span class="sym">(</span>body<span class="sym">-</span>x<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> o<span class="sym">) (+ (</span>body<span class="sym">-</span>x <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (*</span> dt <span class="sym">(</span>body<span class="sym">-</span>vx <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)))))</span>
	<span class="sym">(</span>body<span class="sym">-</span>y<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> o<span class="sym">) (+ (</span>body<span class="sym">-</span>y <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (*</span> dt <span class="sym">(</span>body<span class="sym">-</span>vy <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)))))</span>
	<span class="sym">(</span>body<span class="sym">-</span>z<span class="sym">-</span><span class="kwa">set</span><span class="sym">! (</span><span class="kwa">car</span> o<span class="sym">) (+ (</span>body<span class="sym">-</span>z <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)) (*</span> dt <span class="sym">(</span>body<span class="sym">-</span>vz <span class="sym">(</span><span class="kwa">car</span> o<span class="sym">)))))</span>
	<span class="sym">(</span>loop<span class="sym">-</span>o <span class="sym">(</span><span class="kwa">cdr</span> o<span class="sym">))))))</span>

<span class="slc">; -------------------------------</span>
<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? args<span class="sym">)</span>
               <span class="num">1</span>
	       <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">))))</span>
        <span class="sym">(</span>system <span class="sym">(</span><span class="kwa">list</span> <span class="sym">*</span>sun<span class="sym">* *</span>jupiter<span class="sym">* *</span>saturn<span class="sym">* *</span>uranus<span class="sym">* *</span>neptune<span class="sym">*)))</span>

    <span class="sym">(</span>offset<span class="sym">-</span>momentum system<span class="sym">)</span>

    <span class="sym">(</span>printf <span class="str">&quot;~a~%&quot;</span> <span class="sym">(</span>roundto <span class="num">9</span> <span class="sym">(</span>energy system<span class="sym">)))</span>

    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
        <span class="sym">((&lt;</span> n i<span class="sym">))</span>
        <span class="sym">(</span>advance system <span class="num">0.01</span><span class="sym">))</span>

    <span class="sym">(</span>printf <span class="str">&quot;~a~%&quot;</span> <span class="sym">(</span>roundto <span class="num">9</span> <span class="sym">(</span>energy system<span class="sym">))))))</span>

<span class="sym">(</span>require nbody<span class="sym">)</span>
<span class="sym">(</span>main <span class="sym">(</span>vector<span class="sym">-&gt;</span><span class="kwa">list</span> <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
