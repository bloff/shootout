<span class="hl slc">% The Computer Language Shootout Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">% Based on work by Heiner Marxen (C) and Amir K aka Razii (Java)</span>
<span class="hl slc">% contributed by Glendon Holst</span>
<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> module fannkuch.
<span class="hl sym">:-</span> interface.
<span class="hl sym">:-</span> import_module io.

<span class="hl sym">:-</span> pred main<span class="hl sym">(</span>io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> cc_multi.

<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> implementation.
<span class="hl sym">:-</span> import_module solutions.
<span class="hl sym">:-</span> import_module univ.
<span class="hl sym">:-</span> import_module array.
<span class="hl sym">:-</span> import_module list.
<span class="hl sym">:-</span> import_module int.
<span class="hl sym">:-</span> import_module bool.
<span class="hl sym">:-</span> import_module string.
<span class="hl sym">:-</span> import_module exception.

<span class="hl slc">% ----------------------------------------------------------------------</span>

main<span class="hl sym">(!</span>IO<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	io.command_line_arguments<span class="hl sym">(</span>Args<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
	<span class="hl sym">(</span>
		if
			Args <span class="hl sym">= [</span>AString<span class="hl sym">|</span>_<span class="hl sym">],</span>
			string.to_int<span class="hl sym">(</span>string.strip<span class="hl sym">(</span>AString<span class="hl sym">),</span> Aint<span class="hl sym">)</span>
		then
			N <span class="hl sym">=</span> Aint
		else
			N <span class="hl kwa">is</span> <span class="hl num">11</span>
	<span class="hl sym">),</span>

	Seq <span class="hl sym">= (</span>pred<span class="hl sym">(</span>L1<span class="hl sym">::</span>out<span class="hl sym">)</span> <span class="hl kwa">is</span> multi <span class="hl sym">:-</span> seq_interval<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> N<span class="hl sym">,</span> L1<span class="hl sym">)),</span>
	solutions<span class="hl sym">(</span>Seq<span class="hl sym">,</span>L<span class="hl sym">),</span>

	P <span class="hl sym">=</span> array<span class="hl sym">(</span>L<span class="hl sym">),</span>

	io.set_globals<span class="hl sym">(</span>univ<span class="hl sym">({</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">}), !</span>IO<span class="hl sym">),</span>
	Permutations <span class="hl sym">= (</span>pred<span class="hl sym">(</span>P1<span class="hl sym">::</span>array_uo<span class="hl sym">)</span> <span class="hl kwa">is</span> multi <span class="hl sym">:-</span> permute<span class="hl sym">(</span>P<span class="hl sym">,</span> P1<span class="hl sym">)),</span>
	Calculate <span class="hl sym">= (</span>pred<span class="hl sym">(</span>P2<span class="hl sym">::</span>in<span class="hl sym">, !</span>.IO<span class="hl sym">::</span>di<span class="hl sym">, !:</span>IO<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det <span class="hl sym">:-</span>
	<span class="hl sym">(</span>
		P3 <span class="hl sym">=</span> array.copy<span class="hl sym">(</span>P2<span class="hl sym">),</span>
		flip_array<span class="hl sym">(</span>P3<span class="hl sym">,</span>FlipCount<span class="hl sym">),</span>
		get_globals<span class="hl sym">(</span>OldFlipCount<span class="hl sym">,</span> OldSeqCount<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
		<span class="hl sym">(</span>
			FlipCount <span class="hl sym">&gt;</span> OldFlipCount <span class="hl sym">-&gt;</span>
			NewFlipCount <span class="hl sym">=</span> FlipCount<span class="hl sym">,</span>
			set_globals<span class="hl sym">(</span>NewFlipCount<span class="hl sym">,</span> OldSeqCount<span class="hl sym">, !</span>IO<span class="hl sym">)</span>
		<span class="hl sym">;</span>
			NewFlipCount <span class="hl sym">=</span> OldFlipCount
		<span class="hl sym">),</span>
		<span class="hl sym">(</span>
			OldSeqCount <span class="hl sym">&lt;</span> <span class="hl num">30</span> <span class="hl sym">-&gt;</span>
			print_permutation<span class="hl sym">(</span>P2<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
			set_globals<span class="hl sym">(</span>NewFlipCount<span class="hl sym">,</span> OldSeqCount <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">, !</span>IO<span class="hl sym">)</span>
		<span class="hl sym">;</span>
			<span class="hl kwa">true</span>
		<span class="hl sym">)</span>
	<span class="hl sym">)),</span>

	unsorted_aggregate<span class="hl sym">(</span> Permutations<span class="hl sym">,</span> Calculate<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
	get_globals<span class="hl sym">(</span>MaxCount<span class="hl sym">,</span> _<span class="hl sym">, !</span>IO<span class="hl sym">),</span>

	io.format<span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">, [</span>i<span class="hl sym">(</span>N<span class="hl sym">),</span> i<span class="hl sym">(</span>MaxCount<span class="hl sym">)], !</span>IO<span class="hl sym">)</span>
<span class="hl sym">)</span>.

<span class="hl slc">% ------------------------------- %</span>
<span class="hl slc">%</span>
<span class="hl slc">% seq_interval(A,B, X) =&gt; X is in interval [A..B].</span>
<span class="hl slc">%</span>

<span class="hl sym">:-</span> pred seq_interval<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>out<span class="hl sym">)</span> <span class="hl kwa">is</span> multi.

seq_interval<span class="hl sym">(</span>N<span class="hl sym">,</span> M<span class="hl sym">,</span> Result<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	N <span class="hl sym">&gt;=</span> M <span class="hl sym">-&gt;</span>
	Result <span class="hl sym">=</span> N
<span class="hl sym">;</span>
	<span class="hl sym">(</span>
		Result <span class="hl sym">=</span> N
	<span class="hl sym">;</span>
		seq_interval<span class="hl sym">(</span>N <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> M<span class="hl sym">,</span> Result<span class="hl sym">)</span>
	<span class="hl sym">)</span>
<span class="hl sym">)</span>.

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred set_globals<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

set_globals<span class="hl sym">(</span>FlipCount<span class="hl sym">,</span> PrintCount<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	io.set_globals<span class="hl sym">(</span>univ<span class="hl sym">({</span>FlipCount<span class="hl sym">,</span> PrintCount<span class="hl sym">}), !</span>IO<span class="hl sym">)</span>
<span class="hl sym">)</span>.

<span class="hl sym">:-</span> pred get_globals<span class="hl sym">(</span>int<span class="hl sym">::</span>out<span class="hl sym">,</span> int<span class="hl sym">::</span>out<span class="hl sym">,</span> io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

get_globals<span class="hl sym">(</span>FlipCount<span class="hl sym">,</span> PrintCount<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	io.get_globals<span class="hl sym">(</span>OldUniv<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
	det_univ_to_type<span class="hl sym">(</span>OldUniv<span class="hl sym">,{</span>FlipCount<span class="hl sym">,</span> PrintCount<span class="hl sym">})</span>
<span class="hl sym">)</span>.

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred print_permutation<span class="hl sym">(</span>array<span class="hl sym">(</span>int<span class="hl sym">)::</span>in<span class="hl sym">,</span> io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

print_permutation<span class="hl sym">(</span>Permute<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span> print_permutation_<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> Permute<span class="hl sym">, !</span>IO<span class="hl sym">)</span>.

<span class="hl sym">:-</span> pred print_permutation_<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> array<span class="hl sym">(</span>int<span class="hl sym">)::</span>in<span class="hl sym">,</span> io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

print_permutation_<span class="hl sym">(</span>Idx<span class="hl sym">,</span> Permute<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	Idx <span class="hl sym">&lt;</span> array.size<span class="hl sym">(</span>Permute<span class="hl sym">) -&gt;</span>
	io.write_int<span class="hl sym">(</span>array.lookup<span class="hl sym">(</span>Permute<span class="hl sym">,</span> Idx<span class="hl sym">), !</span>IO<span class="hl sym">),</span>
	print_permutation_<span class="hl sym">(</span>Idx <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> Permute<span class="hl sym">, !</span>IO<span class="hl sym">)</span>
<span class="hl sym">;</span>
	io.<span class="hl kwa">nl</span><span class="hl sym">(!</span>IO<span class="hl sym">),</span>
	io.flush_output<span class="hl sym">(!</span>IO<span class="hl sym">)</span>
<span class="hl sym">)</span>.

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred permute<span class="hl sym">(</span>array<span class="hl sym">(</span>int<span class="hl sym">)::</span>array_di<span class="hl sym">,</span> array<span class="hl sym">(</span>int<span class="hl sym">)::</span>array_uo<span class="hl sym">)</span> <span class="hl kwa">is</span> multi.

permute<span class="hl sym">(</span>Arr0<span class="hl sym">,</span> Arr<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	permute_<span class="hl sym">(</span>array.size<span class="hl sym">(</span>Arr0<span class="hl sym">),</span> array.size<span class="hl sym">(</span>Arr0<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">,</span> Arr0<span class="hl sym">,</span> Arr1<span class="hl sym">) -&gt;</span>
	Arr <span class="hl sym">=</span> Arr1
<span class="hl sym">;</span>
	Arr <span class="hl sym">=</span> Arr0
<span class="hl sym">)</span>.

<span class="hl sym">:-</span> pred permute_<span class="hl sym">(</span>int<span class="hl sym">,</span> int<span class="hl sym">,</span> array<span class="hl sym">(</span>int<span class="hl sym">),</span> array<span class="hl sym">(</span>int<span class="hl sym">))</span> <span class="hl kwa">is</span> nondet.
<span class="hl sym">:-</span> mode permute_<span class="hl sym">(</span>in<span class="hl sym">,</span> in<span class="hl sym">,</span> array_di<span class="hl sym">,</span> array_uo<span class="hl sym">)</span> <span class="hl kwa">is</span> nondet.

permute_<span class="hl sym">(</span>N<span class="hl sym">,</span> Idx<span class="hl sym">,</span> Arr0<span class="hl sym">,</span> Arr<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	N <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
	<span class="hl sym">(</span>
		permute_<span class="hl sym">(</span>Idx<span class="hl sym">,</span> Idx <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> Arr0<span class="hl sym">,</span> Arr<span class="hl sym">)</span>
	<span class="hl sym">;</span>
		<span class="hl sym">(</span>
			rotate_n<span class="hl sym">(</span>Idx<span class="hl sym">,</span> Arr0<span class="hl sym">,</span> Arr2<span class="hl sym">),</span>
			permute_<span class="hl sym">(</span>N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> Idx<span class="hl sym">,</span> Arr2<span class="hl sym">,</span> Arr<span class="hl sym">)</span>
		<span class="hl sym">)</span>
	<span class="hl sym">)</span>
<span class="hl sym">;</span>
	Idx <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
	Arr <span class="hl sym">=</span> Arr0
<span class="hl sym">;</span>
	<span class="hl kwa">fail</span>
<span class="hl sym">)</span>.

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred rotate_n<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> array<span class="hl sym">(</span>int<span class="hl sym">)::</span>array_di<span class="hl sym">,</span> array<span class="hl sym">(</span>int<span class="hl sym">)::</span>array_uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

rotate_n<span class="hl sym">(</span>N<span class="hl sym">,</span> Arr0<span class="hl sym">,</span> Arr<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	N <span class="hl sym">=&lt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
	Arr <span class="hl sym">=</span> Arr0
<span class="hl sym">;</span>
	V <span class="hl sym">=</span> array.lookup<span class="hl sym">(</span>Arr0<span class="hl sym">,</span> N<span class="hl sym">),</span>
	array.set<span class="hl sym">(</span>Arr0<span class="hl sym">,</span> N<span class="hl sym">,</span> array.lookup<span class="hl sym">(</span>Arr0<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">),</span> Arr1<span class="hl sym">),</span>
	shift_down<span class="hl sym">(</span>N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> V<span class="hl sym">,</span> Arr1<span class="hl sym">,</span> Arr<span class="hl sym">)</span>
<span class="hl sym">)</span>.

<span class="hl sym">:-</span> pred shift_down<span class="hl sym">(</span>int<span class="hl sym">,</span> int<span class="hl sym">,</span> array<span class="hl sym">(</span>int<span class="hl sym">),</span> array<span class="hl sym">(</span>int<span class="hl sym">))</span> <span class="hl kwa">is</span> det.
<span class="hl sym">:-</span> mode shift_down<span class="hl sym">(</span>in<span class="hl sym">,</span> in<span class="hl sym">,</span> array_di<span class="hl sym">,</span> array_uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

shift_down<span class="hl sym">(</span>Idx<span class="hl sym">,</span> Val<span class="hl sym">,</span> Arr0<span class="hl sym">,</span> Arr<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	Idx <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">-&gt;</span>
	V <span class="hl sym">=</span> array.lookup<span class="hl sym">(</span>Arr0<span class="hl sym">,</span> Idx<span class="hl sym">),</span>
	array.set<span class="hl sym">(</span>Arr0<span class="hl sym">,</span> Idx<span class="hl sym">,</span> Val<span class="hl sym">,</span> Arr1<span class="hl sym">),</span>
	shift_down<span class="hl sym">(</span>Idx <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> V<span class="hl sym">,</span> Arr1<span class="hl sym">,</span> Arr<span class="hl sym">)</span>
<span class="hl sym">;</span>
	array.set<span class="hl sym">(</span>Arr0<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> Val<span class="hl sym">,</span> Arr<span class="hl sym">)</span>
<span class="hl sym">)</span>.

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred reverse_n_to_m<span class="hl sym">(</span>
	int<span class="hl sym">::</span>in<span class="hl sym">,</span>
	int<span class="hl sym">::</span>in<span class="hl sym">,</span>
	array<span class="hl sym">(</span>int<span class="hl sym">)::</span>array_di<span class="hl sym">,</span>
	array<span class="hl sym">(</span>int<span class="hl sym">)::</span>array_uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

reverse_n_to_m<span class="hl sym">(</span>N<span class="hl sym">,</span> M<span class="hl sym">,</span> Arr0<span class="hl sym">,</span> Arr<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	N <span class="hl sym">&lt;</span> M <span class="hl sym">-&gt;</span>
	T <span class="hl sym">=</span> array.lookup<span class="hl sym">(</span>Arr0<span class="hl sym">,</span> N<span class="hl sym">),</span>
	array.set<span class="hl sym">(</span>Arr0<span class="hl sym">,</span> N<span class="hl sym">,</span> array.lookup<span class="hl sym">(</span>Arr0<span class="hl sym">,</span> M<span class="hl sym">),</span> Arr1<span class="hl sym">),</span>
	array.set<span class="hl sym">(</span>Arr1<span class="hl sym">,</span> M<span class="hl sym">,</span> T<span class="hl sym">,</span> Arr2<span class="hl sym">),</span>
	reverse_n_to_m<span class="hl sym">(</span>N <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> M <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> Arr2<span class="hl sym">,</span> Arr<span class="hl sym">)</span>
<span class="hl sym">;</span>
	Arr <span class="hl sym">=</span> Arr0
<span class="hl sym">)</span>.

<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred flip_array<span class="hl sym">(</span>array<span class="hl sym">(</span>int<span class="hl sym">)::</span>array_di<span class="hl sym">,</span> int<span class="hl sym">::</span>out<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

flip_array<span class="hl sym">(</span>Arr<span class="hl sym">,</span> Count<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
	N <span class="hl sym">=</span> array.lookup<span class="hl sym">(</span>Arr<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">),</span>
	<span class="hl sym">(</span>
		N <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">-&gt;</span>
		Count <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl sym">;</span>
		reverse_n_to_m<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> Arr<span class="hl sym">,</span> Arr1<span class="hl sym">),</span>
		flip_array<span class="hl sym">(</span>Arr1<span class="hl sym">,</span> C2<span class="hl sym">),</span>
		Count <span class="hl sym">=</span> C2 <span class="hl sym">+</span> <span class="hl num">1</span>
	<span class="hl sym">)</span>
<span class="hl sym">)</span>.

<span class="hl slc">% ------------------------------- %</span>
