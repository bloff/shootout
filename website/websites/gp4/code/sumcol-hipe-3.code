<span class="hl slc">%The Computer Language Benchmarks Game</span>
<span class="hl slc">%http://shootout.alioth.debian.org/</span>

<span class="hl slc">%contributed by Fredrik Svahn</span>

<span class="hl slc">%compile: erlc +native '+{hipe, [o3]}' sumcol.erl</span>
<span class="hl slc">%run: erl +T 9 +Mea min -noinput -run sumcol main foo &lt; sumcol-input.txt</span>

<span class="hl slc">%This program uses the port method to read stdin one line at a time. This is</span>
<span class="hl slc">%a lot more efficient than the old method.</span>

<span class="hl sym">-</span><span class="hl kwd">module</span><span class="hl sym">(</span>sumcol<span class="hl sym">)</span>.
<span class="hl sym">-</span><span class="hl kwd">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">])</span>.
<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>stdin<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">)</span>.
<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>stdout<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)</span>.
<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>maxline<span class="hl sym">,</span><span class="hl num">128</span><span class="hl sym">)</span>.

<span class="hl kwd">main</span><span class="hl sym">(</span>_<span class="hl sym">)-&gt;</span>
    <span class="hl slc">%Open stdin port, results will be sent to this process one line at a time</span>
    Port <span class="hl sym">=</span> <span class="hl kwb">open_port</span><span class="hl sym">({</span>fd<span class="hl sym">,</span> ?stdin<span class="hl sym">,</span> ?stdout<span class="hl sym">}, [{</span>line<span class="hl sym">,</span> ?maxline<span class="hl sym">},</span> eof<span class="hl sym">]),</span>
    Sum <span class="hl sym">=</span> <span class="hl kwd">read8</span><span class="hl sym">({</span><span class="hl num">0</span><span class="hl sym">,</span> go<span class="hl sym">}),</span>
    <span class="hl kwd">port_command</span><span class="hl sym">(</span>Port<span class="hl sym">,</span> <span class="hl kwb">integer_to_list</span><span class="hl sym">(</span>Sum<span class="hl sym">) ++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">),</span>
    <span class="hl kwb">halt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>.

<span class="hl slc">%Main read loop. Read 8 lines at a time</span>
<span class="hl kwd">read8</span><span class="hl sym">({</span>Sum<span class="hl sym">,</span> eof<span class="hl sym">})-&gt;</span> Sum<span class="hl sym">;</span>
<span class="hl kwd">read8</span><span class="hl sym">({</span>Sum<span class="hl sym">,</span> _<span class="hl sym">})-&gt;</span> <span class="hl kwd">read8</span><span class="hl sym">(</span><span class="hl kwd">ln</span><span class="hl sym">(</span><span class="hl kwd">ln</span><span class="hl sym">(</span><span class="hl kwd">ln</span><span class="hl sym">(</span><span class="hl kwd">ln</span><span class="hl sym">(</span><span class="hl kwd">ln</span><span class="hl sym">(</span><span class="hl kwd">ln</span><span class="hl sym">(</span><span class="hl kwd">ln</span><span class="hl sym">(</span><span class="hl kwd">ln</span><span class="hl sym">({</span>Sum<span class="hl sym">,</span> go<span class="hl sym">})))))))))</span>.

<span class="hl slc">%Read one line (actually it is more like &quot;wait until we receive one line from</span>
<span class="hl slc">%stdin or something else that another process would like to send to us&quot;)</span>
<span class="hl kwd">ln</span><span class="hl sym">({</span>Sum<span class="hl sym">,</span> eof<span class="hl sym">}) -&gt; {</span>Sum<span class="hl sym">,</span> eof<span class="hl sym">};</span>
<span class="hl kwd">ln</span><span class="hl sym">({</span>Sum<span class="hl sym">,</span> _<span class="hl sym">})   -&gt;</span> <span class="hl kwa">receive</span>
		      <span class="hl sym">{</span>_<span class="hl sym">,</span> eof<span class="hl sym">}         -&gt; {</span>Sum<span class="hl sym">,</span> eof<span class="hl sym">};</span>
		      <span class="hl sym">{</span>_<span class="hl sym">,{</span>_<span class="hl sym">,{</span>_<span class="hl sym">,</span>Line<span class="hl sym">}}} -&gt; {</span>Sum <span class="hl sym">+</span> <span class="hl kwb">list_to_integer</span><span class="hl sym">(</span>Line<span class="hl sym">),</span> go<span class="hl sym">};</span>
		      _OtherMessage    <span class="hl sym">-&gt; {</span>Sum<span class="hl sym">,</span> go<span class="hl sym">}</span>  <span class="hl slc">%ignored in this case</span>
		  <span class="hl kwa">end</span>.

