<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Jochen Hinrichsen</span>
<span class="hl com">   modified by Anthony Borla</span>
<span class="hl com">   modified by Isaac Gouy</span>
<span class="hl com">*/</span>

def <span class="hl kwd">revcomp</span><span class="hl sym">(</span>sequence<span class="hl sym">) {</span>
  def complement <span class="hl sym">= [</span><span class="hl str">'A'</span><span class="hl sym">:</span><span class="hl str">'T'</span><span class="hl sym">,</span> <span class="hl str">'C'</span><span class="hl sym">:</span><span class="hl str">'G'</span><span class="hl sym">,</span> <span class="hl str">'G'</span><span class="hl sym">:</span><span class="hl str">'C'</span><span class="hl sym">,</span> <span class="hl str">'T'</span><span class="hl sym">:</span><span class="hl str">'A'</span><span class="hl sym">,</span> <span class="hl str">'M'</span><span class="hl sym">:</span><span class="hl str">'K'</span><span class="hl sym">,</span> <span class="hl str">'R'</span><span class="hl sym">:</span><span class="hl str">'Y'</span><span class="hl sym">,</span>
                    <span class="hl str">'W'</span><span class="hl sym">:</span><span class="hl str">'W'</span><span class="hl sym">,</span> <span class="hl str">'S'</span><span class="hl sym">:</span><span class="hl str">'S'</span><span class="hl sym">,</span> <span class="hl str">'Y'</span><span class="hl sym">:</span><span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl str">'K'</span><span class="hl sym">:</span><span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl str">'V'</span><span class="hl sym">:</span><span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl str">'H'</span><span class="hl sym">:</span><span class="hl str">'D'</span><span class="hl sym">,</span>
                    <span class="hl str">'D'</span><span class="hl sym">:</span><span class="hl str">'H'</span><span class="hl sym">,</span> <span class="hl str">'B'</span><span class="hl sym">:</span><span class="hl str">'V'</span><span class="hl sym">,</span> <span class="hl str">'N'</span><span class="hl sym">:</span><span class="hl str">'N'</span><span class="hl sym">]</span>
  def compseq <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuffer</span><span class="hl sym">()</span>

  sequence<span class="hl sym">.</span><span class="hl kwd">reverse</span><span class="hl sym">().</span><span class="hl kwd">toUpperCase</span><span class="hl sym">().</span><span class="hl kwd">each</span><span class="hl sym">(){</span> compseq <span class="hl sym">+=</span> complement<span class="hl sym">[</span>it<span class="hl sym">] }</span>
  compseq<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">()</span>
<span class="hl sym">}</span>

def <span class="hl kwd">dumpSegment</span><span class="hl sym">(</span>segment<span class="hl sym">,</span> length<span class="hl sym">) {</span>
  def segsize <span class="hl sym">=</span> segment<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">()</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>segsize <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">return</span>

  def start <span class="hl sym">=</span> <span class="hl num">0</span>
  def end <span class="hl sym">=</span> length <span class="hl sym">-</span> <span class="hl num">1</span>

  <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">) {</span>
    println segment<span class="hl sym">[</span>start<span class="hl sym">..</span>end<span class="hl sym">]</span>

    <span class="hl kwa">if</span> <span class="hl sym">(</span>end <span class="hl sym">+</span> length <span class="hl sym">&lt;</span> segsize<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">) {</span>
      start <span class="hl sym">+=</span> length
      end <span class="hl sym">+=</span> length
    <span class="hl sym">}</span>
    <span class="hl kwa">else</span> <span class="hl sym">{</span>
      println segment<span class="hl sym">[</span>end <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">..</span>segsize<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]</span>
      <span class="hl kwa">break</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>
  segment<span class="hl sym">.</span><span class="hl kwd">setLength</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl sym">}</span>


System<span class="hl sym">.</span>in<span class="hl sym">.</span><span class="hl kwd">newReader</span><span class="hl sym">().</span>withReader <span class="hl sym">{</span> reader <span class="hl sym">-&gt;</span>
   def segment <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuffer</span><span class="hl sym">()</span>
   def sequence <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span>

   <span class="hl kwa">while</span> <span class="hl sym">((</span>sequence <span class="hl sym">=</span> reader<span class="hl sym">.</span><span class="hl kwd">readLine</span><span class="hl sym">()) !=</span> null<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>sequence<span class="hl sym">.</span><span class="hl kwd">startsWith</span><span class="hl sym">(</span><span class="hl str">'&gt;'</span><span class="hl sym">)) {</span>
        <span class="hl kwd">dumpSegment</span><span class="hl sym">(</span>segment<span class="hl sym">,</span><span class="hl num">60</span><span class="hl sym">)</span>
        println sequence
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
        segment<span class="hl sym">.</span><span class="hl kwd">insert</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl kwd">revcomp</span><span class="hl sym">(</span>sequence<span class="hl sym">))</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
    <span class="hl kwd">dumpSegment</span><span class="hl sym">(</span>segment<span class="hl sym">,</span><span class="hl num">60</span><span class="hl sym">)</span>
<span class="hl sym">}</span>


