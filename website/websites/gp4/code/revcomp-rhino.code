<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">   for JavaScript Rhino only</span>
<span class="com">*/</span>

<span class="kwd">importPackage</span><span class="sym">(</span>java<span class="sym">.</span>io<span class="sym">);</span>

comp <span class="sym">= {</span> <span class="str">'A'</span><span class="sym">:</span><span class="str">'T'</span><span class="sym">,</span> <span class="str">'B'</span><span class="sym">:</span><span class="str">'V'</span><span class="sym">,</span> <span class="str">'C'</span><span class="sym">:</span><span class="str">'G'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">:</span><span class="str">'H'</span><span class="sym">,</span> <span class="str">'E'</span><span class="sym">:</span><span class="str">'E'</span><span class="sym">,</span> <span class="str">'F'</span><span class="sym">:</span><span class="str">'F'</span><span class="sym">,</span> <span class="str">'G'</span><span class="sym">:</span><span class="str">'C'</span><span class="sym">,</span>
   <span class="str">'H'</span><span class="sym">:</span><span class="str">'D'</span><span class="sym">,</span> <span class="str">'I'</span><span class="sym">:</span><span class="str">'I'</span><span class="sym">,</span> <span class="str">'J'</span><span class="sym">:</span><span class="str">'J'</span><span class="sym">,</span> <span class="str">'K'</span><span class="sym">:</span><span class="str">'M'</span><span class="sym">,</span> <span class="str">'L'</span><span class="sym">:</span><span class="str">'L'</span><span class="sym">,</span> <span class="str">'M'</span><span class="sym">:</span><span class="str">'K'</span><span class="sym">,</span> <span class="str">'N'</span><span class="sym">:</span><span class="str">'N'</span><span class="sym">,</span> <span class="str">'O'</span><span class="sym">:</span><span class="str">'O'</span><span class="sym">,</span>
   <span class="str">'P'</span><span class="sym">:</span><span class="str">'P'</span><span class="sym">,</span> <span class="str">'Q'</span><span class="sym">:</span><span class="str">'Q'</span><span class="sym">,</span> <span class="str">'R'</span><span class="sym">:</span><span class="str">'Y'</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">:</span><span class="str">'S'</span><span class="sym">,</span> <span class="str">'T'</span><span class="sym">:</span><span class="str">'A'</span><span class="sym">,</span> <span class="str">'U'</span><span class="sym">:</span><span class="str">'U'</span><span class="sym">,</span> <span class="str">'V'</span><span class="sym">:</span><span class="str">'B'</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">:</span><span class="str">'W'</span><span class="sym">,</span>
   <span class="str">'X'</span><span class="sym">:</span><span class="str">'X'</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">:</span><span class="str">'R'</span><span class="sym">,</span> <span class="str">'Z'</span><span class="sym">:</span><span class="str">'Z'</span><span class="sym">};</span>

<span class="kwa">function</span> <span class="kwd">print60reverse</span><span class="sym">(</span>buffer<span class="sym">) {</span>
   <span class="kwa">var</span> line <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span>
   <span class="kwa">var</span> bl <span class="sym">=</span> buffer<span class="sym">.</span><span class="kwc">length</span><span class="sym">;</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i <span class="sym">=</span> bl<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--) {</span>
      line <span class="sym">+=</span> comp<span class="sym">[</span>buffer<span class="sym">.</span><span class="kwc">charAt</span><span class="sym">(</span>i<span class="sym">)];</span>
      <span class="kwa">if</span> <span class="sym">((</span>bl <span class="sym">-</span> i<span class="sym">) %</span> <span class="num">60</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
         <span class="kwc">print</span><span class="sym">(</span>line<span class="sym">);</span>
         line <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">.</span><span class="kwc">length</span> <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwc">print</span><span class="sym">(</span>line<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">var</span> line<span class="sym">;</span>
<span class="kwa">var</span> stdin <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">BufferedReader</span><span class="sym">(</span>
   <span class="kwa">new</span> <span class="kwd">InputStreamReader</span><span class="sym">(</span>Packages<span class="sym">.</span>java<span class="sym">.</span>lang<span class="sym">.</span>System<span class="sym">[</span><span class="str">'in'</span><span class="sym">]));</span>
<span class="kwa">var</span> buffer <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span>
<span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> stdin<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">()) !=</span> <span class="kwa">null</span><span class="sym">) {</span>
   <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">.</span><span class="kwc">charCodeAt</span><span class="sym">(</span><span class="num">0</span><span class="sym">) ==</span> <span class="num">62</span><span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>buffer <span class="sym">!=</span> <span class="str">&quot;&quot;</span><span class="sym">) {</span>
         <span class="kwd">print60reverse</span><span class="sym">(</span>buffer<span class="sym">.</span><span class="kwc">toUpperCase</span><span class="sym">());</span>
         buffer <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwc">print</span><span class="sym">(</span>line<span class="sym">);</span>
   <span class="sym">}</span> <span class="kwa">else</span> buffer <span class="sym">+=</span> line<span class="sym">;</span>
<span class="sym">}</span>
<span class="kwd">print60reverse</span><span class="sym">(</span>buffer<span class="sym">.</span><span class="kwc">toUpperCase</span><span class="sym">());</span>

