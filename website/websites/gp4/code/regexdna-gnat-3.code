<span class="hl slc">-----------------------------------------------------------------------</span>
<span class="hl slc">-- The Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- contributed by Jim Rogers</span>
<span class="hl slc">-- modified by Björn Persson</span>
<span class="hl slc">-----------------------------------------------------------------------</span>
<span class="hl kwa">with</span> Ada.Text_Io<span class="hl sym">;</span>
<span class="hl kwa">use</span> Ada.Text_Io<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Integer_Text_Io<span class="hl sym">;</span>
<span class="hl kwa">use</span> Ada.Integer_Text_Io<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Strings.Unbounded<span class="hl sym">;</span>
<span class="hl kwa">use</span> Ada.Strings.Unbounded<span class="hl sym">;</span>
<span class="hl kwa">with</span> Gnat.Regpat<span class="hl sym">;</span>
<span class="hl kwa">use</span> Gnat.Regpat<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Regexdna <span class="hl kwa">is</span>

   <span class="hl kwa">type</span> Sequence_Lines <span class="hl kwa">is array</span> <span class="hl sym">(</span><span class="hl kwb">Positive</span> <span class="hl kwa">range</span> <span class="hl sym">&lt;&gt;)</span> <span class="hl kwa">of</span> Unbounded_String<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Length <span class="hl sym">(</span>
         Item <span class="hl sym">:</span> <span class="hl kwa">in</span>     Sequence_Lines<span class="hl sym">)</span>
     <span class="hl kwa">return</span> <span class="hl kwb">Natural</span> <span class="hl kwa">is</span>
      Sum <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Item<span class="hl sym">'</span><span class="hl kwa">range loop</span>
         Sum <span class="hl sym">:=</span> Sum <span class="hl sym">+</span> Length<span class="hl sym">(</span>Item<span class="hl sym">(</span>I<span class="hl sym">));</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> Sum<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Length<span class="hl sym">;</span>

   Variants <span class="hl sym">:</span> <span class="hl kwa">constant</span>
   <span class="hl kwa">array</span> <span class="hl sym">(</span><span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl sym">&lt;&gt;)</span> <span class="hl kwa">of</span> Unbounded_String <span class="hl sym">:= (</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl sym">));</span>
   Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>

   <span class="hl kwa">type</span> Iub <span class="hl kwa">is</span>
      <span class="hl kwa">record</span>
         Code         <span class="hl sym">:</span> Unbounded_String<span class="hl sym">;</span>
         Alternatives <span class="hl sym">:</span> Unbounded_String<span class="hl sym">;</span>
   <span class="hl kwa">end record</span><span class="hl sym">;</span>
   <span class="hl kwa">subtype</span> Codes_Index <span class="hl kwa">is</span> <span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl num">0</span>.<span class="hl num">.10</span><span class="hl sym">;</span>
   <span class="hl kwa">type</span> Codes_Array <span class="hl kwa">is array</span> <span class="hl sym">(</span>Codes_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> Iub<span class="hl sym">;</span>
   Codes <span class="hl sym">:</span> <span class="hl kwa">constant</span> Codes_Array <span class="hl sym">:= (</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)));</span>

   <span class="hl kwa">type</span> Matcher_Array <span class="hl kwa">is array</span><span class="hl sym">(</span>Codes_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> Pattern_Matcher<span class="hl sym">(</span><span class="hl num">1024</span><span class="hl sym">);</span>
   Compiled_Codes <span class="hl sym">:</span> Matcher_Array<span class="hl sym">;</span>

   Sequence       <span class="hl sym">:</span> Sequence_Lines <span class="hl sym">(</span><span class="hl num">1</span> .. <span class="hl num">1</span>_000_000<span class="hl sym">) := (</span><span class="hl kwa">others</span> <span class="hl sym">=&gt;</span> Null_Unbounded_String<span class="hl sym">);</span>
   Continuous     <span class="hl sym">:</span> Unbounded_String<span class="hl sym">;</span>
   Initial_Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Line_Length    <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Line           <span class="hl sym">:</span> <span class="hl kwb">String</span> <span class="hl sym">(</span><span class="hl num">1</span> .. <span class="hl num">80</span><span class="hl sym">);</span>
   Num_Lines      <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   R              <span class="hl sym">:</span> Pattern_Matcher <span class="hl sym">(</span><span class="hl num">1024</span><span class="hl sym">);</span>
   Code_Length    <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Position       <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl slc">-- Read FASTA Sequence</span>
   <span class="hl kwa">while not</span> End_Of_File <span class="hl kwa">loop</span>
      Ada.Text_Io.Get_Line<span class="hl sym">(</span>
         Item <span class="hl sym">=&gt;</span> Line<span class="hl sym">,</span>
         Last <span class="hl sym">=&gt;</span> Line_Length<span class="hl sym">);</span>
      Num_Lines <span class="hl sym">:=</span> Num_Lines <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      Append<span class="hl sym">(</span>
         Source   <span class="hl sym">=&gt;</span> Sequence <span class="hl sym">(</span>Num_Lines<span class="hl sym">),</span>
         New_Item <span class="hl sym">=&gt;</span> Line <span class="hl sym">(</span><span class="hl num">1</span> .. Line_Length<span class="hl sym">));</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   Initial_Length <span class="hl sym">:=</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">(</span><span class="hl num">1</span>..Num_Lines<span class="hl sym">)) +</span> Num_Lines<span class="hl sym">;</span>

   <span class="hl slc">-- remove FASTA descriptions</span>
   Compile<span class="hl sym">(</span>
      Matcher    <span class="hl sym">=&gt;</span> R<span class="hl sym">,</span>
      Expression <span class="hl sym">=&gt;</span> <span class="hl str">&quot;&gt;.*&quot;</span><span class="hl sym">,</span>
      Flags      <span class="hl sym">=&gt;</span> Case_Insensitive<span class="hl sym">);</span>
   <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">1</span>..Num_Lines <span class="hl kwa">loop</span>
      <span class="hl kwa">if</span> Match<span class="hl sym">(</span>R<span class="hl sym">,</span> To_String<span class="hl sym">(</span>Sequence<span class="hl sym">(</span>I<span class="hl sym">)))</span> <span class="hl kwa">then</span>
         Sequence<span class="hl sym">(</span>I<span class="hl sym">) :=</span> Null_Unbounded_String<span class="hl sym">;</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
      Append<span class="hl sym">(</span>
         Source   <span class="hl sym">=&gt;</span> Continuous<span class="hl sym">,</span>
         New_Item <span class="hl sym">=&gt;</span> Sequence <span class="hl sym">(</span>I<span class="hl sym">));</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   Code_Length <span class="hl sym">:=</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">);</span>

   <span class="hl kwa">declare</span>
      Fixed_Sequence <span class="hl sym">:</span> <span class="hl kwb">String</span> <span class="hl sym">:=</span> To_String<span class="hl sym">(</span>Continuous<span class="hl sym">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl slc">-- regex match</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Variants<span class="hl sym">'</span><span class="hl kwa">range loop</span>
         Count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         Position <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         Compile<span class="hl sym">(</span>
            Matcher    <span class="hl sym">=&gt;</span> R<span class="hl sym">,</span>
            Expression <span class="hl sym">=&gt;</span> To_String <span class="hl sym">(</span>Variants <span class="hl sym">(</span>I<span class="hl sym">)),</span>
            Flags      <span class="hl sym">=&gt;</span> Case_Insensitive<span class="hl sym">);</span>
         <span class="hl kwa">loop</span>
            Position <span class="hl sym">:=</span> Match<span class="hl sym">(</span>
               Self       <span class="hl sym">=&gt;</span> R<span class="hl sym">,</span>
               Data       <span class="hl sym">=&gt;</span> Fixed_Sequence<span class="hl sym">,</span>
               Data_First <span class="hl sym">=&gt;</span> Position <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
            <span class="hl kwa">exit when</span> Position <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            Count <span class="hl sym">:=</span> Count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         Put<span class="hl sym">(</span>To_String<span class="hl sym">(</span>Variants<span class="hl sym">(</span>I<span class="hl sym">) &amp;</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">));</span>
         Put<span class="hl sym">(</span>
            Item  <span class="hl sym">=&gt;</span> Count<span class="hl sym">,</span>
            Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
         New_Line<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span><span class="hl sym">;</span>

   <span class="hl slc">-- regex substitution</span>
   <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Codes_Index <span class="hl kwa">loop</span>
      Compile<span class="hl sym">(</span>Matcher <span class="hl sym">=&gt;</span> Compiled_Codes<span class="hl sym">(</span>I<span class="hl sym">),</span>
         Expression <span class="hl sym">=&gt;</span> To_String<span class="hl sym">(</span>Codes<span class="hl sym">(</span>I<span class="hl sym">)</span>.Code<span class="hl sym">),</span>
         Flags <span class="hl sym">=&gt;</span> No_Flags<span class="hl sym">);</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>

   Continuous <span class="hl sym">:=</span> Null_Unbounded_String<span class="hl sym">;</span>

   <span class="hl kwa">for</span> J <span class="hl kwa">in</span> <span class="hl num">1</span>..Num_Lines <span class="hl kwa">loop</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Codes_Index<span class="hl sym">'</span><span class="hl kwa">range loop</span>
         Position <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">loop</span>
            Position <span class="hl sym">:=</span> Match<span class="hl sym">(</span>
               Self       <span class="hl sym">=&gt;</span> Compiled_Codes<span class="hl sym">(</span>I<span class="hl sym">),</span>
               Data       <span class="hl sym">=&gt;</span> To_String <span class="hl sym">(</span>Sequence<span class="hl sym">(</span>J<span class="hl sym">)),</span>
               Data_First <span class="hl sym">=&gt;</span> Position <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
            <span class="hl kwa">exit when</span> Position <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            Replace_Slice<span class="hl sym">(</span>
               Source <span class="hl sym">=&gt;</span> Sequence<span class="hl sym">(</span>J<span class="hl sym">),</span>
               Low    <span class="hl sym">=&gt;</span> Position<span class="hl sym">,</span>
               High   <span class="hl sym">=&gt;</span> Position<span class="hl sym">,</span>
               By     <span class="hl sym">=&gt;</span> To_String<span class="hl sym">(</span>Codes<span class="hl sym">(</span>I<span class="hl sym">)</span>.Alternatives<span class="hl sym">));</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      Append<span class="hl sym">(</span>Source <span class="hl sym">=&gt;</span> Continuous<span class="hl sym">,</span> New_Item <span class="hl sym">=&gt;</span> Sequence<span class="hl sym">(</span>J<span class="hl sym">));</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>

   New_Line<span class="hl sym">;</span>
   Put<span class="hl sym">(</span>
      Item  <span class="hl sym">=&gt;</span> Initial_Length<span class="hl sym">,</span>
      Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
   New_Line<span class="hl sym">;</span>
   Put<span class="hl sym">(</span>
      Item  <span class="hl sym">=&gt;</span> Code_Length<span class="hl sym">,</span>
      Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
   New_Line<span class="hl sym">;</span>
   Put<span class="hl sym">(</span>
      Item  <span class="hl sym">=&gt;</span> Length <span class="hl sym">(</span>Continuous<span class="hl sym">),</span>
      Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
<span class="hl kwa">end</span> Regexdna<span class="hl sym">;</span>
