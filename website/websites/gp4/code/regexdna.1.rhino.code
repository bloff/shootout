<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Josh Goldfoot</span>
<span class="hl com">   for JavaScript Rhino only</span>
<span class="hl com">*/</span>

<span class="hl kwd">importPackage</span><span class="hl sym">(</span>java<span class="hl sym">.</span>io<span class="hl sym">);</span>
<span class="hl kwd">importPackage</span><span class="hl sym">(</span>java<span class="hl sym">.</span>lang<span class="hl sym">);</span>

<span class="hl kwa">var</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedReader</span><span class="hl sym">(</span>
   <span class="hl kwa">new</span> <span class="hl kwd">InputStreamReader</span><span class="hl sym">(</span>Packages<span class="hl sym">.</span>java<span class="hl sym">.</span>lang<span class="hl sym">.</span>System<span class="hl sym">[</span><span class="hl str">'in'</span><span class="hl sym">]));</span>
<span class="hl kwa">var</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuffer</span><span class="hl sym">(</span><span class="hl num">10240</span><span class="hl sym">);</span>
<span class="hl kwa">var</span> cbuf <span class="hl sym">=</span> java<span class="hl sym">.</span>lang<span class="hl sym">.</span>reflect<span class="hl sym">.</span><span class="hl kwc">Array</span><span class="hl sym">.</span><span class="hl kwd">newInstance</span><span class="hl sym">(</span>
   java<span class="hl sym">.</span>lang<span class="hl sym">.</span>Character<span class="hl sym">.</span>TYPE<span class="hl sym">,</span> <span class="hl num">10240</span><span class="hl sym">);</span>
<span class="hl kwa">var</span> charsRead<span class="hl sym">;</span>

<span class="hl kwa">while</span> <span class="hl sym">((</span>charsRead <span class="hl sym">=</span> r<span class="hl sym">.</span><span class="hl kwd">read</span><span class="hl sym">(</span>cbuf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">10240</span><span class="hl sym">)) != -</span><span class="hl num">1</span><span class="hl sym">)</span>
   sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>cbuf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> charsRead<span class="hl sym">);</span>
<span class="hl kwa">var</span> seq <span class="hl sym">=</span> <span class="hl str">''</span> <span class="hl sym">+</span> sb<span class="hl sym">.</span><span class="hl kwc">toString</span><span class="hl sym">();</span>
 <span class="hl slc">// seq is now a JavaScript string, not a Java string.  Keeping it Java</span>
 <span class="hl slc">// might be faster, but wouldn't test JavaScript's speed.</span>
sb <span class="hl sym">=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>

<span class="hl kwa">var</span> initialLength <span class="hl sym">=</span> seq<span class="hl sym">.</span><span class="hl kwc">length</span><span class="hl sym">;</span>
seq <span class="hl sym">=</span> seq<span class="hl sym">.</span><span class="hl kwc">replace</span><span class="hl sym">( /&gt;.*</span>\n<span class="hl sym">|</span>\n<span class="hl sym">/</span>g<span class="hl sym">,</span> <span class="hl str">''</span><span class="hl sym">);</span>
<span class="hl kwa">var</span> codeLength <span class="hl sym">=</span> seq<span class="hl sym">.</span><span class="hl kwc">length</span><span class="hl sym">;</span>

<span class="hl kwa">var</span> variants <span class="hl sym">= [</span> <span class="hl str">'agggtaaa|tttaccct'</span><span class="hl sym">,</span><span class="hl str">'[cgt]gggtaaa|tttaccc[acg]'</span><span class="hl sym">,</span>
   <span class="hl str">'a[act]ggtaaa|tttacc[agt]t'</span><span class="hl sym">,</span> <span class="hl str">'ag[act]gtaaa|tttac[agt]ct'</span><span class="hl sym">,</span>
   <span class="hl str">'agg[act]taaa|ttta[agt]cct'</span><span class="hl sym">,</span> <span class="hl str">'aggg[acg]aaa|ttt[cgt]ccct'</span><span class="hl sym">,</span>
   <span class="hl str">'agggt[cgt]aa|tt[acg]accct'</span><span class="hl sym">,</span> <span class="hl str">'agggta[cgt]a|t[acg]taccct'</span><span class="hl sym">,</span>
   <span class="hl str">'agggtaa[cgt]|[acg]ttaccct'</span> <span class="hl sym">];</span>
<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">var</span> i <span class="hl kwa">in</span> variants<span class="hl sym">) {</span>
   <span class="hl kwa">var</span> matches <span class="hl sym">=</span> seq<span class="hl sym">.</span><span class="hl kwc">match</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">RegExp</span><span class="hl sym">(</span>variants<span class="hl sym">[</span>i<span class="hl sym">],</span><span class="hl str">'g'</span><span class="hl sym">));</span>
   <span class="hl kwa">var</span> nummatches <span class="hl sym">= (</span>matches <span class="hl sym">!=</span> <span class="hl kwa">null</span><span class="hl sym">)</span> ? matches<span class="hl sym">.</span><span class="hl kwc">length</span> <span class="hl sym">:</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwc">print</span><span class="hl sym">(</span>variants<span class="hl sym">[</span>i<span class="hl sym">] +</span> <span class="hl str">' '</span> <span class="hl sym">+</span> nummatches<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">var</span> iubs<span class="hl sym">={</span><span class="hl str">'B'</span><span class="hl sym">:</span><span class="hl str">'(c|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'D'</span><span class="hl sym">:</span><span class="hl str">'(a|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'H'</span><span class="hl sym">:</span><span class="hl str">'(a|c|t)'</span><span class="hl sym">,</span> <span class="hl str">'K'</span><span class="hl sym">:</span><span class="hl str">'(g|t)'</span><span class="hl sym">,</span>
   <span class="hl str">'M'</span><span class="hl sym">:</span><span class="hl str">'(a|c)'</span><span class="hl sym">,</span> <span class="hl str">'N'</span><span class="hl sym">:</span><span class="hl str">'(a|c|g|t)'</span><span class="hl sym">,</span> <span class="hl str">'R'</span><span class="hl sym">:</span><span class="hl str">'(a|g)'</span><span class="hl sym">,</span> <span class="hl str">'S'</span><span class="hl sym">:</span><span class="hl str">'(c|g)'</span><span class="hl sym">,</span>
   <span class="hl str">'V'</span><span class="hl sym">:</span><span class="hl str">'(a|c|g)'</span><span class="hl sym">,</span> <span class="hl str">'W'</span><span class="hl sym">:</span><span class="hl str">'(a|t)'</span><span class="hl sym">,</span> <span class="hl str">'Y'</span><span class="hl sym">:</span><span class="hl str">'(c|t)'</span><span class="hl sym">};</span>
<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">var</span> x <span class="hl kwa">in</span> iubs<span class="hl sym">) {</span>
   seq <span class="hl sym">=</span> seq<span class="hl sym">.</span><span class="hl kwc">replace</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">RegExp</span><span class="hl sym">(</span>x<span class="hl sym">,</span> <span class="hl str">'g'</span><span class="hl sym">),</span> iubs<span class="hl sym">[</span>x<span class="hl sym">]);</span>
   <span class="hl slc">// Passing Regexp object is required by benchmark.</span>
   <span class="hl slc">// Otherwise String.replace matches as a string</span>
<span class="hl sym">}</span>
<span class="hl kwc">print</span><span class="hl sym">();</span>
<span class="hl kwc">print</span><span class="hl sym">(</span>initialLength<span class="hl sym">);</span>
<span class="hl kwc">print</span><span class="hl sym">(</span>codeLength<span class="hl sym">);</span>
<span class="hl kwc">print</span><span class="hl sym">(</span>seq<span class="hl sym">.</span><span class="hl kwc">length</span><span class="hl sym">);</span>
