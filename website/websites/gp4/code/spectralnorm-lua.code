<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Isaac Gouy</span>
<span class="slc">-- modified by Adrian Sietsma</span>


<span class="kwa">function</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)</span> <span class="kwa">local</span> x <span class="sym">=</span> i<span class="sym">+</span>j<span class="sym">;</span><span class="kwa">return</span> <span class="num">2</span><span class="sym">/(</span>x<span class="sym">*</span>x<span class="sym">+</span>x  <span class="sym">+</span>i<span class="sym">+</span>i<span class="sym">+</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">end</span>

<span class="kwa">function</span> Av<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">)</span>
   <span class="kwa">local</span> Av <span class="sym">= {}</span>
   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span> <span class="kwa">do</span>
      <span class="kwa">local</span> a <span class="sym">=</span> A<span class="sym">(</span>i<span class="sym">,</span><span class="num">0</span><span class="sym">)*</span>v<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
      <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span> <span class="kwa">do</span> a <span class="sym">=</span> a <span class="sym">+ (</span>A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">])</span> <span class="kwa">end</span>
      Av<span class="sym">[</span>i<span class="sym">] =</span> a
   <span class="kwa">end</span>
   <span class="kwa">return</span> Av
<span class="kwa">end</span>

<span class="kwa">function</span> Atv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">)</span>
   <span class="kwa">local</span> Atv <span class="sym">= {}</span>
   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span> <span class="kwa">do</span>
      <span class="kwa">local</span> a <span class="sym">=</span> A<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>i<span class="sym">)*</span>v<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
      <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span> <span class="kwa">do</span> a <span class="sym">=</span> a <span class="sym">+</span> A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">]</span> <span class="kwa">end</span>
      Atv<span class="sym">[</span>i<span class="sym">] =</span> a
   <span class="kwa">end</span>
   <span class="kwa">return</span> Atv
<span class="kwa">end</span>

<span class="kwa">function</span> AtAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">)</span>
   <span class="kwa">return</span> Atv<span class="sym">(</span>n<span class="sym">,</span> Av<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">))</span>
<span class="kwa">end</span>


<span class="kwa">local</span> n <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">100</span>

<span class="kwa">local</span> u<span class="sym">,</span>v <span class="sym">= {},{}</span>
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span> <span class="kwa">do</span> u<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">1</span> <span class="kwa">end</span>

<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span><span class="num">10</span> <span class="kwa">do</span> v <span class="sym">=</span> AtAv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">);</span> u <span class="sym">=</span> AtAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">)</span> <span class="kwa">end</span>

<span class="kwa">local</span> vi <span class="sym">=</span> v<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
<span class="kwa">local</span> vBv<span class="sym">,</span>vv <span class="sym">=</span> u<span class="sym">[</span><span class="num">0</span><span class="sym">]*</span>vi<span class="sym">,</span> vi<span class="sym">*</span>vi
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span> <span class="kwa">do</span> vi <span class="sym">=</span> v<span class="sym">[</span>i<span class="sym">];</span>vBv <span class="sym">=</span> vBv <span class="sym">+</span> u<span class="sym">[</span>i<span class="sym">]*</span>vi<span class="sym">;</span> vv <span class="sym">=</span> vv <span class="sym">+</span> vi<span class="sym">*</span>vi <span class="kwa">end</span>

io.<span class="kwa">write</span><span class="sym">(</span> <span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;%0.9f&quot;</span><span class="sym">,</span> math.<span class="kwa">sqrt</span><span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">) ),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

