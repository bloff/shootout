<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy *&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

fasta
   <span class="sym">|</span> n stdout r <span class="sym">|</span>
   n <span class="sym">:=</span> CEnvironment argv first asNumber<span class="sym">.</span>
   stdout <span class="sym">:=</span> ExternalWriteStream on<span class="sym">:</span>
      <span class="sym">(</span>ExternalConnection ioAccessor<span class="sym">: (</span>UnixDiskFileAccessor new handle<span class="sym">:</span> <span class="num">1</span><span class="sym">)).</span>

   stdout writeFasta<span class="sym">:</span> <span class="str">'ONE Homo sapiens alu'</span> sequence<span class="sym">:</span>
   <span class="sym">(</span> RepeatStream to<span class="sym">:</span> n<span class="sym">*</span><span class="num">2</span> on<span class="sym">:</span>
      <span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span><span class="sym">,</span>
      <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span><span class="sym">,</span>
      <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span><span class="sym">,</span>
      <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span><span class="sym">,</span>
      <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span><span class="sym">,</span>
      <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span><span class="sym">,</span>
      <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span> <span class="sym">).</span>

   r <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span> &quot;Shared random sequence&quot;

   stdout writeFasta<span class="sym">:</span> <span class="str">'TWO IUB ambiguity codes'</span> sequence<span class="sym">:</span>
   <span class="sym">((</span> RandomStream to<span class="sym">:</span> n<span class="sym">*</span><span class="num">3</span> on<span class="sym">: (</span>
      OrderedCollection new
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>a value<span class="sym">:</span> <span class="num">0.27</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>c value<span class="sym">:</span> <span class="num">0.12</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>g value<span class="sym">:</span> <span class="num">0.12</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>t value<span class="sym">:</span> <span class="num">0.27</span>d<span class="sym">);</span>

         add<span class="sym">: (</span>Association key<span class="sym">: $</span>B value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>D value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>H value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>K value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>M value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>N value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>R value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>S value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>V value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>W value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>Y value<span class="sym">:</span> <span class="num">0.02</span>d<span class="sym">);</span>
         yourself <span class="sym">))</span> random<span class="sym">:</span> r<span class="sym">).</span>

   stdout writeFasta<span class="sym">:</span> <span class="str">'THREE Homo sapiens frequency'</span> sequence<span class="sym">:</span>
   <span class="sym">((</span> RandomStream to<span class="sym">:</span> n<span class="sym">*</span><span class="num">5</span> on<span class="sym">: (</span>
      OrderedCollection new
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>a value<span class="sym">:</span> <span class="num">0.3029549426680</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>c value<span class="sym">:</span> <span class="num">0.1979883004921</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>g value<span class="sym">:</span> <span class="num">0.1975473066391</span>d<span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>t value<span class="sym">:</span> <span class="num">0.3015094502008</span>d<span class="sym">);</span>
         yourself <span class="sym">))</span> random<span class="sym">:</span> r<span class="sym">).</span>

   stdout flush<span class="sym">.</span>
   <span class="sym">^</span><span class="str">''</span> <span class="sym">! !</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>RepeatStream
	superclass<span class="sym">: #</span>{Core<span class="sym">.</span>ReadStream}
	indexedType<span class="sym">: #</span>none
	private<span class="sym">:</span> <span class="kwa">false</span>
	instanceVariableNames<span class="sym">:</span> <span class="str">'repeatPtr repeatLimit'</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>RepeatStream class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger on<span class="sym">:</span> aCollection
   <span class="sym">^(</span><span class="kwa">super</span> on<span class="sym">:</span> aCollection<span class="sym">)</span> to<span class="sym">:</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   repeatPtr <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   repeatLimit <span class="sym">:=</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

next
   position <span class="sym">&gt;=</span> readLimit ifTrue<span class="sym">: [</span> <span class="kwa">self</span> position<span class="sym">:</span> <span class="num">0</span> <span class="sym">].</span>
   repeatPtr <span class="sym">:=</span> repeatPtr <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
   <span class="sym">^</span>collection at<span class="sym">: (</span>position <span class="sym">:=</span> position <span class="sym">+</span> <span class="num">1</span><span class="sym">) ! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!</span>

atEnd
   <span class="sym">^</span>repeatPtr <span class="sym">&gt;=</span> repeatLimit <span class="sym">! !</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>RandomStream
	superclass<span class="sym">: #</span>{Shootout<span class="sym">.</span>RepeatStream}
	indexedType<span class="sym">: #</span>none
	private<span class="sym">:</span> <span class="kwa">false</span>
	instanceVariableNames<span class="sym">:</span> <span class="str">'random percentages'</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

on<span class="sym">:</span> aCollection
   <span class="sym">|</span> size cp <span class="sym">|</span>
   repeatPtr <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   random <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1.0</span><span class="sym">.</span>
   size <span class="sym">:=</span> aCollection size<span class="sym">.</span>
   percentages <span class="sym">:=</span> Array new<span class="sym">:</span> size<span class="sym">.</span>
   collection <span class="sym">:=</span> Array new<span class="sym">:</span> size<span class="sym">.</span>
   cp <span class="sym">:=</span> <span class="num">0.0</span>d<span class="sym">.</span>
   <span class="num">1</span> to<span class="sym">:</span> size do<span class="sym">: [:</span>i<span class="sym">|</span>
      collection at<span class="sym">:</span> i put<span class="sym">: (</span>aCollection at<span class="sym">:</span> i<span class="sym">)</span> key<span class="sym">.</span>
      percentages at<span class="sym">:</span> i put<span class="sym">: (</span>cp <span class="sym">:=</span> cp <span class="sym">+ (</span>aCollection at<span class="sym">:</span> i<span class="sym">)</span> value<span class="sym">).</span>
   <span class="sym">] ! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

next
   <span class="sym">|</span> r <span class="sym">|</span>
   r <span class="sym">:=</span> random next<span class="sym">.</span>
   repeatPtr <span class="sym">:=</span> repeatPtr <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
   <span class="num">1</span> to<span class="sym">:</span> percentages size do<span class="sym">: [:</span>i<span class="sym">|</span>
      <span class="sym">(</span>r <span class="sym">&lt; (</span>percentages at<span class="sym">:</span> i<span class="sym">))</span> ifTrue<span class="sym">: [^</span>collection at<span class="sym">:</span> i<span class="sym">]] !</span>

random<span class="sym">:</span> aRandomNumber
<span class="com">&quot;* Share the random number generator so we can get the expected results. *&quot;</span>
   random <span class="sym">:=</span> aRandomNumber <span class="sym">! !</span>


<span class="sym">!</span> ExternalWriteStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

writeFasta<span class="sym">:</span> aString sequence<span class="sym">:</span> aStream
   <span class="sym">|</span> i <span class="sym">|</span>
   <span class="kwa">self</span> nextPut<span class="sym">: $&gt;;</span> nextPutAll<span class="sym">:</span> aString<span class="sym">;</span> cr<span class="sym">.</span>
   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   <span class="sym">[</span>aStream atEnd<span class="sym">]</span> whileFalse<span class="sym">: [</span>
      <span class="sym">(</span>i <span class="sym">==</span> <span class="num">60</span><span class="sym">)</span> ifTrue<span class="sym">: [</span><span class="kwa">self</span> cr<span class="sym">.</span> i <span class="sym">:=</span> <span class="num">0</span><span class="sym">].</span>
      <span class="kwa">self</span> nextPut<span class="sym">:</span> aStream next<span class="sym">.</span>
      i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
      <span class="sym">].</span>
   <span class="kwa">self</span> cr <span class="sym">! !</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>RandomNumber
	superclass<span class="sym">: #</span>{Core<span class="sym">.</span>Object}
	indexedType<span class="sym">: #</span>none
	private<span class="sym">:</span> <span class="kwa">false</span>
	instanceVariableNames<span class="sym">:</span> <span class="str">'seed scale '</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>

Shootout<span class="sym">.</span>RandomNumber defineSharedVariable<span class="sym">: #</span>Modulus
	private<span class="sym">:</span> <span class="kwa">false</span>
	constant<span class="sym">:</span> <span class="kwa">false</span>
	category<span class="sym">:</span> <span class="str">'computer language shootout'</span>
	initializer<span class="sym">:</span> <span class="str">'139968'</span><span class="sym">!</span>

<span class="sym">#</span>{Shootout<span class="sym">.</span>RandomNumber<span class="sym">.</span>Modulus} initialize<span class="sym">!</span>

Shootout<span class="sym">.</span>RandomNumber defineSharedVariable<span class="sym">: #</span>FModulus
	private<span class="sym">:</span> <span class="kwa">false</span>
	constant<span class="sym">:</span> <span class="kwa">false</span>
	category<span class="sym">:</span> <span class="str">'computer language shootout'</span>
	initializer<span class="sym">:</span> <span class="str">'139968.0d'</span><span class="sym">!</span>

<span class="sym">#</span>{Shootout<span class="sym">.</span>RandomNumber<span class="sym">.</span>FModulus} initialize<span class="sym">!</span>

Shootout<span class="sym">.</span>RandomNumber defineSharedVariable<span class="sym">: #</span>Multiplier
	private<span class="sym">:</span> <span class="kwa">false</span>
	constant<span class="sym">:</span> <span class="kwa">false</span>
	category<span class="sym">:</span> <span class="str">'computer language shootout'</span>
	initializer<span class="sym">:</span> <span class="str">'3877'</span><span class="sym">!</span>

<span class="sym">#</span>{Shootout<span class="sym">.</span>RandomNumber<span class="sym">.</span>Multiplier} initialize<span class="sym">!</span>

Shootout<span class="sym">.</span>RandomNumber defineSharedVariable<span class="sym">: #</span>Increment
	private<span class="sym">:</span> <span class="kwa">false</span>
	constant<span class="sym">:</span> <span class="kwa">false</span>
	category<span class="sym">:</span> <span class="str">'computer language shootout'</span>
	initializer<span class="sym">:</span> <span class="str">'29573'</span><span class="sym">!</span>

<span class="sym">#</span>{Shootout<span class="sym">.</span>RandomNumber<span class="sym">.</span>Increment} initialize<span class="sym">!</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   <span class="sym">^</span><span class="kwa">self</span> basicNew to<span class="sym">:</span> anInteger <span class="sym">! !</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

next
   seed <span class="sym">:= (</span>seed <span class="sym">*</span> Multiplier <span class="sym">+</span> Increment<span class="sym">) \\</span> Modulus<span class="sym">.</span>
   <span class="sym">^(</span>seed <span class="sym">*</span> scale<span class="sym">)</span> asDouble <span class="sym">/</span> FModulus <span class="sym">! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   seed <span class="sym">:=</span> <span class="num">42</span><span class="sym">.</span>
   scale <span class="sym">:=</span> anInteger <span class="sym">! !</span>


