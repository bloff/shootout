<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy&quot;!</span>
<span class="com"></span>
<span class="com">!Shootout.Tests class methodsFor: 'benchmarking'!</span>
<span class="com"></span>
<span class="com">fasta</span>
<span class="com">   | n stdout r |</span>
<span class="com">   n := CEnvironment argv first asNumber.</span>
<span class="com">   stdout := ExternalWriteStream on:</span>
<span class="com">      (ExternalConnection ioAccessor: (UnixDiskFileAccessor new handle: 1)).</span>
<span class="com"></span>
<span class="com">   stdout writeFasta: 'ONE Homo sapiens alu' sequence:</span>
<span class="com">   ( RepeatStream to: n*2 on:</span>
<span class="com">      'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG',</span>
<span class="com">      'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA',</span>
<span class="com">      'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT',</span>
<span class="com">      'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA',</span>
<span class="com">      'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG',</span>
<span class="com">      'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC',</span>
<span class="com">      'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA' ).</span>
<span class="com"></span>
<span class="com">   r := RandomNumber to: 1. &quot;Shared random sequence&quot;</span>
<span class="com"></span>
<span class="com">   stdout writeFasta: 'TWO IUB ambiguity codes' sequence:</span>
<span class="com">   (( RandomStream to: n*3 on: (</span>
<span class="com">      OrderedCollection new</span>
<span class="com">         add: (Association key: $a value: 0.27d);</span>
<span class="com">         add: (Association key: $c value: 0.12d);</span>
<span class="com">         add: (Association key: $g value: 0.12d);</span>
<span class="com">         add: (Association key: $t value: 0.27d);</span>
<span class="com"></span>
<span class="com">         add: (Association key: $B value: 0.02d);</span>
<span class="com">         add: (Association key: $D value: 0.02d);</span>
<span class="com">         add: (Association key: $H value: 0.02d);</span>
<span class="com">         add: (Association key: $K value: 0.02d);</span>
<span class="com">         add: (Association key: $M value: 0.02d);</span>
<span class="com">         add: (Association key: $N value: 0.02d);</span>
<span class="com">         add: (Association key: $R value: 0.02d);</span>
<span class="com">         add: (Association key: $S value: 0.02d);</span>
<span class="com">         add: (Association key: $V value: 0.02d);</span>
<span class="com">         add: (Association key: $W value: 0.02d);</span>
<span class="com">         add: (Association key: $Y value: 0.02d);</span>
<span class="com">         yourself )) random: r).</span>
<span class="com"></span>
<span class="com">   stdout writeFasta: 'THREE Homo sapiens frequency' sequence:</span>
<span class="com">   (( RandomStream to: n*5 on: (</span>
<span class="com">      OrderedCollection new</span>
<span class="com">         add: (Association key: $a value: 0.3029549426680d);</span>
<span class="com">         add: (Association key: $c value: 0.1979883004921d);</span>
<span class="com">         add: (Association key: $g value: 0.1975473066391d);</span>
<span class="com">         add: (Association key: $t value: 0.3015094502008d);</span>
<span class="com">         yourself )) random: r).</span>
<span class="com"></span>
<span class="com">   stdout flush.</span>
<span class="com">   ^'' ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">Smalltalk.Shootout defineClass: #RepeatStream</span>
<span class="com">	superclass: #{Core.ReadStream}</span>
<span class="com">	indexedType: #none</span>
<span class="com">	private: false</span>
<span class="com">	instanceVariableNames: 'repeatPtr repeatLimit'</span>
<span class="com">	classInstanceVariableNames: ''</span>
<span class="com">	imports: ''</span>
<span class="com">	category: 'Shootout'!</span>
<span class="com"></span>
<span class="com">!Shootout.RepeatStream class methodsFor: 'instance creation'!</span>
<span class="com"></span>
<span class="com">to: anInteger on: aCollection</span>
<span class="com">   ^(super on: aCollection) to: anInteger ! !</span>
<span class="com"></span>
<span class="com">!Shootout.RepeatStream methodsFor: 'initialize-release'!</span>
<span class="com"></span>
<span class="com">to: anInteger</span>
<span class="com">   repeatPtr := 0.</span>
<span class="com">   repeatLimit := anInteger ! !</span>
<span class="com"></span>
<span class="com">!Shootout.RepeatStream methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">next</span>
<span class="com">   position &gt;= readLimit ifTrue: [ self position: 0 ].</span>
<span class="com">   repeatPtr := repeatPtr + 1.</span>
<span class="com">   ^collection at: (position := position + 1) ! !</span>
<span class="com"></span>
<span class="com">!Shootout.RepeatStream methodsFor: 'testing'!</span>
<span class="com"></span>
<span class="com">atEnd</span>
<span class="com">   ^repeatPtr &gt;= repeatLimit ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">Smalltalk.Shootout defineClass: #RandomStream</span>
<span class="com">	superclass: #{Shootout.RepeatStream}</span>
<span class="com">	indexedType: #none</span>
<span class="com">	private: false</span>
<span class="com">	instanceVariableNames: 'random percentages'</span>
<span class="com">	classInstanceVariableNames: ''</span>
<span class="com">	imports: ''</span>
<span class="com">	category: 'Shootout'!</span>
<span class="com"></span>
<span class="com">!Shootout.RepeatStream methodsFor: 'initialize-release'!</span>
<span class="com"></span>
<span class="com">on: aCollection</span>
<span class="com">   | size cp |</span>
<span class="com">   repeatPtr := 0.</span>
<span class="com">   random := RandomNumber to: 1.0.</span>
<span class="com">   size := aCollection size.</span>
<span class="com">   percentages := Array new: size.</span>
<span class="com">   collection := Array new: size.</span>
<span class="com">   cp := 0.0d.</span>
<span class="com">   1 to: size do: [:i|</span>
<span class="com">      collection at: i put: (aCollection at: i) key.</span>
<span class="com">      percentages at: i put: (cp := cp + (aCollection at: i) value).</span>
<span class="com">   ] ! !</span>
<span class="com"></span>
<span class="com">!Shootout.RepeatStream methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">next</span>
<span class="com">   | r |</span>
<span class="com">   r := random next.</span>
<span class="com">   repeatPtr := repeatPtr + 1.</span>
<span class="com">   1 to: percentages size do: [:i|</span>
<span class="com">      (r &lt; (percentages at: i)) ifTrue: [^collection at: i]] !</span>
<span class="com"></span>
<span class="com">random: aRandomNumber</span>
<span class="com">&quot;Share the random number generator so we can get the expected results.&quot;</span>
<span class="com">   random := aRandomNumber ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">! ExternalWriteStream methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">writeFasta: aString sequence: aStream</span>
<span class="com">   | i |</span>
<span class="com">   self nextPut: $&gt;; nextPutAll: aString; cr.</span>
<span class="com">   i := 0.</span>
<span class="com">   [aStream atEnd] whileFalse: [</span>
<span class="com">      (i == 60) ifTrue: [self cr. i := 0].</span>
<span class="com">      self nextPut: aStream next.</span>
<span class="com">      i := i + 1.</span>
<span class="com">      ].</span>
<span class="com">   self cr ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">Smalltalk.Shootout defineClass: #RandomNumber</span>
<span class="com">	superclass: #{Core.Object}</span>
<span class="com">	indexedType: #none</span>
<span class="com">	private: false</span>
<span class="com">	instanceVariableNames: 'seed scale '</span>
<span class="com">	classInstanceVariableNames: ''</span>
<span class="com">	imports: ''</span>
<span class="com">	category: 'Shootout'!</span>
<span class="com"></span>
<span class="com">Shootout.RandomNumber defineSharedVariable: #Modulus</span>
<span class="com">	private: false</span>
<span class="com">	constant: false</span>
<span class="com">	category: 'computer language shootout'</span>
<span class="com">	initializer: '139968'!</span>
<span class="com"></span>
<span class="com">#{Shootout.RandomNumber.Modulus} initialize!</span>
<span class="com"></span>
<span class="com">Shootout.RandomNumber defineSharedVariable: #FModulus</span>
<span class="com">	private: false</span>
<span class="com">	constant: false</span>
<span class="com">	category: 'computer language shootout'</span>
<span class="com">	initializer: '139968.0d'!</span>
<span class="com"></span>
<span class="com">#{Shootout.RandomNumber.FModulus} initialize!</span>
<span class="com"></span>
<span class="com">Shootout.RandomNumber defineSharedVariable: #Multiplier</span>
<span class="com">	private: false</span>
<span class="com">	constant: false</span>
<span class="com">	category: 'computer language shootout'</span>
<span class="com">	initializer: '3877'!</span>
<span class="com"></span>
<span class="com">#{Shootout.RandomNumber.Multiplier} initialize!</span>
<span class="com"></span>
<span class="com">Shootout.RandomNumber defineSharedVariable: #Increment</span>
<span class="com">	private: false</span>
<span class="com">	constant: false</span>
<span class="com">	category: 'computer language shootout'</span>
<span class="com">	initializer: '29573'!</span>
<span class="com"></span>
<span class="com">#{Shootout.RandomNumber.Increment} initialize!</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.RandomNumber class methodsFor: 'instance creation'!</span>
<span class="com"></span>
<span class="com">to: anInteger</span>
<span class="com">   ^self basicNew to: anInteger ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.RandomNumber methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">next</span>
<span class="com">   seed := (seed * Multiplier + Increment) \\ Modulus.</span>
<span class="com">   ^(seed * scale) asDouble / FModulus ! !</span>
<span class="com"></span>
<span class="com">!Shootout.RandomNumber methodsFor: 'private'!</span>
<span class="com"></span>
<span class="com">to: anInteger</span>
<span class="com">   seed := 42.</span>
<span class="com">   scale := anInteger ! !</span>
<span class="com"></span>
<span class="com"></span>
