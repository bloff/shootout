<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Isaac Gouy</span>
<span class="com">    modified by Eliot Miranda *&quot;</span><span class="sym">!</span>

Object subclass<span class="sym">: #</span>RandomNumber   instanceVariableNames<span class="sym">:</span> <span class="str">'seed scale'</span>   classVariableNames<span class="sym">:</span> <span class="str">'FModulus Increment Modulus Multiplier'</span>   poolDictionaries<span class="sym">:</span> <span class="str">''</span>   category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>

ReadStream subclass<span class="sym">: #</span>RepeatStream   instanceVariableNames<span class="sym">:</span> <span class="str">'repeatPtr repeatLimit'</span>   classVariableNames<span class="sym">:</span> <span class="str">''</span>   poolDictionaries<span class="sym">:</span> <span class="str">''</span>   category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>

RepeatStream subclass<span class="sym">: #</span>RandomStream   instanceVariableNames<span class="sym">:</span> <span class="str">'random percentages'</span>   classVariableNames<span class="sym">:</span> <span class="str">''</span>   poolDictionaries<span class="sym">:</span> <span class="str">''</span>   category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>

Object subclass<span class="sym">: #</span>Tests   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>   classVariableNames<span class="sym">:</span> <span class="str">''</span>   poolDictionaries<span class="sym">:</span> <span class="str">''</span>   category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>to<span class="sym">:</span> anInteger   seed <span class="sym">:=</span> <span class="num">42</span><span class="sym">.</span>   scale <span class="sym">:=</span> anInteger<span class="sym">! !!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>next   seed <span class="sym">:= (</span>seed <span class="sym">*</span> Multiplier <span class="sym">+</span> Increment<span class="sym">) \\</span> Modulus<span class="sym">.   ^(</span>seed <span class="sym">*</span> scale<span class="sym">)</span> asFloatD <span class="sym">/</span> FModulus<span class="sym">! !!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'class initialization'</span><span class="sym">!</span>initialize   <span class="kwa">super</span> initialize<span class="sym">.</span>   FModulus <span class="sym">:=</span> <span class="num">139968.0</span>d0<span class="sym">.</span>   Increment <span class="sym">:=</span> <span class="num">29573</span><span class="sym">.</span>   Modulus <span class="sym">:=</span> <span class="num">139968</span><span class="sym">.</span>   Multiplier <span class="sym">:=</span> <span class="num">3877</span><span class="sym">.! !!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>to<span class="sym">:</span> anInteger   <span class="sym">^</span><span class="kwa">self</span> basicNew to<span class="sym">:</span> anInteger<span class="sym">! !!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>next   position <span class="sym">&gt;=</span> readLimit ifTrue<span class="sym">: [</span> <span class="kwa">self</span> position<span class="sym">:</span> <span class="num">0</span> <span class="sym">].</span>   repeatPtr <span class="sym">:=</span> repeatPtr <span class="sym">+</span> <span class="num">1</span><span class="sym">.   ^</span>collection at<span class="sym">: (</span>position <span class="sym">:=</span> position <span class="sym">+</span> <span class="num">1</span><span class="sym">)! !!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!</span>atEnd   <span class="sym">^</span>repeatPtr <span class="sym">&gt;=</span> repeatLimit<span class="sym">! !!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>to<span class="sym">:</span> anInteger   repeatPtr <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>   repeatLimit <span class="sym">:=</span> anInteger<span class="sym">! !!</span>RandomStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>next   <span class="sym">|</span> r <span class="sym">|</span>   r <span class="sym">:=</span> random next<span class="sym">.</span>   repeatPtr <span class="sym">:=</span> repeatPtr <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>   <span class="num">1</span> to<span class="sym">:</span> percentages size do<span class="sym">: [:</span>i<span class="sym">|      (</span>r <span class="sym">&lt; (</span>percentages at<span class="sym">:</span> i<span class="sym">))</span> ifTrue<span class="sym">: [^</span>collection at<span class="sym">:</span> i<span class="sym">]]! !!</span>RandomStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>random<span class="sym">:</span> aRandomNumber<span class="com">&quot;* Share the random number generator so we can get the expected results. *&quot;</span>   random <span class="sym">:=</span> aRandomNumber<span class="sym">! !!</span>RandomStream methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>on<span class="sym">:</span> aCollection   <span class="sym">|</span> size cp <span class="sym">|</span>   repeatPtr <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>   random <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1.0</span>d0<span class="sym">.</span>   size <span class="sym">:=</span> aCollection size<span class="sym">.</span>   percentages <span class="sym">:=</span> Array new<span class="sym">:</span> size<span class="sym">.</span>   collection <span class="sym">:=</span> Array new<span class="sym">:</span> size<span class="sym">.</span>   cp <span class="sym">:=</span> <span class="num">0.0</span>d0<span class="sym">.</span>   <span class="num">1</span> to<span class="sym">:</span> size do<span class="sym">: [:</span>i<span class="sym">|</span>      collection at<span class="sym">:</span> i put<span class="sym">: (</span>aCollection at<span class="sym">:</span> i<span class="sym">)</span> first<span class="sym">.</span>      percentages at<span class="sym">:</span> i put<span class="sym">: (</span>cp <span class="sym">:=</span> cp <span class="sym">+ (</span>aCollection at<span class="sym">:</span> i<span class="sym">)</span> last<span class="sym">).   ]! !!</span>RepeatStream class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>to<span class="sym">:</span> anInteger on<span class="sym">:</span> aCollection   <span class="sym">^(</span><span class="kwa">super</span> on<span class="sym">:</span> aCollection<span class="sym">)</span> to<span class="sym">:</span> anInteger<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>arg   <span class="sym">^</span>CEnvironment commandLine last asNumber<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>postscript   <span class="sym">^</span><span class="str">''</span><span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'platform'</span><span class="sym">!</span>stdout   <span class="sym">^</span>Stdout<span class="sym">! !</span>


<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>
writeFasta<span class="sym">:</span> aString from<span class="sym">:</span> inStream to<span class="sym">:</span> outStream lineLength<span class="sym">:</span> lineLength
   <span class="sym">|</span> i <span class="sym">|</span>
   outStream nextPut<span class="sym">: $&gt;;</span> nextPutAll<span class="sym">:</span> aString<span class="sym">;</span> nextPut<span class="sym">:</span> Character lf<span class="sym">.</span>
   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   <span class="sym">[</span>inStream atEnd<span class="sym">]</span> whileFalse<span class="sym">:</span>
      <span class="sym">[</span>i <span class="sym">==</span> lineLength ifTrue<span class="sym">: [</span>outStream nextPut<span class="sym">:</span> Character lf<span class="sym">.</span> i <span class="sym">:=</span> <span class="num">0</span><span class="sym">].</span>
      outStream nextPut<span class="sym">:</span> inStream next<span class="sym">.</span>
      i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">].</span>
   outStream nextPut<span class="sym">:</span> Character lf <span class="sym">! !</span>

<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>
fasta<span class="sym">:</span> n to<span class="sym">:</span> out
   <span class="sym">|</span> r lineLength <span class="sym">|</span>
   lineLength <span class="sym">:=</span> <span class="num">60</span><span class="sym">.</span>
   <span class="kwa">self</span>
      writeFasta<span class="sym">:</span> <span class="str">'ONE Homo sapiens alu'</span>
      from<span class="sym">:</span>
         <span class="sym">(</span> RepeatStream
            to<span class="sym">:</span> n<span class="sym">*</span><span class="num">2</span>
            on<span class="sym">:</span><span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span><span class="sym">,</span>
               <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span><span class="sym">,</span>
               <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span><span class="sym">,</span>
               <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span><span class="sym">,</span>
               <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span><span class="sym">,</span>
               <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span><span class="sym">,</span>
               <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span> <span class="sym">)</span>
      to<span class="sym">:</span> out
      lineLength<span class="sym">:</span> lineLength<span class="sym">.</span>

   r <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span> &quot;Shared random sequence&quot;

   <span class="kwa">self</span>
      writeFasta<span class="sym">:</span> <span class="str">'TWO IUB ambiguity codes'</span>
      from<span class="sym">:</span>
         <span class="sym">((</span> RandomStream
            to<span class="sym">:</span> n<span class="sym">*</span><span class="num">3</span>
            on<span class="sym">: #(   #($</span>a <span class="num">0.27</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>c <span class="num">0.12</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>g <span class="num">0.12</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>t <span class="num">0.27</span>d0<span class="sym">)</span>

                  <span class="sym">#($</span>B <span class="num">0.02</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>D <span class="num">0.02</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>H <span class="num">0.02</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>K <span class="num">0.02</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>M <span class="num">0.02</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>N <span class="num">0.02</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>R <span class="num">0.02</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>S <span class="num">0.02</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>V <span class="num">0.02</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>W <span class="num">0.02</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>Y <span class="num">0.02</span>d0<span class="sym">)))</span>
         random<span class="sym">:</span> r<span class="sym">;</span>
         yourself<span class="sym">)</span>
      to<span class="sym">:</span> out
      lineLength<span class="sym">:</span> lineLength<span class="sym">.</span>

   <span class="kwa">self</span>
      writeFasta<span class="sym">:</span> <span class="str">'THREE Homo sapiens frequency'</span>
      from<span class="sym">:</span>
         <span class="sym">((</span> RandomStream
            to<span class="sym">:</span> n<span class="sym">*</span><span class="num">5</span>
            on<span class="sym">: #(   #($</span>a <span class="num">0.3029549426680</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>c <span class="num">0.1979883004921</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>g <span class="num">0.1975473066391</span>d0<span class="sym">)</span>
                  <span class="sym">#($</span>t <span class="num">0.3015094502008</span>d0<span class="sym">)))</span>
            random<span class="sym">:</span> r<span class="sym">;</span>
            yourself<span class="sym">)</span>
      to<span class="sym">:</span> out
      lineLength<span class="sym">:</span> lineLength<span class="sym">.</span>

   out flush<span class="sym">. ! !</span>
<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>
fasta   <span class="kwa">self</span> fasta<span class="sym">:</span> <span class="kwa">self</span> arg to<span class="sym">:</span> <span class="kwa">self</span> stdout<span class="sym">.   ^</span><span class="kwa">self</span> postscript<span class="sym">! !</span>

RandomNumber initialize<span class="sym">!</span>
