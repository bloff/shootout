<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by James McIlree</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;</span>

<span class="kwa">public class</span> knucleotide <span class="sym">{</span>
  <span class="kwc">String</span> sequence<span class="sym">;</span>
  <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>

  <span class="kwd">knucleotide</span><span class="sym">(</span><span class="kwc">String</span> s<span class="sym">) {</span>
    sequence <span class="sym">=</span> s<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">Exception</span>
  <span class="sym">{</span>
    <span class="kwc">StringBuffer</span> sbuffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span>
    <span class="kwc">String</span> line<span class="sym">;</span>

    <span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));</span>
    <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> in<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">()) !=</span> null<span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">.</span><span class="kwd">startsWith</span><span class="sym">(</span><span class="str">&quot;&gt;THREE&quot;</span><span class="sym">))</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> in<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">()) !=</span> null<span class="sym">) {</span>
      <span class="kwb">char</span> c <span class="sym">=</span> line<span class="sym">.</span><span class="kwd">charAt</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
        <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">else if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)</span>
        sbuffer<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>line<span class="sym">.</span><span class="kwd">toUpperCase</span><span class="sym">());</span>
    <span class="sym">}</span>

    knucleotide kn <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">knucleotide</span><span class="sym">(</span>sbuffer<span class="sym">.</span><span class="kwd">toString</span><span class="sym">());</span>
    kn<span class="sym">.</span><span class="kwd">writeFrequencies</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    kn<span class="sym">.</span><span class="kwd">writeFrequencies</span><span class="sym">(</span><span class="num">2</span><span class="sym">);</span>

    kn<span class="sym">.</span><span class="kwd">writeCount</span><span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">);</span>
    kn<span class="sym">.</span><span class="kwd">writeCount</span><span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">);</span>
    kn<span class="sym">.</span><span class="kwd">writeCount</span><span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">);</span>
    kn<span class="sym">.</span><span class="kwd">writeCount</span><span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);</span>
    kn<span class="sym">.</span><span class="kwd">writeCount</span><span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);</span>
  <span class="sym">}</span>

  <span class="kwb">void</span> <span class="kwd">writeFrequencies</span><span class="sym">(</span><span class="kwb">int</span> nucleotideLength<span class="sym">) {</span>
    <span class="kwc">Map</span> frequencies <span class="sym">=</span> <span class="kwd">calculateFrequencies</span><span class="sym">(</span>nucleotideLength<span class="sym">);</span>
    <span class="kwc">ArrayList</span> list <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">(</span>frequencies<span class="sym">.</span><span class="kwd">size</span><span class="sym">());</span>
    <span class="kwc">Iterator</span> it <span class="sym">=</span> frequencies<span class="sym">.</span><span class="kwd">entrySet</span><span class="sym">().</span><span class="kwd">iterator</span><span class="sym">();</span>

    <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>it<span class="sym">.</span><span class="kwd">hasNext</span><span class="sym">()) {</span>
      knucleotide fragment <span class="sym">= (</span>knucleotide<span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>it<span class="sym">.</span><span class="kwd">next</span><span class="sym">()).</span><span class="kwd">getValue</span><span class="sym">();</span>
      list<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span>fragment<span class="sym">);</span>
      sum <span class="sym">+=</span> fragment<span class="sym">.</span>count<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwc">Collections</span><span class="sym">.</span><span class="kwd">sort</span><span class="sym">(</span>list<span class="sym">,</span> <span class="kwa">new</span> <span class="kwc">Comparator</span><span class="sym">() {</span>
        <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">compare</span><span class="sym">(</span><span class="kwc">Object</span> o1<span class="sym">,</span> <span class="kwc">Object</span> o2<span class="sym">) {</span>
          <span class="kwb">int</span> c <span class="sym">= ((</span>knucleotide<span class="sym">)</span>o2<span class="sym">).</span>count <span class="sym">- ((</span>knucleotide<span class="sym">)</span>o1<span class="sym">).</span>count<span class="sym">;</span>
          <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
            c <span class="sym">= ((</span>knucleotide<span class="sym">)</span>o1<span class="sym">).</span>sequence<span class="sym">.</span><span class="kwd">compareTo</span><span class="sym">(((</span>knucleotide<span class="sym">)</span>o2<span class="sym">).</span>sequence<span class="sym">);</span>
          <span class="sym">}</span>
          <span class="kwa">return</span> c<span class="sym">;</span>
        <span class="sym">}</span>
      <span class="sym">});</span>

    <span class="kwc">NumberFormat</span> nf <span class="sym">=</span> <span class="kwc">NumberFormat</span><span class="sym">.</span><span class="kwd">getInstance</span><span class="sym">();</span>
    nf<span class="sym">.</span><span class="kwd">setMaximumFractionDigits</span><span class="sym">(</span><span class="num">3</span><span class="sym">);</span>
    nf<span class="sym">.</span><span class="kwd">setMinimumFractionDigits</span><span class="sym">(</span><span class="num">3</span><span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>list<span class="sym">.</span><span class="kwd">size</span><span class="sym">();</span> i<span class="sym">++) {</span>
      knucleotide fragment <span class="sym">= (</span>knucleotide<span class="sym">)</span>list<span class="sym">.</span><span class="kwd">get</span><span class="sym">(</span>i<span class="sym">);</span>
      <span class="kwb">double</span> percent <span class="sym">= (</span><span class="kwb">double</span><span class="sym">)</span>fragment<span class="sym">.</span>count<span class="sym">/(</span><span class="kwb">double</span><span class="sym">)</span>sum <span class="sym">*</span> <span class="num">100.0</span><span class="sym">;</span>
      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>fragment<span class="sym">.</span>sequence <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> nf<span class="sym">.</span><span class="kwd">format</span><span class="sym">(</span>percent<span class="sym">) );</span>
    <span class="sym">}</span>
    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
  <span class="sym">}</span>

  <span class="kwb">void</span> <span class="kwd">writeCount</span><span class="sym">(</span><span class="kwc">String</span> nucleotideFragment<span class="sym">) {</span>
    <span class="kwc">Map</span> frequencies <span class="sym">=</span> <span class="kwd">calculateFrequencies</span><span class="sym">(</span>nucleotideFragment<span class="sym">.</span><span class="kwd">length</span><span class="sym">());</span>

    knucleotide found <span class="sym">= (</span>knucleotide<span class="sym">)</span>frequencies<span class="sym">.</span><span class="kwd">get</span><span class="sym">(</span>nucleotideFragment<span class="sym">);</span>
    <span class="kwb">int</span> count <span class="sym">= (</span>found <span class="sym">==</span> null<span class="sym">)</span> ? <span class="num">0</span> <span class="sym">:</span> found<span class="sym">.</span>count<span class="sym">;</span>
    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>count <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> <span class="sym">+</span> nucleotideFragment<span class="sym">);</span>
  <span class="sym">}</span>

  <span class="kwc">Map</span> <span class="kwd">calculateFrequencies</span><span class="sym">(</span><span class="kwb">int</span> fragmentLength<span class="sym">) {</span>
    <span class="kwc">HashMap</span> map <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> offset<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> offset<span class="sym">&lt;</span>fragmentLength<span class="sym">;</span> offset<span class="sym">++)</span>
      <span class="kwd">calculateFrequencies</span><span class="sym">(</span>map<span class="sym">,</span> offset<span class="sym">,</span> fragmentLength<span class="sym">);</span>

    <span class="kwa">return</span> map<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="slc">// Is this method really needed? The benchmark specification seems to</span>
  <span class="slc">// indicate so, but it is not entirely clear. This method could easily</span>
  <span class="slc">// be folded up.</span>
  <span class="kwb">void</span> <span class="kwd">calculateFrequencies</span><span class="sym">(</span><span class="kwc">Map</span> map<span class="sym">,</span> <span class="kwb">int</span> offset<span class="sym">,</span> <span class="kwb">int</span> fragmentLength<span class="sym">) {</span>
    <span class="kwb">int</span> lastIndex <span class="sym">=</span> sequence<span class="sym">.</span><span class="kwd">length</span><span class="sym">() -</span> fragmentLength <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> index<span class="sym">=</span>offset<span class="sym">;</span> index<span class="sym">&lt;</span>lastIndex<span class="sym">;</span> index<span class="sym">+=</span>fragmentLength<span class="sym">) {</span>
      <span class="kwc">String</span> temp <span class="sym">=</span> sequence<span class="sym">.</span><span class="kwd">substring</span><span class="sym">(</span>index<span class="sym">,</span> index <span class="sym">+</span> fragmentLength<span class="sym">);</span>
      knucleotide fragment <span class="sym">= (</span>knucleotide<span class="sym">)</span>map<span class="sym">.</span><span class="kwd">get</span><span class="sym">(</span>temp<span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span>fragment <span class="sym">!=</span> null<span class="sym">)</span>
        fragment<span class="sym">.</span>count<span class="sym">++;</span>
      <span class="kwa">else</span>
        map<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span>temp<span class="sym">,</span> <span class="kwa">new</span> <span class="kwd">knucleotide</span><span class="sym">(</span>temp<span class="sym">));</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
<span class="sym">}</span>

