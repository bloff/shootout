rem The Computer Language Shootout
rem http<span class="hl sym">://</span>shootout.alioth.debian.org<span class="hl sym">/</span>
rem contributed by Josh Goldfoot
rem based <span class="hl kwa">on</span> C gcc program by bearophile

<span class="hl kwa">sub</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m <span class="hl kwa">as</span> <span class="hl kwb">integer</span><span class="hl sym">)</span>
   <span class="hl kwa">dim</span> <span class="hl kwd">flags</span><span class="hl sym">(</span>m<span class="hl sym">)</span> <span class="hl kwa">as</span> ubyte   <span class="hl slc">'FreeBasic has no boolean type</span>
   <span class="hl kwa">Dim As</span> <span class="hl kwb">Integer</span> count<span class="hl sym">,</span> i<span class="hl sym">,</span> j
   count <span class="hl sym">=</span> <span class="hl num">0</span>
   i <span class="hl sym">=</span> <span class="hl num">2</span>
   <span class="hl kwa">while</span> i <span class="hl sym">&lt;</span> m
      <span class="hl kwa">if</span> <span class="hl kwd">flags</span><span class="hl sym">(</span>i<span class="hl sym">) =</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         count <span class="hl sym">+=</span> <span class="hl num">1</span>
         j <span class="hl sym">=</span> i shl <span class="hl num">1</span>
         <span class="hl kwa">while</span> j <span class="hl sym">&lt;</span> m
            <span class="hl kwd">flags</span><span class="hl sym">(</span>j<span class="hl sym">) =</span> <span class="hl num">1</span>
            j <span class="hl sym">+=</span> i
         <span class="hl kwa">wend</span>
      <span class="hl kwa">end if</span>
      i <span class="hl sym">+=</span> <span class="hl num">1</span>
   <span class="hl kwa">wend</span>
   print using <span class="hl str">&quot;Primes up to ######## ########&quot;</span><span class="hl sym">;</span>m<span class="hl sym">;</span>count
<span class="hl kwa">end sub</span>

<span class="hl kwa">Dim As</span> <span class="hl kwb">Integer</span> cmd<span class="hl sym">,</span> i

cmd <span class="hl sym">=</span> <span class="hl kwd">val</span><span class="hl sym">(</span>COMMAND<span class="hl kwb">$)</span>
<span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">2</span>
   <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl kwd">shl</span> <span class="hl sym">(</span>cmd <span class="hl sym">-</span> i<span class="hl sym">))</span>
<span class="hl kwa">next</span> i
