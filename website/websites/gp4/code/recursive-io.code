<span class="hl com">/* ------------------------------------------------------------------ */</span>
<span class="hl com">/* The Great Computer Language Shootout                               */</span>
<span class="hl com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="hl com">/*                                                                    */</span>
<span class="hl com">/* Whilst this program was successfully tested at a load of:          */</span>
<span class="hl com">/*                                                                    */</span>
<span class="hl com">/*     n = 3                                                          */</span>
<span class="hl com">/*                                                                    */</span>
<span class="hl com">/* it fails at higher loads due to stack overflow. Having consulted   */</span>
<span class="hl com">/* the relevant documentation at:                                     */</span>
<span class="hl com">/*                                                                    */</span>
<span class="hl com">/*     http://www.iolanguage.com/darcs/Io/_docs/guide.html            */</span>
<span class="hl com">/*                                                                    */</span>
<span class="hl com">/* there doesn't appear to be a command-line option or environment    */</span>
<span class="hl com">/* variable that may be set to increase the in-built stack size, nor  */</span>
<span class="hl com">/* does the use of the shell setting, 'ulimit -s unlimited', appear to*/</span>
<span class="hl com">/* increase this limit.                                               */</span>
<span class="hl com">/*                                                                    */</span>
<span class="hl com">/* Note: Although this program knowingly fails at n &gt; 3 loads, it was */</span>
<span class="hl com">/* submitted to replace the existing version which fails due to a     */</span>
<span class="hl com">/* command-line processing error.                                     */</span>
<span class="hl com">/*                                                                    */</span>
<span class="hl com">/* Contributed by Anthony Borla                                       */</span>
<span class="hl com">/* ------------------------------------------------------------------ */</span>

ack <span class="hl sym">:=</span> <span class="hl kwa">method</span><span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">,</span>
  <span class="hl kwa">if</span><span class="hl sym">(</span>x <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">return</span> y <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">if</span><span class="hl sym">(</span>y <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">return</span> <span class="hl kwd">ack</span><span class="hl sym">(</span>x <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">))</span>
  <span class="hl kwa">return</span> <span class="hl kwd">ack</span><span class="hl sym">(</span>x <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl kwd">ack</span><span class="hl sym">(</span>x<span class="hl sym">,</span> y <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">))</span>
<span class="hl sym">)</span>

<span class="hl com">/* ----------- */</span>

fib <span class="hl sym">:=</span> <span class="hl kwa">method</span><span class="hl sym">(</span>n<span class="hl sym">,</span>
  <span class="hl kwa">if</span><span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">return</span> <span class="hl kwd">fib</span><span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) +</span> <span class="hl kwd">fib</span><span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">)</span>
<span class="hl sym">)</span>

<span class="hl com">/* ----------- */</span>

tak <span class="hl sym">:=</span> <span class="hl kwa">method</span><span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">,</span> z<span class="hl sym">,</span>
  <span class="hl kwa">if</span><span class="hl sym">(</span>y <span class="hl sym">&lt;</span> x<span class="hl sym">,</span> <span class="hl kwa">return</span> <span class="hl kwd">tak</span><span class="hl sym">(</span><span class="hl kwd">tak</span><span class="hl sym">(</span>x <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">,</span> z<span class="hl sym">),</span> <span class="hl kwd">tak</span><span class="hl sym">(</span>y <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> z<span class="hl sym">,</span> x<span class="hl sym">),</span> <span class="hl kwd">tak</span><span class="hl sym">(</span>z <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> x<span class="hl sym">,</span> y<span class="hl sym">)))</span>
  <span class="hl kwa">return</span> z
<span class="hl sym">)</span>

<span class="hl com">/* ----------------------------- */</span>

n <span class="hl sym">:=</span> args <span class="hl kwd">at</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span> asNumber

<span class="hl slc">// Use interpolation for complex string expressions</span>
<span class="hl str">&quot;Ack(3,#io{n}): #io{ack(3, n)}&quot;</span> interpolate println
<span class="hl str">&quot;Fib(#io{(27.0 + n) asString(0,1)}): #io{fib(27.0 + n) asString(0,1)}&quot;</span> interpolate println

n <span class="hl sym">:=</span> n <span class="hl sym">-</span> <span class="hl num">1</span>
<span class="hl str">&quot;Tak(#io{n * 3},#io{n * 2},#io{n}): #io{tak(n * 3, n * 2, n * 1)}&quot;</span> interpolate println

<span class="hl slc">// Use concatenation for simpler ones</span>
<span class="hl sym">(</span><span class="hl str">&quot;Fib(3): &quot;</span> <span class="hl sym">..</span> <span class="hl kwd">fib</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">))</span> println
<span class="hl sym">(</span><span class="hl str">&quot;Tak(3.0,2.0,1.0): &quot;</span> <span class="hl sym">.. (</span><span class="hl kwd">tak</span><span class="hl sym">(</span><span class="hl num">3.0</span><span class="hl sym">,</span> <span class="hl num">2.0</span><span class="hl sym">,</span> <span class="hl num">1.0</span><span class="hl sym">)</span> <span class="hl kwd">asString</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)))</span> println

