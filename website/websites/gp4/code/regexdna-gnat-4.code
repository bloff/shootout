<span class="hl slc">-----------------------------------------------------------------------</span>
<span class="hl slc">-- The Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">-- Modified by Georg Bauhaus</span>
<span class="hl slc">--</span>
<span class="hl slc">-- This version uses the GNAT Spitbol Pattern matching libraries</span>
<span class="hl slc">-- rather than the more commonly used Unix-style regex libraries</span>
<span class="hl slc">-----------------------------------------------------------------------</span>

<span class="hl kwa">with</span> Ada.Text_Io<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Text_Io<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Integer_Text_IO<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Integer_Text_IO<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Strings.Unbounded<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Strings.Unbounded<span class="hl sym">;</span>
<span class="hl kwa">with</span> Gnat.Spitbol.Patterns<span class="hl sym">;</span> <span class="hl kwa">use</span> Gnat.Spitbol.Patterns<span class="hl sym">;</span>
<span class="hl kwa">use</span> Gnat.Spitbol<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Regexdna <span class="hl kwa">is</span>
   Variant_Labels <span class="hl sym">:</span> <span class="hl kwa">constant array</span> <span class="hl sym">(</span><span class="hl kwb">Positive</span> <span class="hl kwa">range</span> <span class="hl num">1</span>.<span class="hl num">.9</span><span class="hl sym">)</span> <span class="hl kwa">of</span> Vstring <span class="hl sym">:= (</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">),</span>
      To_Unbounded_String<span class="hl sym">(</span><span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl sym">));</span>

   Variant_Patterns <span class="hl sym">:</span> <span class="hl kwa">constant array</span><span class="hl sym">(</span><span class="hl kwb">Positive</span> <span class="hl kwa">range</span> <span class="hl num">1</span>.<span class="hl num">.9</span><span class="hl sym">)</span> <span class="hl kwa">of</span> Pattern <span class="hl sym">:= (</span>
      <span class="hl str">&quot;agggtaaa&quot;</span> <span class="hl kwa">or</span> <span class="hl str">&quot;tttaccct&quot;</span><span class="hl sym">,</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;cgt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;gggtaaa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;tttaccc&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;acg&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;a&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;act&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;ggtaaa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;tttacc&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;agt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;t&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;ag&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;act&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;gtaaa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;tttac&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;agt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;ct&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;agg&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;act&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;taaa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;ttta&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;agt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;cct&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;aggg&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;acg&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;aaa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;ttt&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;cgt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;ccct&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;agggt&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;cgt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;aa&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;tt&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;acg&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;accct&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;agggta&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;cgt&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;a&quot;</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl str">&quot;t&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;acg&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;taccct&quot;</span><span class="hl sym">),</span>
      <span class="hl sym">(</span><span class="hl str">&quot;agggtaa&quot;</span> <span class="hl sym">&amp;</span> Any<span class="hl sym">(</span><span class="hl str">&quot;cgt&quot;</span><span class="hl sym">))</span> <span class="hl kwa">or</span> <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;acg&quot;</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;ttaccct&quot;</span><span class="hl sym">));</span>

   <span class="hl kwa">type</span> Iub <span class="hl kwa">is</span>
      <span class="hl kwa">record</span>
         Code         <span class="hl sym">:</span> Pattern<span class="hl sym">;</span>
         Alternatives <span class="hl sym">:</span> Unbounded_String<span class="hl sym">;</span>
   <span class="hl kwa">end record</span><span class="hl sym">;</span>
   <span class="hl kwa">subtype</span> Codes_Index <span class="hl kwa">is</span> <span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl num">0</span>.<span class="hl num">.10</span><span class="hl sym">;</span>
   <span class="hl kwa">type</span> Codes_Array <span class="hl kwa">is array</span> <span class="hl sym">(</span>Codes_Index<span class="hl sym">)</span> <span class="hl kwa">of</span> Iub<span class="hl sym">;</span>
   Codes <span class="hl sym">:</span> <span class="hl kwa">constant</span> Codes_Array <span class="hl sym">:= (</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">)),</span>
      <span class="hl sym">(</span>Any<span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">),</span> To_Unbounded_String <span class="hl sym">(</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">)));</span>

   <span class="hl kwa">type</span> Dna_Lines <span class="hl kwa">is array</span><span class="hl sym">(</span><span class="hl kwb">Positive</span> <span class="hl kwa">range</span> <span class="hl sym">&lt;&gt;)</span> <span class="hl kwa">of</span> Vstring<span class="hl sym">;</span>
   <span class="hl kwa">function</span> Length<span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwa">in</span> Dna_Lines<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Natural</span> <span class="hl kwa">is</span>
      Sum <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Item<span class="hl sym">'</span><span class="hl kwa">range loop</span>
         Sum <span class="hl sym">:=</span> Sum <span class="hl sym">+</span> Length<span class="hl sym">(</span>Item<span class="hl sym">(</span>I<span class="hl sym">));</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> Sum<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Length<span class="hl sym">;</span>

   Initial_Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   Code_Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Line <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">(</span><span class="hl num">1</span>.<span class="hl num">.80</span><span class="hl sym">);</span>
   Var_Line <span class="hl sym">:</span> Vstring_Var<span class="hl sym">;</span>
   Line_Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Sequence <span class="hl sym">:</span> Vstring_Var<span class="hl sym">;</span>
   Fasta_Description <span class="hl sym">:</span> <span class="hl kwa">constant</span> Pattern <span class="hl sym">:=</span> Pos<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) &amp;</span> <span class="hl str">&quot;&gt;&quot;</span> <span class="hl sym">&amp;</span> Rest<span class="hl sym">;</span>
   Descrip_Pattern <span class="hl sym">:</span> <span class="hl kwa">constant</span> Pattern <span class="hl sym">:= (</span>Fasta_Description<span class="hl sym">);</span>
   Num_Lines <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Match_Found <span class="hl sym">:</span> <span class="hl kwb">Boolean</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>

   <span class="hl slc">-- Read FASTA Sequence</span>
   <span class="hl slc">-- Record length and remove the unwanted elements</span>

   <span class="hl kwa">while not</span> End_Of_File <span class="hl kwa">loop</span>
      Get_Line<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Line<span class="hl sym">,</span> Last <span class="hl sym">=&gt;</span> Line_Length<span class="hl sym">);</span>
      Var_Line <span class="hl sym">:=</span> To_Unbounded_String<span class="hl sym">(</span>Line<span class="hl sym">(</span><span class="hl num">1</span>..Line_Length<span class="hl sym">));</span>
      Initial_Length <span class="hl sym">:=</span> Initial_Length <span class="hl sym">+</span> Length<span class="hl sym">(</span>Var_Line<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">;</span>
      Match<span class="hl sym">(</span>Subject <span class="hl sym">=&gt;</span> Var_Line<span class="hl sym">,</span>
         Pat <span class="hl sym">=&gt;</span> Descrip_Pattern<span class="hl sym">,</span> Replace <span class="hl sym">=&gt;</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
      Append<span class="hl sym">(</span>Source <span class="hl sym">=&gt;</span> Sequence<span class="hl sym">,</span> New_Item <span class="hl sym">=&gt;</span> Var_Line<span class="hl sym">);</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   Code_Length <span class="hl sym">:=</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">);</span>

   <span class="hl slc">-- regex match</span>
   <span class="hl kwa">declare</span>
      Count <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">function</span> Inc_Count <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span> <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Count <span class="hl sym">:=</span> Count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">return</span> False<span class="hl sym">;</span>
      <span class="hl kwa">end</span> Inc_Count<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Variant_Labels<span class="hl sym">'</span><span class="hl kwa">range loop</span>
         Count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         Match<span class="hl sym">(</span>Subject <span class="hl sym">=&gt;</span> Sequence<span class="hl sym">,</span>
            Pat <span class="hl sym">=&gt;</span> Variant_Patterns<span class="hl sym">(</span>I<span class="hl sym">) &amp; (+</span>Inc_Count<span class="hl sym">'</span>unrestricted_access<span class="hl sym">));</span>
         Put<span class="hl sym">(</span>To_String<span class="hl sym">(</span>Variant_Labels<span class="hl sym">(</span>I<span class="hl sym">)) &amp;</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">);</span>
         Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Count<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
         New_Line<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      New_Line<span class="hl sym">;</span>
   <span class="hl kwa">end</span><span class="hl sym">;</span>

   <span class="hl slc">-- regex substitution</span>

   Num_Lines <span class="hl sym">:=</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">) /</span> <span class="hl num">80</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">)</span> <span class="hl kwa">mod</span> <span class="hl num">80</span> <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
      Num_Lines <span class="hl sym">:=</span> Num_Lines <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">declare</span>
      Sequence_Lines <span class="hl sym">:</span> Dna_Lines<span class="hl sym">(</span><span class="hl num">1</span>..Num_Lines<span class="hl sym">);</span>
      Low<span class="hl sym">,</span> Sub_Len <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl slc">-- Distribute Sequence to Sequence_Lines</span>
      Low <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
      Sub_Len <span class="hl sym">:=</span> <span class="hl num">80</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Sequence_Lines<span class="hl sym">'</span><span class="hl kwa">range loop</span>
         Sequence_Lines<span class="hl sym">(</span>I<span class="hl sym">) :=</span> Substr<span class="hl sym">(</span>Str <span class="hl sym">=&gt;</span> Sequence <span class="hl sym">,</span>
            Start <span class="hl sym">=&gt;</span> Low<span class="hl sym">,</span> Len <span class="hl sym">=&gt;</span> Sub_Len <span class="hl sym">);</span>
         Low <span class="hl sym">:=</span> Low <span class="hl sym">+</span> Sub_Len<span class="hl sym">;</span>
         <span class="hl kwa">if</span> Low <span class="hl sym">+</span> Sub_Len <span class="hl sym">&gt;</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">)</span> <span class="hl kwa">then</span>
            Sub_Len <span class="hl sym">:=</span> Length<span class="hl sym">(</span>Sequence<span class="hl sym">) -</span> Low <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      <span class="hl slc">-- Perform the regex substitution</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Sequence_Lines<span class="hl sym">'</span><span class="hl kwa">range loop</span>
         <span class="hl kwa">for</span> C <span class="hl kwa">in</span> Codes_Index <span class="hl kwa">loop</span>
            <span class="hl kwa">loop</span>
               Match_Found <span class="hl sym">:=</span> Match<span class="hl sym">(</span>Subject <span class="hl sym">=&gt;</span> Sequence_Lines<span class="hl sym">(</span>I<span class="hl sym">),</span>
                  Pat <span class="hl sym">=&gt;</span> Codes<span class="hl sym">(</span>C<span class="hl sym">)</span>.Code<span class="hl sym">,</span> Replace <span class="hl sym">=&gt;</span> Codes<span class="hl sym">(</span>C<span class="hl sym">)</span>.Alternatives<span class="hl sym">);</span>
               <span class="hl kwa">exit when not</span> Match_Found<span class="hl sym">;</span>
            <span class="hl kwa">end loop</span><span class="hl sym">;</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Initial_Length<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
      New_Line<span class="hl sym">;</span>
      Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Code_Length<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
      New_Line<span class="hl sym">;</span>
      Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Length<span class="hl sym">(</span>Sequence_Lines<span class="hl sym">),</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
      New_Line<span class="hl sym">;</span>
   <span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">end</span> Regexdna<span class="hl sym">;</span>
