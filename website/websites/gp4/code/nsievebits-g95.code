<span class="hl slc">! -*- mode: f90 -*-</span>
<span class="hl slc">!</span>
<span class="hl slc">! $Id: nsievebits-g95.code,v 1.20 2007-12-10 00:56:24 igouy-guest Exp $ ; $Name:  $</span>
<span class="hl slc">!</span>
<span class="hl slc">! The Great Computer Language Shootout</span>
<span class="hl slc">!   http://shootout.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">!   contributed by Steve Decker</span>
<span class="hl slc">!</span>
<span class="hl slc">! compilation:</span>
<span class="hl slc">!   g95 -O1 -fomit-frame-pointer nsieve_bits.f90</span>
<span class="hl slc">!   gfortran -O3 -fomit-frame-pointer nsieve_bits.f90</span>
<span class="hl slc">!   ifort -O3 nsieve_bits.f90</span>

program nsieve_bits
  implicit none

  integer<span class="hl sym">,</span> parameter <span class="hl sym">::</span> BSize <span class="hl sym">=</span> bit_size<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>

  integer          <span class="hl sym">::</span> num<span class="hl sym">,</span> i<span class="hl sym">,</span> m
  character<span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">) ::</span> argv
  integer<span class="hl sym">,</span> dimension<span class="hl sym">(:),</span> allocatable <span class="hl sym">::</span> flags

  call get_command_argument<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> argv<span class="hl sym">)</span>
  read<span class="hl sym">(</span>argv<span class="hl sym">, *)</span> num

  do i <span class="hl sym">=</span> num<span class="hl sym">,</span> num<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">, -</span><span class="hl num">1</span>
     m <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">**</span>i <span class="hl sym">*</span> <span class="hl num">10000</span>
     if <span class="hl sym">(</span>i <span class="hl sym">==</span> num<span class="hl sym">)</span> allocate<span class="hl sym">(</span>flags<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">:</span>m<span class="hl sym">/</span>BSize<span class="hl sym">))</span>
     write<span class="hl sym">(*,</span> <span class="hl str">&quot;(2(a,i8))&quot;</span><span class="hl sym">)</span>  <span class="hl str">&quot;Primes up to &quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> nsi<span class="hl sym">(</span>m<span class="hl sym">)</span>
  end do

contains

  integer function nsi<span class="hl sym">(</span>m<span class="hl sym">)</span>
    integer<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> m

    integer <span class="hl sym">::</span> i<span class="hl sym">,</span> ind<span class="hl sym">,</span> bit<span class="hl sym">,</span> k

    do i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">,</span> m
       ind <span class="hl sym">=</span> i <span class="hl sym">/</span> BSize
       bit <span class="hl sym">=</span> mod<span class="hl sym">(</span>i<span class="hl sym">,</span> BSize<span class="hl sym">)</span>
       flags<span class="hl sym">(</span>ind<span class="hl sym">) =</span> ibset<span class="hl sym">(</span>flags<span class="hl sym">(</span>ind<span class="hl sym">),</span> bit<span class="hl sym">)</span>
    end do
    nsi <span class="hl sym">=</span> <span class="hl num">0</span>
    do i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">,</span> m
       if <span class="hl sym">(</span>btest<span class="hl sym">(</span>flags<span class="hl sym">(</span>i<span class="hl sym">/</span>BSize<span class="hl sym">),</span> mod<span class="hl sym">(</span>i<span class="hl sym">,</span> BSize<span class="hl sym">)))</span> then
          do k <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">,</span> m<span class="hl sym">,</span> i
             ind <span class="hl sym">=</span> k <span class="hl sym">/</span> BSize
             bit <span class="hl sym">=</span> mod<span class="hl sym">(</span>k<span class="hl sym">,</span> BSize<span class="hl sym">)</span>
             flags<span class="hl sym">(</span>ind<span class="hl sym">) =</span> ibclr<span class="hl sym">(</span>flags<span class="hl sym">(</span>ind<span class="hl sym">),</span> bit<span class="hl sym">)</span>
          end do
          nsi <span class="hl sym">=</span> nsi <span class="hl sym">+</span> <span class="hl num">1</span>
       end if
    end do
  end function nsi
end program nsieve_bits
