<span class="dir">#!/bin/env groovy</span>
<span class="com">/*</span>
<span class="com">	$Id: nsieve-groovy.code,v 1.2 2005-10-29 23:09:23 igouy-guest Exp $</span>
<span class="com"></span>
<span class="com">	The Great Computer Language Shootout</span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">	contributed by Jochen Hinrichsen</span>
<span class="com"></span>
<span class="com">        The NSieveBits sample is more groovy style than this fixed boolean array</span>
<span class="com">*/</span>

def <span class="kwd">nsieve</span><span class="sym">(</span>isPrime<span class="sym">,</span> m<span class="sym">) {</span>
        isPrime<span class="sym">.</span><span class="kwd">each</span><span class="sym">() {</span>
                it <span class="sym">=</span> <span class="kwa">true</span>
        <span class="sym">}</span>
        def count <span class="sym">=</span> <span class="num">0</span>
	<span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">2</span><span class="sym">..</span>m<span class="sym">) {</span>
		<span class="kwa">if</span> <span class="sym">(</span>isPrime<span class="sym">[</span>i<span class="sym">]) {</span>
                        <span class="sym">(</span>i<span class="sym">+</span>i<span class="sym">..</span>m<span class="sym">).</span><span class="kwd">step</span><span class="sym">(</span>i<span class="sym">) {</span> j <span class="sym">-&gt;</span>
				isPrime<span class="sym">[</span>j<span class="sym">] =</span> <span class="kwa">false</span>
			<span class="sym">}</span>

                        count<span class="sym">++</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
	count
<span class="sym">}</span>

def <span class="kwd">run</span><span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="sym">) {</span>
        def m <span class="sym">=</span> <span class="num">2</span><span class="sym">**</span>n<span class="sym">*</span><span class="num">10000</span>
	<span class="kwd">print</span><span class="sym">(</span><span class="str">&quot;Primes up to ${m.toString().padLeft(8)}&quot;</span><span class="sym">)</span>
	<span class="kwd">println</span><span class="sym">(</span><span class="kwd">nsieve</span><span class="sym">(</span>isPrime<span class="sym">,</span> m<span class="sym">).</span><span class="kwd">toString</span><span class="sym">().</span><span class="kwd">padLeft</span><span class="sym">(</span><span class="num">8</span><span class="sym">))</span>
<span class="sym">}</span>

def n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span> ? <span class="num">2</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span><span class="kwd">toInteger</span><span class="sym">()</span>
n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span> Math<span class="sym">.</span><span class="kwd">max</span><span class="sym">(</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">)</span>

<span class="slc">// Allocate once for all runs</span>
def isPrime <span class="sym">= [</span> <span class="kwa">true</span> <span class="sym">] * (</span><span class="num">2</span><span class="sym">**</span>n<span class="sym">*</span><span class="num">10000</span><span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

<span class="kwd">run</span><span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="sym">)</span>
<span class="kwd">run</span><span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
<span class="kwd">run</span><span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="sym">-</span><span class="num">2</span><span class="sym">)</span>

<span class="slc">// EOF</span>

