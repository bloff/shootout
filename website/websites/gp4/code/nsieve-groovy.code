<span class="hl com">/*</span>
<span class="hl com">	The Computer Language Shootout</span>
<span class="hl com">	http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">	contributed by Jochen Hinrichsen</span>
<span class="hl com"></span>
<span class="hl com">        The NSieveBits sample is more groovy style than this fixed boolean array</span>
<span class="hl com">*/</span>

def <span class="hl kwd">nsieve</span><span class="hl sym">(</span>isPrime<span class="hl sym">,</span> m<span class="hl sym">) {</span>
        isPrime<span class="hl sym">.</span><span class="hl kwd">each</span><span class="hl sym">() {</span>
                it <span class="hl sym">=</span> <span class="hl kwa">true</span>
        <span class="hl sym">}</span>
        def count <span class="hl sym">=</span> <span class="hl num">0</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span>i in <span class="hl num">2</span><span class="hl sym">..</span>m<span class="hl sym">) {</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span>isPrime<span class="hl sym">[</span>i<span class="hl sym">]) {</span>
                        <span class="hl sym">(</span>i<span class="hl sym">+</span>i<span class="hl sym">..</span>m<span class="hl sym">).</span><span class="hl kwd">step</span><span class="hl sym">(</span>i<span class="hl sym">) {</span> j <span class="hl sym">-&gt;</span>
				isPrime<span class="hl sym">[</span>j<span class="hl sym">] =</span> <span class="hl kwa">false</span>
			<span class="hl sym">}</span>

                        count<span class="hl sym">++</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>
	count
<span class="hl sym">}</span>

def <span class="hl kwd">run</span><span class="hl sym">(</span>isPrime<span class="hl sym">,</span> n<span class="hl sym">) {</span>
        def m <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">**</span>n<span class="hl sym">*</span><span class="hl num">10000</span>
	<span class="hl kwd">print</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to ${m.toString().padLeft(8)}&quot;</span><span class="hl sym">)</span>
	<span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">nsieve</span><span class="hl sym">(</span>isPrime<span class="hl sym">,</span> m<span class="hl sym">).</span><span class="hl kwd">toString</span><span class="hl sym">().</span><span class="hl kwd">padLeft</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">))</span>
<span class="hl sym">}</span>

def n <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">==</span> <span class="hl num">0</span> ? <span class="hl num">2</span> <span class="hl sym">:</span> args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">toInteger</span><span class="hl sym">()</span>
n <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)</span> Math<span class="hl sym">.</span><span class="hl kwd">max</span><span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">)</span>

<span class="hl slc">// Allocate once for all runs</span>
def isPrime <span class="hl sym">= [</span> <span class="hl kwa">true</span> <span class="hl sym">] * (</span><span class="hl num">2</span><span class="hl sym">**</span>n<span class="hl sym">*</span><span class="hl num">10000</span><span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl kwd">run</span><span class="hl sym">(</span>isPrime<span class="hl sym">,</span> n<span class="hl sym">)</span>
<span class="hl kwd">run</span><span class="hl sym">(</span>isPrime<span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
<span class="hl kwd">run</span><span class="hl sym">(</span>isPrime<span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)</span>

<span class="hl slc">// EOF</span>

