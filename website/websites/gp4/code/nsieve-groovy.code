<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Pilho Kim</span>
<span class="hl com">*/</span>

def <span class="hl kwd">countSieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span> primes<span class="hl sym">) {</span>
      def i<span class="hl sym">,</span> k
      def count <span class="hl sym">=</span> <span class="hl num">0</span>

      i <span class="hl sym">=</span> <span class="hl num">2</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;=</span> m<span class="hl sym">) {</span>
          primes<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">true</span>
          i<span class="hl sym">++</span>
      <span class="hl sym">}</span>

      i <span class="hl sym">=</span> <span class="hl num">2</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;=</span> m<span class="hl sym">) {</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>primes<span class="hl sym">[</span>i<span class="hl sym">]) {</span>
            k <span class="hl sym">=</span> i <span class="hl sym">+</span> i
            <span class="hl kwa">while</span> <span class="hl sym">(</span>k <span class="hl sym">&lt;=</span> m<span class="hl sym">) {</span>
                 primes<span class="hl sym">[</span>k<span class="hl sym">] =</span> <span class="hl kwa">false</span>
                 k <span class="hl sym">+=</span> i
            <span class="hl sym">}</span>
            count<span class="hl sym">++</span>
         <span class="hl sym">}</span>
         i<span class="hl sym">++</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">return</span> count
<span class="hl sym">}</span>

def <span class="hl kwd">padNumber</span><span class="hl sym">(</span>number<span class="hl sym">,</span> fieldLen<span class="hl sym">) {</span>
      def bareNumber <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span> <span class="hl sym">+</span> number
      def numSpaces <span class="hl sym">=</span> fieldLen <span class="hl sym">-</span> bareNumber<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">()</span>
      def sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuffer</span><span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">*</span>numSpaces<span class="hl sym">)</span>
      sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>bareNumber<span class="hl sym">)</span>
      <span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">()</span>
<span class="hl sym">}</span>

def n <span class="hl sym">=</span> <span class="hl num">2</span>
<span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
    n <span class="hl sym">=</span> args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">toInteger</span><span class="hl sym">()</span>
<span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span>
    n <span class="hl sym">=</span> <span class="hl num">2</span>

def m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">)*</span><span class="hl num">10000</span>
def flags <span class="hl sym">=</span> <span class="hl kwa">new</span> boolean<span class="hl sym">[</span>m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">]</span>

<span class="hl sym">[</span>n<span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">].</span>each <span class="hl sym">{</span>
    def k <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>it<span class="hl sym">)*</span><span class="hl num">10000</span>
    def s1 <span class="hl sym">=</span> <span class="hl kwd">padNumber</span><span class="hl sym">(</span>k<span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">)</span>
    def s2 <span class="hl sym">=</span> <span class="hl kwd">padNumber</span><span class="hl sym">(</span><span class="hl kwd">countSieve</span><span class="hl sym">(</span>k<span class="hl sym">,</span>flags<span class="hl sym">),</span> <span class="hl num">9</span><span class="hl sym">)</span>
    <span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to $s1$s2&quot;</span><span class="hl sym">)</span>
<span class="hl sym">}</span>
