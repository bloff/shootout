<span class="hl slc">----------------------------------------------------------------</span>
<span class="hl slc">-- BinaryTrees</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Ada 95 (GNAT)</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">----------------------------------------------------------------</span>
<span class="hl kwa">with</span> Treenodes<span class="hl sym">;</span> <span class="hl kwa">use</span> Treenodes<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Text_Io<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Text_Io<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Integer_Text_Io<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Integer_Text_Io<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Command_Line<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Command_Line<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Characters.Latin_1<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Characters.Latin_1<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Binarytrees <span class="hl kwa">is</span>
   Min_Depth <span class="hl sym">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> <span class="hl num">4</span><span class="hl sym">;</span>
   N <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
   Stretch_Tree <span class="hl sym">:</span> TreeNode<span class="hl sym">;</span>
   Long_Lived_Tree <span class="hl sym">:</span> TreeNode<span class="hl sym">;</span>
   Short_Lived_Tree_1 <span class="hl sym">:</span> TreeNode<span class="hl sym">;</span>
   Short_Lived_Tree_2 <span class="hl sym">:</span> TreeNode<span class="hl sym">;</span>
   Max_Depth <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">;</span>
   Stretch_Depth <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">;</span>
   Check <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
   Sum <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
   Depth <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Iterations <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> Argument_Count <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      N <span class="hl sym">:=</span> <span class="hl kwb">Positive</span><span class="hl sym">'</span>Value<span class="hl sym">(</span>Argument<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">));</span>
   <span class="hl kwa">end if</span><span class="hl sym">;</span>
   Max_Depth <span class="hl sym">:=</span> <span class="hl kwb">Positive</span><span class="hl sym">'</span>Max<span class="hl sym">(</span>Min_Depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">,</span> N<span class="hl sym">);</span>
   Stretch_Depth <span class="hl sym">:=</span> Max_Depth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
   Stretch_Tree <span class="hl sym">:=</span> Bottom_Up_Tree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> Stretch_Depth<span class="hl sym">);</span>
   Item_Check<span class="hl sym">(</span>Stretch_Tree<span class="hl sym">,</span> Check<span class="hl sym">);</span>
   Put<span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl sym">);</span>
   Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Stretch_Depth<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
   Put<span class="hl sym">(</span>Ht <span class="hl sym">&amp;</span> <span class="hl str">&quot; check: &quot;</span><span class="hl sym">);</span>
   Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Check<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">);</span>
   New_Line<span class="hl sym">;</span>

   Long_Lived_Tree <span class="hl sym">:=</span> Bottom_Up_Tree<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> Max_Depth<span class="hl sym">);</span>

   Depth <span class="hl sym">:=</span> Min_Depth<span class="hl sym">;</span>
   <span class="hl kwa">while</span> Depth <span class="hl sym">&lt;=</span> Max_Depth <span class="hl kwa">loop</span>
      Iterations <span class="hl sym">:=</span> <span class="hl num">2</span><span class="hl sym">**(</span>Max_Depth <span class="hl sym">-</span> Depth <span class="hl sym">+</span> Min_Depth<span class="hl sym">);</span>
      Check <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">1</span>..Iterations <span class="hl kwa">loop</span>
         Short_Lived_Tree_1 <span class="hl sym">:=</span> Bottom_Up_Tree<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> I<span class="hl sym">,</span> Depth <span class="hl sym">=&gt;</span> Depth<span class="hl sym">);</span>
         Short_Lived_Tree_2 <span class="hl sym">:=</span> Bottom_Up_Tree<span class="hl sym">(</span>Item <span class="hl sym">=&gt;-</span>I<span class="hl sym">,</span> Depth <span class="hl sym">=&gt;</span> Depth<span class="hl sym">);</span>
         Item_Check<span class="hl sym">(</span>Short_Lived_Tree_1<span class="hl sym">,</span> Sum<span class="hl sym">);</span>
         Check <span class="hl sym">:=</span> check <span class="hl sym">+</span> Sum<span class="hl sym">;</span>
         Item_Check<span class="hl sym">(</span>Short_Lived_Tree_2<span class="hl sym">,</span> Sum<span class="hl sym">);</span>
         Check <span class="hl sym">:=</span> Check <span class="hl sym">+</span> Sum<span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Iterations <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
      Put<span class="hl sym">(</span>Ht <span class="hl sym">&amp;</span> <span class="hl str">&quot; trees of depth &quot;</span><span class="hl sym">);</span>
      Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Depth<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
      Put<span class="hl sym">(</span>Ht <span class="hl sym">&amp;</span> <span class="hl str">&quot; check: &quot;</span><span class="hl sym">);</span>
      Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Check<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
      New_Line<span class="hl sym">;</span>
      Depth <span class="hl sym">:=</span> Depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">;</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   Put<span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth &quot;</span><span class="hl sym">);</span>
   Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Max_Depth<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
   Put<span class="hl sym">(</span>Ht <span class="hl sym">&amp;</span> <span class="hl str">&quot; check: &quot;</span><span class="hl sym">);</span>
   Item_Check<span class="hl sym">(</span>Long_Lived_Tree<span class="hl sym">,</span> Check<span class="hl sym">);</span>
   Put<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Check<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
   New_Line<span class="hl sym">;</span>
<span class="hl kwa">end</span> BinaryTrees<span class="hl sym">;</span>
<span class="hl slc">----------------------------------------------------------------</span>
<span class="hl slc">-- BinaryTrees</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Ada 95 (GNAT)</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">----------------------------------------------------------------</span>

<span class="hl kwa">package</span> Treenodes <span class="hl kwa">is</span>
   <span class="hl kwa">type</span> Treenode <span class="hl kwa">is private</span><span class="hl sym">;</span>
   <span class="hl kwa">function</span> Bottom_Up_Tree<span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span> Depth <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">)</span> <span class="hl kwa">return</span> Treenode<span class="hl sym">;</span>
   <span class="hl kwa">procedure</span> Item_Check<span class="hl sym">(</span>This <span class="hl sym">:</span> <span class="hl kwa">in out</span> Treenode<span class="hl sym">;</span> Sum <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Integer</span><span class="hl sym">);</span>
<span class="hl kwa">private</span>
   <span class="hl kwa">type</span> Node<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Treenode <span class="hl kwa">is access</span> Node<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Node <span class="hl kwa">is record</span>
      Left  <span class="hl sym">:</span> Treenode <span class="hl sym">:=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
      Right <span class="hl sym">:</span> Treenode <span class="hl sym">:=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
      Item  <span class="hl sym">:</span> <span class="hl kwb">Integer</span>  <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">end record</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> Treenodes<span class="hl sym">;</span>
<span class="hl slc">----------------------------------------------------------------</span>
<span class="hl slc">-- BinaryTrees</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Ada 95 (GNAT)</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">----------------------------------------------------------------</span>

<span class="hl kwa">with</span> Ada.Unchecked_Deallocation<span class="hl sym">;</span>

<span class="hl kwa">package body</span> Treenodes <span class="hl kwa">is</span>
   <span class="hl kwa">function</span> Bottom_Up_Tree<span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span> Depth <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">)</span>
      <span class="hl kwa">return</span> Treenode <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Depth <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         <span class="hl kwa">return new</span> Node<span class="hl sym">'(</span>Bottom_Up_Tree<span class="hl sym">((</span><span class="hl num">2</span><span class="hl sym">*</span>Item<span class="hl sym">) -</span><span class="hl num">1</span><span class="hl sym">,</span> Depth <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
            Bottom_Up_Tree<span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> Item<span class="hl sym">,</span> Depth <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
            Item<span class="hl sym">);</span>
      <span class="hl kwa">else</span>
         <span class="hl kwa">return new</span> Node<span class="hl sym">'(</span><span class="hl kwa">null</span><span class="hl sym">,</span> <span class="hl kwa">null</span><span class="hl sym">,</span> Item<span class="hl sym">);</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Bottom_Up_Tree<span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Item_Check <span class="hl sym">(</span>This <span class="hl sym">:</span> <span class="hl kwa">in out</span> Treenode<span class="hl sym">;</span> Sum <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Integer</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">procedure</span> Free <span class="hl kwa">is new</span> Ada.Unchecked_Deallocation<span class="hl sym">(</span>Node<span class="hl sym">,</span> Treenode<span class="hl sym">);</span>
      Left_Sum<span class="hl sym">,</span> Right_Sum <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> This.Left <span class="hl sym">=</span> <span class="hl kwa">null then</span>
         Sum <span class="hl sym">:=</span> This.Item<span class="hl sym">;</span>
      <span class="hl kwa">else</span>
         Item_Check<span class="hl sym">(</span>This.Left<span class="hl sym">,</span> Left_Sum<span class="hl sym">);</span>
         Item_Check<span class="hl sym">(</span>This.Right<span class="hl sym">,</span> Right_Sum<span class="hl sym">);</span>
         Sum <span class="hl sym">:=</span>  This.Item <span class="hl sym">+</span> Left_Sum <span class="hl sym">-</span> Right_Sum<span class="hl sym">;</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
      Free<span class="hl sym">(</span>This<span class="hl sym">);</span>
   <span class="hl kwa">end</span> Item_Check<span class="hl sym">;</span>

<span class="hl kwa">end</span> Treenodes<span class="hl sym">;</span>
