<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Nicolas Cannasse</span>
<span class="com">*/</span>

ack <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">) {</span>
   <span class="kwa">if</span><span class="sym">(</span> x <span class="sym">==</span> <span class="num">0</span> <span class="sym">)</span> <span class="kwa">return</span> y <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">if</span><span class="sym">(</span> y <span class="sym">==</span> <span class="num">0</span> <span class="sym">)</span> <span class="kwa">return</span> <span class="kwd">ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">return</span> <span class="kwd">ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span><span class="kwd">ack</span><span class="sym">(</span>x<span class="sym">,</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">));</span>
<span class="sym">}</span>

fib <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>n<span class="sym">) {</span>
   <span class="kwa">if</span><span class="sym">(</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="sym">)</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">return</span> <span class="kwd">fib</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">) +</span> <span class="kwd">fib</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
<span class="sym">}</span>

fib_fp <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>n<span class="sym">) {</span>
   <span class="kwa">if</span><span class="sym">(</span> n <span class="sym">&lt;</span> <span class="num">2.0</span> <span class="sym">)</span> <span class="kwa">return</span> <span class="num">1.0</span><span class="sym">;</span>
   <span class="kwa">return</span> <span class="kwd">fib_fp</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2.0</span><span class="sym">) +</span> <span class="kwd">fib_fp</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1.0</span><span class="sym">);</span>
<span class="sym">}</span>

tak <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">) {</span>
   <span class="kwa">if</span><span class="sym">(</span> y <span class="sym">&gt;=</span> x <span class="sym">)</span> <span class="kwa">return</span> z<span class="sym">;</span>
   <span class="kwa">return</span> <span class="kwd">tak</span><span class="sym">(</span><span class="kwd">tak</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span><span class="kwd">tak</span><span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span><span class="kwd">tak</span><span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">));</span>
<span class="sym">}</span>

tak_fp <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">) {</span>
   <span class="kwa">if</span><span class="sym">(</span> y <span class="sym">&gt;=</span> x <span class="sym">)</span> <span class="kwa">return</span> z<span class="sym">;</span>
   <span class="kwa">return</span> <span class="kwd">tak_fp</span><span class="sym">(</span><span class="kwd">tak_fp</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span><span class="kwd">tak_fp</span><span class="sym">(</span>y<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span><span class="kwd">tak_fp</span><span class="sym">(</span>z<span class="sym">-</span><span class="num">1.0</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">));</span>
<span class="sym">}</span>

<span class="kwa">var</span> n <span class="sym">=</span> $<span class="kwb">int</span><span class="sym">(</span>$loader<span class="sym">.</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
<span class="kwa">if</span><span class="sym">(</span> n <span class="sym">==</span> <span class="kwa">null</span> <span class="sym">)</span> n <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
n <span class="sym">-=</span> <span class="num">1</span><span class="sym">;</span>

$<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span><span class="sym">,</span>n <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span><span class="str">&quot;): &quot;</span><span class="sym">,</span><span class="kwd">ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span>n <span class="sym">+</span> <span class="num">1</span><span class="sym">),</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
$<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Fib(&quot;</span><span class="sym">,</span>n <span class="sym">+</span> <span class="num">28.0</span><span class="sym">,</span><span class="str">&quot;.0): &quot;</span><span class="sym">,</span><span class="kwd">fib_fp</span><span class="sym">(</span>n <span class="sym">+</span> <span class="num">28.0</span><span class="sym">),</span><span class="str">&quot;.0</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
$<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Tak(&quot;</span><span class="sym">,</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span><span class="str">&quot;,&quot;</span><span class="sym">,</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span><span class="str">&quot;,&quot;</span><span class="sym">,</span>n<span class="sym">,</span><span class="str">&quot;): &quot;</span><span class="sym">,</span><span class="kwd">tak</span><span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span>n<span class="sym">),</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
$<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Fib(&quot;</span><span class="sym">,</span><span class="num">3</span><span class="sym">,</span><span class="str">&quot;): &quot;</span><span class="sym">,</span><span class="kwd">fib</span><span class="sym">(</span><span class="num">3</span><span class="sym">),</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
$<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Tak(3.0,2.0,1.0): &quot;</span><span class="sym">,</span><span class="kwd">tak_fp</span><span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span><span class="num">2.0</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">),</span><span class="str">&quot;.0</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
