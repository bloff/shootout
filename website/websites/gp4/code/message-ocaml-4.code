<span class="com">(* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Micky Latowicki</span>
<span class="com">*)</span>

<span class="kwa">module type</span> CHANNEL <span class="sym">=</span>
<span class="kwa">sig</span>
  <span class="kwa">type</span> 'a t
  <span class="kwa">val</span> create <span class="sym">:</span> <span class="kwb">unit</span> <span class="sym">-&gt;</span> 'a t
  <span class="kwa">val</span> send <span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a <span class="sym">-&gt;</span> <span class="kwb">unit</span>
  <span class="kwa">val</span> receive <span class="sym">:</span> 'a t <span class="sym">-&gt; (</span>'a <span class="sym">-&gt;</span> <span class="kwb">unit</span><span class="sym">) -&gt;</span> <span class="kwb">unit</span>
<span class="kwa">end</span>

<span class="kwa">module</span> Channel <span class="sym">:</span> CHANNEL <span class="sym">=</span>
<span class="kwa">struct</span>
  <span class="kwa">type</span> 'a t <span class="sym">= {</span>
    <span class="com">(* One of these queues is always empty. Sometimes both are. *)</span>
    waiters <span class="sym">: (</span>'a<span class="sym">-&gt;</span><span class="kwb">unit</span><span class="sym">)</span> Queue.t<span class="sym">;</span>
    values <span class="sym">:</span> 'a Queue.t
  <span class="sym">}</span>

  <span class="kwa">let</span> <span class="kwd">create</span> <span class="sym">() = {</span> waiters <span class="sym">=</span> Queue.<span class="kwd">create</span> <span class="sym">();</span>
                    values <span class="sym">=</span> Queue.<span class="kwd">create</span> <span class="sym">()}</span>

  <span class="kwa">let</span> send <span class="sym">{</span>waiters<span class="sym">=</span>waiters<span class="sym">;</span> values<span class="sym">=</span>values<span class="sym">}</span> value <span class="sym">=</span>
    <span class="kwa">if</span> Queue.is_empty waiters <span class="kwa">then</span>
      Queue.add value values
    <span class="kwa">else</span>
      <span class="kwa">let</span> waiter <span class="sym">=</span> Queue.take waiters <span class="kwa">in</span> waiter value

  <span class="kwa">let</span> receive <span class="sym">{</span>waiters<span class="sym">=</span>waiters<span class="sym">;</span> values<span class="sym">=</span>values<span class="sym">}</span> waiter <span class="sym">=</span>
    <span class="kwa">if</span> Queue.is_empty values <span class="kwa">then</span>
      Queue.add waiter waiters
    <span class="kwa">else</span>
      <span class="kwa">let</span> value <span class="sym">=</span> Queue.take values <span class="kwa">in</span> waiter value
<span class="kwa">end</span>

<span class="kwa">let rec</span> repeat n f x <span class="sym">=</span> <span class="kwa">if</span> n<span class="sym">&lt;=</span><span class="num">0</span> <span class="kwa">then</span> x <span class="kwa">else</span> <span class="kwd">repeat</span> <span class="sym">(</span>pred n<span class="sym">)</span> <span class="kwd">f</span> <span class="sym">(</span>f x<span class="sym">)</span>

<span class="kwa">let</span> <span class="kwd">increamentor</span> <span class="sym">(</span>input<span class="sym">,</span> output<span class="sym">) =</span>
  <span class="kwa">let rec</span> <span class="kwd">loop</span> <span class="sym">() =</span> Channel.receive input cont
  <span class="kwa">and</span> cont x      <span class="sym">=</span> Channel.send <span class="kwd">output</span> <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
                    <span class="kwd">loop</span> <span class="sym">()</span>
  <span class="kwa">in</span> loop

<span class="kwa">let</span> increamentor_chain n input0 <span class="sym">=</span>
  <span class="kwa">let</span> make_link input <span class="sym">=</span>
    <span class="kwa">let</span> output <span class="sym">=</span> Channel.<span class="kwd">create</span> <span class="sym">()</span> <span class="kwa">in</span>
      <span class="kwd">increamentor</span> <span class="sym">(</span>input<span class="sym">,</span> output<span class="sym">) ();</span>
      output
  <span class="kwa">in</span> repeat n make_link input0

<span class="kwa">let</span> process first last n <span class="sym">=</span>
  <span class="kwa">let</span> total       <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">let rec</span> <span class="kwd">step</span> <span class="sym">() =</span> Channel.send first <span class="num">0</span><span class="sym">;</span>
                    Channel.receive last add
  <span class="kwa">and</span> add x       <span class="sym">=</span> total <span class="sym">:= !</span>total<span class="sym">+</span>x <span class="kwa">in</span>
    repeat n <span class="kwd">step</span> <span class="sym">();</span>
    <span class="sym">!</span>total

<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> <span class="kwd">int_of_string</span><span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">10</span>
  <span class="kwa">and</span> first_channel <span class="sym">=</span> Channel.<span class="kwd">create</span> <span class="sym">()</span> <span class="kwa">in</span>
  <span class="kwa">let</span> last_channel  <span class="sym">=</span> increamentor_chain <span class="num">500</span> first_channel <span class="kwa">in</span>
  <span class="kwd">print_int</span><span class="sym">(</span>process first_channel last_channel n<span class="sym">);</span> <span class="kwd">print_newline</span><span class="sym">()</span>
