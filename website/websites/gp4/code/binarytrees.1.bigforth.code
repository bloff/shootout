<span class="slc">\ binary-tree.gforth</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>
<span class="slc">\ contributed by Ian Osgood</span>
<span class="slc">\ modified by Bernd Paysan</span>

<span class="num">4</span> <span class="kwa">constant min</span><span class="sym">-</span><span class="kwa">depth</span>

<span class="slc">\ read NUM from last command line argument</span>
<span class="num">0</span><span class="sym">.</span> argc <span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span><span class="kwa">drop drop min</span><span class="sym">-</span><span class="kwa">depth</span> <span class="num">2</span> <span class="sym">+</span> <span class="kwa">max constant</span> NUM

struct{
  cell left
  cell right
  cell item
} node

<span class="sym">:</span> bottom<span class="sym">-</span>up<span class="sym">-</span>tree <span class="com">( item depth -- tree )</span>
  <span class="kwa">dup if</span>
    <span class="kwa">over</span> <span class="num">2</span><span class="sym">*</span> <span class="num">1</span><span class="sym">-</span> <span class="kwa">over</span> <span class="num">1</span><span class="sym">-</span> <span class="kwa">recurse</span>  <span class="sym">&gt;</span>r
    <span class="kwa">over</span> <span class="num">2</span><span class="sym">*</span>    <span class="kwa">swap</span> <span class="num">1</span><span class="sym">-</span> <span class="kwa">recurse</span>  r<span class="sym">&gt;</span>
  <span class="kwa">else</span> <span class="num">0</span> <span class="kwa">then</span> <span class="com">( item right left )</span>
  sizeof node allocate throw
  tuck node left <span class="sym">!</span>  tuck node right <span class="sym">!</span>  tuck node item <span class="sym">! ;</span>

<span class="sym">:</span> item<span class="sym">-</span>check <span class="com">( tree -- n )</span>
  <span class="kwa">dup</span> node item <span class="sym">&#64;</span>
  <span class="kwa">over</span> node left <span class="sym">&#64;</span> <span class="kwa">if</span>
    <span class="kwa">over</span> node left <span class="sym">&#64;</span> <span class="kwa">recurse</span> <span class="sym">+</span>  <span class="kwa">over</span> node right <span class="sym">&#64;</span> <span class="kwa">recurse</span> <span class="sym">-</span>
  <span class="kwa">then</span> nip <span class="sym">;</span>

<span class="sym">:</span> free<span class="sym">-</span>tree <span class="com">( tree -- )</span>
  <span class="kwa">dup</span> node right <span class="sym">&#64;</span> <span class="kwa">if</span>
    <span class="kwa">dup</span> node right <span class="sym">&#64;</span> <span class="kwa">recurse  dup</span> node left <span class="sym">&#64;</span> <span class="kwa">recurse</span>
  <span class="kwa">then</span> free throw <span class="sym">;</span>

<span class="sym">: .</span>check <span class="com">( check depth -- )</span>
  <span class="sym">.</span><span class="str">&quot;  of depth &quot;</span> <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">#</span>tab <span class="kwa">emit</span> <span class="sym">.</span><span class="str">&quot;  check: &quot;</span> <span class="num">1</span> <span class="sym">.</span>r <span class="sym">;</span>

<span class="sym">:</span> main
  <span class="num">0</span> NUM <span class="num">1</span><span class="sym">+</span> bottom<span class="sym">-</span>up<span class="sym">-</span>tree
  <span class="sym">.</span><span class="str">&quot; stretch tree&quot;</span> <span class="kwa">dup</span> item<span class="sym">-</span>check NUM <span class="num">1</span><span class="sym">+ .</span>check <span class="kwa">cr</span>
  free<span class="sym">-</span>tree
  <span class="num">0</span> NUM bottom<span class="sym">-</span>up<span class="sym">-</span>tree
  NUM <span class="num">1</span><span class="sym">+</span> <span class="kwa">min</span><span class="sym">-</span><span class="kwa">depth do</span>
    <span class="num">1</span>  NUM <span class="kwa">min</span><span class="sym">-</span><span class="kwa">depth</span> <span class="sym">+</span> <span class="kwa">i</span> <span class="sym">-</span>  <span class="kwa">lshift</span>  <span class="num">0</span> <span class="com">( iterations check )</span>
    <span class="kwa">over</span> <span class="num">1</span><span class="sym">+</span> <span class="num">1</span> <span class="kwa">do</span>
      <span class="kwa">i        j</span> bottom<span class="sym">-</span>up<span class="sym">-</span>tree <span class="kwa">dup</span> item<span class="sym">-</span>check <span class="kwa">swap</span> free<span class="sym">-</span>tree <span class="sym">+</span>
      <span class="kwa">i negate j</span> bottom<span class="sym">-</span>up<span class="sym">-</span>tree <span class="kwa">dup</span> item<span class="sym">-</span>check <span class="kwa">swap</span> free<span class="sym">-</span>tree <span class="sym">+</span>
    <span class="kwa">loop</span>
    <span class="kwa">swap</span> <span class="num">2</span><span class="sym">*</span> <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">#</span>tab <span class="kwa">emit</span> <span class="sym">.</span><span class="str">&quot;  trees&quot;</span> <span class="kwa">i</span> <span class="sym">.</span>check <span class="kwa">cr</span>
  <span class="num">2</span> <span class="sym">+</span><span class="kwa">loop</span>
  <span class="sym">.</span><span class="str">&quot; long lived tree&quot;</span> <span class="kwa">dup</span> item<span class="sym">-</span>check NUM <span class="sym">.</span>check <span class="kwa">cr</span>
  free<span class="sym">-</span>tree <span class="sym">;</span>

main bye  <span class="slc">\ done!</span>
