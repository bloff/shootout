<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Paolo Bonzini *&quot;</span><span class="sym">!</span>

Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>PermGenerator
	superclass<span class="sym">: #</span>{Core<span class="sym">.</span>Object}
	indexedType<span class="sym">: #</span>none
	private<span class="sym">:</span> <span class="kwa">false</span>
	instanceVariableNames<span class="sym">:</span> <span class="str">'timesRotated perm atEnd '</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>PermGenerator class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

new<span class="sym">:</span> size
    <span class="sym">^</span><span class="kwa">self</span> new
	initialize<span class="sym">:</span> size<span class="sym">;</span>
	yourself <span class="sym">! !</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>PermGenerator methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

initialize<span class="sym">:</span> size
    perm <span class="sym">:= (</span><span class="num">1</span> to<span class="sym">:</span> size<span class="sym">)</span> asArray<span class="sym">.</span>
    timesRotated <span class="sym">:=</span> Array new<span class="sym">:</span> size withAll<span class="sym">:</span> <span class="num">0</span><span class="sym">.</span>
    atEnd <span class="sym">:=</span> <span class="kwa">false</span> <span class="sym">!</span>

makeNext
    <span class="sym">|</span> temp remainder <span class="sym">|</span>
    <span class="com">&quot;* Generate the next permutation. *&quot;</span>
    <span class="num">2</span> to<span class="sym">:</span> perm size do<span class="sym">: [ :</span>r <span class="sym">|</span>
	<span class="com">&quot;* Rotate the first r items to the left. *&quot;</span>
        temp <span class="sym">:=</span> perm at<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span>
        <span class="num">1</span> to<span class="sym">:</span> r <span class="sym">-</span> <span class="num">1</span> do<span class="sym">: [ :</span>i <span class="sym">|</span> perm at<span class="sym">:</span> i put<span class="sym">: (</span>perm at<span class="sym">:</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">) ].</span>
        perm at<span class="sym">:</span> r put<span class="sym">:</span> temp<span class="sym">.</span>

        remainder <span class="sym">:=</span> timesRotated at<span class="sym">:</span> r put<span class="sym">: ((</span>timesRotated at<span class="sym">:</span> r<span class="sym">) +</span> <span class="num">1</span><span class="sym">) \\</span> r<span class="sym">.</span>
        remainder <span class="sym">=</span> <span class="num">0</span> ifFalse<span class="sym">: [ ^</span><span class="kwa">self</span> <span class="sym">].</span>

	<span class="com">&quot;* After r rotations, the first r items are in their original positions.</span>
<span class="com">	 Go on rotating the first r+1 items. *&quot;</span>
    <span class="sym">].</span>

    <span class="com">&quot;* We are past the final permutation. *&quot;</span>
    atEnd <span class="sym">:=</span> <span class="kwa">true</span> <span class="sym">! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>PermGenerator methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

atEnd
    <span class="sym">^</span>atEnd <span class="sym">!</span>

next
    <span class="sym">|</span> result <span class="sym">|</span>
    result <span class="sym">:=</span> perm copy<span class="sym">.</span>
    <span class="kwa">self</span> makeNext<span class="sym">.</span>
    <span class="sym">^</span>result <span class="sym">! !</span>


<span class="sym">!</span>Core<span class="sym">.</span>Array methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

pfannkuchen
    <span class="sym">|</span> first complement a b k <span class="sym">|</span>
    k <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
    <span class="sym">[ (</span>first <span class="sym">:=</span> <span class="kwa">self</span> at<span class="sym">:</span> <span class="num">1</span><span class="sym">) ==</span> <span class="num">1</span> <span class="sym">]</span> whileFalse<span class="sym">: [</span>
	k <span class="sym">:=</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
	complement <span class="sym">:=</span> first <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
	<span class="num">1</span> to<span class="sym">:</span> first <span class="sym">//</span> <span class="num">2</span> do<span class="sym">: [ :</span>i <span class="sym">|</span>
	    a <span class="sym">:=</span> <span class="kwa">self</span> at<span class="sym">:</span> i<span class="sym">.</span>
	    b <span class="sym">:=</span> <span class="kwa">self</span> at<span class="sym">:</span> complement <span class="sym">-</span> i<span class="sym">.</span>
	    <span class="kwa">self</span> at<span class="sym">:</span> i put<span class="sym">:</span> b<span class="sym">.</span>
	    <span class="kwa">self</span> at<span class="sym">:</span> complement <span class="sym">-</span> i put<span class="sym">:</span> a<span class="sym">.</span>
	<span class="sym">]</span>
    <span class="sym">].</span>
    <span class="sym">^</span>k <span class="sym">! !</span>


<span class="sym">!</span>Core<span class="sym">.</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

maxPfannkuchen
    <span class="sym">|</span> max gen perm check <span class="sym">|</span>
    max <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
    check <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
    gen <span class="sym">:=</span> ComputerLanguageShootout<span class="sym">.</span>PermGenerator new<span class="sym">:</span> <span class="kwa">self</span><span class="sym">.</span>
    <span class="sym">[</span> gen atEnd <span class="sym">]</span> whileFalse<span class="sym">: [</span>
	perm <span class="sym">:=</span> gen next<span class="sym">.</span>
        check <span class="sym">&lt;</span> <span class="num">30</span> ifTrue<span class="sym">: [</span>
	    perm do<span class="sym">: [ :</span>each <span class="sym">|</span> OS<span class="sym">.</span>Stdout nextPutAll<span class="sym">:</span> each printString <span class="sym">].</span>
	    OS<span class="sym">.</span>Stdout cr<span class="sym">.</span>
	    check <span class="sym">:=</span> check <span class="sym">+</span> <span class="num">1</span> <span class="sym">].</span>
	max <span class="sym">:=</span> max max<span class="sym">:</span> perm pfannkuchen
    <span class="sym">].</span>
    <span class="sym">^</span>max <span class="sym">! !</span>


<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

fannkuch
   <span class="sym">|</span> n <span class="sym">|</span>
   n <span class="sym">:=</span> CEnvironment argv first asNumber<span class="sym">.</span>
   <span class="sym">^</span><span class="str">'Pfannkuchen('</span><span class="sym">,</span> n printString<span class="sym">,</span> <span class="str">') = '</span><span class="sym">,</span>  n maxPfannkuchen printString withNl <span class="sym">! !</span>
