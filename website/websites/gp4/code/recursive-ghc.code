<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Based on code contributed by:</span>
<span class="slc">-- Bryn Keller, Don Stewart, Einar Karttunen and Greg Buchholz</span>
<span class="slc">--</span>

<span class="kwa">import</span> System<span class="sym">;</span> <span class="kwa">import</span> Text.Printf

main <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">(</span>n<span class="sym">,</span>m<span class="sym">,</span>k<span class="sym">) &lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head <span class="sym">&gt;&gt;=</span> \n <span class="sym">-&gt;</span> return <span class="sym">(</span>n<span class="sym">,</span>n<span class="sym">+</span><span class="num">2</span><span class="sym">,</span>fromIntegral <span class="sym">(</span>n<span class="sym">+</span><span class="num">2</span><span class="sym">))</span>
          printf <span class="str">&quot;Ack(3,%d): %d\n&quot;</span>     n             <span class="sym">(</span>ack <span class="num">3</span> n<span class="sym">)</span>
          printf <span class="str">&quot;Fib(%d): %d\n&quot;</span>       <span class="sym">(</span>n<span class="sym">*</span><span class="num">4</span><span class="sym">)         (</span>fib <span class="sym">(</span>n<span class="sym">*</span><span class="num">4</span><span class="sym">) ::</span> <span class="kwb">Int</span><span class="sym">)</span>
          printf <span class="str">&quot;Tak(%d,%d,%d): %d\n&quot;</span> <span class="sym">(</span>m<span class="sym">*</span><span class="num">3</span><span class="sym">) (</span>m<span class="sym">*</span><span class="num">2</span><span class="sym">)</span> m <span class="sym">(</span>tak <span class="sym">(</span>m<span class="sym">*</span><span class="num">3</span><span class="sym">) (</span>m<span class="sym">*</span><span class="num">2</span><span class="sym">)</span> m <span class="sym">::</span> <span class="kwb">Int</span><span class="sym">)</span>
          printf <span class="str">&quot;Fib(%d): %f\n&quot;</span>       <span class="sym">(</span>n<span class="sym">*</span><span class="num">5</span><span class="sym">)         (</span>fib <span class="sym">(</span>n<span class="sym">*</span><span class="num">5.0</span><span class="sym">) ::</span> <span class="kwb">Double</span><span class="sym">)</span>
          printf <span class="str">&quot;Tak(%d,%d,%d): %f\n&quot;</span> <span class="sym">(</span>m<span class="sym">*</span><span class="num">3</span><span class="sym">) (</span>m<span class="sym">*</span><span class="num">2</span><span class="sym">)</span> m <span class="sym">(</span>tak <span class="sym">(</span>k<span class="sym">*</span><span class="num">3</span><span class="sym">) (</span>k<span class="sym">*</span><span class="num">2</span><span class="sym">)</span> k <span class="sym">::</span> <span class="kwb">Float</span><span class="sym">)</span>

ack <span class="num">0</span> n <span class="sym">=</span> n<span class="sym">+</span><span class="num">1</span>
ack m n <span class="sym">=</span> ack <span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> $ if n <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> <span class="num">1</span> <span class="kwa">else</span> ack m <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>

fib <span class="num">0</span> <span class="sym">=</span> <span class="num">1</span>
fib <span class="num">1</span> <span class="sym">=</span> <span class="num">1</span>
fib n <span class="sym">=</span> fib <span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">) +</span> fib <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>

tak x y z <span class="sym">=</span> if y <span class="sym">&gt;=</span> x <span class="kwa">then</span> z <span class="kwa">else</span> tak <span class="sym">(</span>tak <span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> y z<span class="sym">) (</span>tak <span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> z x<span class="sym">) (</span>tak <span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> x y<span class="sym">)</span>

