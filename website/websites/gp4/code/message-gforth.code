<span class="slc">\ The Great Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>
<span class="slc">\</span>
<span class="slc">\ contributed by Ian Osgood</span>

<span class="slc">\ read NUM from last command line argument</span>
<span class="num">0</span><span class="sym">.</span> argc <span class="sym">&#64;</span> <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

require tasker<span class="sym">.</span>fs

variable receiver  <span class="slc">\ task being poked</span>
variable data      <span class="slc">\ data being poked</span>
variable finished

<span class="sym">:</span> poke <span class="com">( task data -- )</span>
  begin receiver <span class="sym">&#64;</span> while pause repeat
  data <span class="sym">!</span> dup receiver <span class="sym">!</span> wake <span class="sym">;</span>

<span class="sym">:</span> peek<span class="sym">?</span> <span class="com">( task -- data T | F )</span>
  receiver <span class="sym">&#64; =</span> dup if receiver off  data <span class="sym">&#64;</span> swap then <span class="sym">;</span>

<span class="sym">:</span> sum<span class="sym">-</span>task <span class="com">( -- new-task )</span>
  <span class="num">64</span> NewTask dup dup <span class="num">0 2</span> rot pass
  <span class="com">( this-task sum -- )</span>
  begin
    begin pause over peek<span class="sym">?</span> until
    <span class="num">1</span><span class="sym">+ +</span>
  finished <span class="sym">&#64;</span> until
  <span class="num">1</span> u<span class="sym">.</span>r cr drop <span class="sym">;</span>

<span class="sym">:</span> task <span class="com">( next-task -- new-task )</span>
  <span class="num">64</span> NewTask tuck <span class="num">2</span> over pass
  <span class="com">( next-task this-task -- )</span>
  begin
    over begin pause over peek<span class="sym">?</span> until
    <span class="num">1</span><span class="sym">+</span> poke
  finished <span class="sym">&#64;</span> until <span class="num">2</span>drop <span class="sym">;</span>

<span class="sym">:</span> main   receiver off
  sum<span class="sym">-</span>task
  <span class="num">500 1</span> do task loop
  NUM <span class="num">0</span> do dup <span class="num">0</span> poke loop drop
  <span class="slc">\ wait for all tasks to finish</span>
  finished on
  begin pause single<span class="sym">-</span>tasking<span class="sym">?</span> until <span class="sym">;</span>

main bye  <span class="slc">\ done!</span>
