<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">% contributed by Fredrik Svahn</span>

<span class="hl sym">-</span><span class="hl kwd">module</span><span class="hl sym">(</span>fasta<span class="hl sym">)</span>.
<span class="hl sym">-</span><span class="hl kwd">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">])</span>.

<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>LINELEN<span class="hl sym">,</span> <span class="hl num">60</span><span class="hl sym">)</span>.
<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>PREC<span class="hl sym">,</span><span class="hl num">10000000</span><span class="hl sym">)</span>.

<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>IM<span class="hl sym">,</span> <span class="hl num">139968</span><span class="hl sym">)</span>.
<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>IC<span class="hl sym">,</span> <span class="hl num">29573</span><span class="hl sym">)</span>.
<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>IA<span class="hl sym">,</span> <span class="hl num">3877</span><span class="hl sym">)</span>.

<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>ALU<span class="hl sym">,&lt;&lt;</span><span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">&gt;&gt;)</span>.

<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>IUB<span class="hl sym">, [{</span>$a<span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">}, {</span>$c<span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">}, {</span>$g<span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">}, {</span>$t<span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">}, {</span>$B<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$D<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$H<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$K<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$M<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$N<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$R<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$S<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$V<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$W<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}, {</span>$Y<span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">}])</span>.

<span class="hl sym">-</span><span class="hl kwd">define</span><span class="hl sym">(</span>HS<span class="hl sym">, [{</span>$a<span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">}, {</span>$c<span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">}, {</span>$g<span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">}, {</span>$t<span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">}])</span>.

<span class="hl kwd">main</span><span class="hl sym">([</span>Arg<span class="hl sym">]) -&gt;</span>
    <span class="hl kwb">put</span><span class="hl sym">(</span>port<span class="hl sym">,</span> <span class="hl kwb">open_port</span><span class="hl sym">({</span>fd<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">}, [</span>out<span class="hl sym">,</span> <span class="hl kwb">binary</span><span class="hl sym">])),</span>

    Seed <span class="hl sym">=</span> <span class="hl num">42</span><span class="hl sym">,</span>
    N <span class="hl sym">=</span> <span class="hl kwb">list_to_integer</span><span class="hl sym">(</span>Arg<span class="hl sym">),</span>

    <span class="hl kwd">print</span><span class="hl sym">(&lt;&lt;</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">&gt;&gt;),</span>
    <span class="hl kwd">cycle</span><span class="hl sym">(</span>?ALU<span class="hl sym">,</span> N<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">, [],</span> <span class="hl num">0</span><span class="hl sym">),</span>

    <span class="hl kwd">print</span><span class="hl sym">(&lt;&lt;</span><span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">&gt;&gt;),</span>
    NewSeed <span class="hl sym">=</span> <span class="hl kwd">rand</span><span class="hl sym">(</span><span class="hl kwd">mk_list</span><span class="hl sym">(</span>?IUB<span class="hl sym">),</span> ?LINELEN<span class="hl sym">,</span> N<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">, [],</span> Seed<span class="hl sym">, [],</span> <span class="hl num">0</span><span class="hl sym">),</span>

    <span class="hl kwd">print</span><span class="hl sym">(&lt;&lt;</span><span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">&gt;&gt;),</span>
    <span class="hl kwd">rand</span><span class="hl sym">(</span><span class="hl kwd">mk_list</span><span class="hl sym">(</span>?HS<span class="hl sym">),</span> ?LINELEN<span class="hl sym">,</span> N<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">, [],</span> NewSeed<span class="hl sym">, [],</span><span class="hl num">0</span><span class="hl sym">),</span>
    <span class="hl kwb">halt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>.

<span class="hl slc">%Newline every LINELEN char, however io is expensive so we want to buffer</span>
<span class="hl slc">%up a few lines before printing. 16 lines in buffer seem to be fastest.</span>
<span class="hl kwd">cycle</span><span class="hl sym">(</span>Seq<span class="hl sym">,</span> Total<span class="hl sym">,</span> RowBuf<span class="hl sym">,</span> _<span class="hl sym">)</span> <span class="hl kwa">when</span> Total <span class="hl sym">&lt;</span> ?LINELEN <span class="hl sym">-&gt;</span>
    <span class="hl sym">&lt;&lt;</span>Seq1<span class="hl sym">:</span>Total<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span> _<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt; = &lt;&lt;</span>Seq<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span> ?ALU<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt;,</span>
    <span class="hl kwd">reverse_print</span><span class="hl sym">(</span>RowBuf<span class="hl sym">),</span>
    <span class="hl kwd">print</span><span class="hl sym">(&lt;&lt;</span>Seq1<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">&gt;&gt;);</span>

<span class="hl kwd">cycle</span><span class="hl sym">(</span>Seq<span class="hl sym">,</span> Total<span class="hl sym">,</span> RowBuf<span class="hl sym">,</span> RowBufSize<span class="hl sym">)</span> <span class="hl kwa">when</span> RowBufSize <span class="hl sym">==</span> <span class="hl num">16</span> <span class="hl sym">-&gt;</span>
    <span class="hl kwd">reverse_print</span><span class="hl sym">(</span>RowBuf<span class="hl sym">),</span>
    <span class="hl kwd">cycle</span><span class="hl sym">(</span>Seq<span class="hl sym">,</span> Total<span class="hl sym">, [],</span> <span class="hl num">0</span><span class="hl sym">);</span>

<span class="hl kwd">cycle</span><span class="hl sym">(</span>Seq<span class="hl sym">,</span> Total<span class="hl sym">,</span> RowBuf<span class="hl sym">,</span> RowBufSize <span class="hl sym">)</span> <span class="hl kwa">when</span> <span class="hl kwb">size</span><span class="hl sym">(</span>Seq<span class="hl sym">) &lt;</span> ?LINELEN <span class="hl sym">-&gt;</span>
    <span class="hl sym">&lt;&lt;</span>Seq1<span class="hl sym">:</span>?LINELEN<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span> Seq2<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt; = &lt;&lt;</span>Seq<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span> ?ALU<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt;,</span>
    <span class="hl kwd">cycle</span><span class="hl sym">(</span>Seq2<span class="hl sym">,</span> Total<span class="hl sym">-</span>?LINELEN<span class="hl sym">, [&lt;&lt;</span>Seq1<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">&gt;&gt;|</span> RowBuf<span class="hl sym">],</span> RowBufSize<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>

<span class="hl kwd">cycle</span><span class="hl sym">(</span>Seq<span class="hl sym">,</span> Total<span class="hl sym">,</span> RowBuf<span class="hl sym">,</span> RowBufSize<span class="hl sym">) -&gt;</span>
    <span class="hl sym">&lt;&lt;</span>Seq1<span class="hl sym">:</span>?LINELEN<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span> Seq2<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">&gt;&gt; =</span> Seq<span class="hl sym">,</span>
    <span class="hl kwd">cycle</span><span class="hl sym">(</span>Seq2<span class="hl sym">,</span> Total<span class="hl sym">-</span>?LINELEN<span class="hl sym">, [&lt;&lt;</span>Seq1<span class="hl sym">/</span><span class="hl kwb">binary</span><span class="hl sym">,</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">&gt;&gt;|</span> RowBuf<span class="hl sym">],</span> RowBufSize<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>.

<span class="hl kwd">rand</span><span class="hl sym">(</span>_<span class="hl sym">,</span> _<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> List<span class="hl sym">,</span> Seed<span class="hl sym">,</span> RowBuf<span class="hl sym">,</span> _<span class="hl sym">) -&gt;</span>
    LastLine <span class="hl sym">=</span> lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">([</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">|</span> List<span class="hl sym">]),</span>
    <span class="hl kwd">reverse_print</span><span class="hl sym">([</span>LastLine <span class="hl sym">|</span> RowBuf<span class="hl sym">]),</span>
    Seed<span class="hl sym">;</span>

<span class="hl kwd">rand</span><span class="hl sym">(</span>Freq<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> Total<span class="hl sym">,</span> List<span class="hl sym">,</span> Seed<span class="hl sym">,</span> RowBuf<span class="hl sym">,</span> RowBufSize<span class="hl sym">)</span> <span class="hl kwa">when</span> RowBufSize <span class="hl sym">==</span> <span class="hl num">16</span> <span class="hl sym">-&gt;</span>
    Line <span class="hl sym">=</span> lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">([</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">|</span> List<span class="hl sym">]),</span>
    <span class="hl kwd">reverse_print</span><span class="hl sym">([</span>Line <span class="hl sym">|</span> RowBuf<span class="hl sym">]),</span>
    <span class="hl kwd">rand</span><span class="hl sym">(</span>Freq<span class="hl sym">,</span> ?LINELEN<span class="hl sym">,</span> Total<span class="hl sym">, [],</span> Seed<span class="hl sym">, [],</span> <span class="hl num">0</span><span class="hl sym">);</span>

<span class="hl kwd">rand</span><span class="hl sym">(</span>Freq<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> Total<span class="hl sym">,</span> List<span class="hl sym">,</span> Seed<span class="hl sym">,</span> RowBuf<span class="hl sym">,</span> RowBufSize<span class="hl sym">) -&gt;</span>
    Line <span class="hl sym">=</span> lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">([</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">|</span> List<span class="hl sym">]),</span>
    <span class="hl kwd">rand</span><span class="hl sym">(</span>Freq<span class="hl sym">,</span> ?LINELEN<span class="hl sym">,</span> Total<span class="hl sym">, [],</span> Seed<span class="hl sym">, [</span> Line <span class="hl sym">|</span> RowBuf<span class="hl sym">],</span> RowBufSize <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>

<span class="hl kwd">rand</span><span class="hl sym">(</span>Freq<span class="hl sym">,</span> LineLen<span class="hl sym">,</span> Total<span class="hl sym">,</span> List<span class="hl sym">,</span> Seed<span class="hl sym">,</span> RowBuf<span class="hl sym">,</span> RowBufSize<span class="hl sym">) -&gt;</span>
    <span class="hl sym">{</span>Rand<span class="hl sym">,</span> NewSeed<span class="hl sym">} =</span> <span class="hl kwd">random</span><span class="hl sym">(</span>Seed<span class="hl sym">),</span>
    Base <span class="hl sym">=</span> <span class="hl kwd">get_base</span><span class="hl sym">(</span>Freq<span class="hl sym">,</span> Rand<span class="hl sym">),</span>
    <span class="hl kwd">rand</span><span class="hl sym">(</span>Freq<span class="hl sym">,</span> LineLen<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> Total<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">, [</span>Base <span class="hl sym">|</span> List<span class="hl sym">],</span> NewSeed<span class="hl sym">,</span> RowBuf<span class="hl sym">,</span> RowBufSize<span class="hl sym">)</span>.

<span class="hl kwd">random</span><span class="hl sym">(</span>Seed<span class="hl sym">) -&gt;</span>
    NewSeed <span class="hl sym">= (</span>Seed <span class="hl sym">*</span> ?IA <span class="hl sym">+</span> ?IC<span class="hl sym">)</span> rem ?IM<span class="hl sym">,</span>
    <span class="hl sym">{</span><span class="hl kwb">trunc</span><span class="hl sym">(</span>NewSeed <span class="hl sym">/</span> ?IM <span class="hl sym">*</span> ?PREC<span class="hl sym">),</span> NewSeed<span class="hl sym">}</span>.

<span class="hl kwd">get_base</span><span class="hl sym">([{</span>Base<span class="hl sym">,</span> _<span class="hl sym">}],</span> _P<span class="hl sym">) -&gt;</span> Base<span class="hl sym">;</span>
<span class="hl kwd">get_base</span><span class="hl sym">([{</span>Base<span class="hl sym">,</span> Freq<span class="hl sym">}|</span>_<span class="hl sym">],</span> P<span class="hl sym">)</span> <span class="hl kwa">when</span> P <span class="hl sym">&lt;</span> Freq <span class="hl sym">-&gt;</span> Base<span class="hl sym">;</span>
<span class="hl kwd">get_base</span><span class="hl sym">([{</span>_<span class="hl sym">,</span> _<span class="hl sym">} |</span> Rest<span class="hl sym">],</span> P<span class="hl sym">) -&gt;</span> <span class="hl kwd">get_base</span><span class="hl sym">(</span>Rest<span class="hl sym">,</span> P<span class="hl sym">)</span>.

<span class="hl slc">%Floats are expensive and we want to avoid dealing with floats in get_base/1.</span>
<span class="hl slc">%Precalculate list of accumulated integers</span>
<span class="hl kwd">mk_list</span><span class="hl sym">(</span>Probs<span class="hl sym">)-&gt;</span> lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">(</span><span class="hl kwd">mk_list</span><span class="hl sym">(</span>Probs<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, []))</span>.
<span class="hl kwd">mk_list</span><span class="hl sym">([{</span>B<span class="hl sym">,</span> P<span class="hl sym">}],</span> AccP<span class="hl sym">,</span> AccL<span class="hl sym">)-&gt; [{</span>B<span class="hl sym">,</span> AccP <span class="hl sym">+</span> <span class="hl kwb">trunc</span><span class="hl sym">(</span>P<span class="hl sym">*</span>?PREC<span class="hl sym">)}|</span> AccL<span class="hl sym">];</span>
<span class="hl kwd">mk_list</span><span class="hl sym">([{</span>B<span class="hl sym">,</span> P<span class="hl sym">}|</span>T<span class="hl sym">],</span> AccP<span class="hl sym">,</span> AccL<span class="hl sym">)-&gt;</span>
    <span class="hl kwd">mk_list</span><span class="hl sym">(</span>T<span class="hl sym">,</span> AccP <span class="hl sym">+</span> <span class="hl kwb">trunc</span><span class="hl sym">(</span>P<span class="hl sym">*</span>?PREC<span class="hl sym">), [{</span>B<span class="hl sym">,</span> AccP <span class="hl sym">+</span> <span class="hl kwb">trunc</span><span class="hl sym">(</span>P<span class="hl sym">*</span>?PREC<span class="hl sym">)}|</span> AccL<span class="hl sym">])</span>.

<span class="hl kwd">print</span><span class="hl sym">(</span>List<span class="hl sym">) -&gt;</span> <span class="hl kwd">port_command</span><span class="hl sym">(</span><span class="hl kwb">get</span><span class="hl sym">(</span>port<span class="hl sym">),</span> List<span class="hl sym">)</span>.
<span class="hl kwd">reverse_print</span><span class="hl sym">(</span>List<span class="hl sym">) -&gt;</span> <span class="hl kwd">port_command</span><span class="hl sym">(</span><span class="hl kwb">get</span><span class="hl sym">(</span>port<span class="hl sym">),</span> lists<span class="hl sym">:</span><span class="hl kwd">reverse</span><span class="hl sym">(</span>List<span class="hl sym">))</span>.
