<span class="slc">' The Computer Language Shootout</span>
<span class="slc">' http://shootout.alioth.debian.org/</span>
<span class="slc">'reverse-complement program FreeBASIC</span>
<span class="slc">'by Antoni Gual     5/2006</span>
<span class="slc">'</span>
option explicit
#define linelength <span class="num">60</span>
#define bufinc <span class="num">1024</span><span class="sym">*</span><span class="num">512</span>
<span class="kwa">dim</span> shared pairs<span class="sym">(</span><span class="num">14</span><span class="sym">)={</span>asc<span class="sym">(</span><span class="str">&quot;A&quot;</span><span class="sym">),</span>asc<span class="sym">(</span><span class="str">&quot;T&quot;</span><span class="sym">),</span>_
                      asc<span class="sym">(</span><span class="str">&quot;C&quot;</span><span class="sym">),</span>asc<span class="sym">(</span><span class="str">&quot;G&quot;</span><span class="sym">),</span>_
                      asc<span class="sym">(</span><span class="str">&quot;M&quot;</span><span class="sym">),</span>asc<span class="sym">(</span><span class="str">&quot;K&quot;</span><span class="sym">),</span>_
                      asc<span class="sym">(</span><span class="str">&quot;R&quot;</span><span class="sym">),</span>asc<span class="sym">(</span><span class="str">&quot;Y&quot;</span><span class="sym">),</span>_
                      asc<span class="sym">(</span><span class="str">&quot;K&quot;</span><span class="sym">),</span>asc<span class="sym">(</span><span class="str">&quot;M&quot;</span><span class="sym">),</span>_
                      asc<span class="sym">(</span><span class="str">&quot;V&quot;</span><span class="sym">),</span>asc<span class="sym">(</span><span class="str">&quot;B&quot;</span><span class="sym">),</span>_
                      asc<span class="sym">(</span><span class="str">&quot;H&quot;</span><span class="sym">),</span>asc<span class="sym">(</span><span class="str">&quot;D&quot;</span><span class="sym">)}</span>

<span class="kwa">dim</span> shared compl<span class="sym">(</span><span class="num">128</span><span class="sym">)</span> <span class="kwa">as</span> ubyte
<span class="slc">'</span>
<span class="slc">'---------------------------------------------</span>
<span class="kwa">sub</span> dopairs
  <span class="kwa">dim</span> i
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span> <span class="kwa">to</span> <span class="num">127</span><span class="sym">:</span>compl<span class="sym">(</span>i<span class="sym">)=</span>iif<span class="sym">(</span>i<span class="sym">&lt;</span><span class="num">96</span><span class="sym">,</span>i<span class="sym">,</span>i<span class="sym">-</span><span class="num">32</span><span class="sym">):</span><span class="kwa">next</span>
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span> <span class="kwa">to</span> <span class="num">12</span> <span class="kwa">step</span> <span class="num">2</span>
   compl<span class="sym">(</span>pairs<span class="sym">(</span>i<span class="sym">))      =</span>pairs<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
   compl<span class="sym">(</span>pairs<span class="sym">(</span>i<span class="sym">)+</span><span class="num">32</span><span class="sym">)   =</span>pairs<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
   compl<span class="sym">(</span>pairs<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">))    =</span>pairs<span class="sym">(</span>i<span class="sym">)</span>
   compl<span class="sym">(</span>pairs<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)+</span><span class="num">32</span><span class="sym">) =</span>pairs<span class="sym">(</span>i<span class="sym">)</span>
  <span class="kwa">next</span>
<span class="kwa">end sub</span>
<span class="slc">'</span>
<span class="slc">'----------------------------------------------</span>
<span class="kwa">sub</span> doreverse <span class="sym">(</span> b <span class="kwa">as</span> zstring ptr<span class="sym">,</span><span class="kwa">byval</span> j<span class="sym">)</span>
   <span class="kwa">dim</span> i<span class="sym">,</span>t <span class="kwa">as</span> ubyte
   <span class="kwa">dim as</span> ubyte ptr st<span class="sym">,</span>en<span class="sym">,</span>pc
   <span class="kwa">if</span> j<span class="sym">=</span><span class="num">0</span> <span class="kwa">then</span> exit <span class="kwa">sub</span>
    st<span class="sym">=</span>b
    en<span class="sym">=</span>b<span class="sym">+</span>j<span class="sym">-</span><span class="num">1</span>
    <span class="kwa">while</span> st<span class="sym">&lt;=</span>en
    t<span class="sym">=</span>compl<span class="sym">(*</span>st<span class="sym">)</span>
    <span class="sym">*</span>st<span class="sym">=</span>compl<span class="sym">(*</span>en<span class="sym">)</span>
    <span class="sym">*</span>en<span class="sym">=</span>t
    st<span class="sym">+=</span><span class="num">1</span>
    en<span class="sym">-=</span><span class="num">1</span>
   wend
<span class="kwa">end sub</span>
<span class="slc">'</span>
<span class="slc">'----------------------------------------------</span>
<span class="kwa">sub</span> doprint <span class="sym">(</span><span class="kwa">byval</span> b <span class="kwa">as</span> zstring ptr<span class="sym">,</span><span class="kwa">byval</span> l<span class="sym">)</span>
  <span class="kwa">dim</span> i<span class="sym">,</span>m<span class="sym">,</span> c <span class="kwa">as</span> ubyte
  <span class="kwa">if</span> l<span class="sym">=</span><span class="num">0</span> <span class="kwa">then</span> exit <span class="kwa">sub</span>
  i<span class="sym">=</span><span class="num">0</span>
  <span class="kwa">while</span> i<span class="sym">&lt;</span>l
   m<span class="sym">=</span>iif <span class="sym">(</span>l<span class="sym">-</span>linelength<span class="sym">&lt;</span>i<span class="sym">,</span>l<span class="sym">-</span>i<span class="sym">,</span>linelength<span class="sym">)</span>
   c<span class="sym">=*(</span>b<span class="sym">+</span>m<span class="sym">)</span>
   <span class="sym">*(</span>b<span class="sym">+</span>m<span class="sym">)=</span><span class="num">0</span>
   print <span class="sym">*</span>b
   <span class="sym">*(</span>b<span class="sym">+</span>m<span class="sym">)=</span>c
   b<span class="sym">+=</span>m
   i<span class="sym">+=</span>linelength
  wend
<span class="kwa">end sub</span>
<span class="slc">'</span>
<span class="slc">'-----------------------------------------------</span>
<span class="kwa">dim  as</span> zstring ptr b<span class="sym">,</span>a
<span class="kwa">dim</span> lall<span class="sym">,</span>lb<span class="sym">,</span>t
lall<span class="sym">=</span>bufinc
b<span class="sym">=</span>allocate<span class="sym">(</span>lall<span class="sym">*</span>sizeof<span class="sym">(</span>ubyte<span class="sym">))</span>
dopairs
open cons <span class="kwa">for</span> input <span class="kwa">as</span> # <span class="num">1</span>
a<span class="sym">=</span>b
b<span class="sym">[</span><span class="num">0</span><span class="sym">]=</span><span class="num">0</span>
do
 <span class="kwa">if</span> a<span class="sym">-</span>b<span class="sym">+</span><span class="num">128</span> <span class="sym">&gt;</span>lall <span class="kwa">then</span>
    t<span class="sym">=</span>a<span class="sym">-</span>b
    lall<span class="sym">+=</span>bufinc
    b<span class="sym">=</span> reallocate<span class="sym">(</span>b<span class="sym">,</span>lall<span class="sym">*</span>sizeof<span class="sym">(</span>ubyte<span class="sym">))</span>
    a<span class="sym">=</span>b<span class="sym">+</span>t
 <span class="kwa">end if</span>
 line input #<span class="num">1</span><span class="sym">, *</span>a
 <span class="slc">'if a[0]=0 then exit do</span>
 <span class="kwa">if</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">]=</span> asc<span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">)</span> <span class="kwa">then</span>
    doreverse b<span class="sym">,</span>a<span class="sym">-</span>b
    doprint b<span class="sym">,</span>a<span class="sym">-</span>b
    ? <span class="sym">*</span>a
    a<span class="sym">=</span>b
    b<span class="sym">[</span><span class="num">0</span><span class="sym">]=</span><span class="num">0</span>
    continue do
 <span class="kwa">end if</span>
 a<span class="sym">+=</span>len<span class="sym">(*</span>a<span class="sym">)</span>
 <span class="slc">'print a, len(b)</span>
loop until eof<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
doreverse b <span class="sym">,</span>a<span class="sym">-</span>b
doprint b <span class="sym">,</span>a<span class="sym">-</span>b
close
deallocate b
<span class="kwa">end</span>
