<span class="hl slc">// The Great Computer Language Shootout</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// modified by Isaac Gouy</span>


<span class="hl kwa">function</span> <span class="hl kwd">pad</span><span class="hl sym">(</span>number<span class="hl sym">,</span><span class="hl kwc">width</span><span class="hl sym">){</span>
   <span class="hl kwa">var</span> s <span class="hl sym">=</span> number<span class="hl sym">.</span><span class="hl kwc">toString</span><span class="hl sym">();</span>
   <span class="hl kwa">var</span> prefixWidth <span class="hl sym">=</span> <span class="hl kwc">width</span> <span class="hl sym">-</span> s<span class="hl sym">.</span><span class="hl kwc">length</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>prefixWidth<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">){</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">var</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>prefixWidth<span class="hl sym">;</span> i<span class="hl sym">++)</span> s <span class="hl sym">=</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> s<span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> s<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span> isPrime<span class="hl sym">){</span>
   <span class="hl kwa">var</span> i<span class="hl sym">,</span> k<span class="hl sym">,</span> count<span class="hl sym">;</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>m<span class="hl sym">;</span> i<span class="hl sym">++) {</span> isPrime<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">true</span><span class="hl sym">; }</span>
   count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>m<span class="hl sym">;</span> i<span class="hl sym">++){</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>isPrime<span class="hl sym">[</span>i<span class="hl sym">]) {</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span>k<span class="hl sym">=</span>i<span class="hl sym">+</span>i<span class="hl sym">;</span> k<span class="hl sym">&lt;=</span>m<span class="hl sym">;</span> k<span class="hl sym">+=</span>i<span class="hl sym">)</span> isPrime<span class="hl sym">[</span>k<span class="hl sym">] =</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
         count<span class="hl sym">++;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwa">var</span> n <span class="hl sym">=</span> arguments<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
<span class="hl kwa">if</span> <span class="hl sym">(</span>n<span class="hl sym">&lt;</span><span class="hl num">2</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>

<span class="hl kwa">var</span> m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
<span class="hl kwa">var</span> flags <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>

<span class="hl kwc">print</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">pad</span><span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">) +</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span>  <span class="hl kwd">pad</span><span class="hl sym">(</span><span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">),</span><span class="hl num">8</span><span class="hl sym">));</span>

m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
<span class="hl kwc">print</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">pad</span><span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">) +</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span>  <span class="hl kwd">pad</span><span class="hl sym">(</span><span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">),</span><span class="hl num">8</span><span class="hl sym">));</span>

m <span class="hl sym">= (</span><span class="hl num">1</span><span class="hl sym">&lt;&lt;</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)*</span><span class="hl num">10000</span><span class="hl sym">;</span>
<span class="hl kwc">print</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">pad</span><span class="hl sym">(</span>m<span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">) +</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span>  <span class="hl kwd">pad</span><span class="hl sym">(</span><span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">),</span><span class="hl num">8</span><span class="hl sym">));</span>

