<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">//</span>
<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Original C contributed by Sebastien Loisel</span>
<span class="slc">// Conversion to C++ by Jon Harrop</span>
<span class="slc">// Compile: g++ -O3 -o spectralnorm spectralnorm.cpp</span>

<span class="dir">#include &lt;cmath&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;sstream&gt;</span>
<span class="dir">#include &lt;emmintrin.h&gt;</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> typename Type <span class="sym">&gt;</span>
<span class="kwc">class</span> scoped_array
<span class="sym">{</span>

   <span class="kwc">public</span><span class="sym">:</span>

      <span class="kwd">scoped_array</span><span class="sym">(</span>Type <span class="sym">*</span> array<span class="sym">)</span>
         <span class="sym">:</span>
         <span class="kwd">array_</span><span class="sym">(</span>array<span class="sym">)</span>
      <span class="sym">{</span>
      <span class="sym">}</span>

      <span class="sym">~</span><span class="kwd">scoped_array</span><span class="sym">()</span>
      <span class="sym">{</span>
         <span class="kwa">delete</span><span class="sym">[]</span> array_<span class="sym">;</span>
      <span class="sym">}</span>

      Type <span class="sym">*</span> <span class="kwd">get</span><span class="sym">()</span>
      <span class="sym">{</span>
         <span class="kwa">return</span> array_<span class="sym">;</span>
      <span class="sym">}</span>

   <span class="kwc">private</span><span class="sym">:</span>

      Type <span class="sym">*</span> array_<span class="sym">;</span>

<span class="sym">};</span>

<span class="kwb">unsigned int</span> matrix_size<span class="sym">;</span>

<span class="kwc">typedef</span> <span class="kwb">double</span> aligned_doubles<span class="sym">[</span><span class="num">2</span><span class="sym">]</span> <span class="kwd">__attribute__</span><span class="sym">((</span><span class="kwd">aligned</span><span class="sym">(</span><span class="num">16</span><span class="sym">)));</span>

<span class="kwc">inline</span> __m128d <span class="kwd">evaluate_A_i</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">,</span> <span class="kwb">double</span> n<span class="sym">)</span> <span class="kwd">__attribute__</span><span class="sym">((</span>fastcall<span class="sym">,</span> pure<span class="sym">,</span> nothrow<span class="sym">));</span>

__m128d <span class="kwd">evaluate_A_i</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">,</span> <span class="kwb">double</span> n<span class="sym">)</span>
<span class="sym">{</span>
   aligned_doubles values <span class="sym">= {</span>n <span class="sym">/ ((</span>i <span class="sym">+</span> j<span class="sym">) * (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">) /</span> <span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">),</span> n <span class="sym">/ ((</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">) * (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">2</span><span class="sym">) /</span> <span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">2</span><span class="sym">)};</span>
   <span class="kwa">return</span> <span class="kwd">_mm_load_pd</span><span class="sym">(</span>values<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwc">inline</span> __m128d <span class="kwd">evaluate_A_j</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">,</span> <span class="kwb">double</span> n<span class="sym">)</span> <span class="kwd">__attribute__</span><span class="sym">((</span>fastcall<span class="sym">,</span> pure<span class="sym">,</span> nothrow<span class="sym">));</span>

__m128d <span class="kwd">evaluate_A_j</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">,</span> <span class="kwb">double</span> n<span class="sym">)</span>
<span class="sym">{</span>
   aligned_doubles values <span class="sym">= {</span>n <span class="sym">/ ((</span>i <span class="sym">+</span> j<span class="sym">) * (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">) /</span> <span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">),</span> n <span class="sym">/ ((</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">) * (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">2</span><span class="sym">) /</span> <span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)};</span>
   <span class="kwa">return</span> <span class="kwd">_mm_load_pd</span><span class="sym">(</span>values<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">evaluate_A_times_u</span><span class="sym">(</span><span class="kwb">double const</span> <span class="sym">*</span> u<span class="sym">,</span> <span class="kwb">double</span> <span class="sym">*</span> result<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">unsigned int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">do</span>
   <span class="sym">{</span>
      __m128d sse_values <span class="sym">=</span> <span class="kwd">evaluate_A_i</span><span class="sym">(</span>i<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> u<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> j <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;</span> matrix_size<span class="sym">; ++</span>j<span class="sym">)</span>
      <span class="sym">{</span>
         __m128d sse_a_values <span class="sym">=</span> <span class="kwd">evaluate_A_i</span><span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">,</span> u<span class="sym">[</span>j<span class="sym">]);</span>
         sse_values <span class="sym">=</span> <span class="kwd">_mm_add_pd</span><span class="sym">(</span>sse_values<span class="sym">,</span> sse_a_values<span class="sym">);</span>
      <span class="sym">}</span>
      <span class="kwd">_mm_store_pd</span><span class="sym">(</span>result <span class="sym">+</span> i<span class="sym">,</span> sse_values<span class="sym">);</span>
      i <span class="sym">+=</span> <span class="num">2</span><span class="sym">;</span>
   <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> matrix_size<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">evaluate_At_times_u</span><span class="sym">(</span><span class="kwb">double const</span> <span class="sym">*</span> u<span class="sym">,</span> <span class="kwb">double</span> <span class="sym">*</span> result<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">unsigned int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">do</span>
   <span class="sym">{</span>
      __m128d sse_values <span class="sym">=</span> <span class="kwd">evaluate_A_j</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> i<span class="sym">,</span> u<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> j <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;</span> matrix_size<span class="sym">; ++</span>j<span class="sym">)</span>
      <span class="sym">{</span>
         __m128d sse_a_values <span class="sym">=</span> <span class="kwd">evaluate_A_j</span><span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">,</span> u<span class="sym">[</span>j<span class="sym">]);</span>
         sse_values <span class="sym">=</span> <span class="kwd">_mm_add_pd</span><span class="sym">(</span>sse_values<span class="sym">,</span> sse_a_values<span class="sym">);</span>
      <span class="sym">}</span>
      <span class="kwd">_mm_store_pd</span><span class="sym">(</span>result <span class="sym">+</span> i<span class="sym">,</span> sse_values<span class="sym">);</span>
      i <span class="sym">+=</span> <span class="num">2</span><span class="sym">;</span>
   <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> matrix_size<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">evaluate_AtA_times_u</span><span class="sym">(</span><span class="kwb">double const</span> <span class="sym">*</span> u<span class="sym">,</span> <span class="kwb">double</span> <span class="sym">*</span> v<span class="sym">,</span> <span class="kwb">double</span> <span class="sym">*</span> w<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwd">evaluate_A_times_u</span><span class="sym">(</span>u<span class="sym">,</span> w<span class="sym">);</span>
   <span class="kwd">evaluate_At_times_u</span><span class="sym">(</span>w<span class="sym">,</span> v<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">* *</span> argv<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">!=</span> <span class="num">2</span><span class="sym">)</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;Usage: &quot;</span> <span class="sym">&lt;&lt;</span> argv<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
      <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>istringstream <span class="kwd">convertor</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
      <span class="kwa">if</span> <span class="sym">(!(</span>convertor <span class="sym">&gt;&gt;</span> matrix_size<span class="sym">) || !</span>convertor<span class="sym">.</span><span class="kwd">eof</span><span class="sym">())</span>
      <span class="sym">{</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;Usage: &quot;</span> <span class="sym">&lt;&lt;</span> argv<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">n must be an integer</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   scoped_array<span class="sym">&lt;</span> <span class="kwb">double</span> <span class="sym">&gt;</span> <span class="kwd">u_array</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>matrix_size <span class="sym">+</span> <span class="num">2</span><span class="sym">]);</span>
   scoped_array<span class="sym">&lt;</span> <span class="kwb">double</span> <span class="sym">&gt;</span> <span class="kwd">v_array</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>matrix_size <span class="sym">+</span> <span class="num">2</span><span class="sym">]);</span>
   scoped_array<span class="sym">&lt;</span> <span class="kwb">double</span> <span class="sym">&gt;</span> <span class="kwd">w_array</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>matrix_size <span class="sym">+</span> <span class="num">2</span><span class="sym">]);</span>
   <span class="kwb">double</span> <span class="sym">*</span> u <span class="sym">=</span> <span class="kwa">reinterpret_cast</span><span class="sym">&lt;</span> <span class="kwb">double</span> <span class="sym">* &gt;(</span><span class="kwa">reinterpret_cast</span><span class="sym">&lt;</span> std<span class="sym">::</span><span class="kwb">size_t</span> <span class="sym">&gt;(</span>u_array<span class="sym">.</span><span class="kwd">get</span><span class="sym">() +</span> <span class="num">1</span><span class="sym">) &amp; ~</span><span class="num">0xf</span><span class="sym">);</span>
   <span class="kwb">double</span> <span class="sym">*</span> v <span class="sym">=</span> <span class="kwa">reinterpret_cast</span><span class="sym">&lt;</span> <span class="kwb">double</span> <span class="sym">* &gt;(</span><span class="kwa">reinterpret_cast</span><span class="sym">&lt;</span> std<span class="sym">::</span><span class="kwb">size_t</span> <span class="sym">&gt;(</span>v_array<span class="sym">.</span><span class="kwd">get</span><span class="sym">() +</span> <span class="num">1</span><span class="sym">) &amp; ~</span><span class="num">0xf</span><span class="sym">);</span>
   <span class="kwb">double</span> <span class="sym">*</span> w <span class="sym">=</span> <span class="kwa">reinterpret_cast</span><span class="sym">&lt;</span> <span class="kwb">double</span> <span class="sym">* &gt;(</span><span class="kwa">reinterpret_cast</span><span class="sym">&lt;</span> std<span class="sym">::</span><span class="kwb">size_t</span> <span class="sym">&gt;(</span>w_array<span class="sym">.</span><span class="kwd">get</span><span class="sym">() +</span> <span class="num">1</span><span class="sym">) &amp; ~</span><span class="num">0xf</span><span class="sym">);</span>
   std<span class="sym">::</span><span class="kwd">fill</span><span class="sym">(</span>u<span class="sym">,</span> u <span class="sym">+</span> matrix_size<span class="sym">,</span> <span class="num">1.0</span><span class="sym">);</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">; ++</span>i<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwd">evaluate_AtA_times_u</span><span class="sym">(</span>u<span class="sym">,</span> v<span class="sym">,</span> w<span class="sym">);</span>
      <span class="kwd">evaluate_AtA_times_u</span><span class="sym">(</span>v<span class="sym">,</span> u<span class="sym">,</span> w<span class="sym">);</span>
   <span class="sym">}</span>
   __m128d vs <span class="sym">=</span> <span class="kwd">_mm_load_pd</span><span class="sym">(</span>v<span class="sym">);</span>
   __m128d us <span class="sym">=</span> <span class="kwd">_mm_load_pd</span><span class="sym">(</span>u<span class="sym">);</span>
   __m128d vvs <span class="sym">=</span> <span class="kwd">_mm_mul_pd</span><span class="sym">(</span>vs<span class="sym">,</span> vs<span class="sym">);</span>
   __m128d vBvs <span class="sym">=</span> <span class="kwd">_mm_mul_pd</span><span class="sym">(</span>us<span class="sym">,</span> vs<span class="sym">);</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt; (</span>matrix_size <span class="sym">&amp; ~</span><span class="num">1</span><span class="sym">);</span> i <span class="sym">+=</span> <span class="num">2</span><span class="sym">)</span>
   <span class="sym">{</span>
      vs <span class="sym">=</span> <span class="kwd">_mm_load_pd</span><span class="sym">(</span>v <span class="sym">+</span> i<span class="sym">);</span>
      us <span class="sym">=</span> <span class="kwd">_mm_load_pd</span><span class="sym">(</span>u <span class="sym">+</span> i<span class="sym">);</span>
      __m128d temp1 <span class="sym">=</span> <span class="kwd">_mm_mul_pd</span><span class="sym">(</span>vs<span class="sym">,</span> vs<span class="sym">);</span>
      __m128d temp2 <span class="sym">=</span> <span class="kwd">_mm_mul_pd</span><span class="sym">(</span>us<span class="sym">,</span> vs<span class="sym">);</span>
      vvs <span class="sym">=</span> <span class="kwd">_mm_add_pd</span><span class="sym">(</span>vvs<span class="sym">,</span> temp1<span class="sym">);</span>
      vBvs <span class="sym">=</span> <span class="kwd">_mm_add_pd</span><span class="sym">(</span>vBvs<span class="sym">,</span> temp2<span class="sym">);</span>
   <span class="sym">}</span>
   aligned_doubles vBv<span class="sym">;</span>
   aligned_doubles vv<span class="sym">;</span>
   <span class="kwd">_mm_store_pd</span><span class="sym">(</span>vv<span class="sym">,</span> vvs<span class="sym">);</span>
   <span class="kwd">_mm_store_pd</span><span class="sym">(</span>vBv<span class="sym">,</span> vBvs<span class="sym">);</span>
   <span class="kwa">if</span> <span class="sym">(</span>matrix_size <span class="sym">&amp;</span> <span class="num">1</span><span class="sym">)</span>
   <span class="sym">{</span>
      vBv<span class="sym">[</span><span class="num">0</span><span class="sym">] +=</span> u<span class="sym">[</span>matrix_size <span class="sym">-</span> <span class="num">1</span><span class="sym">] *</span> v<span class="sym">[</span>matrix_size <span class="sym">-</span> <span class="num">1</span><span class="sym">];</span>
      vv<span class="sym">[</span><span class="num">0</span><span class="sym">] +=</span> v<span class="sym">[</span>matrix_size <span class="sym">-</span> <span class="num">1</span><span class="sym">] *</span> v<span class="sym">[</span>matrix_size <span class="sym">-</span> <span class="num">1</span><span class="sym">];</span>
   <span class="sym">}</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setprecision</span><span class="sym">(</span><span class="num">10</span><span class="sym">) &lt;&lt;</span> std<span class="sym">::</span><span class="kwd">sqrt</span><span class="sym">((</span>vBv<span class="sym">[</span><span class="num">0</span><span class="sym">] +</span> vBv<span class="sym">[</span><span class="num">1</span><span class="sym">]) / (</span>vv<span class="sym">[</span><span class="num">0</span><span class="sym">] +</span> vv<span class="sym">[</span><span class="num">1</span><span class="sym">])) &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
<span class="sym">}</span>
