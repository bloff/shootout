<span class="hl slc">%% The Computer Language Benchmark Games</span>
<span class="hl slc">%% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%% Contributed by Ulf Wiger</span>

<span class="hl sym">-</span><span class="hl kwd">module</span><span class="hl sym">(</span>sumcol<span class="hl sym">)</span>.
<span class="hl sym">-</span><span class="hl kwd">export</span><span class="hl sym">([</span>main<span class="hl sym">/</span><span class="hl num">1</span><span class="hl sym">])</span>.
<span class="hl sym">-</span><span class="hl kwd">export</span><span class="hl sym">([</span>start<span class="hl sym">/</span><span class="hl num">0</span><span class="hl sym">])</span>.

<span class="hl slc">%% get the program argument, which is how many test iterations to run</span>
<span class="hl slc">%% for this test, we ignore this parameter</span>
<span class="hl kwd">main</span><span class="hl sym">(</span>_Args<span class="hl sym">) -&gt;</span>
    user <span class="hl sym">! {</span><span class="hl kwb">self</span><span class="hl sym">(),</span> wait_ready<span class="hl sym">},</span>
    <span class="hl kwa">receive</span>
	ready <span class="hl sym">-&gt;</span>
	    <span class="hl kwb">halt</span><span class="hl sym">()</span>
    <span class="hl kwa">end</span>.

<span class="hl slc">%% callback function for user-defined line-oriented io</span>
<span class="hl kwd">start</span><span class="hl sym">() -&gt;</span>
    <span class="hl kwb">spawn</span><span class="hl sym">(</span><span class="hl kwa">fun</span><span class="hl sym">() -&gt;</span>
		  <span class="hl kwb">process_flag</span><span class="hl sym">(</span>priority<span class="hl sym">,</span>high<span class="hl sym">),</span>
		  <span class="hl kwb">register</span><span class="hl sym">(</span>user<span class="hl sym">,</span> <span class="hl kwb">self</span><span class="hl sym">()),</span>
		  <span class="hl kwd">read_in</span><span class="hl sym">(</span><span class="hl kwb">open_port</span><span class="hl sym">({</span>fd<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">}, [{</span>line<span class="hl sym">,</span><span class="hl num">128</span><span class="hl sym">},</span>eof<span class="hl sym">]),</span> <span class="hl num">0</span><span class="hl sym">)</span>
	  <span class="hl kwa">end</span><span class="hl sym">)</span>.

<span class="hl kwd">read_in</span><span class="hl sym">(</span>Port<span class="hl sym">,</span> Sum<span class="hl sym">) -&gt;</span>
    <span class="hl kwa">receive</span>
	<span class="hl sym">{</span>Port<span class="hl sym">, {</span>data<span class="hl sym">, {</span>Eol<span class="hl sym">,</span> Str<span class="hl sym">}}}</span> <span class="hl kwa">when</span> Eol<span class="hl sym">==</span>eol<span class="hl sym">;</span> Eol<span class="hl sym">==</span>noeol<span class="hl sym">-&gt;</span>
	    <span class="hl kwd">read_in</span><span class="hl sym">(</span>Port<span class="hl sym">,</span> Sum <span class="hl sym">+</span> <span class="hl kwb">list_to_integer</span><span class="hl sym">(</span>Str<span class="hl sym">));</span>
	<span class="hl sym">{</span>Port<span class="hl sym">,</span> eof<span class="hl sym">}  -&gt;</span>
	    <span class="hl kwd">ready</span><span class="hl sym">(</span>Port<span class="hl sym">,</span> Sum<span class="hl sym">)</span>
    <span class="hl kwa">end</span>.

<span class="hl kwd">ready</span><span class="hl sym">(</span>Port<span class="hl sym">,</span> Sum<span class="hl sym">) -&gt;</span>
    <span class="hl kwd">port_command</span><span class="hl sym">(</span>Port<span class="hl sym">, [</span><span class="hl kwb">integer_to_list</span><span class="hl sym">(</span>Sum<span class="hl sym">),</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">]),</span>
    <span class="hl kwa">catch</span> <span class="hl kwd">port_command</span><span class="hl sym">(</span>Port<span class="hl sym">, [</span><span class="hl kwb">integer_to_list</span><span class="hl sym">(</span>erlang<span class="hl sym">:</span><span class="hl kwd">memory</span><span class="hl sym">(</span>maximum<span class="hl sym">)),</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">]),</span>
    erlang<span class="hl sym">:</span><span class="hl kwb">port_close</span><span class="hl sym">(</span>Port<span class="hl sym">),</span>
    <span class="hl kwa">receive</span>
	<span class="hl sym">{</span>From<span class="hl sym">,</span> wait_ready<span class="hl sym">} -&gt;</span>
	     From <span class="hl sym">!</span> ready
    <span class="hl kwa">end</span>.
