<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">// $Id: random-gpp.code,v 1.21 2005-11-16 18:07:48 igouy-guest Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;math.h&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="dir">#define IM 139968</span>
<span class="dir">#define IA 3877</span>
<span class="dir">#define IC 29573</span>

<span class="kwc">inline</span> <span class="kwb">double</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="kwb">double</span> max<span class="sym">) {</span>
    <span class="kwb">static long</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>
    last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span> max <span class="sym">*</span> last <span class="sym">/</span> IM <span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> N <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwb">double</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>N<span class="sym">-- &gt;</span> <span class="num">1</span><span class="sym">) {</span>
	<span class="kwd">gen_random</span><span class="sym">(</span><span class="num">100.0</span><span class="sym">);</span>
    <span class="sym">}</span>
    cout<span class="sym">.</span><span class="kwd">precision</span><span class="sym">(</span><span class="num">9</span><span class="sym">);</span>
    cout<span class="sym">.</span><span class="kwd">setf</span><span class="sym">(</span>ios<span class="sym">::</span>fixed<span class="sym">);</span>
    cout <span class="sym">&lt;&lt;</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="num">100.0</span><span class="sym">) &lt;&lt;</span> endl<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>

