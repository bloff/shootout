<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
   <span class="hl kwa">let</span> width <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
   <span class="hl kwa">let</span> height <span class="hl sym">=</span> width<span class="hl sym">;</span>
   println<span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">+</span> width <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> height<span class="hl sym">);</span>

   <span class="hl kwa">let</span> s <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">);</span>
   <span class="hl kwa">let</span> limitSquared <span class="hl sym">=</span> <span class="hl num">4.0</span><span class="hl sym">;</span>
   <span class="hl kwa">let</span> iterations <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>
   var isOverLimit <span class="hl sym">=</span> false<span class="hl sym">;</span>
   var bits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> var bitnum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

   <span class="hl kwa">for</span><span class="hl sym">(</span>var y<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> y<span class="hl sym">&lt;</span>height<span class="hl sym">;</span> y<span class="hl sym">++){</span>
      <span class="hl kwa">for</span><span class="hl sym">(</span>var x<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> x<span class="hl sym">&lt;</span>width<span class="hl sym">;</span> x<span class="hl sym">++){</span>

         var Zr <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span> var Zi <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
         <span class="hl kwa">let</span> Cr <span class="hl sym">= (</span><span class="hl num">2.0</span><span class="hl sym">*</span>x<span class="hl sym">/</span>width <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">);</span> <span class="hl kwa">let</span> Ci <span class="hl sym">= (</span><span class="hl num">2.0</span><span class="hl sym">*</span>y<span class="hl sym">/</span>height <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">);</span>

         var i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">do</span> <span class="hl sym">{</span>
            <span class="hl kwa">let</span> Tr <span class="hl sym">=</span> Zr<span class="hl sym">*</span>Zr <span class="hl sym">-</span> Zi<span class="hl sym">*</span>Zi <span class="hl sym">+</span> Cr<span class="hl sym">;</span>
            <span class="hl kwa">let</span> Ti <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">*</span>Zr<span class="hl sym">*</span>Zi <span class="hl sym">+</span> Ci<span class="hl sym">;</span>
            Zr <span class="hl sym">=</span> Tr<span class="hl sym">;</span> Zi <span class="hl sym">=</span> Ti<span class="hl sym">;</span>
            isOverLimit <span class="hl sym">=</span> Zr<span class="hl sym">*</span>Zr <span class="hl sym">+</span> Zi<span class="hl sym">*</span>Zi <span class="hl sym">&gt;</span> limitSquared<span class="hl sym">;</span>
         <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(!</span>isOverLimit <span class="hl sym">&amp;&amp; (++</span>i <span class="hl sym">&lt;</span> iterations<span class="hl sym">));</span>

         bits <span class="hl sym">=</span> bits <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> <span class="hl sym">(!</span>isOverLimit<span class="hl sym">)</span> bits<span class="hl sym">++;</span>
         bitnum<span class="hl sym">++;</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>x <span class="hl sym">==</span> width <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">) {</span>
            bits <span class="hl sym">=</span> bits <span class="hl sym">&lt;&lt; (</span><span class="hl num">8</span> <span class="hl sym">-</span> bitnum<span class="hl sym">);</span>
            bitnum <span class="hl sym">=</span> <span class="hl num">8</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>bitnum <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">){</span>
            <span class="hl kwa">let</span> <span class="hl kwb">byte</span> b <span class="hl sym">=</span> cast<span class="hl sym">(</span>bits<span class="hl sym">);</span> s<span class="hl sym">.</span>write<span class="hl sym">(</span>b<span class="hl sym">);</span>
            bits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> bitnum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   s<span class="hl sym">.</span>close<span class="hl sym">;</span>
<span class="hl sym">}</span>
