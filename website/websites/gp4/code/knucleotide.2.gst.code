<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Isaac Gouy *&quot;</span><span class="sym">!</span>


<span class="sym">!</span>SequenceableCollection methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>
substringFrequencies<span class="sym">:</span> aLength using<span class="sym">:</span> aDictionary
   <span class="num">1</span> to<span class="sym">:</span> <span class="kwa">self</span> size <span class="sym">-</span> aLength <span class="sym">+</span> <span class="num">1</span> do<span class="sym">:</span>
      <span class="sym">[:</span>i <span class="sym">| |</span> fragment assoc <span class="sym">|</span>
      fragment <span class="sym">:=</span> <span class="kwa">self</span> copyFrom<span class="sym">:</span> i to<span class="sym">:</span> i <span class="sym">+</span> aLength <span class="sym">-</span> <span class="num">1</span><span class="sym">.</span>

      <span class="sym">(</span>assoc <span class="sym">:=</span> aDictionary associationAt<span class="sym">:</span> fragment ifAbsent<span class="sym">: [])</span> isNil
         ifTrue<span class="sym">: [</span>aDictionary at<span class="sym">:</span> fragment put<span class="sym">:</span> <span class="num">1</span><span class="sym">]</span>
         ifFalse<span class="sym">: [</span>assoc value<span class="sym">:</span> assoc value <span class="sym">+</span> <span class="num">1</span><span class="sym">] ].</span>
   <span class="sym">^</span>aDictionary <span class="sym">! !</span>


<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>
readFasta<span class="sym">:</span> sequenceName from<span class="sym">:</span> input
   <span class="sym">|</span> prefix newline buffer description line char <span class="sym">|</span>
   prefix <span class="sym">:=</span> <span class="str">'&gt;'</span><span class="sym">,</span>sequenceName<span class="sym">.</span>
   newline <span class="sym">:=</span> Character lf<span class="sym">.</span>

   <span class="com">&quot;* find start of particular fasta sequence *&quot;</span>
   <span class="sym">[(</span>input atEnd<span class="sym">)</span> or<span class="sym">: [</span>
         <span class="sym">(</span>input peek <span class="sym">= $&gt;)</span>
            ifTrue<span class="sym">: [((</span>line <span class="sym">:=</span> input upTo<span class="sym">:</span> newline<span class="sym">)</span>
               indexOfSubCollection<span class="sym">:</span> prefix startingAt<span class="sym">:</span> <span class="num">1</span><span class="sym">) =</span> <span class="num">1</span><span class="sym">]</span>
            ifFalse<span class="sym">: [</span>input skipTo<span class="sym">:</span> newline<span class="sym">.</span> <span class="kwa">false</span><span class="sym">]]</span>
      <span class="sym">]</span> whileFalse<span class="sym">.</span>

   <span class="com">&quot;* line-by-line read - it would be a lot faster to block read *&quot;</span>
   description <span class="sym">:=</span> line<span class="sym">.</span>
   buffer <span class="sym">:=</span> ReadWriteStream on<span class="sym">: (</span>String new<span class="sym">:</span> <span class="num">1028</span><span class="sym">).</span>
   <span class="sym">[(</span>input atEnd<span class="sym">)</span> or<span class="sym">: [(</span>char <span class="sym">:=</span> input peek<span class="sym">) = $&gt;]]</span> whileFalse<span class="sym">: [</span>
      <span class="sym">(</span>char <span class="sym">= $;)</span>
         ifTrue<span class="sym">: [</span>input upTo<span class="sym">:</span> newline<span class="sym">]</span>
         ifFalse<span class="sym">: [</span>buffer nextPutAll<span class="sym">: (</span>input upTo<span class="sym">:</span> newline<span class="sym">)]</span>
      <span class="sym">].</span>
   <span class="sym">^</span>Association key<span class="sym">:</span> description value<span class="sym">:</span> buffer contents <span class="sym">! !</span>

<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>
knucleotideFrom<span class="sym">:</span> input to<span class="sym">:</span> output
   <span class="sym">|</span> sequence newline writeFrequencies writeCount <span class="sym">|</span>

   sequence <span class="sym">:= (</span><span class="kwa">self</span> readFasta<span class="sym">:</span> <span class="str">'THREE'</span> from<span class="sym">:</span> input<span class="sym">)</span> value asUppercase<span class="sym">.</span>
   newline <span class="sym">:=</span> Character lf<span class="sym">.</span>

   writeFrequencies <span class="sym">:=</span>
      <span class="sym">[:</span>k <span class="sym">| |</span> frequencies count <span class="sym">|</span>
      frequencies <span class="sym">:=</span> SortedCollection sortBlock<span class="sym">: [:</span>a <span class="sym">:</span>b<span class="sym">|</span>
         <span class="sym">(</span>a value <span class="sym">=</span> b value<span class="sym">)</span> ifTrue<span class="sym">: [</span>b key <span class="sym">&lt;</span> a key<span class="sym">]</span> ifFalse<span class="sym">: [</span>b value <span class="sym">&lt;</span> a value<span class="sym">]].</span>

      count <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">.</span>
      <span class="sym">(</span>sequence substringFrequencies<span class="sym">:</span> k using<span class="sym">:</span> Dictionary new<span class="sym">)</span>
         associationsDo<span class="sym">: [:</span>each<span class="sym">|</span>
            frequencies add<span class="sym">:</span> each<span class="sym">.</span> count <span class="sym">:=</span> count <span class="sym">+</span> each value<span class="sym">].</span>

      frequencies do<span class="sym">: [:</span>each <span class="sym">| |</span> percentage <span class="sym">|</span>
         percentage <span class="sym">:= (</span>each value <span class="sym">/</span> count<span class="sym">) *</span> <span class="num">100.0</span><span class="sym">.</span>
         output
            nextPutAll<span class="sym">:</span> each key<span class="sym">;</span> space<span class="sym">;</span>
            nextPutAll<span class="sym">: (</span>percentage asStringWithDecimalPlaces<span class="sym">:</span> <span class="num">3</span><span class="sym">);</span>
            nextPut<span class="sym">:</span> newline<span class="sym">]].</span>

   writeCount <span class="sym">:= [:</span>nucleotideFragment <span class="sym">| |</span> frequencies count <span class="sym">|</span>
      frequencies <span class="sym">:=</span> sequence substringFrequencies<span class="sym">:</span> nucleotideFragment size
         using<span class="sym">:</span> Dictionary new<span class="sym">.</span>
      count <span class="sym">:=</span> frequencies at<span class="sym">:</span> nucleotideFragment ifAbsent<span class="sym">: [</span><span class="num">0</span><span class="sym">].</span>
      output print<span class="sym">:</span> count<span class="sym">;</span> tab<span class="sym">;</span> nextPutAll<span class="sym">:</span> nucleotideFragment<span class="sym">;</span> nextPut<span class="sym">:</span> newline<span class="sym">].</span>

   writeFrequencies value<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span> output nextPut<span class="sym">:</span> newline<span class="sym">.</span>
   writeFrequencies value<span class="sym">:</span> <span class="num">2</span><span class="sym">.</span> output nextPut<span class="sym">:</span> newline<span class="sym">.</span>

   writeCount value<span class="sym">:</span> <span class="str">'GGT'</span><span class="sym">.</span>
   writeCount value<span class="sym">:</span> <span class="str">'GGTA'</span><span class="sym">.</span>
   writeCount value<span class="sym">:</span> <span class="str">'GGTATT'</span><span class="sym">.</span>
   writeCount value<span class="sym">:</span> <span class="str">'GGTATTTTAATT'</span><span class="sym">.</span>
   writeCount value<span class="sym">:</span> <span class="str">'GGTATTTTAATTTATAGT'</span><span class="sym">.! !</span>
<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>
knucleotide   <span class="kwa">self</span> knucleotideFrom<span class="sym">:</span> <span class="kwa">self</span> stdinSpecial to<span class="sym">:</span> <span class="kwa">self</span> stdout<span class="sym">.   ^</span><span class="str">''</span><span class="sym">! !</span>

Tests knucleotide<span class="sym">!</span>
