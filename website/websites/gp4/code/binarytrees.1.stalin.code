<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; contributed by Fabien D.</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make-tree item depth<span class="hl sym">)</span>
   <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> depth <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span><span class="hl kwa">list</span> item <span class="hl sym">'() '())</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>new-depth <span class="hl sym">(</span>- depth <span class="hl num">1</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>new-item <span class="hl sym">(*</span> item <span class="hl num">2</span><span class="hl sym">)))</span>
         <span class="hl sym">(</span><span class="hl kwa">list</span> item <span class="hl sym">(</span>make-tree <span class="hl sym">(</span>- new-item <span class="hl num">1</span><span class="hl sym">)</span> new-depth<span class="hl sym">) (</span>make-tree new-item new-depth<span class="hl sym">)))))</span>


<span class="hl sym">(</span>define <span class="hl sym">(</span>check-tree tree<span class="hl sym">)</span>
   <span class="hl sym">(</span>let <span class="hl sym">((</span>item <span class="hl sym">(</span><span class="hl kwa">car</span> tree<span class="hl sym">))</span>
         <span class="hl sym">(</span>left <span class="hl sym">(</span><span class="hl kwa">cadr</span> tree<span class="hl sym">))</span>
         <span class="hl sym">(</span>right <span class="hl sym">(</span><span class="hl kwa">caddr</span> tree<span class="hl sym">)))</span>

      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? left<span class="hl sym">)</span>
         item
         <span class="hl sym">(+</span> item <span class="hl sym">(</span>- <span class="hl sym">(</span>check-tree left<span class="hl sym">) (</span>check-tree right<span class="hl sym">))))))</span>



<span class="hl sym">(</span>define <span class="hl sym">(</span>iterate depth <span class="hl kwa">min</span>-depth <span class="hl kwa">max</span>-depth<span class="hl sym">)</span>
   <span class="hl sym">(</span>let<span class="hl sym">* ((</span>iterations <span class="hl sym">(</span><span class="hl kwa">expt</span> <span class="hl num">2</span> <span class="hl sym">(</span>- <span class="hl sym">(+</span> <span class="hl kwa">max</span>-depth <span class="hl kwa">min</span>-depth<span class="hl sym">)</span> depth<span class="hl sym">)))</span>
               <span class="hl sym">(</span>check <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">1</span> <span class="hl sym">(+</span> i <span class="hl num">1</span><span class="hl sym">)) (</span>check <span class="hl num">0</span><span class="hl sym">))</span>
                          <span class="hl sym">((&gt;=</span> i <span class="hl sym">(+</span> iterations <span class="hl num">1</span><span class="hl sym">))</span> check<span class="hl sym">)</span>
                          <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> check <span class="hl sym">(+</span> check <span class="hl sym">(</span>check-tree <span class="hl sym">(</span>make-tree i depth<span class="hl sym">)) (</span>check-tree <span class="hl sym">(</span>make-tree <span class="hl sym">(</span>- i<span class="hl sym">)</span> depth<span class="hl sym">)))))))</span>

                          <span class="hl sym">(</span>begin
                              <span class="hl sym">(</span>display <span class="hl sym">(*</span> iterations <span class="hl num">2</span><span class="hl sym">))</span>
                              <span class="hl sym">(</span>display <span class="hl str">&quot;    trees of depth &quot;</span><span class="hl sym">)</span>
                              <span class="hl sym">(</span>display depth<span class="hl sym">)</span>
                              <span class="hl sym">(</span>display <span class="hl str">&quot;    check: &quot;</span><span class="hl sym">)</span>
                              <span class="hl sym">(</span>display check<span class="hl sym">)</span>
                              <span class="hl sym">(</span>newline<span class="hl sym">))))</span>



<span class="hl sym">(</span>define <span class="hl sym">(</span>main user-depth<span class="hl sym">)</span>
   <span class="hl sym">(</span>let<span class="hl sym">* ((</span><span class="hl kwa">min</span>-depth <span class="hl num">4</span><span class="hl sym">)</span>
          <span class="hl sym">(</span><span class="hl kwa">max</span>-depth <span class="hl sym">(</span><span class="hl kwa">max</span> <span class="hl sym">(+</span> <span class="hl kwa">min</span>-depth <span class="hl num">2</span><span class="hl sym">)</span> user-depth<span class="hl sym">))</span>
          <span class="hl sym">(</span>stretch-depth <span class="hl sym">(+</span> <span class="hl kwa">max</span>-depth <span class="hl num">1</span><span class="hl sym">))</span>
          <span class="hl sym">(</span>long-lived <span class="hl sym">(</span>make-tree <span class="hl num">0</span> <span class="hl kwa">max</span>-depth<span class="hl sym">)))</span>

      <span class="hl sym">(</span>begin
         <span class="hl sym">(</span>display <span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl sym">)</span>
         <span class="hl sym">(</span>display stretch-depth<span class="hl sym">)</span>
         <span class="hl sym">(</span>display <span class="hl str">&quot;    check: &quot;</span><span class="hl sym">)</span>
         <span class="hl sym">(</span>display <span class="hl sym">(</span>check-tree <span class="hl sym">(</span>make-tree <span class="hl num">0</span> stretch-depth<span class="hl sym">)))</span>
         <span class="hl sym">(</span>newline<span class="hl sym">)</span>

         <span class="hl sym">(</span>do <span class="hl sym">((</span>depth <span class="hl kwa">min</span>-depth <span class="hl sym">(+</span> depth <span class="hl num">2</span><span class="hl sym">)))</span>
             <span class="hl sym">((&gt;=</span> depth stretch-depth<span class="hl sym">))</span>
             <span class="hl sym">(</span>iterate depth <span class="hl kwa">min</span>-depth <span class="hl kwa">max</span>-depth<span class="hl sym">))</span>

         <span class="hl sym">(</span>display <span class="hl str">&quot;long lived tree of depth &quot;</span><span class="hl sym">)</span>
         <span class="hl sym">(</span>display <span class="hl kwa">max</span>-depth<span class="hl sym">)</span>
         <span class="hl sym">(</span>display <span class="hl str">&quot;    check: &quot;</span><span class="hl sym">)</span>
         <span class="hl sym">(</span>display <span class="hl sym">(</span>check-tree long-lived<span class="hl sym">))</span>
         <span class="hl sym">(</span>newline<span class="hl sym">)</span>
         <span class="hl sym">(</span>newline<span class="hl sym">))))</span>


<span class="hl sym">(</span>main <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span>vector-ref argv <span class="hl num">1</span><span class="hl sym">)))</span>
