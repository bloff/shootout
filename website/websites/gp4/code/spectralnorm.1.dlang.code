<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   converted to D by Dave Fladebo</span>
<span class="hl com">   compile: dmd -O -inline -release spectralnorm.d</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>math<span class="hl sym">,</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>string<span class="hl sym">;</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[][]</span> args<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">int</span>      N <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">int</span><span class="hl sym">)</span><span class="hl kwd">atoi</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">2000</span><span class="hl sym">;</span>
    <span class="hl kwa">double</span><span class="hl sym">[]</span> u <span class="hl sym">=</span> <span class="hl kwa">new double</span><span class="hl sym">[</span>N<span class="hl sym">],</span> v <span class="hl sym">=</span> <span class="hl kwa">new double</span><span class="hl sym">[</span>N<span class="hl sym">],</span> w <span class="hl sym">=</span> <span class="hl kwa">new double</span><span class="hl sym">[</span>N<span class="hl sym">];</span>
    <span class="hl kwa">double</span>   vBv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> vv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

    u<span class="hl sym">[] =</span> <span class="hl num">1.0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
        <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>u<span class="hl sym">,</span>v<span class="hl sym">,</span>w<span class="hl sym">);</span>
        <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span>v<span class="hl sym">,</span>u<span class="hl sym">,</span>w<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">foreach</span><span class="hl sym">(</span><span class="hl kwa">int</span> i<span class="hl sym">,</span> <span class="hl kwa">double</span> vi<span class="hl sym">;</span> v<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        vBv <span class="hl sym">+=</span> u<span class="hl sym">[</span>i<span class="hl sym">] *</span> vi<span class="hl sym">;</span>
        vv  <span class="hl sym">+=</span> vi <span class="hl sym">*</span> vi<span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;%0.9f&quot;</span><span class="hl sym">,</span><span class="hl kwd">sqrt</span><span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">));</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl sym">(</span><span class="hl kwa">double</span><span class="hl sym">[]</span> u<span class="hl sym">,</span> <span class="hl kwa">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwa">double</span><span class="hl sym">[]</span> w<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwd">eval_A_times_u</span><span class="hl sym">(</span>u<span class="hl sym">,</span>w<span class="hl sym">);</span>
    <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span>w<span class="hl sym">,</span>v<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">eval_A_times_u</span><span class="hl sym">(</span><span class="hl kwa">double</span><span class="hl sym">[]</span> u<span class="hl sym">,</span> <span class="hl kwa">double</span><span class="hl sym">[]</span> Au<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">foreach</span><span class="hl sym">(</span><span class="hl kwa">int</span> i<span class="hl sym">,</span> <span class="hl kwa">inout double</span> Aui<span class="hl sym">;</span> Au<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        Aui <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
        <span class="hl kwa">foreach</span><span class="hl sym">(</span><span class="hl kwa">int</span> j<span class="hl sym">,</span> <span class="hl kwa">double</span> uj<span class="hl sym">;</span> u<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            Aui <span class="hl sym">+=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">) *</span> u<span class="hl sym">[</span>j<span class="hl sym">];</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">eval_At_times_u</span><span class="hl sym">(</span><span class="hl kwa">double</span><span class="hl sym">[]</span> u<span class="hl sym">,</span> <span class="hl kwa">double</span><span class="hl sym">[]</span> Au<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">foreach</span><span class="hl sym">(</span><span class="hl kwa">int</span> i<span class="hl sym">,</span> <span class="hl kwa">inout double</span> Aui<span class="hl sym">;</span> Au<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        Aui <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
        <span class="hl kwa">foreach</span><span class="hl sym">(</span><span class="hl kwa">int</span> j<span class="hl sym">,</span> <span class="hl kwa">double</span> uj<span class="hl sym">;</span> u<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            Aui <span class="hl sym">+=</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span>j<span class="hl sym">,</span>i<span class="hl sym">) *</span> uj<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwa">double</span> <span class="hl kwd">eval_A</span><span class="hl sym">(</span><span class="hl kwa">int</span> i<span class="hl sym">,</span> <span class="hl kwa">int</span> j<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">return</span> <span class="hl num">1.0</span><span class="hl sym">/(((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span><span class="hl sym">)+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
<span class="hl sym">}</span>
