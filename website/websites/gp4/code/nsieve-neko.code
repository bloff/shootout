<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Nicolas Cannasse</span>
<span class="com">*/</span>

nsieve <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>m<span class="sym">) {</span>
   <span class="kwa">var</span> a <span class="sym">=</span> $<span class="kwd">amake</span><span class="sym">(</span>m<span class="sym">);</span>
   <span class="kwa">var</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>
   <span class="kwa">while</span><span class="sym">(</span> i <span class="sym">&lt;</span> m <span class="sym">) {</span>
      <span class="kwa">if</span> $<span class="kwd">not</span><span class="sym">(</span>a<span class="sym">[</span>i<span class="sym">]) {</span>
         count <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
         <span class="kwa">var</span> j <span class="sym">= (</span>i <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">);</span>
         <span class="kwa">while</span><span class="sym">(</span> j <span class="sym">&lt;</span> m <span class="sym">) {</span>
            <span class="kwa">if</span><span class="sym">(</span> $<span class="kwd">not</span><span class="sym">(</span>a<span class="sym">[</span>j<span class="sym">]) )</span> a<span class="sym">[</span>j<span class="sym">] =</span> <span class="kwa">true</span><span class="sym">;</span>
            j <span class="sym">+=</span> i<span class="sym">;</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      i <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
   $<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Primes up to</span><span class="esc">\t</span><span class="str">&quot;</span><span class="sym">,</span>m<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span><span class="sym">,</span>count<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">var</span> n <span class="sym">=</span> $<span class="kwb">int</span><span class="sym">(</span>$loader<span class="sym">.</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
<span class="kwa">if</span><span class="sym">(</span> n <span class="sym">==</span> <span class="kwa">null</span> <span class="sym">)</span> n <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>
<span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">while</span><span class="sym">(</span> i <span class="sym">&lt;</span> <span class="num">3</span> <span class="sym">) {</span>
   <span class="kwd">nsieve</span><span class="sym">(</span><span class="num">10000</span> <span class="sym">&lt;&lt; (</span>n <span class="sym">-</span> i<span class="sym">));</span>
   i <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
<span class="sym">}</span>
