<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; written by Patrick Frankenberger</span>
<span class="slc">;;; modified by Ralph Richard Cook</span>
<span class="slc">;;; modified by Nikodemus Siivola</span>
<span class="sym">(</span>declaim <span class="sym">(</span>optimize speed<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> complem <span class="sym">(</span>code<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>table
         #.<span class="sym">(</span>let<span class="sym">* ((</span>pairs <span class="sym">'((</span>#\A . #\T<span class="sym">) (</span>#\C . #\G<span class="sym">) (</span>#\G . #\C<span class="sym">) (</span>#\T . #\A<span class="sym">) (</span>#\U . #\A<span class="sym">)</span>
                           <span class="sym">(</span>#\M . #\K<span class="sym">) (</span>#\R . #\Y<span class="sym">) (</span>#\Y . #\R<span class="sym">) (</span>#\K . #\M<span class="sym">) (</span>#\V . #\B<span class="sym">)</span>
                           <span class="sym">(</span>#\H . #\D<span class="sym">) (</span>#\D . #\H<span class="sym">) (</span>#\B . #\V<span class="sym">) (</span>#\N . #\N<span class="sym">) (</span>#\W . #\W<span class="sym">)</span>
                           <span class="sym">(</span>#\S . #\S<span class="sym">)))</span>
                  <span class="sym">(</span>table <span class="sym">(</span>make<span class="sym">-</span>string
                          <span class="sym">(</span><span class="num">1</span><span class="sym">+ (</span><span class="kwa">apply</span> #<span class="sym">'</span><span class="kwa">max</span> <span class="sym">(</span><span class="kwa">mapcar</span> <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>char<span class="sym">)</span>
                                                     <span class="sym">(</span><span class="kwa">max</span> <span class="sym">(</span>char<span class="sym">-</span>code char<span class="sym">)</span>
                                                          <span class="sym">(</span>char<span class="sym">-</span>code <span class="sym">(</span>char<span class="sym">-</span>downcase char<span class="sym">))))</span>
                                                   <span class="sym">(</span><span class="kwa">mapcar</span> #<span class="sym">'</span><span class="kwa">car</span> pairs<span class="sym">))))</span>
                          <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="sym">'</span>character<span class="sym">)))</span>
             <span class="sym">(</span>mapc <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>pair<span class="sym">)</span>
                     <span class="sym">(</span>let <span class="sym">((</span>key <span class="sym">(</span><span class="kwa">car</span> pair<span class="sym">)) (</span>value <span class="sym">(</span><span class="kwa">cdr</span> pair<span class="sym">)))</span>
                       <span class="sym">(</span>setf <span class="sym">(</span>char table <span class="sym">(</span>char<span class="sym">-</span>code key<span class="sym">))</span> value
                             <span class="sym">(</span>char table <span class="sym">(</span>char<span class="sym">-</span>code <span class="sym">(</span>char<span class="sym">-</span>downcase key<span class="sym">)))</span> value<span class="sym">)))</span>
                   pairs<span class="sym">)</span>
             table<span class="sym">)))</span>
    <span class="sym">(</span>schar table <span class="sym">(</span>char<span class="sym">-</span>code code<span class="sym">))))</span>

<span class="sym">(</span><span class="kwa">defun</span> write<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>complement <span class="sym">(</span>title data<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">((</span>simple<span class="sym">-</span>array character <span class="sym">(*))</span> title data<span class="sym">))</span>
  <span class="sym">(</span>do <span class="sym">((</span>from <span class="num">0</span><span class="sym">)</span>
       <span class="sym">(</span>to <span class="sym">(</span><span class="num">1</span><span class="sym">- (</span><span class="kwa">length</span> data<span class="sym">))))</span>
      <span class="sym">((&gt;=</span> from to<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">((</span>integer <span class="num">0</span> <span class="sym">(</span>#.most<span class="sym">-</span>positive<span class="sym">-</span>fixnum<span class="sym">))</span> from to<span class="sym">))</span>
    <span class="sym">(</span>let <span class="sym">((</span>fromchar <span class="sym">(</span>schar data from<span class="sym">))</span>
          <span class="sym">(</span>tochar <span class="sym">(</span>schar data to<span class="sym">)))</span>
      <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span>eql fromchar #\Newline<span class="sym">)</span>
             <span class="sym">(</span>incf from<span class="sym">))</span>
            <span class="sym">((</span>eql tochar #\Newline<span class="sym">)</span>
             <span class="sym">(</span>decf to<span class="sym">))</span>
            <span class="sym">(</span>t
             <span class="sym">(</span>setf <span class="sym">(</span>aref data from<span class="sym">) (</span>complem tochar<span class="sym">)</span>
                   <span class="sym">(</span>aref data to<span class="sym">) (</span>complem fromchar<span class="sym">))</span>
             <span class="sym">(</span>incf from<span class="sym">)</span>
             <span class="sym">(</span>decf to<span class="sym">)))))</span>
  <span class="sym">(</span>write<span class="sym">-</span><span class="kwa">line</span> title <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">*)</span>
  <span class="sym">(</span>write<span class="sym">-</span><span class="kwa">line</span> data <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">*))</span>

<span class="sym">(</span>defvar <span class="sym">*</span><span class="kwa">line</span><span class="sym">*</span> nil<span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> get<span class="sym">-</span>body <span class="sym">()</span>
  <span class="sym">(</span>with<span class="sym">-</span>output<span class="sym">-</span>to<span class="sym">-</span>string <span class="sym">(</span>s<span class="sym">)</span>
    <span class="sym">(</span>tagbody <span class="sym">:</span>next
       <span class="sym">(</span>let <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>pop <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*</span> nil nil<span class="sym">)))</span>
         <span class="sym">(</span>declare <span class="sym">((</span><span class="kwa">or null</span> <span class="sym">(</span>simple<span class="sym">-</span>array character <span class="sym">(*)))</span> <span class="kwa">line</span><span class="sym">))</span>
         <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">null line</span><span class="sym">))</span>
               <span class="sym">((</span>eql <span class="sym">(</span>schar <span class="kwa">line</span> <span class="num">0</span><span class="sym">)</span> #\&gt;<span class="sym">)</span>
                <span class="sym">(</span>push <span class="kwa">line</span> <span class="sym">*</span><span class="kwa">line</span><span class="sym">*))</span>
               <span class="sym">(</span>t
                <span class="sym">(</span>write<span class="sym">-</span><span class="kwa">line line</span> s<span class="sym">)</span>
                <span class="sym">(</span>go <span class="sym">:</span>next<span class="sym">)))))))</span>

<span class="sym">(</span><span class="kwa">defun read</span><span class="sym">-</span>pop <span class="sym">(</span>stream eof<span class="sym">-</span>errorp eof<span class="sym">-</span>value<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">*</span><span class="kwa">line</span><span class="sym">*</span>
      <span class="sym">(</span>pop <span class="sym">*</span><span class="kwa">line</span><span class="sym">*)</span>
      <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> stream eof<span class="sym">-</span>errorp eof<span class="sym">-</span>value<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>loop for title <span class="sym">= (</span><span class="kwa">read</span><span class="sym">-</span>pop <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*</span> nil nil<span class="sym">)</span>
     <span class="kwa">while</span> title do <span class="sym">(</span>write<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>complement title <span class="sym">(</span>get<span class="sym">-</span>body<span class="sym">))))</span>
