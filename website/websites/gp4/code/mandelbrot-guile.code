#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; implemented by Greg Buchholz</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">))))</span>
    <span class="sym">(</span>display <span class="str">&quot;P4&quot;</span><span class="sym">) (</span>newline<span class="sym">) (</span>display n<span class="sym">) (</span>display <span class="str">&quot; &quot;</span><span class="sym">) (</span>display n<span class="sym">)</span>
<span class="sym">(</span>newline<span class="sym">)</span>
    <span class="sym">(</span>printPBM <span class="num">0 0</span> n <span class="sym">(</span>points <span class="num">0 0</span> n<span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span>points x y n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> y n<span class="sym">)</span>
    <span class="str">'()</span>
<span class="str">    (if (= x n)</span>
<span class="str">        (points 0 (+ y 1) n)</span>
<span class="str">        (cons (mandel (make-rectangular (- (* 2 (/ x n)) 1.5)</span>
<span class="str">                                        (- (* 2 (/ y n)) 1.0)) 0.0+0.0i 50)</span>
<span class="str">              (delay (points (+ x 1) y n))))))</span>
<span class="str"></span>
<span class="str">(define (mandel c z iter)</span>
<span class="str">    (if (= iter 0)</span>
<span class="str">        1</span>
<span class="str">        (let ((n (+ (* z z) c)))</span>
<span class="str">             (if (&gt; (magnitude n) 2.0)</span>
<span class="str">                  0</span>
<span class="str">                  (mandel c n (- iter 1))))))</span>
<span class="str"></span>
<span class="str">(define (printPBM acc i n stream)</span>
<span class="str">  (cond ((null? stream) (display (acc-&gt;char acc i)))</span>
<span class="str">        ((and (= (remainder i 8) 0) (not (= i 0)))</span>
<span class="str">                 (begin (display (integer-&gt;char acc))</span>
<span class="str">                        (printPBM (car stream) (+ 1 i) n (force (cdr stream)))))</span>
<span class="str">        ((= i n) (begin (display (acc-&gt;char acc n))</span>
<span class="str">                        (printPBM 0 0 n stream)))</span>
<span class="str">        (else (printPBM (+ (* 2 acc) (car stream)) (+ 1 i) n (force (cdr stream))))))</span>
<span class="str"></span>
<span class="str">(define (pow2 n) (if (&gt; n 0) (* 2 (pow2 (- n 1))) 1))</span>
<span class="str"></span>
<span class="str">(define (acc-&gt;char acc x)</span>
<span class="str">    (integer-&gt;char (* acc (pow2 (remainder x 8)))))</span>
