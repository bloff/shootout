<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Based on D language implementation by Dave Fladebo                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">object</span> nbody
<span class="sym">{</span>
  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> N <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">));</span>
    <span class="kwa">val</span> nbs <span class="sym">=</span> <span class="kwa">new</span> NBodySystem<span class="sym">;</span>

    Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>nbs<span class="sym">.</span>energy<span class="sym">);</span>
    <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> N<span class="sym">) {</span> nbs<span class="sym">.</span>advance<span class="sym">(</span><span class="num">0.01</span><span class="sym">);</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">; }</span>
    Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>nbs<span class="sym">.</span>energy<span class="sym">);</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">final class</span> NBodySystem
<span class="sym">{</span>
  <span class="slc">// Interface</span>

  <span class="kwa">def</span> advance<span class="sym">(</span>_dt<span class="sym">:</span> <span class="kwb">double</span><span class="sym">):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">var</span> dx<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>  <span class="kwa">var</span> dy<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">var</span> dz<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>  <span class="kwa">var</span> mag<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">var</span> distance<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>

    <span class="kwa">var</span> idx<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">val</span> length<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> bodies<span class="sym">.</span>length<span class="sym">;</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> bodies<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="slc">// Scala 2.0 would use:</span>
      <span class="slc">//</span>
      <span class="slc">//   for (val j &lt;- bodies.subArray(idx + 1, length))</span>
      <span class="slc">//</span>
      <span class="slc">// but this doesn't seem to work</span>
      <span class="slc">//</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> j <span class="sym">&lt;-</span> subArray<span class="sym">(</span>idx <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> length<span class="sym">,</span> bodies<span class="sym">))</span>
      <span class="sym">{</span>
        dx <span class="sym">=</span> i<span class="sym">.</span>x <span class="sym">-</span> j<span class="sym">.</span>x<span class="sym">;</span>
        dy <span class="sym">=</span> i<span class="sym">.</span>y <span class="sym">-</span> j<span class="sym">.</span>y<span class="sym">;</span>
        dz <span class="sym">=</span> i<span class="sym">.</span>z <span class="sym">-</span> j<span class="sym">.</span>z<span class="sym">;</span>

        distance <span class="sym">=</span> <span class="kwc">Math</span><span class="sym">.</span>sqrt<span class="sym">(</span>dx <span class="sym">*</span> dx <span class="sym">+</span> dy <span class="sym">*</span> dy <span class="sym">+</span> dz <span class="sym">*</span> dz<span class="sym">);</span>
        mag <span class="sym">=</span> _dt <span class="sym">/ (</span>distance <span class="sym">*</span> distance <span class="sym">*</span> distance<span class="sym">);</span>

        i<span class="sym">.</span>vx <span class="sym">=</span> i<span class="sym">.</span>vx <span class="sym">-</span> dx <span class="sym">*</span> j<span class="sym">.</span>mass <span class="sym">*</span> mag<span class="sym">;</span>
        i<span class="sym">.</span>vy <span class="sym">=</span> i<span class="sym">.</span>vy <span class="sym">-</span> dy <span class="sym">*</span> j<span class="sym">.</span>mass <span class="sym">*</span> mag<span class="sym">;</span>
        i<span class="sym">.</span>vz <span class="sym">=</span> i<span class="sym">.</span>vz <span class="sym">-</span> dz <span class="sym">*</span> j<span class="sym">.</span>mass <span class="sym">*</span> mag<span class="sym">;</span>

        j<span class="sym">.</span>vx <span class="sym">=</span> j<span class="sym">.</span>vx <span class="sym">+</span> dx <span class="sym">*</span> i<span class="sym">.</span>mass <span class="sym">*</span> mag<span class="sym">;</span>
        j<span class="sym">.</span>vy <span class="sym">=</span> j<span class="sym">.</span>vy <span class="sym">+</span> dy <span class="sym">*</span> i<span class="sym">.</span>mass <span class="sym">*</span> mag<span class="sym">;</span>
        j<span class="sym">.</span>vz <span class="sym">=</span> j<span class="sym">.</span>vz <span class="sym">+</span> dz <span class="sym">*</span> i<span class="sym">.</span>mass <span class="sym">*</span> mag<span class="sym">;</span>
      <span class="sym">}</span>

      idx <span class="sym">=</span> idx <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> bodies<span class="sym">)</span>
    <span class="sym">{</span>
      i<span class="sym">.</span>x <span class="sym">=</span> i<span class="sym">.</span>x <span class="sym">+</span> _dt <span class="sym">*</span> i<span class="sym">.</span>vx<span class="sym">;</span> i<span class="sym">.</span>y <span class="sym">=</span> i<span class="sym">.</span>y <span class="sym">+</span> _dt <span class="sym">*</span> i<span class="sym">.</span>vy<span class="sym">;</span> i<span class="sym">.</span>z <span class="sym">=</span> i<span class="sym">.</span>z <span class="sym">+</span> _dt <span class="sym">*</span> i<span class="sym">.</span>vz<span class="sym">;</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> energy<span class="sym">():</span> <span class="kwb">double</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">var</span> dx<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>  <span class="kwa">var</span> dy<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">var</span> dz<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>  <span class="kwa">var</span> e<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">var</span> distance<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>

    <span class="kwa">var</span> idx<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">val</span> length<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> bodies<span class="sym">.</span>length<span class="sym">;</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> bodies<span class="sym">)</span>
    <span class="sym">{</span>
      e <span class="sym">=</span> e <span class="sym">+</span> <span class="num">0.5</span> <span class="sym">*</span> i<span class="sym">.</span>mass <span class="sym">* (</span>i<span class="sym">.</span>vx <span class="sym">*</span> i<span class="sym">.</span>vx <span class="sym">+</span> i<span class="sym">.</span>vy <span class="sym">*</span> i<span class="sym">.</span>vy <span class="sym">+</span> i<span class="sym">.</span>vz <span class="sym">*</span> i<span class="sym">.</span>vz<span class="sym">);</span>

      <span class="slc">// Scala 2.0 would use:</span>
      <span class="slc">//</span>
      <span class="slc">//   for (val j &lt;- bodies.subArray(idx + 1, length))</span>
      <span class="slc">//</span>
      <span class="slc">// but this doesn't seem to work</span>
      <span class="slc">//</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> j <span class="sym">&lt;-</span> subArray<span class="sym">(</span>idx <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> length<span class="sym">,</span> bodies<span class="sym">))</span>
      <span class="sym">{</span>
        dx <span class="sym">=</span> i<span class="sym">.</span>x <span class="sym">-</span> j<span class="sym">.</span>x<span class="sym">;</span> dy <span class="sym">=</span> i<span class="sym">.</span>y <span class="sym">-</span> j<span class="sym">.</span>y<span class="sym">;</span> dz <span class="sym">=</span> i<span class="sym">.</span>z <span class="sym">-</span> j<span class="sym">.</span>z<span class="sym">;</span>
        distance <span class="sym">=</span> <span class="kwc">Math</span><span class="sym">.</span>sqrt<span class="sym">(</span>dx <span class="sym">*</span> dx <span class="sym">+</span> dy <span class="sym">*</span> dy <span class="sym">+</span> dz <span class="sym">*</span> dz<span class="sym">);</span>
        e <span class="sym">=</span> e <span class="sym">- (</span>i<span class="sym">.</span>mass <span class="sym">*</span> j<span class="sym">.</span>mass<span class="sym">) /</span> distance<span class="sym">;</span>
      <span class="sym">}</span>

      idx <span class="sym">=</span> idx <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> e<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="slc">//</span>
  <span class="slc">// Method for slicing an array based on Scala 2.x implementation</span>
  <span class="slc">// of 'Array.subArray'. Compiles ok under Scala 1.x</span>
  <span class="slc">//</span>
  <span class="kwa">def</span> subArray<span class="sym">(</span>_from<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> _end<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> arr<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Body<span class="sym">]):</span> <span class="kwc">Array</span><span class="sym">[</span>Body<span class="sym">] =</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> last<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> arr<span class="sym">.</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">var</span> end<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> _end<span class="sym">;</span> <span class="kwa">if</span> <span class="sym">(</span>_end <span class="sym">&gt;</span> last<span class="sym">)</span> end <span class="sym">=</span> last<span class="sym">;</span>
    <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> _from<span class="sym">;</span> <span class="kwa">if</span> <span class="sym">(</span>_from <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">var</span> offset<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span> <span class="sym">-</span> i<span class="sym">;</span>

    <span class="kwa">val</span> newarr<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Body<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span>Body<span class="sym">](</span>arr<span class="sym">.</span>length <span class="sym">+</span> offset<span class="sym">);</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;=</span> end<span class="sym">) {</span> newarr<span class="sym">(</span>i <span class="sym">+</span> offset<span class="sym">) =</span> arr<span class="sym">(</span>i<span class="sym">);</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">; }</span>

    <span class="kwa">return</span> newarr<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="slc">// Data</span>

  <span class="kwa">protected class</span> Body<span class="sym">(</span>_x<span class="sym">:</span> <span class="kwb">double</span><span class="sym">,</span> _y<span class="sym">:</span> <span class="kwb">double</span><span class="sym">,</span> _z<span class="sym">:</span> <span class="kwb">double</span><span class="sym">,</span> _vx<span class="sym">:</span> <span class="kwb">double</span><span class="sym">,</span> _vy<span class="sym">:</span> <span class="kwb">double</span><span class="sym">,</span> _vz<span class="sym">:</span> <span class="kwb">double</span><span class="sym">,</span> _mass<span class="sym">:</span> <span class="kwb">double</span><span class="sym">)</span>
  <span class="sym">{</span>
    <span class="kwa">def</span> offsetMomentum<span class="sym">(</span>_px<span class="sym">:</span> <span class="kwb">double</span><span class="sym">,</span> _py<span class="sym">:</span> <span class="kwb">double</span><span class="sym">,</span> _pz<span class="sym">:</span> <span class="kwb">double</span><span class="sym">):</span> unit <span class="sym">=</span>
    <span class="sym">{</span>
      vx <span class="sym">= -(</span>_px<span class="sym">) /</span> SOLAR_MASS<span class="sym">;</span>
      vy <span class="sym">= -(</span>_py<span class="sym">) /</span> SOLAR_MASS<span class="sym">;</span>
      vz <span class="sym">= -(</span>_pz<span class="sym">) /</span> SOLAR_MASS<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">override def</span> toString<span class="sym">():</span> <span class="kwc">String</span> <span class="sym">=</span>
    <span class="sym">{</span>
      <span class="kwa">return</span> <span class="str">&quot;[(&quot;</span> <span class="sym">+</span> x <span class="sym">+</span> <span class="str">&quot;,&quot;</span> <span class="sym">+</span> y <span class="sym">+</span> <span class="str">&quot;,&quot;</span> <span class="sym">+</span> z <span class="sym">+</span> <span class="str">&quot;), (&quot;</span><span class="sym">+</span> vx <span class="sym">+</span> <span class="str">&quot;,&quot;</span> <span class="sym">+</span> vy <span class="sym">+</span> <span class="str">&quot;,&quot;</span> <span class="sym">+</span> vz <span class="sym">+</span> <span class="str">&quot;), (&quot;</span> <span class="sym">+</span> mass <span class="sym">+</span> <span class="str">&quot;)]&quot;</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">var</span> x<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> _x<span class="sym">;</span>
    <span class="kwa">var</span> y<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> _y<span class="sym">;</span>
    <span class="kwa">var</span> z<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> _z<span class="sym">;</span>

    <span class="kwa">var</span> vx<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> _vx<span class="sym">;</span>
    <span class="kwa">var</span> vy<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> _vy<span class="sym">;</span>
    <span class="kwa">var</span> vz<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> _vz<span class="sym">;</span>

    <span class="kwa">var</span> mass<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> _mass<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwa">private val</span> PI <span class="sym">=</span> <span class="num">3.141592653589793</span><span class="sym">;</span>
  <span class="kwa">private val</span> SOLAR_MASS <span class="sym">=</span> <span class="num">4</span> <span class="sym">*</span> PI <span class="sym">*</span> PI<span class="sym">;</span>
  <span class="kwa">private val</span> DAYS_PER_YEAR <span class="sym">=</span> <span class="num">365.24</span><span class="sym">;</span>

  <span class="slc">// sun jupiter saturn uranus neptune</span>

  <span class="kwa">private val</span> bodies<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Body<span class="sym">] =</span> <span class="kwc">Array</span><span class="sym">(</span>
    <span class="kwa">new</span> Body<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> SOLAR_MASS<span class="sym">),</span>

    <span class="kwa">new</span> Body<span class="sym">(</span><span class="num">4.84143144246472090e+00</span><span class="sym">, -</span><span class="num">1.16032004402742839e+00</span><span class="sym">, -</span><span class="num">1.03622044471123109e-01</span><span class="sym">,</span>
             <span class="num">1.66007664274403694e-03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span> <span class="num">7.69901118419740425e-03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span>
             <span class="sym">-</span><span class="num">6.90460016972063023e-05</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span> <span class="num">9.54791938424326609e-04</span> <span class="sym">*</span> SOLAR_MASS<span class="sym">),</span>

    <span class="kwa">new</span> Body<span class="sym">(</span><span class="num">8.34336671824457987e+00</span><span class="sym">,</span> <span class="num">4.12479856412430479e+00</span><span class="sym">, -</span><span class="num">4.03523417114321381e-01</span><span class="sym">,</span>
             <span class="sym">-</span><span class="num">2.76742510726862411e-03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span> <span class="num">4.99852801234917238e-03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span>
             <span class="num">2.30417297573763929e-05</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span> <span class="num">2.85885980666130812e-04</span> <span class="sym">*</span> SOLAR_MASS<span class="sym">),</span>

    <span class="kwa">new</span> Body<span class="sym">(</span><span class="num">1.28943695621391310e+01</span><span class="sym">, -</span><span class="num">1.51111514016986312e+01</span><span class="sym">, -</span><span class="num">2.23307578892655734e-01</span><span class="sym">,</span>
             <span class="num">2.96460137564761618e-03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span> <span class="num">2.37847173959480950e-03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span>
             <span class="sym">-</span><span class="num">2.96589568540237556e-05</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span> <span class="num">4.36624404335156298e-05</span> <span class="sym">*</span> SOLAR_MASS<span class="sym">),</span>

    <span class="kwa">new</span> Body<span class="sym">(</span><span class="num">1.53796971148509165e+01</span><span class="sym">, -</span><span class="num">2.59193146099879641e+01</span><span class="sym">,</span> <span class="num">1.79258772950371181e-01</span><span class="sym">,</span>
             <span class="num">2.68067772490389322e-03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span> <span class="num">1.62824170038242295e-03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span>
            <span class="sym">-</span><span class="num">9.51592254519715870e-05</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,</span> <span class="num">5.15138902046611451e-05</span> <span class="sym">*</span> SOLAR_MASS<span class="sym">)</span>
  <span class="sym">);</span>

  <span class="slc">// Constructor Block</span>

  <span class="sym">{</span>
    <span class="kwa">var</span> px<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">var</span> py<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">var</span> pz<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> bodies<span class="sym">)</span>
    <span class="sym">{</span>
      px <span class="sym">=</span> px <span class="sym">+</span> i<span class="sym">.</span>vx <span class="sym">*</span> i<span class="sym">.</span>mass<span class="sym">;</span> py <span class="sym">=</span> py <span class="sym">+</span> i<span class="sym">.</span>vy <span class="sym">*</span> i<span class="sym">.</span>mass<span class="sym">;</span> pz <span class="sym">=</span> pz <span class="sym">+</span> i<span class="sym">.</span>vz <span class="sym">*</span> i<span class="sym">.</span>mass<span class="sym">;</span>
    <span class="sym">}</span>

    bodies<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>offsetMomentum<span class="sym">(</span>px<span class="sym">,</span> py<span class="sym">,</span> pz<span class="sym">);</span>
  <span class="sym">}</span>
<span class="sym">}</span>

