<span class="hl slc">--   The Computer Language Shootout</span>
<span class="hl slc">--   http://shootout.alioth.debian.org</span>
<span class="hl slc">--</span>
<span class="hl slc">--   contributed by jos√©</span>
<span class="hl slc">--   modified by andy</span>

<span class="hl kwa">class</span> FANNKUCH

insert
   ARGUMENTS

creation <span class="hl sym">{</span>ANY<span class="hl sym">}</span>
   make

<span class="hl kwa">feature</span> <span class="hl sym">{</span>ANY<span class="hl sym">}</span>
   n<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span>

   buffer<span class="hl sym">:</span> STRING

   make <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         <span class="hl kwa">if</span> argument_count <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">and then</span> <span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>.is_integer <span class="hl kwa">then</span>
            n <span class="hl sym">:=</span> <span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>.to_integer
            <span class="hl kwa">if</span> n <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
               <span class="hl kwa">create</span> buffer.<span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
               io.<span class="hl kwd">put_string</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span> <span class="hl sym">+</span> n.to_string <span class="hl sym">+</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">)</span>.to_string <span class="hl sym">+</span> <span class="hl str">&quot;%N&quot;</span><span class="hl sym">)</span>
            <span class="hl kwa">end</span>
         <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>

   <span class="hl kwd">fannkuch</span> <span class="hl sym">(</span>x<span class="hl sym">:</span> <span class="hl kwa">like</span> n<span class="hl sym">):</span> <span class="hl kwa">like</span> n <span class="hl kwa">is</span>
      <span class="hl kwa">require</span>
         x <span class="hl sym">&gt;</span> <span class="hl num">1</span>
      <span class="hl kwa">local</span>
         perm<span class="hl sym">,</span> perm1<span class="hl sym">,</span> count<span class="hl sym">,</span> maxperm<span class="hl sym">:</span> FAST_ARRAY<span class="hl sym">[</span><span class="hl kwa">like</span> n<span class="hl sym">]</span>
         rot_rank<span class="hl sym">,</span> i<span class="hl sym">,</span> j<span class="hl sym">,</span> k<span class="hl sym">,</span> upper<span class="hl sym">,</span> cnt<span class="hl sym">,</span> flip_count<span class="hl sym">,</span> tmp<span class="hl sym">,</span> p0<span class="hl sym">,</span> dcptpr<span class="hl sym">:</span> <span class="hl kwa">like</span> n
      <span class="hl kwa">do</span>
         <span class="hl kwa">create</span> perm.<span class="hl kwd">make</span><span class="hl sym">(</span>x<span class="hl sym">)</span>
         <span class="hl kwa">create</span> perm1.<span class="hl kwd">make</span><span class="hl sym">(</span>x <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
         <span class="hl kwa">create</span> count.<span class="hl kwd">make</span><span class="hl sym">(</span>x<span class="hl sym">)</span>
         <span class="hl kwa">create</span> maxperm.<span class="hl kwd">make</span><span class="hl sym">(</span>x<span class="hl sym">)</span>

            <span class="hl slc">-- initial (trivial) permutation</span>
         <span class="hl kwa">from</span>
            i <span class="hl sym">:=</span> <span class="hl num">0</span>
         until
            i <span class="hl sym">=</span> x
         <span class="hl kwa">loop</span>
            perm1.<span class="hl kwd">put</span><span class="hl sym">(</span>i<span class="hl sym">,</span> i<span class="hl sym">)</span>
            i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
         <span class="hl kwa">end</span>
         upper <span class="hl sym">:=</span> x <span class="hl sym">-</span> <span class="hl num">1</span>
         count.<span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> upper<span class="hl sym">)</span>
         dcptpr <span class="hl sym">:=</span> <span class="hl num">30</span>
         <span class="hl kwa">from</span>
            rot_rank <span class="hl sym">:=</span> upper <span class="hl sym">-</span> <span class="hl num">1</span>
            cnt <span class="hl sym">:=</span> x
         until
            rot_rank <span class="hl sym">=</span> upper
         <span class="hl kwa">loop</span>

               <span class="hl slc">-- if the thirties first permutations</span>
            <span class="hl kwa">if</span> dcptpr <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
               dcptpr <span class="hl sym">:=</span> dcptpr <span class="hl sym">-</span> <span class="hl num">1</span>
               <span class="hl kwa">from</span>
                  buffer.clear_count
                  i <span class="hl sym">:=</span> <span class="hl num">0</span>
               until
                  i <span class="hl sym">=</span> x
               <span class="hl kwa">loop</span>
                  buffer.<span class="hl kwd">append</span><span class="hl sym">((</span><span class="hl num">1</span> <span class="hl sym">+</span> perm1.<span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">))</span>.to_string<span class="hl sym">)</span>
                  i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
               <span class="hl kwa">end</span>
               buffer.<span class="hl kwd">add_last</span><span class="hl sym">(</span><span class="hl str">'%N'</span><span class="hl sym">)</span>
               io.<span class="hl kwd">put_string</span><span class="hl sym">(</span>buffer<span class="hl sym">)</span>
            <span class="hl kwa">end</span>

               <span class="hl slc">-- update rotation counters</span>
            count.<span class="hl kwd">put</span><span class="hl sym">(</span>cnt <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> rot_rank<span class="hl sym">)</span>
            <span class="hl kwa">from</span>
            until
               rot_rank <span class="hl sym">=</span> <span class="hl num">0</span>
            <span class="hl kwa">loop</span>
               count.<span class="hl kwd">put</span><span class="hl sym">(</span>rot_rank<span class="hl sym">,</span> rot_rank <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
               rot_rank <span class="hl sym">:=</span> rot_rank <span class="hl sym">-</span> <span class="hl num">1</span>
            <span class="hl kwa">end</span>
            <span class="hl slc">-- count the needed flips</span>
            p0 <span class="hl sym">:=</span> perm1.<span class="hl kwd">item</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl kwa">if</span> p0 <span class="hl sym">/=</span> <span class="hl num">0</span> <span class="hl kwa">and then</span> perm1.<span class="hl kwd">item</span><span class="hl sym">(</span>upper<span class="hl sym">) /=</span> upper <span class="hl kwa">then</span>
               <span class="hl kwa">from</span>
                  i <span class="hl sym">:=</span> <span class="hl num">0</span>
               until
                  i <span class="hl sym">=</span> x
               <span class="hl kwa">loop</span>
                  perm.<span class="hl kwd">put</span><span class="hl sym">(</span>perm1.<span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">),</span> i<span class="hl sym">)</span>
                  i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
               <span class="hl kwa">end</span>
               flip_count <span class="hl sym">:=</span> <span class="hl num">0</span>
               <span class="hl kwa">from</span>
                  k <span class="hl sym">:=</span> p0
               until
                  k <span class="hl sym">=</span> <span class="hl num">0</span>
               <span class="hl kwa">loop</span>
                  tmp <span class="hl sym">:=</span> perm.<span class="hl kwd">item</span><span class="hl sym">(</span>k<span class="hl sym">)</span>
                  perm.<span class="hl kwd">put</span><span class="hl sym">(</span>k<span class="hl sym">,</span> k<span class="hl sym">)</span>
                  j <span class="hl sym">:=</span> k <span class="hl sym">-</span> <span class="hl num">1</span>
                  k <span class="hl sym">:=</span> tmp
                  <span class="hl kwa">from</span>
                     i <span class="hl sym">:=</span> <span class="hl num">1</span>
                  until
                     i <span class="hl sym">&gt;=</span> j
                  <span class="hl kwa">loop</span>
                     tmp <span class="hl sym">:=</span> perm.<span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">)</span>
                     perm.<span class="hl kwd">put</span><span class="hl sym">(</span>perm.<span class="hl kwd">item</span><span class="hl sym">(</span>j<span class="hl sym">),</span> i<span class="hl sym">)</span>
                     perm.<span class="hl kwd">put</span><span class="hl sym">(</span>tmp<span class="hl sym">,</span> j<span class="hl sym">)</span>
                     i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
                     j <span class="hl sym">:=</span> j <span class="hl sym">-</span> <span class="hl num">1</span>
                  <span class="hl kwa">end</span>
                  flip_count <span class="hl sym">:=</span> flip_count <span class="hl sym">+</span> <span class="hl num">1</span>
               <span class="hl kwa">end</span>
               <span class="hl kwa">if</span> flip_count <span class="hl sym">&gt;</span> <span class="hl kwa">Result then</span>
                  <span class="hl kwa">Result</span> <span class="hl sym">:=</span> flip_count
                  <span class="hl kwa">from</span>
                     i <span class="hl sym">:=</span> <span class="hl num">0</span>
                  until
                     i <span class="hl sym">=</span> x
                  <span class="hl kwa">loop</span>
                     maxperm.<span class="hl kwd">put</span><span class="hl sym">(</span>perm1.<span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">),</span> i<span class="hl sym">)</span>
                     i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
                  <span class="hl kwa">end</span>
               <span class="hl kwa">end</span>
            <span class="hl kwa">end</span>

               <span class="hl slc">-- next permutation</span>
            perm1.<span class="hl kwd">put</span><span class="hl sym">(</span>perm1.<span class="hl kwd">item</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> <span class="hl num">0</span><span class="hl sym">)</span>
            perm1.<span class="hl kwd">put</span><span class="hl sym">(</span>p0<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
            cnt <span class="hl sym">:=</span> count.<span class="hl kwd">item</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl kwa">from</span>
               i <span class="hl sym">:=</span> <span class="hl num">1</span>
            until
               cnt <span class="hl sym">/=</span> <span class="hl num">0</span>
            <span class="hl kwa">loop</span>
               rot_rank <span class="hl sym">:=</span> i
               tmp <span class="hl sym">:=</span> perm1.<span class="hl kwd">item</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
               <span class="hl kwa">from</span>
                  i <span class="hl sym">:=</span> <span class="hl num">0</span>
               until
                  i <span class="hl sym">&gt;</span> rot_rank
               <span class="hl kwa">loop</span>
                  j <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
                  perm1.<span class="hl kwd">put</span><span class="hl sym">(</span>perm1.<span class="hl kwd">item</span><span class="hl sym">(</span>j<span class="hl sym">),</span> i<span class="hl sym">)</span>
                  i <span class="hl sym">:=</span> j
               <span class="hl kwa">end</span>
               perm1.<span class="hl kwd">put</span><span class="hl sym">(</span>tmp<span class="hl sym">,</span> i<span class="hl sym">)</span>
               cnt <span class="hl sym">:=</span> count.<span class="hl kwd">item</span><span class="hl sym">(</span>rot_rank<span class="hl sym">)</span>
            <span class="hl kwa">end</span>
         <span class="hl kwa">end</span>
      <span class="hl kwa">ensure</span>
         <span class="hl kwa">Result</span> <span class="hl sym">&gt;=</span> <span class="hl num">0</span>
      <span class="hl kwa">end</span>

<span class="hl kwa">end</span> <span class="hl slc">-- class FANNKUCH</span>
