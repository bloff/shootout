<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Philipp Haller</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> scala<span class="hl sym">.</span>actors<span class="hl sym">.</span>_<span class="hl sym">;</span> <span class="hl kwa">import</span> scala<span class="hl sym">.</span>actors<span class="hl sym">.</span>Actor<span class="hl sym">.</span>_

<span class="hl kwa">object</span> message <span class="hl sym">{</span>
  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) = {</span>
    <span class="hl kwa">val</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">));</span> <span class="hl kwa">val</span> nActors <span class="hl sym">=</span> <span class="hl num">500</span><span class="hl sym">;</span> <span class="hl kwa">val</span> finalSum <span class="hl sym">=</span> n <span class="hl sym">*</span> nActors
    Scheduler<span class="hl sym">.</span>impl <span class="hl sym">=</span> <span class="hl kwa">new</span> SingleThreadedScheduler

    <span class="hl kwa">def</span> beh<span class="hl sym">(</span>next<span class="hl sym">:</span> Actor<span class="hl sym">,</span> sum<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">):</span> unit <span class="hl sym">=</span>
      react <span class="hl sym">{</span>
        <span class="hl kwa">case</span> value<span class="hl sym">:</span> <span class="hl kwb">int</span> <span class="hl sym">=&gt;</span>
          <span class="hl kwa">val</span> j <span class="hl sym">=</span> value <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span> <span class="hl kwa">val</span> nsum <span class="hl sym">=</span> sum <span class="hl sym">+</span> j
          <span class="hl kwa">if</span> <span class="hl sym">(</span>next <span class="hl sym">==</span> null <span class="hl sym">&amp;&amp;</span> nsum <span class="hl sym">&gt;=</span> finalSum<span class="hl sym">) {</span>
            Console<span class="hl sym">.</span>println<span class="hl sym">(</span>nsum<span class="hl sym">)</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>exit<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
          <span class="hl sym">}</span>
          <span class="hl kwa">else</span> <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>next <span class="hl sym">!=</span> null<span class="hl sym">)</span> next <span class="hl sym">!</span> j
            beh<span class="hl sym">(</span>next<span class="hl sym">,</span> nsum<span class="hl sym">)</span>
          <span class="hl sym">}</span>
      <span class="hl sym">}</span>

    <span class="hl kwa">def</span> actorChain<span class="hl sym">(</span>i<span class="hl sym">:</span> Int<span class="hl sym">,</span> a<span class="hl sym">:</span> Actor<span class="hl sym">):</span> Actor <span class="hl sym">=</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> actorChain<span class="hl sym">(</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> actor<span class="hl sym">(</span>beh<span class="hl sym">(</span>a<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)))</span> <span class="hl kwa">else</span> a

    <span class="hl kwa">val</span> firstActor <span class="hl sym">=</span> actorChain<span class="hl sym">(</span>nActors<span class="hl sym">,</span> null<span class="hl sym">)</span>
    <span class="hl kwa">var</span> i <span class="hl sym">=</span> n<span class="hl sym">;</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span> firstActor <span class="hl sym">!</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">=</span> i<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">}</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
