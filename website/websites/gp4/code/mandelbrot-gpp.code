<span class="com">/*	The Computer Language Shootout</span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com">	contributed by Greg Buchholz</span>
<span class="com">	modified by Paul Kitchin</span>
<span class="com">*/</span>

<span class="dir">#include &lt;complex&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;sstream&gt;</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">* *</span> argv<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwb">char</span> bit_number <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwb">char</span> byte_accumulator <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwb">unsigned int const</span> iterations <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>
	<span class="kwb">double const</span> limit <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> <span class="num">2.0</span><span class="sym">;</span>

	std<span class="sym">::</span>ios_base<span class="sym">::</span><span class="kwd">sync_with_stdio</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">!=</span> <span class="num">2</span><span class="sym">)</span>
	<span class="sym">{</span>
		std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: mandlebrot &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
		<span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwb">unsigned int</span> dimension<span class="sym">;</span>
	<span class="sym">{</span>
		std<span class="sym">::</span>stringstream <span class="kwd">convertor</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
		<span class="kwa">if</span> <span class="sym">(!(</span>convertor <span class="sym">&gt;&gt;</span> dimension<span class="sym">) || !</span>convertor<span class="sym">.</span><span class="kwd">eof</span><span class="sym">())</span>
		<span class="sym">{</span>
			std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: mandlebrot &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
			std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;   n must be an integer</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
			<span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
		<span class="sym">}</span>
	<span class="sym">}</span>

	std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">&lt;&lt;</span> dimension <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> dimension <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>

	std<span class="sym">::</span><span class="kwb">complex</span><span class="sym">&lt;</span> <span class="kwb">double</span> <span class="sym">&gt;</span> C<span class="sym">;</span>
	<span class="kwa">for</span>  <span class="sym">(</span><span class="kwb">unsigned int</span> y <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y <span class="sym">&lt;</span> dimension<span class="sym">; ++</span>y<span class="sym">)</span>
	<span class="sym">{</span>
		C <span class="sym">=</span> std<span class="sym">::</span><span class="kwb">complex</span><span class="sym">&lt;</span> <span class="kwb">double</span> <span class="sym">&gt;(-</span><span class="num">1.5</span><span class="sym">,</span> <span class="num">2.0</span> <span class="sym">*</span> <span class="kwb">double</span><span class="sym">(</span>y<span class="sym">) /</span> dimension <span class="sym">-</span> <span class="num">1.0</span><span class="sym">);</span>
		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> x <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> x <span class="sym">&lt;</span> dimension<span class="sym">; ++</span>x<span class="sym">)</span>
		<span class="sym">{</span>
			C <span class="sym">=</span> std<span class="sym">::</span><span class="kwb">complex</span><span class="sym">&lt;</span> <span class="kwb">double</span> <span class="sym">&gt;(</span><span class="num">2.0</span> <span class="sym">*</span> <span class="kwb">double</span><span class="sym">(</span>x<span class="sym">) /</span> dimension <span class="sym">-</span> <span class="num">1.5</span><span class="sym">,</span> C<span class="sym">.</span><span class="kwd">imag</span><span class="sym">());</span>
			std<span class="sym">::</span><span class="kwb">complex</span><span class="sym">&lt;</span> <span class="kwb">double</span> <span class="sym">&gt;</span> <span class="kwd">Z</span><span class="sym">(</span>C<span class="sym">);</span>

			<span class="kwb">bool</span> norm_less_equal_limit <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
			<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> iterations <span class="sym">&amp;&amp;</span> norm_less_equal_limit<span class="sym">; ++</span>i<span class="sym">)</span>
			<span class="sym">{</span>
				Z <span class="sym">*=</span> Z<span class="sym">;</span>
				Z <span class="sym">+=</span> C<span class="sym">;</span>
				norm_less_equal_limit <span class="sym">= (</span>Z<span class="sym">.</span><span class="kwd">real</span><span class="sym">() *</span> Z<span class="sym">.</span><span class="kwd">real</span><span class="sym">() +</span> Z<span class="sym">.</span><span class="kwd">imag</span><span class="sym">() *</span> Z<span class="sym">.</span><span class="kwd">imag</span><span class="sym">() &lt;=</span> limit<span class="sym">);</span>
			<span class="sym">}</span>

			byte_accumulator <span class="sym">= (</span>byte_accumulator <span class="sym">*</span> <span class="num">2</span><span class="sym">) | (</span>norm_less_equal_limit<span class="sym">);</span>

			<span class="kwa">if</span> <span class="sym">(++</span>bit_number <span class="sym">==</span> <span class="num">8</span><span class="sym">)</span>
			<span class="sym">{</span>
				std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> byte_accumulator<span class="sym">;</span>
				bit_number <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
				byte_accumulator <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
		<span class="kwa">if</span> <span class="sym">(</span>dimension <span class="sym">&amp;</span> <span class="num">7</span><span class="sym">)</span>
		<span class="sym">{</span>
			byte_accumulator <span class="sym">&lt;&lt;=</span> <span class="num">8</span> <span class="sym">- (</span>dimension <span class="sym">&amp;</span> <span class="num">7</span><span class="sym">);</span>
			std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> byte_accumulator<span class="sym">;</span>
			bit_number <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
			byte_accumulator <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
<span class="sym">}</span>
