<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">% Based on work by Anthony Borla</span>
<span class="hl slc">% Modified for Mercury by Glendon Holst</span>

<span class="hl sym">:-</span> module nsieve.
<span class="hl sym">:-</span> interface.
<span class="hl sym">:-</span> import_module io.

<span class="hl sym">:-</span> pred main<span class="hl sym">(</span>io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl sym">:-</span> implementation.

<span class="hl sym">:-</span> import_module array.
<span class="hl sym">:-</span> import_module list.
<span class="hl sym">:-</span> import_module int.
<span class="hl sym">:-</span> import_module bool.
<span class="hl sym">:-</span> import_module string.

<span class="hl slc">% ----------------------------------------------------------------------</span>

main<span class="hl sym">(!</span>IO<span class="hl sym">) :-</span>
   io.command_line_arguments<span class="hl sym">(</span>Args<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
   <span class="hl sym">(</span>
      if
         Args <span class="hl sym">= [</span>AString<span class="hl sym">|</span>_<span class="hl sym">],</span>
         string.to_int<span class="hl sym">(</span>string.strip<span class="hl sym">(</span>AString<span class="hl sym">),</span> Aint<span class="hl sym">)</span>
      then
         N <span class="hl sym">=</span> Aint
      else
         N <span class="hl kwa">is</span> <span class="hl num">9</span>
   <span class="hl sym">),</span>

   nsieve<span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl sym">&lt;&lt;</span> N<span class="hl sym">, !</span>IO<span class="hl sym">),</span>
   nsieve<span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl sym">&lt;&lt; (</span>N <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">), !</span>IO<span class="hl sym">),</span>
   nsieve<span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl sym">&lt;&lt; (</span>N <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">), !</span>IO<span class="hl sym">)</span>.

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred nsieve<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> io<span class="hl sym">::</span>di<span class="hl sym">,</span> io<span class="hl sym">::</span>uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

nsieve<span class="hl sym">(</span>N<span class="hl sym">, !</span>IO<span class="hl sym">) :-</span>
  Arr <span class="hl sym">=</span> array.init<span class="hl sym">(</span>N<span class="hl sym">,</span> yes<span class="hl sym">),</span>
  nsieve<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> Arr<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> R<span class="hl sym">),</span>
  io.format<span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8u %8u</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">, [</span>i<span class="hl sym">(</span>N<span class="hl sym">),</span> i<span class="hl sym">(</span>R<span class="hl sym">)], !</span>IO<span class="hl sym">)</span>.

<span class="hl slc">% ------------------------------- %</span>

<span class="hl sym">:-</span> pred nsieve<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> array<span class="hl sym">(</span>bool<span class="hl sym">)::</span>array_di<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>out<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

nsieve<span class="hl sym">(</span>Index<span class="hl sym">,</span> Arr<span class="hl sym">,</span> Acc<span class="hl sym">,</span> Result<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
   Index <span class="hl sym">=</span> array.size<span class="hl sym">(</span>Arr<span class="hl sym">) -&gt;</span> Result <span class="hl sym">=</span> Acc
<span class="hl sym">;</span>
   array.lookup<span class="hl sym">(</span>Arr<span class="hl sym">,</span> Index<span class="hl sym">) =</span> no <span class="hl sym">-&gt;</span> nsieve<span class="hl sym">(</span>Index <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> Arr<span class="hl sym">,</span> Acc<span class="hl sym">,</span> Result<span class="hl sym">)</span>
<span class="hl sym">;</span>
   clear_sieve<span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> Index<span class="hl sym">,</span> Index<span class="hl sym">,</span> Arr<span class="hl sym">,</span> Aout<span class="hl sym">),</span> nsieve<span class="hl sym">(</span>Index <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> Aout<span class="hl sym">,</span> Acc <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> Result<span class="hl sym">)</span>
<span class="hl sym">)</span>.


<span class="hl slc">% ------------- %</span>

<span class="hl sym">:-</span> pred clear_sieve<span class="hl sym">(</span>int<span class="hl sym">::</span>in<span class="hl sym">,</span> int<span class="hl sym">::</span>in<span class="hl sym">,</span>
                    array<span class="hl sym">(</span>bool<span class="hl sym">)::</span>array_di<span class="hl sym">,</span> array<span class="hl sym">(</span>bool<span class="hl sym">)::</span>array_uo<span class="hl sym">)</span> <span class="hl kwa">is</span> det.

clear_sieve<span class="hl sym">(</span>N<span class="hl sym">,</span> M<span class="hl sym">,</span> Arr<span class="hl sym">,</span> Aout<span class="hl sym">) :-</span>
<span class="hl sym">(</span>
   if N <span class="hl sym">&lt;</span> array.size<span class="hl sym">(</span>Arr<span class="hl sym">)</span> then
      array.set<span class="hl sym">(</span>Arr<span class="hl sym">,</span> N<span class="hl sym">,</span> no<span class="hl sym">,</span> A1<span class="hl sym">),</span> clear_sieve<span class="hl sym">(</span>N <span class="hl sym">+</span> M<span class="hl sym">,</span> M<span class="hl sym">,</span> A1<span class="hl sym">,</span> Aout<span class="hl sym">)</span>
   else
      Aout <span class="hl sym">=</span> Arr
<span class="hl sym">)</span>.

<span class="hl slc">% ------------------------------- %</span>

