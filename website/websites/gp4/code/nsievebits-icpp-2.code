<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Lasse Kärkkäinen</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;cstdlib&gt;</span>
<span class="hl dir">#include &lt;iomanip&gt;</span>
<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;vector&gt;</span>

<span class="hl slc">// Taking a REFERENCE to int makes the program slightly faster on G++ 4.20.</span>
<span class="hl kwb">void</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">&amp;</span> m<span class="hl sym">) {</span>
	<span class="hl kwb">int</span> c<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>
	std<span class="hl sym">::</span>vector<span class="hl sym">&lt;</span><span class="hl kwb">bool</span><span class="hl sym">&gt;</span> <span class="hl kwd">p</span><span class="hl sym">(</span>m<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl kwa">true</span><span class="hl sym">);</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>m<span class="hl sym">;</span> i<span class="hl sym">++)</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>p<span class="hl sym">[</span>i<span class="hl sym">]) {</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">;</span> j<span class="hl sym">&lt;=</span>m<span class="hl sym">;</span> j<span class="hl sym">+=</span>i<span class="hl sym">)</span> p<span class="hl sym">[</span>j<span class="hl sym">]=</span><span class="hl kwa">false</span><span class="hl sym">;</span>
		c<span class="hl sym">++;</span>
	<span class="hl sym">}</span>
	std<span class="hl sym">::</span>cout<span class="hl sym">&lt;&lt;</span><span class="hl str">&quot;Primes up to &quot;</span><span class="hl sym">&lt;&lt;</span>std<span class="hl sym">::</span><span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">)&lt;&lt;</span>m<span class="hl sym">&lt;&lt;</span><span class="hl str">&quot; &quot;</span><span class="hl sym">&lt;&lt;</span>std<span class="hl sym">::</span><span class="hl kwd">setw</span><span class="hl sym">(</span><span class="hl num">8</span><span class="hl sym">)&lt;&lt;</span>c<span class="hl sym">&lt;&lt;</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> m<span class="hl sym">,</span> <span class="hl kwb">char</span><span class="hl sym">**</span> argv<span class="hl sym">) {</span>
	<span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">=</span><span class="hl num">10000</span><span class="hl sym">&lt;&lt;</span>std<span class="hl sym">::</span><span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]));</span>
	<span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">/=</span><span class="hl num">2</span><span class="hl sym">);</span>
	<span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">/=</span><span class="hl num">2</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

