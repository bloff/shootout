<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; contributed by Dima Dorfman, 2005</span>

<span class="sym">(</span><span class="kwa">defun</span> nsievebits <span class="sym">(</span>m<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum m<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>a <span class="sym">(</span>make<span class="sym">-</span>array m <span class="sym">:</span>initial<span class="sym">-</span>element <span class="num">1</span>
		       <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="sym">'</span>bit<span class="sym">)))</span>
    <span class="sym">(</span>flet <span class="sym">((</span>clear <span class="sym">(</span>i<span class="sym">)</span>
	     <span class="sym">(</span>loop for j fixnum from <span class="sym">(+</span> i i<span class="sym">)</span> to <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> m<span class="sym">)</span> by i
		   do <span class="sym">(</span>setf <span class="sym">(</span>aref a j<span class="sym">)</span> <span class="num">0</span><span class="sym">))))</span>
      <span class="sym">(</span>loop for i fixnum from <span class="num">2</span> to <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> m<span class="sym">)</span>
	    when <span class="sym">(=</span> <span class="num">1</span> <span class="sym">(</span>aref a i<span class="sym">))</span> do <span class="sym">(</span>clear i<span class="sym">)</span>
	    count <span class="sym">(=</span> <span class="num">1</span> <span class="sym">(</span>aref a i<span class="sym">))))))</span>

<span class="sym">(</span><span class="kwa">defun</span> test <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>m <span class="sym">(*</span> <span class="num">10000</span> <span class="sym">(</span><span class="kwa">expt</span> <span class="num">2</span> n<span class="sym">))))</span>
    <span class="sym">(</span>format t <span class="str">&quot;Primes up to~T~8&lt;~d~&gt;~T~8&lt;~d~&gt;~%&quot;</span> m <span class="sym">(</span>nsievebits m<span class="sym">))))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>args #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
	       #<span class="sym">+</span>cmu extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
	       #<span class="sym">+</span>gcl si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*)</span>
	 <span class="sym">(</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> args<span class="sym">)))))</span>
    <span class="sym">(</span>when <span class="sym">(&gt;=</span> n <span class="num">0</span><span class="sym">) (</span>test n<span class="sym">))</span>
    <span class="sym">(</span>when <span class="sym">(&gt;=</span> n <span class="num">1</span><span class="sym">) (</span>test <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>when <span class="sym">(&gt;=</span> n <span class="num">2</span><span class="sym">) (</span>test <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)))))</span>
