<span class="hl slc">;;; The Great Computer Language Shootout</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; contributed by Dima Dorfman, 2005</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> nsievebits <span class="hl sym">(</span>m<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum m<span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>a <span class="hl sym">(</span>make-array m <span class="hl sym">:</span>initial-element <span class="hl num">1</span>
		       <span class="hl sym">:</span>element-<span class="hl kwa">type</span> <span class="hl sym">'</span>bit<span class="hl sym">)))</span>
    <span class="hl sym">(</span>flet <span class="hl sym">((</span>clear <span class="hl sym">(</span>i<span class="hl sym">)</span>
	     <span class="hl sym">(</span>loop for j fixnum from <span class="hl sym">(+</span> i i<span class="hl sym">)</span> to <span class="hl sym">(</span><span class="hl num">1</span>- m<span class="hl sym">)</span> by i
		   do <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref a j<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">))))</span>
      <span class="hl sym">(</span>loop for i fixnum from <span class="hl num">2</span> to <span class="hl sym">(</span><span class="hl num">1</span>- m<span class="hl sym">)</span>
	    when <span class="hl sym">(=</span> <span class="hl num">1</span> <span class="hl sym">(</span>aref a i<span class="hl sym">))</span> do <span class="hl sym">(</span>clear i<span class="hl sym">)</span>
	    count <span class="hl sym">(=</span> <span class="hl num">1</span> <span class="hl sym">(</span>aref a i<span class="hl sym">))))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> test <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>m <span class="hl sym">(*</span> <span class="hl num">10000</span> <span class="hl sym">(</span><span class="hl kwa">expt</span> <span class="hl num">2</span> n<span class="hl sym">))))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;Primes up to~T~8&lt;~d~&gt;~T~8&lt;~d~&gt;~%&quot;</span> m <span class="hl sym">(</span>nsievebits m<span class="hl sym">))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>args #<span class="hl sym">+</span>sbcl sb-ext<span class="hl sym">:*</span>posix-argv<span class="hl sym">*</span>
	       #<span class="hl sym">+</span>cmu extensions<span class="hl sym">:*</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-strings<span class="hl sym">*</span>
	       #<span class="hl sym">+</span>gcl si<span class="hl sym">::*</span><span class="hl kwa">command</span>-args<span class="hl sym">*)</span>
	 <span class="hl sym">(</span>n <span class="hl sym">(</span>parse-integer <span class="hl sym">(</span><span class="hl kwa">car</span> <span class="hl sym">(</span><span class="hl kwa">last</span> args<span class="hl sym">)))))</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">0</span><span class="hl sym">) (</span>test n<span class="hl sym">))</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">1</span><span class="hl sym">) (</span>test <span class="hl sym">(</span>- n <span class="hl num">1</span><span class="hl sym">)))</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;=</span> n <span class="hl num">2</span><span class="hl sym">) (</span>test <span class="hl sym">(</span>- n <span class="hl num">2</span><span class="hl sym">)))))</span>
