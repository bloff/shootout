<span class="slc">-----------------------------------------------------------------------</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org</span>
<span class="slc">-- contributed by Jim Rogers</span>
<span class="slc">-----------------------------------------------------------------------</span>
<span class="kwa">with</span> Ada.Numerics.Generic_Elementary_Functions<span class="sym">;</span>
<span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;</span>
<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;</span>


<span class="kwa">procedure</span> Partialsums <span class="kwa">is</span>
   <span class="kwa">type</span> Real <span class="kwa">is digits</span> <span class="num">18</span><span class="sym">;</span>
   <span class="kwa">package</span> Real_Funcs <span class="kwa">is new</span> Ada.Numerics.Generic_Elementary_Functions<span class="sym">(</span>Real<span class="sym">);</span>
   <span class="kwa">use</span> Real_Funcs<span class="sym">;</span>
   <span class="kwa">package</span> Real_Io <span class="kwa">is new</span> Ada.Text_Io.Float_Io<span class="sym">(</span>Real<span class="sym">);</span>
   <span class="kwa">use</span> Real_Io<span class="sym">;</span>

   N   <span class="sym">:</span> <span class="kwb">Long_Integer</span><span class="sym">;</span>
   Sum <span class="sym">:</span> <span class="kwa">array</span><span class="sym">(</span><span class="num">1</span>.<span class="num">.9</span><span class="sym">)</span> <span class="kwa">of</span> Real <span class="sym">:= (</span><span class="kwa">Others</span> <span class="sym">=&gt;</span> <span class="num">0.0</span><span class="sym">);</span>
   A   <span class="sym">:</span> Real <span class="sym">:= -</span><span class="num">1.0</span><span class="sym">;</span>
<span class="kwa">begin</span>
   N <span class="sym">:=</span> <span class="kwb">Long_Integer</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));</span>

   <span class="kwa">for</span> K <span class="kwa">in</span> <span class="num">1</span>..n <span class="kwa">loop</span>
      Sum<span class="sym">(</span><span class="num">1</span><span class="sym">) :=</span> Sum<span class="sym">(</span><span class="num">1</span><span class="sym">) + (</span><span class="num">2.0</span><span class="sym">/</span><span class="num">3.0</span><span class="sym">)**</span>Real<span class="sym">(</span>K <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
      Sum<span class="sym">(</span><span class="num">2</span><span class="sym">) :=</span> Sum<span class="sym">(</span><span class="num">2</span><span class="sym">) +</span> Real<span class="sym">(</span>K<span class="sym">)**(-</span><span class="num">0.5</span><span class="sym">);</span>
      Sum<span class="sym">(</span><span class="num">3</span><span class="sym">) :=</span> Sum<span class="sym">(</span><span class="num">3</span><span class="sym">) +</span> <span class="num">1.0</span><span class="sym">/(</span>Real<span class="sym">(</span>K<span class="sym">) * (</span>Real<span class="sym">(</span>K<span class="sym">) +</span> <span class="num">1.0</span><span class="sym">));</span>
      Sum<span class="sym">(</span><span class="num">4</span><span class="sym">) :=</span> Sum<span class="sym">(</span><span class="num">4</span><span class="sym">) +</span> <span class="num">1.0</span> <span class="sym">/ ((</span>Real<span class="sym">(</span>K<span class="sym">)**</span><span class="num">3</span><span class="sym">) * (</span>Sin<span class="sym">(</span>Real<span class="sym">(</span>K<span class="sym">))**</span><span class="num">2</span><span class="sym">));</span>
      Sum<span class="sym">(</span><span class="num">5</span><span class="sym">) :=</span> Sum<span class="sym">(</span><span class="num">5</span><span class="sym">) +</span> <span class="num">1.0</span> <span class="sym">/ ((</span>Real<span class="sym">(</span>K<span class="sym">)**</span><span class="num">3</span><span class="sym">) * (</span>Cos<span class="sym">(</span>Real<span class="sym">(</span>K<span class="sym">))**</span><span class="num">2</span><span class="sym">));</span>
      Sum<span class="sym">(</span><span class="num">6</span><span class="sym">) :=</span> Sum<span class="sym">(</span><span class="num">6</span><span class="sym">) +</span> <span class="num">1.0</span> <span class="sym">/</span> Real<span class="sym">(</span>K<span class="sym">);</span>
      Sum<span class="sym">(</span><span class="num">7</span><span class="sym">) :=</span> Sum<span class="sym">(</span><span class="num">7</span><span class="sym">) +</span> <span class="num">1.0</span> <span class="sym">/</span> Real<span class="sym">(</span>K<span class="sym">)**</span><span class="num">2</span><span class="sym">;</span>
      A <span class="sym">:= -</span>A<span class="sym">;</span>
      Sum<span class="sym">(</span><span class="num">8</span><span class="sym">) :=</span> Sum<span class="sym">(</span><span class="num">8</span><span class="sym">) +</span> A <span class="sym">/</span> Real<span class="sym">(</span>K<span class="sym">);</span>
      Sum<span class="sym">(</span><span class="num">9</span><span class="sym">) :=</span> Sum<span class="sym">(</span><span class="num">9</span><span class="sym">) +</span> A <span class="sym">/ (</span><span class="num">2.0</span> <span class="sym">*</span> Real<span class="sym">(</span>K<span class="sym">) -</span> <span class="num">1.0</span><span class="sym">);</span>
   <span class="kwa">end loop</span><span class="sym">;</span>
   Real_Io.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Sum<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
   Put_Line<span class="sym">(</span>Ascii.Ht <span class="sym">&amp;</span> <span class="str">&quot;(2/3)^k&quot;</span><span class="sym">);</span>

   Real_Io.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Sum<span class="sym">(</span><span class="num">2</span><span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
   Put_Line<span class="sym">(</span>Ascii.Ht <span class="sym">&amp;</span> <span class="str">&quot;k^-0.5&quot;</span><span class="sym">);</span>

   Real_Io.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Sum<span class="sym">(</span><span class="num">3</span><span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
   Put_Line<span class="sym">(</span>Ascii.Ht <span class="sym">&amp;</span> <span class="str">&quot;1/k(k+1)&quot;</span><span class="sym">);</span>

   Real_Io.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Sum<span class="sym">(</span><span class="num">4</span><span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
   Put_Line<span class="sym">(</span>Ascii.Ht <span class="sym">&amp;</span> <span class="str">&quot;Flint Hills&quot;</span><span class="sym">);</span>

   Real_Io.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Sum<span class="sym">(</span><span class="num">5</span><span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
   Put_Line<span class="sym">(</span>Ascii.Ht <span class="sym">&amp;</span> <span class="str">&quot;Cookson Hills&quot;</span><span class="sym">);</span>

   Real_Io.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Sum<span class="sym">(</span><span class="num">6</span><span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
   Put_Line<span class="sym">(</span>Ascii.Ht <span class="sym">&amp;</span> <span class="str">&quot;Harmonic&quot;</span><span class="sym">);</span>

   Real_Io.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Sum<span class="sym">(</span><span class="num">7</span><span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
   Put_Line<span class="sym">(</span>Ascii.Ht <span class="sym">&amp;</span> <span class="str">&quot;Riemann Zeta&quot;</span><span class="sym">);</span>

   Real_Io.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Sum<span class="sym">(</span><span class="num">8</span><span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
   Put_Line<span class="sym">(</span>Ascii.Ht <span class="sym">&amp;</span> <span class="str">&quot;Alternating Harmonic&quot;</span><span class="sym">);</span>

   Real_Io.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Sum<span class="sym">(</span><span class="num">9</span><span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
   Put_Line<span class="sym">(</span>Ascii.Ht <span class="sym">&amp;</span> <span class="str">&quot;Gregory&quot;</span><span class="sym">);</span>
<span class="kwa">end</span> Partialsums<span class="sym">;</span>
