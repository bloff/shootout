<span class="hl slc">#!/usr/bin/env ruby</span>
<span class="hl slc">#</span>
<span class="hl slc"># The Computer Language Shootout</span>
<span class="hl slc">#   http://shootout.alioth.debian.org</span>
<span class="hl slc">#   contributed by Kevin Barnes (Ruby novice)</span>

<span class="hl kwa">def</span> blank_board
  <span class="hl num">0b111111100000100000100000100000100000100000100000100000100000100000</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">is_even</span><span class="hl sym">(</span> location<span class="hl sym">)</span>
  <span class="hl sym">(</span>location % <span class="hl num">12</span><span class="hl sym">) &lt;</span> <span class="hl num">6</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> create_collector_support
    odd_map <span class="hl sym">= [</span><span class="hl num">0b11</span><span class="hl sym">,</span> <span class="hl num">0b110</span><span class="hl sym">,</span> <span class="hl num">0b1100</span><span class="hl sym">,</span> <span class="hl num">0b11000</span><span class="hl sym">,</span> <span class="hl num">0b10000</span><span class="hl sym">]</span>
    even_map <span class="hl sym">= [</span><span class="hl num">0b1</span><span class="hl sym">,</span> <span class="hl num">0b11</span><span class="hl sym">,</span> <span class="hl num">0b110</span><span class="hl sym">,</span> <span class="hl num">0b1100</span><span class="hl sym">,</span> <span class="hl num">0b11000</span><span class="hl sym">]</span>

    all_odds <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl num">0b100000</span><span class="hl sym">)</span>
    all_evens <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl num">0b100000</span><span class="hl sym">)</span>
    bit_counts <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl num">0b100000</span><span class="hl sym">)</span>
    new_regions <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl num">0b100000</span><span class="hl sym">)</span>
    <span class="hl num">0</span><span class="hl sym">.</span><span class="hl kwd">upto</span><span class="hl sym">(</span><span class="hl num">0b11111</span><span class="hl sym">)</span> <span class="hl kwa">do</span> <span class="hl sym">|</span> i <span class="hl sym">|</span>
      bit_count <span class="hl sym">=</span> odd <span class="hl sym">=</span> even <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl num">0</span><span class="hl sym">.</span><span class="hl kwd">upto</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span> <span class="hl kwa">do</span> <span class="hl sym">|</span> bit <span class="hl sym">|</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>i<span class="hl sym">[</span>bit<span class="hl sym">] ==</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
          bit_count <span class="hl sym">+=</span> <span class="hl num">1</span>
          odd <span class="hl sym">|=</span> odd_map<span class="hl sym">[</span>bit<span class="hl sym">]</span>
          even <span class="hl sym">|=</span> even_map<span class="hl sym">[</span>bit<span class="hl sym">]</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
      all_odds<span class="hl sym">[</span>i<span class="hl sym">] =</span> odd
      all_evens<span class="hl sym">[</span>i<span class="hl sym">] =</span> even
      bit_counts<span class="hl sym">[</span>i<span class="hl sym">] =</span> bit_count
      new_regions<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwd">create_regions</span><span class="hl sym">(</span> i<span class="hl sym">)</span>
    <span class="hl kwa">end</span>

    &#64;<span class="hl kwb">&#64;converter</span> <span class="hl sym">= []</span>
    <span class="hl num">10</span><span class="hl sym">.</span>times <span class="hl sym">{ |</span> row <span class="hl sym">|</span> &#64;<span class="hl kwb">&#64;converter</span><span class="hl sym">.</span><span class="hl kwd">push</span><span class="hl sym">((</span>row % <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) ?</span> all_evens <span class="hl sym">:</span> all_odds<span class="hl sym">) }</span>
    &#64;<span class="hl kwb">&#64;bit_counts</span> <span class="hl sym">=</span> bit_counts
    &#64;<span class="hl kwb">&#64;regions</span> <span class="hl sym">=</span> new_regions<span class="hl sym">.</span>collect <span class="hl sym">{ |</span> set <span class="hl sym">|</span> set<span class="hl sym">.</span>collect <span class="hl sym">{ |</span> value <span class="hl sym">| [</span> value<span class="hl sym">,</span> bit_counts<span class="hl sym">[</span>value<span class="hl sym">],</span> value<span class="hl sym">] } }</span>

  <span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">prunable</span><span class="hl sym">(</span> board<span class="hl sym">,</span> location<span class="hl sym">,</span> slotting <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">)</span>
  collectors <span class="hl sym">= []</span>
  <span class="hl sym">(</span>location <span class="hl sym">/</span> <span class="hl num">6</span><span class="hl sym">).</span>to_i<span class="hl sym">.</span><span class="hl kwd">upto</span><span class="hl sym">(</span><span class="hl num">9</span><span class="hl sym">)</span> <span class="hl kwa">do</span> <span class="hl sym">|</span> row_on <span class="hl sym">|</span>
    regions <span class="hl sym">=</span> &#64;<span class="hl kwb">&#64;regions</span><span class="hl sym">[(</span>board <span class="hl sym">&gt;&gt; (</span>row_on <span class="hl sym">*</span> <span class="hl num">6</span><span class="hl sym">)) &amp;</span> <span class="hl num">0b11111</span> ^ <span class="hl num">0b11111</span><span class="hl sym">]</span>
    converter <span class="hl sym">=</span> &#64;<span class="hl kwb">&#64;converter</span><span class="hl sym">[</span>row_on<span class="hl sym">]</span>
    initial_collector_count <span class="hl sym">=</span> collectors<span class="hl sym">.</span>length
    regions<span class="hl sym">.</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span> region <span class="hl sym">|</span>
      collector_found <span class="hl sym">=</span> <span class="hl kwa">nil</span>
      region_mask <span class="hl sym">=</span> region<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
      initial_collector_count<span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span> collector_num <span class="hl sym">|</span>
        collector <span class="hl sym">=</span> collectors<span class="hl sym">[</span>collector_num<span class="hl sym">]</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>collector<span class="hl sym">)</span> <span class="hl kwa">then</span>
          collector_mask <span class="hl sym">=</span> collector<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
          <span class="hl kwa">if</span> <span class="hl sym">(</span>collector_mask <span class="hl sym">&amp;</span> region_mask <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>collector_found<span class="hl sym">)</span> <span class="hl kwa">then</span>
              collector_found<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] |=</span> collector_mask
              collector_found<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] +=</span> collector<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span>
              collector_found<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] |=</span> collector<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">]</span>
              collectors<span class="hl sym">[</span>collector_num<span class="hl sym">] =</span> <span class="hl kwa">nil</span>
            <span class="hl kwa">else</span>
              collector_found <span class="hl sym">=</span> collector
              collector<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] +=</span> region<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span>
              collector<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] |=</span> region_mask
            <span class="hl kwa">end</span>
          <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>collector_found <span class="hl sym">==</span> <span class="hl kwa">nil</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
        collectors<span class="hl sym">.</span><span class="hl kwd">push</span><span class="hl sym">(</span>Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span>region<span class="hl sym">))</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    collectors<span class="hl sym">.</span>length<span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span> collector_num <span class="hl sym">|</span>
      collector <span class="hl sym">=</span> collectors<span class="hl sym">[</span>collector_num<span class="hl sym">]</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>collector<span class="hl sym">)</span> <span class="hl kwa">then</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>collector<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] ==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
          <span class="hl kwa">return true if</span> <span class="hl sym">(</span>collector<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span> % <span class="hl num">5</span> <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span>
          collectors<span class="hl sym">[</span>collector_num<span class="hl sym">] =</span> <span class="hl kwa">nil</span>
        <span class="hl kwa">else</span>
          <span class="hl kwa">return false if</span> <span class="hl sym">(</span>collector<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] ==</span> <span class="hl num">0b11111</span> <span class="hl sym">&amp;&amp; !</span>slotting<span class="hl sym">)</span>
          collector<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> converter<span class="hl sym">[</span>collector<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">]]</span>
          collector<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] =</span> <span class="hl num">0</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    collectors<span class="hl sym">.</span>compact<span class="hl sym">!</span>
  <span class="hl kwa">end</span>
  <span class="hl kwa">return false if</span> <span class="hl sym">(</span>collectors<span class="hl sym">.</span>length <span class="hl sym">&lt;=</span> <span class="hl num">1</span><span class="hl sym">)</span>
  collectors<span class="hl sym">.</span>any<span class="hl sym">? { |</span> collector <span class="hl sym">| (</span>collector<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span> % <span class="hl num">5</span><span class="hl sym">) !=</span> <span class="hl num">0</span> <span class="hl sym">}</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">as_binary</span><span class="hl sym">(</span> value<span class="hl sym">)</span>
  rtn <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span>
  <span class="hl num">5</span><span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span> i <span class="hl sym">|</span>
    rtn <span class="hl sym">+=</span> <span class="hl str">&quot;#{value[i]}&quot;</span>
  <span class="hl kwa">end</span>
  rtn
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">create_regions</span><span class="hl sym">(</span> value <span class="hl sym">)</span>
  regions <span class="hl sym">= []</span>
  cur_region <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl num">5</span><span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span> bit <span class="hl sym">|</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>value<span class="hl sym">[</span>bit<span class="hl sym">] ==</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
      cur_region <span class="hl sym">|=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> bit
    <span class="hl kwa">else</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>cur_region <span class="hl sym">!=</span><span class="hl num">0</span> <span class="hl sym">)</span> <span class="hl kwa">then</span>
        regions<span class="hl sym">.</span><span class="hl kwd">push</span><span class="hl sym">(</span> cur_region<span class="hl sym">)</span>
        cur_region <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
  regions<span class="hl sym">.</span><span class="hl kwd">push</span><span class="hl sym">(</span>cur_region<span class="hl sym">)</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>cur_region <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span>
  regions
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">print_board</span><span class="hl sym">(</span> board<span class="hl sym">,</span> padding <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">,</span> rows <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">,</span> row_offset <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">)</span>
  rows<span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span> row <span class="hl sym">|</span>
    rtn <span class="hl sym">=</span> padding
    rtn <span class="hl sym">=</span> <span class="hl str">&quot;#{rtn} &quot;</span> <span class="hl kwa">if</span> <span class="hl sym">((</span>row <span class="hl sym">+</span> row_offset<span class="hl sym">)</span> % <span class="hl num">2</span><span class="hl sym">) ==</span> <span class="hl num">1</span>
    <span class="hl num">6</span><span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span> col <span class="hl sym">|</span>
      rtn <span class="hl sym">=</span> <span class="hl str">&quot;#{rtn}#{board[row*6+col]} &quot;</span>
    <span class="hl kwa">end</span>
    print <span class="hl str">&quot;#{rtn}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">class</span> Rotation
  attr_reader <span class="hl sym">:</span>start_masks

  &#64;<span class="hl kwb">&#64;rotation_even_adder</span> <span class="hl sym">= { :</span>west <span class="hl sym">=&gt; -</span><span class="hl num">1</span><span class="hl sym">, :</span>east <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">, :</span>nw <span class="hl sym">=&gt; -</span><span class="hl num">7</span><span class="hl sym">, :</span>ne <span class="hl sym">=&gt; -</span><span class="hl num">6</span><span class="hl sym">, :</span>sw <span class="hl sym">=&gt;</span> <span class="hl num">5</span><span class="hl sym">, :</span>se <span class="hl sym">=&gt;</span> <span class="hl num">6</span> <span class="hl sym">}</span>
  &#64;<span class="hl kwb">&#64;rotation_odd_adder</span> <span class="hl sym">= { :</span>west <span class="hl sym">=&gt; -</span><span class="hl num">1</span><span class="hl sym">, :</span>east <span class="hl sym">=&gt;</span> <span class="hl num">1</span><span class="hl sym">, :</span>nw <span class="hl sym">=&gt; -</span><span class="hl num">6</span><span class="hl sym">, :</span>ne <span class="hl sym">=&gt; -</span><span class="hl num">5</span><span class="hl sym">, :</span>sw <span class="hl sym">=&gt;</span> <span class="hl num">6</span><span class="hl sym">, :</span>se <span class="hl sym">=&gt;</span> <span class="hl num">7</span> <span class="hl sym">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl sym">(</span> directions <span class="hl sym">)</span>
    values<span class="hl sym">,</span> min <span class="hl sym">=</span> <span class="hl kwd">get_values</span><span class="hl sym">(</span> directions <span class="hl sym">)</span>
    <span class="hl kwb">&#64;even_offsets</span><span class="hl sym">,</span> <span class="hl kwb">&#64;odd_offsets</span> <span class="hl sym">=</span> <span class="hl kwd">normalize_offsets</span><span class="hl sym">(</span> values<span class="hl sym">,</span> min<span class="hl sym">)</span>

    <span class="hl kwb">&#64;even_mask</span> <span class="hl sym">=</span> <span class="hl kwd">mask_for_offsets</span><span class="hl sym">(</span> <span class="hl kwb">&#64;even_offsets</span><span class="hl sym">)</span>
    <span class="hl kwb">&#64;odd_mask</span> <span class="hl sym">=</span> <span class="hl kwd">mask_for_offsets</span><span class="hl sym">(</span> <span class="hl kwb">&#64;odd_offsets</span><span class="hl sym">)</span>

    <span class="hl kwb">&#64;start_masks</span> <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl num">60</span><span class="hl sym">)</span>

    <span class="hl num">0</span><span class="hl sym">.</span><span class="hl kwd">upto</span><span class="hl sym">(</span><span class="hl num">59</span><span class="hl sym">)</span> <span class="hl kwa">do</span> <span class="hl sym">|</span> offset <span class="hl sym">|</span>
      mask <span class="hl sym">=</span> <span class="hl kwd">is_even</span><span class="hl sym">(</span>offset<span class="hl sym">) ? (</span><span class="hl kwb">&#64;even_mask</span> <span class="hl sym">&lt;&lt;</span> offset<span class="hl sym">) : (</span><span class="hl kwb">&#64;odd_mask</span> <span class="hl sym">&lt;&lt;</span> offset<span class="hl sym">)</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>blank_board <span class="hl sym">&amp;</span> mask <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp; !</span><span class="hl kwd">prunable</span><span class="hl sym">(</span>blank_board <span class="hl sym">|</span> mask<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">true</span><span class="hl sym">))</span> <span class="hl kwa">then</span>
        <span class="hl kwb">&#64;start_masks</span><span class="hl sym">[</span>offset<span class="hl sym">] =</span> mask
      <span class="hl kwa">else</span>
        <span class="hl kwb">&#64;start_masks</span><span class="hl sym">[</span>offset<span class="hl sym">] =</span> <span class="hl kwa">false</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">offsets</span><span class="hl sym">(</span> location<span class="hl sym">)</span>
    <span class="hl kwa">if</span> <span class="hl kwd">is_even</span><span class="hl sym">(</span> location<span class="hl sym">)</span> <span class="hl kwa">then</span>
      <span class="hl kwb">&#64;even_offsets</span><span class="hl sym">.</span>collect <span class="hl sym">{ |</span> value <span class="hl sym">|</span> value <span class="hl sym">+</span> location <span class="hl sym">}</span>
    <span class="hl kwa">else</span>
      <span class="hl kwb">&#64;odd_offsets</span><span class="hl sym">.</span>collect <span class="hl sym">{ |</span> value <span class="hl sym">|</span> value <span class="hl sym">+</span> location <span class="hl sym">}</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">normalize_offsets</span><span class="hl sym">(</span> values<span class="hl sym">,</span> min<span class="hl sym">)</span>
    even_min <span class="hl sym">=</span> <span class="hl kwd">is_even</span><span class="hl sym">(</span>min<span class="hl sym">)</span>
    other_min <span class="hl sym">=</span> even_min <span class="hl sym">?</span> min <span class="hl sym">+</span> <span class="hl num">6</span> <span class="hl sym">:</span> min <span class="hl sym">+</span> <span class="hl num">7</span>
    other_values <span class="hl sym">=</span> values<span class="hl sym">.</span>collect <span class="hl kwa">do</span> <span class="hl sym">|</span> value <span class="hl sym">|</span>
      <span class="hl kwa">if</span> <span class="hl kwd">is_even</span><span class="hl sym">(</span>value<span class="hl sym">)</span> <span class="hl kwa">then</span>
        value <span class="hl sym">+</span> <span class="hl num">6</span> <span class="hl sym">-</span> other_min
      <span class="hl kwa">else</span>
        value <span class="hl sym">+</span> <span class="hl num">7</span> <span class="hl sym">-</span> other_min
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    values<span class="hl sym">.</span>collect<span class="hl sym">! { |</span> value <span class="hl sym">|</span> value <span class="hl sym">-</span> min <span class="hl sym">}</span>

    <span class="hl kwa">if</span> even_min <span class="hl kwa">then</span>
      <span class="hl sym">[</span>values<span class="hl sym">,</span> other_values<span class="hl sym">]</span>
    <span class="hl kwa">else</span>
      <span class="hl sym">[</span>other_values<span class="hl sym">,</span> values<span class="hl sym">]</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">mask_for_offsets</span><span class="hl sym">(</span> offsets <span class="hl sym">)</span>
    mask <span class="hl sym">=</span> <span class="hl num">0</span>
    offsets<span class="hl sym">.</span>each <span class="hl sym">{ |</span> value <span class="hl sym">|</span> mask <span class="hl sym">=</span> mask <span class="hl sym">+ (</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> value <span class="hl sym">) }</span>
    mask
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">start_adjust</span><span class="hl sym">(</span> directions <span class="hl sym">)</span>
    south <span class="hl sym">=</span> east <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    directions<span class="hl sym">.</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span> direction <span class="hl sym">|</span>
      east <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl kwa">if</span> <span class="hl sym">(</span> direction <span class="hl sym">== :</span>sw <span class="hl sym">||</span> direction <span class="hl sym">== :</span>nw <span class="hl sym">||</span> direction <span class="hl sym">== :</span>west <span class="hl sym">)</span>
      south <span class="hl sym">+=</span> <span class="hl num">1</span> <span class="hl kwa">if</span> <span class="hl sym">(</span> direction <span class="hl sym">== :</span>nw <span class="hl sym">||</span> direction <span class="hl sym">== :</span>ne <span class="hl sym">)</span>
    <span class="hl kwa">end</span>
    <span class="hl sym">[</span>south<span class="hl sym">,</span> east<span class="hl sym">]</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">get_values</span> <span class="hl sym">(</span> directions <span class="hl sym">)</span>
    south<span class="hl sym">,</span> east <span class="hl sym">=</span> <span class="hl kwd">start_adjust</span><span class="hl sym">(</span>directions<span class="hl sym">)</span>
    min <span class="hl sym">=</span> start <span class="hl sym">=</span> south <span class="hl sym">*</span> <span class="hl num">6</span> <span class="hl sym">+</span> east
    values <span class="hl sym">= [</span> start <span class="hl sym">]</span>
    directions<span class="hl sym">.</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span> direction <span class="hl sym">|</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>start % <span class="hl num">12</span> <span class="hl sym">&gt;=</span> <span class="hl num">6</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
        start <span class="hl sym">+=</span> &#64;<span class="hl kwb">&#64;rotation_odd_adder</span><span class="hl sym">[</span>direction<span class="hl sym">]</span>
      <span class="hl kwa">else</span>
        start <span class="hl sym">+=</span> &#64;<span class="hl kwb">&#64;rotation_even_adder</span><span class="hl sym">[</span>direction<span class="hl sym">]</span>
      <span class="hl kwa">end</span>
      min <span class="hl sym">=</span> start <span class="hl kwa">if</span> <span class="hl sym">(</span>start <span class="hl sym">&lt;</span> min<span class="hl sym">)</span>
      values <span class="hl sym">+= [</span> start <span class="hl sym">]</span>
    <span class="hl kwa">end</span>

    <span class="hl kwa">if</span> <span class="hl sym">(</span>values<span class="hl sym">.</span>length <span class="hl sym">!=</span> <span class="hl num">5</span><span class="hl sym">)</span>
      values<span class="hl sym">.</span>uniq<span class="hl sym">!</span>
    <span class="hl kwa">end</span>

    <span class="hl sym">[</span> values<span class="hl sym">,</span> min <span class="hl sym">]</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">class</span> Piece
  attr_reader <span class="hl sym">:</span>rotations<span class="hl sym">, :</span>type<span class="hl sym">, :</span>masks
  attr_accessor <span class="hl sym">:</span>placed

  &#64;<span class="hl kwb">&#64;flip_converter</span> <span class="hl sym">= { :</span>west <span class="hl sym">=&gt; :</span>west<span class="hl sym">, :</span>east <span class="hl sym">=&gt; :</span>east<span class="hl sym">, :</span>nw <span class="hl sym">=&gt; :</span>sw<span class="hl sym">, :</span>ne <span class="hl sym">=&gt; :</span>se<span class="hl sym">, :</span>sw <span class="hl sym">=&gt; :</span>nw<span class="hl sym">, :</span>se <span class="hl sym">=&gt; :</span>ne <span class="hl sym">}</span>
  &#64;<span class="hl kwb">&#64;rotate_converter</span> <span class="hl sym">= { :</span>west <span class="hl sym">=&gt; :</span>nw<span class="hl sym">, :</span>east <span class="hl sym">=&gt; :</span>se<span class="hl sym">, :</span>nw <span class="hl sym">=&gt; :</span>ne<span class="hl sym">, :</span>ne <span class="hl sym">=&gt; :</span>east<span class="hl sym">, :</span>sw <span class="hl sym">=&gt; :</span>west<span class="hl sym">, :</span>se <span class="hl sym">=&gt; :</span>sw <span class="hl sym">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl sym">(</span> directions<span class="hl sym">,</span> type <span class="hl sym">)</span>
    <span class="hl kwb">&#64;type</span> <span class="hl sym">=</span> type
    <span class="hl kwb">&#64;rotations</span> <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">();</span>
    <span class="hl kwb">&#64;map</span> <span class="hl sym">= {}</span>
    <span class="hl kwd">generate_rotations</span><span class="hl sym">(</span> directions <span class="hl sym">)</span>
    directions<span class="hl sym">.</span>collect<span class="hl sym">! { |</span> value <span class="hl sym">|</span> &#64;<span class="hl kwb">&#64;flip_converter</span><span class="hl sym">[</span>value<span class="hl sym">] }</span>
    <span class="hl kwd">generate_rotations</span><span class="hl sym">(</span> directions <span class="hl sym">)</span>

    <span class="hl kwb">&#64;masks</span> <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">();</span>
    <span class="hl num">0</span><span class="hl sym">.</span><span class="hl kwd">upto</span><span class="hl sym">(</span><span class="hl num">59</span><span class="hl sym">)</span> <span class="hl kwa">do</span> <span class="hl sym">|</span> i <span class="hl sym">|</span>
      <span class="hl kwb">&#64;masks</span><span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwb">&#64;rotations</span><span class="hl sym">.</span>collect <span class="hl kwa">do</span> <span class="hl sym">|</span> rotation <span class="hl sym">|</span>
        mask <span class="hl sym">=</span> rotation<span class="hl sym">.</span>start_masks<span class="hl sym">[</span>i<span class="hl sym">]</span>
        <span class="hl kwb">&#64;map</span><span class="hl sym">[</span>mask<span class="hl sym">] = [</span> i<span class="hl sym">,</span> rotation <span class="hl sym">]</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>mask<span class="hl sym">)</span>
        mask <span class="hl sym">||</span> <span class="hl kwa">nil</span>
      <span class="hl kwa">end</span>
      <span class="hl kwb">&#64;masks</span><span class="hl sym">[</span>i<span class="hl sym">].</span>compact<span class="hl sym">!</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">generate_rotations</span><span class="hl sym">(</span> directions <span class="hl sym">)</span>
    <span class="hl num">6</span><span class="hl sym">.</span>times <span class="hl kwa">do</span>
      rotations<span class="hl sym">.</span><span class="hl kwd">push</span><span class="hl sym">(</span> Rotation<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span>directions<span class="hl sym">))</span>
      directions<span class="hl sym">.</span>collect<span class="hl sym">! { |</span> value <span class="hl sym">|</span> &#64;<span class="hl kwb">&#64;rotate_converter</span><span class="hl sym">[</span>value<span class="hl sym">] }</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">fill_array</span><span class="hl sym">(</span> board_array<span class="hl sym">)</span>
    location<span class="hl sym">,</span> rotation <span class="hl sym">=</span> <span class="hl kwb">&#64;map</span><span class="hl sym">[</span><span class="hl kwb">&#64;placed</span><span class="hl sym">]</span>
    rotation<span class="hl sym">.</span><span class="hl kwd">offsets</span><span class="hl sym">(</span>location<span class="hl sym">).</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span> offset <span class="hl sym">|</span>
      row<span class="hl sym">,</span> col <span class="hl sym">=</span> offset<span class="hl sym">.</span><span class="hl kwd">divmod</span><span class="hl sym">(</span><span class="hl num">6</span><span class="hl sym">)</span>
      board_array<span class="hl sym">[</span> row<span class="hl sym">*</span><span class="hl num">5</span> <span class="hl sym">+</span> col <span class="hl sym">] =</span> <span class="hl kwb">&#64;type</span><span class="hl sym">.</span>to_s
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">class</span> Processor
  attr <span class="hl sym">:</span>pieces<span class="hl sym">, :</span>board

  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl sym">()</span>
    create_collector_support
    <span class="hl kwb">&#64;pieces</span> <span class="hl sym">= [</span>
      Piece<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">( [ :</span>east<span class="hl sym">, :</span>east<span class="hl sym">, :</span>east<span class="hl sym">, :</span>se <span class="hl sym">],</span> <span class="hl num">0</span><span class="hl sym">),</span>
      Piece<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">( [ :</span>ne<span class="hl sym">, :</span>east<span class="hl sym">, :</span>ne<span class="hl sym">, :</span>nw <span class="hl sym">],</span> <span class="hl num">1</span><span class="hl sym">),</span>
      Piece<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">( [ :</span>nw<span class="hl sym">, :</span>ne<span class="hl sym">, :</span>east<span class="hl sym">, :</span>east <span class="hl sym">],</span> <span class="hl num">2</span><span class="hl sym">),</span>
      Piece<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">( [ :</span>east<span class="hl sym">, :</span>east<span class="hl sym">, :</span>sw<span class="hl sym">, :</span>se <span class="hl sym">],</span> <span class="hl num">3</span><span class="hl sym">),</span>
      Piece<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">( [ :</span>ne<span class="hl sym">, :</span>nw<span class="hl sym">, :</span>se<span class="hl sym">, :</span>east<span class="hl sym">, :</span>se <span class="hl sym">],</span> <span class="hl num">4</span><span class="hl sym">),</span>
      Piece<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">( [ :</span>east<span class="hl sym">, :</span>ne<span class="hl sym">, :</span>se<span class="hl sym">, :</span>ne <span class="hl sym">],</span> <span class="hl num">5</span><span class="hl sym">),</span>
      Piece<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">( [ :</span>east<span class="hl sym">, :</span>sw<span class="hl sym">, :</span>sw<span class="hl sym">, :</span>se <span class="hl sym">],</span> <span class="hl num">6</span><span class="hl sym">),</span>
      Piece<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">( [ :</span>ne<span class="hl sym">, :</span>se<span class="hl sym">, :</span>east<span class="hl sym">, :</span>ne <span class="hl sym">],</span> <span class="hl num">7</span><span class="hl sym">),</span>
      Piece<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">( [ :</span>se<span class="hl sym">, :</span>se<span class="hl sym">, :</span>east<span class="hl sym">, :</span>se <span class="hl sym">],</span> <span class="hl num">8</span><span class="hl sym">),</span>
      Piece<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">( [ :</span>se<span class="hl sym">, :</span>se<span class="hl sym">, :</span>se<span class="hl sym">, :</span>west <span class="hl sym">],</span> <span class="hl num">9</span><span class="hl sym">) ];</span>

    <span class="hl kwb">&#64;all_pieces</span> <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span> <span class="hl kwb">&#64;pieces</span><span class="hl sym">)</span>

    <span class="hl kwb">&#64;min_board</span> <span class="hl sym">=</span> <span class="hl str">&quot;99999999999999999999999999999999999999999999999999&quot;</span>
    <span class="hl kwb">&#64;max_board</span> <span class="hl sym">=</span> <span class="hl str">&quot;00000000000000000000000000000000000000000000000000&quot;</span>
    <span class="hl kwb">&#64;stop_count</span> <span class="hl sym">=</span> <span class="hl kwc">ARGV</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>to_i <span class="hl sym">||</span> <span class="hl num">2089</span>
    <span class="hl kwb">&#64;all_boards</span> <span class="hl sym">= {}</span>
    <span class="hl kwb">&#64;boards_found</span> <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> find_all
    <span class="hl kwd">find_top</span><span class="hl sym">(</span> <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl kwd">find_top</span><span class="hl sym">(</span> <span class="hl num">1</span><span class="hl sym">)</span>
    print_results
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> print_results
    print <span class="hl str">&quot;#{&#64;boards_found} solutions found</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span>
    <span class="hl kwd">print_full_board</span><span class="hl sym">(</span> <span class="hl kwb">&#64;min_board</span><span class="hl sym">)</span>
    print <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
    <span class="hl kwd">print_full_board</span><span class="hl sym">(</span> <span class="hl kwb">&#64;max_board</span><span class="hl sym">)</span>
    print <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">find_top</span><span class="hl sym">(</span> rotation_skip<span class="hl sym">)</span>
    board <span class="hl sym">=</span> blank_board
    <span class="hl kwb">&#64;pieces</span><span class="hl sym">.</span>length<span class="hl sym">.</span>times <span class="hl kwa">do</span>
      piece <span class="hl sym">=</span> <span class="hl kwb">&#64;pieces</span><span class="hl sym">.</span>shift
      piece<span class="hl sym">.</span>masks<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span> mask <span class="hl sym">|</span>
        <span class="hl kwa">if</span> <span class="hl sym">((</span>rotation_skip <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">)</span> % <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
          piece<span class="hl sym">.</span>placed <span class="hl sym">=</span> mask
          <span class="hl kwd">find</span><span class="hl sym">(</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> board <span class="hl sym">|</span> mask<span class="hl sym">)</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
      <span class="hl kwb">&#64;pieces</span><span class="hl sym">.</span><span class="hl kwd">push</span><span class="hl sym">(</span>piece<span class="hl sym">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">find</span><span class="hl sym">(</span> start_location<span class="hl sym">,</span> placed<span class="hl sym">,</span> board<span class="hl sym">)</span>
    <span class="hl kwa">while</span> board<span class="hl sym">[</span>start_location<span class="hl sym">] ==</span> <span class="hl num">1</span>
      start_location <span class="hl sym">+=</span> <span class="hl num">1</span>
    <span class="hl kwa">end</span>

    <span class="hl kwa">return if</span> <span class="hl sym">(</span>start_location <span class="hl sym">&lt;</span> <span class="hl num">28</span> <span class="hl sym">&amp;&amp;</span> <span class="hl kwd">prunable</span><span class="hl sym">(</span> board<span class="hl sym">,</span> start_location<span class="hl sym">))</span>

    <span class="hl kwb">&#64;pieces</span><span class="hl sym">.</span>length<span class="hl sym">.</span>times <span class="hl kwa">do</span>
      piece <span class="hl sym">=</span> <span class="hl kwb">&#64;pieces</span><span class="hl sym">.</span>shift
      piece<span class="hl sym">.</span>masks<span class="hl sym">[</span>start_location<span class="hl sym">].</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span> mask <span class="hl sym">|</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>mask <span class="hl sym">&amp;</span> board <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
          piece<span class="hl sym">.</span>placed <span class="hl sym">=</span> mask
          <span class="hl kwa">if</span> <span class="hl sym">(</span>placed <span class="hl sym">==</span> <span class="hl num">9</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
            add_board
          <span class="hl kwa">else</span>
            <span class="hl kwd">find</span><span class="hl sym">(</span> start_location <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> placed <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> board <span class="hl sym">|</span> mask<span class="hl sym">)</span>
          <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
      <span class="hl kwb">&#64;pieces</span><span class="hl sym">.</span><span class="hl kwd">push</span><span class="hl sym">(</span>piece<span class="hl sym">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">print_full_board</span><span class="hl sym">(</span> board_string<span class="hl sym">)</span>
    <span class="hl num">10</span><span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span> row <span class="hl sym">|</span>
      print <span class="hl str">&quot; &quot;</span> <span class="hl kwa">if</span> <span class="hl sym">(</span>row % <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl num">5</span><span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span> col <span class="hl sym">|</span>
        print <span class="hl str">&quot;#{board_string[row*5 + col,1]} &quot;</span>
      <span class="hl kwa">end</span>
      print <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> add_board
    board_array <span class="hl sym">=</span> Array<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl num">50</span><span class="hl sym">)</span>
    <span class="hl kwb">&#64;all_pieces</span><span class="hl sym">.</span>each <span class="hl kwa">do</span> <span class="hl sym">|</span> piece <span class="hl sym">|</span>
      piece<span class="hl sym">.</span><span class="hl kwd">fill_array</span><span class="hl sym">(</span> board_array <span class="hl sym">)</span>
    <span class="hl kwa">end</span>
    start_board <span class="hl sym">=</span> board_string <span class="hl sym">=</span> board_array<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>
    <span class="hl kwd">save</span><span class="hl sym">(</span> board_string<span class="hl sym">)</span>
    board_string <span class="hl sym">=</span> <span class="hl kwd">flip</span><span class="hl sym">(</span> board_string<span class="hl sym">)</span>
    <span class="hl kwd">save</span><span class="hl sym">(</span> board_string<span class="hl sym">)</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">flip</span><span class="hl sym">(</span> board_string<span class="hl sym">)</span>
    new_string <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span>
    <span class="hl num">50</span><span class="hl sym">.</span>times <span class="hl kwa">do</span> <span class="hl sym">|</span> i <span class="hl sym">|</span>
      row<span class="hl sym">,</span> col <span class="hl sym">=</span> i<span class="hl sym">.</span><span class="hl kwd">divmod</span><span class="hl sym">(</span><span class="hl num">5</span><span class="hl sym">)</span>
      new_string <span class="hl sym">+=</span> board_string<span class="hl sym">[((</span><span class="hl num">9</span> <span class="hl sym">-</span> row<span class="hl sym">) *</span> <span class="hl num">5</span><span class="hl sym">) + (</span><span class="hl num">4</span> <span class="hl sym">-</span> col<span class="hl sym">),</span> <span class="hl num">1</span><span class="hl sym">]</span>
    <span class="hl kwa">end</span>
    new_string
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">save</span><span class="hl sym">(</span> board_string<span class="hl sym">)</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwb">&#64;all_boards</span><span class="hl sym">[</span>board_string<span class="hl sym">] ==</span> <span class="hl kwa">nil</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
      <span class="hl kwb">&#64;min_board</span> <span class="hl sym">=</span> board_string <span class="hl kwa">if</span> <span class="hl sym">(</span>board_string <span class="hl sym">&lt;</span> <span class="hl kwb">&#64;min_board</span><span class="hl sym">)</span>
      <span class="hl kwb">&#64;max_board</span> <span class="hl sym">=</span> board_string <span class="hl kwa">if</span> <span class="hl sym">(</span>board_string <span class="hl sym">&gt;</span> <span class="hl kwb">&#64;max_board</span><span class="hl sym">)</span>
      <span class="hl kwb">&#64;all_boards</span><span class="hl sym">.</span><span class="hl kwd">store</span><span class="hl sym">(</span>board_string<span class="hl sym">,</span><span class="hl kwa">true</span><span class="hl sym">)</span>
      <span class="hl kwb">&#64;boards_found</span> <span class="hl sym">+=</span> <span class="hl num">1</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwb">&#64;boards_found</span> <span class="hl sym">==</span> <span class="hl kwb">&#64;stop_count</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
        print_results
        <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

<span class="hl kwa">end</span>

proc <span class="hl sym">=</span> Processor<span class="hl sym">.</span>new<span class="hl sym">.</span>find_all

