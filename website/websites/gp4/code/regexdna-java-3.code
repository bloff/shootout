<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Josh Goldfoot</span>
<span class="hl com">   based on the Nice entry by Isaac Guoy</span>
<span class="hl com">   modified by Chad Whipkey</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>lang<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>regex<span class="hl sym">.*;</span>

<span class="hl kwa">public class</span> regexdna <span class="hl sym">{</span>

    <span class="hl kwa">public</span> <span class="hl kwd">regexdna</span><span class="hl sym">() {</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
            <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span>
    <span class="hl sym">{</span>
        <span class="hl kwc">Reader</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">);</span>
        <span class="hl kwc">StringBuilder</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">(</span><span class="hl num">10240</span> <span class="hl sym">*</span> <span class="hl num">8</span><span class="hl sym">);</span>
        <span class="hl kwb">char</span><span class="hl sym">[]</span> cbuf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl sym">[</span><span class="hl num">10240</span><span class="hl sym">];</span>
        <span class="hl kwb">int</span> charsRead<span class="hl sym">;</span>
        <span class="hl kwa">while</span> <span class="hl sym">((</span>charsRead <span class="hl sym">=</span> r<span class="hl sym">.</span><span class="hl kwd">read</span><span class="hl sym">(</span>cbuf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">10240</span><span class="hl sym">)) != -</span><span class="hl num">1</span><span class="hl sym">)</span>
            sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>cbuf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> charsRead<span class="hl sym">);</span>
        <span class="hl kwc">String</span> sequence <span class="hl sym">=</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>

        <span class="hl kwb">int</span> initialLength <span class="hl sym">=</span> sequence<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
        <span class="hl kwb">int</span> codeLength <span class="hl sym">=</span> sequence<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>

        <span class="hl kwc">String</span><span class="hl sym">[]</span> variants <span class="hl sym">= {</span> <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span> <span class="hl sym">,</span>
                              <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
                              <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
                              <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
                              <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
                              <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
                              <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
                              <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
                              <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="hl sym">};</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">String</span> variant <span class="hl sym">:</span> variants<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwc">Matcher</span> m <span class="hl sym">=</span> <span class="hl kwc">Pattern</span><span class="hl sym">.</span><span class="hl kwd">compile</span><span class="hl sym">(</span>variant<span class="hl sym">).</span><span class="hl kwd">matcher</span><span class="hl sym">(</span>sequence<span class="hl sym">);</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>m<span class="hl sym">.</span><span class="hl kwd">find</span><span class="hl sym">())</span>
                count<span class="hl sym">++;</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>variant <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> count<span class="hl sym">);</span>
        <span class="hl sym">}</span>

        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">);</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">);</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">);</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">);</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">);</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">);</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">);</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">);</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">);</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">);</span>
        sequence <span class="hl sym">=</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">);</span>

        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">();</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>initialLength<span class="hl sym">);</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>codeLength<span class="hl sym">);</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>sequence<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">());</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwc">String</span> <span class="hl kwd">replaceAll</span><span class="hl sym">(</span><span class="hl kwc">String</span> sequence<span class="hl sym">,</span> <span class="hl kwc">String</span> search<span class="hl sym">,</span> <span class="hl kwc">String</span> replacement<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">final</span> <span class="hl kwc">Matcher</span> m <span class="hl sym">=</span> <span class="hl kwc">Pattern</span><span class="hl sym">.</span><span class="hl kwd">compile</span><span class="hl sym">(</span>search<span class="hl sym">).</span><span class="hl kwd">matcher</span><span class="hl sym">(</span>sequence<span class="hl sym">);</span>
        <span class="hl kwa">final</span> <span class="hl kwc">StringBuffer</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">(</span>sequence<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() +</span> sequence<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() /</span> <span class="hl num">10</span><span class="hl sym">);</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>m<span class="hl sym">.</span><span class="hl kwd">find</span><span class="hl sym">())</span>
            m<span class="hl sym">.</span><span class="hl kwd">appendReplacement</span><span class="hl sym">(</span>sb<span class="hl sym">,</span> replacement<span class="hl sym">);</span>
        m<span class="hl sym">.</span><span class="hl kwd">appendTail</span><span class="hl sym">(</span>sb<span class="hl sym">);</span>

        <span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
