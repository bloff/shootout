<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; Derived by Michael D. Adams from the O'Caml varient, by Christophe Papazian</span>

<span class="hl sym">(</span>import <span class="hl sym">(</span>rnrs<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>write-permutation perm<span class="hl sym">)</span>
  <span class="hl sym">(</span>vector-for-each <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>i<span class="hl sym">) (</span>write i<span class="hl sym">))</span> perm<span class="hl sym">)</span>
  <span class="hl sym">(</span>newline<span class="hl sym">))</span>

<span class="hl slc">;; Find first value where r[i] != i</span>
<span class="hl slc">;; and increment (mod j+2) all values up to that (i.e. set them to j+1)</span>
<span class="hl slc">;; returning i+2</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>choose-next r<span class="hl sym">)</span>
  <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i <span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">eq</span>? <span class="hl sym">(</span>vector-ref r i<span class="hl sym">)</span> i<span class="hl sym">)</span>
        <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">))</span>
        <span class="hl sym">(</span>let loop <span class="hl sym">((</span>j <span class="hl num">0</span><span class="hl sym">))</span>
          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">eq</span>? j i<span class="hl sym">)</span>
              <span class="hl sym">(</span>begin <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> r j <span class="hl sym">(</span>fxmod <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">(</span>vector-ref r j<span class="hl sym">)) (</span>fx<span class="hl sym">+</span> j <span class="hl num">2</span><span class="hl sym">)))</span>
                     <span class="hl sym">(</span>fx<span class="hl sym">+</span> j <span class="hl num">2</span><span class="hl sym">))</span>
              <span class="hl sym">(</span>begin <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> r j <span class="hl sym">(</span>fx<span class="hl sym">+</span> j <span class="hl num">1</span><span class="hl sym">))</span>
                     <span class="hl sym">(</span>loop <span class="hl sym">(</span>fx<span class="hl sym">+</span> j <span class="hl num">1</span><span class="hl sym">))))))))</span>

<span class="hl slc">;; Count number of &quot;pancake flips&quot; it takes to get p[0]=1</span>
<span class="hl slc">;; Does not side-effect p, uses s as a temporary</span>
<span class="hl slc">;; &quot;Pancake flip&quot; = Reverse first p[0]-1 elements</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>count-flips n p s<span class="hl sym">)</span>
  <span class="hl slc">;; Check if all p[i] != i+1</span>
  <span class="hl sym">(</span>define <span class="hl sym">(</span>check i<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(</span><span class="hl kwa">eq</span>? i n<span class="hl sym">)</span>
        <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span><span class="hl kwa">eq</span>? <span class="hl sym">(</span>vector-ref p i<span class="hl sym">) (</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
             <span class="hl sym">(</span>check <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))))</span>
  <span class="hl slc">;; If all p[i] != i+1</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>check <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>begin
        <span class="hl slc">;; set all s[i] = p[i]</span>
        <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
            <span class="hl sym">((</span><span class="hl kwa">eq</span>? i n<span class="hl sym">))</span>
          <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> s i <span class="hl sym">(</span>vector-ref p i<span class="hl sym">)))</span>
        <span class="hl slc">;; keep reversing the first s[0]-1 values of s until s[0] = 1</span>
        <span class="hl slc">;; and return number of flippings</span>
        <span class="hl sym">(</span>do <span class="hl sym">((</span>flips <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> flips <span class="hl num">1</span><span class="hl sym">))</span>
             <span class="hl sym">(</span>s0 <span class="hl sym">(</span>fx- <span class="hl sym">(</span>vector-ref s <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)</span>
                 <span class="hl sym">(</span>fx- <span class="hl sym">(</span>vector-ref s <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl num">1</span><span class="hl sym">)))</span>
            <span class="hl sym">((</span><span class="hl kwa">eq</span>? s0 <span class="hl num">0</span><span class="hl sym">)</span>
             flips<span class="hl sym">)</span>
          <span class="hl slc">;; reverse the first s[0]-1 values of s</span>
          <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span>  <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">))</span>
               <span class="hl sym">(</span>j s0 <span class="hl sym">(</span>fx- j <span class="hl num">1</span><span class="hl sym">)))</span>
              <span class="hl sym">((&gt;=</span> i j<span class="hl sym">))</span>
            <span class="hl sym">(</span>let <span class="hl sym">((</span>tmp <span class="hl sym">(</span>vector-ref s i<span class="hl sym">)))</span>
              <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> s i <span class="hl sym">(</span>vector-ref s j<span class="hl sym">))</span>
              <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> s j tmp<span class="hl sym">)))))</span>
      <span class="hl num">0</span><span class="hl sym">))</span>

<span class="hl slc">;; Build a new permutation by &quot;braiding&quot;:</span>
<span class="hl slc">;;  For every i in [1..n-1]:</span>
<span class="hl slc">;;    Shift each p[j&lt;i] down by one</span>
<span class="hl slc">;;    and put p[0] at p[i]</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>braid n p<span class="hl sym">)</span>
  <span class="hl slc">;; For every i in [1..n-1]</span>
  <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">1</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">((</span><span class="hl kwa">eq</span>? i n<span class="hl sym">))</span>
    <span class="hl slc">;; Shift each p[j] down by one</span>
    <span class="hl slc">;; and put p[0] at p[i]</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>t <span class="hl sym">(</span>vector-ref p <span class="hl num">0</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span>do <span class="hl sym">((</span>j <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> j <span class="hl num">1</span><span class="hl sym">)))</span>
          <span class="hl sym">((</span><span class="hl kwa">eq</span>? j i<span class="hl sym">))</span>
        <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> p j <span class="hl sym">(</span>vector-ref p <span class="hl sym">(</span>fx<span class="hl sym">+</span> j <span class="hl num">1</span><span class="hl sym">))))</span>
      <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> p i t<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>fannkuch n r p s m z<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>i <span class="hl sym">(</span>choose-next r<span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;</span> i n<span class="hl sym">)</span>
        m
        <span class="hl sym">(</span>begin
          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;</span> z <span class="hl num">0</span><span class="hl sym">) (</span>write-permutation p<span class="hl sym">))</span>
          <span class="hl sym">(</span>braid i p<span class="hl sym">)</span>
          <span class="hl sym">(</span>fannkuch n r p s <span class="hl sym">(</span><span class="hl kwa">max</span> m <span class="hl sym">(</span>count-flips n p s<span class="hl sym">)) (</span>fx- z <span class="hl num">1</span><span class="hl sym">))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">cadr</span> args<span class="hl sym">))))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>r <span class="hl sym">(</span>make-vector n<span class="hl sym">))</span>
          <span class="hl sym">(</span>p <span class="hl sym">(</span>make-vector n<span class="hl sym">))</span>
          <span class="hl sym">(</span>s <span class="hl sym">(</span>make-vector n <span class="hl num">0</span><span class="hl sym">)))</span>

      <span class="hl slc">;; Init r and p to [1,...,n]</span>
      <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(</span>fx<span class="hl sym">+</span> <span class="hl num">1</span> i<span class="hl sym">)))</span>
          <span class="hl sym">((</span><span class="hl kwa">eq</span>? i n<span class="hl sym">))</span>
        <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> r i <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">))</span>
        <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> p i <span class="hl sym">(</span>fx<span class="hl sym">+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>

      <span class="hl slc">;; No need to init s; it is only used as a temporary</span>

      <span class="hl sym">(</span>let <span class="hl sym">((</span>x <span class="hl sym">(</span>fannkuch n r p s <span class="hl num">0 30</span><span class="hl sym">)))</span>
        <span class="hl sym">(</span>display <span class="hl str">&quot;Pfannkuchen(&quot;</span><span class="hl sym">)(</span>display n<span class="hl sym">)(</span>display <span class="hl str">&quot;) = &quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>display x<span class="hl sym">)(</span>newline<span class="hl sym">)))))</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span><span class="hl sym">))</span>
