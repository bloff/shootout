<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- Based on version by Don Stewart</span>
<span class="slc">-- Contributed by Trevor McCort</span>
<span class="slc">--</span>
<span class="slc">-- Compile flags: -O3 -optc-O3 -fglasgow-exts -fexcess-precision</span>


<span class="kwa">import</span> System
<span class="kwa">import</span> Data.Bits
<span class="kwa">import</span> Data.Word
<span class="kwa">import</span> GHC.Base

main <span class="sym">=</span> <span class="kwa">do</span>
    w <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head

    <span class="kwa">let</span> ch <span class="sym">=</span> chr.fromIntegral
        sh <span class="sym">=</span> show $ fromEnum w
        <span class="sym">(</span>bw<span class="sym">::</span><span class="kwb">Int</span><span class="sym">) =</span> ceiling $ w <span class="sym">/</span> <span class="num">8</span>

        gb x ci b n
            <span class="sym">|</span> x <span class="sym">==</span> w    <span class="sym">=</span> ch $ b `shiftL` n
            <span class="sym">|</span> n <span class="sym">==</span> <span class="num">0</span>    <span class="sym">=</span> ch b
            <span class="sym">|</span> otherwise <span class="sym">=</span> gb <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> ci <span class="sym">(</span>b<span class="sym">+</span>b<span class="sym">+(</span>lp <span class="num">0.0 0.0 50</span> cr ci<span class="sym">)) (</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
            <span class="kwa">where</span> cr <span class="sym">=</span> x <span class="sym">*</span> <span class="num">2.0</span> <span class="sym">/</span> w <span class="sym">-</span> <span class="num">1.5</span>

        ms bx x y ci
            <span class="sym">|</span> y <span class="sym">==</span> w    <span class="sym">= []</span>
            <span class="sym">|</span> bx <span class="sym">==</span> bw  <span class="sym">=</span> gb x ci <span class="num">0 8</span> <span class="sym">:</span> ms <span class="num">1 0</span> <span class="sym">(</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">) ((</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">) *</span> <span class="num">2.0</span> <span class="sym">/</span> w <span class="sym">-</span> <span class="num">1.0</span><span class="sym">)</span>
            <span class="sym">|</span> otherwise <span class="sym">=</span> gb x ci <span class="num">0 8</span> <span class="sym">:</span> ms <span class="sym">(</span>bx<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>x<span class="sym">+</span><span class="num">8</span><span class="sym">)</span> y ci

    putStrLn <span class="sym">(</span><span class="str">&quot;P4\n&quot;</span><span class="sym">++</span>sh<span class="sym">++</span><span class="str">&quot; &quot;</span><span class="sym">++</span>sh<span class="sym">)</span>
    mapM_ putChar $ ms <span class="num">1 0 0</span> <span class="sym">(-</span><span class="num">1.0</span><span class="sym">)</span>

lp r i k cr ci <span class="sym">|</span> r2 <span class="sym">+</span> i2 <span class="sym">&gt; (</span><span class="num">4.0</span> <span class="sym">::</span> <span class="kwb">Double</span><span class="sym">) =</span> <span class="num">0</span> <span class="sym">::</span> Word32
               <span class="sym">|</span> k <span class="sym">== (</span><span class="num">0</span> <span class="sym">::</span> Word32<span class="sym">)        =</span> <span class="num">1</span>
               <span class="sym">|</span> otherwise                 <span class="sym">=</span> lp <span class="sym">(</span>r2<span class="sym">-</span>i2<span class="sym">+</span>cr<span class="sym">) ((</span>r<span class="sym">+</span>r<span class="sym">)*</span>i<span class="sym">+</span>ci<span class="sym">) (</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> cr ci
    <span class="kwa">where</span> r2 <span class="sym">=</span> r<span class="sym">*</span>r <span class="sym">;</span> i2 <span class="sym">=</span> i<span class="sym">*</span>i
