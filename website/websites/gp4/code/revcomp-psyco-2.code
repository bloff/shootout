<span class="hl slc"># The Computer Language Shootout</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc"># contributed by Jacob Lee, Steven Bethard, et al</span>
<span class="hl slc"># modified by bearophile</span>

<span class="hl kwa">import</span> string<span class="hl sym">,</span> psyco
<span class="hl kwa">from</span> sys <span class="hl kwa">import</span> stdin

<span class="hl kwa">def</span> <span class="hl kwd">show</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> table<span class="hl sym">):</span>
    seq <span class="hl sym">=</span> <span class="hl str">''</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span>seq<span class="hl sym">).</span><span class="hl kwd">translate</span><span class="hl sym">(</span>table<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)[::-</span><span class="hl num">1</span><span class="hl sym">]</span>
    result <span class="hl sym">= []</span>
    result_append <span class="hl sym">=</span> result<span class="hl sym">.</span>append
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwb">len</span><span class="hl sym">(</span>seq<span class="hl sym">),</span> <span class="hl num">60</span><span class="hl sym">):</span>
        <span class="hl kwd">result_append</span><span class="hl sym">(</span>seq<span class="hl sym">[</span>i<span class="hl sym">:</span>i<span class="hl sym">+</span><span class="hl num">60</span><span class="hl sym">])</span>
    <span class="hl kwa">if</span> result<span class="hl sym">:</span> <span class="hl kwa">print</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span>result<span class="hl sym">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl sym">():</span>
    tab <span class="hl sym">=</span> string<span class="hl sym">.</span><span class="hl kwd">maketrans</span><span class="hl sym">(</span><span class="hl str">'ACBDGHKMNSRUTWVYacbdghkmnsrutwvy'</span><span class="hl sym">,</span><span class="hl str">'TGVHCDMKNSYAAWBRTGVHCDMKNSYAAWBR'</span><span class="hl sym">)</span>
    seq <span class="hl sym">= []</span>
    add_line <span class="hl sym">=</span> seq<span class="hl sym">.</span>append
    <span class="hl kwa">for</span> line <span class="hl kwa">in</span> stdin<span class="hl sym">:</span>
        <span class="hl kwa">if</span> line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span> <span class="hl kwa">in</span> <span class="hl str">'&gt;;'</span><span class="hl sym">:</span>
            <span class="hl kwd">show</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> tab<span class="hl sym">)</span>
            <span class="hl kwa">print</span> line<span class="hl sym">,</span>
            <span class="hl kwa">del</span> seq<span class="hl sym">[:]</span>
        <span class="hl kwa">else</span><span class="hl sym">:</span>
            <span class="hl kwd">add_line</span><span class="hl sym">(</span>line<span class="hl sym">)</span>
    <span class="hl kwd">show</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> tab<span class="hl sym">)</span>

psyco<span class="hl sym">.</span><span class="hl kwd">bind</span><span class="hl sym">(</span>show<span class="hl sym">);</span> psyco<span class="hl sym">.</span><span class="hl kwd">bind</span><span class="hl sym">(</span>main<span class="hl sym">)</span>
<span class="hl kwd">main</span><span class="hl sym">()</span>
