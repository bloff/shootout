<span class="slc">#!/usr/bin/perl</span>
<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># Straightforward port of C version</span>
<span class="slc"># Contributed by Steve Clark</span>
<span class="slc"># Modified by Sokolov Yura</span>

<span class="kwa">sub</span> fannkuch <span class="sym">{</span>
    <span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">=</span> shift<span class="sym">;</span>
    <span class="kwc">my</span> <span class="kwb">&#64;p</span><span class="sym">;</span>
    <span class="kwc">my</span> <span class="kwb">&#64;q</span><span class="sym">;</span>
    <span class="kwc">my</span> <span class="kwb">$tmp</span><span class="sym">;</span>
    <span class="kwc">my</span> <span class="kwb">$maxflips</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwc">my</span> <span class="kwb">$flips</span><span class="sym">;</span>
    <span class="kwc">my</span> <span class="kwb">&#64;count</span><span class="sym">;</span>
    <span class="kwc">my</span> <span class="kwb">$r</span> <span class="sym">=</span> <span class="kwb">$n</span><span class="sym">;</span>
    <span class="kwc">my</span> <span class="kwb">$first</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {</span> <span class="kwb">$p</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">] =</span> <span class="num">1</span> <span class="sym">+</span> <span class="kwb">$i</span><span class="sym">; }</span>

  BRK<span class="sym">:</span> <span class="kwa">for</span> <span class="sym">(;;) {</span>

    	<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$first</span> <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">){</span>
    	    print <span class="kwb">&#64;p</span><span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
    	    <span class="kwb">$first</span> <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
    	<span class="sym">}</span>

        <span class="kwa">for</span> <span class="sym">(;</span> <span class="kwb">$r</span> <span class="sym">!=</span> <span class="num">1</span><span class="sym">;</span> <span class="kwb">$r</span><span class="sym">--) {</span> <span class="kwb">$count</span><span class="sym">[</span><span class="kwb">$r</span><span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> <span class="kwb">$r</span><span class="sym">; }</span>

    	<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$p</span><span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="num">1</span> <span class="sym">&amp;&amp;</span> <span class="kwb">$p</span><span class="sym">[</span><span class="kwb">$n</span><span class="sym">-</span><span class="num">1</span><span class="sym">] !=</span> <span class="kwb">$n</span><span class="sym">-</span><span class="num">1</span><span class="sym">) {</span>

    	    <span class="kwb">&#64;q</span> <span class="sym">=</span> <span class="kwb">&#64;p</span><span class="sym">;</span>
    	    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$flips</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">; (</span><span class="kwb">$k</span> <span class="sym">=</span> <span class="kwb">$q</span><span class="sym">[</span><span class="num">0</span><span class="sym">]) !=</span> <span class="num">1</span><span class="sym">;</span> <span class="kwb">$flips</span><span class="sym">++) {</span>
    	    	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$k</span><span class="sym">--,</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$k</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++,</span> <span class="kwb">$k</span><span class="sym">--) {</span>
    	    	    <span class="kwb">$tmp</span> <span class="sym">=</span> <span class="kwb">$q</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">];</span>
    	    	    <span class="kwb">$q</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">] =</span> <span class="kwb">$q</span><span class="sym">[</span><span class="kwb">$k</span><span class="sym">];</span>
    	    	    <span class="kwb">$q</span><span class="sym">[</span><span class="kwb">$k</span><span class="sym">] =</span> <span class="kwb">$tmp</span><span class="sym">;</span>
    	    	<span class="sym">}</span>
    	    <span class="sym">}</span>
    	    <span class="kwb">$maxflips</span> <span class="sym">=</span> <span class="kwb">$flips</span> <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$flips</span> <span class="sym">&gt;</span> <span class="kwb">$maxflips</span><span class="sym">);</span>
    	<span class="sym">}</span>

        PERM<span class="sym">:</span> <span class="kwa">for</span><span class="sym">(;;){</span>
            <span class="kwa">last</span> BRK <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$r</span> <span class="sym">==</span> <span class="kwb">$n</span><span class="sym">);</span>
            <span class="kwb">&#64;p</span> <span class="sym">= (</span><span class="kwb">&#64;p</span><span class="sym">[</span><span class="num">1</span>..<span class="kwb">$r</span><span class="sym">],</span><span class="kwb">$p</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span><span class="kwb">&#64;p</span><span class="sym">[</span><span class="kwb">$r</span><span class="sym">+</span><span class="num">1</span>..<span class="kwb">&#64;p</span><span class="sym">-</span><span class="num">1</span><span class="sym">]);</span>
            <span class="kwa">last</span> PERM <span class="kwa">if</span> <span class="sym">((</span><span class="kwb">$count</span><span class="sym">[</span><span class="kwb">$r</span><span class="sym">] -=</span> <span class="num">1</span><span class="sym">)&gt;</span><span class="num">0</span><span class="sym">);</span>
            <span class="kwb">$r</span> <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> <span class="kwb">$maxflips</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">my</span> <span class="kwb">$NUM</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwb">$NUM</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$NUM</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">);</span>
print <span class="str">&quot;Pfannkuchen($NUM) = &quot;</span>.<span class="kwd">fannkuch</span> <span class="sym">(</span><span class="kwb">$NUM</span><span class="sym">)</span>.<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
