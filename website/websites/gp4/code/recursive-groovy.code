<span class="slc">// ---------------------------------------------------------------------</span>
<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Use JRE 1.4 features only [JRE 1.5 'printf' would have helped better</span>
<span class="slc">// streamline code]</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Anthony Borla</span>
<span class="slc">// ---------------------------------------------------------------------</span>

import java<span class="sym">.</span>text<span class="sym">.</span>DecimalFormat

def <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
  n <span class="sym">=</span> Integer<span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]) ;</span> fmt <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">DecimalFormat</span><span class="sym">(</span><span class="str">&quot;.#&quot;</span><span class="sym">)</span>

  result <span class="sym">=</span> <span class="kwd">ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">) ;</span> println <span class="str">&quot;Ack(3,${n}): ${result}&quot;</span>

  arg <span class="sym">=</span> fmt<span class="sym">.</span><span class="kwd">format</span><span class="sym">(</span><span class="num">27.0</span> <span class="sym">+</span> n<span class="sym">) ;</span> result <span class="sym">=</span> fmt<span class="sym">.</span><span class="kwd">format</span><span class="sym">(</span><span class="kwd">fib</span><span class="sym">(</span><span class="num">27.0</span> <span class="sym">+</span> n<span class="sym">))</span>
  println <span class="str">&quot;Fib(${arg}): ${result}&quot;</span>

  n <span class="sym">-=</span> <span class="num">1</span> <span class="sym">;</span> arg1 <span class="sym">=</span> n <span class="sym">*</span> <span class="num">3</span> <span class="sym">;</span> arg2 <span class="sym">=</span> n <span class="sym">*</span> <span class="num">2</span> <span class="sym">;</span> result <span class="sym">=</span> <span class="kwd">tak</span><span class="sym">(</span>n <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> n <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">)</span>
  println <span class="str">&quot;Tak(${arg1},${arg2},${n}): ${result}&quot;</span>

  result <span class="sym">=</span> <span class="kwd">fib</span><span class="sym">(</span><span class="num">3</span><span class="sym">) ;</span> println <span class="str">&quot;Fib(3): ${result}&quot;</span>
  result <span class="sym">=</span> fmt<span class="sym">.</span><span class="kwd">format</span><span class="sym">(</span><span class="kwd">tak</span><span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">)) ;</span> println <span class="str">&quot;Tak(3.0,2.0,1.0): ${result}&quot;</span>
<span class="sym">}</span>

<span class="slc">// --------------------------------</span>

def <span class="kwd">ack</span><span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> y <span class="sym">+</span> <span class="num">1</span>
  <span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwd">ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
  <span class="kwa">return</span> <span class="kwd">ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="kwd">ack</span><span class="sym">(</span>x<span class="sym">,</span> y <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
<span class="sym">}</span>

<span class="slc">// --------------</span>

def <span class="kwd">fib</span><span class="sym">(</span>n<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">return</span> <span class="num">1</span>
  <span class="kwa">return</span> <span class="kwd">fib</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">) +</span> <span class="kwd">fib</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
<span class="sym">}</span>

<span class="slc">// --------------</span>

def <span class="kwd">tak</span><span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&lt;</span> x<span class="sym">)</span> <span class="kwa">return</span> <span class="kwd">tak</span><span class="sym">(</span><span class="kwd">tak</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> <span class="kwd">tak</span><span class="sym">(</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> <span class="kwd">tak</span><span class="sym">(</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">))</span>
  <span class="kwa">return</span> z
<span class="sym">}</span>

<span class="slc">// --------------------------------</span>

<span class="kwd">main</span><span class="sym">()</span>

