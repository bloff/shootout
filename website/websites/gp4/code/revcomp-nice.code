<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>

<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){</span>
   <span class="kwa">let</span> nv <span class="sym">=</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'Z'</span><span class="sym">);</span>
   <span class="kwa">let</span> IUB <span class="sym">=</span> fill<span class="sym">(</span><span class="kwa">new</span> <span class="kwc">String</span><span class="sym">[</span>nv<span class="sym">],</span> <span class="kwb">int</span> i <span class="sym">=&gt;</span> <span class="str">&quot;*&quot;</span><span class="sym">);</span>

   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'A'</span><span class="sym">) ] =</span> <span class="str">&quot;T&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'B'</span><span class="sym">) ] =</span> <span class="str">&quot;V&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'C'</span><span class="sym">) ] =</span> <span class="str">&quot;G&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'D'</span><span class="sym">) ] =</span> <span class="str">&quot;H&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'G'</span><span class="sym">) ] =</span> <span class="str">&quot;C&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'H'</span><span class="sym">) ] =</span> <span class="str">&quot;D&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'K'</span><span class="sym">) ] =</span> <span class="str">&quot;M&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'M'</span><span class="sym">) ] =</span> <span class="str">&quot;K&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'N'</span><span class="sym">) ] =</span> <span class="str">&quot;N&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'R'</span><span class="sym">) ] =</span> <span class="str">&quot;Y&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'S'</span><span class="sym">) ] =</span> <span class="str">&quot;S&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'T'</span><span class="sym">) ] =</span> <span class="str">&quot;A&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'V'</span><span class="sym">) ] =</span> <span class="str">&quot;B&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'W'</span><span class="sym">) ] =</span> <span class="str">&quot;W&quot;</span><span class="sym">;</span>
   IUB<span class="sym">[</span> <span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span><span class="str">'Y'</span><span class="sym">) ] =</span> <span class="str">&quot;R&quot;</span><span class="sym">;</span>


   <span class="kwb">void</span> writeReverseFasta<span class="sym">(</span><span class="kwc">String</span> desc<span class="sym">,</span> <span class="kwc">StringBuffer</span> b<span class="sym">,</span> <span class="kwc">BufferedWriter</span> w<span class="sym">) {</span>
      <span class="kwa">let</span> lineLength <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
      w<span class="sym">.</span>write<span class="sym">(</span>desc <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

      var i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> var m <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">let</span> n <span class="sym">=</span> b<span class="sym">.</span>length<span class="sym">;</span>
      var j <span class="sym">=</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;=</span> n<span class="sym">){</span>
         m <span class="sym">+=</span> lineLength<span class="sym">;</span>
         <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> m<span class="sym">)</span> m <span class="sym">=</span> n<span class="sym">;</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;=</span> m<span class="sym">){</span>
            w<span class="sym">.</span>write<span class="sym">(</span> IUB<span class="sym">[</span><span class="kwc">Character</span><span class="sym">.</span>getNumericValue<span class="sym">(</span> b<span class="sym">.</span>charAt<span class="sym">(</span>j<span class="sym">--) )] );</span>
            i<span class="sym">++;</span>
         <span class="sym">}</span>
         w<span class="sym">.</span>write<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwa">let</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));</span>
   <span class="kwa">let</span> w <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedWriter</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">OutputStreamWriter</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>out<span class="sym">));</span>

   <span class="kwa">let</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span>
   var desc <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span>
   var ?<span class="kwc">String</span> line<span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> r<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">){</span>
      <span class="kwa">let</span> c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
      <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">){</span>
         <span class="kwa">if</span> <span class="sym">(</span>desc<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
            writeReverseFasta<span class="sym">(</span>desc<span class="sym">,</span> buffer<span class="sym">,</span> w<span class="sym">);</span>
            buffer<span class="sym">.</span>setLength<span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
         <span class="sym">}</span>
         desc <span class="sym">=</span> line<span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">else if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">){</span>
         buffer<span class="sym">.</span>append<span class="sym">(</span>line<span class="sym">);</span>
      <span class="sym">}</span>

   <span class="sym">}</span>
   r<span class="sym">.</span>close<span class="sym">;</span>

   <span class="kwa">if</span> <span class="sym">(</span>desc<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> writeReverseFasta<span class="sym">(</span>desc<span class="sym">,</span> buffer<span class="sym">,</span> w<span class="sym">);</span>
   w<span class="sym">.</span>close<span class="sym">;</span>
<span class="sym">}</span>
