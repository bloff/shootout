<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy, following Alkis Evlogimenos' Java program</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;</span>

<span class="kwb">int</span> nsievebits<span class="sym">(</span><span class="kwb">int</span> m<span class="sym">,</span> <span class="kwc">BitSet</span> flags<span class="sym">){</span>
   flags<span class="sym">.</span>set<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> m<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
   var count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   <span class="kwa">for</span><span class="sym">(</span>var i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;=</span> m<span class="sym">;</span> i<span class="sym">++){</span>
      <span class="kwa">if</span> <span class="sym">(</span>flags<span class="sym">.</span>get<span class="sym">(</span>i<span class="sym">)){</span>
         <span class="kwa">for</span><span class="sym">(</span>var k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> k <span class="sym">&lt;=</span> m<span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">)</span> flags<span class="sym">.</span>clear<span class="sym">(</span>k<span class="sym">);</span>
         count<span class="sym">++;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwa">return</span> count<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){</span>
   var n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
   <span class="kwa">if</span> <span class="sym">(</span>n<span class="sym">&lt;</span><span class="num">2</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>

   var m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
   <span class="kwa">let</span> flags <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BitSet</span><span class="sym">(</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
   println<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span> <span class="sym">+</span>  pad<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">) +</span> pad<span class="sym">(</span>nsievebits<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">),</span><span class="num">9</span><span class="sym">) );</span>

   m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
   println<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span> <span class="sym">+</span>  pad<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">) +</span> pad<span class="sym">(</span>nsievebits<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">),</span><span class="num">9</span><span class="sym">) );</span>

   m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
   println<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span> <span class="sym">+</span>  pad<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">) +</span> pad<span class="sym">(</span>nsievebits<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">),</span><span class="num">9</span><span class="sym">) );</span>
<span class="sym">}</span>

<span class="kwc">String</span> pad<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> width<span class="sym">){</span>
   var s <span class="sym">=</span> i<span class="sym">.</span>toString<span class="sym">;</span>
   var p <span class="sym">=</span> width <span class="sym">-</span> s<span class="sym">.</span>length<span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span>p<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)</span> s <span class="sym">=</span> <span class="str">' '</span> <span class="sym">+</span> s<span class="sym">;</span>
   <span class="kwa">return</span> s<span class="sym">;</span>
<span class="sym">}</span>
