<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Ian Osgood */</span>

<span class="kwa">function</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">) {</span>
   <span class="kwa">var</span> perm <span class="sym">=</span> <span class="kwc">Array</span><span class="sym">(</span>n<span class="sym">);</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> perm<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>

   <span class="kwa">var</span> r <span class="sym">=</span> n<span class="sym">;</span>
   <span class="kwa">var</span> counts <span class="sym">=</span> <span class="kwc">Array</span><span class="sym">(</span>n<span class="sym">);</span>

   <span class="kwa">var</span> m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">var</span> maxFlipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">var</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   <span class="kwa">do</span> <span class="sym">{</span>
      <span class="slc">// eliminate known bad pans</span>
      <span class="kwa">if</span> <span class="sym">(</span>perm<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="num">1</span> <span class="sym">&amp;&amp;</span> perm<span class="sym">[</span>m<span class="sym">] !=</span> n<span class="sym">) {</span>
         <span class="slc">// pour the batter</span>
         <span class="kwa">var</span> pan <span class="sym">=</span> perm<span class="sym">.</span><span class="kwc">slice</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
         <span class="kwa">var</span> i<span class="sym">,</span> j<span class="sym">,</span> flipsCount<span class="sym">;</span>

         <span class="slc">// flip the pancakes</span>
         <span class="kwa">for</span> <span class="sym">(</span>flipsCount<span class="sym">=</span><span class="num">0</span><span class="sym">; (</span>j <span class="sym">=</span> pan<span class="sym">[</span><span class="num">0</span><span class="sym">]) &gt;</span> <span class="num">1</span><span class="sym">;</span> flipsCount<span class="sym">++) {</span>
            <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">, --</span>j<span class="sym">;</span> i <span class="sym">&lt;</span> j<span class="sym">;</span> i<span class="sym">++,</span> j<span class="sym">--) {</span>
               <span class="kwa">var</span> t <span class="sym">=</span> pan<span class="sym">[</span>i<span class="sym">];</span> pan<span class="sym">[</span>i<span class="sym">] =</span> pan<span class="sym">[</span>j<span class="sym">];</span> pan<span class="sym">[</span>j<span class="sym">] =</span> t<span class="sym">;</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
         <span class="kwa">if</span> <span class="sym">(</span>flipsCount <span class="sym">&gt;</span> maxFlipsCount<span class="sym">)</span> maxFlipsCount <span class="sym">=</span> flipsCount<span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>count <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">) {</span> <span class="kwc">print</span><span class="sym">(</span>perm<span class="sym">.</span><span class="kwc">join</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">)); ++</span>count<span class="sym">; }</span>

      <span class="kwa">for</span> <span class="sym">( ;</span> r<span class="sym">&gt;</span><span class="num">1</span><span class="sym">;</span> r<span class="sym">--)</span> counts<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">( ;</span> r<span class="sym">&lt;</span>n<span class="sym">;</span> r<span class="sym">++) {</span>
         <span class="slc">// -roll(r)</span>
         perm<span class="sym">.</span><span class="kwd">splice</span><span class="sym">(</span>r<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> perm<span class="sym">.</span><span class="kwd">shift</span><span class="sym">());</span>

         <span class="slc">// simulated recursion</span>
         <span class="kwa">if</span> <span class="sym">(--</span>counts<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>r <span class="sym">&lt;</span> n<span class="sym">);</span>

   <span class="kwa">return</span> maxFlipsCount<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;) = &quot;</span> <span class="sym">+</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">));</span>
