<span class="com">(* reverse-complement.ml</span>
<span class="com"> *</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Troestler Christophe</span>
<span class="com"> *)</span>


<span class="kwa">let</span> complement <span class="sym">=</span>
  <span class="kwa">let</span> cplt <span class="sym">=</span> Array.init <span class="kwd">256</span> <span class="sym">(</span><span class="kwa">fun</span> i <span class="sym">-&gt;</span> Char.chr i<span class="sym">)</span> <span class="kwa">in</span>
  List.<span class="kwd">iter</span> <span class="sym">(</span><span class="kwa">fun</span> <span class="sym">(</span>c1<span class="sym">,</span> c2<span class="sym">) -&gt;</span>
	       cplt.<span class="sym">(</span>Char.code c1<span class="sym">) &lt;-</span> c2<span class="sym">;</span>
	       cplt.<span class="sym">(</span>Char.code c2<span class="sym">) &lt;-</span> c1<span class="sym">;</span>
	       cplt.<span class="sym">(</span>Char.<span class="kwd">code</span><span class="sym">(</span>Char.lowercase c1<span class="sym">)) &lt;-</span> c2<span class="sym">;</span>
	       cplt.<span class="sym">(</span>Char.<span class="kwd">code</span><span class="sym">(</span>Char.lowercase c2<span class="sym">)) &lt;-</span> c1<span class="sym">;  )</span>
    <span class="sym">[ (</span>'A'<span class="sym">,</span>'T'<span class="sym">); (</span>'C'<span class="sym">,</span>'G'<span class="sym">); (</span>'B'<span class="sym">,</span>'V'<span class="sym">); (</span>'D'<span class="sym">,</span>'H'<span class="sym">); (</span>'K'<span class="sym">,</span>'M'<span class="sym">); (</span>'R'<span class="sym">,</span>'Y'<span class="sym">) ];</span>
  cplt

<span class="com">(* [reverse s] reverse-complement the string [s] in place. *)</span>
<span class="kwa">let</span> reverse s <span class="sym">=</span>
  <span class="kwa">let rec</span> rev i j <span class="sym">=</span>
    <span class="kwa">if</span> i <span class="sym">&lt;</span> j <span class="kwa">then</span> <span class="sym">(</span>
      <span class="kwa">let</span> si <span class="sym">=</span> s.<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">in</span>
      s.<span class="sym">[</span>i<span class="sym">] &lt;-</span> complement.<span class="sym">(</span>Char.code s.<span class="sym">[</span>j<span class="sym">]);</span>
      s.<span class="sym">[</span>j<span class="sym">] &lt;-</span> complement.<span class="sym">(</span>Char.code si<span class="sym">);</span>
      <span class="kwd">rev</span> <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span>j <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
    <span class="sym">)</span> <span class="kwa">in</span>
  rev <span class="kwd">0</span> <span class="sym">(</span>String.length s <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
  s

<span class="kwa">let</span> print_fasta <span class="sym">=</span>
  <span class="kwa">let rec</span> print60 pos len dna <span class="sym">=</span>
    <span class="kwa">if</span> len <span class="sym">&gt;</span> <span class="num">60</span> <span class="kwa">then</span> <span class="sym">(</span>
      output stdout dna pos <span class="num">60</span><span class="sym">;</span> print_string <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
      <span class="kwd">print60</span> <span class="sym">(</span>pos <span class="sym">+</span> <span class="num">60</span><span class="sym">) (</span>len <span class="sym">-</span> <span class="num">60</span><span class="sym">)</span> dna
    <span class="sym">)</span>
    <span class="kwa">else</span> <span class="sym">(</span>output stdout dna pos len<span class="sym">;</span> print_string <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">fun</span> dna <span class="sym">-&gt;</span> print60 <span class="kwd">0</span> <span class="sym">(</span>String.length dna<span class="sym">)</span> dna


<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> buf <span class="sym">=</span> Buffer.create <span class="num">4096</span> <span class="kwa">in</span>
  <span class="kwa">try while true do</span>
    <span class="kwa">let</span> line <span class="sym">=</span> input_line stdin <span class="kwa">in</span>
    <span class="kwa">if</span> String.length line <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> line.<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> '<span class="sym">&gt;</span>' <span class="kwa">then</span> <span class="sym">(</span>
      <span class="kwa">if</span> Buffer.length buf <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="kwd">print_fasta</span><span class="sym">(</span><span class="kwd">reverse</span><span class="sym">(</span>Buffer.contents buf<span class="sym">));</span>
      Buffer.clear buf<span class="sym">;</span>
      print_endline line
    <span class="sym">)</span>
    <span class="kwa">else</span> Buffer.add_string buf line
  <span class="kwa">done with</span> End_of_file <span class="sym">-&gt;</span> <span class="kwd">print_fasta</span><span class="sym">(</span><span class="kwd">reverse</span><span class="sym">(</span>Buffer.contents buf<span class="sym">))</span>

