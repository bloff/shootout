<span class="hl com">(* reverse-complement.ml</span>
<span class="hl com"> *</span>
<span class="hl com"> * The Great Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Troestler Christophe</span>
<span class="hl com"> *)</span>


<span class="hl kwa">let</span> complement <span class="hl sym">=</span>
  <span class="hl kwa">let</span> cplt <span class="hl sym">=</span> Array.init <span class="hl kwd">256</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> i <span class="hl sym">-&gt;</span> Char.chr i<span class="hl sym">)</span> <span class="hl kwa">in</span>
  List.<span class="hl kwd">iter</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> <span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">) -&gt;</span>
	       cplt.<span class="hl sym">(</span>Char.code c1<span class="hl sym">) &lt;-</span> c2<span class="hl sym">;</span>
	       cplt.<span class="hl sym">(</span>Char.code c2<span class="hl sym">) &lt;-</span> c1<span class="hl sym">;</span>
	       cplt.<span class="hl sym">(</span>Char.<span class="hl kwd">code</span><span class="hl sym">(</span>Char.lowercase c1<span class="hl sym">)) &lt;-</span> c2<span class="hl sym">;</span>
	       cplt.<span class="hl sym">(</span>Char.<span class="hl kwd">code</span><span class="hl sym">(</span>Char.lowercase c2<span class="hl sym">)) &lt;-</span> c1<span class="hl sym">;  )</span>
    <span class="hl sym">[ (</span><span class="hl str">'A'</span><span class="hl sym">,</span><span class="hl str">'T'</span><span class="hl sym">); (</span><span class="hl str">'C'</span><span class="hl sym">,</span><span class="hl str">'G'</span><span class="hl sym">); (</span><span class="hl str">'B'</span><span class="hl sym">,</span><span class="hl str">'V'</span><span class="hl sym">); (</span><span class="hl str">'D'</span><span class="hl sym">,</span><span class="hl str">'H'</span><span class="hl sym">); (</span><span class="hl str">'K'</span><span class="hl sym">,</span><span class="hl str">'M'</span><span class="hl sym">); (</span><span class="hl str">'R'</span><span class="hl sym">,</span><span class="hl str">'Y'</span><span class="hl sym">) ];</span>
  cplt

<span class="hl com">(* [reverse s] reverse-complement the string [s] in place. *)</span>
<span class="hl kwa">let</span> reverse s <span class="hl sym">=</span>
  <span class="hl kwa">let rec</span> rev i j <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> j <span class="hl kwa">then</span> <span class="hl sym">(</span>
      <span class="hl kwa">let</span> si <span class="hl sym">=</span> s.<span class="hl sym">[</span>i<span class="hl sym">]</span> <span class="hl kwa">in</span>
      s.<span class="hl sym">[</span>i<span class="hl sym">] &lt;-</span> complement.<span class="hl sym">(</span>Char.code s.<span class="hl sym">[</span>j<span class="hl sym">]);</span>
      s.<span class="hl sym">[</span>j<span class="hl sym">] &lt;-</span> complement.<span class="hl sym">(</span>Char.code si<span class="hl sym">);</span>
      <span class="hl kwd">rev</span> <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) (</span>j <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">)</span> <span class="hl kwa">in</span>
  rev <span class="hl kwd">0</span> <span class="hl sym">(</span>String.length s <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
  s

<span class="hl kwa">let</span> print_fasta <span class="hl sym">=</span>
  <span class="hl kwa">let rec</span> print60 pos len dna <span class="hl sym">=</span>
    <span class="hl kwa">if</span> len <span class="hl sym">&gt;</span> <span class="hl num">60</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>
      output stdout dna pos <span class="hl num">60</span><span class="hl sym">;</span> print_string <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
      <span class="hl kwd">print60</span> <span class="hl sym">(</span>pos <span class="hl sym">+</span> <span class="hl num">60</span><span class="hl sym">) (</span>len <span class="hl sym">-</span> <span class="hl num">60</span><span class="hl sym">)</span> dna
    <span class="hl sym">)</span>
    <span class="hl kwa">else</span> <span class="hl sym">(</span>output stdout dna pos len<span class="hl sym">;</span> print_string <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">fun</span> dna <span class="hl sym">-&gt;</span> print60 <span class="hl kwd">0</span> <span class="hl sym">(</span>String.length dna<span class="hl sym">)</span> dna


<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> buf <span class="hl sym">=</span> Buffer.create <span class="hl num">4096</span> <span class="hl kwa">in</span>
  <span class="hl kwa">try while true do</span>
    <span class="hl kwa">let</span> line <span class="hl sym">=</span> input_line stdin <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> String.length line <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp;</span> line.<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl str">'&gt;'</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>
      <span class="hl kwa">if</span> Buffer.length buf <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwd">print_fasta</span><span class="hl sym">(</span><span class="hl kwd">reverse</span><span class="hl sym">(</span>Buffer.contents buf<span class="hl sym">));</span>
      Buffer.clear buf<span class="hl sym">;</span>
      print_endline line
    <span class="hl sym">)</span>
    <span class="hl kwa">else</span> Buffer.add_string buf line
  <span class="hl kwa">done with</span> End_of_file <span class="hl sym">-&gt;</span> <span class="hl kwd">print_fasta</span><span class="hl sym">(</span><span class="hl kwd">reverse</span><span class="hl sym">(</span>Buffer.contents buf<span class="hl sym">))</span>

