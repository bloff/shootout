<span class="com">{-# OPTIONS -optc-O #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Christoph Bauer</span>
<span class="slc">-- Written in Haskell by Chris Kuklewicz, further tweaks by Don Stewart</span>
<span class="slc">--</span>
<span class="slc">-- -O2 -optc-O -fglasgow-exts -fexcess-precision -optc-ffast-math</span>
<span class="slc">--</span>
<span class="slc">-- -optc-O3 cannot be used, as at least one version of gcc miscompiles this program</span>
<span class="slc">--</span>

<span class="kwa">import</span> System
<span class="kwa">import</span> System.IO.Unsafe
<span class="kwa">import</span> Monad
<span class="kwa">import</span> Data.Bits
<span class="kwa">import</span> Data.List
<span class="kwa">import</span> Data.Array.IO
<span class="kwa">import</span> Data.Array.Base<span class="sym">(</span>unsafeRead<span class="sym">,</span>unsafeWrite<span class="sym">)</span>
<span class="kwa">import</span> Text.Printf

<span class="kwa">default</span> <span class="sym">(</span><span class="kwb">Int</span><span class="sym">)</span>

main <span class="sym">=</span> <span class="kwa">do</span> n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head
          offsetMomentum
          energy <span class="sym">&gt;&gt;=</span> printf <span class="str">&quot;%.9f\n&quot;</span>
          advance n
          energy <span class="sym">&gt;&gt;=</span> printf <span class="str">&quot;%.9f\n&quot;</span>

<span class="slc">-- Offsets for each field</span>
x <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> z <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> vx<span class="sym">=</span> <span class="num">3</span><span class="sym">;</span> vy<span class="sym">=</span> <span class="num">4</span><span class="sym">;</span> vz<span class="sym">=</span> <span class="num">5</span><span class="sym">;</span> m <span class="sym">=</span> <span class="num">6</span>

<span class="kwa">type</span> Bodies <span class="sym">=</span> IOUArray <span class="kwb">Int Double</span>

b <span class="sym">::</span> Bodies <span class="sym">=</span> unsafePerformIO $ newListArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>pred <span class="sym">(</span>length bodiesData<span class="sym">)) (</span>bodiesData<span class="sym">)</span>
<span class="com">{-# NOINLINE b #-}</span>

set <span class="sym">=</span> unsafeWrite b
<span class="com">{-# INLINE set #-}</span>

resetB <span class="sym">=</span> mapM_ <span class="sym">(</span>uncurry set<span class="sym">) (</span>zip <span class="sym">[</span><span class="num">0</span>..<span class="sym">]</span> bodiesData<span class="sym">)</span>

<span class="slc">-- sun jupiter saturn uranus neptune</span>
<span class="slc">-- sun starts at center at rest</span>
bodiesData <span class="sym">=</span>  concat <span class="sym">[</span> mkB <span class="num">1 0 0 0 0 0 0</span>
   <span class="sym">,</span>mkB <span class="num">9.54791938424326609e-04</span>
        <span class="num">4.84143144246472090e+00</span>  <span class="sym">(-</span><span class="num">1.16032004402742839e+00</span><span class="sym">) (-</span><span class="num">1.03622044471123109e-01</span><span class="sym">)</span>
      <span class="sym">(</span> <span class="num">1.66007664274403694e-03</span><span class="sym">) (</span> <span class="num">7.69901118419740425e-03</span><span class="sym">) (-</span><span class="num">6.90460016972063023e-05</span><span class="sym">)</span>
   <span class="sym">,</span>mkB <span class="num">2.85885980666130812e-04</span>
        <span class="num">8.34336671824457987e+00    4.12479856412430479e+00</span>  <span class="sym">(-</span><span class="num">4.03523417114321381e-01</span><span class="sym">)</span>
      <span class="sym">(-</span><span class="num">2.76742510726862411e-03</span><span class="sym">) (</span> <span class="num">4.99852801234917238e-03</span><span class="sym">) (</span> <span class="num">2.30417297573763929e-05</span><span class="sym">)</span>
   <span class="sym">,</span>mkB <span class="num">4.36624404335156298e-05</span>
        <span class="num">1.28943695621391310e+01</span>  <span class="sym">(-</span><span class="num">1.51111514016986312e+01</span><span class="sym">) (-</span><span class="num">2.23307578892655734e-01</span><span class="sym">)</span>
      <span class="sym">(</span> <span class="num">2.96460137564761618e-03</span><span class="sym">) (</span> <span class="num">2.37847173959480950e-03</span><span class="sym">) (-</span><span class="num">2.96589568540237556e-05</span><span class="sym">)</span>
   <span class="sym">,</span>mkB <span class="num">5.15138902046611451e-05</span>
        <span class="num">1.53796971148509165e+01</span>  <span class="sym">(-</span><span class="num">2.59193146099879641e+01</span><span class="sym">)</span>   <span class="num">1.79258772950371181e-01</span>
      <span class="sym">(</span> <span class="num">2.68067772490389322e-03</span><span class="sym">) (</span> <span class="num">1.62824170038242295e-03</span><span class="sym">) (-</span><span class="num">9.51592254519715870e-05</span><span class="sym">)]</span>

mkB m x y z vx vy vz <span class="sym">=</span>
    <span class="sym">[</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">,</span> vx<span class="sym">*</span>days_per_year<span class="sym">,</span>vy<span class="sym">*</span>days_per_year<span class="sym">,</span> vz<span class="sym">*</span>days_per_year<span class="sym">,</span> m<span class="sym">*</span>solar_mass<span class="sym">,</span> <span class="num">0</span><span class="sym">]</span>

solar_mass    <span class="sym">=</span> <span class="num">4</span> <span class="sym">*</span> pi <span class="sym">*</span> pi
days_per_year <span class="sym">=</span> <span class="num">365.24</span>
nbodies       <span class="sym">=</span> <span class="num">4</span> <span class="slc">-- that is 0 to 4</span>

mass i <span class="sym">=</span> unsafeRead b <span class="sym">(</span>massOffset .<span class="sym">|</span>. <span class="sym">(</span>shiftL i <span class="num">3</span><span class="sym">))</span> <span class="kwa">where</span> massOffset <span class="sym">=</span> <span class="num">6</span>

<span class="slc">-- Give the sun a small velocity so the total momentum of all bodies totals to zero</span>
offsetMomentum <span class="sym">::</span> IO <span class="sym">()</span>
offsetMomentum <span class="sym">=</span> <span class="kwa">do</span> sm <span class="sym">&lt;-</span> mass <span class="num">0</span>
                    <span class="kwa">let</span> act i <span class="sym">=</span> mass i <span class="sym">&gt;&gt;=</span> \m <span class="sym">-&gt;</span> addScaled <span class="num">3</span> <span class="sym">(-</span>m<span class="sym">/</span>sm<span class="sym">) (</span><span class="num">3</span> .<span class="sym">|</span>. <span class="sym">(</span>shiftL i <span class="num">3</span><span class="sym">))</span>
                    mapM_ act <span class="sym">[</span><span class="num">1</span>..nbodies<span class="sym">]</span>

<span class="slc">-- Total all kineticE and potentialE</span>
energy <span class="sym">=</span> loop <span class="num">0 0</span>
  <span class="kwa">where</span> loop i e <span class="sym">|</span> i <span class="sym">&gt;</span> nbodies <span class="sym">=</span> return e
                 <span class="sym">|</span> otherwise   <span class="sym">=</span> <span class="kwa">do</span> ke <span class="sym">&lt;-</span> kineticE i
                                    <span class="sym">(</span>loop' <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> i $<span class="sym">! (</span>e<span class="sym">+</span>ke<span class="sym">)) &gt;&gt;=</span> loop <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
        loop' j i e <span class="sym">|</span> j <span class="sym">&gt;</span> nbodies <span class="sym">=</span> return e
                    <span class="sym">|</span> otherwise   <span class="sym">=</span> <span class="kwa">do</span> pe <span class="sym">&lt;-</span> potentialE i j
                                       loop' <span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> i $<span class="sym">! (</span>e <span class="sym">+</span> pe<span class="sym">)</span>

kineticE i <span class="sym">=</span> <span class="kwa">let</span> i' <span class="sym">= (</span>.<span class="sym">|</span>. <span class="sym">(</span>shiftL i <span class="num">3</span><span class="sym">))</span>
             <span class="kwa">in do</span> m <span class="sym">&lt;-</span> mass i
                   vx <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>i' vx<span class="sym">)</span>
                   vy <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>i' vy<span class="sym">)</span>
                   vz <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>i' vz<span class="sym">)</span>
                   return $<span class="sym">!</span> <span class="num">0.5</span> <span class="sym">*</span> m <span class="sym">* (</span>vx<span class="sym">*</span>vx <span class="sym">+</span> vy<span class="sym">*</span>vy <span class="sym">+</span> vz<span class="sym">*</span>vz<span class="sym">)</span>

potentialE i j <span class="sym">=</span> <span class="kwa">do</span>
    m1 <span class="sym">&lt;-</span> mass i
    m2 <span class="sym">&lt;-</span> mass j
    <span class="kwa">let</span> <span class="sym">(</span>i'<span class="sym">,</span> j'<span class="sym">) = ((</span>.<span class="sym">|</span>. <span class="sym">(</span>shiftL i <span class="num">3</span><span class="sym">)), (</span>.<span class="sym">|</span>. <span class="sym">(</span>shiftL j <span class="num">3</span><span class="sym">)))</span>
    dx <span class="sym">&lt;-</span> liftM2 <span class="sym">(-) (</span>unsafeRead b <span class="sym">(</span>i' x<span class="sym">)) (</span>unsafeRead b <span class="sym">(</span>j' x<span class="sym">))</span>
    dy <span class="sym">&lt;-</span> liftM2 <span class="sym">(-) (</span>unsafeRead b <span class="sym">(</span>i' y<span class="sym">)) (</span>unsafeRead b <span class="sym">(</span>j' y<span class="sym">))</span>
    dz <span class="sym">&lt;-</span> liftM2 <span class="sym">(-) (</span>unsafeRead b <span class="sym">(</span>i' z<span class="sym">)) (</span>unsafeRead b <span class="sym">(</span>j' z<span class="sym">))</span>
    return $<span class="sym">! ((-</span><span class="num">1</span><span class="sym">)*</span>m1<span class="sym">*</span>m2<span class="sym">/</span>sqrt <span class="sym">(</span>dx<span class="sym">*</span>dx <span class="sym">+</span> dy<span class="sym">*</span>dy <span class="sym">+</span> dz<span class="sym">*</span>dz<span class="sym">))</span>

addScaled i a j <span class="sym">|</span> i `seq` a `seq` j `seq` <span class="kwa">False</span> <span class="sym">=</span> undefined <span class="slc">-- stricitfy</span>
addScaled i a j <span class="sym">=</span> <span class="kwa">do</span> set i1 <span class="sym">=&lt;&lt;</span> liftM2 scale <span class="sym">(</span>unsafeRead b i1<span class="sym">) (</span>unsafeRead b j1<span class="sym">)</span>
                     set i2 <span class="sym">=&lt;&lt;</span> liftM2 scale <span class="sym">(</span>unsafeRead b i2<span class="sym">) (</span>unsafeRead b j2<span class="sym">)</span>
                     set i3 <span class="sym">=&lt;&lt;</span> liftM2 scale <span class="sym">(</span>unsafeRead b i3<span class="sym">) (</span>unsafeRead b j3<span class="sym">)</span>
    <span class="kwa">where</span> scale old new <span class="sym">=</span> old <span class="sym">+</span> a <span class="sym">*</span> new
          i1 <span class="sym">=</span> i<span class="sym">;</span> i2 <span class="sym">=</span> succ i1<span class="sym">;</span> i3 <span class="sym">=</span> succ i2<span class="sym">;</span>
          j1 <span class="sym">=</span> j<span class="sym">;</span> j2 <span class="sym">=</span> succ j1<span class="sym">;</span> j3 <span class="sym">=</span> succ j2<span class="sym">;</span>

addScaled3 i a jx jy jz <span class="sym">|</span> i `seq` a `seq` jx `seq` jy `seq` jz `seq` <span class="kwa">False</span> <span class="sym">=</span> undefined
addScaled3 i a jx jy jz <span class="sym">=</span> <span class="kwa">do</span> set i1 <span class="sym">=&lt;&lt;</span> liftM <span class="sym">(</span>scale jx<span class="sym">) (</span>unsafeRead b i1<span class="sym">)</span>
                             set i2 <span class="sym">=&lt;&lt;</span> liftM <span class="sym">(</span>scale jy<span class="sym">) (</span>unsafeRead b i2<span class="sym">)</span>
                             set i3 <span class="sym">=&lt;&lt;</span> liftM <span class="sym">(</span>scale jz<span class="sym">) (</span>unsafeRead b i3<span class="sym">)</span>
    <span class="kwa">where</span> scale new old <span class="sym">=</span> a <span class="sym">*</span> new <span class="sym">+</span> old
          i1 <span class="sym">=</span> i<span class="sym">;</span> i2 <span class="sym">=</span> succ i1<span class="sym">;</span> i3 <span class="sym">=</span> succ i2<span class="sym">;</span>

<span class="slc">-- This is the main code. Essentially all the time is spent here</span>
advance n <span class="sym">=</span> when <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> $ updateVel <span class="num">0</span> <span class="sym">&gt;&gt;</span> advance <span class="sym">(</span>pred n<span class="sym">)</span>

  <span class="kwa">where</span> updateVel i <span class="sym">=</span> when <span class="sym">(</span>i <span class="sym">&lt;=</span> nbodies<span class="sym">)</span> $ <span class="kwa">do</span>
            <span class="kwa">let</span> i' <span class="sym">= (</span>.<span class="sym">|</span>. shift i <span class="num">3</span><span class="sym">)</span>
            im  <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>i' m<span class="sym">)</span>
            ix  <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>i' x<span class="sym">)</span>
            iy  <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>i' y<span class="sym">)</span>
            iz  <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>i' z<span class="sym">)</span>
            ivx <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>i' vx<span class="sym">)</span>
            ivy <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>i' vy<span class="sym">)</span>
            ivz <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>i' vz<span class="sym">)</span>

            <span class="kwa">let</span> updateVel' ivx ivy ivz j <span class="sym">=</span>  ivx `seq` ivy `seq` ivz `seq`
                  if j <span class="sym">&gt;</span> nbodies <span class="kwa">then do</span>
                    unsafeWrite b <span class="sym">(</span>i' vx<span class="sym">)</span> ivx
                    unsafeWrite b <span class="sym">(</span>i' vy<span class="sym">)</span> ivy
                    unsafeWrite b <span class="sym">(</span>i' vz<span class="sym">)</span> ivz
                  <span class="kwa">else do</span>
                    <span class="kwa">let</span> j' <span class="sym">= (</span>.<span class="sym">|</span>. shiftL j <span class="num">3</span><span class="sym">)</span>
                    jm <span class="sym">&lt;-</span> unsafeRead b <span class="sym">(</span>j' m<span class="sym">)</span>
                    dx <span class="sym">&lt;-</span> liftM <span class="sym">(</span>ix<span class="sym">-) (</span>unsafeRead b <span class="sym">(</span>j' x<span class="sym">))</span>
                    dy <span class="sym">&lt;-</span> liftM <span class="sym">(</span>iy<span class="sym">-) (</span>unsafeRead b <span class="sym">(</span>j' y<span class="sym">))</span>
                    dz <span class="sym">&lt;-</span> liftM <span class="sym">(</span>iz<span class="sym">-) (</span>unsafeRead b <span class="sym">(</span>j' z<span class="sym">))</span>
                    <span class="kwa">let</span> distance <span class="sym">=</span> sqrt <span class="sym">(</span>dx<span class="sym">*</span>dx<span class="sym">+</span>dy<span class="sym">*</span>dy<span class="sym">+</span>dz<span class="sym">*</span>dz<span class="sym">)</span>
                        mag <span class="sym">=</span> <span class="num">0.01</span> <span class="sym">/ (</span>distance <span class="sym">*</span> distance <span class="sym">*</span> distance<span class="sym">)</span>
                    addScaled3 <span class="sym">(</span><span class="num">3</span> .<span class="sym">|</span>. <span class="sym">(</span>shiftL j <span class="num">3</span><span class="sym">)) (</span> im<span class="sym">*</span>mag<span class="sym">)</span> dx dy dz
                    <span class="kwa">let</span> a <span class="sym">= -</span>jm<span class="sym">*</span>mag
                        ivx' <span class="sym">=</span> ivx<span class="sym">+</span>a<span class="sym">*</span>dx
                        ivy' <span class="sym">=</span> ivy<span class="sym">+</span>a<span class="sym">*</span>dy
                        ivz' <span class="sym">=</span> ivz<span class="sym">+</span>a<span class="sym">*</span>dz
                    updateVel' ivx' ivy' ivz' $<span class="sym">! (</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

            updateVel' ivx ivy ivz $<span class="sym">! (</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
            addScaled <span class="sym">(</span>shiftL i <span class="num">3</span><span class="sym">)</span> <span class="num">0.01</span> <span class="sym">(</span><span class="num">3</span> .<span class="sym">|</span>. <span class="sym">(</span>shiftL i <span class="num">3</span><span class="sym">))</span>
            updateVel <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

