<span class="hl slc">;; nsieve benchmark for The Computer Language Shootout</span>
<span class="hl slc">;; Written by Dima Dorfman, 2004</span>
<span class="hl slc">;; Ported to Chicken by Brent Fulgham</span>

<span class="hl sym">(</span>declare <span class="hl sym">(</span>disable-interrupts<span class="hl sym">))</span>

<span class="hl sym">(</span>require-extension format<span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>nsieve m<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>a <span class="hl sym">(</span>make-vector m #t<span class="hl sym">)))</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">((</span>i <span class="hl num">2</span><span class="hl sym">) (</span>n <span class="hl num">0</span><span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;</span> i m<span class="hl sym">)</span>
	  <span class="hl sym">(</span>begin
	    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>vector-ref a i<span class="hl sym">)</span>
		<span class="hl sym">(</span>begin
		  <span class="hl sym">(</span>let clear <span class="hl sym">((</span>j <span class="hl sym">(+</span> i i<span class="hl sym">)))</span>
		    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&lt;</span> j m<span class="hl sym">)</span>
			<span class="hl sym">(</span>begin
			  <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> a j #f<span class="hl sym">)</span>
			  <span class="hl sym">(</span>clear <span class="hl sym">(+</span> j i<span class="hl sym">)))))</span>
		  <span class="hl sym">(</span>loop <span class="hl sym">(+</span> <span class="hl num">1</span> i<span class="hl sym">) (+</span> <span class="hl num">1</span> n<span class="hl sym">)))</span>
		<span class="hl sym">(</span>loop <span class="hl sym">(+</span> <span class="hl num">1</span> i<span class="hl sym">)</span> n<span class="hl sym">)))</span>
	  n<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>test n<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span>m <span class="hl sym">(* (</span><span class="hl kwa">expt</span> <span class="hl num">2</span> n<span class="hl sym">)</span> <span class="hl num">10000</span><span class="hl sym">))</span>
	 <span class="hl sym">(</span>count <span class="hl sym">(</span>nsieve m<span class="hl sym">)))</span>
    <span class="hl sym">(</span>format #t <span class="hl str">&quot;Primes up to ~8,' D ~8,' D~%&quot;</span> m count<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main args<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? args<span class="hl sym">)</span>
  		<span class="hl num">1</span>
		<span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">car</span> args<span class="hl sym">)) ) ) )</span>
	    <span class="hl sym">(</span>begin
	      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;=</span> n <span class="hl num">0</span><span class="hl sym">) (</span>test n<span class="hl sym">))</span>
	      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;=</span> n <span class="hl num">1</span><span class="hl sym">) (</span>test <span class="hl sym">(</span>- n <span class="hl num">1</span><span class="hl sym">)))</span>
	      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt;=</span> n <span class="hl num">2</span><span class="hl sym">) (</span>test <span class="hl sym">(</span>- n <span class="hl num">2</span><span class="hl sym">)))</span>
	      <span class="hl num">0</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">))</span>
