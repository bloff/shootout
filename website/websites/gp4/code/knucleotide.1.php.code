<span class="sym">&lt;</span>?php
<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Damien Bonvillain</span>
<span class="com">*/</span>

<span class="kwb">$sequence</span> <span class="sym">=</span> read_sequence<span class="sym">(</span><span class="str">'THREE'</span><span class="sym">);</span>

<span class="kwa">fclose</span><span class="sym">(</span>STDIN<span class="sym">);</span>

<span class="slc">// sequence read, let's write some stats</span>
write_freq<span class="sym">(</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
write_freq<span class="sym">(</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
write_count<span class="sym">(</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="str">'GGT'</span><span class="sym">);</span>
write_count<span class="sym">(</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="str">'GGTA'</span><span class="sym">);</span>
write_count<span class="sym">(</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="str">'GGTATT'</span><span class="sym">);</span>
write_count<span class="sym">(</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="str">'GGTATTTTAATT'</span><span class="sym">);</span>
write_count<span class="sym">(</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="str">'GGTATTTTAATTTATAGT'</span><span class="sym">);</span>

<span class="com">/* functions definitions follow */</span>

<span class="kwa">function</span> read_sequence<span class="sym">(</span><span class="kwb">$id</span><span class="sym">) {</span>
  <span class="kwb">$ln_id</span> <span class="sym">=</span> <span class="kwa">strlen</span><span class="sym">(</span><span class="kwb">$id</span><span class="sym">);</span>
  <span class="slc">// reach sequence three</span>
  <span class="kwa">while</span><span class="sym">(!</span><span class="kwa">feof</span><span class="sym">(</span>STDIN<span class="sym">)) {</span>
    <span class="kwb">$line</span> <span class="sym">=</span> <span class="kwa">fgets</span><span class="sym">(</span>STDIN<span class="sym">,</span> <span class="num">255</span><span class="sym">);</span>
    <span class="kwa">if</span><span class="sym">(</span><span class="kwb">$line</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span> <span class="sym">&amp;&amp;</span> <span class="kwa">substr</span><span class="sym">(</span><span class="kwb">$line</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="kwb">$ln_id</span><span class="sym">) ==</span> <span class="kwb">$id</span><span class="sym">) {</span>
      <span class="kwa">break</span><span class="sym">;</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
  <span class="kwa">if</span><span class="sym">(</span><span class="kwa">feof</span><span class="sym">(</span>STDIN<span class="sym">)) {</span>
    <span class="slc">// sequence not found</span>
    <span class="kwa">exit</span><span class="sym">(-</span><span class="num">1</span><span class="sym">);</span>
  <span class="sym">}</span>
  <span class="slc">// next, read the content of the sequence</span>
  <span class="kwb">$sequence</span> <span class="sym">=</span> <span class="str">''</span><span class="sym">;</span>
  <span class="kwa">while</span><span class="sym">(!</span><span class="kwa">feof</span><span class="sym">(</span>STDIN<span class="sym">)) {</span>
    <span class="kwb">$line</span> <span class="sym">=</span> <span class="kwa">fgets</span><span class="sym">(</span>STDIN<span class="sym">,</span> <span class="num">100</span><span class="sym">);</span>
    <span class="kwa">switch</span><span class="sym">(</span><span class="kwb">$line</span><span class="sym">[</span><span class="num">0</span><span class="sym">]) {</span>
    case <span class="str">';'</span><span class="sym">:</span>
      <span class="slc">// comment, continue</span>
      <span class="kwa">continue</span><span class="sym">;</span>
    case <span class="str">'&gt;'</span><span class="sym">:</span>
      <span class="slc">// next sequence starts, this one is finished</span>
      <span class="kwa">break</span> <span class="num">2</span><span class="sym">;</span>
    default<span class="sym">:</span>
      <span class="slc">// append the uppercase sequence fragment,</span>
      <span class="slc">// must get rid of the CR/LF or whatever if present</span>
      <span class="kwb">$sequence</span> .<span class="sym">=</span> <span class="kwa">strtoupper</span><span class="sym">(</span><span class="kwa">rtrim</span><span class="sym">(</span><span class="kwb">$line</span><span class="sym">));</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
  <span class="kwa">return</span> <span class="kwb">$sequence</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">function</span> write_freq<span class="sym">(&amp;</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="kwb">$key_length</span><span class="sym">) {</span>
  <span class="kwb">$map</span> <span class="sym">=</span> generate_frequencies<span class="sym">(</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="kwb">$key_length</span><span class="sym">);</span>
  sort_by_freq_and_name<span class="sym">(</span><span class="kwb">$map</span><span class="sym">);</span>
  <span class="kwa">foreach</span><span class="sym">(</span><span class="kwb">$map</span> as <span class="kwb">$key</span> <span class="sym">=&gt;</span> <span class="kwb">$val</span><span class="sym">) {</span>
    <span class="kwa">printf</span> <span class="sym">(</span><span class="str">&quot;%s %.3f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$key</span><span class="sym">,</span> <span class="kwb">$val</span><span class="sym">);</span>
  <span class="sym">}</span>
  <span class="kwa">echo</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">function</span> write_count<span class="sym">(&amp;</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="kwb">$key</span><span class="sym">) {</span>
  <span class="kwb">$map</span> <span class="sym">=</span> generate_frequencies<span class="sym">(</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="kwa">strlen</span><span class="sym">(</span><span class="kwb">$key</span><span class="sym">),</span> false<span class="sym">);</span>
  <span class="kwa">printf</span> <span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\t</span><span class="str">%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, (</span>array_key_exists<span class="sym">(</span><span class="kwb">$key</span><span class="sym">, &amp;</span><span class="kwb">$map</span><span class="sym">))</span>?<span class="kwb">$map</span><span class="sym">[</span><span class="kwb">$key</span><span class="sym">]:</span><span class="num">0</span><span class="sym">,</span> <span class="kwb">$key</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/**</span>
<span class="com"> * Returns a map (key, count or freq(default))</span>
<span class="com"> */</span>
<span class="kwa">function</span> generate_frequencies<span class="sym">(&amp;</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="kwb">$key_length</span><span class="sym">,</span> <span class="kwb">$compute_freq</span> <span class="sym">=</span> true<span class="sym">) {</span>
  <span class="kwb">$result</span> <span class="sym">=</span> <span class="kwa">array</span><span class="sym">();</span>
  <span class="kwb">$total</span> <span class="sym">=</span> <span class="kwa">strlen</span><span class="sym">(&amp;</span><span class="kwb">$sequence</span><span class="sym">) -</span> <span class="kwb">$key_length</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwb">$i</span> <span class="sym">=</span> <span class="kwb">$total</span><span class="sym">;</span>
  <span class="kwa">while</span><span class="sym">(--</span><span class="kwb">$i</span> <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">) {</span>
    <span class="slc">// highly inefficient, alas, no real choice</span>
    <span class="kwb">$key</span> <span class="sym">=</span> <span class="kwa">substr</span><span class="sym">(&amp;</span><span class="kwb">$sequence</span><span class="sym">,</span> <span class="kwb">$i</span><span class="sym">,</span> <span class="kwb">$key_length</span><span class="sym">);</span>
    <span class="kwa">if</span><span class="sym">(!</span>array_key_exists<span class="sym">(</span><span class="kwb">$key</span><span class="sym">,&amp;</span><span class="kwb">$result</span><span class="sym">))</span> <span class="kwb">$result</span><span class="sym">[</span><span class="kwb">$key</span><span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">$result</span><span class="sym">[</span><span class="kwb">$key</span><span class="sym">]++;</span>
  <span class="sym">}</span>
  <span class="kwa">if</span><span class="sym">(</span><span class="kwb">$compute_freq</span><span class="sym">) {</span>
    <span class="kwa">array_walk</span><span class="sym">(</span><span class="kwb">$result</span><span class="sym">,</span> <span class="str">'compute_freq'</span><span class="sym">,</span> <span class="kwb">$total</span><span class="sym">);</span>
  <span class="sym">}</span>
  <span class="kwa">return</span> <span class="kwb">$result</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">function</span> compute_freq<span class="sym">(&amp;</span><span class="kwb">$count_freq</span><span class="sym">,</span> <span class="kwb">$key</span><span class="sym">,</span> <span class="kwb">$total</span><span class="sym">) {</span>
  <span class="kwb">$count_freq</span> <span class="sym">= (</span><span class="kwb">$count_freq</span><span class="sym">*</span> <span class="num">100</span><span class="sym">) /</span> <span class="kwb">$total</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">function</span> sort_by_freq_and_name<span class="sym">(&amp;</span><span class="kwb">$map</span><span class="sym">) {</span>
  <span class="slc">// since PHP 4.1.0, sorting is not stable =&gt; dirty kludge</span>
  <span class="kwa">array_walk</span><span class="sym">(</span><span class="kwb">$map</span><span class="sym">,</span> <span class="str">'append_key'</span><span class="sym">);</span>
  <span class="kwa">uasort</span><span class="sym">(</span><span class="kwb">$map</span><span class="sym">,</span> <span class="str">'freq_name_comparator'</span><span class="sym">);</span>
  <span class="kwa">array_walk</span><span class="sym">(</span><span class="kwb">$map</span><span class="sym">,</span> <span class="str">'remove_key'</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">function</span> append_key<span class="sym">(&amp;</span><span class="kwb">$val</span><span class="sym">,</span> <span class="kwb">$key</span><span class="sym">) {</span>
  <span class="kwb">$val</span> <span class="sym">=</span> <span class="kwa">array</span><span class="sym">(</span><span class="kwb">$val</span><span class="sym">,</span> <span class="kwb">$key</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">function</span> freq_name_comparator<span class="sym">(</span><span class="kwb">$val1</span><span class="sym">,</span> <span class="kwb">$val2</span><span class="sym">) {</span>
  <span class="kwb">$delta</span> <span class="sym">=</span> <span class="kwb">$val2</span><span class="sym">[</span><span class="num">0</span><span class="sym">] -</span> <span class="kwb">$val1</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
  <span class="slc">// the comparator must return something close to an int</span>
  <span class="kwb">$result</span> <span class="sym">= (</span><span class="kwb">$delta</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>?<span class="kwa">strcmp</span><span class="sym">(</span><span class="kwb">$val1</span><span class="sym">[</span><span class="num">1</span><span class="sym">],</span><span class="kwb">$val2</span><span class="sym">[</span><span class="num">1</span><span class="sym">]):</span>
    <span class="sym">(</span><span class="kwb">$delta</span> <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span>?<span class="sym">-</span><span class="num">1</span><span class="sym">:</span><span class="num">1</span><span class="sym">;</span>
  <span class="kwa">return</span> <span class="kwb">$result</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">function</span> remove_key<span class="sym">(&amp;</span><span class="kwb">$val</span><span class="sym">,</span> <span class="kwb">$key</span><span class="sym">) {</span>
  <span class="kwb">$val</span> <span class="sym">=</span> <span class="kwb">$val</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="sym">}</span>
?<span class="sym">&gt;</span>
