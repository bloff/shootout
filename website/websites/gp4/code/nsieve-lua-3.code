<span class="hl slc">-- The Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Isaac Gouy</span>
<span class="hl slc">-- modified by Mike Pall</span>


<span class="hl kwa">local function</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>isPrime<span class="hl sym">)</span>
   <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">,</span>m <span class="hl kwa">do</span>
      isPrime<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">true</span>
   <span class="hl kwa">end</span>
   <span class="hl kwa">local</span> count <span class="hl sym">=</span> <span class="hl num">0</span>

   <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">,</span>m <span class="hl kwa">do</span>
      <span class="hl kwa">if</span> isPrime<span class="hl sym">[</span>i<span class="hl sym">]</span> <span class="hl kwa">then</span>
         <span class="hl kwa">for</span> k<span class="hl sym">=</span>i<span class="hl sym">+</span>i<span class="hl sym">,</span> m<span class="hl sym">,</span> i <span class="hl kwa">do</span>
<span class="hl slc">--            if isPrime[k] then isPrime[k] = false end</span>
            isPrime<span class="hl sym">[</span>k<span class="hl sym">] =</span> <span class="hl kwa">false</span>
         <span class="hl kwa">end</span>
         count <span class="hl sym">=</span> count <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>
   <span class="hl kwa">return</span> count
<span class="hl kwa">end</span>


<span class="hl kwa">local</span> n <span class="hl sym">=</span> <span class="hl kwb">tonumber</span><span class="hl sym">(</span>arg <span class="hl kwa">and</span> arg<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span> <span class="hl kwa">or</span> <span class="hl num">1</span>
<span class="hl kwa">if</span> n <span class="hl sym">&lt;</span> <span class="hl num">2</span> <span class="hl kwa">then</span> n <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl kwa">end</span>
<span class="hl kwa">local</span> flags <span class="hl sym">= {}</span>

<span class="hl kwa">local</span> m <span class="hl sym">= (</span><span class="hl num">2</span>^n<span class="hl sym">)*</span><span class="hl num">10000</span>
io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span> <span class="hl kwb">string</span><span class="hl sym">.</span><span class="hl kwb">format</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8d %8d&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">)),</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>

m <span class="hl sym">= (</span><span class="hl num">2</span>^<span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))*</span><span class="hl num">10000</span>
io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span> <span class="hl kwb">string</span><span class="hl sym">.</span><span class="hl kwb">format</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8d %8d&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">)),</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>

m <span class="hl sym">= (</span><span class="hl num">2</span>^<span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">))*</span><span class="hl num">10000</span>
io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span> <span class="hl kwb">string</span><span class="hl sym">.</span><span class="hl kwb">format</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8d %8d&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span>m<span class="hl sym">,</span>flags<span class="hl sym">)),</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
