<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*)</span>

<span class="hl kwa">module</span> recursive<span class="hl sym">;</span>
<span class="hl kwa">import</span>
   System<span class="hl sym">.</span>Math <span class="hl kwa">as</span> M<span class="hl sym">,</span>
   System<span class="hl sym">.</span>Console <span class="hl kwa">as</span> C<span class="hl sym">,</span>
   BenchmarksGame<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">Ack</span> <span class="hl sym">(</span>m<span class="hl sym">,</span> n<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">):</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> m<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl kwa">then return</span> n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> n<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl kwa">then return</span> <span class="hl kwd">Ack</span><span class="hl sym">(</span>m<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
   <span class="hl kwa">return</span> <span class="hl kwd">Ack</span><span class="hl sym">(</span>m<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl kwd">Ack</span><span class="hl sym">(</span>m<span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">));</span>
<span class="hl kwa">end</span> Ack<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">Fib</span> <span class="hl sym">(</span>n<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">):</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> n<span class="hl sym">&lt;</span><span class="hl num">2</span> <span class="hl kwa">then return</span> <span class="hl num">1</span><span class="hl sym">;</span> <span class="hl kwa">else return</span> <span class="hl kwd">Fib</span><span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">) +</span> <span class="hl kwd">Fib</span><span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> Fib<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">Tak</span> <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">,</span>z<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">) :</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> y<span class="hl sym">&lt;</span>x <span class="hl kwa">then return</span> <span class="hl kwd">Tak</span><span class="hl sym">(</span><span class="hl kwd">Tak</span><span class="hl sym">(</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>y<span class="hl sym">,</span>z<span class="hl sym">),</span> <span class="hl kwd">Tak</span><span class="hl sym">(</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>z<span class="hl sym">,</span>x<span class="hl sym">),</span> <span class="hl kwd">Tak</span><span class="hl sym">(</span>z<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span>x<span class="hl sym">,</span>y<span class="hl sym">));</span>
   <span class="hl kwa">else return</span> z<span class="hl sym">;</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> Tak<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">Fibr</span> <span class="hl sym">(</span>n<span class="hl sym">:</span> <span class="hl kwb">real</span><span class="hl sym">):</span> <span class="hl kwb">real</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> n<span class="hl sym">&lt;</span><span class="hl num">2.0</span> <span class="hl kwa">then return</span> <span class="hl num">1.0</span><span class="hl sym">;</span>
   <span class="hl kwa">else return</span> <span class="hl kwd">Fibr</span><span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">2.0</span><span class="hl sym">) +</span> <span class="hl kwd">Fibr</span><span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1.0</span><span class="hl sym">);</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> Fibr<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">Takr</span> <span class="hl sym">(</span>x<span class="hl sym">,</span>y<span class="hl sym">,</span>z<span class="hl sym">:</span> <span class="hl kwb">real</span><span class="hl sym">) :</span> <span class="hl kwb">real</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> y<span class="hl sym">&lt;</span>x <span class="hl kwa">then return</span>
      <span class="hl kwd">Takr</span><span class="hl sym">(</span> <span class="hl kwd">Takr</span><span class="hl sym">(</span>x<span class="hl sym">-</span><span class="hl num">1.0</span><span class="hl sym">,</span>y<span class="hl sym">,</span>z<span class="hl sym">),</span> <span class="hl kwd">Takr</span><span class="hl sym">(</span>y<span class="hl sym">-</span><span class="hl num">1.0</span><span class="hl sym">,</span>z<span class="hl sym">,</span>x<span class="hl sym">),</span> <span class="hl kwd">Takr</span><span class="hl sym">(</span>z<span class="hl sym">-</span><span class="hl num">1.0</span><span class="hl sym">,</span>x<span class="hl sym">,</span>y<span class="hl sym">) );</span>
   <span class="hl kwa">else return</span> z<span class="hl sym">;</span> <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> Takr<span class="hl sym">;</span>

<span class="hl kwa">var</span>
   n<span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   n <span class="hl sym">:=</span> BenchmarksGame<span class="hl sym">.</span><span class="hl kwd">argi</span><span class="hl sym">();</span>
   C<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;Ack(3,{0}): {1}&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwd">Ack</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span> n<span class="hl sym">));</span>
   C<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;Fib({0:f1}): {1:f1}&quot;</span><span class="hl sym">,</span> <span class="hl num">27.0</span><span class="hl sym">+</span>n<span class="hl sym">,</span> <span class="hl kwd">Fibr</span><span class="hl sym">(</span><span class="hl num">27.0</span><span class="hl sym">+</span>n<span class="hl sym">));</span>
   <span class="hl kwd">dec</span><span class="hl sym">(</span>n<span class="hl sym">);</span> C<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;Tak({0},{1},{2}): {3}&quot;</span><span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">*</span>n<span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">*</span>n<span class="hl sym">,</span>n<span class="hl sym">,</span> <span class="hl kwd">Tak</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">*</span>n<span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">*</span>n<span class="hl sym">,</span>n<span class="hl sym">));</span>

   C<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;Fib(3): {0}&quot;</span><span class="hl sym">,</span> <span class="hl kwd">Fib</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">));</span>
   C<span class="hl sym">.</span><span class="hl kwd">WriteLine</span><span class="hl sym">(</span><span class="hl str">&quot;Tak(3.0,2.0,1.0): {0:f1}&quot;</span><span class="hl sym">,</span><span class="hl kwd">Takr</span><span class="hl sym">(</span><span class="hl num">3.0</span><span class="hl sym">,</span><span class="hl num">2.0</span><span class="hl sym">,</span><span class="hl num">1.0</span><span class="hl sym">));</span>
<span class="hl kwa">end</span> recursive<span class="hl sym">.</span>
