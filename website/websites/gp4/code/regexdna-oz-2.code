<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla [with thanks to Kevin Glynn]</span>
<span class="slc">% Further modified by YANG Shouxun</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit<span class="sym">)</span> Open<span class="sym">(</span>file text<span class="sym">)</span>
  Regex at <span class="str">'x-oz://contrib/regex'</span>

<span class="kwa">define</span>

<span class="slc">% ------------- %</span>

  VARIANTS <span class="sym">= [</span>
    &quot;agggtaaa<span class="sym">|</span>tttaccct&quot; &quot;<span class="sym">[</span>cgt<span class="sym">]</span>gggtaaa<span class="sym">|</span>tttaccc<span class="sym">[</span>acg<span class="sym">]</span>&quot;
    &quot;a<span class="sym">[</span>act<span class="sym">]</span>ggtaaa<span class="sym">|</span>tttacc<span class="sym">[</span>agt<span class="sym">]</span>t&quot; &quot;ag<span class="sym">[</span>act<span class="sym">]</span>gtaaa<span class="sym">|</span>tttac<span class="sym">[</span>agt<span class="sym">]</span>ct&quot;
    &quot;agg<span class="sym">[</span>act<span class="sym">]</span>taaa<span class="sym">|</span>ttta<span class="sym">[</span>agt<span class="sym">]</span>cct&quot; &quot;aggg<span class="sym">[</span>acg<span class="sym">]</span>aaa<span class="sym">|</span>ttt<span class="sym">[</span>cgt<span class="sym">]</span>ccct&quot;
    &quot;agggt<span class="sym">[</span>cgt<span class="sym">]</span>aa<span class="sym">|</span>tt<span class="sym">[</span>acg<span class="sym">]</span>accct&quot; &quot;agggta<span class="sym">[</span>cgt<span class="sym">]</span>a<span class="sym">|</span>t<span class="sym">[</span>acg<span class="sym">]</span>taccct&quot;
    &quot;agggtaa<span class="sym">[</span>cgt<span class="sym">]|[</span>acg<span class="sym">]</span>ttaccct&quot;<span class="sym">]</span>

  IUBS <span class="sym">= [</span>&quot;B&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>c<span class="sym">|</span>g<span class="sym">|</span>t<span class="sym">)</span>&quot; &quot;D&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>a<span class="sym">|</span>g<span class="sym">|</span>t<span class="sym">)</span>&quot; &quot;H&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>a<span class="sym">|</span>c<span class="sym">|</span>t<span class="sym">)</span>&quot; &quot;K&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>g<span class="sym">|</span>t<span class="sym">)</span>&quot;
	  &quot;M&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>a<span class="sym">|</span>c<span class="sym">)</span>&quot; &quot;N&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>a<span class="sym">|</span>c<span class="sym">|</span>g<span class="sym">|</span>t<span class="sym">)</span>&quot; &quot;R&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>a<span class="sym">|</span>g<span class="sym">)</span>&quot; &quot;S&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>c<span class="sym">|</span>g<span class="sym">)</span>&quot;
	  &quot;V&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>a<span class="sym">|</span>c<span class="sym">|</span>g<span class="sym">)</span>&quot; &quot;W&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>a<span class="sym">|</span>t<span class="sym">)</span>&quot; &quot;Y&quot;<span class="sym">#</span>&quot;<span class="sym">(</span>c<span class="sym">|</span>t<span class="sym">)</span>&quot;<span class="sym">]</span>

  LF <span class="sym">=</span> &quot;<span class="sym">\</span>n&quot;

<span class="slc">% ------------- %</span>

  <span class="kwa">class</span> TextFile_
    <span class="kwa">from</span> Open<span class="sym">.</span>file Open<span class="sym">.</span>text
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  Initial_Length Code_Length SEQ <span class="sym">= {</span>NewCell nil<span class="sym">}</span>

<span class="slc">% ------------- %</span>

<span class="kwa">in</span>
  <span class="slc">% Load file as a list and record its length</span>
  SEQ <span class="sym">:= {{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}</span> read<span class="sym">(</span>list<span class="sym">:$</span> size<span class="sym">:</span>all<span class="sym">)}</span>
  Initial_Length <span class="sym">= {</span>Length <span class="sym">&#64;</span>SEQ<span class="sym">}</span>

  <span class="slc">% Remove newline and segment divider line occurrences</span>
  SEQ <span class="sym">:= {</span>Regex<span class="sym">.</span>replace <span class="sym">&#64;</span>SEQ <span class="sym">{</span>Regex<span class="sym">.</span>make &quot;<span class="sym">(&gt;.*\</span>n<span class="sym">)|(\</span>n<span class="sym">)</span>&quot;<span class="sym">}</span> <span class="kwa">fun</span> <span class="sym">{$</span> X Y<span class="sym">}</span> &quot;&quot; <span class="kwa">end</span><span class="sym">}</span>
  Code_Length <span class="sym">= {</span>ByteString<span class="sym">.</span>length <span class="sym">&#64;</span>SEQ<span class="sym">}</span>

  <span class="slc">% Perform regexp counts</span>
  <span class="kwa">for</span> Item <span class="kwa">in</span> VARIANTS do
    <span class="sym">{</span>System<span class="sym">.</span>showInfo Item <span class="sym">#</span> &quot; &quot; <span class="sym"># {</span>Length <span class="sym">{</span>Regex<span class="sym">.</span>allMatches <span class="sym">{</span>Regex<span class="sym">.</span>compile Item <span class="sym">[</span>icase extended<span class="sym">]} &#64;</span>SEQ<span class="sym">}}}</span>
  <span class="kwa">end</span>

  <span class="slc">% Perform replacements</span>
  <span class="kwa">for</span> Key<span class="sym">#</span>S <span class="kwa">in</span> IUBS do
     SEQ <span class="sym">:= {</span>Regex<span class="sym">.</span>replace <span class="sym">&#64;</span>SEQ <span class="sym">{</span>Regex<span class="sym">.</span>compile Key <span class="sym">[</span>icase<span class="sym">]}</span> <span class="kwa">fun</span> <span class="sym">{$</span> X Y<span class="sym">}</span> S <span class="kwa">end</span><span class="sym">}</span>
  <span class="kwa">end</span>

  <span class="slc">% Print statistics</span>
  <span class="sym">{</span>System<span class="sym">.</span>showInfo LF <span class="sym">#</span> Initial_Length <span class="sym">#</span> LF <span class="sym">#</span> Code_Length <span class="sym">#</span> LF <span class="sym"># {</span>ByteString<span class="sym">.</span>length <span class="sym">&#64;</span>SEQ<span class="sym">}}</span>

  <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
