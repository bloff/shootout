<span class="hl slc">;;; The Computer Language Shootout</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; Contributed by Wade Humeniuk</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; Compile: sbcl --load fannkuch.lisp --eval &quot;(save-lisp-and-die \&quot;fannkuch.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; Run: sbcl --noinform --core fannkuch.core %A</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> write-permutation <span class="hl sym">(</span>perm<span class="hl sym">)</span>
  <span class="hl sym">(</span>loop for i across perm do
	<span class="hl sym">(</span><span class="hl kwa">princ</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> i<span class="hl sym">)))</span>
  <span class="hl sym">(</span><span class="hl kwa">terpri</span><span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> fannkuch <span class="hl sym">(</span>n<span class="hl sym">)</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">) (</span>debug <span class="hl num">0</span><span class="hl sym">)) (</span>fixnum n<span class="hl sym">))</span>
  <span class="hl sym">(</span>assert <span class="hl sym">(&lt;</span> <span class="hl num">1</span> n <span class="hl num">128</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>perm <span class="hl sym">(</span>make-array n <span class="hl sym">:</span>element-<span class="hl kwa">type</span> <span class="hl sym">'</span>fixnum<span class="hl sym">))</span>
        <span class="hl sym">(</span>perm1 <span class="hl sym">(</span>make-array n <span class="hl sym">:</span>element-<span class="hl kwa">type</span> <span class="hl sym">'</span>fixnum<span class="hl sym">))</span>
        <span class="hl sym">(</span>count <span class="hl sym">(</span>make-array n <span class="hl sym">:</span>element-<span class="hl kwa">type</span> <span class="hl sym">'</span>fixnum<span class="hl sym">))</span>
        <span class="hl sym">(</span>flips <span class="hl num">0</span><span class="hl sym">) (</span>flipsmax <span class="hl num">0</span><span class="hl sym">) (</span>r n<span class="hl sym">) (</span>check <span class="hl num">0</span><span class="hl sym">) (</span>k <span class="hl num">0</span><span class="hl sym">)</span>
	<span class="hl sym">(</span>i <span class="hl num">0</span><span class="hl sym">) (</span>perm0 <span class="hl num">0</span><span class="hl sym">))</span>

    <span class="hl sym">(</span>declare <span class="hl sym">((</span>simple-array fixnum <span class="hl sym">(*))</span> perm perm1 count<span class="hl sym">)</span>
             <span class="hl sym">(</span>fixnum flips flipsmax check k r i perm0<span class="hl sym">))</span>

    <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i n<span class="hl sym">) (</span>setf <span class="hl sym">(</span>aref perm1 i<span class="hl sym">)</span> i<span class="hl sym">))</span>

    <span class="hl sym">(</span>loop

     <span class="hl sym">(</span>when <span class="hl sym">(&lt;</span> check <span class="hl num">30</span><span class="hl sym">)</span>
       <span class="hl sym">(</span>write-permutation perm1<span class="hl sym">)</span>
       <span class="hl sym">(</span>incf check<span class="hl sym">))</span>

     <span class="hl sym">(</span>loop <span class="hl kwa">while</span> <span class="hl sym">(&gt;</span> r <span class="hl num">1</span><span class="hl sym">)</span> do
           <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref count <span class="hl sym">(</span><span class="hl num">1</span>- r<span class="hl sym">))</span> r<span class="hl sym">)</span>
           <span class="hl sym">(</span>decf r<span class="hl sym">))</span>

     <span class="hl sym">(</span>unless <span class="hl sym">(</span><span class="hl kwa">or</span> <span class="hl sym">(= (</span>aref perm1 <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)</span>
		 <span class="hl sym">(= (</span>aref perm1 <span class="hl sym">(</span><span class="hl num">1</span>- n<span class="hl sym">)) (</span><span class="hl num">1</span>- n<span class="hl sym">)))</span>
       <span class="hl sym">(</span>setf flips <span class="hl num">0</span><span class="hl sym">)</span>
       <span class="hl sym">(</span>dotimes <span class="hl sym">(</span>i n<span class="hl sym">) (</span>setf <span class="hl sym">(</span>aref perm i<span class="hl sym">) (</span>aref perm1 i<span class="hl sym">)))</span>
       <span class="hl sym">(</span>setf k <span class="hl sym">(</span>aref perm1 <span class="hl num">0</span><span class="hl sym">))</span>
       <span class="hl sym">(</span>loop <span class="hl kwa">while</span> <span class="hl sym">(/=</span> k <span class="hl num">0</span><span class="hl sym">)</span> do
             <span class="hl sym">(</span>loop for j fixnum downfrom <span class="hl sym">(</span><span class="hl num">1</span>- k<span class="hl sym">)</span>
                   for i fixnum from <span class="hl num">1</span>
                   <span class="hl kwa">while</span> <span class="hl sym">(&lt;</span> i j<span class="hl sym">)</span> do <span class="hl sym">(</span>rotatef <span class="hl sym">(</span>aref perm i<span class="hl sym">) (</span>aref perm j<span class="hl sym">)))</span>
             <span class="hl sym">(</span>incf flips<span class="hl sym">)</span>
             <span class="hl sym">(</span>rotatef k <span class="hl sym">(</span>aref perm k<span class="hl sym">)))</span>
       <span class="hl sym">(</span>setf flipsmax <span class="hl sym">(</span><span class="hl kwa">max</span> flipsmax flips<span class="hl sym">)))</span>

     <span class="hl sym">(</span>loop do
	   <span class="hl sym">(</span>when <span class="hl sym">(=</span> r n<span class="hl sym">)</span>
	     <span class="hl sym">(</span>return-from fannkuch flipsmax<span class="hl sym">))</span>
	   <span class="hl sym">(</span>setf i <span class="hl num">0</span> perm0 <span class="hl sym">(</span>aref perm1 <span class="hl num">0</span><span class="hl sym">))</span>
	   <span class="hl sym">(</span>loop <span class="hl kwa">while</span> <span class="hl sym">(&lt;</span> i r<span class="hl sym">)</span> do
		 <span class="hl sym">(</span>setf k <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">+</span> i<span class="hl sym">)</span>
		       <span class="hl sym">(</span>aref perm1 i<span class="hl sym">) (</span>aref perm1 k<span class="hl sym">)</span>
		       i k<span class="hl sym">))</span>
	   <span class="hl sym">(</span>setf <span class="hl sym">(</span>aref perm1 r<span class="hl sym">)</span> perm0<span class="hl sym">)</span>
	   <span class="hl sym">(</span>when <span class="hl sym">(&gt; (</span>decf <span class="hl sym">(</span>aref count r<span class="hl sym">))</span> <span class="hl num">0</span><span class="hl sym">) (</span>loop-finish<span class="hl sym">))</span>
	   <span class="hl sym">(</span>incf r<span class="hl sym">)))))</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>let <span class="hl sym">((</span>n <span class="hl sym">(</span>parse-integer <span class="hl sym">(</span>second <span class="hl sym">*</span>posix-argv<span class="hl sym">*))))</span>
    <span class="hl sym">(</span>format t <span class="hl str">&quot;Pfannkuchen(~D) = ~D~%&quot;</span> n <span class="hl sym">(</span>fannkuch n<span class="hl sym">))))</span>
