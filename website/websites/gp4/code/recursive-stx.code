<span class="hl com">&quot;* The Computer Language Shootout</span>
<span class="hl com">    http://shootout.alioth.debian.org/</span>
<span class="hl com">    contributed by Isaac Gouy *&quot;</span><span class="hl sym">!</span>

<span class="hl com">&quot;* SPLITFILE=Tests.st *&quot;</span><span class="hl sym">!</span>

Object subclass<span class="hl sym">:#</span>Tests
   instanceVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   classVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span><span class="hl str">''</span>
   category<span class="hl sym">:</span><span class="hl str">'benchmark-games'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span><span class="hl sym">!</span>

ackx<span class="hl sym">:</span> x y<span class="hl sym">:</span> y   <span class="hl sym">^</span>x <span class="hl sym">==</span> <span class="hl num">0</span>      ifTrue<span class="hl sym">: [</span>y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">]</span>      ifFalse<span class="hl sym">: [</span>         y <span class="hl sym">==</span> <span class="hl num">0</span>            ifTrue<span class="hl sym">:  [</span><span class="hl kwa">self</span> ackx<span class="hl sym">:</span> x<span class="hl sym">-</span><span class="hl num">1</span> y<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">]</span>            ifFalse<span class="hl sym">: [</span><span class="hl kwa">self</span> ackx<span class="hl sym">:</span> x<span class="hl sym">-</span><span class="hl num">1</span> y<span class="hl sym">: (</span><span class="hl kwa">self</span> ackx<span class="hl sym">:</span> x y<span class="hl sym">:</span> y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)]</span>
      <span class="hl sym">]</span>
<span class="hl sym">!</span>

fib<span class="hl sym">:</span> n   <span class="hl sym">^</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span> ifTrue<span class="hl sym">: [</span><span class="hl num">1</span><span class="hl sym">]</span> ifFalse<span class="hl sym">: [(</span><span class="hl kwa">self</span> fib<span class="hl sym">:</span> n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">) + (</span><span class="hl kwa">self</span> fib<span class="hl sym">:</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)]</span>
<span class="hl sym">!</span>

takx<span class="hl sym">:</span> x y<span class="hl sym">:</span> y z<span class="hl sym">:</span> z   <span class="hl sym">^</span>y <span class="hl sym">&lt;</span> x       ifTrue<span class="hl sym">: [</span>
         <span class="hl kwa">self</span>
            takx<span class="hl sym">: (</span><span class="hl kwa">self</span> takx<span class="hl sym">: (</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> y<span class="hl sym">:</span> y z<span class="hl sym">:</span> z<span class="hl sym">)</span>
               y<span class="hl sym">: (</span><span class="hl kwa">self</span> takx<span class="hl sym">: (</span>y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> y<span class="hl sym">:</span> z z<span class="hl sym">:</span> x<span class="hl sym">)</span>
               z<span class="hl sym">: (</span><span class="hl kwa">self</span> takx<span class="hl sym">: (</span>z<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> y<span class="hl sym">:</span> x z<span class="hl sym">:</span> y<span class="hl sym">)]</span>      ifFalse<span class="hl sym">: [</span>z<span class="hl sym">]</span>
<span class="hl sym">!</span>


recursive<span class="hl sym">:</span> n to<span class="hl sym">:</span> output   <span class="hl sym">|</span> m f <span class="hl sym">|</span>

   output       nextPutAll<span class="hl sym">:</span> <span class="hl str">'Ack(3,'</span><span class="hl sym">,</span> n printString<span class="hl sym">,</span> <span class="hl str">'): '</span><span class="hl sym">;</span> print<span class="hl sym">: (</span><span class="hl kwa">self</span> ackx<span class="hl sym">:</span> <span class="hl num">3</span> y<span class="hl sym">:</span> n<span class="hl sym">);</span> cr<span class="hl sym">.</span>

   output
      nextPutAll<span class="hl sym">:</span> <span class="hl str">'Fib('</span><span class="hl sym">;</span> print<span class="hl sym">:</span> <span class="hl num">27.0</span> <span class="hl sym">+</span> n<span class="hl sym">;</span> nextPutAll<span class="hl sym">:</span> <span class="hl str">'): '</span><span class="hl sym">;</span>
      print<span class="hl sym">: (</span><span class="hl kwa">self</span> fib<span class="hl sym">: (</span><span class="hl num">27.0</span> <span class="hl sym">+</span> n<span class="hl sym">));</span> nextPutAll<span class="hl sym">:</span> <span class="hl str">'.0'</span><span class="hl sym">;</span> cr<span class="hl sym">.</span>

   m <span class="hl sym">:=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">.</span>
   output       nextPutAll<span class="hl sym">:</span> <span class="hl str">'Tak('</span><span class="hl sym">, (</span><span class="hl num">3</span><span class="hl sym">*</span>m<span class="hl sym">)</span> printString<span class="hl sym">,</span> <span class="hl str">','</span><span class="hl sym">,                          (</span><span class="hl num">2</span><span class="hl sym">*</span>m<span class="hl sym">)</span> printString<span class="hl sym">,</span> <span class="hl str">','</span><span class="hl sym">,</span> m printString<span class="hl sym">,</span> <span class="hl str">'): '</span><span class="hl sym">,                            (</span><span class="hl kwa">self</span> takx<span class="hl sym">:</span> <span class="hl num">3</span><span class="hl sym">*</span>m y<span class="hl sym">:</span> <span class="hl num">2</span><span class="hl sym">*</span>m z<span class="hl sym">:</span> m<span class="hl sym">)</span> printString<span class="hl sym">;</span> cr<span class="hl sym">;</span>

      nextPutAll<span class="hl sym">:</span> <span class="hl str">'Fib(3): '</span><span class="hl sym">;</span> print<span class="hl sym">: (</span><span class="hl kwa">self</span> fib<span class="hl sym">:</span> <span class="hl num">3</span><span class="hl sym">);</span> cr<span class="hl sym">;</span>

      nextPutAll<span class="hl sym">:</span> <span class="hl str">'Tak(3.0,2.0,1.0): '</span><span class="hl sym">;</span>
      nextPutAll<span class="hl sym">: ((</span><span class="hl kwa">self</span> takx<span class="hl sym">:</span> <span class="hl num">3.0</span> y<span class="hl sym">:</span> <span class="hl num">2.0</span> z<span class="hl sym">:</span> <span class="hl num">1.0</span><span class="hl sym">)</span> printfPrintString<span class="hl sym">:</span><span class="hl str">'%0.1f'</span><span class="hl sym">);</span> cr
<span class="hl sym">!</span>



main
   <span class="hl kwa">self</span> recursive<span class="hl sym">:</span> Smalltalk commandLineArguments last asNumber to<span class="hl sym">:</span> Stdout
<span class="hl sym">! !</span>


