<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy *&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

revcomp
   <span class="sym">|</span> stdin stdout fasta <span class="sym">|</span>
   stdin <span class="sym">:=</span> ExternalReadStream on<span class="sym">:</span>
      <span class="sym">(</span>ExternalConnection ioAccessor<span class="sym">: (</span>UnixDiskFileAccessor new handle<span class="sym">:</span> <span class="num">0</span><span class="sym">)).</span>
   stdout <span class="sym">:=</span> ExternalWriteStream on<span class="sym">:</span>
      <span class="sym">(</span>ExternalConnection ioAccessor<span class="sym">: (</span>UnixDiskFileAccessor new handle<span class="sym">:</span> <span class="num">1</span><span class="sym">)).</span>

   fasta <span class="sym">:=</span> stdin readFasta<span class="sym">:</span> <span class="str">'ONE'</span><span class="sym">.</span>
   stdout writeReverseComplementFasta<span class="sym">:</span> fasta key sequence<span class="sym">:</span> fasta value<span class="sym">.</span>

   fasta <span class="sym">:=</span> stdin readFasta<span class="sym">:</span> <span class="str">'TWO'</span><span class="sym">.</span>
   stdout writeReverseComplementFasta<span class="sym">:</span> fasta key sequence<span class="sym">:</span> fasta value<span class="sym">.</span>

   fasta <span class="sym">:=</span> stdin readFasta<span class="sym">:</span> <span class="str">'THREE'</span><span class="sym">.</span>
   stdout writeReverseComplementFasta<span class="sym">:</span> fasta key sequence<span class="sym">:</span> fasta value<span class="sym">.</span>

   stdout flush<span class="sym">.</span>
   <span class="sym">^</span><span class="str">''</span> <span class="sym">! !</span>


<span class="sym">!</span>ExternalReadStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

readFasta<span class="sym">:</span> anId
   <span class="sym">|</span> idString newline buffer description line char <span class="sym">|</span>
   idString <span class="sym">:=</span> <span class="str">'&gt;'</span><span class="sym">,</span>anId<span class="sym">.</span>
   newline <span class="sym">:=</span> Character cr<span class="sym">.</span>

   <span class="com">&quot;* find start of particular fasta sequence *&quot;</span>
   <span class="sym">[(</span><span class="kwa">self</span> atEnd<span class="sym">)</span> or<span class="sym">: [</span>
         <span class="sym">(</span><span class="kwa">self</span> peek <span class="sym">= $&gt;)</span>
            ifTrue<span class="sym">: [((</span>line <span class="sym">:=</span> <span class="kwa">self</span> upTo<span class="sym">:</span> newline<span class="sym">)</span>
               indexOfSubCollection<span class="sym">:</span> idString startingAt<span class="sym">:</span> <span class="num">1</span><span class="sym">) =</span> <span class="num">1</span><span class="sym">]</span>
            ifFalse<span class="sym">: [</span><span class="kwa">self</span> skipThrough<span class="sym">:</span> newline<span class="sym">.</span> <span class="kwa">false</span><span class="sym">]]</span>
      <span class="sym">]</span> whileFalse<span class="sym">.</span>

   <span class="com">&quot;* line-by-line read - it would be a lot faster to block read *&quot;</span>
   description <span class="sym">:=</span> line<span class="sym">.</span>
   buffer <span class="sym">:=</span> ReadWriteStream on<span class="sym">: (</span>String new<span class="sym">:</span> <span class="num">1028</span><span class="sym">).</span>
   <span class="sym">[(</span><span class="kwa">self</span> atEnd<span class="sym">)</span> or<span class="sym">: [(</span>char <span class="sym">:=</span> <span class="kwa">self</span> peek<span class="sym">) = $&gt;]]</span> whileFalse<span class="sym">: [</span>
      <span class="sym">(</span>char <span class="sym">= $;)</span>
         ifTrue<span class="sym">: [</span><span class="kwa">self</span> upTo<span class="sym">:</span> newline<span class="sym">]</span>
         ifFalse<span class="sym">: [</span>buffer nextPutAll<span class="sym">: (</span><span class="kwa">self</span> upTo<span class="sym">:</span> newline<span class="sym">)]</span>
      <span class="sym">].</span>
   <span class="sym">^</span>Association key<span class="sym">:</span> description value<span class="sym">:</span> buffer contents <span class="sym">! !</span>


<span class="sym">!</span>ExternalwriteStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

writeReverseComplementFasta<span class="sym">:</span> aString sequence<span class="sym">:</span> aSequence
   <span class="sym">|</span> lineLength n iub <span class="sym">|</span>
   <span class="sym">(</span>aString isNil<span class="sym">)</span> ifTrue<span class="sym">: [^</span><span class="kwa">self</span><span class="sym">].</span>

   lineLength <span class="sym">:=</span> <span class="num">60</span><span class="sym">.</span> n <span class="sym">:=</span> aSequence size<span class="sym">.</span>

   iub <span class="sym">:=</span> String new<span class="sym">:</span> <span class="num">128</span> withAll<span class="sym">: $*.</span>
   iub at<span class="sym">: $</span>a asInteger put<span class="sym">: $</span>T<span class="sym">.</span> iub at<span class="sym">: $</span>A asInteger put<span class="sym">: $</span>T<span class="sym">.</span>
   iub at<span class="sym">: $</span>b asInteger put<span class="sym">: $</span>V<span class="sym">.</span> iub at<span class="sym">: $</span>B asInteger put<span class="sym">: $</span>V<span class="sym">.</span>
   iub at<span class="sym">: $</span>c asInteger put<span class="sym">: $</span>G<span class="sym">.</span> iub at<span class="sym">: $</span>C asInteger put<span class="sym">: $</span>G<span class="sym">.</span>
   iub at<span class="sym">: $</span>d asInteger put<span class="sym">: $</span>H<span class="sym">.</span> iub at<span class="sym">: $</span>D asInteger put<span class="sym">: $</span>H<span class="sym">.</span>
   iub at<span class="sym">: $</span>g asInteger put<span class="sym">: $</span>C<span class="sym">.</span> iub at<span class="sym">: $</span>G asInteger put<span class="sym">: $</span>C<span class="sym">.</span>
   iub at<span class="sym">: $</span>h asInteger put<span class="sym">: $</span>D<span class="sym">.</span> iub at<span class="sym">: $</span>H asInteger put<span class="sym">: $</span>D<span class="sym">.</span>
   iub at<span class="sym">: $</span>k asInteger put<span class="sym">: $</span>M<span class="sym">.</span> iub at<span class="sym">: $</span>K asInteger put<span class="sym">: $</span>M<span class="sym">.</span>
   iub at<span class="sym">: $</span>m asInteger put<span class="sym">: $</span>K<span class="sym">.</span> iub at<span class="sym">: $</span>M asInteger put<span class="sym">: $</span>K<span class="sym">.</span>
   iub at<span class="sym">: $</span>n asInteger put<span class="sym">: $</span>N<span class="sym">.</span> iub at<span class="sym">: $</span>N asInteger put<span class="sym">: $</span>N<span class="sym">.</span>
   iub at<span class="sym">: $</span>r asInteger put<span class="sym">: $</span>Y<span class="sym">.</span> iub at<span class="sym">: $</span>R asInteger put<span class="sym">: $</span>Y<span class="sym">.</span>
   iub at<span class="sym">: $</span>s asInteger put<span class="sym">: $</span>S<span class="sym">.</span> iub at<span class="sym">: $</span>S asInteger put<span class="sym">: $</span>S<span class="sym">.</span>
   iub at<span class="sym">: $</span>t asInteger put<span class="sym">: $</span>A<span class="sym">.</span> iub at<span class="sym">: $</span>T asInteger put<span class="sym">: $</span>A<span class="sym">.</span>
   iub at<span class="sym">: $</span>v asInteger put<span class="sym">: $</span>B<span class="sym">.</span> iub at<span class="sym">: $</span>V asInteger put<span class="sym">: $</span>B<span class="sym">.</span>
   iub at<span class="sym">: $</span>w asInteger put<span class="sym">: $</span>W<span class="sym">.</span> iub at<span class="sym">: $</span>W asInteger put<span class="sym">: $</span>W<span class="sym">.</span>
   iub at<span class="sym">: $</span>y asInteger put<span class="sym">: $</span>R<span class="sym">.</span> iub at<span class="sym">: $</span>Y asInteger put<span class="sym">: $</span>R<span class="sym">.</span>

   <span class="kwa">self</span> nextPutAll<span class="sym">:</span> aString<span class="sym">;</span> cr<span class="sym">.</span>

   <span class="sym">[</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">]</span> whileTrue<span class="sym">: [</span>
         <span class="num">1</span> to<span class="sym">: ((</span>n <span class="sym">&lt;</span> lineLength<span class="sym">)</span> ifTrue<span class="sym">: [</span>n<span class="sym">]</span> ifFalse<span class="sym">: [</span>lineLength<span class="sym">])</span> do<span class="sym">:</span>
            <span class="sym">[:</span>i <span class="sym">|</span> <span class="kwa">self</span> nextPut<span class="sym">: (</span>iub at<span class="sym">: (</span>aSequence at<span class="sym">:</span> n <span class="sym">-</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> asInteger<span class="sym">)].</span>
         <span class="kwa">self</span> cr<span class="sym">.</span>
         n <span class="sym">:=</span> n <span class="sym">-</span> lineLength<span class="sym">.</span>
      <span class="sym">] ! !</span>
