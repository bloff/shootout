<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Eliot Miranda and Isaac Gouy *&quot;</span><span class="hl sym">!</span>


<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>
reverseComplement<span class="hl sym">:</span> sequence named<span class="hl sym">:</span> sequenceName to<span class="hl sym">:</span> output
   <span class="hl sym">|</span> complement newline lineLength n <span class="hl sym">|</span>
   <span class="hl sym">(</span>sequenceName isNil<span class="hl sym">)</span> ifTrue<span class="hl sym">: [^</span><span class="hl kwa">self</span><span class="hl sym">].</span>

   complement <span class="hl sym">:=</span> String new<span class="hl sym">:</span> <span class="hl num">128</span> withAll<span class="hl sym">: $*.</span>

   <span class="hl str">'ABCDGHKMNRSTVWY'</span> with<span class="hl sym">:</span>
   <span class="hl str">'TVGHCDMKNYSABWR'</span>
      do<span class="hl sym">: [:</span>a <span class="hl sym">:</span>b<span class="hl sym">|</span>
         complement at<span class="hl sym">:</span> a asInteger put<span class="hl sym">:</span> b<span class="hl sym">.</span>
         complement at<span class="hl sym">:</span> a asLowercase asInteger put<span class="hl sym">:</span> b<span class="hl sym">].</span>

   newline <span class="hl sym">:=</span> Character lf<span class="hl sym">.</span>
   lineLength <span class="hl sym">:=</span> <span class="hl num">60</span><span class="hl sym">.</span>
   n <span class="hl sym">:=</span> sequence size<span class="hl sym">.</span>

   output nextPutAll<span class="hl sym">:</span> sequenceName<span class="hl sym">;</span> nextPut<span class="hl sym">:</span> newline<span class="hl sym">.</span>

   <span class="hl sym">[</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">]</span> whileTrue<span class="hl sym">: [</span>
         <span class="hl num">1</span> to<span class="hl sym">: ((</span>n <span class="hl sym">&lt;</span> lineLength<span class="hl sym">)</span> ifTrue<span class="hl sym">: [</span>n<span class="hl sym">]</span> ifFalse<span class="hl sym">: [</span>lineLength<span class="hl sym">])</span> do<span class="hl sym">:</span>
            <span class="hl sym">[:</span>i <span class="hl sym">|</span> output nextPut<span class="hl sym">:</span>
               <span class="hl sym">(</span>complement at<span class="hl sym">: (</span>sequence at<span class="hl sym">:</span> n <span class="hl sym">-</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> asInteger<span class="hl sym">)].</span>
         output nextPut<span class="hl sym">:</span> newline<span class="hl sym">.</span>
         n <span class="hl sym">:=</span> n <span class="hl sym">-</span> lineLength<span class="hl sym">.</span>
      <span class="hl sym">] ! !</span>


<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarking'</span><span class="hl sym">!</span>
readFasta<span class="hl sym">:</span> sequenceName from<span class="hl sym">:</span> input
   <span class="hl sym">|</span> prefix newline buffer description line char <span class="hl sym">|</span>
   prefix <span class="hl sym">:=</span> <span class="hl str">'&gt;'</span><span class="hl sym">,</span>sequenceName<span class="hl sym">.</span>
   newline <span class="hl sym">:=</span> Character cr<span class="hl sym">.</span>

   <span class="hl com">&quot;* find start of particular fasta sequence *&quot;</span>
   <span class="hl sym">[(</span>input atEnd<span class="hl sym">)</span> or<span class="hl sym">: [</span>
         <span class="hl sym">(</span>input peek <span class="hl sym">= $&gt;)</span>
            ifTrue<span class="hl sym">: [((</span>line <span class="hl sym">:=</span> input upTo<span class="hl sym">:</span> newline<span class="hl sym">)</span>
               indexOfSubCollection<span class="hl sym">:</span> prefix startingAt<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">) =</span> <span class="hl num">1</span><span class="hl sym">]</span>
            ifFalse<span class="hl sym">: [</span>input skipThrough<span class="hl sym">:</span> newline<span class="hl sym">.</span> <span class="hl kwa">false</span><span class="hl sym">]]</span>
      <span class="hl sym">]</span> whileFalse<span class="hl sym">.</span>

   <span class="hl com">&quot;* line-by-line read - it would be a lot faster to block read *&quot;</span>
   description <span class="hl sym">:=</span> line<span class="hl sym">.</span>
   buffer <span class="hl sym">:=</span> ReadWriteStream on<span class="hl sym">: (</span>String new<span class="hl sym">:</span> <span class="hl num">1028</span><span class="hl sym">).</span>
   <span class="hl sym">[(</span>input atEnd<span class="hl sym">)</span> or<span class="hl sym">: [(</span>char <span class="hl sym">:=</span> input peek<span class="hl sym">) = $&gt;]]</span> whileFalse<span class="hl sym">: [</span>
      <span class="hl sym">(</span>char <span class="hl sym">= $;)</span>
         ifTrue<span class="hl sym">: [</span>input upTo<span class="hl sym">:</span> newline<span class="hl sym">]</span>
         ifFalse<span class="hl sym">: [</span>buffer nextPutAll<span class="hl sym">: (</span>input upTo<span class="hl sym">:</span> newline<span class="hl sym">)]</span>
      <span class="hl sym">].</span>
   <span class="hl sym">^</span>Association key<span class="hl sym">:</span> description value<span class="hl sym">:</span> buffer contents <span class="hl sym">! !</span>


<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmark scripts'</span><span class="hl sym">!</span>
revcomp
   <span class="hl sym">|</span> input output <span class="hl sym">|</span>
   input <span class="hl sym">:=</span> <span class="hl kwa">self</span> stdinSpecial<span class="hl sym">.</span>
   output <span class="hl sym">:=</span> <span class="hl kwa">self</span> stdoutSpecial<span class="hl sym">.</span>

   <span class="hl sym">#(</span><span class="hl str">'ONE'</span> <span class="hl str">'TWO'</span> <span class="hl str">'THREE'</span><span class="hl sym">)</span> do<span class="hl sym">:</span>
      <span class="hl sym">[:</span>sequenceName<span class="hl sym">|   |</span> fasta <span class="hl sym">|</span>
         fasta <span class="hl sym">:=</span> <span class="hl kwa">self</span> readFasta<span class="hl sym">:</span> sequenceName from<span class="hl sym">:</span> input<span class="hl sym">.</span>
         <span class="hl kwa">self</span> reverseComplement<span class="hl sym">:</span> fasta value named<span class="hl sym">:</span> fasta key to<span class="hl sym">:</span> output<span class="hl sym">.</span>
      <span class="hl sym">].</span>

   output flush<span class="hl sym">.</span>
   <span class="hl sym">^</span><span class="hl str">''</span> <span class="hl sym">! !</span>
