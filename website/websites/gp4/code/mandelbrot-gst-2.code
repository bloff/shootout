<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Paolo Bonzini</span>
<span class="com">*&quot;</span>

<span class="sym">|</span> width height m bits s zr zi cr ci i tr stepr stepi <span class="sym">|</span>
width <span class="sym">:=</span> Smalltalk arguments first asInteger<span class="sym">.</span>
height <span class="sym">:=</span> width<span class="sym">.</span>
m <span class="sym">:=</span> <span class="num">50</span><span class="sym">.</span>
s <span class="sym">:=</span> FileStream stdout bufferSize<span class="sym">:</span> <span class="num">4096</span><span class="sym">.</span>
s nextPutAll<span class="sym">:</span> <span class="str">'P4'</span><span class="sym">;</span> nl<span class="sym">;</span> nextPutAll<span class="sym">:</span> width printString<span class="sym">,</span> <span class="str">' '</span><span class="sym">,</span> height
printString<span class="sym">;</span> nl<span class="sym">.</span>

stepr <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">/</span> width<span class="sym">.</span>
stepi <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">/</span> height<span class="sym">.</span>

<span class="num">0</span> to<span class="sym">:</span> height <span class="sym">-</span> <span class="num">1</span> do<span class="sym">: [ :</span>y <span class="sym">|</span>
    bits <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
    ci <span class="sym">:=</span> stepi <span class="sym">*</span> y asFloat <span class="sym">-</span> <span class="num">1.0</span><span class="sym">.</span>
    <span class="num">0</span> to<span class="sym">:</span> width <span class="sym">-</span> <span class="num">1</span> do<span class="sym">: [ :</span>x <span class="sym">|</span>
        cr <span class="sym">:=</span> stepr <span class="sym">*</span> x asFloat <span class="sym">-</span> <span class="num">1.5</span><span class="sym">.</span>
        zr <span class="sym">:=</span> cr<span class="sym">.</span> zi <span class="sym">:=</span> ci<span class="sym">.</span>

        bits <span class="sym">:=</span> bits bitShift<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span>
        i <span class="sym">:=</span> <span class="num">1</span><span class="sym">.</span>
        <span class="sym">[</span>
            tr <span class="sym">:= (</span>zr<span class="sym">*</span>zr<span class="sym">) - (</span>zi<span class="sym">*</span>zi<span class="sym">) +</span> cr<span class="sym">.</span>
            zi <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> zr <span class="sym">*</span> zi <span class="sym">+</span> ci<span class="sym">.</span>
            zr <span class="sym">:=</span> tr<span class="sym">.</span>
            <span class="sym">(</span>zr<span class="sym">*</span>zr<span class="sym">) + (</span>zi<span class="sym">*</span>zi<span class="sym">) &lt;</span> <span class="num">4.0</span> and<span class="sym">: [ (</span>i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">) &lt;</span> m <span class="sym">]</span>
        <span class="sym">]</span> whileTrue<span class="sym">.</span>

        i <span class="sym">=</span> m ifTrue<span class="sym">: [</span> bits <span class="sym">:=</span> bits <span class="sym">+</span> <span class="num">1</span> <span class="sym">].</span>
        <span class="sym">(</span>x bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">) ==</span> <span class="num">7</span> ifTrue<span class="sym">: [</span>
            s nextPutByte<span class="sym">:</span> bits<span class="sym">.</span>
            bits <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
        <span class="sym">]</span>
    <span class="sym">].</span>
    <span class="sym">(</span>width bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">) ==</span> <span class="num">0</span> ifFalse<span class="sym">: [</span>
        bits <span class="sym">:=</span> bits bitShift<span class="sym">:</span> <span class="num">8</span> <span class="sym">- (</span>width bitAnd<span class="sym">:</span> <span class="num">7</span><span class="sym">).</span>
        s nextPutByte<span class="sym">:</span> bits<span class="sym">.</span>
    <span class="sym">]</span>
<span class="sym">] !</span>
