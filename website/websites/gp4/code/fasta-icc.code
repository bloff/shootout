<span class="com">/* -*- mode: c -*-
 * $Id: fasta-icc.code,v 1.3 2005-10-30 04:35:07 igouy-guest Exp $
 * http://shootout.alioth.debian.org/
 *
 * by Paul Hsieh
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span>
<span class="dir">#define IM 139968
</span><span class="dir">#define IA   3877
</span><span class="dir">#define IC  29573
</span>
<span class="kwb">double</span> gen_random <span class="sym">(</span><span class="kwb">double</span> max<span class="sym">) {
</span>    <span class="kwb">static long</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;
</span>    <span class="kwa">return</span> max <span class="sym">* (</span>last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) /</span> IM<span class="sym">;
}

</span><span class="kwb">struct</span> aminoacids <span class="sym">{
</span>    <span class="kwb">char</span> c<span class="sym">;
</span>    <span class="kwb">double</span> p<span class="sym">;
};

</span><span class="com">/* Weighted selection from alphabet */</span>

<span class="kwb">void</span> makeCumulative <span class="sym">(</span><span class="kwb">struct</span> aminoacids <span class="sym">*</span> genelist<span class="sym">,</span> <span class="kwb">int</span> count<span class="sym">) {
</span>    <span class="kwb">double</span> cp <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">int</span> i<span class="sym">;

</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> count<span class="sym">;</span> i<span class="sym">++) {
</span>        cp <span class="sym">+=</span> genelist<span class="sym">[</span>i<span class="sym">].</span>p<span class="sym">;
</span>        genelist<span class="sym">[</span>i<span class="sym">].</span>p <span class="sym">=</span> cp<span class="sym">;
    }
}

</span><span class="kwb">char</span> selectRandom <span class="sym">(</span><span class="kwb">const struct</span> aminoacids <span class="sym">*</span> genelist<span class="sym">,</span> <span class="kwb">int</span> count<span class="sym">) {
</span>    <span class="kwb">double</span> r <span class="sym">=</span> gen_random <span class="sym">(</span><span class="num">1</span><span class="sym">);
</span>    <span class="kwb">int</span> i<span class="sym">,</span> lo<span class="sym">,</span> hi<span class="sym">;

</span>    <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&lt;</span> genelist<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>p<span class="sym">)</span> <span class="kwa">return</span> genelist<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>c<span class="sym">;

</span>    lo <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    hi <span class="sym">=</span> count<span class="num">-1</span><span class="sym">;

</span>    <span class="kwa">while</span> <span class="sym">(</span>hi <span class="sym">&gt;</span> lo<span class="sym">+</span><span class="num">1</span><span class="sym">) {
</span>        i <span class="sym">= (</span>hi <span class="sym">+</span> lo<span class="sym">) /</span> <span class="num">2</span><span class="sym">;
</span>        <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&lt;</span> genelist<span class="sym">[</span>i<span class="sym">].</span>p<span class="sym">)</span> hi <span class="sym">=</span> i<span class="sym">;</span> <span class="kwa">else</span> lo <span class="sym">=</span> i<span class="sym">;
    }
</span>    <span class="kwa">return</span> genelist<span class="sym">[</span>hi<span class="sym">].</span>c<span class="sym">;
}

</span><span class="com">/* Generate and write FASTA format */</span>

<span class="dir">#define LINE_LENGTH (60)
</span>
<span class="kwb">void</span> makeRandomFasta <span class="sym">(</span><span class="kwb">const char</span> <span class="sym">*</span> id<span class="sym">,</span> <span class="kwb">const char</span> <span class="sym">*</span> desc<span class="sym">,</span> <span class="kwb">const struct
</span>aminoacids <span class="sym">*</span> genelist<span class="sym">,</span> <span class="kwb">int</span> count<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {
</span>   <span class="kwb">int</span> todo <span class="sym">=</span> n<span class="sym">;
</span>   <span class="kwb">int</span> i<span class="sym">,</span> m<span class="sym">;

</span>   printf <span class="sym">(</span><span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> id<span class="sym">,</span> desc<span class="sym">);

</span>   <span class="kwa">for</span> <span class="sym">(;</span> todo <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> todo <span class="sym">-=</span> LINE_LENGTH<span class="sym">) {
</span>       <span class="kwb">char</span> pick<span class="sym">[</span>LINE_LENGTH<span class="sym">+</span><span class="num">1</span><span class="sym">];
</span>       <span class="kwa">if</span> <span class="sym">(</span>todo <span class="sym">&lt;</span> LINE_LENGTH<span class="sym">)</span> m <span class="sym">=</span> todo<span class="sym">;</span> <span class="kwa">else</span> m <span class="sym">=</span> LINE_LENGTH<span class="sym">;
</span>       <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> m<span class="sym">;</span> i<span class="sym">++)</span> pick<span class="sym">[</span>i<span class="sym">] =</span> selectRandom <span class="sym">(</span>genelist<span class="sym">,</span> count<span class="sym">);
</span>       pick<span class="sym">[</span>m<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span>       puts <span class="sym">(</span>pick<span class="sym">);
   }
}

</span><span class="kwb">void</span> makeRepeatFasta <span class="sym">(</span><span class="kwb">const char</span> <span class="sym">*</span> id<span class="sym">,</span> <span class="kwb">const char</span> <span class="sym">*</span> desc<span class="sym">,</span> <span class="kwb">const char</span> <span class="sym">*
</span>s<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {
</span>   <span class="kwb">char</span> <span class="sym">*</span> ss<span class="sym">;
</span>   <span class="kwb">int</span> todo <span class="sym">=</span> n<span class="sym">,</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> kn <span class="sym">=</span> strlen <span class="sym">(</span>s<span class="sym">);
</span>   <span class="kwb">int</span> m<span class="sym">;

</span>   ss <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">*)</span> malloc <span class="sym">(</span>kn <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span>   memcpy <span class="sym">(</span>ss<span class="sym">,</span> s<span class="sym">,</span> kn<span class="sym">+</span><span class="num">1</span><span class="sym">);

</span>   printf <span class="sym">(</span><span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> id<span class="sym">,</span> desc<span class="sym">);

</span>   <span class="kwa">for</span> <span class="sym">(;</span> todo <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> todo <span class="sym">-=</span> LINE_LENGTH<span class="sym">) {
</span>       <span class="kwa">if</span> <span class="sym">(</span>todo <span class="sym">&lt;</span> LINE_LENGTH<span class="sym">)</span> m <span class="sym">=</span> todo<span class="sym">;</span> <span class="kwa">else</span> m <span class="sym">=</span> LINE_LENGTH<span class="sym">;

</span>       <span class="kwa">while</span> <span class="sym">(</span>m <span class="sym">&gt;=</span> kn <span class="sym">-</span> k<span class="sym">) {
</span>           printf <span class="sym">(</span><span class="str">&quot;%s&quot;</span><span class="sym">,</span> s<span class="sym">+</span>k<span class="sym">);
</span>           m <span class="sym">-=</span> kn <span class="sym">-</span> k<span class="sym">;
</span>           k <span class="sym">=</span> <span class="num">0</span><span class="sym">;
       }

</span>       ss<span class="sym">[</span>k <span class="sym">+</span> m<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span>       puts <span class="sym">(</span>ss<span class="sym">+</span>k<span class="sym">);
</span>       ss<span class="sym">[</span>k <span class="sym">+</span> m<span class="sym">] =</span> s<span class="sym">[</span>m<span class="sym">+</span>k<span class="sym">];
</span>       k <span class="sym">+=</span> m<span class="sym">;
   }

</span>   free <span class="sym">(</span>ss<span class="sym">);
}

</span><span class="com">/* Main -- define alphabets, make 3 fragments */</span>

<span class="kwb">struct</span> aminoacids iub<span class="sym">[] = {
    {</span> <span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span> <span class="sym">},
    {</span> <span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span> <span class="sym">},
    {</span> <span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span> <span class="sym">},
    {</span> <span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span> <span class="sym">},

    {</span> <span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},
    {</span> <span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},
    {</span> <span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},
    {</span> <span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},
    {</span> <span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},
    {</span> <span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},
    {</span> <span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},
    {</span> <span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},
    {</span> <span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},
    {</span> <span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},
    {</span> <span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">}
};

</span><span class="dir">#define IUB_LEN (sizeof (iub) / sizeof (struct aminoacids))
</span>
<span class="kwb">struct</span> aminoacids homosapiens<span class="sym">[] = {
    {</span> <span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span> <span class="sym">},
    {</span> <span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span> <span class="sym">},
    {</span> <span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span> <span class="sym">},
    {</span> <span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span> <span class="sym">},
};

</span><span class="dir">#define HOMOSAPIENS_LEN (sizeof (homosapiens) / sizeof (struct aminoacids))
</span>
<span class="kwb">char</span> <span class="sym">*</span> alu <span class="sym">=
</span>   <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> \
   <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> \
   <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> \
   <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> \
   <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> \
   <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> \
   <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;

</span><span class="kwb">int</span> main <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span> argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1000</span><span class="sym">;

</span>    <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> sscanf <span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">],</span> <span class="str">&quot;%d&quot;</span><span class="sym">, &amp;</span>n<span class="sym">);

</span>    makeCumulative <span class="sym">(</span>iub<span class="sym">,</span> IUB_LEN<span class="sym">);
</span>    makeCumulative <span class="sym">(</span>homosapiens<span class="sym">,</span> HOMOSAPIENS_LEN<span class="sym">);

</span>    makeRepeatFasta <span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> alu<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">);
</span>    makeRandomFasta <span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> iub<span class="sym">,</span> IUB_LEN<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">);
</span>    makeRandomFasta <span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> homosapiens<span class="sym">,
</span>HOMOSAPIENS_LEN<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">);

</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}
</span>
