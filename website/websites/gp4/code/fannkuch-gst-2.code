<span class="str">&quot;  The Computer Language Shootout</span>
<span class="str">   http://shootout.alioth.debian.org/</span>
<span class="str"></span>
<span class="str">   contributed by Paolo Bonzini</span>
<span class="str">   would have never gotten the permutation right without Isaac Gouy's program &quot;</span>

Object subclass<span class="sym">:</span> <span class="slc">#PermGenerator</span>
	instanceVariableNames<span class="sym">:</span> <span class="str">'count perm atEnd'</span>
	classVariableNames<span class="sym">:</span> <span class="str">''</span>
	poolDictionaries<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> nil<span class="sym">!</span>

<span class="sym">!</span>PermGenerator class methodsFor<span class="sym">:</span> <span class="str">'create'</span><span class="sym">!</span>

new<span class="sym">:</span> size
    ^self new
	initialize<span class="sym">:</span> size<span class="sym">;</span>
	yourself<span class="sym">! !</span>

<span class="sym">!</span>PermGenerator methodsFor<span class="sym">:</span> <span class="str">'create'</span><span class="sym">!</span>

atEnd
    ^atEnd<span class="sym">!</span>

<span class="kwa">next</span>
    <span class="sym">|</span> result size temp i j r remainder <span class="sym">|</span>
    result <span class="sym">:=</span> perm copy.

    <span class="str">&quot;Generate the next permutation.&quot;</span>
    size <span class="sym">:=</span> perm size.
    r <span class="sym">:=</span> <span class="num">2</span>.
    <span class="sym">[</span>
        temp <span class="sym">:=</span> perm at<span class="sym">:</span> <span class="num">1</span>.
        <span class="num">1</span> to<span class="sym">:</span> r <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span><span class="sym">: [ :</span>i <span class="sym">|</span>
            perm at<span class="sym">:</span> i put<span class="sym">: (</span>perm at<span class="sym">:</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">) ]</span>.
        perm at<span class="sym">:</span> r put<span class="sym">:</span> temp.

        remainder <span class="sym">:=</span> count at<span class="sym">:</span> r put<span class="sym">: (</span>count at<span class="sym">:</span> r<span class="sym">) -</span> <span class="num">1</span>.
        remainder <span class="sym">==</span> <span class="num">1</span> <span class="kwa">and</span><span class="sym">: [ (</span>r <span class="sym">:=</span> r <span class="sym">+</span> <span class="num">1</span><span class="sym">) &lt;=</span> size <span class="sym">]</span>
    <span class="sym">]</span> whileTrue.
    atEnd <span class="sym">:=</span> r <span class="sym">&gt;</span> size.

    <span class="str">&quot;compiler bug in gst 2.2?&quot;</span>
    <span class="str">&quot;1 to: r - 1 do: [ :i |</span>
<span class="str">	count at: r put: r + 1 ].&quot;</span>

    <span class="sym">[ (</span>r <span class="sym">:=</span> r <span class="sym">-</span> <span class="num">1</span><span class="sym">) &gt;=</span> <span class="num">1</span> <span class="sym">]</span> whileTrue<span class="sym">: [</span>
        count at<span class="sym">:</span> r put<span class="sym">:</span> r <span class="sym">+</span> <span class="num">1</span> <span class="sym">]</span>.
    ^result<span class="sym">!</span>

initialize<span class="sym">:</span> size
    perm <span class="sym">:= (</span><span class="num">1</span> to<span class="sym">:</span> size<span class="sym">)</span> asArray.
    count <span class="sym">:= (</span><span class="num">2</span> to<span class="sym">:</span> size <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> asArray.
    atEnd <span class="sym">:=</span> false<span class="sym">! !</span>

<span class="sym">!</span>Array methodsFor<span class="sym">:</span> <span class="str">'pfannkuchen'</span><span class="sym">!</span>

pfannkuchen
    <span class="sym">|</span> first complement a b k <span class="sym">|</span>
    k <span class="sym">:=</span> <span class="num">0</span>.
    <span class="sym">[ (</span>first <span class="sym">:=</span> self at<span class="sym">:</span> <span class="num">1</span><span class="sym">) ==</span> <span class="num">1</span> <span class="sym">]</span> whileFalse<span class="sym">: [</span>
	k <span class="sym">:=</span> k <span class="sym">+</span> <span class="num">1</span>.
	complement <span class="sym">:=</span> first <span class="sym">+</span> <span class="num">1</span>.
	<span class="num">1</span> to<span class="sym">:</span> first <span class="sym">//</span> <span class="num">2</span> <span class="kwa">do</span><span class="sym">: [ :</span>i <span class="sym">|</span>
	    a <span class="sym">:=</span> self at<span class="sym">:</span> i.
	    b <span class="sym">:=</span> self at<span class="sym">:</span> complement <span class="sym">-</span> i.
	    self at<span class="sym">:</span> i put<span class="sym">:</span> b.
	    self at<span class="sym">:</span> complement <span class="sym">-</span> i put<span class="sym">:</span> a.
	<span class="sym">]</span>
    <span class="sym">]</span>.
    ^k<span class="sym">! !</span>

<span class="sym">!</span>Integer methodsFor<span class="sym">:</span> <span class="str">'pfannkuchen'</span><span class="sym">!</span>

maxPfannkuchen
    <span class="sym">|</span> max gen perm check <span class="sym">|</span>
    max <span class="sym">:=</span> <span class="num">0</span>.
    check <span class="sym">:=</span> <span class="num">0</span>.
    gen <span class="sym">:=</span> PermGenerator new<span class="sym">:</span> self.
    <span class="sym">[</span> gen atEnd <span class="sym">]</span> whileFalse<span class="sym">: [</span>
	perm <span class="sym">:=</span> gen <span class="kwa">next</span>.
        check <span class="sym">&lt;</span> <span class="num">30</span> ifTrue<span class="sym">: [</span>
	    perm <span class="kwa">do</span><span class="sym">: [ :</span>each <span class="sym">|</span> each print <span class="sym">]</span>.
	    Transcript nl.
	    check <span class="sym">:=</span> check <span class="sym">+</span> <span class="num">1</span> <span class="sym">]</span>.
	max <span class="sym">:=</span> max max<span class="sym">:</span> perm pfannkuchen
    <span class="sym">]</span>.
    ^max<span class="sym">! !</span>

<span class="sym">|</span> n <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger.
Transcript
    show<span class="sym">: (</span><span class="str">'Pfannkuchen(%1) = %2'</span> bindWith<span class="sym">:</span> n with<span class="sym">:</span> n maxPfannkuchen<span class="sym">);</span>
    nl<span class="sym">!</span>
