<span class="hl com">{  The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Marco van de Voort</span>
<span class="hl com">}</span>

<span class="hl kwa">program</span> reverse_complement<span class="hl sym">;</span>

<span class="hl com">{$mode delphi}</span>

<span class="hl kwa">var</span> lookupComplement <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl esc">#0</span><span class="hl sym">..</span><span class="hl esc">#255</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">char</span><span class="hl sym">;</span>

<span class="hl kwa">Const</span> FASTAXLAT <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.11</span><span class="hl sym">]</span> <span class="hl kwa">of array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.1</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">char</span> <span class="hl sym">= (</span>
		  <span class="hl sym">(</span> <span class="hl str">'A'</span><span class="hl sym">,</span> <span class="hl str">'T'</span> <span class="hl sym">), (</span> <span class="hl str">'C'</span><span class="hl sym">,</span> <span class="hl str">'G'</span> <span class="hl sym">),</span>
		  <span class="hl sym">(</span> <span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl str">'V'</span> <span class="hl sym">), (</span> <span class="hl str">'D'</span><span class="hl sym">,</span> <span class="hl str">'H'</span> <span class="hl sym">),</span>
	          <span class="hl sym">(</span> <span class="hl str">'K'</span><span class="hl sym">,</span> <span class="hl str">'M'</span> <span class="hl sym">), (</span> <span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl str">'Y'</span> <span class="hl sym">),</span>
		  <span class="hl sym">(</span> <span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl str">'t'</span> <span class="hl sym">), (</span> <span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl str">'g'</span> <span class="hl sym">),</span>
		  <span class="hl sym">(</span> <span class="hl str">'b'</span><span class="hl sym">,</span> <span class="hl str">'v'</span> <span class="hl sym">), (</span> <span class="hl str">'d'</span><span class="hl sym">,</span> <span class="hl str">'h'</span> <span class="hl sym">),</span>
	          <span class="hl sym">(</span> <span class="hl str">'k'</span><span class="hl sym">,</span> <span class="hl str">'m'</span> <span class="hl sym">), (</span> <span class="hl str">'r'</span><span class="hl sym">,</span> <span class="hl str">'y'</span> <span class="hl sym">));</span>

      BufferIncrement <span class="hl sym">=</span> <span class="hl num">1024</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">flushbuffer</span><span class="hl sym">(</span>buffer<span class="hl sym">:</span>pchar<span class="hl sym">;</span>inbuf<span class="hl sym">:</span><span class="hl kwb">longint</span><span class="hl sym">);</span>

<span class="hl kwa">var</span> p<span class="hl sym">,</span>p2 <span class="hl sym">:</span> pchar<span class="hl sym">;</span>
    c  <span class="hl sym">:</span> <span class="hl kwb">char</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> inbuf<span class="hl sym">&gt;</span><span class="hl num">0</span> <span class="hl kwa">then</span>
   <span class="hl kwa">begin</span>
     p<span class="hl sym">:=</span>buffer<span class="hl sym">;</span>
     p2<span class="hl sym">:=&#64;</span>buffer<span class="hl sym">[</span>inbuf<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">];</span>
     <span class="hl kwa">while</span> p<span class="hl sym">&lt;</span>p2 <span class="hl kwa">do</span>
      <span class="hl kwa">begin</span>
       c<span class="hl sym">:=</span>lookupcomplement<span class="hl sym">[</span>p<span class="hl sym">^];</span>
       p<span class="hl sym">^:=</span>lookupcomplement<span class="hl sym">[</span>p2<span class="hl sym">^];</span>
       p2<span class="hl sym">^:=</span>c<span class="hl sym">;</span>
       <span class="hl kwd">inc</span><span class="hl sym">(</span>p<span class="hl sym">);</span>
       <span class="hl kwd">dec</span><span class="hl sym">(</span>p2<span class="hl sym">);</span>
     <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwa">if</span> p2<span class="hl sym">=</span>p <span class="hl kwa">then</span>
      p<span class="hl sym">^:=</span>lookupcomplement<span class="hl sym">[</span>p<span class="hl sym">^];</span>

    p<span class="hl sym">:=</span>buffer<span class="hl sym">;</span>
    p<span class="hl sym">[</span>inbuf<span class="hl sym">]:=</span><span class="hl esc">#0</span><span class="hl sym">;</span>

   <span class="hl kwa">while</span> <span class="hl sym">(</span>inbuf <span class="hl sym">&gt;</span> <span class="hl num">60</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
     <span class="hl kwa">begin</span>
    	c <span class="hl sym">:=</span> p<span class="hl sym">[</span><span class="hl num">60</span><span class="hl sym">];</span>
	p<span class="hl sym">[</span><span class="hl num">60</span><span class="hl sym">]:=</span><span class="hl esc">#0</span><span class="hl sym">;</span>
        <span class="hl kwd">writeln</span><span class="hl sym">(</span>p<span class="hl sym">);</span>
        p<span class="hl sym">[</span><span class="hl num">60</span><span class="hl sym">]:=</span>c<span class="hl sym">;</span>
	<span class="hl kwd">inc</span><span class="hl sym">(</span>p<span class="hl sym">,</span><span class="hl num">60</span><span class="hl sym">);</span>
	<span class="hl kwd">dec</span><span class="hl sym">(</span>inbuf<span class="hl sym">,</span><span class="hl num">60</span><span class="hl sym">);</span>
     <span class="hl kwa">end</span><span class="hl sym">;</span>
     p<span class="hl sym">[</span>inbuf<span class="hl sym">]:=</span><span class="hl esc">#0</span><span class="hl sym">;</span>
     <span class="hl kwd">writeln</span><span class="hl sym">(</span>p<span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">const</span> initialincrement<span class="hl sym">=</span><span class="hl num">1024</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> run<span class="hl sym">;</span>

<span class="hl kwa">var</span> s  <span class="hl sym">:</span> <span class="hl kwa">string</span><span class="hl sym">;</span>
    c  <span class="hl sym">:</span> <span class="hl kwb">char</span><span class="hl sym">;</span>
    buffersize<span class="hl sym">,</span>
    bufferptr<span class="hl sym">,</span>
    len		<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
    p  <span class="hl sym">:</span>pchar<span class="hl sym">;</span>
    line <span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
    bufin<span class="hl sym">,</span>bufout <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.8191</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">char</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  <span class="hl kwd">settextbuf</span><span class="hl sym">(</span>input<span class="hl sym">,</span>bufin<span class="hl sym">);</span>
  <span class="hl kwd">settextbuf</span><span class="hl sym">(</span>output<span class="hl sym">,</span>bufout<span class="hl sym">);</span>
  <span class="hl kwa">for</span> c<span class="hl sym">:=</span><span class="hl esc">#0</span>  <span class="hl kwa">to</span> <span class="hl esc">#255</span>  <span class="hl kwa">do</span>
    lookupcomplement<span class="hl sym">[</span>c<span class="hl sym">]:=</span>c<span class="hl sym">;</span>
  <span class="hl kwa">for</span> len<span class="hl sym">:=</span><span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl kwd">high</span><span class="hl sym">(</span>FASTAXLAT<span class="hl sym">)</span> <span class="hl kwa">do</span>
    <span class="hl kwa">begin</span>
      lookupcomplement<span class="hl sym">[</span>FASTAXLAT<span class="hl sym">[</span>len<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">]]:=</span><span class="hl kwd">upcase</span><span class="hl sym">(</span>FASTAXLAT<span class="hl sym">[</span>len<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">]);</span>
      lookupcomplement<span class="hl sym">[</span>FASTAXLAT<span class="hl sym">[</span>len<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">]]:=</span><span class="hl kwd">upcase</span><span class="hl sym">(</span>FASTAXLAT<span class="hl sym">[</span>len<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">]);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
  buffersize<span class="hl sym">:=</span>initialincrement<span class="hl sym">;</span>
  bufferptr <span class="hl sym">:=</span><span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwd">getmem</span><span class="hl sym">(</span>p<span class="hl sym">,</span>buffersize<span class="hl sym">);</span>
  line<span class="hl sym">:=</span><span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">while not</span> eof <span class="hl kwa">do</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwd">readln</span><span class="hl sym">(</span>s<span class="hl sym">);</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
      len<span class="hl sym">:=</span><span class="hl kwd">length</span><span class="hl sym">(</span>s<span class="hl sym">);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>len<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>s<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]=</span><span class="hl str">'&gt;'</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
          <span class="hl kwa">begin</span>
	    <span class="hl kwd">flushbuffer</span><span class="hl sym">(</span>p<span class="hl sym">,</span>bufferptr<span class="hl sym">);</span>
 	    <span class="hl kwd">writeln</span><span class="hl sym">(</span>s<span class="hl sym">);</span>
	    bufferptr<span class="hl sym">:=</span><span class="hl num">0</span><span class="hl sym">;</span>
	  <span class="hl kwa">end</span>
       <span class="hl kwa">else</span>
         <span class="hl kwa">begin</span>
           <span class="hl kwa">if</span> <span class="hl sym">(</span>bufferptr<span class="hl sym">+</span>len<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)&gt;</span>buffersize <span class="hl kwa">then</span>
	     <span class="hl kwa">begin</span>
	        <span class="hl kwd">inc</span><span class="hl sym">(</span>buffersize<span class="hl sym">,</span>buffersize<span class="hl sym">);</span>
<span class="hl slc">//	        inc(buffersize,initialincrement);</span>
                <span class="hl kwd">reallocmem</span><span class="hl sym">(</span>p<span class="hl sym">,</span>buffersize<span class="hl sym">);</span>
	     <span class="hl kwa">end</span><span class="hl sym">;</span>
	   <span class="hl kwd">move</span> <span class="hl sym">(</span>s<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span>p<span class="hl sym">[</span>bufferptr<span class="hl sym">],</span>len<span class="hl sym">);</span>
	   <span class="hl kwd">inc</span><span class="hl sym">(</span>bufferptr<span class="hl sym">,</span>len<span class="hl sym">);</span>
	 <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwd">flushbuffer</span><span class="hl sym">(</span>p<span class="hl sym">,</span>bufferptr<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  run<span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>
