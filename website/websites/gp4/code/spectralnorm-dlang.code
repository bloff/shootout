<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release spectralnorm.d</span>
<span class="com">*/</span>

import std<span class="sym">.</span>math<span class="sym">,</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span>      N <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">cast</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span><span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">2000</span><span class="sym">;</span>
    <span class="kwb">double</span><span class="sym">[]</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>N<span class="sym">],</span> v <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>N<span class="sym">],</span> w <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>N<span class="sym">];</span>
    <span class="kwb">double</span>   vBv <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> vv <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    u<span class="sym">[] =</span> <span class="num">1.0</span><span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwd">eval_AtA_times_u</span><span class="sym">(</span>u<span class="sym">,</span>v<span class="sym">,</span>w<span class="sym">);</span>
        <span class="kwd">eval_AtA_times_u</span><span class="sym">(</span>v<span class="sym">,</span>u<span class="sym">,</span>w<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwd">foreach</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">double</span> vi<span class="sym">;</span> v<span class="sym">)</span>
    <span class="sym">{</span>
        vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">] *</span> vi<span class="sym">;</span>
        vv  <span class="sym">+=</span> vi <span class="sym">*</span> vi<span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;%0.9f&quot;</span><span class="sym">,</span><span class="kwd">sqrt</span><span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">));</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">eval_AtA_times_u</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">[]</span> u<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> w<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwd">eval_A_times_u</span><span class="sym">(</span>u<span class="sym">,</span>w<span class="sym">);</span>
    <span class="kwd">eval_At_times_u</span><span class="sym">(</span>w<span class="sym">,</span>v<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">eval_A_times_u</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">[]</span> u<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> Au<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwd">foreach</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> inout <span class="kwb">double</span> Aui<span class="sym">;</span> Au<span class="sym">)</span>
    <span class="sym">{</span>
        Aui <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
        <span class="kwd">foreach</span><span class="sym">(</span><span class="kwb">int</span> j<span class="sym">,</span> <span class="kwb">double</span> uj<span class="sym">;</span> u<span class="sym">)</span>
        <span class="sym">{</span>
            Aui <span class="sym">+=</span> <span class="kwd">eval_A</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) *</span> u<span class="sym">[</span>j<span class="sym">];</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">eval_At_times_u</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">[]</span> u<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> Au<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwd">foreach</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> inout <span class="kwb">double</span> Aui<span class="sym">;</span> Au<span class="sym">)</span>
    <span class="sym">{</span>
        Aui <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
        <span class="kwd">foreach</span><span class="sym">(</span><span class="kwb">int</span> j<span class="sym">,</span> <span class="kwb">double</span> uj<span class="sym">;</span> u<span class="sym">)</span>
        <span class="sym">{</span>
            Aui <span class="sym">+=</span> <span class="kwd">eval_A</span><span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">) *</span> uj<span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">double</span> <span class="kwd">eval_A</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">return</span> <span class="num">1.0</span><span class="sym">/(((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">)+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
<span class="sym">}</span>
