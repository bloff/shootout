<span class="slc">-- $Id: random-gnat.code,v 1.1 2005-10-29 16:19:39 igouy-guest Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org
</span><span class="slc">-- Contributed by Pascal Obry on 2005/03/22
</span><span class="slc">-- Revised by Vasiliy Fofanov 2005/03/23
</span>
<span class="kwa">with</span> System<span class="sym">,</span> Ada.Command_Line<span class="sym">,</span> Ada.Text_IO<span class="sym">;

</span><span class="kwa">procedure</span> Random <span class="kwa">is
   type</span> Real <span class="kwa">is new</span> <span class="kwb">Long_Float</span><span class="sym">;
</span>   <span class="kwa">package</span> Rio <span class="kwa">is new</span> Ada.Text_IO.Float_IO <span class="sym">(</span>Num <span class="sym">=&gt;</span> Real<span class="sym">);

</span>   <span class="kwa">package</span> Random_Real <span class="kwa">is
      function</span> Gen_Random <span class="sym">(</span>Supr <span class="sym">:</span> Real<span class="sym">)</span> <span class="kwa">return</span> Real<span class="sym">;
</span>      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Gen_Random<span class="sym">);
</span>   <span class="kwa">end</span> Random_Real<span class="sym">;

</span>   <span class="kwa">package body</span> Random_Real <span class="kwa">is
</span>      IM          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">139968</span><span class="sym">;
</span>      IA          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">3877</span><span class="sym">;
</span>      IC          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">29573</span><span class="sym">;
</span>      Last        <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">42</span><span class="sym">;

</span>      <span class="kwa">function</span> Gen_Random <span class="sym">(</span>Supr <span class="sym">:</span> Real<span class="sym">)</span> <span class="kwa">return</span> Real <span class="kwa">is
         pragma</span> Suppress <span class="sym">(</span>Overflow_Check<span class="sym">);
</span>         <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Range_Check<span class="sym">);
</span>      <span class="kwa">begin
</span>         Last <span class="sym">:= (</span>Last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> <span class="kwa">mod</span> IM<span class="sym">;
</span>         <span class="kwa">return</span> Supr <span class="sym">*</span> Real <span class="sym">(</span>Last<span class="sym">) /</span> Real <span class="sym">(</span>IM<span class="sym">);
</span>      <span class="kwa">end</span> Gen_Random<span class="sym">;
</span>         <span class="slc">--  Assume no overflow for &quot;Natural ((IM - 1) * IA + IC)&quot;
</span>   <span class="kwa">end</span> Random_Real<span class="sym">;

</span>   Result   <span class="sym">:</span> Real<span class="sym">;
</span>   N        <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">begin
   begin
</span>      N <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">exception
      when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span>   <span class="kwa">end</span><span class="sym">;
</span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop
</span>      Result <span class="sym">:=</span> Random_Real.Gen_Random <span class="sym">(</span>Supr <span class="sym">=&gt;</span> <span class="num">100.0</span><span class="sym">);
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   Rio.Put <span class="sym">(</span>Result<span class="sym">,</span> Fore <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>   Ada.Text_IO.New_Line<span class="sym">;
</span><span class="kwa">end</span> Random<span class="sym">;</span>
