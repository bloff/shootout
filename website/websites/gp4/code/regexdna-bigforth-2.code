<span class="slc">\ The Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>

<span class="slc">\ contributed by Bernd Paysan</span>

<span class="slc">\ run with &quot;-m 64M&quot;</span>

include locals<span class="sym">.</span>fs
include string<span class="sym">.</span>fs
include regexp<span class="sym">.</span>fs
include filehelp<span class="sym">.</span>fs

<span class="slc">\ helper word for regexp: Replace current pattern</span>
<span class="slc">\ This will be part of the next release of regexp.fs</span>

<span class="sym">[</span>IFUNDEF<span class="sym">] &lt;&lt;</span><span class="str">&quot;</span>
<span class="str">    0 Value &gt;&gt;ptr</span>
<span class="str">    0 Value &lt;&lt;ptr</span>
<span class="str">    Variable &gt;&gt;string</span>
<span class="str">    : &gt;&gt;  ( addr -- addr )  dup to &gt;&gt;ptr ;</span>
<span class="str">    : &lt;&lt; ( run-addr addr u -- run-addr )</span>
<span class="str">	&lt;&lt;ptr 0= IF  start$ to &lt;&lt;ptr  THEN</span>
<span class="str">	&gt;&gt;string &#64; 0= IF  s&quot;</span> <span class="str">&quot; &gt;&gt;string $!  THEN</span>
<span class="str">	&lt;&lt;ptr &gt;&gt;ptr over - &gt;&gt;string $+!</span>
<span class="str">	&gt;&gt;string $+! dup to &lt;&lt;ptr ;</span>
<span class="str">    : &lt;&lt;&quot;</span>  <span class="sym">'</span><span class="str">&quot; parse postpone SLiteral postpone &lt;&lt; ; immediate</span>
<span class="str">    : &gt;&gt;string&#64; ( -- addr u )</span>
<span class="str">	&gt;&gt;string $&#64;len dup allocate throw</span>
<span class="str">	swap 2dup &gt;&gt;string $&#64; drop -rot move</span>
<span class="str">	&gt;&gt;string $off  0 to &gt;&gt;ptr  0 to &lt;&lt;ptr ;</span>
<span class="str">    : &gt;&gt;next ( -- addr u ) &lt;&lt;ptr end$ over - ;</span>
<span class="str">[THEN]</span>
<span class="str"></span>
<span class="str">\ fast replacement for =&quot;</span>
<span class="slc">\ this replacement will be part of the next relase of regexp.fs</span>

<span class="sym">: =</span><span class="str">&quot; '&quot;</span> parse bounds <span class="sym">?</span><span class="kwa">DO</span>
	<span class="sym">]]</span> <span class="kwa">count</span> <span class="sym">[[</span> <span class="kwa">I c</span><span class="sym">&#64; ]]</span> <span class="kwa">Literal</span> <span class="sym">&lt;&gt; ?</span><span class="kwa">LEAVE</span> <span class="sym">[[</span>
    <span class="kwa">LOOP</span> <span class="sym">;</span> <span class="kwa">immediate</span>

<span class="sym">[</span>IFUNDEF<span class="sym">]</span> s<span class="sym">//</span>
<span class="sym">:</span> s<span class="sym">//  ]]</span> <span class="kwa">BEGIN</span> <span class="sym">[[ ;</span> <span class="kwa">immediate</span>
<span class="sym">: //</span>g  <span class="sym">]]</span> <span class="kwa">WHILE</span> <span class="sym">&gt;&gt;</span>next <span class="kwa">REPEAT</span> end$ <span class="sym">[[</span>
    s<span class="str">&quot; &quot;</span> <span class="sym">]]</span> SLiteral <span class="sym">&lt;&lt; &gt;&gt;</span>string<span class="sym">&#64;</span> <span class="kwa">rot drop</span> <span class="sym">[[ ;</span> <span class="kwa">immediate</span>
<span class="sym">[</span><span class="kwa">THEN</span><span class="sym">]</span>

<span class="slc">\ counting syntactic sugar</span>
<span class="sym">: //</span><span class="kwa">c</span> <span class="sym">]]</span> <span class="kwa">WHILE</span> <span class="num">1</span><span class="sym">+ &gt;&gt;</span>ptr end$ <span class="kwa">over</span> <span class="sym">-</span> <span class="kwa">REPEAT</span>  <span class="sym">[[ ;</span> <span class="kwa">immediate</span>
<span class="sym">:</span> <span class="kwa">c</span><span class="sym">// ]]</span> <span class="kwa">false</span> <span class="sym">-</span><span class="kwa">rot</span> s<span class="sym">// [[ ;</span> <span class="kwa">immediate</span>

charclass <span class="sym">[</span>acg<span class="sym">] '</span>a <span class="sym">+</span><span class="kwa">char</span> <span class="sym">'</span><span class="kwa">c</span> <span class="sym">+</span><span class="kwa">char</span> <span class="sym">'</span>g <span class="sym">+</span><span class="kwa">char</span>
charclass <span class="sym">[</span>act<span class="sym">] '</span>a <span class="sym">+</span><span class="kwa">char</span> <span class="sym">'</span><span class="kwa">c</span> <span class="sym">+</span><span class="kwa">char</span> <span class="sym">'</span>t <span class="sym">+</span><span class="kwa">char</span>
charclass <span class="sym">[</span>agt<span class="sym">] '</span>a <span class="sym">+</span><span class="kwa">char</span> <span class="sym">'</span>g <span class="sym">+</span><span class="kwa">char</span> <span class="sym">'</span>t <span class="sym">+</span><span class="kwa">char</span>
charclass <span class="sym">[</span>cgt<span class="sym">] '</span><span class="kwa">c</span> <span class="sym">+</span><span class="kwa">char</span> <span class="sym">'</span>g <span class="sym">+</span><span class="kwa">char</span> <span class="sym">'</span>t <span class="sym">+</span><span class="kwa">char</span>

<span class="sym">:</span> remove<span class="sym">-</span>newlines <span class="com">( addr u -- addr u' )</span>
    s<span class="sym">//</span> <span class="com">(( // &gt;&gt; {{ ` &gt; {** .? **} || }} count #lf &lt;&gt; ?LEAVE &lt;&lt;&quot; &quot; )</span>) <span class="sym">//</span>g <span class="sym">;</span>

<span class="sym">:</span> pat1 <span class="com">( addr u -- n )</span>
    <span class="kwa">c</span><span class="sym">//</span> <span class="com">(( // {{ =&quot; agggtaaa&quot; || =&quot; tttaccct&quot; }} &gt;&gt; )</span>) <span class="sym">//</span><span class="kwa">c</span> <span class="sym">;</span>
<span class="sym">:</span> pat2 <span class="com">( addr u -- n )</span>
    <span class="kwa">c</span><span class="sym">//</span> <span class="com">(( // {{ [cgt] c? =&quot; gggtaaa&quot; || =&quot; tttaccc&quot; [acg] c? }} &gt;&gt; )</span>) <span class="sym">//</span><span class="kwa">c</span> <span class="sym">;</span>
<span class="sym">:</span> pat3 <span class="com">( addr u -- n )</span>
    <span class="kwa">c</span><span class="sym">//</span> <span class="com">(( // {{ ` a [act] c? =&quot; ggtaaa&quot; || =&quot; tttacc&quot; [agt] c? ` t }} &gt;&gt; )</span>) <span class="sym">//</span><span class="kwa">c</span> <span class="sym">;</span>
<span class="sym">:</span> pat4 <span class="com">( addr u -- n )</span>
    <span class="kwa">c</span><span class="sym">//</span> <span class="com">(( // {{ =&quot; ag&quot; [act] c? =&quot; gtaaa&quot; || =&quot; tttac&quot; [agt] c? =&quot; ct&quot; }} &gt;&gt; )</span>) <span class="sym">//</span><span class="kwa">c</span> <span class="sym">;</span>
<span class="sym">:</span> pat5 <span class="com">( addr u -- n )</span>
    <span class="kwa">c</span><span class="sym">//</span> <span class="com">(( // {{ =&quot; agg&quot; [act] c? =&quot; taaa&quot; || =&quot; ttta&quot; [agt] c? =&quot; cct&quot; }} &gt;&gt; )</span>) <span class="sym">//</span><span class="kwa">c</span> <span class="sym">;</span>
<span class="sym">:</span> pat6 <span class="com">( addr u -- n )</span>
    <span class="kwa">c</span><span class="sym">//</span> <span class="com">(( // {{ =&quot; aggg&quot; [acg] c? =&quot; aaa&quot; || =&quot; ttt&quot; [cgt] c? =&quot; ccct&quot; }} &gt;&gt; )</span>) <span class="sym">//</span><span class="kwa">c</span> <span class="sym">;</span>
<span class="sym">:</span> pat7 <span class="com">( addr u -- n )</span>
    <span class="kwa">c</span><span class="sym">//</span> <span class="com">(( // {{ =&quot; agggt&quot; [cgt] c? =&quot; aa&quot; || =&quot; tt&quot; [acg] c? =&quot; accct&quot; }} &gt;&gt; )</span>) <span class="sym">//</span><span class="kwa">c</span> <span class="sym">;</span>
<span class="sym">:</span> pat8 <span class="com">( addr u -- n )</span>
    <span class="kwa">c</span><span class="sym">//</span> <span class="com">(( // {{ =&quot; agggta&quot; [cgt] c? ` a || ` t [acg] c? =&quot; taccct&quot; }} &gt;&gt; )</span>) <span class="sym">//</span><span class="kwa">c</span> <span class="sym">;</span>
<span class="sym">:</span> pat9 <span class="com">( addr u -- n )</span>
    <span class="kwa">c</span><span class="sym">//</span> <span class="com">(( // {{ =&quot; agggtaa&quot; [cgt] c? || [acg] c? =&quot; ttaccct&quot; }} &gt;&gt; )</span>) <span class="sym">//</span><span class="kwa">c</span> <span class="sym">;</span>

stdin slurp<span class="sym">-</span>fid <span class="kwa">dup Constant</span> ilen
remove<span class="sym">-</span>newlines <span class="kwa">dup Constant</span> clen <span class="num">2</span><span class="kwa">Constant</span> <span class="sym">'</span>stdin
burp

<span class="sym">.</span><span class="com">( agggtaaa|tttaccct )</span> <span class="sym">'</span>stdin pat1 <span class="num">1</span> <span class="sym">.</span>r <span class="kwa">cr</span>
<span class="sym">.</span><span class="com">( [cgt]gggtaaa|tttaccc[acg] )</span> <span class="sym">'</span>stdin pat2 <span class="num">1</span> <span class="sym">.</span>r <span class="kwa">cr</span>
<span class="sym">.</span><span class="com">( a[act]ggtaaa|tttacc[agt]t )</span> <span class="sym">'</span>stdin pat3 <span class="num">1</span> <span class="sym">.</span>r <span class="kwa">cr</span>
<span class="sym">.</span><span class="com">( ag[act]gtaaa|tttac[agt]ct )</span> <span class="sym">'</span>stdin pat4 <span class="num">1</span> <span class="sym">.</span>r <span class="kwa">cr</span>
<span class="sym">.</span><span class="com">( agg[act]taaa|ttta[agt]cct )</span> <span class="sym">'</span>stdin pat5 <span class="num">1</span> <span class="sym">.</span>r <span class="kwa">cr</span>
<span class="sym">.</span><span class="com">( aggg[acg]aaa|ttt[cgt]ccct )</span> <span class="sym">'</span>stdin pat6 <span class="num">1</span> <span class="sym">.</span>r <span class="kwa">cr</span>
<span class="sym">.</span><span class="com">( agggt[cgt]aa|tt[acg]accct )</span> <span class="sym">'</span>stdin pat7 <span class="num">1</span> <span class="sym">.</span>r <span class="kwa">cr</span>
<span class="sym">.</span><span class="com">( agggta[cgt]a|t[acg]taccct )</span> <span class="sym">'</span>stdin pat8 <span class="num">1</span> <span class="sym">.</span>r <span class="kwa">cr</span>
<span class="sym">.</span><span class="com">( agggtaa[cgt]|[acg]ttaccct )</span> <span class="sym">'</span>stdin pat9 <span class="num">1</span> <span class="sym">.</span>r <span class="kwa">cr</span>

<span class="sym">:</span> replace<span class="sym">-</span>alternatives <span class="com">( addr u -- )</span>
    <span class="num">2</span><span class="kwa">dup</span> s<span class="sym">//</span> <span class="com">(( // &gt;&gt; {{ ` B &lt;&lt;&quot; (c|g|t)</span><span class="str">&quot; }} )) //g 2swap drop free throw</span>
<span class="str">    2dup s// (( // &gt;&gt; {{ ` D &lt;&lt;&quot;</span> <span class="com">(a|g|t)</span><span class="str">&quot; }} )) //g 2swap drop free throw</span>
<span class="str">    2dup s// (( // &gt;&gt; {{ ` H &lt;&lt;&quot;</span> <span class="com">(a|c|t)</span><span class="str">&quot; }} )) //g 2swap drop free throw</span>
<span class="str">    2dup s// (( // &gt;&gt; {{ ` K &lt;&lt;&quot;</span> <span class="com">(g|t)</span><span class="str">&quot; }} )) //g 2swap drop free throw</span>
<span class="str">    2dup s// (( // &gt;&gt; {{ ` M &lt;&lt;&quot;</span> <span class="com">(a|c)</span><span class="str">&quot; }} )) //g 2swap drop free throw</span>
<span class="str">    2dup s// (( // &gt;&gt; {{ ` N &lt;&lt;&quot;</span> <span class="com">(a|c|g|t)</span><span class="str">&quot; }} )) //g 2swap drop free throw</span>
<span class="str">    2dup s// (( // &gt;&gt; {{ ` R &lt;&lt;&quot;</span> <span class="com">(a|g)</span><span class="str">&quot; }} )) //g 2swap drop free throw</span>
<span class="str">    2dup s// (( // &gt;&gt; {{ ` S &lt;&lt;&quot;</span> <span class="com">(c|t)</span><span class="str">&quot; }} )) //g 2swap drop free throw</span>
<span class="str">    2dup s// (( // &gt;&gt; {{ ` V &lt;&lt;&quot;</span> <span class="com">(a|c|g)</span><span class="str">&quot; }} )) //g 2swap drop free throw</span>
<span class="str">    2dup s// (( // &gt;&gt; {{ ` W &lt;&lt;&quot;</span> <span class="com">(a|t)</span><span class="str">&quot; }} )) //g 2swap drop free throw</span>
<span class="str">    2dup s// (( // &gt;&gt; {{ ` Y &lt;&lt;&quot;</span> <span class="com">(c|t)</span><span class="str">&quot; }} )) //g 2swap drop free throw ;</span>
<span class="str"></span>
<span class="str">cr</span>
<span class="str">ilen 1 .r cr</span>
<span class="str">clen 1 .r cr</span>
<span class="str"></span>
<span class="str">'stdin replace-alternatives dup 1 .r cr</span>
<span class="str"></span>
<span class="str">bye</span>
