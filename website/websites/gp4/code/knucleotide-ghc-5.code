<span class="kwa">import</span> Data.<span class="kwb">Char</span>
<span class="kwa">import qualified</span> Data.Map <span class="kwa">as</span> Map
<span class="kwa">import</span> Data.List
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by anon</span>

<span class="kwa">import</span> Text.Printf<span class="sym">(</span>printf<span class="sym">)</span>
<span class="kwa">import qualified</span> Data.ByteString.Lazy.Char8 <span class="kwa">as</span> B
<span class="kwa">import</span> Data.Ord <span class="sym">(</span>comparing<span class="sym">)</span>

loadMap i s <span class="sym">=</span> foldl' <span class="sym">(</span>\m w <span class="sym">-&gt;</span> Map.insertWith <span class="sym">(+)</span> w <span class="sym">(</span><span class="num">1</span> <span class="sym">::</span> <span class="kwb">Int</span><span class="sym">)</span> m<span class="sym">)</span> Map.empty snips
 <span class="kwa">where</span> snips <span class="sym">=</span> filter <span class="sym">((==</span> i<span class="sym">)</span> . B.length<span class="sym">)</span> . map <span class="sym">(</span>B.take i<span class="sym">)</span> $ s

writeFrequencies i dna <span class="sym">=</span>
  <span class="kwa">let</span> mp <span class="sym">=</span> loadMap i dna
      total <span class="sym">=</span> fromIntegral <span class="sym">(</span>Map.fold <span class="sym">(+)</span> <span class="num">0</span> mp <span class="sym">) /</span> <span class="num">100</span> <span class="sym">::</span> <span class="kwb">Double</span>
      res <span class="sym">=</span> map <span class="sym">(</span>\<span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) -&gt; (</span>a<span class="sym">,</span> fromIntegral b <span class="sym">/</span> total<span class="sym">)) (</span>Map.toAscList mp<span class="sym">)</span>
      <span class="kwa">in</span> <span class="sym">(</span>mapM_ showFun . sortBy <span class="sym">(</span>flip <span class="sym">(</span>comparing snd<span class="sym">)))</span> res <span class="sym">&gt;&gt;</span> putStrLn <span class="str">&quot;&quot;</span>

showFun <span class="sym">:: (</span>B.ByteString<span class="sym">,</span> <span class="kwb">Double</span><span class="sym">) -&gt;</span> IO <span class="sym">()</span>
showFun <span class="sym">(</span>k<span class="sym">,</span>f<span class="sym">) =</span> printf <span class="str">&quot;%s %.3f\n&quot;</span> <span class="sym">(</span>B.unpack k<span class="sym">)</span> f

writeCount dna sq <span class="sym">=</span> printf <span class="str">&quot;%d\t%s\n&quot;</span> cnt <span class="sym">(</span>B.unpack sq<span class="sym">)</span>
      <span class="kwa">where</span> cnt <span class="sym">=</span> length $ filter <span class="sym">(</span>B.isPrefixOf sq<span class="sym">)</span> dna

dnaThree <span class="sym">=</span> process <span class="sym">=&lt;&lt;</span> B.getContents
    <span class="kwa">where</span> process     <span class="sym">=</span> return . B.tails . ul . takeNorm . tail . dropComment . dropOther . B.lines
          dropOther   <span class="sym">=</span> dropWhile <span class="sym">(</span>\str <span class="sym">-&gt;</span> not <span class="sym">((</span>B.pack <span class="str">&quot;&gt;THREE&quot;</span><span class="sym">)</span> `B.isPrefixOf` str<span class="sym">))</span>
          dropComment <span class="sym">=</span> dropWhile <span class="sym">((==</span> '<span class="sym">;</span>'<span class="sym">)</span> . B.head<span class="sym">)</span>
          takeNorm    <span class="sym">=</span> takeWhile <span class="sym">((/=</span> '<span class="sym">&gt;</span>'<span class="sym">)</span> . B.head<span class="sym">)</span>
          ul          <span class="sym">=</span> B.map toUpper . B.concat

main <span class="sym">=</span> <span class="kwa">do</span> three <span class="sym">&lt;-</span> dnaThree
          writeFrequencies <span class="num">1</span> three
          writeFrequencies <span class="num">2</span> three
          mapM_ <span class="sym">(</span>writeCount three . B.pack<span class="sym">) [</span><span class="str">&quot;GGT&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTA&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTATT&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">]</span>
