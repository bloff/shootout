<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">// By bearophile, optimized for simplicity, quite slow</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>conv<span class="hl sym">;</span>

<span class="hl kwa">class</span> TreeNode <span class="hl sym">{</span>
    <span class="hl kwa">int</span> item<span class="hl sym">;</span>
    TreeNode left<span class="hl sym">,</span> right<span class="hl sym">;</span>

    <span class="hl kwa">this</span><span class="hl sym">(</span><span class="hl kwa">int</span> item<span class="hl sym">,</span> TreeNode left<span class="hl sym">=</span><span class="hl kwa">null</span><span class="hl sym">,</span> TreeNode right<span class="hl sym">=</span><span class="hl kwa">null</span><span class="hl sym">) {</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>item <span class="hl sym">=</span> item<span class="hl sym">;</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>left <span class="hl sym">=</span> left<span class="hl sym">;</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>right <span class="hl sym">=</span> right<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">int</span> <span class="hl kwd">check</span><span class="hl sym">() {</span>
        <span class="hl kwa">return</span> left <span class="hl kwa">is null</span> ? item <span class="hl sym">:</span> item <span class="hl sym">+</span> left<span class="hl sym">.</span>check <span class="hl sym">-</span> right<span class="hl sym">.</span>check<span class="hl sym">;</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

TreeNode <span class="hl kwd">makeTree</span><span class="hl sym">(</span><span class="hl kwa">int</span> item<span class="hl sym">,</span> <span class="hl kwa">int</span> depth<span class="hl sym">) {</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>depth <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
        <span class="hl kwa">return new</span> <span class="hl kwd">TreeNode</span><span class="hl sym">(</span>item<span class="hl sym">,</span> <span class="hl kwd">makeTree</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span> <span class="hl kwd">makeTree</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">));</span>
    <span class="hl kwa">else</span>
        <span class="hl kwa">return new</span> <span class="hl kwd">TreeNode</span><span class="hl sym">(</span>item<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span>string<span class="hl sym">[]</span> args<span class="hl sym">) {</span>
    <span class="hl kwa">const</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
    <span class="hl kwa">int</span> n <span class="hl sym">= (</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span> ? <span class="hl kwd">toInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">2</span><span class="hl sym">;</span>
    <span class="hl kwa">int</span> maxDepth <span class="hl sym">= (</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">) &gt;</span> n ? minDepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">:</span> n<span class="hl sym">;</span>

    <span class="hl kwa">int</span> check <span class="hl sym">=</span> <span class="hl kwd">makeTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">).</span>check<span class="hl sym">;</span>
    <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl sym">,</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">,</span> check<span class="hl sym">);</span>

    <span class="hl kwa">auto</span> longLivedTree <span class="hl sym">=</span> <span class="hl kwd">makeTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> maxDepth<span class="hl sym">);</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> depth <span class="hl sym">=</span> minDepth<span class="hl sym">;</span> depth <span class="hl sym">&lt;=</span> maxDepth<span class="hl sym">;</span> depth <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">) {</span>
        <span class="hl kwa">int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>
        check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> iterations<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            check <span class="hl sym">+= (</span><span class="hl kwd">makeTree</span><span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">)).</span>check <span class="hl sym">+ (</span><span class="hl kwd">makeTree</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> depth<span class="hl sym">)).</span>check<span class="hl sym">;</span>

        <span class="hl kwd">writefln</span><span class="hl sym">(</span>iterations <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span><span class="hl sym">,</span> depth<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">,</span> check<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth &quot;</span><span class="hl sym">,</span> maxDepth<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">,</span> longLivedTree<span class="hl sym">.</span>check<span class="hl sym">);</span>
<span class="hl sym">}</span>
