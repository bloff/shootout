<span class="slc">// ---------------------------------------------------------------------</span>
<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Anthony Borla</span>
<span class="slc">// ---------------------------------------------------------------------</span>

<span class="kwb">void</span> <span class="kwd">dumpSegment</span><span class="sym">(</span>String.Buffer segment<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">constant</span>
    LINELENGTH <span class="sym">=</span> <span class="num">60.0</span><span class="sym">,</span>
    FROM <span class="sym">=</span> <span class="str">&quot;wsatugcyrkmbdhvnATUGCYRKMBDHVN&quot;</span> <span class="sym">/</span> <span class="num">1</span><span class="sym">,</span>
    TO <span class="sym">=</span> <span class="str">&quot;WSTAACGRYMKVHDBNTAACGRYMKVHDBN&quot;</span> <span class="sym">/</span> <span class="num">1</span><span class="sym">;</span>

  <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, ((</span><span class="kwa">reverse</span><span class="sym">(</span><span class="kwa">replace</span><span class="sym">(</span>segment<span class="sym">-&gt;</span><span class="kwd">get</span><span class="sym">(),</span> FROM<span class="sym">,</span> TO<span class="sym">)) /</span> LINELENGTH<span class="sym">) *</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">));</span>
<span class="sym">}</span>

<span class="slc">// --------------------------------</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
  String.Buffer segment <span class="sym">=</span> String.<span class="kwd">Buffer</span><span class="sym">();</span> <span class="kwb">string</span> sequence<span class="sym">;</span>

  <span class="kwd">while</span> <span class="sym">((</span>sequence <span class="sym">=</span> Stdio.stdin.<span class="kwd">gets</span><span class="sym">()) !=</span> <span class="num">0</span><span class="sym">)</span>
  <span class="sym">{</span>
    <span class="kwd">if</span> <span class="sym">(</span>sequence<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwd">if</span> <span class="sym">(</span>segment<span class="sym">-&gt;</span><span class="kwd">_sizeof</span><span class="sym">() !=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwd">dumpSegment</span><span class="sym">(</span>segment<span class="sym">);</span>
      <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sequence<span class="sym">);</span>
    <span class="sym">}</span>
    else
    <span class="sym">{</span>
      segment<span class="sym">-&gt;</span><span class="kwd">add</span><span class="sym">(</span>sequence<span class="sym">);</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwd">dumpSegment</span><span class="sym">(</span>segment<span class="sym">);</span>

  return <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

