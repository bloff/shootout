<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com"> http://shootout.alioth.debian.org/</span>
<span class="com"> contributed by Isaac Gouy</span>
<span class="com"> modified by Paolo Bonzini *&quot;</span>

ReadStream subclass<span class="sym">: #</span>RepeatStream  instanceVariableNames<span class="sym">:</span> <span class="str">'repeatPtr repeatLimit'</span> classVariableNames<span class="sym">:</span> <span class="str">''</span> poolDictionaries<span class="sym">:</span> <span class="str">''</span> category<span class="sym">:</span> <span class="kwa">nil</span> <span class="sym">!</span>

<span class="sym">!</span>RepeatStream class methodsFor<span class="sym">:</span> <span class="str">'instance creation '</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger on<span class="sym">:</span> aCollection
   <span class="sym">^(</span><span class="kwa">super</span> on<span class="sym">:</span> aCollection<span class="sym">)</span> to<span class="sym">:</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   repeatPtr <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   repeatLimit <span class="sym">:=</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'accessing-reading'</span><span class="sym">!</span>

next
    <span class="sym">|</span> element <span class="sym">|</span>
    ptr <span class="sym">&gt;</span> endPtr ifTrue<span class="sym">: [</span> <span class="kwa">self</span> position<span class="sym">:</span> <span class="num">0</span> <span class="sym">].</span>
    element <span class="sym">:=</span> collection at<span class="sym">:</span> ptr<span class="sym">.</span>
    ptr <span class="sym">:=</span> ptr <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span> repeatPtr <span class="sym">:=</span> repeatPtr <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
    <span class="sym">^</span>element <span class="sym">! !</span>

<span class="sym">!</span>RepeatStream methodsFor<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!</span>

atEnd
   <span class="sym">^</span>repeatPtr <span class="sym">&gt;=</span> repeatLimit <span class="sym">! !</span>


RepeatStream subclass<span class="sym">: #</span>RandomStream instanceVariableNames<span class="sym">:</span> <span class="str">'random percentages'</span>
classVariableNames<span class="sym">:</span> <span class="str">''</span> poolDictionaries<span class="sym">:</span> <span class="str">''</span> category<span class="sym">:</span> <span class="kwa">nil</span> <span class="sym">!</span>

<span class="sym">!</span>RandomStream methodsFor<span class="sym">:</span> <span class="str">'private methods'</span><span class="sym">!</span>

initCollection<span class="sym">:</span> aCollection limit<span class="sym">:</span> size
   <span class="sym">|</span> cp <span class="sym">|</span>
   repeatPtr <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   random <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1.0</span><span class="sym">.</span>
   percentages <span class="sym">:=</span> Array new<span class="sym">:</span> size<span class="sym">.</span>
   collection <span class="sym">:=</span> Array new<span class="sym">:</span> size<span class="sym">.</span>
   cp <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">.</span>
   <span class="num">1</span> to<span class="sym">:</span> size do<span class="sym">: [:</span>i<span class="sym">|</span>
      cp <span class="sym">:=</span> cp <span class="sym">+ (</span>aCollection at<span class="sym">:</span> i<span class="sym">)</span> value<span class="sym">.</span>
      collection at<span class="sym">:</span> i put<span class="sym">: (</span>aCollection at<span class="sym">:</span> i<span class="sym">)</span> key<span class="sym">.</span>
      percentages at<span class="sym">:</span> i put<span class="sym">: (</span>cp <span class="sym">*</span> RandomNumber scale<span class="sym">)</span> ceiling<span class="sym">.</span>
   <span class="sym">] ! !</span>

<span class="sym">!</span>RandomStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

next
   <span class="sym">|</span> r <span class="sym">|</span>
   r <span class="sym">:=</span> random next<span class="sym">.</span>
   repeatPtr <span class="sym">:=</span> repeatPtr <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
   <span class="num">1</span> to<span class="sym">:</span> percentages size do<span class="sym">: [:</span>i<span class="sym">|</span>
      <span class="sym">(</span>r <span class="sym">&lt; (</span>percentages at<span class="sym">:</span> i<span class="sym">))</span> ifTrue<span class="sym">: [^</span>collection at<span class="sym">:</span> i<span class="sym">]].</span>
<span class="kwa">self</span> halt <span class="sym">!</span>

random<span class="sym">:</span> aRandomNumber
<span class="com">&quot;* Share the random number generator so we can get the expected results. *&quot;</span>
   random <span class="sym">:=</span> aRandomNumber <span class="sym">! !</span>


<span class="sym">!</span> FileStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

writeFasta<span class="sym">:</span> aString sequence<span class="sym">:</span> aStream
   <span class="sym">|</span> i <span class="sym">|</span>
   <span class="kwa">self</span> nextPut<span class="sym">: $&gt;;</span> nextPutAll<span class="sym">:</span> aString<span class="sym">;</span> nl<span class="sym">.</span>

   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   <span class="sym">[</span>aStream atEnd<span class="sym">]</span> whileFalse<span class="sym">: [</span>
      <span class="sym">(</span>i <span class="sym">==</span> <span class="num">60</span><span class="sym">)</span> ifTrue<span class="sym">: [</span><span class="kwa">self</span> nl<span class="sym">.</span> i <span class="sym">:=</span> <span class="num">0</span><span class="sym">].</span>
      <span class="kwa">self</span> nextPut<span class="sym">:</span> aStream next<span class="sym">.</span>
      i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
      <span class="sym">].</span>
   <span class="kwa">self</span> nl <span class="sym">! !</span>


Object subclass<span class="sym">: #</span>RandomNumber
instanceVariableNames<span class="sym">:</span> <span class="str">'seed scale'</span>
classVariableNames<span class="sym">:</span> <span class="str">'Increment Multiplier Modulus '</span>
poolDictionaries<span class="sym">:</span> <span class="str">''</span> category<span class="sym">:</span> <span class="kwa">nil</span> <span class="sym">!</span>

<span class="sym">!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

scale
   <span class="sym">^</span>Modulus<span class="sym">!</span>

to<span class="sym">:</span> anInteger
   Increment <span class="sym">:=</span> <span class="num">29573</span><span class="sym">.</span>
   Multiplier <span class="sym">:=</span> <span class="num">3877</span><span class="sym">.</span>
   Modulus <span class="sym">:=</span> <span class="num">139968</span><span class="sym">.</span>
   <span class="sym">^</span><span class="kwa">self</span> basicNew to<span class="sym">:</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

next
   <span class="sym">^</span>seed <span class="sym">:=</span> seed <span class="sym">*</span> Multiplier <span class="sym">+</span> Increment <span class="sym">\\</span> Modulus<span class="sym">! !</span>

<span class="sym">!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   seed <span class="sym">:=</span> <span class="num">42</span><span class="sym">.</span>
   scale <span class="sym">:=</span> anInteger <span class="sym">! !</span>


<span class="sym">|</span> n r s x <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger<span class="sym">.</span>
s <span class="sym">:=</span> FileStream stdout bufferSize<span class="sym">:</span> <span class="num">4096</span><span class="sym">.</span>

s writeFasta<span class="sym">:</span> <span class="str">'ONE Homo sapiens alu'</span> sequence<span class="sym">:</span>
   <span class="sym">(</span> RepeatStream to<span class="sym">:</span> n<span class="sym">*</span><span class="num">2</span> on<span class="sym">:</span>
      <span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span><span class="sym">,</span>
      <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span><span class="sym">,</span>
      <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span><span class="sym">,</span>
      <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span><span class="sym">,</span>
      <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span><span class="sym">,</span>
      <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span><span class="sym">,</span>
      <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span> <span class="sym">).</span>

r <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span> &quot;Shared random sequence&quot;

s writeFasta<span class="sym">:</span> <span class="str">'TWO IUB ambiguity codes'</span> sequence<span class="sym">:</span>
   <span class="sym">((</span> RandomStream to<span class="sym">:</span> n<span class="sym">*</span><span class="num">3</span> on<span class="sym">: (</span>
      OrderedCollection new
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>a value<span class="sym">:</span> <span class="num">0.27</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>c value<span class="sym">:</span> <span class="num">0.12</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>g value<span class="sym">:</span> <span class="num">0.12</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>t value<span class="sym">:</span> <span class="num">0.27</span><span class="sym">);</span>

         add<span class="sym">: (</span>Association key<span class="sym">: $</span>B value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>D value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>H value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>K value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>M value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>N value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>R value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>S value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>V value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>W value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>Y value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         yourself <span class="sym">))</span> random<span class="sym">:</span> r<span class="sym">).</span>

s writeFasta<span class="sym">:</span> <span class="str">'THREE Homo sapiens frequency'</span> sequence<span class="sym">:</span>
   <span class="sym">((</span> RandomStream to<span class="sym">:</span> n<span class="sym">*</span><span class="num">5</span> on<span class="sym">: (</span>
      OrderedCollection new
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>a value<span class="sym">:</span> <span class="num">0.3029549426680</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>c value<span class="sym">:</span> <span class="num">0.1979883004921</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>g value<span class="sym">:</span> <span class="num">0.1975473066391</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">: $</span>t value<span class="sym">:</span> <span class="num">0.3015094502008</span><span class="sym">);</span>
         yourself <span class="sym">))</span> random<span class="sym">:</span> r<span class="sym">).</span>

s flush<span class="sym">;</span> close <span class="sym">!</span>
