<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy&quot;!</span>
<span class="com"></span>
<span class="com">!Shootout.Tests class methodsFor: 'benchmarking'!</span>
<span class="com"></span>
<span class="com">recursive</span>
<span class="com">   | n |</span>
<span class="com">   n := CEnvironment argv first asNumber.</span>
<span class="com"></span>
<span class="com">   OS.Stdout</span>
<span class="com">      nextPutAll: 'Ack(3,', n printString, '): ', (3 ack: n) printString; cr;</span>
<span class="com">      nextPutAll:</span>
<span class="com">         'Fib(', ((27.0d+n) asStringWith: 1), '): ',</span>
<span class="com">         ((27.0d+n) fib asStringWith: 1); cr.</span>
<span class="com"></span>
<span class="com">   n := n - 1.</span>
<span class="com">   OS.Stdout</span>
<span class="com">      nextPutAll: 'Tak(', (3*n) printString, ',', (2*n) printString, ',',</span>
<span class="com">         n printString, '): ',  (3*n tak: 2*n z: n) printString; cr;</span>
<span class="com">      nextPutAll: 'Fib(3): ', 3 fib printString; cr;</span>
<span class="com">      nextPutAll: 'Tak(3.0,2.0,1.0): ',</span>
<span class="com">         ((3.0d tak: 2.0d z: 1.0d) asStringWith: 1); cr.</span>
<span class="com"></span>
<span class="com">   ^'' ! !</span>
<span class="com"></span>
<span class="com">!Core.SmallInteger methodsFor: 'computer language shootout'!</span>
<span class="com"></span>
<span class="com">ack: aSmallInteger</span>
<span class="com">   ^self == 0</span>
<span class="com">      ifTrue: [aSmallInteger + 1]</span>
<span class="com">      ifFalse: [</span>
<span class="com">         aSmallInteger == 0</span>
<span class="com">            ifTrue: [self - 1 ack:  1]</span>
<span class="com">            ifFalse: [self - 1 ack: (self ack: aSmallInteger - 1)] ] !</span>
<span class="com"></span>
<span class="com">fib</span>
<span class="com">   ^self &lt; 2 ifTrue: [1] ifFalse: [(self - 2) fib + (self - 1) fib] !</span>
<span class="com"></span>
<span class="com">tak: y z: z</span>
<span class="com">   ^y &lt; self</span>
<span class="com">      ifTrue: [((self - 1) tak: y z: z) tak: ((y - 1) tak: z z: self) z: ((z - 1) tak: self z: y)]</span>
<span class="com">      ifFalse: [z] ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Core.Double methodsFor: 'computer language shootout'!</span>
<span class="com"></span>
<span class="com">fib</span>
<span class="com">   ^self &lt; 2.0d ifTrue: [1.0d] ifFalse: [(self - 2.0d) fib + (self - 1.0d) fib] !</span>
<span class="com"></span>
<span class="com">tak: y z: z</span>
<span class="com">   ^y &lt; self</span>
<span class="com">      ifTrue: [((self - 1.0d) tak: y z: z) tak: ((y - 1.0d) tak: z z: self) z: ((z - 1.0d) tak: self z: y)]</span>
<span class="com">      ifFalse: [z] ! !</span>
