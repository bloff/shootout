<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc"># contributed by Hemang Lavana,</span>
<span class="hl slc"># small modification by Andrew McParland</span>

<span class="hl kwa">proc</span> nsieve <span class="hl sym">{</span>m<span class="hl sym">} {</span>
    <span class="hl kwa">set</span> NBITS <span class="hl num">32</span>

    <span class="hl kwa">set</span> init_val <span class="hl sym">[</span><span class="hl kwa">expr</span> <span class="hl sym">{</span><span class="hl num">0xffffffff</span><span class="hl sym">}]</span>
    <span class="hl kwa">set</span> max <span class="hl sym">[</span><span class="hl kwa">expr</span> <span class="hl sym">{</span><span class="hl kwb">$m</span> <span class="hl sym">/</span> <span class="hl kwb">$NBITS</span><span class="hl sym">}]</span>
    <span class="hl kwa">for</span> <span class="hl sym">{</span><span class="hl kwa">set</span> i <span class="hl num">0</span><span class="hl sym">} {</span><span class="hl kwb">$i</span> <span class="hl sym">&lt;</span> <span class="hl kwb">$max</span><span class="hl sym">} {</span><span class="hl kwa">incr</span> i<span class="hl sym">} {</span><span class="hl kwa">lappend</span> data <span class="hl kwb">$init_val</span><span class="hl sym">}</span>

    <span class="hl kwa">for</span> <span class="hl sym">{</span><span class="hl kwa">set</span> count <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwa">set</span> i <span class="hl num">2</span><span class="hl sym">} {</span><span class="hl kwb">$i</span> <span class="hl sym">&lt;</span> <span class="hl kwb">$m</span><span class="hl sym">} {</span><span class="hl kwa">incr</span> i<span class="hl sym">} {</span>
	<span class="hl kwa">if</span> <span class="hl sym">{[</span><span class="hl kwa">lindex</span> <span class="hl kwb">$data</span> <span class="hl sym">[</span><span class="hl kwa">expr</span> <span class="hl sym">{</span><span class="hl kwb">$i</span> <span class="hl sym">/</span> <span class="hl kwb">$NBITS</span><span class="hl sym">}]] &amp; (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwb">$i</span> <span class="hl sym">%</span> <span class="hl kwb">$NBITS</span><span class="hl sym">)} {</span>
            <span class="hl kwa">for</span> <span class="hl sym">{</span><span class="hl kwa">set</span> j <span class="hl sym">[</span><span class="hl kwa">expr</span> <span class="hl sym">{</span><span class="hl kwb">$i</span> <span class="hl sym">+</span> <span class="hl kwb">$i</span><span class="hl sym">}]} {</span><span class="hl kwb">$j</span> <span class="hl sym">&lt;</span> <span class="hl kwb">$m</span><span class="hl sym">} {</span><span class="hl kwa">incr</span> j <span class="hl kwb">$i</span><span class="hl sym">} {</span>
                <span class="hl kwa">set</span> j_idx <span class="hl sym">[</span><span class="hl kwa">expr</span> <span class="hl sym">{</span><span class="hl kwb">$j</span> <span class="hl sym">/</span> <span class="hl kwb">$NBITS</span><span class="hl sym">}]</span>
	        <span class="hl kwa">lset</span> data <span class="hl kwb">$j_idx</span> <span class="hl sym">[</span><span class="hl kwa">expr</span> <span class="hl sym">{[</span><span class="hl kwa">lindex</span> <span class="hl kwb">$data $j_idx</span><span class="hl sym">] &amp;</span> ~<span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwb">$j</span> <span class="hl sym">%</span> <span class="hl kwb">$NBITS</span><span class="hl sym">)}]</span>
            <span class="hl sym">}</span>
	    <span class="hl kwa">incr</span> count
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">return</span> <span class="hl kwb">$count</span>
<span class="hl sym">}</span>

<span class="hl kwa">proc</span> main <span class="hl sym">{</span>n<span class="hl sym">} {</span>

    <span class="hl kwa">if</span> <span class="hl sym">{[</span><span class="hl kwa">llength</span> <span class="hl kwb">$n</span><span class="hl sym">] &gt;</span> <span class="hl num">1</span> <span class="hl sym">||</span> <span class="hl kwb">$n</span> <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">} {</span>
        <span class="hl kwa">puts</span> stderr <span class="hl str">&quot;usage: [file tail $::argv0] N ;#N &gt;= 2, specified value of N = $n&quot;</span>
        <span class="hl kwa">exit</span> <span class="hl num">2</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">foreach</span> value <span class="hl sym">[</span><span class="hl kwa">list</span> <span class="hl kwb">$n</span> <span class="hl sym">[</span><span class="hl kwa">incr</span> n <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] [</span><span class="hl kwa">incr</span> n <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]] {</span>
        <span class="hl kwa">set</span> m <span class="hl sym">[</span><span class="hl kwa">expr</span> <span class="hl sym">{(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl kwb">$value</span><span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">}]</span>
        <span class="hl kwa">set</span> count <span class="hl sym">[</span>nsieve <span class="hl kwb">$m</span><span class="hl sym">]</span>
        <span class="hl kwa">puts</span> <span class="hl sym">[</span><span class="hl kwa">format</span> <span class="hl str">&quot;Primes up to %8u %8u&quot;</span> <span class="hl kwb">$m $count</span><span class="hl sym">]</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
main <span class="hl kwb">$argv</span>
