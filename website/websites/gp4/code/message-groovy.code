<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Brian Schlining</span>
<span class="hl com">*/</span>

import java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>BlockingQueue<span class="hl sym">;</span>
import java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>ArrayBlockingQueue<span class="hl sym">;</span>

def NUMBER_OF_THREADS <span class="hl sym">=</span> <span class="hl num">500</span>
def QUEUE_BUFFER_RATIO <span class="hl sym">=</span> Integer<span class="hl sym">.</span><span class="hl kwd">getInteger</span><span class="hl sym">(</span><span class="hl str">&quot;bufferPct&quot;</span><span class="hl sym">,</span> <span class="hl num">100</span><span class="hl sym">) /</span> <span class="hl num">100.0</span>

<span class="hl kwb">int</span> messagesCount <span class="hl sym">=</span> Integer<span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">])</span>
<span class="hl kwb">int</span> queueSize <span class="hl sym">=</span> messagesCount <span class="hl sym">*</span> QUEUE_BUFFER_RATIO

MyMessage first <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MyMessage</span><span class="hl sym">(</span>null<span class="hl sym">,</span> queueSize<span class="hl sym">);</span>
MyMessage last <span class="hl sym">=</span> first<span class="hl sym">;</span>
<span class="hl kwa">for</span> <span class="hl sym">(</span>i in <span class="hl num">0</span><span class="hl sym">..&lt;(</span>NUMBER_OF_THREADS <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)) {</span>
    last <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MyMessage</span><span class="hl sym">(</span>last<span class="hl sym">,</span> queueSize<span class="hl sym">)</span>
    Thread thread <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl sym">(</span>last<span class="hl sym">,</span> <span class="hl str">&quot;Worker-&quot;</span> <span class="hl sym">+</span> i<span class="hl sym">)</span>
    thread<span class="hl sym">.</span><span class="hl kwd">setDaemon</span><span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">)</span>
    thread<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">()</span>
<span class="hl sym">}</span>

<span class="hl kwa">for</span> <span class="hl sym">(</span>j in <span class="hl num">0</span><span class="hl sym">..&lt;</span>messagesCount<span class="hl sym">) {</span>
    last<span class="hl sym">.</span>queue<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> sum <span class="hl sym">=</span> <span class="hl num">0</span>
<span class="hl kwa">while</span> <span class="hl sym">(</span>sum <span class="hl sym">&lt;</span> NUMBER_OF_THREADS <span class="hl sym">*</span> messagesCount<span class="hl sym">) {</span>
    sum <span class="hl sym">+=</span> first<span class="hl sym">.</span>queue<span class="hl sym">.</span><span class="hl kwd">take</span><span class="hl sym">();</span>
<span class="hl sym">}</span>

<span class="hl kwd">println</span><span class="hl sym">(</span>sum<span class="hl sym">);</span>

<span class="hl kwc">class</span> MyMessage implements Runnable <span class="hl sym">{</span>


    final BlockingQueue queue
    final def next

    <span class="hl kwd">MyMessage</span><span class="hl sym">(</span>MyMessage next<span class="hl sym">,</span> <span class="hl kwb">int</span> queueSize<span class="hl sym">) {</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>queue <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ArrayBlockingQueue</span><span class="hl sym">(</span>queueSize<span class="hl sym">)</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>next <span class="hl sym">=</span> next
    <span class="hl sym">}</span>

    <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>next<span class="hl sym">==</span>null<span class="hl sym">) {</span> <span class="hl kwa">return</span> <span class="hl sym">}</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl kwa">true</span><span class="hl sym">) {</span> next<span class="hl sym">.</span>queue<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">.</span>queue<span class="hl sym">.</span><span class="hl kwd">take</span><span class="hl sym">() +</span> <span class="hl num">1</span><span class="hl sym">) }</span>
    <span class="hl sym">}</span>

<span class="hl sym">}</span>
