<span class="com">/* The  Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Robert F. Tobler to perform actual computations on byte arrays</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;</span>

<span class="kwc">class</span> revcomp
<span class="sym">{</span>
   <span class="kwb">static void</span> <span class="kwd">Main</span><span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){</span>
      <span class="kwd">InitializeComplements</span><span class="sym">();</span>

      ArrayList seq <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">ArrayList</span><span class="sym">();</span>
      String line<span class="sym">,</span> desc <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span>

      <span class="kwa">using</span> <span class="sym">(</span>StreamReader r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StreamReader</span><span class="sym">(</span>Console<span class="sym">.</span><span class="kwd">OpenStandardInput</span><span class="sym">())){</span>
         <span class="kwa">using</span> <span class="sym">(</span>StreamWriter w <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StreamWriter</span><span class="sym">(</span>Console<span class="sym">.</span><span class="kwd">OpenStandardOutput</span><span class="sym">())){</span>
            <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> r<span class="sym">.</span><span class="kwd">ReadLine</span><span class="sym">()) !=</span> null<span class="sym">) {</span>
               <span class="kwb">char</span> c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
               <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">){</span>
                  <span class="kwa">if</span> <span class="sym">(</span>desc<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
                     <span class="kwd">WriteReverseSeq</span><span class="sym">(</span>desc<span class="sym">,</span> seq<span class="sym">,</span> w<span class="sym">);</span>
                     seq <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">ArrayList</span><span class="sym">();</span>
                  <span class="sym">}</span>
                  desc <span class="sym">=</span> line<span class="sym">;</span>
               <span class="sym">}</span>
               <span class="kwa">else if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">){</span>
                  byte<span class="sym">[]</span> byteLine <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>line<span class="sym">.</span>Length<span class="sym">];</span>
                  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> line<span class="sym">.</span>Length<span class="sym">;</span> i<span class="sym">++)</span>
                     byteLine<span class="sym">[</span>i<span class="sym">] = (</span>byte<span class="sym">)</span>line<span class="sym">[</span>i<span class="sym">];</span>
                  seq<span class="sym">.</span><span class="kwd">Add</span><span class="sym">(</span>byteLine<span class="sym">);</span>
               <span class="sym">}</span>
            <span class="sym">}</span>
            <span class="kwa">if</span> <span class="sym">(</span>seq<span class="sym">.</span>Count <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
               <span class="kwd">WriteReverseSeq</span><span class="sym">(</span>desc<span class="sym">,</span> seq<span class="sym">,</span> w<span class="sym">);</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwb">static</span> byte<span class="sym">[]</span> iubComp <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span><span class="num">256</span><span class="sym">];</span>
   <span class="kwb">static void</span> <span class="kwd">InitializeComplements</span><span class="sym">(){</span>
      <span class="kwa">for</span> <span class="sym">(</span>byte i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">255</span><span class="sym">;</span> i<span class="sym">++)</span> iubComp<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>

      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'A'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'T'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'a'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'T'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'B'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'V'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'b'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'V'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'C'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'G'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'c'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'G'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'D'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'H'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'d'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'H'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'G'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'C'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'g'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'C'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'H'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'D'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'h'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'D'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'K'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'M'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'k'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'M'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'M'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'K'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'m'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'K'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'R'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'Y'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'r'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'Y'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'T'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'A'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'t'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'A'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'V'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'B'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'v'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'B'</span><span class="sym">;</span>
      iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'Y'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'R'</span><span class="sym">;</span> iubComp<span class="sym">[(</span>byte<span class="sym">)</span><span class="str">'y'</span><span class="sym">] = (</span>byte<span class="sym">)</span><span class="str">'R'</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwb">static void</span> <span class="kwd">WriteReverseSeq</span><span class="sym">(</span>String desc<span class="sym">,</span> ArrayList b<span class="sym">,</span> StreamWriter s<span class="sym">) {</span>
      <span class="kwb">const int</span> LineLength <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
      <span class="kwb">char</span><span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>LineLength<span class="sym">];</span>
      s<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>desc<span class="sym">);</span>

      <span class="kwb">int</span> ci <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> rli <span class="sym">=</span> b<span class="sym">.</span>Count<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> rli <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> rli<span class="sym">--) {</span>
         byte<span class="sym">[]</span> line <span class="sym">= (</span>byte<span class="sym">[])</span>b<span class="sym">[</span>rli<span class="sym">];</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> rci <span class="sym">=</span> line<span class="sym">.</span>Length<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> rci <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> rci<span class="sym">--) {</span>
            buffer<span class="sym">[</span>ci<span class="sym">++] = (</span><span class="kwb">char</span><span class="sym">)</span>iubComp<span class="sym">[</span>line<span class="sym">[</span>rci<span class="sym">]];</span>
            <span class="kwa">if</span> <span class="sym">(</span>ci <span class="sym">&gt;=</span> LineLength<span class="sym">) {</span> s<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>buffer<span class="sym">);</span> ci <span class="sym">=</span> <span class="num">0</span><span class="sym">; }</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>ci <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span> s<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> ci<span class="sym">); }</span>
   <span class="sym">}</span>
<span class="sym">}</span>

