<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">   for JavaScript Rhino only</span>
<span class="com">*/</span>

<span class="kwd">importPackage</span><span class="sym">(</span>java<span class="sym">.</span>io<span class="sym">);</span>
<span class="kwd">importPackage</span><span class="sym">(</span>java<span class="sym">.</span>lang<span class="sym">);</span>

<span class="kwa">var</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">BufferedReader</span><span class="sym">(</span>
   <span class="kwa">new</span> <span class="kwd">InputStreamReader</span><span class="sym">(</span>Packages<span class="sym">.</span>java<span class="sym">.</span>lang<span class="sym">.</span>System<span class="sym">[</span><span class="str">'in'</span><span class="sym">]));</span>
<span class="kwa">var</span> sb <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StringBuffer</span><span class="sym">(</span><span class="num">10240</span><span class="sym">);</span>
<span class="kwa">var</span> cbuf <span class="sym">=</span> java<span class="sym">.</span>lang<span class="sym">.</span>reflect<span class="sym">.</span><span class="kwc">Array</span><span class="sym">.</span><span class="kwd">newInstance</span><span class="sym">(</span>
   java<span class="sym">.</span>lang<span class="sym">.</span>Character<span class="sym">.</span>TYPE<span class="sym">,</span> <span class="num">10240</span><span class="sym">);</span>
<span class="kwa">var</span> charsRead<span class="sym">;</span>

<span class="kwa">while</span> <span class="sym">((</span>charsRead <span class="sym">=</span> r<span class="sym">.</span><span class="kwd">read</span><span class="sym">(</span>cbuf<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">10240</span><span class="sym">)) != -</span><span class="num">1</span><span class="sym">)</span>
   sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>cbuf<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> charsRead<span class="sym">);</span>
<span class="kwa">var</span> seq <span class="sym">=</span> <span class="str">''</span> <span class="sym">+</span> sb<span class="sym">.</span><span class="kwc">toString</span><span class="sym">();</span>
 <span class="slc">// seq is now a JavaScript string, not a Java string.  Keeping it Java</span>
 <span class="slc">// might be faster, but wouldn't test JavaScript's speed.</span>
sb <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>

<span class="kwa">var</span> initialLength <span class="sym">=</span> seq<span class="sym">.</span><span class="kwc">length</span><span class="sym">;</span>
seq <span class="sym">=</span> seq<span class="sym">.</span><span class="kwc">replace</span><span class="sym">( /&gt;.*</span>\n<span class="sym">|</span>\n<span class="sym">/</span>g<span class="sym">,</span> <span class="str">''</span><span class="sym">);</span>
<span class="kwa">var</span> codeLength <span class="sym">=</span> seq<span class="sym">.</span><span class="kwc">length</span><span class="sym">;</span>

<span class="kwa">var</span> variants <span class="sym">= [</span> <span class="str">'agggtaaa|tttaccct'</span><span class="sym">,</span><span class="str">'[cgt]gggtaaa|tttaccc[acg]'</span><span class="sym">,</span>
   <span class="str">'a[act]ggtaaa|tttacc[agt]t'</span><span class="sym">,</span> <span class="str">'ag[act]gtaaa|tttac[agt]ct'</span><span class="sym">,</span>
   <span class="str">'agg[act]taaa|ttta[agt]cct'</span><span class="sym">,</span> <span class="str">'aggg[acg]aaa|ttt[cgt]ccct'</span><span class="sym">,</span>
   <span class="str">'agggt[cgt]aa|tt[acg]accct'</span><span class="sym">,</span> <span class="str">'agggta[cgt]a|t[acg]taccct'</span><span class="sym">,</span>
   <span class="str">'agggtaa[cgt]|[acg]ttaccct'</span> <span class="sym">];</span>
<span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i <span class="kwa">in</span> variants<span class="sym">) {</span>
   <span class="kwa">var</span> matches <span class="sym">=</span> seq<span class="sym">.</span><span class="kwc">match</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">RegExp</span><span class="sym">(</span>variants<span class="sym">[</span>i<span class="sym">],</span><span class="str">'g'</span><span class="sym">));</span>
   <span class="kwa">var</span> nummatches <span class="sym">= (</span>matches <span class="sym">!=</span> <span class="kwa">null</span><span class="sym">)</span> ? matches<span class="sym">.</span><span class="kwc">length</span> <span class="sym">:</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwc">print</span><span class="sym">(</span>variants<span class="sym">[</span>i<span class="sym">] +</span> <span class="str">' '</span> <span class="sym">+</span> nummatches<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">var</span> iubs<span class="sym">={</span><span class="str">'B'</span><span class="sym">:</span><span class="str">'(c|g|t)'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">:</span><span class="str">'(a|g|t)'</span><span class="sym">,</span> <span class="str">'H'</span><span class="sym">:</span><span class="str">'(a|c|t)'</span><span class="sym">,</span> <span class="str">'K'</span><span class="sym">:</span><span class="str">'(g|t)'</span><span class="sym">,</span>
   <span class="str">'M'</span><span class="sym">:</span><span class="str">'(a|c)'</span><span class="sym">,</span> <span class="str">'N'</span><span class="sym">:</span><span class="str">'(a|c|g|t)'</span><span class="sym">,</span> <span class="str">'R'</span><span class="sym">:</span><span class="str">'(a|g)'</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">:</span><span class="str">'(c|g)'</span><span class="sym">,</span>
   <span class="str">'V'</span><span class="sym">:</span><span class="str">'(a|c|g)'</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">:</span><span class="str">'(a|t)'</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">:</span><span class="str">'(c|t)'</span><span class="sym">};</span>
<span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> x <span class="kwa">in</span> iubs<span class="sym">) {</span>
   seq <span class="sym">=</span> seq<span class="sym">.</span><span class="kwc">replace</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">RegExp</span><span class="sym">(</span>x<span class="sym">,</span> <span class="str">'g'</span><span class="sym">),</span> iubs<span class="sym">[</span>x<span class="sym">]);</span>
   <span class="slc">// Passing Regexp object is required by benchmark.</span>
   <span class="slc">// Otherwise String.replace matches as a string</span>
<span class="sym">}</span>
<span class="kwc">print</span><span class="sym">();</span>
<span class="kwc">print</span><span class="sym">(</span>initialLength<span class="sym">);</span>
<span class="kwc">print</span><span class="sym">(</span>codeLength<span class="sym">);</span>
<span class="kwc">print</span><span class="sym">(</span>seq<span class="sym">.</span><span class="kwc">length</span><span class="sym">);</span>
