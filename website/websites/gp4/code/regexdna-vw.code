<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Eliot Miranda *&quot;</span><span class="sym">!</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>Tests
   superclass<span class="sym">: #</span>{Core<span class="sym">.</span>Object}
   indexedType<span class="sym">: #</span>none
   private<span class="sym">:</span> <span class="kwa">false</span>
   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   imports<span class="sym">:</span> <span class="str">''</span>
   category<span class="sym">:</span> <span class="str">'ComputerLanguageShootout'</span> <span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>

regexdna
   <span class="kwa">self</span> regexDNAFrom<span class="sym">:</span> Stdin to<span class="sym">:</span> Stdout<span class="sym">.</span>
   <span class="sym">^</span><span class="str">''</span> <span class="sym">! !</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarks'</span><span class="sym">!</span>

regexDNAFrom<span class="sym">:</span> input to<span class="sym">:</span> output
   <span class="sym">|</span> s size1 size2 translation <span class="sym">|</span>
   s <span class="sym">:=</span> input contents<span class="sym">.</span>
   size1 <span class="sym">:=</span> s size<span class="sym">.</span>

   <span class="com">&quot;* remove FASTA sequence descriptions and new-lines *&quot;</span>
   s <span class="sym">:=</span> s copyWithRegex<span class="sym">:</span> <span class="str">'&gt;[^\r]*\r|\r'</span> matchesReplacedWith<span class="sym">:</span> <span class="str">''</span><span class="sym">.</span>
   size2 <span class="sym">:=</span> s size<span class="sym">.</span>

   <span class="com">&quot;* regex match *&quot;</span>
   <span class="sym">#(</span>   <span class="str">'agggtaaa|tttaccct'</span>
      <span class="str">'[cgt]gggtaaa|tttaccc[acg]'</span>
      <span class="str">'a[act]ggtaaa|tttacc[agt]t'</span>
      <span class="str">'ag[act]gtaaa|tttac[agt]ct'</span>
      <span class="str">'agg[act]taaa|ttta[agt]cct'</span>
      <span class="str">'aggg[acg]aaa|ttt[cgt]ccct'</span>
      <span class="str">'agggt[cgt]aa|tt[acg]accct'</span>
      <span class="str">'agggta[cgt]a|t[acg]taccct'</span>
      <span class="str">'agggtaa[cgt]|[acg]ttaccct'</span><span class="sym">)</span>
      do<span class="sym">: [:</span>each <span class="sym">|</span>
         output nextPutAll<span class="sym">:</span> each<span class="sym">;</span> space<span class="sym">;</span> print<span class="sym">: (</span>s occurrencesOfRegex<span class="sym">:</span> each<span class="sym">);</span> cr<span class="sym">].</span>


   <span class="com">&quot;* regex substitution *&quot;</span>
   &quot;<span class="sym">#(   #(</span><span class="str">'B'</span> <span class="str">'(c|g|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'D'</span> <span class="str">'(a|g|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'H'</span> <span class="str">'(a|c|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'K'</span> <span class="str">'(g|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'M'</span> <span class="str">'(a|c)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'N'</span> <span class="str">'(a|c|g|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'R'</span> <span class="str">'(a|g)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'S'</span> <span class="str">'(c|g)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'V'</span> <span class="str">'(a|c|g)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'W'</span> <span class="str">'(a|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'Y'</span> <span class="str">'(c|t)'</span><span class="sym">))</span>
      do<span class="sym">: [:</span>each <span class="sym">|</span> s <span class="sym">:=</span> s copyReplacingAllRegex<span class="sym">:</span> each first with<span class="sym">:</span> each last<span class="sym">].</span>&quot;
   translation <span class="sym">:=</span> Dictionary new<span class="sym">.</span>
   <span class="sym">#(   #(</span><span class="str">'B'</span> <span class="str">'(c|g|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'D'</span> <span class="str">'(a|g|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'H'</span> <span class="str">'(a|c|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'K'</span> <span class="str">'(g|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'M'</span> <span class="str">'(a|c)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'N'</span> <span class="str">'(a|c|g|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'R'</span> <span class="str">'(a|g)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'S'</span> <span class="str">'(c|g)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'V'</span> <span class="str">'(a|c|g)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'W'</span> <span class="str">'(a|t)'</span><span class="sym">)</span>
      <span class="sym">#(</span><span class="str">'Y'</span> <span class="str">'(c|t)'</span><span class="sym">))</span>
      do<span class="sym">: [:</span>each <span class="sym">|</span> translation at<span class="sym">:</span> each first put<span class="sym">:</span> each last<span class="sym">].</span>
   s <span class="sym">:=</span> s
         copyWithRegex<span class="sym">:</span> <span class="str">'['</span><span class="sym">, (</span>translation keys asArray fold<span class="sym">: [:</span>a <span class="sym">:</span>b<span class="sym">|</span> a<span class="sym">,</span> b<span class="sym">]),</span> <span class="str">']'</span>
         matchesTranslatedUsing<span class="sym">: [:</span>l<span class="sym">|</span> translation at<span class="sym">:</span> l<span class="sym">].</span>

   output cr<span class="sym">;</span> print<span class="sym">:</span> size1<span class="sym">;</span> cr<span class="sym">;</span> print<span class="sym">:</span> size2<span class="sym">;</span> cr<span class="sym">;</span> print<span class="sym">:</span> s size<span class="sym">;</span> cr <span class="sym">! !</span>

