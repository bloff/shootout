<span class="com">&quot;The Computer Language Shootout</span>
<span class="com"> http://shootout.alioth.debian.org/</span>
<span class="com"> contributed by Isaac Gouy&quot;</span>
<span class="com"></span>
<span class="com">! FileStream methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">readFasta: anId</span>
<span class="com">   | idString newline buffer description line char |</span>
<span class="com">   idString := '&gt;',anId.</span>
<span class="com">   newline := Character nl.</span>
<span class="com"></span>
<span class="com">   [(self atEnd) or: [</span>
<span class="com">         (self peek = $&gt;)</span>
<span class="com">            ifTrue: [(line := self nextLine) startsWith: idString]</span>
<span class="com">            ifFalse: [self skipTo: newline. false]]</span>
<span class="com">      ] whileFalse.</span>
<span class="com"></span>
<span class="com">   description := line.</span>
<span class="com">   buffer := ByteStream on: (String new: 1024).</span>
<span class="com">   [(self atEnd) or: [(char := self peek) = $&gt;]] whileFalse: [</span>
<span class="com">      (char = $;)</span>
<span class="com">         ifTrue: [self nextLine]</span>
<span class="com">         ifFalse: [buffer nextPutAll: self nextLine]</span>
<span class="com">      ].</span>
<span class="com"></span>
<span class="com">   ^Association key: description value: buffer contents ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">! String methodsFor: 'analysis'!</span>
<span class="com"></span>
<span class="com">substringFrequencies: aLength</span>
<span class="com">   | answer |</span>
<span class="com">   answer := Dictionary new.</span>
<span class="com">   1 to: aLength do: [:i |</span>
<span class="com">      self inject: answer intoSubstringFrequencies: aLength offset: i].</span>
<span class="com">   ^answer !</span>
<span class="com"></span>
<span class="com">inject: aDictionary intoSubstringFrequencies: aLength offset: anInteger</span>
<span class="com">   anInteger to: self size - aLength + 1 by: aLength do: [:i |</span>
<span class="com">      | fragment assoc |</span>
<span class="com">      fragment := self copyFrom: i to: i + aLength - 1.</span>
<span class="com"></span>
<span class="com">      (assoc := aDictionary associationAt: fragment ifAbsent: []) isNil</span>
<span class="com">         ifTrue: [aDictionary at: fragment put: 1]</span>
<span class="com">         ifFalse: [assoc value: assoc value + 1] ] !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Float methodsFor: 'printing'!</span>
<span class="com"></span>
<span class="com">printStringRoundedTo: anInteger</span>
<span class="com">   | n s |</span>
<span class="com">   n := 0.5d * (10 raisedToInteger: anInteger negated).</span>
<span class="com">   s := ((self sign &lt; 0) ifTrue: [self - n] ifFalse: [self + n]) printString.</span>
<span class="com">   ^s copyFrom: 1 to: (s indexOf: $.) + anInteger ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">| sequence writeFrequencies writeCount |</span>
<span class="com">sequence := ((FileStream stdin bufferSize: 4096)</span>
<span class="com">   readFasta: 'THREE') value asUppercase.</span>
<span class="com"></span>
<span class="com">writeFrequencies := [:k | | frequencies count |</span>
<span class="com">   frequencies := SortedCollection sortBlock: [:a :b|</span>
<span class="com">      (a value = b value) ifTrue: [b key &lt; a key] ifFalse: [b value &lt; a value]].</span>
<span class="com"></span>
<span class="com">   count := 0.0.</span>
<span class="com">   (sequence substringFrequencies: k)</span>
<span class="com">      associationsDo: [:each| frequencies add: each. count := count + each value].</span>
<span class="com"></span>
<span class="com">   frequencies do: [:each | | percentage |</span>
<span class="com">      percentage := (each value / count) * 100.0.</span>
<span class="com">      Transcript show: each key; space;</span>
<span class="com">         show: (percentage printStringRoundedTo: 3); nl.</span>
<span class="com">      ].</span>
<span class="com">].</span>
<span class="com"></span>
<span class="com">writeCount := [:nucleotideFragment | | frequencies count |</span>
<span class="com">   frequencies := sequence substringFrequencies: nucleotideFragment size.</span>
<span class="com">   count := frequencies at: nucleotideFragment ifAbsent: [0].</span>
<span class="com">   Transcript show: count printString; tab; show: nucleotideFragment; nl</span>
<span class="com">].</span>
<span class="com"></span>
<span class="com">writeFrequencies value: 1. Transcript nl.</span>
<span class="com">writeFrequencies value: 2. Transcript nl.</span>
<span class="com"></span>
<span class="com">writeCount value: 'GGT'.</span>
<span class="com">writeCount value: 'GGTA'.</span>
<span class="com">writeCount value: 'GGTATT'.</span>
<span class="com">writeCount value: 'GGTATTTTAATT'.</span>
<span class="com">writeCount value: 'GGTATTTTAATTTATAGT' !</span>
