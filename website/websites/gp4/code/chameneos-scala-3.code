<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Yura Taras</span>
<span class="hl com">   modified by Isaac Gouy</span>
<span class="hl com">   modified by Julien Gaugaz</span>
<span class="hl com">*/</span>


<span class="hl kwa">object</span> chameneos <span class="hl sym">{</span>
  <span class="hl kwa">abstract class</span> Colour
  <span class="hl kwa">case object</span> RED <span class="hl kwa">extends</span> Colour
  <span class="hl kwa">case object</span> YELLOW <span class="hl kwa">extends</span> Colour
  <span class="hl kwa">case object</span> BLUE <span class="hl kwa">extends</span> Colour
  <span class="hl kwa">case object</span> FADED <span class="hl kwa">extends</span> Colour
  <span class="hl kwa">val</span> colours <span class="hl sym">=</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>BLUE<span class="hl sym">,</span> RED<span class="hl sym">,</span> YELLOW<span class="hl sym">)</span>
  <span class="hl kwa">class</span> MeetingPlace<span class="hl sym">(</span><span class="hl kwa">var</span> n<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">) {</span>
    <span class="hl kwa">var</span> other<span class="hl sym">:</span> Creature <span class="hl sym">=</span> _
    <span class="hl kwa">def</span> meet<span class="hl sym">(</span>c<span class="hl sym">:</span> Creature<span class="hl sym">) =</span> <span class="hl kwa">synchronized</span> <span class="hl sym">{</span>
      <span class="hl kwa">if</span><span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
          <span class="hl kwa">if</span><span class="hl sym">(</span>other <span class="hl sym">==</span> null<span class="hl sym">) {</span>
            other <span class="hl sym">=</span> c<span class="hl sym">;</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>wait<span class="hl sym">()</span>
          <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            other<span class="hl sym">.</span>setOther<span class="hl sym">(</span>c<span class="hl sym">.</span>colour<span class="hl sym">)</span>
            c<span class="hl sym">.</span>setOther<span class="hl sym">(</span>other<span class="hl sym">.</span>colour<span class="hl sym">)</span>
            other <span class="hl sym">=</span> null
            n <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>notify<span class="hl sym">()</span>
          <span class="hl sym">}</span>
        <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
          c<span class="hl sym">.</span>setOther<span class="hl sym">(</span>FADED<span class="hl sym">)</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">class</span> Creature<span class="hl sym">(</span><span class="hl kwa">private val</span> mp<span class="hl sym">:</span> MeetingPlace<span class="hl sym">,</span> <span class="hl kwa">var</span> colour<span class="hl sym">:</span> Colour<span class="hl sym">)</span> <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>
    <span class="hl kwa">private var</span> met <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> other<span class="hl sym">:</span> Colour <span class="hl sym">=</span> _
    <span class="hl kwa">def</span> setOther<span class="hl sym">(</span>_o<span class="hl sym">:</span> Colour<span class="hl sym">) {</span>
      other <span class="hl sym">=</span> _o
    <span class="hl sym">}</span>
    <span class="hl kwa">def</span> getCreaturesMet <span class="hl sym">=</span> met
    <span class="hl kwa">override def</span> run<span class="hl sym">() {</span>
      <span class="hl kwa">try</span> <span class="hl sym">{</span>
        <span class="hl kwa">while</span><span class="hl sym">(</span>colour <span class="hl sym">!=</span> FADED<span class="hl sym">) {</span>
          mp<span class="hl sym">.</span>meet<span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">)</span>
          <span class="hl kwa">if</span><span class="hl sym">(</span>other <span class="hl sym">==</span> FADED<span class="hl sym">) {</span>
            colour <span class="hl sym">=</span> FADED
          <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            met <span class="hl sym">=</span> met <span class="hl sym">+</span> <span class="hl num">1</span>
            colour <span class="hl sym">=</span> complement<span class="hl sym">(</span>other<span class="hl sym">)</span>
          <span class="hl sym">}</span>
        <span class="hl sym">}</span>
      <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">{</span>
        <span class="hl kwa">case</span> e<span class="hl sym">:</span><span class="hl kwc">InterruptedException</span> <span class="hl sym">=&gt; ()</span> <span class="hl slc">// Let the thread exit</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">def</span> complement<span class="hl sym">(</span>other<span class="hl sym">:</span> Colour<span class="hl sym">) =</span> Pair<span class="hl sym">(</span>colour<span class="hl sym">,</span>other<span class="hl sym">)</span> match <span class="hl sym">{</span>
          <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>RED<span class="hl sym">,</span>YELLOW<span class="hl sym">) =&gt;</span> BLUE
          <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>RED<span class="hl sym">,</span>BLUE<span class="hl sym">)   =&gt;</span> YELLOW
          <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>RED<span class="hl sym">,</span>RED<span class="hl sym">)    =&gt;</span> RED
          <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>YELLOW<span class="hl sym">,</span>BLUE<span class="hl sym">)=&gt;</span> RED
          <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>YELLOW<span class="hl sym">,</span>RED<span class="hl sym">)    =&gt;</span> BLUE
          <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>YELLOW<span class="hl sym">,</span>YELLOW<span class="hl sym">) =&gt;</span> YELLOW
          <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>BLUE<span class="hl sym">,</span>RED<span class="hl sym">)      =&gt;</span> YELLOW
          <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>BLUE<span class="hl sym">,</span>YELLOW<span class="hl sym">)   =&gt;</span> RED
          <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>BLUE<span class="hl sym">,</span>BLUE<span class="hl sym">)     =&gt;</span> BLUE
          <span class="hl kwa">case</span> Pair<span class="hl sym">(</span>FADED<span class="hl sym">,</span> _<span class="hl sym">)      =&gt;</span> FADED
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> apply<span class="hl sym">(</span>n<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">,</span> numChameneos<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">) {</span>
      <span class="hl kwa">val</span> mp <span class="hl sym">=</span> <span class="hl kwa">new</span> MeetingPlace<span class="hl sym">(</span>n<span class="hl sym">)</span>
      <span class="hl kwa">val</span> creatureColors<span class="hl sym">:</span><span class="hl kwc">Array</span><span class="hl sym">[</span>Colour<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwc">Array</span><span class="hl sym">(</span>numChameneos<span class="hl sym">)</span>
      <span class="hl kwa">var</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">while</span><span class="hl sym">(</span>i <span class="hl sym">&lt;</span> numChameneos<span class="hl sym">) {</span>
        creatureColors<span class="hl sym">(</span>i<span class="hl sym">) =</span> colours<span class="hl sym">(</span>i<span class="hl sym">%</span><span class="hl num">3</span><span class="hl sym">)</span>
        i <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">val</span> creatures <span class="hl sym">=</span> <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">val</span> x <span class="hl sym">&lt;-</span> creatureColors<span class="hl sym">)</span> <span class="hl kwa">yield</span> <span class="hl sym">{</span>
        <span class="hl kwa">val</span> cr <span class="hl sym">=</span> <span class="hl kwa">new</span> Creature<span class="hl sym">(</span>mp<span class="hl sym">,</span> x<span class="hl sym">);</span>
        cr<span class="hl sym">.</span>start<span class="hl sym">();</span>
        cr
      <span class="hl sym">}</span>
      creatures<span class="hl sym">.</span>foreach<span class="hl sym">(</span>x <span class="hl sym">=&gt;</span> x<span class="hl sym">.</span>join<span class="hl sym">)</span>
      <span class="hl kwa">val</span> meetings <span class="hl sym">= (</span>creatures foldLeft <span class="hl num">0</span><span class="hl sym">) {(</span>x<span class="hl sym">,</span> y<span class="hl sym">) =&gt; (</span>x <span class="hl sym">+</span> y<span class="hl sym">.</span>getCreaturesMet<span class="hl sym">)}</span>
      Console<span class="hl sym">.</span>println<span class="hl sym">(</span>meetings<span class="hl sym">)</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> main<span class="hl sym">(</span>args<span class="hl sym">:</span> <span class="hl kwc">Array</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]) {</span>
    <span class="hl kwa">if</span><span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">throw new</span> <span class="hl kwc">IllegalArgumentException</span><span class="hl sym">(</span><span class="hl str">&quot;Syntax: scala chameneos N [numChameneos]&quot;</span><span class="hl sym">)</span>
    <span class="hl kwa">val</span> N <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">))</span>
    <span class="hl kwa">var</span> numChameneos <span class="hl sym">=</span> <span class="hl num">4</span>
    <span class="hl kwa">if</span><span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">==</span> <span class="hl num">2</span><span class="hl sym">)</span>
      numChameneos <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">))</span>
    chameneos<span class="hl sym">(</span>N<span class="hl sym">,</span> numChameneos<span class="hl sym">)</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>



