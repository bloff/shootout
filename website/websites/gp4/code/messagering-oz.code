<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">% contributed by Isaac Gouy</span>

<span class="hl kwa">functor</span>
<span class="hl kwa">import</span> Application System

<span class="hl kwa">define</span>
   <span class="hl kwa">fun</span> <span class="hl sym">{</span>MessageRingThread Name Next<span class="hl sym">}</span>
      MessageList
      MessagePort <span class="hl sym">= {</span>Port<span class="hl sym">.</span>new MessageList<span class="hl sym">}</span>

      <span class="hl kwa">proc</span> <span class="hl sym">{</span>Loop M<span class="hl sym">|</span>Ms<span class="hl sym">}</span>             <span class="hl slc">% basic message loop</span>
         <span class="hl kwa">if</span> M <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            <span class="hl sym">{</span>Next<span class="hl sym">.</span>take M<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">}</span>
            <span class="hl sym">{</span>Loop Ms<span class="hl sym">}</span>
         <span class="hl kwa">else</span>
            <span class="hl sym">{</span>System<span class="hl sym">.</span>show Name<span class="hl sym">}</span>
            <span class="hl sym">{</span>Application<span class="hl sym">.</span>exit <span class="hl num">0</span><span class="hl sym">}</span>   <span class="hl slc">% exit without cleaning up</span>
         <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>

      <span class="hl kwa">proc</span> <span class="hl sym">{</span>Take M<span class="hl sym">}</span>
         <span class="hl sym">{</span>Port<span class="hl sym">.</span>send MessagePort M<span class="hl sym">}</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">in</span>
      <span class="hl kwa">thread</span> <span class="hl sym">{</span>Loop MessageList<span class="hl sym">}</span> <span class="hl kwa">end</span> <span class="hl slc">% spawn a MessageRingThread</span>
      ring<span class="hl sym">(</span>take<span class="hl sym">:</span> Take<span class="hl sym">)</span>              <span class="hl slc">% let function Take be used elsewhere</span>
   <span class="hl kwa">end</span>


   NumberOfThreads <span class="hl sym">=</span> <span class="hl num">503</span>

   <span class="hl sym">[</span>Arg<span class="hl sym">] = {</span>Application<span class="hl sym">.</span>getArgs plain<span class="hl sym">}</span>
   NumberOfMessagesToSend <span class="hl sym">= {</span>String<span class="hl sym">.</span>toInt Arg<span class="hl sym">}</span>

   <span class="hl kwa">fun</span> <span class="hl sym">{</span>MakeRing NumberOfThreads NextThread<span class="hl sym">}</span>
      <span class="hl kwa">if</span> NumberOfThreads <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         <span class="hl sym">{</span>MakeRing NumberOfThreads<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">{</span>MessageRingThread NumberOfThreads NextThread<span class="hl sym">}}</span>
      <span class="hl kwa">else</span>
         NextThread
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>


   <span class="hl slc">% The unbound logic variable FirstThread is passed into recursive function</span>
   <span class="hl slc">% MakeRing and the value returned by that function is then bound to variable</span>
   <span class="hl slc">% FirstThread, closing the message thread ring.</span>

   FirstThread <span class="hl sym">= {</span>MakeRing NumberOfThreads FirstThread<span class="hl sym">}</span>

<span class="hl kwa">in</span>
   <span class="hl sym">{</span>FirstThread<span class="hl sym">.</span>take NumberOfMessagesToSend<span class="hl sym">}</span>
<span class="hl kwa">end</span>
