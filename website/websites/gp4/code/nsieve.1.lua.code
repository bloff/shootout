<span class="slc">--- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- contributed by Isaac Gouy</span>
<span class="slc">-- modified by Mike Pall</span>


<span class="kwa">function</span> nsieve<span class="sym">(</span>m<span class="sym">,</span>isPrime<span class="sym">)</span>
   <span class="kwa">for</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">,</span>m <span class="kwa">do</span>
      isPrime<span class="sym">[</span>i<span class="sym">] =</span> true
   <span class="kwa">end</span>
   <span class="kwa">local</span> count <span class="sym">=</span> <span class="num">0</span>

   <span class="kwa">for</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">,</span>m <span class="kwa">do</span>
      <span class="kwa">if</span> isPrime<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">then</span>
         <span class="kwa">for</span> k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">,</span> m<span class="sym">,</span> i <span class="kwa">do</span>
            isPrime<span class="sym">[</span>k<span class="sym">] =</span> false
         <span class="kwa">end</span>
         count <span class="sym">=</span> count <span class="sym">+</span> <span class="num">1</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>
   <span class="kwa">return</span> count
<span class="kwa">end</span>


<span class="kwa">local</span> n <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1</span>
<span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">then</span> n <span class="sym">=</span> <span class="num">2</span> <span class="kwa">end</span>
<span class="kwa">local</span> flags <span class="sym">= {}</span>

<span class="kwa">local</span> m <span class="sym">= (</span><span class="num">2</span>^n<span class="sym">)*</span><span class="num">10000</span>
io.<span class="kwa">write</span><span class="sym">(</span> <span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">)),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

m <span class="sym">= (</span><span class="num">2</span>^<span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">))*</span><span class="num">10000</span>
io.<span class="kwa">write</span><span class="sym">(</span> <span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">)),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

m <span class="sym">= (</span><span class="num">2</span>^<span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">))*</span><span class="num">10000</span>
io.<span class="kwa">write</span><span class="sym">(</span> <span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">)),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
