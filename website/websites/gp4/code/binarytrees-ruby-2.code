<span class="slc"># The Computer Language Shootout Benchmarks</span>
<span class="slc"># http://shootout.alioth.debian.org</span>
<span class="slc">#</span>
<span class="slc"># contributed by Jesse Millikan</span>

<span class="kwa">def</span> <span class="kwd">item_check</span><span class="sym">(</span>tree)
 <span class="kwa">if</span> tree<span class="sym">[</span><span class="num">0</span><span class="sym">]</span> == <span class="kwa">nil</span>
  tree<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
 <span class="kwa">else</span>
  tree<span class="sym">[</span><span class="num">1</span><span class="sym">] +</span> <span class="kwd">item_check</span><span class="sym">(</span>tree<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>) <span class="sym">-</span> <span class="kwd">item_check</span><span class="sym">(</span>tree<span class="sym">[</span><span class="num">2</span><span class="sym">]</span>)
 <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">bottom_up_tree</span><span class="sym">(</span>item<span class="sym">,</span> depth)
 <span class="kwa">if</span> depth <span class="sym">&gt;</span> <span class="num">0</span>
  item_item = <span class="num">2</span> <span class="sym">*</span> item
  depth <span class="sym">-</span>= <span class="num">1</span>
  <span class="sym">[</span><span class="kwd">bottom_up_tree</span><span class="sym">(</span>item_item <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> depth)<span class="sym">,</span> item<span class="sym">,</span> <span class="kwd">bottom_up_tree</span><span class="sym">(</span>item_item<span class="sym">,</span> depth)<span class="sym">]</span>
 <span class="kwa">else</span>
  <span class="sym">[</span><span class="kwa">nil</span><span class="sym">,</span> item<span class="sym">,</span> <span class="kwa">nil</span><span class="sym">]</span>
 <span class="kwa">end</span>
<span class="kwa">end</span>

max_depth = <span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">].</span>to_i
min_depth = <span class="num">4</span>

max_depth = min_depth <span class="sym">+</span> <span class="num">2</span> <span class="kwa">if</span> min_depth <span class="sym">+</span> <span class="num">2</span> <span class="sym">&gt;</span> max_depth

stretch_depth = max_depth <span class="sym">+</span> <span class="num">1</span>
stretch_tree = <span class="kwd">bottom_up_tree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretch_depth)

puts <span class="str">&quot;stretch tree of depth #{stretch_depth}</span><span class="esc">\t</span> <span class="str">check: #{item_check(stretch_tree)</span><span class="sym">}</span><span class="str">&quot;</span>
<span class="str">stretch_tree = nil</span>
<span class="str"></span>
<span class="str">long_lived_tree = bottom_up_tree(0, max_depth)</span>

min_depth<span class="sym">.</span><span class="kwd">step</span><span class="sym">(</span>max_depth <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="num">2</span>) <span class="kwa">do</span> <span class="sym">|</span>depth<span class="sym">|</span>
 iterations = <span class="num">2</span><span class="sym">**(</span>max_depth <span class="sym">-</span> depth <span class="sym">+</span> min_depth)

 check = <span class="num">0</span>

 <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>iterations
  temp_tree = <span class="kwd">bottom_up_tree</span><span class="sym">(</span>i<span class="sym">,</span> depth)
  check <span class="sym">+</span>= <span class="kwd">item_check</span><span class="sym">(</span>temp_tree)

  temp_tree = <span class="kwd">bottom_up_tree</span><span class="sym">(-</span>i<span class="sym">,</span> depth)
  check <span class="sym">+</span>= <span class="kwd">item_check</span><span class="sym">(</span>temp_tree)
 <span class="kwa">end</span>

 puts <span class="str">&quot;#{iterations * 2}</span><span class="esc">\t</span> <span class="str">trees of depth #{depth}</span><span class="esc">\t</span> <span class="str">check: #{check}&quot;</span>
<span class="kwa">end</span>

puts <span class="str">&quot;long lived tree of depth #{max_depth}</span><span class="esc">\t</span> <span class="str">check: #{item_check(long_lived_tree)</span><span class="sym">}</span><span class="str">&quot;</span>
<span class="str"></span>
<span class="str"></span>
