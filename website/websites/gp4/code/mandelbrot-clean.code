<span class="sym">//</span> The Great Computer Language Shootout
<span class="sym">//</span> http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
<span class="sym">//</span>
<span class="sym">//</span> contributed by Diederik van Arkel

<span class="kwa">module</span> mandelbrot

<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

Start world
	# <span class="sym">(</span>console<span class="sym">,</span> world<span class="sym">)	=</span> stdio world
	# width				<span class="sym">=</span> argi
	# console			<span class="sym">=</span> console <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot;P4\n&quot;</span> <span class="sym">&lt;&lt;&lt;</span> width <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;&lt;</span> width <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot;\n&quot;</span>
	# chunks			<span class="sym">=</span> fractal <span class="sym">(</span>points width width<span class="sym">)</span>
	# pbm				<span class="sym">=</span> map makePBM chunks
	# console			<span class="sym">=</span> seq <span class="sym">(</span>map fwrites pbm<span class="sym">)</span> console
	# <span class="sym">(</span>ok<span class="sym">,</span>world<span class="sym">)		=</span> fclose console world
	<span class="sym">=</span> world

mandel_iter <span class="sym">::</span> <span class="kwb">Int</span>
mandel_iter   <span class="sym">=</span> <span class="num">50</span>

points <span class="sym">::</span> <span class="kwb">Int Int</span> <span class="sym">-&gt; [</span>{<span class="sym">!</span>Complex Real}<span class="sym">]</span>
points width height
	<span class="sym">= [</span>{<span class="sym">(</span><span class="num">2.0</span><span class="sym">*</span>x<span class="sym">/</span>w <span class="sym">-</span> <span class="num">1.5</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">*</span>y<span class="sym">/</span>h <span class="sym">-</span> <span class="num">1.0</span><span class="sym">)</span> \\ x <span class="sym">&lt;- [</span><span class="num">0.0</span>..w<span class="sym">-</span><span class="num">1.0</span><span class="sym">]</span>} \\ y <span class="sym">&lt;- [</span><span class="num">0.0</span>..h<span class="sym">-</span><span class="num">1.0</span><span class="sym">]]</span>
<span class="kwa">where</span>
	w	<span class="sym">=</span> toReal width
	h	<span class="sym">=</span> toReal height

fractal <span class="sym">:: [</span>{<span class="sym">!</span>Complex Real}<span class="sym">] -&gt; [</span>{#<span class="kwb">Int</span>}<span class="sym">]</span>
fractal <span class="sym">[]</span>
	<span class="sym">= []</span>
fractal <span class="sym">[</span>p<span class="sym">:</span>ps<span class="sym">]</span>
	<span class="sym">= [</span>{fractal` <span class="sym">(</span><span class="num">0.0</span> <span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span> mandel_iter c \\ c <span class="sym">&lt;-:</span> p} <span class="sym">:</span> fractal ps<span class="sym">]</span>

fractal` <span class="sym">:: !(</span>Complex Real<span class="sym">) !</span><span class="kwb">Int</span> <span class="sym">!(</span>Complex Real<span class="sym">) -&gt;</span> <span class="kwb">Int</span>
fractal` z iter c
	<span class="sym">| (((</span>r<span class="sym">*</span>r<span class="sym">) + (</span>i<span class="sym">*</span>i<span class="sym">)) &gt;</span> limit<span class="sym">)	=</span> <span class="num">0</span>
	<span class="sym">|</span> iter <span class="sym">==</span> <span class="num">1</span>			<span class="sym">=</span> <span class="num">1</span>
	<span class="sym">|</span> otherwise			<span class="sym">=</span> fractal` z` <span class="sym">(</span>iter<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> c
<span class="kwa">where</span>
	<span class="sym">(</span>r<span class="sym">,</span>i<span class="sym">)	=</span> z<span class="sym">*</span>z<span class="sym">+</span>c
	z`		<span class="sym">= (</span>r<span class="sym">,</span>i<span class="sym">)</span>
	limit	<span class="sym">=</span> <span class="num">4.0</span>

toArray l <span class="sym">=</span> {c \\ c <span class="sym">&lt;-</span> l}

makePBM <span class="sym">::</span> {#<span class="kwb">Int</span>} <span class="sym">-&gt;</span> .{#<span class="kwb">Char</span>}
makePBM a
	# x	<span class="sym">=</span> a.<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
	<span class="sym">=</span> toArray <span class="sym">(</span>makePBM <span class="num">1</span> x a<span class="sym">)</span>
<span class="kwa">where</span>
	m <span class="sym">=</span> size a

	makePBM <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>{#<span class="kwb">Int</span>} <span class="sym">-&gt; [</span><span class="kwb">Char</span><span class="sym">]</span>
	makePBM i acc a
		<span class="sym">|</span> i <span class="sym">&gt;=</span> m
			<span class="sym">= []</span>
		# x	<span class="sym">=</span> a.<span class="sym">[</span>i<span class="sym">]</span>
		# acc <span class="sym">= (</span>acc<span class="sym">*</span><span class="num">2</span><span class="sym">+</span>x<span class="sym">)</span>
		# i	<span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
		<span class="sym">|</span> i rem <span class="num">8</span> <span class="sym">==</span> <span class="num">0</span>
			<span class="sym">= [</span>toChar acc <span class="sym">:</span> makePBM i <span class="num">0</span> a<span class="sym">]</span>
		<span class="sym">|</span> i <span class="sym">==</span> m
			<span class="sym">= [(</span>toChar <span class="sym">(</span>acc <span class="sym">&lt;&lt; (</span><span class="num">8</span> <span class="sym">-</span> m rem <span class="num">8</span><span class="sym">)))]</span>
		<span class="sym">=</span> makePBM i acc a

<span class="sym">//</span> Complex

<span class="sym">::</span> Complex a <span class="sym">:== (!</span>a<span class="sym">,!</span>a<span class="sym">)</span>

<span class="kwa">instance</span> <span class="sym">+ (</span>Complex a<span class="sym">) | +</span> a
<span class="kwa">where</span>
	<span class="sym">(+) (</span>rl<span class="sym">,</span>il<span class="sym">) (</span>rr<span class="sym">,</span>ir<span class="sym">)</span>
		<span class="sym">= (</span>rl<span class="sym">+</span>rr<span class="sym">,</span>il<span class="sym">+</span>ir<span class="sym">)</span>

<span class="kwa">instance</span> <span class="sym">* (</span>Complex a<span class="sym">) | *,+,-</span> a
<span class="kwa">where</span>
	<span class="sym">(*) (</span>rl<span class="sym">,</span>il<span class="sym">) (</span>rr<span class="sym">,</span>ir<span class="sym">)</span>
		<span class="sym">= (</span>rl<span class="sym">*</span>rr <span class="sym">-</span> il<span class="sym">*</span>ir<span class="sym">,</span> rl<span class="sym">*</span>ir <span class="sym">+</span> rr<span class="sym">*</span>il<span class="sym">)</span>
