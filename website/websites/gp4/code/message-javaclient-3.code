<span class="com">/*</span>
<span class="com"> The Computer Language Shootout</span>
<span class="com"> http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com"> contributed by tt&#64;kyon.de</span>
<span class="com"> modified by tt&#64;kyon.de</span>
<span class="com"> */</span>
<span class="kwa">public final class</span> message <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{</span>

	<span class="kwa">private static final</span> <span class="kwb">int</span> THREADS <span class="sym">=</span> <span class="num">500</span><span class="sym">;</span>
	<span class="kwa">private static</span> <span class="kwb">int</span> msgCount<span class="sym">;</span>
	<span class="kwa">private final</span> message nextThread<span class="sym">;</span>
	<span class="kwa">private</span> <span class="kwb">int</span><span class="sym">[]</span> messages <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>msgCount<span class="sym">];</span>
	<span class="kwa">private</span> <span class="kwb">int</span> todo<span class="sym">;</span>
	<span class="kwa">private</span> <span class="kwb">boolean</span> waiting<span class="sym">;</span>

	<span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {</span>
		msgCount <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
		message thread <span class="sym">=</span> null<span class="sym">;</span>
		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> THREADS<span class="sym">; --</span>i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;) {</span>
			<span class="sym">(</span>thread <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">message</span><span class="sym">(</span>thread<span class="sym">)).</span><span class="kwd">start</span><span class="sym">();</span>
		<span class="sym">}</span>
		<span class="kwa">synchronized</span> <span class="sym">(</span>thread<span class="sym">) {</span>
			<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> msgCount<span class="sym">; --</span>i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;) {</span>
				thread<span class="sym">.</span><span class="kwd">send</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
	<span class="kwa">private</span> <span class="kwd">message</span><span class="sym">(</span>message next<span class="sym">) {</span>
		nextThread <span class="sym">=</span> next<span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">public synchronized</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
		<span class="kwa">try</span> <span class="sym">{</span>
			<span class="kwa">if</span> <span class="sym">(</span>todo <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
				waiting <span class="sym">=</span> true<span class="sym">;</span>
				<span class="kwd">wait</span><span class="sym">();</span>
				waiting <span class="sym">=</span> false<span class="sym">;</span>
			<span class="sym">}</span>
			<span class="kwa">if</span> <span class="sym">(</span>nextThread <span class="sym">!=</span> null<span class="sym">) {</span>
				<span class="kwd">pass</span><span class="sym">();</span>
			<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
				<span class="kwd">add</span><span class="sym">();</span>
			<span class="sym">}</span>
		<span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) {</span>
			<span class="slc">// will not be thrown under any normal circumstances</span>
			e<span class="sym">.</span><span class="kwd">printStackTrace</span><span class="sym">();</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
	<span class="kwa">private synchronized</span> <span class="kwb">void</span> <span class="kwd">pass</span><span class="sym">()</span> <span class="kwa">throws</span> <span class="kwc">InterruptedException</span> <span class="sym">{</span>
		<span class="kwb">int</span> done <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwa">for</span> <span class="sym">(;;) {</span>
			<span class="kwa">synchronized</span> <span class="sym">(</span>nextThread<span class="sym">) {</span>
				<span class="kwa">do</span> <span class="sym">{</span>
					nextThread<span class="sym">.</span><span class="kwd">send</span><span class="sym">(</span>messages<span class="sym">[</span>done<span class="sym">++] +</span> <span class="num">1</span><span class="sym">);</span>
				<span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>done <span class="sym">&lt;</span> todo<span class="sym">);</span>
			<span class="sym">}</span>
			<span class="kwa">while</span> <span class="sym">(</span>done <span class="sym">==</span> todo<span class="sym">) {</span>
				<span class="slc">// no unsynchronized todos left</span>
				waiting <span class="sym">=</span> true<span class="sym">;</span>
				<span class="kwd">wait</span><span class="sym">();</span>
				waiting <span class="sym">=</span> false<span class="sym">;</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
	<span class="kwa">private synchronized</span> <span class="kwb">void</span> <span class="kwd">add</span><span class="sym">()</span> <span class="kwa">throws</span> <span class="kwc">InterruptedException</span> <span class="sym">{</span>
		<span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwb">int</span> done <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwa">for</span> <span class="sym">(;;) {</span>
			<span class="kwa">do</span> <span class="sym">{</span>
				sum <span class="sym">+=</span> messages<span class="sym">[</span>done<span class="sym">++] +</span> <span class="num">1</span><span class="sym">;</span>
			<span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>done <span class="sym">&lt;</span> todo<span class="sym">);</span>
			<span class="kwa">while</span> <span class="sym">(</span>done <span class="sym">==</span> todo<span class="sym">) {</span>
				<span class="slc">// no unsynchronized todos left</span>
				<span class="kwa">if</span> <span class="sym">(</span>done <span class="sym">==</span> msgCount<span class="sym">) {</span>
					<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>sum<span class="sym">);</span>
					<span class="kwc">System</span><span class="sym">.</span><span class="kwd">exit</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
				<span class="sym">}</span>
				waiting <span class="sym">=</span> true<span class="sym">;</span>
				<span class="kwd">wait</span><span class="sym">();</span>
				waiting <span class="sym">=</span> false<span class="sym">;</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
	<span class="kwa">private</span> <span class="kwb">void</span> <span class="kwd">send</span><span class="sym">(</span><span class="kwb">int</span> message<span class="sym">) {</span>
		messages<span class="sym">[</span>todo<span class="sym">++] =</span> message<span class="sym">;</span>
		<span class="kwa">if</span> <span class="sym">(</span>waiting<span class="sym">) {</span>
			<span class="kwd">notify</span><span class="sym">();</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
<span class="sym">}</span>
