<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by  Cyril Adrian</span>

<span class="slc">-- SPLITFILE=linked_job.e</span>
<span class="kwa">class</span> LINKED_JOB

<span class="kwa">inherit</span>
   BACKGROUND_JOB
      <span class="kwa">redefine</span>
         is_ready
      <span class="kwa">end</span>

<span class="kwa">create</span> <span class="sym">{</span>ANY<span class="sym">}</span>
   link_to<span class="sym">,</span> make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>
   <span class="kwd">message</span> <span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">do</span>
         messages.<span class="kwd">add</span><span class="sym">(</span>i<span class="sym">)</span>
      <span class="kwa">end</span>

<span class="kwa">feature</span> <span class="sym">{</span>LOOP_ITEM<span class="sym">}</span>
   continue <span class="kwa">is</span>
      <span class="kwa">do</span>
         <span class="kwa">if</span> id <span class="sym">/=</span> <span class="num">0</span> <span class="kwa">then</span>
            next.<span class="kwd">message</span><span class="sym">(</span>messages.first <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
         <span class="kwa">else</span>
            <span class="kwa">if</span> sum <span class="sym">&gt;=</span> max <span class="kwa">then</span>
               stop.<span class="kwd">call</span><span class="sym">([</span>sum<span class="sym">])</span>
            <span class="kwa">else</span>
               sum <span class="sym">:=</span> sum <span class="sym">+ (</span>messages.first<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
            <span class="kwa">end</span>
         <span class="kwa">end</span>
         messages.remove
      <span class="kwa">end</span>

   <span class="kwd">is_ready</span> <span class="sym">(</span>ready<span class="sym">:</span> READY_DESCRIPTION<span class="sym">):</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is</span>
      <span class="kwa">do</span>
         <span class="kwa">Result</span> <span class="sym">:=</span> <span class="kwa">not</span> messages.is_empty
         <span class="kwa">if</span> id <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
            <span class="kwa">Result</span> <span class="sym">:=</span> <span class="kwa">Result or else</span> sum <span class="sym">&gt;=</span> max
         <span class="kwa">end</span>
      <span class="kwa">end</span>

   done<span class="sym">:</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is</span>
      <span class="kwa">do</span>
         <span class="kwa">Result</span> <span class="sym">:=</span> <span class="kwa">False</span>
      <span class="kwa">end</span>

   restart <span class="kwa">is</span>
      <span class="kwa">do</span>
      <span class="kwa">end</span>

<span class="kwa">feature</span> <span class="sym">{}</span>
   id<span class="sym">:</span> <span class="kwb">INTEGER</span>
   next<span class="sym">:</span> <span class="kwa">like Current</span>
   messages<span class="sym">:</span> QUEUE<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">]</span>
   sum<span class="sym">:</span> <span class="kwb">INTEGER</span>
   max<span class="sym">:</span> <span class="kwb">INTEGER</span>
   stop<span class="sym">:</span> PROCEDURE<span class="sym">[</span><span class="kwa">TUPLE</span><span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">]]</span>

   <span class="kwd">link_to</span> <span class="sym">(</span>a_id<span class="sym">:</span> <span class="kwa">like</span> id<span class="sym">;</span> a_next<span class="sym">:</span> <span class="kwa">like</span> next<span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">require</span>
         a_id <span class="sym">&gt;</span> <span class="num">0</span>
         a_next <span class="sym">/=</span> Void
      <span class="kwa">do</span>
         id <span class="sym">:=</span> a_id
         next <span class="sym">:=</span> a_next
         <span class="kwa">create</span> messages.make
      <span class="kwa">end</span>

   <span class="kwd">make</span> <span class="sym">(</span>a_max<span class="sym">:</span> <span class="kwa">like</span> max<span class="sym">;</span> a_stop<span class="sym">:</span> <span class="kwa">like</span> stop<span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">do</span>
         <span class="kwa">create</span> messages.make
         max <span class="sym">:=</span> a_max
         stop <span class="sym">:=</span> a_stop
      <span class="kwa">end</span>

<span class="kwa">end</span>
<span class="slc">-- SPLITFILE=message.e</span>
<span class="kwa">class</span> MESSAGE

<span class="kwa">inherit</span>
   BACKGROUND_JOB

insert
   ARGUMENTS

<span class="kwa">create</span> <span class="sym">{</span>ANY<span class="sym">}</span>
   make

<span class="kwa">feature</span> <span class="sym">{}</span>
   Jobs_count<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">500</span>
   messages_count<span class="sym">,</span> counter<span class="sym">:</span> <span class="kwb">INTEGER</span>
   job<span class="sym">:</span> LINKED_JOB
   stack<span class="sym">:</span> LOOP_STACK

   make <span class="kwa">is</span>
      <span class="kwa">local</span>
         i<span class="sym">:</span> <span class="kwb">INTEGER</span>
      <span class="kwa">do</span>
         <span class="kwa">create</span> stack.make
         stack.<span class="kwd">add_job</span><span class="sym">(</span><span class="kwa">Current</span><span class="sym">)</span>
         messages_count <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
         <span class="kwa">from</span>
            <span class="kwa">create</span> job.<span class="kwd">make</span><span class="sym">(</span>messages_count <span class="sym">*</span> Jobs_count<span class="sym">,</span> <span class="kwa">agent</span> stop<span class="sym">)</span>
            stack.<span class="kwd">add_job</span><span class="sym">(</span>job<span class="sym">)</span>
            i <span class="sym">:=</span> <span class="num">1</span>
         until
            i <span class="sym">=</span> Jobs_count
         <span class="kwa">loop</span>
            <span class="kwa">create</span> job.<span class="kwd">link_to</span><span class="sym">(</span>i<span class="sym">,</span> job<span class="sym">)</span>
            stack.<span class="kwd">add_job</span><span class="sym">(</span>job<span class="sym">)</span>
            i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>
         <span class="kwa">end</span>
         stack.run
      <span class="kwa">end</span>

   <span class="kwd">stop</span> <span class="sym">(</span>sum<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">do</span>
         <span class="kwd">print</span><span class="sym">(</span>sum.out <span class="sym">+</span> <span class="str">&quot;%N&quot;</span><span class="sym">)</span>
         stack.break
      <span class="kwa">end</span>

<span class="kwa">feature</span> <span class="sym">{</span>LOOP_ITEM<span class="sym">}</span>
   continue <span class="kwa">is</span>
      <span class="kwa">do</span>
         job.<span class="kwd">message</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
         counter <span class="sym">:=</span> counter <span class="sym">+</span> <span class="num">1</span>
      <span class="kwa">end</span>

   done<span class="sym">:</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is</span>
      <span class="kwa">do</span>
         <span class="kwa">Result</span> <span class="sym">:=</span> counter <span class="sym">=</span> messages_count
      <span class="kwa">end</span>

   restart <span class="kwa">is</span>
      <span class="kwa">do</span>
      <span class="kwa">end</span>

<span class="kwa">end</span>
