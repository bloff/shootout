<span class="hl com">/*</span>
<span class="hl com">** The Great Computer Language Shootout</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">** contributed by Mike Pall</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">unsigned int</span> bits<span class="hl sym">;</span>
<span class="hl dir">#define BBITS		(sizeof(bits) * 8)</span>
<span class="hl dir">#define BSIZE(x)	(((x) / 8) + sizeof(bits))</span>
<span class="hl dir">#define BMASK(x)	(1 &lt;&lt; ((x) % BBITS))</span>
<span class="hl dir">#define BTEST(p, x)	((p)[(x) / BBITS] &amp; BMASK(x))</span>
<span class="hl dir">#define BFLIP(p, x)	(p)[(x) / BBITS] ^= BMASK(x)</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwb">unsigned int</span> m<span class="hl sym">,</span> sz <span class="hl sym">=</span> <span class="hl num">10000</span> <span class="hl sym">&lt;&lt; (</span>argc <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">1</span><span class="hl sym">);</span>
  bits <span class="hl sym">*</span>primes <span class="hl sym">= (</span>bits <span class="hl sym">*)</span><span class="hl kwd">malloc</span><span class="hl sym">(</span><span class="hl kwd">BSIZE</span><span class="hl sym">(</span>sz<span class="hl sym">));</span>
  <span class="hl kwa">if</span> <span class="hl sym">(!</span>primes<span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>m <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> m <span class="hl sym">&lt;=</span> <span class="hl num">2</span><span class="hl sym">;</span> m<span class="hl sym">++) {</span>
    <span class="hl kwb">unsigned int</span> i<span class="hl sym">,</span> j<span class="hl sym">,</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> n <span class="hl sym">=</span> sz <span class="hl sym">&gt;&gt;</span> m<span class="hl sym">;</span>
    <span class="hl kwd">memset</span><span class="hl sym">(</span>primes<span class="hl sym">,</span> <span class="hl num">0xff</span><span class="hl sym">,</span> <span class="hl kwd">BSIZE</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">BTEST</span><span class="hl sym">(</span>primes<span class="hl sym">,</span> i<span class="hl sym">)) {</span>
	count<span class="hl sym">++;</span>
	<span class="hl kwa">for</span> <span class="hl sym">(</span>j <span class="hl sym">=</span> i <span class="hl sym">+</span> i<span class="hl sym">;</span> j <span class="hl sym">&lt;=</span> n<span class="hl sym">;</span> j <span class="hl sym">+=</span> i<span class="hl sym">)</span>
	  <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">BTEST</span><span class="hl sym">(</span>primes<span class="hl sym">,</span> j<span class="hl sym">))</span> <span class="hl kwd">BFLIP</span><span class="hl sym">(</span>primes<span class="hl sym">,</span> j<span class="hl sym">);</span>
      <span class="hl sym">}</span>
    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8d %8d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> count<span class="hl sym">);</span>
  <span class="hl sym">}</span>
  <span class="hl kwd">free</span><span class="hl sym">(</span>primes<span class="hl sym">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

