<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>

<span class="kwa">class</span> SpectralNorm
<span class="sym">{</span>
   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">) {</span>
      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">100</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0:f9}&quot;</span><span class="sym">,</span> <span class="kwa">new</span> <span class="kwd">SpectralNorm</span><span class="sym">().</span><span class="kwd">Approximate</span><span class="sym">(</span>n<span class="sym">));</span>
   <span class="sym">}</span>

   <span class="kwb">double</span> <span class="kwd">Approximate</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
      <span class="slc">// create unit vector</span>
      <span class="kwb">double</span><span class="sym">[]</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> u<span class="sym">[</span>i<span class="sym">] =</span>  <span class="num">1</span><span class="sym">;</span>

      <span class="slc">// 20 steps of the power method</span>
      <span class="kwb">double</span><span class="sym">[]</span> v <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> v<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span> i<span class="sym">++) {</span>
         <span class="kwd">MultiplyAtAv</span><span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">);</span>
         <span class="kwd">MultiplyAtAv</span><span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);</span>
      <span class="sym">}</span>

      <span class="slc">// B=AtA         A multiplied by A transposed</span>
      <span class="slc">// v.Bv /(v.v)   eigenvalue of v</span>
      <span class="kwb">double</span> vBv <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> vv <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
         vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];</span>
         vv  <span class="sym">+=</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];</span>
      <span class="sym">}</span>

      <span class="kwa">return</span> Math<span class="sym">.</span><span class="kwd">Sqrt</span><span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">);</span>
   <span class="sym">}</span>


   <span class="com">/* return element i,j of infinite matrix A */</span>
   <span class="kwb">double</span> <span class="kwd">A</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">){</span>
      <span class="kwa">return</span> <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span> <span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="com">/* multiply vector v by matrix A */</span>
   <span class="kwb">void</span> <span class="kwd">MultiplyAv</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> Av<span class="sym">){</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){</span>
         Av<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">++)</span> Av<span class="sym">[</span>i<span class="sym">] +=</span> <span class="kwd">A</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">];</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="com">/* multiply vector v by matrix A transposed */</span>
   <span class="kwb">void</span> <span class="kwd">MultiplyAtv</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> Atv<span class="sym">){</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>n<span class="sym">;</span>i<span class="sym">++){</span>
         Atv<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">++)</span> Atv<span class="sym">[</span>i<span class="sym">] +=</span> <span class="kwd">A</span><span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">];</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
   <span class="kwb">void</span> <span class="kwd">MultiplyAtAv</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> AtAv<span class="sym">){</span>
      <span class="kwb">double</span><span class="sym">[]</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];</span>
      <span class="kwd">MultiplyAv</span><span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);</span>
      <span class="kwd">MultiplyAtv</span><span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>AtAv<span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>
