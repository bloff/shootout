<span class="hl slc">;;; The Computer Language Shootout</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; by Risto Laakso 12/2005</span>
<span class="hl slc">;;; Modified by Stefan Lang 2007-02-10</span>

<span class="hl sym">(</span><span class="hl kwa">defun</span> main <span class="hl sym">()</span>
  <span class="hl sym">(</span>declare <span class="hl sym">(</span>optimize <span class="hl sym">(</span>speed <span class="hl num">3</span><span class="hl sym">) (</span>safety <span class="hl num">0</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>flet <span class="hl sym">((</span><span class="hl kwa">read</span>-fixnum <span class="hl sym">(</span>stream<span class="hl sym">)</span>
	   <span class="hl sym">(</span>let <span class="hl sym">((</span>num <span class="hl num">0</span><span class="hl sym">) (</span>sgn <span class="hl num">1</span><span class="hl sym">) (</span>skip t<span class="hl sym">))</span>
	     <span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum num sgn<span class="hl sym">))</span>
	     <span class="hl sym">(</span>loop for digit fixnum <span class="hl sym">= (</span><span class="hl kwa">read</span>-byte stream<span class="hl sym">)</span>
		   for n fixnum <span class="hl sym">= (</span>- digit #.<span class="hl sym">(</span>char-code #\0<span class="hl sym">))</span>
		   do <span class="hl sym">(</span><span class="hl kwa">cond</span> <span class="hl sym">((=</span> digit #.<span class="hl sym">(</span>char-code #\-<span class="hl sym">))</span>
			     <span class="hl sym">(</span>setf sgn -<span class="hl num">1</span><span class="hl sym">))</span>
			    <span class="hl sym">((&lt;=</span> <span class="hl num">0</span> n <span class="hl num">9</span><span class="hl sym">)</span>
			     <span class="hl sym">(</span>setf num <span class="hl sym">(+</span> n <span class="hl sym">(</span>the fixnum <span class="hl sym">(*</span> <span class="hl num">10</span> num<span class="hl sym">)))</span>
				   skip nil<span class="hl sym">))</span>
			    <span class="hl sym">((</span><span class="hl kwa">not</span> skip<span class="hl sym">)</span>
			     <span class="hl sym">(</span>return <span class="hl sym">(</span>the fixnum <span class="hl sym">(*</span> sgn num<span class="hl sym">)))))))))</span>
    <span class="hl sym">(</span>with-<span class="hl kwa">open</span>-file <span class="hl sym">(</span>in <span class="hl str">&quot;/dev/stdin&quot;</span> <span class="hl sym">:</span>element-<span class="hl kwa">type</span> <span class="hl sym">'(</span>unsigned-byte <span class="hl num">8</span><span class="hl sym">))</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>sum <span class="hl num">0</span><span class="hl sym">))</span>
	<span class="hl sym">(</span>declare <span class="hl sym">(</span>fixnum sum<span class="hl sym">))</span>
	<span class="hl sym">(</span>handler-case <span class="hl sym">(</span>loop <span class="hl sym">(</span>incf sum <span class="hl sym">(</span><span class="hl kwa">read</span>-fixnum in<span class="hl sym">)))</span>
	  <span class="hl sym">(</span>end-of-file <span class="hl sym">() (</span>format t <span class="hl str">&quot;~A~%&quot;</span> sum<span class="hl sym">)))))))</span>
