<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">*/</span>


enum Colour <span class="hl sym">{</span> blue<span class="hl sym">,</span> red<span class="hl sym">,</span> yellow <span class="hl sym">}</span>

Colour complementColour<span class="hl sym">(</span>Colour self<span class="hl sym">,</span> Colour other<span class="hl sym">);</span>
complementColour<span class="hl sym">(</span>blue<span class="hl sym">,</span>blue<span class="hl sym">) =</span> blue<span class="hl sym">;</span>
complementColour<span class="hl sym">(</span>blue<span class="hl sym">,</span>red<span class="hl sym">) =</span> yellow<span class="hl sym">;</span>
complementColour<span class="hl sym">(</span>blue<span class="hl sym">,</span>yellow<span class="hl sym">) =</span> red<span class="hl sym">;</span>
complementColour<span class="hl sym">(</span>red<span class="hl sym">,</span>red<span class="hl sym">) =</span> red<span class="hl sym">;</span>
complementColour<span class="hl sym">(</span>red<span class="hl sym">,</span>blue<span class="hl sym">) =</span> yellow<span class="hl sym">;</span>
complementColour<span class="hl sym">(</span>red<span class="hl sym">,</span>yellow<span class="hl sym">) =</span> blue<span class="hl sym">;</span>
complementColour<span class="hl sym">(</span>yellow<span class="hl sym">,</span>yellow<span class="hl sym">) =</span> yellow<span class="hl sym">;</span>
complementColour<span class="hl sym">(</span>yellow<span class="hl sym">,</span>blue<span class="hl sym">) =</span> red<span class="hl sym">;</span>
complementColour<span class="hl sym">(</span>yellow<span class="hl sym">,</span>red<span class="hl sym">) =</span> blue<span class="hl sym">;</span>

<span class="hl kwb">void</span> checkCreatureColourChanges<span class="hl sym">() {</span>
   <span class="hl kwa">let</span> colours <span class="hl sym">= [</span>blue<span class="hl sym">,</span>red<span class="hl sym">,</span>yellow<span class="hl sym">];</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>self <span class="hl sym">:</span> colours<span class="hl sym">)</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span>other <span class="hl sym">:</span> colours<span class="hl sym">)</span>
         println<span class="hl sym">(</span>self <span class="hl sym">+</span> <span class="hl str">&quot; + &quot;</span> <span class="hl sym">+</span> other <span class="hl sym">+</span> <span class="hl str">&quot; -&gt; &quot;</span> <span class="hl sym">+</span> complementColour<span class="hl sym">(</span>self<span class="hl sym">,</span>other<span class="hl sym">));</span>
   println<span class="hl sym">();</span>
<span class="hl sym">}</span>


<span class="hl slc">// Based on the &quot;Chameneos, a Concurrency Game for Java, Ada and Others&quot;</span>
<span class="hl slc">// implementation, but ...</span>
<span class="hl slc">// there seems to be thread starvation and a race condition on countdown?</span>

<span class="hl kwa">class</span> RendezvousServer <span class="hl sym">{</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> nameA <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwa">private</span> Colour colourA <span class="hl sym">=</span> blue<span class="hl sym">;</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> nameB <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwa">private</span> Colour colourB <span class="hl sym">=</span> blue<span class="hl sym">;</span>

   <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> firstCall <span class="hl sym">=</span> true<span class="hl sym">;</span>
   <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> mustWait <span class="hl sym">=</span> false<span class="hl sym">;</span>

   <span class="hl kwa">private</span> <span class="hl kwb">int</span> countdown <span class="hl sym">=</span> n<span class="hl sym">;</span>


   <span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">,</span>Colour<span class="hl sym">)</span> notify<span class="hl sym">(</span><span class="hl kwb">int</span> name<span class="hl sym">,</span> Colour colour<span class="hl sym">) {</span>

      <span class="hl kwa">synchronized</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">) {</span>

         var answerName <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         var answerColour <span class="hl sym">=</span> blue<span class="hl sym">;</span>

         <span class="hl kwa">while</span> <span class="hl sym">(</span> mustWait <span class="hl sym">&amp;&amp;</span> countdown <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">)</span> <span class="hl kwa">this</span><span class="hl sym">.</span>wait<span class="hl sym">();</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span> firstCall <span class="hl sym">) {</span>
            nameA <span class="hl sym">=</span> name<span class="hl sym">;</span> colourA <span class="hl sym">=</span> colour<span class="hl sym">;</span>
            firstCall <span class="hl sym">=</span> false<span class="hl sym">;</span>

            <span class="hl kwa">while</span> <span class="hl sym">( !</span> firstCall <span class="hl sym">&amp;&amp;</span> countdown <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">)</span> <span class="hl kwa">this</span><span class="hl sym">.</span>wait<span class="hl sym">();</span>
            answerName <span class="hl sym">=</span> nameB<span class="hl sym">;</span> answerColour <span class="hl sym">=</span> colourB<span class="hl sym">;</span>
            mustWait <span class="hl sym">=</span> false<span class="hl sym">;</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>notifyAll<span class="hl sym">();</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">else</span> <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>countdown <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
               nameB <span class="hl sym">=</span> name<span class="hl sym">;</span> colourB <span class="hl sym">=</span> colour<span class="hl sym">;</span>
               answerName <span class="hl sym">=</span> nameA<span class="hl sym">;</span> answerColour <span class="hl sym">=</span> colourA<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">else</span> <span class="hl sym">{</span>
               nameB <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> answerName <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>

            firstCall <span class="hl sym">=</span> true<span class="hl sym">;</span>
            mustWait <span class="hl sym">=</span> true<span class="hl sym">;</span>
            <span class="hl sym">--</span>countdown<span class="hl sym">;</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>notifyAll<span class="hl sym">();</span>
         <span class="hl sym">}</span>

         <span class="hl kwa">return</span> <span class="hl sym">(</span>answerName<span class="hl sym">,</span>answerColour<span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

<span class="hl sym">}</span>


<span class="hl kwa">class</span> Creature <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>
   <span class="hl kwa">private</span> <span class="hl kwb">int</span> name<span class="hl sym">;</span>
   Colour colour<span class="hl sym">;</span>
   <span class="hl kwb">int</span> selfMet <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwb">int</span> creaturesMet <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">private</span> RendezvousServer rendezvous<span class="hl sym">;</span>

   override <span class="hl kwb">void</span> run<span class="hl sym">(){</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
         <span class="hl sym">(</span><span class="hl kwb">int</span> otherName<span class="hl sym">,</span> Colour otherColour<span class="hl sym">) =</span> rendezvous<span class="hl sym">.</span>notify<span class="hl sym">(</span>name<span class="hl sym">,</span>colour<span class="hl sym">);</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span>otherName <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">break</span><span class="hl sym">;</span>

         colour <span class="hl sym">=</span> complementColour<span class="hl sym">(</span>colour<span class="hl sym">,</span>otherColour<span class="hl sym">);</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>otherName <span class="hl sym">==</span> name<span class="hl sym">)</span> selfMet<span class="hl sym">++;</span>
         creaturesMet<span class="hl sym">++;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

<span class="hl sym">}</span>


<span class="hl kwc">List</span><span class="hl sym">&lt;</span>Creature<span class="hl sym">&gt;</span> startRendezvousCreaturesWith<span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">&lt;</span>Colour<span class="hl sym">&gt;</span> colourList<span class="hl sym">){</span>
   <span class="hl kwa">let</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> RendezvousServer<span class="hl sym">();</span>
   var i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">let</span> rendezvousCreatures <span class="hl sym">=</span> colourList <span class="hl sym">.</span>map<span class="hl sym">(</span>
      Colour c <span class="hl sym">=&gt;</span> <span class="hl kwa">new</span> Creature<span class="hl sym">(</span>name<span class="hl sym">: ++</span>i<span class="hl sym">,</span> colour<span class="hl sym">:</span> c<span class="hl sym">,</span> rendezvous<span class="hl sym">:</span> r<span class="hl sym">));</span>

   <span class="hl kwa">for</span> <span class="hl sym">(</span>c <span class="hl sym">:</span> rendezvousCreatures<span class="hl sym">)</span> c<span class="hl sym">.</span>start<span class="hl sym">();</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>c <span class="hl sym">:</span> rendezvousCreatures<span class="hl sym">)</span> c<span class="hl sym">.</span>join<span class="hl sym">();</span>

   <span class="hl kwa">return</span> rendezvousCreatures<span class="hl sym">;</span>
<span class="hl sym">}</span>


<span class="hl kwb">void</span> reportRendezvouses<span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">&lt;</span>Colour<span class="hl sym">&gt;</span> colourList<span class="hl sym">){</span>
   <span class="hl kwa">let</span> numbers <span class="hl sym">= [</span><span class="hl str">&quot;zero&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;one&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;two&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;three&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;four&quot;</span><span class="hl sym">,</span>
                  <span class="hl str">&quot;five&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;six&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;seven&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;eight&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;nine&quot;</span><span class="hl sym">];</span>

   <span class="hl kwc">String</span> spellout<span class="hl sym">(</span><span class="hl kwb">int</span> k<span class="hl sym">) =</span>
      k <span class="hl sym">.</span>toString <span class="hl sym">.</span>toCharArray <span class="hl sym">.</span>foldLeft<span class="hl sym">(</span>
         <span class="hl sym">(</span><span class="hl kwc">String</span> s<span class="hl sym">,</span> <span class="hl kwb">char</span> c<span class="hl sym">) =&gt;</span>
            s <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> numbers<span class="hl sym">[</span> <span class="hl kwc">Character</span><span class="hl sym">.</span>getNumericValue<span class="hl sym">(</span>c<span class="hl sym">) ],</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>


   <span class="hl kwa">for</span> <span class="hl sym">(</span>c <span class="hl sym">:</span> colourList<span class="hl sym">)</span> print<span class="hl sym">(</span><span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> c<span class="hl sym">);</span> println<span class="hl sym">();</span>

   <span class="hl kwa">let</span> rendezvousCreatures <span class="hl sym">=</span> startRendezvousCreaturesWith<span class="hl sym">(</span>colourList<span class="hl sym">);</span>

   var sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span>c <span class="hl sym">:</span> rendezvousCreatures<span class="hl sym">){</span>
      sum <span class="hl sym">+=</span> c<span class="hl sym">.</span>creaturesMet<span class="hl sym">;</span>
      println<span class="hl sym">(</span>c<span class="hl sym">.</span>creaturesMet <span class="hl sym">+</span> spellout<span class="hl sym">(</span>c<span class="hl sym">.</span>selfMet<span class="hl sym">) );</span>
   <span class="hl sym">}</span>
   println<span class="hl sym">(</span> spellout<span class="hl sym">(</span>sum<span class="hl sym">) );</span>
   println<span class="hl sym">();</span>
<span class="hl sym">}</span>


var <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

<span class="hl kwb">void</span> main<span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
   n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span>parseInt<span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

   checkCreatureColourChanges<span class="hl sym">();</span>
   reportRendezvouses<span class="hl sym">([</span>blue<span class="hl sym">,</span>red<span class="hl sym">,</span>yellow<span class="hl sym">]);</span>
   reportRendezvouses<span class="hl sym">([</span>blue<span class="hl sym">,</span>red<span class="hl sym">,</span>yellow<span class="hl sym">,</span>red<span class="hl sym">,</span>yellow<span class="hl sym">,</span>blue<span class="hl sym">,</span>red<span class="hl sym">,</span>yellow<span class="hl sym">,</span>red<span class="hl sym">,</span>blue<span class="hl sym">]);</span>
<span class="hl sym">}</span>
