<span class="com">{-# OPTIONS_GHC -O2 -optc-O3 -funbox-strict-fields #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- contributed by Aaron Denney</span>
<span class="slc">-- modified by Chris Kuklewicz and Don Stewart</span>
<span class="slc">--</span>
<span class="slc">-- compile with &quot;ghc --make -O2 -funbox-strict-fields chameneos.hs -o chameneos.ghc_run&quot;</span>
<span class="slc">-- run with &quot;./chameneos.ghc_run %A&quot; where %A is the number of meetings</span>
<span class="slc">--</span>
<span class="slc">-- This is a symmetric solution that does not use a manager thread.</span>
<span class="slc">--</span>

<span class="kwa">import</span> Control.Concurrent
<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> System

<span class="kwa">data</span> Color <span class="sym">=</span> C <span class="sym">!</span><span class="kwb">Int</span> <span class="kwa">deriving</span> Eq
red <span class="sym">=</span> C <span class="num">0</span><span class="sym">;</span> yellow <span class="sym">=</span> C <span class="num">1</span><span class="sym">;</span> blue <span class="sym">=</span> C <span class="num">2</span><span class="sym">;</span> faded <span class="sym">=</span> C <span class="num">3</span>

complement <span class="sym">(</span>C a<span class="sym">) (</span>C b<span class="sym">) =</span> if a <span class="sym">==</span> b <span class="kwa">then</span> C a <span class="kwa">else</span> C <span class="sym">(</span><span class="num">3</span> <span class="sym">-</span> a <span class="sym">-</span> b<span class="sym">)</span>

<span class="kwa">data</span> Meeting <span class="sym">=</span> M <span class="sym">!(</span>MVar <span class="kwb">Int</span><span class="sym">) !(</span>MVar <span class="sym">(</span>Color<span class="sym">,</span> MVar Color<span class="sym">))</span>

new_meeting maxMeetings <span class="sym">=</span> liftM2 M <span class="sym">(</span>newMVar maxMeetings<span class="sym">)</span> newEmptyMVar

wait_other <span class="sym">(</span>M meets waiting<span class="sym">)</span> color wake_up <span class="sym">=</span> <span class="kwa">do</span>
  remainingMeets <span class="sym">&lt;-</span> takeMVar meets <span class="slc">-- used as lock</span>
  <span class="kwa">let</span> sleep_on <span class="sym">=</span> <span class="kwa">do</span> putMVar waiting <span class="sym">(</span>color<span class="sym">,</span> wake_up<span class="sym">)</span>
                    putMVar meets remainingMeets
                    takeMVar wake_up
      wake_waiter <span class="sym">(</span>other_c<span class="sym">,</span>other_wake_up<span class="sym">) =</span> <span class="kwa">do</span> putMVar other_wake_up color
                                               putMVar meets <span class="sym">(</span>remainingMeets <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
                                               return other_c
  <span class="kwa">case</span> remainingMeets <span class="kwa">of</span>
    <span class="num">0</span> <span class="sym">-&gt;</span> putMVar meets <span class="num">0</span> <span class="sym">&gt;&gt;</span> return faded
    _ <span class="sym">-&gt;</span> tryTakeMVar waiting <span class="sym">&gt;&gt;=</span> maybe sleep_on wake_waiter

spawnCreature meeting_place startingColor <span class="sym">=</span> <span class="kwa">do</span>
  metVar <span class="sym">&lt;-</span> newEmptyMVar
  wake_up  <span class="sym">&lt;-</span> newEmptyMVar
  <span class="kwa">let</span> creature <span class="sym">=</span> putMVar metVar <span class="sym">=&lt;&lt;</span> inner_creature startingColor <span class="sym">(</span><span class="num">0</span><span class="sym">::</span><span class="kwb">Int</span><span class="sym">)</span>
        <span class="kwa">where</span> inner_creature color have_met <span class="sym">=</span> <span class="kwa">do</span>
                color `seq` have_met `seq` return <span class="sym">()</span>
                other <span class="sym">&lt;-</span> wait_other meeting_place color wake_up
                if other <span class="sym">==</span> faded
                  <span class="kwa">then</span> return have_met
                  <span class="kwa">else</span> inner_creature <span class="sym">(</span>complement color other<span class="sym">) (</span>have_met <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
  forkIO $ creature <span class="slc">-- One thread per creature</span>
  return metVar

main <span class="sym">=</span> <span class="kwa">do</span> args <span class="sym">&lt;-</span> getArgs
          <span class="kwa">let</span> meetings <span class="sym">=</span> if null args <span class="kwa">then</span> <span class="sym">(</span><span class="num">1000000</span><span class="sym">::</span><span class="kwb">Int</span><span class="sym">)</span> <span class="kwa">else</span> <span class="sym">(</span>read . head<span class="sym">)</span> args
          meeting_place <span class="sym">&lt;-</span> new_meeting meetings
          metVars       <span class="sym">&lt;-</span> mapM <span class="sym">(</span>spawnCreature meeting_place<span class="sym">) [</span>blue<span class="sym">,</span> red<span class="sym">,</span> yellow<span class="sym">,</span> blue<span class="sym">]</span>
          mapM takeMVar metVars <span class="sym">&gt;&gt;=</span> print . sum <span class="slc">-- Main thread waits for completion</span>

