<span class="hl slc">! The Great Computer Language Shootout</span>
<span class="hl slc">!   http://shootout.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">!   contributed by Steve Decker, based on the Fortran version by Simon Geard</span>
<span class="hl slc">!</span>
<span class="hl slc">! compilation:</span>
<span class="hl slc">!   g95 -O3 -fomit-frame-pointer nsieve.f90</span>
<span class="hl slc">!   gfortran -O3 -funroll-loops -fomit-frame-pointer nsieve.f90</span>
<span class="hl slc">!   ifort -O3 -ip nsieve.f90</span>
program nsieve
  implicit none

  integer <span class="hl sym">::</span> num<span class="hl sym">,</span> i<span class="hl sym">,</span> m
  character<span class="hl sym">(</span>len<span class="hl sym">=</span><span class="hl num">2</span><span class="hl sym">) ::</span> argv
  logical<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> dimension<span class="hl sym">(:),</span> allocatable <span class="hl sym">::</span> flags

  call get_command_argument<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> argv<span class="hl sym">)</span>
  read<span class="hl sym">(</span>argv<span class="hl sym">, *)</span> num

  do i <span class="hl sym">=</span> num<span class="hl sym">,</span> num<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">, -</span><span class="hl num">1</span>
     m <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">**</span>i <span class="hl sym">*</span> <span class="hl num">10000</span>
     if <span class="hl sym">(</span>i <span class="hl sym">==</span> num<span class="hl sym">)</span> allocate<span class="hl sym">(</span>flags<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">:</span>m<span class="hl sym">))</span>
     write<span class="hl sym">(*,</span> <span class="hl str">&quot;(2(a,i8))&quot;</span><span class="hl sym">)</span>  <span class="hl str">&quot;Primes up to &quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> nsi<span class="hl sym">(</span>m<span class="hl sym">)</span>
  end do

contains

  integer function nsi<span class="hl sym">(</span>m<span class="hl sym">)</span>
    integer<span class="hl sym">,</span> intent<span class="hl sym">(</span>in<span class="hl sym">) ::</span> m

    integer <span class="hl sym">::</span> i<span class="hl sym">,</span> k

    flags<span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">:</span>m<span class="hl sym">) =</span> .true.
    nsi <span class="hl sym">=</span> <span class="hl num">0</span>
    do i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">,</span> m
       if <span class="hl sym">(</span>flags<span class="hl sym">(</span>i<span class="hl sym">))</span> then
<span class="hl slc">!          flags(2*i:m:i) = .false.    !!! Causes segfault in gfortran</span>
          do k <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">*</span>i<span class="hl sym">,</span> m<span class="hl sym">,</span> i
             flags<span class="hl sym">(</span>k<span class="hl sym">) =</span> .false.
          end do
          nsi <span class="hl sym">=</span> nsi <span class="hl sym">+</span> <span class="hl num">1</span>
       end if
    end do
  end function nsi
end program nsieve
