<span class="hl slc">-- SPLITFILE=pidigits.e</span>
<span class="hl kwa">class</span> PIDIGITS
<span class="hl slc">--</span>
<span class="hl slc">-- Written by Cyril Adrian &lt;cyril.adrian&#64;laposte.net&gt;</span>
<span class="hl slc">--</span>

insert
   ARGUMENTS

<span class="hl kwa">create</span> <span class="hl sym">{</span>ANY<span class="hl sym">}</span>
   make

<span class="hl kwa">feature</span> <span class="hl sym">{}</span>
   step<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">is</span> <span class="hl num">10</span>

   make <span class="hl kwa">is</span>
      <span class="hl kwa">local</span>
         digits<span class="hl sym">:</span> PI_DIGIT_SPIGOT<span class="hl sym">;</span> n<span class="hl sym">,</span> i<span class="hl sym">,</span> j<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span>
      <span class="hl kwa">do</span>
         <span class="hl kwa">if</span> argument_count <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
            <span class="hl kwa">from</span>
               n <span class="hl sym">:=</span> <span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>.to_integer
               <span class="hl kwa">create</span> digits.make
            until n <span class="hl sym">&lt;=</span> <span class="hl num">0</span> <span class="hl kwa">loop</span>
               <span class="hl kwa">if</span> n <span class="hl sym">&gt;=</span> step <span class="hl kwa">then</span>
                  <span class="hl kwa">from</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> until i <span class="hl sym">=</span> step <span class="hl kwa">loop</span>
                     digits.next
                     std_output.<span class="hl kwd">put_integer</span><span class="hl sym">(</span>digits.item<span class="hl sym">)</span>
                     i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
                  <span class="hl kwa">end</span>
                  j <span class="hl sym">:=</span> j <span class="hl sym">+</span> step
               <span class="hl kwa">else</span>
                  <span class="hl kwa">from</span>
                     <span class="hl kwa">from</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> until i <span class="hl sym">=</span> n <span class="hl kwa">loop</span>
                        digits.next
                        std_output.<span class="hl kwd">put_integer</span><span class="hl sym">(</span>digits.item<span class="hl sym">)</span>
                        i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
                     <span class="hl kwa">end</span>
                  until i <span class="hl sym">=</span> step <span class="hl kwa">loop</span>
                     std_output.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">)</span>
                     i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
                  <span class="hl kwa">end</span>
                  j <span class="hl sym">:=</span> j <span class="hl sym">+</span> n
               <span class="hl kwa">end</span>
               std_output.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">'%T'</span><span class="hl sym">)</span>
               std_output.<span class="hl kwd">put_character</span><span class="hl sym">(</span><span class="hl str">':'</span><span class="hl sym">)</span>
               std_output.<span class="hl kwd">put_integer</span><span class="hl sym">(</span>j<span class="hl sym">)</span>
               std_output.put_new_line
               n <span class="hl sym">:=</span> n <span class="hl sym">-</span> step
            <span class="hl kwa">end</span>
         <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>

<span class="hl kwa">end</span>
<span class="hl slc">-- SPLITFILE=pi_digit_spigot.e</span>
<span class="hl kwa">class</span> PI_DIGIT_SPIGOT
<span class="hl slc">--</span>
<span class="hl slc">-- Written by Cyril Adrian &lt;cyril.adrian&#64;laposte.net&gt;</span>
<span class="hl slc">--</span>

<span class="hl kwa">create</span> <span class="hl sym">{</span>PIDIGITS<span class="hl sym">}</span>
   make

<span class="hl kwa">feature</span> <span class="hl sym">{</span>PIDIGITS<span class="hl sym">}</span>
   next <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         item <span class="hl sym">:=</span> digit
         <span class="hl kwa">if</span> <span class="hl kwd">is_safe</span><span class="hl sym">(</span>item<span class="hl sym">)</span> <span class="hl kwa">then</span>
            <span class="hl kwd">produce</span><span class="hl sym">(</span>item<span class="hl sym">)</span>
         <span class="hl kwa">else</span>
            consume
            next
         <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>

   item<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span>

<span class="hl kwa">feature</span> <span class="hl sym">{}</span>
   digit<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         <span class="hl kwa">Result</span> <span class="hl sym">:=</span> z.<span class="hl kwd">extract</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>

   <span class="hl kwd">is_safe</span> <span class="hl sym">(</span>a_digit<span class="hl sym">:</span> <span class="hl kwa">like</span> digit<span class="hl sym">):</span> <span class="hl kwb">BOOLEAN</span> <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         <span class="hl kwa">Result</span> <span class="hl sym">:=</span> a_digit <span class="hl sym">=</span> z.<span class="hl kwd">extract</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>

   <span class="hl kwd">produce</span> <span class="hl sym">(</span>i<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         inverse.<span class="hl kwd">qrst</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">, -</span><span class="hl num">10</span> <span class="hl sym">*</span> i<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
         inverse.<span class="hl kwd">compose</span><span class="hl sym">(</span>z<span class="hl sym">)</span>
         z.<span class="hl kwd">copy</span><span class="hl sym">(</span>inverse<span class="hl sym">)</span>
      <span class="hl kwa">end</span>

   consume <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         x.next
         z.<span class="hl kwd">compose</span><span class="hl sym">(</span>x<span class="hl sym">)</span>
      <span class="hl kwa">end</span>

<span class="hl kwa">feature</span> <span class="hl sym">{}</span>
   x<span class="hl sym">,</span> z<span class="hl sym">,</span> inverse<span class="hl sym">:</span> TRANSFORMATION

   make <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         z.<span class="hl kwd">qrst</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>

<span class="hl kwa">end</span>
<span class="hl slc">-- SPLITFILE=transformation.e</span>
<span class="hl kwa">expanded class</span> TRANSFORMATION
<span class="hl slc">--</span>
<span class="hl slc">-- Written by Cyril Adrian &lt;cyril.adrian&#64;laposte.net&gt;</span>
<span class="hl slc">-- and Frederic Merizen &lt;frederic.merizen&#64;loria.fr&gt;</span>
<span class="hl slc">--</span>

insert
   ANY
      <span class="hl kwa">redefine</span>
         default_create<span class="hl sym">,</span> copy<span class="hl sym">,</span> is_equal
      <span class="hl kwa">end</span>

<span class="hl kwa">feature</span> <span class="hl sym">{</span>ANY<span class="hl sym">}</span>
   <span class="hl kwd">copy</span> <span class="hl sym">(</span>other<span class="hl sym">:</span> <span class="hl kwa">like Current</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         q.<span class="hl kwd">copy</span><span class="hl sym">(</span>other.q<span class="hl sym">)</span>
         r.<span class="hl kwd">copy</span><span class="hl sym">(</span>other.r<span class="hl sym">)</span>
         s.<span class="hl kwd">copy</span><span class="hl sym">(</span>other.s<span class="hl sym">)</span>
         t.<span class="hl kwd">copy</span><span class="hl sym">(</span>other.t<span class="hl sym">)</span>
      <span class="hl kwa">end</span>

   <span class="hl kwd">is_equal</span> <span class="hl sym">(</span>other<span class="hl sym">:</span> <span class="hl kwa">like Current</span><span class="hl sym">):</span> <span class="hl kwb">BOOLEAN</span> <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         <span class="hl kwa">Result</span> <span class="hl sym">:=</span> q.<span class="hl kwd">is_equal</span><span class="hl sym">(</span>other.q<span class="hl sym">)</span> <span class="hl kwa">and then</span> r.<span class="hl kwd">is_equal</span><span class="hl sym">(</span>other.r<span class="hl sym">)</span> <span class="hl kwa">and then</span> s.<span class="hl kwd">is_equal</span><span class="hl sym">(</span>other.s<span class="hl sym">)</span> <span class="hl kwa">and then</span> t.<span class="hl kwd">is_equal</span><span class="hl sym">(</span>other.t<span class="hl sym">)</span>
      <span class="hl kwa">end</span>

<span class="hl kwa">feature</span> <span class="hl sym">{</span>TRANSFORMATION<span class="hl sym">}</span>
   q<span class="hl sym">,</span> r<span class="hl sym">,</span> s<span class="hl sym">,</span> t<span class="hl sym">:</span> MUTABLE_BIG_INTEGER

<span class="hl kwa">feature</span> <span class="hl sym">{</span>PI_DIGIT_SPIGOT<span class="hl sym">}</span>
   <span class="hl kwd">qrst</span> <span class="hl sym">(</span>a_q<span class="hl sym">,</span> a_r<span class="hl sym">,</span> a_s<span class="hl sym">,</span> a_t<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         q.<span class="hl kwd">from_integer</span><span class="hl sym">(</span>a_q<span class="hl sym">)</span>
         r.<span class="hl kwd">from_integer</span><span class="hl sym">(</span>a_r<span class="hl sym">)</span>
         s.<span class="hl kwd">from_integer</span><span class="hl sym">(</span>a_s<span class="hl sym">)</span>
         t.<span class="hl kwd">from_integer</span><span class="hl sym">(</span>a_t<span class="hl sym">)</span>
         k <span class="hl sym">:=</span> <span class="hl num">0</span>
      <span class="hl kwa">end</span>

   next <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         k <span class="hl sym">:=</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
         q.<span class="hl kwd">from_integer</span><span class="hl sym">(</span>k<span class="hl sym">)</span>
         r.<span class="hl kwd">from_integer</span><span class="hl sym">(</span><span class="hl num">4</span> <span class="hl sym">*</span> k <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span>
         s.<span class="hl kwd">from_integer</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
         t.<span class="hl kwd">from_integer</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>

   <span class="hl kwd">extract</span> <span class="hl sym">(</span>j<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span><span class="hl sym">):</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         tmp1.<span class="hl kwd">from_integer</span><span class="hl sym">(</span>j<span class="hl sym">)</span>

         <span class="hl slc">-- n = q*j+r</span>
         tmp2.<span class="hl kwd">copy</span><span class="hl sym">(</span>q<span class="hl sym">)</span>
         tmp2.<span class="hl kwd">multiply</span><span class="hl sym">(</span>tmp1<span class="hl sym">)</span>
         tmp2.<span class="hl kwd">add</span><span class="hl sym">(</span>r<span class="hl sym">)</span>

         <span class="hl slc">-- d = q*j+t</span>
         tmp3.<span class="hl kwd">copy</span><span class="hl sym">(</span>s<span class="hl sym">)</span>
         tmp3.<span class="hl kwd">multiply</span><span class="hl sym">(</span>tmp1<span class="hl sym">)</span>
         tmp3.<span class="hl kwd">add</span><span class="hl sym">(</span>t<span class="hl sym">)</span>

         <span class="hl slc">-- Result = n/d</span>
         tmp2.<span class="hl kwd">divide</span><span class="hl sym">(</span>tmp3<span class="hl sym">)</span>
         <span class="hl kwa">Result</span> <span class="hl sym">:=</span> tmp2.to_integer
      <span class="hl kwa">end</span>

   <span class="hl kwd">compose</span> <span class="hl sym">(</span>a<span class="hl sym">:</span> <span class="hl kwa">like Current</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         tmp1.<span class="hl kwd">copy</span><span class="hl sym">(</span>s<span class="hl sym">)</span>

         <span class="hl slc">-- ns = s*a.q + t*a.s</span>
         s.<span class="hl kwd">multiply</span><span class="hl sym">(</span>a.q<span class="hl sym">)</span>
         tmp2.<span class="hl kwd">copy</span><span class="hl sym">(</span>t<span class="hl sym">)</span>
         tmp2.<span class="hl kwd">multiply</span><span class="hl sym">(</span>a.s<span class="hl sym">)</span>
         s.<span class="hl kwd">add</span><span class="hl sym">(</span>tmp2<span class="hl sym">)</span>

         <span class="hl slc">-- nt = s*a.r + t*a.t</span>
         tmp1.<span class="hl kwd">multiply</span><span class="hl sym">(</span>a.r<span class="hl sym">)</span>
         t.<span class="hl kwd">multiply</span><span class="hl sym">(</span>a.t<span class="hl sym">)</span>
         t.<span class="hl kwd">add</span><span class="hl sym">(</span>tmp1<span class="hl sym">)</span>

         <span class="hl slc">-- nr = q*a.r + r*a.t</span>
         tmp1.<span class="hl kwd">copy</span><span class="hl sym">(</span>a.r<span class="hl sym">)</span>
         tmp1.<span class="hl kwd">multiply</span><span class="hl sym">(</span>q<span class="hl sym">)</span>
         r.<span class="hl kwd">multiply</span><span class="hl sym">(</span>a.t<span class="hl sym">)</span>
         r.<span class="hl kwd">add</span><span class="hl sym">(</span>tmp1<span class="hl sym">)</span>

         <span class="hl slc">-- nq = q*a.q</span>
         q.<span class="hl kwd">multiply</span><span class="hl sym">(</span>a.q<span class="hl sym">)</span>

         k <span class="hl sym">:=</span> <span class="hl num">0</span>
      <span class="hl kwa">end</span>

<span class="hl kwa">feature</span> <span class="hl sym">{}</span>
   k<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span>

   tmp1<span class="hl sym">:</span> MUTABLE_BIG_INTEGER <span class="hl kwa">is</span>
      <span class="hl kwa">once</span>
         <span class="hl kwa">create Result</span>.<span class="hl kwd">from_integer</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>

   tmp2<span class="hl sym">:</span> MUTABLE_BIG_INTEGER <span class="hl kwa">is</span>
      <span class="hl kwa">once</span>
         <span class="hl kwa">create Result</span>.<span class="hl kwd">from_integer</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>

   tmp3<span class="hl sym">:</span> MUTABLE_BIG_INTEGER <span class="hl kwa">is</span>
      <span class="hl kwa">once</span>
         <span class="hl kwa">create Result</span>.<span class="hl kwd">from_integer</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>

   default_create <span class="hl kwa">is</span>
      <span class="hl kwa">do</span>
         <span class="hl kwa">create</span> q.<span class="hl kwd">from_integer</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl kwa">create</span> r.<span class="hl kwd">from_integer</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl kwa">create</span> s.<span class="hl kwd">from_integer</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
         <span class="hl kwa">create</span> t.<span class="hl kwd">from_integer</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>

<span class="hl kwa">end</span>
