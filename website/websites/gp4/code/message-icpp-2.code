<span class="hl slc">//   The Computer Language Shootout</span>
<span class="hl slc">//   http://shootout.alioth.debian.org/</span>
<span class="hl slc">//   contributed by Paul Kitchin</span>
<span class="hl slc">//   compile with -lpthread</span>

<span class="hl dir">#include &lt;iostream&gt;</span>
<span class="hl dir">#include &lt;sstream&gt;</span>
<span class="hl dir">#include &lt;pthread.h&gt;</span>
<span class="hl dir">#include &lt;semaphore.h&gt;</span>

<span class="hl kwb">unsigned int const</span> number_of_threads <span class="hl sym">=</span> <span class="hl num">500</span><span class="hl sym">;</span>
<span class="hl kwb">unsigned int const</span> thread_stack_size <span class="hl sym">=</span> <span class="hl num">100</span> <span class="hl sym">*</span> <span class="hl num">1024</span><span class="hl sym">;</span>
<span class="hl kwb">unsigned int</span> number_of_messages_per_thread<span class="hl sym">;</span>
<span class="hl kwb">unsigned int</span> message_total<span class="hl sym">;</span>

sem_t signals<span class="hl sym">[</span>number_of_threads<span class="hl sym">][</span><span class="hl num">2</span><span class="hl sym">];</span>
<span class="hl kwb">unsigned int</span> <span class="hl kwc">volatile</span> messages<span class="hl sym">[</span>number_of_threads<span class="hl sym">];</span>

<span class="hl kwb">void</span> <span class="hl sym">*</span> <span class="hl kwd">thread_function</span><span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*</span> argument<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">unsigned int</span> thread_id <span class="hl sym">=</span> <span class="hl kwa">reinterpret_cast</span><span class="hl sym">&lt;</span> <span class="hl kwb">unsigned int</span> <span class="hl sym">&gt;(</span>argument<span class="hl sym">);</span>
   sem_t <span class="hl sym">&amp;</span> <span class="hl kwd">thread_signal_1</span><span class="hl sym">(</span>signals<span class="hl sym">[</span>thread_id<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">]);</span>
   sem_t <span class="hl sym">&amp;</span> <span class="hl kwd">thread_signal_2</span><span class="hl sym">(</span>signals<span class="hl sym">[</span>thread_id<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">]);</span>
   <span class="hl kwb">unsigned int</span> <span class="hl kwc">volatile</span> <span class="hl sym">&amp;</span> <span class="hl kwd">thread_message</span><span class="hl sym">(</span>messages<span class="hl sym">[</span>thread_id<span class="hl sym">]);</span>
   <span class="hl kwb">unsigned int</span> messages_received <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>thread_id <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">!=</span> number_of_threads<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      sem_t <span class="hl sym">&amp;</span> <span class="hl kwd">next_thread_signal_1</span><span class="hl sym">(</span>signals<span class="hl sym">[</span>thread_id <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">]);</span>
      sem_t <span class="hl sym">&amp;</span> <span class="hl kwd">next_thread_signal_2</span><span class="hl sym">(</span>signals<span class="hl sym">[</span>thread_id <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">]);</span>
      <span class="hl kwb">unsigned int</span> <span class="hl kwc">volatile</span> <span class="hl sym">&amp;</span> <span class="hl kwd">next_thread_message</span><span class="hl sym">(</span>messages<span class="hl sym">[</span>thread_id <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">]);</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>messages_received <span class="hl sym">!=</span> number_of_messages_per_thread<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwd">sem_wait</span><span class="hl sym">(&amp;</span>thread_signal_2<span class="hl sym">);</span>
         <span class="hl kwd">sem_wait</span><span class="hl sym">(&amp;</span>next_thread_signal_1<span class="hl sym">);</span>
         next_thread_message <span class="hl sym">=</span> thread_message <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         thread_message <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwd">sem_post</span><span class="hl sym">(&amp;</span>next_thread_signal_2<span class="hl sym">);</span>
         <span class="hl kwd">sem_post</span><span class="hl sym">(&amp;</span>thread_signal_1<span class="hl sym">);</span>
         <span class="hl sym">++</span>messages_received<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">else</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">while</span> <span class="hl sym">(</span>messages_received <span class="hl sym">!=</span> number_of_messages_per_thread<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwd">sem_wait</span><span class="hl sym">(&amp;</span>thread_signal_2<span class="hl sym">);</span>
         message_total <span class="hl sym">+=</span> thread_message <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         thread_message <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwd">sem_post</span><span class="hl sym">(&amp;</span>thread_signal_1<span class="hl sym">);</span>
         <span class="hl sym">++</span>messages_received<span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">* *</span> argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">!=</span> <span class="hl num">2</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Usage: &quot;</span> <span class="hl sym">&lt;&lt;</span> argv<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl str">&quot; &lt;n&gt;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span>istringstream <span class="hl kwd">convertor</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
      <span class="hl kwa">if</span> <span class="hl sym">(!(</span>convertor <span class="hl sym">&gt;&gt;</span> number_of_messages_per_thread<span class="hl sym">) || !</span>convertor<span class="hl sym">.</span><span class="hl kwd">eof</span><span class="hl sym">())</span>
      <span class="hl sym">{</span>
         std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;Usage: &quot;</span> <span class="hl sym">&lt;&lt;</span> argv<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;</span> <span class="hl str">&quot; &lt;n&gt;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">n must be an integer</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   pthread_attr_t thread_attributes<span class="hl sym">;</span>
   <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">pthread_attr_init</span><span class="hl sym">(&amp;</span>thread_attributes<span class="hl sym">) !=</span> <span class="hl num">0</span> <span class="hl sym">||</span> <span class="hl kwd">pthread_attr_setstacksize</span><span class="hl sym">(&amp;</span>thread_attributes<span class="hl sym">,</span> thread_stack_size<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;pthread attribute error</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
   pthread_t threads<span class="hl sym">[</span>number_of_threads<span class="hl sym">];</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">unsigned int</span> thread_number <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> thread_number <span class="hl sym">&lt;</span> number_of_threads<span class="hl sym">; ++</span>thread_number<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">sem_init</span><span class="hl sym">(&amp;</span>signals<span class="hl sym">[</span>thread_number<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">],</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">) !=</span> <span class="hl num">0</span> <span class="hl sym">||</span> <span class="hl kwd">sem_init</span><span class="hl sym">(&amp;</span>signals<span class="hl sym">[</span>thread_number<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">],</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> thread_number <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;pthread semaphore creation error</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">pthread_create</span><span class="hl sym">(&amp;</span>threads<span class="hl sym">[</span>thread_number<span class="hl sym">], &amp;</span>thread_attributes<span class="hl sym">,</span> thread_function<span class="hl sym">,</span> <span class="hl kwa">reinterpret_cast</span><span class="hl sym">&lt;</span> <span class="hl kwb">void</span> <span class="hl sym">* &gt;(</span>thread_number<span class="hl sym">)) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> thread_number <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;pthread thread creation error</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">unsigned int</span> message_number <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> message_number <span class="hl sym">&lt;</span> number_of_messages_per_thread<span class="hl sym">; ++</span>message_number<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwd">sem_wait</span><span class="hl sym">(&amp;</span>signals<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">]);</span>
      messages<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwd">sem_post</span><span class="hl sym">(&amp;</span>signals<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">]);</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">unsigned int</span> thread_number <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> thread_number <span class="hl sym">&lt;</span> number_of_threads<span class="hl sym">; ++</span>thread_number<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">void</span> <span class="hl sym">*</span> return_value<span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">pthread_join</span><span class="hl sym">(</span>threads<span class="hl sym">[</span>thread_number<span class="hl sym">], &amp;</span>return_value<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> <span class="hl str">&quot;pthread thread completion error</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">;</span>
         <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
      <span class="hl kwd">sem_destroy</span><span class="hl sym">(&amp;</span>signals<span class="hl sym">[</span>thread_number<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">]);</span>
      <span class="hl kwd">sem_destroy</span><span class="hl sym">(&amp;</span>signals<span class="hl sym">[</span>thread_number<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">]);</span>
   <span class="hl sym">}</span>
   std<span class="hl sym">::</span>cout <span class="hl sym">&lt;&lt;</span> message_total <span class="hl sym">&lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
