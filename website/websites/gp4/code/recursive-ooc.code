<span class="com">(* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com">   contributed by Isaac Gouy (Oberon-2 novice) *)</span>

<span class="kwa">MODULE</span> recursive<span class="sym">;</span>
<span class="kwa">IMPORT</span> Shootout<span class="sym">,</span> Out<span class="sym">;</span>

<span class="kwa">VAR</span> m<span class="sym">,</span>n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>

<span class="kwa">PROCEDURE</span> <span class="kwd">Ack</span> <span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> m<span class="sym">=</span><span class="num">0</span> <span class="kwa">THEN RETURN</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">IF</span> n<span class="sym">=</span><span class="num">0</span> <span class="kwa">THEN RETURN</span> <span class="kwd">Ack</span><span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span> <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">RETURN</span> <span class="kwd">Ack</span><span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>
<span class="kwa">END</span> Ack<span class="sym">;</span>

<span class="kwa">PROCEDURE</span> <span class="kwd">Fib</span> <span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> n<span class="sym">&lt;</span><span class="num">2</span> <span class="kwa">THEN RETURN</span> <span class="num">1</span><span class="sym">;</span> <span class="kwa">ELSE RETURN</span> <span class="kwd">Fib</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">) +</span> <span class="kwd">Fib</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">);</span> <span class="kwa">END</span><span class="sym">;</span>
<span class="kwa">END</span> Fib<span class="sym">;</span>

<span class="kwa">PROCEDURE</span> <span class="kwd">Tak</span> <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">) :</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> y<span class="sym">&lt;</span>x <span class="kwa">THEN RETURN</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwd">Tak</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">));</span>
   <span class="kwa">ELSE RETURN</span> z<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
<span class="kwa">END</span> Tak<span class="sym">;</span>

<span class="kwa">PROCEDURE</span> <span class="kwd">Fibf</span> <span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">LONGREAL</span><span class="sym">):</span> <span class="kwb">LONGREAL</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> n<span class="sym">&lt;</span><span class="num">2</span> <span class="kwa">THEN RETURN</span> <span class="num">1</span><span class="sym">;</span> <span class="kwa">ELSE RETURN</span> <span class="kwd">Fibf</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">) +</span> <span class="kwd">Fibf</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">);</span> <span class="kwa">END</span><span class="sym">;</span>
<span class="kwa">END</span> Fibf<span class="sym">;</span>

<span class="kwa">PROCEDURE</span> <span class="kwd">Takf</span> <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">:</span> <span class="kwb">LONGREAL</span><span class="sym">) :</span> <span class="kwb">LONGREAL</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> y<span class="sym">&lt;</span>x <span class="kwa">THEN RETURN</span> <span class="kwd">Takf</span><span class="sym">(</span><span class="kwd">Takf</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span> <span class="kwd">Takf</span><span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span> <span class="kwd">Takf</span><span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">));</span>
   <span class="kwa">ELSE RETURN</span> z<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
<span class="kwa">END</span> Takf<span class="sym">;</span>

<span class="kwa">BEGIN</span>
   n <span class="sym">:=</span> Shootout<span class="sym">.</span><span class="kwd">Argi</span><span class="sym">();</span>
   m <span class="sym">:=</span> n<span class="sym">+</span><span class="num">4</span><span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span> <span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>m<span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;): &quot;</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span><span class="kwd">Ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span>m<span class="sym">),</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>

   m <span class="sym">:=</span> n<span class="sym">+</span><span class="num">9</span><span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;Fib(&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>m<span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;): &quot;</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span><span class="kwd">Fib</span><span class="sym">(</span>m<span class="sym">),</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>

   m <span class="sym">:=</span> n<span class="sym">+</span><span class="num">32</span><span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;Fib(&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>m<span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;): &quot;</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">LongRealFix</span><span class="sym">(</span><span class="kwd">Fibf</span><span class="sym">(</span>m<span class="sym">*</span><span class="num">1.0</span><span class="sym">),</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>

   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;Tak(&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;,&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>n<span class="sym">*</span><span class="num">2</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;,&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>n<span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;): &quot;</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span><span class="kwd">Tak</span><span class="sym">(</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">,</span>n<span class="sym">*</span><span class="num">2</span><span class="sym">,</span>n<span class="sym">),</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>

   m <span class="sym">:=</span> n<span class="sym">+</span><span class="num">2</span><span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;Tak(&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>m<span class="sym">*</span><span class="num">3</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;,&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>m<span class="sym">*</span><span class="num">2</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;,&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>m<span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;): &quot;</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">LongRealFix</span><span class="sym">(</span><span class="kwd">Takf</span><span class="sym">(</span>m<span class="sym">*</span><span class="num">3.0</span><span class="sym">,</span>m<span class="sym">*</span><span class="num">2.0</span><span class="sym">,</span>m<span class="sym">*</span><span class="num">1.0</span><span class="sym">),</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
<span class="kwa">END</span> recursive<span class="sym">.</span>
