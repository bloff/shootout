<span class="slc">'The Computer Language Shootout</span>
<span class="slc">'http://shootout.alioth.debian.org/</span>
<span class="slc">'contributed by Antoni Gual</span>

option explicit
#include <span class="str">&quot;crt.bi&quot;</span>

<span class="kwa">type</span> aminoacids
   c <span class="kwa">as</span> <span class="kwb">integer</span>
   p <span class="kwa">as</span> double
<span class="kwa">end type</span>

#define linelength <span class="num">60</span>
<span class="slc">'</span>
<span class="slc">'--------------------------------------------------------------</span>
<span class="kwa">function</span> gen_random<span class="sym">(</span><span class="kwa">byval</span> max <span class="kwa">as</span> double<span class="sym">)</span> <span class="kwa">as</span> double
   const IM <span class="sym">=</span> <span class="num">139968</span>
   const IA <span class="sym">=</span>  <span class="num">3877</span>
   const IC <span class="sym">=</span>  <span class="num">29573</span>
   const iim<span class="sym">=</span>  <span class="num">1</span><span class="sym">/</span>im
   static last <span class="kwa">as</span> <span class="kwb">long</span> <span class="sym">=</span> <span class="num">42</span>
   last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> mod IM
   return max <span class="sym">*</span> last <span class="sym">*</span>iIM
<span class="kwa">end function</span>
<span class="slc">'</span>
<span class="slc">'----------------------------------------------------------------</span>
<span class="kwa">sub</span> makeRandomFasta<span class="sym">(</span><span class="kwa">byval</span> genelist <span class="kwa">as</span> aminoacids ptr<span class="sym">,</span><span class="kwa">byval</span> count <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">,</span><span class="kwa">byval</span> n <span class="kwa">as</span> <span class="kwb">long</span><span class="sym">)</span>
   <span class="kwa">dim as</span> <span class="kwb">integer</span> i<span class="sym">,</span>j<span class="sym">,</span>todo
   <span class="kwa">dim</span> tline <span class="kwa">as</span> zstring <span class="sym">*</span> linelength<span class="sym">+</span><span class="num">1</span>
   <span class="kwa">dim as</span> double r
   <span class="kwa">for</span> todo <span class="sym">=</span>n <span class="kwa">to</span> <span class="num">1</span> <span class="kwa">step</span> <span class="sym">-</span>linelength
     <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> iif<span class="sym">(</span>todo<span class="sym">&lt;</span>linelength<span class="sym">,</span>todo<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>linelength<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
       r <span class="sym">=</span> gen_random<span class="sym">(</span><span class="num">1</span>.<span class="sym">)</span>
       j<span class="sym">=</span><span class="num">0</span>
       <span class="kwa">while</span>  r <span class="sym">&gt;</span> genelist<span class="sym">[</span>j<span class="sym">]</span>.p
         j<span class="sym">+=</span><span class="num">1</span>
       wend
       tline<span class="sym">[</span>i<span class="sym">]=</span>genelist<span class="sym">[</span>j<span class="sym">]</span>.c
      <span class="kwa">next</span>
     tline<span class="sym">[</span>i<span class="sym">]=</span><span class="num">0</span>
     puts tline
   <span class="kwa">next</span>
<span class="kwa">end sub</span>
<span class="slc">'</span>
<span class="slc">'-----------------------------------------------------------------</span>
<span class="kwa">sub</span> makeRepeatFasta<span class="sym">(</span><span class="kwa">byval</span> s <span class="kwa">as</span> zstring ptr<span class="sym">,</span><span class="kwa">byval</span> n <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span>
  <span class="kwa">dim as</span> <span class="kwb">integer</span> kn<span class="sym">,</span>i<span class="sym">,</span>m<span class="sym">,</span>k<span class="sym">=</span><span class="num">0</span>
  <span class="kwa">dim as</span> ubyte c<span class="sym">=</span><span class="num">0</span>
  kn<span class="sym">=</span>len<span class="sym">(*</span>s<span class="sym">)</span>
  <span class="kwa">for</span> i<span class="sym">=</span>n <span class="kwa">to</span> <span class="num">1</span> <span class="kwa">step</span> <span class="sym">-</span>linelength
     m<span class="sym">=</span>iif<span class="sym">(</span>i<span class="sym">&lt;</span>linelength<span class="sym">,</span>i<span class="sym">,</span>linelength<span class="sym">)</span>
     <span class="kwa">while</span> <span class="sym">(</span>m<span class="sym">&gt;=</span>kn<span class="sym">-</span>k<span class="sym">)</span>                   <span class="slc">'fin de bloque</span>
        printf <span class="sym">(</span><span class="str">&quot;%s&quot;</span><span class="sym">,</span> s<span class="sym">+</span>k<span class="sym">)</span>
        m<span class="sym">-=</span>kn<span class="sym">-</span>k
        k<span class="sym">=</span><span class="num">0</span>
     wend
     c<span class="sym">= *(</span>s<span class="sym">+</span>k<span class="sym">+</span>m<span class="sym">)</span>
     <span class="sym">*(</span>s<span class="sym">+</span>k<span class="sym">+</span>m<span class="sym">)=</span><span class="num">0</span>
     puts s<span class="sym">[</span>k<span class="sym">]</span>
     <span class="sym">*(</span>s<span class="sym">+</span>k<span class="sym">+</span>m<span class="sym">)=</span>c
     k<span class="sym">+=</span>m
   <span class="kwa">next</span>
<span class="kwa">end sub</span>
<span class="slc">'</span>
<span class="slc">'----------------------------------------------------------------</span>
const IUB_LEN <span class="sym">=</span> <span class="num">15</span>
<span class="kwa">dim</span> iub<span class="sym">(</span><span class="num">14</span><span class="sym">)</span> <span class="kwa">as</span> aminoacids<span class="sym">={(</span>asc<span class="sym">(</span><span class="str">&quot;a&quot;</span><span class="sym">),</span><span class="num">0.27</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;c&quot;</span><span class="sym">),</span><span class="num">0.12</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;g&quot;</span><span class="sym">),</span><span class="num">0.12</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;t&quot;</span><span class="sym">),</span><span class="num">0.27</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;B&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;D&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;H&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;K&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;M&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;N&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;R&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;S&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;V&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;W&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;Y&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">)}</span>

const HOMOSAPIENS_LEN <span class="sym">=</span> <span class="num">4</span>
<span class="kwa">dim</span> homosapiens<span class="sym">(</span><span class="num">3</span><span class="sym">)</span> <span class="kwa">as</span> aminoacids<span class="sym">={(</span>asc<span class="sym">(</span><span class="str">&quot;a&quot;</span><span class="sym">),</span><span class="num">0.3029549426680</span><span class="sym">),</span>_
                                  <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;c&quot;</span><span class="sym">),</span><span class="num">0.1979883004921</span><span class="sym">),</span>_
                                  <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;g&quot;</span><span class="sym">),</span><span class="num">0.1975473066391</span><span class="sym">),</span>_
                                  <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;t&quot;</span><span class="sym">),</span><span class="num">0.3015094502008</span><span class="sym">)}</span>

<span class="kwa">dim</span> alu <span class="kwa">as</span> zstring <span class="sym">*</span><span class="num">300</span> <span class="sym">=&gt;</span> _
          <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>_
          <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>_
          <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>_
          <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>_
          <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>_
          <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>_
          <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="kwa">dim as</span> <span class="kwb">integer</span> n<span class="sym">,</span>i
<span class="kwa">dim as</span> double cp
n <span class="sym">=</span> val<span class="sym">(</span>command$<span class="sym">)</span>
<span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> n <span class="sym">=</span> <span class="num">1000</span>

cp<span class="sym">=</span><span class="num">0</span>
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> IUB_LEN<span class="sym">-</span><span class="num">1</span>
  cp <span class="sym">+=</span> iub<span class="sym">(</span>i<span class="sym">)</span>.p
  iub<span class="sym">(</span>i<span class="sym">)</span>.p <span class="sym">=</span> cp
<span class="kwa">next</span> i

cp<span class="sym">=</span><span class="num">0</span>
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> HOMOSAPIENS_LEN<span class="sym">-</span><span class="num">1</span>
  cp <span class="sym">+=</span> homosapiens<span class="sym">(</span>i<span class="sym">)</span>.p
  homosapiens<span class="sym">(</span>i<span class="sym">)</span>.p <span class="sym">=</span> cp
<span class="kwa">next</span> i

puts <span class="sym">(</span><span class="str">&quot;&gt;ONE Homo sapiens alu&quot;</span><span class="sym">)</span>
makeRepeatFasta<span class="sym">(</span>&#64;alu<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">)</span>

puts <span class="sym">(</span><span class="str">&quot;&gt;TWO IUB ambiguity codes&quot;</span><span class="sym">)</span>
makeRandomFasta<span class="sym">(</span>&#64;iub<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> IUB_LEN<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">)</span>

puts <span class="sym">(</span><span class="str">&quot;&gt;THREE Homo sapiens frequency&quot;</span><span class="sym">)</span>
makeRandomFasta<span class="sym">(</span>&#64;homosapiens<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> HOMOSAPIENS_LEN<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">)</span>
