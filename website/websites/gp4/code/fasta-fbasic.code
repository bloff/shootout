rem The Computer Language Shootout
rem http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
rem contributed by Josh Goldfoot

<span class="kwa">type</span> aminoacids
   c <span class="kwa">as</span> byte
   p <span class="kwa">as</span> double
<span class="kwa">end type</span>

const IUB_LEN <span class="sym">=</span> <span class="num">15</span>
<span class="kwa">dim</span> iub<span class="sym">(</span><span class="num">14</span><span class="sym">)</span> <span class="kwa">as</span> aminoacids
iub<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">97</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.27</span>
iub<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">99</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.12</span>
iub<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">103</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.12</span>
iub<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">116</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.27</span>
iub<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">66</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>
iub<span class="sym">(</span><span class="num">5</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">68</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">5</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>
iub<span class="sym">(</span><span class="num">6</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">72</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">6</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>
iub<span class="sym">(</span><span class="num">7</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">75</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">7</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>
iub<span class="sym">(</span><span class="num">8</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">77</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">8</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>
iub<span class="sym">(</span><span class="num">9</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">78</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">9</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>
iub<span class="sym">(</span><span class="num">10</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">82</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">10</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>
iub<span class="sym">(</span><span class="num">11</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">83</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">11</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>
iub<span class="sym">(</span><span class="num">12</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">86</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">12</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>
iub<span class="sym">(</span><span class="num">13</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">87</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">13</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>
iub<span class="sym">(</span><span class="num">14</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">89</span> <span class="sym">:</span> iub<span class="sym">(</span><span class="num">14</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.02</span>

const HOMOSAPIENS_LEN <span class="sym">=</span> <span class="num">4</span>
<span class="kwa">dim</span> homosapiens<span class="sym">(</span><span class="num">3</span><span class="sym">)</span> <span class="kwa">as</span> aminoacids
homosapiens<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">97</span> <span class="sym">:</span> homosapiens<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.3029549426680</span>
homosapiens<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">99</span> <span class="sym">:</span> homosapiens<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.1979883004921</span>
homosapiens<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">103</span> <span class="sym">:</span> homosapiens<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.1975473066391</span>
homosapiens<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>.c <span class="sym">=</span> <span class="num">116</span> <span class="sym">:</span> homosapiens<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>.p <span class="sym">=</span> <span class="num">0.3015094502008</span>

<span class="kwa">dim</span> alu <span class="kwa">as</span> <span class="kwb">string</span>
alu <span class="sym">=</span> <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
alu <span class="sym">+=</span> <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
alu <span class="sym">+=</span> <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
alu <span class="sym">+=</span> <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
alu <span class="sym">+=</span> <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
alu <span class="sym">+=</span> <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
alu <span class="sym">+=</span> <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="kwa">function</span> gen_random<span class="sym">(</span>max <span class="kwa">as</span> double<span class="sym">)</span> <span class="kwa">as</span> double
   const IM <span class="sym">=</span> <span class="num">139968</span>
   const IA <span class="sym">=</span>  <span class="num">3877</span>
   const IC <span class="sym">=</span>  <span class="num">29573</span>
   static last <span class="kwa">as</span> <span class="kwb">long</span> <span class="sym">=</span> <span class="num">42</span>
   last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> mod IM
   return max <span class="sym">*</span> last <span class="sym">/</span> IM
<span class="kwa">end function</span>

<span class="kwa">sub</span> makeCumulative<span class="sym">(</span>genelist<span class="sym">()</span> <span class="kwa">as</span> aminoacids<span class="sym">,</span> count <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span>
   <span class="kwa">dim</span> cp <span class="kwa">as</span> double
   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> count<span class="sym">-</span><span class="num">1</span>
      cp <span class="sym">+=</span> genelist<span class="sym">(</span>i<span class="sym">)</span>.p
      genelist<span class="sym">(</span>i<span class="sym">)</span>.p <span class="sym">=</span> cp
   <span class="kwa">next</span> i
<span class="kwa">end sub</span>

<span class="kwa">function</span> selectRandom<span class="sym">(</span>genelist<span class="sym">()</span> <span class="kwa">as</span> aminoacids<span class="sym">,</span> count <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span> <span class="kwa">as</span> byte
   <span class="kwa">dim</span> r <span class="kwa">as</span> double
   r <span class="sym">=</span> gen_random<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
   <span class="kwa">if</span> r <span class="sym">&lt;</span> genelist<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.p <span class="kwa">then</span> return genelist<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.c
   lo <span class="sym">=</span> <span class="num">0</span>
   hi <span class="sym">=</span> count <span class="sym">-</span> <span class="num">1</span>
   <span class="kwa">while</span> hi <span class="sym">&gt;</span> lo <span class="sym">+</span> <span class="num">1</span>
      i <span class="sym">= (</span>hi <span class="sym">+</span> lo<span class="sym">) /</span> <span class="num">2</span>
      <span class="kwa">if</span> r <span class="sym">&lt;</span> genelist<span class="sym">(</span>i<span class="sym">)</span>.p <span class="kwa">then</span> hi <span class="sym">=</span> i <span class="kwa">else</span> lo <span class="sym">=</span> i
   wend
   return genelist<span class="sym">(</span>hi<span class="sym">)</span>.c
<span class="kwa">end function</span>

<span class="kwa">sub</span> makeRandomFasta<span class="sym">(</span>id <span class="kwa">as</span> <span class="kwb">string</span><span class="sym">,</span> desc <span class="kwa">as</span> <span class="kwb">string</span><span class="sym">,</span> genelist<span class="sym">()</span> <span class="kwa">as</span> aminoacids<span class="sym">,</span> count <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">,</span> n <span class="kwa">as</span> <span class="kwb">long</span><span class="sym">)</span>
   print <span class="str">&quot;&gt;&quot;</span><span class="sym">;</span>id<span class="sym">;</span><span class="str">&quot; &quot;</span><span class="sym">;</span>desc
   spos <span class="sym">=</span> <span class="num">1</span>
   x <span class="sym">=</span> <span class="num">0</span>
   slen <span class="sym">=</span> len<span class="sym">(</span>s<span class="sym">)</span>
   <span class="kwa">dim</span> tline <span class="kwa">as</span> <span class="kwb">string</span>
   <span class="kwa">dim</span> i <span class="kwa">as</span> <span class="kwb">long</span>
   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n
      tline <span class="sym">+=</span> chr<span class="sym">(</span>selectRandom<span class="sym">(</span>genelist<span class="sym">(),</span> count<span class="sym">))</span>
      x <span class="sym">+=</span> <span class="num">1</span>
      <span class="kwa">if</span> x <span class="sym">&gt;</span> <span class="num">59</span> <span class="kwa">then</span>
         print tline
         tline <span class="sym">=</span> <span class="str">&quot;&quot;</span>
         x <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">end if</span>
      spos <span class="sym">+=</span> <span class="num">1</span>
      <span class="kwa">if</span> spos <span class="sym">&gt;</span> slen <span class="kwa">then</span> spos <span class="sym">=</span> <span class="num">1</span>
   <span class="kwa">next</span> i
   <span class="kwa">if</span> x <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then</span> print tline
<span class="kwa">end sub</span>

<span class="kwa">sub</span> makeRepeatFasta<span class="sym">(</span>id <span class="kwa">as</span> <span class="kwb">string</span><span class="sym">,</span> desc <span class="kwa">as</span> <span class="kwb">string</span><span class="sym">,</span> s <span class="kwa">as</span> <span class="kwb">string</span><span class="sym">,</span> todo <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span>
   print <span class="str">&quot;&gt;&quot;</span><span class="sym">;</span>id<span class="sym">;</span><span class="str">&quot; &quot;</span><span class="sym">;</span>desc
   spos <span class="sym">=</span> <span class="num">1</span>
   x <span class="sym">=</span> <span class="num">0</span>
   slen <span class="sym">=</span> len<span class="sym">(</span>s<span class="sym">)</span>
   s <span class="sym">=</span> s <span class="sym">+</span> left<span class="sym">(</span>s<span class="sym">,</span> <span class="num">61</span><span class="sym">)</span>
   numprinted <span class="sym">=</span> <span class="num">0</span>
   <span class="kwa">while</span> numprinted <span class="sym">&lt;</span> todo
      printlen <span class="sym">=</span> todo <span class="sym">-</span> spos <span class="sym">+</span> <span class="num">1</span>
      <span class="kwa">if</span> printlen <span class="sym">&gt;</span> <span class="num">60</span> <span class="kwa">then</span> printlen <span class="sym">=</span> <span class="num">60</span>
      print mid<span class="sym">(</span>s<span class="sym">,</span> spos<span class="sym">,</span> printlen<span class="sym">)</span>
      numprinted <span class="sym">+=</span> printlen
      spos <span class="sym">+=</span> printlen
      <span class="kwa">if</span> spos <span class="sym">&gt;</span> slen <span class="kwa">then</span> spos <span class="sym">-=</span> slen
   wend
<span class="kwa">end sub</span>

n <span class="sym">=</span> val<span class="sym">(</span>command$<span class="sym">)</span>
<span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> n <span class="sym">=</span> <span class="num">1000</span>
makeCumulative<span class="sym">(</span>iub<span class="sym">(),</span> IUB_LEN<span class="sym">)</span>
makeCumulative<span class="sym">(</span>homosapiens<span class="sym">(),</span> HOMOSAPIENS_LEN<span class="sym">)</span>
makeRepeatFasta<span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> alu<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">)</span>
makeRandomFasta<span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> iub<span class="sym">(),</span> IUB_LEN<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">)</span>
makeRandomFasta<span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> homosapiens<span class="sym">(),</span> HOMOSAPIENS_LEN<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">)</span>

