<span class="hl slc">// The Computer Language Shootout</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>
<span class="hl slc">// Precedent C entry modified by bearophile for speed and size, 31 Jan 2006</span>
<span class="hl slc">// Compile with:  -O3 -s -std=c99 -fomit-frame-pointer</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">unsigned char</span> boolean<span class="hl sym">;</span>


<span class="hl kwb">static void</span> <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl kwb">int</span> m<span class="hl sym">) {</span>
    <span class="hl kwb">unsigned int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> i<span class="hl sym">,</span> j<span class="hl sym">;</span>
    boolean <span class="hl sym">*</span> flags <span class="hl sym">= (</span>boolean <span class="hl sym">*)</span> <span class="hl kwd">malloc</span><span class="hl sym">(</span>m <span class="hl sym">*</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span>boolean<span class="hl sym">));</span>
    <span class="hl kwd">memset</span><span class="hl sym">(</span>flags<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> m<span class="hl sym">);</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> m<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>flags<span class="hl sym">[</span>i<span class="hl sym">]) {</span>
            <span class="hl sym">++</span>count<span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span>j <span class="hl sym">=</span> i <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> m<span class="hl sym">;</span> j <span class="hl sym">+=</span> i<span class="hl sym">)</span>
<span class="hl slc">//                if (flags[j])</span>
                   flags<span class="hl sym">[</span>j<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwd">free</span><span class="hl sym">(</span>flags<span class="hl sym">);</span>
    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to %8u %8u</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> m<span class="hl sym">,</span> count<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span> argv<span class="hl sym">[]) {</span>
    <span class="hl kwb">int</span> m <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">3</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl kwd">nsieve</span><span class="hl sym">(</span><span class="hl num">10000</span> <span class="hl sym">&lt;&lt; (</span>m<span class="hl sym">-</span>i<span class="hl sym">));</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
