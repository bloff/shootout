<span class="slc">-- $Id: fannkuch-lua.code,v 1.13 2005-11-03 19:56:57 igouy-guest Exp $</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- implemented by: Isaac Gouy</span>

<span class="kwa">function</span> fannkuch<span class="sym">(</span>n<span class="sym">)</span>
   <span class="kwa">local</span> perm<span class="sym">,</span> perm1<span class="sym">,</span> count<span class="sym">,</span> maxPerm <span class="sym">= {}, {}, {}, {}</span>
   <span class="kwa">local</span> maxFlipsCount<span class="sym">,</span> m<span class="sym">,</span> r <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> n

   <span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>m <span class="kwa">do</span> perm1<span class="sym">[</span>i<span class="sym">] =</span> i <span class="kwa">end</span>
   <span class="kwa">while</span> true <span class="kwa">do</span>
      <span class="kwa">while</span> r ~<span class="sym">=</span> <span class="num">1</span> <span class="kwa">do</span> count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span> r <span class="sym">=</span> r<span class="sym">-</span><span class="num">1</span> <span class="kwa">end</span>
      <span class="kwa">if not</span> <span class="sym">(</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="num">0</span> <span class="kwa">or</span> perm1<span class="sym">[</span>m<span class="sym">] ==</span> m<span class="sym">)</span> <span class="kwa">then</span>
         <span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>m <span class="kwa">do</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">end</span>
         <span class="kwa">local</span> flipsCount<span class="sym">,</span> k <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> true <span class="kwa">do</span>
            k <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
            <span class="kwa">if</span> k <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then break end</span>
            <span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">,(</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span> <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span> perm<span class="sym">[</span>i<span class="sym">],</span>perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">] =</span> perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">],</span>perm<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">end</span>
            flipsCount <span class="sym">=</span> flipsCount <span class="sym">+</span> <span class="num">1</span>
         <span class="kwa">end</span>

         <span class="kwa">if</span> flipsCount <span class="sym">&gt;</span> maxFlipsCount <span class="kwa">then</span>
            maxFlipsCount <span class="sym">=</span> flipsCount
            <span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>m <span class="kwa">do</span> maxPerm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">end</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>

      <span class="slc">-- Use incremental change to generate another permutation</span>
      <span class="kwa">while</span> true <span class="kwa">do</span>
         <span class="kwa">if</span> r <span class="sym">==</span> n <span class="kwa">then return</span> maxFlipsCount <span class="kwa">end</span>
         <span class="kwa">local</span> perm0<span class="sym">,</span> i<span class="sym">,</span> j <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="num">0</span>
         <span class="kwa">while</span> i <span class="sym">&lt;</span> r <span class="kwa">do</span>
            j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
            perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>j<span class="sym">]</span>
            i <span class="sym">=</span> j
         <span class="kwa">end</span>
         perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0

         count<span class="sym">[</span>r<span class="sym">] =</span> count<span class="sym">[</span>r<span class="sym">] -</span> <span class="num">1</span>
         <span class="kwa">if</span> count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span> <span class="kwa">then break end</span>
         r <span class="sym">=</span> r <span class="sym">+</span> <span class="num">1</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>
<span class="kwa">end</span>

n <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1</span>
io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="str">&quot;) = &quot;</span><span class="sym">,</span> fannkuch<span class="sym">(</span>n<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

<span class="slc">-- vim: ts=4 ft=lua</span>
