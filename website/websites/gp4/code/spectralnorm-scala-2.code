<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">object</span> spectralnorm <span class="sym">{</span>

   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> n <span class="sym">=</span> <span class="kwc">Integer</span> parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">))</span>

      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>
         <span class="kwa">new</span> SpectralNorm<span class="sym">()</span> approximate<span class="sym">(</span>n<span class="sym">) )</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> SpectralNorm<span class="sym">(){</span>

   <span class="kwa">type</span> <span class="kwc">Vector</span> <span class="sym">=</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">double</span><span class="sym">]</span>

   <span class="kwa">def</span> approximate<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">)= {</span>
      <span class="kwa">val</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Vector</span><span class="sym">(</span>n<span class="sym">)</span>
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">){</span> u<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">1.0</span><span class="sym">;</span> i <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span> <span class="sym">}</span>

      <span class="kwa">val</span> v <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Vector</span><span class="sym">(</span>n<span class="sym">)</span>

      i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">){</span>
         multiplyAtAv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">)</span>
         multiplyAtAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">)</span>
         i <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span>
      <span class="sym">}</span>

      <span class="kwa">var</span> vbv <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span> <span class="kwa">var</span> vv <span class="sym">=</span> <span class="num">0.0</span>
      i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">){</span>
         vbv <span class="sym">=</span> vbv <span class="sym">+</span> u<span class="sym">(</span>i<span class="sym">)*</span>v<span class="sym">(</span>i<span class="sym">)</span>
         vv <span class="sym">=</span> vv <span class="sym">+</span> v<span class="sym">(</span>i<span class="sym">)*</span>v<span class="sym">(</span>i<span class="sym">)</span>
         i <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span>
      <span class="sym">}</span>

      <span class="kwc">Math</span> sqrt<span class="sym">(</span>vbv<span class="sym">/</span>vv<span class="sym">)</span>
   <span class="sym">}</span>


   <span class="kwa">def</span> a<span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) =</span> <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span> <span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

   <span class="kwa">def</span> multiplyAv<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> v<span class="sym">:</span> <span class="kwc">Vector</span><span class="sym">,</span> av<span class="sym">:</span> <span class="kwc">Vector</span><span class="sym">) = {</span>
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">){</span>
         av<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0.0</span>
         <span class="kwa">var</span> j <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;</span> n<span class="sym">){</span> av<span class="sym">(</span>i<span class="sym">) =</span> av<span class="sym">(</span>i<span class="sym">) +</span> a<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) *</span> v<span class="sym">(</span>j<span class="sym">);</span> j <span class="sym">=</span> j<span class="sym">+</span><span class="num">1</span> <span class="sym">}</span>
         i <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> multiplyAtv<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> v<span class="sym">:</span> <span class="kwc">Vector</span><span class="sym">,</span> atv<span class="sym">:</span> <span class="kwc">Vector</span><span class="sym">) = {</span>
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">){</span>
         atv<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0.0</span>
         <span class="kwa">var</span> j <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;</span> n<span class="sym">){</span> atv<span class="sym">(</span>i<span class="sym">) =</span> atv<span class="sym">(</span>i<span class="sym">) +</span> a<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">) *</span> v<span class="sym">(</span>j<span class="sym">);</span> j <span class="sym">=</span> j<span class="sym">+</span><span class="num">1</span> <span class="sym">}</span>
         i <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> multiplyAtAv<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> v<span class="sym">:</span> <span class="kwc">Vector</span><span class="sym">,</span> atav<span class="sym">:</span> <span class="kwc">Vector</span><span class="sym">) = {</span>
      <span class="kwa">val</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Vector</span><span class="sym">(</span>n<span class="sym">)</span>
      multiplyAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">)</span>
      multiplyAtv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>atav<span class="sym">)</span>
   <span class="sym">}</span>

<span class="sym">}</span>
