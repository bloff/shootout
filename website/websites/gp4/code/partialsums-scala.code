<span class="com">/*</span>
<span class="com"> * The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Andrei Formiga</span>
<span class="com"> */</span>

<span class="kwa">object</span> partialsums
<span class="sym">{</span>
  <span class="kwa">val</span> twodiv3 <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">/</span> <span class="num">3.0</span><span class="sym">;</span>
  <span class="kwa">var</span> n<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> _<span class="sym">;</span>

  <span class="kwa">def</span> calculate<span class="sym">(</span>s1<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span> s2<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span> s3<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span> s4<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span> s5<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span> s6<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span>
		s7<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span> s8<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span> s9<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span> sign<span class="sym">:</span> <span class="kwb">double</span><span class="sym">,</span> kd<span class="sym">:</span> <span class="kwb">double</span><span class="sym">):</span> unit <span class="sym">= {</span>
    <span class="kwa">if</span> <span class="sym">(</span>kd <span class="sym">&gt;</span> n<span class="sym">) {</span>
      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\t</span><span class="str">(2/3)^k</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>s1<span class="sym">);</span>
      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\t</span><span class="str">k^-0.5</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>s2<span class="sym">);</span>
      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\t</span><span class="str">1/k(k+1)</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>s3<span class="sym">);</span>
      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\t</span><span class="str">Flint Hills</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>s4<span class="sym">);</span>
      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\t</span><span class="str">Cookson Hills</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>s5<span class="sym">);</span>
      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\t</span><span class="str">Harmonic</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>s6<span class="sym">);</span>
      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\t</span><span class="str">Riemann Zeta</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>s7<span class="sym">);</span>
      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\t</span><span class="str">Alternating Harmonic</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>s8<span class="sym">);</span>
      Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;{0,number,0.000000000}</span><span class="esc">\t</span><span class="str">Gregory</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span>s9<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">else</span> <span class="sym">{</span>
      <span class="kwa">val</span> k2 <span class="sym">=</span> kd <span class="sym">*</span> kd<span class="sym">;</span>
      <span class="kwa">val</span> k3 <span class="sym">=</span> k2 <span class="sym">*</span> kd<span class="sym">;</span>
      <span class="kwa">val</span> sin <span class="sym">=</span> <span class="kwc">Math</span><span class="sym">.</span>sin<span class="sym">(</span>kd<span class="sym">);</span>
      <span class="kwa">val</span> cos <span class="sym">=</span> <span class="kwc">Math</span><span class="sym">.</span>cos<span class="sym">(</span>kd<span class="sym">);</span>
      calculate<span class="sym">(</span>s1 <span class="sym">+</span> <span class="kwc">Math</span><span class="sym">.</span>pow<span class="sym">(</span>twodiv3<span class="sym">,</span> kd <span class="sym">-</span> <span class="num">1.0</span><span class="sym">),</span> s2 <span class="sym">+</span> <span class="kwc">Math</span><span class="sym">.</span>pow<span class="sym">(</span>kd<span class="sym">, -</span><span class="num">0.5</span><span class="sym">),</span>
		s3 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/ (</span>kd <span class="sym">* (</span>kd <span class="sym">+</span> <span class="num">1.0</span><span class="sym">)),</span> s4 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/ (</span>k3 <span class="sym">*</span> sin<span class="sym">*</span>sin<span class="sym">),</span>
		s5 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/ (</span>k3 <span class="sym">*</span> cos<span class="sym">*</span>cos<span class="sym">),</span> s6 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/</span> kd<span class="sym">,</span> s7 <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/</span> k2<span class="sym">,</span>
		s8 <span class="sym">+</span> sign <span class="sym">/</span> kd<span class="sym">,</span> s9 <span class="sym">+</span> sign <span class="sym">/ (</span><span class="num">2.0</span> <span class="sym">*</span> kd <span class="sym">-</span> <span class="num">1.0</span><span class="sym">), -</span>sign<span class="sym">,</span> kd <span class="sym">+</span> <span class="num">1.0</span><span class="sym">);</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
    n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">)).</span>toDouble<span class="sym">;</span>
    calculate<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">, -</span><span class="num">1.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">);</span>
  <span class="sym">}</span>
<span class="sym">}</span>
