<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Derived by Michael D. Adams from the MzScheme variant, which was</span>
<span class="hl slc">;; Derived from the Chicken variant by Sven Hartrumpf</span>

<span class="hl sym">(</span>import <span class="hl sym">(</span>rnrs<span class="hl sym">))</span>

<span class="hl slc">; TODO: ikarus doesn't do fast records yet so we implement them ourselves</span>
<span class="hl slc">;(define-record-type node (fields left val right) (sealed #t))</span>
<span class="hl slc">;(define-record-type leaf (fields val) (sealed #t))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make-node left val right<span class="hl sym">)</span> `#<span class="hl sym">(</span>node <span class="hl sym">,</span>left <span class="hl sym">,</span>val <span class="hl sym">,</span>right<span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>node? n<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>vector? n<span class="hl sym">) (</span><span class="hl kwa">eq</span>? <span class="hl num">4</span> <span class="hl sym">(</span>vector-<span class="hl kwa">length</span> n<span class="hl sym">)) (</span><span class="hl kwa">eq</span>? <span class="hl sym">'</span>node <span class="hl sym">(</span>vector-ref n <span class="hl num">0</span><span class="hl sym">))))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>node-left n<span class="hl sym">) (</span>vector-ref n <span class="hl num">1</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>node-val n<span class="hl sym">) (</span>vector-ref n <span class="hl num">2</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>node-right n<span class="hl sym">) (</span>vector-ref n <span class="hl num">3</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>make-leaf val<span class="hl sym">)</span> `#<span class="hl sym">(</span>leaf <span class="hl sym">,</span>val<span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>leaf? n<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>vector? n<span class="hl sym">) (</span><span class="hl kwa">eq</span>? <span class="hl num">2</span> <span class="hl sym">(</span>vector-<span class="hl kwa">length</span> n<span class="hl sym">)) (</span><span class="hl kwa">eq</span>? <span class="hl sym">'</span>leaf <span class="hl sym">(</span>vector-ref n <span class="hl num">0</span><span class="hl sym">))))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>leaf-val n<span class="hl sym">) (</span>vector-ref n <span class="hl num">1</span><span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>make item d<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> d <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>make-leaf item<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">((</span>item2 <span class="hl sym">(*</span> item <span class="hl num">2</span><span class="hl sym">))</span>
            <span class="hl sym">(</span>d2 <span class="hl sym">(</span>- d <span class="hl num">1</span><span class="hl sym">)))</span>
        <span class="hl sym">(</span>make-node <span class="hl sym">(</span>make <span class="hl sym">(</span>- item2 <span class="hl num">1</span><span class="hl sym">)</span> d2<span class="hl sym">)</span> item <span class="hl sym">(</span>make item2 d2<span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>check t<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>leaf? t<span class="hl sym">)</span>
      <span class="hl sym">(</span>leaf-val t<span class="hl sym">)</span>
      <span class="hl sym">(+ (</span>node-val t<span class="hl sym">) (</span>- <span class="hl sym">(</span>check <span class="hl sym">(</span>node-left t<span class="hl sym">)) (</span>check <span class="hl sym">(</span>node-right t<span class="hl sym">))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>main argv<span class="hl sym">)</span>
  <span class="hl sym">(</span>let<span class="hl sym">* ((</span><span class="hl kwa">min</span>-depth <span class="hl num">4</span><span class="hl sym">)</span>
         <span class="hl sym">(</span><span class="hl kwa">max</span>-depth <span class="hl sym">(</span><span class="hl kwa">max</span> <span class="hl sym">(+</span> <span class="hl kwa">min</span>-depth <span class="hl num">2</span><span class="hl sym">) (</span>string-<span class="hl sym">&gt;</span>number <span class="hl sym">(</span><span class="hl kwa">cadr</span> argv<span class="hl sym">)))))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>stretch-depth <span class="hl sym">(+</span> <span class="hl kwa">max</span>-depth <span class="hl num">1</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>display stretch-depth<span class="hl sym">)</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>display <span class="hl sym">(</span>check <span class="hl sym">(</span>make <span class="hl num">0</span> stretch-depth<span class="hl sym">)))</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>let <span class="hl sym">((</span>long-lived-tree <span class="hl sym">(</span>make <span class="hl num">0</span> <span class="hl kwa">max</span>-depth<span class="hl sym">)))</span>
      <span class="hl sym">(</span>do <span class="hl sym">((</span>d <span class="hl num">4</span> <span class="hl sym">(+</span> d <span class="hl num">2</span><span class="hl sym">))</span>
           <span class="hl sym">(</span>c <span class="hl num">0 0</span><span class="hl sym">))</span>
          <span class="hl sym">((&gt;</span> d <span class="hl kwa">max</span>-depth<span class="hl sym">))</span>
        <span class="hl sym">(</span>let <span class="hl sym">((</span>iterations
               <span class="hl sym">(</span>fxarithmetic-shift-left <span class="hl num">1</span> <span class="hl sym">(+ (</span>- <span class="hl kwa">max</span>-depth d<span class="hl sym">)</span> <span class="hl kwa">min</span>-depth<span class="hl sym">))))</span>
          <span class="hl sym">(</span>do <span class="hl sym">((</span>i <span class="hl num">0</span> <span class="hl sym">(+</span> i <span class="hl num">1</span><span class="hl sym">)))</span>
              <span class="hl sym">((&gt;=</span> i iterations<span class="hl sym">))</span>
            <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> c <span class="hl sym">(+</span> c <span class="hl sym">(</span>check <span class="hl sym">(</span>make i d<span class="hl sym">)) (</span>check <span class="hl sym">(</span>make <span class="hl sym">(</span>- i<span class="hl sym">)</span> d<span class="hl sym">)))))</span>
          <span class="hl sym">(</span>display <span class="hl sym">(*</span> <span class="hl num">2</span> iterations<span class="hl sym">))</span>
          <span class="hl sym">(</span>display <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span><span class="hl sym">)</span>
          <span class="hl sym">(</span>display d<span class="hl sym">)</span>
          <span class="hl sym">(</span>display <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">)</span>
          <span class="hl sym">(</span>display c<span class="hl sym">)</span>
          <span class="hl sym">(</span>display <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)))</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot;long lived tree of depth &quot;</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>display <span class="hl kwa">max</span>-depth<span class="hl sym">)</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>display <span class="hl sym">(</span>check long-lived-tree<span class="hl sym">))</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">))))</span>

<span class="hl sym">(</span>main <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span><span class="hl sym">))</span>
