<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Based on a Python version contributed by Olof Kraigher, modified by Tupteq</span>
<span class="hl slc">;; contributed by Matthew Flatt</span>

#lang scheme<span class="hl sym">/</span>base
<span class="hl sym">(</span>require scheme<span class="hl sym">/</span>cmdline<span class="hl sym">)</span>

<span class="hl sym">(</span>define width <span class="hl num">5</span><span class="hl sym">)</span>
<span class="hl sym">(</span>define height <span class="hl num">10</span><span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>rotate dir<span class="hl sym">)</span>
  <span class="hl sym">(</span>case dir
    <span class="hl sym">[(</span>E<span class="hl sym">) '</span>NE<span class="hl sym">]</span>
    <span class="hl sym">[(</span>NE<span class="hl sym">) '</span>NW<span class="hl sym">]</span>
    <span class="hl sym">[(</span>NW<span class="hl sym">) '</span>W<span class="hl sym">]</span>
    <span class="hl sym">[(</span>W<span class="hl sym">) '</span>SW<span class="hl sym">]</span>
    <span class="hl sym">[(</span>SW<span class="hl sym">) '</span>SE<span class="hl sym">]</span>
    <span class="hl sym">[(</span>SE<span class="hl sym">) '</span>E<span class="hl sym">]))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>flip dir<span class="hl sym">)</span>
  <span class="hl sym">(</span>case dir
    <span class="hl sym">[(</span>E<span class="hl sym">) '</span>W<span class="hl sym">]</span>
    <span class="hl sym">[(</span>NE<span class="hl sym">) '</span>NW<span class="hl sym">]</span>
    <span class="hl sym">[(</span>NW<span class="hl sym">) '</span>NE<span class="hl sym">]</span>
    <span class="hl sym">[(</span>W<span class="hl sym">) '</span>E<span class="hl sym">]</span>
    <span class="hl sym">[(</span>SW<span class="hl sym">) '</span>SE<span class="hl sym">]</span>
    <span class="hl sym">[(</span>SE<span class="hl sym">) '</span>SW<span class="hl sym">]))</span>

<span class="hl sym">(</span>define move
  <span class="hl sym">(</span>make-immutable-hash
   <span class="hl sym">(</span><span class="hl kwa">list</span>
    <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">'</span>E <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(</span>add1 x<span class="hl sym">)</span> y<span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">'</span>W <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(</span>sub1 x<span class="hl sym">)</span> y<span class="hl sym">)))</span>
    <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">'</span>NE <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(+</span> x <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> y <span class="hl num">1</span><span class="hl sym">)) (</span>sub1 y<span class="hl sym">))))</span>
    <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">'</span>NW <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(</span>sub1 <span class="hl sym">(+</span> x <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> y <span class="hl num">1</span><span class="hl sym">))) (</span>sub1 y<span class="hl sym">))))</span>
    <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">'</span>SE <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(+</span> x <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> y <span class="hl num">1</span><span class="hl sym">)) (</span>add1 y<span class="hl sym">))))</span>
    <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">'</span>SW <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>x y<span class="hl sym">) (</span>values <span class="hl sym">(</span>sub1 <span class="hl sym">(+</span> x <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> y <span class="hl num">1</span><span class="hl sym">))) (</span>add1 y<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>define move-procs
  <span class="hl sym">(</span>hash-map move <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>k v<span class="hl sym">)</span> v<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>valid? x y<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl num">0</span> . <span class="hl sym">&lt;=</span> . x<span class="hl sym">)</span>
       <span class="hl sym">(</span>x . <span class="hl sym">&lt;</span> . width<span class="hl sym">)</span>
       <span class="hl sym">(</span><span class="hl num">0</span> . <span class="hl sym">&lt;=</span> . y<span class="hl sym">)</span>
       <span class="hl sym">(</span>y . <span class="hl sym">&lt;</span> . height<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>clear? board pos<span class="hl sym">)</span>
  <span class="hl sym">(</span>zero? <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> board <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> pos<span class="hl sym">))))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span><span class="hl kwa">set</span> board pos<span class="hl sym">)</span>
  <span class="hl sym">(</span>bitwise-ior board <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> pos<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>zero-count board<span class="hl sym">)</span>
  <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>count <span class="hl num">0</span><span class="hl sym">])</span>
            <span class="hl sym">([</span>i <span class="hl sym">(</span>in-range <span class="hl sym">(*</span> width height<span class="hl sym">))])</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>clear? board i<span class="hl sym">)</span>
        <span class="hl sym">(</span>add1 count<span class="hl sym">)</span>
        count<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>find-free-cell board<span class="hl sym">)</span>
  <span class="hl sym">(</span>let yloop <span class="hl sym">([</span>y <span class="hl num">0</span><span class="hl sym">])</span>
    <span class="hl sym">(</span>let xloop <span class="hl sym">([</span>x <span class="hl num">0</span><span class="hl sym">])</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> x width<span class="hl sym">)</span>
          <span class="hl sym">(</span>yloop <span class="hl sym">(</span>add1 y<span class="hl sym">))</span>
          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>clear? board <span class="hl sym">(+</span> x <span class="hl sym">(*</span> width y<span class="hl sym">)))</span>
              <span class="hl sym">(</span>values x y<span class="hl sym">)</span>
              <span class="hl sym">(</span>xloop <span class="hl sym">(</span>add1 x<span class="hl sym">)))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>flood-fill board x y<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>valid? x y<span class="hl sym">)</span>
      <span class="hl sym">(</span>let <span class="hl sym">([</span>pos <span class="hl sym">(+</span> x <span class="hl sym">(*</span> y width<span class="hl sym">))])</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>clear? board pos<span class="hl sym">)</span>
            <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>board <span class="hl sym">(</span><span class="hl kwa">set</span> board pos<span class="hl sym">)])</span>
                      <span class="hl sym">([</span>move-proc move-procs<span class="hl sym">])</span>
              <span class="hl sym">(</span>let-values <span class="hl sym">([(</span>x y<span class="hl sym">) (</span>move-proc x y<span class="hl sym">)])</span>
                <span class="hl sym">(</span>flood-fill board x y<span class="hl sym">)))</span>
            board<span class="hl sym">))</span>
      board<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>no-islands? mask<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>zeros <span class="hl sym">(</span>zero-count mask<span class="hl sym">)])</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>zeros . <span class="hl sym">&lt;</span> . <span class="hl num">5</span><span class="hl sym">)</span>
        #f
        <span class="hl sym">(</span>let loop <span class="hl sym">([</span>mask mask<span class="hl sym">][</span>zeros zeros<span class="hl sym">])</span>
          <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> mask #x3FFFFFFFFFFFF<span class="hl sym">)</span>
              #t
              <span class="hl sym">(</span>let<span class="hl sym">*</span>-values <span class="hl sym">([(</span>x y<span class="hl sym">) (</span>find-free-cell mask<span class="hl sym">)]</span>
                            <span class="hl sym">[(</span>mask<span class="hl sym">) (</span>flood-fill mask x y<span class="hl sym">)]</span>
                            <span class="hl sym">[(</span>new-zeros<span class="hl sym">) (</span>zero-count mask<span class="hl sym">)])</span>
                <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">((</span>- zeros new-zeros<span class="hl sym">)</span> . <span class="hl sym">&lt;</span> . <span class="hl num">5</span><span class="hl sym">)</span>
                    #f
                    <span class="hl sym">(</span>loop mask new-zeros<span class="hl sym">))))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>get-bitmask x y piece<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>mask <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> <span class="hl sym">(+</span> x <span class="hl sym">(*</span> y width<span class="hl sym">)))])</span>
    <span class="hl sym">(</span>let loop <span class="hl sym">([</span>x x<span class="hl sym">][</span>y y<span class="hl sym">][</span>cells piece<span class="hl sym">][</span>mask mask<span class="hl sym">])</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? cells<span class="hl sym">)</span>
          mask
          <span class="hl sym">(</span>let-values <span class="hl sym">([(</span>x y<span class="hl sym">) ((</span>hash-ref move <span class="hl sym">(</span><span class="hl kwa">car</span> cells<span class="hl sym">))</span> x y<span class="hl sym">)])</span>
            <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>valid? x y<span class="hl sym">)</span>
                <span class="hl sym">(</span>loop x y <span class="hl sym">(</span><span class="hl kwa">cdr</span> cells<span class="hl sym">) (</span><span class="hl kwa">set</span> mask <span class="hl sym">(+</span> x <span class="hl sym">(*</span> width y<span class="hl sym">))))</span>
                #f<span class="hl sym">))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>all-bitmasks piece color<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>pieces
         <span class="hl sym">(</span>let-values <span class="hl sym">([(</span>accum piece<span class="hl sym">)</span>
                       <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>accum <span class="hl kwa">null</span><span class="hl sym">] [</span>piece piece<span class="hl sym">])</span>
                           <span class="hl sym">([</span>orientations <span class="hl sym">(</span>in-range <span class="hl num">2</span><span class="hl sym">)])</span>
                         <span class="hl sym">(</span>let-values <span class="hl sym">([(</span>accum piece<span class="hl sym">)</span>
                                       <span class="hl sym">(</span>for<span class="hl sym">/</span>fold <span class="hl sym">([</span>accum accum<span class="hl sym">] [</span>piece piece<span class="hl sym">])</span>
                                           <span class="hl sym">([</span>orientations <span class="hl sym">(</span>in-range <span class="hl sym">(</span>- <span class="hl num">6</span> <span class="hl sym">(*</span> <span class="hl num">3</span> <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(=</span> color <span class="hl num">4</span><span class="hl sym">)</span>
                                                                                  <span class="hl num">1</span>
                                                                                  <span class="hl num">0</span><span class="hl sym">))))])</span>
                                         <span class="hl sym">(</span>values <span class="hl sym">(</span><span class="hl kwa">cons</span> piece accum<span class="hl sym">)</span>
                                                 <span class="hl sym">(</span>map rotate piece<span class="hl sym">)))])</span>
                           <span class="hl sym">(</span>values accum <span class="hl sym">(</span>map flip piece<span class="hl sym">))))])</span>
           accum<span class="hl sym">)])</span>
    <span class="hl sym">(</span>for<span class="hl sym">*/</span><span class="hl kwa">list</span> <span class="hl sym">([</span>piece <span class="hl sym">(</span>in-<span class="hl kwa">list</span> pieces<span class="hl sym">)]</span>
                <span class="hl sym">[</span>y <span class="hl sym">(</span>in-range height<span class="hl sym">)]</span>
                <span class="hl sym">[</span>x <span class="hl sym">(</span>in-range width<span class="hl sym">)]</span>
                <span class="hl sym">[</span>mask <span class="hl sym">(:</span>do-in <span class="hl sym">([(</span>mask<span class="hl sym">) (</span>get-bitmask x y piece<span class="hl sym">)])</span> <span class="hl slc">; should be in-value</span>
                              #t <span class="hl sym">()</span> #t <span class="hl sym">()</span> #t #f <span class="hl sym">())]</span>
                #<span class="hl sym">:</span>when <span class="hl sym">(</span><span class="hl kwa">and</span> mask <span class="hl sym">(</span>no-islands? mask<span class="hl sym">)))</span>
      mask<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>generate-bitmasks<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>pieces <span class="hl sym">'((</span>E E E SE<span class="hl sym">)</span>
                  <span class="hl sym">(</span>SE SW W SW<span class="hl sym">)</span>
                  <span class="hl sym">(</span>W W SW SE<span class="hl sym">)</span>
                  <span class="hl sym">(</span>E E SW SE<span class="hl sym">)</span>
                  <span class="hl sym">(</span>NW W NW SE SW<span class="hl sym">)</span>
                  <span class="hl sym">(</span>E E NE W<span class="hl sym">)</span>
                  <span class="hl sym">(</span>NW NE NE W<span class="hl sym">)</span>
                  <span class="hl sym">(</span>NE SE E NE<span class="hl sym">)</span>
                  <span class="hl sym">(</span>SE SE E SE<span class="hl sym">)</span>
                  <span class="hl sym">(</span>E NW NW NW<span class="hl sym">))]</span>
        <span class="hl sym">[</span>masks-at-cell
         <span class="hl sym">(</span><span class="hl kwa">list</span>-<span class="hl sym">&gt;</span>vector
          <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">list</span> <span class="hl sym">([</span>i <span class="hl sym">(</span>in-range <span class="hl sym">(*</span> width height<span class="hl sym">))])</span>
            <span class="hl sym">(</span><span class="hl kwa">list</span>-<span class="hl sym">&gt;</span>vector
             <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">list</span> <span class="hl sym">([</span>j <span class="hl sym">(</span>in-range <span class="hl num">10</span><span class="hl sym">)])</span>
               <span class="hl kwa">null</span><span class="hl sym">))))])</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>piece <span class="hl sym">(</span>in-<span class="hl kwa">list</span> pieces<span class="hl sym">)]</span>
          <span class="hl sym">[</span>color <span class="hl sym">(</span>in-naturals<span class="hl sym">)])</span>
      <span class="hl sym">(</span>let loop <span class="hl sym">([</span>masks <span class="hl sym">(</span>sort <span class="hl sym">(</span>all-bitmasks piece color<span class="hl sym">) &gt;)]</span>
                 <span class="hl sym">[</span>cell-mask <span class="hl sym">(</span>arithmetic-shift <span class="hl num">1</span> <span class="hl sym">(</span>sub1 <span class="hl sym">(*</span> width height<span class="hl sym">)))]</span>
                 <span class="hl sym">[</span>cell-counter <span class="hl sym">(</span>sub1 <span class="hl sym">(*</span> width height<span class="hl sym">))])</span>
        <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">null</span>? masks<span class="hl sym">)</span>
            masks-at-cell
            <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(= (</span>bitwise-<span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl kwa">car</span> masks<span class="hl sym">)</span> cell-mask<span class="hl sym">)</span> cell-mask<span class="hl sym">)</span>
                <span class="hl sym">(</span>let <span class="hl sym">([</span>vec <span class="hl sym">(</span>vector-ref masks-at-cell cell-counter<span class="hl sym">)])</span>
                  <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> vec color <span class="hl sym">(</span><span class="hl kwa">cons</span> <span class="hl sym">(</span><span class="hl kwa">car</span> masks<span class="hl sym">) (</span>vector-ref vec color<span class="hl sym">)))</span>
                  <span class="hl sym">(</span>loop <span class="hl sym">(</span><span class="hl kwa">cdr</span> masks<span class="hl sym">)</span> cell-mask cell-counter<span class="hl sym">))</span>
                <span class="hl sym">(</span>loop masks <span class="hl sym">(</span>arithmetic-shift cell-mask -<span class="hl num">1</span><span class="hl sym">) (</span>sub1 cell-counter<span class="hl sym">))))))</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>v <span class="hl sym">(</span>in-vector masks-at-cell<span class="hl sym">)])</span>
      <span class="hl sym">(</span>for <span class="hl sym">([</span>j <span class="hl sym">(</span>in-naturals<span class="hl sym">)]</span>
            <span class="hl sym">[</span>val <span class="hl sym">(</span>in-vector v<span class="hl sym">)])</span>
        <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> v j <span class="hl sym">(</span><span class="hl kwa">reverse</span> val<span class="hl sym">))))</span>
    masks-at-cell<span class="hl sym">))</span>

<span class="hl sym">(</span>define masks-at-cell <span class="hl sym">(</span>generate-bitmasks<span class="hl sym">))</span>

<span class="hl sym">(</span>define masks <span class="hl sym">(</span>make-vector <span class="hl num">10 0</span><span class="hl sym">))</span>
<span class="hl sym">(</span>define to-go <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl sym">(</span>define solutions <span class="hl kwa">null</span><span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>solve-cell<span class="hl sym">!</span> cell board<span class="hl sym">)</span>
  <span class="hl sym">(</span>when <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span>positive? to-go<span class="hl sym">)</span>
             <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>negative? cell<span class="hl sym">)))</span>
    <span class="hl slc">;; Need solutions and not off board</span>
    <span class="hl sym">(</span><span class="hl kwa">cond</span>
     <span class="hl sym">[(=</span> board #x3FFFFFFFFFFFF<span class="hl sym">)</span>
      <span class="hl slc">;; Solved</span>
      <span class="hl sym">(</span>add-solutions<span class="hl sym">!)]</span>
     <span class="hl sym">[(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>clear? board cell<span class="hl sym">))</span>
      <span class="hl slc">;; Cell full, so try next</span>
      <span class="hl sym">(</span>solve-cell<span class="hl sym">! (</span>sub1 cell<span class="hl sym">)</span> board<span class="hl sym">)]</span>
     <span class="hl sym">[</span>else
      <span class="hl slc">;; Recur</span>
      <span class="hl sym">(</span>for <span class="hl sym">([</span>color <span class="hl sym">(</span>in-range <span class="hl num">10</span><span class="hl sym">)])</span>
        <span class="hl sym">(</span>when <span class="hl sym">(</span>zero? <span class="hl sym">(</span>vector-ref masks color<span class="hl sym">))</span>
          <span class="hl sym">(</span>for <span class="hl sym">([</span>mask <span class="hl sym">(</span>in-<span class="hl kwa">list</span> <span class="hl sym">(</span>vector-ref
                                <span class="hl sym">(</span>vector-ref masks-at-cell cell<span class="hl sym">)</span>
                                color<span class="hl sym">))])</span>
            <span class="hl sym">(</span>when <span class="hl sym">(</span>zero? <span class="hl sym">(</span>bitwise-<span class="hl kwa">and</span> mask board<span class="hl sym">))</span>
              <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> masks color mask<span class="hl sym">)</span>
              <span class="hl sym">(</span>solve-cell<span class="hl sym">! (</span>sub1 cell<span class="hl sym">) (</span>bitwise-ior board mask<span class="hl sym">))</span>
              <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> masks color <span class="hl num">0</span><span class="hl sym">)))))])))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>add-solutions<span class="hl sym">!)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>digits
         <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">list</span> <span class="hl sym">([</span>pos <span class="hl sym">(</span>in-range <span class="hl sym">(*</span> width height<span class="hl sym">))])</span>
           <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">or</span> <span class="hl sym">([</span>color <span class="hl sym">(</span>in-range <span class="hl num">10</span><span class="hl sym">)])</span>
                   <span class="hl sym">(</span><span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>clear? <span class="hl sym">(</span>vector-ref masks color<span class="hl sym">)</span> pos<span class="hl sym">))</span>
                        color<span class="hl sym">)))])</span>
    <span class="hl sym">(</span>let <span class="hl sym">([</span>s <span class="hl sym">(</span><span class="hl kwa">list</span>-<span class="hl sym">&gt;</span>string
              <span class="hl sym">(</span>map <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>digit<span class="hl sym">)</span>
                     <span class="hl sym">(</span><span class="hl kwa">if</span> digit
                         <span class="hl sym">(</span>integer-<span class="hl sym">&gt;</span>char <span class="hl sym">(+</span> digit <span class="hl sym">(</span>char-<span class="hl sym">&gt;</span>integer #\0<span class="hl sym">)))</span>
                         #\.<span class="hl sym">))</span>
                   digits<span class="hl sym">))]</span>
          <span class="hl sym">[</span>ns <span class="hl sym">(</span>make-string <span class="hl sym">(*</span> width height<span class="hl sym">))])</span>
      <span class="hl slc">;; Inverse</span>
      <span class="hl sym">(</span>for<span class="hl sym">* ([</span>y <span class="hl sym">(</span>in-range height<span class="hl sym">)]</span>
             <span class="hl sym">[</span>x <span class="hl sym">(</span>in-range width<span class="hl sym">)])</span>
            <span class="hl sym">(</span>string-<span class="hl kwa">set</span><span class="hl sym">!</span> ns <span class="hl sym">(+</span> x <span class="hl sym">(*</span> y width<span class="hl sym">))</span>
                         <span class="hl sym">(</span>string-ref s <span class="hl sym">(+ (</span>- width <span class="hl sym">(+</span> x <span class="hl num">1</span><span class="hl sym">))</span>
                                          <span class="hl sym">(*</span> width <span class="hl sym">(</span>- height <span class="hl sym">(+</span> y <span class="hl num">1</span><span class="hl sym">)))))))</span>
      <span class="hl slc">;; Append</span>
      <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> solutions <span class="hl sym">(</span><span class="hl kwa">cons</span> s solutions<span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> solutions <span class="hl sym">(</span><span class="hl kwa">cons</span> ns solutions<span class="hl sym">))</span>
      <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> to-go <span class="hl sym">(</span>- to-go <span class="hl num">2</span><span class="hl sym">)))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span><span class="hl kwa">print</span>-solution solution<span class="hl sym">)</span>
  <span class="hl sym">(</span>for <span class="hl sym">([</span>y <span class="hl sym">(</span>in-range height<span class="hl sym">)])</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>x <span class="hl sym">(</span>in-range width<span class="hl sym">)])</span>
      <span class="hl sym">(</span>display <span class="hl sym">(</span>string-ref solution <span class="hl sym">(+</span> x <span class="hl sym">(*</span> y width<span class="hl sym">))))</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot; &quot;</span><span class="hl sym">))</span>
    <span class="hl sym">(</span>display <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>when <span class="hl sym">(</span>even? y<span class="hl sym">)</span>
      <span class="hl sym">(</span>display <span class="hl str">&quot; &quot;</span><span class="hl sym">)))</span>
  <span class="hl sym">(</span>newline<span class="hl sym">))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>solve<span class="hl sym">!</span> n<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">set</span><span class="hl sym">!</span> to-go n<span class="hl sym">)</span>
  <span class="hl sym">(</span>solve-cell<span class="hl sym">! (</span>sub1 <span class="hl sym">(*</span> width height<span class="hl sym">))</span> <span class="hl num">0</span><span class="hl sym">))</span>

<span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span> #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">) (</span>solve<span class="hl sym">! (</span>string-<span class="hl sym">&gt;</span>number n<span class="hl sym">)))</span>
<span class="hl sym">(</span>let <span class="hl sym">([</span>solutions <span class="hl sym">(</span>sort solutions string<span class="hl sym">&lt;</span>?<span class="hl sym">)])</span>
  <span class="hl sym">(</span>printf <span class="hl str">&quot;~a solutions found</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span><span class="hl kwa">length</span> solutions<span class="hl sym">))</span>
  <span class="hl sym">(</span><span class="hl kwa">print</span>-solution <span class="hl sym">(</span><span class="hl kwa">car</span> solutions<span class="hl sym">))</span>
  <span class="hl sym">(</span><span class="hl kwa">print</span>-solution <span class="hl sym">(</span><span class="hl kwa">list</span>-ref solutions <span class="hl sym">(</span>sub1 <span class="hl sym">(</span><span class="hl kwa">length</span> solutions<span class="hl sym">)))))</span>
