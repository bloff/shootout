<span class="slc">-- $Id: ackermann-gnat.code,v 1.13 2005-11-03 19:56:57 igouy-guest Exp $</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- by James S. Rogers</span>
<span class="slc">-- revised by Vasiliy Fofanov</span>
<span class="slc">--</span>
<span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;</span>
<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;</span>
<span class="kwa">with</span> Ada.Strings.Fixed<span class="sym">;</span>
<span class="kwa">with</span> Ack_F<span class="sym">;</span>

<span class="kwa">procedure</span> Ackermann <span class="kwa">is</span>
  Num <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>
  <span class="kwa">function</span> L_Trim<span class="sym">(</span>Source <span class="sym">:</span> <span class="kwb">String</span><span class="sym">;</span> Side <span class="sym">:</span> Ada.Strings.Trim_End <span class="sym">:=</span> Ada.Strings.Left<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">String</span> <span class="kwa">renames</span> Ada.Strings.Fixed.Trim<span class="sym">;</span>
<span class="kwa">begin</span>
  <span class="kwa">if</span> Argument_Count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span>
    Num <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));</span>
  <span class="kwa">else</span>
    Num <span class="sym">:=</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">end if</span><span class="sym">;</span>

  Put<span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span><span class="sym">);</span>
  Put<span class="sym">(</span>L_Trim <span class="sym">(</span> <span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>Num<span class="sym">)));</span>
  Put<span class="sym">(</span><span class="str">&quot;):&quot;</span><span class="sym">);</span>
  Put<span class="sym">(</span><span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>Ack_F <span class="sym">(</span><span class="num">3</span><span class="sym">,</span> Num<span class="sym">)));</span>
<span class="kwa">end</span> Ackermann<span class="sym">;</span>

<span class="slc">----------------------------------------------------------------------</span>

<span class="kwa">function</span> Ack_F <span class="sym">(</span>M<span class="sym">,</span> N <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span><span class="sym">;</span>

<span class="slc">----------------------------------------------------------------------</span>

<span class="kwa">function</span> Ack_F <span class="sym">(</span>M<span class="sym">,</span> N <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is</span>
<span class="kwa">pragma</span> Suppress<span class="sym">(</span>All_Checks<span class="sym">);</span>
<span class="kwa">begin</span>
   <span class="kwa">if</span> M <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
      <span class="kwa">return</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">elsif</span> N <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
      <span class="kwa">return</span> Ack_F <span class="sym">(</span>M <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
   <span class="kwa">else</span>
      <span class="kwa">return</span> Ack_F <span class="sym">(</span>M <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> Ack_F <span class="sym">(</span>M<span class="sym">,</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">));</span>
   <span class="kwa">end if</span><span class="sym">;</span>
<span class="kwa">end</span> Ack_F<span class="sym">;</span>

