<span class="com">(* spigot.sml</span>
<span class="com"> *</span>
<span class="com"> *   Generating digits of PI using unbounded spigot algorithm.</span>
<span class="com"> *</span>
<span class="com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="com"> *</span>
<span class="com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="com"> *)</span>
<span class="kwa">structure</span> Test<span class="sym">:</span><span class="kwa">sig val</span> main<span class="sym">:</span><span class="kwb">string</span><span class="sym">*</span><span class="kwb">string</span> list<span class="sym">-&gt;</span>OS.Process.status <span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>

    <span class="kwa">type</span> lft <span class="sym">=</span> IntInf.<span class="kwb">int</span> <span class="sym">*</span> IntInf.<span class="kwb">int</span> <span class="sym">*</span> IntInf.<span class="kwb">int</span> <span class="sym">*</span> IntInf.<span class="kwb">int</span>

    <span class="kwa">fun</span> gcd<span class="sym">(</span>n<span class="sym">:</span>IntInf.<span class="kwb">int</span><span class="sym">,</span>m<span class="sym">)=</span>
	<span class="kwa">let val</span> <span class="sym">(</span>n<span class="sym">,</span> m<span class="sym">) = (</span>abs n<span class="sym">,</span> abs m<span class="sym">)</span>
	    <span class="kwa">fun</span> g<span class="sym">(</span>n<span class="sym">,</span><span class="num">0</span><span class="sym">)=</span>n <span class="sym">|</span> g<span class="sym">(</span>n<span class="sym">,</span>m<span class="sym">)=</span>g<span class="sym">(</span>m<span class="sym">,</span>n mod m<span class="sym">)</span>
	<span class="kwa">in if</span> n<span class="sym">&lt;</span>m <span class="kwa">then</span> g<span class="sym">(</span>m<span class="sym">,</span>n<span class="sym">)</span> <span class="kwa">else</span> g<span class="sym">(</span>n<span class="sym">,</span>m<span class="sym">)</span> <span class="kwa">end</span>

    <span class="kwa">fun</span> can<span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">)=</span>
	<span class="kwa">let val</span> f<span class="sym">=</span>gcd<span class="sym">(</span>q<span class="sym">,</span>gcd<span class="sym">(</span>r<span class="sym">,</span>gcd<span class="sym">(</span>s<span class="sym">,</span>t<span class="sym">)))</span> <span class="kwa">in</span> <span class="sym">(</span>q div f<span class="sym">,</span> r div f<span class="sym">,</span> s div f<span class="sym">,</span> t div f<span class="sym">)</span> <span class="kwa">end</span>

    <span class="kwa">fun</span> stream <span class="sym">(</span>out<span class="sym">,</span> nx<span class="sym">,</span> sf<span class="sym">,</span> pr<span class="sym">,</span> cn<span class="sym">,</span> mk<span class="sym">) =</span>
	<span class="kwa">let fun</span> l <span class="sym">(</span>z<span class="sym">,</span> k<span class="sym">:</span> IntInf.<span class="kwb">int</span><span class="sym">) =</span>
		<span class="kwa">let val</span> z <span class="sym">=</span> <span class="kwa">if</span> k mod <span class="num">20</span> <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> can z <span class="kwa">else</span> z
		    <span class="kwa">val</span> y <span class="sym">=</span> nx z
		<span class="kwa">in if</span> sf<span class="sym">(</span>z<span class="sym">,</span>y<span class="sym">)</span> <span class="kwa">then</span> <span class="sym">(</span>out y<span class="sym">;</span> l<span class="sym">(</span>pr<span class="sym">(</span>z<span class="sym">,</span>y<span class="sym">),</span>k<span class="sym">))</span> <span class="kwa">else</span> l<span class="sym">(</span>cn<span class="sym">(</span>z<span class="sym">,</span>mk k<span class="sym">),</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
		<span class="kwa">end</span>
	<span class="kwa">in</span> l <span class="kwa">end</span>

    <span class="kwa">fun</span> extr <span class="sym">((</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">):</span> lft<span class="sym">,</span> x<span class="sym">) = (</span>q<span class="sym">*</span>x<span class="sym">+</span>r<span class="sym">)</span>div<span class="sym">(</span>s<span class="sym">*</span>x<span class="sym">+</span>t<span class="sym">)</span>
    <span class="kwa">fun</span> comp <span class="sym">((</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">):</span> lft<span class="sym">, (</span>u<span class="sym">,</span>v<span class="sym">,</span>w<span class="sym">,</span>x<span class="sym">)) = (</span>q<span class="sym">*</span>u<span class="sym">+</span>r<span class="sym">*</span>w<span class="sym">,</span>q<span class="sym">*</span>v<span class="sym">+</span>r<span class="sym">*</span>x<span class="sym">,</span>s<span class="sym">*</span>u<span class="sym">+</span>t<span class="sym">*</span>w<span class="sym">,</span>s<span class="sym">*</span>v<span class="sym">+</span>t<span class="sym">*</span>x<span class="sym">)</span>

    <span class="kwa">fun</span> pi N <span class="sym">=</span>
	<span class="kwa">let val</span> n <span class="sym">=</span> ref <span class="num">0</span>
	    <span class="kwa">fun</span> nl <span class="sym">(</span>k<span class="sym">,</span> <span class="num">0</span><span class="sym">) =</span> print <span class="sym">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span> ^ <span class="kwa">Int</span>.toString k ^ <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
	      <span class="sym">|</span> nl <span class="sym">(</span>k<span class="sym">,</span> m<span class="sym">) = (</span>print <span class="str">&quot; &quot;</span><span class="sym">;</span> nl <span class="sym">(</span>k<span class="sym">,</span> m <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
	    <span class="kwa">fun</span> out d <span class="sym">=</span>
		<span class="kwa">let val</span> i <span class="sym">= !</span>n <span class="sym">+</span> <span class="num">1</span> <span class="kwa">val</span> m <span class="sym">=</span> i mod <span class="num">10</span>
		<span class="kwa">in</span> print <span class="sym">(</span>IntInf.toString d<span class="sym">);</span> n <span class="sym">:=</span> i<span class="sym">;</span>
		   <span class="kwa">if</span> m <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> nl <span class="sym">(</span>i<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">else</span> <span class="sym">();</span>
		   <span class="kwa">if</span> i <span class="sym">&gt;=</span> N <span class="kwa">then</span>
		       <span class="sym">(</span><span class="kwa">if</span> m <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">()</span> <span class="kwa">else</span> nl <span class="sym">(</span>i<span class="sym">,</span> <span class="num">10</span><span class="sym">-</span>m<span class="sym">);</span>
			OS.Process.exit OS.Process.success<span class="sym">)</span>
		   <span class="kwa">else</span> <span class="sym">()</span>
		<span class="kwa">end</span>
	<span class="kwa">in</span> stream <span class="sym">(</span>out<span class="sym">,</span>	<span class="kwa">fn</span> z <span class="sym">=&gt;</span> extr <span class="sym">(</span>z<span class="sym">,</span> <span class="num">3</span><span class="sym">),</span>
		        <span class="kwa">fn</span> <span class="sym">(</span>z<span class="sym">,</span> n<span class="sym">) =&gt;</span> extr <span class="sym">(</span>z<span class="sym">,</span> <span class="num">4</span><span class="sym">) =</span> n<span class="sym">,</span>
		        <span class="kwa">fn</span> <span class="sym">(</span>z<span class="sym">,</span> n<span class="sym">) =&gt;</span> comp <span class="sym">((</span><span class="num">10</span><span class="sym">,</span> ~<span class="num">10</span><span class="sym">*</span>n<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> z<span class="sym">),</span>
		        comp<span class="sym">,</span>
		        <span class="kwa">fn</span> k <span class="sym">=&gt;</span> <span class="kwa">let val</span> k' <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span> <span class="kwa">in</span> <span class="sym">(</span>k<span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>k'<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> k'<span class="sym">)</span> <span class="kwa">end</span><span class="sym">)</span>
		  <span class="sym">((</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> <span class="num">1</span><span class="sym">)</span>
	<span class="kwa">end</span>

    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> pi <span class="num">1</span>
      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg<span class="sym">::</span>_<span class="sym">) =</span> pi <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
<span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> Test.main <span class="sym">(</span>CommandLine.name <span class="sym">(),</span> CommandLine.arguments <span class="sym">())</span>
