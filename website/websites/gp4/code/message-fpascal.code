<span class="hl com">{ The Computer Language Shootout</span>
<span class="hl com">  http://shootout.alioth.debian.org</span>
<span class="hl com">  contributed by Marc Weustink</span>
<span class="hl com">}</span>
<span class="hl kwa">program message</span><span class="hl sym">;</span>
<span class="hl com">{$mode objfpc}</span><span class="hl com">{$h-}</span>
<span class="hl kwa">uses</span>
  PThreads<span class="hl sym">;</span>

<span class="hl kwa">var</span>
  PostOffice<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.499</span><span class="hl sym">]</span> <span class="hl kwa">of record</span>
    Queue<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.15</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>  <span class="hl slc">// queuelength must be power of 2</span>
    ReadIdx<span class="hl sym">,</span> WriteIdx<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
    ReadSem<span class="hl sym">,</span> WriteSem<span class="hl sym">:</span> TSemaphore<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  ThreadAttr<span class="hl sym">:</span> TThreadAttr<span class="hl sym">;</span>
  ThreadFuncAddr<span class="hl sym">:</span> TStartRoutine<span class="hl sym">;</span>
  Sum<span class="hl sym">:</span> <span class="hl kwb">Integer</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  FinishedSem<span class="hl sym">:</span> TSemaphore<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">PostMessage</span><span class="hl sym">(</span>AIndex<span class="hl sym">,</span> AMessage<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">);</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">with</span> PostOffice<span class="hl sym">[</span>AIndex<span class="hl sym">]</span> <span class="hl kwa">do begin</span>
    <span class="hl kwd">sem_wait</span><span class="hl sym">(</span>WriteSem<span class="hl sym">);</span>
    Queue<span class="hl sym">[</span>WriteIdx<span class="hl sym">] :=</span> AMessage<span class="hl sym">;</span>
    <span class="hl kwd">sem_post</span><span class="hl sym">(</span>ReadSem<span class="hl sym">);</span>
    WriteIdx <span class="hl sym">:= (</span>WriteIdx <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl kwd">Length</span><span class="hl sym">(</span>Queue<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">ReadMessage</span><span class="hl sym">(</span>AIndex<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">):</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">with</span> PostOffice<span class="hl sym">[</span>AIndex<span class="hl sym">]</span> <span class="hl kwa">do begin</span>
    <span class="hl kwd">sem_wait</span><span class="hl sym">(</span>ReadSem<span class="hl sym">);</span>
    Result <span class="hl sym">:=</span> Queue<span class="hl sym">[</span>ReadIdx<span class="hl sym">];</span>
    <span class="hl kwd">sem_post</span><span class="hl sym">(</span>WriteSem<span class="hl sym">);</span>
    ReadIdx <span class="hl sym">:= (</span>ReadIdx <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl kwd">Length</span><span class="hl sym">(</span>Queue<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">ThreadFunc</span><span class="hl sym">(</span>ANum<span class="hl sym">:</span> PtrInt<span class="hl sym">):</span> <span class="hl kwb">Pointer</span><span class="hl sym">;</span> <span class="hl kwa">cdecl</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  Value<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
  Id<span class="hl sym">:</span> TThreadID<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> ANum <span class="hl sym">&lt;&gt;</span> <span class="hl num">0</span>
  <span class="hl kwa">then</span> <span class="hl kwd">pthread_create</span><span class="hl sym">(&#64;</span>Id<span class="hl sym">, &#64;</span>ThreadAttr<span class="hl sym">,</span> ThreadFuncAddr<span class="hl sym">,</span> <span class="hl kwb">Pointer</span><span class="hl sym">(</span>ANum<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">));</span>

  <span class="hl kwa">repeat</span>
    Value <span class="hl sym">:=</span> <span class="hl kwd">ReadMessage</span><span class="hl sym">(</span>ANum<span class="hl sym">);</span>
    <span class="hl kwa">if</span> Value <span class="hl sym">&lt;&gt; -</span><span class="hl num">1</span>
    <span class="hl kwa">then begin</span>
      <span class="hl kwd">Inc</span><span class="hl sym">(</span>Value<span class="hl sym">);</span>
      <span class="hl kwa">if</span> ANum <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">then</span> <span class="hl kwd">Inc</span><span class="hl sym">(</span>Sum<span class="hl sym">,</span> Value<span class="hl sym">)</span>
      <span class="hl kwa">else</span> <span class="hl kwd">PostMessage</span><span class="hl sym">(</span>ANum<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> Value<span class="hl sym">);</span>
    <span class="hl kwa">end</span>
    <span class="hl kwa">else begin</span>
      <span class="hl kwa">if</span> ANum <span class="hl sym">=</span> <span class="hl num">0</span>
      <span class="hl kwa">then</span> <span class="hl kwd">sem_post</span><span class="hl sym">(&#64;</span>FinishedSem<span class="hl sym">)</span>
      <span class="hl kwa">else</span> <span class="hl kwd">PostMessage</span><span class="hl sym">(</span>ANum<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> Value<span class="hl sym">);</span>
      <span class="hl slc">//Break;</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwa">until</span> <span class="hl kwb">False</span><span class="hl sym">;</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">var</span>
  n<span class="hl sym">,</span> count<span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
  Id<span class="hl sym">:</span> TThreadId<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">Val</span><span class="hl sym">(</span><span class="hl kwd">paramstr</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> count<span class="hl sym">,</span> n<span class="hl sym">);</span>
  <span class="hl kwa">if</span> n <span class="hl sym">&lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> exit<span class="hl sym">;</span>

  <span class="hl kwa">for</span> n <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl kwd">High</span><span class="hl sym">(</span>PostOffice<span class="hl sym">)</span> <span class="hl kwa">do with</span> PostOffice<span class="hl sym">[</span>n<span class="hl sym">]</span> <span class="hl kwa">do begin</span>
    ReadIdx <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    WriteIdx <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwd">sem_init</span><span class="hl sym">(&#64;</span>ReadSem<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
    <span class="hl kwd">sem_init</span><span class="hl sym">(&#64;</span>WriteSem<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwd">Length</span><span class="hl sym">(</span>Queue<span class="hl sym">));</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwd">sem_init</span><span class="hl sym">(</span>FinishedSem<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>

  <span class="hl kwd">pthread_attr_init</span><span class="hl sym">(&#64;</span>ThreadAttr<span class="hl sym">);</span>
  <span class="hl kwd">pthread_attr_setdetachstate</span><span class="hl sym">(&#64;</span>ThreadAttr<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwd">pthread_attr_setstacksize</span><span class="hl sym">(&#64;</span>ThreadAttr<span class="hl sym">,</span> <span class="hl num">1024</span> <span class="hl sym">*</span> <span class="hl num">16</span><span class="hl sym">);</span>

  ThreadFuncAddr <span class="hl sym">:=</span> <span class="hl kwd">TStartRoutine</span><span class="hl sym">(&#64;</span>ThreadFunc<span class="hl sym">);</span>
  <span class="hl kwd">pthread_create</span><span class="hl sym">(&#64;</span>Id<span class="hl sym">, &#64;</span>ThreadAttr<span class="hl sym">,</span> ThreadFuncAddr<span class="hl sym">,</span> <span class="hl kwb">Pointer</span><span class="hl sym">(</span><span class="hl kwd">High</span><span class="hl sym">(</span>PostOffice<span class="hl sym">)));</span>

  <span class="hl kwa">for</span> n <span class="hl sym">:=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> count <span class="hl kwa">do</span>
    <span class="hl kwd">PostMessage</span><span class="hl sym">(</span><span class="hl kwd">High</span><span class="hl sym">(</span>PostOffice<span class="hl sym">),</span> <span class="hl num">0</span><span class="hl sym">);</span>

  <span class="hl kwd">PostMessage</span><span class="hl sym">(</span><span class="hl kwd">High</span><span class="hl sym">(</span>PostOffice<span class="hl sym">), -</span><span class="hl num">1</span><span class="hl sym">);</span>

  <span class="hl kwd">sem_wait</span><span class="hl sym">(</span>FinishedSem<span class="hl sym">);</span>
  <span class="hl kwd">WriteLn</span><span class="hl sym">(</span>Sum<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>
