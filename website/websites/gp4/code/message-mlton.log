BUILD COMMANDS FOR: message.mlton

Sat Oct 29 17:50:25 UTC 2005

cp /home/dunham/gp4/shootout/bench/message/message.mlton message.sml
(if [ -r /home/dunham/gp4/shootout/bench/message/mlb_message.mlb ]; then			\
		mv /home/dunham/gp4/shootout/bench/message/mlb_message.mlb message.mlb;		\
	else							\
		echo '../../Include/mlton-src/lib.mlb message.sml'	\
			 >message.mlb;				\
	fi)
/usr/bin/mlton  -output message.mlton_run message.mlb
invalid file suffix on message.mlb
usage: mlton [option ...] file.{c|cm|o|sml} [file.{c|o|s|S} ...]
    -align {4|8}                  object alignment
    -cc-opt <opt>                 pass option to C compiler
    -detect-overflow {true|false} overflow checking on integer arithmetic
    -exn-history {false|true}     enable Exn.history
    -export-header <file>         write C header file for _export's
    -ieee-fp {false|true}         use strict IEEE floating-point
    -inline <n>                   set inlining threshold
    -keep {g|o|sml}               save intermediate files
    -link-opt <opt>               pass option to linker
    -native {true|false}          use native code generator
    -output <file>                name of output file
    -profile {no|alloc|time}      produce executable suitable for profiling
    -profile-stack {false|true}   profile the stack
    -runtime <arg>                pass arg to runtime via @MLton
    -safe {true|false}            bounds checking and other checks
    -sequence-unit {false|true}   in (e1; e2), require e1: unit
    -show-basis <file>            write out the basis library
    -show-basis-used <file>       write the basis library used by the program
    -show-def-use <file>          write def-use information
    -stop {f|g|o|sml|tc}          where to stop
    -target {self}                platform that executable will run on
    -verbose {0|1|2|3}            how verbose to be
    -warn-match {true|false}      nonexhaustive and redundant match warnings
    -warn-unused {false|true}     unused identifier warnings
make[3]: [message.mlton_run] Error 1 (ignored)
rm -f message.mlb message.sml

=================================================================
COMMAND LINE (%A is single numeric argument):

message.mlton_run %A
Error, could not exec message.mlton_run 1000 (No such file or directory)
PATH=/home/dunham/gp4/shootout/bench/message:/home/dunham/gp4/shootout/bench/message/tmp:/opt/xds_x86/bin:/opt/intel/fc/9.0/bin:/opt/intel/cc/9.0/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin:/usr/i686-pc-linux-gnu/gcc-bin/3.3.5-20050130:/opt/ghc/bin:/opt/blackdown-jdk-1.4.2.02/bin:/opt/blackdown-jdk-1.4.2.02/jre/bin:/usr/qt/3/bin:/usr/kde/3.4/bin
TEST FAILED - Child processed exited with error code (1)


PROGRAM OUTPUT
==============
