<span class="com">(*</span>
<span class="com">  Requires the Bigarray module for larger values of n</span>
<span class="com">  (&gt;= 9 on 32 bit systems), so compile with something like:</span>
<span class="com">    ocamlopt -noassert -unsafe -o nseive bigarray.cmxa nseive.ml</span>
<span class="com">  i.e. include the bigarray.cmxa library... *)</span>

<span class="kwa">open</span> Bigarray<span class="sym">;;</span>

<span class="kwa">let</span> big_nseive m <span class="sym">=</span>
  <span class="kwa">let</span> s <span class="sym">=</span> Array1.create Bigarray.char c_layout <span class="sym">(</span>succ m<span class="sym">)</span> <span class="kwa">in</span>
  Array1.fill s <span class="str">'t';</span>
<span class="str">  let rec step i cnt =</span>
<span class="str">    let rec whack j = if j &lt;= m then (Array1.set s j '</span>f'<span class="sym">;</span> whack <span class="sym">(</span>j <span class="sym">+</span> i<span class="sym">))</span> <span class="kwa">in</span>
    <span class="kwa">if</span> i <span class="sym">&lt;=</span> m <span class="kwa">then</span>
      <span class="sym">(</span><span class="kwa">if</span> Array1.get s i <span class="sym">=</span> <span class="str">'t' then</span>
<span class="str">        (whack (i lsl 1); step (succ i) (succ cnt))</span>
<span class="str">      else step (succ i) cnt)</span>
<span class="str">    else cnt in</span>
<span class="str">  Printf.printf &quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot; m (step 2 0);;</span>
<span class="str"></span>
<span class="str">let _ =</span>
<span class="str">  let n = (int_of_string Sys.argv.(1)) in</span>
<span class="str">  big_nseive ((1 lsl n) * 10000);</span>
<span class="str">  big_nseive ((1 lsl (n-1)) * 10000);</span>
<span class="str">  big_nseive ((1 lsl (n-2)) * 10000);;</span>
<span class="str"></span>
<span class="str"></span>
