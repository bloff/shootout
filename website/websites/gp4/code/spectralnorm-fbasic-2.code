<span class="slc">' The Computer Language Shootout</span>
<span class="slc">' http://shootout.alioth.debian.org/</span>
<span class="slc">' contributed by Josh Goldfoot</span>
<span class="slc">' based on the C version by Sebastien Loisel</span>
<span class="slc">' modified by Antoni Gual</span>

<span class="slc">'#define eval_A(i, j) 1.0/((i+j)*(i+j+1)/2.0+i+1.0)</span>

<span class="kwa">function</span> eval_A<span class="sym">(</span>i <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">,</span> j <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span> <span class="kwa">as</span> double
   return <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2.0</span><span class="sym">+</span>i<span class="sym">+</span><span class="num">1.0</span><span class="sym">)</span>
<span class="kwa">end function</span>

<span class="kwa">sub</span> eval_A_times_u<span class="sym">(</span><span class="kwa">ByVal</span> N <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">,</span> u<span class="sym">()</span> <span class="kwa">as</span> double<span class="sym">,</span> Au<span class="sym">()</span> <span class="kwa">as</span> double<span class="sym">)</span>
  <span class="kwa">Dim As</span> <span class="kwb">Integer</span> i<span class="sym">,</span> j
   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> N <span class="sym">-</span> <span class="num">1</span>
      Au<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0</span>
      <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> N <span class="sym">-</span> <span class="num">1</span>
         Au<span class="sym">(</span>i<span class="sym">) +=</span> eval_A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>u<span class="sym">(</span>j<span class="sym">)</span>
      <span class="kwa">next</span> j
   <span class="kwa">next</span> i
<span class="kwa">end sub</span>

<span class="kwa">sub</span> eval_At_times_u<span class="sym">(</span><span class="kwa">ByVal</span> N <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">,</span> u<span class="sym">()</span> <span class="kwa">as</span> double<span class="sym">,</span> Au<span class="sym">()</span> <span class="kwa">as</span> double<span class="sym">)</span>
  <span class="kwa">Dim As</span> <span class="kwb">Integer</span> i<span class="sym">,</span> j
   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> N<span class="sym">-</span><span class="num">1</span>
      Au<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0</span>
      <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> N<span class="sym">-</span><span class="num">1</span>
         Au<span class="sym">(</span>i<span class="sym">) +=</span> eval_A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">) *</span> u<span class="sym">(</span>j<span class="sym">)</span>
      <span class="kwa">next</span> j
   <span class="kwa">next</span> i
<span class="kwa">end sub</span>

<span class="kwa">sub</span> eval_AtA_times_u<span class="sym">(</span><span class="kwa">ByVal</span> N <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">,</span> u<span class="sym">()</span> <span class="kwa">as</span> double<span class="sym">,</span> AtAu<span class="sym">()</span> <span class="kwa">as</span> double<span class="sym">)</span>
   <span class="kwa">dim</span> v<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">as</span> double
   eval_A_times_u<span class="sym">(</span>N<span class="sym">,</span>u<span class="sym">(),</span>v<span class="sym">())</span>
   eval_At_times_u<span class="sym">(</span>N<span class="sym">,</span>v<span class="sym">(),</span>AtAu<span class="sym">() )</span>
<span class="kwa">end sub</span>

<span class="kwa">Dim As</span> <span class="kwb">Integer</span> i<span class="sym">,</span> j<span class="sym">,</span> N

N <span class="sym">=</span> valint<span class="sym">(</span>COMMAND$<span class="sym">)</span>
<span class="kwa">if</span> N <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> N <span class="sym">=</span> <span class="num">100</span>
<span class="kwa">dim as</span> double u<span class="sym">(</span>N<span class="sym">),</span> v<span class="sym">(</span>N<span class="sym">),</span> vBv<span class="sym">,</span> vv
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> N<span class="sym">-</span><span class="num">1</span>
   u<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">1</span>
<span class="kwa">next</span> i
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="num">9</span>
   eval_AtA_times_u<span class="sym">(</span>N<span class="sym">,</span>u<span class="sym">(),</span>v<span class="sym">() )</span>
   eval_AtA_times_u<span class="sym">(</span>N<span class="sym">,</span>v<span class="sym">(),</span>u<span class="sym">() )</span>
<span class="kwa">next</span> i
vBv<span class="sym">=</span><span class="num">0</span> <span class="sym">:</span> vv<span class="sym">=</span><span class="num">0</span>
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> N <span class="sym">-</span> <span class="num">1</span>
   vBv <span class="sym">+=</span> u<span class="sym">(</span>i<span class="sym">)*</span>v<span class="sym">(</span>i<span class="sym">) :</span> vv <span class="sym">+=</span> v<span class="sym">(</span>i<span class="sym">)*</span>v<span class="sym">(</span>i<span class="sym">)</span>
<span class="kwa">next</span> i

<span class="kwa">dim</span> result <span class="kwa">as</span> double
result <span class="sym">=</span> sqr<span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">)</span>
REM this is necessary because <span class="str">&quot;print using&quot;</span> rounds poorly
<span class="kwa">dim</span> factor <span class="kwa">as</span> longint
factor <span class="sym">=</span> <span class="num">1000000000</span>
result <span class="sym">=</span> clngint<span class="sym">(</span>result <span class="sym">*</span> factor<span class="sym">) /</span> factor
print str<span class="sym">(</span>result<span class="sym">)</span>

