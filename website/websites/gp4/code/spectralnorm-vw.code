<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy *&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

spectralnorm
   <span class="sym">|</span> n u v vBv vv <span class="sym">|</span>
   n <span class="sym">:=</span> CEnvironment argv first asNumber<span class="sym">.</span>
   u <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">1.0</span>d<span class="sym">.</span>
   v <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">0.0</span>d<span class="sym">.</span>

   <span class="num">10</span> timesRepeat<span class="sym">: [</span>
      v <span class="sym">:=</span> u multiplyAtAv<span class="sym">.</span>
      u <span class="sym">:=</span> v multiplyAtAv<span class="sym">.</span>
   <span class="sym">].</span>

   vBv <span class="sym">:=</span> <span class="num">0.0</span>d<span class="sym">.</span>
   vv <span class="sym">:=</span> <span class="num">0.0</span>d<span class="sym">.</span>
   <span class="num">1</span> to<span class="sym">:</span> n do<span class="sym">: [:</span>i<span class="sym">|</span>
      vBv <span class="sym">:=</span> vBv <span class="sym">+ ((</span>u at<span class="sym">:</span> i<span class="sym">) * (</span>v at<span class="sym">:</span> i<span class="sym">)).</span>
      vv <span class="sym">:=</span> vv <span class="sym">+ ((</span>v at<span class="sym">:</span> i<span class="sym">) * (</span>v at<span class="sym">:</span> i<span class="sym">)).</span>
   <span class="sym">].</span>

   <span class="sym">^((</span>vBv<span class="sym">/</span>vv<span class="sym">)</span> sqrt asStringWith<span class="sym">:</span> <span class="num">9</span><span class="sym">)</span> withNl <span class="sym">! !</span>


<span class="sym">!</span>Core<span class="sym">.</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

matrixA<span class="sym">:</span> anInteger
<span class="com">&quot;* fixup one-based indexing to zero-based indexing - cleanup later *&quot;</span>
   <span class="sym">|</span> i j <span class="sym">|</span>
   i <span class="sym">:=</span> <span class="kwa">self</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">.</span>
   j <span class="sym">:=</span> anInteger <span class="sym">-</span> <span class="num">1</span><span class="sym">.</span>
   <span class="sym">^</span><span class="num">1.0</span>d <span class="sym">/ (</span>i <span class="sym">+</span> j <span class="sym">* (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">) /</span><span class="num">2</span>  <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> asDouble <span class="sym">! !</span>


<span class="sym">!</span>Core<span class="sym">.</span>Array methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

multiplyAv
   <span class="sym">|</span> n av <span class="sym">|</span>
   n <span class="sym">:=</span> <span class="kwa">self</span> size<span class="sym">.</span>
   av <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">0.0</span>d<span class="sym">.</span>
   <span class="num">1</span> to<span class="sym">:</span> n do<span class="sym">: [:</span>i<span class="sym">|</span>
      <span class="num">1</span> to<span class="sym">:</span> n do<span class="sym">: [:</span>j<span class="sym">|</span>
         av at<span class="sym">:</span> i put<span class="sym">: (</span>av at<span class="sym">:</span> i<span class="sym">) + ((</span>i matrixA<span class="sym">:</span> j<span class="sym">) * (</span><span class="kwa">self</span> at<span class="sym">:</span> j<span class="sym">)) ]].</span>
   <span class="sym">^</span>av <span class="sym">! !</span>

<span class="sym">!</span>Core<span class="sym">.</span>Array methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

multiplyAtv
   <span class="sym">|</span> n atv <span class="sym">|</span>
   n <span class="sym">:=</span> <span class="kwa">self</span> size<span class="sym">.</span>
   atv <span class="sym">:=</span> Array new<span class="sym">:</span> n withAll<span class="sym">:</span> <span class="num">0.0</span>d<span class="sym">.</span>
   <span class="num">1</span> to<span class="sym">:</span> n do<span class="sym">: [:</span>i<span class="sym">|</span>
      <span class="num">1</span> to<span class="sym">:</span> n do<span class="sym">: [:</span>j<span class="sym">|</span>
         atv at<span class="sym">:</span> i put<span class="sym">: (</span>atv at<span class="sym">:</span> i<span class="sym">) + ((</span>j matrixA<span class="sym">:</span> i<span class="sym">) * (</span><span class="kwa">self</span> at<span class="sym">:</span> j<span class="sym">)) ]].</span>
   <span class="sym">^</span>atv <span class="sym">! !</span>

<span class="sym">!</span>Core<span class="sym">.</span>Array methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

multiplyAtAv
   <span class="sym">^(</span><span class="kwa">self</span> multiplyAv<span class="sym">)</span> multiplyAtv <span class="sym">! !</span>
