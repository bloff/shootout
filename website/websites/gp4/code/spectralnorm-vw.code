<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy&quot;!</span>
<span class="com"></span>
<span class="com">!Shootout.Tests class methodsFor: 'benchmarking'!</span>
<span class="com"></span>
<span class="com">spectralnorm</span>
<span class="com">   | n u v vBv vv |</span>
<span class="com">   n := CEnvironment argv first asNumber.</span>
<span class="com">   u := Array new: n withAll: 1.0d.</span>
<span class="com">   v := Array new: n withAll: 0.0d.</span>
<span class="com"></span>
<span class="com">   10 timesRepeat: [</span>
<span class="com">      v := u multiplyAtAv.</span>
<span class="com">      u := v multiplyAtAv.</span>
<span class="com">   ].</span>
<span class="com"></span>
<span class="com">   vBv := 0.0d.</span>
<span class="com">   vv := 0.0d.</span>
<span class="com">   1 to: n do: [:i|</span>
<span class="com">      vBv := vBv + ((u at: i) * (v at: i)).</span>
<span class="com">      vv := vv + ((v at: i) * (v at: i)).</span>
<span class="com">   ].</span>
<span class="com"></span>
<span class="com">   ^((vBv/vv) sqrt asStringWith: 9) withNl ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Core.SmallInteger methodsFor: 'computer language shootout'!</span>
<span class="com"></span>
<span class="com">matrixA: anInteger</span>
<span class="com">&quot;fixup one-based indexing to zero-based indexing - cleanup later&quot;</span>
<span class="com">   | i j |</span>
<span class="com">   i := self - 1.</span>
<span class="com">   j := anInteger - 1.</span>
<span class="com">   ^1.0d / (i + j * (i + j + 1) /2  + i + 1) asDouble ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Core.Array methodsFor: 'computer language shootout'!</span>
<span class="com"></span>
<span class="com">multiplyAv</span>
<span class="com">   | n av |</span>
<span class="com">   n := self size.</span>
<span class="com">   av := Array new: n withAll: 0.0d.</span>
<span class="com">   1 to: n do: [:i|</span>
<span class="com">      1 to: n do: [:j|</span>
<span class="com">         av at: i put: (av at: i) + ((i matrixA: j) * (self at: j)) ]].</span>
<span class="com">   ^av ! !</span>
<span class="com"></span>
<span class="com">!Core.Array methodsFor: 'computer language shootout'!</span>
<span class="com"></span>
<span class="com">multiplyAtv</span>
<span class="com">   | n atv |</span>
<span class="com">   n := self size.</span>
<span class="com">   atv := Array new: n withAll: 0.0d.</span>
<span class="com">   1 to: n do: [:i|</span>
<span class="com">      1 to: n do: [:j|</span>
<span class="com">         atv at: i put: (atv at: i) + ((j matrixA: i) * (self at: j)) ]].</span>
<span class="com">   ^atv ! !</span>
<span class="com"></span>
<span class="com">!Core.Array methodsFor: 'computer language shootout'!</span>
<span class="com"></span>
<span class="com">multiplyAtAv</span>
<span class="com">   ^(self multiplyAv) multiplyAtv ! !</span>
