<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># Contributed by Sokolov Yura</span>

<span class="kwa">def</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n)
   maxFlips<span class="sym">,</span> m<span class="sym">,</span> r<span class="sym">,</span> check = <span class="num">0</span><span class="sym">,</span> n-1<span class="sym">,</span> n<span class="sym">,</span> <span class="num">0</span>
   count = <span class="sym">(</span><span class="num">1</span><span class="sym">..</span>n)<span class="sym">.</span>to_a
   perm = <span class="sym">(</span><span class="num">1</span><span class="sym">..</span>n)<span class="sym">.</span>to_a

   <span class="kwa">while true</span>
      <span class="kwa">if</span> check <span class="sym">&lt;</span> <span class="num">30</span>
         puts <span class="str">&quot;#{perm}&quot;</span>
         check <span class="sym">+</span>= <span class="num">1</span>
      <span class="kwa">end</span>

      <span class="kwa">while</span> r <span class="sym">!</span>= <span class="num">1</span><span class="sym">:</span>
         count<span class="sym">[</span>r-1<span class="sym">]</span> = r
         r <span class="sym">-</span>= <span class="num">1</span>
      <span class="kwa">end</span>

      <span class="kwa">if</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">] !</span>= <span class="num">1</span> <span class="kwa">and</span> perm<span class="sym">[</span>m<span class="sym">] !</span>= n
         perml = perm<span class="sym">.</span>dup
         flips = <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>k = perml<span class="sym">.</span>first ) <span class="sym">!</span>= <span class="num">1</span>
            perml<span class="sym">[</span><span class="num">0</span><span class="sym">...</span>k<span class="sym">]</span> = perml<span class="sym">[</span><span class="num">0</span><span class="sym">...</span>k<span class="sym">].</span>reverse<span class="sym">!</span>
            flips <span class="sym">+</span>= <span class="num">1</span>
         <span class="kwa">end</span>
         maxFlips = flips <span class="kwa">if</span> flips <span class="sym">&gt;</span> maxFlips
      <span class="kwa">end</span>
      <span class="kwa">while true</span>
         <span class="kwa">if</span> r==n <span class="sym">:</span> <span class="kwa">return</span> maxFlips <span class="kwa">end</span>
         perm<span class="sym">.</span>insert r<span class="sym">,</span>perm<span class="sym">.</span>shift
         <span class="kwa">break if</span> <span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">] -</span>= <span class="num">1</span>) <span class="sym">&gt;</span> <span class="num">0</span>
         r <span class="sym">+</span>= <span class="num">1</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>
<span class="kwa">end</span>

N = <span class="sym">(</span><span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">1</span>)<span class="sym">.</span>to_i
puts <span class="str">&quot;Pfannkuchen(#{N})</span> = <span class="slc">#{fannkuch(N)}&quot;</span>
