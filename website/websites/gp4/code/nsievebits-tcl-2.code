<span class="slc">#!/usr/bin/tclsh</span>
<span class="slc"># $Id: nsievebits-tcl-2.code,v 1.16 2005-11-05 21:54:17 igouy-guest Exp $</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># Contributed by Hemang Lavana</span>

<span class="kwa">proc</span> nsieve <span class="sym">{</span>m<span class="sym">} {</span>
    <span class="kwa">set</span> NBITS <span class="sym">[</span><span class="kwa">set</span> CHAR_BIT <span class="num">8</span><span class="sym">]</span>

    <span class="kwa">set</span> init_val <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> <span class="kwb">$CHAR_BIT</span><span class="sym">) -</span> <span class="num">1</span><span class="sym">}]</span>
    <span class="kwa">set</span> max <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$m</span> <span class="sym">/</span> <span class="kwb">$NBITS</span><span class="sym">}]</span>
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$max</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span><span class="kwa">lappend</span> data <span class="kwb">$init_val</span><span class="sym">}</span>

    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> count <span class="num">0</span><span class="sym">;</span> <span class="kwa">set</span> i <span class="num">2</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$m</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	<span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">lindex</span> <span class="kwb">$data</span> <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$i</span> <span class="sym">/</span> <span class="kwb">$NBITS</span><span class="sym">}]] &amp; (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> <span class="kwb">$i</span> <span class="sym">%</span> <span class="kwb">$NBITS</span><span class="sym">)} {</span>
            <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> j <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$i</span> <span class="sym">+</span> <span class="kwb">$i</span><span class="sym">}]} {</span><span class="kwb">$j</span> <span class="sym">&lt;</span> <span class="kwb">$m</span><span class="sym">} {</span><span class="kwa">incr</span> j <span class="kwb">$i</span><span class="sym">} {</span>
                <span class="kwa">set</span> j_idx <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$j</span> <span class="sym">/</span> <span class="kwb">$NBITS</span><span class="sym">}]</span>
	        <span class="kwa">lset</span> data <span class="kwb">$j_idx</span> <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{[</span><span class="kwa">lindex</span> <span class="kwb">$data $j_idx</span><span class="sym">] &amp;</span> ~<span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> <span class="kwb">$j</span> <span class="sym">%</span> <span class="kwb">$NBITS</span><span class="sym">)}]</span>
            <span class="sym">}</span>
	    <span class="kwa">incr</span> count
        <span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="kwb">$count</span>
<span class="sym">}</span>

<span class="kwa">proc</span> main <span class="sym">{</span>n<span class="sym">} {</span>

    <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">llength</span> <span class="kwb">$n</span><span class="sym">] &gt;</span> <span class="num">1</span> <span class="sym">||</span> <span class="kwb">$n</span> <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">} {</span>
        <span class="kwa">puts</span> stderr <span class="str">&quot;usage: [file tail $::argv0] N ;#N &gt;= 2, specified value of N = $n&quot;</span>
        <span class="kwa">exit</span> <span class="num">2</span>
    <span class="sym">}</span>
    <span class="kwa">foreach</span> value <span class="sym">[</span><span class="kwa">list</span> <span class="kwb">$n</span> <span class="sym">[</span><span class="kwa">incr</span> n <span class="sym">-</span><span class="num">1</span><span class="sym">] [</span><span class="kwa">incr</span> n <span class="sym">-</span><span class="num">1</span><span class="sym">]] {</span>
        <span class="kwa">set</span> m <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> <span class="kwb">$value</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">}]</span>
        <span class="kwa">set</span> count <span class="sym">[</span>nsieve <span class="kwb">$m</span><span class="sym">]</span>
        <span class="kwa">puts</span> <span class="sym">[</span><span class="kwa">format</span> <span class="str">&quot;Primes up to %8u %8u&quot;</span> <span class="kwb">$m $count</span><span class="sym">]</span>
    <span class="sym">}</span>
<span class="sym">}</span>
main <span class="kwb">$argv</span>
