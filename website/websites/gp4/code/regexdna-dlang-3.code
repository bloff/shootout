<span class="hl com">/*</span>
<span class="hl com">** The Computer Language Shootout</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">** contributed by Mike Pall</span>
<span class="hl com">** converted to D by Dave Fladebo</span>
<span class="hl com">**</span>
<span class="hl com">** regex-dna benchmark using PCRE</span>
<span class="hl com">**</span>
<span class="hl com">** compile with:</span>
<span class="hl com">**   dmd -O -inline -release -L-lpcre regexdna3.d</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>cstream<span class="hl sym">,</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>string<span class="hl sym">,</span> std<span class="hl sym">.</span>c<span class="hl sym">.</span>stdlib<span class="hl sym">;</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[][]</span> args<span class="hl sym">)</span>
<span class="hl sym">{</span>
  <span class="hl kwa">char</span><span class="hl sym">[][</span><span class="hl num">2</span><span class="hl sym">]</span> seq<span class="hl sym">;</span>
  size_t idx<span class="hl sym">,</span> ilen<span class="hl sym">,</span> clen<span class="hl sym">,</span> slen<span class="hl sym">;</span>
  <span class="hl kwa">int</span> n<span class="hl sym">,</span> flip<span class="hl sym">;</span>

  <span class="hl kwa">char</span><span class="hl sym">[</span><span class="hl num">4096</span><span class="hl sym">]</span> cbuf<span class="hl sym">;</span>
  <span class="hl kwa">while</span><span class="hl sym">((</span>n <span class="hl sym">=</span> din<span class="hl sym">.</span><span class="hl kwd">readBlock</span><span class="hl sym">(</span>cbuf<span class="hl sym">.</span>ptr<span class="hl sym">,</span> cbuf<span class="hl sym">.</span>length<span class="hl sym">)) &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl sym">{</span>
    seq<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ~=</span> cbuf<span class="hl sym">[</span><span class="hl num">0</span> <span class="hl sym">..</span> n<span class="hl sym">];</span>
    ilen <span class="hl sym">+=</span> n<span class="hl sym">;</span>
  <span class="hl sym">}</span>

  clen <span class="hl sym">=</span> <span class="hl kwd">fb_subst</span><span class="hl sym">(</span>seq<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> seq<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span> <span class="hl str">&quot;&gt;.*|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>

  <span class="hl kwa">foreach</span> <span class="hl sym">(</span>variant<span class="hl sym">;</span> variants<span class="hl sym">)</span>
  <span class="hl sym">{</span>
    <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;%s %d&quot;</span><span class="hl sym">,</span> variant<span class="hl sym">,</span> <span class="hl kwd">fb_countmatches</span><span class="hl sym">(</span>seq<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> variant<span class="hl sym">));</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">for</span> <span class="hl sym">(</span>slen <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> flip <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> idx <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> idx <span class="hl sym">&lt;</span> subst<span class="hl sym">.</span>length<span class="hl sym">;</span> idx <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">,</span> flip <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">-</span> flip<span class="hl sym">)</span>
  <span class="hl sym">{</span>
    slen <span class="hl sym">=</span> <span class="hl kwd">fb_subst</span><span class="hl sym">(</span>seq<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">-</span>flip<span class="hl sym">],</span> seq<span class="hl sym">[</span>flip<span class="hl sym">],</span> subst<span class="hl sym">[</span>idx<span class="hl sym">],</span> subst<span class="hl sym">[</span>idx<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">]);</span>
  <span class="hl sym">}</span>

  <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d&quot;</span><span class="hl sym">,</span> ilen<span class="hl sym">,</span> clen<span class="hl sym">,</span> slen<span class="hl sym">);</span>

  <span class="hl kwa">return</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl com">/* Substitute pattern p with replacement r, copying from src to dst string. */</span>
size_t <span class="hl kwd">fb_subst</span><span class="hl sym">(</span><span class="hl kwa">inout char</span><span class="hl sym">[]</span> dst<span class="hl sym">,</span> <span class="hl kwa">char</span><span class="hl sym">[]</span> src<span class="hl sym">,</span> <span class="hl kwa">char</span><span class="hl sym">[]</span> p<span class="hl sym">,</span> <span class="hl kwa">char</span><span class="hl sym">[]</span> r<span class="hl sym">)</span>
<span class="hl sym">{</span>
  pcre<span class="hl sym">*</span>       re<span class="hl sym">;</span>
  pcre_extra<span class="hl sym">*</span> re_ex<span class="hl sym">;</span>
  <span class="hl kwa">char</span><span class="hl sym">*</span>       re_e<span class="hl sym">;</span>
  <span class="hl kwa">char</span><span class="hl sym">*</span>       dp<span class="hl sym">;</span>
  <span class="hl kwa">int</span>         re_eo<span class="hl sym">,</span> pos<span class="hl sym">;</span>
  <span class="hl kwa">int</span><span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">]</span>      m<span class="hl sym">;</span>
  size_t      clen<span class="hl sym">,</span> need<span class="hl sym">,</span> dlen<span class="hl sym">;</span>

  <span class="hl kwa">if</span> <span class="hl sym">((</span>re <span class="hl sym">=</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span><span class="hl kwd">toStringz</span><span class="hl sym">(</span>p<span class="hl sym">),</span> PCRE_FLAGS<span class="hl sym">, &amp;</span>re_e<span class="hl sym">, &amp;</span>re_eo<span class="hl sym">,</span> <span class="hl kwa">null</span><span class="hl sym">))</span> <span class="hl kwa">is null</span><span class="hl sym">)</span> <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
  re_ex <span class="hl sym">=</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span>re<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &amp;</span>re_e<span class="hl sym">);</span>

  <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>re<span class="hl sym">,</span> re_ex<span class="hl sym">,</span> src<span class="hl sym">.</span>ptr<span class="hl sym">,</span> src<span class="hl sym">.</span>length<span class="hl sym">,</span> pos<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> m<span class="hl sym">.</span>ptr<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">) &gt;=</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl sym">{</span>
    clen <span class="hl sym">=</span> m<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] -</span> pos<span class="hl sym">;</span>
    need <span class="hl sym">=</span> dlen <span class="hl sym">+</span> clen <span class="hl sym">+</span> r<span class="hl sym">.</span>length<span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>dst<span class="hl sym">.</span>length <span class="hl sym">&lt;</span> need<span class="hl sym">)</span> dst<span class="hl sym">.</span>length <span class="hl sym">=</span> need <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">;</span>
    dst<span class="hl sym">[</span>dlen <span class="hl sym">..</span> dlen <span class="hl sym">+</span> clen<span class="hl sym">] =</span> src<span class="hl sym">[</span>pos <span class="hl sym">..</span> pos <span class="hl sym">+</span> clen<span class="hl sym">];</span>
    dst<span class="hl sym">[</span>dlen <span class="hl sym">+</span> clen <span class="hl sym">..</span> dlen <span class="hl sym">+</span> clen <span class="hl sym">+</span> r<span class="hl sym">.</span>length<span class="hl sym">] =</span> r<span class="hl sym">;</span>
    dlen <span class="hl sym">+=</span> clen <span class="hl sym">+</span> r<span class="hl sym">.</span>length<span class="hl sym">;</span>
    pos <span class="hl sym">=</span> m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
  <span class="hl sym">}</span>
  clen <span class="hl sym">=</span> src<span class="hl sym">.</span>length <span class="hl sym">-</span> pos<span class="hl sym">;</span>
  <span class="hl kwa">if</span><span class="hl sym">(</span>dst<span class="hl sym">.</span>length <span class="hl sym">&lt;</span> dlen <span class="hl sym">+</span> clen<span class="hl sym">)</span> dst<span class="hl sym">.</span>length <span class="hl sym">=</span> dlen <span class="hl sym">+</span> clen<span class="hl sym">;</span>
  dst<span class="hl sym">[</span>dlen <span class="hl sym">..</span> dlen <span class="hl sym">+</span> clen<span class="hl sym">] =</span> src<span class="hl sym">[</span>pos <span class="hl sym">..</span> pos <span class="hl sym">+</span> clen<span class="hl sym">];</span>

  <span class="hl kwa">return</span> dst<span class="hl sym">.</span>length <span class="hl sym">=</span> dlen <span class="hl sym">+</span> clen<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl com">/* Count all matches with pattern p in src string. */</span>
<span class="hl kwa">int</span> <span class="hl kwd">fb_countmatches</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[]</span> src<span class="hl sym">,</span> <span class="hl kwa">char</span><span class="hl sym">[]</span> p<span class="hl sym">)</span>
<span class="hl sym">{</span>
  pcre<span class="hl sym">*</span> re<span class="hl sym">;</span>
  pcre_extra<span class="hl sym">*</span> re_ex<span class="hl sym">;</span>
  <span class="hl kwa">char</span><span class="hl sym">*</span> re_e<span class="hl sym">;</span>
  <span class="hl kwa">int</span> re_eo<span class="hl sym">,</span> pos<span class="hl sym">,</span> count<span class="hl sym">;</span>
  <span class="hl kwa">int</span><span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">]</span> m<span class="hl sym">;</span>

  <span class="hl kwa">if</span> <span class="hl sym">((</span>re <span class="hl sym">=</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span><span class="hl kwd">toStringz</span><span class="hl sym">(</span>p<span class="hl sym">),</span> PCRE_FLAGS<span class="hl sym">, &amp;</span>re_e<span class="hl sym">, &amp;</span>re_eo<span class="hl sym">,</span> <span class="hl kwa">null</span><span class="hl sym">))</span> <span class="hl kwa">is null</span><span class="hl sym">)</span> <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
  re_ex <span class="hl sym">=</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span>re<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &amp;</span>re_e<span class="hl sym">);</span>

  <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>re<span class="hl sym">,</span> re_ex<span class="hl sym">,</span> src<span class="hl sym">.</span>ptr<span class="hl sym">,</span> src<span class="hl sym">.</span>length<span class="hl sym">,</span> pos<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> m<span class="hl sym">.</span>ptr<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">) &gt;=</span> <span class="hl num">0</span><span class="hl sym">)</span>
  <span class="hl sym">{</span>
       pos <span class="hl sym">=</span> m<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
       count<span class="hl sym">++;</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">return</span> count<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">extern</span> <span class="hl sym">(</span>C<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">struct</span> pcre<span class="hl sym">;</span>
    pcre<span class="hl sym">*</span> <span class="hl kwd">pcre_compile</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">*,</span> <span class="hl kwa">int</span><span class="hl sym">,</span> <span class="hl kwa">char</span><span class="hl sym">**,</span> <span class="hl kwa">int</span><span class="hl sym">*,</span> <span class="hl kwa">ubyte</span><span class="hl sym">*);</span>
    pcre_extra<span class="hl sym">*</span> <span class="hl kwd">pcre_study</span><span class="hl sym">(</span>pcre<span class="hl sym">*,</span> <span class="hl kwa">int</span><span class="hl sym">,</span><span class="hl kwa">char</span><span class="hl sym">**);</span>
    <span class="hl kwa">int</span> <span class="hl kwd">pcre_exec</span><span class="hl sym">(</span>pcre<span class="hl sym">*,</span> pcre_extra<span class="hl sym">*,</span> <span class="hl kwa">char</span><span class="hl sym">*,</span> <span class="hl kwa">int</span><span class="hl sym">,</span> <span class="hl kwa">int</span><span class="hl sym">,</span> <span class="hl kwa">int</span><span class="hl sym">,</span> <span class="hl kwa">int</span><span class="hl sym">*,</span> <span class="hl kwa">int</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">const</span> PCRE_FLAGS <span class="hl sym">=</span> <span class="hl num">0x00000000</span><span class="hl sym">;</span>

<span class="hl kwa">struct</span> pcre_extra
<span class="hl sym">{</span>
  <span class="hl kwa">ulong</span> flags<span class="hl sym">;</span>
  <span class="hl kwa">void</span> <span class="hl sym">*</span>study_data<span class="hl sym">;</span>
  <span class="hl kwa">ulong</span> match_limit<span class="hl sym">;</span>
  <span class="hl kwa">void</span> <span class="hl sym">*</span>callout_data<span class="hl sym">;</span>
  <span class="hl kwa">ubyte</span><span class="hl sym">*</span> tables<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">const char</span><span class="hl sym">[][]</span> variants <span class="hl sym">=</span>
<span class="hl sym">[</span>
  <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>         <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
<span class="hl sym">];</span>

<span class="hl kwa">const char</span><span class="hl sym">[][]</span> subst <span class="hl sym">=</span>
<span class="hl sym">[</span>
  <span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">,</span>   <span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">,</span>   <span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">,</span>   <span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">,</span>
  <span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">,</span>     <span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span>
<span class="hl sym">];</span>
