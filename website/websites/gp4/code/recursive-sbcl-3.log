BUILD COMMANDS FOR: recursive.sbcl-3.sbcl

Sat Jun  2 18:04:36 PDT 2007

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "recursive.sbcl-3.sbcl_compile")'
### START recursive.sbcl-3.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "recursive.sbcl-3.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END recursive.sbcl-3.sbcl_compile


; compiling file "/home/dunham/gp4/shootout/bench/recursive/tmp/recursive.sbcl-3.sbcl" (written 02 JUN 2007 06:04:36 PM):
; compiling (DEFUN FIB ...)
; compiling (DEFUN FIB-D ...)
; file: /home/dunham/gp4/shootout/bench/recursive/tmp/recursive.sbcl-3.sbcl
; in: DEFUN FIB-D
;     FIB-NOBOX
; 
; note: *INLINE-EXPANSION-LIMIT* (200) was exceeded, probably trying to
;   inline a recursive function.

;     COERCE
; --> THE 
; ==>
;   (SB-KERNEL:%DOUBLE-FLOAT SB-C::X)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: forced to do full call
;       unable to do inline float coercion (cost 2) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       unable to do inline float coercion (cost 5) because:
;       The first argument is a REAL, not a (SIGNED-BYTE 32).
;       etc.

;     DEFUN
; --> PROGN EVAL-WHEN 
; ==>
;   (SB-IMPL::%DEFUN 'FIB-D
;                    (SB-INT:NAMED-LAMBDA FIB-D (N)
;                                         (BLOCK FIB-D
;                                           (LABELS (#)
;                                             (DECLARE #)
;                                             (FIB-NOBOX #))))
;                    NIL 'NIL (SB-C:SOURCE-LOCATION))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; compiling (DEFUN ACK ...)
; compiling (DEFUN TAK ...)
; compiling (DEFUN TAK-D ...)
; file: /home/dunham/gp4/shootout/bench/recursive/tmp/recursive.sbcl-3.sbcl
; in: DEFUN TAK-D
;     DEFUN
; --> PROGN EVAL-WHEN 
; ==>
;   (SB-IMPL::%DEFUN 'TAK-D
;                    (SB-INT:NAMED-LAMBDA TAK-D (X Y Z)
;                                         (DECLARE (DOUBLE-FLOAT X Y Z))
;                                         (BLOCK TAK-D
;                                           (THE DOUBLE-FLOAT (IF # # Z))))
;                    NIL 'NIL (SB-C:SOURCE-LOCATION))
; 
; note: doing float to pointer coercion (cost 13) from Z to "<return value>"

; compiling (DEFUN MAIN ...)
; file: /home/dunham/gp4/shootout/bench/recursive/tmp/recursive.sbcl-3.sbcl
; in: DEFUN MAIN
;     *
; ==>
;   (* SB-C::Y 3)
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a (INTEGER -536870912 536870910), not a (UNSIGNED-BYTE
;                                                                  32).
;   The result is a (VALUES (INTEGER -1610612736 1610612730)
;                           &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32) &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The result is a (VALUES (INTEGER -1610612736 1610612730)
;                           &OPTIONAL), not a (VALUES FIXNUM &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a (INTEGER -536870912 536870910), not a (UNSIGNED-BYTE
;                                                                  32).
;   The result is a (VALUES (INTEGER -1610612736 1610612730)
;                           &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32) &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The result is a (VALUES (INTEGER -1610612736 1610612730)
;                           &OPTIONAL), not a (VALUES FIXNUM &REST T).

;     FIB-D
; 
; note: doing float to pointer coercion (cost 13)

;     FORMAT
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-43 #:G597 #:G598 #:G599 #:G600
;                            #:G601 NIL)
; 
; note: doing float to pointer coercion (cost 13)

; --> FORMAT FORMATTER FUNCTION BLOCK 
; ==>
;   (PRINC #:FORMAT-ARG-62 STREAM)
; 
; note: doing signed word to integer coercion (cost 20)

; ==>
;   (PRINC #:FORMAT-ARG-63 STREAM)
; 
; note: doing signed word to integer coercion (cost 20)
; 
; compilation unit finished
;   printed 13 notes


; /home/dunham/gp4/shootout/bench/recursive/tmp/recursive.sbcl-3.fasl written
; compilation finished in 0:00:03
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /home/dunham/gp4/shootout/bench/recursive/tmp/sbcl.core:
writing 1912 bytes from the read-only space at 0x01000000
writing 2096 bytes from the static space at 0x01100000
writing 28475392 bytes from the dynamic space at 0x09000000
done]
### START recursive.sbcl-3.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END recursive.sbcl-3.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load recursive.sbcl-3.sbcl_run %A


PROGRAM OUTPUT
==============
Ack(3,11): 16381
Fib(38.0): 63245986.0
Tak(30,20,10): 11
Fib(3): 3
Tak(3.0,2.0,1.0): 2.0
