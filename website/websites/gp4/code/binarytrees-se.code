<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- binarytrees for smarteiffel by jose</span>

<span class="slc">--SPLITFILE=tree.e</span>

<span class="kwa">deferred class</span> TREE <span class="kwa">feature</span>
	test<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is deferred end</span>
<span class="kwa">end</span>

<span class="slc">--SPLITFILE=node.e</span>

<span class="kwa">class</span> NODE <span class="kwa">inherit</span> TREE creation make <span class="kwa">feature</span>
	value<span class="sym">:</span> <span class="kwb">INTEGER</span>
	left<span class="sym">,</span> right<span class="sym">:</span> TREE
	test<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is do Result</span><span class="sym">:=</span>value<span class="sym">+</span>left.test<span class="sym">-</span>right.test <span class="kwa">end</span>
	<span class="kwd">make</span> <span class="sym">(</span>val<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> lef<span class="sym">,</span> rig<span class="sym">:</span> TREE<span class="sym">)</span> <span class="kwa">is do</span>
		value<span class="sym">:=</span>val  left<span class="sym">:=</span>lef  right<span class="sym">:=</span>rig <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">--SPLITFILE=sheet.e</span>

<span class="kwa">class</span> SHEET <span class="kwa">inherit</span> TREE <span class="kwa">rename</span> test <span class="kwa">as</span> value <span class="kwa">end</span> creation make <span class="kwa">feature</span>
	value<span class="sym">:</span> <span class="kwb">INTEGER</span>
	<span class="kwd">make</span> <span class="sym">(</span>val<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is do</span> value<span class="sym">:=</span>val <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">--SPLITFILE=binarytrees.e</span>

<span class="kwa">class</span> BINARYTREES creation make <span class="kwa">feature</span>
	min_depth<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">4</span>
	max_depth<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is do</span>
		<span class="kwa">if</span> argument_count<span class="sym">&gt;=</span><span class="num">1</span> <span class="kwa">and then</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer <span class="kwa">then</span>
			<span class="kwa">Result</span><span class="sym">:=</span><span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer <span class="kwa">end</span>
		<span class="kwa">Result</span><span class="sym">:=</span><span class="kwa">Result</span>.<span class="kwd">max</span><span class="sym">(</span>min_depth<span class="sym">+</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">end</span>
	stretch_depth<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is do Result</span><span class="sym">:=</span>max_depth<span class="sym">+</span><span class="num">1</span> <span class="kwa">end</span>
	make <span class="kwa">is local</span> long_lived_tree<span class="sym">:</span>TREE depth<span class="sym">,</span>iterations<span class="sym">,</span>i<span class="sym">,</span>c<span class="sym">:</span><span class="kwb">INTEGER</span> <span class="kwa">do</span>
		<span class="kwd">print</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">+</span>stretch_depth.out<span class="sym">+</span><span class="str">&quot;%T check: &quot;</span><span class="sym">+</span>
			<span class="kwd">maketree</span><span class="sym">(</span>stretch_depth<span class="sym">,</span><span class="num">0</span><span class="sym">)</span>.test.out<span class="sym">+</span><span class="str">&quot;%N&quot;</span><span class="sym">)</span>
		long_lived_tree<span class="sym">:=</span><span class="kwd">maketree</span><span class="sym">(</span>max_depth<span class="sym">,</span><span class="num">0</span><span class="sym">)</span>
		<span class="kwa">from</span> depth<span class="sym">:=</span>min_depth until depth<span class="sym">&gt;</span>max_depth <span class="kwa">loop</span>
			iterations<span class="sym">:={</span><span class="kwb">INTEGER</span> <span class="num">1</span><span class="sym">}|&lt;&lt;(</span>max_depth<span class="sym">-</span>depth<span class="sym">+</span>min_depth<span class="sym">)</span>.to_integer_8
			<span class="kwa">from</span> i<span class="sym">:=</span><span class="num">0</span> c<span class="sym">:=</span><span class="num">0</span> until i<span class="sym">&gt;=</span>iterations <span class="kwa">loop</span>
				c<span class="sym">:=</span>c<span class="sym">+</span><span class="kwd">maketree</span><span class="sym">(</span>depth<span class="sym">,</span>i<span class="sym">)</span>.test<span class="sym">+</span>
					<span class="kwd">maketree</span><span class="sym">(</span>depth<span class="sym">,-</span>i<span class="sym">)</span>.test
				i<span class="sym">:=</span>i<span class="sym">+</span><span class="num">1</span> <span class="kwa">end</span>
			<span class="kwd">print</span><span class="sym">((</span><span class="num">2</span><span class="sym">*</span>iterations<span class="sym">)</span>.out<span class="sym">+</span><span class="str">&quot;%T trees of depth &quot;</span><span class="sym">+</span>
				depth.out<span class="sym">+</span><span class="str">&quot;%T check: &quot;</span><span class="sym">+</span>c.out<span class="sym">+</span><span class="str">&quot;%N&quot;</span><span class="sym">)</span>
			depth<span class="sym">:=</span>depth<span class="sym">+</span><span class="num">2</span> <span class="kwa">end</span>
		<span class="kwd">print</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">+</span>max_depth.out<span class="sym">+</span><span class="str">&quot;%T check: &quot;</span><span class="sym">+</span>
			long_lived_tree.test.out<span class="sym">+</span><span class="str">&quot;%N&quot;</span><span class="sym">)</span>
		<span class="kwa">end</span>
	<span class="kwd">maketree</span> <span class="sym">(</span>depth<span class="sym">,</span>item<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">):</span> TREE <span class="kwa">is local</span> d<span class="sym">,</span>i<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">do</span>
		<span class="kwa">if</span> depth<span class="sym">=</span><span class="num">0</span> <span class="kwa">then</span>
			<span class="kwa">create</span> <span class="sym">{</span>SHEET<span class="sym">}</span> <span class="kwa">Result</span>.<span class="kwd">make</span><span class="sym">(</span>item<span class="sym">)</span>
		<span class="kwa">else</span>
			d<span class="sym">:=</span>depth<span class="sym">-</span><span class="num">1</span>  i<span class="sym">:=</span><span class="num">2</span><span class="sym">*</span>item
			<span class="kwa">create</span> <span class="sym">{</span>NODE<span class="sym">}</span> <span class="kwa">Result</span>.<span class="kwd">make</span><span class="sym">(</span>item<span class="sym">,</span><span class="kwd">maketree</span><span class="sym">(</span>d<span class="sym">,</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">),</span>
				<span class="kwd">maketree</span><span class="sym">(</span>d<span class="sym">,</span>i<span class="sym">))</span>
		<span class="kwa">end end</span>
<span class="kwa">end</span>

