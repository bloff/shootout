<span class="hl slc">-- The Great Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- binarytree for smarteiffel by jose</span>

<span class="hl slc">--SPLITFILE=tree.e</span>

<span class="hl kwa">deferred class</span> TREE <span class="hl kwa">feature</span>
   test<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">is deferred end</span>
<span class="hl kwa">end</span>

<span class="hl slc">--SPLITFILE=node.e</span>

<span class="hl kwa">class</span> NODE <span class="hl kwa">inherit</span> TREE creation make <span class="hl kwa">feature</span>
   value<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span>
   left<span class="hl sym">,</span> right<span class="hl sym">:</span> TREE
   test<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">is do Result</span><span class="hl sym">:=</span>value<span class="hl sym">+</span>left.test<span class="hl sym">-</span>right.test <span class="hl kwa">end</span>
   <span class="hl kwd">make</span> <span class="hl sym">(</span>val<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span><span class="hl sym">;</span> lef<span class="hl sym">,</span> rig<span class="hl sym">:</span> TREE<span class="hl sym">)</span> <span class="hl kwa">is do</span>
      value<span class="hl sym">:=</span>val  left<span class="hl sym">:=</span>lef  right<span class="hl sym">:=</span>rig <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl slc">--SPLITFILE=sheet.e</span>

<span class="hl kwa">class</span> SHEET <span class="hl kwa">inherit</span> TREE <span class="hl kwa">rename</span> test <span class="hl kwa">as</span> value <span class="hl kwa">end</span> creation make <span class="hl kwa">feature</span>
   value<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span>
   <span class="hl kwd">make</span> <span class="hl sym">(</span>val<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span><span class="hl sym">)</span> <span class="hl kwa">is do</span> value<span class="hl sym">:=</span>val <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl slc">--SPLITFILE=binarytrees.e</span>

<span class="hl kwa">class</span> BINARYTREES insert ARGUMENTS creation make <span class="hl kwa">feature</span>
   min_depth<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">is</span> <span class="hl num">4</span>
   max_depth<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">is do</span>
      <span class="hl kwa">if</span> argument_count<span class="hl sym">&gt;=</span><span class="hl num">1</span> <span class="hl kwa">and then</span> <span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>.is_integer <span class="hl kwa">then</span>
         <span class="hl kwa">Result</span><span class="hl sym">:=</span><span class="hl kwd">argument</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>.to_integer <span class="hl kwa">end</span>
      <span class="hl kwa">Result</span><span class="hl sym">:=</span><span class="hl kwa">Result</span>.<span class="hl kwd">max</span><span class="hl sym">(</span>min_depth<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwa">end</span>
   stretch_depth<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">is do Result</span><span class="hl sym">:=</span>max_depth<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl kwa">end</span>
   make <span class="hl kwa">is local</span> long_lived_tree<span class="hl sym">:</span>TREE depth<span class="hl sym">,</span>iterations<span class="hl sym">,</span>i<span class="hl sym">,</span>c<span class="hl sym">:</span><span class="hl kwb">INTEGER</span> <span class="hl kwa">do</span>
      <span class="hl kwd">print</span><span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl sym">+</span>stretch_depth.out<span class="hl sym">+</span><span class="hl str">&quot;%T check: &quot;</span><span class="hl sym">+</span>
         <span class="hl kwd">maketree</span><span class="hl sym">(</span>stretch_depth<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">)</span>.test.out<span class="hl sym">+</span><span class="hl str">&quot;%N&quot;</span><span class="hl sym">)</span>
      long_lived_tree<span class="hl sym">:=</span><span class="hl kwd">maketree</span><span class="hl sym">(</span>max_depth<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">from</span> depth<span class="hl sym">:=</span>min_depth until depth<span class="hl sym">&gt;</span>max_depth <span class="hl kwa">loop</span>
         iterations<span class="hl sym">:={</span><span class="hl kwb">INTEGER</span> <span class="hl num">1</span><span class="hl sym">}|&lt;&lt;(</span>max_depth<span class="hl sym">-</span>depth<span class="hl sym">+</span>min_depth<span class="hl sym">)</span>.to_integer_8
         <span class="hl kwa">from</span> i<span class="hl sym">:=</span><span class="hl num">0</span> c<span class="hl sym">:=</span><span class="hl num">0</span> until i<span class="hl sym">&gt;=</span>iterations <span class="hl kwa">loop</span>
            c<span class="hl sym">:=</span>c<span class="hl sym">+</span><span class="hl kwd">maketree</span><span class="hl sym">(</span>depth<span class="hl sym">,</span>i<span class="hl sym">)</span>.test<span class="hl sym">+</span>
               <span class="hl kwd">maketree</span><span class="hl sym">(</span>depth<span class="hl sym">,-</span>i<span class="hl sym">)</span>.test
            i<span class="hl sym">:=</span>i<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl kwa">end</span>
         <span class="hl kwd">print</span><span class="hl sym">((</span><span class="hl num">2</span><span class="hl sym">*</span>iterations<span class="hl sym">)</span>.out<span class="hl sym">+</span><span class="hl str">&quot;%T trees of depth &quot;</span><span class="hl sym">+</span>
            depth.out<span class="hl sym">+</span><span class="hl str">&quot;%T check: &quot;</span><span class="hl sym">+</span>c.out<span class="hl sym">+</span><span class="hl str">&quot;%N&quot;</span><span class="hl sym">)</span>
         depth<span class="hl sym">:=</span>depth<span class="hl sym">+</span><span class="hl num">2</span> <span class="hl kwa">end</span>
      <span class="hl kwd">print</span><span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth &quot;</span><span class="hl sym">+</span>max_depth.out<span class="hl sym">+</span><span class="hl str">&quot;%T check: &quot;</span><span class="hl sym">+</span>
         long_lived_tree.test.out<span class="hl sym">+</span><span class="hl str">&quot;%N&quot;</span><span class="hl sym">)</span>
      <span class="hl kwa">end</span>
   <span class="hl kwd">maketree</span> <span class="hl sym">(</span>depth<span class="hl sym">,</span>item<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span><span class="hl sym">):</span> TREE <span class="hl kwa">is local</span> d<span class="hl sym">,</span>i<span class="hl sym">:</span> <span class="hl kwb">INTEGER</span> <span class="hl kwa">do</span>
      <span class="hl kwa">if</span> depth<span class="hl sym">=</span><span class="hl num">0</span> <span class="hl kwa">then</span>
         <span class="hl kwa">create</span> <span class="hl sym">{</span>SHEET<span class="hl sym">}</span> <span class="hl kwa">Result</span>.<span class="hl kwd">make</span><span class="hl sym">(</span>item<span class="hl sym">)</span>
      <span class="hl kwa">else</span>
         d<span class="hl sym">:=</span>depth<span class="hl sym">-</span><span class="hl num">1</span>  i<span class="hl sym">:=</span><span class="hl num">2</span><span class="hl sym">*</span>item
         <span class="hl kwa">create</span> <span class="hl sym">{</span>NODE<span class="hl sym">}</span> <span class="hl kwa">Result</span>.<span class="hl kwd">make</span><span class="hl sym">(</span>item<span class="hl sym">,</span><span class="hl kwd">maketree</span><span class="hl sym">(</span>d<span class="hl sym">,</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">),</span>
            <span class="hl kwd">maketree</span><span class="hl sym">(</span>d<span class="hl sym">,</span>i<span class="hl sym">))</span>
      <span class="hl kwa">end end</span>
<span class="hl kwa">end</span>

