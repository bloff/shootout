<span class="sym">/*</span>
 <span class="sym">*</span>   Contributed by Diederik van Arkel
 <span class="sym">*/</span>
<span class="kwa">module</span> nsieve

<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

Start world
	# n				<span class="sym">=</span> argi
	# <span class="sym">(</span>io<span class="sym">,</span>world<span class="sym">)	=</span> stdio world
	# io			<span class="sym">=</span> sieve n io
	# io			<span class="sym">=</span> sieve <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> io
	# io			<span class="sym">=</span> sieve <span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)</span> io
	# <span class="sym">(</span>err<span class="sym">,</span>world<span class="sym">)	=</span> fclose io world
	<span class="sym">=</span> world

sieve n io
	# m		<span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) *</span> <span class="num">10000</span>
	  arr	<span class="sym">=</span> createArray <span class="sym">(</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">True</span>
	  c		<span class="sym">=</span> loop arr m <span class="num">2 0</span>
	<span class="sym">=</span> io <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot;Primes up to &quot;</span> <span class="sym">&lt;&lt;&lt;</span> fmt <span class="num">8</span> m <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;&lt;</span> fmt <span class="num">8</span> c <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot;\n&quot;</span>

fmt width i
	# is	<span class="sym">=</span> toString i
	<span class="sym">=</span> toString <span class="sym">(</span>repeatn <span class="sym">(</span>width <span class="sym">-</span> size is<span class="sym">)</span> <span class="str">' '</span><span class="sym">) +++</span> is

loop <span class="sym">:: !*</span>{#<span class="kwb">Bool</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span>
loop arr m n c
	<span class="sym">|</span> n <span class="sym">==</span> m
		<span class="sym">=</span> c
	# el	<span class="sym">=</span> arr.<span class="sym">[</span>n<span class="sym">]</span>
	<span class="sym">|</span> el
		# arr	<span class="sym">=</span> update` arr <span class="sym">(</span>n<span class="sym">+</span>n<span class="sym">)</span>
		<span class="sym">=</span> loop arr m <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
	<span class="sym">=</span> loop arr m <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> c
<span class="kwa">where</span>
	update` <span class="sym">:: !*</span>{#<span class="kwb">Bool</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span>{#<span class="kwb">Bool</span>}
	update` arr i
		<span class="sym">|</span> i <span class="sym">&lt;=</span> m
			#<span class="sym">!</span> arr	<span class="sym">=</span> {arr <span class="sym">&amp; [</span>i<span class="sym">] =</span> <span class="kwa">False</span>}
			<span class="sym">=</span> update` arr <span class="sym">(</span>i<span class="sym">+</span>n<span class="sym">)</span>
		<span class="sym">=</span> arr
