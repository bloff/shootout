<span class="slc">\ The Computer Language Shootout</span>
<span class="slc">\ http://shootout.alioth.debian.org/</span>
<span class="slc">\ Contributed by Ian Osgood and Josh Grams</span>

<span class="sym">:</span> enum <span class="com">( n -- )</span> <span class="num">0</span> <span class="kwa">do I constant loop</span> <span class="sym">;</span>
<span class="sym">:</span> table <span class="kwa">create</span> does<span class="sym">&gt;</span> <span class="com">( i -- t[i] )</span> <span class="kwa">swap cells</span> <span class="sym">+ &#64; ;</span>

<span class="num">7</span> enum         E   SE   SW    W   NW   NE   STOP
table offset   <span class="num">1</span> <span class="sym">,</span>  <span class="num">7</span> <span class="sym">,</span>  <span class="num">6</span> <span class="sym">, -</span><span class="num">1</span> <span class="sym">, -</span><span class="num">7</span> <span class="sym">, -</span><span class="num">6</span> <span class="sym">,</span>    <span class="num">0</span> <span class="sym">,</span>
table rotate  SE <span class="sym">,</span> SW <span class="sym">,</span>  W <span class="sym">,</span> NW <span class="sym">,</span> NE <span class="sym">,</span>  E <span class="sym">,</span> STOP <span class="sym">,</span>
table reflect  E <span class="sym">,</span> NE <span class="sym">,</span> NW <span class="sym">,</span>  W <span class="sym">,</span> SW <span class="sym">,</span> SE <span class="sym">,</span> STOP <span class="sym">,</span>

<span class="slc">\ paths are more easily transformable than bit masks</span>

<span class="kwa">create</span> path <span class="num">5</span> <span class="kwa">cells allot</span>
<span class="kwa">create</span> offsets <span class="num">6</span> <span class="kwa">cells allot</span>
<span class="kwa">variable</span> <span class="sym">#</span>solutions
<span class="kwa">create</span> smallest <span class="num">64</span> <span class="kwa">chars allot</span>
<span class="kwa">create</span> largest  <span class="num">64</span> <span class="kwa">chars allot</span>
<span class="kwa">variable</span> board
<span class="num">1024</span> <span class="kwa">allot</span> <span class="slc">\ padding for Pentium 4 and bigforth shortcomings</span>

<span class="sym">:</span> init<span class="sym">-</span>path <span class="com">( 4*dirs -- )</span>
  E path <span class="num">5 0</span> <span class="kwa">do</span> tuck <span class="sym">!</span> cell<span class="sym">+</span> <span class="kwa">loop drop</span> <span class="sym">;</span>
<span class="sym">:</span> rotate<span class="sym">-</span>path
  path <span class="num">5 0</span> <span class="kwa">do dup</span> <span class="sym">&#64;</span> rotate  <span class="kwa">over</span> <span class="sym">!</span> cell<span class="sym">+</span> <span class="kwa">loop drop</span> <span class="sym">;</span>
<span class="sym">:</span> reflect<span class="sym">-</span>path
  path <span class="num">5 0</span> <span class="kwa">do dup</span> <span class="sym">&#64;</span> reflect <span class="kwa">over</span> <span class="sym">!</span> cell<span class="sym">+</span> <span class="kwa">loop drop</span> <span class="sym">;</span>

<span class="sym">:</span> path<span class="sym">-</span>offsets
  <span class="num">0</span> offsets <span class="sym">!</span>
  path offsets
  <span class="num">5 0</span> <span class="kwa">do</span>
    <span class="kwa">over</span> <span class="sym">&#64;</span> offset
    <span class="kwa">over</span> <span class="sym">&#64; +</span>
    <span class="kwa">over</span> cell<span class="sym">+ !</span>
    <span class="kwa">swap</span> cell<span class="sym">+</span> <span class="kwa">swap</span> cell<span class="sym">+</span>
  <span class="kwa">loop</span> <span class="num">2</span><span class="kwa">drop</span> <span class="sym">;</span>
<span class="sym">:</span> minimum<span class="sym">-</span>offset <span class="com">( -- n )</span>
  offsets <span class="sym">&#64;</span>
  <span class="num">6 1</span> <span class="kwa">do</span> offsets <span class="kwa">I cells</span> <span class="sym">+ &#64;</span> <span class="kwa">min loop</span> <span class="sym">;</span>
<span class="sym">:</span> normalize<span class="sym">-</span>offsets
  minimum<span class="sym">-</span>offset <span class="kwa">negate</span>
  <span class="num">6 0</span> <span class="kwa">do dup</span> offsets <span class="kwa">I cells</span> <span class="sym">+ +!</span> <span class="kwa">loop drop</span> <span class="sym">;</span>
<span class="sym">:</span> offsets<span class="sym">-</span>mask <span class="com">( -- mask )</span>
  <span class="num">0</span>
  <span class="num">6 0</span> <span class="kwa">do</span>
    offsets <span class="kwa">I cells</span> <span class="sym">+ &#64;</span>
    <span class="num">1</span> <span class="kwa">swap lshift or</span>
  <span class="kwa">loop</span> <span class="sym">;</span>

<span class="slc">\ make and store the twelve transformations of the path</span>

<span class="sym">:</span> path<span class="sym">-</span>mask <span class="com">( -- mask )</span>
  path<span class="sym">-</span>offsets normalize<span class="sym">-</span>offsets offsets<span class="sym">-</span>mask <span class="sym">;</span>
<span class="sym">:</span> path<span class="sym">-</span>masks <span class="com">( 4*dirs -- )</span>
                             <span class="num">0</span> <span class="sym">,</span> <span class="slc">\ used flag</span>
           init<span class="sym">-</span>path path<span class="sym">-</span>mask <span class="sym">,</span>
  <span class="num">5 0</span> <span class="kwa">do</span> rotate<span class="sym">-</span>path path<span class="sym">-</span>mask <span class="sym">,</span> <span class="kwa">loop</span>
        reflect<span class="sym">-</span>path path<span class="sym">-</span>mask <span class="sym">,</span>
  <span class="num">5 0</span> <span class="kwa">do</span> rotate<span class="sym">-</span>path path<span class="sym">-</span>mask <span class="sym">,</span> <span class="kwa">loop</span> <span class="sym">;</span>

<span class="num">13</span> <span class="kwa">cells constant</span> <span class="sym">/</span>piece

<span class="slc">\  all paths start with an implicit E</span>

<span class="kwa">create</span> pieces
 STOP SE  E  E path<span class="sym">-</span>masks
 STOP NE  E SE path<span class="sym">-</span>masks
 STOP SW SE  E path<span class="sym">-</span>masks
 STOP SE SW  E path<span class="sym">-</span>masks
   SW  W  E SE path<span class="sym">-</span>masks <span class="slc">\ one backtrack, since this shape branches</span>
 STOP SE NE SE path<span class="sym">-</span>masks
 STOP NE SE SE path<span class="sym">-</span>masks
 STOP  E SW SE path<span class="sym">-</span>masks
 STOP  E SE  E path<span class="sym">-</span>masks
 STOP NE SE  E path<span class="sym">-</span>masks

<span class="sym">:</span> put<span class="sym">-</span>piece <span class="com">( shift piece -- )</span>
        <span class="kwa">dup</span> pieces <span class="sym">- /</span>piece <span class="sym">/ [</span><span class="kwa">char</span><span class="sym">]</span> <span class="num">0</span> <span class="sym">+ &gt;</span>r <span class="com">( R: piece-char )</span>
        <span class="kwa">swap chars here</span> <span class="sym">+</span> <span class="kwa">swap</span> <span class="sym">&#64;</span> <span class="com">( buf mask )</span>
        <span class="kwa">begin</span>
                <span class="kwa">dup</span> <span class="num">1</span> <span class="kwa">and if over</span> r<span class="sym">&#64;</span> <span class="kwa">swap c</span><span class="sym">!</span>  <span class="kwa">then</span>
                <span class="kwa">swap char</span><span class="sym">+</span>
        <span class="kwa">dup here</span> <span class="num">64</span> <span class="kwa">chars</span> <span class="sym">+ &lt;</span> <span class="kwa">while</span>
                <span class="kwa">swap</span> <span class="num">2</span><span class="sym">/</span>
        <span class="kwa">dup</span> <span class="num">0</span><span class="sym">=</span> <span class="kwa">until then</span> <span class="num">2</span><span class="kwa">drop</span> r<span class="sym">&gt;</span> <span class="kwa">drop</span> <span class="sym">;</span>

<span class="kwa">variable</span> shift
<span class="sym">:</span> adjust <span class="com">( shift -- shift' )</span>
        shift <span class="sym">&#64;</span> tuck <span class="sym">+</span> shift <span class="sym">! ;</span>

<span class="slc">\ extract solution from stack and store at HERE</span>
<span class="slc">\ (non-destructive because we need the data for backtracking).</span>
<span class="sym">:</span> store<span class="sym">-</span>solution <span class="com">( pieceN shiftN ... piece0 shift0 board )</span>
  <span class="num">0</span> shift <span class="sym">!</span>
  <span class="kwa">here</span> <span class="num">64</span> <span class="sym">[</span><span class="kwa">char</span><span class="sym">] *</span> <span class="kwa">fill</span>
  <span class="kwa">depth</span> <span class="num">1</span><span class="sym">-</span> <span class="num">2</span> <span class="kwa">swap do</span>
    <span class="kwa">i</span> pick <span class="kwa">i</span> pick adjust <span class="kwa">swap</span> put<span class="sym">-</span>piece
  <span class="sym">-</span><span class="num">2</span> <span class="sym">+</span><span class="kwa">loop</span> <span class="sym">;</span>

<span class="sym">: .</span>line <span class="com">( line -- line+6 )</span>
  <span class="num">5 0</span> <span class="kwa">do dup c</span><span class="sym">&#64;</span> <span class="kwa">emit space char</span><span class="sym">+</span> <span class="kwa">loop cr char</span><span class="sym">+ ;</span>
<span class="sym">: .</span>solution <span class="com">( buffer -- )</span>
  <span class="num">5 0</span> <span class="kwa">do</span> <span class="sym">.</span>line <span class="kwa">char</span><span class="sym">+</span>  <span class="kwa">space</span> <span class="sym">.</span>line <span class="kwa">loop drop cr</span> <span class="sym">;</span>

<span class="sym">:</span> record <span class="com">( [st] -- [st] )</span>
  store<span class="sym">-</span>solution  <span class="slc">\ here .solution</span>
  <span class="kwa">here</span> <span class="num">64</span> smallest <span class="num">64</span> compare <span class="num">0</span><span class="sym">&lt;</span> <span class="kwa">if here</span> smallest <span class="num">64</span> <span class="kwa">move then</span>
  largest <span class="num">64</span> <span class="kwa">here</span> <span class="num">64</span> compare <span class="num">0</span><span class="sym">&lt;</span> <span class="kwa">if here</span> largest <span class="num">64</span> <span class="kwa">move then</span>
  <span class="num">1</span> <span class="sym">#</span>solutions <span class="sym">+! ;</span>  <span class="slc">\ throw if #solutions == NUM</span>

<span class="slc">\ initial board, with edges filled in</span>
<span class="num">2</span> <span class="kwa">base</span> <span class="sym">!</span>
<span class="num">0000011.000001.0000011.000001.0000011.000001.0000011.000001.0000011.00000</span>
<span class="num">2</span><span class="kwa">constant</span> init<span class="sym">-</span>board

<span class="kwa">hex</span>
<span class="num">80000000</span> <span class="kwa">constant</span> hi<span class="sym">-</span>bit

<span class="kwa">decimal</span>


<span class="sym">:</span> shift<span class="sym">-</span>board <span class="com">( board -- shift board' )</span>
        <span class="num">0</span> <span class="kwa">swap</span> board <span class="sym">&#64;</span> <span class="kwa">begin</span>
                <span class="kwa">over</span> <span class="num">1</span> <span class="kwa">and while</span> d2<span class="sym">/</span> hi<span class="sym">-</span>bit <span class="kwa">or rot</span> <span class="num">1</span><span class="sym">+ -</span><span class="kwa">rot</span>
        <span class="kwa">repeat</span> board <span class="sym">! ;</span>

<span class="sym">:</span> unshift<span class="sym">-</span>board <span class="com">( shift board -- board' )</span>
        <span class="kwa">swap</span> <span class="sym">&gt;</span>r board <span class="sym">&#64;</span> <span class="kwa">begin</span> r<span class="sym">&gt;</span> <span class="kwa">dup while</span> <span class="num">1</span><span class="sym">- &gt;</span>r
                d2<span class="sym">*</span> <span class="kwa">swap</span> <span class="num">1</span><span class="sym">+</span> <span class="kwa">swap repeat drop</span> board <span class="sym">! ;</span>


<span class="slc">\ returns true if solution is complete</span>
<span class="sym">:</span> add <span class="com">( board piece -- piece shift board' flag )</span>
        tuck <span class="sym">&#64;</span> <span class="kwa">xor dup invert if</span> shift<span class="sym">-</span>board <span class="kwa">false else</span> <span class="num">0</span> <span class="kwa">swap dup then</span>
<span class="sym">;</span>

<span class="sym">:</span> remove <span class="com">( piece shift board' -- board piece )</span>
        unshift<span class="sym">-</span>board  <span class="kwa">over</span> <span class="sym">&#64;</span> <span class="kwa">xor swap</span> <span class="sym">;</span>


<span class="sym">:</span> solve <span class="com">( board -- board )</span>
        pieces  <span class="num">10 0</span> <span class="kwa">do</span>
                <span class="kwa">dup</span> <span class="sym">&#64;</span> <span class="kwa">if</span>
                        <span class="sym">/</span>piece <span class="sym">+</span>
                <span class="kwa">else</span>
                        <span class="kwa">true over</span> <span class="sym">!</span> cell<span class="sym">+</span>  <span class="slc">\ mark used</span>
                        <span class="num">12 0</span> <span class="kwa">do</span>
                                <span class="num">2</span><span class="kwa">dup</span> <span class="sym">&#64;</span> <span class="kwa">and</span> <span class="num">0</span><span class="sym">=</span> <span class="kwa">if</span>
                                        add <span class="kwa">if</span> record <span class="kwa">else recurse then</span>
remove
                                <span class="kwa">then</span>
                        cell<span class="sym">+</span> <span class="kwa">loop</span>
                        <span class="kwa">false over</span> <span class="sym">/</span>piece <span class="sym">- !</span>  <span class="slc">\ mark unused</span>
                <span class="kwa">then</span>
        <span class="kwa">loop drop</span> <span class="sym">;</span>


<span class="sym">:</span> main
        <span class="num">0</span> <span class="sym">#</span>solutions <span class="sym">!</span>
        smallest <span class="num">64</span> <span class="sym">[</span><span class="kwa">char</span><span class="sym">]</span> <span class="num">9</span> <span class="kwa">fill</span>
        largest  <span class="num">64</span> <span class="sym">[</span><span class="kwa">char</span><span class="sym">]</span> <span class="num">0</span> <span class="kwa">fill</span>
                init<span class="sym">-</span>board board <span class="sym">!</span> solve
        <span class="sym">#</span>solutions <span class="sym">&#64; . .</span><span class="str">&quot; solutions found&quot;</span> <span class="kwa">cr cr</span>
        smallest <span class="sym">.</span>solution
        largest  <span class="sym">.</span>solution <span class="sym">;</span>

main bye
