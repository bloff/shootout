<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Dave Fladebo</span>
<span class="com"></span>
<span class="com">   compile: dmd -O -inline -release revcomp.d</span>
<span class="com">*/</span>

import std<span class="sym">.</span>cstream<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwb">char</span><span class="sym">[</span><span class="num">4096</span><span class="sym">]</span>      bufr<span class="sym">;</span>
    BufferedStream  bsi <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">BufferedStream</span><span class="sym">(</span>din<span class="sym">,</span>bufr<span class="sym">.</span>length<span class="sym">);</span>
    <span class="kwb">int</span>             offset<span class="sym">;</span>
    <span class="kwb">char</span><span class="sym">[]</span>          desc<span class="sym">,</span>line<span class="sym">,</span>data<span class="sym">,</span>rc <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span><span class="kwb">char</span><span class="sym">.</span>max<span class="sym">];</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">char</span> c <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> c <span class="sym">&lt;</span> <span class="kwb">char</span><span class="sym">.</span>max<span class="sym">;</span> c<span class="sym">++)</span> rc<span class="sym">[</span>c<span class="sym">] =</span> <span class="kwd">revComp</span><span class="sym">(</span>c<span class="sym">);</span>

    <span class="kwd">foreach</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">[]</span> ln<span class="sym">;</span> bsi<span class="sym">)</span>
    <span class="sym">{</span>
        line <span class="sym">=</span> ln<span class="sym">;</span>
        <span class="kwa">if</span><span class="sym">(</span>line<span class="sym">.</span>length<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
            <span class="sym">{</span>
                <span class="kwd">writeRC</span><span class="sym">(</span>desc<span class="sym">,</span>data<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>offset<span class="sym">],</span>line<span class="sym">,</span>rc<span class="sym">);</span>
                offset <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">else</span>
            <span class="sym">{</span>
                <span class="kwb">int</span> end <span class="sym">=</span> offset <span class="sym">+</span> line<span class="sym">.</span>length<span class="sym">;</span>
                <span class="kwa">if</span><span class="sym">(</span>data<span class="sym">.</span>length <span class="sym">&lt;</span> end<span class="sym">)</span> data<span class="sym">.</span>length <span class="sym">=</span> end <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span>
                data<span class="sym">[</span>offset<span class="sym">..</span>end<span class="sym">] =</span> line<span class="sym">;</span>
                offset <span class="sym">+=</span> line<span class="sym">.</span>length<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwd">writeRC</span><span class="sym">(</span>desc<span class="sym">,</span>data<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>offset<span class="sym">],</span>line<span class="sym">,</span>rc<span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">writeRC</span><span class="sym">(</span>inout <span class="kwb">char</span><span class="sym">[]</span> desc<span class="sym">,</span><span class="kwb">char</span><span class="sym">[]</span> data<span class="sym">,</span><span class="kwb">char</span><span class="sym">[]</span> line<span class="sym">,</span><span class="kwb">char</span><span class="sym">[]</span> rc<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">if</span><span class="sym">(</span>desc<span class="sym">.</span>length<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwb">const int</span> lineLen <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
        <span class="kwb">char</span><span class="sym">[</span>lineLen<span class="sym">]</span> lineOut<span class="sym">;</span>

        dout<span class="sym">.</span><span class="kwd">writefln</span><span class="sym">(</span>desc<span class="sym">);</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> data<span class="sym">.</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span>
        <span class="sym">{</span>
            lineOut<span class="sym">[</span>j<span class="sym">] =</span> data<span class="sym">[</span>i<span class="sym">] =</span> rc<span class="sym">[</span>data<span class="sym">[</span>i<span class="sym">]];</span>

            j<span class="sym">++;</span>
            <span class="kwa">if</span><span class="sym">(</span>j <span class="sym">==</span> lineLen <span class="sym">||</span> i <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
            <span class="sym">{</span>
                dout<span class="sym">.</span><span class="kwd">writeLine</span><span class="sym">(</span>lineOut<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>j<span class="sym">]);</span>
                j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    desc <span class="sym">=</span> line<span class="sym">.</span>dup<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">char</span> <span class="kwd">revComp</span><span class="sym">(</span><span class="kwb">char</span> c<span class="sym">)</span>
<span class="sym">{</span>
    c <span class="sym">=</span> std<span class="sym">.</span>ctype<span class="sym">.</span><span class="kwd">toupper</span><span class="sym">(</span>c<span class="sym">);</span>

    <span class="kwa">switch</span><span class="sym">(</span>c<span class="sym">)</span>
    <span class="sym">{</span>
    <span class="kwa">case</span> <span class="str">'A'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'T'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'B'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'V'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'C'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'G'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'D'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'H'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'G'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'C'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'H'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'D'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'K'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'M'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'M'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'K'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'R'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'Y'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'T'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'A'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'V'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'B'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">case</span> <span class="str">'Y'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'R'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">default</span> <span class="sym">:</span>          <span class="kwa">break</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> c<span class="sym">;</span>
<span class="sym">}</span>
