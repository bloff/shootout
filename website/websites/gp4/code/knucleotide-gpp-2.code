<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// Contributed by Paul Kitchin</span>

<span class="dir">#include &lt;algorithm&gt;</span>
<span class="dir">#include &lt;cctype&gt;</span>
<span class="dir">#include &lt;cstring&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;iterator&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> std<span class="sym">::</span><span class="kwb">size_t</span> size <span class="sym">&gt;</span>
<span class="kwb">struct</span> hasher
<span class="sym">{</span>
   <span class="kwb">static</span> std<span class="sym">::</span><span class="kwb">size_t const</span> length <span class="sym">=</span> size<span class="sym">;</span>
   <span class="kwb">static char const</span> <span class="sym">*</span> <span class="kwd">string</span><span class="sym">(</span><span class="kwb">char const</span> <span class="sym">*</span> string<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">static char</span> string_<span class="sym">[</span>size <span class="sym">+</span> <span class="num">1</span><span class="sym">] = {</span><span class="num">0</span><span class="sym">};</span>
      std<span class="sym">::</span><span class="kwd">strncpy</span><span class="sym">(</span>string_<span class="sym">,</span> string<span class="sym">,</span> size<span class="sym">);</span>
      <span class="kwa">return</span> string_<span class="sym">;</span>
   <span class="sym">}</span>
   std<span class="sym">::</span><span class="kwb">size_t</span> <span class="kwd">hash</span><span class="sym">(</span><span class="kwb">char const</span> <span class="sym">*</span> string<span class="sym">)</span> <span class="kwb">const</span>
   <span class="sym">{</span>
      std<span class="sym">::</span><span class="kwb">size_t</span> h <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> size<span class="sym">; ++</span>i<span class="sym">)</span>
      <span class="sym">{</span>
         h <span class="sym">&lt;&lt;=</span> <span class="num">2</span><span class="sym">;</span>
         <span class="kwa">switch</span> <span class="sym">(</span>string<span class="sym">[</span>i<span class="sym">])</span>
         <span class="sym">{</span>
            <span class="kwa">case</span> <span class="str">'T'</span><span class="sym">:</span>
               <span class="sym">++</span>h<span class="sym">;</span>
               <span class="kwa">break</span><span class="sym">;</span>
            <span class="kwa">case</span> <span class="str">'C'</span><span class="sym">:</span>
               h <span class="sym">+=</span> <span class="num">2</span><span class="sym">;</span>
               <span class="kwa">break</span><span class="sym">;</span>
            <span class="kwa">case</span> <span class="str">'G'</span><span class="sym">:</span>
               h <span class="sym">+=</span> <span class="num">3</span><span class="sym">;</span>
               <span class="kwa">break</span><span class="sym">;</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      <span class="kwa">return</span> h<span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwb">bool</span> <span class="kwd">equal</span><span class="sym">(</span><span class="kwb">char const</span> <span class="sym">*</span> lhs<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span> rhs<span class="sym">)</span> <span class="kwb">const</span>
   <span class="sym">{</span>
      <span class="kwa">return</span> std<span class="sym">::</span><span class="kwd">strncmp</span><span class="sym">(</span>lhs<span class="sym">,</span> rhs<span class="sym">,</span> size<span class="sym">) ==</span> <span class="num">0</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">};</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> typename key<span class="sym">,</span> typename value<span class="sym">,</span> typename hash_traits <span class="sym">&gt;</span>
<span class="kwc">class</span> hashtable
   <span class="sym">:</span>
   <span class="kwc">private</span> hash_traits
<span class="sym">{</span>

      <span class="kwb">struct</span> entry
      <span class="sym">{</span>
         <span class="kwd">entry</span><span class="sym">()</span>
            <span class="sym">:</span>
            <span class="kwd">key_</span><span class="sym">(</span><span class="kwd">key</span><span class="sym">()),</span>
            <span class="kwd">value_</span><span class="sym">(</span><span class="kwd">value</span><span class="sym">()),</span>
            <span class="kwd">next_</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
         <span class="sym">{</span>
         <span class="sym">}</span>
         <span class="kwd">entry</span><span class="sym">(</span>key key_<span class="sym">)</span>
            <span class="sym">:</span>
            <span class="kwd">key_</span><span class="sym">(</span>key_<span class="sym">),</span>
            <span class="kwd">value_</span><span class="sym">(</span><span class="kwd">value</span><span class="sym">()),</span>
            <span class="kwd">next_</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
         <span class="sym">{</span>
         <span class="sym">}</span>
         key key_<span class="sym">;</span>
         value value_<span class="sym">;</span>
         entry <span class="sym">*</span> next_<span class="sym">;</span>
      <span class="sym">};</span>

   <span class="kwc">public</span><span class="sym">:</span>

      <span class="kwd">hashtable</span><span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> size<span class="sym">)</span>
         <span class="sym">:</span>
         <span class="kwd">size_</span><span class="sym">(</span><span class="kwd">power_of_two</span><span class="sym">(</span>size<span class="sym">)),</span>
         <span class="kwd">table_</span><span class="sym">(</span>size_<span class="sym">)</span>
      <span class="sym">{</span>
      <span class="sym">}</span>

      value <span class="sym">&amp;</span> <span class="kwc">operator</span><span class="sym">[](</span>key lookup_key<span class="sym">)</span>
      <span class="sym">{</span>
         entry <span class="sym">*</span> node <span class="sym">= &amp;</span>table_<span class="sym">[</span><span class="kwd">hash</span><span class="sym">(</span>lookup_key<span class="sym">) &amp; (</span>size_ <span class="sym">-</span> <span class="num">1</span><span class="sym">)];</span>
         <span class="kwa">if</span> <span class="sym">(</span>node<span class="sym">-&gt;</span>key_<span class="sym">)</span>
         <span class="sym">{</span>
            <span class="kwa">while</span> <span class="sym">(!</span><span class="kwd">equal</span><span class="sym">(</span>lookup_key<span class="sym">,</span> node<span class="sym">-&gt;</span>key_<span class="sym">) &amp;&amp;</span> node<span class="sym">-&gt;</span>next_<span class="sym">)</span>
            <span class="sym">{</span>
               node <span class="sym">=</span> node<span class="sym">-&gt;</span>next_<span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">equal</span><span class="sym">(</span>lookup_key<span class="sym">,</span> node<span class="sym">-&gt;</span>key_<span class="sym">))</span>
            <span class="sym">{</span>
               <span class="kwa">return</span> node<span class="sym">-&gt;</span>value_<span class="sym">;</span>
            <span class="sym">}</span>
            node<span class="sym">-&gt;</span>next_ <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">entry</span><span class="sym">(</span><span class="kwd">value</span><span class="sym">());</span>
            node <span class="sym">=</span> node<span class="sym">-&gt;</span>next_<span class="sym">;</span>
         <span class="sym">}</span>
         node<span class="sym">-&gt;</span>key_ <span class="sym">=</span> lookup_key<span class="sym">;</span>
         <span class="kwa">return</span> node<span class="sym">-&gt;</span>value_<span class="sym">;</span>
      <span class="sym">}</span>

      <span class="kwc">typedef</span> typename std<span class="sym">::</span>vector<span class="sym">&lt;</span> entry <span class="sym">&gt;::</span>const_iterator const_iterator<span class="sym">;</span>

      const_iterator <span class="kwd">begin</span><span class="sym">()</span> <span class="kwb">const</span>
      <span class="sym">{</span>
         <span class="kwa">return</span> table_<span class="sym">.</span><span class="kwd">begin</span><span class="sym">();</span>
      <span class="sym">}</span>

      const_iterator <span class="kwd">end</span><span class="sym">()</span> <span class="kwb">const</span>
      <span class="sym">{</span>
         <span class="kwa">return</span> table_<span class="sym">.</span><span class="kwd">end</span><span class="sym">();</span>
      <span class="sym">}</span>

   <span class="kwc">private</span><span class="sym">:</span>

      std<span class="sym">::</span><span class="kwb">size_t</span> <span class="kwd">power_of_two</span><span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> lower_bound<span class="sym">)</span>
      <span class="sym">{</span>
         <span class="kwa">for</span> <span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">64</span> <span class="sym">*</span> <span class="num">1024</span><span class="sym">;</span> i <span class="sym">*=</span> <span class="num">2</span><span class="sym">)</span>
         <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">&gt;=</span> lower_bound<span class="sym">)</span>
            <span class="sym">{</span>
               <span class="kwa">return</span> i<span class="sym">;</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
         <span class="kwa">return</span> <span class="num">1024</span> <span class="sym">*</span> <span class="num">64</span><span class="sym">;</span>
      <span class="sym">}</span>

      std<span class="sym">::</span><span class="kwb">size_t</span> size_<span class="sym">;</span>
      std<span class="sym">::</span>vector<span class="sym">&lt;</span> entry <span class="sym">&gt;</span> table_<span class="sym">;</span>

<span class="sym">};</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> typename hasher <span class="sym">&gt;</span>
<span class="kwb">void</span> <span class="kwd">write_frequencies</span><span class="sym">(</span>std<span class="sym">::</span>vector<span class="sym">&lt;</span> <span class="kwb">char</span> <span class="sym">&gt;</span> <span class="kwb">const</span> <span class="sym">&amp;</span> input<span class="sym">)</span>
<span class="sym">{</span>
   std<span class="sym">::</span><span class="kwb">size_t</span> sum <span class="sym">=</span> input<span class="sym">.</span><span class="kwd">size</span><span class="sym">() +</span> <span class="num">1</span> <span class="sym">-</span> hasher<span class="sym">::</span>length<span class="sym">;</span>
   <span class="kwc">typedef</span> hashtable<span class="sym">&lt;</span> <span class="kwb">char const</span> <span class="sym">*,</span> std<span class="sym">::</span><span class="kwb">size_t</span><span class="sym">,</span> hasher <span class="sym">&gt;</span> frequency_table<span class="sym">;</span>
   frequency_table <span class="kwd">frequencies</span><span class="sym">(</span>std<span class="sym">::</span>min<span class="sym">&lt;</span> std<span class="sym">::</span><span class="kwb">size_t</span> <span class="sym">&gt;(</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>hasher<span class="sym">::</span>length <span class="sym">*</span> <span class="num">2</span><span class="sym">),</span> sum<span class="sym">));</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> i_end <span class="sym">=</span> input<span class="sym">.</span><span class="kwd">size</span><span class="sym">() +</span> <span class="num">1</span> <span class="sym">-</span> hasher<span class="sym">::</span>length<span class="sym">;</span> i <span class="sym">!=</span> i_end<span class="sym">; ++</span>i<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="sym">++</span>frequencies<span class="sym">[&amp;</span>input<span class="sym">[</span>i<span class="sym">]];</span>
   <span class="sym">}</span>
   <span class="kwa">for</span> <span class="sym">(</span>typename frequency_table<span class="sym">::</span>const_iterator i <span class="sym">=</span> frequencies<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> i_end <span class="sym">=</span> frequencies<span class="sym">.</span><span class="kwd">end</span><span class="sym">();</span> i <span class="sym">!=</span> i_end<span class="sym">; ++</span>i<span class="sym">)</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> hasher<span class="sym">::</span><span class="kwd">string</span><span class="sym">(</span>i<span class="sym">-&gt;</span>key_<span class="sym">) &lt;&lt;</span> <span class="str">' '</span> <span class="sym">&lt;&lt; (</span>sum ? <span class="kwb">double</span><span class="sym">(</span><span class="num">100</span> <span class="sym">*</span> i<span class="sym">-&gt;</span>value_<span class="sym">) /</span> sum <span class="sym">:</span> <span class="num">0.0</span><span class="sym">) &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
   <span class="sym">}</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> typename hasher <span class="sym">&gt;</span>
<span class="kwb">void</span> <span class="kwd">write_count</span><span class="sym">(</span>std<span class="sym">::</span>vector<span class="sym">&lt;</span> <span class="kwb">char</span> <span class="sym">&gt;</span> <span class="kwb">const</span> <span class="sym">&amp;</span> input<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span> string<span class="sym">)</span>
<span class="sym">{</span>
   std<span class="sym">::</span><span class="kwb">size_t</span> sum <span class="sym">=</span> input<span class="sym">.</span><span class="kwd">size</span><span class="sym">() +</span> <span class="num">1</span> <span class="sym">-</span> hasher<span class="sym">::</span>length<span class="sym">;</span>
   <span class="kwc">typedef</span> hashtable<span class="sym">&lt;</span> <span class="kwb">char const</span> <span class="sym">*,</span> std<span class="sym">::</span><span class="kwb">size_t</span><span class="sym">,</span> hasher <span class="sym">&gt;</span> frequency_table<span class="sym">;</span>
   frequency_table <span class="kwd">frequencies</span><span class="sym">(</span>std<span class="sym">::</span>min<span class="sym">&lt;</span> std<span class="sym">::</span><span class="kwb">size_t</span> <span class="sym">&gt;(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">min</span><span class="sym">(</span><span class="num">30u</span><span class="sym">,</span> hasher<span class="sym">::</span>length <span class="sym">*</span> <span class="num">2</span><span class="sym">),</span> sum<span class="sym">));</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> i_end <span class="sym">=</span> input<span class="sym">.</span><span class="kwd">size</span><span class="sym">() +</span> <span class="num">1</span> <span class="sym">-</span> hasher<span class="sym">::</span>length<span class="sym">;</span> i <span class="sym">!=</span> i_end<span class="sym">; ++</span>i<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="sym">++</span>frequencies<span class="sym">[&amp;</span>input<span class="sym">[</span>i<span class="sym">]];</span>
   <span class="sym">}</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> frequencies<span class="sym">[</span>string<span class="sym">] &lt;&lt;</span> <span class="str">'</span><span class="esc">\t</span><span class="str">'</span> <span class="sym">&lt;&lt;</span> string <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">char</span> <span class="kwd">to_upper</span><span class="sym">(</span><span class="kwb">char</span> c<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">return</span> <span class="kwb">char</span><span class="sym">(</span>std<span class="sym">::</span><span class="kwd">toupper</span><span class="sym">(</span>c<span class="sym">));</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
   std<span class="sym">::</span>vector<span class="sym">&lt;</span> <span class="kwb">char</span> <span class="sym">&gt;</span> input<span class="sym">;</span>
   <span class="kwb">char</span> buffer<span class="sym">[</span><span class="num">4096</span><span class="sym">];</span>
   <span class="kwa">while</span> <span class="sym">(</span>std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">getline</span><span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">4096</span><span class="sym">) &amp;&amp;</span> std<span class="sym">::</span><span class="kwd">strncmp</span><span class="sym">(</span>buffer<span class="sym">,</span> <span class="str">&quot;&gt;THREE&quot;</span><span class="sym">,</span> <span class="num">6</span><span class="sym">) !=</span> <span class="num">0</span><span class="sym">)</span>
   <span class="sym">{</span>
   <span class="sym">}</span>
   <span class="kwa">while</span> <span class="sym">(</span>std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">getline</span><span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">4096</span><span class="sym">) &amp;&amp;</span> buffer<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="str">'&gt;'</span><span class="sym">)</span>
   <span class="sym">{</span>
      input<span class="sym">.</span><span class="kwd">insert</span><span class="sym">(</span>input<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> buffer<span class="sym">,</span> buffer <span class="sym">+</span> std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">gcount</span><span class="sym">() -</span> <span class="num">1</span><span class="sym">);</span>
   <span class="sym">}</span>
   std<span class="sym">::</span><span class="kwd">transform</span><span class="sym">(</span>input<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> input<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> input<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> to_upper<span class="sym">);</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setprecision</span><span class="sym">(</span><span class="num">3</span><span class="sym">) &lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setiosflags</span><span class="sym">(</span>std<span class="sym">::</span>ios<span class="sym">::</span>fixed<span class="sym">);</span>
   write_frequencies<span class="sym">&lt;</span> hasher<span class="sym">&lt;</span> <span class="num">1</span> <span class="sym">&gt; &gt;(</span>input<span class="sym">);</span>
   write_frequencies<span class="sym">&lt;</span> hasher<span class="sym">&lt;</span> <span class="num">2</span> <span class="sym">&gt; &gt;(</span>input<span class="sym">);</span>
   write_count<span class="sym">&lt;</span> hasher<span class="sym">&lt;</span> <span class="num">3</span> <span class="sym">&gt; &gt;(</span>input<span class="sym">,</span> <span class="str">&quot;GGT&quot;</span><span class="sym">);</span>
   write_count<span class="sym">&lt;</span> hasher<span class="sym">&lt;</span> <span class="num">4</span> <span class="sym">&gt; &gt;(</span>input<span class="sym">,</span> <span class="str">&quot;GGTA&quot;</span><span class="sym">);</span>
   write_count<span class="sym">&lt;</span> hasher<span class="sym">&lt;</span> <span class="num">6</span> <span class="sym">&gt; &gt;(</span>input<span class="sym">,</span> <span class="str">&quot;GGTATT&quot;</span><span class="sym">);</span>
   write_count<span class="sym">&lt;</span> hasher<span class="sym">&lt;</span> <span class="num">12</span> <span class="sym">&gt; &gt;(</span>input<span class="sym">,</span> <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);</span>
   write_count<span class="sym">&lt;</span> hasher<span class="sym">&lt;</span> <span class="num">18</span> <span class="sym">&gt; &gt;(</span>input<span class="sym">,</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);</span>
<span class="sym">}</span>
