Object subclass<span class="hl sym">: #</span>Tests   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>   classVariableNames<span class="hl sym">:</span> <span class="hl str">''</span>   poolDictionaries<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl com">&quot;* SPLITFILE=Tests.st *&quot;</span><span class="hl sym">!</span>

<span class="hl sym">!</span>Tests class methodsFor<span class="hl sym">:</span> <span class="hl str">'benchmarks-game'</span><span class="hl sym">!</span>

writeFasta<span class="hl sym">:</span> aString from<span class="hl sym">:</span> inStream to<span class="hl sym">:</span> outStream lineLength<span class="hl sym">:</span> lineLength
   <span class="hl sym">|</span> i <span class="hl sym">|</span>
   outStream nextPut<span class="hl sym">: $&gt;;</span> nextPutAll<span class="hl sym">:</span> aString<span class="hl sym">;</span> cr<span class="hl sym">.</span>
   i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>
   <span class="hl sym">[</span>inStream atEnd<span class="hl sym">]</span> whileFalse<span class="hl sym">:</span>
      <span class="hl sym">[</span>i <span class="hl sym">==</span> lineLength ifTrue<span class="hl sym">: [</span>outStream cr<span class="hl sym">.</span> i <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">].</span>
      outStream nextPut<span class="hl sym">:</span> inStream next<span class="hl sym">.</span>
      i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">].</span>
   outStream cr
<span class="hl sym">!</span>

fasta<span class="hl sym">:</span> n to<span class="hl sym">:</span> out
   <span class="hl sym">|</span> r lineLength <span class="hl sym">|</span>
   lineLength <span class="hl sym">:=</span> <span class="hl num">60</span><span class="hl sym">.</span>
   <span class="hl kwa">self</span>
      writeFasta<span class="hl sym">:</span> <span class="hl str">'ONE Homo sapiens alu'</span>
      from<span class="hl sym">:</span>
         <span class="hl sym">(</span> RepeatStream
            to<span class="hl sym">:</span> n<span class="hl sym">*</span><span class="hl num">2</span>
            on<span class="hl sym">:</span><span class="hl str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span><span class="hl sym">,</span>
               <span class="hl str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span><span class="hl sym">,</span>
               <span class="hl str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span><span class="hl sym">,</span>
               <span class="hl str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span><span class="hl sym">,</span>
               <span class="hl str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span><span class="hl sym">,</span>
               <span class="hl str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span><span class="hl sym">,</span>
               <span class="hl str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span> <span class="hl sym">)</span>
      to<span class="hl sym">:</span> out
      lineLength<span class="hl sym">:</span> lineLength<span class="hl sym">.</span>

   r <span class="hl sym">:=</span> RandomNumber to<span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">.</span> <span class="hl com">&quot;* Shared random sequence *&quot;</span>

   <span class="hl kwa">self</span>
      writeFasta<span class="hl sym">:</span> <span class="hl str">'TWO IUB ambiguity codes'</span>
      from<span class="hl sym">:</span>
         <span class="hl sym">((</span> RandomStream
            to<span class="hl sym">:</span> n<span class="hl sym">*</span><span class="hl num">3</span>
            on<span class="hl sym">: #(   #($</span>a <span class="hl num">0.27</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>c <span class="hl num">0.12</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>g <span class="hl num">0.12</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>t <span class="hl num">0.27</span>d0<span class="hl sym">)</span>

                  <span class="hl sym">#($</span>B <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>D <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>H <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>K <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>M <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>N <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>R <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>S <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>V <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>W <span class="hl num">0.02</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>Y <span class="hl num">0.02</span>d0<span class="hl sym">)))</span>
         random<span class="hl sym">:</span> r<span class="hl sym">;</span>
         yourself<span class="hl sym">)</span>
      to<span class="hl sym">:</span> out
      lineLength<span class="hl sym">:</span> lineLength<span class="hl sym">.</span>

   <span class="hl kwa">self</span>
      writeFasta<span class="hl sym">:</span> <span class="hl str">'THREE Homo sapiens frequency'</span>
      from<span class="hl sym">:</span>
         <span class="hl sym">((</span> RandomStream
            to<span class="hl sym">:</span> n<span class="hl sym">*</span><span class="hl num">5</span>
            on<span class="hl sym">: #(   #($</span>a <span class="hl num">0.3029549426680</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>c <span class="hl num">0.1979883004921</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>g <span class="hl num">0.1975473066391</span>d0<span class="hl sym">)</span>
                  <span class="hl sym">#($</span>t <span class="hl num">0.3015094502008</span>d0<span class="hl sym">)))</span>
            random<span class="hl sym">:</span> r<span class="hl sym">;</span>
            yourself<span class="hl sym">)</span>
      to<span class="hl sym">:</span> out
      lineLength<span class="hl sym">:</span> lineLength<span class="hl sym">.</span>

   out flush
<span class="hl sym">!</span>

main
   RandomNumber initialize<span class="hl sym">.</span>   <span class="hl kwa">self</span> fasta<span class="hl sym">:</span> Smalltalk commandLineArguments last asNumber to<span class="hl sym">:</span> Stdout<span class="hl sym">! !</span>


<span class="hl com">&quot;* SPLITFILE=RandomNumber.st *&quot;</span><span class="hl sym">!</span>

Object subclass<span class="hl sym">: #</span>RandomNumber   instanceVariableNames<span class="hl sym">:</span> <span class="hl str">'seed scale'</span>   classVariableNames<span class="hl sym">:</span> <span class="hl str">'FModulus Increment Modulus Multiplier'</span>   poolDictionaries<span class="hl sym">:</span> <span class="hl str">''</span>
   category<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>RandomNumber class methodsFor<span class="hl sym">:</span> <span class="hl str">'class initialization'</span><span class="hl sym">!</span>initialize   FModulus <span class="hl sym">:=</span> <span class="hl num">139968.0</span><span class="hl sym">.</span>   Increment <span class="hl sym">:=</span> <span class="hl num">29573</span><span class="hl sym">.</span>   Modulus <span class="hl sym">:=</span> <span class="hl num">139968</span><span class="hl sym">.</span>   Multiplier <span class="hl sym">:=</span> <span class="hl num">3877</span><span class="hl sym">.</span>
<span class="hl sym">! !!</span>RandomNumber class methodsFor<span class="hl sym">:</span> <span class="hl str">'initialize-release'</span><span class="hl sym">!</span>to<span class="hl sym">:</span> anInteger   <span class="hl sym">^</span><span class="hl kwa">self</span> basicNew to<span class="hl sym">:</span> anInteger
<span class="hl sym">! !</span>

<span class="hl sym">!</span>RandomNumber methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>next   seed <span class="hl sym">:= (</span>seed <span class="hl sym">*</span> Multiplier <span class="hl sym">+</span> Increment<span class="hl sym">) \\</span> Modulus<span class="hl sym">.   ^(</span>seed <span class="hl sym">*</span> scale<span class="hl sym">) /</span> FModulus
<span class="hl sym">! !</span>

<span class="hl sym">!</span>RandomNumber methodsFor<span class="hl sym">:</span> <span class="hl str">'private'</span><span class="hl sym">!</span>to<span class="hl sym">:</span> anInteger   seed <span class="hl sym">:=</span> <span class="hl num">42</span><span class="hl sym">.</span>   scale <span class="hl sym">:=</span> anInteger
<span class="hl sym">! !</span>


<span class="hl com">&quot;* SPLITFILE=RepeatStream.st *&quot;</span><span class="hl sym">!</span>

ReadStream subclass<span class="hl sym">: #</span>RepeatStream
   instanceVariableNames<span class="hl sym">:</span><span class="hl str">'repeatPtr repeatLimit'</span>
   classVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span><span class="hl str">''</span>
   category<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>RepeatStream class methodsFor<span class="hl sym">:</span> <span class="hl str">'instance creation'</span><span class="hl sym">!</span>to<span class="hl sym">:</span> anInteger on<span class="hl sym">:</span> aCollection   <span class="hl sym">^(</span><span class="hl kwa">super</span> on<span class="hl sym">:</span> aCollection<span class="hl sym">)</span> to<span class="hl sym">:</span> anInteger
<span class="hl sym">! !</span>

<span class="hl sym">!</span>RepeatStream methodsFor<span class="hl sym">:</span> <span class="hl str">'initialize-release'</span><span class="hl sym">!</span>to<span class="hl sym">:</span> anInteger   repeatPtr <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   repeatLimit <span class="hl sym">:=</span> anInteger
<span class="hl sym">! !</span>

<span class="hl sym">!</span>RepeatStream methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>next   position <span class="hl sym">&gt;=</span> readLimit ifTrue<span class="hl sym">: [</span> <span class="hl kwa">self</span> position<span class="hl sym">:</span> <span class="hl num">0</span> <span class="hl sym">].</span>   repeatPtr <span class="hl sym">:=</span> repeatPtr <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">.   ^</span>collection at<span class="hl sym">: (</span>position <span class="hl sym">:=</span> position <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
<span class="hl sym">! !!</span>RepeatStream methodsFor<span class="hl sym">:</span> <span class="hl str">'testing'</span><span class="hl sym">!</span>atEnd   <span class="hl sym">^</span>repeatPtr <span class="hl sym">&gt;=</span> repeatLimit
<span class="hl sym">! !</span>

<span class="hl com">&quot;* SPLITFILE=RandomStream.st *&quot;</span><span class="hl sym">!</span>

RepeatStream subclass<span class="hl sym">: #</span>RandomStream
   instanceVariableNames<span class="hl sym">:</span><span class="hl str">'random percentages'</span>
   classVariableNames<span class="hl sym">:</span><span class="hl str">''</span>
   poolDictionaries<span class="hl sym">:</span><span class="hl str">''</span>
   category<span class="hl sym">:</span><span class="hl str">'benchmarks-game'</span>
<span class="hl sym">!</span>

<span class="hl sym">!</span>RandomStream methodsFor<span class="hl sym">:</span> <span class="hl str">'initialize-release'</span><span class="hl sym">!</span>on<span class="hl sym">:</span> aCollection   <span class="hl sym">|</span> size cp <span class="hl sym">|</span>   repeatPtr <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">.</span>   random <span class="hl sym">:=</span> RandomNumber to<span class="hl sym">:</span> <span class="hl num">1.0</span><span class="hl sym">.</span>   size <span class="hl sym">:=</span> aCollection size<span class="hl sym">.</span>   percentages <span class="hl sym">:=</span> Array new<span class="hl sym">:</span> size<span class="hl sym">.</span>   collection <span class="hl sym">:=</span> Array new<span class="hl sym">:</span> size<span class="hl sym">.</span>   cp <span class="hl sym">:=</span> <span class="hl num">0.0</span><span class="hl sym">.</span>   <span class="hl num">1</span> to<span class="hl sym">:</span> size do<span class="hl sym">: [:</span>i<span class="hl sym">|</span>      collection at<span class="hl sym">:</span> i put<span class="hl sym">: (</span>aCollection at<span class="hl sym">:</span> i<span class="hl sym">)</span> first<span class="hl sym">.</span>      percentages at<span class="hl sym">:</span> i put<span class="hl sym">: (</span>cp <span class="hl sym">:=</span> cp <span class="hl sym">+ (</span>aCollection at<span class="hl sym">:</span> i<span class="hl sym">)</span> last<span class="hl sym">).   ]</span>
<span class="hl sym">! !!</span>RandomStream methodsFor<span class="hl sym">:</span> <span class="hl str">'accessing'</span><span class="hl sym">!</span>next   <span class="hl sym">|</span> r <span class="hl sym">|</span>   r <span class="hl sym">:=</span> random next<span class="hl sym">.</span>   repeatPtr <span class="hl sym">:=</span> repeatPtr <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">.</span>   <span class="hl num">1</span> to<span class="hl sym">:</span> percentages size do<span class="hl sym">: [:</span>i<span class="hl sym">|      (</span>r <span class="hl sym">&lt; (</span>percentages at<span class="hl sym">:</span> i<span class="hl sym">))</span> ifTrue<span class="hl sym">: [^</span>collection at<span class="hl sym">:</span> i<span class="hl sym">]]</span>
<span class="hl sym">!</span>random<span class="hl sym">:</span> aRandomNumber<span class="hl com">&quot;* Share the random number generator so we can get the expected results. *&quot;</span>   random <span class="hl sym">:=</span> aRandomNumber
<span class="hl sym">! !</span>





