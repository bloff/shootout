<span class="hl com">(* message.ml</span>
<span class="hl com"></span>
<span class="hl com">   The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Contributed by Troestler Christophe</span>
<span class="hl com">   Based on Scheme Chicken implementation</span>
<span class="hl com">*)</span>

<span class="hl com">(* Channel to communicate safely between threads (no buffering). *)</span>
<span class="hl kwa">type</span> channel <span class="hl sym">= {</span> write<span class="hl sym">:</span> Mutex.t<span class="hl sym">;</span> <span class="hl kwa">mutable</span> v<span class="hl sym">:</span> <span class="hl kwb">int</span><span class="hl sym">;</span> read<span class="hl sym">:</span> Mutex.t <span class="hl sym">}</span>

<span class="hl kwa">let</span> <span class="hl kwd">make</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> r <span class="hl sym">=</span> Mutex.<span class="hl kwd">create</span><span class="hl sym">()</span> <span class="hl kwa">in</span> Mutex.lock r<span class="hl sym">; {</span> write<span class="hl sym">=</span>Mutex.<span class="hl kwd">create</span><span class="hl sym">();</span> v<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> read<span class="hl sym">=</span>r <span class="hl sym">}</span>

<span class="hl kwa">let</span> read ch <span class="hl sym">=</span> Mutex.lock ch.read<span class="hl sym">;</span> <span class="hl kwa">let</span> v <span class="hl sym">=</span> ch.v <span class="hl kwa">in</span> Mutex.unlock ch.write<span class="hl sym">;</span> v

<span class="hl kwa">let</span> write ch v <span class="hl sym">=</span> Mutex.lock ch.write<span class="hl sym">;</span> ch.v <span class="hl sym">&lt;-</span> v<span class="hl sym">;</span> Mutex.unlock ch.read

<span class="hl com">(* Looping utility *)</span>
<span class="hl kwa">let rec</span> repeat n f x <span class="hl sym">=</span> <span class="hl kwa">if</span> n <span class="hl sym">&lt;=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> x <span class="hl kwa">else</span> <span class="hl kwd">repeat</span> <span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwd">f</span> <span class="hl sym">(</span>f x<span class="hl sym">)</span>


<span class="hl kwa">let</span> make_node out_ch <span class="hl sym">=</span>
  <span class="hl kwa">let</span> in_ch <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">()</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> <span class="hl kwd">node</span> <span class="hl sym">() =</span> <span class="hl kwa">while true do</span> write <span class="hl kwd">out_ch</span> <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">+</span> read in_ch<span class="hl sym">)</span> <span class="hl kwa">done in</span>
  <span class="hl kwd">ignore</span><span class="hl sym">(</span>Thread.create <span class="hl kwd">node</span> <span class="hl sym">());</span> in_ch

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> int_of_string Sys.argv.<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">10</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> e <span class="hl sym">=</span> <span class="hl kwd">make</span><span class="hl sym">()</span> <span class="hl kwa">in let</span> b <span class="hl sym">=</span> repeat <span class="hl kwd">500</span> <span class="hl com">(* 380 ok *)</span> make_node e <span class="hl kwa">in</span>
  Printf.printf <span class="hl str">&quot;%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span>repeat <span class="hl kwd">n</span> <span class="hl sym">(</span><span class="hl kwa">fun</span> i <span class="hl sym">-&gt;</span> write b <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">+</span> read e<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">)</span>
