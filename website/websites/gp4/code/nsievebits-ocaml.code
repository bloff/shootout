<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Christophe TROESTLER</span>
<span class="hl com"> * modified by Mario Pernici</span>
<span class="hl com"> * modified by Vladimir Silyaev</span>
<span class="hl com"> * modified by Stefan Kral</span>
<span class="hl com"> *)</span>

<span class="hl kwa">open</span> Char

<span class="hl kwa">let</span> set_false a i <span class="hl sym">=</span>
  <span class="hl kwa">let</span> ic <span class="hl sym">=</span> i <span class="hl kwa">lsr</span> <span class="hl num">3</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> v <span class="hl sym">=</span> code a.<span class="hl sym">[</span>ic<span class="hl sym">]</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> bit <span class="hl sym">=</span> v <span class="hl kwa">land</span> <span class="hl kwd">lnot</span><span class="hl sym">(</span><span class="hl num">1</span> <span class="hl kwa">lsl</span> <span class="hl sym">(</span>i <span class="hl kwa">land</span> <span class="hl num">0x7</span><span class="hl sym">))</span> <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> v <span class="hl sym">&lt;&gt;</span> bit <span class="hl kwa">then</span> a.<span class="hl sym">[</span>ic<span class="hl sym">] &lt;-</span> unsafe_chr bit

<span class="hl kwa">let</span> nsieve m <span class="hl sym">=</span>
  <span class="hl kwa">let</span> a <span class="hl sym">=</span> String.<span class="hl kwd">make</span> <span class="hl sym">((</span>m <span class="hl kwa">lsr</span> <span class="hl num">3</span><span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl str">'</span><span class="hl esc">\2</span><span class="hl str">55'</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> count <span class="hl sym">=</span> ref <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl kwa">to</span> m <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>code a.<span class="hl sym">[</span>i <span class="hl kwa">lsr</span> <span class="hl num">3</span><span class="hl sym">])</span> <span class="hl kwa">land</span> <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl kwa">lsl</span> <span class="hl sym">(</span>i <span class="hl kwa">land</span> <span class="hl num">7</span><span class="hl sym">)) &gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl sym">(</span>
      incr count<span class="hl sym">;</span>
      <span class="hl kwa">let</span> j <span class="hl sym">=</span> <span class="hl kwd">ref</span><span class="hl sym">(</span>i<span class="hl sym">+</span>i<span class="hl sym">)</span> <span class="hl kwa">in</span>
      <span class="hl kwa">while</span> <span class="hl sym">!</span>j <span class="hl sym">&lt;</span> m <span class="hl kwa">do</span> set_false a <span class="hl sym">!</span>j<span class="hl sym">;</span> j <span class="hl sym">:= !</span>j<span class="hl sym">+</span>i <span class="hl kwa">done</span><span class="hl sym">;</span>
    <span class="hl sym">)</span>
  <span class="hl kwa">done</span><span class="hl sym">;</span>
  <span class="hl sym">!</span>count

<span class="hl kwa">let</span> test n <span class="hl sym">=</span>
  <span class="hl kwa">let</span> m <span class="hl sym">=</span> <span class="hl num">10000</span> <span class="hl kwa">lsl</span> n <span class="hl kwa">in</span>
  Printf.printf <span class="hl str">&quot;Primes up to %8i %8i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl kwd">m</span> <span class="hl sym">(</span>nsieve m<span class="hl sym">)</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl kwa">let</span> n <span class="hl sym">=</span>
    <span class="hl kwa">try</span> <span class="hl kwd">int_of_string</span><span class="hl sym">(</span>Array.get Sys.argv <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">with</span> _ <span class="hl sym">-&gt; (</span>Printf.printf <span class="hl str">&quot;usage: %s N</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> Sys.argv.<span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span> exit <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwa">in</span>
  test n<span class="hl sym">;</span>
  <span class="hl kwa">if</span> n <span class="hl sym">&gt;=</span> <span class="hl num">1</span> <span class="hl kwa">then</span> <span class="hl kwd">test</span><span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">);</span>
  <span class="hl kwa">if</span> n <span class="hl sym">&gt;=</span> <span class="hl num">2</span> <span class="hl kwa">then</span> <span class="hl kwd">test</span><span class="hl sym">(</span>n<span class="hl sym">-</span><span class="hl num">2</span><span class="hl sym">)</span>

