<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Christophe TROESTLER</span>
<span class="hl com"> * modified by Mario Pernici</span>
<span class="hl com"> * modified by Vladimir Silyaev</span>
<span class="hl com"> * modified by Stefan Kral</span>
<span class="hl com"> *)</span>

<span class="hl kwa">open</span> Char

<span class="hl kwa">let</span> set_false a i <span class="hl sym">=</span>
  <span class="hl kwa">let</span> ic <span class="hl sym">=</span> i <span class="hl kwa">lsr</span> <span class="hl num">3</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> v <span class="hl sym">=</span> code a.<span class="hl sym">[</span>ic<span class="hl sym">]</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> bit <span class="hl sym">=</span> v <span class="hl kwa">land</span> <span class="hl kwd">lnot</span><span class="hl sym">(</span><span class="hl num">1</span> <span class="hl kwa">lsl</span> <span class="hl sym">(</span>i <span class="hl kwa">land</span> <span class="hl num">0x7</span><span class="hl sym">))</span> <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> v <span class="hl sym">&lt;&gt;</span> bit <span class="hl kwa">then</span> a.<span class="hl sym">[</span>ic<span class="hl sym">] &lt;-</span> unsafe_chr bit

<span class="hl kwa">let</span> nsieve m <span class="hl sym">=</span>
  <span class="hl kwa">let</span> a <span class="hl sym">=</span> String.<span class="hl kwd">make</span> <span class="hl sym">((</span>m <span class="hl kwa">lsr</span> <span class="hl num">3</span><span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">)</span> '\2<span class="hl com">55' in</span>
<span class="hl com">  let count = ref 0 in</span>
<span class="hl com">  for i = 2 to m - 1 do</span>
<span class="hl com">    if (code a.[i lsr 3]) land (1 lsl (i land 7)) &gt; 0 then (</span>
<span class="hl com">      incr count;</span>
<span class="hl com">      let j = ref(i+i) in</span>
<span class="hl com">      while !j &lt; m do set_false a !j; j := !j+i done;</span>
<span class="hl com">    )</span>
<span class="hl com">  done;</span>
<span class="hl com">  !count</span>
<span class="hl com"></span>
<span class="hl com">let test n =</span>
<span class="hl com">  let m = 10000 lsl n in</span>
<span class="hl com">  Printf.printf &quot;Primes up to %8i %8i\n&quot; m (nsieve m)</span>
<span class="hl com"></span>
<span class="hl com">let () =</span>
<span class="hl com">  let n =</span>
<span class="hl com">    try int_of_string(Array.get Sys.argv 1)</span>
<span class="hl com">    with _ -&gt; (Printf.printf &quot;usage: %s N\n&quot; Sys.argv.(0); exit 2) in</span>
<span class="hl com">  test n;</span>
<span class="hl com">  if n &gt;= 1 then test(n-1);</span>
<span class="hl com">  if n &gt;= 2 then test(n-2)</span>
<span class="hl com"></span>
