<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span>
   Application System
   S at <span class="str">'../../Include/oz/shootout.ozf'</span>

<span class="kwa">define</span>
   <span class="kwa">fun</span> <span class="sym">{</span>Fib One Two<span class="sym">}</span>
      F <span class="sym">=</span> <span class="kwa">fun</span> <span class="sym">{$</span> N<span class="sym">}</span>
         <span class="kwa">if</span> N <span class="sym">&lt;</span> Two <span class="kwa">then</span> One
         <span class="kwa">else</span> <span class="sym">{</span>F N<span class="sym">-</span>One<span class="sym">} + {</span>F N<span class="sym">-</span>Two<span class="sym">}</span> <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">in</span> F <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Tak One<span class="sym">}</span>
      F <span class="sym">=</span> <span class="kwa">fun</span> <span class="sym">{$</span> X Y Z<span class="sym">}</span>
         <span class="kwa">if</span> Y <span class="sym">&lt;</span> X <span class="kwa">then</span> <span class="sym">{</span>F <span class="sym">{</span>F X<span class="sym">-</span>One Y Z<span class="sym">} {</span>F Y<span class="sym">-</span>One Z X<span class="sym">} {</span>F Z<span class="sym">-</span>One X Y<span class="sym">}}</span>
         <span class="kwa">else</span> Z <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">in</span> F <span class="kwa">end</span>

   FibI <span class="sym">= {</span>Fib <span class="num">1   2</span>  <span class="sym">}</span>
   FibF <span class="sym">= {</span>Fib <span class="num">1.0 2.0</span><span class="sym">}</span>
   TakI <span class="sym">= {</span>Tak <span class="num">1</span>  <span class="sym">}</span>
   TakF <span class="sym">= {</span>Tak <span class="num">1.0</span><span class="sym">}</span>

   <span class="kwa">fun</span> <span class="sym">{</span>AckI M N<span class="sym">}</span>
      <span class="kwa">if</span> M <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> N <span class="sym">+</span> <span class="num">1</span>
      elseif N <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">{</span>AckI M<span class="sym">-</span><span class="num">1 1</span><span class="sym">}</span>
      <span class="kwa">else</span> <span class="sym">{</span>AckI M<span class="sym">-</span><span class="num">1</span> <span class="sym">{</span>AckI M N<span class="sym">-</span><span class="num">1</span><span class="sym">}}</span> <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String<span class="sym">.</span>toInt Arg<span class="sym">}</span>
   M <span class="sym">=</span> N<span class="sym">-</span><span class="num">1</span>
   A <span class="sym">=</span> <span class="num">27.0</span> <span class="sym">+ {</span>IntToFloat N<span class="sym">}</span>

   Prefix1 <span class="sym">=</span> &quot;Fib<span class="sym">(</span>&quot; <span class="sym"># {</span>S<span class="sym">.</span>floatToString A <span class="num">1</span><span class="sym">} #</span> &quot;<span class="sym">):</span> &quot;
   Prefix2 <span class="sym">=</span> &quot;Tak<span class="sym">(</span>&quot; <span class="sym">#</span> <span class="num">3</span><span class="sym">*</span>M <span class="sym">#</span> &quot;<span class="sym">,</span>&quot; <span class="sym">#</span> <span class="num">2</span><span class="sym">*</span>M <span class="sym">#</span> &quot;<span class="sym">,</span>&quot; <span class="sym">#</span> M <span class="sym">#</span> &quot;<span class="sym">):</span> &quot;
<span class="kwa">in</span>
   <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;Ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span>&quot; <span class="sym">#</span> N <span class="sym">#</span> &quot;<span class="sym">):</span> &quot; <span class="sym"># {</span>AckI <span class="num">3</span> N<span class="sym">}}</span>
   <span class="sym">{</span>System<span class="sym">.</span>showInfo Prefix1 <span class="sym"># {</span>S<span class="sym">.</span>floatToString <span class="sym">{</span>FibF A<span class="sym">}</span> <span class="num">1</span><span class="sym">} }</span>
   <span class="sym">{</span>System<span class="sym">.</span>showInfo Prefix2 <span class="sym"># {</span>TakI <span class="num">3</span><span class="sym">*</span>M <span class="num">2</span><span class="sym">*</span>M <span class="num">1</span><span class="sym">*</span>M<span class="sym">}}</span>
   <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;Fib<span class="sym">(</span><span class="num">3</span><span class="sym">):</span> &quot; <span class="sym"># {</span>FibI <span class="num">3</span><span class="sym">}}</span>
   <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;Tak<span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span><span class="num">2.0</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">):</span> &quot; <span class="sym"># {</span>S<span class="sym">.</span>floatToString <span class="sym">{</span>TakF <span class="num">3.0 2.0 1.0</span><span class="sym">}</span> <span class="num">1</span><span class="sym">} }</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
