rebol<span class="sym">[</span>
	summary<span class="sym">: [</span>rebol random tom conlin <span class="num">2005</span><span class="sym">-</span><span class="num">11</span><span class="sym">-</span><span class="num">26</span><span class="sym">]</span>
	version <span class="num">0.1</span>
<span class="sym">]</span>
<span class="sym">;</span><span class="kwa">do</span> <span class="sym">%</span>decimal<span class="sym">-</span>pad<span class="sym">.</span>r
decimal<span class="sym">-</span>pad<span class="sym">:</span> func <span class="sym">[</span>d<span class="sym">[</span>number<span class="sym">!]</span> p<span class="sym">[</span>integer<span class="sym">!] /</span>local r s t<span class="sym">][</span>
	d<span class="sym">:</span> to string<span class="sym">!</span> d
	either s<span class="sym">:</span> find<span class="sym">/</span>tail d <span class="str">&quot;.&quot;</span>
		<span class="sym">[</span>   either p <span class="sym">&gt;=</span> length? s
			<span class="sym">[</span>insert<span class="sym">/</span>dup tail s <span class="str">&quot;0&quot;</span> p <span class="sym">-</span> length? s<span class="sym">]</span>
			<span class="sym">[</span>	t<span class="sym">:</span> skip s p
				r<span class="sym">:</span> either <span class="dir">#</span><span class="dstr">&quot;5&quot;</span><span class="dir"> &gt; first t[0][10]</span>
				<span class="kwa">while</span><span class="sym">[</span><span class="kwa">not</span> zero? r<span class="sym">:</span> to integer<span class="sym">!</span> r <span class="sym">/</span> <span class="num">10</span><span class="sym">][</span>
					t<span class="sym">:</span> back t <span class="kwa">if</span> <span class="dir">#</span><span class="dstr">&quot;.&quot;</span><span class="dir"> == first t[t: back t]</span>
					r<span class="sym">: -</span><span class="num">47</span> <span class="sym">+</span> first t
					change t r <span class="slc">// 10</span>
					<span class="kwa">if</span> all<span class="sym">[</span><span class="num">9</span> <span class="sym">&lt;</span> r any<span class="sym">[</span>head? t <span class="dir">#</span><span class="dstr">&quot;-&quot;</span><span class="dir"> == first t]][</span>
						insert d <span class="str">&quot;0&quot;</span> s<span class="sym">:</span> next s
					<span class="sym">]</span>
				<span class="sym">]</span>
				clear skip s p
			<span class="sym">]</span>
		<span class="sym">]</span>
		<span class="sym">[</span>insert tail d <span class="str">&quot;.&quot;</span> insert<span class="sym">/</span>dup tail d <span class="str">&quot;0&quot;</span> p<span class="sym">]</span>
	d
<span class="sym">]</span>

prandom<span class="sym">:</span> context<span class="sym">[</span>
	IM<span class="sym">:</span> <span class="num">139968</span>
	IA<span class="sym">:</span> <span class="num">3877</span>
	IC<span class="sym">:</span> <span class="num">29573</span>
	last<span class="sym">:</span> <span class="num">42.0</span>
	gen<span class="sym">-</span>prandom<span class="sym">:</span> func <span class="sym">[</span>max<span class="sym">[</span>decimal<span class="sym">!]][</span>
		last<span class="sym">:</span>  last <span class="sym">*</span> IA <span class="sym">+</span> IC <span class="slc">// IM</span>
		max <span class="sym">*</span> last <span class="sym">/</span> IM
	<span class="sym">]</span>
	set <span class="str">'advance-prandom func[N [integer!]][loop N[gen-prandom 100.0]]</span>
<span class="str">	set '</span>reset<span class="sym">-</span>prandom does<span class="sym">[</span>last<span class="sym">:</span> <span class="num">42.0</span><span class="sym">]</span>
<span class="sym">]</span>
N<span class="sym">:</span> either N<span class="sym">:</span> system<span class="sym">/</span>script<span class="sym">/</span>args<span class="sym">[</span>N<span class="sym">][</span><span class="num">1</span><span class="sym">]</span>
print decimal<span class="sym">-</span>pad advance<span class="sym">-</span>prandom to integer<span class="sym">!</span> N <span class="num">9</span>
