<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>


<span class="kwb">long</span> fannkuch<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">){</span>
   <span class="kwa">var</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">let</span> perm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
   <span class="kwa">let</span> perm1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
   <span class="kwa">let</span> count <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
   <span class="kwa">let</span> maxPerm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
   <span class="kwa">var</span> maxFlipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">var</span> m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>

   <span class="kwa">for</span><span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> perm1<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>
   <span class="kwa">var</span> r <span class="sym">=</span> n<span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span>true<span class="sym">){</span>
      <span class="slc">// write-out the first 30 permutations</span>
      <span class="kwa">if</span> <span class="sym">(</span>check <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">){</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> print<span class="sym">(</span>perm1<span class="sym">[</span>i<span class="sym">]+</span><span class="num">1</span><span class="sym">);</span>
        println<span class="sym">();</span>
        check<span class="sym">++;</span>
      <span class="sym">}</span>

      <span class="kwa">while</span> <span class="sym">(</span>r <span class="sym">!=</span> <span class="num">1</span><span class="sym">){</span> count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span> r<span class="sym">--; }</span>
      <span class="kwa">if</span> <span class="sym">(! (</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]==</span><span class="num">0</span> <span class="sym">||</span> perm1<span class="sym">[</span>m<span class="sym">] ==</span> m<span class="sym">)){</span>
         <span class="kwa">for</span><span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];</span>
         <span class="kwa">var</span> flipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwb">int</span> k<span class="sym">;</span>
         <span class="kwa">while</span> <span class="sym">( !((</span>k<span class="sym">=</span>perm<span class="sym">[</span><span class="num">0</span><span class="sym">]) ==</span> <span class="num">0</span><span class="sym">) ){</span>
            <span class="kwb">int</span> k2 <span class="sym">=</span> k<span class="sym">+</span><span class="num">1</span> <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">for</span><span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>k2<span class="sym">;</span> i<span class="sym">++){</span>
               <span class="kwa">let</span> temp <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">];</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">];</span> perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">] =</span> temp<span class="sym">;</span>
            <span class="sym">}</span>
            flipsCount<span class="sym">++;</span>
         <span class="sym">}</span>

         <span class="kwa">if</span> <span class="sym">(</span>flipsCount <span class="sym">&gt;</span> maxFlipsCount<span class="sym">){</span>
            maxFlipsCount <span class="sym">=</span> flipsCount<span class="sym">;</span>
            <span class="kwa">for</span><span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> maxPerm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];</span>
         <span class="sym">}</span>
      <span class="sym">}</span>

      <span class="kwa">while</span> <span class="sym">(</span>true<span class="sym">){</span>
         <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span> <span class="kwa">return</span> maxFlipsCount<span class="sym">;</span>
         <span class="kwa">let</span> perm0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
         <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> r<span class="sym">){</span>
            <span class="kwa">let</span> j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>j<span class="sym">];</span>
            i <span class="sym">=</span> j<span class="sym">;</span>
         <span class="sym">}</span>
         perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0<span class="sym">;</span>

         count<span class="sym">[</span>r<span class="sym">] =</span> count<span class="sym">[</span>r<span class="sym">] -</span> <span class="num">1</span><span class="sym">;</span>
         <span class="kwa">if</span> <span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
         r<span class="sym">++;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">){</span>
   <span class="kwa">let</span> n <span class="sym">=</span> Integer<span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
   println<span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;) = &quot;</span> <span class="sym">+</span> fannkuch<span class="sym">(</span>n<span class="sym">));</span>
<span class="sym">}</span>
