<span class="hl slc">-- The Great Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">-- Fixed by Pascal Obry on 2005/03/17</span>

<span class="hl kwa">with</span> Ada.Integer_Text_Io<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Integer_Text_Io<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Text_Io<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Text_Io<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada.Command_Line<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada.Command_Line<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Message <span class="hl kwa">is</span>
   <span class="hl kwa">type</span> Link<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Link_Access <span class="hl kwa">is access</span> Link<span class="hl sym">;</span>
   <span class="hl kwa">task type</span> Link <span class="hl sym">(</span>Next_Link <span class="hl sym">:</span> Link_Access<span class="hl sym">;</span> Num_Iter <span class="hl sym">:</span> <span class="hl kwb">Positive</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">pragma</span> Storage_Size <span class="hl sym">(</span><span class="hl num">100000</span><span class="hl sym">);</span>
      <span class="hl kwa">entry</span> Receive <span class="hl sym">(</span>I <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Integer</span><span class="hl sym">);</span>
   <span class="hl kwa">end</span> Link<span class="hl sym">;</span>

   <span class="hl kwa">task body</span> Link <span class="hl kwa">is</span>
      Val     <span class="hl sym">:</span> <span class="hl kwb">Integer</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      New_Val <span class="hl sym">:</span> <span class="hl kwb">Integer</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> iter <span class="hl kwa">in</span> <span class="hl num">1</span> .. Num_Iter <span class="hl kwa">loop</span>
         <span class="hl kwa">accept</span> Receive <span class="hl sym">(</span>I <span class="hl sym">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Integer</span><span class="hl sym">)</span> <span class="hl kwa">do</span>
            New_Val <span class="hl sym">:=</span> I<span class="hl sym">;</span>
         <span class="hl kwa">end</span> Receive<span class="hl sym">;</span>

         <span class="hl kwa">if</span> Next_Link <span class="hl sym">=</span> <span class="hl kwa">null then</span>
            Val <span class="hl sym">:=</span> Val <span class="hl sym">+</span> New_Val <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">else</span>
            Val <span class="hl sym">:=</span> New_Val <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
            Next_Link.Receive <span class="hl sym">(</span>Val<span class="hl sym">);</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>

      <span class="hl kwa">if</span> Next_Link <span class="hl sym">=</span> <span class="hl kwa">null then</span>
         Put <span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Val<span class="hl sym">,</span> Width <span class="hl sym">=&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>
         New_Line<span class="hl sym">;</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Link<span class="hl sym">;</span>

   Num_Tasks <span class="hl sym">:</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> <span class="hl num">500</span><span class="hl sym">;</span>
   Num_Iter  <span class="hl sym">:</span> <span class="hl kwb">Positive</span> <span class="hl sym">:=</span> <span class="hl num">200</span><span class="hl sym">;</span>
   New_Task  <span class="hl sym">:</span> Link_Access<span class="hl sym">;</span>
   Last_Task <span class="hl sym">:</span> Link_Access <span class="hl sym">:=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> Argument_Count <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      Num_Iter <span class="hl sym">:=</span> <span class="hl kwb">Positive</span><span class="hl sym">'</span>Value <span class="hl sym">(</span>Argument <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">));</span>
   <span class="hl kwa">end if</span><span class="hl sym">;</span>

   <span class="hl kwa">for</span> Item <span class="hl kwa">in</span> <span class="hl num">1</span> .. Num_Tasks <span class="hl kwa">loop</span>
      New_Task  <span class="hl sym">:=</span> <span class="hl kwa">new</span> Link <span class="hl sym">(</span>Last_Task<span class="hl sym">,</span> Num_Iter<span class="hl sym">);</span>
      Last_Task <span class="hl sym">:=</span> New_Task<span class="hl sym">;</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>

   <span class="hl kwa">for</span> iter <span class="hl kwa">in</span> <span class="hl num">1</span> .. Num_Iter <span class="hl kwa">loop</span>
      New_Task.Receive <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> Message<span class="hl sym">;</span>

