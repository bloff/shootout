<span class="com">&quot;The Computer Language Shootout</span>
<span class="com"> http://shootout.alioth.debian.org/</span>
<span class="com"> contributed by Isaac Gouy&quot;</span>
<span class="com"></span>
<span class="com">!String methodsFor: 'regex'!</span>
<span class="com"></span>
<span class="com">copyFrom: from to: to replacingAllRegex: pattern with: str</span>
<span class="com">    &quot;Replaces all occurances of pattern between boundaries with specified string&quot;</span>
<span class="com"></span>
<span class="com">    | res idx regex beg end regs |</span>
<span class="com">    regex := pattern asRegex.</span>
<span class="com">    res := WriteStream on: (String new: to - from + 1).</span>
<span class="com">    idx := from.</span>
<span class="com">    [</span>
<span class="com">        regs := self searchRegex: regex from: idx to: to.</span>
<span class="com">	regs matched &quot;BUG FIX&quot;</span>
<span class="com">    ] whileTrue: [</span>
<span class="com">	beg := regs from.</span>
<span class="com">	end := regs to.</span>
<span class="com">	res next: beg - idx putAll: self startingAt: idx.</span>
<span class="com">	res nextPutAll: (str bindWithArguments: regs).</span>
<span class="com">	idx := end + 1.</span>
<span class="com">	beg &gt; end ifTrue: [ res nextPut: (self at: idx). idx := idx + 1 ].</span>
<span class="com">	idx &gt; self size ifTrue: [ ^res contents ].</span>
<span class="com">    ].</span>
<span class="com">    res next: to - idx + 1 putAll: self startingAt: idx.</span>
<span class="com"></span>
<span class="com">    ^res contents ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com"></span>
<span class="com">| s size1 size2 |</span>
<span class="com">s := (FileStream stdin bufferSize: 4096) contents.</span>
<span class="com">size1 := s size.</span>
<span class="com"></span>
<span class="com">&quot;remove FASTA sequence descriptions and new-lines&quot;</span>
<span class="com">s := s copyReplacingAllRegex: '&gt;.*\n|\n' with: ''.</span>
<span class="com">size2 := s size.</span>
<span class="com"></span>
<span class="com">&quot;regex match&quot;</span>
<span class="com">(OrderedCollection new</span>
<span class="com">   add: 'agggtaaa|tttaccct';</span>
<span class="com">   add: '[cgt]gggtaaa|tttaccc[acg]';</span>
<span class="com">   add: 'a[act]ggtaaa|tttacc[agt]t';</span>
<span class="com">   add: 'ag[act]gtaaa|tttac[agt]ct';</span>
<span class="com">   add: 'agg[act]taaa|ttta[agt]cct';</span>
<span class="com">   add: 'aggg[acg]aaa|ttt[cgt]ccct';</span>
<span class="com">   add: 'agggt[cgt]aa|tt[acg]accct';</span>
<span class="com">   add: 'agggta[cgt]a|t[acg]taccct';</span>
<span class="com">   add: 'agggtaa[cgt]|[acg]ttaccct'; yourself)</span>
<span class="com"></span>
<span class="com">   do: [:each| (each, ' ', (s occurrencesOfRegex: each) printString) displayNl].</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">&quot;regex substitution&quot;</span>
<span class="com">(OrderedCollection new</span>
<span class="com">   add: (Association key: 'B' value: '(c|g|t)');</span>
<span class="com">   add: (Association key: 'D' value: '(a|g|t)');</span>
<span class="com">   add: (Association key: 'H' value: '(a|c|t)');</span>
<span class="com">   add: (Association key: 'K' value: '(g|t)');</span>
<span class="com">   add: (Association key: 'M' value: '(a|c)');</span>
<span class="com">   add: (Association key: 'N' value: '(a|c|g|t)');</span>
<span class="com">   add: (Association key: 'R' value: '(a|g)');</span>
<span class="com">   add: (Association key: 'S' value: '(c|g)');</span>
<span class="com">   add: (Association key: 'V' value: '(a|c|g)');</span>
<span class="com">   add: (Association key: 'W' value: '(a|t)');</span>
<span class="com">   add: (Association key: 'Y' value: '(c|t)'); yourself)</span>
<span class="com"></span>
<span class="com">   do: [:each| s := s copyReplacingAllRegex: each key with: each value].</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">'' displayNl. size1 displayNl. size2 displayNl. s size displayNl !</span>
