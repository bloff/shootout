<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com"> http://shootout.alioth.debian.org/</span>
<span class="com"> contributed by Isaac Gouy *&quot;</span>

<span class="sym">!</span>String methodsFor<span class="sym">:</span> <span class="str">'regex'</span><span class="sym">!</span>

copyFrom<span class="sym">:</span> from to<span class="sym">:</span> to replacingAllRegex<span class="sym">:</span> pattern with<span class="sym">:</span> str
    <span class="com">&quot;* Replaces all occurances of pattern between boundaries with specified string *&quot;</span>

    <span class="sym">|</span> res idx regex beg end regs <span class="sym">|</span>
    regex <span class="sym">:=</span> pattern asRegex<span class="sym">.</span>
    res <span class="sym">:=</span> WriteStream on<span class="sym">: (</span>String new<span class="sym">:</span> to <span class="sym">-</span> from <span class="sym">+</span> <span class="num">1</span><span class="sym">).</span>
    idx <span class="sym">:=</span> from<span class="sym">.</span>
    <span class="sym">[</span>
        regs <span class="sym">:=</span> <span class="kwa">self</span> searchRegex<span class="sym">:</span> regex from<span class="sym">:</span> idx to<span class="sym">:</span> to<span class="sym">.</span>
	regs matched &quot;BUG FIX&quot;
    <span class="sym">]</span> whileTrue<span class="sym">: [</span>
	beg <span class="sym">:=</span> regs from<span class="sym">.</span>
	end <span class="sym">:=</span> regs to<span class="sym">.</span>
	res next<span class="sym">:</span> beg <span class="sym">-</span> idx putAll<span class="sym">:</span> <span class="kwa">self</span> startingAt<span class="sym">:</span> idx<span class="sym">.</span>
	res nextPutAll<span class="sym">: (</span>str bindWithArguments<span class="sym">:</span> regs<span class="sym">).</span>
	idx <span class="sym">:=</span> end <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
	beg <span class="sym">&gt;</span> end ifTrue<span class="sym">: [</span> res nextPut<span class="sym">: (</span><span class="kwa">self</span> at<span class="sym">:</span> idx<span class="sym">).</span> idx <span class="sym">:=</span> idx <span class="sym">+</span> <span class="num">1</span> <span class="sym">].</span>
	idx <span class="sym">&gt;</span> <span class="kwa">self</span> size ifTrue<span class="sym">: [ ^</span>res contents <span class="sym">].</span>
    <span class="sym">].</span>
    res next<span class="sym">:</span> to <span class="sym">-</span> idx <span class="sym">+</span> <span class="num">1</span> putAll<span class="sym">:</span> <span class="kwa">self</span> startingAt<span class="sym">:</span> idx<span class="sym">.</span>

    <span class="sym">^</span>res contents <span class="sym">! !</span>



<span class="sym">|</span> s size1 size2 <span class="sym">|</span>
s <span class="sym">:= (</span>FileStream stdin bufferSize<span class="sym">:</span> <span class="num">4096</span><span class="sym">)</span> contents<span class="sym">.</span>
size1 <span class="sym">:=</span> s size<span class="sym">.</span>

<span class="com">&quot;* remove FASTA sequence descriptions and new-lines *&quot;</span>
s <span class="sym">:=</span> s copyReplacingAllRegex<span class="sym">:</span> <span class="str">'&gt;.*\n|\n'</span> with<span class="sym">:</span> <span class="str">''</span><span class="sym">.</span>
size2 <span class="sym">:=</span> s size<span class="sym">.</span>

<span class="com">&quot;* regex match *&quot;</span>
<span class="sym">(</span>OrderedCollection new
   add<span class="sym">:</span> <span class="str">'agggtaaa|tttaccct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'[cgt]gggtaaa|tttaccc[acg]'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'a[act]ggtaaa|tttacc[agt]t'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'ag[act]gtaaa|tttac[agt]ct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'agg[act]taaa|ttta[agt]cct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'aggg[acg]aaa|ttt[cgt]ccct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'agggt[cgt]aa|tt[acg]accct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'agggta[cgt]a|t[acg]taccct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'agggtaa[cgt]|[acg]ttaccct'</span><span class="sym">;</span> yourself<span class="sym">)</span>

   do<span class="sym">: [:</span>each<span class="sym">| (</span>each<span class="sym">,</span> <span class="str">' '</span><span class="sym">, (</span>s occurrencesOfRegex<span class="sym">:</span> each<span class="sym">)</span> printString<span class="sym">)</span> displayNl<span class="sym">].</span>


<span class="com">&quot;* regex substitution *&quot;</span>
<span class="sym">(</span>OrderedCollection new
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'B'</span> value<span class="sym">:</span> <span class="str">'(c|g|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'D'</span> value<span class="sym">:</span> <span class="str">'(a|g|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'H'</span> value<span class="sym">:</span> <span class="str">'(a|c|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'K'</span> value<span class="sym">:</span> <span class="str">'(g|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'M'</span> value<span class="sym">:</span> <span class="str">'(a|c)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'N'</span> value<span class="sym">:</span> <span class="str">'(a|c|g|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'R'</span> value<span class="sym">:</span> <span class="str">'(a|g)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'S'</span> value<span class="sym">:</span> <span class="str">'(c|g)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'V'</span> value<span class="sym">:</span> <span class="str">'(a|c|g)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'W'</span> value<span class="sym">:</span> <span class="str">'(a|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'Y'</span> value<span class="sym">:</span> <span class="str">'(c|t)'</span><span class="sym">);</span> yourself<span class="sym">)</span>

   do<span class="sym">: [:</span>each<span class="sym">|</span> s <span class="sym">:=</span> s copyReplacingAllRegex<span class="sym">:</span> each key with<span class="sym">:</span> each value<span class="sym">].</span>


<span class="str">''</span> displayNl<span class="sym">.</span> size1 displayNl<span class="sym">.</span> size2 displayNl<span class="sym">.</span> s size displayNl <span class="sym">!</span>
