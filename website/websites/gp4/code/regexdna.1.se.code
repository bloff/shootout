<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Shotout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Leland McInnes</span>
<span class="hl slc">--</span>

<span class="hl kwa">class</span> REGEXDNA

insert
    REGULAR_EXPRESSION_BUILDER

creation
    make

<span class="hl kwa">feature</span> <span class="hl sym">{</span>ANY<span class="hl sym">}</span>

    make <span class="hl kwa">is</span>
            <span class="hl slc">-- Perform regex-dna benchmark</span>
        <span class="hl kwa">local</span>
            initial_length<span class="hl sym">,</span> cleaned_length<span class="hl sym">,</span> final_length <span class="hl sym">:</span> <span class="hl kwb">INTEGER</span>
            cleaning_regex <span class="hl sym">:</span> REGULAR_EXPRESSION
        <span class="hl kwa">do</span>
            <span class="hl kwa">create</span> sequence.make_empty
            io.<span class="hl kwd">read_tail_in</span><span class="hl sym">(</span>sequence<span class="hl sym">)</span>

            initial_length <span class="hl sym">:=</span> sequence.upper

            cleaning_regex <span class="hl sym">:=</span> <span class="hl kwd">convert_posix_pattern</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;.*%N|%N&quot;</span><span class="hl sym">)</span>
            <span class="hl kwa">check</span>
                cleaning_regex <span class="hl sym">/=</span> Void
            <span class="hl kwa">end</span>

            cleaning_regex.<span class="hl kwd">prepare_substitution</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>
            cleaning_regex.<span class="hl kwd">substitute_all_in</span><span class="hl sym">(</span>sequence<span class="hl sym">)</span>

            cleaned_length <span class="hl sym">:=</span> sequence.count

            count_variants
            expand_patterns

            final_length <span class="hl sym">:=</span> sequence.count

            io.put_new_line
            io.<span class="hl kwd">put_integer</span><span class="hl sym">(</span>initial_length<span class="hl sym">)</span>
            io.put_new_line
            io.<span class="hl kwd">put_integer</span><span class="hl sym">(</span>cleaned_length<span class="hl sym">)</span>
            io.put_new_line
            io.<span class="hl kwd">put_integer</span><span class="hl sym">(</span>final_length<span class="hl sym">)</span>
            io.put_new_line
        <span class="hl kwa">end</span>

    count_variants <span class="hl kwa">is</span>
            <span class="hl slc">-- Count the number of occurences of each variant pattern</span>
        <span class="hl kwa">local</span>
            i<span class="hl sym">,</span> count <span class="hl sym">:</span> <span class="hl kwb">INTEGER</span>
            match_pattern <span class="hl sym">:</span> REGULAR_EXPRESSION
            variants <span class="hl sym">:</span> ARRAY<span class="hl sym">[</span>STRING<span class="hl sym">]</span>
        <span class="hl kwa">do</span>
            variants <span class="hl sym">:= &lt;&lt;</span>
                          <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span>
                          <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
                          <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
                          <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
                          <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
                          <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
                          <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
                          <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
                          <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
                          <span class="hl sym">&gt;&gt;</span>

            <span class="hl kwa">from</span>
                i <span class="hl sym">:=</span> variants.lower
            until
                i <span class="hl sym">&gt;</span> variants.upper
            <span class="hl kwa">loop</span>
                match_pattern <span class="hl sym">:=</span> <span class="hl kwd">convert_posix_pattern</span><span class="hl sym">(</span>variants.<span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">))</span>
                <span class="hl kwa">check</span>
                    match_pattern <span class="hl sym">/=</span> Void
                <span class="hl kwa">end</span>

                <span class="hl kwa">from</span>
                    count <span class="hl sym">:=</span> <span class="hl num">0</span>
                until
                    <span class="hl kwa">not</span> match_pattern.<span class="hl kwd">match_next</span><span class="hl sym">(</span>sequence<span class="hl sym">)</span>
                <span class="hl kwa">loop</span>
                    count <span class="hl sym">:=</span> count <span class="hl sym">+</span> <span class="hl num">1</span>
                <span class="hl kwa">end</span>

                io.<span class="hl kwd">put_string</span><span class="hl sym">(</span>variants.<span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">) +</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">)</span>
                io.<span class="hl kwd">put_integer</span><span class="hl sym">(</span>count<span class="hl sym">)</span>
                io.put_new_line

                i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
            <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>

    expand_patterns <span class="hl kwa">is</span>
            <span class="hl slc">-- Expand IUB code alternatives</span>
        <span class="hl kwa">local</span>
            i <span class="hl sym">:</span> <span class="hl kwb">INTEGER</span>
            iub_code <span class="hl sym">:</span> REGULAR_EXPRESSION
            iub_code_patterns<span class="hl sym">,</span> replacement_patterns <span class="hl sym">:</span> ARRAY<span class="hl sym">[</span>STRING<span class="hl sym">]</span>
        <span class="hl kwa">do</span>
            iub_code_patterns <span class="hl sym">:= &lt;&lt;</span>
                                   <span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span>
                                   <span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span>
                                   <span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span>
                                   <span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">&gt;&gt;</span>
            replacement_patterns <span class="hl sym">:= &lt;&lt;</span>
                                      <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">,</span>
                                      <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">,</span>
                                      <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">,</span>
                                      <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;(c|t)&quot;</span>
                                      <span class="hl sym">&gt;&gt;</span>

            <span class="hl kwa">from</span>
                i <span class="hl sym">:=</span> iub_code_patterns.lower
            until
                i <span class="hl sym">&gt;</span> iub_code_patterns.upper
            <span class="hl kwa">loop</span>
                iub_code <span class="hl sym">:=</span> <span class="hl kwd">convert_posix_pattern</span><span class="hl sym">(</span>iub_code_patterns.<span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">))</span>
                <span class="hl kwa">check</span>
                    iub_code <span class="hl sym">/=</span> Void
                <span class="hl kwa">end</span>
                iub_code.<span class="hl kwd">prepare_substitution</span><span class="hl sym">(</span>replacement_patterns.<span class="hl kwd">item</span><span class="hl sym">(</span>i<span class="hl sym">))</span>
                iub_code.<span class="hl kwd">substitute_all_in</span><span class="hl sym">(</span>sequence<span class="hl sym">)</span>

                i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span>
            <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>

<span class="hl kwa">feature</span> <span class="hl sym">{</span>NONE<span class="hl sym">}</span> <span class="hl slc">-- Implementation</span>

    sequence <span class="hl sym">:</span> STRING

<span class="hl kwa">end</span>
