<span class="hl com">/* The Computer Language Shootout Benchmarks</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Xavier Oswald</span>
<span class="hl com">*/</span>

Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> REGEXDNA<span class="hl sym">;</span>

  <span class="hl sym">-</span> external <span class="hl sym">:=</span>
`
#define __USE_STRING_INLINES
#include <span class="hl sym">&lt;</span>pcre.h<span class="hl sym">&gt;</span>
pcre <span class="hl sym">*</span>re<span class="hl sym">;</span>
pcre_extra <span class="hl sym">*</span>re_ex<span class="hl sym">;</span>
int re_eo<span class="hl sym">;</span>
const char <span class="hl sym">*</span>re_e<span class="hl sym">;</span>
`<span class="hl sym">;</span>

Section Inherit

  <span class="hl sym">-</span> parent_object<span class="hl sym">:</span>OBJECT <span class="hl sym">:=</span> OBJECT<span class="hl sym">;</span>

Section Public

  <span class="hl sym">-</span> mem<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">] :=</span> NATIVE_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">]</span>.create <span class="hl num">3</span><span class="hl sym">;</span>

  <span class="hl sym">-</span> fb_subst<span class="hl sym">(</span>dst<span class="hl sym">,</span>src<span class="hl sym">:</span>STRING<span class="hl sym">,</span> p<span class="hl sym">:</span>STRING_CONSTANT<span class="hl sym">,</span>r<span class="hl sym">:</span>STRING_CONSTANT<span class="hl sym">) :</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl slc">// Substitute pattern p with replacement r, copying from src to dst buffer.</span>
  <span class="hl sym">( +</span> pos<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

    pcre_compile p<span class="hl sym">;</span>
    pcre_study<span class="hl sym">;</span>
    dst.clear<span class="hl sym">;</span>
    pos <span class="hl sym">:=</span> src.lower<span class="hl sym">;</span>
    <span class="hl sym">{</span>pcre_exec src position pos mem mem <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
      pos.to <span class="hl sym">(</span>mem.item <span class="hl num">0</span><span class="hl sym">)</span> do <span class="hl sym">{</span> j<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
        dst.add_last <span class="hl sym">(</span>src.item j<span class="hl sym">);</span>
      <span class="hl sym">};</span>
      dst.append r<span class="hl sym">;</span>
      pos  <span class="hl sym">:=</span> mem.item <span class="hl num">1</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>
    <span class="hl slc">// Copy end.</span>
    pos.to <span class="hl sym">(</span>src.upper<span class="hl sym">)</span> do <span class="hl sym">{</span> j<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      dst.add_last <span class="hl sym">(</span>src.item j<span class="hl sym">);</span>
    <span class="hl sym">};</span>
    dst.count
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> fb_countmatches <span class="hl sym">(</span>src<span class="hl sym">:</span>STRING<span class="hl sym">,</span> p<span class="hl sym">:</span>STRING_CONSTANT<span class="hl sym">) :</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl slc">// Count all matches with pattern p in src buffer.</span>
  <span class="hl sym">( +</span> pos<span class="hl sym">,</span>count<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

    pcre_compile p<span class="hl sym">;</span>
    pcre_study<span class="hl sym">;</span>
    pos <span class="hl sym">:=</span> src.lower<span class="hl sym">;</span>
    <span class="hl sym">{</span>pcre_exec src position pos mem mem <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">}</span>.while_do <span class="hl sym">{</span>
      pos <span class="hl sym">:=</span> mem.item <span class="hl num">1</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      count <span class="hl sym">:=</span> count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>
    count
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> variants<span class="hl sym">:</span>FAST_ARRAY<span class="hl sym">[</span>STRING_CONSTANT<span class="hl sym">] :=</span>
  <span class="hl sym">( +</span> result<span class="hl sym">:</span>FAST_ARRAY<span class="hl sym">[</span>STRING_CONSTANT<span class="hl sym">];</span>

    result <span class="hl sym">:=</span> FAST_ARRAY<span class="hl sym">[</span>STRING_CONSTANT<span class="hl sym">]</span>.create_with_capacity <span class="hl num">9</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">;</span>         result.add_last <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl sym">;</span>
    result
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> subst<span class="hl sym">:</span>FAST_ARRAY<span class="hl sym">[</span>STRING_CONSTANT<span class="hl sym">] :=</span>
  <span class="hl sym">( +</span> result<span class="hl sym">:</span>FAST_ARRAY<span class="hl sym">[</span>STRING_CONSTANT<span class="hl sym">];</span>

    result <span class="hl sym">:=</span> FAST_ARRAY<span class="hl sym">[</span>STRING_CONSTANT<span class="hl sym">]</span>.create_with_capacity <span class="hl num">22</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;B&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;D&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;H&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;K&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;M&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;N&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;R&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;S&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;V&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;W&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">;</span>
    result.add_last <span class="hl str">&quot;Y&quot;</span><span class="hl sym">;</span> result.add_last <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">;</span>
    result
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> string_tmp<span class="hl sym">:</span>STRING <span class="hl sym">:=</span> STRING.create <span class="hl num">512</span><span class="hl sym">;</span>

  <span class="hl sym">-</span> main <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> seq<span class="hl sym">:</span>FAST_ARRAY<span class="hl sym">[</span>STRING<span class="hl sym">];</span>
    <span class="hl sym">+</span> ilen<span class="hl sym">,</span> clen<span class="hl sym">,</span> slen<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> flip<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

    seq <span class="hl sym">:=</span> FAST_ARRAY<span class="hl sym">[</span>STRING<span class="hl sym">]</span>.create_with_capacity <span class="hl num">2</span><span class="hl sym">;</span>
    seq.add_last <span class="hl sym">(</span>STRING.create <span class="hl sym">(</span><span class="hl num">5</span>.mb<span class="hl sym">));</span>
    seq.add_last <span class="hl sym">(</span>STRING.create <span class="hl sym">(</span><span class="hl num">5</span>.mb<span class="hl sym">));</span>
    read_stdin <span class="hl sym">(</span>seq.first<span class="hl sym">);</span>

    ilen <span class="hl sym">:=</span> seq.first.count<span class="hl sym">;</span>

    clen <span class="hl sym">:=</span> fb_subst <span class="hl sym">(</span>seq.second<span class="hl sym">,</span>seq.first<span class="hl sym">,</span> <span class="hl str">&quot;&gt;.*|\n&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>

    <span class="hl sym">(</span>variants.lower<span class="hl sym">)</span>.to <span class="hl sym">(</span>variants.upper<span class="hl sym">)</span> do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      string_tmp.append <span class="hl sym">(</span>variants.item i<span class="hl sym">);</span>
      string_tmp.add_last <span class="hl str">' '</span><span class="hl sym">;</span>
      fb_countmatches <span class="hl sym">(</span>seq.second<span class="hl sym">,</span> variants.item i<span class="hl sym">)</span>.append_in string_tmp<span class="hl sym">;</span>
      string_tmp.add_last <span class="hl str">'\n'</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>

    flip <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl sym">(</span>subst.lower<span class="hl sym">)</span>.to <span class="hl sym">(</span>subst.upper<span class="hl sym">)</span> by <span class="hl num">2</span> do <span class="hl sym">{</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      slen <span class="hl sym">:=</span> fb_subst<span class="hl sym">(</span>seq.item <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">-</span>flip<span class="hl sym">),</span> seq.item flip<span class="hl sym">,</span> subst.item i<span class="hl sym">,</span> subst.item <span class="hl sym">(</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">));</span>
      flip <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">-</span>flip<span class="hl sym">;</span>
    <span class="hl sym">};</span>
    string_tmp.add_last <span class="hl str">'\n'</span><span class="hl sym">;</span>
    ilen.append_in string_tmp<span class="hl sym">;</span>
    string_tmp.add_last <span class="hl str">'\n'</span><span class="hl sym">;</span>
    clen.append_in string_tmp<span class="hl sym">;</span>
    string_tmp.add_last <span class="hl str">'\n'</span><span class="hl sym">;</span>
    slen.append_in string_tmp<span class="hl sym">;</span>
    string_tmp.println<span class="hl sym">;</span>
  <span class="hl sym">);</span>

Section Private

  <span class="hl sym">-</span> read_stdin str<span class="hl sym">:</span>STRING <span class="hl sym">&lt;-</span>
  <span class="hl slc">// BS: put this function in library...</span>
  <span class="hl sym">( +</span> storage<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>CHARACTER<span class="hl sym">];</span>
    <span class="hl sym">+</span> n<span class="hl sym">,</span>cap<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">{</span>
      cap <span class="hl sym">:=</span> str.capacity<span class="hl sym">;</span>
      <span class="hl sym">((</span>cap <span class="hl sym">-</span> str.count<span class="hl sym">) &lt;</span> <span class="hl num">1024</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
        cap <span class="hl sym">:=</span> cap <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">;</span>
        str.set_capacity cap<span class="hl sym">;</span>
      <span class="hl sym">};</span>
      storage <span class="hl sym">:=</span> str.storage <span class="hl sym">+</span> str.upper<span class="hl sym">;</span>
      n <span class="hl sym">:=</span> `fread<span class="hl sym">(</span>&#64;storage<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span>&#64;cap<span class="hl sym">,</span>stdin<span class="hl sym">)</span>`<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
      str.set_count <span class="hl sym">(</span>str.count<span class="hl sym">+</span>n<span class="hl sym">);</span>
    <span class="hl sym">}</span>.do_until <span class="hl sym">{</span>n <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">};</span>
  <span class="hl sym">);</span>

  <span class="hl slc">//</span>
  <span class="hl slc">// External Function.</span>
  <span class="hl slc">//</span>

  <span class="hl sym">-</span> pcre_compile p<span class="hl sym">:</span>STRING_CONSTANT <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> storage<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>CHARACTER<span class="hl sym">];</span>
    storage <span class="hl sym">:=</span> p.storage<span class="hl sym">;</span>
    `re <span class="hl sym">=</span> pcre_compile<span class="hl sym">(</span>&#64;storage<span class="hl sym">,</span> PCRE_CASELESS<span class="hl sym">, &amp;</span>re_e<span class="hl sym">, &amp;</span>re_eo<span class="hl sym">,</span> NULL<span class="hl sym">)</span>`<span class="hl sym">;</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> pcre_study <span class="hl sym">&lt;-</span>
  <span class="hl sym">(</span>
    `re_ex <span class="hl sym">=</span> pcre_study<span class="hl sym">(</span>re<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, &amp;</span>re_e<span class="hl sym">)</span>`<span class="hl sym">;</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> pcre_exec src<span class="hl sym">:</span>STRING position pos<span class="hl sym">:</span>INTEGER mem m<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>INTEGER<span class="hl sym">] :</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> storage<span class="hl sym">:</span>NATIVE_ARRAY<span class="hl sym">[</span>CHARACTER<span class="hl sym">];</span>
    <span class="hl sym">+</span> len<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    storage <span class="hl sym">:=</span> src.storage<span class="hl sym">;</span>
    len <span class="hl sym">:=</span> src.count<span class="hl sym">;</span>
    `pcre_exec<span class="hl sym">(</span>re<span class="hl sym">,</span> re_ex<span class="hl sym">,</span> &#64;storage<span class="hl sym">,</span> &#64;len<span class="hl sym">,</span> &#64;pos<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> &#64;m<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">)</span>`<span class="hl sym">:</span>INTEGER
  <span class="hl sym">);</span>
