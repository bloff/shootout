<span class="slc">' The Computer Language Shootout</span>
<span class="slc">' http://shootout.alioth.debian.org/</span>
<span class="slc">' contributed by Antoni Gual 5/2006</span>
<span class="slc">'</span>
#include <span class="str">&quot;crt.bi&quot;</span>
option explicit
option escape
<span class="kwa">dim</span> shared p <span class="kwa">as</span> uinteger ptr
<span class="slc">'</span>
<span class="slc">'----------------------------------------------</span>
<span class="kwa">sub</span> dosieve<span class="sym">(</span>m<span class="sym">)</span>
<span class="kwa">dim</span> maxf<span class="sym">,</span>i<span class="sym">,</span>inc<span class="sym">,</span>nn<span class="sym">,</span>ni
maxf<span class="sym">=</span>cint<span class="sym">(</span>sqr<span class="sym">(</span>m<span class="sym">))+</span><span class="num">1</span>
i<span class="sym">=</span><span class="num">3</span>
<span class="kwa">while</span> i<span class="sym">&lt;=</span> maxf
 nn<span class="sym">=</span>i<span class="sym">*</span><span class="num">3</span> <span class="sym">:</span>ni<span class="sym">=</span>i<span class="sym">*</span><span class="num">2</span>
 <span class="kwa">while</span> nn<span class="sym">&lt;=</span>m
  p<span class="sym">[</span>nn\<span class="num">64</span><span class="sym">]</span> <span class="kwa">or</span><span class="sym">=</span> <span class="num">1</span> shl<span class="sym">((</span>nn <span class="kwa">and</span> <span class="num">63</span><span class="sym">)</span>\<span class="num">2</span><span class="sym">)</span>
  nn<span class="sym">+=</span>ni
 wend
 do <span class="sym">:</span>i<span class="sym">+=</span><span class="num">2</span><span class="sym">:</span>loop <span class="kwa">while</span> <span class="sym">(</span>p<span class="sym">[</span>i\<span class="num">64</span><span class="sym">])</span> <span class="kwa">and</span> <span class="sym">(</span><span class="num">1</span> shl<span class="sym">((</span>i <span class="kwa">and</span> <span class="num">63</span><span class="sym">)</span>\<span class="num">2</span><span class="sym">))</span>
wend
<span class="kwa">end sub</span>
<span class="slc">'</span>
<span class="slc">'-----------------------------------------------</span>
<span class="kwa">function</span> bitcount<span class="sym">(</span>u <span class="kwa">as</span> uinteger<span class="sym">)</span>
 <span class="kwa">dim</span> uc <span class="kwa">as</span> uinteger
 uc<span class="sym">=</span> u<span class="sym">-((</span>u shr <span class="num">1</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">&amp;</span>o33333333333<span class="sym">)-((</span>u shr <span class="num">2</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">&amp;</span>o11111111111<span class="sym">)</span>
 return <span class="sym">((</span>uc<span class="sym">+(</span>uc shr <span class="num">3</span><span class="sym">))</span> <span class="kwa">and</span> <span class="sym">&amp;</span>o30707070707<span class="sym">)</span> mod <span class="num">63</span>
<span class="kwa">end function</span>
<span class="slc">'</span>
<span class="slc">'-----------------------------------------------</span>
<span class="kwa">sub</span> countprimes <span class="sym">(</span>m<span class="sym">)</span>
<span class="kwa">dim</span> cnt<span class="sym">,</span>i<span class="sym">,</span>m1<span class="sym">,</span>m2<span class="sym">,</span>m3<span class="sym">,</span>cnt1<span class="sym">,</span>cnt2<span class="sym">,</span>n2<span class="sym">,</span>n3
<span class="kwa">dim</span>  a$<span class="sym">=</span><span class="str">&quot;Primes up to ######## ########&quot;</span>
  n3<span class="sym">=</span>m\<span class="num">4</span>\<span class="num">64</span>
  m3<span class="sym">=((</span>m\<span class="num">4</span><span class="sym">)</span> <span class="kwa">and</span> <span class="num">63</span><span class="sym">)</span>\<span class="num">2</span>
 <span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span> <span class="kwa">to</span> n3<span class="sym">-</span><span class="num">1</span>
   cnt<span class="sym">+=</span><span class="num">32</span><span class="sym">-</span>bitcount<span class="sym">(</span>p<span class="sym">[</span>i<span class="sym">])</span>
 <span class="kwa">next</span>
 cnt2<span class="sym">=</span> cnt<span class="sym">+</span>m3<span class="sym">-</span>bitcount<span class="sym">(</span>p<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">and</span> <span class="sym">((</span><span class="num">1</span> shl <span class="sym">(</span>m3<span class="sym">))-</span><span class="num">1</span><span class="sym">))</span>

 n2<span class="sym">=</span>m\<span class="num">2</span>\<span class="num">64</span>
 m2<span class="sym">=((</span>m\<span class="num">2</span><span class="sym">)</span> <span class="kwa">and</span> <span class="num">63</span><span class="sym">)</span>\<span class="num">2</span>
 <span class="kwa">for</span> i<span class="sym">=</span>n3 <span class="kwa">to</span> n2<span class="sym">-</span><span class="num">1</span>
   cnt<span class="sym">+=</span><span class="num">32</span><span class="sym">-</span>bitcount<span class="sym">(</span>p<span class="sym">[</span>i<span class="sym">])</span>
 <span class="kwa">next</span>
 cnt1<span class="sym">=</span>  cnt<span class="sym">+</span>m2<span class="sym">-</span>bitcount<span class="sym">(</span>p<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">and</span> <span class="sym">((</span><span class="num">1</span> shl <span class="sym">(</span>m2<span class="sym">))-</span><span class="num">1</span><span class="sym">))</span>

 m1<span class="sym">=(</span>m <span class="kwa">and</span> <span class="num">63</span><span class="sym">)</span>\<span class="num">2</span>
 <span class="kwa">for</span> i<span class="sym">=</span>n2 <span class="kwa">to</span> m\<span class="num">64</span><span class="sym">-</span><span class="num">1</span>
   cnt<span class="sym">+=</span><span class="num">32</span><span class="sym">-</span>bitcount<span class="sym">(</span>p<span class="sym">[</span>i<span class="sym">])</span>
 <span class="kwa">next</span>
printf<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d\n&quot;</span><span class="sym">,</span> m<span class="sym">,</span> cnt<span class="sym">+</span>m1<span class="sym">-</span>bitcount<span class="sym">(</span>p<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">and</span> <span class="sym">((</span><span class="num">1</span> shl <span class="sym">(</span>m1<span class="sym">))-</span><span class="num">1</span><span class="sym">)))</span>
printf<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d\n&quot;</span><span class="sym">,</span> m\<span class="num">2</span><span class="sym">,</span> cnt1<span class="sym">)</span>
printf<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d\n&quot;</span><span class="sym">,</span> m\<span class="num">4</span><span class="sym">,</span> cnt2<span class="sym">)</span>
<span class="kwa">end sub</span>
<span class="slc">'</span>
<span class="slc">'------------------------------------------------</span>
<span class="kwa">dim</span> n<span class="sym">,</span>m<span class="sym">,</span>i<span class="sym">,</span>m1<span class="sym">,</span>cnt
<span class="kwa">if</span> len<span class="sym">(</span>command<span class="sym">)=</span><span class="num">0</span> <span class="kwa">then</span> print <span class="str">&quot;use: N-Sieve exponent&quot;</span><span class="sym">:</span><span class="kwa">end</span>
n<span class="sym">=</span>val<span class="sym">(</span>command<span class="sym">)</span>
m<span class="sym">=(</span><span class="num">1</span> shl n<span class="sym">)*</span><span class="num">10000</span>
m1<span class="sym">=(</span>m\<span class="num">64</span><span class="sym">+</span><span class="num">1</span><span class="sym">) *</span>sizeof<span class="sym">(</span>uinteger<span class="sym">)</span>
p <span class="sym">=</span>callocate<span class="sym">(</span>m1<span class="sym">)</span>
<span class="kwa">if</span> <span class="kwb">err</span> <span class="kwa">then</span> ? <span class="str">&quot;Could not allocate &quot;</span><span class="sym">;</span>m1<span class="sym">;</span><span class="str">&quot; bytes&quot;</span>
<span class="slc">'? &quot;Allocated &quot;;m1;&quot; bytes&quot;</span>
dosieve<span class="sym">(</span>m<span class="sym">)</span>
countprimes <span class="sym">(</span>m<span class="sym">)</span>
deallocate p
<span class="kwa">end</span>
