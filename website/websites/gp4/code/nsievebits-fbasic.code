<span class="hl slc">' The Computer Language Shootout</span>
<span class="hl slc">' http://shootout.alioth.debian.org/</span>
<span class="hl slc">' contributed by Antoni Gual 5/2006</span>
<span class="hl slc">'</span>
#include <span class="hl str">&quot;crt.bi&quot;</span>
<span class="hl kwa">option explicit</span>
<span class="hl kwa">option</span> escape
<span class="hl kwa">dim</span> shared p <span class="hl kwa">as</span> uinteger ptr
<span class="hl slc">'</span>
<span class="hl slc">'----------------------------------------------</span>
<span class="hl kwa">sub</span> <span class="hl kwd">dosieve</span><span class="hl sym">(</span>m<span class="hl sym">)</span>
<span class="hl kwa">dim</span> maxf<span class="hl sym">,</span>i<span class="hl sym">,</span>inc<span class="hl sym">,</span>nn<span class="hl sym">,</span>ni
maxf<span class="hl sym">=</span><span class="hl kwd">cint</span><span class="hl sym">(</span><span class="hl kwd">sqr</span><span class="hl sym">(</span>m<span class="hl sym">))+</span><span class="hl num">1</span>
i<span class="hl sym">=</span><span class="hl num">3</span>
<span class="hl kwa">while</span> i<span class="hl sym">&lt;=</span> maxf
 nn<span class="hl sym">=</span>i<span class="hl sym">*</span><span class="hl num">3</span> <span class="hl sym">:</span>ni<span class="hl sym">=</span>i<span class="hl sym">*</span><span class="hl num">2</span>
 <span class="hl kwa">while</span> nn<span class="hl sym">&lt;=</span>m
  p<span class="hl sym">[</span>nn\<span class="hl num">64</span><span class="hl sym">]</span> <span class="hl kwa">or</span><span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwd">shl</span><span class="hl sym">((</span>nn <span class="hl kwa">and</span> <span class="hl num">63</span><span class="hl sym">)</span>\<span class="hl num">2</span><span class="hl sym">)</span>
  nn<span class="hl sym">+=</span>ni
 <span class="hl kwa">wend</span>
 <span class="hl kwa">do</span> <span class="hl sym">:</span>i<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">:</span><span class="hl kwa">loop while</span> <span class="hl sym">(</span>p<span class="hl sym">[</span>i\<span class="hl num">64</span><span class="hl sym">])</span> <span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl kwd">shl</span><span class="hl sym">((</span>i <span class="hl kwa">and</span> <span class="hl num">63</span><span class="hl sym">)</span>\<span class="hl num">2</span><span class="hl sym">))</span>
<span class="hl kwa">wend</span>
<span class="hl kwa">end sub</span>
<span class="hl slc">'</span>
<span class="hl slc">'-----------------------------------------------</span>
<span class="hl kwa">function</span> <span class="hl kwd">bitcount</span><span class="hl sym">(</span>u <span class="hl kwa">as</span> uinteger<span class="hl sym">)</span>
 <span class="hl kwa">dim</span> uc <span class="hl kwa">as</span> uinteger
 uc<span class="hl sym">=</span> u<span class="hl sym">-((</span>u shr <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">&amp;</span>o33333333333<span class="hl sym">)-((</span>u shr <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">&amp;</span>o11111111111<span class="hl sym">)</span>
 <span class="hl kwa">return</span> <span class="hl sym">((</span>uc<span class="hl sym">+(</span>uc shr <span class="hl num">3</span><span class="hl sym">))</span> <span class="hl kwa">and</span> <span class="hl sym">&amp;</span>o30707070707<span class="hl sym">)</span> mod <span class="hl num">63</span>
<span class="hl kwa">end function</span>
<span class="hl slc">'</span>
<span class="hl slc">'-----------------------------------------------</span>
<span class="hl kwa">sub</span> <span class="hl kwd">countprimes</span> <span class="hl sym">(</span>m<span class="hl sym">)</span>
<span class="hl kwa">dim</span> cnt<span class="hl sym">,</span>i<span class="hl sym">,</span>m1<span class="hl sym">,</span>m2<span class="hl sym">,</span>m3<span class="hl sym">,</span>cnt1<span class="hl sym">,</span>cnt2<span class="hl sym">,</span>n2<span class="hl sym">,</span>n3
<span class="hl kwa">dim</span>  a<span class="hl kwb">$=&quot;Primes</span> up <span class="hl kwa">to</span> ######## ########<span class="hl str">&quot;</span>
<span class="hl str">  n3=m\4\64</span>
<span class="hl str">  m3=((m\4) and 63)\2</span>
<span class="hl str"> for i=0 to n3-1</span>
<span class="hl str">   cnt+=32-bitcount(p[i])</span>
<span class="hl str"> next</span>
<span class="hl str"> cnt2= cnt+m3-bitcount(p[i] and ((1 shl (m3))-1))</span>
<span class="hl str"></span>
<span class="hl str"> n2=m\2\64</span>
<span class="hl str"> m2=((m\2) and 63)\2</span>
<span class="hl str"> for i=n3 to n2-1</span>
<span class="hl str">   cnt+=32-bitcount(p[i])</span>
<span class="hl str"> next</span>
<span class="hl str"> cnt1=  cnt+m2-bitcount(p[i] and ((1 shl (m2))-1))</span>
<span class="hl str"></span>
<span class="hl str"> m1=(m and 63)\2</span>
<span class="hl str"> for i=n2 to m\64-1</span>
<span class="hl str">   cnt+=32-bitcount(p[i])</span>
<span class="hl str"> next</span>
<span class="hl str">printf(&quot;</span>Primes up <span class="hl kwa">to</span> <span class="hl sym">%</span><span class="hl num">8</span>d <span class="hl sym">%</span><span class="hl num">8</span>d\n<span class="hl str">&quot;, m, cnt+m1-bitcount(p[i] and ((1 shl (m1))-1)))</span>
<span class="hl str">printf(&quot;</span>Primes up <span class="hl kwa">to</span> <span class="hl sym">%</span><span class="hl num">8</span>d <span class="hl sym">%</span><span class="hl num">8</span>d\n<span class="hl str">&quot;, m\2, cnt1)</span>
<span class="hl str">printf(&quot;</span>Primes up <span class="hl kwa">to</span> <span class="hl sym">%</span><span class="hl num">8</span>d <span class="hl sym">%</span><span class="hl num">8</span>d\n<span class="hl str">&quot;, m\4, cnt2)</span>
<span class="hl str">end sub</span>
<span class="hl str">'</span>
<span class="hl str">'------------------------------------------------</span>
<span class="hl str">dim n,m,i,m1,cnt</span>
<span class="hl str">if len(command)=0 then print &quot;</span>use<span class="hl sym">:</span> N<span class="hl sym">-</span>Sieve exponent<span class="hl str">&quot;:end</span>
<span class="hl str">n=val(command)</span>
<span class="hl str">m=(1 shl n)*10000</span>
<span class="hl str">m1=(m\64+1) *sizeof(uinteger)</span>
<span class="hl str">p =callocate(m1)</span>
<span class="hl str">if err then ? &quot;</span>Could <span class="hl kwa">not</span> allocate <span class="hl str">&quot;;m1;&quot;</span> bytes<span class="hl str">&quot;</span>
<span class="hl str">'? &quot;</span>Allocated <span class="hl str">&quot;;m1;&quot;</span> bytes<span class="hl str">&quot;</span>
<span class="hl str">dosieve(m)</span>
<span class="hl str">countprimes (m)</span>
<span class="hl str">deallocate p</span>
<span class="hl str">end</span>
