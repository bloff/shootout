\ The Great Computer Language Shootout
\ http<span class="hl sym">:</span><span class="hl slc">//shootout.alioth.debian.org/</span>
\
\ contributed by  Ian Osgood
\ requires enlarging the dictionary with <span class="hl str">&quot;-m 8M&quot;</span>

wordlist constant word<span class="hl sym">-</span>counts
variable data
variable dataEnd
create word<span class="hl sym">-</span>pointers <span class="hl num">100</span> cells allot
variable endwp

<span class="hl sym">:</span> count<span class="hl sym">,</span>   <span class="hl num">1</span> <span class="hl sym">, ;</span>
<span class="hl sym">:</span> count<span class="hl sym">-</span>name<span class="hl sym">,</span>
  endwp &#64; here over <span class="hl sym">!</span> cell<span class="hl sym">+</span> endwp <span class="hl sym">!</span>
  <span class="hl num">1</span> <span class="hl sym">,</span> last &#64; name<span class="hl sym">&gt;</span>string
  <span class="hl num">2</span>dup bounds <span class="hl kwa">do</span> i c&#64; toupper i c<span class="hl sym">!</span> loop <span class="hl num">2</span><span class="hl sym">, ;</span>

defer data<span class="hl sym">,</span>

<span class="hl sym">:</span> count<span class="hl sym">-</span><span class="hl kwd">word</span> <span class="hl sym">(</span> addr u <span class="hl sym">-- )</span>
    <span class="hl num">2</span>dup word<span class="hl sym">-</span>counts search<span class="hl sym">-</span>wordlist <span class="hl kwa">if</span>
        <span class="hl num">1</span> swap <span class="hl sym">&gt;</span>body <span class="hl sym">+!</span> <span class="hl num">2</span>drop
    <span class="hl kwa">else</span>
        nextname create data<span class="hl sym">,</span>
    endif <span class="hl sym">;</span>

<span class="hl sym">:</span> <span class="hl kwd">scanit</span> <span class="hl sym">(</span> end data n <span class="hl sym">--</span> total <span class="hl sym">)</span>
  word<span class="hl sym">-</span>pointers endwp <span class="hl sym">!</span>
  rot <span class="hl num">1</span><span class="hl sym">+</span> over <span class="hl sym">-</span> rot <span class="hl num">2</span>dup <span class="hl sym">- &gt;</span><span class="hl kwd">r</span>  <span class="hl sym">(</span> n end<span class="hl sym">-</span>n addr R<span class="hl sym">:</span> total <span class="hl sym">)</span>
  get<span class="hl sym">-</span>current <span class="hl sym">&gt;</span>r word<span class="hl sym">-</span>counts set<span class="hl sym">-</span>current
  <span class="hl kwa">do</span> i over count<span class="hl sym">-</span>word loop
  <span class="hl num">6</span> swap <span class="hl sym">-</span> set<span class="hl sym">-</span>precision r<span class="hl sym">&gt;</span> set<span class="hl sym">-</span>current r<span class="hl sym">&gt; ;</span>

<span class="hl sym">:</span> comp? <span class="hl sym">(</span> a1 a2 <span class="hl sym">--</span> a1 a2 ? <span class="hl sym">)</span>
  over &#64; over &#64; <span class="hl sym">=</span> <span class="hl kwa">if</span>
    over cell<span class="hl sym">+</span> <span class="hl num">2</span>&#64; drop over cell<span class="hl sym">+</span> <span class="hl num">2</span>&#64; tuck compare <span class="hl num">0</span><span class="hl sym">&lt;</span>
  <span class="hl kwa">else</span> over &#64; over &#64; <span class="hl sym">&gt;</span> then <span class="hl sym">;</span>
<span class="hl sym">:</span> sort
  word<span class="hl sym">-</span>pointers endwp &#64; over cell<span class="hl sym">+</span> <span class="hl kwa">do</span>
    dup i <span class="hl kwa">do</span>
      i &#64; i cell <span class="hl sym">-</span> &#64;  comp? <span class="hl kwa">if</span>
      i <span class="hl sym">!</span> i cell <span class="hl sym">- !</span>  <span class="hl kwa">else</span> <span class="hl num">2</span>drop leave then
    cell <span class="hl sym">-</span>loop
  cell <span class="hl sym">+</span>loop drop <span class="hl sym">;</span>

<span class="hl sym">:</span> ff<span class="hl sym">.</span>  f$ scratch drop over type <span class="hl str">'. emit scratch rot /string type ;</span>
<span class="hl str">: sortit ( end data n -- )  ['</span><span class="hl sym">]</span> count<span class="hl sym">-</span>name<span class="hl sym">, [</span>is<span class="hl sym">]</span> data<span class="hl sym">,</span>
  scanit <span class="hl kwd">sort</span>  <span class="hl sym">(</span> total <span class="hl sym">)</span>
  endwp &#64; word<span class="hl sym">-</span>pointers <span class="hl kwa">do</span>
    i &#64; cell<span class="hl sym">+</span> <span class="hl num">2</span>&#64; type space
    i &#64; &#64; <span class="hl num">100</span> <span class="hl sym">*</span> s<span class="hl sym">&gt;</span>d d<span class="hl sym">&gt;</span>f  dup s<span class="hl sym">&gt;</span>d d<span class="hl sym">&gt;</span>f  f<span class="hl sym">/</span> ff<span class="hl sym">.</span> cr
  cell <span class="hl sym">+</span>loop drop <span class="hl sym">;</span>

<span class="hl sym">:</span> <span class="hl kwd">findit</span> <span class="hl sym">(</span> end data str len <span class="hl sym">-- ) [</span><span class="hl str">'] count, [is] data,</span>
<span class="hl str">  s&quot; clean marker clean&quot; evaluate</span>
<span class="hl str">  tuck 2&gt;r scanit drop</span>
<span class="hl str">  2r&#64; word-counts search-wordlist if</span>
<span class="hl str">    &gt;body &#64; 1 u.r</span>
<span class="hl str">  else '</span><span class="hl num">0</span> emit then  <span class="hl dir">#tab emit 2r&gt; type ;</span>

<span class="hl sym">:</span> <span class="hl kwd">grow</span> <span class="hl sym">(</span> end <span class="hl sym">--</span> newEnd <span class="hl sym">)</span>
  data &#64; <span class="hl sym">- (</span> size <span class="hl sym">)</span>
  data &#64; dataEnd &#64; over <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">*</span> tuck resize <span class="hl kwa">throw</span> dup data <span class="hl sym">! +</span> dataEnd <span class="hl sym">!</span>
  data &#64; <span class="hl sym">+ ;</span>

<span class="hl sym">:</span> <span class="hl kwd">slurp</span> <span class="hl sym">( --</span> end <span class="hl sym">)</span> data &#64;
  begin dup <span class="hl num">80</span> stdin read<span class="hl sym">-</span>line <span class="hl kwa">throw</span>
  <span class="hl kwa">while</span> over c&#64; <span class="hl str">'&gt; &lt;&gt;</span>
<span class="hl str">  while over c&#64; '</span><span class="hl sym">; =</span> <span class="hl kwa">if</span> drop <span class="hl kwa">else</span> <span class="hl sym">+</span> then
        dataEnd &#64; over <span class="hl sym">-</span> <span class="hl num">80</span> <span class="hl sym">&lt;</span> <span class="hl kwa">if</span> grow then
  repeat then drop <span class="hl sym">;</span>

<span class="hl sym">:</span> <span class="hl kwd">report</span> <span class="hl sym">(</span> end <span class="hl sym">-- )</span> data &#64;
  <span class="hl num">2</span>dup <span class="hl num">1</span> sortit cr
  <span class="hl num">2</span>dup <span class="hl num">2</span> sortit cr
  <span class="hl num">2</span>dup s<span class="hl str">&quot; GGT&quot;</span> findit cr
  <span class="hl num">2</span>dup s<span class="hl str">&quot; GGTA&quot;</span> findit cr
  <span class="hl num">2</span>dup s<span class="hl str">&quot; GGTATT&quot;</span> findit cr
  <span class="hl num">2</span>dup s<span class="hl str">&quot; GGTATTTTAATT&quot;</span> findit cr
  s<span class="hl str">&quot; GGTATTTTAATTTATAGT&quot;</span> findit cr <span class="hl sym">;</span>

<span class="hl sym">:</span> main
  <span class="hl num">4096</span> dup allocate <span class="hl kwa">throw</span> dup data <span class="hl sym">! +</span> dataEnd <span class="hl sym">!</span>
  begin pad <span class="hl num">80</span> stdin read<span class="hl sym">-</span>line <span class="hl kwa">throw</span> nip
  <span class="hl kwa">while</span> s<span class="hl str">&quot; &gt;THREE&quot;</span> pad over compare <span class="hl num">0</span><span class="hl sym">=</span> <span class="hl kwa">if</span> slurp report then
  repeat data &#64; free <span class="hl kwa">throw</span> <span class="hl sym">;</span>

marker clean

main bye \ done<span class="hl sym">!</span>
