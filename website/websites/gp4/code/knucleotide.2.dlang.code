<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>

<span class="hl slc">// Adapted by bearophile from my Python version</span>


<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>string<span class="hl sym">;</span>


<span class="hl kwa">int</span><span class="hl sym">[</span><span class="hl kwa">char</span><span class="hl sym">[]]</span> <span class="hl kwd">gen_freq</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[]</span> seq<span class="hl sym">,</span> <span class="hl kwa">int</span> frame<span class="hl sym">) {</span>
    <span class="hl kwa">int</span><span class="hl sym">[</span><span class="hl kwa">char</span><span class="hl sym">[]]</span> freqs<span class="hl sym">;</span>
    <span class="hl kwa">auto</span> ns <span class="hl sym">=</span> seq<span class="hl sym">.</span>length <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">-</span> frame<span class="hl sym">;</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>size_t ii<span class="hl sym">;</span> ii <span class="hl sym">&lt;</span> ns<span class="hl sym">; ++</span>ii<span class="hl sym">)</span>
        freqs<span class="hl sym">[</span> seq<span class="hl sym">[</span>ii <span class="hl sym">..</span> ii <span class="hl sym">+</span> frame<span class="hl sym">] ]++;</span>
    <span class="hl kwa">return</span> freqs<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">sort_seq</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[]</span> seq<span class="hl sym">,</span> <span class="hl kwa">int</span> length<span class="hl sym">) {</span>
    <span class="hl kwa">auto</span> n <span class="hl sym">=</span> seq<span class="hl sym">.</span>length <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl sym">-</span> length<span class="hl sym">;</span>
    <span class="hl kwa">auto</span> freqs <span class="hl sym">=</span> <span class="hl kwd">gen_freq</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> length<span class="hl sym">);</span>

    <span class="hl kwa">struct</span> Pair <span class="hl sym">{</span>
        <span class="hl kwa">char</span><span class="hl sym">[]</span> k<span class="hl sym">;</span>
        <span class="hl kwa">int</span> v<span class="hl sym">;</span>
        <span class="hl kwa">int</span> <span class="hl kwd">opCmp</span><span class="hl sym">(</span>Pair otherPair<span class="hl sym">) {</span>
            <span class="hl kwa">return</span> <span class="hl sym">(</span>v <span class="hl sym">&gt;</span> otherPair<span class="hl sym">.</span>v<span class="hl sym">)</span> ? <span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">auto</span> pairs <span class="hl sym">=</span> <span class="hl kwa">new</span> Pair<span class="hl sym">[</span>freqs<span class="hl sym">.</span>length<span class="hl sym">];</span>
    <span class="hl kwa">uint</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">foreach</span><span class="hl sym">(</span>k<span class="hl sym">,</span> v<span class="hl sym">;</span> freqs<span class="hl sym">) {</span>
        pairs<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwd">Pair</span><span class="hl sym">(</span>k<span class="hl sym">,</span> v<span class="hl sym">);</span>
        i<span class="hl sym">++;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">foreach</span><span class="hl sym">(</span>p<span class="hl sym">;</span> pairs<span class="hl sym">.</span>sort<span class="hl sym">)</span>
        <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;%s %.3f&quot;</span><span class="hl sym">,</span> p<span class="hl sym">.</span>k<span class="hl sym">,</span> <span class="hl num">100.0</span><span class="hl sym">*</span>p<span class="hl sym">.</span>v<span class="hl sym">/</span>n<span class="hl sym">);</span>
    <span class="hl kwd">writefln</span><span class="hl sym">();</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">find_seq</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[]</span> seq<span class="hl sym">,</span> <span class="hl kwa">char</span><span class="hl sym">[]</span> s<span class="hl sym">) {</span>
    <span class="hl kwa">auto</span> t <span class="hl sym">=</span> <span class="hl kwd">gen_freq</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> s<span class="hl sym">.</span>length<span class="hl sym">);</span>
    <span class="hl kwd">writefln</span><span class="hl sym">((</span>s <span class="hl kwa">in</span> t<span class="hl sym">)</span> ? t<span class="hl sym">[</span>s<span class="hl sym">] :</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl str">'</span><span class="hl esc">\t</span><span class="hl str">'</span><span class="hl sym">,</span> s<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">char</span><span class="hl sym">[]</span> <span class="hl kwd">inplaceUpper</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[]</span> s<span class="hl sym">) {</span>
    <span class="hl kwa">foreach</span><span class="hl sym">(</span>ref c<span class="hl sym">;</span> s<span class="hl sym">)</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl str">'a'</span> <span class="hl sym">&lt;=</span> c <span class="hl sym">&amp;&amp;</span> c <span class="hl sym">&lt;=</span> <span class="hl str">'z'</span><span class="hl sym">)</span>
            c <span class="hl sym">-=</span> <span class="hl str">'a'</span> <span class="hl sym">-</span> <span class="hl str">'A'</span><span class="hl sym">;</span>
    <span class="hl kwa">return</span> s<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">() {</span>
    <span class="hl kwa">char</span><span class="hl sym">[</span><span class="hl num">1000</span><span class="hl sym">]</span> line<span class="hl sym">;</span>
    <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl kwd">fgets</span><span class="hl sym">(</span>line<span class="hl sym">.</span>ptr<span class="hl sym">,</span> line<span class="hl sym">.</span>length<span class="hl sym">,</span> stdin<span class="hl sym">))</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">[</span><span class="hl num">0</span> <span class="hl sym">..</span> <span class="hl num">3</span><span class="hl sym">] ==</span> <span class="hl str">&quot;&gt;TH&quot;</span><span class="hl sym">)</span>
            <span class="hl kwa">break</span><span class="hl sym">;</span>

    <span class="hl kwa">char</span><span class="hl sym">[][]</span> seq<span class="hl sym">;</span>
    <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl kwd">fgets</span><span class="hl sym">(</span>line<span class="hl sym">.</span>ptr<span class="hl sym">,</span> line<span class="hl sym">.</span>length<span class="hl sym">,</span> stdin<span class="hl sym">)) {</span>
        <span class="hl kwa">if</span> <span class="hl sym">((</span>line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl str">'&gt;'</span><span class="hl sym">) || (</span>line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl str">';'</span><span class="hl sym">))</span>
            <span class="hl kwa">break</span><span class="hl sym">;</span>
        <span class="hl kwa">char</span><span class="hl sym">[]</span> line2 <span class="hl sym">=</span> <span class="hl kwd">toString</span><span class="hl sym">(</span>line<span class="hl sym">.</span>ptr<span class="hl sym">);</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>line2<span class="hl sym">[</span>$<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span>
            seq <span class="hl sym">~=</span> line2<span class="hl sym">[</span><span class="hl num">0</span> <span class="hl sym">..</span> $<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">].</span>dup<span class="hl sym">;</span>
        <span class="hl kwa">else</span>
            seq <span class="hl sym">~=</span> line2<span class="hl sym">[</span><span class="hl num">0</span> <span class="hl sym">..</span> $<span class="hl sym">].</span>dup<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">auto</span> sequence <span class="hl sym">=</span> seq<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">).</span><span class="hl kwd">inplaceUpper</span><span class="hl sym">();</span>

    <span class="hl kwd">sort_seq</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
    <span class="hl kwd">sort_seq</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">);</span>

    <span class="hl kwa">foreach</span><span class="hl sym">(</span>se<span class="hl sym">;</span> <span class="hl kwd">split</span><span class="hl sym">(</span><span class="hl str">&quot;GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">))</span>
        <span class="hl kwd">find_seq</span><span class="hl sym">(</span>sequence<span class="hl sym">,</span> se<span class="hl sym">);</span>
<span class="hl sym">}</span>
