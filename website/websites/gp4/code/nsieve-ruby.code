<span class="slc">#!/usr/bin/ruby
</span><span class="slc"># -*- mode: ruby -*-
</span><span class="slc"># $Id: nsieve-ruby.code,v 1.1 2005-10-29 16:19:36 igouy-guest Exp $
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># Contributed by Christopher Williams
</span>
<span class="kwa">def</span> nsieve<span class="sym">(</span>m<span class="sym">)
</span>  is_prime = Array.new<span class="sym">(</span>m<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)
</span>  count = <span class="num">0
  2</span>.upto<span class="sym">(</span>m<span class="sym">)</span> <span class="kwa">do</span> <span class="sym">|</span>i<span class="sym">|
</span>    <span class="kwa">if</span> is_prime<span class="sym">[</span>i<span class="sym">]
</span>      k = <span class="num">2</span> <span class="sym">*</span> i
      <span class="kwa">while</span> k <span class="sym">&lt;</span>= m
        is_prime<span class="sym">[</span>k<span class="sym">]</span> = <span class="kwa">false
</span>	k<span class="sym">+</span>= i
      <span class="kwa">end
</span>      count <span class="sym">+</span>= <span class="num">1
</span>    <span class="kwa">end
  end
  return</span> count
<span class="kwa">end

</span>n = <span class="sym">(</span><span class="kwa">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">2</span><span class="sym">)</span>.to_i
n = <span class="num">2</span> <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)

</span>m = <span class="sym">(</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">)*</span><span class="num">10000
</span>printf<span class="sym">(</span><span class="str">&quot;Primes up to %8d%8d\n&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">))

</span>m = <span class="sym">(</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n-1<span class="sym">)*</span><span class="num">10000
</span>printf<span class="sym">(</span><span class="str">&quot;Primes up to %8d%8d\n&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">))

</span>m = <span class="sym">(</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n-2<span class="sym">)*</span><span class="num">10000
</span>printf<span class="sym">(</span><span class="str">&quot;Primes up to %8d%8d\n&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">))
</span>
