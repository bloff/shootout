<span class="slc">// ---------------------------------------------------------------------</span>
<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Anthony Borla</span>
<span class="slc">// ---------------------------------------------------------------------</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">constant</span> ITERATIONS <span class="sym">=</span> <span class="num">50</span><span class="sym">,</span> LIMIT_SQR <span class="sym">=</span> <span class="num">4.0</span><span class="sym">;</span>

  <span class="kwb">int</span> N <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">];</span> <span class="kwb">int</span> bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

  <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> N<span class="sym">,</span> N<span class="sym">);</span>

  <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> y <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y <span class="sym">&lt;</span> N<span class="sym">;</span> y<span class="sym">++)</span>
  <span class="sym">{</span>
    <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> x <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> x <span class="sym">&lt;</span> N<span class="sym">;</span> x<span class="sym">++)</span>
    <span class="sym">{</span>
      <span class="kwb">float</span> ZR <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> ZI <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> TR <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> TI <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
      <span class="kwb">float</span> CR <span class="sym">= (</span><span class="num">2.0</span> <span class="sym">*</span> x <span class="sym">/</span> N<span class="sym">) -</span> <span class="num">1.5</span><span class="sym">,</span> CI <span class="sym">= (</span><span class="num">2.0</span> <span class="sym">*</span> y <span class="sym">/</span> N<span class="sym">) -</span> <span class="num">1.0</span><span class="sym">;</span>
      <span class="kwb">int</span> ESCAPE <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

      <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> ITERATIONS<span class="sym">;</span> i<span class="sym">++)</span>
      <span class="sym">{</span>
        TR <span class="sym">=</span> ZR <span class="sym">*</span> ZR <span class="sym">-</span> ZI <span class="sym">*</span> ZI <span class="sym">+</span> CR<span class="sym">;</span> TI <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> ZR <span class="sym">*</span> ZI <span class="sym">+</span> CI<span class="sym">;</span>
        ZR <span class="sym">=</span> TR<span class="sym">;</span> ZI <span class="sym">=</span> TI<span class="sym">;</span>

        <span class="kwd">if</span> <span class="sym">(</span>ZR <span class="sym">*</span> ZR <span class="sym">+</span> ZI <span class="sym">*</span> ZI <span class="sym">&gt;</span> LIMIT_SQR<span class="sym">) {</span> ESCAPE <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> break<span class="sym">; }</span>
      <span class="sym">}</span>

      byte_acc <span class="sym">= (</span>byte_acc <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">) | (</span>ESCAPE ? <span class="num">0</span> <span class="sym">:</span> <span class="num">1</span><span class="sym">);</span> bit_num<span class="sym">++;</span>

      <span class="kwd">if</span> <span class="sym">(</span>bit_num <span class="sym">==</span> <span class="num">8</span><span class="sym">)</span>
      <span class="sym">{</span>
        <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%c&quot;</span><span class="sym">,</span> byte_acc<span class="sym">);</span> byte_acc <span class="sym">=</span> bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="sym">}</span>
      else <span class="kwd">if</span> <span class="sym">(</span>x <span class="sym">==</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
      <span class="sym">{</span>
        byte_acc <span class="sym">&lt;&lt;= (</span><span class="num">8</span> <span class="sym">-</span> bit_num<span class="sym">);</span> <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%c&quot;</span><span class="sym">,</span> byte_acc<span class="sym">);</span>
        byte_acc <span class="sym">=</span> bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="sym">}</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  return <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

