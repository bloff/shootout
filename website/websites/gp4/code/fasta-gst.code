<span class="str">&quot;The Computer Language Shootout</span>
<span class="str"> http://shootout.alioth.debian.org/</span>
<span class="str"> contributed by Isaac Gouy&quot;</span>


Object subclass<span class="sym">:</span> <span class="slc">#RandomNumber</span>
instanceVariableNames<span class="sym">:</span> <span class="str">'seed scale'</span>
classVariableNames<span class="sym">:</span> <span class="str">'Increment Multiplier Modulus FModulus'</span>
poolDictionaries<span class="sym">:</span> <span class="str">''</span> category<span class="sym">:</span> nil <span class="sym">!</span>

<span class="sym">!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   Increment <span class="sym">:=</span> <span class="num">29573</span>.
   Multiplier <span class="sym">:=</span> <span class="num">3877</span>.
   Modulus <span class="sym">:=</span> <span class="num">139968</span>.
   FModulus <span class="sym">:=</span> <span class="num">139968.0</span>d.
   ^self basicNew to<span class="sym">:</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

<span class="kwa">next</span>
   seed <span class="sym">:=</span> seed <span class="sym">*</span> Multiplier <span class="sym">+</span> Increment <span class="esc">\\</span> Modulus.
   ^<span class="sym">(</span>seed <span class="sym">*</span> scale<span class="sym">)</span> asFloatD <span class="sym">/</span> FModulus <span class="sym">! !</span>

<span class="sym">!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   seed <span class="sym">:=</span> <span class="num">42</span>.
   scale <span class="sym">:=</span> anInteger <span class="sym">! !</span>


Object subclass<span class="sym">:</span> <span class="slc">#NucleotideStream</span>
instanceVariableNames<span class="sym">:</span> <span class="str">'stream'</span>
classVariableNames<span class="sym">:</span> <span class="str">''</span> poolDictionaries<span class="sym">:</span> <span class="str">''</span> category<span class="sym">:</span> nil <span class="sym">!</span>

<span class="sym">!</span>NucleotideStream methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>

on<span class="sym">:</span> aString
   stream <span class="sym">:=</span> ReadStream on<span class="sym">:</span> aString asByteArray<span class="sym">! !</span>

<span class="sym">!</span>NucleotideStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

<span class="kwa">next</span>
   <span class="str">&quot;q&amp;d - if we go past the stream end, trap the exception, and reset&quot;</span>
   <span class="sym">[</span>^stream <span class="kwa">next</span><span class="sym">]</span>
      on<span class="sym">:</span> Exception <span class="kwa">do</span><span class="sym">: [:</span>exception<span class="sym">|</span> ^stream reset<span class="sym">;</span> <span class="kwa">next</span><span class="sym">] ! !</span>


Object subclass<span class="sym">:</span> <span class="slc">#RandomNucleotideStream</span>
instanceVariableNames<span class="sym">:</span> <span class="str">'random frequencies'</span>
classVariableNames<span class="sym">:</span> <span class="str">''</span> poolDictionaries<span class="sym">:</span> <span class="str">''</span> category<span class="sym">:</span> nil <span class="sym">!</span>

<span class="sym">!</span>RandomNucleotideStream methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

from<span class="sym">:</span> anOrderedCollection
   <span class="sym">|</span> cp <span class="sym">|</span>
   <span class="str">&quot;random := RandomNumber to: 1.0.&quot;</span>
   cp <span class="sym">:=</span> <span class="num">0.0</span>.
   anOrderedCollection <span class="kwa">do</span><span class="sym">: [:</span>each <span class="sym">|</span>
      each key<span class="sym">:</span> each key asInteger.
      each value<span class="sym">: (</span>cp <span class="sym">:=</span> cp <span class="sym">+</span> each value<span class="sym">)</span>.
   <span class="sym">]</span>.
   frequencies <span class="sym">:=</span> anOrderedCollection <span class="sym">! !</span>

<span class="sym">!</span>RandomNucleotideStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

<span class="kwa">next</span>
   <span class="sym">|</span> r <span class="sym">|</span>
   r <span class="sym">:=</span> random <span class="kwa">next</span>.
   frequencies <span class="kwa">do</span><span class="sym">: [:</span>each <span class="sym">|  (</span>r <span class="sym">&lt;</span> each value<span class="sym">)</span> ifTrue<span class="sym">: [</span>^each key<span class="sym">]] !</span>

random<span class="sym">:</span> aRandomNumber
<span class="str">&quot;This wierdness is just so we can get the expected results.</span>
<span class="str"> Normally we'd initialize our own RandomNumber source instead</span>
<span class="str"> of sharing one&quot;</span>
   random <span class="sym">:=</span> aRandomNumber <span class="sym">! !</span>


<span class="sym">!</span> FileStream methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

writeFasta<span class="sym">:</span> anId description<span class="sym">:</span> aString size<span class="sym">:</span> anInteger sequence<span class="sym">:</span> aStream
   <span class="sym">|</span> lineLength n <span class="sym">|</span>
   lineLength <span class="sym">:=</span> <span class="num">60</span>. n <span class="sym">:=</span> anInteger.
   self nextPut<span class="sym">: $&gt;;</span> nextPutAll<span class="sym">:</span> anId<span class="sym">;</span> nextPutAll<span class="sym">:</span> <span class="str">' '</span><span class="sym">;</span> nextPutAll<span class="sym">:</span> aString<span class="sym">;</span> nl.

   <span class="sym">[</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">]</span> whileTrue<span class="sym">: [</span>
         <span class="sym">((</span>n <span class="sym">&lt;</span> lineLength<span class="sym">)</span> ifTrue<span class="sym">: [</span>n<span class="sym">]</span> ifFalse<span class="sym">: [</span>lineLength<span class="sym">])</span>
            timesRepeat<span class="sym">: [</span>self nextPutByte<span class="sym">:</span> aStream <span class="kwa">next</span><span class="sym">]</span>.
         self nl.
         n <span class="sym">:=</span> n <span class="sym">-</span> lineLength
      <span class="sym">] ! !</span>


<span class="sym">|</span> n r s <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger.
r <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">1</span>. <span class="str">&quot;Shared random sequence&quot;</span>
s <span class="sym">:=</span> FileStream stdout bufferSize<span class="sym">:</span> <span class="num">4096</span>.

s writeFasta<span class="sym">:</span> <span class="str">'ONE'</span> description<span class="sym">:</span> <span class="str">'Homo sapiens alu'</span> size<span class="sym">:</span> n<span class="sym">*</span><span class="num">2</span> sequence<span class="sym">:</span>
   <span class="sym">(</span> NucleotideStream new on<span class="sym">: (</span>
      <span class="sym">(</span> ReadWriteStream on<span class="sym">:</span> String new<span class="sym">)</span>
         nextPutAll<span class="sym">:</span> <span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span><span class="sym">;</span>
         nextPutAll<span class="sym">:</span> <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span><span class="sym">;</span>
         nextPutAll<span class="sym">:</span> <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span><span class="sym">;</span>
         nextPutAll<span class="sym">:</span> <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span><span class="sym">;</span>
         nextPutAll<span class="sym">:</span> <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span><span class="sym">;</span>
         nextPutAll<span class="sym">:</span> <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span><span class="sym">;</span>
         nextPutAll<span class="sym">:</span> <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span><span class="sym">;</span>
         yourself<span class="sym">;</span> contents <span class="sym">))</span>.

s writeFasta<span class="sym">:</span> <span class="str">'TWO'</span> description<span class="sym">:</span> <span class="str">'IUB ambiguity codes'</span> size<span class="sym">:</span> n<span class="sym">*</span><span class="num">3</span> sequence<span class="sym">:</span>
   <span class="sym">(</span> RandomNucleotideStream new random<span class="sym">:</span> r<span class="sym">;</span> from<span class="sym">: (</span>
      OrderedCollection new
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$a</span> value<span class="sym">:</span> <span class="num">0.27</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$c</span> value<span class="sym">:</span> <span class="num">0.12</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$g</span> value<span class="sym">:</span> <span class="num">0.12</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$t</span> value<span class="sym">:</span> <span class="num">0.27</span><span class="sym">);</span>

         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$B</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$D</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$H</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$K</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$M</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$N</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$R</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$S</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$V</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$W</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$Y</span> value<span class="sym">:</span> <span class="num">0.02</span><span class="sym">);</span>
         yourself <span class="sym">))</span>.

s writeFasta<span class="sym">:</span> <span class="str">'THREE'</span> description<span class="sym">:</span> <span class="str">'Homo sapiens frequency'</span> size<span class="sym">:</span> n<span class="sym">*</span><span class="num">5</span> sequence<span class="sym">:</span>
   <span class="sym">(</span> RandomNucleotideStream new random<span class="sym">:</span> r<span class="sym">;</span> from<span class="sym">: (</span>
      OrderedCollection new
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$a</span> value<span class="sym">:</span> <span class="num">0.3029549426680</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$c</span> value<span class="sym">:</span> <span class="num">0.1979883004921</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$g</span> value<span class="sym">:</span> <span class="num">0.1975473066391</span><span class="sym">);</span>
         add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="kwb">$t</span> value<span class="sym">:</span> <span class="num">0.3015094502008</span><span class="sym">);</span>
         yourself <span class="sym">))</span>.

s flush<span class="sym">;</span> close <span class="sym">!</span>
