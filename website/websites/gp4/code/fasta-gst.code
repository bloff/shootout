<span class="com">&quot;The Computer Language Shootout</span>
<span class="com"> http://shootout.alioth.debian.org/</span>
<span class="com"> contributed by Isaac Gouy&quot;</span>
<span class="com"></span>
<span class="com">ReadStream subclass: #RepeatStream  instanceVariableNames: 'repeatPtr repeatLimit' classVariableNames: '' poolDictionaries: '' category: nil !</span>
<span class="com"></span>
<span class="com">!RepeatStream class methodsFor: 'instance creation '!</span>
<span class="com"></span>
<span class="com">to: anInteger on: aCollection</span>
<span class="com">   ^(super on: aCollection) to: anInteger ! !</span>
<span class="com"></span>
<span class="com">!RepeatStream methodsFor: 'initialize-release'!</span>
<span class="com"></span>
<span class="com">to: anInteger</span>
<span class="com">   repeatPtr := 0.</span>
<span class="com">   repeatLimit := anInteger ! !</span>
<span class="com"></span>
<span class="com">!RepeatStream methodsFor: 'accessing-reading'!</span>
<span class="com"></span>
<span class="com">next</span>
<span class="com">    | element |</span>
<span class="com">    ptr &gt; endPtr ifTrue: [ self position: 0 ].</span>
<span class="com">    element := collection at: ptr.</span>
<span class="com">    ptr := ptr + 1. repeatPtr := repeatPtr + 1.</span>
<span class="com">    ^element ! !</span>
<span class="com"></span>
<span class="com">!RepeatStream methodsFor: 'testing'!</span>
<span class="com"></span>
<span class="com">atEnd</span>
<span class="com">   ^repeatPtr &gt;= repeatLimit ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">RepeatStream subclass: #RandomStream instanceVariableNames: 'random percentages'</span>
<span class="com">classVariableNames: '' poolDictionaries: '' category: nil !</span>
<span class="com"></span>
<span class="com">!RandomStream methodsFor: 'private methods'!</span>
<span class="com"></span>
<span class="com">initCollection: aCollection</span>
<span class="com">   | size cp |</span>
<span class="com">   repeatPtr := 0.</span>
<span class="com">   random := RandomNumber to: 1.0.</span>
<span class="com">   size := aCollection size.</span>
<span class="com">   percentages := Array new: size.</span>
<span class="com">   collection := Array new: size.</span>
<span class="com">   cp := 0.0.</span>
<span class="com">   1 to: size do: [:i|</span>
<span class="com">      collection at: i put: (aCollection at: i) key.</span>
<span class="com">      percentages at: i put: (cp := cp + (aCollection at: i) value).</span>
<span class="com">   ] ! !</span>
<span class="com"></span>
<span class="com">!RandomStream methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">next</span>
<span class="com">   | r |</span>
<span class="com">   r := random next.</span>
<span class="com">   repeatPtr := repeatPtr + 1.</span>
<span class="com">   1 to: percentages size do: [:i|</span>
<span class="com">      (r &lt; (percentages at: i)) ifTrue: [^collection at: i]] !</span>
<span class="com"></span>
<span class="com">random: aRandomNumber</span>
<span class="com">&quot;Share the random number generator so we can get the expected results.&quot;</span>
<span class="com">   random := aRandomNumber ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">! FileStream methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">writeFasta: aString sequence: aStream</span>
<span class="com">   | i |</span>
<span class="com">   self nextPut: $&gt;; nextPutAll: aString; nl.</span>
<span class="com"></span>
<span class="com">   i := 0.</span>
<span class="com">   [aStream atEnd] whileFalse: [</span>
<span class="com">      (i == 60) ifTrue: [self nl. i := 0].</span>
<span class="com">      self nextPut: aStream next.</span>
<span class="com">      i := i + 1.</span>
<span class="com">      ].</span>
<span class="com">   self nl ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">Object subclass: #RandomNumber</span>
<span class="com">instanceVariableNames: 'seed scale'</span>
<span class="com">classVariableNames: 'Increment Multiplier Modulus FModulus'</span>
<span class="com">poolDictionaries: '' category: nil !</span>
<span class="com"></span>
<span class="com">!RandomNumber class methodsFor: 'instance creation'!</span>
<span class="com"></span>
<span class="com">to: anInteger</span>
<span class="com">   Increment := 29573.</span>
<span class="com">   Multiplier := 3877.</span>
<span class="com">   Modulus := 139968.</span>
<span class="com">   FModulus := 139968.0d.</span>
<span class="com">   ^self basicNew to: anInteger ! !</span>
<span class="com"></span>
<span class="com">!RandomNumber methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">next</span>
<span class="com">   seed := seed * Multiplier + Increment \\ Modulus.</span>
<span class="com">   ^(seed * scale) asFloatD / FModulus ! !</span>
<span class="com"></span>
<span class="com">!RandomNumber methodsFor: 'private'!</span>
<span class="com"></span>
<span class="com">to: anInteger</span>
<span class="com">   seed := 42.</span>
<span class="com">   scale := anInteger ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">| n r s x |</span>
<span class="com">n := Smalltalk arguments first asInteger.</span>
<span class="com">s := FileStream stdout bufferSize: 4096.</span>
<span class="com"></span>
<span class="com">s writeFasta: 'ONE Homo sapiens alu' sequence:</span>
<span class="com">   ( RepeatStream to: n*2 on:</span>
<span class="com">      'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG',</span>
<span class="com">      'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA',</span>
<span class="com">      'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT',</span>
<span class="com">      'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA',</span>
<span class="com">      'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG',</span>
<span class="com">      'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC',</span>
<span class="com">      'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA' ).</span>
<span class="com"></span>
<span class="com">r := RandomNumber to: 1. &quot;Shared random sequence&quot;</span>
<span class="com"></span>
<span class="com">s writeFasta: 'TWO IUB ambiguity codes' sequence:</span>
<span class="com">   (( RandomStream to: n*3 on: (</span>
<span class="com">      OrderedCollection new</span>
<span class="com">         add: (Association key: $a value: 0.27);</span>
<span class="com">         add: (Association key: $c value: 0.12);</span>
<span class="com">         add: (Association key: $g value: 0.12);</span>
<span class="com">         add: (Association key: $t value: 0.27);</span>
<span class="com"></span>
<span class="com">         add: (Association key: $B value: 0.02);</span>
<span class="com">         add: (Association key: $D value: 0.02);</span>
<span class="com">         add: (Association key: $H value: 0.02);</span>
<span class="com">         add: (Association key: $K value: 0.02);</span>
<span class="com">         add: (Association key: $M value: 0.02);</span>
<span class="com">         add: (Association key: $N value: 0.02);</span>
<span class="com">         add: (Association key: $R value: 0.02);</span>
<span class="com">         add: (Association key: $S value: 0.02);</span>
<span class="com">         add: (Association key: $V value: 0.02);</span>
<span class="com">         add: (Association key: $W value: 0.02);</span>
<span class="com">         add: (Association key: $Y value: 0.02);</span>
<span class="com">         yourself )) random: r).</span>
<span class="com"></span>
<span class="com">s writeFasta: 'THREE Homo sapiens frequency' sequence:</span>
<span class="com">   (( RandomStream to: n*5 on: (</span>
<span class="com">      OrderedCollection new</span>
<span class="com">         add: (Association key: $a value: 0.3029549426680);</span>
<span class="com">         add: (Association key: $c value: 0.1979883004921);</span>
<span class="com">         add: (Association key: $g value: 0.1975473066391);</span>
<span class="com">         add: (Association key: $t value: 0.3015094502008);</span>
<span class="com">         yourself )) random: r).</span>
<span class="com"></span>
<span class="com">s flush; close !</span>
