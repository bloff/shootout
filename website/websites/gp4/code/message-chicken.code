<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: message-chicken.code,v 1.29 2006-02-21 22:28:34 igouy-guest Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; thread-flow benchmark</span>
<span class="slc">;;;</span>
<span class="slc">;;; Provided by Dale Jordan</span>

<span class="slc">;     * create a chain of 500 threads such that:</span>
<span class="slc">;           o each thread</span>
<span class="slc">;                 + can receive an integer message</span>
<span class="slc">;                 + can store the received message</span>
<span class="slc">;                 + knows the next thread in the chain</span>
<span class="slc">;                 + can send the integer message + 1 to the next thread</span>
<span class="slc">;           o the last thread in the chain is different, it:</span>
<span class="slc">;                 + can receive an integer message</span>
<span class="slc">;                 + can store the sum of received messages</span>
<span class="slc">;                 + there is no next thread</span>
<span class="slc">;     * N times: send the integer message 0 to the first thread</span>
<span class="slc">;     * print the sum of messages received by the last thread</span>

<span class="slc">; Correct output N = 200 is:</span>

<span class="slc">; 100000</span>

<span class="sym">(</span>require<span class="sym">-</span>extension srfi<span class="sym">-</span><span class="num">18</span><span class="sym">)</span>

<span class="slc">;;; The interthread communications channel</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>channel<span class="sym">)</span>                  <span class="slc">; =&gt; channel</span>
  <span class="sym">(</span>let <span class="sym">((</span>write<span class="sym">-</span>mutex <span class="sym">(</span>make<span class="sym">-</span>mutex<span class="sym">))</span>
        <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>mutex <span class="sym">(</span>make<span class="sym">-</span>mutex<span class="sym">))</span>
        <span class="sym">(</span>val #f<span class="sym">))</span>
    <span class="sym">(</span>define <span class="sym">(</span><span class="kwa">read</span><span class="sym">)</span>
      <span class="sym">(</span>mutex<span class="sym">-</span>lock<span class="sym">!</span> <span class="kwa">read</span><span class="sym">-</span>mutex #f #f<span class="sym">)</span>
      <span class="sym">(</span>let <span class="sym">((</span>t val<span class="sym">))</span>
        <span class="sym">(</span>mutex<span class="sym">-</span>unlock<span class="sym">!</span> write<span class="sym">-</span>mutex<span class="sym">)</span>
        t<span class="sym">))</span>
    <span class="sym">(</span>define <span class="sym">(</span>write new<span class="sym">-</span>val<span class="sym">)</span>
      <span class="sym">(</span>mutex<span class="sym">-</span>lock<span class="sym">!</span> write<span class="sym">-</span>mutex #f #f<span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> val new<span class="sym">-</span>val<span class="sym">)</span>
      <span class="sym">(</span>mutex<span class="sym">-</span>unlock<span class="sym">!</span> <span class="kwa">read</span><span class="sym">-</span>mutex<span class="sym">))</span>
    <span class="sym">(</span>mutex<span class="sym">-</span>lock<span class="sym">!</span> <span class="kwa">read</span><span class="sym">-</span>mutex #f #f<span class="sym">)</span>      <span class="slc">; make reader initially block</span>
    <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>which<span class="sym">)</span>
      <span class="sym">(</span>case which
        <span class="sym">((</span><span class="kwa">read</span><span class="sym">)</span> <span class="kwa">read</span><span class="sym">)</span>
        <span class="sym">((</span>write<span class="sym">)</span> write<span class="sym">)))))</span>

<span class="slc">;;; make thread chain connected by channels</span>

<span class="sym">(</span>define <span class="sym">(</span>build<span class="sym">-</span>chain n chan0<span class="sym">)</span>           <span class="slc">; =&gt; channel-n</span>
  <span class="sym">(</span>define <span class="sym">(</span>setup<span class="sym">-</span>thread in out<span class="sym">)</span>
    <span class="sym">(</span>thread<span class="sym">-</span>start<span class="sym">!</span>
     <span class="sym">(</span>make<span class="sym">-</span>thread
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
        <span class="sym">(</span>let <span class="sym">((</span><span class="kwa">read</span> <span class="sym">(</span>in <span class="sym">'</span><span class="kwa">read</span><span class="sym">))</span>
              <span class="sym">(</span>write <span class="sym">(</span>out <span class="sym">'</span>write<span class="sym">)))</span>
          <span class="sym">(</span>let loop <span class="sym">()</span>
            <span class="sym">(</span>write <span class="sym">(+</span> <span class="num">1</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">)))</span>
            <span class="sym">(</span>loop<span class="sym">)))))))</span>
  <span class="sym">(</span>let loop <span class="sym">((</span>i n<span class="sym">) (</span>in chan0<span class="sym">) (</span>out <span class="sym">(</span>make<span class="sym">-</span>channel<span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? i<span class="sym">)</span>
        in
        <span class="sym">(</span>begin
          <span class="sym">(</span>setup<span class="sym">-</span>thread in out<span class="sym">)</span>
          <span class="sym">(</span>loop <span class="sym">(-</span> i <span class="num">1</span><span class="sym">)</span> out <span class="sym">(</span>make<span class="sym">-</span>channel<span class="sym">))))))</span>

<span class="slc">;;; the last thread which accumulates the sum</span>

<span class="sym">(</span>define <span class="sym">(</span><span class="kwa">last</span><span class="sym">-</span>thread iterations in out<span class="sym">)</span>
  <span class="sym">(</span>thread<span class="sym">-</span>start<span class="sym">!</span>
   <span class="sym">(</span>make<span class="sym">-</span>thread
    <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
      <span class="sym">(</span>let <span class="sym">((</span><span class="kwa">read</span> <span class="sym">(</span>in <span class="sym">'</span><span class="kwa">read</span><span class="sym">))</span>
            <span class="sym">(</span>write <span class="sym">(</span>out <span class="sym">'</span>write<span class="sym">)))</span>
        <span class="sym">(</span>let loop <span class="sym">((</span>i <span class="num">1</span><span class="sym">) (</span>n <span class="num">0</span><span class="sym">) (</span>j <span class="sym">(</span><span class="kwa">read</span><span class="sym">)))</span>
          <span class="sym">(</span>let <span class="sym">((</span>n<span class="sym">- (+</span> n j<span class="sym">)))</span>
            <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> i iterations<span class="sym">)</span>
                <span class="sym">(</span>write n<span class="sym">-)</span>
                <span class="sym">(</span>loop <span class="sym">(+</span> <span class="num">1</span> i<span class="sym">)</span> n<span class="sym">- (</span><span class="kwa">read</span><span class="sym">))))))))))</span>

<span class="slc">;;; driver</span>

<span class="sym">(</span>define <span class="sym">(</span>doit threads iterations<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>chan<span class="sym">-</span><span class="num">0</span> <span class="sym">(</span>make<span class="sym">-</span>channel<span class="sym">))</span>
         <span class="sym">(</span>chan<span class="sym">-</span>n<span class="sym">-</span><span class="num">1</span> <span class="sym">(</span>build<span class="sym">-</span>chain threads chan<span class="sym">-</span><span class="num">0</span><span class="sym">))</span>
         <span class="sym">(</span>chan<span class="sym">-</span>n <span class="sym">(</span>make<span class="sym">-</span>channel<span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">last</span><span class="sym">-</span>thread iterations chan<span class="sym">-</span>n<span class="sym">-</span><span class="num">1</span> chan<span class="sym">-</span>n<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>write <span class="sym">(</span>chan<span class="sym">-</span><span class="num">0</span> <span class="sym">'</span>write<span class="sym">))</span>
          <span class="sym">(</span><span class="kwa">read</span> <span class="sym">(</span>chan<span class="sym">-</span>n <span class="sym">'</span><span class="kwa">read</span><span class="sym">)))</span>
      <span class="sym">(</span>let loop <span class="sym">((</span>i <span class="num">0</span><span class="sym">))</span>
        <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> i iterations<span class="sym">)</span>
            <span class="sym">(</span>begin
              <span class="sym">(</span>display <span class="sym">(</span><span class="kwa">read</span><span class="sym">))</span>
              <span class="sym">(</span>newline<span class="sym">))</span>
            <span class="sym">(</span>begin
              <span class="sym">(</span>write <span class="num">0</span><span class="sym">)</span>
              <span class="sym">(</span>loop <span class="sym">(+</span> <span class="num">1</span> i<span class="sym">))))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>case <span class="sym">(</span><span class="kwa">length</span> args<span class="sym">)</span>
    <span class="sym">((</span><span class="num">0</span><span class="sym">) (</span>doit <span class="num">500 200</span><span class="sym">))</span>
    <span class="sym">((</span><span class="num">1</span><span class="sym">) (</span>doit <span class="num">500</span> <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">))))</span>
    <span class="sym">((</span><span class="num">2</span><span class="sym">) (</span>doit <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">))))</span>
    <span class="sym">(</span>else
     <span class="sym">(</span>display <span class="str">&quot;Usage: [iterations [threads]]&quot;</span><span class="sym">))))</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>

