<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Steffen Hampel</span>
<span class="com">*/</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>
<span class="dir">#include &lt;algorithm&gt;</span>
<span class="dir">#include &lt;cstdlib&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwc">inline</span>
<span class="kwb">unsigned long</span>
<span class="kwd">nsieve</span> <span class="sym">(</span> <span class="kwb">const size_t</span> m <span class="sym">){</span>
   <span class="kwb">static</span> vector<span class="sym">&lt;</span><span class="kwb">unsigned long</span><span class="sym">&gt;</span>    flags<span class="sym">;</span>
   <span class="kwb">unsigned long</span>                         <span class="kwd">count</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
   <span class="kwb">const size_t</span>                            lookupbit<span class="sym">[]=</span>
                     <span class="sym">{</span>   <span class="num">0x00000001</span><span class="sym">,</span><span class="num">0x00000002</span><span class="sym">,</span><span class="num">0x00000004</span><span class="sym">,</span><span class="num">0x00000008</span><span class="sym">,</span>
                        <span class="num">0x00000010</span><span class="sym">,</span><span class="num">0x00000020</span><span class="sym">,</span><span class="num">0x00000040</span><span class="sym">,</span><span class="num">0x00000080</span><span class="sym">,</span>
                        <span class="num">0x00000100</span><span class="sym">,</span><span class="num">0x00000200</span><span class="sym">,</span><span class="num">0x00000400</span><span class="sym">,</span><span class="num">0x00000800</span><span class="sym">,</span>
                        <span class="num">0x00001000</span><span class="sym">,</span><span class="num">0x00002000</span><span class="sym">,</span><span class="num">0x00004000</span><span class="sym">,</span><span class="num">0x00008000</span><span class="sym">,</span>
                        <span class="num">0x00010000</span><span class="sym">,</span><span class="num">0x00020000</span><span class="sym">,</span><span class="num">0x00040000</span><span class="sym">,</span><span class="num">0x00080000</span><span class="sym">,</span>
                        <span class="num">0x00100000</span><span class="sym">,</span><span class="num">0x00200000</span><span class="sym">,</span><span class="num">0x00400000</span><span class="sym">,</span><span class="num">0x00800000</span><span class="sym">,</span>
                        <span class="num">0x01000000</span><span class="sym">,</span><span class="num">0x02000000</span><span class="sym">,</span><span class="num">0x04000000</span><span class="sym">,</span><span class="num">0x08000000</span><span class="sym">,</span>
                        <span class="num">0x10000000</span><span class="sym">,</span><span class="num">0x20000000</span><span class="sym">,</span><span class="num">0x40000000</span><span class="sym">,</span><span class="num">0x80000000</span><span class="sym">,</span>
                      <span class="sym">} ;</span>

   flags<span class="sym">.</span><span class="kwd">resize</span><span class="sym">( (</span>m<span class="sym">&gt;&gt;</span><span class="num">5</span><span class="sym">)+</span><span class="num">1</span> <span class="sym">);</span>
   flags<span class="sym">[</span><span class="num">0</span><span class="sym">]=</span><span class="num">0xfffffffc</span><span class="sym">;</span>
   <span class="kwd">fill</span><span class="sym">(</span> flags<span class="sym">.</span><span class="kwd">begin</span><span class="sym">()+</span><span class="num">1</span><span class="sym">,</span> flags<span class="sym">.</span><span class="kwd">end</span><span class="sym">() ,</span> <span class="num">0xffffffff</span> <span class="sym">);</span>

   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">size_t</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i<span class="sym">&lt;</span>m<span class="sym">; ++</span>i <span class="sym">)</span>
      <span class="kwa">if</span> <span class="sym">(</span> flags<span class="sym">[</span>i<span class="sym">&gt;&gt;</span><span class="num">5</span><span class="sym">] &amp;</span> <span class="num">1</span><span class="sym">&lt;&lt;(</span>i<span class="sym">&amp;</span><span class="num">0x1F</span><span class="sym">) ){</span>
          <span class="kwa">for</span><span class="sym">(</span><span class="kwb">size_t</span> k<span class="sym">=</span>i<span class="sym">*</span><span class="num">2</span><span class="sym">;</span> k<span class="sym">&lt;</span>m<span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">){</span>
             flags<span class="sym">[</span>k<span class="sym">&gt;&gt;</span><span class="num">5</span><span class="sym">] &amp;=  ~</span>lookupbit<span class="sym">[</span>k<span class="sym">&amp;</span><span class="num">0x1F</span><span class="sym">];</span>
          <span class="sym">}</span>
          <span class="sym">++</span>count<span class="sym">;</span>
      <span class="sym">}</span>

   <span class="kwa">return</span> count<span class="sym">;</span>
<span class="sym">}</span>


<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
  <span class="kwb">int</span> n <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">2</span><span class="sym">;</span>
  <span class="kwb">unsigned</span> m<span class="sym">;</span>

   cout<span class="sym">&lt;&lt;</span><span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">);</span>

   m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
   cout<span class="sym">&lt;&lt;</span>endl<span class="sym">&lt;&lt;</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">&lt;&lt;</span>m<span class="sym">&lt;&lt;</span><span class="str">&quot; &quot;</span><span class="sym">&lt;&lt;</span><span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">);</span>

   m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
   cout<span class="sym">&lt;&lt;</span>endl<span class="sym">&lt;&lt;</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">&lt;&lt;</span>m<span class="sym">&lt;&lt;</span><span class="str">&quot; &quot;</span><span class="sym">&lt;&lt;</span><span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">);</span>

   m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;</span>
   cout<span class="sym">&lt;&lt;</span>endl<span class="sym">&lt;&lt;</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">&lt;&lt;</span>m<span class="sym">&lt;&lt;</span><span class="str">&quot; &quot;</span><span class="sym">&lt;&lt;</span><span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">);</span>
<span class="sym">}</span>
