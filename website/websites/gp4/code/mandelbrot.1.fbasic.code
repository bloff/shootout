rem The Computer Language Shootout
rem http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
rem contributed by Josh Goldfoot
rem based on the C version by Greg Buchholz

option explicit

<span class="kwa">sub</span> main<span class="sym">()</span>
    <span class="kwa">dim as</span> <span class="kwb">integer</span> w<span class="sym">,</span> h<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> stdout<span class="sym">,</span> i<span class="sym">,</span> iter<span class="sym">,</span> bit_num
    <span class="kwa">dim as</span> ubyte byte_acc
    <span class="kwa">dim as</span> double limit<span class="sym">,</span> zr<span class="sym">,</span> zi<span class="sym">,</span> cr<span class="sym">,</span> ci<span class="sym">,</span> tr<span class="sym">,</span> ti
    iter <span class="sym">=</span> <span class="num">50</span>
    limit <span class="sym">=</span> <span class="num">2.0</span>
    limit <span class="sym">=</span> limit <span class="sym">*</span> limit

    w <span class="sym">=</span> val<span class="sym">(</span>command$<span class="sym">)</span>
    <span class="kwa">if</span> w <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> w <span class="sym">=</span> <span class="num">300</span>
    h <span class="sym">=</span> w
    stdout <span class="sym">=</span> freefile
    open cons <span class="kwa">for</span> binary <span class="kwa">as</span> #stdout
    print <span class="str">&quot;P4&quot;</span>
    print str<span class="sym">(</span>w<span class="sym">);</span>h

    <span class="kwa">for</span> y <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> h<span class="sym">-</span><span class="num">1</span>
        <span class="kwa">for</span> x <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> w<span class="sym">-</span><span class="num">1</span>
            zr <span class="sym">=</span> <span class="num">0.0</span> <span class="sym">:</span> zi <span class="sym">=</span> <span class="num">0.0</span>
            cr <span class="sym">= (</span><span class="num">2</span><span class="sym">*</span>x<span class="sym">/</span>w <span class="sym">-</span> <span class="num">1.5</span><span class="sym">) :</span> ci<span class="sym">=(</span><span class="num">2</span><span class="sym">*</span>y<span class="sym">/</span>h <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>

            <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> iter<span class="sym">-</span><span class="num">1</span>
                tr <span class="sym">=</span> zr<span class="sym">*</span>zr <span class="sym">-</span> zi<span class="sym">*</span>zi <span class="sym">+</span> cr
                ti <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>zr<span class="sym">*</span>zi <span class="sym">+</span> ci
                zr <span class="sym">=</span> tr <span class="sym">:</span> zi <span class="sym">=</span> ti
                <span class="kwa">if</span> zr<span class="sym">*</span>zr<span class="sym">+</span>zi<span class="sym">*</span>zi <span class="sym">&gt;</span> limit <span class="kwa">then</span> exit <span class="kwa">for</span>
            <span class="kwa">next</span> i

            <span class="kwa">if</span> zr<span class="sym">*</span>zr<span class="sym">+</span>zi<span class="sym">*</span>zi <span class="sym">&gt;</span> limit <span class="kwa">then</span>
                byte_acc <span class="sym">= (</span>byte_acc shl <span class="num">1</span><span class="sym">)</span>
            <span class="kwa">else</span>
                byte_acc <span class="sym">= (</span>byte_acc shl <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span>
            <span class="kwa">end if</span>

            bit_num <span class="sym">+=</span> <span class="num">1</span>

            <span class="kwa">if</span> bit_num <span class="sym">=</span> <span class="num">8</span> <span class="kwa">then</span>
                put #stdout<span class="sym">, ,</span>byte_acc
                byte_acc <span class="sym">=</span> <span class="num">0</span>
                bit_num <span class="sym">=</span> <span class="num">0</span>
            <span class="kwa">elseif</span> x <span class="sym">=</span> w<span class="sym">-</span><span class="num">1</span> <span class="kwa">then</span>
                byte_acc <span class="sym">=</span> byte_acc shl <span class="sym">(</span><span class="num">8</span> <span class="sym">-</span> w mod <span class="num">8</span><span class="sym">)</span>
                put #stdout<span class="sym">, ,</span>byte_acc
                byte_acc <span class="sym">=</span> <span class="num">0</span>
                bit_num <span class="sym">=</span> <span class="num">0</span>
            <span class="kwa">end if</span>

        <span class="kwa">next</span> x
    <span class="kwa">next</span> y
<span class="kwa">end sub</span>

main<span class="sym">()</span>

