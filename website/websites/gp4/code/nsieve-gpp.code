<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// Precedent C entry modified by bearophile for speed and size, 31 Jan 2006</span>
<span class="slc">// Converted to C++ by Paul Kitchin</span>

<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;sstream&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>

<span class="kwb">void</span> <span class="kwd">nsieve</span><span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> max<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">static</span> std<span class="sym">::</span>vector<span class="sym">&lt;</span> <span class="kwb">unsigned char</span> <span class="sym">&gt;</span> flags<span class="sym">;</span>
   flags<span class="sym">.</span><span class="kwd">assign</span><span class="sym">(</span>max<span class="sym">,</span> <span class="kwa">false</span><span class="sym">);</span>
   std<span class="sym">::</span><span class="kwb">size_t</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">for</span> <span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> value <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> value <span class="sym">&lt;</span> max<span class="sym">; ++</span>value<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwa">if</span> <span class="sym">(!</span>flags<span class="sym">[</span>value<span class="sym">])</span>
      <span class="sym">{</span>
         <span class="sym">++</span>count<span class="sym">;</span>
         <span class="kwa">for</span> <span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> multiple <span class="sym">=</span> value <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span> multiple <span class="sym">&lt;</span> max<span class="sym">;</span> multiple <span class="sym">+=</span> value<span class="sym">)</span>
         <span class="sym">{</span>
            flags<span class="sym">[</span>multiple<span class="sym">] =</span> <span class="kwa">true</span><span class="sym">;</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Primes up to &quot;</span> <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> max <span class="sym">&lt;&lt;</span> <span class="str">' '</span> <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> count <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">* *</span> argv<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">!=</span> <span class="num">2</span><span class="sym">)</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: &quot;</span> <span class="sym">&lt;&lt;</span> argv<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
      <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwb">unsigned int</span> count<span class="sym">;</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>istringstream <span class="kwd">convertor</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
      <span class="kwa">if</span> <span class="sym">(!(</span>convertor <span class="sym">&gt;&gt;</span> count<span class="sym">) || !</span>convertor<span class="sym">.</span><span class="kwd">eof</span><span class="sym">())</span>
      <span class="sym">{</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: &quot;</span> <span class="sym">&lt;&lt;</span> argv<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">n must be an integer</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwa">for</span> <span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">3</span><span class="sym">; ++</span>i<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwd">nsieve</span><span class="sym">(</span><span class="num">10000</span> <span class="sym">&lt;&lt; (</span>count <span class="sym">-</span> i<span class="sym">));</span>
   <span class="sym">}</span>
<span class="sym">}</span>
