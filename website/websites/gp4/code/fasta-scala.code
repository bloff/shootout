<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">object</span> fasta
<span class="sym">{</span>
  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> N<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">));</span>

    <span class="kwa">val</span> fasta<span class="sym">:</span> Fasta <span class="sym">=</span> <span class="kwa">new</span> Fasta<span class="sym">;</span>

    fasta<span class="sym">.</span>repeatFasta<span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> N <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> ALU<span class="sym">,</span> <span class="num">60</span><span class="sym">);</span>
    fasta<span class="sym">.</span>randomFasta<span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> N <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> makeCumulativeTable<span class="sym">(</span>IUB<span class="sym">),</span> <span class="num">60</span><span class="sym">);</span>
    fasta<span class="sym">.</span>randomFasta<span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> N <span class="sym">*</span> <span class="num">5</span><span class="sym">,</span> makeCumulativeTable<span class="sym">(</span>HOMOSAPIENS<span class="sym">),</span> <span class="num">60</span><span class="sym">);</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">def</span> makeCumulativeTable<span class="sym">(</span>frequencyTable<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Frequency<span class="sym">]):</span> <span class="kwc">Array</span><span class="sym">[</span>Frequency<span class="sym">] =</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> cumulativeTable<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Frequency<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span>Frequency<span class="sym">](</span>frequencyTable<span class="sym">.</span>length<span class="sym">);</span>

    <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">var</span> cumulativeValue<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> frequencyTable<span class="sym">.</span>length<span class="sym">)</span>
    <span class="sym">{</span>
      cumulativeValue <span class="sym">=</span> cumulativeValue <span class="sym">+</span> frequencyTable<span class="sym">(</span>i<span class="sym">).</span>value<span class="sym">;</span>
      cumulativeTable<span class="sym">(</span>i<span class="sym">) =</span> <span class="kwa">new</span> Frequency<span class="sym">(</span>frequencyTable<span class="sym">(</span>i<span class="sym">).</span>key<span class="sym">,</span> cumulativeValue<span class="sym">);</span>
      i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> cumulativeTable<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">val</span> ALU<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span>
    <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="sym">+</span>
    <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="sym">+</span>
    <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="sym">+</span>
    <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="sym">+</span>
    <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="sym">+</span>
    <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="sym">+</span>
    <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;</span>

  <span class="kwa">val</span> IUB<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Frequency<span class="sym">] =</span> <span class="kwc">Array</span><span class="sym">(</span>
    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">),</span>
    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
  <span class="sym">);</span>

  <span class="kwa">val</span> HOMOSAPIENS<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Frequency<span class="sym">] =</span> <span class="kwc">Array</span><span class="sym">(</span>
    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">),</span>
    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">),</span> <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">)</span>
  <span class="sym">);</span>
<span class="sym">}</span>

<span class="slc">// -------------------------------</span>

<span class="kwa">final class</span> Fasta
<span class="sym">{</span>
  <span class="kwa">def</span> repeatFasta<span class="sym">(</span>id<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> desc<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> _n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> sequence<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> lineLength<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">val</span> seqlen<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> sequence<span class="sym">.</span>length<span class="sym">;</span> <span class="kwa">val</span> lineout <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span> <span class="kwa">var</span> n<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> _n<span class="sym">;</span>  <span class="kwa">var</span> k<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    Console<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;&gt;&quot;</span> <span class="sym">+</span> id <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> desc<span class="sym">);</span>

    <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">var</span> m<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> lineLength<span class="sym">)</span> n <span class="kwa">else</span> lineLength<span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> m<span class="sym">)</span>
      <span class="sym">{</span>
        <span class="kwa">if</span> <span class="sym">(</span>k <span class="sym">==</span> seqlen<span class="sym">)</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

        lineout<span class="sym">.</span>append<span class="sym">(</span>sequence<span class="sym">.</span>charAt<span class="sym">(</span>k<span class="sym">));</span>

        k <span class="sym">=</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>

      Console<span class="sym">.</span>println<span class="sym">(</span>lineout<span class="sym">.</span>toString<span class="sym">());</span> lineout<span class="sym">.</span>setLength<span class="sym">(</span><span class="num">0</span><span class="sym">);</span> n <span class="sym">=</span> n <span class="sym">-</span> lineLength<span class="sym">;</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">def</span> randomFasta<span class="sym">(</span>id<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> desc<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> _n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> cumulativeTable<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Frequency<span class="sym">],</span> lineLength<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> unit <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">var</span> n<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> _n<span class="sym">;</span> <span class="kwa">val</span> lineout <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span>

    Console<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;&gt;&quot;</span> <span class="sym">+</span> id <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> desc<span class="sym">);</span>

    <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">var</span> m<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> lineLength<span class="sym">)</span> n <span class="kwa">else</span> lineLength<span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> m<span class="sym">) {</span> lineout<span class="sym">.</span>append<span class="sym">(</span>selectRandom<span class="sym">(</span>cumulativeTable<span class="sym">));</span> i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">; }</span>

      Console<span class="sym">.</span>println<span class="sym">(</span>lineout<span class="sym">.</span>toString<span class="sym">());</span> lineout<span class="sym">.</span>setLength<span class="sym">(</span><span class="num">0</span><span class="sym">);</span> n <span class="sym">=</span> n <span class="sym">-</span> lineLength<span class="sym">;</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">private def</span> selectRandom<span class="sym">(</span>cumulativeTable<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span>Frequency<span class="sym">]):</span> <span class="kwb">char</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">var</span> i<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">val</span> rv<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> generateRandom<span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span>

    <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> cumulativeTable<span class="sym">.</span>length<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">if</span> <span class="sym">(</span>rv <span class="sym">&lt;</span> cumulativeTable<span class="sym">(</span>i<span class="sym">).</span>value<span class="sym">)</span> <span class="kwa">return</span> cumulativeTable<span class="sym">(</span>i<span class="sym">).</span>key<span class="sym">;</span>
      i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>

    cumulativeTable<span class="sym">(</span>i <span class="sym">-</span> <span class="num">1</span><span class="sym">).</span>key<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">private def</span> generateRandom<span class="sym">(</span>max<span class="sym">:</span> <span class="kwb">double</span><span class="sym">):</span> <span class="kwb">double</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">return</span> random<span class="sym">.</span>next<span class="sym">(</span>max<span class="sym">);</span>
  <span class="sym">}</span>

  <span class="slc">// -------------</span>

  <span class="kwa">private val</span> random<span class="sym">:</span> <span class="kwc">Random</span> <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Random</span><span class="sym">(</span><span class="num">42</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="slc">// -------------------------------</span>

<span class="kwa">final class</span> Frequency<span class="sym">(</span>_key<span class="sym">:</span> <span class="kwb">char</span><span class="sym">,</span> _value<span class="sym">:</span> <span class="kwb">double</span><span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">override def</span> toString<span class="sym">():</span> <span class="kwc">String</span> <span class="sym">=</span>
  <span class="sym">{</span>
    <span class="kwa">return</span> <span class="str">&quot;[&quot;</span> <span class="sym">+</span> key <span class="sym">+</span> <span class="str">&quot;:&quot;</span> <span class="sym">+</span> value <span class="sym">+</span> <span class="str">&quot;]&quot;</span><span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwa">var</span> key<span class="sym">:</span> <span class="kwb">char</span> <span class="sym">=</span> _key<span class="sym">;</span> <span class="kwa">var</span> value<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> _value<span class="sym">;</span>
<span class="sym">}</span>

<span class="slc">// -------------------------------</span>

<span class="kwa">final class</span> <span class="kwc">Random</span><span class="sym">(</span>seed<span class="sym">:</span> <span class="kwb">int</span><span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">def</span> next<span class="sym">(</span>max<span class="sym">:</span> <span class="kwb">double</span><span class="sym">):</span> <span class="kwb">double</span> <span class="sym">=</span>
  <span class="sym">{</span>
    last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;</span> <span class="kwa">return</span> max <span class="sym">*</span> last <span class="sym">/</span> IM<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwa">private val</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span>
  <span class="kwa">private val</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>
  <span class="kwa">private val</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>

  <span class="kwa">private var</span> last <span class="sym">=</span> seed<span class="sym">;</span>
<span class="sym">}</span>

