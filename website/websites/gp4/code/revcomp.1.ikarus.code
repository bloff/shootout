<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Derived by Michael D. Adams from the MzScheme varient</span>


<span class="hl sym">(</span>import <span class="hl sym">(</span>rnrs<span class="hl sym">)</span>
        <span class="hl sym">(</span>rnrs mutable-strings<span class="hl sym">))</span>

<span class="hl sym">(</span>define translation <span class="hl sym">(</span>make-vector <span class="hl num">128</span><span class="hl sym">))</span>

<span class="hl sym">(</span>for-each
 <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>from-to<span class="hl sym">)</span>
   <span class="hl sym">(</span>let<span class="hl sym">* ([</span>char <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>sym<span class="hl sym">) (</span>string-ref <span class="hl sym">(</span>symbol-<span class="hl sym">&gt;</span>string sym<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">))]</span>
          <span class="hl sym">[</span>from <span class="hl sym">(</span>char <span class="hl sym">(</span><span class="hl kwa">car</span> from-to<span class="hl sym">))]</span>
          <span class="hl sym">[</span>to <span class="hl sym">(</span>char-upcase <span class="hl sym">(</span>char <span class="hl sym">(</span><span class="hl kwa">cadr</span> from-to<span class="hl sym">)))])</span>
     <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> translation <span class="hl sym">(</span>char-<span class="hl sym">&gt;</span>integer from<span class="hl sym">)</span> to<span class="hl sym">)</span>
     <span class="hl sym">(</span>vector-<span class="hl kwa">set</span><span class="hl sym">!</span> translation <span class="hl sym">(</span>char-<span class="hl sym">&gt;</span>integer <span class="hl sym">(</span>char-upcase from<span class="hl sym">))</span> to<span class="hl sym">)))</span>
 <span class="hl sym">'([</span>a t<span class="hl sym">]</span>
   <span class="hl sym">[</span>c g<span class="hl sym">]</span>
   <span class="hl sym">[</span>g c<span class="hl sym">]</span>
   <span class="hl sym">[</span>t a<span class="hl sym">]</span>
   <span class="hl sym">[</span>u a<span class="hl sym">]</span>
   <span class="hl sym">[</span>m k<span class="hl sym">]</span>
   <span class="hl sym">[</span>r y<span class="hl sym">]</span>
   <span class="hl sym">[</span>w w<span class="hl sym">]</span>
   <span class="hl sym">[</span>s s<span class="hl sym">]</span>
   <span class="hl sym">[</span>y R<span class="hl sym">]</span>
   <span class="hl sym">[</span>k M<span class="hl sym">]</span>
   <span class="hl sym">[</span>v b<span class="hl sym">]</span>
   <span class="hl sym">[</span>h d<span class="hl sym">]</span>
   <span class="hl sym">[</span>d h<span class="hl sym">]</span>
   <span class="hl sym">[</span>b v<span class="hl sym">]</span>
   <span class="hl sym">[</span>n n<span class="hl sym">]))</span>

<span class="hl sym">(</span>define out <span class="hl sym">(</span>current-output-port<span class="hl sym">))</span>

<span class="hl slc">;; TODO: Ikarus doesn't have 4 arg form of put-substring yet</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>put-substring s i j<span class="hl sym">)</span>
  <span class="hl sym">(</span>let f <span class="hl sym">([</span>i i<span class="hl sym">])</span>
    <span class="hl sym">(</span>unless <span class="hl sym">(=</span> i j<span class="hl sym">)</span>
      <span class="hl sym">(</span>put-char out <span class="hl sym">(</span>string-ref s i<span class="hl sym">))</span>
      <span class="hl sym">(</span>f <span class="hl sym">(+</span> i <span class="hl num">1</span><span class="hl sym">)))))</span>

<span class="hl slc">;; Versions of (newline) and (put-string) that don't flush the buffer</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>newline<span class="hl sym">*) (</span>put-char out #\newline<span class="hl sym">))</span>
<span class="hl sym">(</span>define <span class="hl sym">(</span>put-whole-string s<span class="hl sym">) (</span>put-substring s <span class="hl num">0</span> <span class="hl sym">(</span>string-<span class="hl kwa">length</span> s<span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>output lines<span class="hl sym">)</span>
  <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(&gt; (</span><span class="hl kwa">length</span> lines<span class="hl sym">)</span> <span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>let<span class="hl sym">* ([</span>pos <span class="hl sym">(</span>- <span class="hl sym">(</span>string-<span class="hl kwa">length</span> <span class="hl sym">(</span><span class="hl kwa">cadr</span> lines<span class="hl sym">)) (</span>string-<span class="hl kwa">length</span> <span class="hl sym">(</span><span class="hl kwa">car</span> lines<span class="hl sym">)))]</span>
             <span class="hl sym">[</span>put-first-half
              <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>s i<span class="hl sym">) (</span>put-substring s <span class="hl num">0</span> i<span class="hl sym">))]</span>
             <span class="hl sym">[</span>put-second-half
              <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">(</span>s i<span class="hl sym">) (</span>put-substring s i <span class="hl sym">(</span>string-<span class="hl kwa">length</span> s<span class="hl sym">)))])</span>
        <span class="hl sym">(</span>put-whole-string <span class="hl sym">(</span><span class="hl kwa">car</span> lines<span class="hl sym">))</span>
        <span class="hl sym">(</span>put-first-half <span class="hl sym">(</span><span class="hl kwa">cadr</span> lines<span class="hl sym">)</span> pos<span class="hl sym">)</span>
        <span class="hl sym">(</span>newline<span class="hl sym">*)</span>
        <span class="hl sym">(</span>let loop <span class="hl sym">([</span>l <span class="hl sym">(</span><span class="hl kwa">cdr</span> lines<span class="hl sym">)])</span>
          <span class="hl sym">(</span><span class="hl kwa">cond</span>
           <span class="hl sym">[(</span><span class="hl kwa">null</span>? <span class="hl sym">(</span><span class="hl kwa">cdr</span> l<span class="hl sym">))</span>
            <span class="hl sym">(</span>put-second-half <span class="hl sym">(</span><span class="hl kwa">car</span> l<span class="hl sym">)</span> pos<span class="hl sym">)</span>
            <span class="hl sym">(</span>newline<span class="hl sym">*)]</span>
           <span class="hl sym">[</span>else
            <span class="hl sym">(</span>put-second-half <span class="hl sym">(</span><span class="hl kwa">car</span> l<span class="hl sym">)</span> pos<span class="hl sym">)</span>
            <span class="hl sym">(</span>put-first-half <span class="hl sym">(</span><span class="hl kwa">cadr</span> l<span class="hl sym">)</span> pos<span class="hl sym">)</span>
            <span class="hl sym">(</span>newline<span class="hl sym">*)</span>
            <span class="hl sym">(</span>loop <span class="hl sym">(</span><span class="hl kwa">cdr</span> l<span class="hl sym">))])))))</span>

<span class="hl sym">(</span>let <span class="hl sym">([</span>in <span class="hl sym">(</span>current-input-port<span class="hl sym">)])</span>
  <span class="hl sym">(</span>let loop <span class="hl sym">([</span>accum <span class="hl sym">'()])</span>
    <span class="hl sym">(</span>let <span class="hl sym">([</span>l <span class="hl sym">(</span>get-<span class="hl kwa">line</span> in<span class="hl sym">)])</span>
      <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>eof-object? l<span class="hl sym">)</span>
          <span class="hl sym">(</span>output accum<span class="hl sym">)</span>
          <span class="hl sym">(</span><span class="hl kwa">cond</span>
           <span class="hl sym">[(</span><span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl kwa">not</span> <span class="hl sym">(</span>zero? <span class="hl sym">(</span>string-<span class="hl kwa">length</span> l<span class="hl sym">)))</span>
                 <span class="hl sym">(</span>eqv? #\&gt; <span class="hl sym">(</span>string-ref l <span class="hl num">0</span><span class="hl sym">)))</span>
            <span class="hl sym">(</span>output accum<span class="hl sym">)</span>
            <span class="hl sym">(</span>put-whole-string l<span class="hl sym">)</span>
            <span class="hl sym">(</span>newline<span class="hl sym">*)</span>
            <span class="hl sym">(</span>loop <span class="hl sym">'())]</span>
           <span class="hl sym">[</span>else
            <span class="hl sym">(</span>let<span class="hl sym">* ([</span>len <span class="hl sym">(</span>string-<span class="hl kwa">length</span> l<span class="hl sym">)]</span>
                   <span class="hl sym">[</span>dest <span class="hl sym">(</span>make-string len<span class="hl sym">)])</span>
              <span class="hl sym">(</span>let loop <span class="hl sym">([</span>i <span class="hl num">0</span><span class="hl sym">][</span>j <span class="hl sym">(</span>- len <span class="hl num">1</span><span class="hl sym">)])</span>
                <span class="hl sym">(</span>unless <span class="hl sym">(=</span> i len<span class="hl sym">)</span>
                        <span class="hl sym">(</span>string-<span class="hl kwa">set</span><span class="hl sym">!</span> dest j
                           <span class="hl sym">(</span>vector-ref translation
                              <span class="hl sym">(</span>char-<span class="hl sym">&gt;</span>integer <span class="hl sym">(</span>string-ref l i<span class="hl sym">))))</span>
                        <span class="hl sym">(</span>loop <span class="hl sym">(+</span> i <span class="hl num">1</span><span class="hl sym">) (</span>- j <span class="hl num">1</span><span class="hl sym">))))</span>
              <span class="hl sym">(</span>loop <span class="hl sym">(</span><span class="hl kwa">cons</span> dest accum<span class="hl sym">)))]))))</span>
  <span class="hl sym">(</span>flush-output-port out<span class="hl sym">))</span>
