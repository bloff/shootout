<span class="com">/*</span>
<span class="com">** The Great Computer Language Shootout</span>
<span class="com">** http://shootout.alioth.debian.org/</span>
<span class="com">** contributed by Isaac Freeman</span>
<span class="com">** adapted from Mike Palle's gcc version</span>
<span class="com">**</span>
<span class="com">** compile with:</span>
<span class="com">**   dmd -O (-inline) -w -profile</span>
<span class="com">*/</span>

import std<span class="sym">.</span>string<span class="sym">;</span>
import std<span class="sym">.</span>math<span class="sym">;</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span> <span class="kwb">char</span><span class="sym">[][]</span> argv <span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">int</span> k<span class="sym">,</span> n <span class="sym">=</span> <span class="kwd">cast</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span><span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
  <span class="kwb">double</span> sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span> <span class="slc">// temp storage; derefencing and array lookups would slow things down.</span>
  <span class="kwb">double</span><span class="sym">[</span><span class="num">9</span><span class="sym">]</span> sums<span class="sym">;</span> <span class="slc">// just keep numbers for now, it's faster to print them all later</span>

  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">;</span> k<span class="sym">++) {</span>  <span class="com">/* pow(2.0/3.0, kd) inlined */</span>
    <span class="kwb">double</span> x <span class="sym">=</span> <span class="num">1.0</span><span class="sym">,</span> q <span class="sym">=</span> <span class="num">2.0</span><span class="sym">/</span><span class="num">3.0</span><span class="sym">;</span>
    <span class="kwb">int</span> j <span class="sym">=</span> k<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(;;) {</span> <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&amp;</span> <span class="num">1</span><span class="sym">)</span> x <span class="sym">*=</span> q<span class="sym">;</span> <span class="kwa">if</span> <span class="sym">((</span>j <span class="sym">&gt;&gt;=</span> <span class="num">1</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span> q <span class="sym">=</span> q<span class="sym">*</span>q<span class="sym">; }</span>
    sum <span class="sym">+=</span> x<span class="sym">;</span>
  <span class="sym">}</span>
  sums<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> sum<span class="sym">;</span>

  sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span> <span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">;</span> k<span class="sym">++)</span> sum <span class="sym">+=</span> <span class="num">1</span><span class="sym">/</span><span class="kwd">sqrt</span><span class="sym">(</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">);</span>  <span class="com">/* aka pow(kd, -0.5) */</span>
  sums<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> sum<span class="sym">;</span>

  sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">;</span> k<span class="sym">++)</span> sum <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/(</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">*(</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">+</span><span class="num">1.0</span><span class="sym">));</span>
  sums<span class="sym">[</span><span class="num">2</span><span class="sym">] =</span> sum<span class="sym">;</span>

  sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">;</span> k<span class="sym">++) {</span>
    <span class="kwb">double</span> sk <span class="sym">=</span> <span class="kwd">sin</span><span class="sym">(</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">);</span>
    sum <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/(</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">*</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">*</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">*</span>sk<span class="sym">*</span>sk<span class="sym">);</span>
  <span class="sym">}</span>
  sums<span class="sym">[</span><span class="num">3</span><span class="sym">] =</span> sum<span class="sym">;</span>

  sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">;</span> k<span class="sym">++) {</span>
    <span class="kwb">double</span> ck <span class="sym">=</span> <span class="kwd">cos</span><span class="sym">(</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">);</span>
    sum <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/((</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">*</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">)*</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">*</span>ck<span class="sym">*</span>ck<span class="sym">);</span>
  <span class="sym">}</span>
  sums<span class="sym">[</span><span class="num">4</span><span class="sym">] =</span> sum<span class="sym">;</span>

  sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">;</span> k<span class="sym">++)</span> sum <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">;</span>
  sums<span class="sym">[</span><span class="num">5</span><span class="sym">] =</span> sum<span class="sym">;</span>

  sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">;</span> k<span class="sym">++)</span> sum <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/(</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">*</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">);</span>
  sums<span class="sym">[</span><span class="num">6</span><span class="sym">] =</span> sum<span class="sym">;</span>

  sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">)</span> sum <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> k <span class="sym">&lt;=</span> n<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">)</span> sum <span class="sym">-=</span> <span class="num">1.0</span><span class="sym">/</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">;</span>
  sums<span class="sym">[</span><span class="num">7</span><span class="sym">] =</span> sum<span class="sym">;</span>

  sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">&lt;=</span> <span class="num">2</span><span class="sym">*</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> k <span class="sym">+=</span> <span class="num">4</span><span class="sym">)</span> sum <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">3</span><span class="sym">;</span> k <span class="sym">&lt;=</span> <span class="num">2</span><span class="sym">*</span>n<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">4</span><span class="sym">)</span> sum <span class="sym">-=</span> <span class="num">1.0</span><span class="sym">/</span><span class="kwd">cast</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>k<span class="sym">;</span>
  sums<span class="sym">[</span><span class="num">8</span><span class="sym">] =</span> sum<span class="sym">;</span>


  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">(2/3)^k</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sums<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">k^-0.5</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sums<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">1/k(k+1)</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sums<span class="sym">[</span><span class="num">2</span><span class="sym">]);</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Flint Hills</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sums<span class="sym">[</span><span class="num">3</span><span class="sym">]);</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Cookson Hills</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sums<span class="sym">[</span><span class="num">4</span><span class="sym">]);</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Harmonic</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sums<span class="sym">[</span><span class="num">5</span><span class="sym">]);</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Riemann Zeta</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sums<span class="sym">[</span><span class="num">6</span><span class="sym">]);</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Alternating Harmonic</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sums<span class="sym">[</span><span class="num">7</span><span class="sym">]);</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\t</span><span class="str">Gregory</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sums<span class="sym">[</span><span class="num">8</span><span class="sym">]);</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
