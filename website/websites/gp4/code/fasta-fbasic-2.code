<span class="slc">'The Computer Language Shootout</span>
<span class="slc">'http://shootout.alioth.debian.org/</span>
<span class="slc">'contributed by Antoni Gual  5/2006</span>

option explicit
<span class="kwa">type</span> aminoacids
   c <span class="kwa">as</span> <span class="kwb">integer</span>
   p <span class="kwa">as</span> double
<span class="kwa">end type</span>

const IUB_LEN <span class="sym">=</span> <span class="num">15</span>
<span class="kwa">dim</span> iub<span class="sym">(</span><span class="num">14</span><span class="sym">)</span> <span class="kwa">as</span> aminoacids<span class="sym">={(</span>asc<span class="sym">(</span><span class="str">&quot;a&quot;</span><span class="sym">),</span><span class="num">0.27</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;c&quot;</span><span class="sym">),</span><span class="num">0.12</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;g&quot;</span><span class="sym">),</span><span class="num">0.12</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;t&quot;</span><span class="sym">),</span><span class="num">0.27</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;B&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;D&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;H&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;K&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;M&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;N&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;R&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;S&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;V&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;W&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">),</span>_
                           <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;Y&quot;</span><span class="sym">),</span><span class="num">0.02</span><span class="sym">)}</span>

const HOMOSAPIENS_LEN <span class="sym">=</span> <span class="num">4</span>
<span class="kwa">dim</span> homosapiens<span class="sym">(</span><span class="num">3</span><span class="sym">)</span> <span class="kwa">as</span> aminoacids<span class="sym">={(</span>asc<span class="sym">(</span><span class="str">&quot;a&quot;</span><span class="sym">),</span><span class="num">0.3029549426680</span><span class="sym">),</span>_
                                  <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;c&quot;</span><span class="sym">),</span><span class="num">0.1979883004921</span><span class="sym">),</span>_
                                  <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;g&quot;</span><span class="sym">),</span><span class="num">0.1975473066391</span><span class="sym">),</span>_
                                  <span class="sym">(</span>asc<span class="sym">(</span><span class="str">&quot;t&quot;</span><span class="sym">),</span><span class="num">0.3015094502008</span><span class="sym">)}</span>

<span class="kwa">dim</span> alu <span class="kwa">as</span> zstring <span class="sym">*</span><span class="num">300</span> <span class="sym">=&gt;</span> <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>_
                           <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>_
                           <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>_
                           <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>_
                           <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>_
                           <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>_
                           <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

#define linelength <span class="num">60</span>

<span class="kwa">function</span> gen_random<span class="sym">(</span>max <span class="kwa">as</span> double<span class="sym">)</span> <span class="kwa">as</span> double
   const IM <span class="sym">=</span> <span class="num">139968</span>
   const IA <span class="sym">=</span>  <span class="num">3877</span>
   const IC <span class="sym">=</span>  <span class="num">29573</span>
   const iim<span class="sym">=</span>  <span class="num">1</span><span class="sym">/</span>im
   static last <span class="kwa">as</span> <span class="kwb">long</span> <span class="sym">=</span> <span class="num">42</span>
   last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> mod IM
   return max <span class="sym">*</span> last <span class="sym">*</span>iIM
<span class="kwa">end function</span>

<span class="kwa">sub</span> makeCumulative<span class="sym">(</span>genelist<span class="sym">()</span> <span class="kwa">as</span> aminoacids<span class="sym">,</span> count <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span>
   <span class="kwa">dim</span> cp <span class="kwa">as</span> double<span class="sym">,</span>i
   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> count<span class="sym">-</span><span class="num">1</span>
      cp <span class="sym">+=</span> genelist<span class="sym">(</span>i<span class="sym">)</span>.p
      genelist<span class="sym">(</span>i<span class="sym">)</span>.p <span class="sym">=</span> cp
   <span class="kwa">next</span> i
<span class="kwa">end sub</span>

<span class="kwa">function</span> selectRandom<span class="sym">(</span>genelist<span class="sym">()</span> <span class="kwa">as</span> aminoacids<span class="sym">,</span> count <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span>
   <span class="kwa">dim</span> r <span class="kwa">as</span> double<span class="sym">,</span>lo<span class="sym">,</span>hi<span class="sym">,</span>i
   r <span class="sym">=</span> gen_random<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
   <span class="kwa">if</span> r <span class="sym">&lt;</span> genelist<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.p <span class="kwa">then</span> return genelist<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.c
   lo <span class="sym">=</span> <span class="num">0</span>
   hi <span class="sym">=</span> count <span class="sym">-</span> <span class="num">1</span>
   <span class="kwa">while</span> hi <span class="sym">&gt;</span> lo <span class="sym">+</span> <span class="num">1</span>
      i <span class="sym">= (</span>hi <span class="sym">+</span> lo<span class="sym">)</span> \ <span class="num">2</span>
      <span class="kwa">if</span> r <span class="sym">&lt;</span> genelist<span class="sym">(</span>i<span class="sym">)</span>.p <span class="kwa">then</span> hi <span class="sym">=</span> i <span class="kwa">else</span> lo <span class="sym">=</span> i
   wend
   return genelist<span class="sym">(</span>hi<span class="sym">)</span>.c
<span class="kwa">end function</span>

<span class="kwa">sub</span> makeRandomFasta<span class="sym">(</span>id <span class="kwa">as</span> <span class="kwb">string</span><span class="sym">,</span> desc <span class="kwa">as</span> <span class="kwb">string</span><span class="sym">,</span> genelist<span class="sym">()</span> <span class="kwa">as</span> aminoacids<span class="sym">,</span> count <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">,</span> n <span class="kwa">as</span> <span class="kwb">long</span><span class="sym">)</span>

   <span class="kwa">dim</span> i<span class="sym">,</span>todo<span class="sym">,</span>m<span class="sym">,</span>tline <span class="kwa">as</span> zstring <span class="sym">*</span> linelength<span class="sym">+</span><span class="num">1</span>
   print <span class="str">&quot;&gt;&quot;</span><span class="sym">;</span>id<span class="sym">;</span><span class="str">&quot; &quot;</span><span class="sym">;</span>desc
   <span class="kwa">for</span> todo <span class="sym">=</span>n <span class="kwa">to</span> <span class="num">1</span> <span class="kwa">step</span> <span class="sym">-</span>linelength
     m<span class="sym">=</span>iif<span class="sym">(</span>todo<span class="sym">&lt;</span>linelength<span class="sym">,</span>todo<span class="sym">,</span>linelength<span class="sym">)</span>
     <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> m<span class="sym">-</span><span class="num">1</span><span class="sym">:</span> tline<span class="sym">[</span>i<span class="sym">]=</span>selectRandom<span class="sym">(</span>genelist<span class="sym">(),</span> count<span class="sym">):</span><span class="kwa">next</span>
     tline<span class="sym">[</span>i<span class="sym">]=</span><span class="num">0</span>
     print tline
   <span class="kwa">next</span>
<span class="kwa">end sub</span>

<span class="kwa">sub</span> makeRepeatFasta<span class="sym">(</span>id <span class="kwa">as</span> <span class="kwb">string</span><span class="sym">,</span> desc <span class="kwa">as</span> <span class="kwb">string</span><span class="sym">,</span> s <span class="kwa">as</span> zstring ptr<span class="sym">,</span> n <span class="kwa">as</span> <span class="kwb">integer</span><span class="sym">)</span>
  <span class="kwa">dim</span> sp<span class="sym">,</span>lst<span class="sym">,</span>i<span class="sym">,</span>ll
  lst<span class="sym">=</span>len<span class="sym">(*</span>s<span class="sym">)</span>
  sp<span class="sym">=</span><span class="num">1</span>
  print <span class="str">&quot;&gt;&quot;</span><span class="sym">;</span>id<span class="sym">;</span><span class="str">&quot; &quot;</span><span class="sym">;</span>desc
  <span class="kwa">for</span> i<span class="sym">=</span>n <span class="kwa">to</span> <span class="num">1</span> <span class="kwa">step</span> <span class="sym">-</span>linelength
     ll<span class="sym">=</span>iif<span class="sym">(</span>i<span class="sym">&lt;</span>linelength<span class="sym">,</span>i<span class="sym">,</span>linelength<span class="sym">)</span>
     <span class="kwa">if</span> sp<span class="sym">&lt;</span>lst<span class="sym">-</span>ll <span class="kwa">then</span>
       print mid<span class="sym">(*</span>s<span class="sym">,</span>sp<span class="sym">,</span>ll<span class="sym">)</span>
       sp<span class="sym">+=</span>ll
     <span class="kwa">else</span>
       print mid<span class="sym">(*</span>s<span class="sym">,</span>sp<span class="sym">);</span>
       sp<span class="sym">=</span>ll<span class="sym">-(</span>lst<span class="sym">-</span>sp<span class="sym">)</span>
       print left<span class="sym">(*</span>s<span class="sym">,</span>sp<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
     <span class="kwa">end if</span>
   <span class="kwa">next</span>
<span class="kwa">end sub</span>

<span class="kwa">dim</span> n
n <span class="sym">=</span> val<span class="sym">(</span>command$<span class="sym">)</span>
<span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> n <span class="sym">=</span> <span class="num">1000</span>
makeCumulative<span class="sym">(</span>iub<span class="sym">(),</span> IUB_LEN<span class="sym">)</span>
makeCumulative<span class="sym">(</span>homosapiens<span class="sym">(),</span> HOMOSAPIENS_LEN<span class="sym">)</span>
makeRepeatFasta<span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> &#64;alu<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">)</span>
makeRandomFasta<span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> iub<span class="sym">(),</span> IUB_LEN<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">)</span>
makeRandomFasta<span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> homosapiens<span class="sym">(),</span> HOMOSAPIENS_LEN<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">)</span>
