<span class="com">&quot;  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Paolo Bonzini&quot;!</span>
<span class="com"></span>
<span class="com">Smalltalk.Shootout defineClass: #Chameleon</span>
<span class="com">	superclass: #{Core.Object}</span>
<span class="com">	indexedType: #none</span>
<span class="com">	private: false</span>
<span class="com">	instanceVariableNames: 'meetings color semaphore waitingForPair '</span>
<span class="com">	classInstanceVariableNames: ''</span>
<span class="com">	imports: ''</span>
<span class="com">	category: 'Shootout'!</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.Chameleon class methodsFor: 'initialize-release'!</span>
<span class="com"></span>
<span class="com">color: c</span>
<span class="com">    ^self new</span>
<span class="com">	initialize;</span>
<span class="com">	color: c ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.Chameleon methodsFor: 'initialize-release'!</span>
<span class="com"></span>
<span class="com">initialize</span>
<span class="com">    meetings := 0.</span>
<span class="com">    waitingForPair := Semaphore new.</span>
<span class="com">    semaphore := Semaphore new ! !</span>
<span class="com"></span>
<span class="com">!Shootout.Chameleon methodsFor: 'accessing'!</span>
<span class="com"></span>
<span class="com">color</span>
<span class="com">    ^color !</span>
<span class="com"></span>
<span class="com">meetings</span>
<span class="com">    ^meetings !</span>
<span class="com"></span>
<span class="com">wait</span>
<span class="com">    semaphore wait ! !</span>
<span class="com"></span>
<span class="com">!Shootout.Chameleon methodsFor: 'running'!</span>
<span class="com"></span>
<span class="com">fork: meetingPlace</span>
<span class="com">    ^[ self run: meetingPlace ] fork !</span>
<span class="com"></span>
<span class="com">run: meetingPlace</span>
<span class="com">    [ color == #faded ] whileFalse: [</span>
<span class="com">	meetingPlace reachedBy: self.</span>
<span class="com">	waitingForPair wait ] ! !</span>
<span class="com"></span>
<span class="com">!Shootout.Chameleon methodsFor: 'changing colors'!</span>
<span class="com"></span>
<span class="com">color: c</span>
<span class="com">    color := c !</span>
<span class="com"></span>
<span class="com">fade</span>
<span class="com">    color := #faded.</span>
<span class="com">    waitingForPair signal.</span>
<span class="com">    semaphore signal !</span>
<span class="com"></span>
<span class="com">met: other</span>
<span class="com">    | newColor |</span>
<span class="com">    meetings := meetings + 1.</span>
<span class="com">    color == #red ifTrue: [</span>
<span class="com">	newColor := other == #yellow ifTrue: [ #blue ] ifFalse: [ #yellow ] ].</span>
<span class="com">    color == #yellow ifTrue: [</span>
<span class="com">	newColor := other == #red ifTrue: [ #blue ] ifFalse: [ #red ] ].</span>
<span class="com">    color == #blue ifTrue: [</span>
<span class="com">	newColor := other == #red ifTrue: [ #yellow ] ifFalse: [ #red ] ].</span>
<span class="com">    color := newColor.</span>
<span class="com">    waitingForPair signal ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">Smalltalk.Shootout defineClass: #MeetingPlace</span>
<span class="com">	superclass: #{Core.Object}</span>
<span class="com">	indexedType: #none</span>
<span class="com">	private: false</span>
<span class="com">	instanceVariableNames: 'mutex first total max '</span>
<span class="com">	classInstanceVariableNames: ''</span>
<span class="com">	imports: ''</span>
<span class="com">	category: 'Shootout'!</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.MeetingPlace class methodsFor: 'instance creation'!</span>
<span class="com"></span>
<span class="com">forMeetings: maxMeetings</span>
<span class="com">    ^super new</span>
<span class="com">	initialize;</span>
<span class="com">	max: maxMeetings;</span>
<span class="com">	yourself ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.MeetingPlace methodsFor: 'initialize-release'!</span>
<span class="com"></span>
<span class="com">initialize</span>
<span class="com">    mutex := Semaphore forMutualExclusion.</span>
<span class="com">    total := 0 ! !</span>
<span class="com"></span>
<span class="com">!Shootout.MeetingPlace methodsFor: 'running'!</span>
<span class="com"></span>
<span class="com">max: maxMeetings</span>
<span class="com">    max := maxMeetings !</span>
<span class="com"></span>
<span class="com">organizeMeetingWith: second</span>
<span class="com">    total &gt;= max</span>
<span class="com">	ifTrue: [</span>
<span class="com">	    first fade.</span>
<span class="com">	    second fade ]</span>
<span class="com">	ifFalse: [</span>
<span class="com">	    first met: second color.</span>
<span class="com">	    second met: first color ].</span>
<span class="com">    total := total + 1 !</span>
<span class="com"></span>
<span class="com">reachedBy: chameleon</span>
<span class="com">    mutex critical: [</span>
<span class="com">	first isNil</span>
<span class="com">	    ifTrue: [ first := chameleon ]</span>
<span class="com">	    ifFalse: [ self organizeMeetingWith: chameleon. first := nil ] ] ! !</span>
<span class="com"></span>
<span class="com"></span>
<span class="com">!Shootout.Tests class methodsFor: 'benchmarking'!</span>
<span class="com"></span>
<span class="com">chameneos</span>
<span class="com">   | c1 c2 c3 c4 mp |</span>
<span class="com">   c1 := Chameleon color: #blue.</span>
<span class="com">   c2 := Chameleon color: #red.</span>
<span class="com">   c3 := Chameleon color: #yellow.</span>
<span class="com">   c4 := Chameleon color: #blue.</span>
<span class="com">   mp := MeetingPlace forMeetings: CEnvironment argv first asNumber.</span>
<span class="com">   c1 fork: mp.</span>
<span class="com">   c2 fork: mp.</span>
<span class="com">   c3 fork: mp.</span>
<span class="com">   c4 fork: mp.</span>
<span class="com">   c1 wait.</span>
<span class="com">   c2 wait.</span>
<span class="com">   c3 wait.</span>
<span class="com">   c4 wait.</span>
<span class="com">   ^(c1 meetings + c2 meetings + c3 meetings + c4 meetings) printString withNl ! !</span>
