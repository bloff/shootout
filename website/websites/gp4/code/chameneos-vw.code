<span class="str">&quot;  The Computer Language Shootout</span>
<span class="str">   http://shootout.alioth.debian.org/</span>
<span class="str">   contributed by Paolo Bonzini&quot;</span><span class="sym">!</span>

Smalltalk.Shootout defineClass<span class="sym">:</span> <span class="slc">#Chameleon</span>
	superclass<span class="sym">:</span> <span class="slc">#{Core.Object}</span>
	indexedType<span class="sym">:</span> <span class="slc">#none</span>
	private<span class="sym">:</span> false
	instanceVariableNames<span class="sym">:</span> <span class="str">'meetings color semaphore waitingForPair '</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>


<span class="sym">!</span>Shootout.Chameleon class methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

color<span class="sym">:</span> c
    ^self new
	initialize<span class="sym">;</span>
	color<span class="sym">:</span> c <span class="sym">! !</span>


<span class="sym">!</span>Shootout.Chameleon methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

initialize
    meetings <span class="sym">:=</span> <span class="num">0</span>.
    waitingForPair <span class="sym">:=</span> Semaphore new.
    semaphore <span class="sym">:=</span> Semaphore new <span class="sym">! !</span>

<span class="sym">!</span>Shootout.Chameleon methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

color
    ^color <span class="sym">!</span>

meetings
    ^meetings <span class="sym">!</span>

wait
    semaphore wait <span class="sym">! !</span>

<span class="sym">!</span>Shootout.Chameleon methodsFor<span class="sym">:</span> <span class="str">'running'</span><span class="sym">!</span>

fork<span class="sym">:</span> meetingPlace
    ^<span class="sym">[</span> self run<span class="sym">:</span> meetingPlace <span class="sym">]</span> fork <span class="sym">!</span>

run<span class="sym">:</span> meetingPlace
    <span class="sym">[</span> color <span class="sym">==</span> <span class="slc">#faded ] whileFalse: [</span>
	meetingPlace reachedBy<span class="sym">:</span> self.
	waitingForPair wait <span class="sym">] ! !</span>

<span class="sym">!</span>Shootout.Chameleon methodsFor<span class="sym">:</span> <span class="str">'changing colors'</span><span class="sym">!</span>

color<span class="sym">:</span> c
    color <span class="sym">:=</span> c <span class="sym">!</span>

fade
    color <span class="sym">:=</span> <span class="slc">#faded.</span>
    waitingForPair signal.
    semaphore signal <span class="sym">!</span>

met<span class="sym">:</span> other
    <span class="sym">|</span> newColor <span class="sym">|</span>
    meetings <span class="sym">:=</span> meetings <span class="sym">+</span> <span class="num">1</span>.
    color <span class="sym">==</span> <span class="slc">#red ifTrue: [</span>
	newColor <span class="sym">:=</span> other <span class="sym">==</span> <span class="slc">#yellow ifTrue: [ #blue ] ifFalse: [ #yellow ] ].</span>
    color <span class="sym">==</span> <span class="slc">#yellow ifTrue: [</span>
	newColor <span class="sym">:=</span> other <span class="sym">==</span> <span class="slc">#red ifTrue: [ #blue ] ifFalse: [ #red ] ].</span>
    color <span class="sym">==</span> <span class="slc">#blue ifTrue: [</span>
	newColor <span class="sym">:=</span> other <span class="sym">==</span> <span class="slc">#red ifTrue: [ #yellow ] ifFalse: [ #red ] ].</span>
    color <span class="sym">:=</span> newColor.
    waitingForPair signal <span class="sym">! !</span>


Smalltalk.Shootout defineClass<span class="sym">:</span> <span class="slc">#MeetingPlace</span>
	superclass<span class="sym">:</span> <span class="slc">#{Core.Object}</span>
	indexedType<span class="sym">:</span> <span class="slc">#none</span>
	private<span class="sym">:</span> false
	instanceVariableNames<span class="sym">:</span> <span class="str">'mutex first total max '</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>


<span class="sym">!</span>Shootout.MeetingPlace class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

forMeetings<span class="sym">:</span> maxMeetings
    ^super new
	initialize<span class="sym">;</span>
	max<span class="sym">:</span> maxMeetings<span class="sym">;</span>
	yourself <span class="sym">! !</span>


<span class="sym">!</span>Shootout.MeetingPlace methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

initialize
    mutex <span class="sym">:=</span> Semaphore forMutualExclusion.
    total <span class="sym">:=</span> <span class="num">0</span> <span class="sym">! !</span>

<span class="sym">!</span>Shootout.MeetingPlace methodsFor<span class="sym">:</span> <span class="str">'running'</span><span class="sym">!</span>

max<span class="sym">:</span> maxMeetings
    max <span class="sym">:=</span> maxMeetings <span class="sym">!</span>

organizeMeetingWith<span class="sym">:</span> second
    total <span class="sym">&gt;=</span> max
	ifTrue<span class="sym">: [</span>
	    first fade.
	    second fade <span class="sym">]</span>
	ifFalse<span class="sym">: [</span>
	    first met<span class="sym">:</span> second color.
	    second met<span class="sym">:</span> first color <span class="sym">]</span>.
    total <span class="sym">:=</span> total <span class="sym">+</span> <span class="num">1</span> <span class="sym">!</span>

reachedBy<span class="sym">:</span> chameleon
    mutex critical<span class="sym">: [</span>
	first isNil
	    ifTrue<span class="sym">: [</span> first <span class="sym">:=</span> chameleon <span class="sym">]</span>
	    ifFalse<span class="sym">: [</span> self organizeMeetingWith<span class="sym">:</span> chameleon. first <span class="sym">:=</span> nil <span class="sym">] ] ! !</span>


<span class="sym">!</span>Shootout.Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

chameneos
   <span class="sym">|</span> c1 c2 c3 c4 mp <span class="sym">|</span>
   c1 <span class="sym">:=</span> Chameleon color<span class="sym">:</span> <span class="slc">#blue.</span>
   c2 <span class="sym">:=</span> Chameleon color<span class="sym">:</span> <span class="slc">#red.</span>
   c3 <span class="sym">:=</span> Chameleon color<span class="sym">:</span> <span class="slc">#yellow.</span>
   c4 <span class="sym">:=</span> Chameleon color<span class="sym">:</span> <span class="slc">#blue.</span>
   mp <span class="sym">:=</span> MeetingPlace forMeetings<span class="sym">:</span> CEnvironment argv first asNumber.
   c1 fork<span class="sym">:</span> mp.
   c2 fork<span class="sym">:</span> mp.
   c3 fork<span class="sym">:</span> mp.
   c4 fork<span class="sym">:</span> mp.
   c1 wait.
   c2 wait.
   c3 wait.
   c4 wait.
   ^<span class="sym">(</span>c1 meetings <span class="sym">+</span> c2 meetings <span class="sym">+</span> c3 meetings <span class="sym">+</span> c4 meetings<span class="sym">)</span> printString withNl <span class="sym">! !</span>
