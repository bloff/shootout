<span class="hl com">/*</span>
<span class="hl com">	The Computer Language Shootout</span>
<span class="hl com">	http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">	contributed by Jochen Hinrichsen</span>
<span class="hl com"></span>
<span class="hl com">	Trailing 'G' stands for BigInteger (unrestricted size) in groovy</span>
<span class="hl com">*/</span>

<span class="hl kwc">class</span> T <span class="hl sym">{</span>

	<span class="hl kwc">public</span> q<span class="hl sym">,</span> r<span class="hl sym">,</span> s<span class="hl sym">,</span> t<span class="hl sym">,</span> k <span class="hl sym">=</span> <span class="hl num">0</span>G

	def <span class="hl kwd">compose</span><span class="hl sym">(</span>t2<span class="hl sym">) {</span>
		<span class="hl kwa">new</span> <span class="hl kwd">T</span><span class="hl sym">(</span>q<span class="hl sym">:</span> q <span class="hl sym">*</span> t2<span class="hl sym">.</span>q<span class="hl sym">,</span>
			r<span class="hl sym">:</span> q <span class="hl sym">*</span> t2<span class="hl sym">.</span>r <span class="hl sym">+</span> r <span class="hl sym">*</span> t2<span class="hl sym">.</span>t<span class="hl sym">,</span>
			s<span class="hl sym">:</span> s <span class="hl sym">*</span> t2<span class="hl sym">.</span>q <span class="hl sym">+</span> t <span class="hl sym">*</span> t2<span class="hl sym">.</span>s<span class="hl sym">,</span>
			t<span class="hl sym">:</span> s <span class="hl sym">*</span> t2<span class="hl sym">.</span>r <span class="hl sym">+</span> t <span class="hl sym">*</span> t2<span class="hl sym">.</span>t<span class="hl sym">)</span>
	<span class="hl sym">}</span>

	def <span class="hl kwd">extract</span><span class="hl sym">(</span>j<span class="hl sym">) {</span>
		<span class="hl slc">// groovy does not support integer division using /</span>
		<span class="hl sym">(</span>q<span class="hl sym">*</span>j <span class="hl sym">+</span> r<span class="hl sym">).</span><span class="hl kwd">divide</span><span class="hl sym">(</span>s<span class="hl sym">*</span>j <span class="hl sym">+</span> t<span class="hl sym">)</span>
	<span class="hl sym">}</span>

	def <span class="hl kwd">next</span><span class="hl sym">() {</span>
		k<span class="hl sym">++</span>
		q <span class="hl sym">=</span> k
		r <span class="hl sym">=</span> <span class="hl num">4</span>G<span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">2</span>G
		s <span class="hl sym">=</span> <span class="hl num">0</span>G
		t <span class="hl sym">=</span> <span class="hl num">2</span>G<span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span>G

		<span class="hl kwa">this</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwc">class</span> Digits <span class="hl sym">{</span>

    def x <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">T</span><span class="hl sym">(</span>q<span class="hl sym">:</span><span class="hl num">0</span>G<span class="hl sym">,</span> r<span class="hl sym">:</span><span class="hl num">0</span>G<span class="hl sym">,</span> s<span class="hl sym">:</span><span class="hl num">0</span>G<span class="hl sym">,</span> t<span class="hl sym">:</span><span class="hl num">0</span>G<span class="hl sym">)</span>
    def z <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">T</span><span class="hl sym">(</span>q<span class="hl sym">:</span><span class="hl num">1</span>G<span class="hl sym">,</span> r<span class="hl sym">:</span><span class="hl num">0</span>G<span class="hl sym">,</span> s<span class="hl sym">:</span><span class="hl num">0</span>G<span class="hl sym">,</span> t<span class="hl sym">:</span><span class="hl num">1</span>G<span class="hl sym">)</span>

	<span class="hl kwc">private</span> <span class="hl kwd">consume</span><span class="hl sym">(</span>T t<span class="hl sym">) {</span>
		z<span class="hl sym">.</span><span class="hl kwd">compose</span><span class="hl sym">(</span>t<span class="hl sym">)</span>
	<span class="hl sym">}</span>

	<span class="hl kwc">private</span> <span class="hl kwd">digit</span><span class="hl sym">() {</span>
		z<span class="hl sym">.</span><span class="hl kwd">extract</span><span class="hl sym">(</span><span class="hl num">3</span>G<span class="hl sym">)</span>
	<span class="hl sym">}</span>

	<span class="hl kwc">private</span> <span class="hl kwd">isSafe</span><span class="hl sym">(</span>digit<span class="hl sym">) {</span>
		digit <span class="hl sym">==</span> z<span class="hl sym">.</span><span class="hl kwd">extract</span><span class="hl sym">(</span><span class="hl num">4</span>G<span class="hl sym">)</span>
	<span class="hl sym">}</span>

	def <span class="hl kwd">next</span><span class="hl sym">() {</span>
		def y <span class="hl sym">=</span> <span class="hl kwd">digit</span><span class="hl sym">()</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">isSafe</span><span class="hl sym">(</span>y<span class="hl sym">)) {</span>
			z <span class="hl sym">=</span> <span class="hl kwd">produce</span><span class="hl sym">(</span>y<span class="hl sym">)</span>
			<span class="hl kwa">return</span> y
		<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
			z <span class="hl sym">=</span> <span class="hl kwd">consume</span><span class="hl sym">(</span>x<span class="hl sym">.</span><span class="hl kwd">next</span><span class="hl sym">())</span>
			<span class="hl kwa">return</span> <span class="hl kwd">next</span><span class="hl sym">()</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>

	<span class="hl kwc">private</span> <span class="hl kwd">produce</span><span class="hl sym">(</span>y<span class="hl sym">) {</span>
        <span class="hl kwa">new</span> <span class="hl kwd">T</span><span class="hl sym">(</span>q<span class="hl sym">:</span><span class="hl num">10</span>G<span class="hl sym">,</span> r<span class="hl sym">:-</span><span class="hl num">10</span>G<span class="hl sym">*</span>y<span class="hl sym">,</span> s<span class="hl sym">:</span><span class="hl num">0</span>G<span class="hl sym">,</span> t<span class="hl sym">:</span><span class="hl num">1</span>G<span class="hl sym">).</span><span class="hl kwd">compose</span><span class="hl sym">(</span>z<span class="hl sym">)</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>

def L <span class="hl sym">=</span> <span class="hl num">10</span>
def n <span class="hl sym">= (</span>args<span class="hl sym">.</span>length <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> ? <span class="hl num">10</span> <span class="hl sym">:</span> args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">toInteger</span><span class="hl sym">()</span>
def digits <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Digits</span><span class="hl sym">()</span>
def j <span class="hl sym">=</span> <span class="hl num">0</span>
<span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">){</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;=</span> L<span class="hl sym">) {</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span>i in <span class="hl num">0</span><span class="hl sym">..&lt;</span>L<span class="hl sym">)</span> print digits<span class="hl sym">.</span><span class="hl kwd">next</span><span class="hl sym">()</span>
		j <span class="hl sym">+=</span> L
	<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span>i in <span class="hl num">0</span><span class="hl sym">..&lt;</span>n<span class="hl sym">)</span> print digits<span class="hl sym">.</span><span class="hl kwd">next</span><span class="hl sym">()</span>
		<span class="hl kwd">print</span><span class="hl sym">(</span><span class="hl str">&quot; &quot;</span> <span class="hl sym">* (</span>L<span class="hl sym">-</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span>
		j <span class="hl sym">+=</span> n<span class="hl sym">;</span>
	<span class="hl sym">}</span>
	<span class="hl kwd">print</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">);</span>
	println j
	n <span class="hl sym">-=</span> L<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl slc">// EOF</span>

