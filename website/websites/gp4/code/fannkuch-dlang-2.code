<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://shootout.alioth.debian.org/</span>

<span class="hl slc">// Converted and improved from C to D by bearophile</span>
<span class="hl slc">// Compile:  dmd -O -release fannkuch.d</span>

<span class="hl slc">// This code doesn't look nice because it's optimized</span>
<span class="hl slc">//   for speed. D code that looks better is possible.</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>string<span class="hl sym">:</span> atoi<span class="hl sym">;</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>c<span class="hl sym">.</span>stdlib<span class="hl sym">:</span> calloc<span class="hl sym">;</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>c<span class="hl sym">.</span>string<span class="hl sym">:</span> memcpy<span class="hl sym">;</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[][]</span> args<span class="hl sym">) {</span>
    size_t n <span class="hl sym">=</span> args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]) :</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %ld</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
<span class="hl sym">}</span>

size_t <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>size_t n<span class="hl sym">) {</span>
    size_t<span class="hl sym">*</span> perm<span class="hl sym">;</span>
    size_t<span class="hl sym">*</span> perm1<span class="hl sym">;</span>
    size_t<span class="hl sym">*</span> count<span class="hl sym">;</span>
    size_t flips<span class="hl sym">,</span> flipsMax<span class="hl sym">,</span> aux<span class="hl sym">,</span> r<span class="hl sym">,</span> i<span class="hl sym">,</span> k<span class="hl sym">,</span> didpr<span class="hl sym">;</span>
    size_t n1 <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

    perm <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">typeof</span><span class="hl sym">(</span>perm<span class="hl sym">))</span><span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">, (*</span>perm<span class="hl sym">).</span>sizeof<span class="hl sym">);</span>
    perm1 <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">typeof</span><span class="hl sym">(</span>perm1<span class="hl sym">))</span><span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">, (*</span>perm1<span class="hl sym">).</span>sizeof<span class="hl sym">);</span>
    count <span class="hl sym">=</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">typeof</span><span class="hl sym">(</span>count<span class="hl sym">))</span><span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">, (*</span>count<span class="hl sym">).</span>sizeof<span class="hl sym">);</span>

    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n <span class="hl sym">; ++</span>i<span class="hl sym">)</span>
        perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span>

    r <span class="hl sym">=</span> n<span class="hl sym">;</span>
    didpr <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    flipsMax <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">( ; ; ) {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>didpr <span class="hl sym">&lt;</span> <span class="hl num">30</span><span class="hl sym">) {</span>
            <span class="hl kwa">for</span><span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">; ++</span>i<span class="hl sym">)</span>
                <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%d&quot;</span><span class="hl sym">,</span> <span class="hl num">1</span> <span class="hl sym">+</span> perm1<span class="hl sym">[</span>i<span class="hl sym">]);</span>
            <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
            <span class="hl sym">++</span>didpr<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">for</span> <span class="hl sym">( ;</span> r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">; --</span>r<span class="hl sym">)</span>
            count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span>

        <span class="hl kwa">if</span> <span class="hl sym">(!(</span>perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl num">0</span> <span class="hl sym">||</span> perm1<span class="hl sym">[</span>n1<span class="hl sym">] ==</span> n1<span class="hl sym">)) {</span>
            flips <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl slc">// for (i = 1; i &lt; n; ++i) perm[i] = perm1[i];</span>
            <span class="hl kwd">memcpy</span><span class="hl sym">(&amp;(</span>perm<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]), &amp;(</span>perm1<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]), (*</span>perm<span class="hl sym">).</span>sizeof<span class="hl sym">*(</span>n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">));</span>
            k <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl kwa">do</span> <span class="hl sym">{</span>
                size_t j<span class="hl sym">;</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> j <span class="hl sym">=</span> k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> j<span class="hl sym">; ++</span>i<span class="hl sym">, --</span>j<span class="hl sym">) {</span>
                    aux <span class="hl sym">=</span> perm<span class="hl sym">[</span>i<span class="hl sym">];</span>
                    perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm<span class="hl sym">[</span>j<span class="hl sym">];</span>
                    perm<span class="hl sym">[</span>j<span class="hl sym">] =</span> aux<span class="hl sym">;</span>
                <span class="hl sym">}</span>
                <span class="hl sym">++</span>flips<span class="hl sym">;</span>
                j <span class="hl sym">=</span> perm<span class="hl sym">[</span>k<span class="hl sym">];</span>
                perm<span class="hl sym">[</span>k<span class="hl sym">] =</span> k<span class="hl sym">;</span>
                k <span class="hl sym">=</span> j<span class="hl sym">;</span>
            <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>k<span class="hl sym">);</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>flipsMax <span class="hl sym">&lt;</span> flips<span class="hl sym">)</span>
                flipsMax <span class="hl sym">=</span> flips<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">for</span> <span class="hl sym">( ; ; ) {</span>
            <span class="hl kwa">if</span><span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">)</span>
                <span class="hl kwa">return</span> flipsMax<span class="hl sym">;</span>
            <span class="hl sym">{</span>
                size_t perm0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
                i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> r<span class="hl sym">) {</span>
                    k <span class="hl sym">=</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span>
                    perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>k<span class="hl sym">];</span>
                    i <span class="hl sym">=</span> k<span class="hl sym">;</span>
                <span class="hl sym">}</span>
                perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm0<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">if</span> <span class="hl sym">((</span>count<span class="hl sym">[</span>r<span class="hl sym">] -=</span> <span class="hl num">1</span><span class="hl sym">) &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
                <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl sym">++</span>r<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
