<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://shootout.alioth.debian.org/</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>

#lang scheme<span class="hl sym">/</span>base
<span class="hl sym">(</span>require scheme<span class="hl sym">/</span>cmdline
         scheme<span class="hl sym">/</span>match<span class="hl sym">)</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>change c1 c2<span class="hl sym">)</span>
  <span class="hl sym">(</span>case c1
    <span class="hl sym">[(</span>red<span class="hl sym">)</span>
     <span class="hl sym">(</span>case c2 <span class="hl sym">[(</span>blue<span class="hl sym">) '</span>yellow<span class="hl sym">] [(</span>yellow<span class="hl sym">) '</span>blue<span class="hl sym">] [</span>else c1<span class="hl sym">])]</span>
    <span class="hl sym">[(</span>yellow<span class="hl sym">)</span>
     <span class="hl sym">(</span>case c2 <span class="hl sym">[(</span>blue<span class="hl sym">) '</span>red<span class="hl sym">] [(</span>red<span class="hl sym">) '</span>blue<span class="hl sym">] [</span>else c1<span class="hl sym">])]</span>
    <span class="hl sym">[(</span>blue<span class="hl sym">)</span>
     <span class="hl sym">(</span>case c2 <span class="hl sym">[(</span>yellow<span class="hl sym">) '</span>red<span class="hl sym">] [(</span>red<span class="hl sym">) '</span>yellow<span class="hl sym">] [</span>else c1<span class="hl sym">])]))</span>

<span class="hl sym">(</span>let <span class="hl sym">([</span>colors <span class="hl sym">'(</span>blue red yellow<span class="hl sym">)])</span>
  <span class="hl sym">(</span>for<span class="hl sym">* ([</span>a colors<span class="hl sym">][</span>b colors<span class="hl sym">])</span>
    <span class="hl sym">(</span>printf <span class="hl str">&quot;~a + ~a -&gt; ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> a b <span class="hl sym">(</span>change a b<span class="hl sym">))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>place meeting-ch n<span class="hl sym">)</span>
  <span class="hl sym">(</span>thread
   <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
     <span class="hl sym">(</span>let loop <span class="hl sym">([</span>n n<span class="hl sym">])</span>
       <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>zero? n<span class="hl sym">)</span>
           <span class="hl slc">;; Fade all:</span>
           <span class="hl sym">(</span>let loop <span class="hl sym">()</span>
             <span class="hl sym">(</span>let <span class="hl sym">([</span>c <span class="hl sym">(</span>channel-get meeting-ch<span class="hl sym">)])</span>
               <span class="hl sym">(</span>channel-put <span class="hl sym">(</span><span class="hl kwa">car</span> c<span class="hl sym">)</span> #f<span class="hl sym">)</span>
               <span class="hl sym">(</span>loop<span class="hl sym">)))</span>
           <span class="hl slc">;; Let two meet:</span>
           <span class="hl sym">(</span>match-let <span class="hl sym">([(</span><span class="hl kwa">cons</span> ch1 v1<span class="hl sym">) (</span>channel-get meeting-ch<span class="hl sym">)]</span>
                       <span class="hl sym">[(</span><span class="hl kwa">cons</span> ch2 v2<span class="hl sym">) (</span>channel-get meeting-ch<span class="hl sym">)])</span>
             <span class="hl sym">(</span>channel-put ch1 v2<span class="hl sym">)</span>
             <span class="hl sym">(</span>channel-put ch2 v1<span class="hl sym">)</span>
             <span class="hl sym">(</span>loop <span class="hl sym">(</span>sub1 n<span class="hl sym">))))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>creature color meeting-ch result-ch<span class="hl sym">)</span>
  <span class="hl sym">(</span>thread
   <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
     <span class="hl sym">(</span>let <span class="hl sym">([</span>ch <span class="hl sym">(</span>make-channel<span class="hl sym">)]</span>
           <span class="hl sym">[</span>name <span class="hl sym">(</span>gensym<span class="hl sym">)])</span>
       <span class="hl sym">(</span>let loop <span class="hl sym">([</span>color color<span class="hl sym">][</span>met <span class="hl num">0</span><span class="hl sym">][</span>same <span class="hl num">0</span><span class="hl sym">])</span>
         <span class="hl sym">(</span>channel-put meeting-ch <span class="hl sym">(</span><span class="hl kwa">cons</span> ch <span class="hl sym">(</span><span class="hl kwa">cons</span> color name<span class="hl sym">)))</span>
         <span class="hl sym">(</span>match <span class="hl sym">(</span>channel-get ch<span class="hl sym">)</span>
           <span class="hl sym">[(</span><span class="hl kwa">cons</span> other-color other-name<span class="hl sym">)</span>
            <span class="hl slc">;; Meet:</span>
            <span class="hl sym">(</span>loop <span class="hl sym">(</span>change color other-color<span class="hl sym">)</span>
                  <span class="hl sym">(</span>add1 met<span class="hl sym">)</span>
                  <span class="hl sym">(+</span> same <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">eq</span>? name other-name<span class="hl sym">)</span>
                              <span class="hl num">1</span>
                              <span class="hl num">0</span><span class="hl sym">)))]</span>
           <span class="hl sym">[</span>#f
            <span class="hl slc">;; Done:</span>
            <span class="hl sym">(</span>channel-put result-ch <span class="hl sym">(</span><span class="hl kwa">cons</span> met same<span class="hl sym">))]))))))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>spell n<span class="hl sym">)</span>
  <span class="hl sym">(</span>for <span class="hl sym">([</span>i <span class="hl sym">(</span>number-<span class="hl sym">&gt;</span>string n<span class="hl sym">)])</span>
    <span class="hl sym">(</span>display <span class="hl str">&quot; &quot;</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>display <span class="hl sym">(</span>hash-ref digits i<span class="hl sym">))))</span>

<span class="hl sym">(</span>define digits
  #hash<span class="hl sym">((</span>#\0 . <span class="hl str">&quot;zero&quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>#\1 . <span class="hl str">&quot;one&quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>#\2 . <span class="hl str">&quot;two&quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>#\3 . <span class="hl str">&quot;three&quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>#\4 . <span class="hl str">&quot;four&quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>#\5 . <span class="hl str">&quot;five&quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>#\6 . <span class="hl str">&quot;six&quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>#\7 . <span class="hl str">&quot;seven&quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>#\8 . <span class="hl str">&quot;eight&quot;</span><span class="hl sym">)</span>
        <span class="hl sym">(</span>#\9 . <span class="hl str">&quot;nine&quot;</span><span class="hl sym">)))</span>

<span class="hl sym">(</span>define <span class="hl sym">(</span>go n inits<span class="hl sym">)</span>
  <span class="hl sym">(</span>let <span class="hl sym">([</span>result-ch <span class="hl sym">(</span>make-channel<span class="hl sym">)]</span>
        <span class="hl sym">[</span>meeting-ch <span class="hl sym">(</span>make-channel<span class="hl sym">)])</span>
    <span class="hl sym">(</span>place meeting-ch n<span class="hl sym">)</span>
    <span class="hl sym">(</span>newline<span class="hl sym">)</span>
    <span class="hl sym">(</span>for <span class="hl sym">([</span>init inits<span class="hl sym">])</span>
      <span class="hl sym">(</span>printf <span class="hl str">&quot; ~a&quot;</span> init<span class="hl sym">)</span>
      <span class="hl sym">(</span>creature init meeting-ch result-ch<span class="hl sym">))</span>
    <span class="hl sym">(</span>newline<span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">([</span>results <span class="hl sym">(</span>for<span class="hl sym">/</span><span class="hl kwa">list</span> <span class="hl sym">([</span>i inits<span class="hl sym">])</span>
                     <span class="hl sym">(</span>channel-get result-ch<span class="hl sym">))])</span>
      <span class="hl sym">(</span>for <span class="hl sym">([</span>r results<span class="hl sym">])</span>
        <span class="hl sym">(</span>display <span class="hl sym">(</span><span class="hl kwa">car</span> r<span class="hl sym">))</span>
        <span class="hl sym">(</span>spell <span class="hl sym">(</span><span class="hl kwa">cdr</span> r<span class="hl sym">))</span>
        <span class="hl sym">(</span>newline<span class="hl sym">))</span>
      <span class="hl sym">(</span>spell <span class="hl sym">(</span><span class="hl kwa">apply</span> <span class="hl sym">+ (</span>map <span class="hl kwa">car</span> results<span class="hl sym">)))</span>
      <span class="hl sym">(</span>newline<span class="hl sym">))))</span>

<span class="hl sym">(</span>let <span class="hl sym">([</span>n <span class="hl sym">(</span><span class="hl kwa">command</span>-<span class="hl kwa">line</span> #<span class="hl sym">:</span>args <span class="hl sym">(</span>n<span class="hl sym">) (</span>string-<span class="hl sym">&gt;</span>number n<span class="hl sym">))])</span>
  <span class="hl sym">(</span>go n <span class="hl sym">'(</span>blue red yellow<span class="hl sym">))</span>
  <span class="hl sym">(</span>go n <span class="hl sym">'(</span>blue red yellow red yellow blue red yellow red blue<span class="hl sym">)))</span>


