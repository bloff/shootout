<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Anthony Borla. This is a slightly modified version</span>
<span class="com">   of, 'nsieve.pike' by Adam Montague, which uses a standard integer</span>
<span class="com">   array with 'bit twiddling' to perform data encoding / decoding</span>
<span class="com">*/</span>

<span class="kwb">int</span> <span class="kwd">nsieve</span><span class="sym">(</span><span class="kwb">int</span> m<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwb">int</span> size <span class="sym">= (</span>m <span class="sym">+</span> <span class="num">31</span><span class="sym">) &gt;&gt;</span> <span class="num">5</span><span class="sym">;</span> <span class="kwb">int</span> count<span class="sym">;</span>

	<span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> flags <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span>size<span class="sym">,</span> <span class="num">0xffffffff</span><span class="sym">);</span>

	<span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> m<span class="sym">;</span> i<span class="sym">++) {</span>
		<span class="kwd">if</span> <span class="sym">(</span>flags<span class="sym">[</span>i <span class="sym">&gt;&gt;</span> <span class="num">5</span><span class="sym">] &amp;</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>i <span class="sym">&amp;</span> <span class="num">31</span><span class="sym">)) {</span>
			<span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> i <span class="sym">+</span> i<span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">;</span> j <span class="sym">+=</span> i<span class="sym">) {</span>
				flags<span class="sym">[</span>j <span class="sym">&gt;&gt;</span> <span class="num">5</span><span class="sym">] &amp;=</span> ~<span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>j <span class="sym">&amp;</span> <span class="num">31</span><span class="sym">));</span>
			<span class="sym">}</span>
			count<span class="sym">++;</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
	<span class="kwd">return</span> <span class="sym">(</span>count<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwb">int</span> n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
	<span class="kwd">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span>
		n <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>
	<span class="kwb">int</span> m<span class="sym">;</span>

	m <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
	<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">));</span>

	m <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
	<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">));</span>

	m <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n <span class="sym">-</span> <span class="num">2</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
	<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">));</span>
<span class="sym">}</span>

