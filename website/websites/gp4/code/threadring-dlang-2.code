<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com"> * contributed by Anh Tran</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>stdio<span class="hl sym">;</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>thread <span class="hl sym">:</span> Thread<span class="hl sym">;</span>
<span class="hl kwa">import</span> std<span class="hl sym">.</span>conv<span class="hl sym">;</span>

<span class="hl kwa">const</span> NUM_THREADS   <span class="hl sym">=</span> <span class="hl num">503</span><span class="hl sym">;</span>
<span class="hl kwa">const</span> STACK_SIZE   <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">*</span><span class="hl num">1024</span><span class="hl sym">;</span>

<span class="hl slc">// for easier management from main thread</span>
RingThread   <span class="hl sym">[</span>NUM_THREADS<span class="hl sym">]</span>   rt_arr<span class="hl sym">;</span>
<span class="hl kwa">int</span>         <span class="hl sym">[</span>NUM_THREADS<span class="hl sym">]</span>   token_arr<span class="hl sym">;</span>

bool   finished   <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>

<span class="hl kwa">public class</span> RingThread <span class="hl sym">:</span> <span class="hl kwa">public</span> Thread
<span class="hl sym">{</span>
<span class="hl kwa">public</span><span class="hl sym">:</span>
   RingThread      next_node<span class="hl sym">;</span>
   <span class="hl kwa">int</span>          node_id<span class="hl sym">;</span>

   <span class="hl kwa">this</span><span class="hl sym">(</span> <span class="hl kwa">int</span> thread_id <span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">super</span><span class="hl sym">(</span> STACK_SIZE <span class="hl sym">);</span>   <span class="hl slc">// create new thread with specified stack size (4KB)</span>
      node_id <span class="hl sym">=</span> thread_id<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl sym">~</span><span class="hl kwa">this</span><span class="hl sym">() {}</span>

   <span class="hl kwa">override int</span> <span class="hl kwd">run</span><span class="hl sym">()</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">while</span> <span class="hl sym">(!</span>finished<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>token_arr<span class="hl sym">[</span>node_id<span class="hl sym">] &lt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl kwd">yield</span><span class="hl sym">();</span>
         <span class="hl kwa">else</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>token_arr<span class="hl sym">[</span>node_id<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
               <span class="hl kwa">int</span> next_id <span class="hl sym">= (</span>node_id <span class="hl sym">&lt; (</span>NUM_THREADS <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span> ? node_id <span class="hl sym">+</span><span class="hl num">1</span> <span class="hl sym">:</span> <span class="hl num">0</span><span class="hl sym">;</span>
               token_arr<span class="hl sym">[</span>next_id<span class="hl sym">] =</span> token_arr<span class="hl sym">[</span>node_id<span class="hl sym">] -</span><span class="hl num">1</span><span class="hl sym">;</span>
               token_arr<span class="hl sym">[</span>node_id<span class="hl sym">] = -</span><span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">else</span>
            <span class="hl sym">{</span>
               <span class="hl kwd">writeln</span><span class="hl sym">(</span>node_id <span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
               finished <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
               <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>

      <span class="hl sym">}</span>

      next_node <span class="hl sym">=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>


<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span> string<span class="hl sym">[]</span> args <span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl slc">// set token state to IDLE</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> NUM_THREADS<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      token_arr<span class="hl sym">[</span>i<span class="hl sym">] = -</span><span class="hl num">1</span><span class="hl sym">;</span>

   <span class="hl slc">// init HEAD</span>
   <span class="hl kwa">auto</span> head <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RingThread</span><span class="hl sym">(</span> <span class="hl num">0</span> <span class="hl sym">);</span>
   rt_arr<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> head<span class="hl sym">;</span>

   <span class="hl slc">// init remain threads</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> NUM_THREADS<span class="hl sym">;</span> i<span class="hl sym">++)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">auto</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RingThread</span><span class="hl sym">(</span> i <span class="hl sym">);</span>

      rt_arr<span class="hl sym">[</span>i<span class="hl sym">] =</span> r<span class="hl sym">;</span>
      rt_arr<span class="hl sym">[</span>i <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">].</span>next_node <span class="hl sym">=</span> r<span class="hl sym">;</span> <span class="hl slc">// link to next thread</span>
   <span class="hl sym">}</span>

   <span class="hl slc">// TAIL node points to HEAD</span>
   rt_arr<span class="hl sym">[</span> NUM_THREADS <span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">].</span>next_node <span class="hl sym">=</span> rt_arr<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>

   <span class="hl slc">// set initial token value</span>
   token_arr<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> to<span class="hl sym">!(</span><span class="hl kwa">int</span><span class="hl sym">)(</span> args<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] );</span>

   <span class="hl slc">// let's roll</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> NUM_THREADS<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      rt_arr<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">start</span><span class="hl sym">();</span>

   <span class="hl slc">// just sleep</span>
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> NUM_THREADS<span class="hl sym">;</span> i<span class="hl sym">++)</span>
      rt_arr<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwc">wait</span><span class="hl sym">();</span>
<span class="hl sym">}</span>
