<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; contributed by Isaac Gouy (Scheme novice)</span>

<span class="sym">(</span>define <span class="sym">(</span>ack m n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span>zero? m<span class="sym">) (+</span> n <span class="num">1</span><span class="sym">))</span>
        <span class="sym">((</span>zero? n<span class="sym">) (</span>ack <span class="sym">(-</span> m <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
        <span class="sym">(</span>else      <span class="sym">(</span>ack <span class="sym">(-</span> m <span class="num">1</span><span class="sym">) (</span>ack m <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
   <span class="sym">(</span>define n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>like<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">)))</span>
   <span class="sym">(</span>for<span class="sym">-</span>each display
      <span class="sym">(</span><span class="kwa">list</span> <span class="str">&quot;Ack(3,&quot;</span> n <span class="str">&quot;): &quot;</span> <span class="sym">(</span>ack <span class="num">3</span> n<span class="sym">)</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)))</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))(</span><span class="kwa">exit</span><span class="sym">)</span>
