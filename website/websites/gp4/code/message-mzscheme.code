
<span class="hl sym">(</span>module message mzscheme

  <span class="hl sym">(</span>define <span class="hl sym">(</span>generate receive-ch n<span class="hl sym">)</span>
    <span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>zero? n<span class="hl sym">)</span>
	receive-ch
	<span class="hl sym">(</span>let <span class="hl sym">([</span>ch <span class="hl sym">(</span>make-channel<span class="hl sym">)])</span>
	  <span class="hl sym">(</span>thread <span class="hl sym">(</span><span class="hl kwa">lambda</span> <span class="hl sym">()</span>
		    <span class="hl sym">(</span>let loop <span class="hl sym">()</span>
		      <span class="hl sym">(</span>channel-put ch <span class="hl sym">(</span>add1 <span class="hl sym">(</span>channel-get receive-ch<span class="hl sym">)))</span>
		      <span class="hl sym">(</span>loop<span class="hl sym">))))</span>
	  <span class="hl sym">(</span>generate ch <span class="hl sym">(</span>sub1 n<span class="hl sym">)))))</span>

  <span class="hl sym">(</span>let <span class="hl sym">([</span>n <span class="hl sym">(</span>string-<span class="hl sym">&gt;</span>number
	    <span class="hl sym">(</span>vector-ref <span class="hl sym">(</span>current-<span class="hl kwa">command</span>-<span class="hl kwa">line</span>-arguments<span class="hl sym">)</span> <span class="hl num">0</span><span class="hl sym">))])</span>
    <span class="hl sym">(</span>let<span class="hl sym">* ([</span>start-ch <span class="hl sym">(</span>make-channel<span class="hl sym">)]</span>
	   <span class="hl sym">[</span>end-ch <span class="hl sym">(</span>generate start-ch <span class="hl num">500</span><span class="hl sym">)])</span>
      <span class="hl sym">(</span>let loop <span class="hl sym">([</span>n n<span class="hl sym">][</span>total <span class="hl num">0</span><span class="hl sym">])</span>
	<span class="hl sym">(</span><span class="hl kwa">if</span> <span class="hl sym">(</span>zero? n<span class="hl sym">)</span>
	    <span class="hl sym">(</span>printf <span class="hl str">&quot;~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> total<span class="hl sym">)</span>
	    <span class="hl sym">(</span>begin
	      <span class="hl sym">(</span>channel-put start-ch <span class="hl num">0</span><span class="hl sym">)</span>
	      <span class="hl sym">(</span>loop <span class="hl sym">(</span>sub1 n<span class="hl sym">)</span>
		    <span class="hl sym">(+</span> total <span class="hl sym">(</span>channel-get end-ch<span class="hl sym">)))))))))</span>
