<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- by Don Stewart, Einar Karttunen and Branimir Maksimovic</span>

<span class="kwa">import</span> System

<span class="kwa">data</span> LFT <span class="sym">=</span> LFT <span class="sym">!</span>Integer <span class="sym">!</span>Integer <span class="sym">!</span>Integer <span class="sym">!</span>Integer

floorEx x <span class="sym">(</span>LFT q r s t<span class="sym">) = (</span>f q <span class="sym">*</span> f x <span class="sym">+</span> f r<span class="sym">)</span> `div` <span class="sym">(</span>f s <span class="sym">*</span> f x <span class="sym">+</span> f t<span class="sym">)</span>
    <span class="kwa">where</span> f <span class="sym">=</span> fromInteger

comp <span class="sym">(</span>LFT q r s t<span class="sym">) (</span>LFT u v w x<span class="sym">) =</span> LFT <span class="sym">(</span>q<span class="sym">*</span>u<span class="sym">+</span>r<span class="sym">*</span>w<span class="sym">) (</span>q<span class="sym">*</span>v<span class="sym">+</span>r<span class="sym">*</span>x<span class="sym">) (</span>s<span class="sym">*</span>u<span class="sym">+</span>t<span class="sym">*</span>w<span class="sym">) (</span>s<span class="sym">*</span>v<span class="sym">+</span>t<span class="sym">*</span>x<span class="sym">)</span>

pi <span class="sym">=</span> stream <span class="sym">(</span>LFT <span class="num">1 0 0 1</span><span class="sym">)</span> lfts <span class="sym">(</span>floorEx <span class="num">3</span><span class="sym">) ((==)</span>.floorEx <span class="num">4</span><span class="sym">)</span> prod comp
    <span class="kwa">where</span> prod z n <span class="sym">=</span> comp <span class="sym">(</span>LFT <span class="num">10</span> <span class="sym">(-</span><span class="num">10</span><span class="sym">*</span>n<span class="sym">)</span> <span class="num">0 1</span><span class="sym">)</span> z
          lfts     <span class="sym">= [</span> LFT k <span class="sym">(</span><span class="num">4</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span><span class="sym">)</span> <span class="num">0</span> <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">) |</span> k <span class="sym">&lt;- [</span><span class="num">1</span>..<span class="sym">] ]</span>

stream z <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">)</span> f g h i
    <span class="sym">|</span> g z y     <span class="sym">=</span> y <span class="sym">:</span> stream <span class="sym">(</span>h z y<span class="sym">) (</span>x<span class="sym">:</span>xs<span class="sym">)</span> f g h i
    <span class="sym">|</span> otherwise <span class="sym">=</span>     stream <span class="sym">(</span>i z x<span class="sym">)</span> xs     f g h i <span class="kwa">where</span> y <span class="sym">=</span> f z

main <span class="sym">=</span> getArgs <span class="sym">&gt;&gt;=</span> loop <span class="num">10 0</span> . flip take Main.pi . read . head
  <span class="kwa">where</span> loop n sum <span class="sym">[]     =</span> putStrLn $ replicate n <span class="str">' '</span> <span class="sym">++</span> <span class="str">&quot;\t:&quot;</span> <span class="sym">++</span> show sum
        loop <span class="num">0</span> sum xs     <span class="sym">=</span> putStrLn <span class="sym">(</span><span class="str">&quot;\t:&quot;</span><span class="sym">++</span>show sum<span class="sym">) &gt;&gt;</span> loop <span class="num">10</span> sum xs
        loop n sum <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) =</span> putStr <span class="sym">(</span>show x<span class="sym">)            &gt;&gt;</span> loop <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>sum<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> xs

