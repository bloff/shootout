<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Fredrik Roos</span>
<span class="hl com">   modified by Fredrik Roos</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> scala<span class="hl sym">.</span>collection<span class="hl sym">.</span>immutable<span class="hl sym">.</span><span class="hl kwc">TreeMap</span>
<span class="hl kwa">import</span> scala<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">Source</span>

<span class="hl kwa">object</span> ReverseComplement <span class="hl kwa">extends</span> Application <span class="hl sym">{</span>

  <span class="hl kwa">val</span> fromChars <span class="hl sym">=</span> <span class="hl str">&quot;wsatugcyrkmbdhvnATUGCYRKMBDHVN&quot;</span><span class="hl sym">.</span>toList
  <span class="hl kwa">var</span> toChars <span class="hl sym">=</span> <span class="hl str">&quot;WSTAACGRYMKVHDBNTAACGRYMKVHDBN&quot;</span><span class="hl sym">.</span>toList

  <span class="hl kwa">val</span> translateMap <span class="hl sym">= (</span>fromChars zip toChars<span class="hl sym">).</span>foldLeft<span class="hl sym">(</span>
     <span class="hl kwa">new</span> <span class="hl kwc">TreeMap</span><span class="hl sym">[</span>Char<span class="hl sym">,</span> Char<span class="hl sym">]) {</span>
        <span class="hl kwa">case</span> <span class="hl sym">(</span>map<span class="hl sym">, (</span>key<span class="hl sym">,</span> value<span class="hl sym">)) =&gt;</span> map<span class="hl sym">(</span>key<span class="hl sym">) =</span> value
  <span class="hl sym">}</span>

  <span class="hl kwa">def</span> reverseComplement<span class="hl sym">(</span>s <span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">) =</span>
    s<span class="hl sym">.</span>map<span class="hl sym">(</span>c <span class="hl sym">=&gt;</span> translateMap<span class="hl sym">.</span>getOrElse<span class="hl sym">(</span>c<span class="hl sym">,</span>c<span class="hl sym">)).</span>reverse<span class="hl sym">.</span>mkString<span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">)</span>

  <span class="hl kwa">def</span> splitLines<span class="hl sym">(</span>lines <span class="hl sym">:</span> <span class="hl kwc">String</span><span class="hl sym">,</span> lineLength <span class="hl sym">:</span> Int<span class="hl sym">) =</span>
     <span class="hl sym">(</span><span class="hl num">0</span> to lines<span class="hl sym">.</span>length by lineLength<span class="hl sym">).</span>map<span class="hl sym">(</span>
        i <span class="hl sym">=&gt;</span> lines<span class="hl sym">.</span>slice<span class="hl sym">(</span>i<span class="hl sym">,</span> i <span class="hl sym">+</span> lineLength<span class="hl sym">)).</span>mkString<span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>

  <span class="hl kwc">Source</span><span class="hl sym">.</span>fromInputStream<span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>in<span class="hl sym">).</span>getLines<span class="hl sym">.</span>foldLeft<span class="hl sym">(</span><span class="hl kwc">List</span><span class="hl sym">[</span><span class="hl kwc">String</span><span class="hl sym">]()) {</span>
    <span class="hl kwa">case</span> <span class="hl sym">(</span>buffer<span class="hl sym">,</span> line<span class="hl sym">)</span> <span class="hl kwa">if</span> line<span class="hl sym">.</span>startsWith<span class="hl sym">(</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl sym">) =&gt; {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>buffer<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
         println<span class="hl sym">(</span>splitLines<span class="hl sym">(</span>reverseComplement<span class="hl sym">(</span>buffer<span class="hl sym">.</span>mkString<span class="hl sym">(</span><span class="hl str">&quot;&quot;</span><span class="hl sym">)),</span> <span class="hl num">60</span><span class="hl sym">))</span>
      line<span class="hl sym">.</span>trim <span class="hl sym">::</span> Nil
    <span class="hl sym">}</span>
    <span class="hl kwa">case</span> <span class="hl sym">(</span>buffer<span class="hl sym">,</span> line<span class="hl sym">) =&gt;</span> buffer <span class="hl sym">:::</span> line<span class="hl sym">.</span>trim <span class="hl sym">::</span> Nil
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
