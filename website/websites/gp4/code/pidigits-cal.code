<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Magnus Byne.</span>
<span class="hl com"> */</span>
module Pidigits<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude using
    typeConstructor <span class="hl sym">=</span> Int<span class="hl sym">,</span> <span class="hl kwc">Integer</span><span class="hl sym">,</span> <span class="hl kwc">String</span><span class="hl sym">;</span>
    function <span class="hl sym">=</span> eager<span class="hl sym">,</span> fromInteger<span class="hl sym">,</span> seq<span class="hl sym">,</span> stringToInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Debug using
    function <span class="hl sym">=</span> show<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span><span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwc">List</span> using
    function <span class="hl sym">=</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span><span class="hl kwc">String</span> using
    function <span class="hl sym">=</span> replicate<span class="hl sym">;</span>
    <span class="hl sym">;</span>


data foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;java.io.PrintStream&quot;</span> <span class="hl kwa">private</span> JPrintStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;static field java.lang.System.out&quot;</span>
    <span class="hl kwa">private</span> stdout <span class="hl sym">::</span> JPrintStream<span class="hl sym">;</span>

foreign unsafe <span class="hl kwa">import</span> jvm <span class="hl str">&quot;method print&quot;</span>
    <span class="hl kwa">private</span> print <span class="hl sym">::</span> JPrintStream <span class="hl sym">-&gt;</span> <span class="hl kwc">String</span> <span class="hl sym">-&gt; ();</span>

data F <span class="hl sym">=</span>
    F
        w <span class="hl sym">:: !</span><span class="hl kwc">Integer</span>
        x <span class="hl sym">:: !</span><span class="hl kwc">Integer</span>
        y <span class="hl sym">:: !</span><span class="hl kwc">Integer</span>
        z <span class="hl sym">:: !</span><span class="hl kwc">Integer</span>
    <span class="hl sym">;</span>

lfts <span class="hl sym">::</span> <span class="hl kwc">Integer</span> <span class="hl sym">-&gt; [</span>F<span class="hl sym">];</span>
lfts <span class="hl sym">!</span>k <span class="hl sym">=</span> F <span class="hl kwd">k</span> <span class="hl sym">(</span><span class="hl num">4</span> <span class="hl sym">*</span> k <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> <span class="hl kwd">0</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) :</span> <span class="hl kwd">lfts</span> <span class="hl sym">(</span>k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>

floor <span class="hl sym">::</span> <span class="hl kwc">Integer</span> <span class="hl sym">-&gt;</span> F <span class="hl sym">-&gt;</span> <span class="hl kwc">Integer</span><span class="hl sym">;</span>
floor <span class="hl sym">!</span>x <span class="hl sym">!</span>m <span class="hl sym">=</span>
    <span class="hl kwa">case</span> m of
    F q r s t <span class="hl sym">-&gt; (</span>q <span class="hl sym">*</span> x <span class="hl sym">+</span> r<span class="hl sym">) / (</span>s <span class="hl sym">*</span> x <span class="hl sym">+</span> t<span class="hl sym">);</span>
    <span class="hl sym">;</span>

complement1 <span class="hl sym">::</span> F <span class="hl sym">-&gt;</span> F <span class="hl sym">-&gt;</span> F<span class="hl sym">;</span>
complement1 <span class="hl sym">!</span>m <span class="hl sym">!</span>n <span class="hl sym">=</span>
    <span class="hl kwa">case</span> m of
    F q r s t <span class="hl sym">-&gt;</span>
        <span class="hl kwa">case</span> n of
        F u v w x <span class="hl sym">-&gt;</span>
            <span class="hl kwd">F</span> <span class="hl sym">(</span>q <span class="hl sym">*</span> u <span class="hl sym">+</span> r <span class="hl sym">*</span> w<span class="hl sym">) (</span>q <span class="hl sym">*</span> v <span class="hl sym">+</span> r <span class="hl sym">*</span> x<span class="hl sym">) (</span>t <span class="hl sym">*</span> w<span class="hl sym">) (</span>t <span class="hl sym">*</span> x<span class="hl sym">);</span>
        <span class="hl sym">;</span>
    <span class="hl sym">;</span>

complement2 <span class="hl sym">::</span> F <span class="hl sym">-&gt;</span> F <span class="hl sym">-&gt;</span> F<span class="hl sym">;</span>
complement2 <span class="hl sym">!</span>m <span class="hl sym">!</span>n <span class="hl sym">=</span>
    <span class="hl kwa">case</span> m of
    F q r s t <span class="hl sym">-&gt;</span>
        <span class="hl kwa">case</span> n of
        F u v w x <span class="hl sym">-&gt;</span>
            <span class="hl kwd">F</span> <span class="hl sym">(</span>q <span class="hl sym">*</span> u<span class="hl sym">) (</span>q <span class="hl sym">*</span> v <span class="hl sym">+</span> r <span class="hl sym">*</span> x<span class="hl sym">) (</span>s <span class="hl sym">*</span> u<span class="hl sym">) (</span>s <span class="hl sym">*</span> v <span class="hl sym">+</span> t <span class="hl sym">*</span> x<span class="hl sym">);</span>
        <span class="hl sym">;</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span><span class="hl kwc">String</span><span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    let
        pidigits <span class="hl sym">:: [</span>Int<span class="hl sym">];</span>
        pidigits <span class="hl sym">=</span>
            let
                stream <span class="hl sym">::</span> F <span class="hl sym">-&gt; [</span>F<span class="hl sym">] -&gt; [</span>Int<span class="hl sym">];</span>
                stream <span class="hl sym">!</span>z <span class="hl sym">!</span>l <span class="hl sym">=</span>
                    let
                        y <span class="hl sym">::</span> <span class="hl kwc">Integer</span><span class="hl sym">;</span>
                        y <span class="hl sym">=</span> eager $ floor <span class="hl num">3</span> z<span class="hl sym">;</span>
                    in
                        <span class="hl kwa">case</span> l of
                        x <span class="hl sym">:</span> xs <span class="hl sym">-&gt;</span>
                            <span class="hl kwa">if</span> y <span class="hl sym">==</span> floor <span class="hl num">4</span> z then
                                fromInteger y
                                <span class="hl sym">:</span> stream
                                    <span class="hl sym">(</span><span class="hl kwd">complement1</span> <span class="hl sym">(</span>F <span class="hl kwd">10</span> <span class="hl sym">(-</span><span class="hl num">10</span> <span class="hl sym">*</span> y<span class="hl sym">)</span> <span class="hl num">0 1</span><span class="hl sym">)</span> z<span class="hl sym">)</span>
                                    <span class="hl sym">(</span>x <span class="hl sym">:</span> xs<span class="hl sym">)</span>
                            <span class="hl kwa">else</span>
                                <span class="hl kwd">stream</span> <span class="hl sym">(</span>complement2 z x<span class="hl sym">)</span> xs
                            <span class="hl sym">;</span>
                    <span class="hl sym">;</span>
            in
                <span class="hl kwd">stream</span> <span class="hl sym">(</span>F <span class="hl num">1 0 0 1</span><span class="hl sym">) (</span>lfts <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">;</span>

        n <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        n <span class="hl sym">=</span> eager $ <span class="hl kwd">stringToInt</span> <span class="hl sym">(</span>head args<span class="hl sym">);</span>

        lineLength <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        lineLength <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">;</span>

        <span class="hl slc">//print digits in accordance with the benchmark spec</span>
        printDigits <span class="hl sym">:: [</span>Int<span class="hl sym">] -&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
        printDigits <span class="hl sym">!</span>digits <span class="hl sym">!</span>digitsPrinted <span class="hl sym">!</span>digitsPrintedOnLine <span class="hl sym">=</span>
            <span class="hl kwa">if</span> digitsPrinted <span class="hl sym">==</span> n then
                print
                    stdout
                    <span class="hl sym">(</span>
                        <span class="hl kwd">replicate</span> <span class="hl sym">(</span>lineLength <span class="hl sym">-</span> digitsPrintedOnLine<span class="hl sym">)</span> <span class="hl str">' '</span>
                        <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span>
                        <span class="hl sym">++</span> show digitsPrinted
                        <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
                    <span class="hl sym">)</span>
            <span class="hl kwa">else if</span> digitsPrintedOnLine <span class="hl sym">==</span> lineLength then
                print <span class="hl kwd">stdout</span> <span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span> <span class="hl sym">++</span> show digitsPrinted <span class="hl sym">++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
                `seq`
                printDigits digits digitsPrinted <span class="hl num">0</span>
            <span class="hl kwa">else</span>
                <span class="hl kwa">case</span> digits of
                digit <span class="hl sym">:</span> remainingDigits <span class="hl sym">-&gt;</span>
                    print <span class="hl kwd">stdout</span> <span class="hl sym">(</span>show digit<span class="hl sym">)</span>
                    `seq`
                    printDigits
                        remainingDigits
                        <span class="hl sym">(</span>digitsPrinted <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                        <span class="hl sym">(</span>digitsPrintedOnLine <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
                    <span class="hl sym">;</span>
            <span class="hl sym">;</span>
    in
        printDigits pidigits <span class="hl num">0 0</span>
    <span class="hl sym">;</span>

