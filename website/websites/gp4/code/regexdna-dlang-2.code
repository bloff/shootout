<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Dave Fladebo</span>
<span class="hl com"></span>
<span class="hl com">   compile: dmd -O -inline -release regexdna2.d</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> std<span class="hl sym">.</span>cstream<span class="hl sym">,</span> std<span class="hl sym">.</span>regexp<span class="hl sym">,</span> std<span class="hl sym">.</span>outbuffer<span class="hl sym">;</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
    <span class="hl kwa">auto</span> seq <span class="hl sym">=</span> din<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
    <span class="hl kwa">auto</span> initLen <span class="hl sym">=</span> seq<span class="hl sym">.</span>length<span class="hl sym">;</span>

    <span class="hl kwa">auto</span> ob <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">OutBuffer</span><span class="hl sym">();</span>
    <span class="hl kwa">auto</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RegExp</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span><span class="hl kwa">null</span><span class="hl sym">);</span>
    <span class="hl kwa">foreach</span><span class="hl sym">(</span><span class="hl kwc">str</span><span class="hl sym">;</span> r<span class="hl sym">.</span><span class="hl kwd">split</span><span class="hl sym">(</span>seq<span class="hl sym">))</span>
    <span class="hl sym">{</span>
        ob<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span><span class="hl kwc">str</span><span class="hl sym">);</span>
    <span class="hl sym">}</span>
    seq <span class="hl sym">=</span> ob<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
    <span class="hl kwa">int</span> codeLen <span class="hl sym">=</span> seq<span class="hl sym">.</span>length<span class="hl sym">;</span>

    <span class="hl kwa">foreach</span><span class="hl sym">(</span>v<span class="hl sym">;</span> variants<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">foreach</span><span class="hl sym">(</span>m<span class="hl sym">;</span> <span class="hl kwd">RegExp</span><span class="hl sym">(</span>v<span class="hl sym">,</span><span class="hl kwa">null</span><span class="hl sym">).</span><span class="hl kwd">search</span><span class="hl sym">(</span>seq<span class="hl sym">))</span> count<span class="hl sym">++;</span>
        dout<span class="hl sym">.</span><span class="hl kwd">writefln</span><span class="hl sym">(</span>v<span class="hl sym">,</span><span class="hl str">&quot; &quot;</span><span class="hl sym">,</span>count<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">foreach</span><span class="hl sym">(</span>key<span class="hl sym">,</span> val<span class="hl sym">;</span> subst<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        seq <span class="hl sym">= (</span><span class="hl kwa">new</span> <span class="hl kwd">RegExp</span><span class="hl sym">(</span>key<span class="hl sym">,</span><span class="hl str">&quot;g&quot;</span><span class="hl sym">)).</span><span class="hl kwd">replace</span><span class="hl sym">(</span>seq<span class="hl sym">,</span>val<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    dout<span class="hl sym">.</span><span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>initLen<span class="hl sym">,</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>codeLen<span class="hl sym">,</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>seq<span class="hl sym">.</span>length<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">static char</span><span class="hl sym">[][]</span> variants <span class="hl sym">= [</span>
     <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
    <span class="hl sym">,</span><span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
    <span class="hl sym">,</span><span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
<span class="hl sym">];</span>

<span class="hl kwa">char</span><span class="hl sym">[][</span><span class="hl kwa">char</span><span class="hl sym">[]]</span> subst<span class="hl sym">;</span>

<span class="hl kwa">static this</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
    subst<span class="hl sym">[</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">;</span> subst<span class="hl sym">[</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">;</span> subst<span class="hl sym">[</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">;</span> subst<span class="hl sym">[</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">;</span>
    subst<span class="hl sym">[</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">;</span> subst<span class="hl sym">[</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">;</span> subst<span class="hl sym">[</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">;</span> subst<span class="hl sym">[</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">;</span>
    subst<span class="hl sym">[</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">;</span> subst<span class="hl sym">[</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">;</span> subst<span class="hl sym">[</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">] =</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
