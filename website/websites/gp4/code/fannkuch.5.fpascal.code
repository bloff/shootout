<span class="hl com">{ The Computer Language Benchmarks Game</span>
<span class="hl com">  http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Florian Klaempfl</span>
<span class="hl com">  modified by Micha Nelissen</span>
<span class="hl com">  modified by Vincent Snijders</span>
<span class="hl com">  modified by Steve Fisher</span>
<span class="hl com">}</span>


<span class="hl kwa">type</span>
  TIntegerArray <span class="hl sym">=</span> <span class="hl kwa">Array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.99</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>

<span class="hl kwa">var</span>
  permu<span class="hl sym">,</span> permu_copy<span class="hl sym">,</span> count<span class="hl sym">:</span> TIntegerArray<span class="hl sym">;</span>
  r<span class="hl sym">,</span> n<span class="hl sym">,</span> answer <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">swap</span><span class="hl sym">(</span><span class="hl kwa">var</span> a<span class="hl sym">,</span> b<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">);</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>  tmp<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>   tmp <span class="hl sym">:=</span> a<span class="hl sym">;</span>  a <span class="hl sym">:=</span> b<span class="hl sym">;</span>  b <span class="hl sym">:=</span> tmp   <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">roll_down</span><span class="hl sym">(</span> <span class="hl kwa">var</span> a <span class="hl sym">:</span> <span class="hl kwa">array of</span> <span class="hl kwb">longint</span> <span class="hl sym">);</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>  tmp <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  tmp <span class="hl sym">:=</span> a<span class="hl sym">[</span> <span class="hl num">0</span> <span class="hl sym">];</span>
  <span class="hl kwd">move</span><span class="hl sym">(</span> a<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span> a<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span> <span class="hl kwd">high</span><span class="hl sym">(</span>a<span class="hl sym">)*</span><span class="hl kwd">sizeof</span><span class="hl sym">(</span><span class="hl kwb">longint</span><span class="hl sym">) );</span>
  a<span class="hl sym">[</span> <span class="hl kwd">high</span><span class="hl sym">(</span>a<span class="hl sym">) ] :=</span> tmp
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> next_permutation<span class="hl sym">:</span> <span class="hl kwb">boolean</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  r0<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  r0 <span class="hl sym">:=</span> r<span class="hl sym">;</span> <span class="hl slc">// use local variable</span>
  next_permutation <span class="hl sym">:=</span> <span class="hl kwb">true</span><span class="hl sym">;</span>
  <span class="hl kwa">repeat</span>
    <span class="hl kwa">if</span> r0 <span class="hl sym">=</span> n <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      next_permutation <span class="hl sym">:=</span> <span class="hl kwb">false</span><span class="hl sym">;</span>
      break
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwd">roll_down</span><span class="hl sym">(</span> permu<span class="hl sym">[</span> <span class="hl num">0</span><span class="hl sym">..</span>r0 <span class="hl sym">] );</span>
    <span class="hl kwd">dec</span><span class="hl sym">(</span>count<span class="hl sym">[</span>r0<span class="hl sym">]);</span>
    <span class="hl kwa">if</span> count<span class="hl sym">[</span>r0<span class="hl sym">] &gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      break<span class="hl sym">;</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>r0<span class="hl sym">)</span>
  <span class="hl kwa">until</span> <span class="hl kwb">false</span><span class="hl sym">;</span>
  r <span class="hl sym">:=</span> r0
<span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">procedure</span> <span class="hl kwd">reverse_copy</span><span class="hl sym">(</span> last<span class="hl sym">:</span> <span class="hl kwb">longint</span> <span class="hl sym">);</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  pi<span class="hl sym">,</span> pj <span class="hl sym">:</span> pLongint<span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  pi <span class="hl sym">:= &#64;</span>permu_copy<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
  pj <span class="hl sym">:= &#64;</span>permu_copy<span class="hl sym">[</span>last<span class="hl sym">];</span>
  <span class="hl kwa">repeat</span>
    <span class="hl kwd">swap</span><span class="hl sym">(</span>pi<span class="hl sym">^,</span> pj<span class="hl sym">^);</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>pi<span class="hl sym">);</span>
    <span class="hl kwd">dec</span><span class="hl sym">(</span>pj<span class="hl sym">)</span>
  <span class="hl kwa">until</span> pi <span class="hl sym">&gt;=</span> pj
<span class="hl kwa">end</span><span class="hl sym">;</span>


<span class="hl kwa">function</span> flips<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>  <span class="hl kwa">inline</span><span class="hl sym">;</span>
<span class="hl kwa">var</span> last<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  flips <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  last <span class="hl sym">:=</span> permu_copy<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
  <span class="hl kwa">repeat</span>
    <span class="hl kwa">if</span> last <span class="hl sym">&gt;</span> <span class="hl num">2</span> <span class="hl kwa">then</span>   <span class="hl kwd">reverse_copy</span><span class="hl sym">(</span> last<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">);</span>
    <span class="hl kwd">swap</span><span class="hl sym">(</span> permu_copy<span class="hl sym">[</span> last <span class="hl sym">],</span> last <span class="hl sym">);</span>
    flips <span class="hl sym">+=</span> <span class="hl num">1</span>
  <span class="hl kwa">until</span> last <span class="hl sym">=</span> <span class="hl num">0</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> fannkuch<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
<span class="hl kwa">var</span>
  print30<span class="hl sym">,</span> m<span class="hl sym">,</span> i<span class="hl sym">,</span> tmp<span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  fannkuch <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  print30 <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  m <span class="hl sym">:=</span> n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

  <span class="hl slc">// Initial permutation.</span>
  <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> m <span class="hl kwa">do</span>   permu<span class="hl sym">[</span>i<span class="hl sym">] :=</span> i<span class="hl sym">;</span>

  r <span class="hl sym">:=</span> n<span class="hl sym">;</span>
  <span class="hl kwa">repeat</span>
    <span class="hl kwa">if</span> print30 <span class="hl sym">&lt;</span> <span class="hl num">30</span> <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> m <span class="hl kwa">do</span>   <span class="hl kwd">write</span><span class="hl sym">(</span>permu<span class="hl sym">[</span>i<span class="hl sym">] +</span> <span class="hl num">1</span><span class="hl sym">);</span>
      writeln<span class="hl sym">;</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>print30<span class="hl sym">)</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>

    <span class="hl kwa">while</span> r <span class="hl sym">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
    <span class="hl kwa">begin</span>
      count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] :=</span> r<span class="hl sym">;</span>
      <span class="hl kwd">dec</span><span class="hl sym">(</span>r<span class="hl sym">)</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>

    <span class="hl kwa">if</span> <span class="hl sym">(</span>permu<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">and</span> <span class="hl sym">(</span>permu<span class="hl sym">[</span>m<span class="hl sym">] &lt;&gt;</span> m<span class="hl sym">)</span> <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwd">move</span><span class="hl sym">(</span>permu<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span> permu_copy<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span> n<span class="hl sym">*</span><span class="hl kwd">sizeof</span><span class="hl sym">(</span><span class="hl kwb">longint</span><span class="hl sym">));</span>
      tmp <span class="hl sym">:=</span> flips<span class="hl sym">;</span>
      <span class="hl kwa">if</span> tmp <span class="hl sym">&gt;</span> fannkuch <span class="hl kwa">then</span>   fannkuch <span class="hl sym">:=</span> tmp
    <span class="hl kwa">end</span>
  <span class="hl kwa">until not</span> next_permutation
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  n <span class="hl sym">:=</span> <span class="hl num">7</span><span class="hl sym">;</span>
  <span class="hl kwa">if</span> paramCount <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">then</span>   <span class="hl kwd">val</span><span class="hl sym">(</span> <span class="hl kwd">paramStr</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> n <span class="hl sym">);</span>
  answer <span class="hl sym">:=</span> fannkuch<span class="hl sym">;</span>
  <span class="hl kwd">writeln</span><span class="hl sym">(</span> <span class="hl str">'Pfannkuchen('</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl str">') = '</span><span class="hl sym">,</span> answer <span class="hl sym">)</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>
