<span class="slc">#  The Computer Language Shootout</span>
<span class="slc">#  http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#  contributed by drigz</span>
<span class="slc">#  modified by Josh Goldfoot</span>
<span class="slc">#  moved to psyco</span>

<span class="kwc">import</span> sys<span class="sym">,</span> threading<span class="sym">,</span> Queue<span class="sym">,</span> psyco
psyco<span class="sym">.</span><span class="kwd">full</span><span class="sym">()</span>

RED<span class="sym">,</span> BLUE<span class="sym">,</span> YELLOW<span class="sym">,</span> FADED <span class="sym">=</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">5</span><span class="sym">)</span>
mp_n <span class="sym">=</span> <span class="kwa">len</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">) &gt;</span> <span class="num">1</span> <span class="kwb">and</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwb">or</span> <span class="num">100</span>
mp_first <span class="sym">=</span> None
mp_entrylock <span class="sym">=</span> threading<span class="sym">.</span><span class="kwd">Lock</span><span class="sym">()</span>
mp_meetnotify <span class="sym">=</span> Queue<span class="sym">.</span><span class="kwd">Queue</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>

<span class="kwa">class</span> Creature<span class="sym">:</span>  <span class="slc"># old-style classes faster</span>
    <span class="kwb">def</span> <span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> icolor<span class="sym">):</span>
        <span class="kwc">self</span><span class="sym">.</span>color <span class="sym">=</span> icolor
        <span class="kwc">self</span><span class="sym">.</span>met <span class="sym">=</span> <span class="num">0</span>

    <span class="kwb">def</span> <span class="kwd">socialize</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">):</span>
        <span class="kwa">global</span> mp_n<span class="sym">,</span> mp_first<span class="sym">,</span> mp_entrylock<span class="sym">,</span> mp_meetnotify<span class="sym">,</span> reports
        <span class="slc"># optimize to minimize lookups of class variables and functions</span>
        self_color <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>color
        self_met <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>met

        mp_entrylock_acquire <span class="sym">=</span> mp_entrylock<span class="sym">.</span>acquire
        mp_entrylock_release <span class="sym">=</span> mp_entrylock<span class="sym">.</span>release
        mp_meetnotify_put <span class="sym">=</span> mp_meetnotify<span class="sym">.</span>put
        mp_meetnotify_get <span class="sym">=</span> mp_meetnotify<span class="sym">.</span>get

        <span class="kwb">while</span> <span class="num">1</span><span class="sym">:</span> <span class="slc">#keep looking for creatures to meet</span>
            <span class="kwd">mp_entrylock_acquire</span><span class="sym">()</span>
            <span class="kwb">if</span> mp_first <span class="sym">==</span> None<span class="sym">:</span> <span class="slc">#noone's here</span>
                <span class="kwb">if</span> mp_n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">:</span> <span class="slc">#check if meeting place is done</span>
                    <span class="kwd">mp_entrylock_release</span><span class="sym">()</span>
                    <span class="kwc">self</span><span class="sym">.</span>met <span class="sym">=</span> self_met
                    <span class="kwb">return</span>

                mp_n <span class="sym">-=</span> <span class="num">1</span>
                mp_first <span class="sym">=</span> self_color <span class="slc">#register my presence</span>
                <span class="kwd">mp_entrylock_release</span><span class="sym">()</span> <span class="slc">#let the people enter so we can meet</span>
                other <span class="sym">=</span> <span class="kwd">mp_meetnotify_get</span><span class="sym">()</span> <span class="slc">#wait for the next person</span>
                mp_first <span class="sym">=</span> None <span class="slc">#we both leave</span>
                <span class="kwd">mp_entrylock_release</span><span class="sym">()</span> <span class="slc">#let others enter, our meeting is over</span>

            <span class="kwb">else</span><span class="sym">:</span> <span class="slc">#we've met someone else</span>
                other <span class="sym">=</span> mp_first
                <span class="kwd">mp_meetnotify_put</span><span class="sym">(</span>self_color<span class="sym">)</span>

            self_met <span class="sym">+=</span> <span class="num">1</span>
            <span class="kwb">if</span> other <span class="sym">==</span> FADED<span class="sym">:</span>
                self_color <span class="sym">=</span> FADED
            <span class="kwb">elif</span> self_color <span class="sym">!=</span> other<span class="sym">:</span>  <span class="slc"># Calculate complementary color</span>
                self_color <span class="sym">=</span> <span class="num">6</span> <span class="sym">-</span> self_color <span class="sym">-</span> other

<span class="kwb">def</span> <span class="kwd">main</span><span class="sym">():</span>
    colors <span class="sym">= [</span>BLUE<span class="sym">,</span> RED<span class="sym">,</span> YELLOW<span class="sym">,</span> BLUE<span class="sym">]</span>
    creatures <span class="sym">= [</span><span class="kwd">Creature</span><span class="sym">(</span>c<span class="sym">)</span> <span class="kwb">for</span> c <span class="kwb">in</span> colors<span class="sym">]</span>
    threads <span class="sym">= [</span>threading<span class="sym">.</span><span class="kwd">Thread</span><span class="sym">(</span>target<span class="sym">=</span>c<span class="sym">.</span>socialize<span class="sym">)</span> <span class="kwb">for</span> c <span class="kwb">in</span> creatures<span class="sym">]</span>
    <span class="kwb">for</span> t <span class="kwb">in</span> threads<span class="sym">:</span>
        t<span class="sym">.</span><span class="kwd">start</span><span class="sym">()</span>

    <span class="kwb">for</span> t <span class="kwb">in</span> threads<span class="sym">:</span>
        t<span class="sym">.</span><span class="kwd">join</span><span class="sym">()</span>

    <span class="kwb">print</span> <span class="kwd">sum</span><span class="sym">(</span>c<span class="sym">.</span>met <span class="kwb">for</span> c <span class="kwb">in</span> creatures<span class="sym">)</span>

<span class="kwd">main</span><span class="sym">()</span>
