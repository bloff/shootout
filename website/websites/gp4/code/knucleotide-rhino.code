<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">   for JavaScript Rhino only</span>
<span class="com">*/</span>

<span class="kwd">importPackage</span><span class="sym">(</span>java<span class="sym">.</span>io<span class="sym">);</span>
<span class="kwd">importPackage</span><span class="sym">(</span>java<span class="sym">.</span>lang<span class="sym">);</span>

<span class="kwa">function</span> <span class="kwd">generateFrequencies</span><span class="sym">(</span>seq<span class="sym">,</span> len<span class="sym">) {</span>
   <span class="kwa">var</span> ns <span class="sym">=</span> seq<span class="sym">.</span><span class="kwc">length</span> <span class="sym">+</span> <span class="num">1</span> <span class="sym">-</span> len<span class="sym">;</span>
   frequencies <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Object</span><span class="sym">();</span> <span class="slc">// All objects are also hashtables</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> ns<span class="sym">;</span> i<span class="sym">++) {</span>
      <span class="kwa">var</span> nucleo <span class="sym">=</span> seq<span class="sym">.</span><span class="kwc">slice</span><span class="sym">(</span>i<span class="sym">,</span> i <span class="sym">+</span> len<span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span>nucleo <span class="kwa">in</span> frequencies<span class="sym">)</span>
         frequencies<span class="sym">[</span>nucleo<span class="sym">] +=</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">else</span>
         frequencies<span class="sym">[</span>nucleo<span class="sym">] =</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwa">return</span> frequencies<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">writeFrequencies</span><span class="sym">(</span>seq<span class="sym">,</span> len<span class="sym">) {</span>
   <span class="kwa">var</span> frequencies <span class="sym">=</span> <span class="kwd">generateFrequencies</span><span class="sym">(</span>seq<span class="sym">,</span> len<span class="sym">);</span>
   <span class="kwa">var</span> freqArray <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">();</span>
   <span class="kwa">var</span> total <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> nucleo <span class="kwa">in</span> frequencies<span class="sym">) {</span>
      total <span class="sym">+=</span> frequencies<span class="sym">[</span>nucleo<span class="sym">];</span>
      freqArray<span class="sym">.</span><span class="kwc">push</span><span class="sym">( {</span> <span class="str">'num'</span><span class="sym">:</span> frequencies<span class="sym">[</span>nucleo<span class="sym">],</span> <span class="str">'nuc'</span><span class="sym">:</span> nucleo <span class="sym">} );</span>
   <span class="sym">}</span>
   freqArray<span class="sym">.</span><span class="kwc">sort</span><span class="sym">(</span><span class="kwa">function</span><span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) {</span> <span class="kwa">return</span> b<span class="sym">[</span><span class="str">'num'</span><span class="sym">] -</span> a<span class="sym">[</span><span class="str">'num'</span><span class="sym">];});</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i <span class="kwa">in</span> freqArray<span class="sym">) {</span>
      <span class="kwa">var</span> percent <span class="sym">=</span> freqArray<span class="sym">[</span>i<span class="sym">][</span><span class="str">'num'</span><span class="sym">] *</span> <span class="num">100</span> <span class="sym">/</span> total<span class="sym">;</span>
      <span class="kwc">print</span><span class="sym">(</span>freqArray<span class="sym">[</span>i<span class="sym">][</span><span class="str">'nuc'</span><span class="sym">] +</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> percent<span class="sym">.</span><span class="kwd">toFixed</span><span class="sym">(</span><span class="num">3</span><span class="sym">));</span>
   <span class="sym">}</span>
   <span class="kwc">print</span><span class="sym">();</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">writeCount</span><span class="sym">(</span>seq<span class="sym">,</span> s<span class="sym">) {</span>
   <span class="kwa">var</span> frequencies <span class="sym">=</span> <span class="kwd">generateFrequencies</span><span class="sym">(</span>seq<span class="sym">,</span> s<span class="sym">.</span><span class="kwc">length</span><span class="sym">);</span>
   <span class="kwc">print</span><span class="sym">((</span>s <span class="kwa">in</span> frequencies ? frequencies<span class="sym">[</span>s<span class="sym">] :</span> <span class="num">0</span><span class="sym">) +</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> <span class="sym">+</span> s<span class="sym">);</span>
<span class="sym">}</span>

<span class="slc">// Read in standard input.  Borrowed from the Java implementation, kind of.</span>
<span class="kwa">var</span> sbuffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StringBuffer</span><span class="sym">();</span>
<span class="kwa">var</span> line<span class="sym">;</span>
<span class="kwa">var</span> stdin <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">BufferedReader</span><span class="sym">(</span>
   <span class="kwa">new</span> <span class="kwd">InputStreamReader</span><span class="sym">(</span>Packages<span class="sym">.</span>java<span class="sym">.</span>lang<span class="sym">.</span>System<span class="sym">[</span><span class="str">'in'</span><span class="sym">]));</span>
<span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> stdin<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">()) !=</span> <span class="kwa">null</span><span class="sym">) {</span>
   <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">.</span><span class="kwd">startsWith</span><span class="sym">(</span><span class="str">&quot;&gt;THREE&quot;</span><span class="sym">))</span> <span class="kwa">break</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="kwa">var</span> c<span class="sym">;</span>
<span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> stdin<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">()) !=</span> <span class="kwa">null</span><span class="sym">) {</span>
   c <span class="sym">=</span> line<span class="sym">.</span><span class="kwc">charAt</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
   <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
      <span class="kwa">break</span><span class="sym">;</span>
   <span class="kwa">else if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)</span>
      sbuffer<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>line<span class="sym">.</span><span class="kwc">toUpperCase</span><span class="sym">());</span>
<span class="sym">}</span>
<span class="kwa">var</span> seq <span class="sym">=</span> <span class="str">''</span> <span class="sym">+</span> sbuffer<span class="sym">.</span><span class="kwc">toString</span><span class="sym">();</span>
sbuffer <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>

<span class="kwd">writeFrequencies</span><span class="sym">(</span>seq<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
<span class="kwd">writeFrequencies</span><span class="sym">(</span>seq<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
nucleos <span class="sym">=</span> <span class="str">'GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT'</span><span class="sym">.</span><span class="kwc">split</span><span class="sym">(</span><span class="str">' '</span><span class="sym">);</span>
<span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">in</span> nucleos<span class="sym">) {</span>
   <span class="kwd">writeCount</span><span class="sym">(</span>seq<span class="sym">,</span> nucleos<span class="sym">[</span>i<span class="sym">]);</span>
<span class="sym">}</span>

