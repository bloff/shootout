<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   Contributed by David Teller</span>
<span class="hl com">*)</span>

<span class="hl com">(** Extremely light-weight threads, aka purely functional coroutines*)</span>
<span class="hl kwa">type</span> <span class="hl str">'a coroutine =  '</span>a <span class="hl sym">* (</span><span class="hl kwb">unit</span> <span class="hl sym">-&gt;</span> <span class="hl str">'a coroutine)  (**Intermediate result and continuation*)</span>
<span class="hl str"></span>
<span class="hl str">(** Initialise the chain of coroutines, then start feeding 0s*)</span>
<span class="hl str">let create_coroutine ~depth =</span>
<span class="hl str">  let rec aux = function                                             (*Main creation loop*)</span>
<span class="hl str">    | 0 -&gt;                       (*I'</span>m the last one<span class="hl sym">,</span> I<span class="hl str">'ll feed 0s, but only so many times*)</span>
<span class="hl str">	let rec loop () =</span>
<span class="hl str">	  (0, fun () -&gt; loop ())</span>
<span class="hl str">	in</span>
<span class="hl str">	  loop ()</span>
<span class="hl str">    | n -&gt;</span>
<span class="hl str">	let rec loop (r,co) =</span>
<span class="hl str">	  ( (r + 1), fun () -&gt; loop (co ()) )</span>
<span class="hl str">	in loop (aux (n - 1))</span>
<span class="hl str">  in</span>
<span class="hl str">    aux depth</span>
<span class="hl str"></span>
<span class="hl str">(** Listen for a given number of messages*)</span>
<span class="hl str">let sum channel_end ~iterations =</span>
<span class="hl str">  let rec aux total (r, co) = function</span>
<span class="hl str">    | 0 -&gt; total</span>
<span class="hl str">    | n -&gt; aux (total + r) ( co () ) (n - 1)</span>
<span class="hl str">  in</span>
<span class="hl str">    aux 0 channel_end  iterations</span>
<span class="hl str"></span>
<span class="hl str">let () =</span>
<span class="hl str">  let n  = try int_of_string(Array.get Sys.argv 1) with _ -&gt; 10</span>
<span class="hl str">  in</span>
<span class="hl str">    print_int(sum ~iterations:n (create_coroutine ~depth:500));</span>
<span class="hl str">    print_newline()</span>
