<span class="slc">' The Computer Language Shootout</span>
<span class="slc">' http://shootout.alioth.debian.org</span>
<span class="slc">' contributed by Isaac Gouy (Oberon-2 novice)</span>
<span class="slc">' converted to FreeBASIC by Simon Nash</span>

#include <span class="str">&quot;crt.bi&quot;</span>

#define chrTAB chr<span class="sym">(</span><span class="num">8</span><span class="sym">)</span>
#define ODD<span class="sym">(</span>n<span class="sym">) ((</span>n <span class="kwa">AND</span> <span class="num">1</span><span class="sym">) =</span> <span class="num">1</span><span class="sym">)</span>
#undef Swap

Enum BOOL_E
  <span class="kwa">FALSE</span> <span class="sym">=</span> <span class="num">0</span>
  <span class="kwa">TRUE</span> <span class="sym">=</span> <span class="kwa">NOT FALSE</span>
<span class="kwa">End</span> Enum

Const NW <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> NE <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> W <span class="sym">=</span> <span class="num">2</span><span class="sym">,</span> E <span class="sym">=</span> <span class="num">3</span><span class="sym">,</span> SW <span class="sym">=</span> <span class="num">4</span><span class="sym">,</span> SE <span class="sym">=</span> <span class="num">5</span>
Const SIDES <span class="sym">=</span> <span class="num">6</span>

Const BOARD_COLS <span class="sym">=</span> <span class="num">5</span>
Const BOARD_ROWS <span class="sym">=</span> <span class="num">10</span>
Const BOARD_SIZE <span class="sym">=</span> BOARD_COLS <span class="sym">*</span> BOARD_ROWS

Const CPIECES <span class="sym">=</span> <span class="num">10</span>
Const PIECE_SIZE <span class="sym">=</span> <span class="num">5</span>
Const PIECE_ROTATIONS <span class="sym">=</span> SIDES
Const PIECE_FLIPS <span class="sym">=</span> <span class="num">2</span>
Const PIECE_ORIENTATIONS <span class="sym">=</span> PIECE_ROTATIONS <span class="sym">*</span> PIECE_FLIPS

<span class="kwa">Type</span> <span class="kwb">BOOLEAN</span> <span class="kwa">As</span> <span class="kwb">Integer</span>

<span class="kwa">Type SET</span>
  data <span class="kwa">As</span> <span class="kwb">Integer</span> ptr
  high <span class="kwa">As</span> <span class="kwb">Integer</span>
  count <span class="kwa">As</span> <span class="kwb">Integer</span>
<span class="kwa">End Type</span>

<span class="kwa">Type</span> PieceCell <span class="kwa">As</span> PieceCellDesc ptr
<span class="kwa">Type</span> PieceCellDesc
  marked <span class="kwa">As</span> <span class="kwb">BOOLEAN</span>
  <span class="kwa">next</span><span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> SIDES <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">As</span> PieceCell
<span class="kwa">End Type</span>

<span class="kwa">Type</span> PieceShape
  x<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">As</span> PieceCell
<span class="kwa">End Type</span>

<span class="kwa">Type</span> PieceCache
  x<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> PIECE_ORIENTATIONS <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">As</span> PieceShape
<span class="kwa">End Type</span>

<span class="kwa">Type</span> Piece <span class="kwa">As</span> PieceDesc ptr
<span class="kwa">Type</span> PieceDesc
  number <span class="kwa">As</span> <span class="kwb">INTEGER</span>
  orientation <span class="kwa">As</span> <span class="kwb">INTEGER</span>
  cache <span class="kwa">As</span> PieceCache
<span class="kwa">End Type</span>

<span class="kwa">Type</span> BoardCell <span class="kwa">As</span> BoardCellDesc ptr
<span class="kwa">Type</span> BoardCellDesc
  marked <span class="kwa">As</span> <span class="kwb">BOOLEAN</span>
  <span class="kwa">next</span><span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> SIDES <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">As</span> BoardCell
  number <span class="kwa">As</span> <span class="kwb">INTEGER</span>
  piece <span class="kwa">As</span> Piece
<span class="kwa">End Type</span>

<span class="kwa">Type</span> BoardPieceShape
  x<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">As</span> BoardCell
<span class="kwa">End Type</span>
<span class="kwa">Type</span> BoardPiece <span class="kwa">As</span> BoardPieceShape ptr
<span class="kwa">Type</span> BoardCache
  x<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> CPIECES <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span> <span class="kwa">To</span> PIECE_ORIENTATIONS <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span> <span class="kwa">To</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">As</span> BoardPiece
<span class="kwa">End Type</span>

<span class="kwa">Type</span> Board
  cells<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">As</span> BoardCell
  cellsPieceWillFill <span class="kwa">As</span> BoardPieceShape
  cellCount <span class="kwa">As</span> <span class="kwb">INTEGER</span>
  cache <span class="kwa">As</span> BoardCache
<span class="kwa">End Type</span>

<span class="kwa">Type</span> BoardPieces
  x<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">INTEGER</span>
<span class="kwa">End Type</span>

<span class="kwa">Dim</span> Shared <span class="kwa">As</span> LONGINT countdown<span class="sym">,</span> n
<span class="kwa">Dim</span> Shared board <span class="kwa">As</span> Board
<span class="kwa">Dim</span> Shared pieces<span class="sym">(</span><span class="num">0</span> <span class="kwa">To</span> CPIECES <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">As</span> Piece
<span class="kwa">Dim</span> Shared unplaced <span class="kwa">As SET</span>
<span class="kwa">Dim</span> Shared <span class="kwa">As</span> BoardPieces first<span class="sym">,</span> last<span class="sym">,</span> current
<span class="kwa">Dim</span> Shared once <span class="kwa">As</span> <span class="kwb">BOOLEAN</span>
<span class="kwa">Dim</span> Shared noFit <span class="kwa">As</span> BoardPiece
<span class="kwa">Dim</span> Shared ptr_list <span class="kwa">As</span> Any ptr ptr
<span class="kwa">Dim</span> Shared ptr_count <span class="kwa">As</span> <span class="kwb">Integer</span>
<span class="kwa">Dim</span> Shared ptr_used <span class="kwa">As</span> <span class="kwb">Integer</span>

#undef CAllocate
#undef Allocate
#undef ReAllocate
#undef DeAllocate

#define PTR_GRAN <span class="num">10000</span>
<span class="kwa">Function</span> CAllocate<span class="sym">(</span><span class="kwa">ByVal</span> size <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">As</span> Any ptr
  <span class="kwa">If</span> ptr_list <span class="sym">=</span> <span class="kwa">NULL Then</span>
    ptr_list <span class="sym">=</span> malloc<span class="sym">(</span>PTR_GRAN <span class="sym">*</span> sizeof<span class="sym">(</span>Any ptr<span class="sym">))</span>
    ptr_count <span class="sym">=</span> PTR_GRAN
  <span class="kwa">End If</span>
  <span class="kwa">If</span> ptr_count <span class="sym">=</span> ptr_used <span class="kwa">Then</span>
    ptr_count <span class="sym">+=</span> PTR_GRAN
    ptr_list <span class="sym">=</span> realloc<span class="sym">(</span>ptr_list<span class="sym">,</span> ptr_count <span class="sym">*</span> sizeof<span class="sym">(</span>Any ptr<span class="sym">))</span>
  <span class="kwa">End If</span>
  ptr_list<span class="sym">[</span>ptr_used<span class="sym">] =</span> calloc<span class="sym">(</span>size<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
  <span class="kwa">Function</span> <span class="sym">=</span> ptr_list<span class="sym">[</span>ptr_used<span class="sym">]</span>
  ptr_used <span class="sym">+=</span> <span class="num">1</span>
<span class="kwa">End Function</span>

<span class="kwa">Sub</span> ptr_list_free<span class="sym">()</span>
  <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">Integer</span>
    <span class="kwa">If</span> ptr_list <span class="sym">&lt;&gt;</span> <span class="kwa">NULL Then</span>
      <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> ptr_used <span class="sym">-</span> <span class="num">1</span>
        free<span class="sym">(</span>ptr_list<span class="sym">[</span>i<span class="sym">])</span>
      <span class="kwa">Next</span> i
      free<span class="sym">(</span>ptr_list<span class="sym">)</span>
    <span class="kwa">End If</span>
    ptr_list <span class="sym">=</span> <span class="kwa">NULL</span>
    ptr_count <span class="sym">=</span> <span class="num">0</span>
    ptr_used <span class="sym">=</span> <span class="num">0</span>
<span class="kwa">End Sub</span>

<span class="slc">' Set, always 0 based, specific to this program</span>
<span class="kwa">Sub</span> SET_INIT<span class="sym">(</span><span class="kwa">ByVal set As SET</span> ptr<span class="sym">,</span> <span class="kwa">ByVal</span> high <span class="kwa">As</span> <span class="kwb">Integer</span><span class="sym">)</span>
  <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">Integer</span>
    <span class="kwa">set</span><span class="sym">-&gt;</span>data <span class="sym">=</span> CAllocate<span class="sym">(</span>sizeof<span class="sym">(</span><span class="kwb">Integer</span><span class="sym">) * (</span>high <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
    <span class="kwa">set</span><span class="sym">-&gt;</span>high <span class="sym">=</span> high
    <span class="kwa">set</span><span class="sym">-&gt;</span>count <span class="sym">=</span> high <span class="sym">+</span> <span class="num">1</span>
    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> high
      <span class="kwa">set</span><span class="sym">-&gt;</span>data<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">TRUE</span>
    <span class="kwa">Next</span> i
<span class="kwa">End Sub</span>
#define SET_EMPTY<span class="sym">(</span><span class="kwa">set</span><span class="sym">) (</span><span class="kwa">set</span>.count <span class="sym">=</span> <span class="num">0</span><span class="sym">)</span>
#define SET_NOTEMPTY<span class="sym">(</span><span class="kwa">set</span><span class="sym">) (</span><span class="kwa">set</span>.count <span class="sym">&lt;&gt;</span> <span class="num">0</span><span class="sym">)</span>
#define SET_ADD<span class="sym">(</span><span class="kwa">set</span><span class="sym">,</span> k<span class="sym">)</span> <span class="kwa">If set</span>.data<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">FALSE Then set</span>.data<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">TRUE</span> <span class="sym">:</span> <span class="kwa">set</span>.count <span class="sym">+=</span> <span class="num">1</span> <span class="kwa">End If</span>
#define SET_REMOVE<span class="sym">(</span><span class="kwa">set</span><span class="sym">,</span> k<span class="sym">)</span> <span class="kwa">If set</span>.data<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">TRUE Then set</span>.data<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">FALSE</span> <span class="sym">:</span> <span class="kwa">set</span>.count <span class="sym">-=</span> <span class="num">1</span> <span class="kwa">End If</span>
#define SET_IN<span class="sym">(</span><span class="kwa">set</span><span class="sym">,</span> k<span class="sym">) (</span><span class="kwa">set</span>.data<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">TRUE</span><span class="sym">)</span>
#define SET_NOTIN<span class="sym">(</span><span class="kwa">set</span><span class="sym">,</span> k<span class="sym">) (</span><span class="kwa">set</span>.data<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">FALSE</span><span class="sym">)</span>

<span class="slc">' Cell macros</span>

#define Cell_Initialize<span class="sym">(</span>c<span class="sym">)</span> c<span class="sym">-&gt;</span>marked <span class="sym">=</span> <span class="kwa">FALSE</span>
#define Cell_Mark<span class="sym">(</span>c<span class="sym">)</span> c<span class="sym">-&gt;</span>marked <span class="sym">=</span> <span class="kwa">TRUE</span>
#define Cell_Unmark<span class="sym">(</span>c<span class="sym">)</span> c<span class="sym">-&gt;</span>marked <span class="sym">=</span> <span class="kwa">FALSE</span>
#define Cell_Empty<span class="sym">(</span>c<span class="sym">)</span> c<span class="sym">-&gt;</span>piece <span class="sym">=</span> <span class="kwa">NULL</span>
#define Cell_IsEmpty<span class="sym">(</span>c<span class="sym">) (</span>c<span class="sym">-&gt;</span>piece <span class="sym">=</span> <span class="kwa">NULL</span><span class="sym">)</span>
#define Cell_IsNotEmpty<span class="sym">(</span>c<span class="sym">) (</span>c<span class="sym">-&gt;</span>piece <span class="sym">&lt;&gt;</span> <span class="kwa">NULL</span><span class="sym">)</span>
#define Cell_Number<span class="sym">(</span>c<span class="sym">,</span> i<span class="sym">)</span> c<span class="sym">-&gt;</span>marked <span class="sym">=</span> <span class="kwa">FALSE</span> <span class="sym">:</span> c<span class="sym">-&gt;</span>number <span class="sym">=</span> i

<span class="kwa">Function</span> BoardCell_ContiguousEmptyCells <span class="sym">(</span><span class="kwa">ByVal</span> c <span class="kwa">As</span> BoardCell<span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">INTEGER</span>
  <span class="kwa">Dim As</span> <span class="kwb">INTEGER</span> count<span class="sym">,</span> i
  <span class="kwa">Dim</span> neighbour <span class="kwa">As</span> BoardCell
    <span class="kwa">If</span> <span class="sym">(</span>c<span class="sym">-&gt;</span>marked <span class="sym">=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">AND</span> Cell_IsEmpty<span class="sym">(</span>c<span class="sym">)</span> <span class="kwa">Then</span>
      Cell_Mark<span class="sym">(</span>c<span class="sym">)</span>
      count <span class="sym">=</span> <span class="num">1</span>
      <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> SIDES <span class="sym">-</span> <span class="num">1</span>
        neighbour <span class="sym">=</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>i<span class="sym">)</span>
        <span class="kwa">If</span> <span class="sym">(</span>neighbour <span class="sym">&lt;&gt;</span> <span class="kwa">NULL</span><span class="sym">)</span> <span class="kwa">Then</span>
          <span class="kwa">If</span> Cell_IsEmpty<span class="sym">(</span>neighbour<span class="sym">)</span> <span class="kwa">Then</span>
            count <span class="sym">+=</span> BoardCell_ContiguousEmptyCells<span class="sym">(</span>neighbour<span class="sym">)</span>
          <span class="kwa">End If</span>
        <span class="kwa">End If</span>
      <span class="kwa">Next</span> i
    <span class="kwa">Else</span>
      count <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">End If</span>
    Return count
<span class="kwa">End Function</span>

<span class="kwa">Sub</span> PieceCell_Flip<span class="sym">(</span><span class="kwa">ByVal</span> c <span class="kwa">As</span> PieceCell<span class="sym">)</span>
  <span class="kwa">Dim</span> swap <span class="kwa">As</span> PieceCell
    swap <span class="sym">=</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> swap

    swap <span class="sym">=</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> swap

    swap <span class="sym">=</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> swap
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> PieceCell_Rotate<span class="sym">(</span><span class="kwa">ByVal</span> c <span class="kwa">As</span> PieceCell<span class="sym">)</span>
  <span class="kwa">Dim</span> swap <span class="kwa">As</span> PieceCell
    swap <span class="sym">=</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">)</span>
    c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> swap
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Make0 <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByRef</span> a <span class="kwa">As</span> PieceShape<span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Make1 <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByRef</span> a <span class="kwa">As</span> PieceShape<span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Make2 <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByRef</span> a <span class="kwa">As</span> PieceShape<span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Make3 <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByRef</span> a <span class="kwa">As</span> PieceShape<span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Make4 <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByRef</span> a <span class="kwa">As</span> PieceShape<span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Make5 <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByRef</span> a <span class="kwa">As</span> PieceShape<span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Make6 <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByRef</span> a <span class="kwa">As</span> PieceShape<span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Make7 <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByRef</span> a <span class="kwa">As</span> PieceShape<span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Make8 <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByRef</span> a <span class="kwa">As</span> PieceShape<span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Make9 <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByRef</span> a <span class="kwa">As</span> PieceShape<span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  a.x<span class="sym">(</span><span class="num">3</span><span class="sym">)-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> a.x<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Piece_Initialize <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByVal</span> n <span class="kwa">As</span> <span class="kwb">INTEGER</span><span class="sym">)</span>
  <span class="kwa">Dim As</span> <span class="kwb">INTEGER</span> i<span class="sym">,</span> j<span class="sym">,</span> k
  <span class="kwa">Dim</span> c <span class="kwa">As</span> PieceCell
    p<span class="sym">-&gt;</span>orientation <span class="sym">=</span> <span class="num">0</span>
    p<span class="sym">-&gt;</span>number <span class="sym">=</span> n

    <span class="kwa">For</span> k <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> PIECE_ORIENTATIONS <span class="sym">-</span> <span class="num">1</span>
      <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">TO</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span>
        c <span class="sym">=</span> CAllocate<span class="sym">(</span>sizeof<span class="sym">(</span>PieceCellDesc<span class="sym">))</span>
        Cell_Initialize<span class="sym">(</span>c<span class="sym">)</span>
        p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">)</span>.x<span class="sym">(</span>i<span class="sym">) =</span> c
      <span class="kwa">Next</span> i

      <span class="kwa">Select Case As</span> Const n
        <span class="kwa">Case</span> <span class="num">0</span>
          Piece_Make0<span class="sym">(</span> p<span class="sym">,</span> p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">) )</span>
        <span class="kwa">Case</span> <span class="num">1</span>
          Piece_Make1<span class="sym">(</span> p<span class="sym">,</span> p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">) )</span>
        <span class="kwa">Case</span> <span class="num">2</span>
          Piece_Make2<span class="sym">(</span> p<span class="sym">,</span> p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">) )</span>
        <span class="kwa">Case</span> <span class="num">3</span>
          Piece_Make3<span class="sym">(</span> p<span class="sym">,</span> p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">) )</span>
        <span class="kwa">Case</span> <span class="num">4</span>
          Piece_Make4<span class="sym">(</span> p<span class="sym">,</span> p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">) )</span>
        <span class="kwa">Case</span> <span class="num">5</span>
          Piece_Make5<span class="sym">(</span> p<span class="sym">,</span> p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">) )</span>
        <span class="kwa">Case</span> <span class="num">6</span>
          Piece_Make6<span class="sym">(</span> p<span class="sym">,</span> p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">) )</span>
        <span class="kwa">Case</span> <span class="num">7</span>
          Piece_Make7<span class="sym">(</span> p<span class="sym">,</span> p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">) )</span>
        <span class="kwa">Case</span> <span class="num">8</span>
          Piece_Make8<span class="sym">(</span> p<span class="sym">,</span> p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">) )</span>
        <span class="kwa">Case</span> <span class="num">9</span>
          Piece_Make9<span class="sym">(</span> p<span class="sym">,</span> p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">) )</span>
      <span class="kwa">End Select</span>

      <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> k <span class="sym">-</span> <span class="num">1</span>
        <span class="kwa">If</span> <span class="sym">(</span>i MOD PIECE_ROTATIONS<span class="sym">) =</span> <span class="num">0</span> <span class="kwa">Then</span>
          <span class="kwa">For</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span>
            PieceCell_Flip<span class="sym">(</span>p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">)</span>.x<span class="sym">(</span>j<span class="sym">))</span>
          <span class="kwa">Next</span> j
        <span class="kwa">Else</span>
          <span class="kwa">For</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span>
            PieceCell_Rotate<span class="sym">(</span>p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>k<span class="sym">)</span>.x<span class="sym">(</span>j<span class="sym">))</span>
          <span class="kwa">Next</span> j
        <span class="kwa">End If</span>
      <span class="kwa">Next</span> i
    <span class="kwa">Next</span> k
<span class="kwa">End Sub</span>

#define Piece_Unmark<span class="sym">(</span>p<span class="sym">)</span> Scope <span class="sym">:</span> <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">Integer</span> <span class="sym">:</span> <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span> <span class="sym">:</span> Cell_Unmark<span class="sym">(</span>p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>p<span class="sym">-&gt;</span>orientation<span class="sym">)</span>.x<span class="sym">(</span>i<span class="sym">)) :</span> <span class="kwa">Next</span> i <span class="sym">:</span> <span class="kwa">End</span> Scope

<span class="kwa">Function</span> Piece_NextOrientation <span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">)</span> <span class="kwa">As</span> Piece
  p<span class="sym">-&gt;</span>orientation <span class="sym">= (</span>p<span class="sym">-&gt;</span>orientation <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> MOD PIECE_ORIENTATIONS
  Return p
<span class="kwa">End Function</span>

<span class="kwa">Function</span> Piece_cells<span class="sym">(</span><span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">,</span> <span class="kwa">ByVal</span> i <span class="kwa">As</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">As</span> PieceCell
  Return p<span class="sym">-&gt;</span>cache.x<span class="sym">(</span>p<span class="sym">-&gt;</span>orientation<span class="sym">)</span>.x<span class="sym">(</span>i<span class="sym">)</span>
<span class="kwa">End Function</span>

<span class="kwa">Sub</span> Board_Initialize <span class="sym">(</span><span class="kwa">ByRef</span> b <span class="kwa">As</span> Board<span class="sym">)</span>
  <span class="kwa">Dim As</span> <span class="kwb">INTEGER</span> i<span class="sym">,</span> row<span class="sym">,</span> m
  <span class="kwa">Dim</span> c <span class="kwa">As</span> BoardCell
  <span class="kwa">Dim As</span> <span class="kwb">BOOLEAN</span> isFirst<span class="sym">,</span> isLast

    b.cellCount <span class="sym">=</span> <span class="num">0</span>

    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span>
      c <span class="sym">=</span> CAllocate<span class="sym">(</span>sizeof<span class="sym">(</span>BoardCellDesc<span class="sym">))</span>
      Cell_Number<span class="sym">(</span>c<span class="sym">,</span> i<span class="sym">)</span>
      b.cells<span class="sym">(</span>i<span class="sym">) =</span> c
    <span class="kwa">Next</span> i

    m <span class="sym">= (</span>BOARD_SIZE \ BOARD_COLS<span class="sym">) -</span> <span class="num">1</span>

    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span>
      row <span class="sym">=</span> i \ BOARD_COLS
      isFirst <span class="sym">= (</span>i MOD BOARD_COLS<span class="sym">) =</span> <span class="num">0</span>
      isLast <span class="sym">= ((</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> MOD BOARD_COLS<span class="sym">) =</span> <span class="num">0</span>
      c <span class="sym">=</span> b.cells<span class="sym">(</span>i<span class="sym">)</span>

      <span class="kwa">If</span> ODD<span class="sym">(</span>row<span class="sym">)</span> <span class="kwa">Then</span>
        <span class="kwa">If</span> isLast <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span>
          c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> b.cells<span class="sym">(</span>i <span class="sym">- (</span>BOARD_COLS <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
        <span class="kwa">End If</span>
        c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> b.cells<span class="sym">(</span>i <span class="sym">-</span> BOARD_COLS<span class="sym">)</span>

        <span class="kwa">If</span> row <span class="sym">&lt;&gt;</span> m <span class="kwa">Then</span>
          <span class="kwa">If</span> isLast <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span>
            c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> b.cells<span class="sym">(</span>i <span class="sym">+</span> BOARD_COLS <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
          <span class="kwa">End If</span>
          c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> b.cells<span class="sym">(</span>i <span class="sym">+</span> BOARD_COLS<span class="sym">)</span>
        <span class="kwa">End If</span>
      <span class="kwa">Else</span>
        <span class="kwa">If</span> row <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">Then</span>
          <span class="kwa">If</span> isFirst <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span>
            c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NW<span class="sym">) =</span> b.cells<span class="sym">(</span>i <span class="sym">- (</span>BOARD_COLS <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
          <span class="kwa">End If</span>
          c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>NE<span class="sym">) =</span> b.cells<span class="sym">(</span>i <span class="sym">-</span> BOARD_COLS<span class="sym">)</span>
        <span class="kwa">End If</span>

        <span class="kwa">If</span> row <span class="sym">&lt;&gt;</span> m <span class="kwa">Then</span>
          <span class="kwa">If</span> isFirst <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span>
            c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SW<span class="sym">) =</span> b.cells<span class="sym">(</span>i <span class="sym">+ (</span>BOARD_COLS <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
          <span class="kwa">End If</span>
          c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>SE<span class="sym">) =</span> b.cells<span class="sym">(</span>i <span class="sym">+</span> BOARD_COLS<span class="sym">)</span>
        <span class="kwa">End If</span>
      <span class="kwa">End If</span>
      <span class="kwa">If</span> isFirst <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>W<span class="sym">) =</span> b.cells<span class="sym">(</span>i <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
      <span class="kwa">If</span> isLast <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>E<span class="sym">) =</span> b.cells<span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">Next</span> i
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Board_Unmark<span class="sym">(</span><span class="kwa">ByRef</span> b <span class="kwa">As</span> Board<span class="sym">)</span>
  <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">INTEGER</span>
    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span>
      Cell_Unmark<span class="sym">(</span>b.cells<span class="sym">(</span>i<span class="sym">))</span>
    <span class="kwa">Next</span> i
<span class="kwa">End Sub</span>

<span class="kwa">Function</span> Board_FirstEmptyCellIndex <span class="sym">(</span><span class="kwa">ByRef</span> b <span class="kwa">As</span> Board<span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">INTEGER</span>
  <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">INTEGER</span>
    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span>
      <span class="kwa">If</span> Cell_IsEmpty<span class="sym">(</span>b.cells<span class="sym">(</span>i<span class="sym">))</span> <span class="kwa">Then</span> Return i
    <span class="kwa">Next</span> i
    Return <span class="sym">-</span><span class="num">1</span>
<span class="kwa">End Function</span>

<span class="kwa">Sub</span> Board_Remove <span class="sym">(</span><span class="kwa">ByRef</span> b <span class="kwa">As</span> Board<span class="sym">,</span> <span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">)</span>
  <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">INTEGER</span>
    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span>
      <span class="kwa">If</span> b.cells<span class="sym">(</span>i<span class="sym">)-&gt;</span>piece <span class="sym">=</span> p <span class="kwa">Then</span>
        b.cells<span class="sym">(</span>i<span class="sym">)-&gt;</span>piece <span class="sym">=</span> <span class="kwa">NULL</span>
      <span class="kwa">End If</span>
    <span class="kwa">Next</span> i
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> Board_Find <span class="sym">(</span><span class="kwa">ByRef</span> b <span class="kwa">As</span> Board<span class="sym">,</span> <span class="kwa">ByVal</span> p <span class="kwa">As</span> PieceCell<span class="sym">,</span> <span class="kwa">ByVal</span> c <span class="kwa">As</span> BoardCell<span class="sym">)</span>
  <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">INTEGER</span>
    <span class="kwa">If</span> <span class="sym">(</span>p <span class="sym">&lt;&gt;</span> <span class="kwa">NULL</span><span class="sym">)</span> <span class="kwa">Then</span>
      <span class="kwa">If</span> <span class="sym">(</span>p<span class="sym">-&gt;</span>marked <span class="sym">=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">AND</span> <span class="sym">(</span>c <span class="sym">&lt;&gt;</span> <span class="kwa">NULL</span><span class="sym">)</span> <span class="kwa">Then</span>
        b.cellsPieceWillFill.x<span class="sym">(</span>b.cellCount<span class="sym">) =</span> c
        b.cellCount <span class="sym">+=</span> <span class="num">1</span>
        Cell_Mark<span class="sym">(</span>p<span class="sym">)</span>
        <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> SIDES <span class="sym">-</span> <span class="num">1</span>
          Board_Find<span class="sym">(</span>b<span class="sym">,</span> p<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>i<span class="sym">),</span> c<span class="sym">-&gt;</span><span class="kwa">next</span><span class="sym">(</span>i<span class="sym">))</span>
        <span class="kwa">Next</span> i
      <span class="kwa">End If</span>
    <span class="kwa">End If</span>
<span class="kwa">End Sub</span>

<span class="kwa">Function</span> Board_Add <span class="sym">(</span><span class="kwa">ByRef</span> b <span class="kwa">As</span> Board<span class="sym">,</span> _
                    <span class="kwa">ByVal</span> pieceIndex <span class="kwa">As</span> <span class="kwb">INTEGER</span><span class="sym">,</span> _
                    <span class="kwa">ByVal</span> boardIndex <span class="kwa">As</span> <span class="kwb">INTEGER</span><span class="sym">,</span> _
                    <span class="kwa">ByVal</span> p <span class="kwa">As</span> Piece<span class="sym">)</span> <span class="kwa">As</span> <span class="kwb">BOOLEAN</span>
  <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">INTEGER</span>
  <span class="kwa">Dim</span> a <span class="kwa">As</span> BoardPiece
    a <span class="sym">=</span> b.cache.x<span class="sym">(</span>p<span class="sym">-&gt;</span>number<span class="sym">,</span> p<span class="sym">-&gt;</span>orientation<span class="sym">,</span> pieceIndex<span class="sym">,</span> boardIndex<span class="sym">)</span>

    b.cellCount <span class="sym">=</span> <span class="num">0</span>
    Piece_Unmark<span class="sym">(</span>p<span class="sym">)</span>

    <span class="kwa">If</span> a <span class="sym">=</span> <span class="kwa">NULL Then</span>
      Board_Find<span class="sym">(</span>b<span class="sym">,</span> Piece_cells<span class="sym">(</span>p<span class="sym">,</span> pieceIndex<span class="sym">),</span> b.cells<span class="sym">(</span>boardIndex<span class="sym">))</span>

      <span class="kwa">If</span> b.cellCount <span class="sym">&lt;&gt;</span> PIECE_SIZE <span class="kwa">Then</span>
        b.cache.x<span class="sym">(</span>p<span class="sym">-&gt;</span>number<span class="sym">,</span> p<span class="sym">-&gt;</span>orientation<span class="sym">,</span> pieceIndex<span class="sym">,</span> boardIndex<span class="sym">) =</span> noFit
        Return <span class="kwa">FALSE</span>
      <span class="kwa">End If</span>

      a <span class="sym">=</span> CAllocate<span class="sym">(</span>sizeof<span class="sym">(</span>BoardPieceShape<span class="sym">))</span>
      <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">TO</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span>
        a<span class="sym">-&gt;</span>x<span class="sym">(</span>i<span class="sym">) =</span> b.cellsPieceWillFill.x<span class="sym">(</span>i<span class="sym">)</span>
      <span class="kwa">Next</span> i
      b.cache.x<span class="sym">(</span>p<span class="sym">-&gt;</span>number<span class="sym">,</span> p<span class="sym">-&gt;</span>orientation<span class="sym">,</span> pieceIndex<span class="sym">,</span> boardIndex<span class="sym">) =</span> a
    <span class="kwa">Else</span>
      <span class="kwa">If</span> a <span class="sym">=</span> noFit <span class="kwa">Then</span> Return <span class="kwa">FALSE</span>
    <span class="kwa">End If</span>
    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span>
      <span class="kwa">If</span> Cell_IsNotEmpty<span class="sym">(</span>a<span class="sym">-&gt;</span>x<span class="sym">(</span>i<span class="sym">))</span> <span class="kwa">Then</span> Return <span class="kwa">FALSE</span>
    <span class="kwa">Next</span> i

    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">TO</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span>
      a<span class="sym">-&gt;</span>x<span class="sym">(</span>i<span class="sym">)-&gt;</span>piece <span class="sym">=</span> p
    <span class="kwa">Next</span> i
    Return <span class="kwa">TRUE</span>
<span class="kwa">End Function</span>

<span class="kwa">Sub</span> Initialize <span class="sym">()</span>
  <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">INTEGER</span>
  <span class="kwa">Dim</span> p <span class="kwa">As</span> Piece
    Board_Initialize<span class="sym">(</span>board<span class="sym">)</span>
    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> ubound<span class="sym">(</span>pieces<span class="sym">)</span>
      p <span class="sym">=</span> CAllocate<span class="sym">(</span>sizeof<span class="sym">(</span>PieceDesc<span class="sym">))</span>
      Piece_Initialize<span class="sym">(</span>p<span class="sym">,</span> i<span class="sym">)</span>
      pieces<span class="sym">(</span>i<span class="sym">) =</span> p
    <span class="kwa">Next</span> i
    SET_INIT<span class="sym">(</span>&#64;unplaced<span class="sym">,</span> ubound<span class="sym">(</span>pieces<span class="sym">))</span>
    once <span class="sym">=</span> <span class="kwa">TRUE</span>
    noFit <span class="sym">=</span> CAllocate<span class="sym">(</span>sizeof<span class="sym">(</span>BoardPieceShape<span class="sym">))</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> CopyTo<span class="sym">(</span><span class="kwa">ByRef</span> a <span class="kwa">As</span> BoardPieces<span class="sym">)</span>
  <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">Integer</span>
    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span>
      a.x<span class="sym">(</span>i<span class="sym">) =</span> current.x<span class="sym">(</span>i<span class="sym">)</span>
    <span class="kwa">Next</span> i
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> UpdateFirstLast <span class="sym">()</span>
  <span class="kwa">Dim As</span> <span class="kwb">INTEGER</span> i<span class="sym">,</span> n
  <span class="kwa">Dim As</span> <span class="kwb">BOOLEAN</span> lessFirst<span class="sym">,</span> moreFirst<span class="sym">,</span> lessLast<span class="sym">,</span> moreLast
    <span class="kwa">If</span> once <span class="kwa">Then</span>
      <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span>
        n <span class="sym">=</span> board.cells<span class="sym">(</span>i<span class="sym">)-&gt;</span>piece<span class="sym">-&gt;</span>number
        first.x<span class="sym">(</span>i<span class="sym">) =</span> n
        last.x<span class="sym">(</span>i<span class="sym">) =</span> n
      <span class="kwa">Next</span> i
      once <span class="sym">=</span> <span class="kwa">FALSE</span>
    <span class="kwa">Else</span>
      lessFirst <span class="sym">=</span> <span class="kwa">FALSE</span>
      moreFirst <span class="sym">=</span> <span class="kwa">FALSE</span>
      lessLast <span class="sym">=</span> <span class="kwa">FALSE</span>
      moreLast <span class="sym">=</span> <span class="kwa">FALSE</span>
      <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span>
        n <span class="sym">=</span> board.cells<span class="sym">(</span>i<span class="sym">)-&gt;</span>piece<span class="sym">-&gt;</span>number

        <span class="kwa">IF</span> <span class="sym">(</span>moreFirst <span class="sym">=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">AND</span> <span class="sym">(</span>lessFirst <span class="sym">=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">AND</span> <span class="sym">(</span>n <span class="sym">&lt;</span> first.x<span class="sym">(</span>i<span class="sym">))</span> <span class="kwa">Then</span>
          lessFirst <span class="sym">=</span> <span class="kwa">TRUE</span>
        <span class="kwa">ElseIf</span> <span class="sym">(</span>n <span class="sym">&gt;</span> first.x<span class="sym">(</span>i<span class="sym">))</span> <span class="kwa">Then</span>
          moreFirst <span class="sym">=</span> <span class="kwa">TRUE</span>
        <span class="kwa">End If</span>
        <span class="kwa">If</span> <span class="sym">(</span>lessLast <span class="sym">=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">AND</span> <span class="sym">(</span>moreLast <span class="sym">=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">AND</span> <span class="sym">(</span>n <span class="sym">&gt;</span> last.x<span class="sym">(</span>i<span class="sym">))</span> <span class="kwa">Then</span>
          moreLast <span class="sym">=</span> <span class="kwa">TRUE</span>
        <span class="kwa">ElseIf</span> <span class="sym">(</span>n <span class="sym">&lt;</span> last.x<span class="sym">(</span>i<span class="sym">))</span> <span class="kwa">THEN</span>
          lessLast <span class="sym">=</span> <span class="kwa">TRUE</span>
        <span class="kwa">End If</span>
        current.x<span class="sym">(</span>i<span class="sym">) =</span> n
      <span class="kwa">Next</span> i
      <span class="kwa">If</span> lessFirst <span class="kwa">Then</span> CopyTo<span class="sym">(</span>first<span class="sym">)</span>
      <span class="kwa">If</span> moreLast <span class="kwa">Then</span> CopyTo<span class="sym">(</span>last<span class="sym">)</span>
    <span class="kwa">End If</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> PrintBoard <span class="sym">(</span><span class="kwa">ByVal</span> a <span class="kwa">As</span> BoardPieces<span class="sym">)</span>
  <span class="kwa">Dim</span> indent <span class="kwa">As</span> <span class="kwb">BOOLEAN</span>
  <span class="kwa">Dim As</span> <span class="kwb">INTEGER</span> i<span class="sym">,</span> j
    indent <span class="sym">=</span> <span class="kwa">FALSE</span>
    i <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">While</span> i <span class="sym">&lt; (</span>ubound<span class="sym">(</span>a.x<span class="sym">) +</span> <span class="num">1</span><span class="sym">)</span>
      <span class="kwa">If</span> indent <span class="kwa">Then</span> Print <span class="str">&quot; &quot;</span><span class="sym">;</span>
      <span class="kwa">For</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_COLS <span class="sym">-</span> <span class="num">1</span>
        Print a.x<span class="sym">(</span>i<span class="sym">) &amp;</span> <span class="str">&quot; &quot;</span><span class="sym">;</span>
        i <span class="sym">+=</span> <span class="num">1</span>
      <span class="kwa">Next</span> j
      Print
      indent <span class="sym">=</span> <span class="kwa">NOT</span> indent
    Wend
    Print
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> PrintSolutions <span class="sym">()</span>
  Print n <span class="sym">&amp;</span> <span class="str">&quot; solutions found&quot;</span><span class="sym">;</span>
  Print
  Print
  PrintBoard<span class="sym">(</span>first<span class="sym">)</span>
  PrintBoard<span class="sym">(</span>last<span class="sym">)</span>
<span class="kwa">End Sub</span>

<span class="kwa">Sub</span> PuzzleSolved <span class="sym">()</span>
  UpdateFirstLast<span class="sym">()</span>
  countdown <span class="sym">-=</span> <span class="num">1</span>
<span class="kwa">End Sub</span>

<span class="kwa">Function</span> ShouldPrune <span class="sym">()</span> <span class="kwa">As</span> <span class="kwb">BOOLEAN</span>
  <span class="kwa">Dim</span> i <span class="kwa">As</span> <span class="kwb">INTEGER</span>
  <span class="kwa">Dim</span> forall <span class="kwa">As</span> <span class="kwb">BOOLEAN</span>
    Board_Unmark<span class="sym">(</span>board<span class="sym">)</span>
    <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> BOARD_SIZE <span class="sym">-</span> <span class="num">1</span>
      forall <span class="sym">= (</span>BoardCell_ContiguousEmptyCells<span class="sym">(</span>board.cells<span class="sym">(</span>i<span class="sym">))</span> MOD PIECE_SIZE<span class="sym">) =</span> <span class="num">0</span>
      <span class="kwa">IF</span> forall <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then</span> Return <span class="kwa">NOT</span> forall
    <span class="kwa">Next</span> i
    Return <span class="kwa">NOT</span> forall
<span class="kwa">End Function</span>

<span class="kwa">Sub</span> FindSolutions <span class="sym">()</span>
  <span class="kwa">Dim As</span> <span class="kwb">INTEGER</span> emptyCellIndex<span class="sym">,</span> k<span class="sym">,</span> i<span class="sym">,</span> j
  <span class="kwa">Dim</span> piece <span class="kwa">As</span> Piece
    <span class="kwa">If</span> countdown <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">Then</span>
      <span class="kwa">If</span> SET_NOTEMPTY<span class="sym">(</span>unplaced<span class="sym">)</span> <span class="kwa">Then</span>
        emptyCellIndex <span class="sym">=</span> Board_FirstEmptyCellIndex<span class="sym">(</span>board<span class="sym">)</span>

        <span class="kwa">For</span> k <span class="sym">=</span> <span class="num">0</span> <span class="kwa">TO</span> ubound<span class="sym">(</span>pieces<span class="sym">)</span>
          <span class="kwa">If</span> SET_IN<span class="sym">(</span>unplaced<span class="sym">,</span> k<span class="sym">)</span> <span class="kwa">Then</span>
            SET_REMOVE<span class="sym">(</span>unplaced<span class="sym">,</span> k<span class="sym">)</span>

            <span class="kwa">For</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> PIECE_ORIENTATIONS <span class="sym">-</span> <span class="num">1</span>
              piece <span class="sym">=</span> Piece_NextOrientation<span class="sym">(</span>pieces<span class="sym">(</span>k<span class="sym">))</span>
              <span class="kwa">For</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">To</span> PIECE_SIZE <span class="sym">-</span> <span class="num">1</span>
                <span class="kwa">If</span> Board_Add<span class="sym">(</span>board<span class="sym">,</span> j<span class="sym">,</span> emptyCellIndex<span class="sym">,</span> piece<span class="sym">)</span> <span class="kwa">Then</span>
                  <span class="kwa">If</span> ShouldPrune<span class="sym">() =</span> <span class="num">0</span> <span class="kwa">Then</span> FindSolutions<span class="sym">()</span>
                  Board_Remove<span class="sym">(</span>board<span class="sym">,</span> piece<span class="sym">)</span>
                <span class="kwa">End If</span>
              <span class="kwa">Next</span> j
            <span class="kwa">Next</span> i
            SET_ADD<span class="sym">(</span>unplaced<span class="sym">,</span> k<span class="sym">)</span>
          <span class="kwa">End If</span>
        <span class="kwa">Next</span> k
      <span class="kwa">Else</span>
        PuzzleSolved<span class="sym">()</span>
      <span class="kwa">End If</span>
    <span class="kwa">End If</span>
<span class="kwa">End Sub</span>

<span class="slc">'MAIN</span>

n <span class="sym">=</span> Val<span class="sym">(</span>Command<span class="sym">(</span><span class="num">1</span><span class="sym">))</span>
countdown <span class="sym">=</span> n
Initialize<span class="sym">()</span>

FindSolutions<span class="sym">()</span>
PrintSolutions<span class="sym">()</span>

ptr_list_free<span class="sym">()</span>
