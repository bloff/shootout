<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Written by Jorge Peixoto de Morais Neto</span>
<span class="hl com">   based on code by Josh Goldfoot</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;pthread.h&gt;</span>
<span class="hl dir">#include &lt;sched.h&gt;</span>
<span class="hl dir">#include &lt;stdbool.h&gt;</span>
<span class="hl dir">#include &lt;err.h&gt;</span>
<span class="hl kwb">static unsigned long</span> meetingsleft<span class="hl sym">;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">enum</span> <span class="hl sym">{</span> Blue<span class="hl sym">,</span> Red<span class="hl sym">,</span> Yellow<span class="hl sym">,</span> Faded <span class="hl sym">}</span> color_t<span class="hl sym">;</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> <span class="hl sym">{</span>
    color_t color<span class="hl sym">;</span>
    <span class="hl kwb">bool</span> waiting_partner<span class="hl sym">;</span>
<span class="hl sym">}</span> creature_t<span class="hl sym">;</span>

<span class="hl com">/* When this function is called with two different colors, it must return the other color */</span>
<span class="hl com">/* We assume that none of the colors is Faded */</span>
<span class="hl com">/* If it is called with two equal colors, the specification allows us to return any color.  */</span>
<span class="hl com">/* In this case, we return Red if both colors are Blue, Yellow if both are Red and Blue if both are Yellow */</span>
<span class="hl kwb">static</span> color_t <span class="hl kwd">complementarycolor</span> <span class="hl sym">(</span>color_t c1<span class="hl sym">,</span> color_t c2<span class="hl sym">) {</span>
    <span class="hl kwa">switch</span> <span class="hl sym">(</span>c1<span class="hl sym">) {</span>
    <span class="hl kwa">case</span> Yellow<span class="hl sym">:</span>
	<span class="hl kwa">return</span> c2 <span class="hl sym">==</span> Blue ? Red <span class="hl sym">:</span> Blue<span class="hl sym">;</span>
    <span class="hl kwa">case</span> Red<span class="hl sym">:</span>
	<span class="hl kwa">return</span> c2 <span class="hl sym">==</span> Yellow ? Blue <span class="hl sym">:</span> Yellow<span class="hl sym">;</span>
    <span class="hl kwa">default</span><span class="hl sym">:</span>
    <span class="hl kwa">case</span> Blue<span class="hl sym">:</span>
	<span class="hl kwa">return</span> c2 <span class="hl sym">==</span> Red ? Yellow <span class="hl sym">:</span> Red<span class="hl sym">;</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl com">/* This is the meeting place. The threads simulating creatures call this function. */</span>
<span class="hl com">/* This function takes a pointer to the creaure data */</span>
<span class="hl com">/* and writes to the color field the new color the creature must assume */</span>
<span class="hl kwb">static void</span> <span class="hl kwd">meeting_place</span> <span class="hl sym">(</span>creature_t <span class="hl kwc">volatile</span> <span class="hl sym">*</span>creature_p<span class="hl sym">) {</span>
    <span class="hl com">/* A creature in the meeting place waiting for a partner. NULL means */</span>
    <span class="hl com">/* there is no such creature */</span>
    <span class="hl kwb">static</span> creature_t <span class="hl kwc">volatile</span> <span class="hl sym">*</span>waiting_creature_p <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
    <span class="hl kwb">static</span> pthread_mutex_t mutex <span class="hl sym">=</span> PTHREAD_MUTEX_INITIALIZER<span class="hl sym">;</span>
    <span class="hl kwd">pthread_mutex_lock</span> <span class="hl sym">(&amp;</span>mutex<span class="hl sym">);</span>
    <span class="hl kwa">if</span> <span class="hl sym">(!</span>waiting_creature_p<span class="hl sym">) {</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>meetingsleft<span class="hl sym">) {</span>
	    waiting_creature_p <span class="hl sym">=</span> creature_p<span class="hl sym">;</span>
	    creature_p<span class="hl sym">-&gt;</span>waiting_partner <span class="hl sym">=</span> <span class="hl kwa">true</span><span class="hl sym">;</span>
	    <span class="hl kwd">pthread_mutex_unlock</span><span class="hl sym">(&amp;</span>mutex<span class="hl sym">);</span>
	    <span class="hl kwa">while</span> <span class="hl sym">(</span>creature_p<span class="hl sym">-&gt;</span>waiting_partner<span class="hl sym">)</span>
		<span class="hl kwd">sched_yield</span> <span class="hl sym">();</span>
	<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
	    <span class="hl kwd">pthread_mutex_unlock</span> <span class="hl sym">(&amp;</span>mutex<span class="hl sym">);</span>
	    creature_p<span class="hl sym">-&gt;</span>color <span class="hl sym">=</span> Faded<span class="hl sym">;</span>
	<span class="hl sym">}</span>
    <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
	color_t newcolor <span class="hl sym">=</span>
	    <span class="hl kwd">complementarycolor</span> <span class="hl sym">(</span>creature_p<span class="hl sym">-&gt;</span>color<span class="hl sym">,</span> waiting_creature_p<span class="hl sym">-&gt;</span>color<span class="hl sym">);</span>
	creature_p<span class="hl sym">-&gt;</span>color <span class="hl sym">=</span> newcolor<span class="hl sym">;</span>
	waiting_creature_p<span class="hl sym">-&gt;</span>color <span class="hl sym">=</span> newcolor<span class="hl sym">;</span>
	waiting_creature_p<span class="hl sym">-&gt;</span>waiting_partner <span class="hl sym">=</span> <span class="hl kwa">false</span><span class="hl sym">;</span>
	waiting_creature_p <span class="hl sym">=</span> NULL<span class="hl sym">;</span>
	meetingsleft<span class="hl sym">--;</span>
	<span class="hl kwd">pthread_mutex_unlock</span> <span class="hl sym">(&amp;</span>mutex<span class="hl sym">);</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl com">/* This function simulates a creature. */</span>
<span class="hl com">/* It returns a pointer to the number of meetings this creature performed */</span>
<span class="hl kwb">static void</span> <span class="hl sym">*</span><span class="hl kwd">run_creature</span> <span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*</span>me_voidp<span class="hl sym">) {</span>
    creature_t <span class="hl sym">*</span>me_p <span class="hl sym">=</span> me_voidp<span class="hl sym">;</span>
    <span class="hl kwb">unsigned long</span> meetings <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">do</span> <span class="hl sym">{</span>
	meetings<span class="hl sym">++;</span>
	<span class="hl kwd">meeting_place</span> <span class="hl sym">(</span>me_p<span class="hl sym">);</span>
    <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>me_p<span class="hl sym">-&gt;</span>color <span class="hl sym">!=</span> Faded<span class="hl sym">);</span>
    <span class="hl kwb">unsigned long</span> <span class="hl sym">*</span>meetings_p <span class="hl sym">=</span> <span class="hl kwd">malloc</span> <span class="hl sym">(</span><span class="hl kwa">sizeof</span> <span class="hl sym">*</span>meetings_p<span class="hl sym">);</span>
<span class="hl com">/* The '-1' compensates the fact that the meetings variable counts the meeting */</span>
<span class="hl com">/* in wich the creature becomes faded (but it shouldn't) */</span>
    <span class="hl sym">*</span>meetings_p <span class="hl sym">=</span> meetings <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">return</span> meetings_p<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl dir">#define NCREATURES 4</span>
<span class="hl com">/* This function unleashes NCREATURES creatures and returns the sum of reported meetings */</span>
<span class="hl kwb">static unsigned long</span> <span class="hl kwd">meetings_of_creatures</span> <span class="hl sym">(</span><span class="hl kwb">void</span><span class="hl sym">) {</span>
    creature_t creatures<span class="hl sym">[</span>NCREATURES<span class="hl sym">];</span>
    creatures<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>color <span class="hl sym">=</span> Blue<span class="hl sym">;</span>
    creatures<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">].</span>color <span class="hl sym">=</span> Red<span class="hl sym">;</span>
    creatures<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">].</span>color <span class="hl sym">=</span> Yellow<span class="hl sym">;</span>
    creatures<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">].</span>color <span class="hl sym">=</span> Blue<span class="hl sym">;</span>

    pthread_t pids<span class="hl sym">[</span>NCREATURES<span class="hl sym">];</span>
    <span class="hl kwb">int</span> i<span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> NCREATURES <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">--)</span>
	<span class="hl kwd">pthread_create</span> <span class="hl sym">(&amp;</span>pids<span class="hl sym">[</span>i<span class="hl sym">],</span> NULL<span class="hl sym">,</span> run_creature<span class="hl sym">, &amp;</span>creatures<span class="hl sym">[</span>i<span class="hl sym">]);</span>

    <span class="hl kwb">unsigned long</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> NCREATURES <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&gt;=</span> <span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">--) {</span>
	<span class="hl kwb">void</span> <span class="hl sym">*</span>result_p<span class="hl sym">;</span>
	<span class="hl kwd">pthread_join</span> <span class="hl sym">(</span>pids<span class="hl sym">[</span>i<span class="hl sym">], &amp;</span>result_p<span class="hl sym">);</span>
	sum <span class="hl sym">+= *(</span><span class="hl kwb">unsigned long</span> <span class="hl sym">*)</span> result_p<span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">return</span> sum<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">) {</span>
    meetingsleft <span class="hl sym">=</span> <span class="hl num">1</span>e6<span class="hl sym">;</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">) {</span>
	<span class="hl kwb">char</span> <span class="hl sym">*</span>tail<span class="hl sym">;</span>
	meetingsleft <span class="hl sym">=</span> <span class="hl kwd">strtoul</span> <span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">], &amp;</span>tail<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
	<span class="hl kwa">if</span> <span class="hl sym">(</span>tail <span class="hl sym">==</span> argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
	    <span class="hl kwd">errx</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl str">&quot;Could not convert</span> <span class="hl esc">\&quot;</span><span class="hl str">%s</span><span class="hl esc">\&quot;</span> <span class="hl str">to an unsigned long integer&quot;</span><span class="hl sym">,</span> argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>
    <span class="hl sym">}</span>
    <span class="hl kwb">unsigned long</span> sum <span class="hl sym">=</span> <span class="hl kwd">meetings_of_creatures</span> <span class="hl sym">();</span>
    <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;%lu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> sum<span class="hl sym">);</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>
