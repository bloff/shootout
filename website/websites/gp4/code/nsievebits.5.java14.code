<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">contributed by Alkis Evlogimenos</span>
<span class="hl com">slightly modified by Pierre-Olivier Gaillard</span>
<span class="hl com">slightly modified by Klaus Friedel</span>
<span class="hl com">slightly modified by Daniel Fekete</span>
<span class="hl com">modified by Chad Whipkey -- converted to not use a class</span>
<span class="hl com">modified by Razi -- to make it work with GCJ by not using printf</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span><span class="hl kwc">Arrays</span><span class="hl sym">;</span>

<span class="hl kwa">public final class</span> nsievebits
<span class="hl sym">{</span>
    <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> mask <span class="hl sym">=</span> <span class="hl num">31</span><span class="hl sym">;</span>
    <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> shift <span class="hl sym">=</span> <span class="hl num">5</span><span class="hl sym">;</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">) {</span>
        <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span>
            n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>n <span class="hl sym">&lt;</span> <span class="hl num">2</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>

        <span class="hl kwb">int</span> m <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> n<span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">;</span>
        <span class="hl kwa">final</span> <span class="hl kwb">int</span><span class="hl sym">[]</span> bits <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[((</span>m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) &gt;&gt;</span> shift<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">];</span>
        <span class="hl kwd">primes</span><span class="hl sym">(</span>n<span class="hl sym">,</span> bits<span class="hl sym">);</span>
        <span class="hl kwd">primes</span><span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> bits<span class="hl sym">);</span>
        <span class="hl kwd">primes</span><span class="hl sym">(</span>n <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">,</span> bits<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">primes</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> <span class="hl kwb">int</span><span class="hl sym">[]</span> bits<span class="hl sym">) {</span>
        <span class="hl kwa">final</span> <span class="hl kwb">int</span> m <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> n<span class="hl sym">) *</span> <span class="hl num">10000</span><span class="hl sym">;</span>
        <span class="hl kwc">Arrays</span><span class="hl sym">.</span><span class="hl kwd">fill</span><span class="hl sym">(</span>bits<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, ((</span>m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) &gt;&gt;</span> shift<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">, -</span><span class="hl num">1</span><span class="hl sym">);</span>
        <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(((</span>bits<span class="hl sym">[</span>i <span class="hl sym">&gt;&gt;</span> shift<span class="hl sym">] &gt;&gt;&gt; (</span>i <span class="hl sym">&amp;</span> mask<span class="hl sym">)) &amp;</span> <span class="hl num">1</span><span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> i <span class="hl sym">+</span> i<span class="hl sym">;</span> j <span class="hl sym">&lt;=</span> m<span class="hl sym">;</span> j <span class="hl sym">+=</span> i<span class="hl sym">)</span>
                    bits<span class="hl sym">[</span>j <span class="hl sym">&gt;&gt;</span> shift<span class="hl sym">] &amp;=</span> ~<span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>j <span class="hl sym">&amp;</span> mask<span class="hl sym">));</span>
                count <span class="hl sym">++;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

       <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">pad</span><span class="hl sym">(</span><span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">(</span>m<span class="hl sym">),</span> <span class="hl num">8</span><span class="hl sym">,</span> <span class="hl str">' '</span><span class="hl sym">)</span>
                     <span class="hl sym">+</span>  <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">pad</span><span class="hl sym">(</span><span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">(</span>count<span class="hl sym">),</span> <span class="hl num">8</span><span class="hl sym">,</span> <span class="hl str">' '</span><span class="hl sym">));</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public static</span> <span class="hl kwc">String</span> <span class="hl kwd">pad</span><span class="hl sym">(</span><span class="hl kwc">String</span> s<span class="hl sym">,</span> <span class="hl kwb">int</span> length<span class="hl sym">,</span> <span class="hl kwb">char</span> pad<span class="hl sym">)</span>
    <span class="hl sym">{</span>
       <span class="hl kwa">if</span> <span class="hl sym">(</span>s<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() &gt;=</span> length<span class="hl sym">)</span> <span class="hl kwa">return</span> s<span class="hl sym">;</span>
       <span class="hl kwc">StringBuilder</span> buffer <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">();</span>
       <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> length <span class="hl sym">-</span> s<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span> i <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">; --</span>i<span class="hl sym">)</span> buffer<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>pad<span class="hl sym">);</span>
       buffer<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>s<span class="hl sym">);</span>
       <span class="hl kwa">return</span> buffer<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

