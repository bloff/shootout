<span class="com">(*</span>
<span class="com">   The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Anthony Borla</span>
<span class="com">*)</span>

<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
  <span class="kwa">val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>

  <span class="kwa">val</span> sub <span class="sym">=</span> Unsafe.Array.sub
  <span class="kwa">val</span> upd <span class="sym">=</span> Unsafe.Array.update

  <span class="kwa">fun</span> a <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =</span>
    <span class="num">1.0</span> <span class="sym">/</span> <span class="kwa">Real</span>.fromInt <span class="sym">((</span>i <span class="sym">+</span> j<span class="sym">) * (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> div <span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>

  <span class="kwa">fun</span> mulAv <span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> av<span class="sym">) =</span>
    <span class="kwa">let</span>
      <span class="kwa">val</span> m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span>

      <span class="kwa">fun</span> loopj <span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">) =</span>
        <span class="kwa">if</span> j <span class="sym">&gt;</span> m <span class="kwa">then</span> <span class="sym">()</span>
        <span class="kwa">else</span> <span class="sym">(</span>upd <span class="sym">(</span>av<span class="sym">,</span> i<span class="sym">, (</span>sub <span class="sym">(</span>av<span class="sym">,</span> i<span class="sym">) +</span> a <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) *</span> sub <span class="sym">(</span>v<span class="sym">,</span> j<span class="sym">)));</span> loopj <span class="sym">(</span>j <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> i<span class="sym">))</span>

      <span class="kwa">fun</span> loopi <span class="sym">(</span>i<span class="sym">) =</span>
        <span class="kwa">if</span> i <span class="sym">&gt;</span> m <span class="kwa">then</span> <span class="sym">()</span>
        <span class="kwa">else</span> <span class="sym">(</span>upd <span class="sym">(</span>av<span class="sym">,</span> i<span class="sym">,</span> <span class="num">0.0</span><span class="sym">);</span> loopj <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> i<span class="sym">);</span> loopi <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
    <span class="kwa">in</span>
      loopi <span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
    <span class="kwa">end</span>

  <span class="kwa">fun</span> mulAtv <span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> atv<span class="sym">) =</span>
    <span class="kwa">let</span>
      <span class="kwa">val</span> m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span>

      <span class="kwa">fun</span> loopj <span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">) =</span>
        <span class="kwa">if</span> j <span class="sym">&gt;</span> m <span class="kwa">then</span> <span class="sym">()</span>
        <span class="kwa">else</span> <span class="sym">(</span>upd <span class="sym">(</span>atv<span class="sym">,</span> i<span class="sym">, (</span>sub <span class="sym">(</span>atv<span class="sym">,</span> i<span class="sym">) +</span> a <span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">) *</span> sub <span class="sym">(</span>v<span class="sym">,</span> j<span class="sym">)));</span> loopj <span class="sym">(</span>j <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> i<span class="sym">))</span>

      <span class="kwa">fun</span> loopi <span class="sym">(</span>i<span class="sym">) =</span>
        <span class="kwa">if</span> i <span class="sym">&gt;</span> m <span class="kwa">then</span> <span class="sym">()</span>
        <span class="kwa">else</span> <span class="sym">(</span>upd <span class="sym">(</span>atv<span class="sym">,</span> i<span class="sym">,</span> <span class="num">0.0</span><span class="sym">);</span> loopj <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> i<span class="sym">);</span> loopi <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
    <span class="kwa">in</span>
      loopi <span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
    <span class="kwa">end</span>

  <span class="kwa">fun</span> mulAtAv <span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> atav<span class="sym">) =</span>
    <span class="kwa">let</span>
      <span class="kwa">val</span> u <span class="sym">=</span> Array.array <span class="sym">(</span>n<span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span>
    <span class="kwa">in</span>
      <span class="sym">(</span>mulAv <span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> u<span class="sym">);</span> mulAtv <span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> atav<span class="sym">))</span>
    <span class="kwa">end</span>

  <span class="kwa">fun</span> approximate <span class="sym">(</span>n<span class="sym">) =</span>
    <span class="kwa">let</span>
      <span class="kwa">val</span> m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span>

      <span class="kwa">val</span> u <span class="sym">=</span> Array.array <span class="sym">(</span>n<span class="sym">,</span> <span class="num">1.0</span><span class="sym">)</span>
      <span class="kwa">val</span> v <span class="sym">=</span> Array.array <span class="sym">(</span>n<span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span>

      <span class="kwa">fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =</span>
        <span class="kwa">if</span> i <span class="sym">&gt;</span> j <span class="kwa">then</span> <span class="sym">()</span>
        <span class="kwa">else</span> <span class="sym">(</span>mulAtAv <span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> v<span class="sym">);</span> mulAtAv <span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> u<span class="sym">);</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> j<span class="sym">))</span>

      <span class="kwa">fun</span> approximate' <span class="sym">(</span>i<span class="sym">,</span> vBv<span class="sym">,</span> vv<span class="sym">) =</span>
        <span class="kwa">if</span> i <span class="sym">&gt;</span> m <span class="kwa">then</span>
          <span class="sym">(</span>vBv<span class="sym">,</span> vv<span class="sym">)</span>
        <span class="kwa">else</span>
          approximate'
            <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span>
             vBv <span class="sym">+</span> sub <span class="sym">(</span>u<span class="sym">,</span> i<span class="sym">) *</span> sub <span class="sym">(</span>v<span class="sym">,</span> i<span class="sym">),</span>
             vv <span class="sym">+</span> sub <span class="sym">(</span>v<span class="sym">,</span> i<span class="sym">) *</span> sub <span class="sym">(</span>v<span class="sym">,</span> i<span class="sym">))</span>

      <span class="kwa">val</span> <span class="sym">(</span>vBv<span class="sym">,</span> vv<span class="sym">) = (</span>loop <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">10</span><span class="sym">);</span> approximate' <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">))</span>
    <span class="kwa">in</span>
      Math.sqrt <span class="sym">(</span>vBv <span class="sym">/</span> vv<span class="sym">)</span>
    <span class="kwa">end</span>

  <span class="kwa">fun</span> main' n <span class="sym">=</span>
    <span class="kwa">let</span>
      <span class="kwa">val</span> spectralnorm <span class="sym">=</span> approximate n

      <span class="kwa">open</span> Format
    <span class="kwa">in</span>
      formatf <span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span> print <span class="sym">[</span>REAL spectralnorm<span class="sym">];</span>

      OS.Process.success
    <span class="kwa">end</span>

  <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1</span>
    <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>

<span class="kwa">end</span>

