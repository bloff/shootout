<span class="com">/*</span>
<span class="com"> * The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Andrei Formiga</span>
<span class="com"> */</span>

<span class="kwa">object</span> recursive
<span class="sym">{</span>
  <span class="kwa">def</span> ack<span class="sym">(</span>x<span class="sym">:</span><span class="kwb">int</span><span class="sym">,</span> y<span class="sym">:</span><span class="kwb">int</span><span class="sym">):</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> y <span class="sym">+</span> <span class="num">1</span>
			       <span class="kwa">else if</span> <span class="sym">(</span>y <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ack<span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
			       <span class="kwa">else</span> ack<span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> ack<span class="sym">(</span>x<span class="sym">,</span> y <span class="sym">-</span> <span class="num">1</span><span class="sym">));</span>

  <span class="kwa">def</span> fib<span class="sym">(</span>n<span class="sym">:</span><span class="kwb">int</span><span class="sym">):</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> <span class="num">1</span> <span class="kwa">else</span> fib<span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">) +</span> fib<span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>

  <span class="kwa">def</span> fib<span class="sym">(</span>n<span class="sym">:</span><span class="kwb">double</span><span class="sym">):</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2.0</span><span class="sym">)</span> <span class="num">1.0</span> <span class="kwa">else</span> fib<span class="sym">(</span>n <span class="sym">-</span> <span class="num">2.0</span><span class="sym">) +</span> fib<span class="sym">(</span>n <span class="sym">-</span> <span class="num">1.0</span><span class="sym">);</span>

  <span class="kwa">def</span> tak<span class="sym">(</span>x<span class="sym">:</span><span class="kwb">int</span><span class="sym">,</span> y<span class="sym">:</span><span class="kwb">int</span><span class="sym">,</span> z<span class="sym">:</span><span class="kwb">int</span><span class="sym">):</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&lt;</span> x<span class="sym">)</span> tak<span class="sym">(</span>tak<span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span>
						     tak<span class="sym">(</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span>
						     tak<span class="sym">(</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">))</span>
				      <span class="kwa">else</span> z<span class="sym">;</span>

  <span class="kwa">def</span> tak<span class="sym">(</span>x<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span> y<span class="sym">:</span><span class="kwb">double</span><span class="sym">,</span> z<span class="sym">:</span><span class="kwb">double</span><span class="sym">):</span> <span class="kwb">double</span> <span class="sym">=</span>
    <span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&lt;</span> x<span class="sym">)</span>  tak<span class="sym">(</span>tak<span class="sym">(</span>x <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> tak<span class="sym">(</span>y <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> tak<span class="sym">(</span>z <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">))</span>
    <span class="kwa">else</span> z<span class="sym">;</span>

  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
    <span class="kwa">var</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">));</span>
    Console<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;): &quot;</span> <span class="sym">+</span> ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">));</span>
    Console<span class="sym">.</span>printf<span class="sym">(</span><span class="str">&quot;Fib({0,number,.#}): {1,number,.#}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)((</span><span class="num">27.0</span><span class="sym">+</span>n<span class="sym">),</span> fib<span class="sym">(</span><span class="num">27.0</span><span class="sym">+</span>n<span class="sym">));</span>
    n <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
    Console<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Tak(&quot;</span> <span class="sym">+ (</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">) +</span> <span class="str">&quot;,&quot;</span> <span class="sym">+ (</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">) +</span> <span class="str">&quot;,&quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;): &quot;</span> <span class="sym">+</span> tak<span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span> n<span class="sym">));</span>
    Console<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Fib(3): &quot;</span> <span class="sym">+</span> fib<span class="sym">(</span><span class="num">3</span><span class="sym">));</span>
    Console<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Tak(3.0,2.0,1.0): &quot;</span> <span class="sym">+</span> tak<span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span><span class="num">2.0</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">));</span>
  <span class="sym">}</span>
<span class="sym">}</span>
