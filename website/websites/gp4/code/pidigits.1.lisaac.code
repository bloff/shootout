<span class="hl com">/* The Computer Language Shootout Benchmarks</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Benoit Sonntag</span>
<span class="hl com">*/</span>

<span class="hl slc">// SPLITFILE=pidigits.li</span>
Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> PIDIGITS<span class="hl sym">;</span>

Section Public

  <span class="hl sym">-</span> main <span class="hl sym">&lt;-</span>
  <span class="hl sym">( +</span> n<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

    <span class="hl sym">(</span>COMMAND_LINE.count <span class="hl sym">&gt;</span> <span class="hl num">1</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
      n <span class="hl sym">:=</span> COMMAND_LINE.item <span class="hl num">1</span>.to_integer<span class="hl sym">;</span>
    <span class="hl sym">}</span> else <span class="hl sym">{</span>
      n <span class="hl sym">:=</span> <span class="hl num">27</span><span class="hl sym">;</span>
    <span class="hl sym">};</span>
    CTX.pidigits n<span class="hl sym">;</span>
  <span class="hl sym">);</span>
<span class="hl slc">// class PIDIGITS</span>

<span class="hl slc">// SPLITFILE=ctx.li</span>
Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> CTX<span class="hl sym">;</span>

  <span class="hl sym">-</span> external <span class="hl sym">:=</span> `#include <span class="hl sym">&lt;</span>gmp.h<span class="hl sym">&gt;</span>`<span class="hl sym">;</span>

Section Private

  <span class="hl slc">// Transformation matrix components.</span>
  <span class="hl sym">-</span> q<span class="hl sym">:</span>MPZ <span class="hl sym">:= (</span> `<span class="hl sym">((</span><span class="hl com">/*`; `n`:MPZ); // */</span>
  <span class="hl sym">-</span> r<span class="hl sym">:</span>MPZ<span class="hl sym">;</span>
  <span class="hl sym">-</span> s<span class="hl sym">:</span>MPZ<span class="hl sym">;</span>
  <span class="hl sym">-</span> t<span class="hl sym">:</span>MPZ<span class="hl sym">;</span>

  <span class="hl slc">// Temporary numbers.</span>
  <span class="hl sym">-</span> u<span class="hl sym">:</span>MPZ<span class="hl sym">;</span>
  <span class="hl sym">-</span> v<span class="hl sym">:</span>MPZ<span class="hl sym">;</span>
  <span class="hl sym">-</span> w<span class="hl sym">:</span>MPZ <span class="hl sym">:= (</span> `*/NULL`<span class="hl sym">:</span>MPZ<span class="hl sym">);</span>

  <span class="hl slc">// Counters.</span>
  <span class="hl sym">-</span> d<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
  <span class="hl sym">-</span> i<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
  <span class="hl sym">-</span> n<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

  <span class="hl slc">// Accumulated digits for one line.</span>
  <span class="hl sym">-</span> digits<span class="hl sym">:</span>STRING<span class="hl sym">;</span>

Section Private

  <span class="hl sym">-</span> compose_r <span class="hl sym">(</span>bq<span class="hl sym">,</span>br<span class="hl sym">,</span>bs<span class="hl sym">,</span>bt<span class="hl sym">:</span>INTEGER<span class="hl sym">) &lt;-</span>
  <span class="hl slc">// Compose matrix with numbers on the right.</span>
  <span class="hl sym">(</span>
    mul_si <span class="hl sym">(</span>u<span class="hl sym">,</span>r<span class="hl sym">,</span>bs<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>r<span class="hl sym">,</span>r<span class="hl sym">,</span>bq<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>v<span class="hl sym">,</span>t<span class="hl sym">,</span>br<span class="hl sym">);</span>
    add    <span class="hl sym">(</span>r<span class="hl sym">,</span>r<span class="hl sym">,</span>v<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>t<span class="hl sym">,</span>t<span class="hl sym">,</span>bt<span class="hl sym">);</span>
    add    <span class="hl sym">(</span>t<span class="hl sym">,</span>t<span class="hl sym">,</span>u<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>s<span class="hl sym">,</span>s<span class="hl sym">,</span>bt<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>u<span class="hl sym">,</span>q<span class="hl sym">,</span>bs<span class="hl sym">);</span>
    add    <span class="hl sym">(</span>s<span class="hl sym">,</span>s<span class="hl sym">,</span>u<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>q<span class="hl sym">,</span>q<span class="hl sym">,</span>bq<span class="hl sym">);</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> compose_l <span class="hl sym">(</span>bq<span class="hl sym">,</span>br<span class="hl sym">,</span>bs<span class="hl sym">,</span>bt<span class="hl sym">:</span>INTEGER<span class="hl sym">) &lt;-</span>
  <span class="hl slc">// Compose matrix with numbers on the left.</span>
  <span class="hl sym">(</span>
    mul_si <span class="hl sym">(</span>r<span class="hl sym">,</span>r<span class="hl sym">,</span>bt<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>u<span class="hl sym">,</span>q<span class="hl sym">,</span>br<span class="hl sym">);</span>
    add    <span class="hl sym">(</span>r<span class="hl sym">,</span>r<span class="hl sym">,</span>u<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>u<span class="hl sym">,</span>t<span class="hl sym">,</span>bs<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>t<span class="hl sym">,</span>t<span class="hl sym">,</span>bt<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>v<span class="hl sym">,</span>s<span class="hl sym">,</span>br<span class="hl sym">);</span>
    add    <span class="hl sym">(</span>t<span class="hl sym">,</span>t<span class="hl sym">,</span>v<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>s<span class="hl sym">,</span>s<span class="hl sym">,</span>bq<span class="hl sym">);</span>
    add    <span class="hl sym">(</span>s<span class="hl sym">,</span>s<span class="hl sym">,</span>u<span class="hl sym">);</span>
    mul_si <span class="hl sym">(</span>q<span class="hl sym">,</span>q<span class="hl sym">,</span>bq<span class="hl sym">);</span>
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> extract j<span class="hl sym">:</span>UINTEGER_32 <span class="hl sym">:</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl slc">// Extract one digit.</span>
  <span class="hl sym">(</span>
    mul_ui <span class="hl sym">(</span>u<span class="hl sym">,</span>q<span class="hl sym">,</span>j<span class="hl sym">);</span>
    add    <span class="hl sym">(</span>u<span class="hl sym">,</span>u<span class="hl sym">,</span>r<span class="hl sym">);</span>
    mul_ui <span class="hl sym">(</span>v<span class="hl sym">,</span>s<span class="hl sym">,</span>j<span class="hl sym">);</span>
    add    <span class="hl sym">(</span>v<span class="hl sym">,</span>v<span class="hl sym">,</span>t<span class="hl sym">);</span>
    tdiv_q <span class="hl sym">(</span>w<span class="hl sym">,</span>u<span class="hl sym">,</span>v<span class="hl sym">);</span>
    get_ui w
  <span class="hl sym">);</span>

  <span class="hl sym">-</span> prdigit y<span class="hl sym">:</span>INTEGER <span class="hl sym">:</span>BOOLEAN <span class="hl sym">&lt;-</span>
  <span class="hl slc">// Print one digit. Returns TRUE for the last digit.</span>
  <span class="hl sym">(</span>
    digits.add_last <span class="hl sym">(</span>y.decimal_digit<span class="hl sym">);</span>
    i <span class="hl sym">:=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl sym">((</span>digits.count <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">) || {</span>i <span class="hl sym">=</span> n<span class="hl sym">})</span>.if <span class="hl sym">{</span>
      digits.add_last <span class="hl str">'\t'</span><span class="hl sym">;</span>
      digits.add_last <span class="hl str">':'</span><span class="hl sym">;</span>
      i.append_in digits<span class="hl sym">;</span>
      digits.add_last <span class="hl str">'\n'</span><span class="hl sym">;</span>
      digits.print<span class="hl sym">;</span>
      digits.clear<span class="hl sym">;</span>
    <span class="hl sym">};</span>
    i <span class="hl sym">=</span> n
  <span class="hl sym">);</span>

Section Public

  <span class="hl sym">-</span> pidigits nb<span class="hl sym">:</span>INTEGER <span class="hl sym">&lt;-</span>
  <span class="hl slc">// Generate successive digits of PI.</span>
  <span class="hl sym">( +</span> k<span class="hl sym">,</span>y<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>
    <span class="hl sym">+</span> stop<span class="hl sym">:</span>BOOLEAN<span class="hl sym">;</span>
    k <span class="hl sym">:=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    n <span class="hl sym">:=</span> nb<span class="hl sym">;</span>
    d <span class="hl sym">:=</span> i<span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    digits <span class="hl sym">:=</span> STRING.create <span class="hl num">20</span><span class="hl sym">;</span>
    init_set_ui <span class="hl sym">(</span>q<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">);</span>
    init_set_ui <span class="hl sym">(</span>r<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">);</span>
    init_set_ui <span class="hl sym">(</span>s<span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">);</span>
    init_set_ui <span class="hl sym">(</span>t<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">);</span>
    init u<span class="hl sym">;</span>
    init v<span class="hl sym">;</span>
    init w<span class="hl sym">;</span>
    <span class="hl sym">{</span>
      y <span class="hl sym">:=</span> extract <span class="hl num">3</span><span class="hl sym">;</span>
      <span class="hl sym">(</span>y <span class="hl sym">=</span> extract <span class="hl num">4</span><span class="hl sym">)</span>.if <span class="hl sym">{</span>
        <span class="hl sym">(</span>prdigit y<span class="hl sym">)</span>.if <span class="hl sym">{</span>
          stop <span class="hl sym">:=</span> TRUE<span class="hl sym">;</span>
        <span class="hl sym">}</span> else <span class="hl sym">{</span>
          compose_r <span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">, -</span><span class="hl num">10</span><span class="hl sym">*</span>y<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
        <span class="hl sym">};</span>
      <span class="hl sym">}</span> else <span class="hl sym">{</span>
        compose_l <span class="hl sym">(</span>k<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
        k <span class="hl sym">:=</span> k <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      <span class="hl sym">};</span>
    <span class="hl sym">}</span>.do_while <span class="hl sym">{!</span> stop<span class="hl sym">};</span>
  <span class="hl sym">);</span>

Section Private

  <span class="hl slc">//</span>
  <span class="hl slc">// External mapping.</span>
  <span class="hl slc">//</span>

  <span class="hl sym">-</span> init vu<span class="hl sym">:</span>MPZ <span class="hl sym">&lt;-</span> `mpz_init<span class="hl sym">(</span>&#64;vu<span class="hl sym">)</span>`<span class="hl sym">;</span>

  <span class="hl sym">-</span> init_set_ui <span class="hl sym">(</span>vq<span class="hl sym">:</span>MPZ<span class="hl sym">,</span>vi<span class="hl sym">:</span>INTEGER<span class="hl sym">) &lt;-</span> `mpz_init_set_ui<span class="hl sym">(</span>&#64;vq<span class="hl sym">,</span> &#64;vi<span class="hl sym">)</span>`<span class="hl sym">;</span>

  <span class="hl sym">-</span> mul_si <span class="hl sym">(</span>vu<span class="hl sym">,</span>vr<span class="hl sym">:</span>MPZ<span class="hl sym">,</span>vs<span class="hl sym">:</span>INTEGER<span class="hl sym">) &lt;-</span> `mpz_mul_si<span class="hl sym">(</span>&#64;vu<span class="hl sym">,</span>&#64;vr<span class="hl sym">,</span>&#64;vs<span class="hl sym">)</span>`<span class="hl sym">;</span>

  <span class="hl sym">-</span> mul_ui <span class="hl sym">(</span>vu<span class="hl sym">,</span>vq<span class="hl sym">:</span>MPZ<span class="hl sym">,</span>vj<span class="hl sym">:</span>INTEGER<span class="hl sym">) &lt;-</span> `mpz_mul_ui<span class="hl sym">(</span>&#64;vu<span class="hl sym">,</span>&#64;vq<span class="hl sym">,</span> &#64;vj<span class="hl sym">)</span>`<span class="hl sym">;</span>

  <span class="hl sym">-</span> tdiv_q <span class="hl sym">(</span>vw<span class="hl sym">,</span>vu<span class="hl sym">,</span>vv<span class="hl sym">:</span>MPZ<span class="hl sym">) &lt;-</span> `mpz_tdiv_q<span class="hl sym">(</span>&#64;vw<span class="hl sym">,</span>&#64;vu<span class="hl sym">,</span>&#64;vv<span class="hl sym">)</span>`<span class="hl sym">;</span>

  <span class="hl sym">-</span> add <span class="hl sym">(</span>a<span class="hl sym">,</span>b<span class="hl sym">:</span>MPZ<span class="hl sym">,</span>res<span class="hl sym">:</span>MPZ<span class="hl sym">) &lt;-</span> `mpz_add<span class="hl sym">(</span>&#64;a<span class="hl sym">,</span>&#64;b<span class="hl sym">,</span>&#64;res<span class="hl sym">)</span>`<span class="hl sym">;</span>

  <span class="hl sym">-</span> get_ui vw<span class="hl sym">:</span>MPZ <span class="hl sym">:</span>INTEGER <span class="hl sym">&lt;-</span> `mpz_get_ui<span class="hl sym">(</span>&#64;vw<span class="hl sym">)</span>`<span class="hl sym">:</span>INTEGER<span class="hl sym">;</span>

<span class="hl slc">// class CTX</span>

<span class="hl slc">// SPLITFILE=mpz.li</span>
Section Header

  <span class="hl sym">+</span> name <span class="hl sym">:=</span> Expanded MPZ<span class="hl sym">;</span>

  <span class="hl sym">-</span> type <span class="hl sym">:=</span> `mpz_t`<span class="hl sym">;</span>

  <span class="hl sym">-</span> default <span class="hl sym">:=</span> `n`<span class="hl sym">:</span>MPZ<span class="hl sym">;</span>
<span class="hl slc">// class MPZ</span>
