<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="slc">// Most for-comprehension replaced by while loops</span>



<span class="kwa">import</span> scala<span class="sym">.</span>collection<span class="sym">.</span>mutable<span class="sym">.</span>_

<span class="kwa">object</span> meteor <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> solver <span class="sym">=</span> <span class="kwa">new</span> Solver<span class="sym">(</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">)) )</span>
      solver<span class="sym">.</span>findSolutions
      solver<span class="sym">.</span>printSolutions
   <span class="sym">}</span>
<span class="sym">}</span>




<span class="slc">// Solver.scala</span>
<span class="slc">// import scala.collection.mutable._</span>

<span class="kwa">final class</span> Solver <span class="sym">(</span>n<span class="sym">:</span> Int<span class="sym">) {</span>
   <span class="kwa">private var</span> countdown <span class="sym">=</span> n
   <span class="kwa">private var</span> first<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> _
   <span class="kwa">private var</span> last<span class="sym">:</span> <span class="kwc">String</span> <span class="sym">=</span> _

   <span class="kwa">private val</span> board <span class="sym">=</span> <span class="kwa">new</span> Board<span class="sym">()</span>

   <span class="kwa">val</span> pieces <span class="sym">=</span> <span class="kwc">Array</span><span class="sym">(</span>
      <span class="kwa">new</span> Piece<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> <span class="kwa">new</span> Piece<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> <span class="kwa">new</span> Piece<span class="sym">(</span><span class="num">2</span><span class="sym">),</span> <span class="kwa">new</span> Piece<span class="sym">(</span><span class="num">3</span><span class="sym">),</span> <span class="kwa">new</span> Piece<span class="sym">(</span><span class="num">4</span><span class="sym">),</span>
      <span class="kwa">new</span> Piece<span class="sym">(</span><span class="num">5</span><span class="sym">),</span> <span class="kwa">new</span> Piece<span class="sym">(</span><span class="num">6</span><span class="sym">),</span> <span class="kwa">new</span> Piece<span class="sym">(</span><span class="num">7</span><span class="sym">),</span> <span class="kwa">new</span> Piece<span class="sym">(</span><span class="num">8</span><span class="sym">),</span> <span class="kwa">new</span> Piece<span class="sym">(</span><span class="num">9</span><span class="sym">) )</span>

   <span class="kwa">val</span> unplaced <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BitSet</span><span class="sym">(</span>pieces<span class="sym">.</span>length<span class="sym">)</span>
   <span class="sym">{</span> unplaced <span class="sym">++=</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>unplaced<span class="sym">.</span>capacity<span class="sym">) }</span>


   <span class="kwa">def</span> findSolutions<span class="sym">():</span> Unit <span class="sym">= {</span>
      <span class="kwa">if</span> <span class="sym">(</span>countdown <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span>

      <span class="kwa">if</span> <span class="sym">(</span>unplaced<span class="sym">.</span>size <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
         <span class="kwa">val</span> emptyCellIndex <span class="sym">=</span> board<span class="sym">.</span>firstEmptyCellIndex

         <span class="kwa">var</span> k <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>k <span class="sym">&lt;</span> pieces<span class="sym">.</span>length<span class="sym">){</span>
            <span class="kwa">if</span> <span class="sym">(</span>unplaced<span class="sym">.</span>contains<span class="sym">(</span>k<span class="sym">)){</span>
               unplaced <span class="sym">-=</span> k

               <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
               <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> Piece<span class="sym">.</span>orientations<span class="sym">){</span>
                  <span class="kwa">val</span> piece <span class="sym">=</span> pieces<span class="sym">(</span>k<span class="sym">).</span>nextOrientation

                  <span class="kwa">var</span> j <span class="sym">=</span> <span class="num">0</span>
                  <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;</span> Piece<span class="sym">.</span>size<span class="sym">){</span>
                     <span class="kwa">if</span> <span class="sym">(</span>board<span class="sym">.</span>add<span class="sym">(</span>j<span class="sym">,</span>emptyCellIndex<span class="sym">,</span>piece<span class="sym">)) {</span>

                        <span class="kwa">if</span> <span class="sym">(!</span>shouldPrune<span class="sym">)</span> findSolutions

                        board<span class="sym">.</span>remove<span class="sym">(</span>piece<span class="sym">)</span>
                     <span class="sym">}</span>
                     j <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span>
                  <span class="sym">}</span>
                  i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
               <span class="sym">}</span>
               unplaced <span class="sym">+=</span> k
            <span class="sym">}</span>
            k <span class="sym">=</span> k <span class="sym">+</span> <span class="num">1</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      <span class="kwa">else</span> <span class="sym">{</span>
         puzzleSolved
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> puzzleSolved<span class="sym">() = {</span>
      <span class="kwa">val</span> b <span class="sym">=</span> board<span class="sym">.</span>asString
      <span class="kwa">if</span> <span class="sym">(</span>first <span class="sym">==</span> null<span class="sym">){</span>
         first <span class="sym">=</span> b<span class="sym">;</span> last <span class="sym">=</span> b
      <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
         <span class="kwa">if</span> <span class="sym">(</span>b <span class="sym">&lt;</span> first<span class="sym">){</span> first <span class="sym">=</span> b <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span> <span class="kwa">if</span> <span class="sym">(</span>b <span class="sym">&gt;</span> last<span class="sym">){</span> last <span class="sym">=</span> b <span class="sym">} }</span>
      <span class="sym">}</span>
      countdown <span class="sym">=</span> countdown <span class="sym">-</span> <span class="num">1</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> shouldPrune<span class="sym">():</span> <span class="kwc">Boolean</span> <span class="sym">= {</span>
      board<span class="sym">.</span>unmark
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> board<span class="sym">.</span>cells<span class="sym">.</span>length<span class="sym">){</span>
         <span class="kwa">if</span> <span class="sym">(</span>board<span class="sym">.</span>cells<span class="sym">(</span>i<span class="sym">).</span>contiguousEmptyCells <span class="sym">%</span> Piece<span class="sym">.</span>size <span class="sym">!=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> true
         i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>
      false
   <span class="sym">}</span>


   <span class="kwa">def</span> printSolutions<span class="sym">() = {</span>

      <span class="kwa">def</span> printBoard<span class="sym">(</span>s<span class="sym">:</span> <span class="kwc">String</span><span class="sym">) = {</span>
         <span class="kwa">var</span> indent <span class="sym">=</span> false
         <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> s<span class="sym">.</span>length<span class="sym">){</span>
            <span class="kwa">if</span> <span class="sym">(</span>indent<span class="sym">)</span> Console<span class="sym">.</span>print<span class="sym">(</span><span class="str">' '</span><span class="sym">)</span>
            <span class="kwa">var</span> j <span class="sym">=</span> <span class="num">0</span>
            <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;</span> Board<span class="sym">.</span>cols<span class="sym">){</span>
               Console<span class="sym">.</span>print<span class="sym">(</span>s<span class="sym">.</span>charAt<span class="sym">(</span>i<span class="sym">));</span> Console<span class="sym">.</span>print<span class="sym">(</span><span class="str">' '</span><span class="sym">)</span>
               j <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span>
               i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
            <span class="sym">}</span>
            Console<span class="sym">.</span>print<span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span>
            indent <span class="sym">= !</span>indent
         <span class="sym">}</span>
         Console<span class="sym">.</span>print<span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span>
      <span class="sym">}</span>

      Console<span class="sym">.</span>print<span class="sym">(</span>n <span class="sym">+</span> <span class="str">&quot; solutions found</span><span class="esc">\n\n</span><span class="str">&quot;</span><span class="sym">)</span>
      printBoard<span class="sym">(</span>first<span class="sym">)</span>
      printBoard<span class="sym">(</span>last<span class="sym">)</span>
   <span class="sym">}</span>

<span class="sym">}</span>





<span class="slc">// Board.scala</span>
<span class="slc">// import scala.collection.mutable._</span>

<span class="kwa">object</span> Board <span class="sym">{</span>
   <span class="kwa">val</span> cols <span class="sym">=</span> <span class="num">5</span>
   <span class="kwa">val</span> rows <span class="sym">=</span> <span class="num">10</span>
   <span class="kwa">val</span> size <span class="sym">=</span> rows <span class="sym">*</span> cols
<span class="sym">}</span>

<span class="kwa">final class</span> Board <span class="sym">{</span>
   <span class="kwa">val</span> cells <span class="sym">=</span> boardCells<span class="sym">()</span>

   <span class="kwa">val</span> cellsPieceWillFill <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span>BoardCell<span class="sym">](</span>Piece<span class="sym">.</span>size<span class="sym">)</span>
   <span class="kwa">var</span> cellCount <span class="sym">=</span> <span class="num">0</span>

   <span class="kwa">def</span> unmark<span class="sym">() = {</span>
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> cells<span class="sym">.</span>length<span class="sym">){</span>
         cells<span class="sym">(</span>i<span class="sym">).</span>unmark
         i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> asString<span class="sym">() =</span>
      <span class="kwa">new</span> <span class="kwc">String</span><span class="sym">(</span> cells map<span class="sym">(</span>
         c <span class="sym">=&gt;</span> <span class="kwa">if</span> <span class="sym">(</span>c<span class="sym">.</span>piece <span class="sym">==</span> null<span class="sym">)</span> <span class="str">'-'</span><span class="sym">.</span>toByte
              <span class="kwa">else</span> <span class="sym">(</span>c<span class="sym">.</span>piece<span class="sym">.</span>number <span class="sym">+</span> <span class="num">48</span><span class="sym">).</span>toByte <span class="sym">))</span>

   <span class="kwa">def</span> firstEmptyCellIndex<span class="sym">() =</span> cells<span class="sym">.</span>findIndexOf<span class="sym">(</span>c <span class="sym">=&gt;</span> c<span class="sym">.</span>isEmpty<span class="sym">)</span>


   <span class="kwa">def</span> add<span class="sym">(</span>pieceIndex<span class="sym">:</span> Int<span class="sym">,</span> boardIndex<span class="sym">:</span> Int<span class="sym">,</span> p<span class="sym">:</span> Piece<span class="sym">):</span> <span class="kwc">Boolean</span> <span class="sym">= {</span>
      cellCount <span class="sym">=</span> <span class="num">0</span>
      p<span class="sym">.</span>unmark

      find<span class="sym">(</span>p<span class="sym">.</span>cells<span class="sym">(</span>pieceIndex<span class="sym">),</span> cells<span class="sym">(</span>boardIndex<span class="sym">))</span>

      <span class="kwa">if</span> <span class="sym">(</span>cellCount <span class="sym">!=</span> Piece<span class="sym">.</span>size<span class="sym">)</span> <span class="kwa">return</span> false

      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> cellCount<span class="sym">){</span>
         <span class="kwa">if</span> <span class="sym">(!</span>cellsPieceWillFill<span class="sym">(</span>i<span class="sym">).</span>isEmpty<span class="sym">)</span> <span class="kwa">return</span> false
         i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>

      i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> cellCount<span class="sym">){</span>
         cellsPieceWillFill<span class="sym">(</span>i<span class="sym">).</span>piece  <span class="sym">=</span> p
         i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>

      true
   <span class="sym">}</span>

   <span class="kwa">def</span> remove<span class="sym">(</span>piece<span class="sym">:</span> Piece<span class="sym">) = {</span>
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> cells<span class="sym">.</span>length<span class="sym">){</span>
         <span class="kwa">if</span> <span class="sym">(</span>cells<span class="sym">(</span>i<span class="sym">).</span>piece <span class="sym">==</span> piece<span class="sym">)</span> cells<span class="sym">(</span>i<span class="sym">).</span>empty
         i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> find<span class="sym">(</span>p<span class="sym">:</span> PieceCell<span class="sym">,</span> b<span class="sym">:</span> BoardCell<span class="sym">):</span> Unit <span class="sym">= {</span>
      <span class="kwa">if</span> <span class="sym">(</span>p <span class="sym">!=</span> null <span class="sym">&amp;&amp; !</span>p<span class="sym">.</span>marked <span class="sym">&amp;&amp;</span> b <span class="sym">!=</span> null<span class="sym">){</span>
         cellsPieceWillFill<span class="sym">(</span>cellCount<span class="sym">) =</span> b
         cellCount <span class="sym">=</span> cellCount <span class="sym">+</span> <span class="num">1</span>
         p<span class="sym">.</span>mark

         <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> Cell<span class="sym">.</span>sides<span class="sym">){</span>
            find<span class="sym">(</span>p<span class="sym">.</span>next<span class="sym">(</span>i<span class="sym">),</span> b<span class="sym">.</span>next<span class="sym">(</span>i<span class="sym">))</span>
            i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwa">private def</span> boardCells<span class="sym">() = {</span>
      <span class="kwa">type</span> Row <span class="sym">=</span> <span class="kwc">List</span><span class="sym">[</span>BoardCell<span class="sym">]</span>
      <span class="kwa">type</span> Edges <span class="sym">=</span> <span class="kwc">List</span><span class="sym">[</span>Pair<span class="sym">[</span>BoardCell<span class="sym">,</span>BoardCell<span class="sym">]]</span>

      <span class="kwa">val</span> cols <span class="sym">=</span> Board<span class="sym">.</span>cols

      <span class="kwa">def</span> rowAsEdges<span class="sym">(</span>row<span class="sym">:</span> Row<span class="sym">,</span> indent<span class="sym">:</span> <span class="kwc">Boolean</span><span class="sym">) = {</span>
         <span class="kwa">val</span> e <span class="sym">=</span> row<span class="sym">.</span>take<span class="sym">(</span>cols<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> zip<span class="sym">(</span> row<span class="sym">.</span>drop<span class="sym">(</span><span class="num">1</span><span class="sym">) )</span>
         <span class="kwa">if</span> <span class="sym">(</span>indent<span class="sym">)</span>
            Pair<span class="sym">(</span>null<span class="sym">,</span> e<span class="sym">.</span>head<span class="sym">.</span>_1<span class="sym">) ::</span> e
         <span class="kwa">else</span>
            e <span class="sym">:::</span> <span class="kwc">List</span><span class="sym">(</span> Pair<span class="sym">(</span>e<span class="sym">.</span>last<span class="sym">.</span>_2<span class="sym">,</span> null<span class="sym">) )</span>
      <span class="sym">}</span>

      <span class="kwa">def</span> joinEdgesNS<span class="sym">(</span>prev<span class="sym">:</span> Edges<span class="sym">,</span> row<span class="sym">:</span> Edges<span class="sym">,</span> indent<span class="sym">:</span> <span class="kwc">Boolean</span><span class="sym">) =</span>
         <span class="sym">(</span>prev zip row<span class="sym">).</span>foreach<span class="sym">(</span>
            pair <span class="sym">=&gt;</span> pair match <span class="sym">{</span>
               <span class="kwa">case</span> Pair<span class="sym">(</span>Pair<span class="sym">(</span>a1<span class="sym">,</span>a2<span class="sym">),</span>Pair<span class="sym">(</span>b1<span class="sym">,</span>b2<span class="sym">)) =&gt;</span>
                  <span class="kwa">if</span> <span class="sym">(</span>indent<span class="sym">){</span>
                     b2<span class="sym">.</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> a1
                     b2<span class="sym">.</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> a2
                     a1<span class="sym">.</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> b2
                     <span class="kwa">if</span> <span class="sym">(</span>a2 <span class="sym">!=</span> null<span class="sym">)</span> a2<span class="sym">.</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> b2
                  <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                     b1<span class="sym">.</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> a1
                     b1<span class="sym">.</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> a2
                     a2<span class="sym">.</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> b1
                     <span class="kwa">if</span> <span class="sym">(</span>a1 <span class="sym">!=</span> null<span class="sym">)</span> a1<span class="sym">.</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> b1
                  <span class="sym">}</span>
            <span class="sym">} )</span>

      <span class="kwa">def</span> joinEdgesWE<span class="sym">(</span>row<span class="sym">:</span> Edges<span class="sym">) =</span>
         row<span class="sym">.</span>foreach<span class="sym">(</span>
            pair <span class="sym">=&gt;</span> pair match <span class="sym">{</span>
               <span class="kwa">case</span> Pair<span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) =&gt; {</span>
                  <span class="kwa">if</span> <span class="sym">(</span>a <span class="sym">!=</span> null<span class="sym">)</span> a<span class="sym">.</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> b
                  <span class="kwa">if</span> <span class="sym">(</span>b <span class="sym">!=</span> null<span class="sym">)</span> b<span class="sym">.</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> a
               <span class="sym">}</span>
            <span class="sym">} )</span>

      <span class="kwa">def</span> makeBoardFromCellRows<span class="sym">(</span>prev<span class="sym">:</span> Edges<span class="sym">,</span> rows<span class="sym">:</span> <span class="kwc">List</span><span class="sym">[</span>Row<span class="sym">],</span> indent<span class="sym">:</span> <span class="kwc">Boolean</span><span class="sym">):</span> Unit <span class="sym">=</span>
         rows match <span class="sym">{</span>
            <span class="kwa">case</span> Nil <span class="sym">=&gt; {}</span>
            <span class="kwa">case</span> r <span class="sym">::</span> rs <span class="sym">=&gt; {</span>
               <span class="kwa">val</span> current <span class="sym">=</span> rowAsEdges<span class="sym">(</span>r<span class="sym">,</span>indent<span class="sym">)</span>
               <span class="kwa">if</span> <span class="sym">(</span>prev <span class="sym">!=</span> Nil<span class="sym">)</span> joinEdgesNS<span class="sym">(</span>prev<span class="sym">,</span>current<span class="sym">,</span>indent<span class="sym">)</span>
               joinEdgesWE<span class="sym">(</span>current<span class="sym">)</span>
               makeBoardFromCellRows<span class="sym">(</span>current<span class="sym">,</span>rs<span class="sym">,!</span>indent<span class="sym">)</span>
            <span class="sym">}</span>
         <span class="sym">}</span>

      <span class="slc">// a temporary list of lists of BoardCell representing the board</span>
      <span class="kwa">val</span> rows <span class="sym">=</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i<span class="sym">&lt;-</span> <span class="kwc">List</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>Board<span class="sym">.</span>rows<span class="sym">))</span>
            <span class="kwa">yield</span>
               <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> j <span class="sym">&lt;-</span> <span class="kwc">List</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>cols<span class="sym">))</span> <span class="kwa">yield new</span> BoardCell<span class="sym">(</span>i<span class="sym">*</span>cols <span class="sym">+</span> j<span class="sym">)</span>

      makeBoardFromCellRows<span class="sym">(</span>Nil<span class="sym">,</span>rows<span class="sym">,</span>false<span class="sym">)</span>

      <span class="kwc">List</span><span class="sym">.</span>flatten<span class="sym">(</span>rows<span class="sym">).</span>toArray
   <span class="sym">}</span>


<span class="com">/*</span>
<span class="com">// Printing all the board cells and their neighbours</span>
<span class="com">// helps check that they are connected properly</span>
<span class="com"></span>
<span class="com">   def printBoardCellsAndNeighbours() = {</span>
<span class="com">      Console.println(&quot;cell\tNW NE W  E  SW SE&quot;)</span>
<span class="com">      for (val i &lt;- Iterator.range(0,Board.size)){</span>
<span class="com">         Console.print(i + &quot;\t&quot;)</span>
<span class="com">         for (val j &lt;- Iterator.range(0,Cell.sides)){</span>
<span class="com">            val c = cells(i).next(j)</span>
<span class="com">            if (c == null)</span>
<span class="com">               Console.print(&quot;-- &quot;)</span>
<span class="com">            else</span>
<span class="com">               Console.printf(&quot;{0,number,00} &quot;)(c.number)</span>
<span class="com">         }</span>
<span class="com">         Console.println(&quot;&quot;)</span>
<span class="com">      }</span>
<span class="com">      Console.println(&quot;&quot;)</span>
<span class="com">   }</span>
<span class="com">*/</span>

<span class="sym">}</span>




<span class="slc">// Piece.scala</span>

<span class="kwa">object</span> Piece <span class="sym">{</span>
   <span class="kwa">val</span> size <span class="sym">=</span> <span class="num">5</span>
   <span class="kwa">val</span> rotations <span class="sym">=</span> Cell<span class="sym">.</span>sides
   <span class="kwa">val</span> flips <span class="sym">=</span> <span class="num">2</span>
   <span class="kwa">val</span> orientations <span class="sym">=</span> rotations <span class="sym">*</span> flips
<span class="sym">}</span>

<span class="kwa">final class</span> Piece<span class="sym">(</span>_number<span class="sym">:</span> Int<span class="sym">) {</span>
   <span class="kwa">val</span> number <span class="sym">=</span> _number
   <span class="kwa">val</span> cells <span class="sym">=</span> <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Array</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>Piece<span class="sym">.</span>size<span class="sym">))</span> <span class="kwa">yield new</span> PieceCell<span class="sym">()</span>

   <span class="sym">{</span>
      number match <span class="sym">{</span>
         <span class="kwa">case</span> <span class="num">0</span> <span class="sym">=&gt;</span> make0
         <span class="kwa">case</span> <span class="num">1</span> <span class="sym">=&gt;</span> make1
         <span class="kwa">case</span> <span class="num">2</span> <span class="sym">=&gt;</span> make2
         <span class="kwa">case</span> <span class="num">3</span> <span class="sym">=&gt;</span> make3
         <span class="kwa">case</span> <span class="num">4</span> <span class="sym">=&gt;</span> make4
         <span class="kwa">case</span> <span class="num">5</span> <span class="sym">=&gt;</span> make5
         <span class="kwa">case</span> <span class="num">6</span> <span class="sym">=&gt;</span> make6
         <span class="kwa">case</span> <span class="num">7</span> <span class="sym">=&gt;</span> make7
         <span class="kwa">case</span> <span class="num">8</span> <span class="sym">=&gt;</span> make8
         <span class="kwa">case</span> <span class="num">9</span> <span class="sym">=&gt;</span> make9
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> flip<span class="sym">() = {</span>
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> cells<span class="sym">.</span>length<span class="sym">){</span>
         cells<span class="sym">(</span>i<span class="sym">).</span>flip
         i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> rotate<span class="sym">() = {</span>
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> cells<span class="sym">.</span>length<span class="sym">){</span>
         cells<span class="sym">(</span>i<span class="sym">).</span>rotate
         i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> unmark<span class="sym">() = {</span>
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> cells<span class="sym">.</span>length<span class="sym">){</span>
         cells<span class="sym">(</span>i<span class="sym">).</span>unmark
         i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwa">private var</span> orientation <span class="sym">=</span> <span class="num">0</span>

   <span class="kwa">def</span> nextOrientation<span class="sym">() = {</span>
      <span class="kwa">if</span> <span class="sym">(</span>orientation <span class="sym">==</span> Piece<span class="sym">.</span>orientations<span class="sym">)</span> orientation <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">if</span> <span class="sym">(</span>orientation <span class="sym">%</span> Piece<span class="sym">.</span>rotations <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> flip <span class="kwa">else</span> rotate
      orientation <span class="sym">=</span> orientation <span class="sym">+</span> <span class="num">1</span>
      <span class="kwa">this</span>
   <span class="sym">}</span>


   <span class="kwa">private def</span> make0<span class="sym">() = {</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> make1<span class="sym">() = {</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> make2<span class="sym">() = {</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> make3<span class="sym">() = {</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> make4<span class="sym">() = {</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> make5<span class="sym">() = {</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> make6<span class="sym">() = {</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> make7<span class="sym">() = {</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> make8<span class="sym">() = {</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> make9<span class="sym">() = {</span>
      cells<span class="sym">(</span><span class="num">0</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">1</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">2</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">2</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">4</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
      cells<span class="sym">(</span><span class="num">3</span><span class="sym">).</span>next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> cells<span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
   <span class="sym">}</span>

<span class="sym">}</span>




<span class="slc">// Cell.scala</span>

<span class="kwa">object</span> Cell <span class="sym">{</span>
   <span class="kwa">val</span> NW <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">val</span> NE <span class="sym">=</span> <span class="num">1</span>
   <span class="kwa">val</span> W  <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> <span class="kwa">val</span> E  <span class="sym">=</span> <span class="num">3</span>
   <span class="kwa">val</span> SW <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span> <span class="kwa">val</span> SE <span class="sym">=</span> <span class="num">5</span>

   <span class="kwa">val</span> sides <span class="sym">=</span> <span class="num">6</span>
<span class="sym">}</span>

<span class="kwa">abstract class</span> Cell <span class="sym">{</span>
   <span class="kwa">var</span> marked <span class="sym">=</span> false

   <span class="kwa">def</span> mark<span class="sym">() =</span> marked <span class="sym">=</span> true
   <span class="kwa">def</span> unmark<span class="sym">() =</span> marked <span class="sym">=</span> false
<span class="sym">}</span>




<span class="slc">// BoardCell.scala</span>

<span class="kwa">final class</span> BoardCell<span class="sym">(</span>_number<span class="sym">:</span> Int<span class="sym">)</span> <span class="kwa">extends</span> Cell <span class="sym">{</span>
   <span class="kwa">val</span> next <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span>BoardCell<span class="sym">](</span>Cell<span class="sym">.</span>sides<span class="sym">)</span>
   <span class="kwa">val</span> number <span class="sym">=</span> _number
   <span class="kwa">var</span> piece<span class="sym">:</span> Piece <span class="sym">=</span> _

   <span class="kwa">def</span> isEmpty<span class="sym">() =</span> piece <span class="sym">==</span> null
   <span class="kwa">def</span> empty<span class="sym">() =</span> piece <span class="sym">=</span> null

   <span class="kwa">def</span> contiguousEmptyCells<span class="sym">():</span> Int <span class="sym">= {</span>
      <span class="kwa">if</span> <span class="sym">(!</span>marked <span class="sym">&amp;&amp;</span> isEmpty<span class="sym">){</span>
         mark
         <span class="kwa">var</span> count <span class="sym">=</span> <span class="num">1</span>

         <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> next<span class="sym">.</span>length<span class="sym">){</span>
            <span class="kwa">if</span> <span class="sym">(</span>next<span class="sym">(</span>i<span class="sym">) !=</span> null <span class="sym">&amp;&amp;</span> next<span class="sym">(</span>i<span class="sym">).</span>isEmpty<span class="sym">)</span>
               count <span class="sym">=</span> count <span class="sym">+</span> next<span class="sym">(</span>i<span class="sym">).</span>contiguousEmptyCells
            i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
         <span class="sym">}</span>

         count <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span> <span class="num">0</span> <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>




<span class="slc">// PieceCell.scala</span>

<span class="kwa">final class</span> PieceCell <span class="kwa">extends</span> Cell <span class="sym">{</span>
   <span class="kwa">val</span> next <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span>PieceCell<span class="sym">](</span>Cell<span class="sym">.</span>sides<span class="sym">)</span>

   <span class="kwa">def</span> flip <span class="sym">= {</span>
      <span class="kwa">var</span> swap <span class="sym">=</span> next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> swap

      swap <span class="sym">=</span> next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> swap

      swap <span class="sym">=</span> next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> swap
   <span class="sym">}</span>

   <span class="kwa">def</span> rotate <span class="sym">= {</span>
      <span class="kwa">var</span> swap <span class="sym">=</span> next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>E<span class="sym">) =</span> next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>NE<span class="sym">) =</span> next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>NW<span class="sym">) =</span> next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>W<span class="sym">) =</span> next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>SW<span class="sym">) =</span> next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">)</span>
      next<span class="sym">(</span>Cell<span class="sym">.</span>SE<span class="sym">) =</span> swap
   <span class="sym">}</span>
<span class="sym">}</span>




