<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; Contributed by Robbert Haarman</span>
<span class="slc">;;;</span>
<span class="slc">;;; fannkuch for Lisp (SBCL)</span>
<span class="slc">;;;</span>
<span class="slc">;;; Compile: sbcl --load fannkuch.lisp --eval &quot;(save-lisp-and-die \&quot;fannkuch.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="slc">;;;</span>
<span class="slc">;;; Run: sbcl --noinform --core fannkuch.core %A</span>

<span class="sym">(</span>proclaim <span class="sym">'(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">)</span>
	<span class="sym">(</span>safety <span class="num">0</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))</span>

<span class="sym">(</span>defparameter <span class="sym">*</span><span class="kwa">print</span><span class="sym">-</span>perms<span class="sym">*</span> <span class="num">30</span><span class="sym">)</span>
<span class="sym">(</span>proclaim <span class="sym">'(</span>fixnum <span class="sym">*</span><span class="kwa">print</span><span class="sym">-</span>perms<span class="sym">*))</span>

<span class="sym">(</span><span class="kwa">defun print</span><span class="sym">-</span>permutation <span class="sym">(</span>permutation<span class="sym">)</span>
	<span class="sym">(</span>format t <span class="str">&quot;~{~A~}~%&quot;</span> <span class="sym">(</span>coerce permutation <span class="sym">'</span><span class="kwa">list</span><span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> flip <span class="sym">(</span>permutation<span class="sym">)</span>
	<span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>vector permutation<span class="sym">))</span>
	<span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>aref permutation <span class="num">0</span><span class="sym">)))</span>
		<span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">))</span>
		<span class="sym">(</span>let <span class="sym">((</span>half <span class="sym">(</span>floor n <span class="num">2</span><span class="sym">)))</span>
			<span class="sym">(</span>loop for i from <span class="num">0</span> to <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> half<span class="sym">)</span>
				do <span class="sym">(</span>rotatef <span class="sym">(</span>aref permutation i<span class="sym">)</span>
						<span class="sym">(</span>aref permutation <span class="sym">(+</span> i n <span class="sym">-</span><span class="num">1</span><span class="sym">)))</span>
					<span class="sym">(</span>setf n <span class="sym">(-</span> n <span class="num">2</span><span class="sym">))))))</span>

<span class="sym">(</span><span class="kwa">defun</span> count<span class="sym">-</span>flips <span class="sym">(</span>permutation<span class="sym">)</span>
	<span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>vector permutation<span class="sym">))</span>
	<span class="sym">(</span>loop for flips fixnum <span class="sym">=</span> <span class="num">0</span> then <span class="sym">(</span>incf flips<span class="sym">)</span>
		until <span class="sym">(= (</span>the fixnum <span class="sym">(</span>aref permutation <span class="num">0</span><span class="sym">))</span> <span class="num">1</span><span class="sym">)</span>
		do <span class="sym">(</span>flip permutation<span class="sym">)</span>
		finally <span class="sym">(</span>return flips<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> make<span class="sym">-</span>permutation <span class="sym">(</span>n<span class="sym">)</span>
	<span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">))</span>
	<span class="sym">(</span>make<span class="sym">-</span>array <span class="sym">(</span><span class="kwa">list</span> n<span class="sym">)</span>
		<span class="sym">:</span>initial<span class="sym">-</span>contents <span class="sym">(</span>loop for i from <span class="num">1</span> to n collecting i<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> rotate<span class="sym">-</span>first <span class="sym">(</span>permutation n<span class="sym">)</span>
	<span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>vector permutation<span class="sym">)</span>
		<span class="sym">(</span>fixnum n<span class="sym">))</span>
	<span class="sym">(</span>let <span class="sym">((</span>x <span class="sym">(</span>aref permutation <span class="num">0</span><span class="sym">)))</span>
		<span class="sym">(</span>dotimes <span class="sym">(</span>i <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">))</span>
			<span class="sym">(</span>setf <span class="sym">(</span>aref permutation i<span class="sym">)</span>
				<span class="sym">(</span>aref permutation <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">))))</span>
		<span class="sym">(</span>setf <span class="sym">(</span>aref permutation <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">))</span> x<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> call<span class="sym">-</span>with<span class="sym">-</span>permutations<span class="sym">-</span>rec <span class="sym">(</span>fun permutation len<span class="sym">)</span>
	<span class="sym">(</span>declare <span class="sym">(</span>function fun<span class="sym">) (</span>fixnum len<span class="sym">))</span>
	<span class="sym">(</span>let <span class="sym">((</span>perm <span class="sym">(</span>copy<span class="sym">-</span>seq permutation<span class="sym">)))</span>
		<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> len <span class="num">1</span><span class="sym">) (</span>funcall fun perm<span class="sym">)</span>
			<span class="sym">(</span><span class="kwa">progn</span>
				<span class="sym">(</span>dotimes <span class="sym">(</span>i <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> len<span class="sym">))</span>
					<span class="sym">(</span>call<span class="sym">-</span>with<span class="sym">-</span>permutations<span class="sym">-</span>rec
						fun perm <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> len<span class="sym">))</span>
					<span class="sym">(</span>rotate<span class="sym">-</span>first perm len<span class="sym">))</span>
				<span class="sym">(</span>call<span class="sym">-</span>with<span class="sym">-</span>permutations<span class="sym">-</span>rec
					fun perm <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> len<span class="sym">))))))</span>

<span class="sym">(</span><span class="kwa">defun</span> call<span class="sym">-</span>with<span class="sym">-</span>permutations <span class="sym">(</span>fun initial<span class="sym">-</span>permutation<span class="sym">)</span>
	<span class="sym">(</span>call<span class="sym">-</span>with<span class="sym">-</span>permutations<span class="sym">-</span>rec fun initial<span class="sym">-</span>permutation
		<span class="sym">(</span>array<span class="sym">-</span>dimension initial<span class="sym">-</span>permutation <span class="num">0</span><span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> fannkuch <span class="sym">(</span>n<span class="sym">)</span>
	<span class="sym">(</span>let <span class="sym">((</span>printed <span class="num">0</span><span class="sym">) (</span><span class="kwa">max</span><span class="sym">-</span>flips <span class="num">0</span><span class="sym">))</span>
		<span class="sym">(</span>declare <span class="sym">(</span>fixnum printed <span class="kwa">max</span><span class="sym">-</span>flips<span class="sym">))</span>
		<span class="sym">(</span>call<span class="sym">-</span>with<span class="sym">-</span>permutations
			<span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>permutation<span class="sym">)</span>
				<span class="sym">(</span>when <span class="sym">(&lt;</span> printed <span class="sym">*</span><span class="kwa">print</span><span class="sym">-</span>perms<span class="sym">*)</span>
					<span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>permutation permutation<span class="sym">)</span>
					<span class="sym">(</span>incf printed<span class="sym">))</span>
				<span class="sym">(</span>let <span class="sym">((</span>flips <span class="sym">(</span>count<span class="sym">-</span>flips permutation<span class="sym">)))</span>
					<span class="sym">(</span>declare <span class="sym">(</span>fixnum flips<span class="sym">))</span>
					<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> flips <span class="kwa">max</span><span class="sym">-</span>flips<span class="sym">)</span>
						<span class="sym">(</span>setf <span class="kwa">max</span><span class="sym">-</span>flips flips<span class="sym">))))</span>
			<span class="sym">(</span>make<span class="sym">-</span>permutation n<span class="sym">))</span>
		<span class="kwa">max</span><span class="sym">-</span>flips<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
	<span class="sym">(</span>let <span class="sym">((</span>kuchen <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span>second <span class="sym">*</span>posix<span class="sym">-</span>argv<span class="sym">*))))</span>
		<span class="sym">(</span>format t <span class="str">&quot;Pfannkuchen(~A) = ~A~%&quot;</span> kuchen <span class="sym">(</span>fannkuch kuchen<span class="sym">))))</span>
