<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Contributed by Josh Goldfoot</span>
<span class="hl com"></span>
<span class="hl com">   Converted to D by Dave Fladebo</span>
<span class="hl com">   compile: dmd -O -inline -release knucleotide.d ../../Include/dlang/hashtable.d</span>
<span class="hl com"></span>
<span class="hl com">   This revision uses &quot;hashtable.d&quot; available from</span>
<span class="hl com">   http://cvs.alioth.debian.org/cgi-bin/cvsweb.cgi/shootout/bench/Include/?cvsroot=shootout</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> hashtable<span class="hl sym">,</span> std<span class="hl sym">.</span>stdio<span class="hl sym">,</span> std<span class="hl sym">.</span>string<span class="hl sym">,</span> std<span class="hl sym">.</span>c<span class="hl sym">.</span>string<span class="hl sym">;</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
    <span class="hl kwa">char</span><span class="hl sym">[]</span> line <span class="hl sym">=</span> <span class="hl kwa">new char</span><span class="hl sym">[</span><span class="hl num">256</span><span class="hl sym">];</span>
    <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl kwd">fgets</span><span class="hl sym">(</span>line<span class="hl sym">.</span>ptr<span class="hl sym">,</span> <span class="hl num">256</span><span class="hl sym">,</span> stdin<span class="hl sym">))</span>
        <span class="hl kwa">if</span><span class="hl sym">(</span>line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl str">'&gt;'</span> <span class="hl sym">&amp;&amp;</span> line<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] ==</span> <span class="hl str">'T'</span> <span class="hl sym">&amp;&amp;</span> line<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] ==</span> <span class="hl str">'H'</span><span class="hl sym">)</span>
            <span class="hl kwa">break</span><span class="hl sym">;</span>

    <span class="hl kwa">char</span><span class="hl sym">[]</span> buffer <span class="hl sym">=</span> <span class="hl kwa">new char</span><span class="hl sym">[</span><span class="hl num">1024</span><span class="hl sym">];</span>
    <span class="hl kwa">char</span><span class="hl sym">[]</span> x <span class="hl sym">=</span> buffer<span class="hl sym">;</span>

    size_t seqlen <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl kwd">fgets</span><span class="hl sym">(</span>x<span class="hl sym">.</span>ptr<span class="hl sym">,</span> <span class="hl num">256</span><span class="hl sym">,</span> stdin<span class="hl sym">))</span>
    <span class="hl sym">{</span>
        size_t linelen <span class="hl sym">=</span> <span class="hl kwd">strlen</span><span class="hl sym">(</span>x<span class="hl sym">.</span>ptr<span class="hl sym">);</span>
        <span class="hl kwa">if</span><span class="hl sym">(</span>linelen<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">if</span><span class="hl sym">(</span>x<span class="hl sym">[</span>linelen <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">] ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span>
	        linelen<span class="hl sym">--;</span>
	    <span class="hl kwa">char</span> c <span class="hl sym">=</span> x<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
	    <span class="hl kwa">if</span><span class="hl sym">(</span>c <span class="hl sym">==</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
	    <span class="hl kwa">else if</span><span class="hl sym">(</span>c <span class="hl sym">!=</span> <span class="hl str">';'</span><span class="hl sym">)</span>
	    <span class="hl sym">{</span>
	        seqlen <span class="hl sym">+=</span> linelen<span class="hl sym">;</span>
	        <span class="hl kwa">if</span><span class="hl sym">(</span>seqlen <span class="hl sym">+</span> <span class="hl num">512</span> <span class="hl sym">&gt;=</span> buffer<span class="hl sym">.</span>length<span class="hl sym">)</span>
	        <span class="hl sym">{</span>
                    buffer<span class="hl sym">.</span>length <span class="hl sym">=</span> buffer<span class="hl sym">.</span>length <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">;</span>
		    x <span class="hl sym">=</span> buffer<span class="hl sym">[</span>seqlen <span class="hl sym">..</span> $<span class="hl sym">];</span>
		<span class="hl sym">}</span>
	        <span class="hl kwa">else</span>
		    x <span class="hl sym">=</span> x<span class="hl sym">[</span>linelen <span class="hl sym">..</span> $<span class="hl sym">];</span>
	        x<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
	    <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

    buffer <span class="hl sym">=</span> <span class="hl kwd">toupper</span><span class="hl sym">(</span>buffer<span class="hl sym">[</span><span class="hl num">0</span> <span class="hl sym">..</span> seqlen<span class="hl sym">]);</span>

    <span class="hl kwd">writeFrequency</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> buffer<span class="hl sym">);</span>
    <span class="hl kwd">writeFrequency</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> buffer<span class="hl sym">);</span>
    <span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGT&quot;</span><span class="hl sym">,</span> buffer<span class="hl sym">);</span>
    <span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl sym">,</span> buffer<span class="hl sym">);</span>
    <span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl sym">,</span> buffer<span class="hl sym">);</span>
    <span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl sym">,</span> buffer<span class="hl sym">);</span>
    <span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">,</span> buffer<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">alias</span> HashTable<span class="hl sym">!(</span><span class="hl kwa">int</span><span class="hl sym">)</span> HT<span class="hl sym">;</span>

HT <span class="hl kwd">genFrequency</span><span class="hl sym">(</span><span class="hl kwa">int</span> keyLen<span class="hl sym">,</span> <span class="hl kwa">char</span><span class="hl sym">[]</span> buffer<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwa">if</span><span class="hl sym">(</span>keyLen <span class="hl sym">&gt;</span> buffer<span class="hl sym">.</span>length<span class="hl sym">)</span>
        <span class="hl kwa">return null</span><span class="hl sym">;</span>

    HT ht <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">HT</span><span class="hl sym">(</span>keyLen<span class="hl sym">,</span> buffer<span class="hl sym">.</span>length<span class="hl sym">);</span>
    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> buffer<span class="hl sym">.</span>length <span class="hl sym">-</span> keyLen <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
          ht<span class="hl sym">.</span><span class="hl kwd">findNew</span><span class="hl sym">(</span>buffer<span class="hl sym">[</span>i <span class="hl sym">..</span> i <span class="hl sym">+</span> keyLen<span class="hl sym">]).</span>value<span class="hl sym">++;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">return</span> ht<span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">writeFrequency</span><span class="hl sym">(</span><span class="hl kwa">int</span> keyLen<span class="hl sym">,</span> <span class="hl kwa">char</span><span class="hl sym">[]</span> buffer<span class="hl sym">)</span>
<span class="hl sym">{</span>
    size_t total <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> size <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    HT<span class="hl sym">.</span>HashTableNode nd<span class="hl sym">;</span>

    HT ht <span class="hl sym">=</span> <span class="hl kwd">genFrequency</span><span class="hl sym">(</span>keyLen<span class="hl sym">,</span> buffer<span class="hl sym">);</span>
    <span class="hl kwa">for</span><span class="hl sym">(</span>nd <span class="hl sym">=</span> ht<span class="hl sym">.</span>first<span class="hl sym">;</span> nd<span class="hl sym">;</span> nd <span class="hl sym">=</span> ht<span class="hl sym">.</span>next<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        total <span class="hl sym">=</span> total <span class="hl sym">+</span> nd<span class="hl sym">.</span>value<span class="hl sym">;</span>
        size<span class="hl sym">++;</span>
    <span class="hl sym">}</span>

    size_t si <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">struct</span> sorter
    <span class="hl sym">{</span>
        <span class="hl kwa">char</span><span class="hl sym">[]</span> string<span class="hl sym">;</span>
        size_t num<span class="hl sym">;</span>
    <span class="hl sym">}</span>
    sorter<span class="hl sym">[]</span> s <span class="hl sym">=</span> <span class="hl kwa">new</span> sorter<span class="hl sym">[</span>size<span class="hl sym">];</span>
    <span class="hl kwa">for</span><span class="hl sym">(</span>nd <span class="hl sym">=</span> ht<span class="hl sym">.</span>first<span class="hl sym">;</span> nd<span class="hl sym">;</span> nd <span class="hl sym">=</span> ht<span class="hl sym">.</span>next<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        s<span class="hl sym">[</span>si<span class="hl sym">].</span>string <span class="hl sym">=</span> nd<span class="hl sym">.</span>key<span class="hl sym">;</span>
        s<span class="hl sym">[</span>si<span class="hl sym">].</span>num <span class="hl sym">=</span> nd<span class="hl sym">.</span>value<span class="hl sym">;</span>
        si<span class="hl sym">++;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> size <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> j <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> size<span class="hl sym">;</span> j<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>s<span class="hl sym">[</span>i<span class="hl sym">].</span>num <span class="hl sym">&lt;</span> s<span class="hl sym">[</span>j<span class="hl sym">].</span>num<span class="hl sym">)</span>
	    <span class="hl sym">{</span>
	        sorter tmp <span class="hl sym">=</span> s<span class="hl sym">[</span>i<span class="hl sym">];</span>
                s<span class="hl sym">[</span>i<span class="hl sym">..</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">] =</span> s<span class="hl sym">[</span>j<span class="hl sym">..</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
                s<span class="hl sym">[</span>j<span class="hl sym">] =</span> tmp<span class="hl sym">;</span>
	    <span class="hl sym">}</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> size<span class="hl sym">;</span> i<span class="hl sym">++)</span>
    <span class="hl sym">{</span>
        <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;%s %.3f&quot;</span><span class="hl sym">,</span> s<span class="hl sym">[</span>i<span class="hl sym">].</span>string<span class="hl sym">,</span> <span class="hl num">100</span> <span class="hl sym">*</span> s<span class="hl sym">[</span>i<span class="hl sym">].</span>num <span class="hl sym">/</span> <span class="hl kwa">cast</span><span class="hl sym">(</span><span class="hl kwa">float</span><span class="hl sym">)</span>total<span class="hl sym">);</span>
    <span class="hl sym">}</span>
    <span class="hl kwd">writefln</span><span class="hl sym">();</span>
<span class="hl sym">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">writeCount</span><span class="hl sym">(</span><span class="hl kwa">char</span><span class="hl sym">[]</span> searchFor<span class="hl sym">,</span> <span class="hl kwa">char</span><span class="hl sym">[]</span> buffer<span class="hl sym">)</span>
<span class="hl sym">{</span>
    HT ht <span class="hl sym">=</span> <span class="hl kwd">genFrequency</span><span class="hl sym">(</span>searchFor<span class="hl sym">.</span>length<span class="hl sym">,</span> buffer<span class="hl sym">);</span>
    <span class="hl kwd">writefln</span><span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s&quot;</span><span class="hl sym">,</span> ht<span class="hl sym">.</span><span class="hl kwd">findNew</span><span class="hl sym">(</span>searchFor<span class="hl sym">).</span>value<span class="hl sym">,</span> searchFor<span class="hl sym">);</span>
<span class="hl sym">}</span>
