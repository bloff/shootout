<span class="com">/*</span>
<span class="com"> * The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by: Alexandre Alapetite http://alexandre.alapetite.net/</span>
<span class="com"> * Date: 2006-08-13</span>
<span class="com"> */</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">.</span>Generic<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Threading<span class="sym">;</span>

<span class="kwa">namespace</span> cheap_concurrency
<span class="sym">{</span>
   <span class="kwc">public</span> sealed <span class="kwc">class</span> MyMessage
   <span class="sym">{</span>
      <span class="kwc">private</span> <span class="kwb">const int</span> numberOfThreads <span class="sym">=</span> <span class="num">500</span><span class="sym">;</span>
      internal <span class="kwb">static int</span> numberOfMessagesToSend<span class="sym">;</span>

      <span class="kwc">public</span> <span class="kwb">static void</span> <span class="kwd">Main</span><span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)</span>
      <span class="sym">{</span>
         numberOfMessagesToSend <span class="sym">=</span> <span class="kwb">int</span><span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

         MessageThread chain <span class="sym">=</span> null<span class="sym">;</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> numberOfThreads<span class="sym">;</span> i <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span>
         <span class="sym">{</span>
            chain <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">MessageThread</span><span class="sym">(</span>chain<span class="sym">);</span>
            <span class="kwa">new</span> <span class="kwd">Thread</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwd">ThreadStart</span><span class="sym">(</span>chain<span class="sym">.</span>Run<span class="sym">)).</span><span class="kwd">Start</span><span class="sym">();</span>
         <span class="sym">}</span>

         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> numberOfMessagesToSend<span class="sym">;</span> i<span class="sym">++)</span>
            chain<span class="sym">.</span><span class="kwd">Enqueue</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   internal sealed <span class="kwc">class</span> MessageThread
   <span class="sym">{</span>
      <span class="kwc">private</span> MessageThread nextThread<span class="sym">;</span>
      <span class="kwc">private</span> Queue<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;</span> list <span class="sym">=</span> <span class="kwa">new</span> Queue<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;();</span>
      <span class="kwc">private</span> <span class="kwb">int</span> numberOfMessagesToSend<span class="sym">;</span>

      internal <span class="kwd">MessageThread</span><span class="sym">(</span>MessageThread nextThread<span class="sym">)</span>
      <span class="sym">{</span>
         <span class="kwa">this</span><span class="sym">.</span>nextThread <span class="sym">=</span> nextThread<span class="sym">;</span>
         <span class="kwa">this</span><span class="sym">.</span>numberOfMessagesToSend <span class="sym">=</span> MyMessage<span class="sym">.</span>numberOfMessagesToSend<span class="sym">;</span>
      <span class="sym">}</span>

      internal <span class="kwb">void</span> <span class="kwd">Run</span><span class="sym">()</span>
      <span class="sym">{</span>
         <span class="kwa">if</span> <span class="sym">(</span>nextThread <span class="sym">==</span> null<span class="sym">)</span>
         <span class="sym">{</span>
            <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">while</span> <span class="sym">(</span>numberOfMessagesToSend <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
            <span class="sym">{</span>
               <span class="kwd">lock</span> <span class="sym">(</span>list<span class="sym">)</span>
                  <span class="kwa">while</span> <span class="sym">(</span>list<span class="sym">.</span>Count <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
                  <span class="sym">{</span>
                     sum <span class="sym">+=</span> list<span class="sym">.</span><span class="kwd">Dequeue</span><span class="sym">();</span>
                     numberOfMessagesToSend<span class="sym">--;</span>
                  <span class="sym">}</span>
               Thread<span class="sym">.</span><span class="kwd">Sleep</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
            <span class="sym">}</span>
            Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>sum<span class="sym">);</span>
         <span class="sym">}</span>
         <span class="kwa">else</span>
         <span class="sym">{</span>
            <span class="kwa">while</span> <span class="sym">(</span>numberOfMessagesToSend <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
            <span class="sym">{</span>
               <span class="kwd">lock</span> <span class="sym">(</span>list<span class="sym">)</span>
                  <span class="kwa">while</span> <span class="sym">(</span>list<span class="sym">.</span>Count <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
                  <span class="sym">{</span>
                     nextThread<span class="sym">.</span><span class="kwd">Enqueue</span><span class="sym">((</span><span class="kwb">int</span><span class="sym">)</span>list<span class="sym">.</span><span class="kwd">Dequeue</span><span class="sym">());</span>
                     numberOfMessagesToSend<span class="sym">--;</span>
                  <span class="sym">}</span>
               Thread<span class="sym">.</span><span class="kwd">Sleep</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
      <span class="sym">}</span>

      internal <span class="kwb">void</span> <span class="kwd">Enqueue</span><span class="sym">(</span><span class="kwb">int</span> mess<span class="sym">)</span>
      <span class="sym">{</span>
         <span class="kwd">lock</span> <span class="sym">(</span>list<span class="sym">)</span>
            list<span class="sym">.</span><span class="kwd">Enqueue</span><span class="sym">(</span>mess <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>
