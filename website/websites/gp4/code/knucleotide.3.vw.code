<span class="com">&quot;*  The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Eliot Miranda *&quot;</span><span class="sym">!</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>Tests
   superclass<span class="sym">: #</span>{Core<span class="sym">.</span>Object}
   indexedType<span class="sym">: #</span>none
   private<span class="sym">:</span> <span class="kwa">false</span>
   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   imports<span class="sym">:</span> <span class="str">''</span>
   category<span class="sym">:</span> <span class="str">'ComputerLanguageShootout'</span> <span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>

knucleotide3
   <span class="kwa">self</span> knucleotide3From<span class="sym">:</span> Stdin to<span class="sym">:</span> Stdout<span class="sym">.</span>
   <span class="sym">^</span><span class="str">''</span> <span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarks'</span><span class="sym">!</span>

knucleotide3From<span class="sym">:</span> input to<span class="sym">:</span> output
   <span class="sym">|</span> sequence writeFrequencies writeCount <span class="sym">|</span>

   sequence <span class="sym">:= (</span><span class="kwa">self</span> readFasta<span class="sym">:</span> <span class="str">'THREE'</span> from<span class="sym">:</span> input<span class="sym">)</span> asUppercase<span class="sym">.</span>

   writeFrequencies <span class="sym">:=</span>
      <span class="sym">[:</span>k <span class="sym">| |</span> frequencies count <span class="sym">|</span>
      frequencies <span class="sym">:=</span> SortedCollection sortBlock<span class="sym">: [:</span>a <span class="sym">:</span>b<span class="sym">|</span>
         <span class="sym">(</span>a value <span class="sym">=</span> b value<span class="sym">)</span> ifTrue<span class="sym">: [</span>b key <span class="sym">&lt;</span> a key<span class="sym">]</span> ifFalse<span class="sym">: [</span>b value <span class="sym">&lt;</span> a value<span class="sym">]].</span>

      count <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">.</span>
      <span class="sym">(</span>sequence substringFrequencies<span class="sym">:</span> k using<span class="sym">: (</span>DNASequenceDictionary new<span class="sym">:</span> <span class="num">1024</span><span class="sym">))</span>
         associationsDo<span class="sym">: [:</span>each<span class="sym">|</span>
            frequencies add<span class="sym">:</span> each<span class="sym">.</span> count <span class="sym">:=</span> count <span class="sym">+</span> each value<span class="sym">].</span>

      frequencies do<span class="sym">: [:</span>each <span class="sym">| |</span> percentage <span class="sym">|</span>
         percentage <span class="sym">:= (</span>each value <span class="sym">/</span> count<span class="sym">) *</span> <span class="num">100.0</span><span class="sym">.</span>
         output nextPutAll<span class="sym">:</span> each key<span class="sym">;</span> space<span class="sym">;</span>
            nextPutAll<span class="sym">: (</span>percentage asStringWith<span class="sym">:</span> <span class="num">3</span><span class="sym">);</span> cr<span class="sym">]].</span>

   writeCount <span class="sym">:= [:</span>nucleotideFragment <span class="sym">| |</span> frequencies count <span class="sym">|</span>
      frequencies <span class="sym">:=</span> sequence substringFrequencies<span class="sym">:</span> nucleotideFragment size
         using<span class="sym">: (</span>DNASequenceDictionary new<span class="sym">:</span> <span class="num">1024</span><span class="sym">).</span>
      count <span class="sym">:=</span> frequencies at<span class="sym">:</span> nucleotideFragment ifAbsent<span class="sym">: [</span><span class="num">0</span><span class="sym">].</span>
      output print<span class="sym">:</span> count<span class="sym">;</span> tab<span class="sym">;</span> nextPutAll<span class="sym">:</span> nucleotideFragment<span class="sym">;</span> cr<span class="sym">].</span>

   writeFrequencies value<span class="sym">:</span> <span class="num">1</span><span class="sym">.</span> output cr<span class="sym">.</span>
   writeFrequencies value<span class="sym">:</span> <span class="num">2</span><span class="sym">.</span> output cr<span class="sym">.</span>

   writeCount value<span class="sym">:</span> <span class="str">'GGT'</span><span class="sym">.</span>
   writeCount value<span class="sym">:</span> <span class="str">'GGTA'</span><span class="sym">.</span>
   writeCount value<span class="sym">:</span> <span class="str">'GGTATT'</span><span class="sym">.</span>
   writeCount value<span class="sym">:</span> <span class="str">'GGTATTTTAATT'</span><span class="sym">.</span>
   writeCount value<span class="sym">:</span> <span class="str">'GGTATTTTAATTTATAGT'</span><span class="sym">.</span>
   <span class="sym">^</span><span class="str">''</span> <span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'auxilliaries'</span><span class="sym">!</span>

readFasta<span class="sym">:</span> anId from<span class="sym">:</span> input
   <span class="sym">|</span> idString newline buffer char <span class="sym">|</span>
   idString <span class="sym">:=</span> <span class="str">'&gt;'</span> <span class="sym">,</span> anId<span class="sym">.</span>
   newline <span class="sym">:=</span> Character cr<span class="sym">.</span>

   &quot;find start of particular fasta sequence&quot;

   <span class="sym">[(</span>char <span class="sym">:=</span> input peek<span class="sym">) ==</span> <span class="kwa">nil</span>
    or<span class="sym">: [</span>char <span class="sym">= $&gt;</span>
         ifTrue<span class="sym">:</span>
            <span class="sym">[((</span>input upTo<span class="sym">:</span> newline<span class="sym">)</span>
               indexOfSubCollection<span class="sym">:</span> idString startingAt<span class="sym">:</span> <span class="num">1</span><span class="sym">) =</span> <span class="num">1</span><span class="sym">]</span>
         ifFalse<span class="sym">:</span>
            <span class="sym">[</span>input skipThrough<span class="sym">:</span> newline<span class="sym">.</span>
             <span class="kwa">false</span><span class="sym">]]]</span>
      whileFalse<span class="sym">.</span>

   &quot;line<span class="sym">-</span>by<span class="sym">-</span>line read <span class="sym">-</span> it would be a lot faster to block read&quot;
   buffer <span class="sym">:=</span> ReadWriteStream on<span class="sym">: (</span>String new<span class="sym">:</span> <span class="num">1028</span><span class="sym">).</span>
   <span class="sym">[(</span>char <span class="sym">:=</span> input peek<span class="sym">) ==</span> <span class="kwa">nil</span> or<span class="sym">: [</span>char <span class="sym">= $&gt;]]</span> whileFalse<span class="sym">:</span>
      <span class="sym">[</span>char <span class="sym">= $;</span>
         ifTrue<span class="sym">: [</span>input upTo<span class="sym">:</span> newline<span class="sym">]</span>
         ifFalse<span class="sym">: [</span>buffer nextPutAll<span class="sym">: (</span>input upTo<span class="sym">:</span> newline<span class="sym">)]].</span>
   <span class="sym">^</span>buffer contents <span class="sym">! !</span>


<span class="sym">!</span>Core<span class="sym">.</span>SequenceableCollection methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

substringFrequencies<span class="sym">:</span> aLength using<span class="sym">:</span> aDictionary
   <span class="num">1</span> to<span class="sym">:</span> <span class="kwa">self</span> size <span class="sym">-</span> aLength <span class="sym">+</span> <span class="num">1</span> do<span class="sym">:</span>
      <span class="sym">[:</span>i <span class="sym">| |</span> fragment <span class="sym">|</span>
      fragment <span class="sym">:=</span> <span class="kwa">self</span> copyFrom<span class="sym">:</span> i to<span class="sym">:</span> i <span class="sym">+</span> aLength <span class="sym">-</span> <span class="num">1</span><span class="sym">.</span>
      aDictionary at<span class="sym">:</span> fragment
         putValueOf<span class="sym">: [:</span>sum<span class="sym">|</span> sum <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span> ifAbsentPutValueOf<span class="sym">:</span> <span class="num">1</span><span class="sym">].</span>
   <span class="sym">^</span>aDictionary <span class="sym">! !</span>


<span class="sym">!</span>Core<span class="sym">.</span>Dictionary methodsFor<span class="sym">:</span> <span class="str">'computer language shootout'</span><span class="sym">!</span>

at<span class="sym">:</span> key putValueOf<span class="sym">:</span> putBlock ifAbsentPutValueOf<span class="sym">:</span> absentBlock
   &quot;Set the value at key to be the value of evaluating putBlock
    with the existing value<span class="sym">.</span> If key is not found<span class="sym">,</span> create a new
    entry for key and set is value to the evaluation of
    absentBlock<span class="sym">.</span> Answer the result of evaluating either block<span class="sym">.</span>&quot;

   <span class="sym">|</span> index element anObject <span class="sym">|</span>
   key <span class="sym">==</span> <span class="kwa">nil</span> ifTrue<span class="sym">:</span>
      <span class="sym">[^</span><span class="kwa">self</span>
         subscriptBoundsErrorFor<span class="sym">: #</span>at<span class="sym">:</span>putValueOf<span class="sym">:</span>ifAbsentPutValueOf<span class="sym">:</span>
         index<span class="sym">:</span> key
         value<span class="sym">:</span> absentBlock value<span class="sym">].</span>
   index <span class="sym">:=</span> <span class="kwa">self</span> findKeyOrNil<span class="sym">:</span> key<span class="sym">.</span>
   element <span class="sym">:=</span> <span class="kwa">self</span> basicAt<span class="sym">:</span> index<span class="sym">.</span>
   element <span class="sym">==</span> <span class="kwa">nil</span>
      ifTrue<span class="sym">: [</span><span class="kwa">self</span> atNewIndex<span class="sym">:</span> index put<span class="sym">:</span>
         <span class="sym">(</span><span class="kwa">self</span> createKey<span class="sym">:</span> key value<span class="sym">: (</span>anObject <span class="sym">:=</span> absentBlock value<span class="sym">))]</span>
      ifFalse<span class="sym">: [</span>element value<span class="sym">: (</span>anObject <span class="sym">:=</span> putBlock value<span class="sym">:</span> element value<span class="sym">)].</span>
   <span class="sym">^</span>anObject <span class="sym">! !</span>


Smalltalk<span class="sym">.</span>Shootout defineClass<span class="sym">: #</span>DNASequenceDictionary
   superclass<span class="sym">: #</span>{Core<span class="sym">.</span>Dictionary}
   indexedType<span class="sym">: #</span>objects
   private<span class="sym">:</span> <span class="kwa">false</span>
   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   imports<span class="sym">:</span> <span class="str">''</span>
   category<span class="sym">:</span> <span class="str">'ComputerLanguageShootout'</span> <span class="sym">!</span>

<span class="sym">!</span>Shootout<span class="sym">.</span>DNASequenceDictionary methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>

findKeyOrNil<span class="sym">:</span> key
   &quot;Look for the key in the receiver<span class="sym">.</span>  If it is found<span class="sym">,</span> answer
   the index of the association containing the key<span class="sym">,</span> otherwise
   answer the index of the first unused slot<span class="sym">.</span>&quot;

   <span class="sym">|</span> location length probe pass <span class="sym">|</span>
   length <span class="sym">:=</span> <span class="kwa">self</span> basicSize<span class="sym">.</span>
   pass <span class="sym">:=</span> <span class="num">1</span><span class="sym">.</span>
   location <span class="sym">:=</span> <span class="kwa">self</span> initialIndexFor<span class="sym">:</span> key dnaSequenceHash boundedBy<span class="sym">:</span> length<span class="sym">.</span>
   <span class="sym">[(</span>probe <span class="sym">:=</span> <span class="kwa">self</span> basicAt<span class="sym">:</span> location<span class="sym">) ==</span> <span class="kwa">nil</span> or<span class="sym">: [</span>probe key <span class="sym">=</span> key<span class="sym">]]</span>
      whileFalse<span class="sym">:</span>
         <span class="sym">[(</span>location <span class="sym">:=</span> location <span class="sym">+</span> <span class="num">1</span><span class="sym">) &gt;</span> length
            ifTrue<span class="sym">:</span>
               <span class="sym">[</span>location <span class="sym">:=</span> <span class="num">1</span><span class="sym">.</span>
               pass <span class="sym">:=</span> pass <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>
               pass <span class="sym">&gt;</span> <span class="num">2</span> ifTrue<span class="sym">: [^</span><span class="kwa">self</span> grow findKeyOrNil<span class="sym">:</span> key<span class="sym">]]].</span>
   <span class="sym">^</span>location <span class="sym">! !</span>


<span class="sym">!</span>Core<span class="sym">.</span>String methodsFor<span class="sym">:</span> <span class="str">'comparing'</span><span class="sym">!</span>

dnaSequenceHash
   &quot;Answer a uniformly distributed SmallInteger computed from the contents
   of the receiver<span class="sym">,</span> which is a string composed of only the lettersd ACGT<span class="sym">.</span>&quot;
   &quot;Each character contributes <span class="num">2</span> bts to the hash<span class="sym">.</span>  Bit positions climb to <span class="num">28</span>
    before wrapping&quot;

   <span class="sym">|</span> hash bitPosition <span class="sym">|</span>
   hash <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   bitPosition <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
   <span class="num">1</span> to<span class="sym">:</span> <span class="kwa">self</span> size do<span class="sym">:</span>
      <span class="sym">[:</span>i<span class="sym">| |</span> c <span class="sym">|</span>
      c <span class="sym">:=</span> <span class="kwa">self</span> at<span class="sym">:</span> i<span class="sym">.</span>
      hash <span class="sym">:=</span> hash <span class="sym">+ ((</span>c <span class="sym">&gt;= $</span>G ifTrue<span class="sym">: [</span>c <span class="sym">= $</span>G ifTrue<span class="sym">: [</span><span class="num">2</span><span class="sym">]</span> ifFalse<span class="sym">: [</span><span class="num">3</span><span class="sym">]]</span>
         ifFalse<span class="sym">: [</span>c <span class="sym">= $</span>A ifTrue<span class="sym">: [</span><span class="num">0</span><span class="sym">]</span> ifFalse<span class="sym">: [</span><span class="num">1</span><span class="sym">]])</span> bitShift<span class="sym">:</span> bitPosition<span class="sym">).</span>
      <span class="sym">(</span>bitPosition <span class="sym">:=</span> bitPosition <span class="sym">+</span> <span class="num">2</span><span class="sym">) &gt;=</span> <span class="num">28</span> ifTrue<span class="sym">:</span>
         <span class="sym">[</span>bitPosition <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>
          hash <span class="sym">:=</span> hash bitAnd<span class="sym">:</span> <span class="num">16</span>rFFFFFFF<span class="sym">]].</span>
   <span class="sym">^</span>hash <span class="sym">! !</span>
