<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Yura Taras</span>
<span class="com">*/</span>

<span class="kwa">package</span> chameneos

<span class="kwa">object</span> Chameneos <span class="sym">{</span>
  <span class="kwa">abstract class</span> Colour
  <span class="kwa">case object</span> RED <span class="kwa">extends</span> Colour
  <span class="kwa">case object</span> YELLOW <span class="kwa">extends</span> Colour
  <span class="kwa">case object</span> BLUE <span class="kwa">extends</span> Colour
  <span class="kwa">case object</span> FADED <span class="kwa">extends</span> Colour
  <span class="kwa">val</span> colours <span class="sym">=</span> <span class="kwc">List</span><span class="sym">(</span>RED<span class="sym">,</span> BLUE<span class="sym">,</span> YELLOW<span class="sym">,</span> FADED<span class="sym">)</span>
  <span class="kwa">class</span> MeetingPlace<span class="sym">(</span><span class="kwa">var</span> n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) {</span>
    <span class="kwa">var</span> other<span class="sym">:</span> Creature <span class="sym">=</span> _
    <span class="kwa">def</span> meet<span class="sym">(</span>c<span class="sym">:</span> Creature<span class="sym">) =</span> <span class="kwa">synchronized</span> <span class="sym">{</span>
      <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
          <span class="kwa">if</span><span class="sym">(</span>other <span class="sym">==</span> null<span class="sym">) {</span>
            other <span class="sym">=</span> c<span class="sym">;</span>
            <span class="kwa">this</span><span class="sym">.</span>wait<span class="sym">()</span>
          <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            other<span class="sym">.</span>setOther<span class="sym">(</span>c<span class="sym">.</span>colour<span class="sym">)</span>
            c<span class="sym">.</span>setOther<span class="sym">(</span>other<span class="sym">.</span>colour<span class="sym">)</span>
            other <span class="sym">=</span> null
            n <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span>
            <span class="kwa">this</span><span class="sym">.</span>notify<span class="sym">()</span>
          <span class="sym">}</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
          c<span class="sym">.</span>setOther<span class="sym">(</span>FADED<span class="sym">)</span>
      <span class="sym">}</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
  <span class="kwa">class</span> Creature<span class="sym">(</span><span class="kwa">private val</span> mp<span class="sym">:</span> MeetingPlace<span class="sym">,</span> <span class="kwa">var</span> colour<span class="sym">:</span> Colour<span class="sym">)</span> <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{</span>
    <span class="kwa">private var</span> met <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">var</span> other<span class="sym">:</span> Colour <span class="sym">=</span> _
    <span class="kwa">def</span> setOther<span class="sym">(</span>_o<span class="sym">:</span> Colour<span class="sym">) {</span>
      other <span class="sym">=</span> _o
    <span class="sym">}</span>
    <span class="kwa">def</span> getCreaturesMet <span class="sym">=</span> met
    <span class="kwa">override def</span> run<span class="sym">() {</span>
      <span class="kwa">try</span> <span class="sym">{</span>
        <span class="kwa">while</span><span class="sym">(</span>colour <span class="sym">!=</span> FADED<span class="sym">) {</span>
          mp<span class="sym">.</span>meet<span class="sym">(</span><span class="kwa">this</span><span class="sym">)</span>
          <span class="kwa">if</span><span class="sym">(</span>other <span class="sym">==</span> FADED<span class="sym">) {</span>
            colour <span class="sym">=</span> FADED
          <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            met <span class="sym">=</span> met <span class="sym">+</span> <span class="num">1</span>
            colour <span class="sym">=</span> complement<span class="sym">(</span>other<span class="sym">)</span>
          <span class="sym">}</span>
        <span class="sym">}</span>
      <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">{</span>
        <span class="kwa">case</span> e<span class="sym">:</span><span class="kwc">InterruptedException</span> <span class="sym">=&gt; ()</span> <span class="slc">// Let the thread exit</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">def</span> complement<span class="sym">(</span>other<span class="sym">:</span> Colour<span class="sym">) =</span> Pair<span class="sym">(</span>colour<span class="sym">,</span>other<span class="sym">)</span> match <span class="sym">{</span>
          <span class="kwa">case</span> Pair<span class="sym">(</span>RED<span class="sym">,</span>YELLOW<span class="sym">) =&gt;</span> BLUE
          <span class="kwa">case</span> Pair<span class="sym">(</span>RED<span class="sym">,</span>BLUE<span class="sym">)   =&gt;</span> YELLOW
          <span class="kwa">case</span> Pair<span class="sym">(</span>RED<span class="sym">,</span>RED<span class="sym">)    =&gt;</span> RED
          <span class="kwa">case</span> Pair<span class="sym">(</span>YELLOW<span class="sym">,</span>BLUE<span class="sym">)=&gt;</span> RED
          <span class="kwa">case</span> Pair<span class="sym">(</span>YELLOW<span class="sym">,</span>RED<span class="sym">)    =&gt;</span> BLUE
          <span class="kwa">case</span> Pair<span class="sym">(</span>YELLOW<span class="sym">,</span>YELLOW<span class="sym">) =&gt;</span> YELLOW
          <span class="kwa">case</span> Pair<span class="sym">(</span>BLUE<span class="sym">,</span>RED<span class="sym">)      =&gt;</span> YELLOW
          <span class="kwa">case</span> Pair<span class="sym">(</span>BLUE<span class="sym">,</span>YELLOW<span class="sym">)   =&gt;</span> RED
          <span class="kwa">case</span> Pair<span class="sym">(</span>BLUE<span class="sym">,</span>BLUE<span class="sym">)     =&gt;</span> BLUE
          <span class="kwa">case</span> Pair<span class="sym">(</span>FADED<span class="sym">,</span> _<span class="sym">)      =&gt;</span> FADED
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> apply<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) {</span>
      <span class="kwa">val</span> mp <span class="sym">=</span> <span class="kwa">new</span> MeetingPlace<span class="sym">(</span>n<span class="sym">)</span>
      <span class="kwa">val</span> creatures <span class="sym">=</span> <span class="kwa">for</span><span class="sym">(</span><span class="kwa">val</span> x <span class="sym">&lt;-</span> colours<span class="sym">)</span> <span class="kwa">yield</span> <span class="sym">{</span>
        <span class="kwa">val</span> cr <span class="sym">=</span> <span class="kwa">new</span> Creature<span class="sym">(</span>mp<span class="sym">,</span> x<span class="sym">);</span>
        cr<span class="sym">.</span>start<span class="sym">();</span>
        cr
      <span class="sym">}</span>
      creatures<span class="sym">.</span>foreach<span class="sym">(</span>x <span class="sym">=&gt;</span> x<span class="sym">.</span>join<span class="sym">)</span>
      <span class="kwa">val</span> meetings <span class="sym">= (</span>creatures foldLeft <span class="num">0</span><span class="sym">) {(</span>x<span class="sym">,</span> y<span class="sym">) =&gt; (</span>x <span class="sym">+</span> y<span class="sym">.</span>getCreaturesMet<span class="sym">)}</span>
      Console<span class="sym">.</span>println<span class="sym">(</span>meetings<span class="sym">)</span>
  <span class="sym">}</span>
<span class="sym">}</span>
<span class="kwa">object</span> main <span class="sym">{</span>
  <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) {</span>
    <span class="kwa">if</span><span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">throw new</span> <span class="kwc">IllegalArgumentException</span><span class="sym">();</span>
    Chameneos<span class="sym">(</span><span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">)))</span>
  <span class="sym">}</span>
<span class="sym">}</span>



