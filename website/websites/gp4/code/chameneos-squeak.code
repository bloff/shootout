<span class="com">&quot;* The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Paolo Bonzini</span>
<span class="com">    modified by Eliot Miranda *&quot;</span><span class="sym">!</span>
Object subclass<span class="sym">: #</span>Chameleon   instanceVariableNames<span class="sym">:</span> <span class="str">'meetings color semaphore waitingForPair'</span>   classVariableNames<span class="sym">:</span> <span class="str">''</span>   poolDictionaries<span class="sym">:</span> <span class="str">''</span>   category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>
Object subclass<span class="sym">: #</span>MeetingPlace   instanceVariableNames<span class="sym">:</span> <span class="str">'mutex first total max'</span>   classVariableNames<span class="sym">:</span> <span class="str">''</span>   poolDictionaries<span class="sym">:</span> <span class="str">''</span>   category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>
<span class="sym">!</span>Chameleon methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>initialize    meetings <span class="sym">:=</span> <span class="num">0</span><span class="sym">.</span>    waitingForPair <span class="sym">:=</span> Semaphore new<span class="sym">.</span>    semaphore <span class="sym">:=</span> Semaphore new<span class="sym">! !!</span>Chameleon methodsFor<span class="sym">:</span> <span class="str">'changing colours'</span><span class="sym">!</span>color<span class="sym">:</span> c    color <span class="sym">:=</span> c<span class="sym">! !!</span>Chameleon methodsFor<span class="sym">:</span> <span class="str">'changing colours'</span><span class="sym">!</span>fade    color <span class="sym">:= #</span>faded<span class="sym">.</span>    waitingForPair signal<span class="sym">.</span>    semaphore signal<span class="sym">! !!</span>Chameleon methodsFor<span class="sym">:</span> <span class="str">'changing colours'</span><span class="sym">!</span>met<span class="sym">:</span> other    <span class="sym">|</span> newColor <span class="sym">|</span>    meetings <span class="sym">:=</span> meetings <span class="sym">+</span> <span class="num">1</span><span class="sym">.</span>    color <span class="sym">== #</span>red ifTrue<span class="sym">: [</span>   newColor <span class="sym">:=</span> other <span class="sym">== #</span>yellow ifTrue<span class="sym">: [ #</span>blue <span class="sym">]</span> ifFalse<span class="sym">: [ #</span>yellow <span class="sym">] ].</span>    color <span class="sym">== #</span>yellow ifTrue<span class="sym">: [</span>   newColor <span class="sym">:=</span> other <span class="sym">== #</span>red ifTrue<span class="sym">: [ #</span>blue <span class="sym">]</span> ifFalse<span class="sym">: [ #</span>red <span class="sym">] ].</span>    color <span class="sym">== #</span>blue ifTrue<span class="sym">: [</span>   newColor <span class="sym">:=</span> other <span class="sym">== #</span>red ifTrue<span class="sym">: [ #</span>yellow <span class="sym">]</span> ifFalse<span class="sym">: [ #</span>red <span class="sym">] ].</span>    color <span class="sym">:=</span> newColor<span class="sym">.</span>    waitingForPair signal<span class="sym">! !!</span>Chameleon methodsFor<span class="sym">:</span> <span class="str">'running'</span><span class="sym">!</span>fork<span class="sym">:</span> meetingPlace    <span class="sym">^[</span> <span class="kwa">self</span> run<span class="sym">:</span> meetingPlace <span class="sym">]</span> fork<span class="sym">! !!</span>Chameleon methodsFor<span class="sym">:</span> <span class="str">'running'</span><span class="sym">!</span>run<span class="sym">:</span> meetingPlace    <span class="sym">[</span> color <span class="sym">== #</span>faded <span class="sym">]</span> whileFalse<span class="sym">: [</span>   meetingPlace reachedBy<span class="sym">:</span> <span class="kwa">self</span><span class="sym">.</span>   waitingForPair wait <span class="sym">]! !!</span>Chameleon methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>color    <span class="sym">^</span>color<span class="sym">! !!</span>Chameleon methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>meetings    <span class="sym">^</span>meetings<span class="sym">! !!</span>Chameleon methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>wait    semaphore wait<span class="sym">! !!</span>Chameleon class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>color<span class="sym">:</span> c    <span class="sym">^</span><span class="kwa">self</span> new   initialize<span class="sym">;</span>   color<span class="sym">:</span> c<span class="sym">! !!</span>MeetingPlace methodsFor<span class="sym">:</span> <span class="str">'running'</span><span class="sym">!</span>max<span class="sym">:</span> maxMeetings    max <span class="sym">:=</span> maxMeetings<span class="sym">! !!</span>MeetingPlace methodsFor<span class="sym">:</span> <span class="str">'running'</span><span class="sym">!</span>organizeMeetingWith<span class="sym">:</span> second    total <span class="sym">&gt;=</span> max   ifTrue<span class="sym">: [</span>       first fade<span class="sym">.</span>       second fade <span class="sym">]</span>   ifFalse<span class="sym">: [</span>       first met<span class="sym">:</span> second color<span class="sym">.</span>       second met<span class="sym">:</span> first color <span class="sym">].</span>    total <span class="sym">:=</span> total <span class="sym">+</span> <span class="num">1</span><span class="sym">! !!</span>MeetingPlace methodsFor<span class="sym">:</span> <span class="str">'running'</span><span class="sym">!</span>reachedBy<span class="sym">:</span> chameleon    mutex critical<span class="sym">: [</span>   first isNil       ifTrue<span class="sym">: [</span> first <span class="sym">:=</span> chameleon <span class="sym">]</span>       ifFalse<span class="sym">: [</span> <span class="kwa">self</span> organizeMeetingWith<span class="sym">:</span> chameleon<span class="sym">.</span> first <span class="sym">:=</span> <span class="kwa">nil</span> <span class="sym">] ]! !!</span>MeetingPlace methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>initialize    mutex <span class="sym">:=</span> Semaphore forMutualExclusion<span class="sym">.</span>    total <span class="sym">:=</span> <span class="num">0</span><span class="sym">! !!</span>MeetingPlace class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>forMeetings<span class="sym">:</span> maxMeetings    <span class="sym">^</span><span class="kwa">super</span> new   initialize<span class="sym">;</span>   max<span class="sym">:</span> maxMeetings<span class="sym">;</span>   yourself<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>chameneos<span class="sym">:</span> n   <span class="sym">|</span> c1 c2 c3 c4 mp <span class="sym">|</span>   c1 <span class="sym">:=</span> Chameleon color<span class="sym">: #</span>blue<span class="sym">.</span>   c2 <span class="sym">:=</span> Chameleon color<span class="sym">: #</span>red<span class="sym">.</span>   c3 <span class="sym">:=</span> Chameleon color<span class="sym">: #</span>yellow<span class="sym">.</span>   c4 <span class="sym">:=</span> Chameleon color<span class="sym">: #</span>blue<span class="sym">.</span>   mp <span class="sym">:=</span> MeetingPlace forMeetings<span class="sym">:</span> n<span class="sym">.</span>   c1 fork<span class="sym">:</span> mp<span class="sym">.</span>   c2 fork<span class="sym">:</span> mp<span class="sym">.</span>   c3 fork<span class="sym">:</span> mp<span class="sym">.</span>   c4 fork<span class="sym">:</span> mp<span class="sym">.</span>   c1 wait<span class="sym">.</span>   c2 wait<span class="sym">.</span>   c3 wait<span class="sym">.</span>   c4 wait<span class="sym">.   ^</span>c1 meetings <span class="sym">+</span> c2 meetings <span class="sym">+</span> c3 meetings <span class="sym">+</span> c4 meetings<span class="sym">! !!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmark scripts'</span><span class="sym">!</span>chameneos   <span class="kwa">self</span> stdout      nextPutAll<span class="sym">: (</span><span class="kwa">self</span> chameneos<span class="sym">:</span> <span class="kwa">self</span> arg<span class="sym">)</span> printString<span class="sym">;</span>       nextPut<span class="sym">:</span> Character lf<span class="sym">.   ^</span><span class="str">''</span><span class="sym">! !</span>
