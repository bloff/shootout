<span class="hl com">(* binarytrees.ml</span>
<span class="hl com"> *</span>
<span class="hl com"> * The Computer Language Shootout</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Troestler Christophe</span>
<span class="hl com"> * De-optimized by Isaac Gouy</span>
<span class="hl com"> *)</span>

<span class="hl kwa">type</span> 'a tree <span class="hl sym">=</span> Empty <span class="hl sym">|</span> Node <span class="hl kwa">of</span> 'a tree <span class="hl sym">*</span> 'a <span class="hl sym">*</span> 'a tree

<span class="hl kwa">let rec</span> make i d <span class="hl sym">=</span>
<span class="hl com">(* if d = 0 then Empty *)</span>
  <span class="hl kwa">if</span> d <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwd">Node</span><span class="hl sym">(</span>Empty<span class="hl sym">,</span> i<span class="hl sym">,</span> Empty<span class="hl sym">)</span>
  <span class="hl kwa">else let</span> i2 <span class="hl sym">=</span> <span class="hl num">2</span> <span class="hl sym">*</span> i <span class="hl kwa">and</span> d <span class="hl sym">=</span> d <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span> <span class="hl kwd">Node</span><span class="hl sym">(</span><span class="hl kwd">make</span> <span class="hl sym">(</span>i2 <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span> d<span class="hl sym">,</span> i<span class="hl sym">,</span> make i2 d<span class="hl sym">)</span>

<span class="hl kwa">let rec</span> check <span class="hl sym">=</span> <span class="hl kwa">function</span> Empty <span class="hl sym">-&gt;</span> <span class="hl num">0</span> <span class="hl sym">|</span> <span class="hl kwd">Node</span><span class="hl sym">(</span>l<span class="hl sym">,</span> i<span class="hl sym">,</span> r<span class="hl sym">) -&gt;</span> i <span class="hl sym">+</span> check l <span class="hl sym">-</span> check r


<span class="hl kwa">let</span> min_depth <span class="hl sym">=</span> <span class="hl num">4</span>
<span class="hl kwa">let</span> max_depth <span class="hl sym">= (</span><span class="hl kwa">let</span> n <span class="hl sym">=</span> <span class="hl kwa">try</span> <span class="hl kwd">int_of_string</span><span class="hl sym">(</span>Array.get Sys.argv <span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">with</span> _ <span class="hl sym">-&gt;</span> <span class="hl num">10</span> <span class="hl kwa">in</span>
                 <span class="hl kwd">max</span> <span class="hl sym">(</span>min_depth <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span> n<span class="hl sym">)</span>
<span class="hl kwa">let</span> stretch_depth <span class="hl sym">=</span> max_depth <span class="hl sym">+</span> <span class="hl num">1</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  <span class="hl com">(* Gc.set { (Gc.get()) with Gc.minor_heap_size = 1024 * 1024 }; *)</span>
  <span class="hl kwa">let</span> c <span class="hl sym">=</span> <span class="hl kwd">check</span> <span class="hl sym">(</span>make <span class="hl num">0</span> stretch_depth<span class="hl sym">)</span> <span class="hl kwa">in</span>
  Printf.printf <span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> stretch_depth c

<span class="hl kwa">let</span> long_lived_tree <span class="hl sym">=</span> make <span class="hl num">0</span> max_depth

<span class="hl kwa">let rec</span> loop_depths d <span class="hl sym">=</span>
  <span class="hl kwa">if</span> d <span class="hl sym">&lt;=</span> max_depth <span class="hl kwa">then</span>
    <span class="hl kwa">let</span> niter <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">lsl</span> <span class="hl sym">(</span>max_depth <span class="hl sym">-</span> d <span class="hl sym">+</span> min_depth<span class="hl sym">)</span> <span class="hl kwa">and</span> c <span class="hl sym">=</span> ref <span class="hl num">0</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> niter <span class="hl kwa">do</span> c <span class="hl sym">:= !</span>c <span class="hl sym">+</span> <span class="hl kwd">check</span><span class="hl sym">(</span>make i d<span class="hl sym">) +</span> <span class="hl kwd">check</span><span class="hl sym">(</span><span class="hl kwd">make</span> <span class="hl sym">(-</span>i<span class="hl sym">)</span> d<span class="hl sym">)</span> <span class="hl kwa">done</span><span class="hl sym">;</span>
    Printf.printf <span class="hl str">&quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> niter<span class="hl sym">)</span> d <span class="hl sym">!</span>c<span class="hl sym">;</span>
    <span class="hl kwd">loop_depths</span> <span class="hl sym">(</span>d <span class="hl sym">+</span> <span class="hl num">2</span><span class="hl sym">)</span>

<span class="hl kwa">let</span> <span class="hl sym">() =</span>
  loop_depths min_depth<span class="hl sym">;</span>
  Printf.printf <span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
    <span class="hl kwd">max_depth</span> <span class="hl sym">(</span>check long_lived_tree<span class="hl sym">)</span>

