<span class="hl com">{-# OPTIONS -O2 -fbang-patterns -optc-O3 #-}</span>

<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">--   http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--   Sterling Clover's translation of Tim Hochberg's Clean implementation</span>

<span class="hl kwa">module</span> Main <span class="hl kwa">where</span>
<span class="hl kwa">import</span> System.Environment
<span class="hl kwa">import</span> Data.Bits
<span class="hl kwa">import</span> Data.List
<span class="hl kwa">import</span> Data.Array.IArray
<span class="hl kwa">import</span> Data.Array.Unboxed
<span class="hl kwa">import</span> Control.Arrow

<span class="hl slc">--- The Board ---</span>
n_elem <span class="hl sym">=</span> <span class="hl num">5</span>
n_col <span class="hl sym">=</span> <span class="hl num">5</span>
n_row <span class="hl sym">=</span> <span class="hl num">10</span>

m_top <span class="hl sym">::</span> Mask
m_top <span class="hl sym">=</span> <span class="hl num">0x1F</span>

cells <span class="hl sym">:: [</span>Cell<span class="hl sym">]</span>
cells <span class="hl sym">= [</span><span class="hl num">0</span>.<span class="hl num">.49</span><span class="hl sym">]</span>

colors <span class="hl sym">:: [</span>Color<span class="hl sym">]</span>
colors <span class="hl sym">= [</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">]</span>

cellAt x y <span class="hl sym">=</span> x <span class="hl sym">+</span> n_col <span class="hl sym">*</span> y
coordOf i <span class="hl sym">=</span> snd <span class="hl sym">&amp;&amp;&amp;</span> fst $ i `quotRem` n_col
isValid x y <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">&lt;=</span> x <span class="hl sym">&amp;&amp;</span> x <span class="hl sym">&lt;</span> n_col <span class="hl sym">&amp;&amp;</span> <span class="hl num">0</span> <span class="hl sym">&lt;=</span> y <span class="hl sym">&amp;&amp;</span> y <span class="hl sym">&lt;</span> n_row

<span class="hl slc">--- Piece Operations ---</span>
<span class="hl kwa">data</span> Direction <span class="hl sym">=</span> E <span class="hl sym">|</span> SE <span class="hl sym">|</span> SW <span class="hl sym">|</span> W <span class="hl sym">|</span> NW <span class="hl sym">|</span> NE <span class="hl kwa">deriving</span> <span class="hl sym">(</span>Enum<span class="hl sym">,</span> Eq<span class="hl sym">,</span> Ord<span class="hl sym">)</span>
<span class="hl kwa">type</span> Piece <span class="hl sym">= [</span>Direction<span class="hl sym">]</span>
<span class="hl kwa">type</span> CellCoord <span class="hl sym">= (</span><span class="hl kwb">Int</span><span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">)</span>
<span class="hl kwa">type</span> Mask <span class="hl sym">=</span> <span class="hl kwb">Int</span><span class="hl sym">;</span> <span class="hl kwa">type</span> Color <span class="hl sym">=</span> <span class="hl kwb">Int</span><span class="hl sym">;</span> <span class="hl kwa">type</span> Row <span class="hl sym">=</span> <span class="hl kwb">Int</span><span class="hl sym">;</span>
<span class="hl kwa">type</span> Col <span class="hl sym">=</span> <span class="hl kwb">Int</span><span class="hl sym">;</span> <span class="hl kwa">type</span> Tag <span class="hl sym">=</span> <span class="hl kwb">Int</span><span class="hl sym">;</span> <span class="hl kwa">type</span> Cell <span class="hl sym">=</span> <span class="hl kwb">Int</span>
<span class="hl kwa">type</span> Solution <span class="hl sym">= [</span>Mask<span class="hl sym">]</span>

pieces <span class="hl sym">::</span> Array <span class="hl kwb">Int</span> Piece
pieces <span class="hl sym">=</span> array <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">9</span><span class="hl sym">)</span> $ zip <span class="hl sym">[</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">]</span> $
         <span class="hl sym">[[</span>E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  SE<span class="hl sym">],</span>
	  <span class="hl sym">[</span>SE<span class="hl sym">,</span> SW<span class="hl sym">,</span> W<span class="hl sym">,</span>  SW<span class="hl sym">],</span>
	  <span class="hl sym">[</span>W<span class="hl sym">,</span>  W<span class="hl sym">,</span>  SW<span class="hl sym">,</span> SE<span class="hl sym">],</span>
	  <span class="hl sym">[</span>E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  SW<span class="hl sym">,</span> SE<span class="hl sym">],</span>
	  <span class="hl sym">[</span>NW<span class="hl sym">,</span> W<span class="hl sym">,</span>  NW<span class="hl sym">,</span> SE<span class="hl sym">,</span> SW<span class="hl sym">],</span>
	  <span class="hl sym">[</span>E<span class="hl sym">,</span>  E<span class="hl sym">,</span>  NE<span class="hl sym">,</span> W<span class="hl sym">],</span>
	  <span class="hl sym">[</span>NW<span class="hl sym">,</span> NE<span class="hl sym">,</span> NE<span class="hl sym">,</span> W<span class="hl sym">],</span>
	  <span class="hl sym">[</span>NE<span class="hl sym">,</span> SE<span class="hl sym">,</span> E<span class="hl sym">,</span>  NE<span class="hl sym">],</span>
	  <span class="hl sym">[</span>SE<span class="hl sym">,</span> SE<span class="hl sym">,</span> E<span class="hl sym">,</span>  SE<span class="hl sym">],</span>
	  <span class="hl sym">[</span>E<span class="hl sym">,</span>  NW<span class="hl sym">,</span> NW<span class="hl sym">,</span> NW<span class="hl sym">]]</span>

permutations <span class="hl sym">::</span> Piece <span class="hl sym">-&gt; [</span>Piece<span class="hl sym">]</span>
permutations p <span class="hl sym">=</span> take <span class="hl num">12</span> <span class="hl sym">(</span>perms p<span class="hl sym">)</span>
    <span class="hl kwa">where</span>
      perms p <span class="hl sym">=</span> p<span class="hl sym">:(</span>flip p<span class="hl sym">) :</span> perms <span class="hl sym">(</span>rotate p<span class="hl sym">)</span>
      rotate piece <span class="hl sym">=</span> map r piece
          <span class="hl kwa">where</span> r E  <span class="hl sym">=</span> NE
                r NE <span class="hl sym">=</span> NW
                r NW <span class="hl sym">=</span> W
                r W  <span class="hl sym">=</span> SW
                r SW <span class="hl sym">=</span> SE
                r SE <span class="hl sym">=</span> E
      flip piece <span class="hl sym">=</span> map f piece
          <span class="hl kwa">where</span> f E  <span class="hl sym">=</span> W
                f NE <span class="hl sym">=</span> NW
                f NW <span class="hl sym">=</span> NE
                f W  <span class="hl sym">=</span> E
                f SW <span class="hl sym">=</span> SE
                f SE <span class="hl sym">=</span> SW

<span class="hl slc">--- Mask Operations ----</span>
untag <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Mask
untag mask   <span class="hl sym">=</span> mask .<span class="hl sym">&amp;</span>. <span class="hl num">0x1ffffff</span>

retag <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Tag <span class="hl sym">-&gt;</span> Mask
retag mask n <span class="hl sym">=</span> untag mask .<span class="hl sym">|</span>. n `shiftL` <span class="hl num">25</span>

tagof <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Tag
tagof mask   <span class="hl sym">=</span> mask `shiftR` <span class="hl num">25</span>

tag <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Tag <span class="hl sym">-&gt;</span> Mask
tag   mask n <span class="hl sym">=</span> mask .<span class="hl sym">|</span>. n `shiftL` <span class="hl num">25</span>

count1s <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span>
count1s i
    <span class="hl sym">|</span> i <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl sym">|</span> i .<span class="hl sym">&amp;</span>. <span class="hl num">1</span> <span class="hl sym">==</span> <span class="hl num">1</span> <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">+</span> count1s <span class="hl sym">(</span>i `shiftR` <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> count1s <span class="hl sym">(</span>i `shiftR` <span class="hl num">1</span><span class="hl sym">)</span>

first0 <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span>
first0 i
    <span class="hl sym">|</span> i .<span class="hl sym">&amp;</span>. <span class="hl num">1</span> <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">+</span> first0 <span class="hl sym">(</span>i `shiftR` <span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl slc">--- Making the Bitmasks ---</span>
mod2 x <span class="hl sym">=</span> x .<span class="hl sym">&amp;</span>. <span class="hl num">1</span>
packSize a b <span class="hl sym">=</span> a<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">+</span>b
unpackSize n <span class="hl sym">=</span> quotRem n <span class="hl num">5</span>

move <span class="hl sym">::</span> Direction <span class="hl sym">-&gt;</span> CellCoord <span class="hl sym">-&gt;</span> CellCoord
move E  <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">)</span>
move W  <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">)</span>
move NE <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">+(</span>mod2 y<span class="hl sym">),</span>   y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
move NW <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">+(</span>mod2 y<span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
move SE <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">+(</span>mod2 y<span class="hl sym">),</span>   y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
move SW <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) = (</span>x<span class="hl sym">+(</span>mod2 y<span class="hl sym">)-</span><span class="hl num">1</span><span class="hl sym">,</span> y<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>

pieceBounds <span class="hl sym">::</span> Piece <span class="hl sym">-&gt;</span> <span class="hl kwb">Bool</span> <span class="hl sym">-&gt; (</span><span class="hl kwb">Int</span><span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">,</span> <span class="hl kwb">Int</span><span class="hl sym">)</span>
pieceBounds piece isodd <span class="hl sym">=</span> bnds piece <span class="hl num">0</span> y0 <span class="hl num">0</span> y0 <span class="hl num">0</span> y0
  <span class="hl kwa">where</span>
    y0 <span class="hl sym">|</span> isodd <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> <span class="hl num">0</span>
    bnds <span class="hl sym">[]</span> _ _ xmin ymin xmax ymax <span class="hl sym">= (</span>xmin<span class="hl sym">,</span> ymin<span class="hl sym">,</span> xmax<span class="hl sym">,</span> ymax<span class="hl sym">)</span>
    bnds <span class="hl sym">(</span>d<span class="hl sym">:</span>rest<span class="hl sym">)</span> x y xmin ymin xmax ymax <span class="hl sym">=</span>
        bnds rest x' y' <span class="hl sym">(</span>min x' xmin<span class="hl sym">) (</span>min y' ymin<span class="hl sym">) (</span>max x' xmax<span class="hl sym">) (</span>max y' ymax<span class="hl sym">)</span>
            <span class="hl kwa">where</span> <span class="hl sym">(</span>x'<span class="hl sym">,</span> y'<span class="hl sym">) =</span> move d <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">)</span>

pieceMask <span class="hl sym">::</span> Piece <span class="hl sym">-&gt; (</span>Mask<span class="hl sym">,</span> Mask<span class="hl sym">)</span>
pieceMask piece
    <span class="hl sym">|</span> odd y1    <span class="hl sym">= (</span>tag <span class="hl sym">(</span>msk piece x2 y2 <span class="hl num">0</span><span class="hl sym">) (</span>packSize w2 h2<span class="hl sym">),</span>
                   tag <span class="hl sym">(</span>msk piece x1 <span class="hl sym">(</span>y1<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">0</span> `shiftR` n_col<span class="hl sym">) (</span>packSize w1 h1<span class="hl sym">))</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">= (</span>tag <span class="hl sym">(</span>msk piece x1 y1 <span class="hl num">0</span><span class="hl sym">) (</span>packSize w1 h1<span class="hl sym">),</span>
                   tag <span class="hl sym">(</span>msk piece x2 <span class="hl sym">(</span>y2<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl num">0</span> `shiftR` n_col<span class="hl sym">) (</span>packSize w2 h2<span class="hl sym">))</span>
    <span class="hl kwa">where</span>
      <span class="hl sym">(</span>xmin<span class="hl sym">,</span> ymin<span class="hl sym">,</span> xmax<span class="hl sym">,</span> ymax<span class="hl sym">) =</span> pieceBounds piece <span class="hl kwa">False</span>
      <span class="hl sym">(</span>x1<span class="hl sym">,</span> y1<span class="hl sym">) = (-</span>xmin<span class="hl sym">, -</span>ymin<span class="hl sym">)</span>
      w1 <span class="hl sym">=</span> xmax <span class="hl sym">-</span> xmin
      h1 <span class="hl sym">=</span> ymax <span class="hl sym">-</span> ymin
      <span class="hl sym">(</span>xmin'<span class="hl sym">,</span> ymin'<span class="hl sym">,</span> xmax'<span class="hl sym">,</span> ymax'<span class="hl sym">) =</span> pieceBounds piece <span class="hl kwa">True</span>
      <span class="hl sym">(</span>x2<span class="hl sym">,</span> y2<span class="hl sym">) = (-</span>xmin'<span class="hl sym">, (-</span>ymin'<span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">)</span>
      w2 <span class="hl sym">=</span> xmax' <span class="hl sym">-</span> xmin'
      h2 <span class="hl sym">=</span> ymax' <span class="hl sym">-</span> ymin'
      msk <span class="hl sym">::</span> Piece <span class="hl sym">-&gt;</span> Col <span class="hl sym">-&gt;</span> Row <span class="hl sym">-&gt;</span> Mask <span class="hl sym">-&gt;</span> Mask
      msk <span class="hl sym">[]</span> x y m <span class="hl sym">=</span> m `setBit` cellAt x y
      msk <span class="hl sym">(</span>d<span class="hl sym">:</span>rest<span class="hl sym">)</span> x y m <span class="hl sym">=</span> msk rest x' y' <span class="hl sym">(</span>m `setBit` cellAt x y<span class="hl sym">)</span>
          <span class="hl kwa">where</span> <span class="hl sym">(</span>x'<span class="hl sym">,</span> y'<span class="hl sym">) =</span> move d <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">)</span>

templatesForColor <span class="hl sym">::</span> Color <span class="hl sym">-&gt; ([</span>Mask<span class="hl sym">], [</span>Mask<span class="hl sym">])</span>
templatesForColor c <span class="hl sym">= (</span>unzip . map pieceMask<span class="hl sym">)</span> perms
    <span class="hl kwa">where</span> perms <span class="hl sym">|</span> c <span class="hl sym">==</span> <span class="hl num">5</span> <span class="hl sym">=</span> take <span class="hl num">6</span> ps <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> ps
          ps <span class="hl sym">=</span> permutations $ pieces <span class="hl sym">!</span> c

<span class="hl slc">--- Looking for Islands ---</span>
noLineIslands <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Cell <span class="hl sym">-&gt;</span> Cell <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Bool</span>
noLineIslands mask start stop step
    <span class="hl sym">| (</span>fnd testBit . fnd <span class="hl sym">((</span>not .<span class="hl sym">)</span> . testBit<span class="hl sym">)</span> . fnd testBit<span class="hl sym">)</span>  start <span class="hl sym">&gt;</span> stop  <span class="hl sym">=</span> <span class="hl kwa">True</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> <span class="hl kwa">False</span>
  <span class="hl kwa">where</span>
    fnd test <span class="hl sym">!</span>x
        <span class="hl sym">|</span> x <span class="hl sym">&gt;=</span> <span class="hl num">25</span>     <span class="hl sym">=</span> <span class="hl num">25</span>
        <span class="hl sym">|</span> test mask x <span class="hl sym">=</span> x
        <span class="hl sym">|</span> otherwise   <span class="hl sym">=</span> fnd test <span class="hl sym">(</span>x<span class="hl sym">+</span>step<span class="hl sym">)</span>

noLeftIslands <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> <span class="hl kwb">Bool</span>
noLeftIslands  mask  <span class="hl sym">=</span> noLineIslands mask <span class="hl num">0 20 5</span>
noRightIslands mask  <span class="hl sym">=</span> noLineIslands mask <span class="hl num">4 24 5</span>

noIslands <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> <span class="hl kwb">Bool</span>
noIslands board <span class="hl sym">=</span> noisles board <span class="hl sym">(</span>count1s board<span class="hl sym">)</span>

noisles <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl sym">-&gt;</span> <span class="hl kwb">Bool</span>
noisles _ <span class="hl num">30</span> <span class="hl sym">=</span> <span class="hl kwa">True</span>
noisles board ones
    <span class="hl sym">| (</span>ones' <span class="hl sym">-</span> ones<span class="hl sym">)</span> `rem` n_elem <span class="hl sym">/=</span> <span class="hl num">0</span> <span class="hl sym">=</span> <span class="hl kwa">False</span>
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> noisles board' ones'
    <span class="hl kwa">where</span> board' <span class="hl sym">=</span> fill board <span class="hl sym">(</span>coordOf <span class="hl sym">(</span>first0 board<span class="hl sym">))</span>
          ones' <span class="hl sym">=</span> count1s board'

fill <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> CellCoord <span class="hl sym">-&gt;</span> Mask
fill m cc&#64;<span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">)</span>
    <span class="hl sym">|</span> x <span class="hl sym">&lt;</span> <span class="hl num">0</span> <span class="hl sym">||</span> x <span class="hl sym">&gt;=</span> n_col <span class="hl sym">=</span> m
    <span class="hl sym">|</span> y <span class="hl sym">&lt;</span> <span class="hl num">0</span> <span class="hl sym">||</span> y <span class="hl sym">&gt;=</span> <span class="hl num">6</span>     <span class="hl sym">=</span> m
    <span class="hl sym">|</span> testBit m i <span class="hl sym">=</span> m
    <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> foldl <span class="hl sym">(</span>\m d <span class="hl sym">-&gt;</span> fill m <span class="hl sym">(</span>move d cc<span class="hl sym">)) (</span>setBit m i<span class="hl sym">)</span>
                  <span class="hl sym">[</span>E<span class="hl sym">,</span> NE<span class="hl sym">,</span> NW<span class="hl sym">,</span> W<span class="hl sym">,</span> SW<span class="hl sym">,</span> SE<span class="hl sym">]</span>
    <span class="hl kwa">where</span> i <span class="hl sym">=</span> cellAt x y

<span class="hl slc">--- More Mask Generation ---</span>
masksForColor <span class="hl sym">::</span> Color <span class="hl sym">-&gt; [(</span>Row<span class="hl sym">,</span> Mask<span class="hl sym">)]</span>
masksForColor c <span class="hl sym">=</span> concatMap atCell cells
  <span class="hl kwa">where</span>
    <span class="hl sym">(</span>evens<span class="hl sym">,</span> odds<span class="hl sym">) =</span> templatesForColor c
    atCell n
        <span class="hl sym">|</span> even y <span class="hl sym">= [(</span>y<span class="hl sym">,</span> retag <span class="hl sym">(</span>m `shiftL` x<span class="hl sym">)</span> c<span class="hl sym">) |</span> m <span class="hl sym">&lt;-</span> evens <span class="hl sym">,</span> isok m x y<span class="hl sym">]</span>
        <span class="hl sym">|</span> odd  y <span class="hl sym">= [(</span>y<span class="hl sym">,</span> retag <span class="hl sym">(</span>m `shiftL` x<span class="hl sym">)</span> c<span class="hl sym">) |</span> m <span class="hl sym">&lt;-</span> odds  <span class="hl sym">,</span> isok m x y<span class="hl sym">]</span>
        <span class="hl kwa">where</span> <span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">) =</span> coordOf n

isok <span class="hl sym">::</span> Mask <span class="hl sym">-&gt;</span> Row <span class="hl sym">-&gt;</span> Col <span class="hl sym">-&gt;</span> <span class="hl kwb">Bool</span>
isok mask x y <span class="hl sym">=</span>
    isValid <span class="hl sym">(</span>x<span class="hl sym">+</span>width<span class="hl sym">) (</span>y<span class="hl sym">+</span>height<span class="hl sym">) &amp;&amp;</span>
            <span class="hl kwa">case</span> <span class="hl sym">(</span>y <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">,</span> y<span class="hl sym">+</span>height<span class="hl sym">==</span><span class="hl num">9</span><span class="hl sym">)</span> <span class="hl kwa">of</span>
              <span class="hl sym">(</span><span class="hl kwa">False</span><span class="hl sym">,</span> <span class="hl kwa">False</span><span class="hl sym">) -&gt;</span> noLeftIslands mask' <span class="hl sym">&amp;&amp;</span> noRightIslands mask'
              <span class="hl sym">(</span><span class="hl kwa">False</span><span class="hl sym">,</span> <span class="hl kwa">True</span><span class="hl sym">)  -&gt;</span> noIslands <span class="hl sym">(</span>mask' `shiftL` <span class="hl sym">(</span>n_col <span class="hl sym">* (</span>y <span class="hl sym">-</span> <span class="hl num">4</span><span class="hl sym">)))</span>
              <span class="hl sym">(</span><span class="hl kwa">True</span><span class="hl sym">,</span> _ <span class="hl sym">) -&gt;</span> noIslands mask'
    <span class="hl kwa">where</span> <span class="hl sym">(</span>width<span class="hl sym">,</span> height<span class="hl sym">) =</span> unpackSize <span class="hl sym">(</span>tagof mask<span class="hl sym">)</span>
          mask' <span class="hl sym">=</span> untag mask `shiftL` x

masksAtCell <span class="hl sym">::</span> Array <span class="hl sym">(</span>Row<span class="hl sym">,</span>Col<span class="hl sym">) (</span>Array Color <span class="hl sym">[</span>Mask<span class="hl sym">])</span>
masksAtCell <span class="hl sym">=</span> trps $ map <span class="hl sym">(</span>masksAt cells . masksForColor<span class="hl sym">)</span> colors

masksAt <span class="hl sym">:: [</span><span class="hl kwb">Int</span><span class="hl sym">] -&gt; [(</span>Row<span class="hl sym">,</span>Mask<span class="hl sym">)]-&gt; [[</span>Mask<span class="hl sym">]]</span>
masksAt <span class="hl sym">[]</span> _ <span class="hl sym">= []</span>
masksAt <span class="hl sym">(</span>n<span class="hl sym">:</span>ns<span class="hl sym">) !</span>masks <span class="hl sym">=</span> map snd t <span class="hl sym">:</span> masksAt ns f
    <span class="hl kwa">where</span>
      <span class="hl sym">(</span>t<span class="hl sym">,</span> f<span class="hl sym">) =</span> partition test masks
      test <span class="hl sym">(</span>r<span class="hl sym">,</span> m<span class="hl sym">) =</span> n' <span class="hl sym">&gt;=</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp;</span> n' <span class="hl sym">&lt;</span> <span class="hl num">25</span> <span class="hl sym">&amp;&amp;</span>  m `testBit` n'
          <span class="hl kwa">where</span> n' <span class="hl sym">=</span> n <span class="hl sym">- (</span>n_col <span class="hl sym">*</span> r<span class="hl sym">)</span>

trps <span class="hl sym">:: [[[</span>Mask<span class="hl sym">]]] -&gt;</span> Array <span class="hl sym">(</span>Row<span class="hl sym">,</span> Col<span class="hl sym">) (</span>Array Color <span class="hl sym">[</span>Mask<span class="hl sym">])</span>
trps <span class="hl sym">!</span>a <span class="hl sym">=</span> array <span class="hl sym">((</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">),(</span><span class="hl num">9</span><span class="hl sym">,</span><span class="hl num">4</span><span class="hl sym">))</span> $ concatMap <span class="hl sym">(</span>uncurry <span class="hl sym">(</span>map . first . <span class="hl sym">(,)))</span> $
          zip <span class="hl sym">[</span><span class="hl num">0</span>.<span class="hl num">.9</span><span class="hl sym">] [</span>copy <span class="hl sym">!!</span> y <span class="hl sym">|</span> y <span class="hl sym">&lt;- [</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">,</span><span class="hl num">4</span><span class="hl sym">,</span><span class="hl num">5</span><span class="hl sym">,</span><span class="hl num">6</span><span class="hl sym">]]</span>
    <span class="hl kwa">where</span>
      copy <span class="hl sym">= [ [(</span>x<span class="hl sym">,</span>copy' <span class="hl sym">(</span>cellAt x y<span class="hl sym">)) |</span> x <span class="hl sym">&lt;- [</span><span class="hl num">0</span>..n_col<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]] |</span>
               y <span class="hl sym">&lt;- [</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">5</span><span class="hl sym">,</span><span class="hl num">6</span><span class="hl sym">,</span><span class="hl num">7</span><span class="hl sym">,</span><span class="hl num">8</span><span class="hl sym">,</span><span class="hl num">9</span><span class="hl sym">]]</span>
      copy' cell <span class="hl sym">=</span> array <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">9</span><span class="hl sym">)</span> $ map <span class="hl sym">(</span>\clr <span class="hl sym">-&gt; (</span>clr<span class="hl sym">,</span>a <span class="hl sym">!!</span> clr <span class="hl sym">!!</span> cell<span class="hl sym">))</span> colors

<span class="hl slc">--- Formatting ---</span>
format <span class="hl sym">::</span> <span class="hl kwb">Bool</span> <span class="hl sym">-&gt;</span> String <span class="hl sym">-&gt;</span> String
format _ <span class="hl sym">[] =</span> <span class="hl str">&quot;&quot;</span>
format isodd chars <span class="hl sym">|</span> isodd <span class="hl sym">=</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">++</span> str <span class="hl sym">|</span> otherwise <span class="hl sym">=</span> str
        <span class="hl kwa">where</span>
          <span class="hl sym">(</span>cur<span class="hl sym">,</span> rest<span class="hl sym">) =</span> splitAt <span class="hl num">5</span> chars
          str <span class="hl sym">=</span>  intersperse ' ' cur <span class="hl sym">++</span> <span class="hl str">&quot; \n&quot;</span> <span class="hl sym">++</span> format <span class="hl sym">(</span>not isodd<span class="hl sym">)</span> rest

toString <span class="hl sym">::</span> Solution <span class="hl sym">-&gt;</span> String
toString <span class="hl sym">!</span>masks <span class="hl sym">=</span> map color cells
    <span class="hl kwa">where</span>
      masksWithRows <span class="hl sym">=</span> withRows <span class="hl num">0 0</span> <span class="hl sym">(</span>reverse masks<span class="hl sym">)</span>
      withRows _ _ <span class="hl sym">[] = []</span>
      withRows board r <span class="hl sym">(</span>m<span class="hl sym">:</span>rest<span class="hl sym">) = (</span>r'<span class="hl sym">,</span> m<span class="hl sym">) :</span> withRows board' r' rest
          <span class="hl kwa">where</span> delta <span class="hl sym">=</span> first0 board `quot` n_col
                board' <span class="hl sym">=</span> board `shiftR`  <span class="hl sym">(</span>delta <span class="hl sym">*</span> n_col<span class="hl sym">)</span> .<span class="hl sym">|</span>. untag m
                r' <span class="hl sym">=</span> r<span class="hl sym">+</span>delta
      color n <span class="hl sym">=</span> maybe '.' <span class="hl sym">((</span><span class="hl str">&quot;0123456789&quot;</span> <span class="hl sym">!!)</span> . tagof . snd<span class="hl sym">)</span>
                <span class="hl sym">(</span>find matches masksWithRows<span class="hl sym">)</span>
          <span class="hl kwa">where</span>
            matches <span class="hl sym">(</span>r<span class="hl sym">,</span> m<span class="hl sym">)</span>
              <span class="hl sym">|</span> n' <span class="hl sym">&lt;</span> <span class="hl num">0</span> <span class="hl sym">||</span> n' <span class="hl sym">&gt;</span> <span class="hl num">30</span>  <span class="hl sym">=</span> <span class="hl kwa">False</span>
              <span class="hl sym">|</span> otherwise  <span class="hl sym">= (</span>untag m<span class="hl sym">)</span> `testBit` n'
              <span class="hl kwa">where</span> n' <span class="hl sym">=</span> n <span class="hl sym">- (</span>n_col <span class="hl sym">*</span> r<span class="hl sym">)</span>

<span class="hl slc">--- Generate the solutions ---</span>
firstZero <span class="hl sym">::</span> UArray <span class="hl kwb">Int Int</span>
firstZero <span class="hl sym">=</span> array <span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">31</span><span class="hl sym">)</span> $ zip <span class="hl sym">[</span><span class="hl num">0</span>.<span class="hl num">.31</span><span class="hl sym">]</span>
            <span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">4</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">3</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">5</span><span class="hl sym">]</span>

solutions <span class="hl sym">:: [</span>String<span class="hl sym">]</span>
solutions <span class="hl sym">=</span> solveCell <span class="hl num">0</span> colors <span class="hl num">0</span> <span class="hl sym">[] []</span>

solveCell <span class="hl sym">::</span> Row <span class="hl sym">-&gt; [</span>Color<span class="hl sym">] -&gt;</span> Mask <span class="hl sym">-&gt;</span> Solution <span class="hl sym">-&gt; [</span>String<span class="hl sym">] -&gt; [</span>String<span class="hl sym">]</span>
solveCell _ <span class="hl sym">[]</span> board soln results <span class="hl sym">=</span> <span class="hl kwa">let</span> s <span class="hl sym">=</span> toString soln
                                    <span class="hl kwa">in</span>  s<span class="hl sym">:(</span>reverse s<span class="hl sym">):</span>results
solveCell <span class="hl sym">!</span>row <span class="hl sym">!</span>todo <span class="hl sym">!</span>board <span class="hl sym">!</span>soln results
    <span class="hl sym">|</span> top<span class="hl sym">/=</span>m_top <span class="hl sym">=</span> foldr solveMask results
                   <span class="hl sym">[(</span>m<span class="hl sym">,</span> c<span class="hl sym">) |</span> c <span class="hl sym">&lt;-</span> todo<span class="hl sym">,</span> m  <span class="hl sym">&lt;-</span> masks <span class="hl sym">!</span> c<span class="hl sym">,</span>  board .<span class="hl sym">&amp;</span>. m <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">]</span>
    <span class="hl sym">|</span> otherwise  <span class="hl sym">=</span> solveCell <span class="hl sym">(</span>row<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> todo <span class="hl sym">(</span>board `shiftR` n_col<span class="hl sym">)</span> soln results
    <span class="hl kwa">where</span> top <span class="hl sym">=</span> board .<span class="hl sym">&amp;</span>. m_top
          masks <span class="hl sym">=</span> masksAtCell <span class="hl sym">! (</span>row<span class="hl sym">, (</span>firstZero <span class="hl sym">!</span> top<span class="hl sym">) )</span>
          solveMask <span class="hl sym">(!</span>m<span class="hl sym">,!</span>c<span class="hl sym">)</span> results <span class="hl sym">=</span>
              solveCell row <span class="hl sym">(</span>delete c todo<span class="hl sym">) (</span>untag m .<span class="hl sym">|</span>. board<span class="hl sym">) (</span>m<span class="hl sym">:</span>soln<span class="hl sym">)</span> results

main <span class="hl sym">=</span> <span class="hl kwa">do</span>
    n <span class="hl sym">&lt;-</span> return.read.head <span class="hl sym">=&lt;&lt;</span> getArgs
    <span class="hl kwa">let</span> nsolutions <span class="hl sym">=</span> take n solutions
    putStrLn $ <span class="hl sym">(</span>show $ length nsolutions<span class="hl sym">) ++</span> <span class="hl str">&quot; solutions found\n&quot;</span>
    putStrLn . format <span class="hl kwa">False</span> . minimum $ nsolutions
    putStrLn . format <span class="hl kwa">False</span> . maximum $ nsolutions
