<span class="hl com">{ The Computer Language Shootout</span>
<span class="hl com">  http://shootout.alioth.debian.org</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Ian Osgood</span>
<span class="hl com">  modified by Vincent Snijders</span>
<span class="hl com">}</span>
<span class="hl com">{$mode objfpc}</span><span class="hl com">{$inline on}</span><span class="hl com">{$I-}</span>

<span class="hl kwa">program</span> fasta<span class="hl sym">;</span>

<span class="hl kwa">uses</span> Math<span class="hl sym">;</span>

<span class="hl kwa">const</span> ALU <span class="hl sym">:</span> AnsiString <span class="hl sym">=</span>
  <span class="hl str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span> <span class="hl sym">+</span>
  <span class="hl str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span> <span class="hl sym">+</span>
  <span class="hl str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span> <span class="hl sym">+</span>
  <span class="hl str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span> <span class="hl sym">+</span>
  <span class="hl str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span> <span class="hl sym">+</span>
  <span class="hl str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span> <span class="hl sym">+</span>
  <span class="hl str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span><span class="hl sym">;</span>

<span class="hl kwa">const</span> codes <span class="hl sym">=</span> <span class="hl str">'acgtBDHKMNRSVWY'</span><span class="hl sym">;</span>

<span class="hl kwa">const</span> IUB <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.14</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">double</span> <span class="hl sym">= (</span> <span class="hl num">0.27</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">,</span>
  <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">,</span> <span class="hl num">0.02</span> <span class="hl sym">);</span>

<span class="hl kwa">const</span> HomoSap <span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">.</span><span class="hl num">.3</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">double</span> <span class="hl sym">= (</span>
  <span class="hl num">0.3029549426680</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">,</span>  <span class="hl num">0.3015094502008</span> <span class="hl sym">);</span>

<span class="hl kwa">const</span> LineLen <span class="hl sym">=</span> <span class="hl num">60</span><span class="hl sym">;</span>

<span class="hl kwa">type</span>
  TGene<span class="hl sym">=</span><span class="hl kwa">record</span>
    prob<span class="hl sym">:</span> <span class="hl kwb">double</span><span class="hl sym">;</span>
    code<span class="hl sym">:</span> <span class="hl kwb">char</span><span class="hl sym">;</span>
    dummy<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.7</span><span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">char</span><span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  PGene <span class="hl sym">= ^</span>TGene<span class="hl sym">;</span>

<span class="hl kwa">var</span>
  n <span class="hl sym">:</span> <span class="hl kwb">longint</span><span class="hl sym">;</span>
  Genes<span class="hl sym">:</span> <span class="hl kwa">array of</span> TGene<span class="hl sym">;</span>
  TextBuf<span class="hl sym">:</span> <span class="hl kwa">array</span><span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">..</span>$FFF<span class="hl sym">]</span> <span class="hl kwa">of</span> <span class="hl kwb">byte</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">fastaRepeat</span><span class="hl sym">(</span>n <span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">);</span>
<span class="hl kwa">var</span>
  sourceALU<span class="hl sym">:</span> ansistring<span class="hl sym">;</span>
  line<span class="hl sym">,</span> wrapALU <span class="hl sym">:</span> pchar<span class="hl sym">;</span>
  nulled <span class="hl sym">:</span> <span class="hl kwb">char</span><span class="hl sym">;</span>
  lenALU <span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  sourceALU <span class="hl sym">:=</span> ALU <span class="hl sym">+</span> <span class="hl kwd">copy</span><span class="hl sym">(</span>ALU<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> LineLen<span class="hl sym">);</span>
  line <span class="hl sym">:=</span> <span class="hl kwd">PChar</span><span class="hl sym">(</span>sourceALU<span class="hl sym">);</span>
  lenALU <span class="hl sym">:=</span> <span class="hl kwd">length</span><span class="hl sym">(</span>ALU<span class="hl sym">);</span>
  wrapALU <span class="hl sym">:= &#64;</span>sourceALU<span class="hl sym">[</span>lenALU<span class="hl sym">];</span>
  <span class="hl kwa">repeat</span>
    nulled <span class="hl sym">:=</span> line<span class="hl sym">[</span>LineLen<span class="hl sym">];</span>
    line<span class="hl sym">[</span>LineLen<span class="hl sym">] :=</span> <span class="hl esc">#0</span><span class="hl sym">;</span>
    <span class="hl kwd">writeln</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>line<span class="hl sym">,</span> LineLen<span class="hl sym">);</span>
    line<span class="hl sym">^ :=</span> nulled<span class="hl sym">;</span>
    <span class="hl kwa">if</span> line<span class="hl sym">&gt;</span>wrapALU <span class="hl kwa">then</span>
      <span class="hl kwd">dec</span><span class="hl sym">(</span>line<span class="hl sym">,</span> lenALU<span class="hl sym">);</span>
    n <span class="hl sym">:=</span> n <span class="hl sym">-</span> LineLen<span class="hl sym">;</span>
  <span class="hl kwa">until</span> n <span class="hl sym">&lt;=</span> LineLen<span class="hl sym">;</span>
  line<span class="hl sym">[</span>n<span class="hl sym">] :=</span> <span class="hl esc">#0</span><span class="hl sym">;</span>
  <span class="hl kwd">writeln</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">genRandom</span><span class="hl sym">(</span>limit <span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">):</span> <span class="hl kwb">double</span><span class="hl sym">;</span>
<span class="hl kwa">const</span>
  seed <span class="hl sym">:</span> <span class="hl kwb">integer</span> <span class="hl sym">=</span> <span class="hl num">42</span><span class="hl sym">;</span>
  IM <span class="hl sym">=</span> <span class="hl num">139968</span><span class="hl sym">;</span>
  IA <span class="hl sym">=</span> <span class="hl num">3877</span><span class="hl sym">;</span>
  IC <span class="hl sym">=</span> <span class="hl num">29573</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  seed <span class="hl sym">:= (</span>seed <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">)</span> <span class="hl kwa">mod</span> IM<span class="hl sym">;</span>
  genRandom <span class="hl sym">:=</span> limit <span class="hl sym">*</span> seed <span class="hl sym">* (</span><span class="hl num">1</span> <span class="hl sym">/</span> IM<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">InitGenes</span><span class="hl sym">(</span><span class="hl kwa">const</span> probs<span class="hl sym">:</span> <span class="hl kwa">array of</span> <span class="hl kwb">double</span><span class="hl sym">);</span>
<span class="hl kwa">var</span>
  i <span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span>
  SumProb<span class="hl sym">:</span> <span class="hl kwb">double</span><span class="hl sym">;</span>
<span class="hl kwa">begin</span>
  <span class="hl kwd">SetLength</span><span class="hl sym">(</span>Genes<span class="hl sym">,</span> <span class="hl kwd">length</span><span class="hl sym">(</span>probs<span class="hl sym">));</span>
  SumProb <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span> i <span class="hl sym">:=</span> <span class="hl kwd">low</span><span class="hl sym">(</span>probs<span class="hl sym">)</span> <span class="hl kwa">to</span> <span class="hl kwd">high</span><span class="hl sym">(</span>probs<span class="hl sym">)</span> <span class="hl kwa">do begin</span>
    SumProb <span class="hl sym">:=</span> SumProb <span class="hl sym">+</span> probs<span class="hl sym">[</span>i<span class="hl sym">];</span>
    Genes<span class="hl sym">[</span>i<span class="hl sym">].</span>prob <span class="hl sym">:=</span> SumProb<span class="hl sym">;</span>
    Genes<span class="hl sym">[</span>i<span class="hl sym">].</span>code <span class="hl sym">:=</span> codes<span class="hl sym">[</span>i<span class="hl sym">-</span><span class="hl kwd">low</span><span class="hl sym">(</span>probs<span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">];</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">fastaRandom</span><span class="hl sym">(</span>n <span class="hl sym">:</span> <span class="hl kwb">integer</span><span class="hl sym">;</span> <span class="hl kwa">const</span> probs<span class="hl sym">:</span> <span class="hl kwa">array of</span> <span class="hl kwb">double</span><span class="hl sym">);</span>
<span class="hl kwa">var</span>
  line <span class="hl sym">:</span> <span class="hl kwa">string</span><span class="hl sym">;</span>
  p <span class="hl sym">:</span> pchar<span class="hl sym">;</span>

  <span class="hl kwa">function</span> chooseCode <span class="hl sym">:</span> <span class="hl kwb">char</span><span class="hl sym">;</span> <span class="hl kwa">inline</span><span class="hl sym">;</span>
  <span class="hl kwa">var</span> r <span class="hl sym">:</span> <span class="hl kwb">double</span><span class="hl sym">;</span>
      Gene<span class="hl sym">:</span> PGene<span class="hl sym">;</span>
  <span class="hl kwa">begin</span>
    r <span class="hl sym">:=</span> <span class="hl kwd">genRandom</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>

    Gene <span class="hl sym">:= &#64;</span>Genes<span class="hl sym">[</span><span class="hl kwd">low</span><span class="hl sym">(</span>Genes<span class="hl sym">)];</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>r<span class="hl sym">&gt;=</span>Gene<span class="hl sym">^.</span>prob<span class="hl sym">)</span> <span class="hl kwa">do</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>Gene<span class="hl sym">);</span>
   result <span class="hl sym">:=</span> Gene<span class="hl sym">^.</span>Code<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  <span class="hl com">{ make gene array}</span>
  <span class="hl kwd">InitGenes</span><span class="hl sym">(</span>probs<span class="hl sym">);</span>

  <span class="hl kwd">SetLength</span><span class="hl sym">(</span>line<span class="hl sym">,</span>lineLen<span class="hl sym">);</span>
  <span class="hl kwa">while</span> n <span class="hl sym">&gt;</span> lineLen <span class="hl kwa">do</span>
  <span class="hl kwa">begin</span>
    p <span class="hl sym">:= &#64;</span>line<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span>p<span class="hl sym">&lt;=&#64;</span>line<span class="hl sym">[</span>lineLen<span class="hl sym">])</span> <span class="hl kwa">do begin</span>
      p<span class="hl sym">^ :=</span> chooseCode<span class="hl sym">;</span>
      <span class="hl kwd">inc</span><span class="hl sym">(</span>p<span class="hl sym">);</span>
    <span class="hl kwa">end</span><span class="hl sym">;</span>
    <span class="hl kwd">writeln</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
    n <span class="hl sym">:=</span> n <span class="hl sym">-</span> lineLen<span class="hl sym">;</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>

  <span class="hl kwd">SetLength</span><span class="hl sym">(</span>line<span class="hl sym">,</span>n<span class="hl sym">);</span>
  p <span class="hl sym">:= &#64;</span>line<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
  <span class="hl kwa">while</span> <span class="hl sym">(</span>p<span class="hl sym">&lt;=&#64;</span>line<span class="hl sym">[</span>n<span class="hl sym">])</span> <span class="hl kwa">do begin</span>
    p<span class="hl sym">^ :=</span> chooseCode<span class="hl sym">;</span>
    <span class="hl kwd">inc</span><span class="hl sym">(</span>p<span class="hl sym">);</span>
  <span class="hl kwa">end</span><span class="hl sym">;</span>
  <span class="hl kwd">writeln</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
  <span class="hl kwd">SetTextBuf</span><span class="hl sym">(</span>output<span class="hl sym">,</span> TextBuf<span class="hl sym">,</span> <span class="hl kwd">sizeof</span><span class="hl sym">(</span>TextBuf<span class="hl sym">));</span>
  <span class="hl kwd">val</span><span class="hl sym">(</span><span class="hl kwd">paramstr</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> n<span class="hl sym">);</span>

  <span class="hl kwd">writeln</span><span class="hl sym">(</span><span class="hl str">'&gt;ONE Homo sapiens alu'</span><span class="hl sym">);</span>
  <span class="hl kwd">fastaRepeat</span><span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">);</span>

  <span class="hl kwd">writeln</span><span class="hl sym">(</span><span class="hl str">'&gt;TWO IUB ambiguity codes'</span><span class="hl sym">);</span>
  <span class="hl kwd">fastaRandom</span><span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">,</span> IUB<span class="hl sym">);</span>

  <span class="hl kwd">writeln</span><span class="hl sym">(</span><span class="hl str">'&gt;THREE Homo sapiens frequency'</span><span class="hl sym">);</span>
  <span class="hl kwd">fastaRandom</span><span class="hl sym">(</span>n<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">,</span> HomoSap<span class="hl sym">);</span>
<span class="hl kwa">end</span><span class="hl sym">.</span>

