<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * Based on the CAL Open Quark version</span>
<span class="hl com"> * Contributed by Joseph Wong.</span>
<span class="hl com"> */</span>
<span class="hl kwa">module</span> Nsievebits<span class="hl sym">;</span>

<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Prelude <span class="hl kwa">using</span>
    <span class="hl kwa">typeConstructor</span> <span class="hl sym">=</span> Boolean<span class="hl sym">,</span> Int<span class="hl sym">,</span> String<span class="hl sym">;</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> eager<span class="hl sym">,</span> intToString<span class="hl sym">,</span> seq<span class="hl sym">,</span> stringToInt<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>Bits <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> bitwiseAnd<span class="hl sym">,</span> complement<span class="hl sym">,</span> shiftL<span class="hl sym">,</span> shiftR<span class="hl sym">,</span> shiftRUnsigned<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Core<span class="hl sym">.</span>String <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> replicate<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>Collections<span class="hl sym">.</span>List <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> head<span class="hl sym">;</span>
    <span class="hl sym">;</span>
<span class="hl kwa">import</span> Cal<span class="hl sym">.</span>IO<span class="hl sym">.</span>Console <span class="hl kwa">using</span>
    <span class="hl kwa">function</span> <span class="hl sym">=</span> printLine<span class="hl sym">;</span>
    <span class="hl sym">;</span>

<span class="hl com">/** A custom bitset implementation as an abstract data type. */</span>
<span class="hl kwa">data foreign unsafe import jvm private</span> <span class="hl str">&quot;int[]&quot;</span> <span class="hl kwa">private</span> BitSet<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;newArray&quot;</span> newArray <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> BitSet<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;subscriptArray&quot;</span>
    subscriptArray <span class="hl sym">::</span> BitSet <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;updateArray&quot;</span>
    updateArray <span class="hl sym">::</span> BitSet <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>

<span class="hl kwa">foreign unsafe import jvm</span> <span class="hl str">&quot;lengthArray&quot;</span> lengthArray <span class="hl sym">::</span> BitSet <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>

bitsetMask <span class="hl sym">::</span> Int<span class="hl sym">;</span>
bitsetMask <span class="hl sym">=</span> <span class="hl num">31</span> <span class="hl sym">::</span> Int<span class="hl sym">;</span>

bitsetShift <span class="hl sym">::</span> Int<span class="hl sym">;</span>
bitsetShift <span class="hl sym">=</span> <span class="hl num">5</span> <span class="hl sym">::</span> Int<span class="hl sym">;</span>

makeBitSet <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> BitSet<span class="hl sym">;</span>
makeBitSet <span class="hl sym">!</span>m <span class="hl sym">=</span> eager $ newArray <span class="hl sym">((</span>m <span class="hl sym">`</span>shiftR<span class="hl sym">`</span> bitsetShift<span class="hl sym">) +</span> <span class="hl num">1</span><span class="hl sym">);</span>

bitsetSetAll <span class="hl sym">::</span> BitSet <span class="hl sym">-&gt; ();</span>
bitsetSetAll <span class="hl sym">!</span>bitset <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        loopUpperBound <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        loopUpperBound <span class="hl sym">=</span> eager $ lengthArray bitset<span class="hl sym">;</span>

        setAllHelper <span class="hl sym">::</span> Int <span class="hl sym">-&gt; ();</span>
        setAllHelper <span class="hl sym">!</span>i <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> loopUpperBound <span class="hl kwa">then</span>
                updateArray bitset i <span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">)</span>
                <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                setAllHelper <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl kwa">else</span>
                <span class="hl sym">()</span>
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        setAllHelper <span class="hl num">0</span>
    <span class="hl sym">;</span>

bitsetClear <span class="hl sym">::</span> BitSet <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
bitsetClear <span class="hl sym">!</span>bitset <span class="hl sym">!</span>i <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        pos <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        pos <span class="hl sym">=</span> eager $ i <span class="hl sym">`</span>shiftR<span class="hl sym">`</span> bitsetShift<span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        updateArray
            bitset
            pos
            <span class="hl sym">(</span>
                <span class="hl sym">(</span>bitset <span class="hl sym">`</span>subscriptArray<span class="hl sym">`</span> pos<span class="hl sym">)</span>
                <span class="hl sym">`</span>bitwiseAnd<span class="hl sym">`</span>
                <span class="hl sym">(</span>complement <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">`</span>shiftL<span class="hl sym">` (</span>i <span class="hl sym">`</span>bitwiseAnd<span class="hl sym">`</span> bitsetMask<span class="hl sym">)))</span>
            <span class="hl sym">)</span>
    <span class="hl sym">;</span>

bitsetGet <span class="hl sym">::</span> BitSet <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Boolean<span class="hl sym">;</span>
bitsetGet <span class="hl sym">!</span>bitset <span class="hl sym">!</span>i <span class="hl sym">=</span>
    <span class="hl sym">(</span>
        <span class="hl sym">(</span>
            <span class="hl sym">(</span>bitset <span class="hl sym">`</span>subscriptArray<span class="hl sym">` (</span>i <span class="hl sym">`</span>shiftR<span class="hl sym">`</span> bitsetShift<span class="hl sym">))</span>
            <span class="hl sym">`</span>shiftRUnsigned<span class="hl sym">`</span>
            <span class="hl sym">(</span>i <span class="hl sym">`</span>bitwiseAnd<span class="hl sym">`</span> bitsetMask<span class="hl sym">)</span>
        <span class="hl sym">)</span>
        <span class="hl sym">`</span>bitwiseAnd<span class="hl sym">`</span>
        <span class="hl num">1</span>
    <span class="hl sym">)</span>
    <span class="hl sym">!=</span> <span class="hl num">0</span>
    <span class="hl sym">;</span>

<span class="hl com">/** pad width number returns number padded to width with spaces*/</span>
pad <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> String<span class="hl sym">;</span>
pad <span class="hl sym">!</span>width <span class="hl sym">!</span>number <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        str <span class="hl sym">::</span> String<span class="hl sym">;</span>
        str <span class="hl sym">=</span> intToString number<span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        replicate <span class="hl sym">(</span>width <span class="hl sym">-</span> String<span class="hl sym">.</span>length str<span class="hl sym">)</span> <span class="hl str">' '</span> <span class="hl sym">++</span> str
    <span class="hl sym">;</span>

nsieve <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> BitSet <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
nsieve <span class="hl sym">!</span>n <span class="hl sym">!</span>isPrime <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        nsieve_helper <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int<span class="hl sym">;</span>
        nsieve_helper <span class="hl sym">!</span>i <span class="hl sym">!</span>numPrimesFound <span class="hl sym">=</span>
            <span class="hl kwa">if</span> i <span class="hl sym">==</span> n <span class="hl kwa">then</span>
                numPrimesFound
            <span class="hl kwa">else if</span> bitsetGet isPrime i <span class="hl kwa">then</span>
                <span class="hl kwa">let</span>
                    update <span class="hl sym">::</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt;</span> Int <span class="hl sym">-&gt; ();</span>
                    update <span class="hl sym">!</span>k <span class="hl sym">!</span>i <span class="hl sym">!</span>n <span class="hl sym">=</span>
                        <span class="hl kwa">if</span> k <span class="hl sym">&gt;</span> n <span class="hl kwa">then</span>
                            <span class="hl sym">()</span>
                        <span class="hl kwa">else</span>
                            bitsetClear isPrime k
                            <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                            update <span class="hl sym">(</span>k <span class="hl sym">+</span> i<span class="hl sym">)</span> i n
                        <span class="hl sym">;</span>
                <span class="hl kwa">in</span>
                    update <span class="hl sym">(</span>i <span class="hl sym">+</span> i<span class="hl sym">)</span> i n
                    <span class="hl sym">`</span>seq<span class="hl sym">`</span>
                    nsieve_helper <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) (</span>numPrimesFound <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl kwa">else</span>
                nsieve_helper <span class="hl sym">(</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">)</span> numPrimesFound
            <span class="hl sym">;</span>
    <span class="hl kwa">in</span>
        bitsetSetAll isPrime
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        nsieve_helper <span class="hl num">2 0</span>
    <span class="hl sym">;</span>

main <span class="hl sym">:: [</span>String<span class="hl sym">] -&gt; ();</span>
<span class="hl kwa">public</span> main <span class="hl sym">!</span>args <span class="hl sym">=</span>
    <span class="hl kwa">let</span>
        n <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        n <span class="hl sym">=</span> eager $ stringToInt <span class="hl sym">(</span>head args<span class="hl sym">);</span>

        showResult <span class="hl sym">::</span> Int <span class="hl sym">-&gt; ();</span>
        showResult <span class="hl sym">!</span>n <span class="hl sym">=</span>
            printLine
                <span class="hl sym">(</span><span class="hl str">&quot;Primes up to &quot;</span> <span class="hl sym">++</span> pad <span class="hl num">8</span> n <span class="hl sym">++</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">++</span> pad <span class="hl num">8</span> <span class="hl sym">(</span>nsieve n bits<span class="hl sym">))</span>
            <span class="hl sym">;</span>

        m <span class="hl sym">::</span> Int<span class="hl sym">;</span>
        m <span class="hl sym">=</span> shiftL <span class="hl num">1</span> n <span class="hl sym">*</span> <span class="hl num">10000</span><span class="hl sym">;</span>

        bits <span class="hl sym">::</span> BitSet<span class="hl sym">;</span>
        bits <span class="hl sym">=</span> makeBitSet <span class="hl sym">(</span>m <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
    <span class="hl kwa">in</span>
        showResult m
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        showResult <span class="hl sym">(</span>shiftR m <span class="hl num">1</span><span class="hl sym">)</span>
        <span class="hl sym">`</span>seq<span class="hl sym">`</span>
        showResult <span class="hl sym">(</span>shiftR m <span class="hl num">2</span><span class="hl sym">)</span>
    <span class="hl sym">;</span>

