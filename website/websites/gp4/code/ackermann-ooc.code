<span class="com">(* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy (Oberon-2 novice)</span>
<span class="com">*)</span>


<span class="kwa">MODULE</span> ackermann<span class="sym">;</span>
<span class="kwa">IMPORT</span> Out<span class="sym">,</span> ProgramArgs<span class="sym">,</span> TextRider<span class="sym">;</span>

<span class="kwa">VAR</span> n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>

<span class="kwa">PROCEDURE</span> <span class="kwd">Ack</span> <span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> m<span class="sym">=</span><span class="num">0</span> <span class="kwa">THEN RETURN</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">IF</span> n<span class="sym">=</span><span class="num">0</span> <span class="kwa">THEN RETURN</span> <span class="kwd">Ack</span><span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span> <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">RETURN</span> <span class="kwd">Ack</span><span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>
<span class="kwa">END</span> Ack<span class="sym">;</span>


<span class="com">(* We'll put this in a library module Shootout *)</span>
<span class="kwa">PROCEDURE</span> Argi<span class="sym">* ():</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">VAR</span>
   value<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   r<span class="sym">:</span> TextRider<span class="sym">.</span>Reader<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   r <span class="sym">:=</span> TextRider<span class="sym">.</span><span class="kwd">ConnectReader</span><span class="sym">(</span>ProgramArgs<span class="sym">.</span>args<span class="sym">);</span>
   <span class="kwa">IF</span> <span class="sym">(</span>r # <span class="kwa">NIL</span><span class="sym">) &amp; (</span>ProgramArgs<span class="sym">.</span>args<span class="sym">.</span><span class="kwd">ArgNumber</span><span class="sym">() &gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">THEN</span>
      r<span class="sym">.</span>ReadLn<span class="sym">;</span>
      r<span class="sym">.</span><span class="kwd">ReadLInt</span><span class="sym">(</span>value<span class="sym">);</span>
      <span class="kwa">IF</span> r<span class="sym">.</span>res # TextRider<span class="sym">.</span>done <span class="kwa">THEN</span>
         value <span class="sym">:=</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">ELSE</span>
      value <span class="sym">:=</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">RETURN</span> value<span class="sym">;</span>
<span class="kwa">END</span> Argi<span class="sym">;</span>


<span class="kwa">BEGIN</span>
   n <span class="sym">:=</span> <span class="kwd">Argi</span><span class="sym">();</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span> <span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>n<span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;): &quot;</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span>n<span class="sym">),</span> <span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
<span class="kwa">END</span> ackermann<span class="sym">.</span>
