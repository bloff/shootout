<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: lisp -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: echo-sbcl.code,v 1.2 2004-11-08 08:15:12 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">;;; from Bulent Murtezaogl
</FONT></I>
#+sbcl (in-package <B><FONT COLOR="#BC8F8F">&quot;SB-UNIX&quot;</FONT></B>)
#+cmu (in-package <B><FONT COLOR="#BC8F8F">&quot;UNIX&quot;</FONT></B>)
(defun unix-wait ()
  <B><FONT COLOR="#BC8F8F">&quot;Wait for a child to die. We don't care about the status&quot;</FONT></B>
  (int-syscall (<B><FONT COLOR="#BC8F8F">&quot;wait&quot;</FONT></B> (* int)) nil)) <I><FONT COLOR="#B22222">;;  is lisp nil == C NULL ?? Dunno.
</FONT></I>#+sbcl (in-package <B><FONT COLOR="#BC8F8F">&quot;COMMON-LISP-USER&quot;</FONT></B>)
#+cmu (in-package <B><FONT COLOR="#BC8F8F">&quot;USER&quot;</FONT></B>)
#+sbcl (require <B><FONT COLOR="#BC8F8F">&quot;SB-BSD-SOCKETS&quot;</FONT></B>)


(define-condition sigpipe (error) () )

(defun ih-sigpipe (signal code scp)
  (declare (ignore signal code scp))
  (signal 'sigpipe))

(defun main ()
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((lsock 
         #+cmu  (ext:create-inet-listener 0)
	 #+sbcl (make-instance 'inet-socket <B><FONT COLOR="#5F9EA0">:type</FONT></B> <B><FONT COLOR="#5F9EA0">:stream</FONT></B> <B><FONT COLOR="#5F9EA0">:protocol</FONT></B> (get-protocol-by-name <B><FONT COLOR="#BC8F8F">&quot;tcp&quot;</FONT></B>)
	 )
	(n (parse-integer (<B><FONT COLOR="#A020F0">or</FONT></B> (car (last #+sbcl sb-ext:*posix-argv*
	                                 #+cmu  extensions:*command-line-strings*)) <B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B>))))
    (multiple-value-bind (host port) (get-socket-host-and-port lsock)
      (declare (ignore host))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((fork-res (#+sbcl sb-posix:fork
                       #+cmu     unix:unix-fork)))
	(<B><FONT COLOR="#A020F0">if</FONT></B> fork-res
	    (<B><FONT COLOR="#A020F0">if</FONT></B> (zerop fork-res)
		(echo-client port n)
	      (<B><FONT COLOR="#A020F0">let</FONT></B> ((stream (sys:make-fd-stream
	                     #+cmu (ext:accept-tcp-connection lsock)
			     #+sbcl (sb-bsd-sockets:socket-accept lsock)
			     <B><FONT COLOR="#5F9EA0">:output</FONT></B> t <B><FONT COLOR="#5F9EA0">:input</FONT></B> t <B><FONT COLOR="#5F9EA0">:buffering</FONT></B> <B><FONT COLOR="#5F9EA0">:line</FONT></B>))
		    (buffer (make-string 64))
		    (insize 0)
		    (sum 0))
		(declare (fixnum insize sum))
		(sys:enable-interrupt UNIX:sigpipe #'ih-sigpipe)
		(handler-case
		    (progn
		      (loop <I><FONT COLOR="#B22222">;; loop seems to chew up my declarations!?
</FONT></I>			while (not (zerop (setf (the fixnum insize)
						(the fixnum (sys:read-n-bytes stream buffer 0 64 nil)))))
			<B><FONT COLOR="#A020F0">do</FONT></B> (write-sequence buffer stream <B><FONT COLOR="#5F9EA0">:start</FONT></B> 0 <B><FONT COLOR="#5F9EA0">:end</FONT></B> insize)
			(incf sum insize))
		      (#+sbcl sb-unix::unix-wait
		       #+cmu     unix::unix-wait)
		      (format t <B><FONT COLOR="#BC8F8F">&quot;server processed ~D bytes~%&quot;</FONT></B> sum))
		  (sigpipe (foo) (declare (ignore foo)) (error-return <B><FONT COLOR="#BC8F8F">&quot;Kid died prematurely&quot;</FONT></B>)) <I><FONT COLOR="#B22222">;; as good as catching sigchild for this app 
</FONT></I>		  (end-of-file (foo) (declare (ignore foo))(error-return <B><FONT COLOR="#BC8F8F">&quot;EOF signalled.  Huh???&quot;</FONT></B>))))))))))

(defun error-return (str)
  (format *standard-output* <B><FONT COLOR="#BC8F8F">&quot;Error: ~s ~%&quot;</FONT></B> str)
  (quit))

(defun echo-client (port iter)
  (declare (fixnum iter))
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((stream (sys:make-fd-stream
		  #+sbcl (sb-bsd-sockets:socket-connect
		      (make-instance 'inet-socket <B><FONT COLOR="#5F9EA0">:type</FONT></B> <B><FONT COLOR="#5F9EA0">:stream</FONT></B> <B><FONT COLOR="#5F9EA0">:protocol</FONT></B> <B><FONT COLOR="#5F9EA0">:tcp</FONT></B>)
		      #(127 0 0 1) port)
		  #+cmu  (ext:connect-to-inet-socket <B><FONT COLOR="#BC8F8F">&quot;127.0.0.1&quot;</FONT></B> port)
		  <B><FONT COLOR="#5F9EA0">:output</FONT></B> t <B><FONT COLOR="#5F9EA0">:input</FONT></B> t <B><FONT COLOR="#5F9EA0">:buffering</FONT></B> <B><FONT COLOR="#5F9EA0">:line</FONT></B>))
	 (estr <B><FONT COLOR="#BC8F8F">&quot;Hello there sailor
&quot;</FONT></B>)
	   (len (length estr))
	   (buffer (make-string len)))
    (dotimes (i iter)
      (declare (fixnum i len) (simple-base-string buffer)
	       (inline write-sequence sys:read-n-bytes string=))
      (write-sequence estr stream <B><FONT COLOR="#5F9EA0">:start</FONT></B> 0 <B><FONT COLOR="#5F9EA0">:end</FONT></B> len )
      (sys:read-n-bytes stream buffer 0 len nil)
      (unless (string= estr buffer) 
	(format t <B><FONT COLOR="#BC8F8F">&quot;client did not receive what it sent ~%&quot;</FONT></B>)))))
</pre></td></tr></table>
