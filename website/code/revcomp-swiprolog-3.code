<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Assumes execution using the following command-line usage:</span>
<span class="slc">%</span>
<span class="slc">%   pl -G0 -q -g main -t halt -s SOURCENAME -- USERARG1 ... &lt; in &gt; out</span>
<span class="slc">%</span>
<span class="slc">% Further improved version of previous submission; changes include:</span>
<span class="slc">%</span>
<span class="slc">% * Activated buffering for both input and output</span>
<span class="slc">% * Combined reversal and complement operations, thus avoided call to</span>
<span class="slc">%   'reverse/2'</span>
<span class="slc">% * Segment represented as a list of lists [sub-segments] rather than</span>
<span class="slc">%   a single list, thus limiting the size of any individual list</span>
<span class="slc">%</span>
<span class="slc">% Overall, performance improvement is modest but discernable.</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

main <span class="sym">:-</span>
  set_stream<span class="sym">(</span><span class="kwb">current_output</span><span class="sym">,</span> buffer<span class="sym">(</span>full<span class="sym">)),</span>
  set_stream<span class="sym">(</span><span class="kwb">current_input</span><span class="sym">,</span> buffer<span class="sym">(</span>full<span class="sym">)),</span>

  prompt<span class="sym">(</span>Old<span class="sym">,</span> <span class="str">''</span><span class="sym">),</span>
  revcomp<span class="sym">(</span><span class="kwb">current_input</span><span class="sym">),</span>
  prompt<span class="sym">(</span>_<span class="sym">,</span> Old<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

revcomp<span class="sym">(</span>S<span class="sym">) :-</span>
  setup_complement<span class="sym">,</span>
  <span class="kwa">repeat</span><span class="sym">,</span>
    revseg<span class="sym">(</span>S<span class="sym">, []),</span>
  <span class="kwa">at_end_of_stream</span><span class="sym">(</span>S<span class="sym">)</span>.

<span class="slc">% ------------- %</span>

revseg<span class="sym">(</span>S<span class="sym">,</span> Seg<span class="sym">) :-</span>
  read_line_to_codes<span class="sym">(</span>S<span class="sym">,</span> L<span class="sym">),</span>

  <span class="sym">(</span><span class="kwa">at_end_of_stream</span><span class="sym">(</span>S<span class="sym">) -&gt;</span>
    add_to_segment<span class="sym">(</span>L<span class="sym">,</span> Seg<span class="sym">,</span> LastSeg<span class="sym">),</span>
    dump_segment<span class="sym">(</span>LastSeg<span class="sym">)</span>
  <span class="sym">;</span>
    <span class="sym">(</span>is_segment_header<span class="sym">(</span>L<span class="sym">) -&gt;</span>
      dump_segment<span class="sym">(</span>Seg<span class="sym">),</span>
      format<span class="sym">(</span><span class="str">'~N~s~N'</span><span class="sym">, [</span>L<span class="sym">])</span>
    <span class="sym">;</span>
      add_to_segment<span class="sym">(</span>L<span class="sym">,</span> Seg<span class="sym">,</span> NewSeg<span class="sym">),</span>
      <span class="sym">!,</span> revseg<span class="sym">(</span>S<span class="sym">,</span> NewSeg<span class="sym">)))</span>.

<span class="slc">% ------------------------------- %</span>

<span class="slc">%% 62 is ASCII code for character '&gt;'</span>

is_segment_header<span class="sym">([</span><span class="num">62</span><span class="sym">|</span>_<span class="sym">])</span>.

<span class="slc">% ------------------------------- %</span>

<span class="slc">%% 60 is output line length</span>

dump_segment<span class="sym">([]) :- !</span>.

dump_segment<span class="sym">(</span>Seg<span class="sym">) :-</span> setvar<span class="sym">(</span>last_char_count<span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> dump_segment_<span class="sym">(</span>Seg<span class="sym">,</span> <span class="num">60</span><span class="sym">)</span>.

<span class="slc">% ------------- %</span>

dump_segment_<span class="sym">([],</span> _<span class="sym">) :- !</span>.

dump_segment_<span class="sym">([</span>H<span class="sym">|</span>T<span class="sym">],</span> N<span class="sym">) :-</span>
  getvar<span class="sym">(</span>last_char_count<span class="sym">,</span> P<span class="sym">),</span>
  dump_component_<span class="sym">(</span>H<span class="sym">,</span> P<span class="sym">,</span> N<span class="sym">),</span>
  <span class="sym">!,</span> dump_segment_<span class="sym">(</span>T<span class="sym">,</span> N<span class="sym">)</span>.

<span class="slc">% ------------- %</span>

dump_component_<span class="sym">([],</span> A<span class="sym">,</span> _<span class="sym">) :- !,</span> setvar<span class="sym">(</span>last_char_count<span class="sym">,</span> A<span class="sym">)</span>.

dump_component_<span class="sym">([</span>H<span class="sym">|</span>T<span class="sym">],</span> A<span class="sym">,</span> N<span class="sym">) :-</span>
  <span class="kwb">put_code</span><span class="sym">(</span>H<span class="sym">), (</span>A <span class="sym">&gt;=</span> N <span class="sym">-&gt;</span> <span class="kwa">nl</span><span class="sym">,</span> A1 <span class="kwa">is</span> <span class="num">1</span> <span class="sym">;</span> A1 <span class="kwa">is</span> A <span class="sym">+</span> <span class="num">1</span><span class="sym">),</span>
  <span class="sym">!,</span> dump_component_<span class="sym">(</span>T<span class="sym">,</span> A1<span class="sym">,</span> N<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

<span class="slc">%% 1200 is maximum sub-segment length</span>

add_to_segment<span class="sym">([],</span> Seg<span class="sym">,</span> Seg<span class="sym">) :- !</span>.

add_to_segment<span class="sym">(</span>L<span class="sym">, [], [</span>LR<span class="sym">]) :- !,</span> rev_comp_sequence<span class="sym">(</span>L<span class="sym">,</span> LR<span class="sym">)</span>.

add_to_segment<span class="sym">(</span>L<span class="sym">, [</span>H<span class="sym">|</span>T<span class="sym">],</span> ALN<span class="sym">) :-</span>
  rev_comp_sequence<span class="sym">(</span>L<span class="sym">,</span> LR<span class="sym">),</span> length<span class="sym">(</span>H<span class="sym">,</span> Hlen<span class="sym">),</span>
  <span class="sym">(</span>Hlen <span class="sym">&lt;</span> <span class="num">1200</span> <span class="sym">-&gt;</span>
    append<span class="sym">(</span>LR<span class="sym">,</span> H<span class="sym">,</span> HL<span class="sym">),</span> ALN <span class="sym">= [</span>HL<span class="sym">|</span>T<span class="sym">]</span>
  <span class="sym">;</span>
    append<span class="sym">([</span>LR<span class="sym">], [</span>H<span class="sym">|</span>T<span class="sym">],</span> ALN<span class="sym">))</span>.

<span class="slc">% ------------------------------- %</span>

<span class="slc">%%      &quot;wsatug cyrkmb dhvnAT UGCYRK MBDHVN&quot;</span>
<span class="slc">%%  to:</span>
<span class="slc">%%      &quot;WSTAAC GRYMKV HDBNTA ACGRYM KVHDBN&quot;</span>

setup_complement <span class="sym">:-</span>
  flag<span class="sym">(</span><span class="num">65</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">84</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">67</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">71</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">71</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">67</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">84</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">65</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">77</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">75</span><span class="sym">),</span>
  flag<span class="sym">(</span><span class="num">82</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">89</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">87</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">87</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">83</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">83</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">89</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">82</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">75</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">77</span><span class="sym">),</span>
  flag<span class="sym">(</span><span class="num">86</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">66</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">72</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">68</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">68</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">72</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">66</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">86</span><span class="sym">),</span> flag<span class="sym">(</span><span class="num">78</span><span class="sym">,</span> _<span class="sym">,</span> <span class="num">78</span><span class="sym">)</span>.

<span class="slc">% ------------- %</span>

complement<span class="sym">(</span>Code<span class="sym">,</span> Complement<span class="sym">) :-</span>
  <span class="sym">(</span>Code <span class="sym">&gt;</span> <span class="num">90</span> <span class="sym">-&gt;</span> CodeIdx <span class="kwa">is</span> Code <span class="sym">-</span> <span class="num">32</span> <span class="sym">;</span> CodeIdx <span class="sym">=</span> Code<span class="sym">),</span>
  flag<span class="sym">(</span>CodeIdx<span class="sym">,</span> Complement<span class="sym">,</span> Complement<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

rev_comp_sequence<span class="sym">(</span>S<span class="sym">,</span> CS<span class="sym">) :-</span> rev_comp_sequence_<span class="sym">(</span>S<span class="sym">, [],</span> CS<span class="sym">)</span>.

<span class="slc">% ------------- %</span>

rev_comp_sequence_<span class="sym">([],</span> CSA<span class="sym">,</span> CSA<span class="sym">) :- !</span>.

rev_comp_sequence_<span class="sym">([</span>H<span class="sym">|</span>T<span class="sym">],</span> CSA<span class="sym">,</span> CS<span class="sym">) :-</span>
  complement<span class="sym">(</span>H<span class="sym">,</span> C<span class="sym">),</span>
  <span class="sym">!,</span> rev_comp_sequence_<span class="sym">(</span>T<span class="sym">, [</span>C<span class="sym">|</span>CSA<span class="sym">],</span> CS<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

getvar<span class="sym">(</span>Id<span class="sym">,</span> Value<span class="sym">) :-</span> nb_getval<span class="sym">(</span>Id<span class="sym">,</span> Value<span class="sym">)</span>.
setvar<span class="sym">(</span>Id<span class="sym">,</span> Value<span class="sym">) :-</span> nb_setval<span class="sym">(</span>Id<span class="sym">,</span> Value<span class="sym">)</span>.
dropvar<span class="sym">(</span>Id<span class="sym">) :-</span> nb_delete<span class="sym">(</span>Id<span class="sym">)</span>.

