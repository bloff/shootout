<span class="slc">%% The Great Computer Language Shootout</span>
<span class="slc">%% http://shootout.alioth.debian.org/</span>

<span class="slc">%% Based on code by Maurice Castro.</span>
<span class="slc">%% Originally tweaked by Doug Bagley.</span>
<span class="slc">%% Further tweaked and shrunk by James Hague.</span>
<span class="slc">%% modified by Isaac Gouy</span>

<span class="sym">-</span><span class="kwd">module</span><span class="sym">(</span>sieve<span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">,</span> test<span class="sym">/</span><span class="num">2</span><span class="sym">])</span>.

<span class="slc">% The sieve loop is spawned into its own process with a heap size of</span>
<span class="slc">% 50,000 words.  With all of the list creation done by this benchmark,</span>
<span class="slc">% much time is spent resizing the initially tiny heap.  Starting with</span>
<span class="slc">% a larger heap improves execution time by ~20%.</span>

<span class="kwd">main</span><span class="sym">() -&gt;</span> <span class="kwd">main</span><span class="sym">([</span><span class="str">&quot;1&quot;</span><span class="sym">])</span>.
<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
   Num <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
   <span class="kwd">spawn_opt</span><span class="sym">(</span>sieve<span class="sym">,</span> test<span class="sym">, [</span><span class="kwb">self</span><span class="sym">(),</span> Num<span class="sym">], [{</span>min_heap_size<span class="sym">,</span> <span class="num">50000</span><span class="sym">}]),</span>
   <span class="kwa">receive</span> Num_primes <span class="sym">-&gt;</span> io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;Count: ~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>Num_primes<span class="sym">])</span> <span class="kwa">end</span><span class="sym">,</span>
   <span class="kwb">halt</span><span class="sym">()</span>.

<span class="kwd">test</span><span class="sym">(</span>From<span class="sym">,</span> N<span class="sym">) -&gt;</span> <span class="kwd">test</span><span class="sym">(</span>From<span class="sym">,</span> N<span class="sym">,</span> <span class="kwb">math</span><span class="sym">:</span><span class="kwb">sqrt</span><span class="sym">(</span><span class="num">8192</span><span class="sym">),</span> lists<span class="sym">:</span><span class="kwd">seq</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="num">8192</span><span class="sym">))</span>.

<span class="kwd">test</span><span class="sym">(</span>From<span class="sym">,</span> N<span class="sym">,</span> Max<span class="sym">,</span> Seq<span class="sym">) -&gt;</span>
   Num_primes <span class="sym">=</span> <span class="kwb">length</span><span class="sym">(</span><span class="kwd">era</span><span class="sym">(</span>Max<span class="sym">,</span> Seq<span class="sym">)),</span>
   <span class="kwa">if</span>
      N <span class="sym">&gt;</span> <span class="num">1</span> <span class="sym">-&gt;</span> <span class="kwd">test</span><span class="sym">(</span>From<span class="sym">,</span> N<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> Max<span class="sym">,</span> Seq<span class="sym">);</span>
      true  <span class="sym">-&gt;</span> From <span class="sym">!</span> Num_primes
   <span class="kwa">end</span>.

<span class="kwd">era</span><span class="sym">(</span>Max<span class="sym">, [</span>H<span class="sym">|</span>T<span class="sym">])</span> <span class="kwa">when</span> H <span class="sym">=&lt;</span> Max <span class="sym">-&gt;</span>
   <span class="sym">[</span>H <span class="sym">|</span> <span class="kwd">era</span><span class="sym">(</span>Max<span class="sym">, [</span>X <span class="sym">||</span> X <span class="sym">&lt;-</span> T<span class="sym">,</span> X rem H <span class="sym">=/=</span> <span class="num">0</span><span class="sym">])];</span>
<span class="kwd">era</span><span class="sym">(</span>Max<span class="sym">,</span> L<span class="sym">) -&gt;</span>  L.

<span class="slc">%%% Eratosthenes algorithm from Maurice Castro, with permission,</span>
<span class="slc">%%% from his book, _Erlang in Real Time_, ISBN: 0864447434</span>
<span class="slc">%%% http://www.serc.rmit.edu.au/~maurice/erlbk/eg/choice/erasto.erl</span>
