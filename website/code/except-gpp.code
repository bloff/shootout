<span class="line">    1 </span><span class="slc">// -*- mode: c++ -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// $Id: except-gpp.code,v 1.3 2004-11-11 07:13:57 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">// from Bill Lear
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="dir">#include &lt;iostream&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;cstdlib&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;cstdio&gt;
</span><span class="line">    9 </span><span class="dir"></span>
<span class="line">   10 </span><span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym"></span><span class="kwb">size_t</span> HI <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   13 </span><span class="sym"></span><span class="kwb">size_t</span> LO <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym"></span><span class="kwc">class</span> Hi_exception <span class="sym">{
</span><span class="line">   16 </span><span class="sym"></span><span class="kwc">public</span><span class="sym">:
</span><span class="line">   17 </span><span class="sym"></span>    <span class="kwc">explicit</span> Hi_exception<span class="sym">(</span><span class="kwb">size_t</span> _n<span class="sym">) :</span> n<span class="sym">(</span>_n<span class="sym">) {}
</span><span class="line">   18 </span><span class="sym"></span>    <span class="kwb">const char</span><span class="sym">*</span> what<span class="sym">() {</span> sprintf<span class="sym">(</span>N<span class="sym">,</span> <span class="str">&quot;%d&quot;</span><span class="sym">,</span> n<span class="sym">);</span> <span class="kwa">return</span> N<span class="sym">; }
</span><span class="line">   19 </span><span class="sym"></span><span class="kwc">private</span><span class="sym">:
</span><span class="line">   20 </span><span class="sym"></span>    <span class="kwb">size_t</span> n<span class="sym">;</span> <span class="kwb">char</span> N<span class="sym">[</span><span class="num">8</span><span class="sym">];
</span><span class="line">   21 </span><span class="sym">};
</span><span class="line">   22 </span><span class="sym">
</span><span class="line">   23 </span><span class="sym"></span><span class="kwc">class</span> Lo_exception <span class="sym">{
</span><span class="line">   24 </span><span class="sym"></span><span class="kwc">public</span><span class="sym">:
</span><span class="line">   25 </span><span class="sym"></span>    <span class="kwc">explicit</span> Lo_exception<span class="sym">(</span><span class="kwb">size_t</span> _n<span class="sym">) :</span> n<span class="sym">(</span>_n<span class="sym">) {}
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwb">const char</span><span class="sym">*</span> what<span class="sym">() {</span> sprintf<span class="sym">(</span>N<span class="sym">,</span> <span class="str">&quot;%d&quot;</span><span class="sym">,</span> n<span class="sym">);</span> <span class="kwa">return</span> N<span class="sym">; }
</span><span class="line">   27 </span><span class="sym"></span><span class="kwc">private</span><span class="sym">:
</span><span class="line">   28 </span><span class="sym"></span>    <span class="kwb">size_t</span> n<span class="sym">;</span> <span class="kwb">char</span> N<span class="sym">[</span><span class="num">8</span><span class="sym">];
</span><span class="line">   29 </span><span class="sym">};
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym"></span><span class="kwb">void</span> blowup<span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">) {
</span><span class="line">   32 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>num <span class="sym">%</span> <span class="num">2</span><span class="sym">) {
</span><span class="line">   33 </span><span class="sym"></span>        <span class="kwa">throw</span> Lo_exception<span class="sym">(</span>num<span class="sym">);
</span><span class="line">   34 </span><span class="sym">    }
</span><span class="line">   35 </span><span class="sym"></span>    <span class="kwa">throw</span> Hi_exception<span class="sym">(</span>num<span class="sym">);
</span><span class="line">   36 </span><span class="sym">}
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym"></span><span class="kwb">void</span> lo_function<span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">) {
</span><span class="line">   39 </span><span class="sym"></span>    <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   40 </span><span class="sym"></span>        blowup<span class="sym">(</span>num<span class="sym">);
</span><span class="line">   41 </span><span class="sym">    }</span> <span class="kwa">catch</span><span class="sym">(</span><span class="kwb">const</span> Lo_exception<span class="sym">&amp;</span> ex<span class="sym">) {
</span><span class="line">   42 </span><span class="sym">        ++</span>LO<span class="sym">;
</span><span class="line">   43 </span><span class="sym">    }
</span><span class="line">   44 </span><span class="sym">}
</span><span class="line">   45 </span><span class="sym">
</span><span class="line">   46 </span><span class="sym"></span><span class="kwb">void</span> hi_function<span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">) {
</span><span class="line">   47 </span><span class="sym"></span>    <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   48 </span><span class="sym"></span>        lo_function<span class="sym">(</span>num<span class="sym">);
</span><span class="line">   49 </span><span class="sym">    }</span> <span class="kwa">catch</span><span class="sym">(</span><span class="kwb">const</span> Hi_exception<span class="sym">&amp;</span> ex<span class="sym">) {
</span><span class="line">   50 </span><span class="sym">        ++</span>HI<span class="sym">;
</span><span class="line">   51 </span><span class="sym">    }
</span><span class="line">   52 </span><span class="sym">}
</span><span class="line">   53 </span><span class="sym">
</span><span class="line">   54 </span><span class="sym"></span><span class="kwb">void</span> some_function<span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">) {
</span><span class="line">   55 </span><span class="sym"></span>    <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   56 </span><span class="sym"></span>        hi_function<span class="sym">(</span>num<span class="sym">);
</span><span class="line">   57 </span><span class="sym">    }</span> <span class="kwa">catch</span> <span class="sym">(...) {
</span><span class="line">   58 </span><span class="sym"></span>        cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;We shouldn't get here</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span> exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   59 </span><span class="sym">    }
</span><span class="line">   60 </span><span class="sym">}
</span><span class="line">   61 </span><span class="sym">
</span><span class="line">   62 </span><span class="sym"></span><span class="kwb">int
</span><span class="line">   63 </span><span class="kwb"></span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[]) {
</span><span class="line">   64 </span><span class="sym"></span>    <span class="kwb">size_t</span> NUM <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span> ? <span class="sym">(</span>atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) &lt;</span> <span class="num">1</span> ? <span class="num">1</span> <span class="sym">:</span> atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])):</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   65 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span>NUM<span class="sym">--) {
</span><span class="line">   66 </span><span class="sym"></span>        some_function<span class="sym">(</span>NUM<span class="sym">);
</span><span class="line">   67 </span><span class="sym">    }
</span><span class="line">   68 </span><span class="sym"></span>    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Exceptions: HI=&quot;</span> <span class="sym">&lt;&lt;</span> HI <span class="sym">&lt;&lt;</span> <span class="str">&quot; / &quot;</span> <span class="sym">&lt;&lt;</span> <span class="str">&quot;LO=&quot;</span> <span class="sym">&lt;&lt;</span> LO <span class="sym">&lt;&lt;</span> endl<span class="sym">;
</span><span class="line">   69 </span><span class="sym">}</span>
