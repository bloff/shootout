<span class="slc">-----------------------------------------------------------------------</span>
<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Jim Rogers</span>
<span class="slc">-----------------------------------------------------------------------</span>
<span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;</span>
<span class="kwa">with</span> Ada.Integer_Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Integer_Text_Io<span class="sym">;</span>
<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;</span>

<span class="kwa">procedure</span> Chameneos <span class="kwa">is</span>
   <span class="kwa">type</span> Colour <span class="kwa">is</span> <span class="sym">(</span>Blue<span class="sym">,</span> Red<span class="sym">,</span> Yellow<span class="sym">,</span> Faded<span class="sym">);</span>
   <span class="kwa">protected type</span> Meeting_Place<span class="sym">(</span>N <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">entry</span> Other_Creatures_Colour<span class="sym">(</span>Me <span class="sym">:</span> <span class="kwa">in</span> Colour<span class="sym">;</span> Other <span class="sym">:</span> <span class="kwa">out</span> Colour<span class="sym">);</span>
      <span class="kwa">private</span>
      First_Call <span class="sym">:</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> True<span class="sym">;</span>
      Must_Wait <span class="sym">:</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> True<span class="sym">;</span>
      Second_Done <span class="sym">:</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> False<span class="sym">;</span>
      First_Colour <span class="sym">:</span> Colour<span class="sym">;</span>
      Second_Colour <span class="sym">:</span> Colour<span class="sym">;</span>
      Count <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> N<span class="sym">;</span>
      <span class="kwa">entry</span> Wait_Others<span class="sym">(</span>Me <span class="sym">:</span> <span class="kwa">in</span> Colour<span class="sym">;</span> Other <span class="sym">:</span> <span class="kwa">out</span> Colour<span class="sym">);</span>
   <span class="kwa">end</span> Meeting_Place<span class="sym">;</span>
   <span class="kwa">protected body</span> Meeting_Place <span class="kwa">is</span>
      <span class="kwa">entry</span> Other_Creatures_Colour<span class="sym">(</span>Me <span class="sym">:</span> <span class="kwa">in</span> Colour<span class="sym">;</span> Other <span class="sym">:</span> <span class="kwa">out</span> Colour<span class="sym">)</span>
         <span class="kwa">when</span> Must_Wait <span class="kwa">is</span>
      <span class="kwa">begin</span>
         <span class="kwa">if</span> First_Call <span class="kwa">then</span>
            <span class="kwa">if</span> Count <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
               Count <span class="sym">:=</span> Count <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
               First_Call <span class="sym">:=</span> False<span class="sym">;</span>
               First_Colour <span class="sym">:=</span> Me<span class="sym">;</span>
               <span class="kwa">requeue</span> Wait_Others<span class="sym">;</span>
            <span class="kwa">else</span>
               Other <span class="sym">:=</span> Faded<span class="sym">;</span>
               Second_Done <span class="sym">:=</span> True<span class="sym">;</span>
            <span class="kwa">end if</span><span class="sym">;</span>
         <span class="kwa">else</span>
            Second_Colour <span class="sym">:=</span> Me<span class="sym">;</span>
            Other <span class="sym">:=</span> First_Colour<span class="sym">;</span>
            First_Call <span class="sym">:=</span> True<span class="sym">;</span>
            Second_Done <span class="sym">:=</span> True<span class="sym">;</span>
         <span class="kwa">end if</span><span class="sym">;</span>
      <span class="kwa">end</span> Other_Creatures_Colour<span class="sym">;</span>
      <span class="kwa">entry</span> Wait_Others<span class="sym">(</span>Me <span class="sym">:</span> <span class="kwa">in</span> Colour<span class="sym">;</span> Other <span class="sym">:</span> <span class="kwa">out</span> Colour<span class="sym">)</span> <span class="kwa">when</span> Second_Done <span class="kwa">is</span>
      <span class="kwa">begin</span>
         Other <span class="sym">:=</span> Second_Colour<span class="sym">;</span>
         Second_Done <span class="sym">:=</span> False<span class="sym">;</span>
      <span class="kwa">end</span> Wait_Others<span class="sym">;</span>
   <span class="kwa">end</span> Meeting_Place<span class="sym">;</span>
   <span class="kwa">type</span> Meeting_ref <span class="kwa">is access</span> Meeting_Place<span class="sym">;</span>
   <span class="kwa">task type</span> Creature<span class="sym">(</span>My_Colour <span class="sym">:</span> Colour<span class="sym">;</span> Place <span class="sym">:</span> Meeting_Ref<span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">entry</span> Report<span class="sym">(</span>Count <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Natural</span><span class="sym">);</span>
   <span class="kwa">end</span> Creature<span class="sym">;</span>
   <span class="kwa">task body</span> Creature <span class="kwa">is</span>
      Meeting_Count <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
      Me <span class="sym">:</span> Colour <span class="sym">:=</span> My_Colour<span class="sym">;</span>
      <span class="kwa">function</span> Complement<span class="sym">(</span>Other <span class="sym">:</span> Colour<span class="sym">)</span> <span class="kwa">return</span> Colour <span class="kwa">is</span>
         Result <span class="sym">:</span> Colour<span class="sym">;</span>
      <span class="kwa">begin</span>
         <span class="kwa">case</span> Me <span class="kwa">is</span>
            <span class="kwa">when</span> Blue <span class="sym">=&gt;</span>
               <span class="kwa">if</span> Other <span class="sym">=</span> Red <span class="kwa">then</span>
                  Result <span class="sym">:=</span> Yellow<span class="sym">;</span>
               <span class="kwa">else</span>
                  Result <span class="sym">:=</span> Red<span class="sym">;</span>
               <span class="kwa">end if</span><span class="sym">;</span>
            <span class="kwa">when</span> Red <span class="sym">=&gt;</span>
               <span class="kwa">if</span> Other <span class="sym">=</span> Blue <span class="kwa">then</span>
                  Result <span class="sym">:=</span> Yellow<span class="sym">;</span>
               <span class="kwa">else</span>
                  Result <span class="sym">:=</span> Blue<span class="sym">;</span>
               <span class="kwa">end if</span><span class="sym">;</span>
            <span class="kwa">when</span> Yellow <span class="sym">=&gt;</span>
               <span class="kwa">if</span> Other <span class="sym">=</span> Blue <span class="kwa">then</span>
                  Result <span class="sym">:=</span> Red<span class="sym">;</span>
               <span class="kwa">else</span>
                  Result <span class="sym">:=</span> Blue<span class="sym">;</span>
               <span class="kwa">end if</span><span class="sym">;</span>
            <span class="kwa">when others</span> <span class="sym">=&gt;</span>
               Result <span class="sym">:=</span> Me<span class="sym">;</span>
         <span class="kwa">end case</span><span class="sym">;</span>
         <span class="kwa">return</span> Result<span class="sym">;</span>
      <span class="kwa">end</span> Complement<span class="sym">;</span>

      <span class="kwa">procedure</span> Meet_Other_Creature <span class="kwa">is</span>
         Other <span class="sym">:</span> Colour<span class="sym">;</span>
      <span class="kwa">begin</span>
         Place.Other_Creatures_Colour<span class="sym">(</span>Me<span class="sym">,</span> Other<span class="sym">);</span>
         <span class="kwa">if</span> Other <span class="sym">=</span> Faded <span class="kwa">then</span>
            Me <span class="sym">:=</span> Other<span class="sym">;</span>
         <span class="kwa">else</span>
            Meeting_Count <span class="sym">:=</span> Meeting_Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            Me <span class="sym">:=</span> Complement<span class="sym">(</span>Other<span class="sym">);</span>
         <span class="kwa">end if</span><span class="sym">;</span>
      <span class="kwa">end</span> Meet_Other_Creature<span class="sym">;</span>

   <span class="kwa">begin</span>
      <span class="kwa">delay</span> <span class="num">0.0</span><span class="sym">;</span>
      <span class="kwa">while</span> Me <span class="sym">/=</span> Faded <span class="kwa">loop</span>
         Meet_Other_Creature<span class="sym">;</span>
         <span class="kwa">delay</span> <span class="num">0.0</span><span class="sym">;</span>
      <span class="kwa">end loop</span><span class="sym">;</span>
      <span class="kwa">accept</span> Report<span class="sym">(</span>Count <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">do</span>
         Count <span class="sym">:=</span> Meeting_Count<span class="sym">;</span>
      <span class="kwa">end</span> Report<span class="sym">;</span>
   <span class="kwa">end</span> Creature<span class="sym">;</span>
   <span class="kwa">type</span> Creature_Ref <span class="kwa">is access</span> creature<span class="sym">;</span>
   Creatures <span class="sym">:</span> <span class="kwa">array</span><span class="sym">(</span>Colour<span class="sym">)</span> <span class="kwa">of</span> Creature_Ref<span class="sym">;</span>
   M <span class="sym">:</span> Meeting_Ref<span class="sym">;</span>
   Meetings <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>
   Total <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">begin</span>
   M <span class="sym">:=</span> <span class="kwa">new</span> Meeting_Place<span class="sym">(</span><span class="kwb">Natural</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">)));</span>
   <span class="kwa">for</span> I <span class="kwa">in</span> Colour<span class="sym">'</span><span class="kwa">range loop</span>
      <span class="kwa">if</span> I <span class="sym">&lt;</span> Colour<span class="sym">'</span>Last <span class="kwa">then</span>
         Creatures<span class="sym">(</span>I<span class="sym">) :=</span> <span class="kwa">new</span> Creature<span class="sym">(</span>I<span class="sym">,</span> M<span class="sym">);</span>
      <span class="kwa">else</span>
         Creatures<span class="sym">(</span>I<span class="sym">) :=</span> <span class="kwa">new</span> Creature<span class="sym">(</span>Colour<span class="sym">'</span>First<span class="sym">,</span> M<span class="sym">);</span>
      <span class="kwa">end if</span><span class="sym">;</span>
   <span class="kwa">end loop</span><span class="sym">;</span>
   <span class="kwa">for</span> I <span class="kwa">in</span> Creatures<span class="sym">'</span><span class="kwa">range Loop</span>
      Creatures<span class="sym">(</span>I<span class="sym">)</span>.Report<span class="sym">(</span>Meetings<span class="sym">);</span>
      Total <span class="sym">:=</span> Total <span class="sym">+</span> Meetings<span class="sym">;</span>
   <span class="kwa">end loop</span><span class="sym">;</span>
   Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Total<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);</span>
   New_Line<span class="sym">;</span>

<span class="kwa">end</span> Chameneos<span class="sym">;</span>
