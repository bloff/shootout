<span class="slc">-- $Id: strcat-gnat.code,v 1.10 2005-06-08 07:55:57 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- Contributed by Kat-Zygfryd.  This version is less &quot;true OO&quot; than
</span><span class="slc">--   the 'strcat.gnat-2.gnat', but is very efficient and works
</span><span class="slc">--   exactly like the C and C++ versions.  This should show that
</span><span class="slc">--   ADA can be quite efficient when needed.
</span>
<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span><span class="kwa">with</span> Ada.Text_IO<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Unchecked_Deallocation<span class="sym">;

</span><span class="kwa">procedure</span> Strcat <span class="kwa">is

	pragma</span> Optimize<span class="sym">(</span> Time <span class="sym">);

</span>	<span class="kwa">type</span> String_Access <span class="kwa">is access</span> <span class="kwb">String</span><span class="sym">;
</span>	<span class="kwa">procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation<span class="sym">(</span> <span class="kwb">String</span><span class="sym">,</span> String_Access <span class="sym">);

</span>	N<span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="kwb">Integer</span><span class="sym">'</span>Value<span class="sym">(</span> Argument<span class="sym">(</span><span class="num">1</span><span class="sym">) );
</span>	Len<span class="sym">:</span>  <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">6</span><span class="sym">;
</span>	Size<span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">6</span><span class="sym">;

</span>	<span class="kwa">pragma</span> Suppress<span class="sym">(</span> All_Checks <span class="sym">);

</span>	Hello<span class="sym">:</span>  <span class="kwa">constant</span> <span class="kwb">String</span> <span class="sym">:=</span> <span class="str">&quot;hello&quot;</span> <span class="sym">&amp;</span> ASCII.LF<span class="sym">;

</span>	Buffer<span class="sym">:</span> String_Access <span class="sym">:=</span> <span class="kwa">new</span> <span class="kwb">String</span><span class="sym">'(</span> Hello <span class="sym">);
</span>	Temp<span class="sym">:</span>   String_Access <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;

</span><span class="kwa">begin
	for</span> Num <span class="kwa">in</span> <span class="num">2</span>..N <span class="kwa">loop
		if</span> Len <span class="sym">+</span> <span class="num">6</span> <span class="sym">&gt;</span> Size <span class="kwa">then
</span>			Temp   <span class="sym">:=</span> Buffer<span class="sym">;
</span>			Size   <span class="sym">:=</span> Size <span class="sym">*</span> <span class="num">2</span><span class="sym">;
</span>			Buffer <span class="sym">:=</span> <span class="kwa">new</span> <span class="kwb">String</span><span class="sym">(</span> <span class="num">1</span>..Size <span class="sym">);
</span>			Buffer<span class="sym">(</span><span class="num">1</span>..Temp<span class="sym">'</span>Length<span class="sym">) :=</span> Temp.<span class="kwa">all</span><span class="sym">;
</span>			Free<span class="sym">(</span> Temp <span class="sym">);
</span>		<span class="kwa">end if</span><span class="sym">;
</span>		Buffer<span class="sym">(</span>Len<span class="sym">+</span><span class="num">1</span>..Len<span class="sym">+</span>Hello<span class="sym">'</span>Length<span class="sym">) :=</span> Hello<span class="sym">;
</span>		Len <span class="sym">:=</span> Len <span class="sym">+</span> <span class="num">6</span><span class="sym">;
</span>	<span class="kwa">end loop</span><span class="sym">;
</span>	<span class="kwa">declare
</span>		Result<span class="sym">:</span> <span class="kwb">String</span> <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Image<span class="sym">(</span> Len <span class="sym">);
</span>	<span class="kwa">begin
</span>		Put_Line<span class="sym">(</span> Result<span class="sym">(</span><span class="num">2</span>..Result<span class="sym">'</span>Length<span class="sym">) );
</span>	<span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span> Strcat<span class="sym">;</span>
