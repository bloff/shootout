<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: heapsort-smlnj.code,v 1.4 2004-11-13 07:41:42 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * Based on cdoe from Stephen Weeks, improved by Henry Cejtin.
</span><span class="line">    5 </span><span class="com">*)</span>
<span class="line">    6 </span>
<span class="line">    7 </span><span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
</span><span class="line">    8 </span><span class="kwa">    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="line">    9 </span><span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
</span><span class="line">   10 </span><span class="kwa">
</span><span class="line">   11 </span><span class="kwa">val</span> sub <span class="sym">=</span> Array.sub
<span class="line">   12 </span><span class="kwa">val</span> update <span class="sym">=</span> Array.update
<span class="line">   13 </span>
<span class="line">   14 </span><span class="kwa">local
</span><span class="line">   15 </span><span class="kwa">   val</span> im <span class="sym">=</span> <span class="num">139968
</span><span class="line">   16 </span><span class="num"></span>   <span class="kwa">val</span> ia <span class="sym">=</span>   <span class="num">3877
</span><span class="line">   17 </span><span class="num"></span>   <span class="kwa">val</span> ic <span class="sym">=</span>  <span class="num">29573
</span><span class="line">   18 </span><span class="num"></span>   <span class="kwa">val</span> last <span class="sym">=</span> ref <span class="num">42
</span><span class="line">   19 </span><span class="num"></span>   <span class="kwa">val</span> scale <span class="sym">=</span> <span class="num">1.0</span> <span class="sym">/</span> <span class="kwa">Real</span>.fromInt im
<span class="line">   20 </span><span class="kwa">in
</span><span class="line">   21 </span><span class="kwa">   fun</span> gen_random max <span class="sym">=
</span><span class="line">   22 </span><span class="sym"></span>          <span class="kwa">let val</span> last' <span class="sym">= (!</span> last <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> mod im
<span class="line">   23 </span>          <span class="kwa">in</span> last <span class="sym">:=</span> last'<span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span>             max <span class="sym">*</span> scale <span class="sym">*</span> <span class="kwa">Real</span>.fromInt last'
<span class="line">   25 </span>          <span class="kwa">end
</span><span class="line">   26 </span><span class="kwa">end
</span><span class="line">   27 </span><span class="kwa">
</span><span class="line">   28 </span><span class="kwa">fun</span> heapSort <span class="sym">(</span>n<span class="sym">,</span> ra<span class="sym">:</span> <span class="kwb">real</span> array<span class="sym">) =
</span><span class="line">   29 </span><span class="sym"></span>       <span class="kwa">let fun</span> inner <span class="sym">(</span>l<span class="sym">,</span> ir<span class="sym">,</span> rra<span class="sym">) =
</span><span class="line">   30 </span><span class="sym"></span>                  <span class="kwa">let fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =
</span><span class="line">   31 </span><span class="sym"></span>                             <span class="kwa">if</span> j <span class="sym">&lt;=</span> ir
<span class="line">   32 </span>                                <span class="kwa">then let val</span> j <span class="sym">=
</span><span class="line">   33 </span><span class="sym"></span>                                                <span class="kwa">if</span> j <span class="sym">&lt;</span> ir
<span class="line">   34 </span>                                                <span class="kwa">andalso</span> sub <span class="sym">(</span>ra<span class="sym">,</span> j<span class="sym">) &lt;</span> sub <span class="sym">(</span>ra<span class="sym">,</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   35 </span><span class="sym"></span>                                                   <span class="kwa">then</span> j <span class="sym">+</span> <span class="num">1
</span><span class="line">   36 </span><span class="num"></span>                                                   <span class="kwa">else</span> j
<span class="line">   37 </span>                                         <span class="kwa">val</span> <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =
</span><span class="line">   38 </span><span class="sym"></span>                                                <span class="kwa">if</span> rra <span class="sym">&lt;</span> sub <span class="sym">(</span>ra<span class="sym">,</span> j<span class="sym">)
</span><span class="line">   39 </span><span class="sym"></span>                                                   <span class="kwa">then</span> <span class="sym">(</span>update <span class="sym">(</span>ra<span class="sym">,</span> i<span class="sym">,</span> sub <span class="sym">(</span>ra<span class="sym">,</span> j<span class="sym">));
</span><span class="line">   40 </span><span class="sym">                                                         (</span>j<span class="sym">,</span> j <span class="sym">+</span> j<span class="sym">))
</span><span class="line">   41 </span><span class="sym"></span>                                                   <span class="kwa">else</span> <span class="sym">(</span>i<span class="sym">,</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   42 </span><span class="sym"></span>                                     <span class="kwa">in</span> loop <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">)
</span><span class="line">   43 </span><span class="sym"></span>                                     <span class="kwa">end
</span><span class="line">   44 </span><span class="kwa">                                else</span> update <span class="sym">(</span>ra<span class="sym">,</span> i<span class="sym">,</span> rra<span class="sym">)
</span><span class="line">   45 </span><span class="sym"></span>                  <span class="kwa">in</span> loop <span class="sym">(</span>l<span class="sym">,</span> l <span class="sym">+</span> l<span class="sym">)
</span><span class="line">   46 </span><span class="sym"></span>                  <span class="kwa">end
</span><span class="line">   47 </span><span class="kwa">           fun</span> outer1 l <span class="sym">=
</span><span class="line">   48 </span><span class="sym"></span>                  <span class="kwa">let val</span> l' <span class="sym">=</span> l <span class="num">- 1
</span><span class="line">   49 </span><span class="num"></span>                  <span class="kwa">in if</span> l' <span class="sym">&gt;</span> <span class="num">0
</span><span class="line">   50 </span><span class="num"></span>                        <span class="kwa">then</span> <span class="sym">(</span>inner <span class="sym">(</span>l'<span class="sym">,</span> n<span class="sym">,</span> sub <span class="sym">(</span>ra<span class="sym">,</span> l'<span class="sym">));
</span><span class="line">   51 </span><span class="sym"></span>                              outer1 l'<span class="sym">)
</span><span class="line">   52 </span><span class="sym"></span>                        <span class="kwa">else</span> <span class="sym">()
</span><span class="line">   53 </span><span class="sym"></span>                  <span class="kwa">end
</span><span class="line">   54 </span><span class="kwa">           fun</span> outer2 ir <span class="sym">=
</span><span class="line">   55 </span><span class="sym"></span>                  <span class="kwa">let val</span> rra <span class="sym">=</span> sub <span class="sym">(</span>ra<span class="sym">,</span> ir<span class="sym">)
</span><span class="line">   56 </span><span class="sym"></span>                      <span class="kwa">val</span> _ <span class="sym">=</span> update <span class="sym">(</span>ra<span class="sym">,</span> ir<span class="sym">,</span> sub <span class="sym">(</span>ra<span class="sym">,</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   57 </span><span class="sym"></span>                      <span class="kwa">val</span> ir <span class="sym">=</span> ir <span class="num">- 1
</span><span class="line">   58 </span><span class="num"></span>                  <span class="kwa">in if</span> ir <span class="sym">=</span> <span class="num">1
</span><span class="line">   59 </span><span class="num"></span>                        <span class="kwa">then</span> update <span class="sym">(</span>ra<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> rra<span class="sym">)
</span><span class="line">   60 </span><span class="sym"></span>                        <span class="kwa">else</span> <span class="sym">(</span>inner <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> ir<span class="sym">,</span> rra<span class="sym">);
</span><span class="line">   61 </span><span class="sym"></span>                              outer2 ir<span class="sym">)
</span><span class="line">   62 </span><span class="sym"></span>                  <span class="kwa">end
</span><span class="line">   63 </span><span class="kwa">       in</span> outer1 <span class="sym">(</span>n div <span class="num">2</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   64 </span><span class="sym"></span>          outer2 n
<span class="line">   65 </span>       <span class="kwa">end
</span><span class="line">   66 </span><span class="kwa">
</span><span class="line">   67 </span><span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   68 </span><span class="sym"></span><span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">);
</span><span class="line">   69 </span><span class="sym">
</span><span class="line">   70 </span><span class="sym"></span><span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =
</span><span class="line">   71 </span><span class="sym"></span>    <span class="kwa">let val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))
</span><span class="line">   72 </span><span class="sym"></span>        <span class="kwa">val</span> ary <span class="sym">=</span> Array.tabulate <span class="sym">(</span>n <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> gen_random <span class="num">1.0</span><span class="sym">)
</span><span class="line">   73 </span><span class="sym"></span>    <span class="kwa">in
</span><span class="line">   74 </span><span class="kwa"></span>        heapSort <span class="sym">(</span>n<span class="sym">,</span> ary<span class="sym">);
</span><span class="line">   75 </span><span class="sym"></span>        print <span class="sym">(</span>concat <span class="sym">[</span><span class="kwa">Real</span>.fmt <span class="sym">(</span><span class="kwa">StringCvt</span>.FIX <span class="sym">(</span>SOME <span class="num">10</span><span class="sym">)) (</span>sub <span class="sym">(</span>ary<span class="sym">,</span> n<span class="sym">)),
</span><span class="line">   76 </span><span class="sym"></span>                       <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">]);
</span><span class="line">   77 </span><span class="sym"></span>        OS.Process.success
<span class="line">   78 </span>    <span class="kwa">end
</span><span class="line">   79 </span><span class="kwa">end
</span><span class="line">   80 </span><span class="kwa">
</span><span class="line">   81 </span><span class="kwa">val</span> _ <span class="sym">=</span> SMLofNJ.exportFn<span class="sym">(</span><span class="str">&quot;heapsort&quot;</span><span class="sym">,</span> Test.main<span class="sym">);</span>
