<span class="com">(* heapsort.sml</span>
<span class="com"> *</span>
<span class="com"> *   Use heapsort to sort a random array of 64-bit floating-point numbers.</span>
<span class="com"> *</span>
<span class="com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="com"> *</span>
<span class="com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="com"> *)</span>
<span class="kwa">structure</span> Test<span class="sym">:</span><span class="kwa">sig val</span> main<span class="sym">:</span><span class="kwb">string</span><span class="sym">*</span><span class="kwb">string</span> list<span class="sym">-&gt;</span>OS.Process.status <span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>

    <span class="kwa">infix</span> <span class="num">8</span> $  <span class="kwa">val op</span> $ <span class="sym">=</span> Unsafe.Array.sub
    <span class="kwa">infix</span> <span class="num">3</span> <span class="sym">&lt;-</span> <span class="kwa">fun</span> <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">) &lt;-</span> x <span class="sym">=</span> Unsafe.Array.update <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> x<span class="sym">)</span>

    <span class="com">(* floating format *)</span>
    <span class="kwa">val</span> f10 <span class="sym">=</span> <span class="kwa">Real</span>.fmt <span class="sym">(</span><span class="kwa">StringCvt</span>.FIX <span class="sym">(</span>SOME <span class="num">10</span><span class="sym">))</span>

    <span class="com">(* the constants for the random number generator *)</span>
    <span class="kwa">val</span> <span class="sym">(</span>M<span class="sym">,</span> A<span class="sym">,</span> C<span class="sym">) = (</span><span class="num">139968</span><span class="sym">,</span> <span class="num">3877</span><span class="sym">,</span> <span class="num">29573</span><span class="sym">)</span>       <span class="kwa">val</span> M' <span class="sym">=</span> <span class="num">1.0</span> <span class="sym">/</span> <span class="kwb">real</span> M

    <span class="com">(* the random number generator *)</span>
    <span class="kwa">val</span> random <span class="sym">=</span> <span class="kwa">let val</span> l <span class="sym">=</span> ref <span class="num">42</span>
		 <span class="kwa">in fn</span> m <span class="sym">=&gt;</span> <span class="kwa">let val</span> c <span class="sym">= (!</span>l<span class="sym">*</span>A<span class="sym">+</span>C<span class="sym">)</span> mod M <span class="kwa">in</span> l<span class="sym">:=</span>c<span class="sym">;</span> m<span class="sym">*</span>M'<span class="sym">*</span><span class="kwb">real</span> c <span class="kwa">end</span>
		 <span class="kwa">end</span>

    <span class="com">(* the heapsort code itself *)</span>
    <span class="kwa">fun</span> heapsort <span class="sym">(</span>a<span class="sym">:</span> <span class="kwb">real</span> array<span class="sym">,</span> n<span class="sym">) =</span>
	<span class="kwa">let fun</span> sft <span class="sym">(</span>k<span class="sym">,</span> x<span class="sym">,</span> n<span class="sym">) =</span>
		<span class="kwa">let val</span> l1 <span class="sym">=</span> k<span class="sym">+</span>k<span class="sym">+</span><span class="num">1</span>
		<span class="kwa">in if</span> l1<span class="sym">&gt;=</span>n <span class="kwa">then</span> <span class="sym">(</span>a<span class="sym">,</span>k<span class="sym">)&lt;-</span>x
		   <span class="kwa">else let val</span> l2 <span class="sym">=</span> l1<span class="sym">+</span><span class="num">1</span>
			    <span class="kwa">val</span> <span class="sym">(</span>l<span class="sym">,</span> y<span class="sym">) =</span>
				<span class="kwa">if</span> l2<span class="sym">&gt;=</span>n <span class="kwa">then</span> <span class="sym">(</span>l1<span class="sym">,</span> a$l1<span class="sym">)</span>
				<span class="kwa">else let val</span> <span class="sym">(</span>y1<span class="sym">,</span> y2<span class="sym">) = (</span>a$l1<span class="sym">,</span> a$l2<span class="sym">)</span>
				     <span class="kwa">in if</span> y1<span class="sym">&gt;</span>y2 <span class="kwa">then</span> <span class="sym">(</span>l1<span class="sym">,</span> y1<span class="sym">)</span> <span class="kwa">else</span> <span class="sym">(</span>l2<span class="sym">,</span> y2<span class="sym">)</span>
				     <span class="kwa">end</span>
			<span class="kwa">in if</span> x<span class="sym">&gt;</span>y <span class="kwa">then</span> <span class="sym">(</span>a<span class="sym">,</span>k<span class="sym">)&lt;-</span>x <span class="kwa">else</span> <span class="sym">((</span>a<span class="sym">,</span>k<span class="sym">)&lt;-</span>y<span class="sym">;</span> sft <span class="sym">(</span>l<span class="sym">,</span> x<span class="sym">,</span> n<span class="sym">))</span>
			<span class="kwa">end</span>
		<span class="kwa">end</span>
	    <span class="kwa">fun</span> mkheap k <span class="sym">=</span> <span class="kwa">if</span> k <span class="sym">&gt;=</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(</span>sft<span class="sym">(</span>k<span class="sym">,</span>a$k<span class="sym">,</span>n<span class="sym">);</span> mkheap<span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">))</span> <span class="kwa">else</span> <span class="sym">()</span>
	    <span class="kwa">fun</span> srt <span class="num">0</span> <span class="sym">= ()</span>
	      <span class="sym">|</span> srt k <span class="sym">=</span> <span class="kwa">let val</span> t <span class="sym">=</span> a$k <span class="kwa">in</span> <span class="sym">(</span>a<span class="sym">,</span>k<span class="sym">)&lt;-</span>a$<span class="num">0</span><span class="sym">;</span> sft<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>t<span class="sym">,</span>k<span class="sym">);</span> srt<span class="sym">(</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">end</span>
	<span class="kwa">in</span> mkheap <span class="sym">((</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> div <span class="num">2</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span> srt <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">end</span>

    <span class="com">(* generate random array, sort it, print last element *)</span>
    <span class="kwa">fun</span> main' n <span class="sym">=</span>
	<span class="kwa">let val</span> a <span class="sym">=</span> Array.tabulate <span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> random <span class="num">1.0</span><span class="sym">)</span>
	<span class="kwa">in</span> heapsort <span class="sym">(</span>a<span class="sym">,</span>n<span class="sym">);</span> print <span class="sym">(</span>f10 <span class="sym">(</span>a$<span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">))</span> ^ <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span> OS.Process.success <span class="kwa">end</span>

    <span class="com">(* driver: *)</span>
    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1</span>
      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
<span class="kwa">end</span>
