<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;;
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;;
</span><span class="slc">;;; From: Manuel Giraud
</span><span class="slc">;;; Nicer rewrite: Nicolas Neuss
</span>
<span class="sym">(</span>defstruct node
  <span class="sym">(</span>item <span class="num">0</span> <span class="sym">:</span><span class="kwa">type</span> fixnum<span class="sym">)
</span>  left right<span class="sym">)

(</span><span class="kwa">defun</span> build<span class="sym">-</span>btree <span class="sym">(</span>item depth<span class="sym">)
  (</span>declare <span class="sym">(</span>fixnum item depth<span class="sym">))
  (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">zerop</span> depth<span class="sym">)
      (</span>make<span class="sym">-</span>node <span class="sym">:</span>item item<span class="sym">)
      (</span>let <span class="sym">((</span>item2 <span class="sym">(*</span> <span class="num">2</span> item<span class="sym">))
            (</span>depth<span class="num">-1</span> <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> depth<span class="sym">)))
        (</span>make<span class="sym">-</span>node <span class="sym">:</span>item item
                   <span class="sym">:</span>left <span class="sym">(</span>build<span class="sym">-</span>btree <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> item2<span class="sym">)</span> depth<span class="num">-1</span><span class="sym">)
                   :</span>right <span class="sym">(</span>build<span class="sym">-</span>btree item2 depth<span class="num">-1</span><span class="sym">)))))

(</span><span class="kwa">defun</span> check<span class="sym">-</span>node <span class="sym">(</span>node<span class="sym">)
  (</span>declare <span class="sym">(</span>values fixnum<span class="sym">) (</span>optimize speed <span class="sym">(</span>safety <span class="num">0</span><span class="sym">)))
  (</span><span class="kwa">if</span> node
      <span class="sym">(+ (</span>node<span class="sym">-</span>item node<span class="sym">)
	 (- (</span>check<span class="sym">-</span>node <span class="sym">(</span>node<span class="sym">-</span>left node<span class="sym">))
	    (</span>check<span class="sym">-</span>node <span class="sym">(</span>node<span class="sym">-</span>right node<span class="sym">))))
</span>      <span class="num">0</span><span class="sym">))

(</span><span class="kwa">defun</span> loop<span class="sym">-</span>depths <span class="sym">(</span><span class="kwa">max</span><span class="sym">-</span>depth <span class="sym">&amp;</span>key <span class="sym">(</span><span class="kwa">min</span><span class="sym">-</span>depth <span class="num">4</span><span class="sym">))
  (</span>loop for d from <span class="kwa">min</span><span class="sym">-</span>depth by <span class="num">2</span> upto <span class="kwa">max</span><span class="sym">-</span>depth do
        <span class="sym">(</span>let <span class="sym">((</span>iterations <span class="sym">(</span>ash <span class="num">1</span> <span class="sym">(+</span> <span class="kwa">max</span><span class="sym">-</span>depth <span class="kwa">min</span><span class="sym">-</span>depth <span class="sym">(-</span> d<span class="sym">)))))
          (</span>format t <span class="str">&quot;~A~T  trees of depth ~A~T  check: ~A~%&quot;</span>
                  iterations d
                  <span class="sym">(</span>loop for i from <span class="num">1</span> upto iterations
                        sum <span class="sym">(</span>check<span class="sym">-</span>node <span class="sym">(</span>build<span class="sym">-</span>btree i d<span class="sym">))
</span>                        sum <span class="sym">(</span>check<span class="sym">-</span>node <span class="sym">(</span>build<span class="sym">-</span>btree <span class="sym">(-</span> i<span class="sym">)</span> d<span class="sym">)))))))

(</span><span class="kwa">defun</span> main <span class="sym">(&amp;</span>optional <span class="sym">(</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> ext<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*)))))
  (</span>format t <span class="str">&quot;stretch tree of depth ~A~T  check: ~A~%&quot;</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> n<span class="sym">)
          (</span>check<span class="sym">-</span>node <span class="sym">(</span>build<span class="sym">-</span>btree <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> n<span class="sym">))))
  (</span>let <span class="sym">((</span>long<span class="sym">-</span>lived<span class="sym">-</span>tree <span class="sym">(</span>build<span class="sym">-</span>btree <span class="num">0</span> n<span class="sym">)))
    (</span>loop<span class="sym">-</span>depths n<span class="sym">)
    (</span>format t <span class="str">&quot;long lived tree of depth ~A~T  check: ~A~%&quot;</span>
            n <span class="sym">(</span>check<span class="sym">-</span>node long<span class="sym">-</span>lived<span class="sym">-</span>tree<span class="sym">))))

(</span>main<span class="sym">)</span>
