<span class="slc">-- $Id: heapsort-gnat.code,v 1.11 2005-09-20 05:16:24 bfulgham Exp $
</span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="slc">-- Ada 95 code by C.C.
</span><span class="slc">-- Modified by Pascal Obry on 2005/03/30
</span>
<span class="kwa">package</span> Random_Long_Float <span class="kwa">is
   function</span> Gen_Random <span class="sym">(</span>Supr <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Long_Float</span><span class="sym">;
</span>   <span class="kwa">pragma</span> Inline <span class="sym">(</span>Gen_Random<span class="sym">);
</span><span class="kwa">end</span> Random_Long_Float<span class="sym">;

</span><span class="kwa">package body</span> Random_Long_Float <span class="kwa">is
</span>   IM          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">139968</span><span class="sym">;
</span>   IA          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span>  <span class="sym">:=</span> <span class="num">3877</span><span class="sym">;
</span>   IC          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span>  <span class="sym">:=</span> <span class="num">29573</span><span class="sym">;
</span>   Last        <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">42</span><span class="sym">;

</span>   <span class="kwa">function</span> Gen_Random <span class="sym">(</span>Supr <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Long_Float</span> <span class="kwa">is
   begin
</span>      Last <span class="sym">:= (</span>Last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> <span class="kwa">mod</span> IM<span class="sym">;
</span>      <span class="kwa">return</span> Supr <span class="sym">*</span> <span class="kwb">Long_Float</span> <span class="sym">(</span>Last<span class="sym">) /</span> <span class="kwb">Long_Float</span> <span class="sym">(</span>IM<span class="sym">);
</span>   <span class="kwa">end</span> Gen_Random<span class="sym">;
</span><span class="kwa">end</span> Random_Long_Float<span class="sym">;

</span><span class="kwa">package</span> Heapsort_Pck <span class="kwa">is

   type</span> Long_Float_Array <span class="kwa">is array</span> <span class="sym">(</span><span class="kwb">Positive</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> <span class="kwb">Long_Float</span><span class="sym">;
</span>   <span class="kwa">type</span> Long_Float_Array_Ptr <span class="kwa">is access</span> Long_Float_Array<span class="sym">;

</span>   <span class="kwa">procedure</span> Heapsort <span class="sym">(</span>A <span class="sym">:</span> <span class="kwa">in out</span> Long_Float_Array<span class="sym">);
</span><span class="kwa">end</span> Heapsort_Pck<span class="sym">;

</span><span class="kwa">package body</span> Heapsort_Pck <span class="kwa">is

   procedure</span> Heapsort <span class="sym">(</span>A <span class="sym">:</span> <span class="kwa">in out</span> Long_Float_Array<span class="sym">)</span> <span class="kwa">is
</span>      First         <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Positive</span> <span class="sym">:=</span> A<span class="sym">'</span>First<span class="sym">;
</span>      IR            <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>      One           <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>      Minus_One     <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:= -</span><span class="num">1</span><span class="sym">;
</span>      First_Minus_1 <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> First <span class="sym">+</span> Minus_One<span class="sym">;
</span>      First_Plus_1  <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> First <span class="sym">+</span> One<span class="sym">;
</span>      RRA           <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">;
</span>      L             <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> One <span class="sym">+ (</span>A<span class="sym">'</span>Length <span class="sym">/</span> <span class="num">2</span><span class="sym">);
</span>      K1<span class="sym">,</span> K2        <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>   <span class="kwa">begin
      if</span> A<span class="sym">'</span>Length <span class="sym">&lt;=</span> <span class="num">0</span> <span class="kwa">then
         return</span><span class="sym">;
</span>      <span class="kwa">end if</span><span class="sym">;
</span>      IR <span class="sym">:=</span> A<span class="sym">'</span>Last<span class="sym">;
</span>      <span class="kwa">loop
         if</span> L <span class="sym">&gt;</span> One <span class="kwa">then
</span>            L <span class="sym">:=</span> L <span class="sym">-</span> One<span class="sym">;
</span>            RRA <span class="sym">:=</span> A <span class="sym">(</span>First_Minus_1 <span class="sym">+</span> L<span class="sym">);
</span>         <span class="kwa">else
</span>            RRA <span class="sym">:=</span> A <span class="sym">(</span>IR<span class="sym">);
</span>            A <span class="sym">(</span>IR<span class="sym">) :=</span> A <span class="sym">(</span>First<span class="sym">);
</span>            <span class="kwa">if</span> IR <span class="sym">&lt;=</span> First_Plus_1 <span class="kwa">then
</span>               A <span class="sym">(</span>First<span class="sym">) :=</span> RRA<span class="sym">;
</span>               <span class="kwa">exit</span><span class="sym">;
</span>            <span class="kwa">else
</span>               IR <span class="sym">:=</span> IR <span class="sym">+</span> Minus_One<span class="sym">;
</span>            <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         K1 <span class="sym">:=</span> First_Minus_1 <span class="sym">+</span> L<span class="sym">;
</span>         K2 <span class="sym">:=</span> K1 <span class="sym">+</span> L<span class="sym">;
</span>         <span class="kwa">while</span> K2 <span class="sym">&lt;=</span> IR <span class="kwa">loop
            if</span> K2 <span class="sym">&lt;</span> IR <span class="kwa">then
               if</span> A <span class="sym">(</span>K2<span class="sym">) &lt;</span> A <span class="sym">(</span>K2 <span class="sym">+</span> One<span class="sym">)</span> <span class="kwa">then
</span>                  K2 <span class="sym">:=</span> K2 <span class="sym">+</span> One<span class="sym">;
</span>               <span class="kwa">end if</span><span class="sym">;
</span>            <span class="kwa">end if</span><span class="sym">;
</span>            <span class="kwa">if</span> RRA <span class="sym">&lt;</span> A <span class="sym">(</span>K2<span class="sym">)</span> <span class="kwa">then
</span>               A <span class="sym">(</span>K1<span class="sym">) :=</span> A <span class="sym">(</span>K2<span class="sym">);
</span>               K1 <span class="sym">:=</span> K2<span class="sym">;
</span>               K2 <span class="sym">:=</span> K1 <span class="sym">+ (</span>K1 <span class="sym">-</span> First_Minus_1<span class="sym">);
</span>            <span class="kwa">else
</span>               K2 <span class="sym">:=</span> IR <span class="sym">+</span> One<span class="sym">;
</span>            <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>         A <span class="sym">(</span>K1<span class="sym">) :=</span> RRA<span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">end</span> Heapsort<span class="sym">;

</span><span class="kwa">end</span> Heapsort_Pck<span class="sym">;

</span><span class="kwa">with</span> Ada.Command_Line<span class="sym">,</span> Text_IO<span class="sym">;
</span><span class="kwa">with</span> Heapsort_Pck<span class="sym">;</span> <span class="kwa">use</span> Heapsort_Pck<span class="sym">;
</span><span class="kwa">with</span> Random_Long_Float<span class="sym">;

</span><span class="kwa">procedure</span> Heapsort <span class="kwa">is
   package</span> Rio <span class="kwa">is new</span> Text_IO.Float_IO <span class="sym">(</span>Num <span class="sym">=&gt;</span> <span class="kwb">Long_Float</span><span class="sym">);

</span>   N <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;
</span>   X <span class="sym">:</span> Long_Float_Array_Ptr<span class="sym">;
</span><span class="kwa">begin
</span>   N <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   X <span class="sym">:=</span> <span class="kwa">new</span> Long_Float_Array <span class="sym">(</span><span class="num">1</span> .. N<span class="sym">);
</span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> X<span class="sym">'</span><span class="kwa">Range loop
</span>      X <span class="sym">(</span>Iter<span class="sym">) :=</span> Random_Long_Float.Gen_Random <span class="sym">(</span>Supr <span class="sym">=&gt;</span> <span class="num">1.0</span><span class="sym">);
</span>   <span class="kwa">end loop</span><span class="sym">;

</span>   Heapsort <span class="sym">(</span>A <span class="sym">=&gt;</span> X.<span class="kwa">all</span><span class="sym">);
</span>   Rio.Put <span class="sym">(</span>X <span class="sym">(</span>X<span class="sym">'</span>Last<span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">10</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>   Text_IO.New_Line<span class="sym">;
</span><span class="kwa">end</span> Heapsort<span class="sym">;</span>
