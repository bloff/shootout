<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: heapsort-gnat.code,v 1.2 2004-11-08 08:15:14 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://dada.perl.it/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- Ada 95 code by C.C.
</FONT></I>
<I><FONT COLOR="#B22222">-- Annotated Ada Reference Manual ISO/IEC 8652:1995: http://www.ada-auth.org/
</FONT></I>
<B><FONT COLOR="#A020F0">with</FONT></B> System, Ada.Command_Line, Text_IO;

<B><FONT COLOR="#A020F0">procedure</FONT></B> Heapsort <B><FONT COLOR="#A020F0">is</FONT></B>
   <B><FONT COLOR="#A020F0">type</FONT></B> Real <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">digits</FONT></B> Positive'Max (15, System.Max_Digits);
   <B><FONT COLOR="#A020F0">package</FONT></B> Rio <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> Text_IO.Float_IO (Num =&gt; Real);

   <B><FONT COLOR="#A020F0">package</FONT></B> Random_Real <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">function</FONT></B> Gen_Random (Supr : Real) <B><FONT COLOR="#A020F0">return</FONT></B> Real;
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Inline (Gen_Random);
   <B><FONT COLOR="#A020F0">end</FONT></B> Random_Real;

   <B><FONT COLOR="#A020F0">package</FONT></B> <B><FONT COLOR="#A020F0">body</FONT></B> Random_Real <B><FONT COLOR="#A020F0">is</FONT></B>
      IM          : <B><FONT COLOR="#A020F0">constant</FONT></B> Positive := 139968;
      IA          : <B><FONT COLOR="#A020F0">constant</FONT></B> Integer := 3877;
      IC          : <B><FONT COLOR="#A020F0">constant</FONT></B> Integer := 29573;
      Last        : Integer := 42;

      <B><FONT COLOR="#A020F0">function</FONT></B> Gen_Random (Supr : Real) <B><FONT COLOR="#A020F0">return</FONT></B> Real <B><FONT COLOR="#A020F0">is</FONT></B>
         <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Overflow_Check);
         <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Range_Check);
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         Last := (Last * IA + IC) <B><FONT COLOR="#A020F0">mod</FONT></B> IM;
         <B><FONT COLOR="#A020F0">return</FONT></B> Supr * Real (Last) / Real (IM);
      <B><FONT COLOR="#A020F0">end</FONT></B> Gen_Random;
   <B><FONT COLOR="#A020F0">end</FONT></B> Random_Real;

   <B><FONT COLOR="#A020F0">type</FONT></B> Range_Int <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> Integer;
   <B><FONT COLOR="#A020F0">subtype</FONT></B> Offset_Int <B><FONT COLOR="#A020F0">is</FONT></B> Range_Int;

   <B><FONT COLOR="#A020F0">type</FONT></B> Real_Array <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">array</FONT></B> (Range_Int <B><FONT COLOR="#A020F0">range</FONT></B> &lt;&gt;) <B><FONT COLOR="#A020F0">of</FONT></B> Real;
   <B><FONT COLOR="#A020F0">type</FONT></B> Real_Array_Ptr <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">access</FONT></B> Real_Array;

   <B><FONT COLOR="#A020F0">procedure</FONT></B> Heapsort (A : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> Real_Array) <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Overflow_Check);
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Index_Check);
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Range_Check);
      <B><FONT COLOR="#A020F0">subtype</FONT></B> Range_Positive <B><FONT COLOR="#A020F0">is</FONT></B> Range_Int;
      First          : <B><FONT COLOR="#A020F0">constant</FONT></B> Range_Int := A'First;    <I><FONT COLOR="#B22222">--  might be &lt;= -1
</FONT></I>      IR             : Range_Positive;
      One            : <B><FONT COLOR="#A020F0">constant</FONT></B> Offset_Int := 1;
      Minus_One      : <B><FONT COLOR="#A020F0">constant</FONT></B> Offset_Int := -1;
      First_Minus_1  : <B><FONT COLOR="#A020F0">constant</FONT></B> Range_Int := First + Minus_One;
      First_Plus_1   : <B><FONT COLOR="#A020F0">constant</FONT></B> Range_Int := First + One;
      RRA            : Real;
      L              : Offset_Int := One + (A'Length / 2);
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      <B><FONT COLOR="#A020F0">if</FONT></B> A'Length &lt;= 0 <B><FONT COLOR="#A020F0">then</FONT></B>
         <B><FONT COLOR="#A020F0">return</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
      IR := A'Last;
      <B><FONT COLOR="#A020F0">loop</FONT></B>
         <B><FONT COLOR="#A020F0">if</FONT></B> L &gt; One <B><FONT COLOR="#A020F0">then</FONT></B>
            L := L - One;
            RRA := A (First_Minus_1 + L);
         <B><FONT COLOR="#A020F0">else</FONT></B>
            RRA := A (IR);
            A (IR) := A (First);
            <B><FONT COLOR="#A020F0">if</FONT></B> IR &lt;= First_Plus_1 <B><FONT COLOR="#A020F0">then</FONT></B>
               A (First) := RRA;
               <B><FONT COLOR="#A020F0">exit</FONT></B>;
            <B><FONT COLOR="#A020F0">else</FONT></B>
               IR := IR + Minus_One;
            <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">declare</FONT></B>
            K1    : Range_Positive := First_Minus_1 + L;
            K2    : Range_Positive := K1 + L;
         <B><FONT COLOR="#A020F0">begin</FONT></B>
            <B><FONT COLOR="#A020F0">while</FONT></B> K2 &lt;= IR <B><FONT COLOR="#A020F0">loop</FONT></B>
               <B><FONT COLOR="#A020F0">if</FONT></B> K2 &lt; IR <B><FONT COLOR="#A020F0">then</FONT></B>
                  <B><FONT COLOR="#A020F0">if</FONT></B> A (K2) &lt; A (K2 + One) <B><FONT COLOR="#A020F0">then</FONT></B>
                     K2 := K2 + One;
                  <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
               <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
               <B><FONT COLOR="#A020F0">if</FONT></B> RRA &lt; A (K2) <B><FONT COLOR="#A020F0">then</FONT></B>
                  A (K1) := A (K2);
                  K1 := K2;
                  K2 := K1 + (K1 - First_Minus_1);
               <B><FONT COLOR="#A020F0">else</FONT></B>
                  K2 := IR + One;
               <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
            <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
            A (K1) := RRA;
         <B><FONT COLOR="#A020F0">end</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B> Heapsort;

   N           : Range_Int;
   No_Verify   : <B><FONT COLOR="#A020F0">constant</FONT></B> Boolean := True;
   Chk         : Real := 0.0;
   X           : Real_Array_Ptr;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      N := Range_Int'Max (1, Range_Int'Value (Ada.Command_Line.Argument (1)));
   <B><FONT COLOR="#A020F0">exception</FONT></B>
      <B><FONT COLOR="#A020F0">when</FONT></B> Constraint_Error =&gt; N := 1;
   <B><FONT COLOR="#A020F0">end</FONT></B>;
   X := <B><FONT COLOR="#A020F0">new</FONT></B> Real_Array (0 .. N - 1);   <I><FONT COLOR="#B22222">--  3% slower than 'declare' (stack)
</FONT></I>   <B><FONT COLOR="#A020F0">for</FONT></B> Iter <B><FONT COLOR="#A020F0">in</FONT></B> X'Range <B><FONT COLOR="#A020F0">loop</FONT></B>
      X (Iter) := Random_Real.Gen_Random (Supr =&gt; 1.0);
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   <B><FONT COLOR="#A020F0">if</FONT></B> No_Verify <B><FONT COLOR="#A020F0">then</FONT></B>
      Heapsort (A =&gt; X.<B><FONT COLOR="#A020F0">all</FONT></B>);
      Rio.Put (X (X'Last), Fore =&gt; 0, Aft =&gt; 10, Exp =&gt; 0);
      Text_IO.New_Line;
   <B><FONT COLOR="#A020F0">else</FONT></B>
      <B><FONT COLOR="#A020F0">for</FONT></B> Iter <B><FONT COLOR="#A020F0">in</FONT></B> X'Range <B><FONT COLOR="#A020F0">loop</FONT></B> Chk := Chk + X (Iter); <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
      Heapsort (A =&gt; X.<B><FONT COLOR="#A020F0">all</FONT></B>);
      <B><FONT COLOR="#A020F0">for</FONT></B> K <B><FONT COLOR="#A020F0">in</FONT></B> X'Range <B><FONT COLOR="#A020F0">loop</FONT></B>
         <B><FONT COLOR="#A020F0">pragma</FONT></B> Assert (K + 1 = X'Last <B><FONT COLOR="#A020F0">or</FONT></B> <B><FONT COLOR="#A020F0">else</FONT></B> X (K) &lt;= X (K + 1));
         Chk := Chk - X (K);
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Assert (<B><FONT COLOR="#A020F0">abs</FONT></B> Chk &lt; 50.0 * Real (N) * Real'Model_Epsilon);
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
<B><FONT COLOR="#A020F0">end</FONT></B> Heapsort;</pre></td></tr></table>
