<span class="line">    1 </span><span class="slc">-- $Id: heapsort-gnat.code,v 1.4 2004-11-13 07:41:40 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- Ada 95 code by C.C.
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="slc">-- Annotated Ada Reference Manual ISO/IEC 8652:1995: http://www.ada-auth.org/
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="kwa">with</span> System<span class="sym">,</span> Ada.Command_Line<span class="sym">,</span> Text_IO<span class="sym">;
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span><span class="kwa">procedure</span> Heapsort <span class="kwa">is
</span><span class="line">   10 </span><span class="kwa">   type</span> Real <span class="kwa">is digits</span> <span class="kwb">Positive</span><span class="sym">'</span>Max <span class="sym">(</span><span class="num">15</span><span class="sym">,</span> System.Max_Digits<span class="sym">);
</span><span class="line">   11 </span><span class="sym"></span>   <span class="kwa">package</span> Rio <span class="kwa">is new</span> Text_IO.Float_IO <span class="sym">(</span>Num <span class="sym">=&gt;</span> Real<span class="sym">);
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span>   <span class="kwa">package</span> Random_Real <span class="kwa">is
</span><span class="line">   14 </span><span class="kwa">      function</span> Gen_Random <span class="sym">(</span>Supr <span class="sym">:</span> Real<span class="sym">)</span> <span class="kwa">return</span> Real<span class="sym">;
</span><span class="line">   15 </span><span class="sym"></span>      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Gen_Random<span class="sym">);
</span><span class="line">   16 </span><span class="sym"></span>   <span class="kwa">end</span> Random_Real<span class="sym">;
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span>   <span class="kwa">package body</span> Random_Real <span class="kwa">is
</span><span class="line">   19 </span><span class="kwa"></span>      IM          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">139968</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>      IA          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">3877</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym"></span>      IC          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">29573</span><span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>      Last        <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">42</span><span class="sym">;
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span>      <span class="kwa">function</span> Gen_Random <span class="sym">(</span>Supr <span class="sym">:</span> Real<span class="sym">)</span> <span class="kwa">return</span> Real <span class="kwa">is
</span><span class="line">   25 </span><span class="kwa">         pragma</span> Suppress <span class="sym">(</span>Overflow_Check<span class="sym">);
</span><span class="line">   26 </span><span class="sym"></span>         <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Range_Check<span class="sym">);
</span><span class="line">   27 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">   28 </span><span class="kwa"></span>         Last <span class="sym">:= (</span>Last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> <span class="kwa">mod</span> IM<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>         <span class="kwa">return</span> Supr <span class="sym">*</span> Real <span class="sym">(</span>Last<span class="sym">) /</span> Real <span class="sym">(</span>IM<span class="sym">);
</span><span class="line">   30 </span><span class="sym"></span>      <span class="kwa">end</span> Gen_Random<span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span>   <span class="kwa">end</span> Random_Real<span class="sym">;
</span><span class="line">   32 </span><span class="sym">
</span><span class="line">   33 </span><span class="sym"></span>   <span class="kwa">type</span> Range_Int <span class="kwa">is new</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>   <span class="kwa">subtype</span> Offset_Int <span class="kwa">is</span> Range_Int<span class="sym">;
</span><span class="line">   35 </span><span class="sym">
</span><span class="line">   36 </span><span class="sym"></span>   <span class="kwa">type</span> Real_Array <span class="kwa">is array</span> <span class="sym">(</span>Range_Int <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> Real<span class="sym">;
</span><span class="line">   37 </span><span class="sym"></span>   <span class="kwa">type</span> Real_Array_Ptr <span class="kwa">is access</span> Real_Array<span class="sym">;
</span><span class="line">   38 </span><span class="sym">
</span><span class="line">   39 </span><span class="sym"></span>   <span class="kwa">procedure</span> Heapsort <span class="sym">(</span>A <span class="sym">:</span> <span class="kwa">in out</span> Real_Array<span class="sym">)</span> <span class="kwa">is
</span><span class="line">   40 </span><span class="kwa">      pragma</span> Suppress <span class="sym">(</span>Overflow_Check<span class="sym">);
</span><span class="line">   41 </span><span class="sym"></span>      <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Index_Check<span class="sym">);
</span><span class="line">   42 </span><span class="sym"></span>      <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Range_Check<span class="sym">);
</span><span class="line">   43 </span><span class="sym"></span>      <span class="kwa">subtype</span> Range_Positive <span class="kwa">is</span> Range_Int<span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>      First          <span class="sym">:</span> <span class="kwa">constant</span> Range_Int <span class="sym">:=</span> A<span class="sym">'</span>First<span class="sym">;</span>    <span class="slc">--  might be &lt;= -1
</span><span class="line">   45 </span><span class="slc"></span>      IR             <span class="sym">:</span> Range_Positive<span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span>      One            <span class="sym">:</span> <span class="kwa">constant</span> Offset_Int <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span>      Minus_One      <span class="sym">:</span> <span class="kwa">constant</span> Offset_Int <span class="sym">:= -</span><span class="num">1</span><span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span>      First_Minus_1  <span class="sym">:</span> <span class="kwa">constant</span> Range_Int <span class="sym">:=</span> First <span class="sym">+</span> Minus_One<span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span>      First_Plus_1   <span class="sym">:</span> <span class="kwa">constant</span> Range_Int <span class="sym">:=</span> First <span class="sym">+</span> One<span class="sym">;
</span><span class="line">   50 </span><span class="sym"></span>      RRA            <span class="sym">:</span> Real<span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>      L              <span class="sym">:</span> Offset_Int <span class="sym">:=</span> One <span class="sym">+ (</span>A<span class="sym">'</span>Length <span class="sym">/</span> <span class="num">2</span><span class="sym">);
</span><span class="line">   52 </span><span class="sym"></span>   <span class="kwa">begin
</span><span class="line">   53 </span><span class="kwa">      if</span> A<span class="sym">'</span>Length <span class="sym">&lt;=</span> <span class="num">0</span> <span class="kwa">then
</span><span class="line">   54 </span><span class="kwa">         return</span><span class="sym">;
</span><span class="line">   55 </span><span class="sym"></span>      <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   56 </span><span class="sym"></span>      IR <span class="sym">:=</span> A<span class="sym">'</span>Last<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>      <span class="kwa">loop
</span><span class="line">   58 </span><span class="kwa">         if</span> L <span class="sym">&gt;</span> One <span class="kwa">then
</span><span class="line">   59 </span><span class="kwa"></span>            L <span class="sym">:=</span> L <span class="sym">-</span> One<span class="sym">;
</span><span class="line">   60 </span><span class="sym"></span>            RRA <span class="sym">:=</span> A <span class="sym">(</span>First_Minus_1 <span class="sym">+</span> L<span class="sym">);
</span><span class="line">   61 </span><span class="sym"></span>         <span class="kwa">else
</span><span class="line">   62 </span><span class="kwa"></span>            RRA <span class="sym">:=</span> A <span class="sym">(</span>IR<span class="sym">);
</span><span class="line">   63 </span><span class="sym"></span>            A <span class="sym">(</span>IR<span class="sym">) :=</span> A <span class="sym">(</span>First<span class="sym">);
</span><span class="line">   64 </span><span class="sym"></span>            <span class="kwa">if</span> IR <span class="sym">&lt;=</span> First_Plus_1 <span class="kwa">then
</span><span class="line">   65 </span><span class="kwa"></span>               A <span class="sym">(</span>First<span class="sym">) :=</span> RRA<span class="sym">;
</span><span class="line">   66 </span><span class="sym"></span>               <span class="kwa">exit</span><span class="sym">;
</span><span class="line">   67 </span><span class="sym"></span>            <span class="kwa">else
</span><span class="line">   68 </span><span class="kwa"></span>               IR <span class="sym">:=</span> IR <span class="sym">+</span> Minus_One<span class="sym">;
</span><span class="line">   69 </span><span class="sym"></span>            <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   70 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span>         <span class="kwa">declare
</span><span class="line">   72 </span><span class="kwa"></span>            K1    <span class="sym">:</span> Range_Positive <span class="sym">:=</span> First_Minus_1 <span class="sym">+</span> L<span class="sym">;
</span><span class="line">   73 </span><span class="sym"></span>            K2    <span class="sym">:</span> Range_Positive <span class="sym">:=</span> K1 <span class="sym">+</span> L<span class="sym">;
</span><span class="line">   74 </span><span class="sym"></span>         <span class="kwa">begin
</span><span class="line">   75 </span><span class="kwa">            while</span> K2 <span class="sym">&lt;=</span> IR <span class="kwa">loop
</span><span class="line">   76 </span><span class="kwa">               if</span> K2 <span class="sym">&lt;</span> IR <span class="kwa">then
</span><span class="line">   77 </span><span class="kwa">                  if</span> A <span class="sym">(</span>K2<span class="sym">) &lt;</span> A <span class="sym">(</span>K2 <span class="sym">+</span> One<span class="sym">)</span> <span class="kwa">then
</span><span class="line">   78 </span><span class="kwa"></span>                     K2 <span class="sym">:=</span> K2 <span class="sym">+</span> One<span class="sym">;
</span><span class="line">   79 </span><span class="sym"></span>                  <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   80 </span><span class="sym"></span>               <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   81 </span><span class="sym"></span>               <span class="kwa">if</span> RRA <span class="sym">&lt;</span> A <span class="sym">(</span>K2<span class="sym">)</span> <span class="kwa">then
</span><span class="line">   82 </span><span class="kwa"></span>                  A <span class="sym">(</span>K1<span class="sym">) :=</span> A <span class="sym">(</span>K2<span class="sym">);
</span><span class="line">   83 </span><span class="sym"></span>                  K1 <span class="sym">:=</span> K2<span class="sym">;
</span><span class="line">   84 </span><span class="sym"></span>                  K2 <span class="sym">:=</span> K1 <span class="sym">+ (</span>K1 <span class="sym">-</span> First_Minus_1<span class="sym">);
</span><span class="line">   85 </span><span class="sym"></span>               <span class="kwa">else
</span><span class="line">   86 </span><span class="kwa"></span>                  K2 <span class="sym">:=</span> IR <span class="sym">+</span> One<span class="sym">;
</span><span class="line">   87 </span><span class="sym"></span>               <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   88 </span><span class="sym"></span>            <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   89 </span><span class="sym"></span>            A <span class="sym">(</span>K1<span class="sym">) :=</span> RRA<span class="sym">;
</span><span class="line">   90 </span><span class="sym"></span>         <span class="kwa">end</span><span class="sym">;
</span><span class="line">   91 </span><span class="sym"></span>      <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   92 </span><span class="sym"></span>   <span class="kwa">end</span> Heapsort<span class="sym">;
</span><span class="line">   93 </span><span class="sym">
</span><span class="line">   94 </span><span class="sym"></span>   N           <span class="sym">:</span> Range_Int<span class="sym">;
</span><span class="line">   95 </span><span class="sym"></span>   No_Verify   <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> True<span class="sym">;
</span><span class="line">   96 </span><span class="sym"></span>   Chk         <span class="sym">:</span> Real <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   97 </span><span class="sym"></span>   X           <span class="sym">:</span> Real_Array_Ptr<span class="sym">;
</span><span class="line">   98 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   99 </span><span class="kwa">   begin
</span><span class="line">  100 </span><span class="kwa"></span>      N <span class="sym">:=</span> Range_Int<span class="sym">'</span>Max <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> Range_Int<span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">)));
</span><span class="line">  101 </span><span class="sym"></span>   <span class="kwa">exception
</span><span class="line">  102 </span><span class="kwa">      when</span> Constraint_Error <span class="sym">=&gt;</span> N <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  103 </span><span class="sym"></span>   <span class="kwa">end</span><span class="sym">;
</span><span class="line">  104 </span><span class="sym"></span>   X <span class="sym">:=</span> <span class="kwa">new</span> Real_Array <span class="sym">(</span><span class="num">0</span> .. N <span class="num">- 1</span><span class="sym">);</span>   <span class="slc">--  3% slower than 'declare' (stack)
</span><span class="line">  105 </span><span class="slc"></span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> X<span class="sym">'</span><span class="kwa">Range loop
</span><span class="line">  106 </span><span class="kwa"></span>      X <span class="sym">(</span>Iter<span class="sym">) :=</span> Random_Real.Gen_Random <span class="sym">(</span>Supr <span class="sym">=&gt;</span> <span class="num">1.0</span><span class="sym">);
</span><span class="line">  107 </span><span class="sym"></span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  108 </span><span class="sym"></span>   <span class="kwa">if</span> No_Verify <span class="kwa">then
</span><span class="line">  109 </span><span class="kwa"></span>      Heapsort <span class="sym">(</span>A <span class="sym">=&gt;</span> X.<span class="kwa">all</span><span class="sym">);
</span><span class="line">  110 </span><span class="sym"></span>      Rio.Put <span class="sym">(</span>X <span class="sym">(</span>X<span class="sym">'</span>Last<span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">10</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span><span class="line">  111 </span><span class="sym"></span>      Text_IO.New_Line<span class="sym">;
</span><span class="line">  112 </span><span class="sym"></span>   <span class="kwa">else
</span><span class="line">  113 </span><span class="kwa">      for</span> Iter <span class="kwa">in</span> X<span class="sym">'</span><span class="kwa">Range loop</span> Chk <span class="sym">:=</span> Chk <span class="sym">+</span> X <span class="sym">(</span>Iter<span class="sym">);</span> <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  114 </span><span class="sym"></span>      Heapsort <span class="sym">(</span>A <span class="sym">=&gt;</span> X.<span class="kwa">all</span><span class="sym">);
</span><span class="line">  115 </span><span class="sym"></span>      <span class="kwa">for</span> K <span class="kwa">in</span> X<span class="sym">'</span><span class="kwa">Range loop
</span><span class="line">  116 </span><span class="kwa">         pragma</span> Assert <span class="sym">(</span>K <span class="sym">+</span> <span class="num">1</span> <span class="sym">=</span> X<span class="sym">'</span>Last <span class="kwa">or else</span> X <span class="sym">(</span>K<span class="sym">) &lt;=</span> X <span class="sym">(</span>K <span class="sym">+</span> <span class="num">1</span><span class="sym">));
</span><span class="line">  117 </span><span class="sym"></span>         Chk <span class="sym">:=</span> Chk <span class="sym">-</span> X <span class="sym">(</span>K<span class="sym">);
</span><span class="line">  118 </span><span class="sym"></span>      <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  119 </span><span class="sym"></span>      <span class="kwa">pragma</span> Assert <span class="sym">(</span><span class="kwa">abs</span> Chk <span class="sym">&lt;</span> <span class="num">50.0</span> <span class="sym">*</span> Real <span class="sym">(</span>N<span class="sym">) *</span> Real<span class="sym">'</span>Model_Epsilon<span class="sym">);
</span><span class="line">  120 </span><span class="sym"></span>   <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  121 </span><span class="sym"></span><span class="kwa">end</span> Heapsort<span class="sym">;</span>
