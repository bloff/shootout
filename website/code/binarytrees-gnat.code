<span class="slc">----------------------------------------------------------------
</span><span class="slc">-- BinaryTrees
</span><span class="slc">--
</span><span class="slc">-- Ada 95 (GNAT)
</span><span class="slc">--
</span><span class="slc">-- Contributed by Jim Rogers
</span><span class="slc">----------------------------------------------------------------
</span><span class="kwa">with</span> Treenodes<span class="sym">;</span> <span class="kwa">use</span> Treenodes<span class="sym">;
</span><span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;
</span><span class="kwa">with</span> Ada.Integer_Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Integer_Text_Io<span class="sym">;
</span><span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span><span class="kwa">with</span> Ada.Characters.Latin_1<span class="sym">;</span> <span class="kwa">use</span> Ada.Characters.Latin_1<span class="sym">;

</span><span class="kwa">procedure</span> Binarytrees <span class="kwa">is
</span>   Min_Depth <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">4</span><span class="sym">;
</span>   N <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>   Stretch_Tree <span class="sym">:</span> TreeNode<span class="sym">;
</span>   Long_Lived_Tree <span class="sym">:</span> TreeNode<span class="sym">;
</span>   Short_Lived_Tree_1 <span class="sym">:</span> TreeNode<span class="sym">;
</span>   Short_Lived_Tree_2 <span class="sym">:</span> TreeNode<span class="sym">;
</span>   Max_Depth <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;
</span>   Stretch_Depth <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;
</span>   Check <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>   Sum <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>   Depth <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;
</span>   Iterations <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;
</span><span class="kwa">begin
   if</span> Argument_Count <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then
</span>      N <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">end if</span><span class="sym">;
</span>   Max_Depth <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Max<span class="sym">(</span>Min_Depth <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> N<span class="sym">);
</span>   Stretch_Depth <span class="sym">:=</span> Max_Depth <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>   Stretch_Tree <span class="sym">:=</span> Bottom_Up_Tree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> Stretch_Depth<span class="sym">);
</span>   Item_Check<span class="sym">(</span>Stretch_Tree<span class="sym">,</span> Check<span class="sym">);
</span>   Put<span class="sym">(</span><span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">);
</span>   Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Stretch_Depth<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);
</span>   Put<span class="sym">(</span>Ht <span class="sym">&amp;</span> <span class="str">&quot; check: &quot;</span><span class="sym">);
</span>   Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Check<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);
</span>   New_Line<span class="sym">;

</span>   Long_Lived_Tree <span class="sym">:=</span> Bottom_Up_Tree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> Max_Depth<span class="sym">);

</span>   Depth <span class="sym">:=</span> Min_Depth<span class="sym">;
</span>   <span class="kwa">while</span> Depth <span class="sym">&lt;=</span> Max_Depth <span class="kwa">loop
</span>      Iterations <span class="sym">:=</span> <span class="num">2</span><span class="sym">**(</span>Max_Depth <span class="sym">-</span> Depth <span class="sym">+</span> Min_Depth<span class="sym">);
</span>      Check <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span>..Iterations <span class="kwa">loop
</span>         Short_Lived_Tree_1 <span class="sym">:=</span> Bottom_Up_Tree<span class="sym">(</span>Item <span class="sym">=&gt;</span> I<span class="sym">,</span> Depth <span class="sym">=&gt;</span> Depth<span class="sym">);
</span>         Short_Lived_Tree_2 <span class="sym">:=</span> Bottom_Up_Tree<span class="sym">(</span>Item <span class="sym">=&gt;-</span>I<span class="sym">,</span> Depth <span class="sym">=&gt;</span> Depth<span class="sym">);
</span>         Item_Check<span class="sym">(</span>Short_Lived_Tree_1<span class="sym">,</span> Sum<span class="sym">);
</span>         Check <span class="sym">:=</span> check <span class="sym">+</span> Sum<span class="sym">;
</span>         Item_Check<span class="sym">(</span>Short_Lived_Tree_2<span class="sym">,</span> Sum<span class="sym">);
</span>         Check <span class="sym">:=</span> Check <span class="sym">+</span> Sum<span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>      Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>      Put<span class="sym">(</span>Ht <span class="sym">&amp;</span> <span class="str">&quot; trees of depth &quot;</span><span class="sym">);
</span>      Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Depth<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>      Put<span class="sym">(</span>Ht <span class="sym">&amp;</span> <span class="str">&quot; check: &quot;</span><span class="sym">);
</span>      Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Check<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>      New_Line<span class="sym">;
</span>      Depth <span class="sym">:=</span> Depth <span class="sym">+</span> <span class="num">2</span><span class="sym">;
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   Put<span class="sym">(</span><span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">);
</span>   Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Max_Depth<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>   Put<span class="sym">(</span>Ht <span class="sym">&amp;</span> <span class="str">&quot; check: &quot;</span><span class="sym">);
</span>   Item_Check<span class="sym">(</span>Long_Lived_Tree<span class="sym">,</span> Check<span class="sym">);
</span>   Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Check<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>   New_Line<span class="sym">;
</span><span class="kwa">end</span> BinaryTrees<span class="sym">;
</span><span class="slc">----------------------------------------------------------------
</span><span class="slc">-- BinaryTrees
</span><span class="slc">--
</span><span class="slc">-- Ada 95 (GNAT)
</span><span class="slc">--
</span><span class="slc">-- Contributed by Jim Rogers
</span><span class="slc">----------------------------------------------------------------
</span>
<span class="kwa">package</span> Treenodes <span class="kwa">is
   type</span> Treenode <span class="kwa">is private</span><span class="sym">;
</span>   <span class="kwa">function</span> Bottom_Up_Tree<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;</span> Depth <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">return</span> Treenode<span class="sym">;
</span>   <span class="kwa">procedure</span> Item_Check<span class="sym">(</span>This <span class="sym">:</span> <span class="kwa">in out</span> Treenode<span class="sym">;</span> Sum <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Integer</span><span class="sym">);
</span><span class="kwa">private
   type</span> Node<span class="sym">;
</span>   <span class="kwa">type</span> Treenode <span class="kwa">is access</span> Node<span class="sym">;
</span>   <span class="kwa">type</span> Node <span class="kwa">is record
</span>      Left  <span class="sym">:</span> Treenode <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span>      Right <span class="sym">:</span> Treenode <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span>      Item  <span class="sym">:</span> <span class="kwb">Integer</span>  <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>   <span class="kwa">end record</span><span class="sym">;
</span><span class="kwa">end</span> Treenodes<span class="sym">;
</span><span class="slc">----------------------------------------------------------------
</span><span class="slc">-- BinaryTrees
</span><span class="slc">--
</span><span class="slc">-- Ada 95 (GNAT)
</span><span class="slc">--
</span><span class="slc">-- Contributed by Jim Rogers
</span><span class="slc">----------------------------------------------------------------
</span>
<span class="kwa">with</span> Ada.Unchecked_Deallocation<span class="sym">;

</span><span class="kwa">package body</span> Treenodes <span class="kwa">is
   function</span> Bottom_Up_Tree<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;</span> Depth <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)
</span>      <span class="kwa">return</span> Treenode <span class="kwa">is
   begin
      if</span> Depth <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then
         return new</span> Node<span class="sym">'(</span>Bottom_Up_Tree<span class="sym">((</span><span class="num">2</span><span class="sym">*</span>Item<span class="sym">) -</span><span class="num">1</span><span class="sym">,</span> Depth <span class="num">-1</span><span class="sym">),
</span>            Bottom_Up_Tree<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> Item<span class="sym">,</span> Depth <span class="num">-1</span><span class="sym">),
</span>            Item<span class="sym">);
</span>      <span class="kwa">else
         return new</span> Node<span class="sym">'(</span><span class="kwa">null</span><span class="sym">,</span> <span class="kwa">null</span><span class="sym">,</span> Item<span class="sym">);
</span>      <span class="kwa">end if</span><span class="sym">;
</span>   <span class="kwa">end</span> Bottom_Up_Tree<span class="sym">;

</span>   <span class="kwa">procedure</span> Item_Check <span class="sym">(</span>This <span class="sym">:</span> <span class="kwa">in out</span> Treenode<span class="sym">;</span> Sum <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is
      procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation<span class="sym">(</span>Node<span class="sym">,</span> Treenode<span class="sym">);
</span>      Left_Sum<span class="sym">,</span> Right_Sum <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>   <span class="kwa">begin
      if</span> This.Left <span class="sym">=</span> <span class="kwa">null then
</span>         Sum <span class="sym">:=</span> This.Item<span class="sym">;
</span>      <span class="kwa">else
</span>         Item_Check<span class="sym">(</span>This.Left<span class="sym">,</span> Left_Sum<span class="sym">);
</span>         Item_Check<span class="sym">(</span>This.Right<span class="sym">,</span> Right_Sum<span class="sym">);
</span>         Sum <span class="sym">:=</span>  This.Item <span class="sym">+</span> Left_Sum <span class="sym">-</span> Right_Sum<span class="sym">;
</span>      <span class="kwa">end if</span><span class="sym">;
</span>      Free<span class="sym">(</span>This<span class="sym">);
</span>   <span class="kwa">end</span> Item_Check<span class="sym">;

</span><span class="kwa">end</span> Treenodes<span class="sym">;</span>
