<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: heapsort-mlton.code,v 1.7 2006-02-15 07:29:44 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * Based on cdoe from Stephen Weeks, improved by Henry Cejtin.</span>
<span class="com">*)</span>

<span class="kwa">val</span> sub <span class="sym">=</span> Array.sub
<span class="kwa">val</span> update <span class="sym">=</span> Array.update

<span class="kwa">local</span>
   <span class="kwa">val</span> im <span class="sym">=</span> <span class="num">139968</span>
   <span class="kwa">val</span> ia <span class="sym">=</span>   <span class="num">3877</span>
   <span class="kwa">val</span> ic <span class="sym">=</span>  <span class="num">29573</span>
   <span class="kwa">val</span> last <span class="sym">=</span> ref <span class="num">42</span>
   <span class="kwa">val</span> scale <span class="sym">=</span> <span class="num">1.0</span> <span class="sym">/</span> <span class="kwa">Real</span>.fromInt im
<span class="kwa">in</span>
   <span class="kwa">fun</span> gen_random max <span class="sym">=</span>
	  <span class="kwa">let val</span> last' <span class="sym">= (!</span> last <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> mod im
	  <span class="kwa">in</span> last <span class="sym">:=</span> last'<span class="sym">;</span>
	     max <span class="sym">*</span> scale <span class="sym">*</span> <span class="kwa">Real</span>.fromInt last'
	  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">fun</span> heapSort <span class="sym">(</span>n<span class="sym">,</span> ra<span class="sym">:</span> <span class="kwb">real</span> array<span class="sym">) =</span>
       <span class="kwa">let fun</span> inner <span class="sym">(</span>l<span class="sym">,</span> ir<span class="sym">,</span> rra<span class="sym">) =</span>
                  <span class="kwa">let fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =</span>
                             <span class="kwa">if</span> j <span class="sym">&lt;=</span> ir
                                <span class="kwa">then let val</span> j <span class="sym">=</span>
                                                <span class="kwa">if</span> j <span class="sym">&lt;</span> ir
                                                <span class="kwa">andalso</span> sub <span class="sym">(</span>ra<span class="sym">,</span> j<span class="sym">) &lt;</span> sub <span class="sym">(</span>ra<span class="sym">,</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
                                                   <span class="kwa">then</span> j <span class="sym">+</span> <span class="num">1</span>
                                                   <span class="kwa">else</span> j
                                         <span class="kwa">val</span> <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =</span>
                                                <span class="kwa">if</span> rra <span class="sym">&lt;</span> sub <span class="sym">(</span>ra<span class="sym">,</span> j<span class="sym">)</span>
                                                   <span class="kwa">then</span> <span class="sym">(</span>update <span class="sym">(</span>ra<span class="sym">,</span> i<span class="sym">,</span> sub <span class="sym">(</span>ra<span class="sym">,</span> j<span class="sym">));</span>
                                                         <span class="sym">(</span>j<span class="sym">,</span> j <span class="sym">+</span> j<span class="sym">))</span>
                                                   <span class="kwa">else</span> <span class="sym">(</span>i<span class="sym">,</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
                                     <span class="kwa">in</span> loop <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">)</span>
                                     <span class="kwa">end</span>
                                <span class="kwa">else</span> update <span class="sym">(</span>ra<span class="sym">,</span> i<span class="sym">,</span> rra<span class="sym">)</span>
                  <span class="kwa">in</span> loop <span class="sym">(</span>l<span class="sym">,</span> l <span class="sym">+</span> l<span class="sym">)</span>
                  <span class="kwa">end</span>
           <span class="kwa">fun</span> outer1 l <span class="sym">=</span>
                  <span class="kwa">let val</span> l' <span class="sym">=</span> l <span class="sym">-</span> <span class="num">1</span>
                  <span class="kwa">in if</span> l' <span class="sym">&gt;</span> <span class="num">0</span>
                        <span class="kwa">then</span> <span class="sym">(</span>inner <span class="sym">(</span>l'<span class="sym">,</span> n<span class="sym">,</span> sub <span class="sym">(</span>ra<span class="sym">,</span> l'<span class="sym">));</span>
                              outer1 l'<span class="sym">)</span>
                        <span class="kwa">else</span> <span class="sym">()</span>
                  <span class="kwa">end</span>
           <span class="kwa">fun</span> outer2 ir <span class="sym">=</span>
                  <span class="kwa">let val</span> rra <span class="sym">=</span> sub <span class="sym">(</span>ra<span class="sym">,</span> ir<span class="sym">)</span>
                      <span class="kwa">val</span> _ <span class="sym">=</span> update <span class="sym">(</span>ra<span class="sym">,</span> ir<span class="sym">,</span> sub <span class="sym">(</span>ra<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
                      <span class="kwa">val</span> ir <span class="sym">=</span> ir <span class="sym">-</span> <span class="num">1</span>
                  <span class="kwa">in if</span> ir <span class="sym">=</span> <span class="num">1</span>
                        <span class="kwa">then</span> update <span class="sym">(</span>ra<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> rra<span class="sym">)</span>
                        <span class="kwa">else</span> <span class="sym">(</span>inner <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> ir<span class="sym">,</span> rra<span class="sym">);</span>
                              outer2 ir<span class="sym">)</span>
                  <span class="kwa">end</span>
       <span class="kwa">in</span> outer1 <span class="sym">(</span>n div <span class="num">2</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
          outer2 n
       <span class="kwa">end</span>

<span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">);</span>

<span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>
       <span class="kwa">let val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))</span>
	   <span class="kwa">val</span> ary <span class="sym">=</span> Array.tabulate <span class="sym">(</span>n <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> gen_random <span class="num">1.0</span><span class="sym">)</span>
       <span class="kwa">in</span> heapSort <span class="sym">(</span>n<span class="sym">,</span> ary<span class="sym">);</span>
	  print <span class="sym">(</span>concat <span class="sym">[</span><span class="kwa">Real</span>.fmt <span class="sym">(</span><span class="kwa">StringCvt</span>.FIX <span class="sym">(</span>SOME <span class="num">10</span><span class="sym">)) (</span>sub <span class="sym">(</span>ary<span class="sym">,</span> n<span class="sym">)),</span>
			 <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])</span>
       <span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() )</span>
