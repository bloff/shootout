<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   converted to C++ from D by Rafal Rusin</span>
<span class="com">   modified by Vaclav Haisman</span>
<span class="com">   compile: g++ -O2 -o fasta fasta.cpp</span>
<span class="com">*/</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;algorithm&gt;</span>
<span class="dir">#include &lt;string&gt;</span>
<span class="dir">#include &lt;memory&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwb">int</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">,</span> <span class="kwb">int</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">,</span> <span class="kwb">int</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">&gt;</span>
<span class="kwc">class</span> Random
<span class="sym">{</span>
<span class="kwc">private</span><span class="sym">:</span>
  <span class="kwb">int</span> last<span class="sym">;</span>
<span class="kwc">public</span><span class="sym">:</span>
  <span class="kwd">Random</span><span class="sym">():</span> <span class="kwd">last</span><span class="sym">(</span><span class="num">42</span><span class="sym">) {}</span>
  <span class="kwb">double</span> <span class="kwd">genRandom</span><span class="sym">(</span><span class="kwb">double</span> max<span class="sym">)</span>
  <span class="sym">{</span>
    <span class="kwa">return</span><span class="sym">(</span>max <span class="sym">* (</span>last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) /</span> IM<span class="sym">);</span>
  <span class="sym">}</span>
<span class="sym">};</span>

<span class="kwc">class</span> Fasta<span class="sym">:</span> <span class="kwc">public</span> Random<span class="sym">&lt;&gt;</span>
<span class="sym">{</span>
<span class="kwc">private</span><span class="sym">:</span>
  <span class="kwb">static const char</span> alu<span class="sym">[];</span>

  <span class="kwb">struct</span> IUB
  <span class="sym">{</span>
    <span class="kwb">char</span> c<span class="sym">;</span>
    <span class="kwb">double</span> p<span class="sym">;</span>

    <span class="kwd">IUB</span><span class="sym">(</span><span class="kwb">char</span> c<span class="sym">,</span> <span class="kwb">double</span> p<span class="sym">):</span> <span class="kwd">c</span><span class="sym">(</span>c<span class="sym">),</span> <span class="kwd">p</span><span class="sym">(</span>p<span class="sym">) {}</span>
  <span class="sym">};</span>

  vector<span class="sym">&lt;</span>IUB<span class="sym">&gt;</span> iub<span class="sym">;</span>
  vector<span class="sym">&lt;</span>IUB<span class="sym">&gt;</span> homosapiens<span class="sym">;</span>

  <span class="kwb">void</span> <span class="kwd">makeCumulative</span><span class="sym">(</span>vector<span class="sym">&lt;</span>IUB<span class="sym">&gt; &amp;</span>table<span class="sym">)</span>
  <span class="sym">{</span>
    <span class="kwb">double</span> prob <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(</span>vector<span class="sym">&lt;</span>IUB<span class="sym">&gt;::</span>iterator it <span class="sym">=</span> table<span class="sym">.</span><span class="kwd">begin</span><span class="sym">();</span> it <span class="sym">!=</span> table<span class="sym">.</span><span class="kwd">end</span><span class="sym">(); ++</span>it<span class="sym">)</span>
      <span class="sym">{</span>
        prob <span class="sym">+=</span> it<span class="sym">-&gt;</span>p<span class="sym">;</span>
        it<span class="sym">-&gt;</span>p <span class="sym">=</span> prob<span class="sym">;</span>
      <span class="sym">}</span>
  <span class="sym">}</span>

<span class="kwc">public</span><span class="sym">:</span>
  <span class="kwb">enum</span> TableType
    <span class="sym">{</span>
      iubType<span class="sym">,</span>
      homosapiensType
    <span class="sym">};</span>

  <span class="kwd">Fasta</span><span class="sym">()</span>
  <span class="sym">{</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">));</span>

    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>
    iub<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">));</span>

    homosapiens<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">));</span>
    homosapiens<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">));</span>
    homosapiens<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">));</span>
    homosapiens<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">IUB</span><span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">));</span>
  <span class="sym">}</span>

  <span class="kwb">void</span> <span class="kwd">makeRepeatFasta</span><span class="sym">(</span><span class="kwb">char const</span> <span class="sym">*</span> id<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span> desc<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">);</span>
  <span class="kwb">void</span> <span class="kwd">makeRandomFasta</span><span class="sym">(</span><span class="kwb">char const</span> <span class="sym">*</span> id<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span> desc<span class="sym">,</span> TableType tableType<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">);</span>
<span class="sym">};</span>

<span class="kwb">const char</span> Fasta<span class="sym">::</span>alu<span class="sym">[] =</span>
<span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
<span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
<span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
<span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
<span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
<span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
<span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;</span>

<span class="kwb">void</span>
Fasta<span class="sym">::</span><span class="kwd">makeRepeatFasta</span><span class="sym">(</span><span class="kwb">char const</span> <span class="sym">*</span> id<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span> desc<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">const int</span> length <span class="sym">=</span> <span class="num">60</span><span class="sym">,</span> kn <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span>alu<span class="sym">) -</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwb">int</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

  cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;&gt;&quot;</span> <span class="sym">&lt;&lt;</span> id <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> desc <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
  <span class="kwb">char</span> line<span class="sym">[</span>length <span class="sym">+</span> <span class="num">1</span><span class="sym">];</span>
  <span class="kwa">while</span><span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwb">int const</span> m <span class="sym">=</span> <span class="kwd">min</span> <span class="sym">(</span>n<span class="sym">,</span> length<span class="sym">);</span>
      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">; ++</span>j<span class="sym">, ++</span>k<span class="sym">) {</span>
        <span class="kwa">if</span><span class="sym">(</span>k <span class="sym">&gt;=</span> kn<span class="sym">)</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        line<span class="sym">[</span>j<span class="sym">] =</span> alu<span class="sym">[</span>k<span class="sym">];</span>
      <span class="sym">}</span>
      line<span class="sym">[</span>m<span class="sym">] =</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
      cout<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>line<span class="sym">,</span> m <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
      n <span class="sym">-=</span> length<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span>
Fasta<span class="sym">::</span><span class="kwd">makeRandomFasta</span><span class="sym">(</span><span class="kwb">char const</span> <span class="sym">*</span> id<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span> desc<span class="sym">,</span> TableType tableType<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">const int</span> length <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
  vector<span class="sym">&lt;</span>IUB<span class="sym">&gt; *</span>table<span class="sym">;</span>

  <span class="kwa">switch</span><span class="sym">(</span>tableType<span class="sym">)</span>
    <span class="sym">{</span>
    <span class="kwa">case</span> iubType<span class="sym">:</span>
      table <span class="sym">= &amp;</span>iub<span class="sym">;</span>
      <span class="kwa">break</span><span class="sym">;</span>
    <span class="kwa">default</span><span class="sym">:</span>
      table <span class="sym">= &amp;</span>homosapiens<span class="sym">;</span>
      <span class="kwa">break</span><span class="sym">;</span>
    <span class="sym">}</span>

  cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;&gt;&quot;</span> <span class="sym">&lt;&lt;</span> id <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> desc <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
  <span class="kwd">makeCumulative</span><span class="sym">(*</span>table<span class="sym">);</span>
  <span class="kwb">char</span> line<span class="sym">[</span>length <span class="sym">+</span> <span class="num">1</span><span class="sym">];</span>
  <span class="kwa">while</span><span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwb">int const</span> m <span class="sym">=</span> <span class="kwd">min</span> <span class="sym">(</span>n<span class="sym">,</span> length<span class="sym">);</span>
      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">; ++</span>j<span class="sym">)</span>
        <span class="sym">{</span>
          <span class="kwb">double const</span> rval <span class="sym">=</span> <span class="kwd">genRandom</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
          <span class="kwa">for</span> <span class="sym">(</span>vector<span class="sym">&lt;</span>IUB<span class="sym">&gt;::</span>const_iterator it <span class="sym">=</span> table<span class="sym">-&gt;</span><span class="kwd">begin</span><span class="sym">();</span> it <span class="sym">!=</span> table<span class="sym">-&gt;</span><span class="kwd">end</span><span class="sym">(); ++</span>it<span class="sym">)</span>
            <span class="sym">{</span>
              <span class="kwa">if</span><span class="sym">(</span>rval <span class="sym">&lt;</span> it<span class="sym">-&gt;</span>p<span class="sym">)</span>
                <span class="sym">{</span>
                  line<span class="sym">[</span>j<span class="sym">] =</span> it<span class="sym">-&gt;</span>c<span class="sym">;</span>
                  <span class="kwa">break</span><span class="sym">;</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
      line<span class="sym">[</span>m<span class="sym">] =</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
      cout<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>line<span class="sym">,</span> m<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
      n <span class="sym">-=</span> length<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
  <span class="kwb">unsigned const</span> n <span class="sym">=</span> argc <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

  Fasta fasta<span class="sym">;</span>

  fasta<span class="sym">.</span><span class="kwd">makeRepeatFasta</span><span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">);</span>
  fasta<span class="sym">.</span><span class="kwd">makeRandomFasta</span><span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> Fasta<span class="sym">::</span>iubType<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">);</span>
  fasta<span class="sym">.</span><span class="kwd">makeRandomFasta</span><span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> Fasta<span class="sym">::</span>homosapiensType<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">);</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

