<span class="com">/* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org</span>
<span class="com"> * contributed by Laurent DEBACKER */</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">.</span>Generic<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;</span>

<span class="kwa">public class</span> revcomp
<span class="sym">{</span>
   <span class="kwa">private static</span> <span class="kwb">char</span><span class="sym">[]</span> complements<span class="sym">;</span>

   <span class="kwa">static</span> <span class="kwd">revcomp</span><span class="sym">()</span>
   <span class="sym">{</span>
      complements <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span><span class="num">128</span><span class="sym">];</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'a'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'A'</span><span class="sym">] =</span> <span class="str">'T'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'c'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'C'</span><span class="sym">] =</span> <span class="str">'G'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'g'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'G'</span><span class="sym">] =</span> <span class="str">'C'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'t'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'T'</span><span class="sym">] =</span> <span class="str">'A'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'u'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'U'</span><span class="sym">] =</span> <span class="str">'A'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'m'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'M'</span><span class="sym">] =</span> <span class="str">'K'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'r'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'R'</span><span class="sym">] =</span> <span class="str">'Y'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'w'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'W'</span><span class="sym">] =</span> <span class="str">'W'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'s'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'S'</span><span class="sym">] =</span> <span class="str">'S'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'y'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'Y'</span><span class="sym">] =</span> <span class="str">'R'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'k'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'K'</span><span class="sym">] =</span> <span class="str">'M'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'v'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'V'</span><span class="sym">] =</span> <span class="str">'B'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'h'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'H'</span><span class="sym">] =</span> <span class="str">'D'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'d'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'D'</span><span class="sym">] =</span> <span class="str">'H'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'b'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'B'</span><span class="sym">] =</span> <span class="str">'V'</span><span class="sym">;</span>
      complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'n'</span><span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span><span class="str">'N'</span><span class="sym">] =</span> <span class="str">'N'</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">[]</span> Arguments<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">const int</span> lineWidth <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>
      TextReader input <span class="sym">=</span> Console<span class="sym">.</span>In<span class="sym">;</span>
      TextWriter output <span class="sym">=</span> Console<span class="sym">.</span>Out<span class="sym">;</span>

      List<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">[]&gt;</span> older <span class="sym">=</span> <span class="kwa">new</span> List<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">[]&gt;();</span>

      <span class="kwb">char</span><span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span><span class="num">1024</span><span class="sym">];</span>
      <span class="kwb">int</span> position <span class="sym">=</span> buffer<span class="sym">.</span>Length<span class="sym">;</span>

      <span class="kwa">for</span><span class="sym">(;;)</span>
      <span class="sym">{</span>
         <span class="kwb">string</span> line <span class="sym">=</span> input<span class="sym">.</span><span class="kwd">ReadLine</span><span class="sym">();</span>

         <span class="kwa">if</span><span class="sym">(</span>line <span class="sym">==</span> <span class="kwa">null</span> <span class="sym">||</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
         <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>position <span class="sym">!=</span> buffer<span class="sym">.</span>Length<span class="sym">)</span>
            <span class="sym">{</span>
               <span class="kwb">char</span><span class="sym">[]</span> cur <span class="sym">=</span> buffer<span class="sym">;</span>
               <span class="kwb">int</span> left<span class="sym">;</span>
               <span class="kwa">while</span><span class="sym">((</span>left <span class="sym">=</span> cur<span class="sym">.</span>Length <span class="sym">-</span> position<span class="sym">) &gt;=</span> lineWidth<span class="sym">)</span>
               <span class="sym">{</span>
                  output<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>cur<span class="sym">,</span> position<span class="sym">,</span> lineWidth<span class="sym">);</span>
                  position <span class="sym">+=</span> lineWidth<span class="sym">;</span>
               <span class="sym">}</span>

               <span class="kwa">if</span><span class="sym">(</span>older<span class="sym">.</span>Count <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
               <span class="sym">{</span>
                  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> older<span class="sym">.</span>Count <span class="sym">-</span> <span class="num">1</span> <span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span> <span class="sym">; --</span>i<span class="sym">)</span>
                  <span class="sym">{</span>
                     <span class="kwa">if</span><span class="sym">(</span>left <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> output<span class="sym">.</span><span class="kwd">Write</span><span class="sym">(</span>cur<span class="sym">,</span> position<span class="sym">,</span> left<span class="sym">);</span>
                     cur <span class="sym">=</span> older<span class="sym">[</span>i<span class="sym">];</span>

                     left <span class="sym">=</span> lineWidth <span class="sym">-</span> left<span class="sym">;</span>
                     output<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>cur<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> left<span class="sym">);</span>
                     position <span class="sym">=</span> left<span class="sym">;</span>

                     <span class="kwa">while</span><span class="sym">((</span>left <span class="sym">=</span> cur<span class="sym">.</span>Length <span class="sym">-</span> position<span class="sym">) &gt;=</span> lineWidth<span class="sym">)</span>
                     <span class="sym">{</span>
                        output<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>cur<span class="sym">,</span> position<span class="sym">,</span> lineWidth<span class="sym">);</span>
                        position <span class="sym">+=</span> lineWidth<span class="sym">;</span>
                     <span class="sym">}</span>
                  <span class="sym">}</span>
                  older<span class="sym">.</span><span class="kwd">Clear</span><span class="sym">();</span>
               <span class="sym">}</span>

               <span class="kwa">if</span><span class="sym">(</span>left <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> output<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>cur<span class="sym">,</span> position<span class="sym">,</span> left<span class="sym">);</span>
               position <span class="sym">=</span> buffer<span class="sym">.</span>Length<span class="sym">;</span>
            <span class="sym">}</span>

            <span class="kwa">if</span><span class="sym">(</span>line <span class="sym">==</span> <span class="kwa">null</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
            output<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>line<span class="sym">);</span>
         <span class="sym">}</span>
         <span class="kwa">else if</span><span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="str">';'</span><span class="sym">)</span>
         <span class="sym">{</span>
            <span class="kwb">int</span> len <span class="sym">=</span> line<span class="sym">.</span>Length<span class="sym">,</span> i <span class="sym">= -</span><span class="num">1</span><span class="sym">;</span>

            <span class="kwa">if</span><span class="sym">(</span>position <span class="sym">&lt;</span> len<span class="sym">)</span>
            <span class="sym">{</span>
               <span class="kwa">while</span><span class="sym">(--</span>position <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">)</span> buffer<span class="sym">[</span>position<span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span>line<span class="sym">[++</span>i<span class="sym">]];</span>
               older<span class="sym">.</span><span class="kwd">Add</span><span class="sym">(</span>buffer<span class="sym">);</span>
               position <span class="sym">=</span> buffer<span class="sym">.</span>Length <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span>
               buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>position<span class="sym">];</span>
            <span class="sym">}</span>

            <span class="kwa">while</span><span class="sym">(++</span>i <span class="sym">&lt;</span> len<span class="sym">)</span> buffer<span class="sym">[--</span>position<span class="sym">] =</span> complements<span class="sym">[(</span><span class="kwb">int</span><span class="sym">)</span>line<span class="sym">[</span>i<span class="sym">]];</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>
