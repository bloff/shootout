#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu
<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; spellcheck benchmark</span>

<span class="sym">(</span>module spellcheck mzscheme
  <span class="sym">(</span>define dict <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="str">'equal))</span>
<span class="str"></span>
<span class="str">  (with-input-from-file &quot;Usr.Dict.Words&quot;</span>
<span class="str">    (lambda ()</span>
<span class="str">      (let loop ()</span>
<span class="str">	(let ([r (read-bytes-line)])</span>
<span class="str">	  (unless (eof-object? r)</span>
<span class="str">	    (hash-table-put! dict r #t)</span>
<span class="str">	    (loop))))))</span>
<span class="str"></span>
<span class="str">  (let ([in (current-input-port)])</span>
<span class="str">    (let loop ()</span>
<span class="str">      (let ([w (read-bytes-line in)])</span>
<span class="str">	(unless (eof-object? w)</span>
<span class="str">	  (unless (hash-table-get dict w (lambda () #f))</span>
<span class="str">	    (printf &quot;~a</span><span class="esc">\n</span><span class="str">&quot; w))</span>
<span class="str">	  (loop))))))</span>
