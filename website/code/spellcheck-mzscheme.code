#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">;;; The Great Computer Language Shootout
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;;
</span><span class="slc">;;; spellcheck benchmark
</span><span class="slc">;;;
</span><span class="slc">;;; Contributed by Ruhi Bloodworth
</span><span class="slc">;;; Revised for MzScheme by Brent Fulgham
</span>
<span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;26.ss&quot;</span> <span class="str">&quot;srfi&quot;</span><span class="sym">))

</span><span class="slc">; read the word dictionary
</span><span class="slc">; read words from standard input and print those words
</span><span class="slc">;    which do not appear in the dictionary
</span><span class="slc">; both the dictionary and standard input have only one word per line
</span><span class="slc">; no line will exceed 128 characters (including newline)
</span>
<span class="sym">(</span>define dict <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="str">'equal))

;; Note:  Uses text file procedures from the Scheme Cookbook
;; http://schemecookbook.org/Cookbook/FileReadingLines
(define (for-each-line-in-file filename proc . mode)
  (with-input-from-file
   filename
   (lambda () (apply for-each-line proc (current-input-port) mode))))

(define (for-each-line proc . port+mode)
  (let while ()
    (let ((line (apply read-line port+mode)))
      (unless (eof-object? line)
        (proc line)
        (while)))))

(for-each-line-in-file &quot;Usr.Dict.Words&quot; (cute hash-table-put! dict &lt;&gt; #t))

(for-each-line (lambda (word)
		 (hash-table-get dict word
                                 (lambda () (printf &quot;~a~%&quot; word))))
               (current-input-port))
</span>
