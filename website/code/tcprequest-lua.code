<span class="kwa">local</span> socket <span class="sym">=</span> require <span class="str">&quot;socket&quot;</span>
<span class="kwa">local</span> posix <span class="sym">=</span> require <span class="str">&quot;posix&quot;</span>

<span class="kwa">local</span> M<span class="sym">,</span> reply_size<span class="sym">,</span> request_size <span class="sym">=</span> <span class="num">100</span><span class="sym">,</span> <span class="num">4096</span><span class="sym">,</span> <span class="num">64</span>
<span class="kwa">local</span> N <span class="sym">=</span> <span class="kwb">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1</span>

<span class="kwa">local function</span> <span class="kwd">client</span><span class="sym">(</span>sk<span class="sym">)</span>
  <span class="kwa">local</span> repsize <span class="sym">=</span> reply_size
  <span class="kwa">local</span> request <span class="sym">=</span> <span class="kwb">string</span><span class="sym">.</span><span class="kwd">rep</span><span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">,</span> request_size<span class="sym">)</span>
  <span class="kwa">local</span> replies <span class="sym">=</span> <span class="num">0</span>
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>N<span class="sym">*</span>M <span class="kwa">do</span>
    sk<span class="sym">:</span><span class="kwd">send</span><span class="sym">(</span>request<span class="sym">)</span>
    sk<span class="sym">:</span><span class="kwd">receive</span><span class="sym">(</span>repsize<span class="sym">)</span>
    replies <span class="sym">=</span> replies <span class="sym">+</span> <span class="num">1</span>
  <span class="kwa">end</span>
  io<span class="sym">.</span><span class="kwb">write</span><span class="sym">(</span><span class="str">&quot;replies: &quot;</span><span class="sym">,</span> replies<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">bytes: &quot;</span><span class="sym">,</span> sk<span class="sym">:</span><span class="kwd">getstats</span><span class="sym">(),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
  io<span class="sym">.</span><span class="kwb">flush</span><span class="sym">()</span>
  sk<span class="sym">:</span><span class="kwd">close</span><span class="sym">()</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">server</span><span class="sym">(</span>sk<span class="sym">)</span>
  <span class="kwa">local</span> reqsize <span class="sym">=</span> request_size
  <span class="kwa">local</span> reply <span class="sym">=</span> <span class="kwb">string</span><span class="sym">.</span><span class="kwd">rep</span><span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">,</span> reply_size<span class="sym">)</span>
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>N<span class="sym">*</span>M <span class="kwa">do</span>
    sk<span class="sym">:</span><span class="kwd">receive</span><span class="sym">(</span>reqsize<span class="sym">)</span>
    sk<span class="sym">:</span><span class="kwd">send</span><span class="sym">(</span>reply<span class="sym">)</span>
  <span class="kwa">end</span>
  sk<span class="sym">:</span><span class="kwd">close</span><span class="sym">()</span>
<span class="kwa">end</span>

<span class="kwa">local</span> ls <span class="sym">=</span> socket<span class="sym">.</span><span class="kwd">bind</span><span class="sym">(</span><span class="str">&quot;127.0.0.1&quot;</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
<span class="kwa">if</span> posix<span class="sym">.</span><span class="kwd">fork</span><span class="sym">() ==</span> <span class="num">0</span> <span class="kwa">then</span>		<span class="slc">-- Child is client</span>
  <span class="kwd">client</span><span class="sym">(</span>socket<span class="sym">.</span><span class="kwd">connect</span><span class="sym">(</span>ls<span class="sym">:</span><span class="kwd">getsockname</span><span class="sym">()))</span>
  os<span class="sym">.</span><span class="kwb">exit</span><span class="sym">()</span>
<span class="kwa">else</span>					<span class="slc">-- Parent is server</span>
  <span class="kwd">server</span><span class="sym">(</span>ls<span class="sym">:</span><span class="kwd">accept</span><span class="sym">())</span>
  ls<span class="sym">:</span><span class="kwd">close</span><span class="sym">()</span>
  posix<span class="sym">.</span><span class="kwd">wait</span><span class="sym">()</span>
<span class="kwa">end</span>
