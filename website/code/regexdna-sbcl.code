<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; Contributed by: Shyamal Prasad</span>

<span class="sym">(</span>asdf<span class="sym">:</span>operate <span class="str">'asdf:load-op '</span>cl<span class="sym">-</span>ppcre<span class="sym">)</span>

<span class="sym">(</span>defparameter <span class="sym">*</span>regex<span class="sym">-</span><span class="kwa">list</span><span class="sym">*</span>
  <span class="sym">(</span><span class="kwa">list</span>
   <span class="str">&quot;agggtaaa|tttaccct&quot;</span>
   <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
   <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
   <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
   <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
   <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
   <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
   <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
   <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">))</span>

<span class="sym">(</span>defparameter <span class="sym">*</span>alternatives<span class="sym">*</span>
  <span class="str">'((&quot;B&quot; &quot;(c|g|t)&quot;)  (&quot;D&quot; &quot;(a|g|t)&quot;)</span>
<span class="str">    (&quot;H&quot; &quot;(a|c|t)&quot;)  (&quot;K&quot; &quot;(g|t)&quot;)</span>
<span class="str">    (&quot;M&quot; &quot;(a|c)&quot;)    (&quot;N&quot; &quot;(a|c|g|t)&quot;)</span>
<span class="str">    (&quot;R&quot; &quot;(a|g)&quot;)    (&quot;S&quot; &quot;(c|t)&quot;)</span>
<span class="str">    (&quot;V&quot; &quot;(a|c|g)&quot;)  (&quot;W&quot; &quot;(a|t)&quot;)</span>
<span class="str">    (&quot;Y&quot; &quot;(c|t)&quot;)))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">;; Read in the entire file as the benchmark specifieds</span>
<span class="str">(defun get-input-chars (stream)</span>
<span class="str">  (with-output-to-string</span>
<span class="str">    (output)</span>
<span class="str">    (loop while (multiple-value-bind</span>
<span class="str">		    (line missing) (read-line stream nil)</span>
<span class="str">		  (when line (write-string line output))</span>
<span class="str">		  (unless missing (write-char #</span><span class="esc">\N</span><span class="str">ewline output))</span>
<span class="str">		  line))))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str"></span>
<span class="str">(defun main (&amp;optional (stream *standard-input*))</span>
<span class="str">  (let*</span>
<span class="str">      ;; Benchmark definition requires using a regex to</span>
<span class="str">      ;; remove headers/newlines from the file</span>
<span class="str">      ((text (get-input-chars stream))</span>
<span class="str">       (sequence</span>
<span class="str">	(cl-ppcre:regex-replace-all &quot;&gt;[^</span><span class="esc">\\</span><span class="str">n]*</span><span class="esc">\\</span><span class="str">n|</span><span class="esc">\\</span><span class="str">n&quot; text &quot;&quot;)))</span>
<span class="str"></span>
<span class="str">    ;; Count and print the number of subsequences</span>
<span class="str">    (loop for regex in *regex-list* do</span>
<span class="str">	  (format t &quot;~a ~a~%&quot; regex</span>
<span class="str">		  (/ (length (cl-ppcre:all-matches regex sequence)) 2)))</span>
<span class="str"></span>
<span class="str">    ;; Print lengths</span>
<span class="str">    (format t &quot;~%~a~%&quot; (length text))</span>
<span class="str">    (format t &quot;~a~%&quot; (length sequence))</span>
<span class="str"></span>
<span class="str">    ;; do the alternative substitution and create the new text string</span>
<span class="str">    ;; that the benchmark definition requires</span>
<span class="str">    (loop for pair in *alternatives* do</span>
<span class="str">	  (setf sequence</span>
<span class="str">		(cl-ppcre:regex-replace-all (car pair) sequence (cadr pair))))</span>
<span class="str">    (format t &quot;~a~%&quot; (length sequence))))</span>
