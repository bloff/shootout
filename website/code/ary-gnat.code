<span class="line">    1 </span><span class="slc">-- $Id: ary-gnat.code,v 1.3 2004-11-11 07:13:56 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- Ada 95 code by C.C.
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- Revised with suggestions by James S. Rogers
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="kwa">with</span> Text_IO<span class="sym">,</span> Ada.Command_Line<span class="sym">,</span> Ada.Strings.Fixed<span class="sym">;
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">procedure</span> Ary <span class="kwa">is
</span><span class="line">    9 </span><span class="kwa">   function</span> L_Trim <span class="sym">(</span>Source <span class="sym">:</span> <span class="kwb">String</span><span class="sym">;</span> Side <span class="sym">:</span> Ada.Strings.Trim_End <span class="sym">:=
</span><span class="line">   10 </span><span class="sym"></span>               Ada.Strings.Left<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">String</span> <span class="kwa">renames</span> Ada.Strings.Fixed.Trim<span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span>   N        <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   12 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   13 </span><span class="kwa">   begin
</span><span class="line">   14 </span><span class="kwa"></span>      N <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span><span class="line">   15 </span><span class="sym"></span>   <span class="kwa">exception
</span><span class="line">   16 </span><span class="kwa">      when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>   <span class="kwa">end</span><span class="sym">;
</span><span class="line">   18 </span><span class="sym"></span>   <span class="kwa">declare
</span><span class="line">   19 </span><span class="kwa">      pragma</span> suppress <span class="sym">(</span>All_Checks<span class="sym">);
</span><span class="line">   20 </span><span class="sym"></span>      <span class="kwa">type</span> Vect <span class="kwa">is array</span> <span class="sym">(</span><span class="num">1</span> .. N<span class="sym">)</span> <span class="kwa">of</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym"></span>      X <span class="sym">:</span> Vect<span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>      Y <span class="sym">:</span> Vect <span class="sym">:= (</span><span class="kwa">Others</span> <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span><span class="line">   23 </span><span class="sym"></span>   <span class="kwa">begin
</span><span class="line">   24 </span><span class="kwa">      for</span> K <span class="kwa">in</span> Vect<span class="sym">'</span><span class="kwa">Range loop
</span><span class="line">   25 </span><span class="kwa"></span>         X <span class="sym">(</span>K<span class="sym">) :=</span> K<span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span>      <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym"></span>      <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. <span class="num">1000</span> <span class="kwa">loop
</span><span class="line">   29 </span><span class="kwa">         for</span> K <span class="kwa">in reverse</span> Vect<span class="sym">'</span><span class="kwa">Range loop
</span><span class="line">   30 </span><span class="kwa"></span>            Y<span class="sym">(</span>K<span class="sym">) :=</span> Y<span class="sym">(</span>K<span class="sym">) +</span> X<span class="sym">(</span>K<span class="sym">);
</span><span class="line">   31 </span><span class="sym"></span>         <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>      <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>      Text_IO.Put_Line <span class="sym">(</span>L_Trim <span class="sym">(</span><span class="kwb">Integer</span><span class="sym">'</span>Image <span class="sym">(</span>Y <span class="sym">(</span><span class="num">1</span><span class="sym">))) &amp;
</span><span class="line">   34 </span><span class="sym"></span>               <span class="kwb">Integer</span><span class="sym">'</span>Image <span class="sym">(</span>Y <span class="sym">(</span>N<span class="sym">)));
</span><span class="line">   35 </span><span class="sym"></span>   <span class="kwa">end</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span><span class="kwa">end</span> Ary<span class="sym">;</span>
