<span class="com">(* binarytrees.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 * Ported to MLton/SML by sweeks&#64;sweeks.com.
 *)</span>
<span class="kwa">datatype</span> 'a tree <span class="sym">=</span> Empty <span class="kwa">of</span> 'a <span class="sym">|</span> Node <span class="kwa">of</span> 'a tree <span class="sym">*</span> 'a <span class="sym">*</span> 'a tree

<span class="kwa">fun</span> make <span class="sym">(</span>depth<span class="sym">,</span> item<span class="sym">) =
</span>   <span class="kwa">if</span> <span class="num">0</span> <span class="sym">=</span> depth <span class="kwa">then</span> Empty item
   <span class="kwa">else let
	   val</span> d <span class="sym">=</span> depth <span class="num">- 1
</span>	   <span class="kwa">val</span> item2 <span class="sym">=</span> <span class="num">2</span> <span class="sym">*</span> item
	<span class="kwa">in
</span>	   Node <span class="sym">(</span>make <span class="sym">(</span>d<span class="sym">,</span> item2 <span class="num">- 1</span><span class="sym">),</span> item<span class="sym">,</span> make <span class="sym">(</span>d<span class="sym">,</span> item2<span class="sym">))
</span>	<span class="kwa">end

val rec</span> check <span class="sym">=
</span>  <span class="kwa">fn</span> Empty i <span class="sym">=&gt;</span> i
   <span class="sym">|</span> Node <span class="sym">(</span>left<span class="sym">,</span> i<span class="sym">,</span> right<span class="sym">) =&gt;</span> i <span class="sym">+</span> check left <span class="sym">-</span> check right

<span class="kwa">val</span> minDepth <span class="sym">=</span> <span class="num">4

</span><span class="kwa">val</span> maxDepth <span class="sym">=
</span>   <span class="kwa">Int</span>.max <span class="sym">(</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">,
</span>	    valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString <span class="sym">(</span>hd <span class="sym">(</span>CommandLine.arguments <span class="sym">())))
</span>	    <span class="kwa">handle</span> _ <span class="sym">=&gt;</span> <span class="num">10</span><span class="sym">)

</span><span class="kwa">val</span> stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1

</span><span class="kwa">fun</span> i2s i <span class="sym">=</span> <span class="kwa">String</span>.translate <span class="sym">(</span><span class="kwa">fn</span> #<span class="str">&quot;~&quot;</span> <span class="sym">=&gt;</span> <span class="str">&quot;-&quot;</span> <span class="sym">|</span> c <span class="sym">=&gt;</span> str c<span class="sym">) (</span><span class="kwa">Int</span>.toString i<span class="sym">)

</span><span class="kwa">val</span> <span class="sym">() =
</span>   print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString  stretchDepth<span class="sym">,
</span>		  <span class="str">&quot;</span><span class="esc">\t  </span>  <span class="str">check: &quot;</span><span class="sym">,</span> i2s <span class="sym">(</span>check <span class="sym">(</span>make <span class="sym">(</span>stretchDepth<span class="sym">,</span> <span class="num">0</span><span class="sym">))),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])

</span><span class="kwa">val</span> longLivedTree <span class="sym">=</span> make <span class="sym">(</span>maxDepth<span class="sym">,</span> <span class="num">0</span><span class="sym">)

</span><span class="kwa">fun</span> loopDepths d <span class="sym">=
</span>   <span class="kwa">if</span> d <span class="sym">&gt;</span> maxDepth <span class="kwa">then</span> <span class="sym">()
</span>   <span class="kwa">else
      let
	 val</span> iterations <span class="sym">=
</span>	    <span class="kwa">Word</span>.toInt <span class="sym">(</span><span class="kwa">Word</span>.<span class="sym">&lt;&lt; (</span><span class="num">0w1</span><span class="sym">,</span> <span class="kwa">Word</span>.fromInt <span class="sym">(</span>maxDepth <span class="sym">-</span> d <span class="sym">+</span> minDepth<span class="sym">)))
</span>	 <span class="kwa">val</span> c <span class="sym">=</span> ref <span class="num">0
</span>	 <span class="kwa">val</span> <span class="sym">() =</span> <span class="kwa">Int</span>.for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> iterations<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span>			   c <span class="sym">:= !</span>c <span class="sym">+</span> check <span class="sym">(</span>make <span class="sym">(</span>d<span class="sym">,</span> i<span class="sym">)) +</span> check <span class="sym">(</span>make <span class="sym">(</span>d<span class="sym">,</span> ~i<span class="sym">)))
</span>	 <span class="kwa">val</span> <span class="sym">() =</span> print <span class="sym">(</span>concat <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> iterations<span class="sym">),
</span>				 <span class="str">&quot;</span><span class="esc">\t  </span>  <span class="str">trees of depth &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString d<span class="sym">,
</span>				 <span class="str">&quot;</span><span class="esc">\t  </span>  <span class="str">check: &quot;</span><span class="sym">,</span> i2s <span class="sym">(!</span>c<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])
</span>      <span class="kwa">in
</span>	 loopDepths <span class="sym">(</span>d <span class="sym">+</span> <span class="num">2</span><span class="sym">)
</span>      <span class="kwa">end

val</span> <span class="sym">() =</span> loopDepths minDepth

<span class="kwa">val</span> <span class="sym">() =
</span>   print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString maxDepth<span class="sym">,
</span>		  <span class="str">&quot;</span><span class="esc">\t  </span>  <span class="str">check: &quot;</span><span class="sym">,</span> i2s <span class="sym">(</span>check longLivedTree<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])</span>
