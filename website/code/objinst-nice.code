<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){</span>
   <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

   var toggle <span class="sym">=</span> <span class="kwa">new</span> Toggle<span class="sym">();</span>
   <span class="kwa">for</span><span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">5</span><span class="sym">;</span> i<span class="sym">++)</span> println<span class="sym">(</span> toggle<span class="sym">.</span>activate<span class="sym">.</span>value <span class="sym">);</span>
   <span class="kwa">for</span><span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> toggle <span class="sym">=</span> <span class="kwa">new</span> Toggle<span class="sym">();</span>
   print<span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span>

   var ntoggle <span class="sym">=</span> <span class="kwa">new</span> NToggle<span class="sym">(</span>toggleTrigger<span class="sym">:</span> <span class="num">3</span><span class="sym">);</span>
   <span class="kwa">for</span><span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">8</span><span class="sym">;</span> i<span class="sym">++)</span> println<span class="sym">(</span> ntoggle<span class="sym">.</span>activate<span class="sym">.</span>value <span class="sym">);</span>
   <span class="kwa">for</span><span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> ntoggle <span class="sym">=</span> <span class="kwa">new</span> NToggle<span class="sym">(</span>toggleTrigger<span class="sym">:</span> <span class="num">3</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">class</span> Toggle <span class="sym">{</span>
   <span class="kwb">boolean</span> state <span class="sym">=</span> true<span class="sym">;</span>
   <span class="kwa">public</span> <span class="kwb">boolean</span> value<span class="sym">() =</span> state<span class="sym">;</span>

   <span class="kwa">public</span> Toggle activate<span class="sym">(){</span>
      state <span class="sym">= !</span>state<span class="sym">;</span>
      <span class="kwa">return this</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> NToggle <span class="kwa">extends</span> Toggle <span class="sym">{</span>
   <span class="kwb">int</span> toggleTrigger <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   activate<span class="sym">(){</span>
      count<span class="sym">++;</span>
      <span class="kwa">if</span> <span class="sym">(</span>count <span class="sym">&gt;=</span> toggleTrigger<span class="sym">){</span>
         state <span class="sym">= !</span>state<span class="sym">;</span>
         count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">return this</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>
