
<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">BufferedReader</span><span class="sym">;</span>
<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">IOException</span><span class="sym">;</span>
<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">InputStreamReader</span><span class="sym">;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span><span class="kwc">ArrayList</span><span class="sym">;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span><span class="kwc">Iterator</span><span class="sym">;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>regex<span class="sym">.</span><span class="kwc">Matcher</span><span class="sym">;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>regex<span class="sym">.</span><span class="kwc">Pattern</span><span class="sym">;</span>

<span class="kwa">public class</span> regexmatch <span class="sym">{</span>

    <span class="kwa">static final</span> <span class="kwc">String</span> regex <span class="sym">=</span> <span class="str">&quot;(^|^</span><span class="esc">\\</span><span class="str">D*[^</span><span class="esc">\\</span><span class="str">(</span><span class="esc">\\</span><span class="str">d])&quot;</span> <span class="slc">// must be preceeded by non-digit</span>
            <span class="sym">+</span> <span class="str">&quot;((</span><span class="esc">\\</span><span class="str">(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">))|(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d))&quot;</span> <span class="slc">// match 2: Area Code inner match 3: area with perens,</span>
            <span class="slc">//                    inner match 4: without perens</span>
            <span class="sym">+</span> <span class="str">&quot;[ ]&quot;</span> <span class="slc">// area code followed by one space</span>
            <span class="sym">+</span> <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span> <span class="slc">//match 5: prefix of 3 digits</span>
            <span class="sym">+</span> <span class="str">&quot;[ -]&quot;</span> <span class="slc">// prefix followed by space or dash</span>
            <span class="sym">+</span> <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span> <span class="slc">// match 6: last 4 digits</span>
            <span class="sym">+</span> <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">D.*|$)&quot;</span><span class="sym">;</span> <span class="slc">// followed by non numeric chars</span>

    <span class="kwa">static final</span> <span class="kwc">Pattern</span> phonePattern <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span>regex<span class="sym">);</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {</span>
        <span class="kwb">int</span> n <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> ? <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwc">ArrayList</span> file <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">();</span>
        <span class="kwc">String</span> inLine<span class="sym">;</span>

        <span class="kwa">try</span> <span class="sym">{</span>
            <span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));</span>
            <span class="kwa">while</span> <span class="sym">((</span>inLine <span class="sym">=</span> in<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">()) !=</span> null<span class="sym">) {</span>
                file<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span>inLine<span class="sym">);</span>
            <span class="sym">}</span>
            in<span class="sym">.</span><span class="kwd">close</span><span class="sym">();</span>

            <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
                <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                <span class="kwc">Iterator</span> itr <span class="sym">=</span> file<span class="sym">.</span><span class="kwd">listIterator</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
                <span class="kwa">while</span> <span class="sym">(</span>itr<span class="sym">.</span><span class="kwd">hasNext</span><span class="sym">()) {</span>
                    <span class="kwc">Matcher</span> match <span class="sym">=</span> phonePattern<span class="sym">.</span><span class="kwd">matcher</span><span class="sym">((</span><span class="kwc">String</span><span class="sym">)</span> itr<span class="sym">.</span><span class="kwd">next</span><span class="sym">());</span>
                    <span class="kwa">if</span> <span class="sym">(</span>match<span class="sym">.</span><span class="kwd">matches</span><span class="sym">()) {</span>
                        <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> <span class="num">1</span><span class="sym">) {</span>
                            <span class="kwa">if</span> <span class="sym">(</span>match<span class="sym">.</span><span class="kwd">group</span><span class="sym">(</span><span class="num">3</span><span class="sym">) !=</span> null<span class="sym">) {</span>
                                <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(++</span>count <span class="sym">+</span> <span class="str">&quot;: &quot;</span> <span class="sym">+</span> match<span class="sym">.</span><span class="kwd">group</span><span class="sym">(</span><span class="num">3</span><span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> match<span class="sym">.</span><span class="kwd">group</span><span class="sym">(</span><span class="num">5</span><span class="sym">) +</span> <span class="str">&quot;-&quot;</span>
                                        <span class="sym">+</span> match<span class="sym">.</span><span class="kwd">group</span><span class="sym">(</span><span class="num">6</span><span class="sym">));</span>
                            <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                                <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(++</span>count <span class="sym">+</span> <span class="str">&quot;: (&quot;</span> <span class="sym">+</span> match<span class="sym">.</span><span class="kwd">group</span><span class="sym">(</span><span class="num">4</span><span class="sym">) +</span> <span class="str">&quot;) &quot;</span> <span class="sym">+</span> match<span class="sym">.</span><span class="kwd">group</span><span class="sym">(</span><span class="num">5</span><span class="sym">) +</span> <span class="str">&quot;-&quot;</span>
                                        <span class="sym">+</span> match<span class="sym">.</span><span class="kwd">group</span><span class="sym">(</span><span class="num">6</span><span class="sym">));</span>
                            <span class="sym">}</span>
                        <span class="sym">}</span>
                    <span class="sym">}</span>
                <span class="sym">}</span>
                n<span class="sym">--;</span>
            <span class="sym">}</span>
        <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {</span>
            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>e<span class="sym">);</span>
        <span class="sym">}</span>
        <span class="kwc">System</span><span class="sym">.</span><span class="kwd">exit</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
    <span class="sym">}</span>

<span class="sym">}</span>

