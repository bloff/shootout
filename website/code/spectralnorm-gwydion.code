<span class="kwb">module</span><span class="sym">:</span>    spectralnorm
<span class="kwb">synopsis</span><span class="sym">:</span>  implementation of <span class="str">&quot;spectral-norm&quot;</span> benchmark
<span class="kwb">author</span><span class="sym">:</span>    Bruce Mitchener <span class="kwa">&lt;bruce&#64;cubik.org&gt;</span>
<span class="kwb">copyright</span><span class="sym">:</span> public <span class="kwa">domain
use</span><span class="sym">-</span>libraries<span class="sym">:</span>  common<span class="sym">-</span>dylan<span class="sym">,</span> dylan<span class="sym">,</span> io
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span>    common<span class="sym">-</span>dylan<span class="sym">,</span> transcendentals<span class="sym">,</span> format<span class="sym">-</span>out<span class="sym">,</span> extensions

limited<span class="sym">-</span>vector<span class="sym">-</span><span class="kwa">class</span><span class="sym">(</span><span class="kwa">&lt;double-vector&gt;</span><span class="sym">,</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> <span class="num">0.0d0</span><span class="sym">);

</span><span class="kwa">define function</span> eval<span class="sym">-</span>A <span class="sym">(</span>i <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> j <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">;
</span>  <span class="num">1.0d0</span> <span class="sym">/ (</span>truncate<span class="sym">/((</span>i <span class="sym">+</span> j<span class="sym">) * (</span>i <span class="sym">+</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">),</span> <span class="num">2</span><span class="sym">) +</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span><span class="kwa">end function</span> eval<span class="sym">-</span>A<span class="sym">;

</span><span class="kwa">define function</span> eval<span class="sym">-</span>A<span class="sym">-</span>times<span class="sym">-</span>u <span class="sym">(</span>u <span class="sym">::</span> <span class="kwa">&lt;double-vector&gt;</span><span class="sym">,</span> Au <span class="sym">::</span> <span class="kwa">&lt;double-vector&gt;</span><span class="sym">);
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> u.size<span class="sym">)
</span>    Au<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0d0</span><span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>j <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> u.size<span class="sym">)
</span>      Au<span class="sym">[</span>i<span class="sym">] :=</span> Au<span class="sym">[</span>i<span class="sym">] +</span> eval<span class="sym">-</span>A<span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) *</span> u<span class="sym">[</span>j<span class="sym">];
</span>    <span class="kwa">end for</span><span class="sym">;
</span>  <span class="kwa">end for</span><span class="sym">;
</span><span class="kwa">end function</span> eval<span class="sym">-</span>A<span class="sym">-</span>times<span class="sym">-</span>u<span class="sym">;

</span><span class="kwa">define function</span> eval<span class="sym">-</span>At<span class="sym">-</span>times<span class="sym">-</span>u <span class="sym">(</span>u <span class="sym">::</span> <span class="kwa">&lt;double-vector&gt;</span><span class="sym">,</span> Au <span class="sym">::</span> <span class="kwa">&lt;double-vector&gt;</span><span class="sym">);
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> u.size<span class="sym">)
</span>    Au<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0d0</span><span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>j <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> u.size<span class="sym">)
</span>      Au<span class="sym">[</span>i<span class="sym">] :=</span> Au<span class="sym">[</span>i<span class="sym">] +</span> eval<span class="sym">-</span>A<span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">) *</span> u<span class="sym">[</span>j<span class="sym">];
</span>    <span class="kwa">end for</span><span class="sym">;
</span>  <span class="kwa">end for</span><span class="sym">;
</span><span class="kwa">end function</span> eval<span class="sym">-</span>At<span class="sym">-</span>times<span class="sym">-</span>u<span class="sym">;

</span><span class="kwa">define function</span> eval<span class="sym">-</span>AtA<span class="sym">-</span>times<span class="sym">-</span>u <span class="sym">(</span>u <span class="sym">::</span> <span class="kwa">&lt;double-vector&gt;</span><span class="sym">,</span> AtAu <span class="sym">::</span> <span class="kwa">&lt;double-vector&gt;</span><span class="sym">);
</span>  <span class="kwa">let</span> v <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;double-vector&gt;</span><span class="sym">,</span> size<span class="sym">:</span> u.size<span class="sym">);
</span>  eval<span class="sym">-</span>A<span class="sym">-</span>times<span class="sym">-</span>u<span class="sym">(</span>u<span class="sym">,</span> v<span class="sym">);
</span>  eval<span class="sym">-</span>At<span class="sym">-</span>times<span class="sym">-</span>u<span class="sym">(</span>v<span class="sym">,</span> AtAu<span class="sym">);
</span><span class="kwa">end function</span> eval<span class="sym">-</span>AtA<span class="sym">-</span>times<span class="sym">-</span>u<span class="sym">;

</span><span class="kwa">begin
  let</span> N <span class="sym">=</span> application<span class="sym">-</span>arguments<span class="sym">()[</span><span class="num">0</span><span class="sym">]</span>.string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">;
</span>  <span class="kwa">let</span> u <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;double-vector&gt;</span><span class="sym">,</span> size<span class="sym">:</span> N<span class="sym">,</span> fill<span class="sym">:</span> <span class="num">1.0d0</span><span class="sym">);
</span>  <span class="kwa">let</span> v <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;double-vector&gt;</span><span class="sym">,</span> size<span class="sym">:</span> N<span class="sym">,</span> fill<span class="sym">:</span> <span class="num">1.0d0</span><span class="sym">);
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> <span class="num">10</span><span class="sym">)
</span>    eval<span class="sym">-</span>AtA<span class="sym">-</span>times<span class="sym">-</span>u<span class="sym">(</span>u<span class="sym">,</span> v<span class="sym">);
</span>    eval<span class="sym">-</span>AtA<span class="sym">-</span>times<span class="sym">-</span>u<span class="sym">(</span>v<span class="sym">,</span> u<span class="sym">);
</span>  <span class="kwa">end for</span><span class="sym">;
</span>  <span class="kwa">let</span> vBv <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span> <span class="sym">=</span> <span class="num">0.0d0</span><span class="sym">;
</span>  <span class="kwa">let</span> vv <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span> <span class="sym">=</span> <span class="num">0.0d0</span><span class="sym">;
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> N<span class="sym">)
</span>    <span class="kwa">let</span> u<span class="sym">-</span>i <span class="sym">=</span> u<span class="sym">[</span>i<span class="sym">];
</span>    <span class="kwa">let</span> v<span class="sym">-</span>i <span class="sym">=</span> v<span class="sym">[</span>i<span class="sym">];
</span>    vBv <span class="sym">:=</span> vBv <span class="sym">+</span> u<span class="sym">-</span>i <span class="sym">*</span> v<span class="sym">-</span>i<span class="sym">;
</span>    vv <span class="sym">:=</span> vv <span class="sym">+</span> v<span class="sym">-</span>i <span class="sym">*</span> v<span class="sym">-</span>i<span class="sym">;
</span>  <span class="kwa">end for</span><span class="sym">;
</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%0.9f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sqrt<span class="sym">(</span>vBv <span class="sym">/</span> vv<span class="sym">));
</span><span class="kwa">end
</span>
