<span class="com">/* -*- mode: c -*-
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Sebastien Loisel
 */</span>

#include <span class="kwa">&lt;stdio.h&gt;</span>
#include <span class="kwa">&lt;stdlib.h&gt;</span>
#include <span class="kwa">&lt;math.h&gt;</span>

double eval_A<span class="sym">(</span>int i<span class="sym">,</span> int j<span class="sym">) {</span> return <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">); }

</span>void eval_A_times_u<span class="sym">(</span>int N<span class="sym">,</span> const double u<span class="sym">[],</span> double Au<span class="sym">[])
{
</span>  int i<span class="sym">,</span>j<span class="sym">;
</span>  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="kwa">&lt;N;i++)
    {
      Au[i]=</span><span class="num">0</span><span class="kwa">;
      for(j=</span><span class="num">0</span><span class="kwa">;j&lt;N;j++) Au[i]+=eval_A(i,j)*u[j];
    }
}

void eval_At_times_u(int N, const double u[], double Au[])
{
  int i,j;
  for(i=</span><span class="num">0</span><span class="kwa">;i&lt;N;i++)
    {
      Au[i]=</span><span class="num">0</span><span class="kwa">;
      for(j=</span><span class="num">0</span><span class="kwa">;j&lt;N;j++) Au[i]+=eval_A(j,i)*u[j];
    }
}

void eval_AtA_times_u(int N, const double u[], double AtAu[])
{ double v[N]; eval_A_times_u(N,u,v); eval_At_times_u(N,v,AtAu); }

int main(int argc, char *argv[])
{
  int i;
  int N = ((argc ==</span> <span class="num">2</span><span class="kwa">) ? atoi(argv[</span><span class="num">1</span><span class="kwa">]) :</span> <span class="num">2000</span><span class="kwa">);
  double u[N],v[N],vBv,vv;
  for(i=</span><span class="num">0</span><span class="kwa">;i&lt;N;i++) u[i]=</span><span class="num">1</span><span class="kwa">;
  for(i=</span><span class="num">0</span><span class="kwa">;i&lt;</span><span class="num">10</span><span class="kwa">;i++)
    {
      eval_AtA_times_u(N,u,v);
      eval_AtA_times_u(N,v,u);
    }
  vBv=vv=</span><span class="num">0</span><span class="kwa">;
  for(i=</span><span class="num">0</span><span class="kwa">;i&lt;N;i++) { vBv+=u[i]*v[i]; vv+=v[i]*v[i]; }
  printf(</span><span class="str">&quot;%0.9f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="kwa">,sqrt(vBv/vv));
  return</span> <span class="num">0</span><span class="kwa">;
}
</span>
