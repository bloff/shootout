<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

main <span class="sym">:-</span>
  cmdlNumArg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> N<span class="sym">),</span>

  init_fannkuch<span class="sym">,</span>

  f_permutations<span class="sym">(</span>N<span class="sym">,</span> MaxFlips<span class="sym">),</span>
  format<span class="sym">(</span><span class="str">'Pfannkuchen(~d) = ~d~n'</span><span class="sym">, [</span>N<span class="sym">,</span> MaxFlips<span class="sym">]),</span>

  drop_fannkuch.

<span class="slc">% ------------------------------- %</span>

init_fannkuch <span class="sym">:-</span> setvar<span class="sym">(</span>perm_N<span class="sym">,</span> <span class="num">0</span><span class="sym">),</span> setvar<span class="sym">(</span>max_flips<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>.

<span class="slc">% ------------- %</span>

drop_fannkuch <span class="sym">:-</span> dropvar<span class="sym">(</span>perm_N<span class="sym">),</span> dropvar<span class="sym">(</span>max_flips<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

f_permutations<span class="sym">(</span>N<span class="sym">,</span> MaxFlips<span class="sym">) :-</span>
  numlist<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> N<span class="sym">,</span> L<span class="sym">),</span>
  f_permutations_<span class="sym">(</span>L<span class="sym">,</span> N<span class="sym">,</span> <span class="num">0</span><span class="sym">),</span>
  getvar<span class="sym">(</span>max_flips<span class="sym">,</span> MaxFlips<span class="sym">)</span>.

<span class="slc">% ------------- %</span>

f_permutations_<span class="sym">(</span>L<span class="sym">,</span> N<span class="sym">,</span> I<span class="sym">) :-</span>
  <span class="sym">(</span>I <span class="sym">&lt;</span> N <span class="sym">-&gt;</span>
    <span class="sym">(</span>N <span class="sym">=:=</span> <span class="num">1</span> <span class="sym">-&gt;</span>
      <span class="sym">!,</span> processPerm<span class="sym">(</span>L<span class="sym">)</span>
    <span class="sym">;</span>
      N1 <span class="kwa">is</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span>
      f_permutations_<span class="sym">(</span>L<span class="sym">,</span> N1<span class="sym">,</span> <span class="num">0</span><span class="sym">),</span>
      take_drop<span class="sym">(</span>L<span class="sym">,</span> N<span class="sym">,</span> Lt<span class="sym">,</span> Ld<span class="sym">),</span>
      rotateLeft<span class="sym">(</span>Lt<span class="sym">,</span> LtRL<span class="sym">),</span>
      reverse<span class="sym">(</span>LtRL<span class="sym">,</span> LtRLR<span class="sym">),</span> append<span class="sym">(</span>LtRLR<span class="sym">,</span> Ld<span class="sym">,</span> La<span class="sym">),</span> Ii <span class="kwa">is</span> I <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span>
      <span class="sym">!,</span> f_permutations_<span class="sym">(</span>La<span class="sym">,</span> N<span class="sym">,</span> Ii<span class="sym">))</span>
  <span class="sym">;</span>
    <span class="sym">!,</span> <span class="kwa">true</span><span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

flips<span class="sym">(</span>L<span class="sym">,</span> Flips<span class="sym">) :-</span> flips_<span class="sym">(</span>L<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> Flips<span class="sym">)</span>.

flips_<span class="sym">([</span><span class="num">1</span><span class="sym">|</span>_<span class="sym">],</span> Fla<span class="sym">,</span> Fla<span class="sym">) :- !</span>.

flips_<span class="sym">([</span>N<span class="sym">|</span>T<span class="sym">],</span> Fla<span class="sym">,</span> Flips<span class="sym">) :-</span>
  take_drop<span class="sym">([</span>N<span class="sym">|</span>T<span class="sym">],</span> N<span class="sym">,</span> Lt<span class="sym">,</span> Ld<span class="sym">),</span> append<span class="sym">(</span>Lt<span class="sym">,</span> Ld<span class="sym">,</span> La<span class="sym">),</span>
  Fla1 <span class="kwa">is</span> Fla <span class="sym">+</span> <span class="num">1</span><span class="sym">, !,</span> flips_<span class="sym">(</span>La<span class="sym">,</span> Fla1<span class="sym">,</span> Flips<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

rotateLeft<span class="sym">([], [])</span>.

rotateLeft<span class="sym">([</span>H<span class="sym">|</span>T<span class="sym">],</span> RL<span class="sym">) :-</span> append<span class="sym">(</span>T<span class="sym">, [</span>H<span class="sym">],</span> RL<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

printPerm<span class="sym">(</span>L<span class="sym">) :-</span> concat_atom<span class="sym">(</span>L<span class="sym">,</span> NA<span class="sym">),</span> format<span class="sym">(</span><span class="str">'~w~n'</span><span class="sym">, [</span>NA<span class="sym">])</span>.

<span class="slc">% ------------------------------- %</span>

processPerm<span class="sym">(</span>L<span class="sym">) :-</span>
  getvar<span class="sym">(</span>max_flips<span class="sym">,</span> MaxFlips<span class="sym">),</span> getvar<span class="sym">(</span>perm_N<span class="sym">,</span> PermN<span class="sym">),</span>
  flips<span class="sym">(</span>L<span class="sym">,</span> Flips<span class="sym">),</span>
  <span class="sym">(</span>Flips <span class="sym">&gt;</span> MaxFlips <span class="sym">-&gt;</span>
    setvar<span class="sym">(</span>max_flips<span class="sym">,</span> Flips<span class="sym">)</span>
  <span class="sym">;</span>
    <span class="kwa">true</span><span class="sym">),</span>
  <span class="sym">(</span>PermN <span class="sym">&lt;</span> <span class="num">30</span> <span class="sym">-&gt;</span>
    printPerm<span class="sym">(</span>L<span class="sym">),</span>
    PermN1 <span class="kwa">is</span> PermN <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span>
    setvar<span class="sym">(</span>perm_N<span class="sym">,</span> PermN1<span class="sym">)</span>
  <span class="sym">;</span>
    <span class="kwa">true</span><span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

take_drop<span class="sym">(</span>L<span class="sym">,</span> N<span class="sym">,</span> Taken<span class="sym">,</span> Rest<span class="sym">) :-</span> take_drop_<span class="sym">(</span>L<span class="sym">,</span> N<span class="sym">,</span> <span class="num">0</span><span class="sym">, [],</span> Taken<span class="sym">,</span> Rest<span class="sym">)</span>.

<span class="slc">%</span>
<span class="slc">% 'take' list returned in reverse order. If wanting it in order, use:</span>
<span class="slc">%</span>
<span class="slc">% take_drop_(L, N, N, Ta, Taken, L) :- !, reverse(Ta, Taken).</span>
<span class="slc">%</span>

take_drop_<span class="sym">(</span>L<span class="sym">,</span> N<span class="sym">,</span> N<span class="sym">,</span> Ta<span class="sym">,</span> Ta<span class="sym">,</span> L<span class="sym">) :- !</span>.

take_drop_<span class="sym">([</span>H<span class="sym">|</span>T<span class="sym">],</span> N<span class="sym">,</span> Nc<span class="sym">,</span> Ta<span class="sym">,</span> Taken<span class="sym">,</span> Rest<span class="sym">) :-</span>
  Nc1 <span class="kwa">is</span> Nc <span class="sym">+</span> <span class="num">1</span><span class="sym">, !,</span> take_drop_<span class="sym">(</span>T<span class="sym">,</span> N<span class="sym">,</span> Nc1<span class="sym">, [</span>H<span class="sym">|</span>Ta<span class="sym">],</span> Taken<span class="sym">,</span> Rest<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

getvar<span class="sym">(</span>Id<span class="sym">,</span> Value<span class="sym">) :-</span> nb_getval<span class="sym">(</span>Id<span class="sym">,</span> Value<span class="sym">)</span>.
setvar<span class="sym">(</span>Id<span class="sym">,</span> Value<span class="sym">) :-</span> nb_setval<span class="sym">(</span>Id<span class="sym">,</span> Value<span class="sym">)</span>.
dropvar<span class="sym">(</span>Id<span class="sym">) :-</span> nb_delete<span class="sym">(</span>Id<span class="sym">)</span>.

<span class="slc">% ------------------------------- %</span>

argument_value<span class="sym">(</span>N<span class="sym">,</span> Arg<span class="sym">) :-</span>
  <span class="kwb">current_prolog_flag</span><span class="sym">(</span>argv<span class="sym">,</span> Cmdline<span class="sym">),</span> append<span class="sym">(</span>_<span class="sym">, [--|</span>UserArgs<span class="sym">],</span> Cmdline<span class="sym">),</span>
  Nth <span class="kwa">is</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> nth0<span class="sym">(</span>Nth<span class="sym">,</span> UserArgs<span class="sym">,</span> Arg<span class="sym">)</span>.

cmdlNumArg<span class="sym">(</span>Nth<span class="sym">,</span> N<span class="sym">) :-</span>
  argument_value<span class="sym">(</span>Nth<span class="sym">,</span> Arg<span class="sym">),</span> <span class="kwb">catch</span><span class="sym">(</span>atom_number<span class="sym">(</span>Arg<span class="sym">,</span> N<span class="sym">),</span> _<span class="sym">,</span> <span class="kwa">fail</span><span class="sym">) ;</span> <span class="kwa">halt</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.

