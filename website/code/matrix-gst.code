<span class="str">&quot;  The Great Computer Language Shootout</span>
<span class="str">   contributed by Paolo Bonzini</span>
<span class="str"></span>
<span class="str">   To run: gst -QI /usr/share/gnu-smalltalk/gst.im matrix.st -a 300</span>
<span class="str">&quot;</span>

<span class="sym">!</span>Array class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

newMatrix<span class="sym">:</span> rows columns<span class="sym">:</span> cols
   <span class="sym">|</span> count mx row <span class="sym">|</span>
   count <span class="sym">:=</span> <span class="num">1</span>.
   mx <span class="sym">:=</span> self new<span class="sym">:</span> rows.
   <span class="num">1</span> to<span class="sym">:</span> rows <span class="kwa">do</span><span class="sym">: [ :</span>i <span class="sym">|</span>
      row <span class="sym">:=</span> mx at<span class="sym">:</span> i put<span class="sym">: (</span>Array new<span class="sym">:</span> cols<span class="sym">)</span>.
      <span class="num">1</span> to<span class="sym">:</span> cols <span class="kwa">do</span><span class="sym">: [ :</span>j <span class="sym">|</span>
         row at<span class="sym">:</span> j put<span class="sym">:</span> count.
         count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">]</span>.
   <span class="sym">]</span>.
   ^mx<span class="sym">! !</span>

<span class="sym">!</span>Array methodsFor<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!</span>

atXY<span class="sym">:</span> coord
   ^<span class="sym">(</span>self at<span class="sym">:</span> coord x<span class="sym">)</span> at<span class="sym">:</span> coord y<span class="sym">!</span>

mmult<span class="sym">:</span> m2
   <span class="sym">|</span> rows cols terms val mx row myRow <span class="sym">|</span>
   rows <span class="sym">:=</span> self size.
   terms <span class="sym">:=</span> m2 size.
   cols <span class="sym">:=</span> m2 first size.
   mx <span class="sym">:=</span> Array new<span class="sym">:</span> rows.
   <span class="num">1</span> to<span class="sym">:</span> rows <span class="kwa">do</span><span class="sym">: [ :</span>i <span class="sym">|</span>
      row <span class="sym">:=</span> mx at<span class="sym">:</span> i put<span class="sym">: (</span>Array new<span class="sym">:</span> cols<span class="sym">)</span>.
      myRow <span class="sym">:=</span> self at<span class="sym">:</span> i.
      <span class="num">1</span> to<span class="sym">:</span> cols <span class="kwa">do</span><span class="sym">: [ :</span>j <span class="sym">|</span>
         val <span class="sym">:=</span> <span class="num">0</span>.
         <span class="num">1</span> to<span class="sym">:</span> terms <span class="kwa">do</span><span class="sym">: [ :</span>k <span class="sym">|</span>
            val <span class="sym">:=</span> val <span class="sym">+ ((</span>myRow at<span class="sym">:</span> k<span class="sym">) * ((</span>m2 at<span class="sym">:</span> k<span class="sym">)</span> at<span class="sym">:</span> j<span class="sym">)</span> bitAnd<span class="sym">:</span> <span class="num">16</span>r3FFF_FFFF<span class="sym">) ]</span>.
         row at<span class="sym">:</span> j put<span class="sym">:</span> val.
      <span class="sym">]</span>.
   <span class="sym">]</span>.
   ^mx<span class="sym">! !</span>


<span class="sym">|</span> m1 m2 mm size n <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments isEmpty
   ifTrue<span class="sym">: [</span> <span class="num">1</span> <span class="sym">]</span>
   ifFalse<span class="sym">: [</span> <span class="num">1</span> max<span class="sym">:</span> Smalltalk arguments first asInteger <span class="sym">]</span>.

size <span class="sym">:=</span> <span class="num">30</span>.
m1 <span class="sym">:=</span> Array newMatrix<span class="sym">:</span> size columns<span class="sym">:</span> size.
m2 <span class="sym">:=</span> Array newMatrix<span class="sym">:</span> size columns<span class="sym">:</span> size.
n timesRepeat<span class="sym">: [</span> mm <span class="sym">:=</span> m1 mmult<span class="sym">:</span> m2 <span class="sym">]</span>.

<span class="sym">(</span><span class="str">'%1 %2 %3 %4'</span> bindWith<span class="sym">: (</span>mm atXY<span class="sym">:</span> <span class="num">1</span><span class="kwb">&#64;1</span><span class="sym">)</span>
   with<span class="sym">: (</span>mm atXY<span class="sym">:</span> <span class="num">3</span><span class="kwb">&#64;4</span><span class="sym">)</span> with<span class="sym">: (</span>mm atXY<span class="sym">:</span> <span class="num">4</span><span class="kwb">&#64;3</span><span class="sym">)</span>
   with<span class="sym">: (</span>mm atXY<span class="sym">:</span> <span class="num">5</span><span class="kwb">&#64;5</span><span class="sym">))</span> displayNl<span class="sym">!</span>

