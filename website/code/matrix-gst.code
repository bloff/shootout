<span class="line">    1 </span><span class="str">&quot;  The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="str">    contributed by Paolo Bonzini
</span><span class="line">    3 </span><span class="str"> 
</span><span class="line">    4 </span><span class="str">    To run: gst -QI /usr/local/share/smalltalk/gst.im matrix.st -a 300
</span><span class="line">    5 </span><span class="str"> &quot;</span>
<span class="line">    6 </span>
<span class="line">    7 </span>  <span class="sym">!</span>Array class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!
</span><span class="line">    8 </span><span class="sym"> 
</span><span class="line">    9 </span><span class="sym"> </span>newMatrix<span class="sym">:</span> rows columns<span class="sym">:</span> cols
<span class="line">   10 </span>     <span class="sym">|</span> count mx row <span class="sym">|
</span><span class="line">   11 </span><span class="sym"> </span>    count <span class="sym">:=</span> <span class="num">1</span>.
<span class="line">   12 </span>     mx <span class="sym">:=</span> self new<span class="sym">:</span> rows.
<span class="line">   13 </span>     <span class="num">1</span> to<span class="sym">:</span> rows <span class="kwa">do</span><span class="sym">: [ :</span>i <span class="sym">|
</span><span class="line">   14 </span><span class="sym"> </span>        row <span class="sym">:=</span> mx at<span class="sym">:</span> i put<span class="sym">: (</span>Array new<span class="sym">:</span> cols<span class="sym">)</span>.
<span class="line">   15 </span>         <span class="num">1</span> to<span class="sym">:</span> cols <span class="kwa">do</span><span class="sym">: [ :</span>j <span class="sym">|
</span><span class="line">   16 </span><span class="sym"> </span>            row at<span class="sym">:</span> j put<span class="sym">:</span> count.
<span class="line">   17 </span>             count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1
</span><span class="line">   18 </span><span class="num"> </span>        <span class="sym">]</span>.
<span class="line">   19 </span>     <span class="sym">]</span>.
<span class="line">   20 </span>     ^mx<span class="sym">! !
</span><span class="line">   21 </span><span class="sym"> 
</span><span class="line">   22 </span><span class="sym"> !</span>Array methodsFor<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!
</span><span class="line">   23 </span><span class="sym"> 
</span><span class="line">   24 </span><span class="sym"> </span>atXY<span class="sym">:</span> coord
<span class="line">   25 </span>     ^<span class="sym">(</span>self at<span class="sym">:</span> coord x<span class="sym">)</span> at<span class="sym">:</span> coord y<span class="sym">!
</span><span class="line">   26 </span><span class="sym"> 
</span><span class="line">   27 </span><span class="sym">     </span>mmult<span class="sym">:</span> m2
<span class="line">   28 </span>     <span class="sym">|</span> rows cols terms val mx row myRow <span class="sym">|
</span><span class="line">   29 </span><span class="sym"> </span>    rows <span class="sym">:=</span> self size.
<span class="line">   30 </span>     terms <span class="sym">:=</span> m2 size.
<span class="line">   31 </span>     cols <span class="sym">:=</span> m2 first size.
<span class="line">   32 </span>     mx <span class="sym">:=</span> Array new<span class="sym">:</span> rows.
<span class="line">   33 </span>     <span class="num">1</span> to<span class="sym">:</span> rows <span class="kwa">do</span><span class="sym">: [ :</span>i <span class="sym">|
</span><span class="line">   34 </span><span class="sym"> </span>        row <span class="sym">:=</span> mx at<span class="sym">:</span> i put<span class="sym">: (</span>Array new<span class="sym">:</span> cols<span class="sym">)</span>.
<span class="line">   35 </span>         myRow <span class="sym">:=</span> self at<span class="sym">:</span> i.
<span class="line">   36 </span>         <span class="num">1</span> to<span class="sym">:</span> cols <span class="kwa">do</span><span class="sym">: [ :</span>j <span class="sym">|
</span><span class="line">   37 </span><span class="sym"> </span>            val <span class="sym">:=</span> <span class="num">0</span>.
<span class="line">   38 </span>             <span class="num">1</span> to<span class="sym">:</span> terms <span class="kwa">do</span><span class="sym">: [ :</span>k <span class="sym">|
</span><span class="line">   39 </span><span class="sym"> </span>                val <span class="sym">:=</span> val <span class="sym">+ ((</span>myRow at<span class="sym">:</span> k<span class="sym">) * ((</span>m2 at<span class="sym">:</span> k<span class="sym">)</span> at<span class="sym">:</span> j<span class="sym">)</span> bitAnd<span class="sym">:</span> <span class="num">16</span>r3FFF_FFFF<span class="sym">) ]</span>.
<span class="line">   40 </span>             row at<span class="sym">:</span> j put<span class="sym">:</span> val.
<span class="line">   41 </span>         <span class="sym">]</span>.
<span class="line">   42 </span>     <span class="sym">]</span>.
<span class="line">   43 </span>     ^mx<span class="sym">! !
</span><span class="line">   44 </span><span class="sym"> 
</span><span class="line">   45 </span><span class="sym"> 
</span><span class="line">   46 </span><span class="sym"> |</span> m1 m2 mm size n <span class="sym">|
</span><span class="line">   47 </span><span class="sym"> </span>n <span class="sym">:=</span> Smalltalk arguments isEmpty
<span class="line">   48 </span>    ifTrue<span class="sym">: [</span> <span class="num">1</span> <span class="sym">]
</span><span class="line">   49 </span><span class="sym"> </span>   ifFalse<span class="sym">: [</span> <span class="num">1</span> max<span class="sym">:</span> Smalltalk arguments first asInteger <span class="sym">]</span>.
<span class="line">   50 </span>
<span class="line">   51 </span>  size <span class="sym">:=</span> <span class="num">30</span>.
<span class="line">   52 </span> m1 <span class="sym">:=</span> Array newMatrix<span class="sym">:</span> size columns<span class="sym">:</span> size.
<span class="line">   53 </span> m2 <span class="sym">:=</span> Array newMatrix<span class="sym">:</span> size columns<span class="sym">:</span> size.
<span class="line">   54 </span> n timesRepeat<span class="sym">: [</span> mm <span class="sym">:=</span> m1 mmult<span class="sym">:</span> m2 <span class="sym">]</span>.
<span class="line">   55 </span> <span class="sym">(</span><span class="str">'%1 %2 %3 %4'</span> bindWith<span class="sym">: (</span>mm atXY<span class="sym">:</span> <span class="num">1</span>&#64;<span class="num">1</span><span class="sym">)
</span><span class="line">   56 </span><span class="sym"> </span>    with<span class="sym">: (</span>mm atXY<span class="sym">:</span> <span class="num">3</span>&#64;<span class="num">4</span><span class="sym">)</span> with<span class="sym">: (</span>mm atXY<span class="sym">:</span> <span class="num">4</span>&#64;<span class="num">3</span><span class="sym">)
</span><span class="line">   57 </span><span class="sym"> </span>    with<span class="sym">: (</span>mm atXY<span class="sym">:</span> <span class="num">5</span>&#64;<span class="num">5</span><span class="sym">))</span> displayNl<span class="sym">!</span>
