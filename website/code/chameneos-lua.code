<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local</span> co <span class="sym">=</span> coroutine
<span class="kwa">local</span> create<span class="sym">,</span> resume<span class="sym">,</span> yield <span class="sym">=</span> co<span class="sym">.</span>create<span class="sym">,</span> co<span class="sym">.</span>resume<span class="sym">,</span> co<span class="sym">.</span>yield

<span class="kwa">local</span> N <span class="sym">=</span> <span class="kwb">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">10</span>
<span class="kwa">local</span> first<span class="sym">,</span> second

<span class="slc">-- Meet another creature.</span>
<span class="kwa">local function</span> <span class="kwd">meet</span><span class="sym">(</span>me<span class="sym">)</span>
  <span class="kwa">while</span> second <span class="kwa">do</span> <span class="kwd">yield</span><span class="sym">()</span> <span class="kwa">end</span> <span class="slc">-- Wait until meeting place clears.</span>
  <span class="kwa">local</span> other <span class="sym">=</span> first
  <span class="kwa">if</span> other <span class="kwa">then</span> <span class="slc">-- Hey, I found a new friend!</span>
    first <span class="sym">=</span> <span class="kwa">nil</span>
    second <span class="sym">=</span> me
  <span class="kwa">else</span> <span class="slc">-- Sniff, nobody here (yet).</span>
    <span class="kwa">local</span> n <span class="sym">=</span> N <span class="sym">-</span> <span class="num">1</span>
    <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">then return end</span> <span class="slc">-- Uh oh, the mall is closed.</span>
    N <span class="sym">=</span> n
    first <span class="sym">=</span> me
    <span class="kwa">repeat</span> <span class="kwd">yield</span><span class="sym">();</span> other <span class="sym">=</span> second <span class="kwa">until</span> other <span class="slc">-- Wait for another creature.</span>
    second <span class="sym">=</span> <span class="kwa">nil</span>
    <span class="kwd">yield</span><span class="sym">()</span> <span class="slc">-- Be nice and let others meet up.</span>
  <span class="kwa">end</span>
  <span class="kwa">return</span> other
<span class="kwa">end</span>

<span class="slc">-- Create a very social creature.</span>
<span class="kwa">local function</span> <span class="kwd">creature</span><span class="sym">(</span>color<span class="sym">)</span>
  <span class="kwa">return</span> <span class="kwd">create</span><span class="sym">(</span><span class="kwa">function</span><span class="sym">()</span>
    <span class="kwa">local</span> me <span class="sym">=</span> color
    <span class="kwa">for</span> met<span class="sym">=</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span>e9 <span class="kwa">do</span>
      <span class="kwa">local</span> other <span class="sym">=</span> <span class="kwd">meet</span><span class="sym">(</span>me<span class="sym">)</span>
      <span class="kwa">if not</span> other <span class="kwa">then return</span> met <span class="kwa">end</span>
      <span class="kwa">if</span> me ~<span class="sym">=</span> other <span class="kwa">then</span>
        <span class="kwa">if</span> me <span class="sym">==</span> <span class="str">&quot;blue&quot;</span> <span class="kwa">then</span> me <span class="sym">=</span> other <span class="sym">==</span> <span class="str">&quot;red&quot;</span> <span class="kwa">and</span> <span class="str">&quot;yellow&quot;</span> <span class="kwa">or</span> <span class="str">&quot;red&quot;</span>
        <span class="kwa">elseif</span> me <span class="sym">==</span> <span class="str">&quot;red&quot;</span> <span class="kwa">then</span> me <span class="sym">=</span> other <span class="sym">==</span> <span class="str">&quot;blue&quot;</span> <span class="kwa">and</span> <span class="str">&quot;yellow&quot;</span> <span class="kwa">or</span> <span class="str">&quot;blue&quot;</span>
        <span class="kwa">else</span> me <span class="sym">=</span> other <span class="sym">==</span> <span class="str">&quot;blue&quot;</span> <span class="kwa">and</span> <span class="str">&quot;red&quot;</span> <span class="kwa">or</span> <span class="str">&quot;blue&quot;</span> <span class="kwa">end</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="slc">-- Trivial round-robin scheduler.</span>
<span class="kwa">local function</span> <span class="kwd">schedule</span><span class="sym">(</span>threads<span class="sym">)</span>
  <span class="kwa">local</span> resume <span class="sym">=</span> resume
  <span class="kwa">local</span> nthreads<span class="sym">,</span> meetings <span class="sym">=</span> <span class="kwb">table</span><span class="sym">.</span><span class="kwb">getn</span><span class="sym">(</span>threads<span class="sym">),</span> <span class="num">0</span>
  <span class="kwa">repeat</span>
    <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>nthreads <span class="kwa">do</span>
      <span class="kwa">local</span> thr <span class="sym">=</span> threads<span class="sym">[</span>i<span class="sym">]</span>
      <span class="kwa">if not</span> thr <span class="kwa">then return</span> meetings <span class="kwa">end</span>
      <span class="kwa">local</span> ok<span class="sym">,</span> met <span class="sym">=</span> <span class="kwd">resume</span><span class="sym">(</span>thr<span class="sym">)</span>
      <span class="kwa">if</span> met <span class="kwa">then</span>
        meetings <span class="sym">=</span> meetings <span class="sym">+</span> met
        threads<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">nil</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">until false</span>
<span class="kwa">end</span>

<span class="slc">-- A bunch of colorful creatures.</span>
<span class="kwa">local</span> threads <span class="sym">= {</span>
  <span class="kwd">creature</span><span class="sym">(</span><span class="str">&quot;blue&quot;</span><span class="sym">),</span>
  <span class="kwd">creature</span><span class="sym">(</span><span class="str">&quot;red&quot;</span><span class="sym">),</span>
  <span class="kwd">creature</span><span class="sym">(</span><span class="str">&quot;yellow&quot;</span><span class="sym">),</span>
  <span class="kwd">creature</span><span class="sym">(</span><span class="str">&quot;blue&quot;</span><span class="sym">),</span>
<span class="sym">}</span>

io<span class="sym">.</span><span class="kwb">write</span><span class="sym">(</span><span class="kwd">schedule</span><span class="sym">(</span>threads<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
