<span class="sym">% -*-</span> mode<span class="sym">:</span> slang <span class="sym">-*-</span>
<span class="sym">%</span> $Id<span class="sym">:</span> hash2<span class="sym">.</span>slang<span class="sym">,</span>v <span class="num">1.2 2004</span><span class="sym">/</span><span class="num">11</span><span class="sym">/</span><span class="num">23 08</span><span class="sym">:</span><span class="num">08</span><span class="sym">:</span><span class="num">43</span> bfulgham Exp $
<span class="sym">%</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
<span class="sym">%</span>
<span class="sym">%</span> Provided by John E<span class="sym">.</span> Davis
<span class="sym">%</span>

define <span class="kwd">main</span> <span class="sym">()</span>
<span class="sym">{</span>
   variable n <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwd">integer</span><span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
   variable hash1 <span class="sym">=</span> Assoc_Type<span class="sym">[</span>Int_Type<span class="sym">];</span>
   <span class="kwd">_for</span> <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">10000</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
     <span class="sym">{</span>
	variable i <span class="sym">= ();</span>
	hash1<span class="sym">[</span><span class="kwd">strcat</span> <span class="sym">(</span><span class="str">&quot;foo_&quot;</span><span class="sym">,</span> <span class="kwd">string</span><span class="sym">(</span>i<span class="sym">))] =</span> i<span class="sym">;</span>
     <span class="sym">}</span>

   variable hash2 <span class="sym">=</span> Assoc_Type<span class="sym">[</span>Int_Type<span class="sym">,</span> <span class="num">0</span><span class="sym">];</span>
   <span class="kwd">loop</span> <span class="sym">(</span>n<span class="sym">)</span>
     <span class="sym">{</span>
	<span class="kwd">foreach</span> <span class="sym">(</span>hash1<span class="sym">)</span> <span class="kwa">using</span> <span class="sym">(</span><span class="str">&quot;keys&quot;</span><span class="sym">,</span> <span class="str">&quot;values&quot;</span><span class="sym">)</span>
	  <span class="sym">{</span>
	     variable k<span class="sym">,</span> v<span class="sym">;</span>
	     <span class="sym">(</span>k<span class="sym">,</span>v<span class="sym">) = ();</span>
	     hash2<span class="sym">[</span>k<span class="sym">] +=</span> v<span class="sym">;</span>
	  <span class="sym">}</span>
     <span class="sym">}</span>

   <span class="kwd">fprintf</span> <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%u %u %u %u</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	     hash1<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">],</span> hash1<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">],</span>
	     hash2<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">],</span> hash2<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">]);</span>
<span class="sym">}</span>

<span class="kwd">main</span><span class="sym">();</span>


