<span class="com">/* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * contributed by Joern Inge Vestgaarden</span>
<span class="com"> * Compile with gcc -O3 -fomit-frame-pointer -march=pentium4 -mfpmath=sse -msse2 -o fasta fasta.c</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>

<span class="dir">#define MIN(a,b) ((a) &lt;= (b) ? (a) : (b))</span>
<span class="dir">#define LINE_LEN 60</span>

<span class="dir">#define IM 139968</span>
<span class="dir">#define IA   3877</span>
<span class="dir">#define IC  29573</span>
<span class="kwb">int</span> global_last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>
<span class="dir">#define gen_random(max) (max*((global_last = (global_last * IA + IC) % IM) / ((float)(IM))))</span>

<span class="kwb">struct</span> aminoacids <span class="sym">{</span>
  <span class="kwb">float</span> p<span class="sym">;</span>
  <span class="kwb">char</span> c<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwb">void</span> <span class="kwd">make_cumulative</span> <span class="sym">(</span><span class="kwb">struct</span> aminoacids <span class="sym">*</span> genelist<span class="sym">,</span> <span class="kwb">int</span> count<span class="sym">) {</span>
    <span class="kwb">float</span> cp <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> count<span class="sym">;</span> i<span class="sym">++) {</span>
        cp <span class="sym">+=</span> genelist<span class="sym">[</span>i<span class="sym">].</span>p<span class="sym">;</span>
        genelist<span class="sym">[</span>i<span class="sym">].</span>p <span class="sym">=</span> cp<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">repeat_fasta</span> <span class="sym">(</span><span class="kwb">const char</span> <span class="sym">*</span>s<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {</span>
  <span class="kwb">int</span> len <span class="sym">=</span> <span class="kwd">strlen</span><span class="sym">(</span>s<span class="sym">);</span>
  <span class="kwb">int</span> pos <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
    <span class="kwb">const int</span> line <span class="sym">=</span> <span class="kwd">MIN</span><span class="sym">(</span>LINE_LEN<span class="sym">,</span> n<span class="sym">);</span>
    <span class="kwb">const int</span> left <span class="sym">=</span> len<span class="sym">-</span>pos<span class="sym">;</span>
    n <span class="sym">-=</span> line<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>left <span class="sym">&gt;=</span> line<span class="sym">) {</span>     <span class="com">/* Line not broken */</span>
      <span class="kwd">fwrite</span><span class="sym">(</span>s<span class="sym">+</span>pos<span class="sym">,</span><span class="num">1</span><span class="sym">,</span>line<span class="sym">,</span>stdout<span class="sym">);</span>
      <span class="kwd">putc</span><span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">,</span> stdout<span class="sym">);</span>
      pos <span class="sym">+=</span> line<span class="sym">;</span>
    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>                <span class="com">/* Line broken */</span>
      <span class="kwd">fwrite</span><span class="sym">(</span>s<span class="sym">+</span>pos<span class="sym">,</span><span class="num">1</span><span class="sym">,</span>left<span class="sym">,</span>stdout<span class="sym">);</span>
      pos <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwd">fwrite</span><span class="sym">(</span>s<span class="sym">,</span><span class="num">1</span><span class="sym">,</span>line<span class="sym">-</span>left<span class="sym">,</span>stdout<span class="sym">);</span>
      pos <span class="sym">+=</span> line <span class="sym">-</span> left<span class="sym">;</span>
      <span class="kwd">putc</span><span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">,</span> stdout<span class="sym">);</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">random_fasta</span> <span class="sym">(</span><span class="kwb">struct</span> aminoacids <span class="sym">*</span> genelist<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {</span>
  <span class="kwb">char</span> buf<span class="sym">[</span>LINE_LEN<span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
  <span class="kwb">char</span> <span class="sym">*</span>s <span class="sym">=</span> NULL<span class="sym">;</span>
  <span class="kwb">struct</span> aminoacids <span class="sym">*</span>a <span class="sym">=</span> genelist<span class="sym">;</span>
  <span class="kwb">float</span> r<span class="sym">;</span>
  <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
    <span class="kwb">const int</span> line <span class="sym">=</span> <span class="kwd">MIN</span><span class="sym">(</span>LINE_LEN<span class="sym">,</span> n<span class="sym">);</span>
    <span class="kwb">const char</span> <span class="sym">*</span>end <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">*)</span>buf <span class="sym">+</span> line<span class="sym">;</span>
    n <span class="sym">-=</span> line<span class="sym">;</span>
    s <span class="sym">=</span> buf<span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>s <span class="sym">&lt;</span> end<span class="sym">) {</span>
      r <span class="sym">=</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span>
      a <span class="sym">=</span> genelist<span class="sym">;</span>
      <span class="kwa">while</span> <span class="sym">(*((</span><span class="kwb">float</span> <span class="sym">*)</span>a<span class="sym">) &lt;</span> r<span class="sym">) ++</span>a<span class="sym">;</span> <span class="com">/* Linear search */</span>
      <span class="sym">*</span>s<span class="sym">++ =</span> a<span class="sym">-&gt;</span>c<span class="sym">;</span>
    <span class="sym">}</span>
    <span class="sym">*</span>s <span class="sym">=</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
    <span class="kwd">fwrite</span><span class="sym">(</span>buf<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> line<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> stdout<span class="sym">);</span>
  <span class="sym">}</span>
<span class="sym">}</span>


<span class="com">/* Main -- define alphabets, make 3 fragments */</span>

<span class="kwb">static struct</span> aminoacids iub<span class="sym">[] = {</span>
    <span class="sym">{</span> <span class="num">0.27</span><span class="sym">,</span> <span class="str">'a'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.12</span><span class="sym">,</span> <span class="str">'c'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.12</span><span class="sym">,</span> <span class="str">'g'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.27</span><span class="sym">,</span> <span class="str">'t'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'B'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'D'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'H'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'K'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'M'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'N'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'R'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'S'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'V'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'W'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'Y'</span> <span class="sym">}</span>
<span class="sym">};</span>

<span class="dir">#define IUB_LEN (sizeof (iub) / sizeof (struct aminoacids))</span>

<span class="kwb">static struct</span> aminoacids homosapiens<span class="sym">[] = {</span>
    <span class="sym">{</span> <span class="num">0.3029549426680</span><span class="sym">,</span> <span class="str">'a'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.1979883004921</span><span class="sym">,</span> <span class="str">'c'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.1975473066391</span><span class="sym">,</span> <span class="str">'g'</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="num">0.3015094502008</span><span class="sym">,</span> <span class="str">'t'</span> <span class="sym">},</span>
<span class="sym">};</span>

<span class="dir">#define HOMOSAPIENS_LEN (sizeof (homosapiens) / sizeof (struct aminoacids))</span>

<span class="kwb">static char</span> <span class="sym">*</span> alu <span class="sym">=</span>
   <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> \
   <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> \
   <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> \
   <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> \
   <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> \
   <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> \
   <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;</span>

<span class="kwb">int</span> <span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span> argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1000</span><span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwd">sscanf</span> <span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">],</span> <span class="str">&quot;%d&quot;</span><span class="sym">, &amp;</span>n<span class="sym">);</span>
    <span class="kwd">make_cumulative</span> <span class="sym">(</span>iub<span class="sym">,</span> IUB_LEN<span class="sym">);</span>
    <span class="kwd">make_cumulative</span> <span class="sym">(</span>homosapiens<span class="sym">,</span> HOMOSAPIENS_LEN<span class="sym">);</span>

    <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;&gt;ONE Homo sapiens alu</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
    <span class="kwd">repeat_fasta</span> <span class="sym">(</span> alu<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">);</span>
    <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;&gt;TWO IUB ambiguity codes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
    <span class="kwd">random_fasta</span> <span class="sym">(</span> iub<span class="sym">,</span>   n<span class="sym">*</span><span class="num">3</span><span class="sym">);</span>
    <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;&gt;THREE Homo sapiens frequency</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
    <span class="kwd">random_fasta</span> <span class="sym">(</span> homosapiens<span class="sym">,</span>  n<span class="sym">*</span><span class="num">5</span><span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

