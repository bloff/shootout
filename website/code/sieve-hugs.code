<span class="line">    1 </span><span class="slc">-- $Id: sieve-hugs.code,v 1.4 2004-11-13 07:43:20 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- from Roland Dowdeswell
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="kwa">module</span> Main <span class="kwa">where
</span><span class="line">    6 </span><span class="kwa">
</span><span class="line">    7 </span><span class="kwa">import</span> System<span class="sym">(</span>getArgs<span class="sym">)
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span>main <span class="sym">=</span> getArgs <span class="sym">&gt;&gt;=</span> putStrLn . <span class="sym">(</span><span class="str">&quot;Count: &quot;</span><span class="sym">++)</span> . show . mytest . read . headOr1
<span class="line">   10 </span>  <span class="kwa">where</span> headOr1 x <span class="sym">=</span> if length x <span class="sym">/=</span> <span class="num">1</span> <span class="kwa">then</span> <span class="str">&quot;1&quot;</span> <span class="kwa">else</span> head x
<span class="line">   11 </span>
<span class="line">   12 </span><span class="slc">-- here we try to force it to recompute at each step.  Note
</span><span class="line">   13 </span><span class="slc"></span><span class="slc">-- that we are not naming `sieve [2..8192]' and we are forcing
</span><span class="line">   14 </span><span class="slc"></span><span class="slc">-- a comparison with -1.  Of course there is still no guarantee
</span><span class="line">   15 </span><span class="slc"></span><span class="slc">-- that any particular Haskell implementation will actually
</span><span class="line">   16 </span><span class="slc"></span><span class="slc">-- recompute the value.
</span><span class="line">   17 </span><span class="slc"></span>mytest <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int
</span><span class="line">   18 </span><span class="kwb"></span>mytest <span class="num">1</span> <span class="sym">=</span> length <span class="sym">(</span>sieve <span class="sym">[</span><span class="num">2</span>.<span class="num">.8192</span><span class="sym">])
</span><span class="line">   19 </span><span class="sym"></span>mytest n <span class="sym">|</span> length <span class="sym">(</span>sieve <span class="sym">[</span><span class="num">2</span>.<span class="num">.8192</span><span class="sym">]) == -</span><span class="num">1</span> <span class="sym">=</span> error <span class="str">&quot;doh&quot;</span>
<span class="line">   20 </span>         <span class="sym">|</span> otherwise                      <span class="sym">=</span> mytest <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span><span class="slc">-- we use Int rather than let Haskell default to Integer,
</span><span class="line">   23 </span><span class="slc"></span><span class="slc">-- because we are trying to remain competetive with other
</span><span class="line">   24 </span><span class="slc"></span><span class="slc">-- languages that do not do arbitrary precision math by
</span><span class="line">   25 </span><span class="slc"></span><span class="slc">-- default...
</span><span class="line">   26 </span><span class="slc"></span>sieve <span class="sym">:: [</span><span class="kwb">Int</span><span class="sym">] -&gt; [</span><span class="kwb">Int</span><span class="sym">]
</span><span class="line">   27 </span><span class="sym"></span>sieve <span class="sym">[] = []
</span><span class="line">   28 </span><span class="sym"></span>sieve <span class="sym">(</span>h<span class="sym">:</span>t<span class="sym">) =</span> h <span class="sym">:</span> sieve <span class="sym">[</span>x<span class="sym">|</span> x<span class="sym">&lt;-</span>t<span class="sym">,</span> x`mod`h <span class="sym">/=</span> <span class="num">0</span><span class="sym">]</span>
