<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/guile \
-e main -s
!#

<I><FONT COLOR="#B22222">;;; $Id: matrix-guile.code,v 1.1 2004-11-02 08:52:36 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">;;; with help from Brad Knotwell
</FONT></I>
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">size</FONT></B> 30)

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">mkmatrix</FONT></B> rows cols)
  (<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">count</FONT></B> 1)
  (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">set-row</FONT></B> cols)
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((row (make-vector cols 0)))
      (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (1+ i)))
	  ((= i cols) row)
	(<B><FONT COLOR="#A020F0">begin</FONT></B> (vector-set! row i count) (<B><FONT COLOR="#A020F0">set!</FONT></B> count (1+ count))))))
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((mx (make-vector rows cols)))
    (<B><FONT COLOR="#A020F0">begin</FONT></B> (array-map-in-order! mx set-row mx) mx)))
  
(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">mmult</FONT></B> rows cols m1 m2)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((m3 (make-vector rows 0)))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (+ i 1)))
	((= i rows))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((m1i (vector-ref m1 i))
	    (row (make-vector cols 0)))
	(<B><FONT COLOR="#A020F0">do</FONT></B> ((j 0 (+ j 1)))
	    ((= j cols))
	  (<B><FONT COLOR="#A020F0">let</FONT></B> ((val 0))
	    (<B><FONT COLOR="#A020F0">do</FONT></B> ((k 0 (+ k 1)))
		((= k cols))
	      (<B><FONT COLOR="#A020F0">set!</FONT></B> val (+ val (* (vector-ref m1i k)
				  (vector-ref (vector-ref m2 k) j)))))
	    (vector-set! row j val)))
	(vector-set! m3 i row)))
    m3))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (length args) 2) (string-&gt;number (cadr args))) 1))
	(m1 (mkmatrix size size))
	(m2 (mkmatrix size size))
	(mm 0))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (1+ i)))
	((= i n) (<B><FONT COLOR="#A020F0">begin</FONT></B> 
		   (display (vector-ref (vector-ref mm 0) 0)) (display <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>)
		   (display (vector-ref (vector-ref mm 2) 3)) (display <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>)
		   (display (vector-ref (vector-ref mm 3) 2)) (display <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>)
		   (display (vector-ref (vector-ref mm 4) 4)) (newline)))
	(<B><FONT COLOR="#A020F0">set!</FONT></B> mm (mmult size size m1 m2)))))</pre></td></tr></table>
