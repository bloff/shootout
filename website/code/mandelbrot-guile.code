#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; The Great Computer Language Shootout
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;;
</span><span class="slc">;;; implemented by Greg Buchholz
</span>
<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">))))
    (</span>display <span class="str">&quot;P4&quot;</span><span class="sym">) (</span>newline<span class="sym">) (</span>display n<span class="sym">) (</span>display <span class="str">&quot; &quot;</span><span class="sym">) (</span>display n<span class="sym">)
(</span>newline<span class="sym">)
    (</span>printPBM <span class="num">0 0</span> n <span class="sym">(</span>points <span class="num">0 0</span> n<span class="sym">))))

(</span>define <span class="sym">(</span>points x y n<span class="sym">)
  (</span><span class="kwa">if</span> <span class="sym">(=</span> y n<span class="sym">)
</span>    <span class="str">'()
    (if (= x n)
        (points 0 (+ y 1) n)
        (cons (mandel (make-rectangular (- (* 2 (/ x n)) 1.5)
                                        (- (* 2 (/ y n)) 1.0)) 0.0+0.0i 50)
              (delay (points (+ x 1) y n))))))

(define (mandel c z iter)
    (if (= iter 0)
        1
        (let ((n (+ (* z z) c)))
             (if (&gt; (magnitude n) 2.0)
                  0
                  (mandel c n (- iter 1))))))

(define (printPBM acc i n stream)
  (cond ((null? stream) (display (acc-&gt;char acc i)))
        ((and (= (remainder i 8) 0) (not (= i 0)))
                 (begin (display (integer-&gt;char acc))
                        (printPBM (car stream) (+ 1 i) n (force (cdr stream)))))
        ((= i n) (begin (display (acc-&gt;char acc n))
                        (printPBM 0 0 n stream)))
        (else (printPBM (+ (* 2 acc) (car stream)) (+ 1 i) n (force (cdr stream))))))

(define (pow2 n) (if (&gt; n 0) (* 2 (pow2 (- n 1))) 1))

(define (acc-&gt;char acc x)
    (integer-&gt;char (* acc (pow2 (remainder x 8)))))</span>
