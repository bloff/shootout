<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   http://www.bagley.org/~doug/shootout/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release prodcons.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">,</span> std<span class="sym">.</span>thread<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    data <span class="sym">=</span> <span class="kwa">new</span> Data<span class="sym">;</span>

    Thread prod <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Thread</span><span class="sym">(&amp;</span>producer<span class="sym">,</span><span class="kwa">cast</span><span class="sym">(</span><span class="kwa">void</span><span class="sym">*)</span>n<span class="sym">);</span>
    Thread cons <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Thread</span><span class="sym">(&amp;</span>consumer<span class="sym">,</span><span class="kwa">cast</span><span class="sym">(</span><span class="kwa">void</span><span class="sym">*)</span>n<span class="sym">);</span>

    prod<span class="sym">.</span><span class="kwd">start</span><span class="sym">();</span>
    cons<span class="sym">.</span><span class="kwd">start</span><span class="sym">();</span>

    prod<span class="sym">.</span><span class="kwc">wait</span><span class="sym">();</span>
    cons<span class="sym">.</span><span class="kwc">wait</span><span class="sym">();</span>

    <span class="kwd">writefln</span><span class="sym">(</span>data<span class="sym">.</span>produced<span class="sym">,</span><span class="str">&quot; &quot;</span><span class="sym">,</span>data<span class="sym">.</span>consumed<span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">int</span> <span class="kwd">producer</span><span class="sym">(</span><span class="kwa">void</span> <span class="sym">*</span>arg<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> n <span class="sym">=</span> <span class="kwa">cast</span><span class="sym">(</span><span class="kwa">int</span><span class="sym">)</span>arg<span class="sym">;</span>

    <span class="kwa">while</span><span class="sym">(</span>i <span class="sym">&lt;=</span> n<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">synchronized</span><span class="sym">(</span>data<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(!</span>data<span class="sym">.</span>count<span class="sym">)</span>
            <span class="sym">{</span>
                data<span class="sym">.</span>value <span class="sym">=</span> i<span class="sym">;</span>
                data<span class="sym">.</span>count <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
                data<span class="sym">.</span>produced<span class="sym">++;</span>
                i<span class="sym">++;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        Thread<span class="sym">.</span><span class="kwd">yield</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">int</span> <span class="kwd">consumer</span><span class="sym">(</span><span class="kwa">void</span> <span class="sym">*</span>arg<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n <span class="sym">=</span> <span class="kwa">cast</span><span class="sym">(</span><span class="kwa">int</span><span class="sym">)</span>arg<span class="sym">;</span>

    <span class="kwa">while</span><span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">synchronized</span><span class="sym">(</span>data<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>data<span class="sym">.</span>count<span class="sym">)</span>
            <span class="sym">{</span>
                i <span class="sym">=</span> data<span class="sym">.</span>value<span class="sym">;</span>
                data<span class="sym">.</span>count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                data<span class="sym">.</span>consumed<span class="sym">++;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        Thread<span class="sym">.</span><span class="kwd">yield</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>

Data data<span class="sym">;</span>

<span class="kwa">class</span> Data
<span class="sym">{</span>
    <span class="kwa">int</span> count<span class="sym">,</span> value<span class="sym">,</span> consumed<span class="sym">,</span> produced<span class="sym">;</span>
<span class="sym">}</span>
