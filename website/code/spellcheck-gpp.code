<span class="line">    1 </span><span class="slc">// -*- mode: c++ -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// $Id: spellcheck-gpp.code,v 1.3 2004-11-13 07:43:24 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">// STL spell checker from Bill Lear
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="dir">#include &lt;iostream&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;utility&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;fstream&gt;
</span><span class="line">    9 </span><span class="dir"></span><span class="dir">#include &lt;ext/hash_map&gt;
</span><span class="line">   10 </span><span class="dir"></span><span class="dir">#include &lt;algorithm&gt;
</span><span class="line">   11 </span><span class="dir"></span><span class="dir">#include &lt;iomanip&gt;
</span><span class="line">   12 </span><span class="dir"></span>
<span class="line">   13 </span><span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym"></span><span class="dir">#define SGI_HASH_NAMESPACE __gnu_cxx
</span><span class="line">   16 </span><span class="dir"></span>
<span class="line">   17 </span><span class="kwa">namespace</span> sgi <span class="sym">{
</span><span class="line">   18 </span><span class="sym"></span>    <span class="kwa">using</span> SGI_HASH_NAMESPACE<span class="sym">::</span>hash<span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>    <span class="kwa">using</span> SGI_HASH_NAMESPACE<span class="sym">::</span>hash_map<span class="sym">;
</span><span class="line">   20 </span><span class="sym">}
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span><span class="kwc">typedef</span> std<span class="sym">::</span>pair<span class="sym">&lt;</span><span class="kwb">const char</span><span class="sym">*,</span> <span class="kwb">const char</span><span class="sym">*&gt;</span> span<span class="sym">;
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span><span class="kwa">namespace</span> SGI_HASH_NAMESPACE <span class="sym">{
</span><span class="line">   25 </span><span class="sym"></span>    <span class="kwc">template</span><span class="sym">&lt;&gt;</span> <span class="kwb">struct</span> hash<span class="sym">&lt;</span>span<span class="sym">&gt; {
</span><span class="line">   26 </span><span class="sym"></span>        <span class="kwc">inline</span> <span class="kwb">size_t</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">const</span> span<span class="sym">&amp;</span> s<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{
</span><span class="line">   27 </span><span class="sym"></span>            <span class="kwb">size_t</span> h <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   28 </span><span class="sym"></span>            <span class="kwb">const char</span><span class="sym">*</span> end <span class="sym">=</span> s<span class="sym">.</span>second<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">const char</span><span class="sym">*</span> begin <span class="sym">=</span> s<span class="sym">.</span>first<span class="sym">;</span> begin <span class="sym">!=</span> end<span class="sym">; ++</span>begin<span class="sym">) {
</span><span class="line">   30 </span><span class="sym"></span>                h <span class="sym">=</span> <span class="num">5</span> <span class="sym">*</span> h <span class="sym">+ *</span>begin<span class="sym">;
</span><span class="line">   31 </span><span class="sym">            }
</span><span class="line">   32 </span><span class="sym"></span>            <span class="kwa">return</span> h<span class="sym">;
</span><span class="line">   33 </span><span class="sym">        }
</span><span class="line">   34 </span><span class="sym">    };
</span><span class="line">   35 </span><span class="sym">}
</span><span class="line">   36 </span><span class="sym">
</span><span class="line">   37 </span><span class="sym"></span><span class="kwa">namespace</span> std <span class="sym">{
</span><span class="line">   38 </span><span class="sym"></span>    <span class="kwc">template</span><span class="sym">&lt;&gt;</span> <span class="kwb">struct</span> std<span class="sym">::</span>equal_to<span class="sym">&lt;</span>span<span class="sym">&gt; {
</span><span class="line">   39 </span><span class="sym"></span>        <span class="kwc">inline</span> <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">const</span> span<span class="sym">&amp;</span> s1<span class="sym">,</span> <span class="kwb">const</span> span<span class="sym">&amp;</span> s2<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{
</span><span class="line">   40 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="sym">(</span>s1<span class="sym">.</span>second <span class="sym">-</span> s1<span class="sym">.</span>first<span class="sym">) == (</span>s2<span class="sym">.</span>second <span class="sym">-</span> s2<span class="sym">.</span>first<span class="sym">) &amp;&amp;
</span><span class="line">   41 </span><span class="sym"></span>                std<span class="sym">::</span>equal<span class="sym">(</span>s1<span class="sym">.</span>first<span class="sym">,</span> s1<span class="sym">.</span>second<span class="sym">,</span> s2<span class="sym">.</span>first<span class="sym">);
</span><span class="line">   42 </span><span class="sym">        }
</span><span class="line">   43 </span><span class="sym">    };
</span><span class="line">   44 </span><span class="sym">}
</span><span class="line">   45 </span><span class="sym"></span><span class="kwc">class</span> spell_checker <span class="sym">{
</span><span class="line">   46 </span><span class="sym"></span><span class="kwc">public</span><span class="sym">:
</span><span class="line">   47 </span><span class="sym"></span>    spell_checker<span class="sym">() {
</span><span class="line">   48 </span><span class="sym"></span>        std<span class="sym">::</span>ifstream in<span class="sym">(</span><span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">);
</span><span class="line">   49 </span><span class="sym"></span>        <span class="kwb">char</span> line<span class="sym">[</span><span class="num">32</span><span class="sym">];
</span><span class="line">   50 </span><span class="sym"></span>        <span class="kwa">while</span> <span class="sym">(</span>in<span class="sym">.</span>getline<span class="sym">(</span>line<span class="sym">,</span> <span class="num">32</span><span class="sym">)) {
</span><span class="line">   51 </span><span class="sym"></span>            <span class="kwb">const char</span><span class="sym">*</span> begin <span class="sym">=</span> line<span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>            <span class="kwb">const char</span><span class="sym">*</span> end <span class="sym">=</span> line <span class="sym">+</span> in<span class="sym">.</span>gcount<span class="sym">() -</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   53 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>dict<span class="sym">.</span>end<span class="sym">() ==</span> dict<span class="sym">.</span>find<span class="sym">(</span>span<span class="sym">(</span>begin<span class="sym">,</span> end<span class="sym">))) {
</span><span class="line">   54 </span><span class="sym"></span>                <span class="kwb">const size_t</span> len <span class="sym">=</span> end <span class="sym">-</span> begin<span class="sym">;
</span><span class="line">   55 </span><span class="sym"></span>                <span class="kwb">char</span><span class="sym">*</span> word <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>len<span class="sym">];
</span><span class="line">   56 </span><span class="sym"></span>                copy<span class="sym">(</span>begin<span class="sym">,</span> end<span class="sym">,</span> word<span class="sym">);
</span><span class="line">   57 </span><span class="sym">                ++</span>dict<span class="sym">[</span>span<span class="sym">(</span>word<span class="sym">,</span> word <span class="sym">+</span> len<span class="sym">)];
</span><span class="line">   58 </span><span class="sym">            }
</span><span class="line">   59 </span><span class="sym">         }
</span><span class="line">   60 </span><span class="sym">    }
</span><span class="line">   61 </span><span class="sym">
</span><span class="line">   62 </span><span class="sym"></span>    <span class="kwb">void</span> process<span class="sym">(</span>std<span class="sym">::</span>istream<span class="sym">&amp;</span> in<span class="sym">) {
</span><span class="line">   63 </span><span class="sym"></span>        <span class="kwb">char</span> line<span class="sym">[</span><span class="num">32</span><span class="sym">];
</span><span class="line">   64 </span><span class="sym"></span>        <span class="kwa">while</span> <span class="sym">(</span>in<span class="sym">.</span>getline<span class="sym">(</span>line<span class="sym">,</span> <span class="num">32</span><span class="sym">)) {
</span><span class="line">   65 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>dict<span class="sym">.</span>end<span class="sym">() ==</span> dict<span class="sym">.</span>find<span class="sym">(</span>span<span class="sym">(</span>line<span class="sym">,</span> line <span class="sym">+</span> in<span class="sym">.</span>gcount<span class="sym">() -</span> <span class="num">1</span><span class="sym">))) {
</span><span class="line">   66 </span><span class="sym"></span>                cout <span class="sym">&lt;&lt;</span> line <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;
</span><span class="line">   67 </span><span class="sym">            }
</span><span class="line">   68 </span><span class="sym">        }
</span><span class="line">   69 </span><span class="sym">    }
</span><span class="line">   70 </span><span class="sym">
</span><span class="line">   71 </span><span class="sym"></span><span class="kwc">private</span><span class="sym">:
</span><span class="line">   72 </span><span class="sym"></span>    __gnu_cxx<span class="sym">::</span>hash_map<span class="sym">&lt;</span>span<span class="sym">,</span> <span class="kwb">int</span><span class="sym">&gt;</span> dict<span class="sym">;
</span><span class="line">   73 </span><span class="sym">};
</span><span class="line">   74 </span><span class="sym">
</span><span class="line">   75 </span><span class="sym"></span><span class="kwb">int</span> main<span class="sym">() {
</span><span class="line">   76 </span><span class="sym"></span>    spell_checker spell<span class="sym">;
</span><span class="line">   77 </span><span class="sym"></span>    <span class="kwb">char</span> buff<span class="sym">[</span><span class="num">4096</span><span class="sym">];
</span><span class="line">   78 </span><span class="sym"></span>    cin<span class="sym">.</span>rdbuf<span class="sym">()-&gt;</span>pubsetbuf<span class="sym">(</span>buff<span class="sym">,</span> <span class="num">4096</span><span class="sym">);</span> <span class="slc">// enable buffering
</span><span class="line">   79 </span><span class="slc"></span>    spell<span class="sym">.</span>process<span class="sym">(</span>cin<span class="sym">);
</span><span class="line">   80 </span><span class="sym">}</span>
