<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: spellcheck-gpp.code,v 1.1 2004-11-08 14:59:29 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">// STL spell checker from Bill Lear
</FONT></I>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iostream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;utility&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;fstream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;ext/hash_map&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;algorithm&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iomanip&gt;</FONT></B>

using namespace std;

#<B><FONT COLOR="#5F9EA0">define</FONT></B> <FONT COLOR="#B8860B">SGI_HASH_NAMESPACE</FONT> __gnu_cxx

namespace sgi {
    using SGI_HASH_NAMESPACE::hash;
    using SGI_HASH_NAMESPACE::hash_map;
}

<B><FONT COLOR="#228B22">typedef</FONT></B> std::pair&lt;<B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>*, <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>*&gt; span;

namespace SGI_HASH_NAMESPACE {
    <B><FONT COLOR="#228B22">template</FONT></B>&lt;&gt; <B><FONT COLOR="#228B22">struct</FONT></B> hash&lt;span&gt; {
        <B><FONT COLOR="#228B22">inline</FONT></B> size_t <B><FONT COLOR="#A020F0">operator</FONT></B>()(<B><FONT COLOR="#228B22">const</FONT></B> span&amp; s) <B><FONT COLOR="#228B22">const</FONT></B> {
            size_t h = 0;
            <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* end = s.second;
            <B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* begin = s.first; begin != end; ++begin) {
                h = 5 * h + *begin;
            }
            <B><FONT COLOR="#A020F0">return</FONT></B> h;
        }
    };
}

namespace std {
    <B><FONT COLOR="#228B22">template</FONT></B>&lt;&gt; <B><FONT COLOR="#228B22">struct</FONT></B> std::equal_to&lt;span&gt; {
        <B><FONT COLOR="#228B22">inline</FONT></B> <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#A020F0">operator</FONT></B>()(<B><FONT COLOR="#228B22">const</FONT></B> span&amp; s1, <B><FONT COLOR="#228B22">const</FONT></B> span&amp; s2) <B><FONT COLOR="#228B22">const</FONT></B> {
            <B><FONT COLOR="#A020F0">return</FONT></B> (s1.second - s1.first) == (s2.second - s2.first) &amp;&amp;
                <B><FONT COLOR="#5F9EA0">std</FONT></B>::equal(s1.first, s1.second, s2.first);
        }
    };
}
<B><FONT COLOR="#228B22">class</FONT></B> spell_checker {
<B><FONT COLOR="#228B22">public</FONT></B>:
    spell_checker() {
        <B><FONT COLOR="#5F9EA0">std</FONT></B>::ifstream in(<B><FONT COLOR="#BC8F8F">&quot;Usr.Dict.Words&quot;</FONT></B>);
        <B><FONT COLOR="#228B22">char</FONT></B> line[32];
        <B><FONT COLOR="#A020F0">while</FONT></B> (in.getline(line, 32)) {
            <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* begin = line;
            <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* end = line + in.gcount() - 1;
            <B><FONT COLOR="#A020F0">if</FONT></B> (dict.end() == dict.find(span(begin, end))) {
                <B><FONT COLOR="#228B22">const</FONT></B> size_t len = end - begin;
                <B><FONT COLOR="#228B22">char</FONT></B>* word = <B><FONT COLOR="#A020F0">new</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>[len];
                copy(begin, end, word);
                ++dict[span(word, word + len)];
            }
         }
    }

    <B><FONT COLOR="#228B22">void</FONT></B> process(std::istream&amp; in) {
        <B><FONT COLOR="#228B22">char</FONT></B> line[32];
        <B><FONT COLOR="#A020F0">while</FONT></B> (in.getline(line, 32)) {
            <B><FONT COLOR="#A020F0">if</FONT></B> (dict.end() == dict.find(span(line, line + in.gcount() - 1))) {
                cout &lt;&lt; line &lt;&lt; <B><FONT COLOR="#BC8F8F">'\n'</FONT></B>;
            }
        }
    }

<B><FONT COLOR="#228B22">private</FONT></B>:
    <B><FONT COLOR="#5F9EA0">__gnu_cxx</FONT></B>::hash_map&lt;span, <B><FONT COLOR="#228B22">int</FONT></B>&gt; dict;
};

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>() {
    spell_checker spell;
    <B><FONT COLOR="#228B22">char</FONT></B> buff[4096];
    cin.rdbuf()-&gt;pubsetbuf(buff, 4096); <I><FONT COLOR="#B22222">// enable buffering
</FONT></I>    spell.process(cin);
}</pre></td></tr></table>
