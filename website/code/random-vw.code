<span class="str">&quot;  The Computer Language Shootout</span>
<span class="str">   http://shootout.alioth.debian.org/</span>
<span class="str">   contributed by Isaac Gouy&quot;</span><span class="sym">!</span>

<span class="sym">!</span>Shootout.Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>

random<span class="sym">:</span> argvString
   <span class="sym">|</span> n random answer <span class="sym">|</span>
   n <span class="sym">:=</span> CEnvironment argv first asNumber.
   random <span class="sym">:=</span> RandomNumber to<span class="sym">:</span> <span class="num">100</span>.
   n timesRepeat<span class="sym">: [</span>answer <span class="sym">:=</span> random <span class="kwa">next</span><span class="sym">]</span>.
   ^<span class="sym">(</span>answer asStringWith<span class="sym">:</span> <span class="num">9</span><span class="sym">)</span> withNl <span class="sym">! !</span>


Smalltalk.Shootout defineClass<span class="sym">:</span> <span class="slc">#RandomNumber</span>
	superclass<span class="sym">:</span> <span class="slc">#{Core.Object}</span>
	indexedType<span class="sym">:</span> <span class="slc">#none</span>
	private<span class="sym">:</span> false
	instanceVariableNames<span class="sym">:</span> <span class="str">'seed scale '</span>
	classInstanceVariableNames<span class="sym">:</span> <span class="str">''</span>
	imports<span class="sym">:</span> <span class="str">''</span>
	category<span class="sym">:</span> <span class="str">'Shootout'</span><span class="sym">!</span>

Shootout.RandomNumber defineSharedVariable<span class="sym">:</span> <span class="slc">#Modulus</span>
	private<span class="sym">:</span> false
	constant<span class="sym">:</span> false
	category<span class="sym">:</span> <span class="str">'computer language shootout'</span>
	initializer<span class="sym">:</span> <span class="str">'139968'</span><span class="sym">!</span>

<span class="slc">#{Shootout.RandomNumber.Modulus} initialize!</span>

Shootout.RandomNumber defineSharedVariable<span class="sym">:</span> <span class="slc">#FModulus</span>
	private<span class="sym">:</span> false
	constant<span class="sym">:</span> false
	category<span class="sym">:</span> <span class="str">'computer language shootout'</span>
	initializer<span class="sym">:</span> <span class="str">'139968.0d'</span><span class="sym">!</span>

<span class="slc">#{Shootout.RandomNumber.FModulus} initialize!</span>

Shootout.RandomNumber defineSharedVariable<span class="sym">:</span> <span class="slc">#Multiplier</span>
	private<span class="sym">:</span> false
	constant<span class="sym">:</span> false
	category<span class="sym">:</span> <span class="str">'computer language shootout'</span>
	initializer<span class="sym">:</span> <span class="str">'3877'</span><span class="sym">!</span>

<span class="slc">#{Shootout.RandomNumber.Multiplier} initialize!</span>

Shootout.RandomNumber defineSharedVariable<span class="sym">:</span> <span class="slc">#Increment</span>
	private<span class="sym">:</span> false
	constant<span class="sym">:</span> false
	category<span class="sym">:</span> <span class="str">'computer language shootout'</span>
	initializer<span class="sym">:</span> <span class="str">'29573'</span><span class="sym">!</span>

<span class="slc">#{Shootout.RandomNumber.Increment} initialize!</span>


<span class="sym">!</span>Shootout.RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   ^self basicNew to<span class="sym">:</span> anInteger <span class="sym">! !</span>


<span class="sym">!</span>Shootout.RandomNumber methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

<span class="kwa">next</span>
	seed <span class="sym">:= (</span>seed <span class="sym">*</span> Multiplier <span class="sym">+</span> Increment<span class="sym">)</span> <span class="esc">\\</span> Modulus.
	^<span class="sym">(</span>seed <span class="sym">*</span> scale<span class="sym">)</span> asDouble <span class="sym">/</span> FModulus <span class="sym">! !</span>

<span class="sym">!</span>Shootout.RandomNumber methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   seed <span class="sym">:=</span> <span class="num">42</span>.
   scale <span class="sym">:=</span> anInteger <span class="sym">! !</span>
