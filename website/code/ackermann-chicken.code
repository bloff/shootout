<span class="slc">;;;; -Ob
</span>
<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">))

(</span>define <span class="sym">(</span>ack m n<span class="sym">)
  (</span><span class="kwa">cond</span> <span class="sym">((</span>zero? m<span class="sym">) (+</span> n <span class="num">1</span><span class="sym">))
        ((</span>zero? n<span class="sym">) (</span>ack <span class="sym">(-</span> m <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))
        (</span>else      <span class="sym">(</span>ack <span class="sym">(-</span> m <span class="num">1</span><span class="sym">) (</span>ack m <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))))))

(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? args<span class="sym">)
</span>               <span class="num">1
</span>               <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">)) ) ) )
    (</span><span class="kwa">print</span> <span class="str">&quot;Ack(3,&quot;</span> n <span class="str">&quot;): &quot;</span> <span class="sym">(</span>ack <span class="num">3</span> n<span class="sym">))))

(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
