<span class="com">(* message.ml</span>
<span class="com"></span>
<span class="com">   The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Troestler Christophe</span>
<span class="com">   Based on Scheme Chicken implementation</span>
<span class="com">*)</span>

<span class="com">(* Channel to communicate safely between threads (no buffering). *)</span>
<span class="kwa">type</span> channel <span class="sym">= {</span> write<span class="sym">:</span> Mutex.t<span class="sym">;</span> <span class="kwa">mutable</span> v<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> read<span class="sym">:</span> Mutex.t <span class="sym">}</span>

<span class="kwa">let</span> make <span class="sym">() =</span>
  <span class="kwa">let</span> r <span class="sym">=</span> Mutex.create<span class="sym">()</span> <span class="kwa">in</span> Mutex.lock r<span class="sym">; {</span> write<span class="sym">=</span>Mutex.create<span class="sym">();</span> v<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> read<span class="sym">=</span>r <span class="sym">}</span>

<span class="kwa">let</span> read ch <span class="sym">=</span> Mutex.lock ch.read<span class="sym">;</span> <span class="kwa">let</span> v <span class="sym">=</span> ch.v <span class="kwa">in</span> Mutex.unlock ch.write<span class="sym">;</span> v

<span class="kwa">let</span> write ch v <span class="sym">=</span> Mutex.lock ch.write<span class="sym">;</span> ch.v <span class="sym">&lt;-</span> v<span class="sym">;</span> Mutex.unlock ch.read

<span class="com">(* Looping utility *)</span>
<span class="kwa">let rec</span> repeat n f x <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">&lt;=</span> <span class="num">0</span> <span class="kwa">then</span> x <span class="kwa">else</span> repeat <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> f <span class="sym">(</span>f x<span class="sym">)</span>


<span class="kwa">let</span> make_node out_ch <span class="sym">=</span>
  <span class="kwa">let</span> in_ch <span class="sym">=</span> make<span class="sym">()</span> <span class="kwa">in</span>
  <span class="kwa">let</span> node <span class="sym">() =</span> <span class="kwa">while true do</span> write out_ch <span class="sym">(</span><span class="num">1</span> <span class="sym">+</span> read in_ch<span class="sym">)</span> <span class="kwa">done in</span>
  ignore<span class="sym">(</span>Thread.create node <span class="sym">());</span> in_ch

<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">10</span> <span class="kwa">in</span>
  <span class="kwa">let</span> e <span class="sym">=</span> make<span class="sym">()</span> <span class="kwa">in let</span> b <span class="sym">=</span> repeat <span class="num">500</span> <span class="com">(* 380 ok *)</span> make_node e <span class="kwa">in</span>
  Printf.printf <span class="str">&quot;%i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>repeat n <span class="sym">(</span><span class="kwa">fun</span> i <span class="sym">-&gt;</span> write b <span class="num">0</span><span class="sym">;</span> i <span class="sym">+</span> read e<span class="sym">)</span> <span class="num">0</span><span class="sym">)</span>
