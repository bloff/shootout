<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: matrix-gcl.code,v 1.9 2005-11-13 04:35:27 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; from Jochen Schmidt (jsc&#64;dataheaven.de, http://www.dataheaven.de)</span>
<span class="slc">;;; Multi-lisp modifications by Brent Fulgham</span>

<span class="sym">(</span>declaim
  <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)</span> #<span class="sym">-</span>gcl <span class="sym">(</span>debug <span class="num">0</span><span class="sym">)</span>
            <span class="sym">(</span>safety <span class="num">0</span><span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> matmul <span class="sym">(</span>a b c n m k<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">))</span>
           <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">) (*))</span> a b c<span class="sym">)</span>
           <span class="sym">(</span>fixnum n m k<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>sum <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>i1 <span class="sym">(-</span> m<span class="sym">))</span>
        <span class="sym">(</span>k2 <span class="num">0</span><span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">)</span> sum<span class="sym">) (</span><span class="kwa">type</span> fixnum i1 k2<span class="sym">))</span>
    <span class="sym">(</span>dotimes <span class="sym">(</span>i n c<span class="sym">)</span>
      <span class="sym">(</span>declare <span class="sym">(</span>fixnum i<span class="sym">))</span>
      <span class="sym">(</span>setf i1 <span class="sym">(+</span> i1 m<span class="sym">))</span> <span class="slc">;; i1=i*m</span>
      <span class="sym">(</span>dotimes <span class="sym">(</span>j k<span class="sym">)</span>
        <span class="sym">(</span>declare <span class="sym">(</span>fixnum j<span class="sym">))</span>
        <span class="sym">(</span>setf sum <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>setf k2 <span class="sym">(-</span> k<span class="sym">))</span>
        <span class="sym">(</span>dotimes <span class="sym">(</span>l m<span class="sym">)</span>
          <span class="sym">(</span>declare <span class="sym">(</span>fixnum l<span class="sym">))</span>
          <span class="sym">(</span>setf k2 <span class="sym">(+</span> k2 k<span class="sym">))</span> <span class="slc">;; k2= l*k</span>
          <span class="sym">(</span>setf sum <span class="sym">(</span>the <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">) (+ (</span>the <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">)</span> sum<span class="sym">)</span>
                                               <span class="sym">(</span>the <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">) (* (</span>aref a <span class="sym">(+</span> i1 l<span class="sym">))</span>
                                                                          <span class="sym">(</span>aref b <span class="sym">(+</span> k2 j<span class="sym">))))))))</span>
        <span class="sym">(</span>setf <span class="sym">(</span>aref c <span class="sym">(+</span> i1 j<span class="sym">))</span> sum<span class="sym">)))))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
                                         #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
					 #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">))))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">)</span>
	     <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))</span>
    <span class="sym">(</span>let<span class="sym">* ((</span>m1 <span class="sym">(</span>make<span class="sym">-</span>matrix <span class="num">30 30</span><span class="sym">))</span>
	   <span class="sym">(</span>m2 <span class="sym">(</span>make<span class="sym">-</span>matrix <span class="num">30 30</span><span class="sym">))</span>
	   <span class="sym">(</span>m3 <span class="sym">(</span>make<span class="sym">-</span>matrix <span class="num">30 30</span><span class="sym">))</span>
	   <span class="sym">(</span>mm <span class="sym">(</span>make<span class="sym">-</span>array <span class="str">'(30 30) :element-type '</span><span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">) :</span>displaced<span class="sym">-</span>to m3<span class="sym">)))</span>
      <span class="sym">(</span>loop <span class="kwa">repeat</span> n do <span class="sym">(</span>matmul m1 m2 m3 <span class="num">30 30 30</span><span class="sym">))</span>
      <span class="sym">(</span>format t <span class="str">&quot;~A ~A ~A ~A~%&quot;</span>
	      <span class="sym">(</span>aref mm <span class="num">0 0</span><span class="sym">) (</span>aref mm <span class="num">2 3</span><span class="sym">) (</span>aref mm <span class="num">3 2</span><span class="sym">) (</span>aref mm <span class="num">4 4</span><span class="sym">)))))</span>

<span class="sym">(</span><span class="kwa">defun</span> make<span class="sym">-</span>matrix <span class="sym">(</span>rows cols<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">)</span> rows cols<span class="sym">)</span>
           <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))</span><span class="slc">; (hcl:fixnum-safety 0)))</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>space <span class="sym">(*</span> rows cols<span class="sym">))</span>
         <span class="sym">(</span>matrix <span class="sym">(</span>make<span class="sym">-</span>array space
                             <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'(unsigned-byte 32))))</span>
<span class="str">    (declare (type (simple-array (unsigned-byte 32) (*)) matrix)</span>
<span class="str">             (fixnum space))</span>
<span class="str">    (loop :for i :of-type fixnum :from 0 :below space</span>
<span class="str">          :do (setf (aref matrix i) (1+ i)))</span>
<span class="str">    matrix))</span>
