<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">//  http://shootout.alioth.debian.org</span>
<span class="slc">//</span>
<span class="slc">//  Contributed by Ian Osgood</span>

<span class="kwa">function</span> <span class="kwd">padded</span><span class="sym">(</span>n<span class="sym">,</span><span class="kwc">width</span><span class="sym">) {</span>
  <span class="kwa">var</span> s <span class="sym">=</span> n<span class="sym">.</span><span class="kwc">toString</span><span class="sym">();</span>
  <span class="kwa">while</span> <span class="sym">(</span>s<span class="sym">.</span><span class="kwc">length</span> <span class="sym">&lt;</span> <span class="kwc">width</span><span class="sym">)</span> s <span class="sym">=</span> <span class="str">' '</span> <span class="sym">+</span> s<span class="sym">;</span>
  <span class="kwa">return</span> s<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">primes</span><span class="sym">(</span>e<span class="sym">) {</span>
  <span class="kwa">var</span> i<span class="sym">,</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n <span class="sym">=</span> <span class="num">10000</span> <span class="sym">&lt;&lt;</span> e<span class="sym">;</span>
  <span class="kwa">var</span> isPrime <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">(</span>n<span class="sym">);</span>

  <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> isPrime<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">true</span><span class="sym">;</span>

  <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="kwa">if</span> <span class="sym">(</span>isPrime<span class="sym">[</span>i<span class="sym">]) {</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> j<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">+=</span>i<span class="sym">)</span> isPrime<span class="sym">[</span>j<span class="sym">] =</span> <span class="kwa">false</span><span class="sym">;</span>
      count<span class="sym">++;</span>
    <span class="sym">}</span>

  <span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;Primes up to&quot;</span> <span class="sym">+</span> <span class="kwd">padded</span><span class="sym">(</span>n<span class="sym">,</span><span class="num">9</span><span class="sym">) +</span> <span class="kwd">padded</span><span class="sym">(</span>count<span class="sym">,</span><span class="num">9</span><span class="sym">));</span>
<span class="sym">}</span>

<span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>

<span class="kwd">primes</span><span class="sym">(</span>n<span class="sym">)</span>
<span class="kwd">primes</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
<span class="kwd">primes</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)</span>
