<span class="line">    1 </span><span class="slc">;;; -*- mode: lisp -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: hash2-poplisp.code,v 1.4 2004-11-13 07:41:39 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">;;; from Paul Foley
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))
</span><span class="line">    7 </span><span class="sym">(</span><span class="kwa">defun command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>argument <span class="sym">()
</span><span class="line">    8 </span><span class="sym">  (</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> pop11<span class="sym">::</span>poparglist<span class="sym">)</span> <span class="str">&quot;1&quot;</span><span class="sym">)))
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym">(</span>defconstant <span class="sym">+</span>digit<span class="sym">+</span> <span class="str">&quot;0123456789&quot;</span><span class="sym">)
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym">(</span>defconstant <span class="sym">+</span>digits<span class="sym">-</span>needed<span class="sym">+
</span><span class="line">   13 </span><span class="sym"></span>  <span class="str">'(10 100 1000 10000 100000 10000000 100000000 536870911))
</span><span class="line">   14 </span><span class="str">
</span><span class="line">   15 </span><span class="str">(defun fixnum-to-foo-string (n)
</span><span class="line">   16 </span><span class="str">  (declare (fixnum n))
</span><span class="line">   17 </span><span class="str">  (let* ((size (+ 4 (position-if (lambda (x) (&gt; (the fixnum x) n))
</span><span class="line">   18 </span><span class="str">                                 +digits-needed+)))
</span><span class="line">   19 </span><span class="str">         (result (make-string (1+ size))))
</span><span class="line">   20 </span><span class="str">    (replace result &quot;foo_&quot;)
</span><span class="line">   21 </span><span class="str">    (loop for i fixnum from size downto 4 with q fixnum = n and r fixnum = 0
</span><span class="line">   22 </span><span class="str">      do (multiple-value-setq (q r) (floor q 10))
</span><span class="line">   23 </span><span class="str">         (setf (schar result i) (aref +digit+ r)))
</span><span class="line">   24 </span><span class="str">    result))
</span><span class="line">   25 </span><span class="str">
</span><span class="line">   26 </span><span class="str">(defun main (&amp;optional (n (command-line-argument)))
</span><span class="line">   27 </span><span class="str">  (let ((hash1 (make-hash-table :test '</span><span class="kwa">equal</span> <span class="sym">:</span>size n<span class="sym">))
</span><span class="line">   28 </span><span class="sym">        (</span>hash2 <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>test <span class="str">'equal :size n)))
</span><span class="line">   29 </span><span class="str">    (macrolet ((hash1 (i) `(gethash (fixnum-to-foo-string ,i) hash1))
</span><span class="line">   30 </span><span class="str">               (hash2 (i) `(gethash (fixnum-to-foo-string ,i) hash2)))
</span><span class="line">   31 </span><span class="str">      (loop for i fixnum below 10000 do (setf (hash1 i) i))
</span><span class="line">   32 </span><span class="str">      (loop for i fixnum below n do
</span><span class="line">   33 </span><span class="str">        (maphash (lambda (k v)
</span><span class="line">   34 </span><span class="str">                   (declare (fixnum v))
</span><span class="line">   35 </span><span class="str">                   (incf (the fixnum (gethash k hash2 0)) v))
</span><span class="line">   36 </span><span class="str">                 hash1))
</span><span class="line">   37 </span><span class="str">      (format t &quot;~D ~D ~D ~D~%&quot; (hash1 1) (hash1 9999) (hash2 1) (hash2 9999)))))
</span><span class="line">   38 </span><span class="str">
</span><span class="line">   39 </span><span class="str">(main)</span>
