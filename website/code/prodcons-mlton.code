<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: prodcons-mlton.code,v 1.16 2007-12-20 06:02:14 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * from Stephen Weeks</span>
<span class="com"> *)</span>
<span class="com">(* Translated from prodcons.ocaml. *)</span>

<span class="kwa">fun</span> print s <span class="sym">= ()</span> <span class="com">(* Primitive.Stdio.print s *)</span>

<span class="kwa">structure</span> Queue<span class="sym">:</span>
   <span class="kwa">sig</span>
      <span class="kwa">type</span> 'a t

      <span class="kwa">val</span> new<span class="sym">:</span> unit <span class="sym">-&gt;</span> 'a t
      <span class="kwa">val</span> enque<span class="sym">:</span> 'a t <span class="sym">*</span> 'a <span class="sym">-&gt;</span> unit
      <span class="kwa">val</span> deque<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a option
   <span class="kwa">end</span> <span class="sym">=</span>
   <span class="kwa">struct</span>
      <span class="kwa">datatype</span> 'a t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>front<span class="sym">:</span> 'a list ref<span class="sym">,</span> back<span class="sym">:</span> 'a list ref<span class="sym">}</span>

      <span class="kwa">fun</span> new <span class="sym">() =</span> T <span class="sym">{</span>front <span class="sym">=</span> ref <span class="sym">[],</span> back <span class="sym">=</span> ref <span class="sym">[]}</span>

      <span class="kwa">fun</span> enque <span class="sym">(</span>T <span class="sym">{</span>back<span class="sym">,</span> ...<span class="sym">},</span> x<span class="sym">) =</span> back <span class="sym">:=</span> x <span class="sym">:: !</span>back

      <span class="kwa">fun</span> deque <span class="sym">(</span>T <span class="sym">{</span>front<span class="sym">,</span> back<span class="sym">}) =</span>
	 <span class="kwa">case</span> <span class="sym">!</span>front <span class="kwa">of</span>
	    <span class="sym">[] =&gt; (</span><span class="kwa">case</span> <span class="sym">!</span>back <span class="kwa">of</span>
		      <span class="sym">[] =&gt;</span> NONE
		    <span class="sym">|</span> l <span class="sym">=&gt;</span> <span class="kwa">let val</span> l <span class="sym">=</span> rev l
			   <span class="kwa">in case</span> l <span class="kwa">of</span>
			      <span class="sym">[] =&gt;</span> <span class="kwa">raise</span> Fail <span class="str">&quot;deque&quot;</span>
			    <span class="sym">|</span> x <span class="sym">::</span> l <span class="sym">=&gt; (</span>back <span class="sym">:= [];</span> front <span class="sym">:=</span> l<span class="sym">;</span> SOME x<span class="sym">)</span>
			   <span class="kwa">end</span><span class="sym">)</span>
	  <span class="sym">|</span> x <span class="sym">::</span> l <span class="sym">=&gt; (</span>front <span class="sym">:=</span> l<span class="sym">;</span> SOME x<span class="sym">)</span>
   <span class="kwa">end</span>

<span class="kwa">structure</span> Thread<span class="sym">:</span>
   <span class="kwa">sig</span>
      <span class="kwa">val</span> exit<span class="sym">:</span> unit <span class="sym">-&gt;</span> 'a
      <span class="kwa">val</span> run<span class="sym">:</span> unit <span class="sym">-&gt;</span> unit
      <span class="kwa">val</span> spawn<span class="sym">: (</span>unit <span class="sym">-&gt;</span> unit<span class="sym">) -&gt;</span> unit
      <span class="kwa">val</span> yield<span class="sym">:</span> unit <span class="sym">-&gt;</span> unit
      <span class="kwa">structure</span> Mutex<span class="sym">:</span>
	 <span class="kwa">sig</span>
	    <span class="kwa">type</span> t

	    <span class="kwa">val</span> new<span class="sym">:</span> unit <span class="sym">-&gt;</span> t
	    <span class="kwa">val</span> lock<span class="sym">:</span> t <span class="sym">*</span> <span class="kwb">string</span> <span class="sym">-&gt;</span> unit
	    <span class="kwa">val</span> unlock<span class="sym">:</span> t <span class="sym">-&gt;</span> unit
	 <span class="kwa">end</span>
      <span class="kwa">structure</span> Condition<span class="sym">:</span>
      	 <span class="kwa">sig</span>
	    <span class="kwa">type</span> t

	    <span class="kwa">val</span> new<span class="sym">:</span> unit <span class="sym">-&gt;</span> t
	    <span class="kwa">val</span> signal<span class="sym">:</span> t <span class="sym">-&gt;</span> unit
	    <span class="kwa">val</span> wait<span class="sym">:</span> t <span class="sym">*</span> Mutex.t <span class="sym">-&gt;</span> unit
	 <span class="kwa">end</span>
   <span class="kwa">end</span> <span class="sym">=</span>
   <span class="kwa">struct</span>
      <span class="kwa">open</span> MLton.Itimer
      <span class="kwa">open</span> MLton.Signal
      <span class="kwa">open</span> MLton.Thread

      <span class="kwa">structure</span> Thread <span class="sym">=</span> MLton.Thread

      <span class="kwa">val</span> topLevel<span class="sym">:</span> Thread.Runnable.t option ref <span class="sym">=</span> ref NONE

      <span class="kwa">local</span>
	 <span class="kwa">val</span> threads<span class="sym">:</span> Thread.Runnable.t Queue.t <span class="sym">=</span> Queue.new <span class="sym">()</span>
      <span class="kwa">in</span>
	 <span class="kwa">fun</span> ready <span class="sym">(</span>t<span class="sym">):</span> unit <span class="sym">=</span> Queue.enque <span class="sym">(</span>threads<span class="sym">,</span> t<span class="sym">)</span>
	 <span class="kwa">fun</span> next <span class="sym">() =</span>
	    <span class="kwa">case</span> Queue.deque threads <span class="kwa">of</span>
	       NONE <span class="sym">=&gt; (</span>print <span class="str">&quot;switching to toplevel</span><span class="esc">\n</span><span class="str">&quot;</span>
			<span class="sym">;</span> valOf <span class="sym">(!</span>topLevel<span class="sym">))</span>
	     <span class="sym">|</span> SOME t <span class="sym">=&gt;</span> t
      <span class="kwa">end</span>

      <span class="kwa">fun</span> 'a exit <span class="sym">():</span> 'a <span class="sym">=</span> switch <span class="sym">(</span><span class="kwa">fn</span> _ <span class="sym">=&gt;</span> next <span class="sym">())</span>

      <span class="kwa">fun</span> new <span class="sym">(</span>f<span class="sym">:</span> unit <span class="sym">-&gt;</span> unit<span class="sym">):</span> Thread.Runnable.t <span class="sym">=</span>
	 Thread.prepare <span class="sym">(</span>Thread.new <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt; ((</span>f <span class="sym">()</span> <span class="kwa">handle</span> _ <span class="sym">=&gt;</span> exit <span class="sym">())</span>
					       <span class="sym">;</span> exit <span class="sym">())),</span>
			 <span class="sym">())</span>

      <span class="kwa">fun</span> schedule <span class="sym">(</span>t<span class="sym">:</span> Thread.Runnable.t<span class="sym">):</span> Thread.Runnable.t <span class="sym">=</span>
	 <span class="sym">(</span>print <span class="str">&quot;scheduling</span><span class="esc">\n</span><span class="str">&quot;</span>
	  <span class="sym">;</span> ready t
	  <span class="sym">;</span> next <span class="sym">())</span>

      <span class="kwa">fun</span> yield <span class="sym">():</span> unit <span class="sym">=</span>
	 switch <span class="sym">(</span><span class="kwa">fn</span> t <span class="sym">=&gt;</span> schedule <span class="sym">(</span>prepare <span class="sym">(</span>t<span class="sym">, ())))</span>

      <span class="kwa">val</span> spawn <span class="sym">=</span> ready <span class="kwa">o</span> new

      <span class="kwa">fun</span> setItimer t <span class="sym">=</span>
	 MLton.Itimer.set <span class="sym">(</span>MLton.Itimer.<span class="kwa">Real</span><span class="sym">,</span>
		     <span class="sym">{</span>value <span class="sym">=</span> t<span class="sym">,</span>
		      interval <span class="sym">=</span> t<span class="sym">})</span>

      <span class="kwa">fun</span> run <span class="sym">():</span> unit <span class="sym">=</span>
         <span class="kwa">let</span>
	    <span class="kwa">val</span> which <span class="sym">=</span> MLton.Itimer.<span class="kwa">Real</span><span class="sym">;</span>
	    <span class="kwa">val</span> signal <span class="sym">=</span> MLton.Itimer.signal which<span class="sym">;</span>
	 <span class="kwa">in</span>
	 <span class="sym">(</span>switch <span class="sym">(</span><span class="kwa">fn</span> t <span class="sym">=&gt;</span>
		  <span class="sym">(</span>topLevel <span class="sym">:=</span> SOME <span class="sym">(</span>prepare <span class="sym">(</span>t<span class="sym">, ()))</span>
		   <span class="sym">;</span> new <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt;</span>
			  <span class="sym">(</span>MLton.Signal.setHandler
			   <span class="sym">(</span>signal<span class="sym">,</span> Handler.handler schedule<span class="sym">)</span>
			   <span class="sym">;</span> setItimer <span class="sym">(</span>Time.fromMilliseconds <span class="num">20</span><span class="sym">)))))</span>
	  <span class="sym">;</span> setItimer Time.zeroTime
	  <span class="sym">;</span> MLton.Signal.setHandler <span class="sym">(</span>signal<span class="sym">,</span> MLton.Signal.Handler.ignore<span class="sym">)</span>
	  <span class="sym">;</span> topLevel <span class="sym">:=</span> NONE<span class="sym">)</span>
	  <span class="kwa">end</span>

      <span class="kwa">structure</span> Mutex <span class="sym">=</span>
	 <span class="kwa">struct</span>
	    <span class="kwa">datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>locked<span class="sym">:</span> <span class="kwb">bool</span> ref<span class="sym">,</span>
			       waiting<span class="sym">:</span> Thread.Runnable.t Queue.t<span class="sym">}</span>

	    <span class="kwa">fun</span> new <span class="sym">() =</span>
	       T <span class="sym">{</span>locked <span class="sym">=</span> ref <span class="kwa">false</span><span class="sym">,</span>
		  waiting <span class="sym">=</span> Queue.new <span class="sym">()}</span>

	    <span class="kwa">fun</span> lock <span class="sym">(</span>T <span class="sym">{</span>locked<span class="sym">,</span> waiting<span class="sym">,</span> ...<span class="sym">},</span> name<span class="sym">) =</span>
	       <span class="kwa">let</span>
		  <span class="kwa">fun</span> loop <span class="sym">() =</span>
		     <span class="sym">(</span>print <span class="sym">(</span>concat <span class="sym">[</span>name<span class="sym">,</span> <span class="str">&quot; lock looping</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])</span>
		      <span class="sym">;</span> Thread.atomicBegin <span class="sym">()</span>
		      <span class="sym">;</span> <span class="kwa">if</span> <span class="sym">!</span>locked
			   <span class="kwa">then</span> <span class="sym">(</span>print <span class="str">&quot;mutex is locked</span><span class="esc">\n</span><span class="str">&quot;</span>
				 <span class="sym">;</span> switch <span class="sym">(</span><span class="kwa">fn</span> t <span class="sym">=&gt;</span>
					   <span class="sym">(</span>Thread.atomicEnd <span class="sym">()</span>
					    <span class="sym">;</span> Queue.enque <span class="sym">(</span>waiting<span class="sym">,</span>
							   prepare <span class="sym">(</span>t<span class="sym">, ()))</span>
					    <span class="sym">;</span> next <span class="sym">()))</span>
				 <span class="sym">;</span> loop <span class="sym">())</span>
			<span class="kwa">else</span> <span class="sym">(</span>print <span class="str">&quot;mutex is not locked</span><span class="esc">\n</span><span class="str">&quot;</span>
			      <span class="sym">;</span> locked <span class="sym">:=</span> <span class="kwa">true</span>
			      <span class="sym">;</span> Thread.atomicEnd <span class="sym">()))</span>
	       <span class="kwa">in</span> loop <span class="sym">()</span>
	       <span class="kwa">end</span>

	    <span class="kwa">fun</span> safeUnlock <span class="sym">(</span>T <span class="sym">{</span>locked<span class="sym">,</span> waiting<span class="sym">,</span> ...<span class="sym">}) =</span>
	       <span class="sym">(</span>locked <span class="sym">:=</span> <span class="kwa">false</span>
		<span class="sym">; (</span><span class="kwa">case</span> Queue.deque waiting <span class="kwa">of</span>
		      NONE <span class="sym">=&gt; ()</span>
		    <span class="sym">|</span> SOME t <span class="sym">=&gt; (</span>print <span class="str">&quot;unlock found waiting thread</span><span class="esc">\n</span><span class="str">&quot;</span>
				 <span class="sym">;</span> ready t<span class="sym">)))</span>

	    <span class="kwa">fun</span> unlock <span class="sym">(</span>m<span class="sym">:</span> t<span class="sym">) =</span>
	       <span class="sym">(</span>print <span class="str">&quot;unlock atomicBegin</span><span class="esc">\n</span><span class="str">&quot;</span>
		<span class="sym">;</span> Thread.atomicBegin <span class="sym">()</span>
		<span class="sym">;</span> safeUnlock m
		<span class="sym">;</span> Thread.atomicEnd <span class="sym">())</span>
	 <span class="kwa">end</span>

      <span class="kwa">structure</span> Condition <span class="sym">=</span>
	 <span class="kwa">struct</span>
	    <span class="kwa">datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>waiting<span class="sym">:</span> Thread.Runnable.t Queue.t<span class="sym">}</span>

	    <span class="kwa">fun</span> new <span class="sym">() =</span> T <span class="sym">{</span>waiting <span class="sym">=</span> Queue.new <span class="sym">()}</span>

	    <span class="kwa">fun</span> wait <span class="sym">(</span>T <span class="sym">{</span>waiting<span class="sym">,</span> ...<span class="sym">},</span> m<span class="sym">) =</span>
	       <span class="sym">(</span>switch <span class="sym">(</span><span class="kwa">fn</span> t <span class="sym">=&gt;</span>
			<span class="sym">(</span>Mutex.safeUnlock m
			 <span class="sym">;</span> print <span class="str">&quot;wait unlocked mutex</span><span class="esc">\n</span><span class="str">&quot;</span>
			 <span class="sym">;</span> Queue.enque <span class="sym">(</span>waiting<span class="sym">,</span> prepare <span class="sym">(</span>t<span class="sym">, ()))</span>
			 <span class="sym">;</span> next <span class="sym">()))</span>
		<span class="sym">;</span> Mutex.lock <span class="sym">(</span>m<span class="sym">,</span> <span class="str">&quot;wait&quot;</span><span class="sym">))</span>

	    <span class="kwa">fun</span> signal <span class="sym">(</span>T <span class="sym">{</span>waiting<span class="sym">,</span> ...<span class="sym">}) =</span>
	       <span class="kwa">case</span> Queue.deque waiting <span class="kwa">of</span>
		  NONE <span class="sym">=&gt; ()</span>
		<span class="sym">|</span> SOME t <span class="sym">=&gt;</span> ready t
	 <span class="kwa">end</span>

   <span class="kwa">end</span>

<span class="kwa">structure</span> Mutex <span class="sym">=</span> Thread.Mutex
<span class="kwa">structure</span> Condition <span class="sym">=</span> Thread.Condition

<span class="kwa">val</span> count <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">val</span> data <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">val</span> produced <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">val</span> consumed <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">val</span> m <span class="sym">=</span> Mutex.new <span class="sym">()</span>
<span class="kwa">val</span> c <span class="sym">=</span> Condition.new <span class="sym">()</span>

<span class="kwa">fun</span> producer n <span class="sym">=</span>
   for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span>
	<span class="sym">(</span>print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;producer acquiring lock &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString i<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])</span>
	 <span class="sym">;</span> Mutex.lock <span class="sym">(</span>m<span class="sym">,</span> <span class="str">&quot;producer&quot;</span><span class="sym">)</span>
	 <span class="sym">;</span> print <span class="str">&quot;producer acquired lock</span><span class="esc">\n</span><span class="str">&quot;</span>
	 <span class="sym">;</span> <span class="kwa">while</span> <span class="sym">!</span>count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">do</span> Condition.wait <span class="sym">(</span>c<span class="sym">,</span> m<span class="sym">)</span>
	 <span class="sym">;</span> print <span class="str">&quot;producer passed condition</span><span class="esc">\n</span><span class="str">&quot;</span>
	 <span class="sym">;</span> data <span class="sym">:=</span> i
	 <span class="sym">;</span> count <span class="sym">:=</span> <span class="num">1</span>
	 <span class="sym">;</span> Condition.signal c
	 <span class="sym">;</span> print <span class="str">&quot;producer releasing lock</span><span class="esc">\n</span><span class="str">&quot;</span>
	 <span class="sym">;</span> Mutex.unlock m
	 <span class="sym">;</span> print <span class="str">&quot;producer released lock</span><span class="esc">\n</span><span class="str">&quot;</span>
	 <span class="sym">;</span> produced <span class="sym">:= !</span>produced <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>

<span class="kwa">fun</span> consumer n <span class="sym">=</span>
   <span class="kwa">let val</span> i <span class="sym">=</span> ref <span class="num">0</span>
   <span class="kwa">in</span>
      <span class="kwa">while</span> <span class="sym">!</span>i <span class="sym">&lt;&gt;</span> n <span class="kwa">do</span>
	 <span class="sym">(</span>print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;consumer acquiring lock &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString <span class="sym">(!</span>i<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])</span>
	  <span class="sym">;</span> Mutex.lock <span class="sym">(</span>m<span class="sym">,</span> <span class="str">&quot;consumer&quot;</span><span class="sym">)</span>
	  <span class="sym">;</span> print <span class="str">&quot;consumer acquired lock</span><span class="esc">\n</span><span class="str">&quot;</span>
	  <span class="sym">;</span> <span class="kwa">while</span> <span class="sym">!</span>count <span class="sym">=</span> <span class="num">0</span> <span class="kwa">do</span> Condition.wait <span class="sym">(</span>c<span class="sym">,</span> m<span class="sym">)</span>
	  <span class="sym">;</span> i <span class="sym">:= !</span>data
	  <span class="sym">;</span> count <span class="sym">:=</span> <span class="num">0</span>
	  <span class="sym">;</span> Condition.signal c
	  <span class="sym">;</span> print <span class="str">&quot;consumer releasing lock</span><span class="esc">\n</span><span class="str">&quot;</span>
	  <span class="sym">;</span> Mutex.unlock m
	  <span class="sym">;</span> print <span class="str">&quot;consumer released lock</span><span class="esc">\n</span><span class="str">&quot;</span>
	  <span class="sym">;</span> consumed <span class="sym">:= !</span>consumed <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
   <span class="kwa">end</span>

<span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span>
<span class="kwa">fun</span> printl <span class="sym">[] =</span> <span class="kwa">TextIO</span>.print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl <span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> <span class="kwa">TextIO</span>.print h <span class="sym">;</span> printl t <span class="sym">)</span>

<span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))</span>
      <span class="kwa">val</span> p <span class="sym">=</span> Thread.spawn <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt;</span> producer n<span class="sym">)</span>
      <span class="kwa">val</span> c <span class="sym">=</span> Thread.spawn <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt;</span> consumer n<span class="sym">)</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> Thread.run <span class="sym">()</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> Posix.Process.sleep <span class="sym">(</span>Time.fromSeconds <span class="num">1</span><span class="sym">)</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> printl <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(!</span>produced<span class="sym">),</span>
		      <span class="str">&quot; &quot;</span><span class="sym">,</span>
		      <span class="kwa">Int</span>.toString <span class="sym">(!</span>consumed<span class="sym">)]</span>
   <span class="kwa">in</span>
      <span class="sym">()</span>
   <span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> main <span class="sym">(</span> CommandLine.name <span class="sym">(),</span> CommandLine.arguments <span class="sym">() )</span>
