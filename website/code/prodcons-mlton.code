<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: prodcons-mlton.code,v 1.3 2004-11-11 07:14:03 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * from Stephen Weeks
</span><span class="line">    5 </span><span class="com"> *)</span>
<span class="line">    6 </span><span class="com">(* Translated from prodcons.ocaml. *)</span>
<span class="line">    7 </span>
<span class="line">    8 </span><span class="kwa">fun</span> for <span class="sym">(</span>start<span class="sym">,</span> stop<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">    9 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   10 </span><span class="kwa">      fun</span> loop i <span class="sym">=
</span><span class="line">   11 </span><span class="sym"></span>         <span class="kwa">if</span> i <span class="sym">&gt;</span> stop
<span class="line">   12 </span>            <span class="kwa">then</span> <span class="sym">()
</span><span class="line">   13 </span><span class="sym"></span>         <span class="kwa">else</span> <span class="sym">(</span>f i<span class="sym">;</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   14 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">   15 </span><span class="kwa"></span>      loop start
<span class="line">   16 </span>   <span class="kwa">end
</span><span class="line">   17 </span><span class="kwa">
</span><span class="line">   18 </span><span class="kwa">fun</span> print s <span class="sym">= ()</span> <span class="com">(* Primitive.Stdio.print s *)</span>
<span class="line">   19 </span>
<span class="line">   20 </span><span class="kwa">structure</span> Queue<span class="sym">:
</span><span class="line">   21 </span><span class="sym"></span>   <span class="kwa">sig
</span><span class="line">   22 </span><span class="kwa">      type</span> 'a t
<span class="line">   23 </span>
<span class="line">   24 </span>      <span class="kwa">val</span> new<span class="sym">:</span> unit <span class="sym">-&gt;</span> 'a t
<span class="line">   25 </span>      <span class="kwa">val</span> enque<span class="sym">:</span> 'a t <span class="sym">*</span> 'a <span class="sym">-&gt;</span> unit
<span class="line">   26 </span>      <span class="kwa">val</span> deque<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a option
<span class="line">   27 </span>   <span class="kwa">end</span> <span class="sym">=
</span><span class="line">   28 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">   29 </span><span class="kwa">      datatype</span> 'a t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>front<span class="sym">:</span> 'a list ref<span class="sym">,</span> back<span class="sym">:</span> 'a list ref<span class="sym">}
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym"></span>      <span class="kwa">fun</span> new <span class="sym">() =</span> T <span class="sym">{</span>front <span class="sym">=</span> ref <span class="sym">[],</span> back <span class="sym">=</span> ref <span class="sym">[]}
</span><span class="line">   32 </span><span class="sym">
</span><span class="line">   33 </span><span class="sym"></span>      <span class="kwa">fun</span> enque <span class="sym">(</span>T <span class="sym">{</span>back<span class="sym">,</span> ...<span class="sym">},</span> x<span class="sym">) =</span> back <span class="sym">:=</span> x <span class="sym">:: !</span>back
<span class="line">   34 </span>
<span class="line">   35 </span>      <span class="kwa">fun</span> deque <span class="sym">(</span>T <span class="sym">{</span>front<span class="sym">,</span> back<span class="sym">}) =
</span><span class="line">   36 </span><span class="sym"></span>         <span class="kwa">case</span> <span class="sym">!</span>front <span class="kwa">of
</span><span class="line">   37 </span><span class="kwa"></span>            <span class="sym">[] =&gt; (</span><span class="kwa">case</span> <span class="sym">!</span>back <span class="kwa">of
</span><span class="line">   38 </span><span class="kwa"></span>                      <span class="sym">[] =&gt;</span> NONE
<span class="line">   39 </span>                    <span class="sym">|</span> l <span class="sym">=&gt;</span> <span class="kwa">let val</span> l <span class="sym">=</span> rev l
<span class="line">   40 </span>                           <span class="kwa">in case</span> l <span class="kwa">of
</span><span class="line">   41 </span><span class="kwa"></span>                              <span class="sym">[] =&gt;</span> <span class="kwa">raise</span> Fail <span class="str">&quot;deque&quot;</span>
<span class="line">   42 </span>                            <span class="sym">|</span> x <span class="sym">::</span> l <span class="sym">=&gt; (</span>back <span class="sym">:= [];</span> front <span class="sym">:=</span> l<span class="sym">;</span> SOME x<span class="sym">)
</span><span class="line">   43 </span><span class="sym"></span>                           <span class="kwa">end</span><span class="sym">)
</span><span class="line">   44 </span><span class="sym">          |</span> x <span class="sym">::</span> l <span class="sym">=&gt; (</span>front <span class="sym">:=</span> l<span class="sym">;</span> SOME x<span class="sym">)
</span><span class="line">   45 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">   46 </span><span class="kwa">
</span><span class="line">   47 </span><span class="kwa">structure</span> Thread<span class="sym">:
</span><span class="line">   48 </span><span class="sym"></span>   <span class="kwa">sig
</span><span class="line">   49 </span><span class="kwa">      val</span> exit<span class="sym">:</span> unit <span class="sym">-&gt;</span> 'a
<span class="line">   50 </span>      <span class="kwa">val</span> run<span class="sym">:</span> unit <span class="sym">-&gt;</span> unit
<span class="line">   51 </span>      <span class="kwa">val</span> spawn<span class="sym">: (</span>unit <span class="sym">-&gt;</span> unit<span class="sym">) -&gt;</span> unit
<span class="line">   52 </span>      <span class="kwa">val</span> yield<span class="sym">:</span> unit <span class="sym">-&gt;</span> unit
<span class="line">   53 </span>      <span class="kwa">structure</span> Mutex<span class="sym">:
</span><span class="line">   54 </span><span class="sym"></span>         <span class="kwa">sig
</span><span class="line">   55 </span><span class="kwa">            type</span> t
<span class="line">   56 </span>
<span class="line">   57 </span>            <span class="kwa">val</span> new<span class="sym">:</span> unit <span class="sym">-&gt;</span> t
<span class="line">   58 </span>            <span class="kwa">val</span> lock<span class="sym">:</span> t <span class="sym">*</span> <span class="kwb">string</span> <span class="sym">-&gt;</span> unit
<span class="line">   59 </span>            <span class="kwa">val</span> unlock<span class="sym">:</span> t <span class="sym">-&gt;</span> unit
<span class="line">   60 </span>         <span class="kwa">end
</span><span class="line">   61 </span><span class="kwa">      structure</span> Condition<span class="sym">:
</span><span class="line">   62 </span><span class="sym"></span>               <span class="kwa">sig
</span><span class="line">   63 </span><span class="kwa">            type</span> t
<span class="line">   64 </span>
<span class="line">   65 </span>            <span class="kwa">val</span> new<span class="sym">:</span> unit <span class="sym">-&gt;</span> t
<span class="line">   66 </span>            <span class="kwa">val</span> signal<span class="sym">:</span> t <span class="sym">-&gt;</span> unit
<span class="line">   67 </span>            <span class="kwa">val</span> wait<span class="sym">:</span> t <span class="sym">*</span> Mutex.t <span class="sym">-&gt;</span> unit
<span class="line">   68 </span>         <span class="kwa">end
</span><span class="line">   69 </span><span class="kwa">   end</span> <span class="sym">=
</span><span class="line">   70 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">   71 </span><span class="kwa">      open</span> MLton.Itimer
<span class="line">   72 </span>      <span class="kwa">open</span> MLton.Signal
<span class="line">   73 </span>      <span class="kwa">open</span> MLton.Thread
<span class="line">   74 </span>
<span class="line">   75 </span>      <span class="kwa">val</span> topLevel<span class="sym">:</span> unit MLton.Thread.t option ref <span class="sym">=</span> ref NONE
<span class="line">   76 </span>
<span class="line">   77 </span>      <span class="kwa">local
</span><span class="line">   78 </span><span class="kwa">         val</span> threads<span class="sym">:</span> unit MLton.Thread.t Queue.t <span class="sym">=</span> Queue.new <span class="sym">()
</span><span class="line">   79 </span><span class="sym"></span>      <span class="kwa">in
</span><span class="line">   80 </span><span class="kwa">         fun</span> ready <span class="sym">(</span>t<span class="sym">):</span> unit <span class="sym">=</span> Queue.enque <span class="sym">(</span>threads<span class="sym">,</span> t<span class="sym">)
</span><span class="line">   81 </span><span class="sym"></span>         <span class="kwa">fun</span> next <span class="sym">() =
</span><span class="line">   82 </span><span class="sym"></span>            <span class="kwa">case</span> Queue.deque threads <span class="kwa">of
</span><span class="line">   83 </span><span class="kwa"></span>               NONE <span class="sym">=&gt; (</span>print <span class="str">&quot;switching to toplevel</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   84 </span>                        <span class="sym">;</span> valOf <span class="sym">(!</span>topLevel<span class="sym">))
</span><span class="line">   85 </span><span class="sym">             |</span> SOME t <span class="sym">=&gt;</span> t
<span class="line">   86 </span>      <span class="kwa">end
</span><span class="line">   87 </span><span class="kwa">
</span><span class="line">   88 </span><span class="kwa">      fun</span> 'a exit <span class="sym">():</span> 'a <span class="sym">=</span> switch <span class="sym">(</span><span class="kwa">fn</span> _ <span class="sym">=&gt; (</span>next <span class="sym">(), ()))
</span><span class="line">   89 </span><span class="sym">
</span><span class="line">   90 </span><span class="sym"></span>      <span class="kwa">fun</span> new <span class="sym">(</span>f<span class="sym">:</span> unit <span class="sym">-&gt;</span> unit<span class="sym">):</span> unit MLton.Thread.t <span class="sym">=
</span><span class="line">   91 </span><span class="sym"></span>         MLton.Thread.new <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt; ((</span>f <span class="sym">()</span> <span class="kwa">handle</span> _ <span class="sym">=&gt;</span> exit <span class="sym">())
</span><span class="line">   92 </span><span class="sym">                              ;</span> exit <span class="sym">()))
</span><span class="line">   93 </span><span class="sym">
</span><span class="line">   94 </span><span class="sym"></span>      <span class="kwa">fun</span> schedule t <span class="sym">=
</span><span class="line">   95 </span><span class="sym">         (</span>print <span class="str">&quot;scheduling</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   96 </span>          <span class="sym">;</span> ready t
<span class="line">   97 </span>          <span class="sym">;</span> next <span class="sym">())
</span><span class="line">   98 </span><span class="sym">
</span><span class="line">   99 </span><span class="sym"></span>      <span class="kwa">fun</span> yield <span class="sym">():</span> unit <span class="sym">=</span> switch <span class="sym">(</span><span class="kwa">fn</span> t <span class="sym">=&gt; (</span>schedule t<span class="sym">, ()))
</span><span class="line">  100 </span><span class="sym">
</span><span class="line">  101 </span><span class="sym"></span>      <span class="kwa">val</span> spawn <span class="sym">=</span> ready <span class="kwa">o</span> new
<span class="line">  102 </span>
<span class="line">  103 </span>      <span class="kwa">fun</span> setItimer t <span class="sym">=
</span><span class="line">  104 </span><span class="sym"></span>         MLton.Itimer.set <span class="sym">(</span>MLton.Itimer.<span class="kwa">Real</span><span class="sym">,
</span><span class="line">  105 </span><span class="sym">                     {</span>value <span class="sym">=</span> t<span class="sym">,
</span><span class="line">  106 </span><span class="sym"></span>                      interval <span class="sym">=</span> t<span class="sym">})
</span><span class="line">  107 </span><span class="sym">
</span><span class="line">  108 </span><span class="sym"></span>      <span class="kwa">fun</span> run <span class="sym">():</span> unit <span class="sym">=
</span><span class="line">  109 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  110 </span><span class="kwa">            val</span> which <span class="sym">=</span> MLton.Itimer.<span class="kwa">Real</span><span class="sym">;
</span><span class="line">  111 </span><span class="sym"></span>            <span class="kwa">val</span> signal <span class="sym">=</span> MLton.Itimer.signal which<span class="sym">;
</span><span class="line">  112 </span><span class="sym"></span>         <span class="kwa">in
</span><span class="line">  113 </span><span class="kwa"></span>         <span class="sym">(</span>switch <span class="sym">(</span><span class="kwa">fn</span> t <span class="sym">=&gt;
</span><span class="line">  114 </span><span class="sym">                  (</span>topLevel <span class="sym">:=</span> SOME t
<span class="line">  115 </span>                   <span class="sym">; (</span>new <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt; (</span>MLton.Signal.setHandler <span class="sym">(</span>signal<span class="sym">,</span> Handler.handler <span class="sym">(</span><span class="kwa">fn</span> t <span class="sym">=&gt;</span> schedule t<span class="sym">))
</span><span class="line">  116 </span><span class="sym">                                     ;</span> setItimer <span class="sym">(</span>Time.fromMilliseconds <span class="num">20</span><span class="sym">))),
</span><span class="line">  117 </span><span class="sym">                      ())))
</span><span class="line">  118 </span><span class="sym">          ;</span> setItimer Time.zeroTime
<span class="line">  119 </span>          <span class="sym">;</span> MLton.Signal.setHandler <span class="sym">(</span>signal<span class="sym">,</span> MLton.Signal.Handler.ignore<span class="sym">)
</span><span class="line">  120 </span><span class="sym">          ;</span> topLevel <span class="sym">:=</span> NONE<span class="sym">)
</span><span class="line">  121 </span><span class="sym"></span>          <span class="kwa">end
</span><span class="line">  122 </span><span class="kwa">
</span><span class="line">  123 </span><span class="kwa">      structure</span> Mutex <span class="sym">=
</span><span class="line">  124 </span><span class="sym"></span>         <span class="kwa">struct
</span><span class="line">  125 </span><span class="kwa">            datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>locked<span class="sym">:</span> <span class="kwb">bool</span> ref<span class="sym">,
</span><span class="line">  126 </span><span class="sym"></span>                               waiting<span class="sym">:</span> unit MLton.Thread.t Queue.t<span class="sym">}
</span><span class="line">  127 </span><span class="sym">
</span><span class="line">  128 </span><span class="sym"></span>            <span class="kwa">fun</span> new <span class="sym">() =
</span><span class="line">  129 </span><span class="sym"></span>               T <span class="sym">{</span>locked <span class="sym">=</span> ref <span class="kwa">false</span><span class="sym">,
</span><span class="line">  130 </span><span class="sym"></span>                  waiting <span class="sym">=</span> Queue.new <span class="sym">()}
</span><span class="line">  131 </span><span class="sym">
</span><span class="line">  132 </span><span class="sym"></span>            <span class="kwa">fun</span> lock <span class="sym">(</span>T <span class="sym">{</span>locked<span class="sym">,</span> waiting<span class="sym">,</span> ...<span class="sym">},</span> name<span class="sym">) =
</span><span class="line">  133 </span><span class="sym"></span>               <span class="kwa">let
</span><span class="line">  134 </span><span class="kwa">                  fun</span> loop <span class="sym">() =
</span><span class="line">  135 </span><span class="sym">                     (</span>print <span class="sym">(</span>concat <span class="sym">[</span>name<span class="sym">,</span> <span class="str">&quot; lock looping</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])
</span><span class="line">  136 </span><span class="sym">                      ;</span> MLton.Thread.atomicBegin <span class="sym">()
</span><span class="line">  137 </span><span class="sym">                      ;</span> <span class="kwa">if</span> <span class="sym">!</span>locked
<span class="line">  138 </span>                           <span class="kwa">then</span> <span class="sym">(</span>print <span class="str">&quot;mutex is locked</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  139 </span>                                 <span class="sym">;</span> switch <span class="sym">(</span><span class="kwa">fn</span> t <span class="sym">=&gt;
</span><span class="line">  140 </span><span class="sym">                                           (</span>MLton.Thread.atomicEnd <span class="sym">()
</span><span class="line">  141 </span><span class="sym">                                            ;</span> Queue.enque <span class="sym">(</span>waiting<span class="sym">,</span> t<span class="sym">)
</span><span class="line">  142 </span><span class="sym">                                            ; (</span>next <span class="sym">(), ())))
</span><span class="line">  143 </span><span class="sym">                                 ;</span> loop <span class="sym">())
</span><span class="line">  144 </span><span class="sym"></span>                        <span class="kwa">else</span> <span class="sym">(</span>print <span class="str">&quot;mutex is not locked</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  145 </span>                              <span class="sym">;</span> locked <span class="sym">:=</span> <span class="kwa">true
</span><span class="line">  146 </span><span class="kwa"></span>                              <span class="sym">;</span> MLton.Thread.atomicEnd <span class="sym">()))
</span><span class="line">  147 </span><span class="sym"></span>               <span class="kwa">in</span> loop <span class="sym">()
</span><span class="line">  148 </span><span class="sym"></span>               <span class="kwa">end
</span><span class="line">  149 </span><span class="kwa">
</span><span class="line">  150 </span><span class="kwa">            fun</span> safeUnlock <span class="sym">(</span>T <span class="sym">{</span>locked<span class="sym">,</span> waiting<span class="sym">,</span> ...<span class="sym">}) =
</span><span class="line">  151 </span><span class="sym">               (</span>locked <span class="sym">:=</span> <span class="kwa">false
</span><span class="line">  152 </span><span class="kwa"></span>                <span class="sym">; (</span><span class="kwa">case</span> Queue.deque waiting <span class="kwa">of
</span><span class="line">  153 </span><span class="kwa"></span>                      NONE <span class="sym">=&gt; ()
</span><span class="line">  154 </span><span class="sym">                    |</span> SOME t <span class="sym">=&gt; (</span>print <span class="str">&quot;unlock found waiting thread</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  155 </span>                                 <span class="sym">;</span> ready t<span class="sym">)))
</span><span class="line">  156 </span><span class="sym">
</span><span class="line">  157 </span><span class="sym"></span>            <span class="kwa">fun</span> unlock <span class="sym">(</span>m<span class="sym">:</span> t<span class="sym">) =
</span><span class="line">  158 </span><span class="sym">               (</span>print <span class="str">&quot;unlock atomicBegin</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  159 </span>                <span class="sym">;</span> MLton.Thread.atomicBegin <span class="sym">()
</span><span class="line">  160 </span><span class="sym">                ;</span> safeUnlock m
<span class="line">  161 </span>                <span class="sym">;</span> MLton.Thread.atomicEnd <span class="sym">())
</span><span class="line">  162 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  163 </span><span class="kwa">
</span><span class="line">  164 </span><span class="kwa">      structure</span> Condition <span class="sym">=
</span><span class="line">  165 </span><span class="sym"></span>         <span class="kwa">struct
</span><span class="line">  166 </span><span class="kwa">            datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>waiting<span class="sym">:</span> unit MLton.Thread.t Queue.t<span class="sym">}
</span><span class="line">  167 </span><span class="sym">
</span><span class="line">  168 </span><span class="sym"></span>            <span class="kwa">fun</span> new <span class="sym">() =</span> T <span class="sym">{</span>waiting <span class="sym">=</span> Queue.new <span class="sym">()}
</span><span class="line">  169 </span><span class="sym">
</span><span class="line">  170 </span><span class="sym"></span>            <span class="kwa">fun</span> wait <span class="sym">(</span>T <span class="sym">{</span>waiting<span class="sym">,</span> ...<span class="sym">},</span> m<span class="sym">) =
</span><span class="line">  171 </span><span class="sym">               (</span>switch <span class="sym">(</span><span class="kwa">fn</span> t <span class="sym">=&gt;
</span><span class="line">  172 </span><span class="sym">                        (</span>Mutex.safeUnlock m
<span class="line">  173 </span>                         <span class="sym">;</span> print <span class="str">&quot;wait unlocked mutex</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  174 </span>                         <span class="sym">;</span> Queue.enque <span class="sym">(</span>waiting<span class="sym">,</span> t<span class="sym">)
</span><span class="line">  175 </span><span class="sym">                         ; (</span>next <span class="sym">(), ())))
</span><span class="line">  176 </span><span class="sym">                ;</span> Mutex.lock <span class="sym">(</span>m<span class="sym">,</span> <span class="str">&quot;wait&quot;</span><span class="sym">))
</span><span class="line">  177 </span><span class="sym">
</span><span class="line">  178 </span><span class="sym"></span>            <span class="kwa">fun</span> signal <span class="sym">(</span>T <span class="sym">{</span>waiting<span class="sym">,</span> ...<span class="sym">}) =
</span><span class="line">  179 </span><span class="sym"></span>               <span class="kwa">case</span> Queue.deque waiting <span class="kwa">of
</span><span class="line">  180 </span><span class="kwa"></span>                  NONE <span class="sym">=&gt; ()
</span><span class="line">  181 </span><span class="sym">                |</span> SOME t <span class="sym">=&gt;</span> ready t
<span class="line">  182 </span>         <span class="kwa">end
</span><span class="line">  183 </span><span class="kwa">
</span><span class="line">  184 </span><span class="kwa">   end
</span><span class="line">  185 </span><span class="kwa">
</span><span class="line">  186 </span><span class="kwa">structure</span> Mutex <span class="sym">=</span> Thread.Mutex
<span class="line">  187 </span><span class="kwa">structure</span> Condition <span class="sym">=</span> Thread.Condition
<span class="line">  188 </span>
<span class="line">  189 </span><span class="kwa">val</span> count <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  190 </span><span class="num"></span><span class="kwa">val</span> data <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  191 </span><span class="num"></span><span class="kwa">val</span> produced <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  192 </span><span class="num"></span><span class="kwa">val</span> consumed <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  193 </span><span class="num"></span><span class="kwa">val</span> m <span class="sym">=</span> Mutex.new <span class="sym">()
</span><span class="line">  194 </span><span class="sym"></span><span class="kwa">val</span> c <span class="sym">=</span> Condition.new <span class="sym">()
</span><span class="line">  195 </span><span class="sym">
</span><span class="line">  196 </span><span class="sym"></span><span class="kwa">fun</span> producer n <span class="sym">=
</span><span class="line">  197 </span><span class="sym"></span>   for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span><span class="line">  198 </span><span class="sym">        (</span>print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;producer acquiring lock &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString i<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])
</span><span class="line">  199 </span><span class="sym">         ;</span> Mutex.lock <span class="sym">(</span>m<span class="sym">,</span> <span class="str">&quot;producer&quot;</span><span class="sym">)
</span><span class="line">  200 </span><span class="sym">         ;</span> print <span class="str">&quot;producer acquired lock</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  201 </span>         <span class="sym">;</span> <span class="kwa">while</span> <span class="sym">!</span>count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">do</span> Condition.wait <span class="sym">(</span>c<span class="sym">,</span> m<span class="sym">)
</span><span class="line">  202 </span><span class="sym">         ;</span> print <span class="str">&quot;producer passed condition</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  203 </span>         <span class="sym">;</span> data <span class="sym">:=</span> i
<span class="line">  204 </span>         <span class="sym">;</span> count <span class="sym">:=</span> <span class="num">1
</span><span class="line">  205 </span><span class="num"></span>         <span class="sym">;</span> Condition.signal c
<span class="line">  206 </span>         <span class="sym">;</span> print <span class="str">&quot;producer releasing lock</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  207 </span>         <span class="sym">;</span> Mutex.unlock m
<span class="line">  208 </span>         <span class="sym">;</span> print <span class="str">&quot;producer released lock</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  209 </span>         <span class="sym">;</span> produced <span class="sym">:= !</span>produced <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">  210 </span><span class="sym">
</span><span class="line">  211 </span><span class="sym"></span><span class="kwa">fun</span> consumer n <span class="sym">=
</span><span class="line">  212 </span><span class="sym"></span>   <span class="kwa">let val</span> i <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  213 </span><span class="num"></span>   <span class="kwa">in
</span><span class="line">  214 </span><span class="kwa">      while</span> <span class="sym">!</span>i <span class="sym">&lt;&gt;</span> n <span class="kwa">do
</span><span class="line">  215 </span><span class="kwa"></span>         <span class="sym">(</span>print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;consumer acquiring lock &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString <span class="sym">(!</span>i<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])
</span><span class="line">  216 </span><span class="sym">          ;</span> Mutex.lock <span class="sym">(</span>m<span class="sym">,</span> <span class="str">&quot;consumer&quot;</span><span class="sym">)
</span><span class="line">  217 </span><span class="sym">          ;</span> print <span class="str">&quot;consumer acquired lock</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  218 </span>          <span class="sym">;</span> <span class="kwa">while</span> <span class="sym">!</span>count <span class="sym">=</span> <span class="num">0</span> <span class="kwa">do</span> Condition.wait <span class="sym">(</span>c<span class="sym">,</span> m<span class="sym">)
</span><span class="line">  219 </span><span class="sym">          ;</span> i <span class="sym">:= !</span>data
<span class="line">  220 </span>          <span class="sym">;</span> count <span class="sym">:=</span> <span class="num">0
</span><span class="line">  221 </span><span class="num"></span>          <span class="sym">;</span> Condition.signal c
<span class="line">  222 </span>          <span class="sym">;</span> print <span class="str">&quot;consumer releasing lock</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  223 </span>          <span class="sym">;</span> Mutex.unlock m
<span class="line">  224 </span>          <span class="sym">;</span> print <span class="str">&quot;consumer released lock</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">  225 </span>          <span class="sym">;</span> consumed <span class="sym">:= !</span>consumed <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">  226 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">  227 </span><span class="kwa">
</span><span class="line">  228 </span><span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0
</span><span class="line">  229 </span><span class="num"></span><span class="kwa">fun</span> printl <span class="sym">[] =</span> <span class="kwa">TextIO</span>.print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl <span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> <span class="kwa">TextIO</span>.print h <span class="sym">;</span> printl t <span class="sym">)
</span><span class="line">  230 </span><span class="sym">
</span><span class="line">  231 </span><span class="sym"></span><span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =
</span><span class="line">  232 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">  233 </span><span class="kwa">      val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))
</span><span class="line">  234 </span><span class="sym"></span>      <span class="kwa">val</span> p <span class="sym">=</span> Thread.spawn <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt;</span> producer n<span class="sym">)
</span><span class="line">  235 </span><span class="sym"></span>      <span class="kwa">val</span> c <span class="sym">=</span> Thread.spawn <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt;</span> consumer n<span class="sym">)
</span><span class="line">  236 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> Thread.run <span class="sym">()
</span><span class="line">  237 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> Posix.Process.sleep <span class="sym">(</span>Time.fromSeconds <span class="num">1</span><span class="sym">)
</span><span class="line">  238 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> printl <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(!</span>produced<span class="sym">),
</span><span class="line">  239 </span><span class="sym"></span>                      <span class="str">&quot; &quot;</span><span class="sym">,
</span><span class="line">  240 </span><span class="sym"></span>                      <span class="kwa">Int</span>.toString <span class="sym">(!</span>consumed<span class="sym">)]
</span><span class="line">  241 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">  242 </span><span class="kwa"></span>      <span class="sym">()
</span><span class="line">  243 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">  244 </span><span class="kwa">
</span><span class="line">  245 </span><span class="kwa">val</span> _ <span class="sym">=</span> main <span class="sym">(</span> CommandLine.name <span class="sym">(),</span> CommandLine.arguments <span class="sym">() )</span>
