<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">(* -*- mode: sml -*-
 * $Id: prodcons-mlton.code,v 1.2 2004-11-08 08:15:18 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 * from Stephen Weeks
 *)</FONT></I>
<I><FONT COLOR="#B22222">(* Translated from prodcons.ocaml. *)</FONT></I>

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for</FONT></I></B></FONT></B> (start, stop, f) <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">if</FONT></B> i <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> stop
	    <B><FONT COLOR="#A020F0">then</FONT></B> ()
	 <B><FONT COLOR="#A020F0">else</FONT></B> (f i; loop (i <B><FONT COLOR="#5F9EA0">+</FONT></B> 1))
   <B><FONT COLOR="#A020F0">in</FONT></B>
      loop start
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">print</FONT></I></B></FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B> () <I><FONT COLOR="#B22222">(* Primitive.Stdio.print s *)</FONT></I>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Queue:
   <B><FONT COLOR="#5F9EA0">sig</FONT></B>
      <B><FONT COLOR="#A020F0">type</FONT></B> 'a t

      <B><FONT COLOR="#A020F0">val</FONT></B> new: <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 'a t
      <B><FONT COLOR="#A020F0">val</FONT></B> enque: 'a t <B><FONT COLOR="#5F9EA0">*</FONT></B> 'a <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> deque: 'a t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 'a option
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">datatype</FONT></B> 'a t <B><FONT COLOR="#5F9EA0">=</FONT></B> T <B><FONT COLOR="#A020F0">of</FONT></B> {front: 'a <B><FONT COLOR="#228B22">list</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B>, back: 'a <B><FONT COLOR="#228B22">list</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B>}

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">new</FONT></I></B></FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B> T {front <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> [], back <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> []}

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">enque</FONT></I></B></FONT></B> (T {back, ...}, x) <B><FONT COLOR="#5F9EA0">=</FONT></B> back <B><FONT COLOR="#5F9EA0">:=</FONT></B> x <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>back

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">deque</FONT></I></B></FONT></B> (T {front, back}) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">case</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>front <B><FONT COLOR="#A020F0">of</FONT></B>
	    [] <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> (<B><FONT COLOR="#A020F0">case</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>back <B><FONT COLOR="#A020F0">of</FONT></B>
		      [] <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#5F9EA0">NONE</FONT></B>
		    <B><FONT COLOR="#5F9EA0">|</FONT></B> l <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#A020F0">let</FONT></B> <B><FONT COLOR="#A020F0">val</FONT></B> l <B><FONT COLOR="#5F9EA0">=</FONT></B> rev l
			   <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">case</FONT></B> l <B><FONT COLOR="#A020F0">of</FONT></B>
			      [] <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#A020F0">raise</FONT></B> Fail <B><FONT COLOR="#BC8F8F">&quot;deque&quot;</FONT></B>
			    <B><FONT COLOR="#5F9EA0">|</FONT></B> x <B><FONT COLOR="#5F9EA0">::</FONT></B> l <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> (back <B><FONT COLOR="#5F9EA0">:=</FONT></B> []; front <B><FONT COLOR="#5F9EA0">:=</FONT></B> l; <B><FONT COLOR="#5F9EA0">SOME</FONT></B> x)
			   <B><FONT COLOR="#A020F0">end</FONT></B>)
	  <B><FONT COLOR="#5F9EA0">|</FONT></B> x <B><FONT COLOR="#5F9EA0">::</FONT></B> l <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> (front <B><FONT COLOR="#5F9EA0">:=</FONT></B> l; <B><FONT COLOR="#5F9EA0">SOME</FONT></B> x) 
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Thread:
   <B><FONT COLOR="#5F9EA0">sig</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> exit: <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 'a
      <B><FONT COLOR="#A020F0">val</FONT></B> run: <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> spawn: (<B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>) <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> yield: <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
      <B><FONT COLOR="#5F9EA0">structure</FONT></B> Mutex:
	 <B><FONT COLOR="#5F9EA0">sig</FONT></B>
	    <B><FONT COLOR="#A020F0">type</FONT></B> t

	    <B><FONT COLOR="#A020F0">val</FONT></B> new: <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
	    <B><FONT COLOR="#A020F0">val</FONT></B> lock: t <B><FONT COLOR="#5F9EA0">*</FONT></B> <B><FONT COLOR="#228B22">string</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> unlock: t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
	 <B><FONT COLOR="#A020F0">end</FONT></B>
      <B><FONT COLOR="#5F9EA0">structure</FONT></B> Condition:
      	 <B><FONT COLOR="#5F9EA0">sig</FONT></B>
	    <B><FONT COLOR="#A020F0">type</FONT></B> t
	       
	    <B><FONT COLOR="#A020F0">val</FONT></B> new: <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
	    <B><FONT COLOR="#A020F0">val</FONT></B> signal: t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> wait: t <B><FONT COLOR="#5F9EA0">*</FONT></B> Mutex.t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
	 <B><FONT COLOR="#A020F0">end</FONT></B>
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">open</FONT></B> MLton.Itimer
      <B><FONT COLOR="#A020F0">open</FONT></B> MLton.Signal
      <B><FONT COLOR="#A020F0">open</FONT></B> MLton.Thread

      <B><FONT COLOR="#A020F0">val</FONT></B> topLevel: <B><FONT COLOR="#228B22">unit</FONT></B> MLton.Thread.t option <B><FONT COLOR="#A020F0">ref</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> <B><FONT COLOR="#5F9EA0">NONE</FONT></B>

      <B><FONT COLOR="#A020F0">local</FONT></B>
	 <B><FONT COLOR="#A020F0">val</FONT></B> threads: <B><FONT COLOR="#228B22">unit</FONT></B> MLton.Thread.t Queue.t <B><FONT COLOR="#5F9EA0">=</FONT></B> Queue.new ()
      <B><FONT COLOR="#A020F0">in</FONT></B>
<B><FONT COLOR="#A020F0">	 fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">ready</FONT></I></B></FONT></B> (t): <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> Queue.enque (threads, t)
<B><FONT COLOR="#A020F0">	 fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">next</FONT></I></B></FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B>
	    <B><FONT COLOR="#A020F0">case</FONT></B> Queue.deque threads <B><FONT COLOR="#A020F0">of</FONT></B>
	       <B><FONT COLOR="#5F9EA0">NONE</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> (<B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;switching to toplevel\n&quot;</FONT></B>
			; valOf (<B><FONT COLOR="#5F9EA0">!</FONT></B>topLevel))
	     <B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
      <B><FONT COLOR="#A020F0">end</FONT></B>
   
      <B><FONT COLOR="#A020F0">fun</FONT></B> 'a exit (): 'a <B><FONT COLOR="#5F9EA0">=</FONT></B> switch (<B><FONT COLOR="#A020F0">fn</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> (next (), ()))
      
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">new</FONT></I></B></FONT></B> (f: <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>): <B><FONT COLOR="#228B22">unit</FONT></B> MLton.Thread.t <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 MLton.Thread.new (<B><FONT COLOR="#A020F0">fn</FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ((f () <B><FONT COLOR="#A020F0">handle</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> exit ())
			      ; exit ()))
	 
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">schedule</FONT></I></B></FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 (<B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;scheduling\n&quot;</FONT></B>
	  ; ready t
	  ; next ())

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">yield</FONT></I></B></FONT></B> (): <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> switch (<B><FONT COLOR="#A020F0">fn</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> (schedule t, ()))

      <B><FONT COLOR="#A020F0">val</FONT></B> spawn <B><FONT COLOR="#5F9EA0">=</FONT></B> ready <B><FONT COLOR="#A020F0">o</FONT></B> new

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">setItimer</FONT></I></B></FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 MLton.Itimer.set (MLton.Itimer.Real,
		     {value <B><FONT COLOR="#5F9EA0">=</FONT></B> t,
		      interval <B><FONT COLOR="#5F9EA0">=</FONT></B> t})

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">run</FONT></I></B></FONT></B> (): <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
         <B><FONT COLOR="#A020F0">let</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> which <B><FONT COLOR="#5F9EA0">=</FONT></B> MLton.Itimer.Real;
	    <B><FONT COLOR="#A020F0">val</FONT></B> signal <B><FONT COLOR="#5F9EA0">=</FONT></B> MLton.Itimer.signal which;
	 <B><FONT COLOR="#A020F0">in</FONT></B>
	 (switch (<B><FONT COLOR="#A020F0">fn</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		  (topLevel <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> t
		   ; (new (<B><FONT COLOR="#A020F0">fn</FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> (MLton.Signal.setHandler (signal, Handler.handler (<B><FONT COLOR="#A020F0">fn</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> schedule t))
				     ; setItimer (Time.fromMilliseconds 20))),
		      ())))
	  ; setItimer Time.zeroTime
	  ; MLton.Signal.setHandler (signal, MLton.Signal.Handler.ignore)
	  ; topLevel <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">NONE</FONT></B>)
	  <B><FONT COLOR="#A020F0">end</FONT></B>
	 
      <B><FONT COLOR="#5F9EA0">structure</FONT></B> Mutex <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#5F9EA0">struct</FONT></B>
	    <B><FONT COLOR="#A020F0">datatype</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B> T <B><FONT COLOR="#A020F0">of</FONT></B> {locked: <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B>,
			       waiting: <B><FONT COLOR="#228B22">unit</FONT></B> MLton.Thread.t Queue.t}
	       
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">new</FONT></I></B></FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       T {locked <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> false,
		  waiting <B><FONT COLOR="#5F9EA0">=</FONT></B> Queue.new ()}

<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">lock</FONT></I></B></FONT></B> (T {locked, waiting, ...}, name) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">		  fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B>
		     (<B><FONT COLOR="#A020F0">print</FONT></B> (<B><FONT COLOR="#A020F0">concat</FONT></B> [name, <B><FONT COLOR="#BC8F8F">&quot; lock looping\n&quot;</FONT></B>])
		      ; MLton.Thread.atomicBegin ()
		      ; <B><FONT COLOR="#A020F0">if</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>locked
			   <B><FONT COLOR="#A020F0">then</FONT></B> (<B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;mutex is locked\n&quot;</FONT></B>
				 ; switch (<B><FONT COLOR="#A020F0">fn</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
					   (MLton.Thread.atomicEnd ()
					    ; Queue.enque (waiting, t)
					    ; (next (), ())))
				 ; loop ())
			<B><FONT COLOR="#A020F0">else</FONT></B> (<B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;mutex is not locked\n&quot;</FONT></B>
			      ; locked <B><FONT COLOR="#5F9EA0">:=</FONT></B> true
			      ; MLton.Thread.atomicEnd ()))
	       <B><FONT COLOR="#A020F0">in</FONT></B> loop ()
	       <B><FONT COLOR="#A020F0">end</FONT></B>
	    
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">safeUnlock</FONT></I></B></FONT></B> (T {locked, waiting, ...}) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       (locked <B><FONT COLOR="#5F9EA0">:=</FONT></B> false
		; (<B><FONT COLOR="#A020F0">case</FONT></B> Queue.deque waiting <B><FONT COLOR="#A020F0">of</FONT></B>
		      <B><FONT COLOR="#5F9EA0">NONE</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ()
		    <B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> (<B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;unlock found waiting thread\n&quot;</FONT></B>
				 ; ready t)))

<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">unlock</FONT></I></B></FONT></B> (m: t) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       (<B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;unlock atomicBegin\n&quot;</FONT></B>
		; MLton.Thread.atomicBegin ()
		; safeUnlock m
		; MLton.Thread.atomicEnd ())
	 <B><FONT COLOR="#A020F0">end</FONT></B>

      <B><FONT COLOR="#5F9EA0">structure</FONT></B> Condition <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#5F9EA0">struct</FONT></B>
	    <B><FONT COLOR="#A020F0">datatype</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B> T <B><FONT COLOR="#A020F0">of</FONT></B> {waiting: <B><FONT COLOR="#228B22">unit</FONT></B> MLton.Thread.t Queue.t}

<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">new</FONT></I></B></FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B> T {waiting <B><FONT COLOR="#5F9EA0">=</FONT></B> Queue.new ()}

<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">wait</FONT></I></B></FONT></B> (T {waiting, ...}, m) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       (switch (<B><FONT COLOR="#A020F0">fn</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
			(Mutex.safeUnlock m
			 ; <B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;wait unlocked mutex\n&quot;</FONT></B>
			 ; Queue.enque (waiting, t)
			 ; (next (), ())))
		; Mutex.lock (m, <B><FONT COLOR="#BC8F8F">&quot;wait&quot;</FONT></B>))

<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">signal</FONT></I></B></FONT></B> (T {waiting, ...}) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">case</FONT></B> Queue.deque waiting <B><FONT COLOR="#A020F0">of</FONT></B>
		  <B><FONT COLOR="#5F9EA0">NONE</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ()
		<B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ready t
	 <B><FONT COLOR="#A020F0">end</FONT></B>

   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Mutex <B><FONT COLOR="#5F9EA0">=</FONT></B> Thread.Mutex
<B><FONT COLOR="#5F9EA0">structure</FONT></B> Condition <B><FONT COLOR="#5F9EA0">=</FONT></B> Thread.Condition

<B><FONT COLOR="#A020F0">val</FONT></B> count <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0
<B><FONT COLOR="#A020F0">val</FONT></B> data <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0
<B><FONT COLOR="#A020F0">val</FONT></B> produced <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0
<B><FONT COLOR="#A020F0">val</FONT></B> consumed <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0
<B><FONT COLOR="#A020F0">val</FONT></B> m <B><FONT COLOR="#5F9EA0">=</FONT></B> Mutex.new ()
<B><FONT COLOR="#A020F0">val</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B> Condition.new ()

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">producer</FONT></I></B></FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B>
   for (1, n, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
	(<B><FONT COLOR="#A020F0">print</FONT></B> (<B><FONT COLOR="#A020F0">concat</FONT></B> [<B><FONT COLOR="#BC8F8F">&quot;producer acquiring lock &quot;</FONT></B>, Int.toString i, <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>])
	 ; Mutex.lock (m, <B><FONT COLOR="#BC8F8F">&quot;producer&quot;</FONT></B>)
	 ; <B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;producer acquired lock\n&quot;</FONT></B>
	 ; <B><FONT COLOR="#A020F0">while</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>count <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 <B><FONT COLOR="#A020F0">do</FONT></B> Condition.wait (c, m)
	 ; <B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;producer passed condition\n&quot;</FONT></B>
	 ; data <B><FONT COLOR="#5F9EA0">:=</FONT></B> i
	 ; count <B><FONT COLOR="#5F9EA0">:=</FONT></B> 1
	 ; Condition.signal c
	 ; <B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;producer releasing lock\n&quot;</FONT></B>
	 ; Mutex.unlock m
	 ; <B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;producer released lock\n&quot;</FONT></B>
	 ; produced <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>produced <B><FONT COLOR="#5F9EA0">+</FONT></B> 1))

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">consumer</FONT></I></B></FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#A020F0">let</FONT></B> <B><FONT COLOR="#A020F0">val</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0
   <B><FONT COLOR="#A020F0">in</FONT></B>
      <B><FONT COLOR="#A020F0">while</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>i <B><FONT COLOR="#5F9EA0">&lt;&gt;</FONT></B> n <B><FONT COLOR="#A020F0">do</FONT></B>
	 (<B><FONT COLOR="#A020F0">print</FONT></B> (<B><FONT COLOR="#A020F0">concat</FONT></B> [<B><FONT COLOR="#BC8F8F">&quot;consumer acquiring lock &quot;</FONT></B>, Int.toString (<B><FONT COLOR="#5F9EA0">!</FONT></B>i), <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>])
	  ; Mutex.lock (m, <B><FONT COLOR="#BC8F8F">&quot;consumer&quot;</FONT></B>)
	  ; <B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;consumer acquired lock\n&quot;</FONT></B>
	  ; <B><FONT COLOR="#A020F0">while</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>count <B><FONT COLOR="#5F9EA0">=</FONT></B> 0 <B><FONT COLOR="#A020F0">do</FONT></B> Condition.wait (c, m)
	  ; i <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>data
	  ; count <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0
	  ; Condition.signal c
	  ; <B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;consumer releasing lock\n&quot;</FONT></B>
	  ; Mutex.unlock m
	  ; <B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;consumer released lock\n&quot;</FONT></B>
	  ; consumed <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>consumed <B><FONT COLOR="#5F9EA0">+</FONT></B> 1)
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">atoi</FONT></I></B></FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">case</FONT></B> Int.fromString s <B><FONT COLOR="#A020F0">of</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> num <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> num <B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#5F9EA0">NONE</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 0
<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">printl</FONT></I></B></FONT></B> [] <B><FONT COLOR="#5F9EA0">=</FONT></B> TextIO.<B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B> <B><FONT COLOR="#5F9EA0">|</FONT></B> printl (h<B><FONT COLOR="#5F9EA0">::</FONT></B>t) <B><FONT COLOR="#5F9EA0">=</FONT></B> ( TextIO.<B><FONT COLOR="#A020F0">print</FONT></B> h ; printl t )

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main</FONT></I></B></FONT></B> (name, args) <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#A020F0">let</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">atoi</FONT></B> (<B><FONT COLOR="#5F9EA0">hd</FONT></B> (args <B><FONT COLOR="#5F9EA0">@</FONT></B> [<B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B>]))
      <B><FONT COLOR="#A020F0">val</FONT></B> p <B><FONT COLOR="#5F9EA0">=</FONT></B> Thread.spawn (<B><FONT COLOR="#A020F0">fn</FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> producer n)
      <B><FONT COLOR="#A020F0">val</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B> Thread.spawn (<B><FONT COLOR="#A020F0">fn</FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> consumer n)
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Thread.run ()
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Posix.Process.sleep (Time.fromSeconds 1)
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> printl [Int.toString (<B><FONT COLOR="#5F9EA0">!</FONT></B>produced),
		      <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>,  
		      Int.toString (<B><FONT COLOR="#5F9EA0">!</FONT></B>consumed)]
   <B><FONT COLOR="#A020F0">in</FONT></B>
      ()
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> main ( CommandLine.name (), CommandLine.arguments () )</pre></td></tr></table>
