<span class="line">    1 </span><span class="sym">;;; -*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-
</span><span class="line">    2 </span><span class="sym">;;;</span> $Id<span class="sym">:</span> strcat<span class="sym">.</span>pop11<span class="sym">,</span>v <span class="num">1.1 2004</span><span class="sym">/</span><span class="num">11</span><span class="sym">/</span><span class="num">10 06</span><span class="sym">:</span><span class="num">45</span><span class="sym">:</span><span class="num">39</span> bfulgham Exp $
<span class="line">    3 </span><span class="sym">;;;</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span>constant aString <span class="sym">=</span> <span class="str">'hello</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;
</span><span class="line">    6 </span><span class="sym">
</span><span class="line">    7 </span><span class="sym"></span>define constant procedure get_args<span class="sym">();
</span><span class="line">    8 </span><span class="sym"></span>   <span class="kwa">if</span> null<span class="sym">(</span>poparglist<span class="sym">)</span> then <span class="num">1</span> <span class="kwa">else
</span><span class="line">    9 </span><span class="kwa"></span>      strnumber<span class="sym">(</span> hd<span class="sym">(</span>poparglist<span class="sym">) )
</span><span class="line">   10 </span><span class="sym"></span>   endif
<span class="line">   11 </span>enddefine<span class="sym">;
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span>vars n <span class="sym">=</span> get_args<span class="sym">();
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym"></span>define constant procedure string_concat <span class="sym">(</span>n<span class="sym">);
</span><span class="line">   16 </span><span class="sym"></span>  concat_strings<span class="sym">( [%</span> repeat n times aString endrepeat <span class="sym">%] )
</span><span class="line">   17 </span><span class="sym"></span>enddefine<span class="sym">;
</span><span class="line">   18 </span><span class="sym">
</span><span class="line">   19 </span><span class="sym"></span>format_print<span class="sym">(</span><span class="str">'~A</span><span class="esc">\n</span><span class="str">'</span><span class="sym">, [</span>^<span class="sym">(</span>length<span class="sym">(</span> string_concat<span class="sym">(</span>n<span class="sym">) ))]);</span>
