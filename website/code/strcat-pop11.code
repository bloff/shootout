<span class="sym">;;; -*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-
;;;</span> $Id<span class="sym">:</span> strcat<span class="sym">.</span>pop11<span class="sym">,</span>v <span class="num">1.2 2005</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">13 16</span><span class="sym">:</span><span class="num">24</span><span class="sym">:</span><span class="num">19</span> igouy<span class="sym">-</span>guest Exp $
<span class="sym">;;;</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/
</span>
constant aString <span class="sym">=</span> <span class="str">'hello</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;

</span>define constant procedure get_args<span class="sym">();
</span>   <span class="kwa">if</span> null<span class="sym">(</span>poparglist<span class="sym">)</span> then <span class="num">1</span> <span class="kwa">else
</span>      strnumber<span class="sym">(</span> hd<span class="sym">(</span>poparglist<span class="sym">) )
</span>   endif
enddefine<span class="sym">;

</span>vars n <span class="sym">=</span> get_args<span class="sym">();

</span>define constant procedure string_concat <span class="sym">(</span>n<span class="sym">);
</span>  concat_strings<span class="sym">( [%</span> repeat n times aString endrepeat <span class="sym">%] )
</span>enddefine<span class="sym">;

</span>format_print<span class="sym">(</span><span class="str">'~A</span><span class="esc">\n</span><span class="str">'</span><span class="sym">, [</span>^<span class="sym">(</span>length<span class="sym">(</span> string_concat<span class="sym">(</span>n<span class="sym">) ))]);</span>
