<span class="sym">;;; -*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
<span class="sym">;;;</span> $Id<span class="sym">:</span> strcat<span class="sym">.</span>pop11<span class="sym">,</span>v <span class="num">1.2 2005</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">13 16</span><span class="sym">:</span><span class="num">24</span><span class="sym">:</span><span class="num">19</span> igouy<span class="sym">-</span>guest Exp $
<span class="sym">;;;</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>

constant aString <span class="sym">=</span> <span class="str">'hello</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>

define constant procedure <span class="kwd">get_args</span><span class="sym">();</span>
   <span class="kwa">if</span> <span class="kwd">null</span><span class="sym">(</span>poparglist<span class="sym">)</span> then <span class="num">1</span> <span class="kwa">else</span>
      <span class="kwd">strnumber</span><span class="sym">(</span> <span class="kwd">hd</span><span class="sym">(</span>poparglist<span class="sym">) )</span>
   endif
enddefine<span class="sym">;</span>

vars n <span class="sym">=</span> <span class="kwd">get_args</span><span class="sym">();</span>

define constant procedure <span class="kwd">string_concat</span> <span class="sym">(</span>n<span class="sym">);</span>
  <span class="kwd">concat_strings</span><span class="sym">( [%</span> repeat n times aString endrepeat <span class="sym">%] )</span>
enddefine<span class="sym">;</span>

<span class="kwd">format_print</span><span class="sym">(</span><span class="str">'~A</span><span class="esc">\n</span><span class="str">'</span><span class="sym">, [</span>^<span class="sym">(</span><span class="kwd">length</span><span class="sym">(</span> <span class="kwd">string_concat</span><span class="sym">(</span>n<span class="sym">) ))]);</span>
