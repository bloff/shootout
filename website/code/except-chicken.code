<span class="slc">;;;; -Ob</span>

<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">))</span>

<span class="sym">(</span>define HI <span class="num">0</span><span class="sym">)</span>
<span class="sym">(</span>define LO <span class="num">0</span><span class="sym">)</span>

<span class="sym">(</span>define lo<span class="sym">-</span>exception #f<span class="sym">)</span>
<span class="sym">(</span>define hi<span class="sym">-</span>exception #f<span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>some_fun n<span class="sym">)</span>
  <span class="sym">(</span>hi_fun n<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>hi_fun n<span class="sym">)</span>
  <span class="sym">(</span>when <span class="sym">(</span>call<span class="sym">/</span>cc
	 <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>return<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> hi<span class="sym">-</span>exception return<span class="sym">)</span>
	   <span class="sym">(</span>lo_fun n<span class="sym">)</span>
	   #f<span class="sym">) )</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> HI <span class="sym">(</span>add1 HI<span class="sym">)) ) )</span>

<span class="sym">(</span>define <span class="sym">(</span>lo_fun n<span class="sym">)</span>
  <span class="sym">(</span>when <span class="sym">(</span>call<span class="sym">/</span>cc
	 <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>return<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> lo<span class="sym">-</span>exception return<span class="sym">)</span>
	   <span class="sym">(</span>blowup n<span class="sym">)</span>
	   #f<span class="sym">) )</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> LO <span class="sym">(</span>add1 LO<span class="sym">)) ) )</span>

<span class="sym">(</span>define <span class="sym">(</span>blowup n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>even? n<span class="sym">)</span>
      <span class="sym">(</span>hi<span class="sym">-</span>exception #t<span class="sym">)</span>
      <span class="sym">(</span>lo<span class="sym">-</span>exception #t<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>main #<span class="sym">!</span>optional <span class="sym">(</span>n <span class="str">&quot;1&quot;</span><span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number n<span class="sym">)))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	<span class="sym">((=</span> i n<span class="sym">))</span>
      <span class="sym">(</span>some_fun i<span class="sym">)))</span>
  <span class="sym">(</span><span class="kwa">print</span> <span class="str">&quot;Exceptions: HI=&quot;</span> HI <span class="str">&quot; / LO=&quot;</span> LO<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">apply</span> main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
