<span class="line">    1 </span><span class="slc">;;;; -Ob 
</span><span class="line">    2 </span><span class="slc"></span>
<span class="line">    3 </span> <span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">))
</span><span class="line">    4 </span><span class="sym"> 
</span><span class="line">    5 </span><span class="sym"> (</span>define HI <span class="num">0</span><span class="sym">)
</span><span class="line">    6 </span><span class="sym"> (</span>define LO <span class="num">0</span><span class="sym">)
</span><span class="line">    7 </span><span class="sym"> 
</span><span class="line">    8 </span><span class="sym"> (</span>define lo<span class="sym">-</span>exception #f<span class="sym">)
</span><span class="line">    9 </span><span class="sym"> (</span>define hi<span class="sym">-</span>exception #f<span class="sym">)
</span><span class="line">   10 </span><span class="sym"> 
</span><span class="line">   11 </span><span class="sym"> (</span>define <span class="sym">(</span>some_fun n<span class="sym">)
</span><span class="line">   12 </span><span class="sym">   (</span>hi_fun n<span class="sym">))
</span><span class="line">   13 </span><span class="sym"> 
</span><span class="line">   14 </span><span class="sym"> (</span>define <span class="sym">(</span>hi_fun n<span class="sym">)
</span><span class="line">   15 </span><span class="sym">   (</span>when <span class="sym">(</span>call<span class="sym">/</span>cc
<span class="line">   16 </span>          <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>return<span class="sym">)
</span><span class="line">   17 </span><span class="sym">            (</span><span class="kwa">set</span><span class="sym">!</span> hi<span class="sym">-</span>exception return<span class="sym">)
</span><span class="line">   18 </span><span class="sym">            (</span>lo_fun n<span class="sym">)
</span><span class="line">   19 </span><span class="sym">  </span>           #f<span class="sym">) )
</span><span class="line">   20 </span><span class="sym">     (</span><span class="kwa">set</span><span class="sym">!</span> HI <span class="sym">(</span>add1 HI<span class="sym">)) ) )
</span><span class="line">   21 </span><span class="sym"> 
</span><span class="line">   22 </span><span class="sym"> (</span>define <span class="sym">(</span>lo_fun n<span class="sym">)
</span><span class="line">   23 </span><span class="sym">   (</span>when <span class="sym">(</span>call<span class="sym">/</span>cc
<span class="line">   24 </span>          <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>return<span class="sym">)
</span><span class="line">   25 </span><span class="sym">            (</span><span class="kwa">set</span><span class="sym">!</span> lo<span class="sym">-</span>exception return<span class="sym">)
</span><span class="line">   26 </span><span class="sym">            (</span>blowup n<span class="sym">)
</span><span class="line">   27 </span><span class="sym">  </span>           #f<span class="sym">) )
</span><span class="line">   28 </span><span class="sym">     (</span><span class="kwa">set</span><span class="sym">!</span> LO <span class="sym">(</span>add1 LO<span class="sym">)) ) )
</span><span class="line">   29 </span><span class="sym"> 
</span><span class="line">   30 </span><span class="sym"> (</span>define <span class="sym">(</span>blowup n<span class="sym">)
</span><span class="line">   31 </span><span class="sym">   (</span><span class="kwa">if</span> <span class="sym">(</span>even? n<span class="sym">)
</span><span class="line">   32 </span><span class="sym">       (</span>hi<span class="sym">-</span>exception #t<span class="sym">)
</span><span class="line">   33 </span><span class="sym">       (</span>lo<span class="sym">-</span>exception #t<span class="sym">)))
</span><span class="line">   34 </span><span class="sym"> 
</span><span class="line">   35 </span><span class="sym">         (</span>define <span class="sym">(</span>main #<span class="sym">!</span>optional <span class="sym">(</span>n <span class="str">&quot;1&quot;</span><span class="sym">))
</span><span class="line">   36 </span><span class="sym">   (</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number n<span class="sym">)))
</span><span class="line">   37 </span><span class="sym">     (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
</span><span class="line">   38 </span><span class="sym">         ((=</span> i n<span class="sym">))
</span><span class="line">   39 </span><span class="sym">       (</span>some_fun i<span class="sym">)))
</span><span class="line">   40 </span><span class="sym">   (</span><span class="kwa">print</span> <span class="str">&quot;Exceptions: HI=&quot;</span> HI <span class="str">&quot; / LO=&quot;</span> LO<span class="sym">))
</span><span class="line">   41 </span><span class="sym"> 
</span><span class="line">   42 </span><span class="sym"> (</span><span class="kwa">apply</span> main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span> 
