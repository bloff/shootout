<span class="slc">;;; -*- mode: emacs-lisp -*-
</span><span class="slc">;;; $Id: fibo-xemacs.code,v 1.6 2005-03-31 10:40:17 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="slc">;(setq max-lisp-eval-depth 8000)
</span><span class="slc">;(setq max-specpdl-size 5000)
</span>
<span class="sym">(</span><span class="kwa">defun</span> fib <span class="sym">(</span>n<span class="sym">)
  (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> n <span class="num">2</span><span class="sym">)</span> n<span class="sym">)
	(</span>t <span class="sym">(+ (</span>fib <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)) (</span>fib <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))))))

(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let<span class="sym">* ((</span>arg <span class="sym">(</span><span class="kwa">car command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>args<span class="sym">-</span>left<span class="sym">))
	 (</span>num <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span>string<span class="sym">-</span>to<span class="sym">-</span>number arg<span class="sym">)</span> <span class="num">1</span><span class="sym">)))
    (</span><span class="kwa">princ</span> <span class="sym">(</span>format <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>fib num<span class="sym">)))))</span>
