#<span class="sym">!/</span>bin<span class="sym">/</span>bash
# <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-
</span>PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}
[</span> \<span class="sym">! -</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;
</span>    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0
</span>exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="sym">!</span>#

<span class="slc">;;; $Id: prodcons-rep.code,v 1.4 2005-03-31 10:40:46 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()
  (</span><span class="kwa">open</span>	rep
	rep.system
	rep.threads
	rep.threads.mutex
	rep.threads.condition<span class="sym">-</span>variable<span class="sym">)

  (</span>declare <span class="sym">(</span>unsafe<span class="sym">-</span>for<span class="sym">-</span>call<span class="sym">/</span>cc<span class="sym">))

  (</span>define mutex <span class="sym">(</span>make<span class="sym">-</span>mutex<span class="sym">))
  (</span>define access <span class="sym">(</span>make<span class="sym">-</span>condition<span class="sym">-</span>variable<span class="sym">))
  (</span>define count <span class="num">0</span><span class="sym">)
  (</span>define data <span class="num">-1</span><span class="sym">)
  (</span>define produced <span class="num">0</span><span class="sym">)
  (</span>define consumed <span class="num">0</span><span class="sym">)

  (</span>define <span class="sym">(</span>consumer n<span class="sym">)
    (</span>let <span class="sym">((</span>i <span class="num">0</span><span class="sym">))
      (</span><span class="kwa">while</span> <span class="sym">(/=</span> i n<span class="sym">)
	(</span>obtain<span class="sym">-</span>mutex mutex<span class="sym">)
	(</span><span class="kwa">while</span> <span class="sym">(=</span> count <span class="num">0</span><span class="sym">)
	  (</span>condition<span class="sym">-</span>variable<span class="sym">-</span>wait access mutex<span class="sym">))
	(</span><span class="kwa">setq</span> i data<span class="sym">)
	(</span><span class="kwa">setq</span> count <span class="num">0</span><span class="sym">)
	(</span><span class="kwa">setq</span> consumed <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> consumed<span class="sym">))
	(</span>condition<span class="sym">-</span>variable<span class="sym">-</span>signal access<span class="sym">)
	(</span>release<span class="sym">-</span>mutex mutex<span class="sym">))))

  (</span>define <span class="sym">(</span>producer n<span class="sym">)
    (</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
	((&gt;</span> i n<span class="sym">))
      (</span>obtain<span class="sym">-</span>mutex mutex<span class="sym">)
      (</span><span class="kwa">while</span> <span class="sym">(=</span> count <span class="num">1</span><span class="sym">)
	(</span>condition<span class="sym">-</span>variable<span class="sym">-</span>wait access mutex<span class="sym">))
      (</span><span class="kwa">setq</span> data i<span class="sym">)
      (</span><span class="kwa">setq</span> count <span class="num">1</span><span class="sym">)
      (</span><span class="kwa">setq</span> produced <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> produced<span class="sym">))
      (</span>condition<span class="sym">-</span>variable<span class="sym">-</span>signal access<span class="sym">)
      (</span>release<span class="sym">-</span>mutex mutex<span class="sym">)))

  (</span>let<span class="sym">* ((</span>arg <span class="sym">(</span>get<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>option <span class="str">&quot;--num&quot;</span> t<span class="sym">))
	 (</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span>string<span class="sym">-&gt;</span>number arg<span class="sym">)</span> <span class="num">1</span><span class="sym">))
	 (</span>c <span class="sym">(</span>make<span class="sym">-</span>thread <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span>consumer n<span class="sym">)))))
    (</span>producer n<span class="sym">)
    (</span>thread<span class="sym">-</span>join c<span class="sym">)
    (</span>format standard<span class="sym">-</span>output <span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span> produced consumed<span class="sym">)))</span>
