<span class="com">/* The Great Computer Language Shootout
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy */</span>

<span class="kwa">function</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">){
</span>   <span class="kwa">return</span> <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span> <span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);
}

</span><span class="kwa">function</span> Av<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">){
</span>   <span class="kwa">var</span> t <span class="sym">=</span> Array<span class="sym">(</span>n<span class="sym">);
</span>   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){
</span>      t<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">++)</span> t<span class="sym">[</span>i<span class="sym">] +=</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">];
   }
</span>   <span class="kwa">return</span> t<span class="sym">;
}

</span><span class="kwa">function</span> Atv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">){
</span>   <span class="kwa">var</span> t <span class="sym">=</span> Array<span class="sym">(</span>n<span class="sym">);
</span>   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>n<span class="sym">;</span>i<span class="sym">++){
</span>      t<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">++)</span> t<span class="sym">[</span>i<span class="sym">] +=</span> A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">];
   }
</span>   <span class="kwa">return</span> t<span class="sym">;
}

</span><span class="kwa">function</span> AtAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">){
</span>   <span class="kwa">return</span> Atv<span class="sym">(</span>n<span class="sym">,</span> Av<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">));
}


</span><span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="kwa">var</span> u <span class="sym">=</span> Array<span class="sym">(</span>n<span class="sym">);
</span><span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> u<span class="sym">[</span>i<span class="sym">] =</span>  <span class="num">1.0</span><span class="sym">;

</span><span class="slc">// 20 steps of the power method
</span><span class="kwa">var</span> v <span class="sym">=</span> Array<span class="sym">(</span>n<span class="sym">);
</span><span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span> i<span class="sym">++){
</span>   v <span class="sym">=</span> AtAv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">);
</span>   u <span class="sym">=</span> AtAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">);
}

</span><span class="kwa">var</span> vBv <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> vv <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){
</span>   vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
</span>   vv  <span class="sym">+=</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
}
</span>print<span class="sym">( (</span>Math.sqrt<span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">))</span>.toFixed<span class="sym">(</span><span class="num">9</span><span class="sym">) );</span>
