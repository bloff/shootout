<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; A preliminary version that utilises the GNU Multi Precision [GMP]</span>
<span class="slc">;; library. Two major problems exist:</span>
<span class="slc">;;</span>
<span class="slc">;; * Interface to GMP functionality is presently 'clunky' and quite</span>
<span class="slc">;;   inefficient [a more streamlined version using 'tinyCLOS' will</span>
<span class="slc">;;   be attempted in the near future]</span>
<span class="slc">;;</span>
<span class="slc">;; * Too much GMP-related object creation occurring; hope to minimise</span>
<span class="slc">;;   this, so significantly speeding the program up, in the next</span>
<span class="slc">;;   revision</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>require<span class="sym">-</span>extension gmp<span class="sym">)</span>

<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span><span class="kwa">lambda</span><span class="sym">-</span>lift<span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">*</span>k<span class="sym">*</span> <span class="num">0</span><span class="sym">)</span>
<span class="sym">(</span>define <span class="sym">*</span>y<span class="sym">*</span> <span class="num">0</span><span class="sym">)</span>
<span class="sym">(</span>define <span class="sym">*</span>t<span class="sym">* (</span>make<span class="sym">-</span>mpz<span class="sym">-</span>vector <span class="num">4</span><span class="sym">))</span>
<span class="sym">(</span>define <span class="sym">*</span>z<span class="sym">* (</span>mpz<span class="sym">-</span>vector <span class="str">&quot;1&quot;</span> <span class="str">&quot;0&quot;</span> <span class="str">&quot;0&quot;</span> <span class="str">&quot;1&quot;</span><span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object #<span class="sym">!</span>optional <span class="sym">(</span>value<span class="sym">-</span>as<span class="sym">-</span>string <span class="str">&quot;0&quot;</span><span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>mpz<span class="sym">-</span>object <span class="sym">(</span>make<span class="sym">-</span>mpz_t<span class="sym">)))</span>
    <span class="sym">(</span>mpz_init_set_str mpz<span class="sym">-</span>object value<span class="sym">-</span>as<span class="sym">-</span>string <span class="num">10</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">cons</span> <span class="str">'mpz mpz-object)))</span>
<span class="str"></span>
<span class="str">(define (mpz-object? object)</span>
<span class="str">  (and (pair? object) (eq? (car object) '</span>mpz<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>copy<span class="sym">!</span> mpz<span class="sym">-</span>source<span class="sym">-</span>object mpz<span class="sym">-</span>target<span class="sym">-</span>object<span class="sym">)</span>
  <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> mpz<span class="sym">-</span>target<span class="sym">-</span>object <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>ref mpz<span class="sym">-</span>source<span class="sym">-</span>object<span class="sym">))</span>
  mpz<span class="sym">-</span>target<span class="sym">-</span>object<span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>clone mpz<span class="sym">-</span>object<span class="sym">)</span>
  <span class="sym">(</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>ref mpz<span class="sym">-</span>object<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>clone<span class="sym">!</span> mpz<span class="sym">-</span>object<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>new<span class="sym">-</span>mpz<span class="sym">-</span>object <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>clone mpz<span class="sym">-</span>object<span class="sym">)))</span>
    <span class="sym">(</span>free<span class="sym">-</span>mpz<span class="sym">-</span>object mpz<span class="sym">-</span>object<span class="sym">)</span>
    new<span class="sym">-</span>mpz<span class="sym">-</span>object<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> mpz<span class="sym">-</span>object value<span class="sym">-</span>as<span class="sym">-</span>string<span class="sym">)</span>
  <span class="sym">(</span>mpz_set_str <span class="sym">(</span><span class="kwa">cdr</span> mpz<span class="sym">-</span>object<span class="sym">)</span> value<span class="sym">-</span>as<span class="sym">-</span>string <span class="num">10</span><span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>ref mpz<span class="sym">-</span>object<span class="sym">)</span>
  <span class="sym">(</span>mpz_get_str #f <span class="num">10</span> <span class="sym">(</span><span class="kwa">cdr</span> mpz<span class="sym">-</span>object<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>object<span class="sym">-&gt;</span>mpz object<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">cond</span>
    <span class="sym">((</span>mpz<span class="sym">-</span>object? object<span class="sym">) (</span>mpz<span class="sym">-</span>object<span class="sym">-</span>clone object<span class="sym">))</span>
    <span class="sym">((</span>string? object<span class="sym">) (</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object object<span class="sym">))</span>
    <span class="sym">((</span>number? object<span class="sym">) (</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object <span class="sym">(</span>number<span class="sym">-&gt;</span>string object<span class="sym">)))</span>
    <span class="sym">(</span>else <span class="sym">(</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object<span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>mpz<span class="sym">-</span>converter object<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">cond</span>
    <span class="sym">((</span>mpz<span class="sym">-</span>object? object<span class="sym">) (</span><span class="kwa">lambda</span> <span class="sym">(</span>x<span class="sym">)</span> x<span class="sym">))</span>
    <span class="sym">((</span>string? object<span class="sym">) (</span><span class="kwa">lambda</span> <span class="sym">(</span>x<span class="sym">) (</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object x<span class="sym">)))</span>
    <span class="sym">((</span>number? object<span class="sym">) (</span><span class="kwa">lambda</span> <span class="sym">(</span>x<span class="sym">) (</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object <span class="sym">(</span>number<span class="sym">-&gt;</span>string x<span class="sym">))))</span>
    <span class="sym">(</span>else <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x<span class="sym">)</span> x<span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>arithmetic op left_ right_  #<span class="sym">!</span>optional <span class="sym">(</span>result <span class="sym">(</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object<span class="sym">)))</span>
  <span class="sym">(</span>let <span class="sym">((</span>left <span class="sym">(</span>object<span class="sym">-&gt;</span>mpz left_<span class="sym">)) (</span>right <span class="sym">(</span>object<span class="sym">-&gt;</span>mpz right_<span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">cond</span>
      <span class="sym">((</span><span class="kwa">eq</span>? op <span class="str">'+) (mpz_add (cdr result) (cdr left) (cdr right)))</span>
<span class="str">      ((eq? op '</span><span class="sym">-) (</span>mpz_sub <span class="sym">(</span><span class="kwa">cdr</span> result<span class="sym">) (</span><span class="kwa">cdr</span> left<span class="sym">) (</span><span class="kwa">cdr</span> right<span class="sym">)))</span>
      <span class="sym">((</span><span class="kwa">eq</span>? op <span class="str">'*) (mpz_mul (cdr result) (cdr left) (cdr right)))</span>
<span class="str">      ((eq? op '</span><span class="sym">/) (</span>mpz_tdiv_q <span class="sym">(</span><span class="kwa">cdr</span> result<span class="sym">) (</span><span class="kwa">cdr</span> left<span class="sym">) (</span><span class="kwa">cdr</span> right<span class="sym">)))</span>
      <span class="sym">((</span><span class="kwa">eq</span>? op <span class="str">'%) (mpz_tdiv_r (cdr result) (cdr left) (cdr right)))</span>
<span class="str">      (else (make-mpz-object)))</span>
<span class="str">    (free-mpz-object left)</span>
<span class="str">    (free-mpz-object right)</span>
<span class="str">    result))</span>
<span class="str"></span>
<span class="str">(define (mpz-object-cmp left_ right_)</span>
<span class="str">  (let* ((left (object-&gt;mpz left_)) (right (object-&gt;mpz right_))</span>
<span class="str">         (result (mpz_cmp (cdr left) (cdr right))))</span>
<span class="str">    (free-mpz-object left)</span>
<span class="str">    (free-mpz-object right)</span>
<span class="str">    (eq? result 0)))</span>
<span class="str"></span>
<span class="str">(define (free-mpz-object mpz-object)</span>
<span class="str">  (mpz_clear (cdr mpz-object)))</span>
<span class="str"></span>
<span class="str">; -------------------------------</span>
<span class="str"></span>
<span class="str">(define (mpz-vector #!rest list-of-values)</span>
<span class="str">  (let ((mpz-vector-object (make-vector (length list-of-values)))</span>
<span class="str">        (converter (make-mpz-converter (car list-of-values))))</span>
<span class="str">    (let loop ((lovas list-of-values) (i 0))</span>
<span class="str">      (if (null? lovas) mpz-vector-object</span>
<span class="str">      ; else</span>
<span class="str">      (begin</span>
<span class="str">        (vector-set! mpz-vector-object i (converter (car lovas)))</span>
<span class="str">        (loop (cdr lovas) (add1 i)) ))) ))</span>
<span class="str"></span>
<span class="str">(define (make-mpz-vector size #!optional (initial-value-as-string &quot;0&quot;))</span>
<span class="str">  (let ((mpz-vector-object (make-vector size)))</span>
<span class="str">    (do ((i 0 (add1 i)))</span>
<span class="str">        ((= size i))</span>
<span class="str">      (vector-set! mpz-vector-object i (make-mpz-object initial-value-as-string)))</span>
<span class="str">  mpz-vector-object))</span>
<span class="str"></span>
<span class="str">(define (mpz-vector-copy mpz-vector-source mpz-vector-target)</span>
<span class="str">  (let ((mpz-vector-source-length (vector-length mpz-vector-source)))</span>
<span class="str">    (do ((i 0 (add1 i)))</span>
<span class="str">        ((= mpz-vector-source-length i))</span>
<span class="str">      (mpz-vector-set! mpz-vector-target i (mpz-vector-ref mpz-vector-source i)))</span>
<span class="str">  mpz-vector-target))</span>
<span class="str"></span>
<span class="str">(define (mpz-vector-copy! mpz-vector-source mpz-vector-target)</span>
<span class="str">  (mpz-vector-copy mpz-vector-source mpz-vector-target)</span>
<span class="str">  (free-mpz-vector mpz-vector-source)</span>
<span class="str">  mpz-vector-target)</span>
<span class="str"></span>
<span class="str">(define (mpz-vector-set! mpz-vector-object i value-as-string)</span>
<span class="str">  (mpz-object-set! (vector-ref mpz-vector-object i) value-as-string))</span>
<span class="str"></span>
<span class="str">(define (mpz-vector-ref mpz-vector-object i)</span>
<span class="str">  (mpz-object-ref (vector-ref mpz-vector-object i)))</span>
<span class="str"></span>
<span class="str">(define (free-mpz-vector mpz-vector-object)</span>
<span class="str">  (let ((mpz-vector-object-length (vector-length mpz-vector-object)))</span>
<span class="str">    (do ((i 0 (add1 i)))</span>
<span class="str">        ((= mpz-vector-object-length i))</span>
<span class="str">      (free-mpz-object (vector-ref mpz-vector-object i)) )))</span>
<span class="str"></span>
<span class="str">; -------------------------------</span>
<span class="str"></span>
<span class="str">(define (compose a b #!optional (value-as-mpz-vector (make-mpz-vector 4)))</span>
<span class="str">  (let* ((l1 (mpz-object-arithmetic '</span><span class="sym">* (</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>ref a <span class="num">0</span><span class="sym">) (</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>ref b <span class="num">1</span><span class="sym">)))</span>
         <span class="sym">(</span>r1 <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>arithmetic <span class="str">'* (mpz-vector-ref a 1) (mpz-vector-ref b 3)))</span>
<span class="str">         (l2 (mpz-object-arithmetic '</span><span class="sym">* (</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>ref a <span class="num">2</span><span class="sym">) (</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>ref b <span class="num">0</span><span class="sym">)))</span>
         <span class="sym">(</span>r2 <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>arithmetic <span class="str">'* (mpz-vector-ref a 3) (mpz-vector-ref b 2)))</span>
<span class="str">         (l3 (mpz-object-arithmetic '</span><span class="sym">* (</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>ref a <span class="num">2</span><span class="sym">) (</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>ref b <span class="num">1</span><span class="sym">)))</span>
         <span class="sym">(</span>r3 <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>arithmetic <span class="str">'* (mpz-vector-ref a 3) (mpz-vector-ref b 3))))</span>
<span class="str">    (mpz-vector-copy!</span>
<span class="str">      (mpz-vector</span>
<span class="str">        (mpz-object-arithmetic '</span><span class="sym">* (</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>ref a <span class="num">0</span><span class="sym">) (</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>ref b <span class="num">0</span><span class="sym">))</span>
        <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>arithmetic <span class="str">'+ l1 r1)</span>
<span class="str">        (mpz-object-arithmetic '</span><span class="sym">+</span> l2 r2<span class="sym">)</span>
        <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>arithmetic <span class="str">'+ l3 r3))</span>
<span class="str">      value-as-mpz-vector)</span>
<span class="str">    (free-mpz-object l1)</span>
<span class="str">    (free-mpz-object r1)</span>
<span class="str">    (free-mpz-object l2)</span>
<span class="str">    (free-mpz-object r2)</span>
<span class="str">    (free-mpz-object l3)</span>
<span class="str">    (free-mpz-object r3)</span>
<span class="str">    value-as-mpz-vector))</span>
<span class="str"></span>
<span class="str">; -------------</span>
<span class="str"></span>
<span class="str">(define (extract a j)</span>
<span class="str">  (let* ((left (mpz-object-arithmetic '</span><span class="sym">* (</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>ref a <span class="num">0</span><span class="sym">)</span> j<span class="sym">))</span>
         <span class="sym">(</span>right <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>arithmetic <span class="str">'* (mpz-vector-ref a 2) j))</span>
<span class="str">         (result (mpz-object-arithmetic '</span><span class="sym">/</span>
           <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>arithmetic <span class="str">'+ left (mpz-vector-ref a 1) left)</span>
<span class="str">           (mpz-object-arithmetic '</span><span class="sym">+</span> right <span class="sym">(</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>ref a <span class="num">3</span><span class="sym">)</span> right<span class="sym">)))</span>
         <span class="sym">(</span>value<span class="sym">-</span>as<span class="sym">-</span>string <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>ref result<span class="sym">)))</span>
    <span class="sym">(</span>free<span class="sym">-</span>mpz<span class="sym">-</span>object left<span class="sym">)</span>
    <span class="sym">(</span>free<span class="sym">-</span>mpz<span class="sym">-</span>object right<span class="sym">)</span>
    <span class="sym">(</span>free<span class="sym">-</span>mpz<span class="sym">-</span>object result<span class="sym">)</span>
    value<span class="sym">-</span>as<span class="sym">-</span>string<span class="sym">))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define <span class="sym">(</span>pidigits c<span class="sym">)</span>
  <span class="sym">(</span>let loop<span class="sym">-</span>o <span class="sym">((</span>i <span class="num">0</span><span class="sym">) (</span>r <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">cond</span>
      <span class="sym">((&lt;</span> i c<span class="sym">)</span>
        <span class="sym">(</span>let loop<span class="sym">-</span>i <span class="sym">((</span>y <span class="sym">(</span>extract <span class="sym">*</span>z<span class="sym">*</span> <span class="num">3</span><span class="sym">)))</span>
          <span class="sym">(</span><span class="kwa">cond</span>
            <span class="sym">((</span>string<span class="sym">=</span>? y <span class="sym">(</span>extract <span class="sym">*</span>z<span class="sym">*</span> <span class="num">4</span><span class="sym">))</span>
              <span class="sym">(</span><span class="kwa">set</span><span class="sym">! *</span>y<span class="sym">* (</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> <span class="str">&quot;-&quot;</span> y<span class="sym">)))</span>
              <span class="sym">(</span>mpz<span class="sym">-</span>object<span class="sym">-</span>arithmetic <span class="str">'* *y* 10 *y*)</span>
<span class="str">              (set! *t* (mpz-vector &quot;10&quot; (mpz-object-ref *y*) &quot;0&quot; &quot;1&quot;))</span>
<span class="str">              (set! *z* (compose *t* *z* *z*))</span>
<span class="str">              (set! r (string-append r y))</span>
<span class="str">              (free-mpz-vector *t*)</span>
<span class="str">              (free-mpz-object *y*))</span>
<span class="str">            (else</span>
<span class="str">              (set! *k* (add1 *k*))</span>
<span class="str">              (set! *t* (mpz-vector *k* (+ (* 4 *k*) 2) 0 (+ 1 (* 2 *k*))))</span>
<span class="str">              (set! *z* (compose *z* *t* *z*))</span>
<span class="str">              (free-mpz-vector *t*)</span>
<span class="str">              (loop-i (extract *z* 3)))))</span>
<span class="str">        (loop-o (add1 i) r))</span>
<span class="str">      (else r))))</span>
<span class="str"></span>
<span class="str">; -------------------------------</span>
<span class="str"></span>
<span class="str">(define (main args)</span>
<span class="str">  (let ((n (if (null? args)</span>
<span class="str">               1</span>
<span class="str">               (string-&gt;number (car args)))) )</span>
<span class="str"></span>
<span class="str">    (let loop ((i 10))</span>
<span class="str">      (cond</span>
<span class="str">         ((&lt;= i n)</span>
<span class="str">           (print (pidigits 10) &quot;</span><span class="esc">\t</span><span class="str">:&quot; i)</span>
<span class="str">           (loop (+ i 10)))</span>
<span class="str">         (else</span>
<span class="str">           (let ((t (- i 10)))</span>
<span class="str">             (if (&lt; t n) (print (pidigits (- n t)) &quot;</span><span class="esc">\t</span><span class="str">:&quot; n)))))) ))</span>
<span class="str"></span>
<span class="str">; -------------------------------</span>
<span class="str"></span>
<span class="str">(main (command-line-arguments))</span>
<span class="str"></span>
