<span class="com">(* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy (Oberon-2 novice)
*)</span>

<span class="kwa">MODULE</span> matrix<span class="sym">;
</span><span class="kwa">IMPORT</span> Shootout<span class="sym">,</span> Out<span class="sym">;

</span><span class="kwa">CONST
</span>   size <span class="sym">=</span> <span class="num">30</span><span class="sym">;
</span>   rowSize <span class="sym">=</span> size<span class="sym">;
</span>   rowLast <span class="sym">=</span> rowSize <span class="num">- 1</span><span class="sym">;
</span>   colSize <span class="sym">=</span> size<span class="sym">;
</span>   colLast <span class="sym">=</span> colSize <span class="num">- 1</span><span class="sym">;

</span><span class="kwa">TYPE
</span>   Matrix <span class="sym">=</span> <span class="kwa">ARRAY</span> rowSize<span class="sym">,</span> colSize <span class="kwa">OF</span> <span class="kwb">LONGINT</span><span class="sym">;

</span><span class="kwa">VAR
</span>   n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span>   m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">:</span> Matrix<span class="sym">;


</span><span class="kwa">PROCEDURE</span> MakeMatrix<span class="sym">(</span><span class="kwa">VAR</span> m<span class="sym">:</span> Matrix<span class="sym">);
</span><span class="kwa">VAR</span> i<span class="sym">,</span> j<span class="sym">,</span> count<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="kwa">BEGIN
</span>   count <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> rowLast <span class="kwa">DO
</span>      FOR j <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> colLast <span class="kwa">DO
</span>         m<span class="sym">[</span>i<span class="sym">,</span>j<span class="sym">] :=</span> count<span class="sym">;
</span>         <span class="kwa">INC</span><span class="sym">(</span>count<span class="sym">);
</span>      <span class="kwa">END</span><span class="sym">;
</span>   <span class="kwa">END</span><span class="sym">;
</span><span class="kwa">END</span> MakeMatrix<span class="sym">;


</span><span class="kwa">PROCEDURE</span> MatrixMultiply<span class="sym">(</span>leftm<span class="sym">,</span> rightm<span class="sym">:</span> Matrix<span class="sym">;</span> <span class="kwa">VAR</span> m<span class="sym">:</span> Matrix<span class="sym">);
</span><span class="kwa">VAR</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> sumOfProduct<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="kwa">BEGIN
</span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> rowLast <span class="kwa">DO
</span>      FOR j <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> colLast <span class="kwa">DO
</span>         sumOfProduct <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	 FOR k <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> colLast <span class="kwa">DO
            INC</span><span class="sym">(</span>sumOfProduct<span class="sym">,</span> leftm<span class="sym">[</span>i<span class="sym">,</span>k<span class="sym">] *</span> rightm<span class="sym">[</span>k<span class="sym">,</span>j<span class="sym">]);
</span>         <span class="kwa">END</span><span class="sym">;
</span>	 m<span class="sym">[</span>i<span class="sym">,</span>j<span class="sym">] :=</span> sumOfProduct<span class="sym">;
</span>      <span class="kwa">END</span><span class="sym">;
</span>   <span class="kwa">END</span><span class="sym">;
</span><span class="kwa">END</span> MatrixMultiply<span class="sym">;


</span><span class="kwa">BEGIN
</span>   n <span class="sym">:=</span> Shootout<span class="sym">.</span>Argi<span class="sym">();

</span>   MakeMatrix<span class="sym">(</span>m1<span class="sym">);
</span>   MakeMatrix<span class="sym">(</span>m2<span class="sym">);

</span>   <span class="kwa">WHILE</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">DO
      DEC</span><span class="sym">(</span>n<span class="sym">);
</span>      MatrixMultiply<span class="sym">(</span>m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);
</span>   <span class="kwa">END</span><span class="sym">;

</span>   Out<span class="sym">.</span>Int<span class="sym">(</span>mm<span class="sym">[</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">],</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Char<span class="sym">(</span><span class="num">20X</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>mm<span class="sym">[</span><span class="num">2</span><span class="sym">,</span><span class="num">3</span><span class="sym">],</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Char<span class="sym">(</span><span class="num">20X</span><span class="sym">);
</span>   Out<span class="sym">.</span>Int<span class="sym">(</span>mm<span class="sym">[</span><span class="num">3</span><span class="sym">,</span><span class="num">2</span><span class="sym">],</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Char<span class="sym">(</span><span class="num">20X</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>mm<span class="sym">[</span><span class="num">4</span><span class="sym">,</span><span class="num">4</span><span class="sym">],</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="kwa">END</span> matrix<span class="sym">.</span>
