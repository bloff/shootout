<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// $Id: regexmatch-sablevm.code,v 1.1 2004-11-02 08:52:41 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://www.bagley.org/~doug/shootout/
</FONT></I>
<B><FONT COLOR="#A020F0">import</FONT></B> java.io.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.util.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.text.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.lang.reflect.*;
<B><FONT COLOR="#A020F0">import</FONT></B> com.oroinc.text.regex.*;

<B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">class</FONT></B> regexmatch {

    <B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">static</FONT></B> <B><FONT COLOR="#A020F0">void</FONT></B> main(String args[])
	<B><FONT COLOR="#A020F0">throws</FONT></B> IOException, MalformedPatternException {

	<B><FONT COLOR="#A020F0">int</FONT></B> n = Integer.parseInt(args[0]);
	LinkedList lines = <B><FONT COLOR="#A020F0">new</FONT></B> LinkedList();
	<B><FONT COLOR="#A020F0">try</FONT></B> {
            BufferedReader in = <B><FONT COLOR="#A020F0">new</FONT></B> BufferedReader(<B><FONT COLOR="#A020F0">new</FONT></B> InputStreamReader(System.in));
	    String line;
	    <B><FONT COLOR="#A020F0">while</FONT></B> ((line = in.readLine()) != <B><FONT COLOR="#A020F0">null</FONT></B>) {
		lines.addLast(line);
	    }
	    in.close();
        } <B><FONT COLOR="#A020F0">catch</FONT></B> (IOException e) {
            System.err.println(e);
            <B><FONT COLOR="#A020F0">return</FONT></B>;
        }

	String regex = 
	    <B><FONT COLOR="#BC8F8F">&quot;(?: ^ | [^\\d\\(])		# must be preceeded by non-digit\n&quot;</FONT></B> +
	    <B><FONT COLOR="#BC8F8F">&quot;(?:			# area code is 3 digits\n&quot;</FONT></B> +
	    <B><FONT COLOR="#BC8F8F">&quot; \\((\\d\\d\\d)\\)		# match 1: with parens\n&quot;</FONT></B> +
	    <B><FONT COLOR="#BC8F8F">&quot;|				# or\n&quot;</FONT></B> +
	    <B><FONT COLOR="#BC8F8F">&quot; (\\d\\d\\d)		# match 2: without parens\n&quot;</FONT></B> +
	    <B><FONT COLOR="#BC8F8F">&quot;)				# if match1 then match right paren\n&quot;</FONT></B> +
	    <B><FONT COLOR="#BC8F8F">&quot;[ ]			# area code followed by one space\n&quot;</FONT></B> +
	    <B><FONT COLOR="#BC8F8F">&quot;(\\d\\d\\d)		# match 3: prefix of 3 digits\n&quot;</FONT></B> +
	    <B><FONT COLOR="#BC8F8F">&quot;[ -]			# separator is either space or dash\n&quot;</FONT></B> +
	    <B><FONT COLOR="#BC8F8F">&quot;(\\d\\d\\d\\d)		# match 4: last 4 digits\n&quot;</FONT></B> +
	    <B><FONT COLOR="#BC8F8F">&quot;(?:\\D|$)			# must be followed by a non-digit\n&quot;</FONT></B>;

	PatternMatcher matcher = <B><FONT COLOR="#A020F0">new</FONT></B> Perl5Matcher();
	PatternCompiler compiler = <B><FONT COLOR="#A020F0">new</FONT></B> Perl5Compiler();
	Pattern pattern = <B><FONT COLOR="#A020F0">null</FONT></B>;

	<B><FONT COLOR="#A020F0">try</FONT></B> {
	    pattern = compiler.compile(regex, Perl5Compiler.EXTENDED_MASK);
	} <B><FONT COLOR="#A020F0">catch</FONT></B>(MalformedPatternException e) {
	    System.err.println(<B><FONT COLOR="#BC8F8F">&quot;Bad pattern.&quot;</FONT></B>);
	    System.err.println(e.getMessage());
	    System.exit(1);
	}

	<B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#A020F0">int</FONT></B> i = 0; i &lt; n; i++) {
	    LinkedList phones = <B><FONT COLOR="#A020F0">new</FONT></B> LinkedList();
	    <B><FONT COLOR="#A020F0">for</FONT></B> (ListIterator li = lines.listIterator(); li.hasNext();) {
		String line = (String)li.next();
		<B><FONT COLOR="#A020F0">if</FONT></B> (matcher.contains(line, pattern)) {
		    MatchResult match = matcher.getMatch();
		    String num = <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>;
		    <B><FONT COLOR="#A020F0">if</FONT></B> (match.group(1) != <B><FONT COLOR="#A020F0">null</FONT></B>) {
			num = <B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B> + match.group(1) + <B><FONT COLOR="#BC8F8F">&quot;) &quot;</FONT></B> + match.group(3) + <B><FONT COLOR="#BC8F8F">&quot;-&quot;</FONT></B> + match.group(4);
		    } <B><FONT COLOR="#A020F0">else</FONT></B> {
			num = <B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B> + match.group(2) + <B><FONT COLOR="#BC8F8F">&quot;) &quot;</FONT></B> + match.group(3) + <B><FONT COLOR="#BC8F8F">&quot;-&quot;</FONT></B> + match.group(4);
		    }
		    phones.addLast(num);
		}
	    }
	    <B><FONT COLOR="#A020F0">if</FONT></B> (i == (n - 1)) {
		<B><FONT COLOR="#A020F0">int</FONT></B> count = 1;
		<B><FONT COLOR="#A020F0">for</FONT></B> (ListIterator li = phones.listIterator(); li.hasNext();) {
		    String num = (String)li.next();
		    System.out.println(count++ + <B><FONT COLOR="#BC8F8F">&quot;: &quot;</FONT></B> + num);
		}
	    }
	}
    }
}</pre></td></tr></table>
