<span class="slc">// $Id: regexmatch-sablevm.code,v 1.5 2004-11-22 07:08:58 bfulgham Exp $
</span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span>
<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>lang<span class="sym">.</span>reflect<span class="sym">.*;
</span><span class="kwa">import</span> com<span class="sym">.</span>oroinc<span class="sym">.</span>text<span class="sym">.</span>regex<span class="sym">.*;

</span><span class="kwa">public class</span> regexmatch <span class="sym">{

</span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[])
</span>	<span class="kwa">throws</span> <span class="kwc">IOException</span><span class="sym">,</span> MalformedPatternException <span class="sym">{

</span>	<span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>	<span class="kwc">LinkedList</span> lines <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span>	<span class="kwa">try</span> <span class="sym">{
</span>            <span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span>	    <span class="kwc">String</span> line<span class="sym">;
</span>	    <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> in<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">) {
</span>		lines<span class="sym">.</span>addLast<span class="sym">(</span>line<span class="sym">);
	    }
</span>	    in<span class="sym">.</span>close<span class="sym">();
        }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
</span>            <span class="kwa">return</span><span class="sym">;
        }

</span>	<span class="kwc">String</span> regex <span class="sym">=
</span>	    <span class="str">&quot;(?: ^ | [^</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">(])		# must be preceeded by non-digit</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span>	    <span class="str">&quot;(?:			# area code is 3 digits</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span>	    <span class="str">&quot;</span> <span class="esc">\\</span><span class="str">((</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)</span><span class="esc">\\</span><span class="str">)		# match 1: with parens</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span>	    <span class="str">&quot;|				# or</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span>	    <span class="str">&quot; (</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)		# match 2: without parens</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span>	    <span class="str">&quot;)				# if match1 then match right paren</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span>	    <span class="str">&quot;[ ]			# area code followed by one space</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span>	    <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)		# match 3: prefix of 3 digits</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span>	    <span class="str">&quot;[ -]			# separator is either space or dash</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span>	    <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)		# match 4: last 4 digits</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span>	    <span class="str">&quot;(?:</span><span class="esc">\\</span><span class="str">D|$)			# must be followed by a non-digit</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;

</span>	PatternMatcher matcher <span class="sym">=</span> <span class="kwa">new</span> Perl5Matcher<span class="sym">();
</span>	PatternCompiler compiler <span class="sym">=</span> <span class="kwa">new</span> Perl5Compiler<span class="sym">();
</span>	<span class="kwc">Pattern</span> pattern <span class="sym">=</span> null<span class="sym">;

</span>	<span class="kwa">try</span> <span class="sym">{
</span>	    pattern <span class="sym">=</span> compiler<span class="sym">.</span>compile<span class="sym">(</span>regex<span class="sym">,</span> Perl5Compiler<span class="sym">.</span>EXTENDED_MASK<span class="sym">);
	}</span> <span class="kwa">catch</span><span class="sym">(</span>MalformedPatternException e<span class="sym">) {
</span>	    <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Bad pattern.&quot;</span><span class="sym">);
</span>	    <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">.</span>getMessage<span class="sym">());
</span>	    <span class="kwc">System</span><span class="sym">.</span>exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
	}

</span>	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {
</span>	    <span class="kwc">LinkedList</span> phones <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span>	    <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">ListIterator</span> li <span class="sym">=</span> lines<span class="sym">.</span>listIterator<span class="sym">();</span> li<span class="sym">.</span>hasNext<span class="sym">();) {
</span>		<span class="kwc">String</span> line <span class="sym">= (</span><span class="kwc">String</span><span class="sym">)</span>li<span class="sym">.</span>next<span class="sym">();
</span>		<span class="kwa">if</span> <span class="sym">(</span>matcher<span class="sym">.</span>contains<span class="sym">(</span>line<span class="sym">,</span> pattern<span class="sym">)) {
</span>		    <span class="kwc">MatchResult</span> match <span class="sym">=</span> matcher<span class="sym">.</span>getMatch<span class="sym">();
</span>		    <span class="kwc">String</span> num <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;
</span>		    <span class="kwa">if</span> <span class="sym">(</span>match<span class="sym">.</span>group<span class="sym">(</span><span class="num">1</span><span class="sym">) !=</span> null<span class="sym">) {
</span>			num <span class="sym">=</span> <span class="str">&quot;(&quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">1</span><span class="sym">) +</span> <span class="str">&quot;) &quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">) +</span> <span class="str">&quot;-&quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">4</span><span class="sym">);
		    }</span> <span class="kwa">else</span> <span class="sym">{
</span>			num <span class="sym">=</span> <span class="str">&quot;(&quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">2</span><span class="sym">) +</span> <span class="str">&quot;) &quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">) +</span> <span class="str">&quot;-&quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">4</span><span class="sym">);
		    }
</span>		    phones<span class="sym">.</span>addLast<span class="sym">(</span>num<span class="sym">);
		}
	    }
</span>	    <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">== (</span>n <span class="num">- 1</span><span class="sym">)) {
</span>		<span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>		<span class="kwa">for</span> <span class="sym">(</span><span class="kwc">ListIterator</span> li <span class="sym">=</span> phones<span class="sym">.</span>listIterator<span class="sym">();</span> li<span class="sym">.</span>hasNext<span class="sym">();) {
</span>		    <span class="kwc">String</span> num <span class="sym">= (</span><span class="kwc">String</span><span class="sym">)</span>li<span class="sym">.</span>next<span class="sym">();
</span>		    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>count<span class="sym">++ +</span> <span class="str">&quot;: &quot;</span> <span class="sym">+</span> num<span class="sym">);
		}
	    }
	}
    }
}</span>
