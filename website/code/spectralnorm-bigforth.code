\ The Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\ contributed by Ian Osgood
\ modified by Bernd Paysan

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

import <span class="kwb">float float</span> also

\ <span class="kwa">return</span> element i<span class="sym">,</span>j of infinite matrix A
<span class="sym">:</span> A&#64; <span class="sym">(</span> i j <span class="sym">--</span> f <span class="sym">)</span>
  over <span class="sym">+</span> dup <span class="num">1</span><span class="sym">+ *</span> <span class="num">2</span><span class="sym">/ +</span> <span class="num">1</span><span class="sym">+</span>  s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f <span class="num">1</span><span class="sym">/</span>f <span class="sym">;</span>

\ multiply vector by matrix A
<span class="sym">:</span> A<span class="sym">* (</span> out in <span class="sym">-- )</span>
  NUM <span class="num">0</span> <span class="kwa">do</span>  <span class="num">0</span>e
    NUM <span class="num">0</span> <span class="kwa">do</span>  dup i floats <span class="sym">+</span> f&#64; j i A&#64; f<span class="sym">*</span> f<span class="sym">+</span>  loop
    over i floats <span class="sym">+</span> f<span class="sym">!</span>
  loop <span class="num">2</span>drop <span class="sym">;</span>

\ multiply vector by matrix A transposed
<span class="sym">:</span> At<span class="sym">* (</span> out in <span class="sym">-- )</span>
  NUM <span class="num">0</span> <span class="kwa">do</span>  <span class="num">0</span>e
    NUM <span class="num">0</span> <span class="kwa">do</span>  dup i floats <span class="sym">+</span> f&#64; i j A&#64; f<span class="sym">*</span> f<span class="sym">+</span>  loop
    over i floats <span class="sym">+</span> f<span class="sym">!</span>
  loop <span class="num">2</span>drop <span class="sym">;</span>

\ composition of A<span class="sym">*</span> <span class="kwa">and</span> At<span class="sym">*</span>
<span class="sym">:</span> AtA<span class="sym">* (</span> out in <span class="sym">-- )</span> falign here dup rot A<span class="sym">*</span> At<span class="sym">* ;</span>

<span class="sym">:</span> <span class="kwd">1efill</span> <span class="sym">(</span> n <span class="sym">-- )</span> <span class="num">0</span> <span class="kwa">do</span> <span class="num">1</span>e f<span class="sym">,</span> loop <span class="sym">;</span>
falign create u NUM <span class="num">1</span>efill           \ unit vector
falign create v NUM floats allot

<span class="sym">:</span> <span class="kwd">approx</span> <span class="sym">( --</span> f <span class="sym">)</span>
  <span class="num">10 0</span> <span class="kwa">do</span>  v u AtA<span class="sym">*</span>  u v AtA<span class="sym">*</span>  loop  \ power method
  <span class="num">0</span>e <span class="kwd">0e</span> <span class="sym">(</span> vBv vv <span class="sym">)</span>
  NUM <span class="num">0</span> <span class="kwa">do</span>
    fswap u i floats <span class="sym">+</span> f&#64; v i floats <span class="sym">+</span> f&#64; f<span class="sym">*</span> f<span class="sym">+</span>
    fswap v i floats <span class="sym">+</span> f&#64; fdup f<span class="sym">*</span> f<span class="sym">+</span>
  loop
  f<span class="sym">/</span> fsqrt <span class="sym">;</span>

approx <span class="num">10</span> set<span class="sym">-</span>precision ff<span class="sym">.</span> cr bye  \ done<span class="sym">!</span>

