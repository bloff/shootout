<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla [with thanks to Kevin Glynn]</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo show<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span> Open<span class="sym">(</span>file text<span class="sym">)</span>
  Regex <span class="kwb">at</span> <span class="str">'x-oz://contrib/regex'</span>

<span class="kwb">define</span>
  <span class="kwa">class</span> TextFile_
    <span class="kwb">from</span> Open.file Open.text
  <span class="kwb">end</span>

  VARIANTS <span class="sym">= [</span>
    <span class="str">&quot;agggtaaa|tttaccct&quot;</span> <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
    <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span> <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
    <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span> <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
    <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span> <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
    <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">]</span>

  IUBS <span class="sym">=</span> iubs<span class="sym">(</span><span class="str">'B'</span><span class="sym">:</span><span class="str">&quot;(c|g|t)&quot;</span> <span class="str">'D'</span><span class="sym">:</span><span class="str">&quot;(a|g|t)&quot;</span> <span class="str">'H'</span><span class="sym">:</span><span class="str">&quot;(a|c|t)&quot;</span> <span class="str">'K'</span><span class="sym">:</span><span class="str">&quot;(g|t)&quot;</span>
              <span class="str">'M'</span><span class="sym">:</span><span class="str">&quot;(a|c)&quot;</span> <span class="str">'N'</span><span class="sym">:</span><span class="str">&quot;(a|c|g|t)&quot;</span> <span class="str">'R'</span><span class="sym">:</span><span class="str">&quot;(a|g)&quot;</span> <span class="str">'S'</span><span class="sym">:</span><span class="str">&quot;(c|g)&quot;</span>
              <span class="str">'V'</span><span class="sym">:</span><span class="str">&quot;(a|c|g)&quot;</span> <span class="str">'W'</span><span class="sym">:</span><span class="str">&quot;(a|t)&quot;</span> <span class="str">'Y'</span><span class="sym">:</span><span class="str">&quot;(c|t)&quot;</span><span class="sym">)</span>

  NEWLINE <span class="sym">=</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>

  Initial_Length Code_Length SEQ <span class="sym">= {</span>NewCell <span class="kwa">nil</span><span class="sym">}</span>

<span class="kwb">in</span>
  <span class="slc">% Load file as a list and record its length</span>
  SEQ <span class="sym">:= {{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}</span> read<span class="sym">(</span>list<span class="sym">:</span>$ size<span class="sym">:</span>all<span class="sym">)}</span>
  Initial_Length <span class="sym">= {</span>Length &#64;SEQ<span class="sym">}</span>

  <span class="slc">% Remove newline and segment divider line occurrences</span>
  SEQ <span class="sym">:= {</span>Regex.replace &#64;SEQ <span class="sym">{</span>Regex.make <span class="str">&quot;(&gt;.*</span><span class="esc">\n</span><span class="str">)|(</span><span class="esc">\n</span><span class="str">)&quot;</span><span class="sym">}</span> <span class="kwb">fun</span> <span class="sym">{</span>$ X Y<span class="sym">}</span> <span class="str">&quot;&quot;</span> <span class="kwb">end</span><span class="sym">}</span>
  Code_Length <span class="sym">= {</span>ByteString.length &#64;SEQ<span class="sym">}</span>

  <span class="slc">% Perform regexp counts</span>
  <span class="kwb">for</span> Item <span class="kwb">in</span> VARIANTS <span class="kwb">do</span>
    <span class="sym">{</span>System.showInfo Item # <span class="str">&quot; &quot;</span> # <span class="sym">{</span>Length <span class="sym">{</span>Regex.allMatches <span class="sym">{</span>Regex.make Item<span class="sym">}</span> &#64;SEQ<span class="sym">}}}</span>
  <span class="kwb">end</span>

  <span class="slc">% Perform replacements</span>
  <span class="kwb">for</span> Key <span class="kwb">in</span> <span class="sym">{</span>Arity IUBS<span class="sym">}</span> <span class="kwb">do</span>
    SEQ <span class="sym">:=</span>
      <span class="sym">{</span>Regex.replace
        &#64;SEQ
        <span class="sym">{</span>Regex.make <span class="sym">{</span>AtomToString Key<span class="sym">}}</span>
        <span class="kwb">fun</span> <span class="sym">{</span>$ X match<span class="sym">(</span><span class="num">0</span><span class="sym">:</span>S#E<span class="sym">)}</span> IUBS.<span class="sym">{</span>StringToAtom <span class="sym">{</span>ByteString.toString <span class="sym">{</span>ByteString.slice X S E<span class="sym">}}}</span> <span class="kwb">end</span><span class="sym">}</span>
  <span class="kwb">end</span>

  <span class="slc">% Print statistics</span>
  <span class="sym">{</span>System.showInfo NEWLINE # Initial_Length # NEWLINE # Code_Length # NEWLINE # <span class="sym">{</span>ByteString.length &#64;SEQ<span class="sym">}}</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

