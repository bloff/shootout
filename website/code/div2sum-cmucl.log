BUILD COMMANDS FOR: div2sum.cmucl

Fri Nov 26 18:24:44 PST 2004

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "div2sum.cmucl_compile")'
### START div2sum.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "div2sum.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END div2sum.cmucl_compile

; Loading #p"/opt/shootout/shootout/bench/div2sum/tmp/div2sum.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 26 NOV 04 06:24:44 pm.
; Compiling: /opt/shootout/shootout/bench/div2sum/tmp/div2sum.cmucl 26 NOV 04 06:24:44 pm

; Converted CREATE-N.
; Converted ITERATIVE-DIV2.
; Converted RECURSIVE-DIV2.
; Converted DIV2.
; Converted MAIN.
; Compiling DEFUN CREATE-N: 

; 
; 
; File: /opt/shootout/shootout/bench/div2sum/tmp/div2sum.cmucl

; In: DEFUN CREATE-N

;   (= N 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to open code because:
;     Operands might not be the same type.
; 
;   (1- N)
; ==>
;   (- N 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN DIV2

;   (= N 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to open code because:
;     Operands might not be the same type.
; 
;   (1- N)
; ==>
;   (- N 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (LENGTH (ITERATIVE-DIV2 LST))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a SEQUENCE, not a VECTOR.
; 
;   (+ SUM (LENGTH #) (LENGTH #))
; --> + 
; ==>
;   (+ SUM (LENGTH #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; ==>
;   (+ (+ SUM #) (LENGTH #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (1- N)
; ==>
;   (- N 1)
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
;   (+ SUM (LENGTH #) (LENGTH #))
; --> + 
; ==>
;   (+ SUM (LENGTH #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 
; ==>
;   (+ (+ SUM #) (LENGTH #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 

; In: DEFUN CREATE-N

;   (1- N)
; ==>
;   (- N 1)
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   26 notes


; div2sum.x86f written.
; Compilation finished in 0:00:00.
### START div2sum.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "div2sum.x86f" :verbose nil :print nil)
(main) (quit)
### END div2sum.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "div2sum.cmucl_run" :verbose nil :print nil)' %A


PROGRAM OUTPUT
==============
12022838
