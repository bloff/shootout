<span class="com">(* chameneos.ml</span>
<span class="com"> *</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Christophe TROESTLER</span>
<span class="com"> *)</span>

<span class="kwa">open</span> Printf

<span class="kwa">type</span> color <span class="sym">=</span> B <span class="sym">|</span> R <span class="sym">|</span> Y <span class="sym">|</span> Faded

<span class="kwa">let</span> compl c1 c2 <span class="sym">=</span> <span class="kwa">match</span> c1<span class="sym">,</span> c2 <span class="kwa">with</span>
  <span class="sym">|</span> Faded<span class="sym">,</span> _ <span class="sym">|</span> _<span class="sym">,</span> Faded <span class="sym">-&gt;</span> Faded <span class="sym">|</span> B<span class="sym">,</span> B <span class="sym">-&gt;</span> B <span class="sym">|</span> R<span class="sym">,</span> R <span class="sym">-&gt;</span> R <span class="sym">|</span> Y<span class="sym">,</span> Y <span class="sym">-&gt;</span> Y
  <span class="sym">|</span> B<span class="sym">,</span> R <span class="sym">|</span> R<span class="sym">,</span> B <span class="sym">-&gt;</span> Y   <span class="sym">|</span> B<span class="sym">,</span> Y <span class="sym">|</span> Y<span class="sym">,</span> B <span class="sym">-&gt;</span> R   <span class="sym">|</span> R<span class="sym">,</span> Y <span class="sym">|</span> Y<span class="sym">,</span> R <span class="sym">-&gt;</span> B


<span class="kwa">let</span> enter <span class="sym">=</span> Mutex.create<span class="sym">()</span> <span class="com">(* protect thr following vars *)</span>
<span class="kwa">let</span> nmeetings <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">let</span> is_first <span class="sym">=</span> ref <span class="kwa">true</span>
<span class="kwa">let</span> color1 <span class="sym">=</span> ref B <span class="kwa">and</span> color2 <span class="sym">=</span> ref B
<span class="kwa">let</span> second_done <span class="sym">=</span> Condition.create<span class="sym">()</span>

<span class="kwa">let</span> meet c <span class="sym">=</span>
  Mutex.lock enter<span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">!</span>nmeetings <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(</span>
    <span class="kwa">if</span> <span class="sym">!</span>is_first <span class="kwa">then</span> <span class="sym">(</span>
      color1 <span class="sym">:=</span> c<span class="sym">;</span>
      is_first <span class="sym">:=</span> <span class="kwa">false</span><span class="sym">;</span>
      Condition.wait second_done enter<span class="sym">;</span>
      <span class="kwa">let</span> other_color <span class="sym">= !</span>color2 <span class="kwa">in</span>
      Mutex.unlock enter<span class="sym">;</span>
      other_color
    <span class="sym">)</span>
    <span class="kwa">else</span> <span class="sym">(</span>
      is_first <span class="sym">:=</span> <span class="kwa">true</span><span class="sym">;</span>
      color2 <span class="sym">:=</span> c<span class="sym">;</span>
      decr nmeetings<span class="sym">;</span>
      <span class="kwa">let</span> other_color <span class="sym">= !</span>color1 <span class="kwa">in</span>
      Condition.signal second_done<span class="sym">;</span>  Mutex.unlock enter<span class="sym">;</span>
      other_color
    <span class="sym">))</span>
  <span class="kwa">else</span> <span class="sym">(</span>Mutex.unlock enter<span class="sym">;</span>  Faded<span class="sym">)</span>


<span class="kwa">let rec</span> creature meetings <span class="sym">=</span> <span class="kwa">function</span>
  <span class="sym">|</span> Faded <span class="sym">-&gt;</span> decr meetings
  <span class="sym">|</span> c <span class="sym">-&gt;</span> <span class="kwa">let</span> c' <span class="sym">=</span> meet c <span class="kwa">in</span> incr meetings<span class="sym">;</span> creature meetings <span class="sym">(</span>compl c c'<span class="sym">)</span>

<span class="kwa">let</span> <span class="sym">() =</span>
  nmeetings <span class="sym">:= (</span><span class="kwa">try</span> int_of_string <span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwa">let</span> create c <span class="sym">=</span> <span class="kwa">let</span> n <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in</span> <span class="sym">(</span>Thread.create <span class="sym">(</span>creature n<span class="sym">)</span> c<span class="sym">,</span> n<span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">let</span> cr <span class="sym">=</span> List.map create <span class="sym">[</span>B<span class="sym">;</span> R<span class="sym">;</span> Y<span class="sym">;</span> B<span class="sym">]</span> <span class="kwa">in</span>
  printf <span class="str">&quot;%i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>List.fold_left <span class="sym">(</span><span class="kwa">fun</span> s <span class="sym">(</span>t<span class="sym">,</span>i<span class="sym">) -&gt;</span> Thread.join t<span class="sym">;</span> s <span class="sym">+ !</span>i<span class="sym">)</span> <span class="num">0</span> cr<span class="sym">)</span>

