<span class="com">/* -*- mode: c -*-
 * $Id: prodcons-gcc.code,v 1.12 2005-09-21 04:54:32 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="dir">#include &lt;signal.h&gt;
</span><span class="dir">#include &lt;errno.h&gt;
</span><span class="dir">#include &lt;sys/types.h&gt;
</span><span class="dir">#include &lt;pthread.h&gt;
</span>
pthread_mutex_t mutex<span class="sym">;
</span>pthread_cond_t control<span class="sym">;
</span><span class="kwb">void</span> producer<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">);
</span><span class="kwb">void</span> consumer<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">);
</span><span class="kwb">int</span> count<span class="sym">,</span> data<span class="sym">,</span> consumed<span class="sym">,</span> produced<span class="sym">;


</span><span class="kwb">int
</span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    pthread_t t1<span class="sym">,</span> t2<span class="sym">;

</span>    count <span class="sym">=</span> data <span class="sym">=</span> consumed <span class="sym">=</span> produced <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>    <span class="kwa">if</span> <span class="sym">(</span>pthread_mutex_init<span class="sym">(&amp;</span>mutex<span class="sym">,</span> NULL<span class="sym">)) {
</span>	perror<span class="sym">(</span><span class="str">&quot;pthread_mutex_init&quot;</span><span class="sym">);
</span>	exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
    }
</span>    <span class="kwa">if</span> <span class="sym">(</span>pthread_cond_init<span class="sym">(&amp;</span>control<span class="sym">,</span> NULL<span class="sym">)) {
</span>	perror<span class="sym">(</span><span class="str">&quot;pthread_cond_init&quot;</span><span class="sym">);
</span>	exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
    }
</span>    <span class="kwa">if</span> <span class="sym">(</span>pthread_create<span class="sym">(&amp;</span>t1<span class="sym">, (</span>pthread_attr_t <span class="sym">*)</span>NULL<span class="sym">,
		       (</span><span class="kwb">void</span> <span class="sym">* (*)(</span><span class="kwb">void</span> <span class="sym">*))</span>producer<span class="sym">, (</span><span class="kwb">void</span> <span class="sym">*)&amp;</span>n<span class="sym">)) {
</span>	perror<span class="sym">(</span><span class="str">&quot;pthread_create&quot;</span><span class="sym">);
</span>	exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
    }
</span>    <span class="kwa">if</span> <span class="sym">(</span>pthread_create<span class="sym">(&amp;</span>t2<span class="sym">, (</span>pthread_attr_t <span class="sym">*)</span>NULL<span class="sym">,
		       (</span><span class="kwb">void</span> <span class="sym">* (*)(</span><span class="kwb">void</span> <span class="sym">*))</span>consumer<span class="sym">, (</span><span class="kwb">void</span> <span class="sym">*)&amp;</span>n<span class="sym">)) {
</span>	perror<span class="sym">(</span><span class="str">&quot;pthread_create&quot;</span><span class="sym">);
</span>	exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
    }

</span>    pthread_join<span class="sym">(</span>t1<span class="sym">,</span> NULL<span class="sym">);
</span>    pthread_join<span class="sym">(</span>t2<span class="sym">,</span> NULL<span class="sym">);
</span>    fprintf<span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> produced<span class="sym">,</span> consumed<span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}


</span><span class="kwb">void</span> producer<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">) {
</span>    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">= *</span>arg<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	pthread_mutex_lock<span class="sym">(&amp;</span>mutex<span class="sym">);
</span>	<span class="kwa">while</span> <span class="sym">(</span>count <span class="sym">==</span> <span class="num">1</span><span class="sym">) {
</span>	    pthread_cond_wait<span class="sym">(&amp;</span>control<span class="sym">, &amp;</span>mutex<span class="sym">);
	}
</span>	data <span class="sym">=</span> i<span class="sym">;
</span>	count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>	pthread_cond_signal<span class="sym">(&amp;</span>control<span class="sym">);
</span>	pthread_mutex_unlock<span class="sym">(&amp;</span>mutex<span class="sym">);
</span>	produced<span class="sym">++;
    }
}


</span><span class="kwb">void</span> consumer<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">) {
</span>    <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n <span class="sym">= *</span>arg<span class="sym">;
</span>    <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {
</span>	pthread_mutex_lock<span class="sym">(&amp;</span>mutex<span class="sym">);
</span>	<span class="kwa">while</span> <span class="sym">(</span>count <span class="sym">==</span> <span class="num">0</span><span class="sym">) {
</span>	    pthread_cond_wait<span class="sym">(&amp;</span>control<span class="sym">, &amp;</span>mutex<span class="sym">);
	}
</span>	i <span class="sym">=</span> data<span class="sym">;
</span>	count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	pthread_cond_signal<span class="sym">(&amp;</span>control<span class="sym">);
</span>	pthread_mutex_unlock<span class="sym">(&amp;</span>mutex<span class="sym">);
</span>	consumed<span class="sym">++;
</span>	<span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> n<span class="sym">)</span> <span class="kwa">return</span><span class="sym">;
    }
}
</span>
