<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span>
   Application System Open
   S <span class="kwb">at</span> <span class="str">'../../Include/oz/shootout.ozf'</span>

<span class="kwb">define</span>
   Sequence

   <span class="kwb">proc</span> <span class="sym">{</span>FindSequence F Id<span class="sym">}</span>
      <span class="kwb">case</span> <span class="sym">{</span>F getS<span class="sym">(</span>$<span class="sym">)}</span>
      <span class="kwb">of</span> false <span class="kwb">then</span> skip
      <span class="sym">[] &amp;&gt;|</span>T <span class="kwb">then</span>
         <span class="kwb">if</span> <span class="sym">{</span>List.isPrefix Id T<span class="sym">}</span> <span class="kwb">then</span> skip <span class="kwb">else</span> <span class="sym">{</span>FindSequence F Id<span class="sym">}</span> <span class="kwb">end</span>
      <span class="kwb">else</span> <span class="sym">{</span>FindSequence F Id<span class="sym">}</span> <span class="kwb">end</span>
   <span class="kwb">end</span>

   <span class="kwb">fun</span> <span class="sym">{</span>ReadSequence F S<span class="sym">}</span>
      <span class="kwb">case</span> <span class="sym">{</span>F getS<span class="sym">(</span>$<span class="sym">)}</span>
      <span class="kwb">of</span> false <span class="kwb">then</span> S
      <span class="sym">[] &amp;&gt;|</span>_ <span class="kwb">then</span> S
      <span class="sym">[] &amp;;|</span>_ <span class="kwb">then</span> <span class="sym">{</span>ReadSequence F S<span class="sym">}</span>
      <span class="sym">[]</span> Line <span class="kwb">then</span> <span class="sym">{</span>ReadSequence F S#<span class="sym">{</span>Map Line Char.toUpper<span class="sym">}}</span> <span class="kwb">end</span>
   <span class="kwb">end</span>

   <span class="kwb">fun</span> <span class="sym">{</span>GenerateFrequencies Length<span class="sym">}</span>
      D <span class="sym">= {</span>NewDictionary<span class="sym">}</span>

      <span class="kwb">proc</span> <span class="sym">{</span>KFrequency Offset J<span class="sym">}</span>
         N <span class="sym">= {</span>ByteString.length Sequence<span class="sym">} -</span> J <span class="sym">+</span> <span class="num">1</span>
      <span class="kwb">in</span>
         <span class="kwb">for</span> I <span class="kwb">in</span> Offset<span class="sym">;</span> I<span class="sym">&lt;</span>N<span class="sym">;</span> I<span class="sym">+</span>J <span class="kwb">do</span>
            Slice <span class="sym">= {</span>ByteString.slice Sequence I I<span class="sym">+</span>J<span class="sym">}</span>
            K <span class="sym">= {</span>String.toAtom <span class="sym">{</span>ByteString.toString Slice<span class="sym">}}</span>
            V <span class="sym">= {</span>Dictionary.condGet D K <span class="kwa">nil</span><span class="sym">}</span>
         <span class="kwb">in</span>
            <span class="kwb">if</span> V <span class="sym">==</span> <span class="kwa">nil</span> <span class="kwb">then</span> <span class="sym">{</span>Dictionary.put D K <span class="sym">{</span>NewCell <span class="num">1</span><span class="sym">}}</span>
            <span class="kwb">else</span> V <span class="sym">:=</span> &#64;V <span class="sym">+</span> <span class="num">1</span> <span class="kwb">end</span>
         <span class="kwb">end</span>
      <span class="kwb">end</span>
   <span class="kwb">in</span>
      <span class="kwb">for</span> Offset <span class="kwb">in</span> <span class="num">0</span><span class="sym">;</span> Offset<span class="sym">&lt;</span>Length<span class="sym">;</span> Offset<span class="sym">+</span><span class="num">1</span> <span class="kwb">do</span>
         <span class="sym">{</span>KFrequency Offset Length<span class="sym">}</span>
      <span class="kwb">end</span>
      D
   <span class="kwb">end</span>

   <span class="kwb">proc</span> <span class="sym">{</span>WriteFrequencies J<span class="sym">}</span>
      D <span class="sym">= {</span>GenerateFrequencies J<span class="sym">}</span>
      F <span class="sym">=</span> <span class="kwb">fun</span> <span class="sym">{</span>$ Ak#Av Bk#Bv<span class="sym">}</span> <span class="kwb">if</span> &#64;Av<span class="sym">==</span>&#64;Bv <span class="kwb">then</span> Ak<span class="sym">&gt;</span>Bk <span class="kwb">else</span> &#64;Av<span class="sym">&gt;</span>&#64;Bv <span class="kwb">end end</span>
      L <span class="sym">= {</span>Sort <span class="sym">{</span>Dictionary.entries D<span class="sym">}</span> F<span class="sym">}</span>
      N <span class="sym">= {</span>IntToFloat <span class="sym">{</span>ByteString.length Sequence<span class="sym">} -</span> J <span class="sym">+</span> <span class="num">1</span><span class="sym">}</span>
   <span class="kwb">in</span>
      <span class="kwb">for</span> K#V <span class="kwb">in</span> L <span class="kwb">do</span>
         Percentage <span class="sym">= {</span>IntToFloat &#64;V<span class="sym">} /</span> N <span class="sym">*</span> <span class="num">100.0</span>
      <span class="kwb">in</span>
         <span class="sym">{</span>System.showInfo K # <span class="str">&quot; &quot;</span> # <span class="sym">{</span>S.floatToString Percentage <span class="num">3</span><span class="sym">}}</span>
      <span class="kwb">end</span>
      <span class="sym">{</span>System.showInfo <span class="str">&quot;&quot;</span><span class="sym">}</span>
   <span class="kwb">end</span>

   <span class="kwb">proc</span> <span class="sym">{</span>WriteCount Fragment<span class="sym">}</span>
      D <span class="sym">= {</span>GenerateFrequencies <span class="sym">{</span>Length Fragment<span class="sym">}}</span>
      K <span class="sym">= {</span>String.toAtom Fragment<span class="sym">}</span>
      Count <span class="sym">= {</span>Dictionary.condGet D K <span class="sym">{</span>NewCell <span class="num">0</span><span class="sym">}}</span>
   <span class="kwb">in</span>
      <span class="sym">{</span>System.showInfo &#64;Count # <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> # Fragment<span class="sym">}</span>
   <span class="kwb">end</span>

   <span class="kwa">class</span> TextFile <span class="kwb">from</span> Open.file Open.text <span class="kwb">end</span>
   StdIn <span class="sym">= {</span>New TextFile init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}</span>

<span class="kwb">in</span>
   <span class="sym">{</span>FindSequence StdIn <span class="str">&quot;THREE&quot;</span><span class="sym">}</span>
   Sequence <span class="sym">= {</span>VirtualString.toByteString <span class="sym">{</span>ReadSequence StdIn <span class="kwa">nil</span><span class="sym">}}</span>

   <span class="sym">{</span>WriteFrequencies <span class="num">1</span><span class="sym">}</span>
   <span class="sym">{</span>WriteFrequencies <span class="num">2</span><span class="sym">}</span>

   <span class="sym">{</span>WriteCount <span class="str">&quot;GGT&quot;</span><span class="sym">}</span>
   <span class="sym">{</span>WriteCount <span class="str">&quot;GGTA&quot;</span><span class="sym">}</span>
   <span class="sym">{</span>WriteCount <span class="str">&quot;GGTATT&quot;</span><span class="sym">}</span>
   <span class="sym">{</span>WriteCount <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">}</span>
   <span class="sym">{</span>WriteCount <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">}</span>

   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
