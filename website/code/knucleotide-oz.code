<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Floating point conversion routines courtesy Juergen Stuber and Jorge</span>
<span class="slc">% Marques Pelizzoni [previously used in other Mozart/Oz Shootout</span>
<span class="slc">% submissions].</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit<span class="sym">)</span> Open<span class="sym">(</span>file text<span class="sym">)</span>

<span class="kwb">define</span>

  <span class="kwa">class</span> TextFile_
    <span class="kwb">from</span> Open.file Open.text
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  SPACE <span class="sym">= &amp;</span>\040

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>NewKnucleotide FILE<span class="sym">}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>PrintFrequencies FragmentLength<span class="sym">}</span>
      Entries <span class="sym">= {</span>Dictionary.entries <span class="sym">{</span>GenerateCounts FragmentLength<span class="sym">}}</span>
      CountSum <span class="sym">= {</span>List.foldL Entries <span class="kwb">fun</span> <span class="sym">{</span>$ A _#V<span class="sym">} (</span>A <span class="sym">+ {</span>Int.toFloat V<span class="sym">})</span> <span class="kwb">end</span> <span class="num">0.0</span><span class="sym">}</span>

      CalcFreq <span class="sym">=</span> <span class="kwb">fun</span> <span class="sym">{</span>$ K#V<span class="sym">}</span> K#<span class="sym">({</span>Int.toFloat V<span class="sym">} /</span> CountSum<span class="sym">) *</span> <span class="num">100.0</span> <span class="kwb">end</span>
      Sorter <span class="sym">=</span> <span class="kwb">fun</span> <span class="sym">{</span>$ X#Xt Y#Yt<span class="sym">}</span> <span class="kwb">if</span> Xt <span class="sym">==</span> Yt <span class="kwb">then</span> X <span class="sym">&gt;</span> Y <span class="kwb">else</span> Xt <span class="sym">&gt;</span> Yt <span class="kwb">end end</span>
      ShowEntry <span class="sym">=</span> <span class="kwb">proc</span> <span class="sym">{</span>$ K#V<span class="sym">} {</span>System.showInfo K # <span class="str">&quot; &quot;</span> # <span class="sym">{</span>FloatToString V <span class="num">3</span><span class="sym">}}</span> <span class="kwb">end</span>

    <span class="kwb">in</span>
      <span class="sym">{</span>ForAll <span class="sym">{</span>List.sort <span class="sym">{</span>List.map Entries CalcFreq<span class="sym">}</span> Sorter<span class="sym">}</span> ShowEntry<span class="sym">}</span>
      <span class="sym">{</span>System.showInfo <span class="str">&quot;&quot;</span><span class="sym">}</span>
    <span class="kwb">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwb">proc</span> <span class="sym">{</span>PrintCount Fragment<span class="sym">}</span> Key <span class="sym">= {</span>String.toAtom Fragment<span class="sym">}</span> Count <span class="kwb">in</span>
      Count <span class="sym">= {</span>Dictionary.condGet <span class="sym">{</span>GenerateCounts <span class="sym">{</span>List.length Fragment<span class="sym">}}</span> Key <span class="num">0</span><span class="sym">}</span>
      <span class="sym">{</span>System.showInfo <span class="sym">{</span>PadRight SPACE <span class="sym">{</span>Int.toString Count<span class="sym">}</span> <span class="num">8</span><span class="sym">}</span> # Fragment<span class="sym">}</span>
    <span class="kwb">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwb">fun</span> <span class="sym">{</span>GenerateCounts FragmentLength<span class="sym">}</span>
      Table <span class="sym">= {</span>NewDictionary<span class="sym">}</span>

      <span class="kwb">proc</span> <span class="sym">{</span>Do_J SequenceSlice<span class="sym">}</span>
        <span class="kwb">case</span> SequenceSlice <span class="kwb">of</span> <span class="kwa">nil</span> <span class="kwb">then</span>
          skip
        <span class="kwb">else</span> Key CurrentSlice RestSlice <span class="kwb">in</span>
          <span class="sym">{</span>List.takeDrop SequenceSlice FragmentLength CurrentSlice RestSlice<span class="sym">}</span>
          <span class="kwb">if</span> <span class="sym">{</span>List.length CurrentSlice<span class="sym">} &lt;</span> FragmentLength <span class="kwb">then</span>
            skip
          <span class="kwb">else</span>
            Key <span class="sym">= {</span>String.toAtom CurrentSlice<span class="sym">}</span>
            <span class="sym">{</span>Dictionary.put Table Key <span class="sym">({</span>Dictionary.condGet Table Key <span class="num">0</span><span class="sym">} +</span> <span class="num">1</span><span class="sym">)}</span>
            <span class="sym">{</span>Do_J RestSlice<span class="sym">}</span>
          <span class="kwb">end</span>
        <span class="kwb">end</span>
      <span class="kwb">end</span>

    <span class="kwb">in</span>
      <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..FragmentLength <span class="kwb">do</span>
        <span class="kwb">if</span> I <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwb">then</span>
          <span class="sym">{</span>Do_J <span class="sym">{</span>List.drop Sequence <span class="sym">(</span>I <span class="sym">-</span> <span class="num">1</span><span class="sym">)}}</span>
        <span class="kwb">else</span>
          <span class="sym">{</span>Do_J Sequence<span class="sym">}</span>
        <span class="kwb">end</span>
      <span class="kwb">end</span>

      Table
    <span class="kwb">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwb">fun</span> <span class="sym">{</span>LoadSequence Loading Sequence_<span class="sym">}</span>
      <span class="kwb">if</span> Loading <span class="kwb">then</span>
        <span class="kwb">case</span> <span class="sym">{</span>FILE getS<span class="sym">(</span>$<span class="sym">)}</span> <span class="kwb">of</span> false <span class="kwb">then</span>
          <span class="sym">{</span>List.reverse Sequence_<span class="sym">}</span>
        <span class="kwb">elseof</span> <span class="sym">&amp;&gt;|</span>_ <span class="kwb">then</span>
          <span class="sym">{</span>List.reverse Sequence_<span class="sym">}</span>
        <span class="kwb">elseof</span> <span class="sym">&amp;;|</span>_ <span class="kwb">then</span>
          <span class="sym">{</span>LoadSequence Loading Sequence_<span class="sym">}</span>
        <span class="kwb">elseof</span> LINE <span class="kwb">then</span>
          <span class="sym">{</span>LoadSequence Loading <span class="sym">{</span>List.append <span class="sym">{</span>List.reverse <span class="sym">{</span>List.map LINE Char.toUpper<span class="sym">}}</span> Sequence_<span class="sym">}}</span>
        <span class="kwb">end</span>
      <span class="kwb">else</span>
        <span class="kwb">case</span> <span class="sym">{</span>FILE getS<span class="sym">(</span>$<span class="sym">)}</span> <span class="kwb">of</span> false <span class="kwb">then</span>
          <span class="sym">{</span>List.reverse Sequence_<span class="sym">}</span>
        <span class="kwb">elseof</span> <span class="sym">&amp;&gt;|&amp;</span>T<span class="sym">|&amp;</span>H<span class="sym">|&amp;</span>R<span class="sym">|&amp;</span>E<span class="sym">|&amp;</span>E<span class="sym">|</span>_ <span class="kwb">then</span>
          <span class="sym">{</span>LoadSequence true Sequence_<span class="sym">}</span>
        <span class="kwb">else</span>
          <span class="sym">{</span>LoadSequence Loading Sequence_<span class="sym">}</span>
        <span class="kwb">end</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    Sequence

  <span class="kwb">in</span>
    Sequence <span class="sym">= {</span>LoadSequence false <span class="kwa">nil</span><span class="sym">}</span>
    ops<span class="sym">(</span>printFrequencies<span class="sym">:</span>PrintFrequencies printCount<span class="sym">:</span>PrintCount<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="slc">%% Floating Point Conversion Routines</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FloatAbs X<span class="sym">}</span>
    <span class="kwb">if</span> X <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwb">then</span> X <span class="kwb">else</span> ~X <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FloatSquare X<span class="sym">}</span>
    X <span class="sym">*</span> X
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FloatPower X E<span class="sym">}</span>
    <span class="kwb">if</span> E<span class="sym">==</span><span class="num">0</span> <span class="kwb">then</span> <span class="num">1.0</span>
    <span class="kwb">elseif</span> E<span class="sym">&lt;</span><span class="num">0</span> <span class="kwb">then</span> <span class="kwa">raise</span> negativeExponent<span class="sym">(</span>E<span class="sym">)</span> <span class="kwb">end</span>
    <span class="kwb">else</span>
      <span class="kwb">if</span> E mod <span class="num">2</span> <span class="sym">==</span> <span class="num">1</span> <span class="kwb">then</span> X <span class="kwb">else</span> <span class="num">1.0</span> <span class="kwb">end</span>
      <span class="sym">* {</span>FloatSquare <span class="sym">{</span>FloatPower X E div <span class="num">2</span><span class="sym">}}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>MakePadding Ch L<span class="sym">}</span>
    <span class="kwb">if</span> L <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then</span>
      Padding <span class="sym">= {</span>MakeList L<span class="sym">}</span>
    <span class="kwb">in</span>
      <span class="kwb">for</span> V <span class="kwb">in</span> Padding <span class="kwb">do</span> V <span class="sym">=</span> Ch <span class="kwb">end</span>
        Padding
      <span class="kwb">else</span>
        <span class="kwa">nil</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>PadLeft Ch String L<span class="sym">}</span>
    PL <span class="sym">=</span> L <span class="sym">- {</span>List.length String<span class="sym">}</span>
  <span class="kwb">in</span>
    <span class="sym">{</span>MakePadding Ch PL<span class="sym">}</span> # String
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>PadRight Ch String L<span class="sym">}</span>
    PL <span class="sym">=</span> L <span class="sym">- {</span>List.length String<span class="sym">}</span>
  <span class="kwb">in</span>
    String # <span class="sym">{</span>MakePadding Ch PL<span class="sym">}</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FloatToVS F Prec<span class="sym">}</span>
    <span class="kwb">fun</span> <span class="sym">{</span>FractionToString Frac Prec<span class="sym">}</span>
      <span class="kwb">if</span> Prec <span class="sym">=&lt;</span> <span class="num">0</span> <span class="kwb">then</span> <span class="str">&quot;&quot;</span>
      <span class="kwb">elseif</span> Prec <span class="sym">&gt;</span> <span class="num">10</span> <span class="kwb">then</span> <span class="kwa">raise</span> excessivePrecision<span class="sym">(</span>Prec<span class="sym">)</span> <span class="kwb">end</span>
      <span class="kwb">else</span>
        Shifted <span class="sym">= {</span>FloatPower <span class="num">10.0</span> Prec<span class="sym">} *</span> Frac
        Digits <span class="sym">= {</span>FloatToInt <span class="sym">{</span>Round Shifted<span class="sym">}}</span>
        <span class="kwb">in</span> <span class="sym">{</span>PadLeft <span class="sym">&amp;</span><span class="num">0</span> <span class="sym">{</span>IntToString Digits<span class="sym">}</span> Prec<span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    I <span class="sym">= {</span>FloatToInt <span class="sym">{</span><span class="kwb">if</span> F <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwb">then</span> Floor <span class="kwb">else</span> Ceil <span class="kwb">end</span> F<span class="sym">}}</span>
    Frac <span class="sym">= {</span>FloatAbs F <span class="sym">- {</span>IntToFloat I<span class="sym">}}</span>
  <span class="kwb">in</span>
    <span class="sym">{</span>IntToString I<span class="sym">}</span> # <span class="str">&quot;.&quot;</span> # <span class="sym">{</span>FractionToString Frac Prec<span class="sym">}</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FloatToString F Prec<span class="sym">}</span>
    Result <span class="sym">= {</span>NewCell <span class="sym">{</span>VirtualString.toString <span class="sym">{</span>FloatToVS F Prec<span class="sym">}}}</span>
    P <span class="sym">=</span> <span class="kwb">fun</span> <span class="sym">{</span>$ C<span class="sym">}</span> <span class="kwb">if</span> C <span class="sym">== &amp;</span>~ <span class="kwb">then</span> <span class="sym">&amp;-</span> <span class="kwb">else</span> C <span class="kwb">end end</span>
  <span class="kwb">in</span>
    <span class="kwb">if</span> F <span class="sym">&lt;</span> <span class="num">0.0</span> andthen <span class="sym">{</span>Nth &#64;Result <span class="num">1</span><span class="sym">}</span> \= <span class="sym">&amp;</span>~ <span class="kwb">then</span>
      Result <span class="sym">:= &amp;</span>~<span class="sym">|</span>&#64;Result
    <span class="kwb">end</span>
    <span class="sym">{</span>Map &#64;Result P<span class="sym">}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  Knucleotide

<span class="slc">% ------------- %</span>

<span class="kwb">in</span>
  Knucleotide <span class="sym">= {</span>NewKnucleotide <span class="sym">{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}}</span>

  <span class="sym">{</span>Knucleotide.printFrequencies <span class="num">1</span><span class="sym">}</span>
  <span class="sym">{</span>Knucleotide.printFrequencies <span class="num">2</span><span class="sym">}</span>

  <span class="sym">{</span>Knucleotide.printCount <span class="str">&quot;GGT&quot;</span><span class="sym">}</span>
  <span class="sym">{</span>Knucleotide.printCount <span class="str">&quot;GGTA&quot;</span><span class="sym">}</span>
  <span class="sym">{</span>Knucleotide.printCount <span class="str">&quot;GGTATT&quot;</span><span class="sym">}</span>
  <span class="sym">{</span>Knucleotide.printCount <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">}</span>
  <span class="sym">{</span>Knucleotide.printCount <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">}</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

