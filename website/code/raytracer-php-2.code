<span class="sym">&lt;</span>? <span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy (PHP novice)</span>
<span class="com"></span>
<span class="com">   php -q raytracer.php 32</span>
<span class="com">*/</span>


<span class="kwa">define</span><span class="sym">(</span><span class="str">&quot;INFINITY&quot;</span><span class="sym">,</span> <span class="kwa">log</span><span class="sym">(</span><span class="num">0</span><span class="sym">) * -</span><span class="num">1.0</span><span class="sym">);</span>
<span class="kwa">define</span><span class="sym">(</span><span class="str">&quot;EPSILON&quot;</span><span class="sym">,</span> <span class="num">1.49012e-08</span><span class="sym">);</span>

<span class="kwa">define</span><span class="sym">(</span><span class="str">&quot;LEVELS&quot;</span><span class="sym">,</span> <span class="num">6</span><span class="sym">);</span>
<span class="kwa">define</span><span class="sym">(</span><span class="str">&quot;SS&quot;</span><span class="sym">,</span> <span class="num">4</span><span class="sym">);</span>


<span class="kwa">function</span> <span class="sym">&amp;</span>newVector<span class="sym">(</span><span class="kwb">$x</span><span class="sym">,</span><span class="kwb">$y</span><span class="sym">,</span><span class="kwb">$z</span><span class="sym">){</span>
   <span class="kwa">return array</span><span class="sym">(</span><span class="kwb">$x</span><span class="sym">,</span><span class="kwb">$y</span><span class="sym">,</span><span class="kwb">$z</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="sym">&amp;</span>add<span class="sym">(&amp;</span><span class="kwb">$a</span><span class="sym">,&amp;</span><span class="kwb">$b</span><span class="sym">){</span>
   <span class="kwa">return array</span><span class="sym">(</span><span class="kwb">$a</span><span class="sym">[</span><span class="num">0</span><span class="sym">]+</span><span class="kwb">$b</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">1</span><span class="sym">]+</span><span class="kwb">$b</span><span class="sym">[</span><span class="num">1</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">2</span><span class="sym">]+</span><span class="kwb">$b</span><span class="sym">[</span><span class="num">2</span><span class="sym">]);</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="sym">&amp;</span>subtract<span class="sym">(&amp;</span><span class="kwb">$a</span><span class="sym">,&amp;</span><span class="kwb">$b</span><span class="sym">){</span>
   <span class="kwa">return array</span><span class="sym">(</span><span class="kwb">$a</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-</span><span class="kwb">$b</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">1</span><span class="sym">]-</span><span class="kwb">$b</span><span class="sym">[</span><span class="num">1</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">2</span><span class="sym">]-</span><span class="kwb">$b</span><span class="sym">[</span><span class="num">2</span><span class="sym">]);</span>
<span class="sym">}</span>

<span class="kwa">function</span> dot<span class="sym">(&amp;</span><span class="kwb">$a</span><span class="sym">,&amp;</span><span class="kwb">$b</span><span class="sym">){</span>
   <span class="kwa">return</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">0</span><span class="sym">]*</span><span class="kwb">$b</span><span class="sym">[</span><span class="num">0</span><span class="sym">] +</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">1</span><span class="sym">]*</span><span class="kwb">$b</span><span class="sym">[</span><span class="num">1</span><span class="sym">] +</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">2</span><span class="sym">]*</span><span class="kwb">$b</span><span class="sym">[</span><span class="num">2</span><span class="sym">];</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="sym">&amp;</span>scaleBy<span class="sym">(&amp;</span><span class="kwb">$a</span><span class="sym">,</span><span class="kwb">$s</span><span class="sym">){</span>
   <span class="kwa">return array</span><span class="sym">(</span><span class="kwb">$a</span><span class="sym">[</span><span class="num">0</span><span class="sym">]*</span><span class="kwb">$s</span><span class="sym">,</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">1</span><span class="sym">]*</span><span class="kwb">$s</span><span class="sym">,</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">2</span><span class="sym">]*</span><span class="kwb">$s</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="sym">&amp;</span>normalize<span class="sym">(&amp;</span><span class="kwb">$a</span><span class="sym">){</span>
   <span class="kwa">return</span> scaleBy<span class="sym">(</span><span class="kwb">$a</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">/</span><span class="kwa">sqrt</span><span class="sym">(</span>dot<span class="sym">(</span><span class="kwb">$a</span><span class="sym">,</span><span class="kwb">$a</span><span class="sym">)));</span>
<span class="sym">}</span>


<span class="kwa">function</span> <span class="sym">&amp;</span>newRay<span class="sym">(</span><span class="kwb">$origin</span><span class="sym">,</span><span class="kwb">$direction</span><span class="sym">){</span>
   <span class="kwa">return array</span><span class="sym">(</span><span class="str">&quot;origin&quot;</span><span class="sym">=&gt;</span><span class="kwb">$origin</span><span class="sym">,</span><span class="str">&quot;direction&quot;</span><span class="sym">=&gt;</span><span class="kwb">$direction</span><span class="sym">);</span>
<span class="sym">}</span>


<span class="kwa">function</span> <span class="sym">&amp;</span>newIntersectionPoint<span class="sym">(</span><span class="kwb">$distance</span><span class="sym">,</span><span class="kwb">$normal</span><span class="sym">){</span>
   <span class="kwa">return array</span><span class="sym">(</span><span class="str">&quot;distance&quot;</span><span class="sym">=&gt;</span><span class="kwb">$distance</span><span class="sym">,</span><span class="str">&quot;normal&quot;</span><span class="sym">=&gt;</span><span class="kwb">$normal</span><span class="sym">);</span>
<span class="sym">}</span>



<span class="kwa">class</span> Scene <span class="sym">{</span>

   <span class="kwa">function</span> <span class="sym">&amp;</span>sphereScene<span class="sym">(</span><span class="kwb">$level</span><span class="sym">,&amp;</span><span class="kwb">$center</span><span class="sym">,</span><span class="kwb">$radius</span><span class="sym">){</span>
      <span class="kwb">$sphere</span> <span class="sym">=</span> new Sphere<span class="sym">(</span><span class="kwb">$center</span><span class="sym">,</span><span class="kwb">$radius</span><span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$level</span><span class="sym">==</span><span class="num">1</span><span class="sym">){</span>
         <span class="kwa">return</span> <span class="kwb">$sphere</span><span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">else</span> <span class="sym">{</span>
         <span class="kwb">$scene</span> <span class="sym">=</span> new Group<span class="sym">(</span> new Sphere<span class="sym">(</span><span class="kwb">$center</span><span class="sym">,</span><span class="num">3.0</span><span class="sym">*</span><span class="kwb">$radius</span><span class="sym">) );</span>
         <span class="kwb">$scene</span><span class="sym">-&gt;</span>add<span class="sym">(</span><span class="kwb">$sphere</span><span class="sym">);</span>
         <span class="kwb">$rn</span> <span class="sym">=</span> <span class="num">3.0</span><span class="sym">*</span><span class="kwb">$radius</span> <span class="sym">/</span> <span class="kwa">sqrt</span><span class="sym">(</span><span class="num">12.0</span><span class="sym">);</span>

         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$dz</span><span class="sym">=-</span><span class="num">1</span><span class="sym">;</span> <span class="kwb">$dz</span><span class="sym">&lt;=</span><span class="num">1</span><span class="sym">;</span> <span class="kwb">$dz</span><span class="sym">+=</span><span class="num">2</span><span class="sym">){</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$dx</span><span class="sym">=-</span><span class="num">1</span><span class="sym">;</span> <span class="kwb">$dx</span><span class="sym">&lt;=</span><span class="num">1</span><span class="sym">;</span> <span class="kwb">$dx</span><span class="sym">+=</span><span class="num">2</span><span class="sym">){</span>

               <span class="kwb">$c2</span> <span class="sym">=</span> newVector<span class="sym">(</span>
                    <span class="kwb">$center</span><span class="sym">[</span><span class="num">0</span><span class="sym">] -</span> <span class="kwb">$dx</span><span class="sym">*</span><span class="kwb">$rn</span>
                  <span class="sym">,</span> <span class="kwb">$center</span><span class="sym">[</span><span class="num">1</span><span class="sym">] +</span> <span class="kwb">$rn</span>
                  <span class="sym">,</span> <span class="kwb">$center</span><span class="sym">[</span><span class="num">2</span><span class="sym">] -</span> <span class="kwb">$dz</span><span class="sym">*</span><span class="kwb">$rn</span>
                  <span class="sym">);</span>

               <span class="kwb">$scene</span><span class="sym">-&gt;</span>add<span class="sym">(</span> Scene<span class="sym">::</span>sphereScene<span class="sym">(</span><span class="kwb">$level</span><span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwb">$c2</span><span class="sym">,</span> <span class="kwb">$radius</span><span class="sym">/</span><span class="num">2.0</span><span class="sym">) );</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
         <span class="kwa">return</span> <span class="kwb">$scene</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> traceRay<span class="sym">(&amp;</span><span class="kwb">$ray</span><span class="sym">,&amp;</span><span class="kwb">$light</span><span class="sym">){</span>
      <span class="kwb">$p</span> <span class="sym">=</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>intersect<span class="sym">(</span><span class="kwb">$ray</span><span class="sym">,</span>
         newIntersectionPoint<span class="sym">(</span>INFINITY<span class="sym">,</span> newVector<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)) );</span>
      <span class="kwa">if</span> <span class="sym">(</span>is_infinite<span class="sym">(</span><span class="kwb">$p</span><span class="sym">[</span><span class="str">&quot;distance&quot;</span><span class="sym">])){</span> <span class="kwa">return</span> <span class="num">0.0</span><span class="sym">; }</span>

      <span class="kwb">$greyscale</span> <span class="sym">= -</span><span class="num">1.0</span> <span class="sym">*</span> dot<span class="sym">(</span><span class="kwb">$p</span><span class="sym">[</span><span class="str">&quot;normal&quot;</span><span class="sym">],</span><span class="kwb">$light</span><span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$greyscale</span> <span class="sym">&lt;=</span> <span class="num">0.0</span><span class="sym">){</span> <span class="kwa">return</span> <span class="num">0.0</span><span class="sym">; }</span>

      <span class="kwb">$rayOrigin</span> <span class="sym">=</span> <span class="kwb">$ray</span><span class="sym">[</span><span class="str">&quot;origin&quot;</span><span class="sym">];</span>
      <span class="kwb">$scaledDirection</span> <span class="sym">=</span> scaleBy<span class="sym">(</span><span class="kwb">$ray</span><span class="sym">[</span><span class="str">&quot;direction&quot;</span><span class="sym">],</span> <span class="kwb">$p</span><span class="sym">[</span><span class="str">&quot;distance&quot;</span><span class="sym">]);</span>
      <span class="kwb">$scaledNormal</span> <span class="sym">=</span> scaleBy<span class="sym">(</span><span class="kwb">$p</span><span class="sym">[</span><span class="str">&quot;normal&quot;</span><span class="sym">],</span>EPSILON<span class="sym">);</span>
      <span class="kwb">$o</span> <span class="sym">=</span> add<span class="sym">(</span><span class="kwb">$rayOrigin</span><span class="sym">,</span><span class="kwb">$scaledDirection</span><span class="sym">);</span>
      <span class="kwb">$o</span> <span class="sym">=</span> add<span class="sym">(</span><span class="kwb">$o</span><span class="sym">,</span><span class="kwb">$scaledNormal</span><span class="sym">);</span>

      <span class="kwb">$v</span> <span class="sym">=</span> newVector<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">);</span>
      <span class="kwb">$shadowRay</span> <span class="sym">=</span> newRay<span class="sym">(</span><span class="kwb">$o</span><span class="sym">,</span> subtract<span class="sym">(</span><span class="kwb">$v</span><span class="sym">,</span><span class="kwb">$light</span><span class="sym">));</span>
      <span class="kwb">$shadowp</span> <span class="sym">=</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>intersect<span class="sym">(</span>
         <span class="kwb">$shadowRay</span><span class="sym">,</span> newIntersectionPoint<span class="sym">(</span>INFINITY<span class="sym">,</span> <span class="kwb">$p</span><span class="sym">[</span><span class="str">&quot;normal&quot;</span><span class="sym">]) );</span>

      <span class="kwa">if</span> <span class="sym">(</span>is_infinite<span class="sym">(</span><span class="kwb">$shadowp</span><span class="sym">[</span><span class="str">&quot;distance&quot;</span><span class="sym">])){</span> <span class="kwa">return</span> <span class="kwb">$greyscale</span><span class="sym">; }</span>
      <span class="kwa">else</span> <span class="sym">{</span> <span class="kwa">return</span> <span class="num">0.0</span><span class="sym">; }</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="slc">// a leaf node in the scene tree</span>
<span class="kwa">class</span> Sphere <span class="kwa">extends</span> Scene <span class="sym">{</span>
   var <span class="kwb">$center</span><span class="sym">,</span> <span class="kwb">$radius</span><span class="sym">;</span>

   <span class="kwa">function</span> Sphere<span class="sym">(</span><span class="kwb">$center</span><span class="sym">,</span><span class="kwb">$radius</span><span class="sym">){</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>center <span class="sym">=</span> <span class="kwb">$center</span><span class="sym">;</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>radius <span class="sym">=</span> <span class="kwb">$radius</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> distance<span class="sym">(&amp;</span><span class="kwb">$ray</span><span class="sym">){</span>
      <span class="kwb">$v</span> <span class="sym">=</span> subtract<span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>center<span class="sym">,</span><span class="kwb">$ray</span><span class="sym">[</span><span class="str">&quot;origin&quot;</span><span class="sym">]);</span>
      <span class="kwb">$b</span> <span class="sym">=</span> dot<span class="sym">(</span><span class="kwb">$v</span><span class="sym">,</span><span class="kwb">$ray</span><span class="sym">[</span><span class="str">&quot;direction&quot;</span><span class="sym">]);</span>
      <span class="kwb">$disc</span> <span class="sym">=</span> <span class="kwb">$b</span><span class="sym">*</span><span class="kwb">$b</span> <span class="sym">-</span> dot<span class="sym">(</span><span class="kwb">$v</span><span class="sym">,</span><span class="kwb">$v</span><span class="sym">) +</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>radius<span class="sym">*</span><span class="kwb">$this</span><span class="sym">-&gt;</span>radius<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$disc</span> <span class="sym">&lt;</span> <span class="num">0.0</span><span class="sym">){</span> <span class="kwa">return</span> INFINITY<span class="sym">; }</span> <span class="slc">// No intersection</span>

      <span class="kwb">$d</span> <span class="sym">=</span> <span class="kwa">sqrt</span><span class="sym">(</span><span class="kwb">$disc</span><span class="sym">);</span>
      <span class="kwb">$t1</span> <span class="sym">=</span> <span class="kwb">$b</span> <span class="sym">+</span> <span class="kwb">$d</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$t1</span> <span class="sym">&lt;</span> <span class="num">0.0</span><span class="sym">){</span> <span class="kwa">return</span> INFINITY<span class="sym">; }</span>

      <span class="kwb">$t2</span> <span class="sym">=</span> <span class="kwb">$b</span> <span class="sym">-</span> <span class="kwb">$d</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$t2</span> <span class="sym">&gt;</span> <span class="num">0.0</span><span class="sym">){</span> <span class="kwa">return</span> <span class="kwb">$t2</span><span class="sym">; }</span> <span class="kwa">else</span> <span class="sym">{</span> <span class="kwa">return</span> <span class="kwb">$t1</span><span class="sym">; }</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> intersect<span class="sym">(&amp;</span><span class="kwb">$ray</span><span class="sym">,&amp;</span><span class="kwb">$p</span><span class="sym">){</span>
      <span class="kwb">$d</span> <span class="sym">=</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>distance<span class="sym">(</span><span class="kwb">$ray</span><span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$d</span> <span class="sym">&lt;</span> <span class="kwb">$p</span><span class="sym">[</span><span class="str">&quot;distance&quot;</span><span class="sym">]){</span>
         <span class="kwb">$rayOrigin</span> <span class="sym">=</span> <span class="kwb">$ray</span><span class="sym">[</span><span class="str">&quot;origin&quot;</span><span class="sym">];</span>
         <span class="kwb">$rayDirection</span> <span class="sym">=</span> <span class="kwb">$ray</span><span class="sym">[</span><span class="str">&quot;direction&quot;</span><span class="sym">];</span>
         <span class="kwb">$scaledDirection</span> <span class="sym">=</span> scaleBy<span class="sym">(</span><span class="kwb">$rayDirection</span><span class="sym">,</span><span class="kwb">$d</span><span class="sym">);</span>

         <span class="kwb">$v</span> <span class="sym">=</span> add<span class="sym">(</span><span class="kwb">$rayOrigin</span><span class="sym">,</span>subtract<span class="sym">(</span><span class="kwb">$scaledDirection</span><span class="sym">,</span><span class="kwb">$this</span><span class="sym">-&gt;</span>center <span class="sym">));</span>
         <span class="kwb">$p</span> <span class="sym">=</span> newIntersectionPoint<span class="sym">(</span><span class="kwb">$d</span><span class="sym">,</span> normalize<span class="sym">(</span><span class="kwb">$v</span><span class="sym">));</span>
      <span class="sym">}</span>
      <span class="kwa">return</span> <span class="kwb">$p</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="slc">// non-leaf node in the scene tree</span>
<span class="kwa">class</span> Group <span class="kwa">extends</span> Scene <span class="sym">{</span>
   var <span class="kwb">$bound</span><span class="sym">,</span> <span class="kwb">$scenes</span><span class="sym">;</span>

   <span class="kwa">function</span> Group<span class="sym">(</span><span class="kwb">$bound</span><span class="sym">){</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>bound <span class="sym">=</span> <span class="kwb">$bound</span><span class="sym">;</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>scenes <span class="sym">=</span> <span class="kwa">array</span><span class="sym">();</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> intersect<span class="sym">(&amp;</span><span class="kwb">$ray</span><span class="sym">,&amp;</span><span class="kwb">$p</span><span class="sym">){</span>
      <span class="kwa">if</span> <span class="sym">((</span><span class="kwb">$this</span><span class="sym">-&gt;</span>bound <span class="sym">-&gt;</span> distance<span class="sym">(</span><span class="kwb">$ray</span><span class="sym">)) &lt;</span> <span class="kwb">$p</span><span class="sym">[</span><span class="str">&quot;distance&quot;</span><span class="sym">]){</span>
         <span class="kwa">foreach</span> <span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>scenes as <span class="kwb">$each</span><span class="sym">){</span>
            <span class="kwb">$p</span> <span class="sym">=</span> <span class="kwb">$each</span><span class="sym">-&gt;</span>intersect<span class="sym">(</span><span class="kwb">$ray</span><span class="sym">,</span><span class="kwb">$p</span><span class="sym">);</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      <span class="kwa">return</span> <span class="kwb">$p</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> add<span class="sym">(</span><span class="kwb">$s</span><span class="sym">){</span>
      <span class="kwa">array_unshift</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>scenes<span class="sym">,</span> <span class="kwb">$s</span><span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="slc">////////////////////////////////////////////////////////////////////</span>

<span class="kwb">$n</span> <span class="sym">= (</span><span class="kwb">$argc</span> <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwb">$argv</span><span class="sym">[</span><span class="num">1</span><span class="sym">] :</span> <span class="num">1</span><span class="sym">;</span>

<span class="kwb">$scene</span> <span class="sym">=</span> Scene<span class="sym">::</span>sphereScene<span class="sym">(</span>LEVELS<span class="sym">,</span> newVector<span class="sym">(</span><span class="num">0.0</span><span class="sym">, -</span><span class="num">1.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">),</span> <span class="num">1.0</span><span class="sym">);</span>

<span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;P5</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">255</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">,</span><span class="kwb">$n</span><span class="sym">);</span>

<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$y</span><span class="sym">=</span><span class="kwb">$n</span><span class="sym">-</span><span class="num">1</span><span class="sym">;</span> <span class="kwb">$y</span><span class="sym">&gt;=</span><span class="num">0</span><span class="sym">; --</span><span class="kwb">$y</span><span class="sym">){</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$x</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$x</span><span class="sym">&lt;</span><span class="kwb">$n</span><span class="sym">; ++</span><span class="kwb">$x</span><span class="sym">){</span>

      <span class="kwb">$greyscale</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$dx</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$dx</span><span class="sym">&lt;</span>SS<span class="sym">; ++</span><span class="kwb">$dx</span><span class="sym">){</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$dy</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$dy</span><span class="sym">&lt;</span>SS<span class="sym">; ++</span><span class="kwb">$dy</span><span class="sym">){</span>

            <span class="kwb">$v</span> <span class="sym">=</span> newVector<span class="sym">(</span>
                 <span class="kwb">$x</span> <span class="sym">+ (</span><span class="kwb">$dx</span><span class="sym">/(</span><span class="kwb">double</span><span class="sym">)</span>SS<span class="sym">) - (</span><span class="kwb">$n</span><span class="sym">/</span><span class="num">2.0</span><span class="sym">)</span>
               <span class="sym">,</span> <span class="kwb">$y</span> <span class="sym">+ (</span><span class="kwb">$dy</span><span class="sym">/(</span><span class="kwb">double</span><span class="sym">)</span>SS<span class="sym">) - (</span><span class="kwb">$n</span><span class="sym">/</span><span class="num">2.0</span><span class="sym">)</span>
               <span class="sym">,</span> <span class="kwb">$n</span> <span class="sym">);</span>

            <span class="kwb">$ray</span> <span class="sym">=</span> newRay<span class="sym">(</span>newVector<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">, -</span><span class="num">4.0</span><span class="sym">),</span> normalize<span class="sym">(</span><span class="kwb">$v</span><span class="sym">));</span>

            <span class="kwb">$u</span> <span class="sym">=</span> newVector<span class="sym">(-</span><span class="num">1.0</span><span class="sym">, -</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">);</span>
            <span class="kwb">$greyscale</span> <span class="sym">+=</span> <span class="kwb">$scene</span><span class="sym">-&gt;</span>traceRay<span class="sym">(</span><span class="kwb">$ray</span><span class="sym">,</span> normalize<span class="sym">(</span><span class="kwb">$u</span><span class="sym">));</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      <span class="kwa">echo chr</span><span class="sym">(</span> <span class="num">0.5</span> <span class="sym">+</span> <span class="num">255.0</span><span class="sym">*</span><span class="kwb">$greyscale</span><span class="sym">/(</span><span class="kwb">double</span><span class="sym">)(</span>SS<span class="sym">*</span>SS<span class="sym">) );</span>
   <span class="sym">}</span>
<span class="sym">}</span>
?<span class="sym">&gt;</span>
