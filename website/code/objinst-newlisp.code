<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp
<span class="line">    2 </span>
<span class="line">    3 </span># objectinstantiation <span class="sym">-</span> benchmark
<span class="line">    4 </span>#
<span class="line">    5 </span># Contributed by Lutz Mueller
<span class="line">    6 </span>
<span class="line">    7 </span># define class Toggle
<span class="line">    8 </span>
<span class="line">    9 </span><span class="sym">(</span>context <span class="str">'Toggle)
</span><span class="line">   10 </span><span class="str">
</span><span class="line">   11 </span><span class="str">(define (init start_state)
</span><span class="line">   12 </span><span class="str">        (set '</span>bool start_state<span class="sym">))
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym">(</span>define <span class="sym">(</span>value<span class="sym">)
</span><span class="line">   15 </span><span class="sym"></span>        bool<span class="sym">)
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym">(</span>define <span class="sym">(</span>activate<span class="sym">)
</span><span class="line">   18 </span><span class="sym">        (</span><span class="kwa">set</span> <span class="str">'bool (not bool)))
</span><span class="line">   19 </span><span class="str">
</span><span class="line">   20 </span><span class="str">(context '</span>MAIN<span class="sym">)
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span># subclass Toggle to NthToggle <span class="kwa">and</span> overwrite methods
<span class="line">   23 </span>
<span class="line">   24 </span><span class="sym">(</span>new Toggle <span class="str">'NthToggle)
</span><span class="line">   25 </span><span class="str">
</span><span class="line">   26 </span><span class="str">(context NthToggle)
</span><span class="line">   27 </span><span class="str">
</span><span class="line">   28 </span><span class="str">(define (init start_state max_counter)
</span><span class="line">   29 </span><span class="str">        (set '</span>bool start_state<span class="sym">)
</span><span class="line">   30 </span><span class="sym">        (</span><span class="kwa">set</span> <span class="str">'count_max max_counter)
</span><span class="line">   31 </span><span class="str">        (set '</span>counter <span class="num">0</span><span class="sym">))
</span><span class="line">   32 </span><span class="sym">
</span><span class="line">   33 </span><span class="sym">(</span>define <span class="sym">(</span>activate<span class="sym">)
</span><span class="line">   34 </span><span class="sym">        (</span>inc <span class="str">'counter)
</span><span class="line">   35 </span><span class="str">        (if (&gt;= counter count_max)
</span><span class="line">   36 </span><span class="str">                (begin
</span><span class="line">   37 </span><span class="str">                        (set '</span>bool <span class="sym">(</span><span class="kwa">not</span> bool<span class="sym">))
</span><span class="line">   38 </span><span class="sym">                        (</span><span class="kwa">set</span> <span class="str">'counter 0))
</span><span class="line">   39 </span><span class="str">                counter ))
</span><span class="line">   40 </span><span class="str">
</span><span class="line">   41 </span><span class="str">(context '</span>MAIN<span class="sym">)
</span><span class="line">   42 </span><span class="sym">
</span><span class="line">   43 </span><span class="sym"></span># get n from <span class="kwa">command line
</span><span class="line">   44 </span><span class="kwa">
</span><span class="line">   45 </span><span class="kwa"></span><span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))
</span><span class="line">   46 </span><span class="str">
</span><span class="line">   47 </span><span class="str">(define (main)
</span><span class="line">   48 </span><span class="str">        (new Toggle '</span>toggle<span class="sym">)
</span><span class="line">   49 </span><span class="sym">        (</span>toggle<span class="sym">:</span>init true<span class="sym">)
</span><span class="line">   50 </span><span class="sym">
</span><span class="line">   51 </span><span class="sym">        (</span>dotimes <span class="sym">(</span>x <span class="num">5</span><span class="sym">)
</span><span class="line">   52 </span><span class="sym">                (</span>toggle<span class="sym">:</span>activate<span class="sym">)
</span><span class="line">   53 </span><span class="sym">                (</span><span class="kwa">if</span> <span class="sym">(</span>toggle<span class="sym">:</span>value<span class="sym">) (</span>println <span class="str">&quot;true&quot;</span><span class="sym">) (</span>println <span class="str">&quot;false&quot;</span><span class="sym">)))
</span><span class="line">   54 </span><span class="sym">
</span><span class="line">   55 </span><span class="sym">        (</span>dotimes <span class="sym">(</span>x n<span class="sym">)
</span><span class="line">   56 </span><span class="sym">                (</span>new Toggle <span class="str">'toggle)
</span><span class="line">   57 </span><span class="str">                (toggle:init true))
</span><span class="line">   58 </span><span class="str">
</span><span class="line">   59 </span><span class="str">        (println)
</span><span class="line">   60 </span><span class="str">
</span><span class="line">   61 </span><span class="str">        (new NthToggle '</span>ntoggle<span class="sym">)
</span><span class="line">   62 </span><span class="sym">        (</span>ntoggle<span class="sym">:</span>init true <span class="num">3</span><span class="sym">)
</span><span class="line">   63 </span><span class="sym">
</span><span class="line">   64 </span><span class="sym">        (</span>dotimes <span class="sym">(</span>x <span class="num">8</span><span class="sym">)
</span><span class="line">   65 </span><span class="sym">                (</span>ntoggle<span class="sym">:</span>activate<span class="sym">)
</span><span class="line">   66 </span><span class="sym">                (</span><span class="kwa">if</span> <span class="sym">(</span>ntoggle<span class="sym">:</span>value<span class="sym">) (</span>println <span class="str">&quot;true&quot;</span><span class="sym">) (</span>println <span class="str">&quot;false&quot;</span><span class="sym">)))
</span><span class="line">   67 </span><span class="sym">
</span><span class="line">   68 </span><span class="sym">        (</span>dotimes <span class="sym">(</span>x n<span class="sym">)
</span><span class="line">   69 </span><span class="sym">                (</span>new NthToggle <span class="str">'ntoggle)
</span><span class="line">   70 </span><span class="str">                (ntoggle:init true 3))
</span><span class="line">   71 </span><span class="str">        )
</span><span class="line">   72 </span><span class="str">
</span><span class="line">   73 </span><span class="str">(main)
</span><span class="line">   74 </span><span class="str">(exit)
</span><span class="line">   75 </span><span class="str">
</span><span class="line">   76 </span><span class="str"></span>
