<span class="slc">// -*- mode: c++ -*-
</span><span class="slc">// $Id: hash-icpp.code,v 1.7 2005-10-07 05:43:35 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org
</span><span class="slc">//
</span><span class="slc">// Improved by Brad Knotwell to use memory constraints
</span>
<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;iostream&gt;
</span><span class="dir">#include &lt;memory&gt;
</span><span class="dir">#include &lt;ext/hash_map&gt;
</span>
<span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="dir">#if (! defined(__INTEL_COMPILER))
</span><span class="kwa">using namespace</span> __gnu_cxx<span class="sym">;
</span><span class="dir">#endif
</span>
<span class="kwb">struct</span> eqstr <span class="sym">{
</span>    <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">const char</span><span class="sym">*</span> s1<span class="sym">,</span> <span class="kwb">const char</span><span class="sym">*</span> s2<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{
</span>	<span class="kwa">return</span> strcmp<span class="sym">(</span>s1<span class="sym">,</span> s2<span class="sym">) ==</span> <span class="num">0</span><span class="sym">;
    }
};

</span><span class="dir">#if defined(__INTEL_COMPILER)
</span><span class="kwb">struct</span> str_hash_compare
<span class="sym">{
</span>    <span class="kwb">enum</span> <span class="sym">{</span> bucket_size <span class="sym">=</span> <span class="num">4</span><span class="sym">,</span> min_buckets <span class="sym">=</span> <span class="num">8</span> <span class="sym">};

</span>    <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">char const</span> <span class="sym">*</span>s1<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span>s2<span class="sym">)</span> <span class="kwb">const
</span>    <span class="sym">{</span><span class="kwa">return</span> strcmp<span class="sym">(</span>s1<span class="sym">,</span> s2<span class="sym">) &lt;</span> <span class="num">0</span><span class="sym">;}

</span>    <span class="kwb">size_t</span> <span class="kwc">operator</span><span class="sym">() (</span><span class="kwb">const char</span><span class="sym">*</span> s<span class="sym">)</span> <span class="kwb">const
</span>    <span class="sym">{
</span>        <span class="kwb">size_t</span> h <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>        <span class="kwa">for</span> <span class="sym">(; *</span>s<span class="sym">; ++</span>s<span class="sym">)
</span>            h <span class="sym">=</span> <span class="num">5</span> <span class="sym">*</span> h <span class="sym">+ *</span>s<span class="sym">;
</span>        <span class="kwa">return</span> h<span class="sym">;
    }
};
</span><span class="dir">#endif
</span>
<span class="kwb">int
</span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwb">char</span> buf<span class="sym">[</span><span class="num">16</span><span class="sym">];
</span><span class="dir">#if defined(__INTEL_COMPILER)
</span>    <span class="kwc">typedef</span> hash_map<span class="sym">&lt;</span><span class="kwb">const char</span><span class="sym">*,</span> <span class="kwb">int</span><span class="sym">,</span> str_hash_compare<span class="sym">&gt;</span> HM<span class="sym">;
</span><span class="dir">#else
</span>    <span class="kwc">typedef</span> hash_map<span class="sym">&lt;</span><span class="kwb">const char</span><span class="sym">*,</span> <span class="kwb">int</span><span class="sym">,</span> hash<span class="sym">&lt;</span><span class="kwb">const char</span><span class="sym">*&gt;,</span> eqstr<span class="sym">,</span> __single_client_alloc<span class="sym">&gt;</span> HM<span class="sym">;
</span><span class="dir">#endif
</span>    HM X<span class="sym">;

</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	sprintf<span class="sym">(</span>buf<span class="sym">,</span> <span class="str">&quot;%x&quot;</span><span class="sym">,</span> i<span class="sym">);
</span>	X<span class="sym">[</span>strdup<span class="sym">(</span>buf<span class="sym">)] =</span> i<span class="sym">;
    }

</span>    <span class="kwb">int</span> c <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span>n<span class="sym">;</span> i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">--) {
</span>	sprintf<span class="sym">(</span>buf<span class="sym">,</span> <span class="str">&quot;%d&quot;</span><span class="sym">,</span> i<span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>X<span class="sym">.</span>find<span class="sym">(</span>buf<span class="sym">) !=</span> X<span class="sym">.</span>end<span class="sym">())</span> c<span class="sym">++;
    }

</span>    cout <span class="sym">&lt;&lt;</span> c <span class="sym">&lt;&lt;</span> endl<span class="sym">;
}</span>
