<span class="sym">/*</span> The Great Computer Language Shootout
   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)</span>
   updated by John van Groningen

   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
<span class="sym">*/</span>

<span class="kwa">module</span> sieve
<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

Start <span class="sym">=</span> <span class="str">&quot;Count: &quot;</span> <span class="sym">+++</span> toString <span class="sym">(</span>sieve primes lBound <span class="num">0</span> argi<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span>
   <span class="kwa">where</span> primes <span class="sym">=</span> {<span class="kwa">True</span> \\ i<span class="sym">&lt;-[</span><span class="num">0</span>..uBound<span class="sym">]</span>}

lBound <span class="sym">:==</span> <span class="num">2</span>
uBound <span class="sym">:==</span> <span class="num">8192</span>

sieve <span class="sym">:: !*</span>{#.<span class="kwb">Bool</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span>
sieve primes i count rep
   <span class="sym">|</span> i<span class="sym">&gt;</span>uBound
      <span class="sym">|</span> rep<span class="sym">==</span><span class="num">0</span>     <span class="sym">=</span> count
                   <span class="sym">=</span> sieve {primes<span class="sym">&amp;[</span>j<span class="sym">]=</span><span class="kwa">True</span> \\ j<span class="sym">&lt;-[</span><span class="num">0</span>..uBound<span class="sym">]</span>} lBound <span class="num">0</span> <span class="sym">(</span>rep<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
      <span class="sym">|</span> primes.<span class="sym">[</span>i<span class="sym">] =</span> sieve <span class="sym">(</span>loop primes i i<span class="sym">) (</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>count<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> rep
                   <span class="sym">=</span> sieve primes <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> count rep

   <span class="kwa">where</span>
   loop primes i ii
      <span class="sym">|</span> ii<span class="sym">&lt;=</span>uBound  <span class="sym">=</span> loop {primes<span class="sym">&amp;[</span>ii<span class="sym">]=</span><span class="kwa">False</span>} i <span class="sym">(</span>ii<span class="sym">+</span>i<span class="sym">)</span>
                    <span class="sym">=</span> primes
