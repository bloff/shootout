<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   http://www.bagley.org/~doug/shootout/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release hash2.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">char</span><span class="sym">[</span><span class="num">16</span><span class="sym">]</span>    <span class="kwc">str</span><span class="sym">;</span>
    <span class="kwa">int</span><span class="sym">[</span><span class="kwa">char</span><span class="sym">[]]</span> X0<span class="sym">;</span>
    <span class="kwa">int</span><span class="sym">[</span><span class="kwa">char</span><span class="sym">[]]</span> X1<span class="sym">;</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;=</span> <span class="num">9999</span><span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwa">int</span> len <span class="sym">=</span> <span class="kwd">sprintf</span><span class="sym">(</span><span class="kwc">str</span><span class="sym">,</span><span class="str">&quot;foo_%d&quot;</span><span class="sym">,</span>i<span class="sym">);</span>
        X0<span class="sym">[</span><span class="kwc">str</span><span class="sym">[</span><span class="num">0</span><span class="sym">..</span>len<span class="sym">].</span>dup<span class="sym">] =</span> i<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">char</span><span class="sym">[][]</span>    keys <span class="sym">=</span> X0<span class="sym">.</span>keys<span class="sym">;</span>
    <span class="kwa">int</span><span class="sym">[]</span>       vals <span class="sym">=</span> X0<span class="sym">.</span>values<span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">int</span> j<span class="sym">,</span> <span class="kwa">char</span><span class="sym">[]</span> key<span class="sym">;</span> keys<span class="sym">)</span>
        <span class="sym">{</span>
            X1<span class="sym">[</span>key<span class="sym">] +=</span> vals<span class="sym">[</span>j<span class="sym">];</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;%d %d %d %d&quot;</span><span class="sym">,</span>
       X0<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">],</span>
       X0<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">],</span>
       X1<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">],</span>
       X1<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">]);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
