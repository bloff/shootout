<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by David Pyke, March 2005</span>
<span class="slc"># optimized by Steffen Mueller, Sept 2007</span>

<span class="kwa">use</span> integer<span class="sym">;</span>
<span class="kwa">use</span> strict<span class="sym">;</span>

<span class="kwa">sub</span> nsieve <span class="sym">{</span>
   <span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$m</span><span class="sym">) =</span> <span class="kwb">&#64;_</span><span class="sym">;</span>
   <span class="kwc">my</span> <span class="kwb">&#64;a</span> <span class="sym">= (</span><span class="num">1</span><span class="sym">)</span> x <span class="kwb">$m</span><span class="sym">;</span>

   <span class="kwc">my</span> <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">foreach</span> <span class="kwc">my</span> <span class="kwb">$i</span> <span class="sym">(</span><span class="num">2</span>..<span class="kwb">$m</span><span class="sym">-</span><span class="num">1</span><span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$a</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">]) {</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">my</span> <span class="kwb">$j</span> <span class="sym">=</span> <span class="kwb">$i</span> <span class="sym">+</span> <span class="kwb">$i</span><span class="sym">;</span> <span class="kwb">$j</span> <span class="sym">&lt;</span> <span class="kwb">$m</span><span class="sym">;</span> <span class="kwb">$j</span> <span class="sym">+=</span> <span class="kwb">$i</span><span class="sym">){</span>
            <span class="kwb">$a</span><span class="sym">[</span><span class="kwb">$j</span><span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
         <span class="sym">}</span>
         <span class="sym">++</span><span class="kwb">$count</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwa">return</span> <span class="kwb">$count</span><span class="sym">;</span>
<span class="sym">}</span>


<span class="kwa">sub</span> nsieve_test <span class="sym">{</span>
   <span class="kwc">my</span><span class="sym">(</span><span class="kwb">$n</span><span class="sym">) =</span> <span class="kwb">&#64;_</span><span class="sym">;</span>

   <span class="kwc">my</span> <span class="kwb">$m</span> <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span><span class="kwb">$n</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
   <span class="kwc">my</span> <span class="kwb">$ncount</span><span class="sym">=</span> <span class="kwd">nsieve</span><span class="sym">(</span><span class="kwb">$m</span><span class="sym">);</span>
   printf <span class="str">&quot;Primes up to %8u %8u</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$m</span><span class="sym">,</span> <span class="kwb">$ncount</span><span class="sym">;</span>
<span class="sym">}</span>


<span class="kwc">my</span> <span class="kwb">$N</span> <span class="sym">= (</span><span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;</span> <span class="num">1</span><span class="sym">)</span> ? <span class="num">1</span> <span class="sym">:</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwd">nsieve_test</span><span class="sym">(</span><span class="kwb">$N</span><span class="sym">);</span>
<span class="kwd">nsieve_test</span><span class="sym">(</span><span class="kwb">$N</span><span class="sym">-</span><span class="num">1</span><span class="sym">)</span>  <span class="kwa">if</span> <span class="kwb">$N</span> <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">;</span>
<span class="kwd">nsieve_test</span><span class="sym">(</span><span class="kwb">$N</span><span class="sym">-</span><span class="num">2</span><span class="sym">)</span>  <span class="kwa">if</span> <span class="kwb">$N</span> <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">;</span>


