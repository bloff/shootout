<span class="slc">; The Computer Language Shootout
</span><span class="slc">; http://shootout.alioth.debian.org/
</span><span class="slc">; pidigits: bigloo version
</span><span class="slc">; Sven Hartrumpf 2005-04-26
</span><span class="slc">; Implements 'Spigot' algorithm origionally due to Stanly Rabinowitz.
</span><span class="slc">; Program is based on an implementation for SCM by Aubrey Jaffer and
</span><span class="slc">; Jerry D. Hedden.
</span>
<span class="sym">(</span>module pidigits <span class="sym">(</span>main main<span class="sym">))

(</span>define <span class="sym">(</span>pi n d<span class="sym">)
  (</span>let<span class="sym">* (</span><span class="slc">;(r (inexact-&gt;exact (floor (exp (* d (log 10)))))) ; 10^d
</span>         <span class="sym">(</span>r <span class="sym">(</span>do <span class="sym">((</span>s <span class="num">1</span> <span class="sym">(*</span> <span class="num">10</span> s<span class="sym">)) (</span>i d <span class="sym">(-</span> i <span class="num">1</span><span class="sym">))) ((</span>zero? i<span class="sym">)</span> s<span class="sym">)))</span> <span class="slc">; bigloo: this line is faster
</span>         <span class="sym">(</span>p <span class="sym">(+ (</span>quotient n d<span class="sym">)</span> <span class="num">1</span><span class="sym">))
         (</span>m <span class="sym">(</span>quotient <span class="sym">(*</span> p d <span class="num">3322</span><span class="sym">)</span> <span class="num">1000</span><span class="sym">))
         (</span>a <span class="sym">(</span>make<span class="sym">-</span>vector <span class="sym">(+</span> m <span class="num">1</span><span class="sym">)</span> <span class="num">2</span><span class="sym">))
         (</span>digits <span class="num">0</span><span class="sym">))
    (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a m <span class="num">4</span><span class="sym">)
    (</span>do <span class="sym">((</span>j <span class="num">1</span> <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))
         (</span>q <span class="num">0 0</span><span class="sym">)
         (</span>b <span class="num">2</span> <span class="sym">(</span>remainder q r<span class="sym">)))
      ((&gt;</span> j p<span class="sym">))
      (</span>do <span class="sym">((</span>k m <span class="sym">(-</span> k <span class="num">1</span><span class="sym">)))
        ((</span>zero? k<span class="sym">))
        (</span><span class="kwa">set</span><span class="sym">!</span> q <span class="sym">(+</span> q <span class="sym">(* (</span>vector<span class="sym">-</span>ref a k<span class="sym">)</span> r<span class="sym">)))
        (</span>let <span class="sym">((</span>t <span class="sym">(+ (*</span> k <span class="num">2</span><span class="sym">)</span> <span class="num">1</span><span class="sym">)))
</span>             <span class="slc">;((t (+ (bit-lsh k 1) 1))) ; bigloo: this line is equally fast
</span>          <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a k <span class="sym">(</span>remainder q t<span class="sym">))</span> <span class="slc">; quotient/remainder like in mzscheme would speedup this and the the next line
</span>          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> q <span class="sym">(*</span> k <span class="sym">(</span>quotient q t<span class="sym">)))))
      (</span>let<span class="sym">* ((</span>s <span class="sym">(</span>number<span class="sym">-&gt;</span>string <span class="sym">(+</span> b <span class="sym">(</span>quotient q r<span class="sym">))))
             (</span>l <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> s<span class="sym">)))
        (</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> j <span class="num">1</span><span class="sym">)
               (</span>do <span class="sym">((</span>l l <span class="sym">(+</span> l <span class="num">1</span><span class="sym">)))
                 ((&gt;=</span> l d<span class="sym">))
                 (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> digits n<span class="sym">)
                        (</span>write<span class="sym">-</span>char #\<span class="num">0</span><span class="sym">)
                        (</span><span class="kwa">set</span><span class="sym">!</span> digits <span class="sym">(+</span> digits <span class="num">1</span><span class="sym">))
                        (</span><span class="kwa">cond</span> <span class="sym">((</span>zero? <span class="sym">(</span>modulo digits <span class="num">10</span><span class="sym">))
                               (</span>write<span class="sym">-</span>char #\tab<span class="sym">) (</span>display <span class="str">&quot; :&quot;</span><span class="sym">) (</span>write digits<span class="sym">) (</span>newline<span class="sym">))))))))
        (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
          ((=</span> i l<span class="sym">))
          (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> digits n<span class="sym">)
                 (</span>write<span class="sym">-</span>char <span class="sym">(</span>string<span class="sym">-</span>ref s i<span class="sym">))
                 (</span><span class="kwa">set</span><span class="sym">!</span> digits <span class="sym">(+</span> digits <span class="num">1</span><span class="sym">))
                 (</span><span class="kwa">cond</span> <span class="sym">((</span>zero? <span class="sym">(</span>modulo digits <span class="num">10</span><span class="sym">))
                        (</span>write<span class="sym">-</span>char #\tab<span class="sym">) (</span>display <span class="str">&quot; :&quot;</span><span class="sym">) (</span>write digits<span class="sym">) (</span>newline<span class="sym">))))))))))

</span><span class="slc">; bigloo: d maximally 5 (or 4?, otherwise overflow? causing incorrect results), d minimally (still with correct results) 3
</span>
<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>pi <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">))</span> <span class="num">5</span><span class="sym">))
</span>  <span class="slc">;(do ((i (string-&gt;number (cadr args)) (+ i 10)) (n 100 (- n 1))) ((&lt;= n 0)) (pi i 5)) ; for getting measurable runtime</span>
