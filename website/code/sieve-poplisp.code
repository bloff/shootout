<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; $Id: sieve-poplisp.code,v 1.5 2005-05-15 05:34:05 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span>
<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))
(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> pop11<span class="sym">::</span>poparglist<span class="sym">)</span> <span class="str">&quot;1&quot;</span><span class="sym">)))
	(</span>flags <span class="sym">(</span>make<span class="sym">-</span>array <span class="num">8193</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'fixnum :initial-element 1)))
(loop repeat n of-type fixnum for count of-type fixnum = 0 then 0 do
   (loop for i fixnum from 2 upto 8192 do
	  (unless (zerop (aref flags i))
		(loop for k fixnum from (* 2 i) upto 8192 by i do
			  (setf (aref flags k) 0))
		(incf count)))
   finally (format t &quot;Count: ~D~%&quot; count)))</span>
