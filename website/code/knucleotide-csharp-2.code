<span class="com">/* The Computer Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Isaac Gouy</span>
<span class="com"> * modified by Antti Lankila for generics</span>
<span class="com"> */</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">.</span>Generic<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;</span>

<span class="kwa">public class</span> program <span class="sym">{</span>
    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">[]</span> args<span class="sym">) {</span>
	<span class="kwb">string</span> line<span class="sym">;</span>
	StreamReader source <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StreamReader</span><span class="sym">(</span>Console<span class="sym">.</span><span class="kwd">OpenStandardInput</span><span class="sym">());</span>
	StringBuilder input <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StringBuilder</span><span class="sym">();</span>

	<span class="kwa">while</span> <span class="sym">( (</span>line <span class="sym">=</span> source<span class="sym">.</span><span class="kwd">ReadLine</span><span class="sym">() ) !=</span> <span class="kwa">null</span> <span class="sym">) {</span>
	    <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span> <span class="sym">&amp;&amp;</span> line<span class="sym">.</span><span class="kwd">Substring</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">5</span><span class="sym">) ==</span> <span class="str">&quot;THREE&quot;</span><span class="sym">)</span>
		<span class="kwa">break</span><span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwa">while</span> <span class="sym">( (</span>line <span class="sym">=</span> source<span class="sym">.</span><span class="kwd">ReadLine</span><span class="sym">()) !=</span> <span class="kwa">null</span> <span class="sym">) {</span>
            <span class="kwb">char</span> c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
               <span class="kwa">break</span><span class="sym">;</span>
            <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)</span>
               input<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span>line<span class="sym">.</span><span class="kwd">ToUpper</span><span class="sym">());</span>
	<span class="sym">}</span>

	KNucleotide kn <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">KNucleotide</span><span class="sym">(</span>input<span class="sym">.</span><span class="kwd">ToString</span><span class="sym">());</span>
        input <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
	kn<span class="sym">.</span><span class="kwd">WriteFrequencies</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
	kn<span class="sym">.</span><span class="kwd">WriteFrequencies</span><span class="sym">(</span><span class="num">2</span><span class="sym">);</span>

	kn<span class="sym">.</span><span class="kwd">WriteCount</span><span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">);</span>
	kn<span class="sym">.</span><span class="kwd">WriteCount</span><span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">);</span>
	kn<span class="sym">.</span><span class="kwd">WriteCount</span><span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">);</span>
	kn<span class="sym">.</span><span class="kwd">WriteCount</span><span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);</span>
	kn<span class="sym">.</span><span class="kwd">WriteCount</span><span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">public class</span> KNucleotide <span class="sym">{</span>
    <span class="com">/* freq[foo] ++ implies a get and a set. */</span>
    <span class="kwa">internal class</span> Value <span class="sym">{</span>
	<span class="kwa">internal</span> <span class="kwb">int</span> v<span class="sym">;</span>

	<span class="kwa">internal</span> <span class="kwd">Value</span><span class="sym">(</span><span class="kwb">int</span> v<span class="sym">)</span>
	<span class="sym">{</span>
	    <span class="kwa">this</span><span class="sym">.</span>v <span class="sym">=</span> v<span class="sym">;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">private</span> Dictionary<span class="sym">&lt;</span><span class="kwb">string</span><span class="sym">,</span> Value<span class="sym">&gt;</span> frequencies <span class="sym">=</span> <span class="kwa">new</span> Dictionary<span class="sym">&lt;</span><span class="kwb">string</span><span class="sym">,</span> Value<span class="sym">&gt;();</span>
    <span class="kwa">private</span> <span class="kwb">string</span> sequence<span class="sym">;</span>

    <span class="kwa">public</span> <span class="kwd">KNucleotide</span><span class="sym">(</span><span class="kwb">string</span> s<span class="sym">)</span>
    <span class="sym">{</span>
	sequence <span class="sym">=</span> s<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">WriteFrequencies</span><span class="sym">(</span><span class="kwb">int</span> nucleotideLength<span class="sym">) {</span>
	<span class="kwd">GenerateFrequencies</span><span class="sym">(</span>nucleotideLength<span class="sym">);</span>

	List<span class="sym">&lt;</span>KeyValuePair<span class="sym">&lt;</span><span class="kwb">string</span><span class="sym">,</span> Value<span class="sym">&gt;&gt;</span> items <span class="sym">=</span> <span class="kwa">new</span> List<span class="sym">&lt;</span>KeyValuePair<span class="sym">&lt;</span><span class="kwb">string</span><span class="sym">,</span> Value<span class="sym">&gt;&gt;(</span>frequencies<span class="sym">);</span>
	items<span class="sym">.</span><span class="kwd">Sort</span><span class="sym">(</span>SortByFrequencyAndCode<span class="sym">);</span>

	<span class="kwb">int</span> sum <span class="sym">=</span> sequence<span class="sym">.</span>Length <span class="sym">-</span> nucleotideLength <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
	<span class="kwa">foreach</span> <span class="sym">(</span>KeyValuePair<span class="sym">&lt;</span><span class="kwb">string</span><span class="sym">,</span> Value<span class="sym">&gt;</span> each in items<span class="sym">) {</span>
	    <span class="kwb">double</span> percent <span class="sym">=</span> each<span class="sym">.</span>Value<span class="sym">.</span>v <span class="sym">*</span> <span class="num">100.0</span> <span class="sym">/</span> sum<span class="sym">;</span>
	    Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0} {1:f3}&quot;</span><span class="sym">,</span> each<span class="sym">.</span>Key<span class="sym">,</span> percent<span class="sym">);</span>
	<span class="sym">}</span>
	Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">WriteCount</span><span class="sym">(</span><span class="kwb">string</span> nucleotideFragment<span class="sym">) {</span>
	<span class="kwd">GenerateFrequencies</span><span class="sym">(</span>nucleotideFragment<span class="sym">.</span>Length<span class="sym">);</span>

	<span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">(</span>frequencies<span class="sym">.</span><span class="kwd">ContainsKey</span><span class="sym">(</span>nucleotideFragment<span class="sym">))</span>
	    count <span class="sym">=</span> frequencies<span class="sym">[</span>nucleotideFragment<span class="sym">].</span>v<span class="sym">;</span>
	Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0}</span><span class="esc">\t</span><span class="str">{1}&quot;</span><span class="sym">,</span> count<span class="sym">,</span> nucleotideFragment<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">private</span> <span class="kwb">void</span> <span class="kwd">GenerateFrequencies</span><span class="sym">(</span><span class="kwb">int</span> length<span class="sym">) {</span>
	frequencies<span class="sym">.</span><span class="kwd">Clear</span><span class="sym">();</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> frame <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> frame <span class="sym">&lt;</span> length<span class="sym">;</span> frame<span class="sym">++)</span>
	    <span class="kwd">KFrequency</span><span class="sym">(</span>frame<span class="sym">,</span> length<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">private</span> <span class="kwb">void</span> <span class="kwd">KFrequency</span><span class="sym">(</span><span class="kwb">int</span> readingFrame<span class="sym">,</span> <span class="kwb">int</span> k<span class="sym">) {</span>
	<span class="kwb">int</span> n <span class="sym">=</span> sequence<span class="sym">.</span>Length <span class="sym">-</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
	<span class="com">/* string.Substring is a malloc monster :( */</span>
	<span class="kwa">if</span> <span class="sym">(</span>k <span class="sym">&gt;</span> <span class="num">6</span><span class="sym">) {</span>
	    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> readingFrame<span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i <span class="sym">+=</span> k<span class="sym">) {</span>
		<span class="kwb">string</span> knucleo <span class="sym">=</span> sequence<span class="sym">.</span><span class="kwd">Substring</span><span class="sym">(</span>i<span class="sym">,</span> k<span class="sym">);</span>
		<span class="kwa">if</span> <span class="sym">(</span>frequencies<span class="sym">.</span><span class="kwd">ContainsKey</span><span class="sym">(</span>knucleo<span class="sym">))</span>
		    frequencies<span class="sym">[</span>knucleo<span class="sym">].</span>v <span class="sym">++;</span>
		<span class="kwa">else</span>
		    frequencies<span class="sym">[</span>knucleo<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">Value</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
	    <span class="sym">}</span>
	<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
	    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> readingFrame<span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i <span class="sym">+=</span> k<span class="sym">) {</span>
		<span class="kwb">string</span> knucleo <span class="sym">=</span> sequence<span class="sym">.</span><span class="kwd">Substring</span><span class="sym">(</span>i<span class="sym">,</span> k<span class="sym">);</span>
		<span class="kwa">try</span> <span class="sym">{</span>
		    frequencies<span class="sym">[</span>knucleo<span class="sym">].</span>v <span class="sym">++;</span>
		<span class="sym">}</span>
		<span class="kwa">catch</span> <span class="sym">(</span>KeyNotFoundException<span class="sym">) {</span>
		    frequencies<span class="sym">[</span>knucleo<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">Value</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
		<span class="sym">}</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwb">int</span> <span class="kwd">SortByFrequencyAndCode</span><span class="sym">(</span>KeyValuePair<span class="sym">&lt;</span><span class="kwb">string</span><span class="sym">,</span> Value<span class="sym">&gt;</span> item1<span class="sym">,</span> KeyValuePair<span class="sym">&lt;</span><span class="kwb">string</span><span class="sym">,</span> Value<span class="sym">&gt;</span> item2<span class="sym">) {</span>
	<span class="kwb">int</span> comparison <span class="sym">=</span> item2<span class="sym">.</span>Value<span class="sym">.</span>v<span class="sym">.</span><span class="kwd">CompareTo</span><span class="sym">(</span>item1<span class="sym">.</span>Value<span class="sym">.</span>v<span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(</span>comparison <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> item1<span class="sym">.</span>Key<span class="sym">.</span><span class="kwd">CompareTo</span><span class="sym">(</span>item2<span class="sym">.</span>Key<span class="sym">);</span>
	<span class="kwa">else return</span> comparison<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>
