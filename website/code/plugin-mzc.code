<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="line">    2 </span><span class="slc">;;; -*- mode: scheme -*-
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; $Id: plugin-mzc.code,v 1.3 2004-11-11 07:14:03 bfulgham Exp $
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">;;; Provided by Bengt Kleberg
</span><span class="line">    6 </span><span class="slc"></span><span class="sym">(</span>define make<span class="sym">-</span>decoder <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>decode<span class="sym">-</span>input decode<span class="sym">-</span>version<span class="sym">)
</span><span class="line">    7 </span><span class="sym">    (</span><span class="kwa">list</span> decode<span class="sym">-</span>input decode<span class="sym">-</span>version<span class="sym">)))
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym">(</span>define decoder<span class="sym">-</span>decode <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>decoder<span class="sym">)
</span><span class="line">   10 </span><span class="sym">   (</span><span class="kwa">list</span><span class="sym">-</span>ref decoder <span class="num">0</span><span class="sym">)))
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym">(</span>define decoder<span class="sym">-</span>version <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>decoder<span class="sym">)
</span><span class="line">   13 </span><span class="sym">   (</span><span class="kwa">list</span><span class="sym">-</span>ref decoder <span class="num">1</span><span class="sym">)))
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym">(</span>define new<span class="sym">-</span>decoder
<span class="line">   16 </span>  <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>decoder<span class="sym">)
</span><span class="line">   17 </span><span class="sym">   (</span>let<span class="sym">* ((</span>new<span class="sym">-</span>version <span class="sym">(+ (</span>decoder<span class="sym">-</span>version decoder<span class="sym">)</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   18 </span><span class="sym">      (</span>file   <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> <span class="str">&quot;plugin_&quot;</span> <span class="sym">(</span>number<span class="sym">-&gt;</span>string new<span class="sym">-</span>version<span class="sym">)</span> <span class="str">&quot;.ss&quot;</span><span class="sym">))
</span><span class="line">   19 </span><span class="sym">      (</span>inport <span class="sym">(</span><span class="kwa">open</span><span class="sym">-</span>input<span class="sym">-</span>file file<span class="sym">))
</span><span class="line">   20 </span><span class="sym">      (</span>new<span class="sym">-</span>decode<span class="sym">-</span>input <span class="sym">(</span><span class="kwa">eval</span> <span class="sym">(</span><span class="kwa">read</span> inport<span class="sym">) (</span>interaction<span class="sym">-</span>environment<span class="sym">))))
</span><span class="line">   21 </span><span class="sym">     (</span>begin
<span class="line">   22 </span>       <span class="sym">(</span><span class="kwa">close</span><span class="sym">-</span>input<span class="sym">-</span>port inport<span class="sym">)
</span><span class="line">   23 </span><span class="sym">       (</span>make<span class="sym">-</span>decoder new<span class="sym">-</span>decode<span class="sym">-</span>input new<span class="sym">-</span>version<span class="sym">))))
</span><span class="line">   24 </span><span class="sym">
</span><span class="line">   25 </span><span class="sym">(</span>define decode<span class="sym">-</span>input <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span><span class="kwa">line</span><span class="sym">)
</span><span class="line">   26 </span><span class="sym">   (</span>string<span class="sym">-&gt;</span>number <span class="kwa">line</span><span class="sym">)))
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym">(</span>define pluginport
<span class="line">   29 </span>  <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>n <span class="kwa">line</span><span class="sym">)
</span><span class="line">   30 </span><span class="sym">    (</span>letrec <span class="sym">((</span>plugin <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>i decoder sum<span class="sym">)
</span><span class="line">   31 </span><span class="sym">                                (</span><span class="kwa">cond</span> <span class="sym">((=</span> i <span class="num">0</span><span class="sym">)</span>        sum<span class="sym">)
</span><span class="line">   32 </span><span class="sym">                                        (</span>else <span class="sym">(</span>let <span class="sym">((</span>number <span class="sym">((</span>decoder<span class="sym">-</span>decode decoder<span class="sym">)</span> <span class="kwa">line</span><span class="sym">)))
</span><span class="line">   33 </span><span class="sym">                                                        (</span><span class="kwa">if</span> number
<span class="line">   34 </span>                                                                <span class="sym">(</span>plugin <span class="sym">(-</span> i <span class="num">1</span><span class="sym">) (</span>make<span class="sym">-</span>decoder decode<span class="sym">-</span>input <span class="num">1</span><span class="sym">) (+</span> sum number<span class="sym">))
</span><span class="line">   35 </span><span class="sym">                                                                (</span>plugin i <span class="sym">(</span>new<span class="sym">-</span>decoder decoder<span class="sym">)</span> sum<span class="sym">))))))))
</span><span class="line">   36 </span><span class="sym">      (</span>plugin n <span class="sym">(</span>make<span class="sym">-</span>decoder decode<span class="sym">-</span>input <span class="num">1</span><span class="sym">)</span> <span class="num">0</span><span class="sym">))))
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym">(</span>define main
<span class="line">   39 </span>  <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)
</span><span class="line">   40 </span><span class="sym">    (</span>display
<span class="line">   41 </span>      <span class="sym">(</span>pluginport <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref <span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments <span class="num">0</span><span class="sym">))
</span><span class="line">   42 </span><span class="sym"></span>                  <span class="str">&quot;I 1&quot;</span><span class="sym">))))
</span><span class="line">   43 </span><span class="sym">
</span><span class="line">   44 </span><span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))
</span><span class="line">   45 </span><span class="sym"></span>
