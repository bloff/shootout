<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/mzscheme -r
<I><FONT COLOR="#B22222">;;; -*- mode: scheme -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: plugin-mzc.code,v 1.1 2004-11-02 08:52:38 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">;;; Provided by Bengt Kleberg
</FONT></I>(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">make-decoder</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (decode-input decode-version)
    (list decode-input decode-version)))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">decoder-decode</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (decoder)
   (list-ref decoder 0)))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">decoder-version</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (decoder)
   (list-ref decoder 1)))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">new-decoder</FONT></B>
  (<B><FONT COLOR="#A020F0">lambda</FONT></B> (decoder)
   (<B><FONT COLOR="#A020F0">let*</FONT></B> ((new-version (+ (decoder-version decoder) 1))
      (file   (string-append <B><FONT COLOR="#BC8F8F">&quot;plugin_&quot;</FONT></B> (number-&gt;string new-version) <B><FONT COLOR="#BC8F8F">&quot;.ss&quot;</FONT></B>))
      (inport (open-input-file file))
      (new-decode-input (eval (read inport) (interaction-environment))))
     (<B><FONT COLOR="#A020F0">begin</FONT></B>
       (close-input-port inport)
       (make-decoder new-decode-input new-version))))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">decode-input</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (line)
   (string-&gt;number line)))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">pluginport</FONT></B>
  (<B><FONT COLOR="#A020F0">lambda</FONT></B> (n line)
    (<B><FONT COLOR="#A020F0">letrec</FONT></B> ((plugin (<B><FONT COLOR="#A020F0">lambda</FONT></B> (i decoder sum)
				(<B><FONT COLOR="#A020F0">cond</FONT></B> ((= i 0)	sum)
					(<B><FONT COLOR="#A020F0">else</FONT></B> (<B><FONT COLOR="#A020F0">let</FONT></B> ((number ((decoder-decode decoder) line)))
							(<B><FONT COLOR="#A020F0">if</FONT></B> number
								(plugin (- i 1) (make-decoder decode-input 1) (+ sum number))
								(plugin i (new-decoder decoder) sum))))))))
      (plugin n (make-decoder decode-input 1) 0))))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>
  (<B><FONT COLOR="#A020F0">lambda</FONT></B> (command-line-arguments)
    (display
      (pluginport (string-&gt;number (vector-ref command-line-arguments 0))
		  <B><FONT COLOR="#BC8F8F">&quot;I 1&quot;</FONT></B>))))

(main (current-command-line-arguments))
</pre></td></tr></table>
