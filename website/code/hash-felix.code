<span class="slc">//</span>
<span class="slc">// Contributed by John Skaller</span>
<span class="slc">//</span>
<span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;</span>
n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);</span>
<span class="kwa">include</span> <span class="str">&quot;stl&quot;</span><span class="sym">;</span>
<span class="kwa">open</span> Stl<span class="sym">;</span>
<span class="kwa">open</span> Stl<span class="sym">::</span>HashMap<span class="sym">;</span>

requires ext_string_hash<span class="sym">;</span>

<span class="kwa">body</span> hexer <span class="str">&quot;&quot;&quot;</span>
<span class="str">string hex(int x) { char buf[20]; sprintf(buf,&quot;%x&quot;,x); return buf; }</span>
<span class="str">&quot;&quot;&quot;</span><span class="sym">;</span>

<span class="kwa">fun</span> hex<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">string</span> requires hexer<span class="sym">;</span>

<span class="kwa">var</span> hm <span class="sym">=</span> HashMap<span class="sym">::</span>create<span class="sym">[</span><span class="kwb">string</span><span class="sym">,</span><span class="kwb">int</span><span class="sym">]();</span>

<span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;</span> until i <span class="sym">==</span> <span class="num">0</span> do
  insert<span class="sym">(</span>hm<span class="sym">,</span>hex i<span class="sym">,</span>i<span class="sym">);</span>
  <span class="sym">--</span>i<span class="sym">;</span>
done<span class="sym">;</span>

<span class="kwa">var</span> c <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
i <span class="sym">=</span> n<span class="sym">;</span> until i <span class="sym">==</span> <span class="num">0</span> do
  <span class="kwa">if</span> mem <span class="sym">(</span>hm<span class="sym">,</span>str i<span class="sym">)</span> do c<span class="sym">++;</span> done<span class="sym">;</span>
  <span class="sym">--</span>i<span class="sym">;</span>
done<span class="sym">;</span>

<span class="kwa">print</span> c<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;</span>


