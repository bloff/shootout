<span class="kwa">public class</span> process <span class="sym">{
 
 </span>   <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {
 </span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
 </span>      <span class="kwb">int</span> m <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> <span class="slc">//Integer.parseInt(args[1]); 
</span>
       EndLink chainEnd <span class="sym">=</span> <span class="kwa">new</span> EndLink<span class="sym">(</span>null<span class="sym">,</span> n <span class="sym">*</span> m<span class="sym">);
 </span>      chainEnd<span class="sym">.</span>start<span class="sym">();
 </span>      Link chain <span class="sym">=</span> chainEnd<span class="sym">;
 
          </span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++){
 </span>         Link link <span class="sym">=</span> <span class="kwa">new</span> Link<span class="sym">(</span>chain<span class="sym">);
              </span>         link<span class="sym">.</span>start<span class="sym">();
 </span>         chain <span class="sym">=</span> link<span class="sym">;
       }
 
 </span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>m<span class="sym">;</span> i<span class="sym">++)</span> chain<span class="sym">.</span>put<span class="sym">(</span><span class="num">0</span><span class="sym">);
      </span>      <span class="kwa">try</span> <span class="sym">{</span> chainEnd<span class="sym">.</span>join<span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">){}
  
 </span>      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>chainEnd<span class="sym">.</span>count<span class="sym">);
 </span>      <span class="kwc">System</span><span class="sym">.</span>exit<span class="sym">(</span><span class="num">0</span><span class="sym">);
    }
 }
 
 
 </span><span class="kwa">class</span> Link <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
 </span>   Link next<span class="sym">;
 </span>   <span class="kwb">int</span> message <span class="sym">= -</span><span class="num">1</span><span class="sym">;
 </span>   <span class="kwb">boolean</span> busy <span class="sym">=</span> false<span class="sym">;
 
    </span>   Link<span class="sym">(</span>Link t<span class="sym">){
 </span>      next <span class="sym">=</span> t<span class="sym">;
    }
 
 </span>   <span class="kwa">public</span> <span class="kwb">void</span> run<span class="sym">() {
  </span>      <span class="kwa">for</span> <span class="sym">(;;)</span> next<span class="sym">.</span>put<span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span>take<span class="sym">());
              }
 
 </span>   <span class="kwa">synchronized</span> <span class="kwb">void</span> put<span class="sym">(</span><span class="kwb">int</span> m<span class="sym">) {
 </span>      <span class="kwa">while</span> <span class="sym">(</span>busy<span class="sym">)
 </span>         <span class="kwa">try</span> <span class="sym">{</span> wait<span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">){}
    </span>      busy <span class="sym">=</span> true<span class="sym">;
 </span>      message <span class="sym">=</span> m<span class="sym">;
 </span>      notifyAll<span class="sym">();
 
 </span>      <span class="kwa">while</span> <span class="sym">(</span>message <span class="sym">!= -</span><span class="num">1</span><span class="sym">)
 </span>         <span class="kwa">try</span> <span class="sym">{</span> wait<span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">){}
   </span>      busy <span class="sym">=</span> false<span class="sym">;
 </span>      notifyAll<span class="sym">();
                }
 
 </span>   <span class="kwa">synchronized</span> <span class="kwb">int</span> take<span class="sym">() {
 </span>      <span class="kwa">while</span> <span class="sym">(</span>message <span class="sym">== -</span><span class="num">1</span><span class="sym">)
 </span>         <span class="kwa">try</span> <span class="sym">{</span> wait<span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">){}
   
 </span>      <span class="kwb">int</span> m <span class="sym">=</span> message<span class="sym">;
 </span>      message <span class="sym">= -</span><span class="num">1</span><span class="sym">;
 </span>      notifyAll<span class="sym">();
 </span>      <span class="kwa">return</span> m<span class="sym">+</span><span class="num">1</span><span class="sym">;
                 }
 }
 
 
 </span><span class="kwa">class</span> EndLink <span class="kwa">extends</span> Link <span class="sym">{
 </span>   <span class="kwa">public</span> <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
 </span>   <span class="kwa">private</span> <span class="kwb">int</span> finalcount<span class="sym">;
 
    </span>   EndLink<span class="sym">(</span>Link t<span class="sym">,</span> <span class="kwb">int</span> i<span class="sym">){
 </span>      <span class="kwa">super</span><span class="sym">(</span>t<span class="sym">);
 </span>      finalcount <span class="sym">=</span> i<span class="sym">;
    }
 
 </span>   <span class="kwa">public</span> <span class="kwb">void</span> run<span class="sym">() {
  </span>      <span class="kwa">do
  </span>         count <span class="sym">+=</span> <span class="kwa">this</span><span class="sym">.</span>take<span class="sym">();
  </span>      <span class="kwa">while</span> <span class="sym">(</span>count <span class="sym">&lt;</span> finalcount<span class="sym">);
           }
 }</span> 
