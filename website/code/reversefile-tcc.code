<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: reversefile-tcc.code,v 1.9 2006-06-08 12:23:48 bfulgham Exp $</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * from Alan Post &lt;apost&#64;recalcitrant.org&gt;</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;unistd.h&gt;</span>
<span class="dir">#include &lt;assert.h&gt;</span>
<span class="dir">#include &lt;limits.h&gt;</span>
<span class="dir">#include &lt;sys/uio.h&gt;</span>

<span class="dir">#define MAXREAD 4096</span>
<span class="dir">#define IOV_MAX 1024</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> buf_t <span class="sym">{</span> <span class="kwb">char</span> d<span class="sym">[</span>MAXREAD<span class="sym">];</span>
                       <span class="kwb">size_t</span> len<span class="sym">;</span>
                       <span class="kwb">struct</span> buf_t <span class="sym">*</span>next<span class="sym">;}</span> buf_t<span class="sym">;</span>

<span class="kwb">static</span> <span class="kwd">print_string</span><span class="sym">(</span> <span class="kwb">char</span> <span class="sym">*</span>data<span class="sym">,</span> <span class="kwb">size_t</span> len<span class="sym">,</span>
                     <span class="kwb">struct</span> iovec <span class="sym">*</span>vec<span class="sym">,</span> <span class="kwb">size_t</span> <span class="sym">*</span>p_ivec <span class="sym">)</span>
<span class="sym">{</span>
    vec<span class="sym">[ *</span>p_ivec <span class="sym">].</span>iov_base <span class="sym">=</span> data<span class="sym">;</span>
    vec<span class="sym">[ *</span>p_ivec <span class="sym">].</span>iov_len <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span> len<span class="sym">;</span>
    <span class="sym">++ *</span>p_ivec<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">( *</span>p_ivec <span class="sym">==</span> IOV_MAX <span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">writev</span><span class="sym">(</span> STDOUT_FILENO<span class="sym">,</span> vec<span class="sym">, *</span>p_ivec <span class="sym">);</span>
        <span class="sym">*</span>p_ivec <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">static</span> <span class="kwd">print_line</span><span class="sym">(</span> <span class="kwb">char</span> <span class="sym">*</span>pos<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>end<span class="sym">,</span> buf_t <span class="sym">**</span>p_loh<span class="sym">,</span>
                   <span class="kwb">struct</span> iovec <span class="sym">*</span>vec<span class="sym">,</span> <span class="kwb">size_t</span> <span class="sym">*</span>p_ivec <span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwd">print_string</span><span class="sym">(</span> pos<span class="sym">,</span> end <span class="sym">-</span> pos<span class="sym">,</span> vec<span class="sym">,</span> p_ivec <span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(; *</span>p_loh <span class="sym">!=</span> NULL<span class="sym">; *</span>p_loh <span class="sym">= (*</span>p_loh<span class="sym">)-&gt;</span>next <span class="sym">)</span>
        <span class="kwd">print_string</span><span class="sym">( (*</span>p_loh<span class="sym">)-&gt;</span>d<span class="sym">, (*</span>p_loh<span class="sym">)-&gt;</span>len<span class="sym">,</span> vec<span class="sym">,</span> p_ivec <span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">static void</span> <span class="kwd">rev_print</span><span class="sym">(</span> buf_t <span class="sym">*</span>head <span class="sym">)</span>
<span class="sym">{</span>
    buf_t <span class="sym">*</span>loh <span class="sym">=</span> NULL<span class="sym">;</span>
    buf_t <span class="sym">*</span>curr <span class="sym">=</span> head<span class="sym">;</span>

    <span class="kwb">struct</span> iovec vec<span class="sym">[</span> IOV_MAX <span class="sym">];</span>
    <span class="kwb">size_t</span> ivec <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span> <span class="num">1</span> <span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwb">char</span> <span class="sym">*</span>buf <span class="sym">=</span> curr<span class="sym">-&gt;</span>d<span class="sym">;</span>
        <span class="kwb">char</span> <span class="sym">*</span>end <span class="sym">=</span> buf <span class="sym">+</span> curr<span class="sym">-&gt;</span>len<span class="sym">;</span>
        <span class="kwb">char</span> <span class="sym">*</span>pos <span class="sym">=</span> end<span class="sym">;</span>
        <span class="kwa">for</span> <span class="sym">(;;</span> pos<span class="sym">--)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span> pos <span class="sym">&lt;=</span> buf <span class="sym">)</span>
            <span class="sym">{</span>
                buf_t <span class="sym">*</span>new_curr <span class="sym">=</span> curr<span class="sym">-&gt;</span>next<span class="sym">;</span>

                <span class="kwa">if</span> <span class="sym">(</span> new_curr <span class="sym">==</span> NULL <span class="sym">)</span>
                <span class="sym">{</span>
                    <span class="kwd">print_line</span><span class="sym">(</span> pos<span class="sym">,</span> end<span class="sym">, &amp;</span>loh<span class="sym">,</span> vec<span class="sym">, &amp;</span>ivec <span class="sym">);</span>
                    <span class="kwd">writev</span><span class="sym">(</span> STDOUT_FILENO<span class="sym">,</span> vec<span class="sym">,</span> ivec <span class="sym">);</span>
                    <span class="kwa">return</span><span class="sym">;</span>
                <span class="sym">}</span>

                curr<span class="sym">-&gt;</span>len <span class="sym">=</span> end <span class="sym">-</span> buf<span class="sym">;</span>
                curr<span class="sym">-&gt;</span>next <span class="sym">=</span> loh<span class="sym">;</span>
                loh <span class="sym">=</span> curr<span class="sym">;</span>

                curr <span class="sym">=</span> new_curr<span class="sym">;</span>
                <span class="kwa">break</span><span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">if</span> <span class="sym">( *(</span>pos<span class="sym">-</span><span class="num">1</span><span class="sym">) ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">)</span>
            <span class="sym">{</span>
                <span class="kwd">print_line</span><span class="sym">(</span> pos<span class="sym">,</span> end<span class="sym">, &amp;</span>loh<span class="sym">,</span> vec<span class="sym">, &amp;</span>ivec <span class="sym">);</span>
                end <span class="sym">=</span> pos<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwd">assert</span><span class="sym">(</span> NULL <span class="sym">==</span> <span class="str">&quot;unreachable&quot;</span> <span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">static void</span> <span class="kwd">f</span><span class="sym">(</span> buf_t <span class="sym">*</span>tail <span class="sym">)</span>
<span class="sym">{</span>
    buf_t head<span class="sym">;</span>

    head<span class="sym">.</span>next <span class="sym">=</span> tail<span class="sym">;</span>
    head<span class="sym">.</span>len <span class="sym">=</span> <span class="kwd">read</span><span class="sym">(</span> STDIN_FILENO<span class="sym">,</span> head<span class="sym">.</span>d<span class="sym">,</span> MAXREAD <span class="sym">);</span>

    <span class="kwa">if</span> <span class="sym">(</span> head<span class="sym">.</span>len <span class="sym">==</span> MAXREAD <span class="sym">)</span> <span class="kwd">f</span><span class="sym">( &amp;</span>head <span class="sym">);</span>
    <span class="kwa">else</span> <span class="kwd">rev_print</span><span class="sym">( &amp;</span>head <span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
    <span class="kwd">f</span><span class="sym">(</span> NULL <span class="sym">);</span>
    <span class="kwa">return</span> EXIT_SUCCESS<span class="sym">;</span>
<span class="sym">}</span>

