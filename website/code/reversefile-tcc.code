<span class="com">/* -*- mode: c -*-
 * $Id: reversefile-tcc.code,v 1.1 2005-09-18 05:44:20 bfulgham Exp $
 * http://shootout.alioth.debian.org/
 *
 * from Alan Post &lt;apost&#64;recalcitrant.org&gt;
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="dir">#include &lt;assert.h&gt;
</span><span class="dir">#include &lt;limits.h&gt;
</span><span class="dir">#include &lt;sys/uio.h&gt;
</span>
<span class="dir">#define MAXREAD 4096
</span><span class="dir">#define IOV_MAX 1024
</span>
<span class="kwc">typedef</span> <span class="kwb">struct</span> buf_t <span class="sym">{</span> <span class="kwb">char</span> d<span class="sym">[</span>MAXREAD<span class="sym">];
</span>                       <span class="kwb">size_t</span> len<span class="sym">;
</span>                       <span class="kwb">struct</span> buf_t <span class="sym">*</span>next<span class="sym">;}</span> buf_t<span class="sym">;

</span><span class="kwb">static</span> print_string<span class="sym">(</span> <span class="kwb">char</span> <span class="sym">*</span>data<span class="sym">,</span> <span class="kwb">size_t</span> len<span class="sym">,
</span>                     <span class="kwb">struct</span> iovec <span class="sym">*</span>vec<span class="sym">,</span> <span class="kwb">size_t</span> <span class="sym">*</span>p_ivec <span class="sym">)
{
</span>    vec<span class="sym">[ *</span>p_ivec <span class="sym">].</span>iov_base <span class="sym">=</span> data<span class="sym">;
</span>    vec<span class="sym">[ *</span>p_ivec <span class="sym">].</span>iov_len <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span> len<span class="sym">;
    ++ *</span>p_ivec<span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">( *</span>p_ivec <span class="sym">==</span> IOV_MAX <span class="sym">)
    {
</span>        writev<span class="sym">(</span> STDOUT_FILENO<span class="sym">,</span> vec<span class="sym">, *</span>p_ivec <span class="sym">);
        *</span>p_ivec <span class="sym">=</span> <span class="num">0</span><span class="sym">;
    }
}

</span><span class="kwb">static</span> print_line<span class="sym">(</span> <span class="kwb">char</span> <span class="sym">*</span>pos<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>end<span class="sym">,</span> buf_t <span class="sym">**</span>p_loh<span class="sym">,
</span>                   <span class="kwb">struct</span> iovec <span class="sym">*</span>vec<span class="sym">,</span> <span class="kwb">size_t</span> <span class="sym">*</span>p_ivec <span class="sym">)
{
</span>    print_string<span class="sym">(</span> pos<span class="sym">,</span> end <span class="sym">-</span> pos<span class="sym">,</span> vec<span class="sym">,</span> p_ivec <span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(; *</span>p_loh <span class="sym">!=</span> NULL<span class="sym">; *</span>p_loh <span class="sym">= (*</span>p_loh<span class="sym">)-&gt;</span>next <span class="sym">)
</span>        print_string<span class="sym">( (*</span>p_loh<span class="sym">)-&gt;</span>d<span class="sym">, (*</span>p_loh<span class="sym">)-&gt;</span>len<span class="sym">,</span> vec<span class="sym">,</span> p_ivec <span class="sym">);
}

</span><span class="kwb">static void</span> rev_print<span class="sym">(</span> buf_t <span class="sym">*</span>head <span class="sym">)
{
</span>    buf_t <span class="sym">*</span>loh <span class="sym">=</span> NULL<span class="sym">;
</span>    buf_t <span class="sym">*</span>curr <span class="sym">=</span> head<span class="sym">;

</span>    <span class="kwb">struct</span> iovec vec<span class="sym">[</span> IOV_MAX <span class="sym">];
</span>    <span class="kwb">size_t</span> ivec <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>    <span class="kwa">while</span> <span class="sym">(</span> <span class="num">1</span> <span class="sym">)
    {
</span>        <span class="kwb">char</span> <span class="sym">*</span>buf <span class="sym">=</span> curr<span class="sym">-&gt;</span>d<span class="sym">;
</span>        <span class="kwb">char</span> <span class="sym">*</span>end <span class="sym">=</span> buf <span class="sym">+</span> curr<span class="sym">-&gt;</span>len<span class="sym">;
</span>        <span class="kwb">char</span> <span class="sym">*</span>pos <span class="sym">=</span> end<span class="sym">;
</span>        <span class="kwa">for</span> <span class="sym">(;;</span> pos<span class="sym">--)
        {
</span>            <span class="kwa">if</span> <span class="sym">(</span> pos <span class="sym">&lt;=</span> buf <span class="sym">)
            {
</span>                buf_t <span class="sym">*</span>new_curr <span class="sym">=</span> curr<span class="sym">-&gt;</span>next<span class="sym">;

</span>                <span class="kwa">if</span> <span class="sym">(</span> new_curr <span class="sym">==</span> NULL <span class="sym">)
                {
</span>                    print_line<span class="sym">(</span> pos<span class="sym">,</span> end<span class="sym">, &amp;</span>loh<span class="sym">,</span> vec<span class="sym">, &amp;</span>ivec <span class="sym">);
</span>                    writev<span class="sym">(</span> STDOUT_FILENO<span class="sym">,</span> vec<span class="sym">,</span> ivec <span class="sym">);
</span>                    <span class="kwa">return</span><span class="sym">;
                }

</span>                curr<span class="sym">-&gt;</span>len <span class="sym">=</span> end <span class="sym">-</span> buf<span class="sym">;
</span>                curr<span class="sym">-&gt;</span>next <span class="sym">=</span> loh<span class="sym">;
</span>                loh <span class="sym">=</span> curr<span class="sym">;

</span>                curr <span class="sym">=</span> new_curr<span class="sym">;
</span>                <span class="kwa">break</span><span class="sym">;
            }
</span>            <span class="kwa">if</span> <span class="sym">( *(</span>pos<span class="num">-1</span><span class="sym">) ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">)
            {
</span>                print_line<span class="sym">(</span> pos<span class="sym">,</span> end<span class="sym">, &amp;</span>loh<span class="sym">,</span> vec<span class="sym">, &amp;</span>ivec <span class="sym">);
</span>                end <span class="sym">=</span> pos<span class="sym">;
            }
        }
    }
</span>    assert<span class="sym">(</span> NULL <span class="sym">==</span> <span class="str">&quot;unreachable&quot;</span> <span class="sym">);
}

</span><span class="kwb">static void</span> f<span class="sym">(</span> buf_t <span class="sym">*</span>tail <span class="sym">)
{
</span>    buf_t head<span class="sym">;

</span>    head<span class="sym">.</span>next <span class="sym">=</span> tail<span class="sym">;
</span>    head<span class="sym">.</span>len <span class="sym">=</span> read<span class="sym">(</span> STDIN_FILENO<span class="sym">,</span> head<span class="sym">.</span>d<span class="sym">,</span> MAXREAD <span class="sym">);

</span>    <span class="kwa">if</span> <span class="sym">(</span> head<span class="sym">.</span>len <span class="sym">==</span> MAXREAD <span class="sym">)</span> f<span class="sym">( &amp;</span>head <span class="sym">);
</span>    <span class="kwa">else</span> rev_print<span class="sym">( &amp;</span>head <span class="sym">);
}

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])
{
</span>    f<span class="sym">(</span> NULL <span class="sym">);
</span>    <span class="kwa">return</span> EXIT_SUCCESS<span class="sym">;
}
</span>
