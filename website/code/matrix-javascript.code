<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// contributed by David Hedbor</span>
<span class="slc">// modified by Isaac Gouy</span>

<span class="kwa">var</span> SIZE<span class="sym">=</span><span class="num">30</span><span class="sym">;</span>

<span class="kwa">function</span> <span class="kwd">mkmatrix</span><span class="sym">(</span>rows<span class="sym">,</span> cols<span class="sym">) {</span>
  <span class="kwa">var</span> i<span class="sym">,</span> j<span class="sym">,</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">var</span> m <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">(</span>rows<span class="sym">);</span>
  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> rows<span class="sym">;</span> i<span class="sym">++) {</span>
    m<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">(</span>cols<span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> cols<span class="sym">;</span> j<span class="sym">++) {</span>
      m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> count<span class="sym">++;</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
  <span class="kwa">return</span> m<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">mmult</span><span class="sym">(</span>rows<span class="sym">,</span> cols<span class="sym">,</span>  m1<span class="sym">,</span> m2<span class="sym">,</span> m3<span class="sym">) {</span>
  <span class="kwa">var</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> val<span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> rows<span class="sym">;</span> i<span class="sym">++) {</span>
    <span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> cols<span class="sym">;</span> j<span class="sym">++) {</span>
      val <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span>k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> k <span class="sym">&lt;</span> cols<span class="sym">;</span> k<span class="sym">++) {</span>
	val <span class="sym">+=</span> m1<span class="sym">[</span>i<span class="sym">][</span>k<span class="sym">] *</span> m2<span class="sym">[</span>k<span class="sym">][</span>j<span class="sym">];</span>
      <span class="sym">}</span>
      m3<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> val<span class="sym">;</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
  <span class="kwa">return</span> m3<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwa">var</span> i<span class="sym">;</span>
<span class="kwa">var</span> m1 <span class="sym">=</span> <span class="kwd">mkmatrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);</span>
<span class="kwa">var</span> m2 <span class="sym">=</span> <span class="kwd">mkmatrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);</span>
<span class="kwa">var</span> mm <span class="sym">=</span> <span class="kwd">mkmatrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);</span>

<span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {</span>
  <span class="kwd">mmult</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);</span>
<span class="sym">}</span>
<span class="kwc">print</span><span class="sym">(</span>mm<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">2</span><span class="sym">][</span><span class="num">3</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">3</span><span class="sym">][</span><span class="num">2</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">4</span><span class="sym">][</span><span class="num">4</span><span class="sym">]);</span>
