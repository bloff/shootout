#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: moments-guile.code,v 1.8 2006-09-20 05:51:58 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>
<span class="slc">;;; from Brad Knotwell</span>

<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="sym">-</span><span class="num">9</span> format<span class="sym">))</span>

<span class="sym">(</span>define sum <span class="num">0</span><span class="sym">)</span>
<span class="sym">(</span>define nums <span class="str">'())</span>
<span class="str">(define (compute-all mean n continuation)</span>
<span class="str">  (let ((average-deviation 0) (standard-deviation 0) (variance 0) (skew 0)</span>
<span class="str">        (kurtosis 0) (mid 0) (median 0) (deviation 0) (tmp-lst nums))</span>
<span class="str">    (do ((num (car tmp-lst) (if (eq? tmp-lst '</span><span class="sym">())</span> <span class="str">'() (car tmp-lst))))</span>
<span class="str">	((eq? num '</span><span class="sym">()) (</span>begin <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> variance <span class="sym">(/</span> variance <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">)))</span>
			      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> standard<span class="sym">-</span>deviation <span class="sym">(</span><span class="kwa">sqrt</span> variance<span class="sym">))</span>
			      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> variance <span class="num">0.0</span><span class="sym">)</span>
				  <span class="sym">(</span>begin <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> skew <span class="sym">(/</span> skew <span class="sym">(*</span> n variance standard<span class="sym">-</span>deviation<span class="sym">)))</span>
					 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> kurtosis <span class="sym">(- (/</span> kurtosis <span class="sym">(*</span> n variance variance<span class="sym">))</span> <span class="num">3</span><span class="sym">))))</span>
			      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> nums <span class="sym">(</span>sort<span class="sym">-</span><span class="kwa">list</span> nums <span class="sym">&gt;))</span>
			      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> mid <span class="sym">(/</span> n <span class="num">2</span><span class="sym">))</span>
			      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> median <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>remainder n <span class="num">2</span><span class="sym">)</span> <span class="num">0</span><span class="sym">)</span>
					       <span class="sym">(/ (+ (</span><span class="kwa">list</span><span class="sym">-</span>ref nums mid<span class="sym">)</span>
						     <span class="sym">(</span><span class="kwa">list</span><span class="sym">-</span>ref nums <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> mid<span class="sym">)))</span>
						  <span class="num">2</span><span class="sym">)</span>
					       <span class="sym">(</span><span class="kwa">list</span><span class="sym">-</span>ref nums mid<span class="sym">)))</span>
			      <span class="sym">(</span>continuation n median mean
					    <span class="sym">(/</span> average<span class="sym">-</span>deviation n<span class="sym">)</span>
					    standard<span class="sym">-</span>deviation variance
					    skew kurtosis<span class="sym">)))</span>
      <span class="sym">(</span>let <span class="sym">((</span>deviation <span class="sym">(-</span> num mean<span class="sym">)))</span>
	<span class="sym">(</span>begin <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> tmp<span class="sym">-</span>lst <span class="sym">(</span><span class="kwa">cdr</span> tmp<span class="sym">-</span>lst<span class="sym">))</span>
	       <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> average<span class="sym">-</span>deviation <span class="sym">(+</span> average<span class="sym">-</span>deviation <span class="sym">(</span><span class="kwa">abs</span> deviation<span class="sym">)))</span>
	       <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> variance <span class="sym">(+</span> variance <span class="sym">(</span><span class="kwa">expt</span> deviation <span class="num">2</span><span class="sym">)))</span>
	       <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> skew <span class="sym">(+</span> skew <span class="sym">(</span><span class="kwa">expt</span> deviation <span class="num">3</span><span class="sym">)))</span>
	       <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> kurtosis <span class="sym">(+</span> kurtosis <span class="sym">(</span><span class="kwa">expt</span> deviation <span class="num">4</span><span class="sym">))))))))</span>

<span class="sym">(</span>define output<span class="sym">-</span>format
<span class="str">&quot;n:                  ~D</span>
<span class="str">median:             ~,6F</span>
<span class="str">mean:               ~,6F</span>
<span class="str">average_deviation:  ~,6F</span>
<span class="str">standard_deviation: ~,6F</span>
<span class="str">variance:           ~,6F</span>
<span class="str">skew:               ~,6F</span>
<span class="str">kurtosis:           ~,6F</span>
<span class="str">&quot;</span><span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">) (</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
      <span class="sym">((</span>eof<span class="sym">-</span>object? <span class="kwa">line</span><span class="sym">)</span>
       <span class="sym">(</span>compute<span class="sym">-</span>all <span class="sym">(/</span> sum <span class="sym">(</span><span class="kwa">length</span> nums<span class="sym">)) (</span><span class="kwa">length</span> nums<span class="sym">)</span>
		    <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x . y<span class="sym">) (</span>display <span class="sym">(</span><span class="kwa">apply</span> format <span class="sym">(</span><span class="kwa">cons</span> output<span class="sym">-</span>format <span class="sym">(</span><span class="kwa">cons</span> x y<span class="sym">)))))))</span>
    <span class="sym">(</span>let <span class="sym">((</span>num <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="kwa">line</span><span class="sym">)))</span>
      <span class="sym">(</span>begin <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> nums <span class="sym">(</span><span class="kwa">cons</span> num nums<span class="sym">)) (</span><span class="kwa">set</span><span class="sym">!</span> sum <span class="sym">(+</span> sum num<span class="sym">))))))</span>
