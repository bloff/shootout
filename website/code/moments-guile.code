<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/guile \
-e main -s
!#

<I><FONT COLOR="#B22222">;;; $Id: moments-guile.code,v 1.2 2004-11-08 08:15:17 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">;;; from Brad Knotwell
</FONT></I>
(use-modules (ice-9 format))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">sum</FONT></B> 0)
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">nums</FONT></B> '())
(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">compute-all</FONT></B> mean n continuation)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((average-deviation 0) (standard-deviation 0) (variance 0) (skew 0) 
        (kurtosis 0) (mid 0) (median 0) (deviation 0) (tmp-lst nums))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((num (car tmp-lst) (<B><FONT COLOR="#A020F0">if</FONT></B> (eq? tmp-lst '()) '() (car tmp-lst))))
	((eq? num '()) (<B><FONT COLOR="#A020F0">begin</FONT></B> (<B><FONT COLOR="#A020F0">set!</FONT></B> variance (/ variance (1- n)))
			      (<B><FONT COLOR="#A020F0">set!</FONT></B> standard-deviation (sqrt variance))
			      (<B><FONT COLOR="#A020F0">if</FONT></B> (&gt; variance 0.0)
				  (<B><FONT COLOR="#A020F0">begin</FONT></B> (<B><FONT COLOR="#A020F0">set!</FONT></B> skew (/ skew (* n variance standard-deviation)))
					 (<B><FONT COLOR="#A020F0">set!</FONT></B> kurtosis (- (/ kurtosis (* n variance variance)) 3))))
			      (<B><FONT COLOR="#A020F0">set!</FONT></B> nums (sort-list nums &gt;))
			      (<B><FONT COLOR="#A020F0">set!</FONT></B> mid (/ n 2))
			      (<B><FONT COLOR="#A020F0">set!</FONT></B> median (<B><FONT COLOR="#A020F0">if</FONT></B> (= (remainder n 2) 0) 
					       (/ (+ (list-ref nums mid)
						     (list-ref nums (1- mid)))
						  2)
					       (list-ref nums mid)))
			      (continuation n median mean 
					    (/ average-deviation n)
					    standard-deviation variance
					    skew kurtosis)))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((deviation (- num mean)))
	(<B><FONT COLOR="#A020F0">begin</FONT></B> (<B><FONT COLOR="#A020F0">set!</FONT></B> tmp-lst (cdr tmp-lst))
	       (<B><FONT COLOR="#A020F0">set!</FONT></B> average-deviation (+ average-deviation (abs deviation)))
	       (<B><FONT COLOR="#A020F0">set!</FONT></B> variance (+ variance (expt deviation 2)))
	       (<B><FONT COLOR="#A020F0">set!</FONT></B> skew (+ skew (expt deviation 3)))
	       (<B><FONT COLOR="#A020F0">set!</FONT></B> kurtosis (+ kurtosis (expt deviation 4))))))))
	
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">output-format</FONT></B>
<B><FONT COLOR="#BC8F8F">&quot;n:                  ~D
median:             ~,6F
mean:               ~,6F
average_deviation:  ~,6F
standard_deviation: ~,6F
variance:           ~,6F
skew:               ~,6F
kurtosis:           ~,6F
&quot;</FONT></B>)

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">do</FONT></B> ((line (read-line) (read-line)))
      ((eof-object? line)
       (compute-all (/ sum (length nums)) (length nums)
		    (<B><FONT COLOR="#A020F0">lambda</FONT></B> (x . y) (display (apply format (cons output-format (cons x y)))))))
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((num (string-&gt;number line)))
      (<B><FONT COLOR="#A020F0">begin</FONT></B> (<B><FONT COLOR="#A020F0">set!</FONT></B> nums (cons num nums)) (<B><FONT COLOR="#A020F0">set!</FONT></B> sum (+ sum num))))))</pre></td></tr></table>
