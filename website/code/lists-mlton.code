<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: lists-mlton.code,v 1.4 2004-11-13 07:41:49 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * from Stephen Weeks
</span><span class="line">    5 </span><span class="com"> *)</span>
<span class="line">    6 </span><span class="com">(* Translated from lists.ocaml. *)</span>
<span class="line">    7 </span>
<span class="line">    8 </span><span class="kwa">val</span> sub <span class="sym">=</span> Array.sub
<span class="line">    9 </span><span class="kwa">val</span> update <span class="sym">=</span> Array.update
<span class="line">   10 </span><span class="kwa">fun</span> for <span class="sym">(</span>start<span class="sym">,</span> stop<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">   11 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   12 </span><span class="kwa">      fun</span> loop i <span class="sym">=
</span><span class="line">   13 </span><span class="sym"></span>         <span class="kwa">if</span> i <span class="sym">&gt;</span> stop
<span class="line">   14 </span>            <span class="kwa">then</span> <span class="sym">()
</span><span class="line">   15 </span><span class="sym"></span>         <span class="kwa">else</span> <span class="sym">(</span>f i<span class="sym">;</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   16 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">   17 </span><span class="kwa"></span>      loop start
<span class="line">   18 </span>   <span class="kwa">end
</span><span class="line">   19 </span><span class="kwa">fun</span> failwith s <span class="sym">=</span> <span class="kwa">raise</span> Fail s
<span class="line">   20 </span>
<span class="line">   21 </span><span class="kwa">structure</span> Deque<span class="sym">:
</span><span class="line">   22 </span><span class="sym"></span>  <span class="kwa">sig
</span><span class="line">   23 </span><span class="kwa">    type</span> 'a t
<span class="line">   24 </span>    <span class="kwa">exception</span> Empty
<span class="line">   25 </span>
<span class="line">   26 </span>    <span class="kwa">val</span> make<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> 'a <span class="sym">-&gt;</span> 'a t
<span class="line">   27 </span>    <span class="kwa">val</span> iota<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">int</span> t
<span class="line">   28 </span>
<span class="line">   29 </span>    <span class="kwa">val</span> is_empty<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> <span class="kwb">bool
</span><span class="line">   30 </span><span class="kwb"></span>    <span class="kwa">val</span> equal<span class="sym">:</span> ''a t <span class="sym">*</span> ''a t <span class="sym">-&gt;</span> <span class="kwb">bool
</span><span class="line">   31 </span><span class="kwb"></span>    <span class="kwa">val</span> length<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> <span class="kwb">int
</span><span class="line">   32 </span><span class="kwb"></span>    <span class="kwa">val</span> nth<span class="sym">:</span> 'a t <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> 'a
<span class="line">   33 </span>
<span class="line">   34 </span>    <span class="kwa">val</span> push_front<span class="sym">:</span> 'a <span class="sym">*</span> 'a t <span class="sym">-&gt;</span> unit
<span class="line">   35 </span>    <span class="kwa">val</span> push_back<span class="sym">:</span> 'a t <span class="sym">*</span> 'a <span class="sym">-&gt;</span> unit
<span class="line">   36 </span>
<span class="line">   37 </span>    <span class="kwa">val</span> take_front<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a
<span class="line">   38 </span>    <span class="kwa">val</span> take_back<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a
<span class="line">   39 </span>
<span class="line">   40 </span>    <span class="kwa">val</span> copy<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a t
<span class="line">   41 </span>    <span class="kwa">val</span> reverse<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a t
<span class="line">   42 </span>  <span class="kwa">end</span> <span class="sym">=
</span><span class="line">   43 </span><span class="sym"></span>  <span class="kwa">struct
</span><span class="line">   44 </span><span class="kwa">     type</span> 'a t <span class="sym">= {</span>size<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">,
</span><span class="line">   45 </span><span class="sym"></span>                  first<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">,
</span><span class="line">   46 </span><span class="sym"></span>                  last<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">,
</span><span class="line">   47 </span><span class="sym"></span>                  field<span class="sym">:</span> 'a array ref<span class="sym">,
</span><span class="line">   48 </span><span class="sym"></span>                  fill<span class="sym">:</span> 'a<span class="sym">}
</span><span class="line">   49 </span><span class="sym">
</span><span class="line">   50 </span><span class="sym"></span>     <span class="kwa">local
</span><span class="line">   51 </span><span class="kwa">        fun</span> make sel <span class="sym">(</span>d<span class="sym">:</span> 'a t<span class="sym">) =</span> sel d
<span class="line">   52 </span>     <span class="kwa">in
</span><span class="line">   53 </span><span class="kwa">        fun</span> fill z <span class="sym">=</span> make #fill z
<span class="line">   54 </span>     <span class="kwa">end
</span><span class="line">   55 </span><span class="kwa">
</span><span class="line">   56 </span><span class="kwa">     local
</span><span class="line">   57 </span><span class="kwa">        fun</span> make sel <span class="sym">(</span>d<span class="sym">:</span> 'a t<span class="sym">) = !(</span>sel d<span class="sym">)
</span><span class="line">   58 </span><span class="sym"></span>     <span class="kwa">in
</span><span class="line">   59 </span><span class="kwa">        fun</span> field z <span class="sym">=</span> make #field z
<span class="line">   60 </span>        <span class="kwa">fun</span> first z <span class="sym">=</span> make #first z
<span class="line">   61 </span>        <span class="kwa">fun</span> last z <span class="sym">=</span> make #last z
<span class="line">   62 </span>        <span class="kwa">fun</span> size z <span class="sym">=</span> make #size z
<span class="line">   63 </span>     <span class="kwa">end
</span><span class="line">   64 </span><span class="kwa">
</span><span class="line">   65 </span><span class="kwa">     exception</span> Empty
<span class="line">   66 </span>
<span class="line">   67 </span>     <span class="kwa">fun</span> make <span class="sym">(</span>n<span class="sym">,</span> dummy<span class="sym">) =
</span><span class="line">   68 </span><span class="sym"></span>        <span class="kwa">let
</span><span class="line">   69 </span><span class="kwa">           val</span> n <span class="sym">=</span> <span class="kwa">Int</span>.max <span class="sym">(</span>n<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   70 </span><span class="sym"></span>           <span class="kwa">val</span> nplus <span class="sym">=</span> <span class="kwa">Int</span>.max <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">)
</span><span class="line">   71 </span><span class="sym"></span>        <span class="kwa">in
</span><span class="line">   72 </span><span class="kwa"></span>           <span class="sym">{</span>size <span class="sym">=</span> ref nplus<span class="sym">,
</span><span class="line">   73 </span><span class="sym"></span>            first <span class="sym">=</span> ref <span class="sym">(</span><span class="kwa">Int</span>.quot <span class="sym">(</span>nplus<span class="sym">,</span> <span class="num">2</span><span class="sym">)),
</span><span class="line">   74 </span><span class="sym"></span>            last <span class="sym">=</span> ref <span class="sym">(</span><span class="kwa">Int</span>.quot <span class="sym">(</span>nplus<span class="sym">,</span> <span class="num">2</span><span class="sym">) -</span> <span class="num">1</span><span class="sym">),
</span><span class="line">   75 </span><span class="sym"></span>            field <span class="sym">=</span> ref <span class="sym">(</span>Array.array <span class="sym">(</span>nplus<span class="sym">,</span> dummy<span class="sym">)),
</span><span class="line">   76 </span><span class="sym"></span>            fill <span class="sym">=</span> dummy<span class="sym">}
</span><span class="line">   77 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">   78 </span><span class="kwa">
</span><span class="line">   79 </span><span class="kwa">     fun</span> iota i <span class="sym">=
</span><span class="line">   80 </span><span class="sym"></span>        <span class="kwa">let
</span><span class="line">   81 </span><span class="kwa">           val</span> i <span class="sym">=</span> <span class="kwa">Int</span>.max <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> i<span class="sym">)
</span><span class="line">   82 </span><span class="sym"></span>           <span class="kwa">val</span> iplus <span class="sym">=</span> <span class="kwa">Int</span>.max <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> i<span class="sym">)
</span><span class="line">   83 </span><span class="sym"></span>        <span class="kwa">in
</span><span class="line">   84 </span><span class="kwa"></span>           <span class="sym">{</span>size <span class="sym">=</span> ref iplus<span class="sym">,
</span><span class="line">   85 </span><span class="sym"></span>            first <span class="sym">=</span> ref <span class="num">0</span><span class="sym">,
</span><span class="line">   86 </span><span class="sym"></span>            last <span class="sym">=</span> ref <span class="sym">(</span>i <span class="num">- 1</span><span class="sym">),
</span><span class="line">   87 </span><span class="sym"></span>            field <span class="sym">=</span> ref <span class="sym">(</span>Array.tabulate <span class="sym">(</span>iplus<span class="sym">,</span> <span class="kwa">fn</span> n <span class="sym">=&gt;</span> n <span class="sym">+</span> <span class="num">1</span><span class="sym">)),
</span><span class="line">   88 </span><span class="sym"></span>            fill <span class="sym">=</span> i<span class="sym">}
</span><span class="line">   89 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">   90 </span><span class="kwa">
</span><span class="line">   91 </span><span class="kwa">     fun</span> length buf <span class="sym">=</span> last buf <span class="sym">-</span> first buf <span class="sym">+</span> <span class="num">1
</span><span class="line">   92 </span><span class="num">
</span><span class="line">   93 </span><span class="num"></span>     <span class="kwa">fun</span> is_empty buf <span class="sym">=</span> last buf <span class="sym">&lt;</span> first buf
<span class="line">   94 </span>
<span class="line">   95 </span>     <span class="kwa">fun</span> array_eq <span class="sym">(</span>arr1<span class="sym">,</span> off1<span class="sym">,</span> arr2<span class="sym">,</span> off2<span class="sym">,</span> i<span class="sym">) =
</span><span class="line">   96 </span><span class="sym"></span>        <span class="kwa">let
</span><span class="line">   97 </span><span class="kwa">           fun</span> loop <span class="sym">(</span>off1<span class="sym">,</span> off2<span class="sym">,</span> i<span class="sym">) =
</span><span class="line">   98 </span><span class="sym"></span>              <span class="kwa">case</span> i <span class="kwa">of
</span><span class="line">   99 </span><span class="kwa"></span>                 <span class="num">0</span> <span class="sym">=&gt;</span> <span class="kwa">true
</span><span class="line">  100 </span><span class="kwa"></span>               <span class="sym">|</span> n <span class="sym">=&gt;
</span><span class="line">  101 </span><span class="sym"></span>                    sub <span class="sym">(</span>arr1<span class="sym">,</span> off1<span class="sym">) =</span> sub <span class="sym">(</span>arr2<span class="sym">,</span> off2<span class="sym">)
</span><span class="line">  102 </span><span class="sym"></span>                    <span class="kwa">andalso</span> loop <span class="sym">(</span>off1 <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> off2 <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n <span class="num">- 1</span><span class="sym">)
</span><span class="line">  103 </span><span class="sym"></span>        <span class="kwa">in</span> loop <span class="sym">(</span>off1<span class="sym">,</span> off2<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  104 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">  105 </span><span class="kwa">
</span><span class="line">  106 </span><span class="kwa">     fun</span> equal <span class="sym">(</span>buf1<span class="sym">,</span> buf2<span class="sym">) =
</span><span class="line">  107 </span><span class="sym"></span>        <span class="kwa">let
</span><span class="line">  108 </span><span class="kwa">           val</span> len <span class="sym">=</span> length buf1
<span class="line">  109 </span>        <span class="kwa">in
</span><span class="line">  110 </span><span class="kwa"></span>           len <span class="sym">=</span> length buf2
<span class="line">  111 </span>           <span class="kwa">andalso</span> array_eq <span class="sym">(</span>field buf1<span class="sym">,</span> first buf1<span class="sym">,
</span><span class="line">  112 </span><span class="sym"></span>                             field buf2<span class="sym">,</span> first buf2<span class="sym">,
</span><span class="line">  113 </span><span class="sym"></span>                             len<span class="sym">)
</span><span class="line">  114 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">  115 </span><span class="kwa">
</span><span class="line">  116 </span><span class="kwa">     fun</span> nth <span class="sym">(</span>buf<span class="sym">,</span> n<span class="sym">) =
</span><span class="line">  117 </span><span class="sym"></span>        <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">orelse</span> n <span class="sym">&gt;=</span> length buf
<span class="line">  118 </span>           <span class="kwa">then</span> failwith <span class="str">&quot;nth&quot;</span>
<span class="line">  119 </span>        <span class="kwa">else</span> sub <span class="sym">(</span>field buf<span class="sym">,</span> first buf <span class="sym">+</span> n<span class="sym">)
</span><span class="line">  120 </span><span class="sym">
</span><span class="line">  121 </span><span class="sym"></span>     <span class="kwa">fun</span> double_shift buf <span class="sym">=
</span><span class="line">  122 </span><span class="sym"></span>        <span class="kwa">let
</span><span class="line">  123 </span><span class="kwa">           val</span> new_size <span class="sym">=</span> size buf <span class="sym">*</span> <span class="num">2
</span><span class="line">  124 </span><span class="num"></span>           <span class="kwa">val</span> len <span class="sym">=</span> length buf
<span class="line">  125 </span>           <span class="kwa">val</span> new_first <span class="sym">=</span> <span class="kwa">Int</span>.quot <span class="sym">(</span>new_size <span class="sym">-</span> len<span class="sym">,</span> <span class="num">2</span><span class="sym">)
</span><span class="line">  126 </span><span class="sym"></span>           <span class="kwa">val</span> new_field <span class="sym">=</span> Array.array <span class="sym">(</span>new_size<span class="sym">,</span> fill buf<span class="sym">)
</span><span class="line">  127 </span><span class="sym"></span>           <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  128 </span><span class="sym"></span>              ArraySlice.copy <span class="sym">{</span>src <span class="sym">=</span> ArraySlice.slice <span class="sym">(</span>field buf<span class="sym">,
</span><span class="line">  129 </span><span class="sym"></span>                                                       first buf<span class="sym">,
</span><span class="line">  130 </span><span class="sym"></span>                                                       SOME len<span class="sym">),
</span><span class="line">  131 </span><span class="sym"></span>                               dst <span class="sym">=</span> new_field<span class="sym">,
</span><span class="line">  132 </span><span class="sym"></span>                               di <span class="sym">=</span> new_first<span class="sym">}
</span><span class="line">  133 </span><span class="sym"></span>        <span class="kwa">in
</span><span class="line">  134 </span><span class="kwa"></span>           #size buf <span class="sym">:=</span> new_size<span class="sym">;
</span><span class="line">  135 </span><span class="sym"></span>           #field buf <span class="sym">:=</span> new_field<span class="sym">;
</span><span class="line">  136 </span><span class="sym"></span>           #first buf <span class="sym">:=</span> new_first<span class="sym">;
</span><span class="line">  137 </span><span class="sym"></span>           #last buf <span class="sym">:=</span> new_first <span class="sym">+</span> len <span class="num">- 1
</span><span class="line">  138 </span><span class="num"></span>        <span class="kwa">end
</span><span class="line">  139 </span><span class="kwa">
</span><span class="line">  140 </span><span class="kwa">     fun</span> push_front <span class="sym">(</span>elem<span class="sym">,</span> buf<span class="sym">) =
</span><span class="line">  141 </span><span class="sym"></span>        <span class="kwa">let
</span><span class="line">  142 </span><span class="kwa">           val</span> _ <span class="sym">=</span> <span class="kwa">if</span> first buf <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> double_shift buf <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  143 </span><span class="sym"></span>           <span class="kwa">val</span> new_first <span class="sym">=</span> first buf <span class="num">- 1
</span><span class="line">  144 </span><span class="num"></span>        <span class="kwa">in
</span><span class="line">  145 </span><span class="kwa"></span>           update <span class="sym">(</span>field buf<span class="sym">,</span> new_first<span class="sym">,</span> elem<span class="sym">);
</span><span class="line">  146 </span><span class="sym"></span>           #first buf <span class="sym">:=</span> new_first
<span class="line">  147 </span>        <span class="kwa">end
</span><span class="line">  148 </span><span class="kwa">
</span><span class="line">  149 </span><span class="kwa">     fun</span> push_back <span class="sym">(</span>buf<span class="sym">,</span> elem<span class="sym">) =
</span><span class="line">  150 </span><span class="sym"></span>        <span class="kwa">let
</span><span class="line">  151 </span><span class="kwa">           val</span> _ <span class="sym">=</span> <span class="kwa">if</span> last buf <span class="sym">=</span> size buf <span class="num">- 1</span> <span class="kwa">then</span> double_shift buf <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  152 </span><span class="sym"></span>           <span class="kwa">val</span> new_last <span class="sym">=</span> last buf <span class="sym">+</span> <span class="num">1
</span><span class="line">  153 </span><span class="num"></span>        <span class="kwa">in
</span><span class="line">  154 </span><span class="kwa"></span>           update <span class="sym">(</span>field buf<span class="sym">,</span> new_last<span class="sym">,</span> elem<span class="sym">);
</span><span class="line">  155 </span><span class="sym"></span>           #last buf <span class="sym">:=</span> new_last
<span class="line">  156 </span>        <span class="kwa">end
</span><span class="line">  157 </span><span class="kwa">
</span><span class="line">  158 </span><span class="kwa">     fun</span> take_front buf <span class="sym">=
</span><span class="line">  159 </span><span class="sym"></span>        <span class="kwa">if</span> is_empty buf
<span class="line">  160 </span>           <span class="kwa">then raise</span> Empty
<span class="line">  161 </span>        <span class="kwa">else
</span><span class="line">  162 </span><span class="kwa">           let
</span><span class="line">  163 </span><span class="kwa">              val</span> old_first <span class="sym">=</span> first buf
<span class="line">  164 </span>           <span class="kwa">in
</span><span class="line">  165 </span><span class="kwa"></span>              #first buf <span class="sym">:=</span> old_first <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  166 </span><span class="sym"></span>              sub <span class="sym">(</span>field buf<span class="sym">,</span> old_first<span class="sym">)
</span><span class="line">  167 </span><span class="sym"></span>           <span class="kwa">end
</span><span class="line">  168 </span><span class="kwa">
</span><span class="line">  169 </span><span class="kwa">     fun</span> take_back buf <span class="sym">=
</span><span class="line">  170 </span><span class="sym"></span>        <span class="kwa">if</span> is_empty buf
<span class="line">  171 </span>           <span class="kwa">then raise</span> Empty
<span class="line">  172 </span>        <span class="kwa">else
</span><span class="line">  173 </span><span class="kwa">           let
</span><span class="line">  174 </span><span class="kwa">              val</span> old_last <span class="sym">=</span> last buf
<span class="line">  175 </span>           <span class="kwa">in
</span><span class="line">  176 </span><span class="kwa"></span>              #last buf <span class="sym">:=</span> old_last <span class="num">- 1</span><span class="sym">;
</span><span class="line">  177 </span><span class="sym"></span>              sub <span class="sym">(</span>field buf<span class="sym">,</span> old_last<span class="sym">)
</span><span class="line">  178 </span><span class="sym"></span>           <span class="kwa">end
</span><span class="line">  179 </span><span class="kwa">
</span><span class="line">  180 </span><span class="kwa">     fun</span> copy buf <span class="sym">=
</span><span class="line">  181 </span><span class="sym"></span>        <span class="kwa">let
</span><span class="line">  182 </span><span class="kwa">           val</span> len <span class="sym">=</span> length buf
<span class="line">  183 </span>           <span class="kwa">val</span> new_buf <span class="sym">=</span> make <span class="sym">(</span>len<span class="sym">,</span> fill buf<span class="sym">)
</span><span class="line">  184 </span><span class="sym"></span>           <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  185 </span><span class="sym"></span>              ArraySlice.copy <span class="sym">{</span>src <span class="sym">=</span> ArraySlice.slice <span class="sym">(</span>field buf<span class="sym">,
</span><span class="line">  186 </span><span class="sym"></span>                                                       first buf<span class="sym">,
</span><span class="line">  187 </span><span class="sym"></span>                                                       SOME len<span class="sym">),
</span><span class="line">  188 </span><span class="sym"></span>                               dst <span class="sym">=</span> field new_buf<span class="sym">,
</span><span class="line">  189 </span><span class="sym"></span>                               di <span class="sym">=</span> <span class="num">0</span><span class="sym">}
</span><span class="line">  190 </span><span class="sym"></span>        <span class="kwa">in
</span><span class="line">  191 </span><span class="kwa"></span>           #first new_buf <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  192 </span><span class="sym"></span>           #last new_buf <span class="sym">:=</span> len <span class="num">- 1</span><span class="sym">;
</span><span class="line">  193 </span><span class="sym"></span>           new_buf
<span class="line">  194 </span>        <span class="kwa">end
</span><span class="line">  195 </span><span class="kwa">
</span><span class="line">  196 </span><span class="kwa">     fun</span> reverse buf <span class="sym">=
</span><span class="line">  197 </span><span class="sym"></span>        <span class="kwa">let
</span><span class="line">  198 </span><span class="kwa">           val</span> len <span class="sym">=</span> length buf
<span class="line">  199 </span>           <span class="kwa">val</span> fst <span class="sym">=</span> first buf
<span class="line">  200 </span>           <span class="kwa">val</span> fld <span class="sym">=</span> field buf
<span class="line">  201 </span>           <span class="kwa">val</span> new_buf <span class="sym">=</span> make <span class="sym">(</span>len<span class="sym">,</span> fill buf<span class="sym">)
</span><span class="line">  202 </span><span class="sym"></span>           <span class="kwa">val</span> new_fld <span class="sym">=</span> field new_buf
<span class="line">  203 </span>           <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  204 </span><span class="sym"></span>              for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> len <span class="num">- 1</span><span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span><span class="line">  205 </span><span class="sym"></span>                   update <span class="sym">(</span>new_fld<span class="sym">,</span> len <span class="sym">-</span> i <span class="num">- 1</span><span class="sym">,</span> sub <span class="sym">(</span>fld<span class="sym">,</span> fst <span class="sym">+</span> i<span class="sym">)))
</span><span class="line">  206 </span><span class="sym"></span>        <span class="kwa">in
</span><span class="line">  207 </span><span class="kwa"></span>           #first new_buf <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  208 </span><span class="sym"></span>           #last new_buf <span class="sym">:=</span> len <span class="num">- 1</span><span class="sym">;
</span><span class="line">  209 </span><span class="sym"></span>           new_buf
<span class="line">  210 </span>        <span class="kwa">end
</span><span class="line">  211 </span><span class="kwa">end
</span><span class="line">  212 </span><span class="kwa">
</span><span class="line">  213 </span><span class="kwa">open</span> Deque
<span class="line">  214 </span>
<span class="line">  215 </span><span class="kwa">fun</span> empty <span class="sym">() =</span> iota <span class="num">0
</span><span class="line">  216 </span><span class="num">
</span><span class="line">  217 </span><span class="num"></span><span class="kwa">val</span> size <span class="sym">=</span> <span class="num">10000
</span><span class="line">  218 </span><span class="num">
</span><span class="line">  219 </span><span class="num"></span><span class="kwa">fun</span> test_lists <span class="sym">() =
</span><span class="line">  220 </span><span class="sym"></span>  <span class="kwa">let
</span><span class="line">  221 </span><span class="kwa">     val</span> d1 <span class="sym">=</span> iota size
<span class="line">  222 </span>     <span class="kwa">val</span> d2 <span class="sym">=</span> copy d1
<span class="line">  223 </span>     <span class="kwa">val</span> d3 <span class="sym">=</span> empty <span class="sym">()
</span><span class="line">  224 </span><span class="sym"></span>     <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> length d2<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> push_back <span class="sym">(</span>d3<span class="sym">,</span> take_front d2<span class="sym">))
</span><span class="line">  225 </span><span class="sym"></span>     <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> length d3<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> push_back <span class="sym">(</span>d2<span class="sym">,</span> take_back d3<span class="sym">))
</span><span class="line">  226 </span><span class="sym"></span>     <span class="kwa">val</span> d1 <span class="sym">=</span> reverse d1
<span class="line">  227 </span>     <span class="kwa">val</span> _ <span class="sym">=</span> <span class="kwa">if</span> size <span class="sym">&lt;&gt;</span> nth <span class="sym">(</span>d1<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">then</span> failwith <span class="str">&quot;First test failed&quot;</span> <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  228 </span><span class="sym"></span>     <span class="kwa">val</span> _ <span class="sym">=</span> <span class="kwa">if</span> length d1 <span class="sym">&lt;&gt;</span> length d2 <span class="kwa">then</span> failwith <span class="str">&quot;Second test failed&quot;</span> <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  229 </span><span class="sym"></span>     <span class="kwa">val</span> _ <span class="sym">=</span> <span class="kwa">if</span> not <span class="sym">(</span>equal <span class="sym">(</span>d1<span class="sym">,</span> d2<span class="sym">))</span> <span class="kwa">then</span> failwith <span class="str">&quot;Third test failed&quot;</span> <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  230 </span><span class="sym"></span>  <span class="kwa">in
</span><span class="line">  231 </span><span class="kwa"></span>     length d1
<span class="line">  232 </span>  <span class="kwa">end
</span><span class="line">  233 </span><span class="kwa">
</span><span class="line">  234 </span><span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =
</span><span class="line">  235 </span><span class="sym"></span>  <span class="kwa">let
</span><span class="line">  236 </span><span class="kwa">     val</span> n <span class="sym">=
</span><span class="line">  237 </span><span class="sym"></span>        <span class="kwa">case Int</span>.fromString <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))</span> <span class="kwa">of
</span><span class="line">  238 </span><span class="kwa"></span>           NONE <span class="sym">=&gt;</span> <span class="num">1
</span><span class="line">  239 </span><span class="num"></span>         <span class="sym">|</span> SOME n <span class="sym">=&gt;</span> n
<span class="line">  240 </span>     <span class="kwa">val</span> result <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  241 </span><span class="num"></span>     <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> result <span class="sym">:=</span> test_lists <span class="sym">())
</span><span class="line">  242 </span><span class="sym"></span>  <span class="kwa">in
</span><span class="line">  243 </span><span class="kwa"></span>     print <span class="sym">(</span>concat <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(!</span>result<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">]);
</span><span class="line">  244 </span><span class="sym"></span>     OS.Process.success
<span class="line">  245 </span>  <span class="kwa">end
</span><span class="line">  246 </span><span class="kwa">
</span><span class="line">  247 </span><span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() )</span>
