<span class="com">/* -*- mode: c -*-
 * $Id: ary-icc.code,v 1.10 2005-10-01 21:59:13 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 *
 * this program is modified from:
 *   http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html
 * Timing Trials, or, the Trials of Timing: Experiments with Scripting
 * and User-Interface Languages&lt;/a&gt; by Brian W. Kernighan and
 * Christopher J. Van Wyk.
 *
 * I added free() to deallocate memory.
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span>
<span class="kwb">int
</span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwb">int</span> i<span class="sym">,</span> k<span class="sym">, *</span>x<span class="sym">, *</span>y<span class="sym">;

</span>    x <span class="sym">= (</span><span class="kwb">int</span> <span class="sym">*)</span> calloc<span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">));
</span>    y <span class="sym">= (</span><span class="kwb">int</span> <span class="sym">*)</span> calloc<span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">));

</span>    <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {
</span>	x<span class="sym">[</span>i<span class="sym">] =</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
    }
</span>    <span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> k<span class="sym">&lt;</span><span class="num">1000</span><span class="sym">;</span> k<span class="sym">++) {
</span>	<span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> n<span class="num">-1</span><span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--) {
</span>	    y<span class="sym">[</span>i<span class="sym">] +=</span> x<span class="sym">[</span>i<span class="sym">];
	}
    }

</span>    fprintf<span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> y<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> y<span class="sym">[</span>n<span class="num">-1</span><span class="sym">]);

</span>    free<span class="sym">(</span>x<span class="sym">);
</span>    free<span class="sym">(</span>y<span class="sym">);

</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}</span>
