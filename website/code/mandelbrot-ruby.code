<span class="slc">#!/usr/bin/env ruby</span>
<span class="slc">#  The Great Computer Language Shootout</span>
<span class="slc">#  http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#  contributed by Karl von Laudermann</span>
<span class="slc">#</span>
<span class="slc">#  mandelbrot.rb 400 &gt; out.pbm</span>

size = <span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">].</span>to_i

puts <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">#{size} #{size}&quot;</span>

iter = <span class="num">50</span>
limit = <span class="num">2.0</span>
byte_acc = <span class="num">0</span>
bit_num = <span class="num">0</span>

size<span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span>y<span class="sym">|</span>
     size<span class="sym">.</span>times <span class="kwa">do</span> <span class="sym">|</span>x<span class="sym">|</span>
         zr = <span class="num">0.0</span>
         zi = <span class="num">0.0</span>
         cr = <span class="sym">(</span><span class="num">2.0</span><span class="sym">*</span>x<span class="sym">/</span>size)<span class="sym">-</span><span class="num">1.5</span>
         ci = <span class="sym">(</span><span class="num">2.0</span><span class="sym">*</span>y<span class="sym">/</span>size)<span class="sym">-</span><span class="num">1.0</span>
         escape = <span class="kwa">false</span>

         iter<span class="sym">.</span>times <span class="kwa">do</span>
            tr = zr<span class="sym">*</span>zr <span class="sym">-</span> zi<span class="sym">*</span>zi <span class="sym">+</span> cr
            ti = <span class="num">2</span><span class="sym">*</span>zr<span class="sym">*</span>zi <span class="sym">+</span> ci
            zr<span class="sym">,</span> zi = tr<span class="sym">,</span> ti

            <span class="kwa">if</span> <span class="sym">(</span>zr<span class="sym">*</span>zr<span class="sym">+</span>zi<span class="sym">*</span>zi) <span class="sym">&gt; (</span>limit<span class="sym">*</span>limit)
                escape = <span class="kwa">true</span>
                <span class="kwa">break</span>
            <span class="kwa">end</span>
         <span class="kwa">end</span>

         byte_acc = <span class="sym">(</span>byte_acc <span class="sym">&lt;&lt;</span> <span class="num">1</span>) <span class="sym">| (</span>escape ? <span class="num">0b0</span> <span class="sym">:</span> <span class="num">0b1</span>)
         bit_num <span class="sym">+</span>= <span class="num">1</span>

         <span class="kwa">if</span> <span class="sym">(</span>bit_num == <span class="num">8</span>) <span class="sym">|| (</span>x == size <span class="sym">-</span> <span class="num">1</span>)
             byte_acc <span class="sym">&lt;&lt;</span>= <span class="sym">(</span><span class="num">8</span> <span class="sym">-</span> bit_num)
             print byte_acc<span class="sym">.</span>chr
             byte_acc = <span class="num">0</span>
             bit_num = <span class="num">0</span>
         <span class="kwa">end</span>
     <span class="kwa">end</span>
<span class="kwa">end</span>
