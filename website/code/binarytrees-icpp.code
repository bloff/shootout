<span class="com">/* binarytrees.cpp</span>
<span class="com"> *</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Jon Harrop</span>
<span class="com"> */</span>

<span class="dir">#include &lt;iostream&gt;</span>

<span class="kwb">struct</span> T <span class="sym">{</span>
  <span class="kwc">virtual</span> <span class="sym">~</span><span class="kwd">T</span><span class="sym">() {};</span>
  <span class="kwc">virtual</span> <span class="kwb">int</span> <span class="kwd">check</span><span class="sym">()</span> <span class="kwb">const</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">};</span>

<span class="kwb">struct</span> Empty <span class="sym">:</span> <span class="kwc">public</span> T <span class="sym">{</span>
  <span class="kwc">virtual</span> <span class="kwb">int</span> <span class="kwd">check</span><span class="sym">()</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> <span class="num">0</span><span class="sym">; }</span>
<span class="sym">};</span>

<span class="kwb">struct</span> Node <span class="sym">:</span> <span class="kwc">public</span> T <span class="sym">{</span>
  T <span class="sym">*</span>l<span class="sym">, *</span>r<span class="sym">;</span>
  <span class="kwb">int</span> i<span class="sym">;</span>
  <span class="kwd">Node</span><span class="sym">(</span>T <span class="sym">*</span>l2<span class="sym">,</span> <span class="kwb">int</span> i2<span class="sym">,</span> T <span class="sym">*</span>r2<span class="sym">) :</span> <span class="kwd">l</span><span class="sym">(</span>l2<span class="sym">),</span> <span class="kwd">i</span><span class="sym">(</span>i2<span class="sym">),</span> <span class="kwd">r</span><span class="sym">(</span>r2<span class="sym">) {};</span>
  <span class="kwc">virtual</span> <span class="sym">~</span><span class="kwd">Node</span><span class="sym">() {</span> <span class="kwa">delete</span> l<span class="sym">;</span> <span class="kwa">delete</span> r<span class="sym">; }</span>
  <span class="kwc">virtual</span> <span class="kwb">int</span> <span class="kwd">check</span><span class="sym">()</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> l<span class="sym">-&gt;</span><span class="kwd">check</span><span class="sym">() +</span> i <span class="sym">-</span> r<span class="sym">-&gt;</span><span class="kwd">check</span><span class="sym">(); }</span>
<span class="sym">};</span>

T <span class="sym">*</span><span class="kwd">make</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> d<span class="sym">) {</span>
  <span class="kwa">if</span> <span class="sym">(</span>d <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return new</span> <span class="kwd">Node</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwd">Empty</span><span class="sym">(),</span> i<span class="sym">,</span> <span class="kwa">new</span> <span class="kwd">Empty</span><span class="sym">());</span>
  <span class="kwa">return new</span> <span class="kwd">Node</span><span class="sym">(</span><span class="kwd">make</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> d<span class="sym">-</span><span class="num">1</span><span class="sym">),</span> i<span class="sym">,</span> <span class="kwd">make</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">,</span> d<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
  <span class="kwb">int</span> min_depth <span class="sym">=</span> <span class="num">4</span><span class="sym">,</span>
    max_depth <span class="sym">=</span> std<span class="sym">::</span><span class="kwd">max</span><span class="sym">(</span>min_depth<span class="sym">+</span><span class="num">2</span><span class="sym">,</span>
			 <span class="sym">(</span>argc <span class="sym">==</span> <span class="num">2</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">10</span><span class="sym">)),</span>
    stretch_depth <span class="sym">=</span> max_depth<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>

  <span class="sym">{</span>
    T <span class="sym">*</span>c <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretch_depth<span class="sym">);</span>
    std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;stretch tree of depth &quot;</span> <span class="sym">&lt;&lt;</span> stretch_depth <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">&quot;</span>
      <span class="sym">&lt;&lt;</span> <span class="str">&quot;check: &quot;</span> <span class="sym">&lt;&lt;</span> c<span class="sym">-&gt;</span><span class="kwd">check</span><span class="sym">() &lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>
    <span class="kwa">delete</span> c<span class="sym">;</span>
  <span class="sym">}</span>

  T <span class="sym">*</span>long_lived_tree<span class="sym">=</span><span class="kwd">make</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> max_depth<span class="sym">);</span>

  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> d<span class="sym">=</span>min_depth<span class="sym">;</span> d<span class="sym">&lt;=</span>max_depth<span class="sym">;</span> d<span class="sym">+=</span><span class="num">2</span><span class="sym">) {</span>
    <span class="kwb">int</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>max_depth <span class="sym">-</span> d <span class="sym">+</span> min_depth<span class="sym">),</span> c<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>iterations<span class="sym">; ++</span>i<span class="sym">) {</span>
      T <span class="sym">*</span>a <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span>i<span class="sym">,</span> d<span class="sym">), *</span>b <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(-</span>i<span class="sym">,</span> d<span class="sym">);</span>
      c <span class="sym">+=</span> a<span class="sym">-&gt;</span><span class="kwd">check</span><span class="sym">() +</span> b<span class="sym">-&gt;</span><span class="kwd">check</span><span class="sym">();</span>
      <span class="kwa">delete</span> a<span class="sym">;</span>
      <span class="kwa">delete</span> b<span class="sym">;</span>
    <span class="sym">}</span>
    std<span class="sym">::</span>cout <span class="sym">&lt;&lt; (</span><span class="num">2</span><span class="sym">*</span>iterations<span class="sym">) &lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span> <span class="sym">&lt;&lt;</span> d <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">&quot;</span>
	      <span class="sym">&lt;&lt;</span> <span class="str">&quot;check: &quot;</span> <span class="sym">&lt;&lt;</span> c <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>
  <span class="sym">}</span>

  std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;long lived tree of depth &quot;</span> <span class="sym">&lt;&lt;</span> max_depth <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">&quot;</span>
	    <span class="sym">&lt;&lt;</span> <span class="str">&quot;check: &quot;</span> <span class="sym">&lt;&lt; (</span>long_lived_tree<span class="sym">-&gt;</span><span class="kwd">check</span><span class="sym">()) &lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>

  <span class="kwa">delete</span> long_lived_tree<span class="sym">;</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
