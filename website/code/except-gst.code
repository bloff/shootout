<span class="line">    1 </span><span class="str">&quot;  The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="str">    contributed by Paolo Bonzini
</span><span class="line">    3 </span><span class="str"> 
</span><span class="line">    4 </span><span class="str">    To run: gst -QI /usr/local/share/smalltalk/gst.im except.st -a 20000
</span><span class="line">    5 </span><span class="str"> &quot;</span>
<span class="line">    6 </span>
<span class="line">    7 </span>  Notification subclass<span class="sym">:</span> <span class="slc">#MyException 
</span><span class="line">    8 </span><span class="slc"></span>   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
<span class="line">    9 </span>    classVariableNames<span class="sym">:</span> <span class="str">''</span>
<span class="line">   10 </span>    poolDictionaries<span class="sym">:</span> <span class="str">''</span>
<span class="line">   11 </span>    category<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!
</span><span class="line">   12 </span><span class="sym"> 
</span><span class="line">   13 </span><span class="sym"> </span>MyException class instanceVariableNames<span class="sym">:</span> <span class="str">'count'</span><span class="sym">!
</span><span class="line">   14 </span><span class="sym"> 
</span><span class="line">   15 </span><span class="sym"> !</span>MyException class methodsFor<span class="sym">:</span> <span class="str">'counting'</span><span class="sym">!
</span><span class="line">   16 </span><span class="sym"> 
</span><span class="line">   17 </span><span class="sym"> </span>count
<span class="line">   18 </span>    ^count<span class="sym">!
</span><span class="line">   19 </span><span class="sym"> 
</span><span class="line">   20 </span><span class="sym">         </span>increment
<span class="line">   21 </span>    count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">!
</span><span class="line">   22 </span><span class="sym"> 
</span><span class="line">   23 </span><span class="sym"> </span>initialize
<span class="line">   24 </span>    count <span class="sym">:=</span> <span class="num">0</span><span class="sym">! !
</span><span class="line">   25 </span><span class="sym"> 
</span><span class="line">   26 </span><span class="sym">         </span>MyException subclass<span class="sym">:</span> <span class="slc">#LoException 
</span><span class="line">   27 </span><span class="slc"></span>   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
<span class="line">   28 </span>    classVariableNames<span class="sym">:</span> <span class="str">''</span>
<span class="line">   29 </span>    poolDictionaries<span class="sym">:</span> <span class="str">''</span>
<span class="line">   30 </span>    category<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!
</span><span class="line">   31 </span><span class="sym"> 
</span><span class="line">   32 </span><span class="sym"> </span>MyException subclass<span class="sym">:</span> <span class="slc">#HiException 
</span><span class="line">   33 </span><span class="slc"></span>   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
<span class="line">   34 </span>    classVariableNames<span class="sym">:</span> <span class="str">''</span>
<span class="line">   35 </span>    poolDictionaries<span class="sym">:</span> <span class="str">''</span>
<span class="line">   36 </span>    category<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!
</span><span class="line">   37 </span><span class="sym"> 
</span><span class="line">   38 </span><span class="sym"> </span>LoException initialize.
<span class="line">   39 </span> HiException initialize<span class="sym">!
</span><span class="line">   40 </span><span class="sym"> 
</span><span class="line">   41 </span><span class="sym"> !</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!
</span><span class="line">   42 </span><span class="sym"> 
</span><span class="line">   43 </span><span class="sym"> </span>someFunction
<span class="line">   44 </span>    ^self hiFunction<span class="sym">!
</span><span class="line">   45 </span><span class="sym"> 
</span><span class="line">   46 </span><span class="sym">         </span>hiFunction
<span class="line">   47 </span>    ^<span class="sym">[</span> self loFunction <span class="sym">]</span> on<span class="sym">:</span> HiException <span class="kwa">do</span><span class="sym">: [ :</span>ex <span class="sym">|</span> ex class increment <span class="sym">]!
</span><span class="line">   48 </span><span class="sym"> 
</span><span class="line">   49 </span><span class="sym">         </span>loFunction
<span class="line">   50 </span>    ^<span class="sym">[</span> self blowup <span class="sym">]</span> on<span class="sym">:</span> LoException <span class="kwa">do</span><span class="sym">: [ :</span>ex <span class="sym">|</span> ex class increment <span class="sym">]!
</span><span class="line">   51 </span><span class="sym"> 
</span><span class="line">   52 </span><span class="sym">         </span>blowup
<span class="line">   53 </span>    ^<span class="sym">(</span>self odd ifTrue<span class="sym">: [</span> HiException <span class="sym">]</span> ifFalse<span class="sym">: [</span> LoException <span class="sym">])</span> signal<span class="sym">:</span> self<span class="sym">! !
</span><span class="line">   54 </span><span class="sym"> 
</span><span class="line">   55 </span><span class="sym"> |</span> n <span class="sym">|
</span><span class="line">   56 </span><span class="sym"> </span>n <span class="sym">:=</span> Smalltalk arguments isEmpty
<span class="line">   57 </span>    ifTrue<span class="sym">: [</span> <span class="num">20000</span> <span class="sym">]
</span><span class="line">   58 </span><span class="sym"> </span>   ifFalse<span class="sym">: [</span> <span class="num">1</span> max<span class="sym">:</span> Smalltalk arguments first asInteger <span class="sym">]</span>.
<span class="line">   59 </span>
<span class="line">   60 </span>  <span class="num">1</span> to<span class="sym">:</span> n <span class="kwa">do</span><span class="sym">: [ :</span>each <span class="sym">|</span> each someFunction <span class="sym">]</span>.
<span class="line">   61 </span>
<span class="line">   62 </span>  <span class="sym">(</span><span class="str">'Exceptions: HI=%1 / LO=%2'</span>
<span class="line">   63 </span>    bindWith<span class="sym">:</span> HiException count with<span class="sym">:</span> LoException count<span class="sym">)</span> displayNl <span class="sym">!</span> 
