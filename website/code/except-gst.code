<span class="str">&quot;  The Great Computer Language Shootout
   contributed by Paolo Bonzini

   To run: gst -QI /usr/share/gnu-smalltalk/gst.im except.st -a 20000
&quot;</span>

Notification subclass<span class="sym">:</span> <span class="slc">#MyException
</span>   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   classVariableNames<span class="sym">:</span> <span class="str">''</span>
   poolDictionaries<span class="sym">:</span> <span class="str">''</span>
   category<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!

</span>MyException class instanceVariableNames<span class="sym">:</span> <span class="str">'count'</span><span class="sym">!


!</span>MyException class methodsFor<span class="sym">:</span> <span class="str">'counting'</span><span class="sym">!

</span>count
   ^count<span class="sym">!

</span>increment
   count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">!

</span>initialize
   count <span class="sym">:=</span> <span class="num">0</span><span class="sym">! !

</span>MyException subclass<span class="sym">:</span> <span class="slc">#LoException
</span>   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   classVariableNames<span class="sym">:</span> <span class="str">''</span>
   poolDictionaries<span class="sym">:</span> <span class="str">''</span>
   category<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!

</span>MyException subclass<span class="sym">:</span> <span class="slc">#HiException
</span>   instanceVariableNames<span class="sym">:</span> <span class="str">''</span>
   classVariableNames<span class="sym">:</span> <span class="str">''</span>
   poolDictionaries<span class="sym">:</span> <span class="str">''</span>
   category<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!

</span>LoException initialize.
HiException initialize<span class="sym">!


!</span>SmallInteger methodsFor<span class="sym">:</span> <span class="str">'testing'</span><span class="sym">!

</span>someFunction
   ^self hiFunction<span class="sym">!

</span>hiFunction
   ^<span class="sym">[</span> self loFunction <span class="sym">]</span> on<span class="sym">:</span> HiException <span class="kwa">do</span><span class="sym">: [ :</span>ex <span class="sym">|</span> ex class increment <span class="sym">]!

</span>loFunction
   ^<span class="sym">[</span> self blowup <span class="sym">]</span> on<span class="sym">:</span> LoException <span class="kwa">do</span><span class="sym">: [ :</span>ex <span class="sym">|</span> ex class increment <span class="sym">]!

</span>blowup
   ^<span class="sym">(</span>self odd ifTrue<span class="sym">: [</span> HiException <span class="sym">]</span> ifFalse<span class="sym">: [</span> LoException <span class="sym">])</span> signal<span class="sym">:</span> self<span class="sym">! !

|</span> n <span class="sym">|
</span>n <span class="sym">:=</span> Smalltalk arguments isEmpty
   ifTrue<span class="sym">: [</span> <span class="num">20000</span> <span class="sym">]
</span>   ifFalse<span class="sym">: [</span> <span class="num">1</span> max<span class="sym">:</span> Smalltalk arguments first asInteger <span class="sym">]</span>.

<span class="num">1</span> to<span class="sym">:</span> n <span class="kwa">do</span><span class="sym">: [ :</span>each <span class="sym">|</span> each someFunction <span class="sym">]</span>.

<span class="sym">(</span><span class="str">'Exceptions: HI=%1 / LO=%2'</span>
   bindWith<span class="sym">:</span> HiException count with<span class="sym">:</span> LoException count<span class="sym">)</span> displayNl <span class="sym">!
</span>
