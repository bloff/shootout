<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   benchmark implementation (not optimized)</span>
<span class="com">   JRE 1.5 only</span>
<span class="com">   contributed by Josh Goldfoot */</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>lang<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;</span>

<span class="kwa">public class</span> magicsquares <span class="sym">{</span>

    <span class="kwa">static</span> <span class="kwb">int</span> n<span class="sym">;</span>
    <span class="kwa">static</span> <span class="kwb">int</span> mn<span class="sym">;</span>

    <span class="kwa">public static class</span> FfmResult <span class="sym">{</span>
        <span class="kwa">public</span> <span class="kwb">int</span> x<span class="sym">;</span>
        <span class="kwa">public</span> <span class="kwb">int</span> y<span class="sym">;</span>
        <span class="kwa">public</span> <span class="kwb">int</span><span class="sym">[]</span> moves<span class="sym">;</span>
        <span class="kwa">public</span> <span class="kwd">FfmResult</span><span class="sym">(</span><span class="kwb">int</span> ix<span class="sym">,</span> <span class="kwb">int</span> iy<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[]</span> imoves<span class="sym">) {</span>
            x <span class="sym">=</span> ix<span class="sym">;</span>
            y <span class="sym">=</span> iy<span class="sym">;</span>
            moves <span class="sym">= (</span><span class="kwb">int</span><span class="sym">[])</span> imoves<span class="sym">.</span><span class="kwd">clone</span><span class="sym">();</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public static class</span> PQNode <span class="kwa">implements</span> <span class="kwc">Comparable</span> <span class="sym">{</span>
        <span class="kwa">public</span> <span class="kwb">int</span> <span class="sym">[]</span> grid<span class="sym">;</span>
        <span class="kwb">boolean</span> priorityCalculated<span class="sym">;</span>
        <span class="kwa">private</span> <span class="kwb">int</span> priority<span class="sym">;</span>
        <span class="kwa">private</span> FfmResult ffm<span class="sym">;</span>

        <span class="kwa">public</span> <span class="kwd">PQNode</span><span class="sym">() {</span>
            grid <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span> <span class="sym">[</span>n <span class="sym">*</span> n<span class="sym">];</span>
            <span class="kwb">int</span> i<span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n <span class="sym">*</span> n<span class="sym">;</span> i<span class="sym">++)</span>
                grid<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
            priorityCalculated <span class="sym">=</span> false<span class="sym">;</span>
            ffm <span class="sym">=</span> null<span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwa">public</span> <span class="kwd">PQNode</span><span class="sym">(</span>PQNode other<span class="sym">) {</span>
            grid <span class="sym">= (</span><span class="kwb">int</span><span class="sym">[])</span> other<span class="sym">.</span>grid<span class="sym">.</span><span class="kwd">clone</span><span class="sym">();</span>
            priorityCalculated <span class="sym">=</span> false<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">int</span><span class="sym">[]</span> <span class="kwd">gridRow</span><span class="sym">(</span><span class="kwb">int</span> y<span class="sym">) {</span>
            <span class="kwb">int</span><span class="sym">[]</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
            <span class="kwb">int</span> x<span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span>x <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> x <span class="sym">&lt;</span> n<span class="sym">;</span> x<span class="sym">++)</span>
                r<span class="sym">[</span>x<span class="sym">] =</span> grid<span class="sym">[</span>x <span class="sym">+</span> y <span class="sym">*</span> n<span class="sym">];</span>
            <span class="kwa">return</span> r<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">int</span><span class="sym">[]</span> <span class="kwd">gridCol</span><span class="sym">(</span><span class="kwb">int</span> x<span class="sym">) {</span>
            <span class="kwb">int</span><span class="sym">[]</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
            <span class="kwb">int</span> y<span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span>y <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y <span class="sym">&lt;</span> n<span class="sym">;</span> y<span class="sym">++)</span>
                r<span class="sym">[</span>y<span class="sym">] =</span> grid<span class="sym">[</span>x <span class="sym">+</span> y <span class="sym">*</span> n<span class="sym">];</span>
            <span class="kwa">return</span> r<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">int</span><span class="sym">[]</span> <span class="kwd">diagonal</span><span class="sym">(</span><span class="kwb">int</span> q<span class="sym">) {</span>
            <span class="kwb">int</span><span class="sym">[]</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
            <span class="kwb">int</span> i<span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {</span>
                <span class="kwa">if</span> <span class="sym">(</span>q <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span>
                    r<span class="sym">[</span>i<span class="sym">] =</span> grid<span class="sym">[</span>i <span class="sym">+</span> i <span class="sym">*</span> n<span class="sym">];</span>
                <span class="kwa">else if</span> <span class="sym">(</span>q <span class="sym">==</span> <span class="num">2</span><span class="sym">) {</span>
                    r<span class="sym">[</span>i<span class="sym">] =</span> grid<span class="sym">[</span>i <span class="sym">+ (</span>n <span class="sym">-</span> <span class="num">1</span> <span class="sym">-</span> i<span class="sym">) *</span> n<span class="sym">];</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
            <span class="kwa">return</span> r<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">int</span><span class="sym">[]</span> <span class="kwd">possibleMoves</span><span class="sym">(</span><span class="kwb">int</span> x<span class="sym">,</span> <span class="kwb">int</span> y<span class="sym">) {</span>
            <span class="kwb">int</span> zerocount<span class="sym">,</span> sum<span class="sym">,</span> highest<span class="sym">,</span> j<span class="sym">,</span> i<span class="sym">;</span>

            <span class="kwa">if</span> <span class="sym">(</span>grid<span class="sym">[</span>x <span class="sym">+</span> y <span class="sym">*</span> n<span class="sym">] !=</span> <span class="num">0</span><span class="sym">)</span>
                <span class="kwa">return</span> <span class="sym">(</span> <span class="kwa">new</span> <span class="kwb">int</span> <span class="sym">[] { });</span>
            <span class="kwc">ArrayList</span><span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">[]&gt;</span> cellGroups <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">[]&gt;();</span>
            cellGroups<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span><span class="kwd">gridCol</span><span class="sym">(</span>x<span class="sym">));</span>
            cellGroups<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span><span class="kwd">gridRow</span><span class="sym">(</span>y<span class="sym">));</span>
            <span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">==</span> y<span class="sym">)</span>
                cellGroups<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span><span class="kwd">diagonal</span><span class="sym">(</span><span class="num">1</span><span class="sym">));</span>
            <span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">+</span> y <span class="sym">==</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
                cellGroups<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span><span class="kwd">diagonal</span><span class="sym">(</span><span class="num">2</span><span class="sym">));</span>
            <span class="kwc">HashSet</span><span class="sym">&lt;</span><span class="kwc">Integer</span><span class="sym">&gt;</span> usedNumbers <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashSet</span><span class="sym">&lt;</span><span class="kwc">Integer</span><span class="sym">&gt;();</span>
            <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> grid<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)</span>
                usedNumbers<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span>grid<span class="sym">[</span>i<span class="sym">]));</span>
            <span class="kwc">HashSet</span><span class="sym">&lt;</span><span class="kwc">Integer</span><span class="sym">&gt;</span> onePossible <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashSet</span><span class="sym">&lt;</span><span class="kwc">Integer</span><span class="sym">&gt;();</span>
            highest <span class="sym">=</span> n <span class="sym">*</span> n<span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span><span class="sym">[]</span> group<span class="sym">:</span> cellGroups<span class="sym">) {</span>
                zerocount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> num<span class="sym">:</span> group<span class="sym">) {</span>
                    <span class="kwa">if</span> <span class="sym">(</span>num <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
                        zerocount<span class="sym">++;</span>
                    sum <span class="sym">+=</span> num<span class="sym">;</span>
                <span class="sym">}</span>
                <span class="kwa">if</span> <span class="sym">(</span>zerocount <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span>
                    onePossible<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span>mn <span class="sym">-</span> sum<span class="sym">));</span>
                <span class="kwa">if</span> <span class="sym">(</span>mn <span class="sym">-</span> sum <span class="sym">&lt;</span> highest<span class="sym">)</span>
                    highest <span class="sym">=</span> mn <span class="sym">-</span> sum<span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">if</span> <span class="sym">(</span>onePossible<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ==</span> <span class="num">1</span><span class="sym">) {</span>
                <span class="kwc">Integer</span> onlyPossibleMove <span class="sym">= (</span><span class="kwc">Integer</span><span class="sym">)</span> onePossible<span class="sym">.</span><span class="kwd">iterator</span><span class="sym">().</span><span class="kwd">next</span><span class="sym">();</span>
                <span class="kwb">int</span> opmint <span class="sym">=</span> onlyPossibleMove<span class="sym">.</span><span class="kwd">intValue</span><span class="sym">();</span>
                <span class="kwa">if</span> <span class="sym">(</span>opmint <span class="sym">&gt;=</span> <span class="num">1</span> <span class="sym">&amp;&amp;</span>
                        opmint <span class="sym">&lt;=</span> n <span class="sym">*</span> n <span class="sym">&amp;&amp;</span>
                        <span class="sym">!</span> usedNumbers<span class="sym">.</span><span class="kwd">contains</span><span class="sym">(</span>onlyPossibleMove<span class="sym">))</span>
                    <span class="kwa">return</span> <span class="sym">(</span><span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[] {</span> opmint <span class="sym">});</span>
                <span class="kwa">else</span>
                    <span class="kwa">return</span> <span class="sym">(</span> <span class="kwa">new</span> <span class="kwb">int</span> <span class="sym">[] { });</span>
            <span class="sym">}</span> <span class="kwa">else if</span> <span class="sym">(</span>onePossible<span class="sym">.</span><span class="kwd">size</span><span class="sym">() &gt;</span> <span class="num">1</span><span class="sym">)</span>
                <span class="kwa">return</span> <span class="sym">(</span> <span class="kwa">new</span> <span class="kwb">int</span> <span class="sym">[] { });</span>
            <span class="kwc">ArrayList</span><span class="sym">&lt;</span><span class="kwc">Integer</span><span class="sym">&gt;</span> moves <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">&lt;</span><span class="kwc">Integer</span><span class="sym">&gt;();</span>
            <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> highest<span class="sym">;</span> i<span class="sym">++) {</span>
                <span class="kwc">Integer</span> ii <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span>i<span class="sym">);</span>
                <span class="kwa">if</span> <span class="sym">(!</span> usedNumbers<span class="sym">.</span><span class="kwd">contains</span><span class="sym">(</span>ii<span class="sym">))</span>
                    moves<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span>ii<span class="sym">);</span>
            <span class="sym">}</span>
            <span class="kwb">int</span><span class="sym">[]</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>moves<span class="sym">.</span><span class="kwd">size</span><span class="sym">()];</span>
            i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">Integer</span> move<span class="sym">:</span> moves<span class="sym">) {</span>
                r<span class="sym">[</span>i<span class="sym">++] =</span> move<span class="sym">.</span><span class="kwd">intValue</span><span class="sym">();</span>
            <span class="sym">}</span>
            <span class="kwa">return</span> r<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> FfmResult <span class="kwd">findFewestMoves</span><span class="sym">() {</span>
            <span class="kwa">if</span> <span class="sym">(</span>ffm <span class="sym">!=</span> null<span class="sym">)</span>
                <span class="kwa">return</span> ffm<span class="sym">;</span>
            <span class="kwb">int</span> x<span class="sym">,</span> y<span class="sym">,</span> mx<span class="sym">,</span> my<span class="sym">,</span> ind<span class="sym">;</span>
            <span class="kwb">int</span><span class="sym">[]</span> minmoves <span class="sym">= (</span><span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[] { });</span>
            <span class="kwb">int</span><span class="sym">[]</span> moves<span class="sym">;</span>
            mx <span class="sym">=</span> my <span class="sym">= -</span><span class="num">1</span><span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span>y <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y <span class="sym">&lt;</span> n<span class="sym">;</span> y<span class="sym">++)</span>
                <span class="kwa">for</span> <span class="sym">(</span>x <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> x <span class="sym">&lt;</span> n<span class="sym">;</span> x<span class="sym">++) {</span>
                    ind <span class="sym">=</span> x <span class="sym">+</span> y <span class="sym">*</span> n<span class="sym">;</span>
                    <span class="kwa">if</span> <span class="sym">(</span>grid<span class="sym">[</span>ind<span class="sym">] ==</span> <span class="num">0</span><span class="sym">) {</span>
                        moves <span class="sym">=</span> <span class="kwd">possibleMoves</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">);</span>
                        <span class="kwa">if</span> <span class="sym">(</span>mx <span class="sym">== -</span><span class="num">1</span> <span class="sym">||</span> moves<span class="sym">.</span>length <span class="sym">&lt;</span> minmoves<span class="sym">.</span>length<span class="sym">) {</span>
                            mx <span class="sym">=</span> x<span class="sym">;</span>
                            my <span class="sym">=</span> y<span class="sym">;</span>
                            minmoves <span class="sym">= (</span><span class="kwb">int</span><span class="sym">[])</span> moves<span class="sym">.</span><span class="kwd">clone</span><span class="sym">();</span>
                        <span class="sym">}</span>
                    <span class="sym">}</span>
                <span class="sym">}</span>
            ffm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">FfmResult</span><span class="sym">(</span>mx<span class="sym">,</span> my<span class="sym">,</span> minmoves<span class="sym">);</span>
            <span class="kwa">return</span> ffm<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">calculatePriority</span><span class="sym">()</span>
        <span class="sym">{</span>
            <span class="kwb">int</span> i<span class="sym">,</span> zerocount<span class="sym">;</span>
            zerocount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> cell<span class="sym">:</span> grid<span class="sym">)</span>
                <span class="kwa">if</span> <span class="sym">(</span>cell <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
                    zerocount<span class="sym">++;</span>
            priority <span class="sym">=</span> zerocount <span class="sym">+</span> <span class="kwd">findFewestMoves</span><span class="sym">().</span>moves<span class="sym">.</span>length<span class="sym">;</span>
            priorityCalculated <span class="sym">=</span> true<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">getPriority</span><span class="sym">()</span>
        <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>priorityCalculated<span class="sym">)</span>
                <span class="kwa">return</span> priority<span class="sym">;</span>
            <span class="kwa">else</span> <span class="sym">{</span>
                <span class="kwd">calculatePriority</span><span class="sym">();</span>
                <span class="kwa">return</span> priority<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">compareTo</span><span class="sym">(</span><span class="kwc">Object</span> anotherMSquare<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">ClassCastException</span> <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(!(</span>anotherMSquare <span class="kwa">instanceof</span> PQNode<span class="sym">))</span>
                <span class="kwa">throw new</span> <span class="kwc">ClassCastException</span><span class="sym">();</span>
            PQNode other <span class="sym">= (</span>PQNode<span class="sym">)</span> anotherMSquare<span class="sym">;</span>
            <span class="kwb">int</span> c <span class="sym">=</span> <span class="kwd">getPriority</span><span class="sym">() -</span> other<span class="sym">.</span><span class="kwd">getPriority</span><span class="sym">();</span>
            <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
                <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                <span class="kwa">while</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> i <span class="sym">&lt;</span> n <span class="sym">*</span> n<span class="sym">) {</span>
                    c <span class="sym">=</span> grid<span class="sym">[</span>i<span class="sym">] -</span> other<span class="sym">.</span>grid<span class="sym">[</span>i<span class="sym">];</span>
                    i<span class="sym">++;</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
            <span class="kwa">return</span> c<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwc">String</span> <span class="kwd">toString</span><span class="sym">() {</span>
            <span class="kwc">StringBuilder</span> sb <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuilder</span><span class="sym">();</span>
            <span class="kwb">int</span> y<span class="sym">,</span> x<span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span>y <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y <span class="sym">&lt;</span> n<span class="sym">;</span> y<span class="sym">++) {</span>
                <span class="kwa">for</span> <span class="sym">(</span>x <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> x <span class="sym">&lt;</span> n<span class="sym">;</span> x<span class="sym">++) {</span>
                    sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>grid<span class="sym">[</span>x <span class="sym">+</span> y <span class="sym">*</span> n<span class="sym">]);</span>
                    <span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">&lt;</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
                        sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">' '</span><span class="sym">);</span>
                <span class="sym">}</span>
                <span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&lt;</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
                    sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span>
            <span class="sym">}</span>
            <span class="kwa">return</span> sb<span class="sym">.</span><span class="kwd">toString</span><span class="sym">();</span>
        <span class="sym">}</span>


    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwd">magicsquares</span><span class="sym">() { }</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {</span>
        n <span class="sym">=</span> <span class="num">3</span><span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
            n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
        mn <span class="sym">=</span> n <span class="sym">* (</span><span class="num">1</span> <span class="sym">+</span> n <span class="sym">*</span> n<span class="sym">) /</span> <span class="num">2</span><span class="sym">;</span>
        <span class="kwc">PriorityQueue</span><span class="sym">&lt;</span>magicsquares<span class="sym">.</span>PQNode<span class="sym">&gt;</span> pq <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">PriorityQueue</span><span class="sym">&lt;</span>magicsquares<span class="sym">.</span>PQNode<span class="sym">&gt;();</span>
        pq<span class="sym">.</span><span class="kwd">offer</span><span class="sym">(</span><span class="kwa">new</span> magicsquares<span class="sym">.</span><span class="kwd">PQNode</span><span class="sym">() );</span>
        <span class="kwa">while</span> <span class="sym">(!</span> pq<span class="sym">.</span><span class="kwd">isEmpty</span><span class="sym">()) {</span>
            PQNode topSquare <span class="sym">=</span> pq<span class="sym">.</span><span class="kwd">poll</span><span class="sym">();</span>
            <span class="kwa">if</span> <span class="sym">(</span>topSquare<span class="sym">.</span><span class="kwd">getPriority</span><span class="sym">() ==</span> <span class="num">0</span><span class="sym">) {</span>
                <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>topSquare<span class="sym">);</span>
                <span class="kwa">break</span><span class="sym">;</span>
            <span class="sym">}</span>
            magicsquares<span class="sym">.</span>FfmResult result <span class="sym">=</span> topSquare<span class="sym">.</span><span class="kwd">findFewestMoves</span><span class="sym">();</span>

            <span class="kwb">int</span> ind <span class="sym">=</span> result<span class="sym">.</span>x <span class="sym">+</span> result<span class="sym">.</span>y <span class="sym">*</span> n<span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> move<span class="sym">:</span> result<span class="sym">.</span>moves<span class="sym">) {</span>
                magicsquares<span class="sym">.</span>PQNode newSquare <span class="sym">=</span> <span class="kwa">new</span> magicsquares<span class="sym">.</span><span class="kwd">PQNode</span><span class="sym">(</span>topSquare<span class="sym">);</span>
                newSquare<span class="sym">.</span>grid<span class="sym">[</span>ind<span class="sym">] =</span> move<span class="sym">;</span>
                pq<span class="sym">.</span><span class="kwd">offer</span><span class="sym">(</span>newSquare<span class="sym">);</span>
            <span class="sym">}</span>
        <span class="sym">}</span>

    <span class="sym">}</span>
<span class="sym">}</span>
