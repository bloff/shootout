<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by - not known -</span>
<span class="slc"># modified by Pilho Kim (first GMP version)</span>
<span class="slc"># modified by Dani Nanz (2007-09-14)</span>

<span class="kwa">import</span> sys
<span class="kwa">import</span> itertools
<span class="kwa">import</span> gmpy


mpz0<span class="sym">,</span> mpz1 <span class="sym">=</span> gmpy<span class="sym">.</span><span class="kwd">mpz</span><span class="sym">(</span><span class="num">0</span><span class="sym">),</span> gmpy<span class="sym">.</span><span class="kwd">mpz</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
mpz2<span class="sym">,</span> mpz3 <span class="sym">=</span> gmpy<span class="sym">.</span><span class="kwd">mpz</span><span class="sym">(</span><span class="num">2</span><span class="sym">),</span> gmpy<span class="sym">.</span><span class="kwd">mpz</span><span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
mpz4<span class="sym">,</span> mpz10 <span class="sym">=</span> gmpy<span class="sym">.</span><span class="kwd">mpz</span><span class="sym">(</span><span class="num">4</span><span class="sym">),</span> gmpy<span class="sym">.</span><span class="kwd">mpz</span><span class="sym">(</span><span class="num">10</span><span class="sym">)</span>


<span class="kwa">def</span> <span class="kwd">gen_x</span><span class="sym">(</span>k<span class="sym">=</span>mpz0<span class="sym">):</span>

    <span class="kwa">while</span> <span class="num">1</span><span class="sym">:</span>
        k <span class="sym">+=</span> mpz1
        <span class="kwa">yield</span> <span class="sym">(</span>k<span class="sym">,</span> mpz4 <span class="sym">*</span> k <span class="sym">+</span> mpz2<span class="sym">,</span> mpz0<span class="sym">,</span> mpz2 <span class="sym">*</span> k <span class="sym">+</span> mpz1<span class="sym">)</span>


<span class="kwa">def</span> <span class="kwd">compose</span><span class="sym">((</span>a<span class="sym">,</span> b<span class="sym">,</span> c<span class="sym">,</span> d<span class="sym">), (</span>e<span class="sym">,</span> f<span class="sym">,</span> g<span class="sym">,</span> h<span class="sym">)):</span>

    <span class="kwa">return</span> <span class="sym">(</span>a <span class="sym">*</span> e<span class="sym">,</span>
            a <span class="sym">*</span> f <span class="sym">+</span> b <span class="sym">*</span> h<span class="sym">,</span>
            c <span class="sym">*</span> e <span class="sym">+</span> d <span class="sym">*</span> g<span class="sym">,</span>
            c <span class="sym">*</span> f <span class="sym">+</span> d <span class="sym">*</span> h<span class="sym">)</span>


<span class="kwa">def</span> <span class="kwd">extract</span><span class="sym">((</span>a<span class="sym">,</span> b<span class="sym">,</span> c<span class="sym">,</span> d<span class="sym">),</span> j<span class="sym">):</span>
    <span class="kwa">return</span> <span class="sym">(</span>a <span class="sym">*</span> j <span class="sym">+</span> b<span class="sym">) // (</span>c <span class="sym">*</span> j <span class="sym">+</span> d<span class="sym">)</span>


<span class="kwa">def</span> <span class="kwd">pi_digits</span><span class="sym">():</span>

    z <span class="sym">= (</span>mpz1<span class="sym">,</span> mpz0<span class="sym">,</span> mpz0<span class="sym">,</span> mpz1<span class="sym">)</span>
    x <span class="sym">=</span> <span class="kwd">gen_x</span><span class="sym">()</span>
    <span class="kwa">while</span> <span class="num">1</span><span class="sym">:</span>
        y <span class="sym">=</span> <span class="kwd">extract</span><span class="sym">(</span>z<span class="sym">,</span> mpz3<span class="sym">)</span>
        <span class="kwa">while</span> y <span class="sym">!=</span> <span class="kwd">extract</span><span class="sym">(</span>z<span class="sym">,</span> mpz4<span class="sym">):</span>
            z <span class="sym">=</span> <span class="kwd">compose</span><span class="sym">(</span>z<span class="sym">,</span> x<span class="sym">.</span><span class="kwd">next</span><span class="sym">())</span>
            y <span class="sym">=</span> <span class="kwd">extract</span><span class="sym">(</span>z<span class="sym">,</span> mpz3<span class="sym">)</span>
        z <span class="sym">=</span> <span class="kwd">compose</span><span class="sym">((</span>mpz10<span class="sym">, -</span>mpz10 <span class="sym">*</span> y<span class="sym">,</span> mpz0<span class="sym">,</span> mpz1<span class="sym">),</span> z<span class="sym">)</span>
        <span class="kwa">yield</span> <span class="kwb">str</span><span class="sym">(</span>y<span class="sym">)</span>


<span class="kwa">def</span> <span class="kwd">main</span><span class="sym">(</span>islice<span class="sym">=</span>itertools<span class="sym">.</span>islice<span class="sym">):</span>

    n <span class="sym">=</span> <span class="kwb">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>
    digits <span class="sym">=</span> <span class="kwd">pi_digits</span><span class="sym">()</span>
    w <span class="sym">=</span> <span class="num">10</span>
    out <span class="sym">= []</span>
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">xrange</span><span class="sym">(</span>w<span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> w<span class="sym">):</span>
        out<span class="sym">.</span><span class="kwd">extend</span><span class="sym">([</span><span class="str">''</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span><span class="kwd">islice</span><span class="sym">(</span>digits<span class="sym">,</span> w<span class="sym">)),</span> i<span class="sym">])</span>
    <span class="kwa">print</span> <span class="sym">(</span><span class="str">'%s</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">* (</span><span class="kwb">len</span><span class="sym">(</span>out<span class="sym">) /</span> <span class="num">2</span><span class="sym">)) %</span> <span class="kwb">tuple</span><span class="sym">(</span>out<span class="sym">),</span>
    <span class="kwa">if</span> n <span class="sym">%</span> w <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">:</span>
        <span class="kwa">print</span> <span class="str">&quot;%s</span><span class="esc">\t</span><span class="str">:%d&quot;</span> <span class="sym">% (</span><span class="str">''</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span><span class="kwd">islice</span><span class="sym">(</span>digits<span class="sym">,</span> n <span class="sym">%</span> w<span class="sym">)).</span><span class="kwd">ljust</span><span class="sym">(</span>w<span class="sym">),</span> n<span class="sym">)</span>


<span class="kwd">main</span><span class="sym">()</span>
