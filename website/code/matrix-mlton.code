<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: matrix-mlton.code,v 1.11 2006-09-20 05:51:53 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * from Stephen Weeks</span>
<span class="com"> *)</span>
<span class="com">(* Translated from matrix.ocaml. *)</span>

<span class="kwa">fun</span> incr r <span class="sym">=</span> r <span class="sym">:= !</span>r <span class="sym">+</span> <span class="num">1</span>
<span class="kwa">fun</span> for <span class="sym">(</span>start<span class="sym">,</span> stop<span class="sym">,</span> f<span class="sym">) =</span>
   <span class="kwa">let</span>
      <span class="kwa">fun</span> loop i <span class="sym">=</span>
	 <span class="kwa">if</span> i <span class="sym">&gt;</span> stop
	    <span class="kwa">then</span> <span class="sym">()</span>
	 <span class="kwa">else</span> <span class="sym">(</span>f i<span class="sym">;</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
   <span class="kwa">in</span>
      loop start
   <span class="kwa">end</span>

<span class="kwa">structure</span> Array2 <span class="sym">=</span>
   <span class="kwa">struct</span>
      <span class="kwa">datatype</span> 'a t <span class="sym">=</span> T <span class="kwa">of</span> 'a array array

      <span class="kwa">fun</span> sub <span class="sym">(</span>T a<span class="sym">,</span> r<span class="sym">,</span> c<span class="sym">) =</span> Array.sub <span class="sym">(</span>Array.sub <span class="sym">(</span>a<span class="sym">,</span> r<span class="sym">),</span> c<span class="sym">)</span>
      <span class="kwa">fun</span> subr <span class="sym">(</span>T a<span class="sym">,</span> r<span class="sym">) =</span>
	 <span class="kwa">let val</span> a <span class="sym">=</span> Array.sub <span class="sym">(</span>a<span class="sym">,</span> r<span class="sym">)</span>
	 <span class="kwa">in fn</span> c <span class="sym">=&gt;</span> Array.sub <span class="sym">(</span>a<span class="sym">,</span> c<span class="sym">)</span>
	 <span class="kwa">end</span>
      <span class="kwa">fun</span> update <span class="sym">(</span>T a<span class="sym">,</span> r<span class="sym">,</span> c<span class="sym">,</span> x<span class="sym">) =</span> Array.update <span class="sym">(</span>Array.sub <span class="sym">(</span>a<span class="sym">,</span> r<span class="sym">),</span> c<span class="sym">,</span> x<span class="sym">)</span>
      <span class="kwa">fun</span> array <span class="sym">(</span>r<span class="sym">,</span> c<span class="sym">,</span> x<span class="sym">) =</span>
	 T <span class="sym">(</span>Array.tabulate <span class="sym">(</span>r<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> Array.array <span class="sym">(</span>c<span class="sym">,</span> x<span class="sym">)))</span>
   <span class="kwa">end</span>
<span class="kwa">val</span> sub <span class="sym">=</span> Array2.sub
<span class="kwa">val</span> update <span class="sym">=</span> Array2.update

<span class="kwa">val</span> size <span class="sym">=</span> <span class="num">30</span>

<span class="kwa">fun</span> mkmatrix <span class="sym">(</span>rows<span class="sym">,</span> cols<span class="sym">) =</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> count <span class="sym">=</span> ref <span class="num">1</span>
      <span class="kwa">val</span> m <span class="sym">=</span> Array2.array <span class="sym">(</span>rows<span class="sym">,</span> cols<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
   <span class="kwa">in</span>
      for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> rows<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span>
	   for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> cols<span class="sym">,</span> <span class="kwa">fn</span> j <span class="sym">=&gt;</span>
		<span class="sym">(</span>update <span class="sym">(</span>m<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">, !</span>count<span class="sym">)</span>
		 <span class="sym">;</span> incr count<span class="sym">)));</span>
      m
   <span class="kwa">end</span>

<span class="kwa">fun</span> mmult <span class="sym">(</span>rows<span class="sym">,</span> cols<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> m3<span class="sym">) =</span>
   for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> rows<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span>
	for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> cols<span class="sym">,</span> <span class="kwa">fn</span> j <span class="sym">=&gt;</span>
	     update <span class="sym">(</span>m3<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">,</span>
		     <span class="kwa">let</span>
			<span class="kwa">val</span> m1i <span class="sym">=</span> Array2.subr <span class="sym">(</span>m1<span class="sym">,</span> i<span class="sym">)</span>
			<span class="kwa">fun</span> loop <span class="sym">(</span>k<span class="sym">,</span> sum<span class="sym">) =</span>
			   <span class="kwa">if</span> k <span class="sym">&lt;</span> <span class="num">0</span>
			      <span class="kwa">then</span> sum
			   <span class="kwa">else</span> loop <span class="sym">(</span>k <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span>
				      sum <span class="sym">+</span> m1i k <span class="sym">*</span> sub <span class="sym">(</span>m2<span class="sym">,</span> k<span class="sym">,</span> j<span class="sym">))</span>
		     <span class="kwa">in</span>
			loop <span class="sym">(</span>rows <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
		     <span class="kwa">end</span><span class="sym">)))</span>

<span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">);</span>

<span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>
  <span class="kwa">let</span>
     <span class="kwa">val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))</span>
     <span class="kwa">val</span> m1 <span class="sym">=</span> mkmatrix <span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">)</span>
     <span class="kwa">val</span> m2 <span class="sym">=</span> mkmatrix <span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">)</span>
     <span class="kwa">val</span> m3 <span class="sym">=</span> Array2.array <span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
     <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> mmult <span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> m3<span class="sym">))</span>
     <span class="kwa">val</span> _ <span class="sym">=</span> mmult <span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> m3<span class="sym">)</span>
  <span class="kwa">in</span>
     printl <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(</span>sub <span class="sym">(</span>m3<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)),</span>
	     <span class="str">&quot; &quot;</span><span class="sym">,</span>
	     <span class="kwa">Int</span>.toString <span class="sym">(</span>sub <span class="sym">(</span>m3<span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> <span class="num">3</span><span class="sym">)),</span>
	     <span class="str">&quot; &quot;</span><span class="sym">,</span>
	     <span class="kwa">Int</span>.toString <span class="sym">(</span>sub <span class="sym">(</span>m3<span class="sym">,</span> <span class="num">3</span><span class="sym">,</span> <span class="num">2</span><span class="sym">)),</span>
	     <span class="str">&quot; &quot;</span><span class="sym">,</span>
	     <span class="kwa">Int</span>.toString <span class="sym">(</span>sub <span class="sym">(</span>m3<span class="sym">,</span> <span class="num">4</span><span class="sym">,</span> <span class="num">4</span><span class="sym">))];</span>
     OS.Process.success
  <span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() )</span>
