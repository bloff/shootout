<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   http://www.bagley.org/~doug/shootout/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release except.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--)</span>
    <span class="sym">{</span>
        <span class="kwd">some_function</span><span class="sym">(</span>n<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;Exceptions: HI=&quot;</span><span class="sym">,</span><span class="kwb">HI</span><span class="sym">,</span><span class="str">&quot; / LO=&quot;</span><span class="sym">,</span><span class="kwb">LO</span><span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

size_t <span class="kwb">HI</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
size_t <span class="kwb">LO</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

<span class="kwa">class</span> <span class="kwb">H</span>i_exception
<span class="sym">{</span>
<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">this</span><span class="sym">(</span>size_t _n<span class="sym">) {</span> n <span class="sym">=</span> _n<span class="sym">; }</span>
    <span class="kwa">char</span><span class="sym">[]</span> <span class="kwd">what</span><span class="sym">() {</span> <span class="kwa">return</span><span class="sym">(</span>std<span class="sym">.</span>string<span class="sym">.</span><span class="kwd">toString</span><span class="sym">(</span>n<span class="sym">)); }</span>
<span class="kwa">private</span><span class="sym">:</span>
    size_t n<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">L</span>o_exception
<span class="sym">{</span>
<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">this</span><span class="sym">(</span>size_t _n<span class="sym">) {</span> n <span class="sym">=</span> _n<span class="sym">; }</span>
    <span class="kwa">char</span><span class="sym">[]</span> <span class="kwd">what</span><span class="sym">() {</span> <span class="kwa">return</span><span class="sym">(</span>std<span class="sym">.</span>string<span class="sym">.</span><span class="kwd">toString</span><span class="sym">(</span>n<span class="sym">)); }</span>
<span class="kwa">private</span><span class="sym">:</span>
    size_t n<span class="sym">;</span> <span class="kwa">char</span> <span class="kwb">N</span><span class="sym">[</span><span class="num">8</span><span class="sym">];</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">blowup</span><span class="sym">(</span>size_t num<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">if</span><span class="sym">(</span>num <span class="sym">%</span> <span class="num">2</span><span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">throw new</span> <span class="kwb">L</span>o_exception<span class="sym">(</span>num<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">throw new</span> <span class="kwb">H</span>i_exception<span class="sym">(</span>num<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">lo_function</span><span class="sym">(</span>size_t num<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">try</span>
    <span class="sym">{</span>
        <span class="kwd">blowup</span><span class="sym">(</span>num<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">catch</span><span class="sym">(</span><span class="kwb">L</span>o_exception ex<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="sym">++</span><span class="kwb">LO</span><span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">hi_function</span><span class="sym">(</span>size_t num<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">try</span>
    <span class="sym">{</span>
        <span class="kwd">lo_function</span><span class="sym">(</span>num<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">catch</span><span class="sym">(</span><span class="kwb">H</span>i_exception ex<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="sym">++</span><span class="kwb">HI</span><span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">some_function</span><span class="sym">(</span>size_t num<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">try</span>
    <span class="sym">{</span>
        <span class="kwd">hi_function</span><span class="sym">(</span>num<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">catch</span>
    <span class="sym">{</span>
        <span class="kwd">fwritefln</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;We shouldn't get here&quot;</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>
