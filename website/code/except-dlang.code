<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   http://www.bagley.org/~doug/shootout/

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release except.d
*/</span>

import std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)
{
</span>    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;

</span>    <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--)
    {
</span>        some_function<span class="sym">(</span>n<span class="sym">);
    }

</span>    writefln<span class="sym">(</span><span class="str">&quot;Exceptions: HI=&quot;</span><span class="sym">,</span>HI<span class="sym">,</span><span class="str">&quot; / LO=&quot;</span><span class="sym">,</span>LO<span class="sym">);
}

</span><span class="kwb">size_t</span> HI <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwb">size_t</span> LO <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span><span class="kwc">class</span> Hi_exception
<span class="sym">{
</span><span class="kwc">public</span><span class="sym">:
</span>    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">size_t</span> _n<span class="sym">) {</span> n <span class="sym">=</span> _n<span class="sym">; }
</span>    <span class="kwb">char</span><span class="sym">[]</span> what<span class="sym">() {</span> <span class="kwa">return</span><span class="sym">(</span>std<span class="sym">.</span>string<span class="sym">.</span>toString<span class="sym">(</span>n<span class="sym">)); }
</span><span class="kwc">private</span><span class="sym">:
</span>    <span class="kwb">size_t</span> n<span class="sym">;
}

</span><span class="kwc">class</span> Lo_exception
<span class="sym">{
</span><span class="kwc">public</span><span class="sym">:
</span>    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">size_t</span> _n<span class="sym">) {</span> n <span class="sym">=</span> _n<span class="sym">; }
</span>    <span class="kwb">char</span><span class="sym">[]</span> what<span class="sym">() {</span> <span class="kwa">return</span><span class="sym">(</span>std<span class="sym">.</span>string<span class="sym">.</span>toString<span class="sym">(</span>n<span class="sym">)); }
</span><span class="kwc">private</span><span class="sym">:
</span>    <span class="kwb">size_t</span> n<span class="sym">;</span> <span class="kwb">char</span> N<span class="sym">[</span><span class="num">8</span><span class="sym">];
}

</span><span class="kwb">void</span> blowup<span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">)
{
</span>    <span class="kwa">if</span><span class="sym">(</span>num <span class="sym">%</span> <span class="num">2</span><span class="sym">)
    {
</span>        <span class="kwa">throw new</span> Lo_exception<span class="sym">(</span>num<span class="sym">);
    }
</span>    <span class="kwa">throw new</span> Hi_exception<span class="sym">(</span>num<span class="sym">);
}

</span><span class="kwb">void</span> lo_function<span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">)
{
</span>    <span class="kwa">try
</span>    <span class="sym">{
</span>        blowup<span class="sym">(</span>num<span class="sym">);
    }
</span>    <span class="kwa">catch</span><span class="sym">(</span>Lo_exception ex<span class="sym">)
    {
        ++</span>LO<span class="sym">;
    }
}

</span><span class="kwb">void</span> hi_function<span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">)
{
</span>    <span class="kwa">try
</span>    <span class="sym">{
</span>        lo_function<span class="sym">(</span>num<span class="sym">);
    }
</span>    <span class="kwa">catch</span><span class="sym">(</span>Hi_exception ex<span class="sym">)
    {
        ++</span>HI<span class="sym">;
    }
}

</span><span class="kwb">void</span> some_function<span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">)
{
</span>    <span class="kwa">try
</span>    <span class="sym">{
</span>        hi_function<span class="sym">(</span>num<span class="sym">);
    }
</span>    <span class="kwa">catch
</span>    <span class="sym">{
</span>        fwritefln<span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;We shouldn't get here&quot;</span><span class="sym">);
    }
}</span>
