<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>require<span class="sym">-</span>extension format<span class="sym">)</span>

<span class="sym">(</span>declare <span class="sym">(</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span><span class="kwa">lambda</span><span class="sym">-</span>lift<span class="sym">)</span>
         <span class="sym">(</span>uses srfi<span class="sym">-</span><span class="num">1</span> srfi<span class="sym">-</span><span class="num">13</span><span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>stringbuffer #<span class="sym">!</span>optional <span class="sym">(</span>blocksize #e512<span class="sym">) (</span>initial<span class="sym">-</span>capacity #e32<span class="sym">))</span>
  <span class="sym">(</span>let<span class="sym">*</span>

    <span class="slc">; -------------</span>

    <span class="sym">((</span>capacity initial<span class="sym">-</span>capacity<span class="sym">)</span>

    <span class="sym">(</span>buffer <span class="sym">(</span>make<span class="sym">-</span>vector capacity <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">)))</span>

    <span class="sym">(</span>spill<span class="sym">-</span>buffer <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">))</span>

    <span class="sym">(</span>next<span class="sym">-</span>entry #e0<span class="sym">)</span>

    <span class="sym">(</span>grow<span class="sym">-</span>buffer
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> capacity <span class="sym">(</span>fx<span class="sym">*</span> #e2 capacity<span class="sym">))</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> buffer <span class="sym">(</span>vector<span class="sym">-</span>resize buffer capacity <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">))) ))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>sb<span class="sym">-</span>free
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
        <span class="sym">(</span>let loop <span class="sym">((</span>i <span class="sym">(</span>sub1 next<span class="sym">-</span>entry<span class="sym">)))</span>
          <span class="sym">(</span><span class="kwa">cond</span>
            <span class="sym">((</span>zero? i<span class="sym">)</span> <span class="str">'())</span>
<span class="str">            (else</span>
<span class="str">              (vector-set! buffer i (make-string 0))</span>
<span class="str">              (loop (sub1 i)))))</span>
<span class="str"></span>
<span class="str">        (set! buffer (make-vector initial-capacity (make-string 0)))</span>
<span class="str">        (set! spill-buffer (make-string 0))</span>
<span class="str">        (set! next-entry #e0) ))</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    (sb-append!</span>
<span class="str">      (lambda (value)</span>
<span class="str">        (let* ((new-value (string-append spill-buffer value))</span>
<span class="str">               (new-value-length (string-length new-value)))</span>
<span class="str">          (set! spill-buffer (make-string 0))</span>
<span class="str">          (if (fx= next-entry capacity)</span>
<span class="str">            (grow-buffer))</span>
<span class="str">          (cond</span>
<span class="str">            ((fx&lt; new-value-length blocksize) (set! spill-buffer new-value))</span>
<span class="str">            ((fx&gt; new-value-length blocksize)</span>
<span class="str">              (if (fx&gt;= (fx+ (fxmod new-value-length blocksize) next-entry) capacity)</span>
<span class="str">                (grow-buffer))</span>
<span class="str">              (for-each</span>
<span class="str">                (lambda (block)</span>
<span class="str">                  (vector-set! buffer next-entry block)</span>
<span class="str">                  (set! next-entry (add1 next-entry)))</span>
<span class="str">                (string-chop new-value blocksize))</span>
<span class="str">              (if (fx&lt; (string-length (vector-ref buffer (sub1 next-entry))) blocksize)</span>
<span class="str">              (begin</span>
<span class="str">                (set! spill-buffer (vector-ref buffer (sub1 next-entry)))</span>
<span class="str">                (vector-set! buffer (sub1 next-entry) (make-string 0))</span>
<span class="str">                (set! next-entry (sub1 next-entry)))))</span>
<span class="str">            (else</span>
<span class="str">              (vector-set! buffer next-entry new-value)</span>
<span class="str">              (set! next-entry (add1 next-entry)))) )))</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    (sb-slice</span>
<span class="str">      (lambda (i length)</span>
<span class="str">        (let* ((start-block (fx/ i blocksize))</span>
<span class="str">               (start-offset (fxmod i blocksize))</span>
<span class="str">               (so+length (fx+ start-offset length)))</span>
<span class="str">          (cond</span>
<span class="str">            ((fx&gt; start-block next-entry)</span>
<span class="str">              (make-string 0))</span>
<span class="str">            ((fx= start-block next-entry)</span>
<span class="str">              (let ((extract-length (fxmin length (string-length spill-buffer))))</span>
<span class="str">                (substring spill-buffer start-offset (fx+ start-offset extract-length))))</span>
<span class="str">            (else</span>
<span class="str">              (cond</span>
<span class="str">                ((fx&lt;= so+length blocksize)</span>
<span class="str">                  (substring (vector-ref buffer start-block) start-offset (fx+ start-offset length)))</span>
<span class="str">                (else ;;; (fx&gt; so+length blocksize)</span>
<span class="str">                  (let ((n (fx/ so+length blocksize))</span>
<span class="str">                        (last-block-length (fxmod so+length blocksize)))</span>
<span class="str">                    (let loop ((i (add1 start-block))</span>
<span class="str">                               (s (substring (vector-ref buffer start-block) start-offset)))</span>
<span class="str">                      (cond</span>
<span class="str">                        ((fx&gt;= i n)</span>
<span class="str">                          (if (fx&gt;= i next-entry)</span>
<span class="str">                            (let ((spill-length (string-length spill-buffer)))</span>
<span class="str">                              (cond</span>
<span class="str">                                ((zero? spill-length) s)</span>
<span class="str">                                ((fx&lt; spill-length last-block-length) (string-append s spill-buffer))</span>
<span class="str">                                (else (string-append s (substring spill-buffer 0 last-block-length)) )))</span>
<span class="str">                          ; else</span>
<span class="str">                            (string-append s (substring (vector-ref buffer i) 0 last-block-length)) ))</span>
<span class="str">                        (else</span>
<span class="str">                          (loop (add1 i) (string-append s (substring (vector-ref buffer i) 0 blocksize) ))) ))) )) )) )))</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    (sb-length</span>
<span class="str">      (lambda ()</span>
<span class="str">        (fx+ (fx* blocksize next-entry) (string-length spill-buffer)))) )</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    (lambda (op)</span>
<span class="str">      (cond</span>
<span class="str">        ((eq? op '</span>free<span class="sym">)</span> sb<span class="sym">-</span>free<span class="sym">)</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="str">'append!) sb-append!)</span>
<span class="str">        ((eq? op '</span>slice<span class="sym">)</span> sb<span class="sym">-</span>slice<span class="sym">)</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="str">'length) sb-length)</span>
<span class="str">        (else (lambda () (display &quot;*** make-stringbuffer:invalid operation ***</span><span class="esc">\n</span><span class="str">&quot;))))) ))</span>
<span class="str"></span>
<span class="str">; -------------------------------</span>
<span class="str"></span>
<span class="str">(define (stringbuffer-append! sb value)</span>
<span class="str">  (apply (sb '</span><span class="kwa">append</span><span class="sym">!) (</span><span class="kwa">list</span> value<span class="sym">)))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define <span class="sym">(</span>stringbuffer<span class="sym">-</span>slice sb i <span class="kwa">length</span><span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">(</span>sb <span class="str">'slice) (list i length)))</span>
<span class="str"></span>
<span class="str">; -------------</span>
<span class="str"></span>
<span class="str">(define (stringbuffer-length sb)</span>
<span class="str">  (apply (sb '</span><span class="kwa">length</span><span class="sym">)</span> <span class="str">'()))</span>
<span class="str"></span>
<span class="str">; -------------------------------</span>
<span class="str"></span>
<span class="str">(define (make-knucleotide #!optional (blocksize #e4096))</span>
<span class="str">  (let*</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    ((load-sequence</span>
<span class="str">      (lambda ()</span>
<span class="str">        (let ((sb (make-stringbuffer blocksize)))</span>
<span class="str">          (let loop ((line (read-line)))</span>
<span class="str">            (cond</span>
<span class="str">              ((and</span>
<span class="str">                (char=? (string-ref line 0) #</span><span class="esc">\&gt;</span><span class="str">)</span>
<span class="str">                (string=? (substring line 0 6) &quot;&gt;THREE&quot;)) '</span><span class="sym">())</span>
              <span class="sym">(</span>else
                <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)) )))</span>
          <span class="sym">(</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
            <span class="sym">(</span><span class="kwa">cond</span>
              <span class="sym">((</span>eof<span class="sym">-</span>object? <span class="kwa">line</span><span class="sym">)</span> <span class="str">'())</span>
<span class="str">              ((char=? (string-ref line 0) #</span><span class="esc">\&gt;</span><span class="str">) '</span><span class="sym">())</span>
              <span class="sym">((</span>char<span class="sym">=</span>? <span class="sym">(</span>string<span class="sym">-</span>ref <span class="kwa">line</span> <span class="num">0</span><span class="sym">)</span> #\;<span class="sym">) (</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
              <span class="sym">(</span>else
                <span class="sym">(</span>string<span class="sym">-</span>upcase<span class="sym">!</span> <span class="kwa">line</span><span class="sym">)</span>
                <span class="sym">(</span>stringbuffer<span class="sym">-</span><span class="kwa">append</span><span class="sym">!</span> sb <span class="kwa">line</span><span class="sym">)</span>
                <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)) )))</span>
          sb<span class="sym">)))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>sequence <span class="sym">(</span><span class="kwa">load</span><span class="sym">-</span>sequence<span class="sym">))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>generate<span class="sym">-</span>counts
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
        <span class="sym">(</span>let <span class="sym">((</span>count<span class="sym">-</span>table <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table<span class="sym">))</span>
              <span class="sym">(</span><span class="kwa">last</span><span class="sym">-</span>idx <span class="sym">(</span>add1 <span class="sym">(</span>fx<span class="sym">- (</span>stringbuffer<span class="sym">-</span><span class="kwa">length</span> sequence<span class="sym">)</span> fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)) ))</span>
          <span class="sym">(</span>let loop<span class="sym">-</span>i <span class="sym">((</span>i #e0<span class="sym">))</span>
            <span class="sym">(</span><span class="kwa">cond</span>
              <span class="sym">((</span>fx<span class="sym">&gt;=</span> i fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span> <span class="str">'())</span>
<span class="str">              (else</span>
<span class="str">                (let loop-j ((j i) (key (stringbuffer-slice sequence i fragment-length)))</span>
<span class="str">                  (cond</span>
<span class="str">                    ((fx&gt;= j last-idx) '</span><span class="sym">())</span>
                    <span class="sym">(</span>else
                      <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> count<span class="sym">-</span>table key
                        <span class="sym">(</span>add1 <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>ref<span class="sym">/</span>default count<span class="sym">-</span>table key #e0<span class="sym">)))</span>
                      <span class="sym">(</span>loop<span class="sym">-</span>j <span class="sym">(</span>fx<span class="sym">+</span> j fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
                              <span class="sym">(</span>stringbuffer<span class="sym">-</span>slice
                                sequence <span class="sym">(</span>fx<span class="sym">+</span> j fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span> fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)) )))</span>
                <span class="sym">(</span>loop<span class="sym">-</span>i <span class="sym">(</span>add1 i<span class="sym">)))))</span>
          count<span class="sym">-</span>table<span class="sym">)))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>frequencies
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
        <span class="sym">(</span>let<span class="sym">* ((</span>count<span class="sym">-</span>table <span class="sym">(</span>generate<span class="sym">-</span>counts fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">))</span>
               <span class="sym">(</span>count<span class="sym">-</span>sum
                 <span class="sym">(</span>exact<span class="sym">-&gt;</span>inexact
                   <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>fold
                     count<span class="sym">-</span>table
                       <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>key value accum<span class="sym">) (</span>fx<span class="sym">+</span> accum value<span class="sym">))</span> #e0<span class="sym">)))</span>
               <span class="sym">(</span>freq<span class="sym">-</span><span class="kwa">list</span>
                 <span class="sym">(</span>map
                   <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>pair<span class="sym">)</span>
                     <span class="sym">(</span><span class="kwa">cons</span>
                       <span class="sym">(</span><span class="kwa">car</span> pair<span class="sym">)</span>
                       <span class="sym">(</span>fp<span class="sym">*</span> #i100 <span class="sym">(</span>fp<span class="sym">/ (</span>exact<span class="sym">-&gt;</span>inexact <span class="sym">(</span><span class="kwa">cdr</span> pair<span class="sym">))</span> count<span class="sym">-</span>sum<span class="sym">))))</span>
                   <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-&gt;</span>alist count<span class="sym">-</span>table<span class="sym">)))</span>
               <span class="sym">(</span>sorted<span class="sym">-</span>freq<span class="sym">-</span><span class="kwa">list</span>
                 <span class="sym">(</span>sort
                   freq<span class="sym">-</span><span class="kwa">list</span>
                   <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x y<span class="sym">)</span>
                     <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>fp<span class="sym">= (</span><span class="kwa">cdr</span> x<span class="sym">) (</span><span class="kwa">cdr</span> y<span class="sym">))</span>
                       <span class="sym">(</span>string<span class="sym">-</span>ci<span class="sym">&gt;</span>? <span class="sym">(</span><span class="kwa">car</span> x<span class="sym">) (</span><span class="kwa">car</span> y<span class="sym">))</span>
                     <span class="slc">; else</span>
                       <span class="sym">(&gt; (</span><span class="kwa">cdr</span> x<span class="sym">) (</span><span class="kwa">cdr</span> y<span class="sym">)))) )))</span>
          <span class="sym">(</span>for<span class="sym">-</span>each
            <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>pair<span class="sym">) (</span>format #t <span class="str">&quot;~A ~,3F~%&quot;</span> <span class="sym">(</span><span class="kwa">car</span> pair<span class="sym">) (</span><span class="kwa">cdr</span> pair<span class="sym">)))</span>
            sorted<span class="sym">-</span>freq<span class="sym">-</span><span class="kwa">list</span><span class="sym">)</span>
          <span class="sym">(</span>newline<span class="sym">))))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>fragment<span class="sym">)</span>
        <span class="sym">(</span>let<span class="sym">* ((</span>count<span class="sym">-</span>table <span class="sym">(</span>generate<span class="sym">-</span>counts <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> fragment<span class="sym">)))</span>
               <span class="sym">(</span>fragment<span class="sym">-</span>count <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>ref<span class="sym">/</span>default count<span class="sym">-</span>table fragment #e0<span class="sym">) ))</span>
          <span class="sym">(</span><span class="kwa">print</span> fragment<span class="sym">-</span>count <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> fragment<span class="sym">) ))))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>op<span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">cond</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="str">'print-frequencies) print-frequencies)</span>
<span class="str">        ((eq? op '</span><span class="kwa">print</span><span class="sym">-</span>count<span class="sym">)</span> <span class="kwa">print</span><span class="sym">-</span>count<span class="sym">)</span>
        <span class="sym">(</span>else <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span>display <span class="str">&quot;*** make-knucleotide:invalid operation ***</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">))))) ))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>frequencies knucleotide fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">(</span>knucleotide <span class="str">'print-frequencies) (list fragment-length)))</span>
<span class="str"></span>
<span class="str">; -------------</span>
<span class="str"></span>
<span class="str">(define (print-count knucleotide fragment)</span>
<span class="str">  (apply (knucleotide '</span><span class="kwa">print</span><span class="sym">-</span>count<span class="sym">) (</span><span class="kwa">list</span> fragment<span class="sym">)))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>knucleotide <span class="sym">(</span>make<span class="sym">-</span>knucleotide #e16384<span class="sym">)))</span>

    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>frequencies knucleotide <span class="num">1</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>frequencies knucleotide <span class="num">2</span><span class="sym">)</span>

    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide <span class="str">&quot;GGT&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide <span class="str">&quot;GGTA&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide <span class="str">&quot;GGTATT&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">)))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main<span class="sym">)</span>

