<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>require<span class="sym">-</span>extension format<span class="sym">)</span>

<span class="sym">(</span>declare <span class="sym">(</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span><span class="kwa">lambda</span><span class="sym">-</span>lift<span class="sym">)</span>
         <span class="sym">(</span>uses srfi<span class="sym">-</span><span class="num">1</span> srfi<span class="sym">-</span><span class="num">13</span><span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>stringbuffer #<span class="sym">!</span>optional <span class="sym">(</span>blocksize #e512<span class="sym">) (</span>initial<span class="sym">-</span>capacity #e32<span class="sym">))</span>
  <span class="sym">(</span>let<span class="sym">*</span>

    <span class="slc">; -------------</span>

    <span class="sym">((</span>capacity initial<span class="sym">-</span>capacity<span class="sym">)</span>

    <span class="sym">(</span>buffer <span class="sym">(</span>make<span class="sym">-</span>vector capacity <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">)))</span>

    <span class="sym">(</span>spill<span class="sym">-</span>buffer <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">))</span>

    <span class="sym">(</span>next<span class="sym">-</span>entry #e0<span class="sym">)</span>

    <span class="sym">(</span>grow<span class="sym">-</span>buffer
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> capacity <span class="sym">(</span>fx<span class="sym">*</span> #e2 capacity<span class="sym">))</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> buffer <span class="sym">(</span>vector<span class="sym">-</span>resize buffer capacity <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">))) ))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>sb<span class="sym">-</span>free
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
        <span class="sym">(</span>let loop <span class="sym">((</span>i <span class="sym">(</span>sub1 next<span class="sym">-</span>entry<span class="sym">)))</span>
          <span class="sym">(</span><span class="kwa">cond</span>
            <span class="sym">((</span>zero? i<span class="sym">) '())</span>
            <span class="sym">(</span>else
              <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> buffer i <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">))</span>
              <span class="sym">(</span>loop <span class="sym">(</span>sub1 i<span class="sym">)))))</span>

        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> buffer <span class="sym">(</span>make<span class="sym">-</span>vector initial<span class="sym">-</span>capacity <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">)))</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> spill<span class="sym">-</span>buffer <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">))</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> next<span class="sym">-</span>entry #e0<span class="sym">) ))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>sb<span class="sym">-</span><span class="kwa">append</span><span class="sym">!</span>
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>value<span class="sym">)</span>
        <span class="sym">(</span>let<span class="sym">* ((</span>new<span class="sym">-</span>value <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> spill<span class="sym">-</span>buffer value<span class="sym">))</span>
               <span class="sym">(</span>new<span class="sym">-</span>value<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> new<span class="sym">-</span>value<span class="sym">)))</span>
          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> spill<span class="sym">-</span>buffer <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">))</span>
          <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>fx<span class="sym">=</span> next<span class="sym">-</span>entry capacity<span class="sym">)</span>
            <span class="sym">(</span>grow<span class="sym">-</span>buffer<span class="sym">))</span>
          <span class="sym">(</span><span class="kwa">cond</span>
            <span class="sym">((</span>fx<span class="sym">&lt;</span> new<span class="sym">-</span>value<span class="sym">-</span><span class="kwa">length</span> blocksize<span class="sym">) (</span><span class="kwa">set</span><span class="sym">!</span> spill<span class="sym">-</span>buffer new<span class="sym">-</span>value<span class="sym">))</span>
            <span class="sym">((</span>fx<span class="sym">&gt;</span> new<span class="sym">-</span>value<span class="sym">-</span><span class="kwa">length</span> blocksize<span class="sym">)</span>
              <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>fx<span class="sym">&gt;= (</span>fx<span class="sym">+ (</span>fxmod new<span class="sym">-</span>value<span class="sym">-</span><span class="kwa">length</span> blocksize<span class="sym">)</span> next<span class="sym">-</span>entry<span class="sym">)</span> capacity<span class="sym">)</span>
                <span class="sym">(</span>grow<span class="sym">-</span>buffer<span class="sym">))</span>
              <span class="sym">(</span>for<span class="sym">-</span>each
                <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>block<span class="sym">)</span>
                  <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> buffer next<span class="sym">-</span>entry block<span class="sym">)</span>
                  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> next<span class="sym">-</span>entry <span class="sym">(</span>add1 next<span class="sym">-</span>entry<span class="sym">)))</span>
                <span class="sym">(</span>string<span class="sym">-</span>chop new<span class="sym">-</span>value blocksize<span class="sym">))</span>
              <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>fx<span class="sym">&lt; (</span>string<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span>vector<span class="sym">-</span>ref buffer <span class="sym">(</span>sub1 next<span class="sym">-</span>entry<span class="sym">)))</span> blocksize<span class="sym">)</span>
              <span class="sym">(</span>begin
                <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> spill<span class="sym">-</span>buffer <span class="sym">(</span>vector<span class="sym">-</span>ref buffer <span class="sym">(</span>sub1 next<span class="sym">-</span>entry<span class="sym">)))</span>
                <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> buffer <span class="sym">(</span>sub1 next<span class="sym">-</span>entry<span class="sym">) (</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">))</span>
                <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> next<span class="sym">-</span>entry <span class="sym">(</span>sub1 next<span class="sym">-</span>entry<span class="sym">)))))</span>
            <span class="sym">(</span>else
              <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> buffer next<span class="sym">-</span>entry new<span class="sym">-</span>value<span class="sym">)</span>
              <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> next<span class="sym">-</span>entry <span class="sym">(</span>add1 next<span class="sym">-</span>entry<span class="sym">)))) )))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>sb<span class="sym">-</span>slice
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>i <span class="kwa">length</span><span class="sym">)</span>
        <span class="sym">(</span>let<span class="sym">* ((</span>start<span class="sym">-</span>block <span class="sym">(</span>fx<span class="sym">/</span> i blocksize<span class="sym">))</span>
               <span class="sym">(</span>start<span class="sym">-</span>offset <span class="sym">(</span>fxmod i blocksize<span class="sym">))</span>
               <span class="sym">(</span>so<span class="sym">+</span><span class="kwa">length</span> <span class="sym">(</span>fx<span class="sym">+</span> start<span class="sym">-</span>offset <span class="kwa">length</span><span class="sym">)))</span>
          <span class="sym">(</span><span class="kwa">cond</span>
            <span class="sym">((</span>fx<span class="sym">&gt;</span> start<span class="sym">-</span>block next<span class="sym">-</span>entry<span class="sym">)</span>
              <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">0</span><span class="sym">))</span>
            <span class="sym">((</span>fx<span class="sym">=</span> start<span class="sym">-</span>block next<span class="sym">-</span>entry<span class="sym">)</span>
              <span class="sym">(</span>let <span class="sym">((</span>extract<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span>fxmin <span class="kwa">length</span> <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> spill<span class="sym">-</span>buffer<span class="sym">))))</span>
                <span class="sym">(</span>substring spill<span class="sym">-</span>buffer start<span class="sym">-</span>offset <span class="sym">(</span>fx<span class="sym">+</span> start<span class="sym">-</span>offset extract<span class="sym">-</span><span class="kwa">length</span><span class="sym">))))</span>
            <span class="sym">(</span>else
              <span class="sym">(</span><span class="kwa">cond</span>
                <span class="sym">((</span>fx<span class="sym">&lt;=</span> so<span class="sym">+</span><span class="kwa">length</span> blocksize<span class="sym">)</span>
                  <span class="sym">(</span>substring <span class="sym">(</span>vector<span class="sym">-</span>ref buffer start<span class="sym">-</span>block<span class="sym">)</span> start<span class="sym">-</span>offset <span class="sym">(</span>fx<span class="sym">+</span> start<span class="sym">-</span>offset <span class="kwa">length</span><span class="sym">)))</span>
                <span class="sym">(</span>else <span class="slc">;;; (fx&gt; so+length blocksize)</span>
                  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>fx<span class="sym">/</span> so<span class="sym">+</span><span class="kwa">length</span> blocksize<span class="sym">))</span>
                        <span class="sym">(</span><span class="kwa">last</span><span class="sym">-</span>block<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span>fxmod so<span class="sym">+</span><span class="kwa">length</span> blocksize<span class="sym">)))</span>
                    <span class="sym">(</span>let loop <span class="sym">((</span>i <span class="sym">(</span>add1 start<span class="sym">-</span>block<span class="sym">))</span>
                               <span class="sym">(</span>s <span class="sym">(</span>substring <span class="sym">(</span>vector<span class="sym">-</span>ref buffer start<span class="sym">-</span>block<span class="sym">)</span> start<span class="sym">-</span>offset<span class="sym">)))</span>
                      <span class="sym">(</span><span class="kwa">cond</span>
                        <span class="sym">((</span>fx<span class="sym">&gt;=</span> i n<span class="sym">)</span>
                          <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>fx<span class="sym">&gt;=</span> i next<span class="sym">-</span>entry<span class="sym">)</span>
                            <span class="sym">(</span>let <span class="sym">((</span>spill<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> spill<span class="sym">-</span>buffer<span class="sym">)))</span>
                              <span class="sym">(</span><span class="kwa">cond</span>
                                <span class="sym">((</span>zero? spill<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span> s<span class="sym">)</span>
                                <span class="sym">((</span>fx<span class="sym">&lt;</span> spill<span class="sym">-</span><span class="kwa">length last</span><span class="sym">-</span>block<span class="sym">-</span><span class="kwa">length</span><span class="sym">) (</span>string<span class="sym">-</span><span class="kwa">append</span> s spill<span class="sym">-</span>buffer<span class="sym">))</span>
                                <span class="sym">(</span>else <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> s <span class="sym">(</span>substring spill<span class="sym">-</span>buffer <span class="num">0</span> <span class="kwa">last</span><span class="sym">-</span>block<span class="sym">-</span><span class="kwa">length</span><span class="sym">)) )))</span>
                          <span class="slc">; else</span>
                            <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> s <span class="sym">(</span>substring <span class="sym">(</span>vector<span class="sym">-</span>ref buffer i<span class="sym">)</span> <span class="num">0</span> <span class="kwa">last</span><span class="sym">-</span>block<span class="sym">-</span><span class="kwa">length</span><span class="sym">)) ))</span>
                        <span class="sym">(</span>else
                          <span class="sym">(</span>loop <span class="sym">(</span>add1 i<span class="sym">) (</span>string<span class="sym">-</span><span class="kwa">append</span> s <span class="sym">(</span>substring <span class="sym">(</span>vector<span class="sym">-</span>ref buffer i<span class="sym">)</span> <span class="num">0</span> blocksize<span class="sym">) ))) ))) )) )) )))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>sb<span class="sym">-</span><span class="kwa">length</span>
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
        <span class="sym">(</span>fx<span class="sym">+ (</span>fx<span class="sym">*</span> blocksize next<span class="sym">-</span>entry<span class="sym">) (</span>string<span class="sym">-</span><span class="kwa">length</span> spill<span class="sym">-</span>buffer<span class="sym">)))) )</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>op<span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">cond</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="sym">'</span>free<span class="sym">)</span> sb<span class="sym">-</span>free<span class="sym">)</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="sym">'</span><span class="kwa">append</span><span class="sym">!)</span> sb<span class="sym">-</span><span class="kwa">append</span><span class="sym">!)</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="sym">'</span>slice<span class="sym">)</span> sb<span class="sym">-</span>slice<span class="sym">)</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="sym">'</span><span class="kwa">length</span><span class="sym">)</span> sb<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
        <span class="sym">(</span>else <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span>display <span class="str">&quot;*** make-stringbuffer:invalid operation ***</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">))))) ))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>stringbuffer<span class="sym">-</span><span class="kwa">append</span><span class="sym">!</span> sb value<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">(</span>sb <span class="sym">'</span><span class="kwa">append</span><span class="sym">!) (</span><span class="kwa">list</span> value<span class="sym">)))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define <span class="sym">(</span>stringbuffer<span class="sym">-</span>slice sb i <span class="kwa">length</span><span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">(</span>sb <span class="sym">'</span>slice<span class="sym">) (</span><span class="kwa">list</span> i <span class="kwa">length</span><span class="sym">)))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define <span class="sym">(</span>stringbuffer<span class="sym">-</span><span class="kwa">length</span> sb<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">(</span>sb <span class="sym">'</span><span class="kwa">length</span><span class="sym">) '()))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>knucleotide #<span class="sym">!</span>optional <span class="sym">(</span>blocksize #e4096<span class="sym">))</span>
  <span class="sym">(</span>let<span class="sym">*</span>

    <span class="slc">; -------------</span>

    <span class="sym">((</span><span class="kwa">load</span><span class="sym">-</span>sequence
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
        <span class="sym">(</span>let <span class="sym">((</span>sb <span class="sym">(</span>make<span class="sym">-</span>stringbuffer blocksize<span class="sym">)))</span>
          <span class="sym">(</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
            <span class="sym">(</span><span class="kwa">cond</span>
              <span class="sym">((</span><span class="kwa">and</span>
                <span class="sym">(</span>char<span class="sym">=</span>? <span class="sym">(</span>string<span class="sym">-</span>ref <span class="kwa">line</span> <span class="num">0</span><span class="sym">)</span> #\&gt;<span class="sym">)</span>
                <span class="sym">(</span>string<span class="sym">=</span>? <span class="sym">(</span>substring <span class="kwa">line</span> <span class="num">0 6</span><span class="sym">)</span> <span class="str">&quot;&gt;THREE&quot;</span><span class="sym">)) '())</span>
              <span class="sym">(</span>else
                <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)) )))</span>
          <span class="sym">(</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
            <span class="sym">(</span><span class="kwa">cond</span>
              <span class="sym">((</span>eof<span class="sym">-</span>object? <span class="kwa">line</span><span class="sym">) '())</span>
              <span class="sym">((</span>char<span class="sym">=</span>? <span class="sym">(</span>string<span class="sym">-</span>ref <span class="kwa">line</span> <span class="num">0</span><span class="sym">)</span> #\&gt;<span class="sym">) '())</span>
              <span class="sym">((</span>char<span class="sym">=</span>? <span class="sym">(</span>string<span class="sym">-</span>ref <span class="kwa">line</span> <span class="num">0</span><span class="sym">)</span> #\;<span class="sym">) (</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
              <span class="sym">(</span>else
                <span class="sym">(</span>string<span class="sym">-</span>upcase<span class="sym">!</span> <span class="kwa">line</span><span class="sym">)</span>
                <span class="sym">(</span>stringbuffer<span class="sym">-</span><span class="kwa">append</span><span class="sym">!</span> sb <span class="kwa">line</span><span class="sym">)</span>
                <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)) )))</span>
          sb<span class="sym">)))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>sequence <span class="sym">(</span><span class="kwa">load</span><span class="sym">-</span>sequence<span class="sym">))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>generate<span class="sym">-</span>counts
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
        <span class="sym">(</span>let <span class="sym">((</span>count<span class="sym">-</span>table <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table<span class="sym">))</span>
              <span class="sym">(</span><span class="kwa">last</span><span class="sym">-</span>idx <span class="sym">(</span>add1 <span class="sym">(</span>fx<span class="sym">- (</span>stringbuffer<span class="sym">-</span><span class="kwa">length</span> sequence<span class="sym">)</span> fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)) ))</span>
          <span class="sym">(</span>let loop<span class="sym">-</span>i <span class="sym">((</span>i #e0<span class="sym">))</span>
            <span class="sym">(</span><span class="kwa">cond</span>
              <span class="sym">((</span>fx<span class="sym">&gt;=</span> i fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">) '())</span>
              <span class="sym">(</span>else
                <span class="sym">(</span>let loop<span class="sym">-</span>j <span class="sym">((</span>j i<span class="sym">) (</span>key <span class="sym">(</span>stringbuffer<span class="sym">-</span>slice sequence i fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)))</span>
                  <span class="sym">(</span><span class="kwa">cond</span>
                    <span class="sym">((</span>fx<span class="sym">&gt;=</span> j <span class="kwa">last</span><span class="sym">-</span>idx<span class="sym">) '())</span>
                    <span class="sym">(</span>else
                      <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> count<span class="sym">-</span>table key
                        <span class="sym">(</span>add1 <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>ref<span class="sym">/</span>default count<span class="sym">-</span>table key #e0<span class="sym">)))</span>
                      <span class="sym">(</span>loop<span class="sym">-</span>j <span class="sym">(</span>fx<span class="sym">+</span> j fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
                              <span class="sym">(</span>stringbuffer<span class="sym">-</span>slice
                                sequence <span class="sym">(</span>fx<span class="sym">+</span> j fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span> fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)) )))</span>
                <span class="sym">(</span>loop<span class="sym">-</span>i <span class="sym">(</span>add1 i<span class="sym">)))))</span>
          count<span class="sym">-</span>table<span class="sym">)))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>frequencies
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
        <span class="sym">(</span>let<span class="sym">* ((</span>count<span class="sym">-</span>table <span class="sym">(</span>generate<span class="sym">-</span>counts fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">))</span>
               <span class="sym">(</span>count<span class="sym">-</span>sum
                 <span class="sym">(</span>exact<span class="sym">-&gt;</span>inexact
                   <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>fold
                     count<span class="sym">-</span>table
                       <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>key value accum<span class="sym">) (</span>fx<span class="sym">+</span> accum value<span class="sym">))</span> #e0<span class="sym">)))</span>
               <span class="sym">(</span>freq<span class="sym">-</span><span class="kwa">list</span>
                 <span class="sym">(</span>map
                   <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>pair<span class="sym">)</span>
                     <span class="sym">(</span><span class="kwa">cons</span>
                       <span class="sym">(</span><span class="kwa">car</span> pair<span class="sym">)</span>
                       <span class="sym">(</span>fp<span class="sym">*</span> #i100 <span class="sym">(</span>fp<span class="sym">/ (</span>exact<span class="sym">-&gt;</span>inexact <span class="sym">(</span><span class="kwa">cdr</span> pair<span class="sym">))</span> count<span class="sym">-</span>sum<span class="sym">))))</span>
                   <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-&gt;</span>alist count<span class="sym">-</span>table<span class="sym">)))</span>
               <span class="sym">(</span>sorted<span class="sym">-</span>freq<span class="sym">-</span><span class="kwa">list</span>
                 <span class="sym">(</span>sort
                   freq<span class="sym">-</span><span class="kwa">list</span>
                   <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x y<span class="sym">)</span>
                     <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>fp<span class="sym">= (</span><span class="kwa">cdr</span> x<span class="sym">) (</span><span class="kwa">cdr</span> y<span class="sym">))</span>
                       <span class="sym">(</span>string<span class="sym">-</span>ci<span class="sym">&gt;</span>? <span class="sym">(</span><span class="kwa">car</span> x<span class="sym">) (</span><span class="kwa">car</span> y<span class="sym">))</span>
                     <span class="slc">; else</span>
                       <span class="sym">(&gt; (</span><span class="kwa">cdr</span> x<span class="sym">) (</span><span class="kwa">cdr</span> y<span class="sym">)))) )))</span>
          <span class="sym">(</span>for<span class="sym">-</span>each
            <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>pair<span class="sym">) (</span>format #t <span class="str">&quot;~A ~,3F~%&quot;</span> <span class="sym">(</span><span class="kwa">car</span> pair<span class="sym">) (</span><span class="kwa">cdr</span> pair<span class="sym">)))</span>
            sorted<span class="sym">-</span>freq<span class="sym">-</span><span class="kwa">list</span><span class="sym">)</span>
          <span class="sym">(</span>newline<span class="sym">))))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>fragment<span class="sym">)</span>
        <span class="sym">(</span>let<span class="sym">* ((</span>count<span class="sym">-</span>table <span class="sym">(</span>generate<span class="sym">-</span>counts <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> fragment<span class="sym">)))</span>
               <span class="sym">(</span>fragment<span class="sym">-</span>count <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>ref<span class="sym">/</span>default count<span class="sym">-</span>table fragment #e0<span class="sym">) ))</span>
          <span class="sym">(</span><span class="kwa">print</span> fragment<span class="sym">-</span>count <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> fragment<span class="sym">) ))))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>op<span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">cond</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="sym">'</span><span class="kwa">print</span><span class="sym">-</span>frequencies<span class="sym">)</span> <span class="kwa">print</span><span class="sym">-</span>frequencies<span class="sym">)</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="sym">'</span><span class="kwa">print</span><span class="sym">-</span>count<span class="sym">)</span> <span class="kwa">print</span><span class="sym">-</span>count<span class="sym">)</span>
        <span class="sym">(</span>else <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span>display <span class="str">&quot;*** make-knucleotide:invalid operation ***</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">))))) ))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>frequencies knucleotide fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">(</span>knucleotide <span class="sym">'</span><span class="kwa">print</span><span class="sym">-</span>frequencies<span class="sym">) (</span><span class="kwa">list</span> fragment<span class="sym">-</span><span class="kwa">length</span><span class="sym">)))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide fragment<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">(</span>knucleotide <span class="sym">'</span><span class="kwa">print</span><span class="sym">-</span>count<span class="sym">) (</span><span class="kwa">list</span> fragment<span class="sym">)))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>knucleotide <span class="sym">(</span>make<span class="sym">-</span>knucleotide #e16384<span class="sym">)))</span>

    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>frequencies knucleotide <span class="num">1</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>frequencies knucleotide <span class="num">2</span><span class="sym">)</span>

    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide <span class="str">&quot;GGT&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide <span class="str">&quot;GGTA&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide <span class="str">&quot;GGTATT&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>count knucleotide <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">)))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main<span class="sym">)</span>

