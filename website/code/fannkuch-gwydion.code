<span class="kwb">module</span><span class="sym">:</span> fannkuch

<span class="kwa">define constant</span> <span class="kwa">&lt;int-vector&gt;</span> <span class="sym">=</span> <span class="kwd">limited</span><span class="sym">(</span><span class="kwa">&lt;vector&gt;</span><span class="sym">,</span> of<span class="sym">:</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">);</span>

<span class="kwa">define function</span> <span class="kwd">fannkuch</span> <span class="sym">(</span>n <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)</span>
 <span class="sym">=</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">;</span>
  <span class="kwa">let</span> perm <span class="sym">::</span> <span class="kwa">&lt;int-vector&gt;</span> <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;int-vector&gt;</span><span class="sym">,</span>size<span class="sym">:</span> n<span class="sym">,</span>fill<span class="sym">:</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwa">let</span> perm1 <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;int-vector&gt;</span><span class="sym">,</span>size<span class="sym">:</span> n<span class="sym">,</span>fill<span class="sym">:</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwa">let</span> max<span class="sym">-</span>perm <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;int-vector&gt;</span><span class="sym">,</span>size<span class="sym">:</span> n<span class="sym">,</span>fill<span class="sym">:</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwa">let</span> count <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;int-vector&gt;</span><span class="sym">,</span>size<span class="sym">:</span> n<span class="sym">,</span>fill<span class="sym">:</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwa">let</span> max<span class="sym">-</span>flip<span class="sym">-</span>count <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">let</span> m <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">let</span> r <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> n<span class="sym">;</span>

  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> n<span class="sym">)</span>
    perm1<span class="sym">[</span>i<span class="sym">] :=</span> i<span class="sym">;</span>
  <span class="kwa">end for</span><span class="sym">;</span>

  <span class="kwa">block</span><span class="sym">(</span>return<span class="sym">)</span>
    <span class="kwa">while</span> <span class="sym">(</span>#t<span class="sym">)</span>
      <span class="kwa">while</span> <span class="sym">(</span>r ~<span class="sym">=</span> <span class="num">1</span><span class="sym">)</span>
        count<span class="sym">[</span>r <span class="sym">-</span> <span class="num">1</span><span class="sym">] :=</span> r<span class="sym">;</span>
        r <span class="sym">:=</span> r <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">end while</span><span class="sym">;</span>

      <span class="kwa">if</span> <span class="sym">(</span>~ <span class="sym">(</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="num">0</span> <span class="sym">|</span> perm1<span class="sym">[</span>m<span class="sym">] =</span> m<span class="sym">))</span>
        <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> n<span class="sym">)</span>
          perm<span class="sym">[</span>i<span class="sym">] :=</span> perm1<span class="sym">[</span>i<span class="sym">];</span>
        <span class="kwa">end for</span><span class="sym">;</span>
        <span class="kwa">let</span> flip<span class="sym">-</span>count <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="kwa">while</span> <span class="sym">(</span>perm<span class="sym">[</span><span class="num">0</span><span class="sym">]</span> ~<span class="sym">=</span> <span class="num">0</span><span class="sym">)</span>
          <span class="kwa">let</span> k <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
          <span class="kwa">let</span> k2 <span class="sym">= (</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">) /</span> <span class="num">2.0</span><span class="sym">;</span>
          <span class="kwa">for</span><span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> k2<span class="sym">)</span>
            <span class="kwa">let</span> tmp <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">];</span>
            perm<span class="sym">[</span>i<span class="sym">] :=</span> perm<span class="sym">[</span>k <span class="sym">-</span> i<span class="sym">];</span>
            perm<span class="sym">[</span>k <span class="sym">-</span> i<span class="sym">] :=</span> tmp<span class="sym">;</span>
          <span class="kwa">end for</span><span class="sym">;</span>
          flip<span class="sym">-</span>count <span class="sym">:=</span> flip<span class="sym">-</span>count <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">end while</span><span class="sym">;</span>

        <span class="kwa">if</span> <span class="sym">(</span>flip<span class="sym">-</span>count &gt; max<span class="sym">-</span>flip<span class="sym">-</span>count<span class="sym">)</span>
          max<span class="sym">-</span>flip<span class="sym">-</span>count <span class="sym">:=</span> flip<span class="sym">-</span>count<span class="sym">;</span>
          <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> n<span class="sym">)</span>
            max<span class="sym">-</span>perm<span class="sym">[</span>i<span class="sym">] :=</span> perm1<span class="sym">[</span>i<span class="sym">];</span>
          <span class="kwa">end for</span><span class="sym">;</span>
        <span class="kwa">end if</span><span class="sym">;</span>
      <span class="kwa">end if</span><span class="sym">;</span>

      <span class="kwa">block</span><span class="sym">(</span>break<span class="sym">)</span>
        <span class="kwa">while</span><span class="sym">(</span>#t<span class="sym">)</span>
          <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">=</span> n<span class="sym">)</span>
            <span class="kwd">return</span><span class="sym">(</span>max<span class="sym">-</span>flip<span class="sym">-</span>count<span class="sym">);</span>
          <span class="kwa">end if</span><span class="sym">;</span>
          <span class="kwa">let</span> perm0 <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
          <span class="kwa">let</span> i <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
          <span class="kwa">while</span> <span class="sym">(</span>i <span class="kwa">&lt; r)</span>
            <span class="kwa">let</span> j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            perm1<span class="sym">[</span>i<span class="sym">] :=</span> perm1<span class="sym">[</span>j<span class="sym">];</span>
            i <span class="sym">:=</span> j<span class="sym">;</span>
          <span class="kwa">end while</span><span class="sym">;</span>
          perm1<span class="sym">[</span>r<span class="sym">] :=</span> perm0<span class="sym">;</span>
          count<span class="sym">[</span>r<span class="sym">] :=</span> count<span class="sym">[</span>r<span class="sym">] -</span> <span class="num">1</span><span class="sym">;</span>
          <span class="kwa">if</span> <span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">]</span> &gt; <span class="num">0</span><span class="sym">)</span>
            <span class="kwd">break</span><span class="sym">();</span>
          <span class="kwa">end if</span><span class="sym">;</span>
          r <span class="sym">:=</span> r <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">end while</span><span class="sym">;</span>
      <span class="kwa">end block</span><span class="sym">;</span>

    <span class="kwa">end while</span><span class="sym">;</span>
  <span class="kwa">end block</span><span class="sym">;</span>
<span class="kwa">end function</span> fannkuch<span class="sym">;</span>

<span class="kwa">begin</span>
  <span class="kwa">let</span> arg <span class="sym">=</span> application<span class="sym">-</span><span class="kwd">arguments</span><span class="sym">()[</span><span class="num">0</span><span class="sym">]</span>.string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">;</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(%=) = %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> arg<span class="sym">,</span> <span class="kwd">fannkuch</span><span class="sym">(</span>arg<span class="sym">));</span>
<span class="kwa">end</span><span class="sym">;</span>
