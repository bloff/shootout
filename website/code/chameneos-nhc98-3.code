<span class="com">{-# OPTIONS -O2 -funbox-strict-fields #-}</span>
<span class="com">{- The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Chris Kuklewicz, 28 Dec 2005, 2 Jan 2006</span>
<span class="com">   modified by Einar Karttunen, 31 Dec 2005</span>
<span class="com">   further modified by Chris Kuklewicz to use Int# on 6 Jan 2006</span>
<span class="com">   further modified by Simon Marlow using -funbox-strict-fields, and</span>
<span class="com">   avoiding use of explicit unboxed Int#.</span>
<span class="com"></span>
<span class="com">   This entry uses a separate thread to manage the meetings.</span>
<span class="com">-}</span>

<span class="kwa">import</span> Control.Concurrent
<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> System <span class="sym">(</span>getArgs<span class="sym">)</span>

<span class="com">{- Ch : fast unordered channel implementation -}</span>
<span class="kwa">data</span> Ch a <span class="sym">=</span> Ch <span class="sym">!(</span>MVar <span class="sym">[</span>a<span class="sym">]) !(</span>MVar a<span class="sym">)</span>

newCh <span class="sym">=</span> <span class="kwa">do</span> w <span class="sym">&lt;-</span> newMVar <span class="sym">[];</span> r <span class="sym">&lt;-</span> newEmptyMVar<span class="sym">;</span> return <span class="sym">(</span>Ch w r<span class="sym">)</span>

readCh <span class="sym">(</span>Ch w r<span class="sym">) =</span> <span class="kwa">do</span>
  lst <span class="sym">&lt;-</span> takeMVar w
  <span class="kwa">case</span> lst <span class="kwa">of</span> <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) -&gt;</span> <span class="kwa">do</span> putMVar w xs<span class="sym">;</span> return x
              <span class="sym">[]     -&gt;</span> <span class="kwa">do</span> putMVar w <span class="sym">[];</span> takeMVar r

writeCh <span class="sym">(</span>Ch w r<span class="sym">)</span> x <span class="sym">=</span> <span class="kwa">do</span>
  ok <span class="sym">&lt;-</span> tryPutMVar r x <span class="slc">-- opportunistic, helps for this problem</span>
  unless ok $ <span class="kwa">do</span>
    lst <span class="sym">&lt;-</span> takeMVar w
    ok <span class="sym">&lt;-</span> tryPutMVar r x  <span class="slc">-- safe inside take/put</span>
    putMVar w $<span class="sym">!</span> if ok <span class="kwa">then</span> lst <span class="kwa">else</span> <span class="sym">(</span>x<span class="sym">:</span>lst<span class="sym">)</span>

<span class="kwa">data</span> Element <span class="sym">=</span> E <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!(</span>MVar <span class="kwb">Int</span><span class="sym">)</span>

red <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> yellow <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> blue <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> faded <span class="sym">=</span> <span class="num">3</span>

complement <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span>
complement a b <span class="sym">|</span> a <span class="sym">==</span> b    <span class="sym">=</span> a
               <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="num">3</span> <span class="sym">-</span> a <span class="sym">-</span> b

main <span class="sym">=</span> <span class="kwa">do</span>
  args <span class="sym">&lt;-</span> getArgs
  goMeet <span class="sym">&lt;-</span> newCh
  <span class="kwa">let</span> meetings <span class="sym">=</span> if null args <span class="kwa">then</span> <span class="sym">(</span><span class="num">1000000</span><span class="sym">::</span><span class="kwb">Int</span><span class="sym">)</span> <span class="kwa">else</span> <span class="sym">(</span>read . head<span class="sym">)</span> args

      meetingPlace <span class="sym">=</span> replicateM_ meetings match <span class="sym">&gt;&gt;</span> fade
        <span class="kwa">where</span> match <span class="sym">=</span> <span class="kwa">do</span> E color1 pobox1 <span class="sym">&lt;-</span> readCh goMeet
                         E color2 pobox2 <span class="sym">&lt;-</span> readCh goMeet
                         putMVar pobox1 color2
                         putMVar pobox2 color1
              fade <span class="sym">=</span> <span class="kwa">do</span> E _ pobox <span class="sym">&lt;-</span> readCh goMeet
                        putMVar pobox faded
                        fade

      spawn <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">(</span>MVar <span class="kwb">Int</span><span class="sym">)</span>
      spawn startingColor <span class="sym">=</span> <span class="kwa">do</span>
        metVar <span class="sym">&lt;-</span> newEmptyMVar
        pobox  <span class="sym">&lt;-</span> newEmptyMVar
        <span class="kwa">let</span> creature havemet color <span class="sym">=</span> <span class="kwa">do</span>
                havemet `seq` color `seq` return <span class="sym">()</span>
                writeCh goMeet <span class="sym">(</span>E color pobox<span class="sym">)</span>
                other <span class="sym">&lt;-</span> takeMVar pobox
                if other <span class="sym">==</span> faded
                   <span class="kwa">then</span> putMVar metVar havemet
                   <span class="kwa">else</span> creature <span class="sym">(</span>havemet<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>complement color other<span class="sym">)</span>
        forkIO $ creature <span class="num">0</span> startingColor
        return metVar

  forkIO meetingPlace
  metVars <span class="sym">&lt;-</span> mapM spawn <span class="sym">[</span>blue<span class="sym">,</span>red<span class="sym">,</span>yellow<span class="sym">,</span>blue<span class="sym">]</span>
  total <span class="sym">&lt;-</span> liftM sum $ mapM takeMVar metVars
  print total
