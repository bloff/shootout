<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">.</span>Specialized<span class="sym">;

</span><span class="kwc">class</span> revcomp
<span class="sym">{
</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){
</span>      InitializeComplements<span class="sym">();

</span>      StringBuilder builder <span class="sym">=</span> <span class="kwa">new</span> StringBuilder<span class="sym">();
</span>      String line<span class="sym">,</span> desc <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;

</span>      <span class="kwa">using</span> <span class="sym">(</span>StreamReader s <span class="sym">=</span> <span class="kwa">new</span> StreamReader<span class="sym">(</span>Console<span class="sym">.</span>OpenStandardInput<span class="sym">())){
</span>         <span class="kwa">using</span> <span class="sym">(</span>StreamWriter w <span class="sym">=</span> <span class="kwa">new</span> StreamWriter<span class="sym">(</span>Console<span class="sym">.</span>OpenStandardOutput<span class="sym">())){
</span>            <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> s<span class="sym">.</span>ReadLine<span class="sym">()) !=</span> null<span class="sym">) {
</span>               <span class="kwb">char</span> c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>               <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">){
</span>                  <span class="kwa">if</span> <span class="sym">(</span>desc<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){
</span>                     WriteReverseFasta<span class="sym">(</span>desc<span class="sym">,</span> Complement<span class="sym">(</span>builder<span class="sym">),</span> w<span class="sym">);
</span>                     builder<span class="sym">.</span>Length <span class="sym">=</span> <span class="num">0</span><span class="sym">;
                  }
</span>                  desc <span class="sym">=</span> line<span class="sym">;
               }
</span>               <span class="kwa">else if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">){
</span>                  builder<span class="sym">.</span>Append<span class="sym">(</span>line<span class="sym">.</span>ToUpper<span class="sym">());
               }
            }
</span>            <span class="kwa">if</span> <span class="sym">(</span>desc<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){
</span>               WriteReverseFasta<span class="sym">(</span>desc<span class="sym">,</span> Complement<span class="sym">(</span>builder<span class="sym">),</span> w<span class="sym">);
            }
         }
      }
   }


</span>   <span class="kwb">static</span> ListDictionary iubComplement <span class="sym">=</span> <span class="kwa">new</span> ListDictionary<span class="sym">();

</span>   <span class="kwb">static void</span> InitializeComplements<span class="sym">(){
</span>      iubComplement<span class="sym">[</span><span class="str">'A'</span><span class="sym">] =</span> <span class="str">'T'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'B'</span><span class="sym">] =</span> <span class="str">'V'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'C'</span><span class="sym">] =</span> <span class="str">'G'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'D'</span><span class="sym">] =</span> <span class="str">'H'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'G'</span><span class="sym">] =</span> <span class="str">'C'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'H'</span><span class="sym">] =</span> <span class="str">'D'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'K'</span><span class="sym">] =</span> <span class="str">'M'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'M'</span><span class="sym">] =</span> <span class="str">'K'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'R'</span><span class="sym">] =</span> <span class="str">'Y'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'T'</span><span class="sym">] =</span> <span class="str">'A'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'V'</span><span class="sym">] =</span> <span class="str">'B'</span><span class="sym">;
</span>      iubComplement<span class="sym">[</span><span class="str">'Y'</span><span class="sym">] =</span> <span class="str">'R'</span><span class="sym">;
   }

</span>   <span class="kwb">static</span> StringBuilder Complement<span class="sym">(</span>StringBuilder b<span class="sym">) {
</span>      object c<span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> b<span class="sym">.</span>Length<span class="sym">;</span> i<span class="sym">++)
</span>         <span class="kwa">if</span> <span class="sym">((</span>c <span class="sym">=</span> iubComplement<span class="sym">[</span>b<span class="sym">[</span>i<span class="sym">]]) !=</span> null<span class="sym">)</span> b<span class="sym">[</span>i<span class="sym">] = (</span><span class="kwb">char</span><span class="sym">)</span>c<span class="sym">;
</span>      <span class="kwa">return</span> b<span class="sym">;
   }


</span>   <span class="kwb">static void</span> WriteReverseFasta<span class="sym">(</span>String desc<span class="sym">,</span> StringBuilder b<span class="sym">,</span> StreamWriter s<span class="sym">) {
</span>      <span class="kwb">const int</span> LineLength <span class="sym">=</span> <span class="num">60</span><span class="sym">;
</span>      s<span class="sym">.</span>WriteLine<span class="sym">(</span>desc<span class="sym">);

</span>      <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> m <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n <span class="sym">=</span> b<span class="sym">.</span>Length<span class="sym">;
</span>      <span class="kwb">int</span> j <span class="sym">=</span> n<span class="num">-1</span><span class="sym">;
</span>      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;=</span> n<span class="sym">){
</span>         m <span class="sym">+=</span> LineLength<span class="sym">;
</span>         <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> m<span class="sym">)</span> m <span class="sym">=</span> n<span class="sym">;
</span>         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;=</span> m<span class="sym">){
</span>            s<span class="sym">.</span>Write<span class="sym">(</span>b<span class="sym">[</span>j<span class="sym">--]);
</span>            i<span class="sym">++;
         }
</span>         s<span class="sym">.</span>WriteLine<span class="sym">();
      }
   }

}
</span>
