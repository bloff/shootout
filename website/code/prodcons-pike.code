<span class="dir">#!/usr/bin/pike
</span><span class="slc">// -*- mode: pike -*-
</span><span class="slc">// $Id: prodcons-pike.code,v 1.6 2005-05-17 05:20:32 bfulgham Exp $
</span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span>
inherit Thread.Condition<span class="sym">:</span> access<span class="sym">;
</span>inherit Thread.Mutex<span class="sym">:</span> mutex<span class="sym">;
</span><span class="kwb">int</span> data<span class="sym">,</span> consumed<span class="sym">,</span> produced<span class="sym">,</span> count<span class="sym">;

</span><span class="kwb">void</span> producer<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>    for <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	<span class="kwb">object</span> mtx <span class="sym">=</span> mutex<span class="sym">::</span>lock<span class="sym">();
</span>	while <span class="sym">(</span>count <span class="sym">!=</span> <span class="num">0</span><span class="sym">)</span> access<span class="sym">::</span>wait<span class="sym">(</span>mtx<span class="sym">);
</span>	data <span class="sym">=</span> i<span class="sym">;
</span>	count <span class="sym">+=</span> <span class="num">1</span><span class="sym">;
</span>	<span class="kwa">destruct</span><span class="sym">(</span>mtx<span class="sym">);
</span>	access<span class="sym">::</span><span class="kwa">signal</span><span class="sym">();
</span>	produced <span class="sym">+=</span> <span class="num">1</span><span class="sym">;
    }
}

</span><span class="kwb">void</span> consumer<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>    while <span class="sym">(</span><span class="num">1</span><span class="sym">) {
</span>	<span class="kwb">object</span> mtx <span class="sym">=</span> mutex<span class="sym">::</span>lock<span class="sym">();
</span>	while <span class="sym">(</span>count <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> access<span class="sym">::</span>wait<span class="sym">(</span>mtx<span class="sym">);
</span>	<span class="kwb">int</span> i <span class="sym">=</span> data<span class="sym">;
</span>	count <span class="sym">-=</span> <span class="num">1</span><span class="sym">;
</span>	access<span class="sym">::</span><span class="kwa">signal</span><span class="sym">();
</span>	<span class="kwa">destruct</span><span class="sym">(</span>mtx<span class="sym">);
</span>	consumed <span class="sym">+=</span> <span class="num">1</span><span class="sym">;
</span>	if <span class="sym">(</span>i <span class="sym">==</span> n<span class="sym">)</span> break<span class="sym">;
    }
}

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">) {
</span>    <span class="kwb">int</span> n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">];
</span>    if <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>    data <span class="sym">=</span> consumed <span class="sym">=</span> produced <span class="sym">=</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwa">thread_create</span><span class="sym">(</span>producer<span class="sym">,</span> n<span class="sym">);
</span>    consumer<span class="sym">(</span>n<span class="sym">);
</span>    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> produced<span class="sym">,</span> consumed<span class="sym">);
}</span>
