<span class="com">/* The Computer Language Shootout Benchmarks
   http://shootout.alioth.debian.org/

   contributed by Kevin Carson
   compile: gcc -O4 -o binarytrees binarytrees.c -lm
*/</span>

<span class="dir">#include &lt;malloc.h&gt;
</span><span class="dir">#include &lt;math.h&gt;
</span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> tn <span class="sym">{
</span>    <span class="kwb">struct</span> tn<span class="sym">*</span>    left<span class="sym">;
</span>    <span class="kwb">struct</span> tn<span class="sym">*</span>    right<span class="sym">;
</span>    <span class="kwb">long</span>          item<span class="sym">;
}</span> treeNode<span class="sym">;


</span>treeNode<span class="sym">*</span> NewTreeNode<span class="sym">(</span>treeNode<span class="sym">*</span> left<span class="sym">,</span> treeNode<span class="sym">*</span> right<span class="sym">,</span> <span class="kwb">long</span> item<span class="sym">)
{
</span>    treeNode<span class="sym">*</span>    <span class="kwa">new</span><span class="sym">;

</span>    <span class="kwa">new</span> <span class="sym">= (</span>treeNode<span class="sym">*)</span>malloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>treeNode<span class="sym">));

</span>    <span class="kwa">new</span><span class="sym">-&gt;</span>left <span class="sym">=</span> left<span class="sym">;
</span>    <span class="kwa">new</span><span class="sym">-&gt;</span>right <span class="sym">=</span> right<span class="sym">;
</span>    <span class="kwa">new</span><span class="sym">-&gt;</span>item <span class="sym">=</span> item<span class="sym">;

</span>    <span class="kwa">return new</span><span class="sym">;
}</span> <span class="com">/* NewTreeNode() */</span>


<span class="kwb">long</span> ItemCheck<span class="sym">(</span>treeNode<span class="sym">*</span> tree<span class="sym">)
{
</span>    <span class="kwa">if</span> <span class="sym">(</span>tree<span class="sym">-&gt;</span>left <span class="sym">==</span> NULL<span class="sym">)
</span>        <span class="kwa">return</span> tree<span class="sym">-&gt;</span>item<span class="sym">;
</span>    <span class="kwa">else
        return</span> tree<span class="sym">-&gt;</span>item <span class="sym">+</span> ItemCheck<span class="sym">(</span>tree<span class="sym">-&gt;</span>left<span class="sym">) -</span> ItemCheck<span class="sym">(</span>tree<span class="sym">-&gt;</span>right<span class="sym">);
}</span> <span class="com">/* ItemCheck() */</span>


treeNode<span class="sym">*</span> BottomUpTree<span class="sym">(</span><span class="kwb">long</span> item<span class="sym">,</span> <span class="kwb">unsigned</span> depth<span class="sym">)
{
</span>    <span class="kwa">if</span> <span class="sym">(</span>depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)
</span>        <span class="kwa">return</span> NewTreeNode
        <span class="sym">(
</span>            BottomUpTree<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item <span class="num">- 1</span><span class="sym">,</span> depth <span class="num">- 1</span><span class="sym">),
</span>            BottomUpTree<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item<span class="sym">,</span> depth <span class="num">- 1</span><span class="sym">),
</span>            item
        <span class="sym">);
</span>    <span class="kwa">else
        return</span> NewTreeNode<span class="sym">(</span>NULL<span class="sym">,</span> NULL<span class="sym">,</span> item<span class="sym">);
}</span> <span class="com">/* BottomUpTree() */</span>


<span class="kwb">void</span> DeleteTree<span class="sym">(</span>treeNode<span class="sym">*</span> tree<span class="sym">)
{
</span>    <span class="kwa">if</span> <span class="sym">(</span>tree<span class="sym">-&gt;</span>left <span class="sym">!=</span> NULL<span class="sym">)
    {
</span>        DeleteTree<span class="sym">(</span>tree<span class="sym">-&gt;</span>left<span class="sym">);
</span>        DeleteTree<span class="sym">(</span>tree<span class="sym">-&gt;</span>right<span class="sym">);
    }

</span>    free<span class="sym">(</span>tree<span class="sym">);
}</span> <span class="com">/* DeleteTree() */</span>


<span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[])
{
</span>    <span class="kwb">unsigned</span>   N<span class="sym">,</span> depth<span class="sym">,</span> minDepth<span class="sym">,</span> maxDepth<span class="sym">,</span> stretchDepth<span class="sym">;
</span>    treeNode   <span class="sym">*</span>stretchTree<span class="sym">, *</span>longLivedTree<span class="sym">, *</span>tempTree<span class="sym">;

</span>    N <span class="sym">=</span> atol<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);

</span>    minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;

</span>    <span class="kwa">if</span> <span class="sym">((</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">) &gt;</span> N<span class="sym">)
</span>        maxDepth <span class="sym">=</span> minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">;
</span>    <span class="kwa">else
</span>        maxDepth <span class="sym">=</span> N<span class="sym">;

</span>    stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;

</span>    stretchTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretchDepth<span class="sym">);
</span>    printf
    <span class="sym">(
</span>        <span class="str">&quot;stretch tree of depth %u</span><span class="esc">\t  </span>  <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span>        stretchDepth<span class="sym">,
</span>        ItemCheck<span class="sym">(</span>stretchTree<span class="sym">)
    );

</span>    DeleteTree<span class="sym">(</span>stretchTree<span class="sym">);

</span>    longLivedTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth<span class="sym">);

</span>    <span class="kwa">for</span> <span class="sym">(</span>depth <span class="sym">=</span> minDepth<span class="sym">;</span> depth <span class="sym">&lt;=</span> maxDepth<span class="sym">;</span> depth <span class="sym">+=</span> <span class="num">2</span><span class="sym">)
    {
</span>        <span class="kwb">long</span>    i<span class="sym">,</span> iterations<span class="sym">,</span> check<span class="sym">;

</span>        iterations <span class="sym">=</span> pow<span class="sym">(</span><span class="num">2</span><span class="sym">,</span> maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);

</span>        check <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>        <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> iterations<span class="sym">;</span> i<span class="sym">++)
        {
</span>            tempTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">);
</span>            check <span class="sym">+=</span> ItemCheck<span class="sym">(</span>tempTree<span class="sym">);
</span>            DeleteTree<span class="sym">(</span>tempTree<span class="sym">);

</span>            tempTree <span class="sym">=</span> BottomUpTree<span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">);
</span>            check <span class="sym">+=</span> ItemCheck<span class="sym">(</span>tempTree<span class="sym">);
</span>            DeleteTree<span class="sym">(</span>tempTree<span class="sym">);
        }</span> <span class="com">/* for(i = 1...) */</span>

        printf
        <span class="sym">(
</span>            <span class="str">&quot;%u</span><span class="esc">\t  </span>  <span class="str">trees of depth %u</span><span class="esc">\t  </span>  <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span>            iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,
</span>            depth<span class="sym">,
</span>            check
        <span class="sym">);
    }</span> <span class="com">/* for(depth = minDepth...) */</span>

    printf
    <span class="sym">(
</span>        <span class="str">&quot;long lived tree of depth %u</span><span class="esc">\t  </span>  <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span>        maxDepth<span class="sym">,
</span>        ItemCheck<span class="sym">(</span>longLivedTree<span class="sym">)
    );

</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span> <span class="com">/* main() */</span>
