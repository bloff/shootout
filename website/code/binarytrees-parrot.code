# Contributed by Joshua Isom
.<span class="kwa">sub</span> itemcheck
	.param pmc node
	$I0 <span class="sym">=</span> exists node<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
	unless $I0 goto final
	.<span class="kwa">local</span> pmc tmp
	tmp <span class="sym">=</span> node<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
	unless_null tmp<span class="sym">,</span> else
	$I0 <span class="sym">=</span> node<span class="sym">[</span><span class="num">2</span><span class="sym">]</span>
	.return<span class="sym">(</span>$I0<span class="sym">)</span>
else<span class="sym">:</span>
	# tmp <span class="sym">=</span> node<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
	$I0 <span class="sym">=</span> itemcheck<span class="sym">(</span>tmp<span class="sym">)</span>
	tmp <span class="sym">=</span> node<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	$I1 <span class="sym">=</span> itemcheck<span class="sym">(</span>tmp<span class="sym">)</span>
	$I0 <span class="sym">-=</span> $I1
	$I1 <span class="sym">=</span> node<span class="sym">[</span><span class="num">2</span><span class="sym">]</span>
	$I0 <span class="sym">+=</span> $I1
final<span class="sym">:</span>
	.return<span class="sym">(</span>$I0<span class="sym">)</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> bottomuptree
	.param <span class="kwa">int</span> item
	.param <span class="kwa">int</span> dep
	.<span class="kwa">local</span> pmc left<span class="sym">,</span> right<span class="sym">,</span> tree
        .<span class="kwa">local int</span> item2
	unless dep <span class="sym">&gt;</span> <span class="num">0</span> goto else
	item2 <span class="sym">=</span> item <span class="sym">*</span> <span class="num">2</span>
	$I0 <span class="sym">=</span> item2 <span class="sym">-</span> <span class="num">1</span>
	<span class="kwa">dec</span> dep
	left <span class="sym">=</span> bottomuptree<span class="sym">(</span>$I0<span class="sym">,</span> dep<span class="sym">)</span>
	right <span class="sym">=</span> bottomuptree<span class="sym">(</span>item2<span class="sym">,</span> dep<span class="sym">)</span>
	goto endif
else<span class="sym">:</span>
	null left
	null right
endif<span class="sym">:</span>
	tree <span class="sym">=</span> new .FixedPMCArray
	tree <span class="sym">=</span> <span class="num">3</span>
	tree<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> left
	tree<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> right
	tree<span class="sym">[</span><span class="num">2</span><span class="sym">] =</span> item
	.return<span class="sym">(</span>tree<span class="sym">)</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> main <span class="sym">:</span>main
	.param pmc argv
	.<span class="kwa">local int</span> N<span class="sym">,</span> dep<span class="sym">,</span> mindepth<span class="sym">,</span> maxdepth<span class="sym">,</span> stretchdepth
	.<span class="kwa">local</span> pmc stretchtree<span class="sym">,</span> longlivedtree<span class="sym">,</span> tmptree
	$S0 <span class="sym">=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	N <span class="sym">=</span> $S0
	mindepth <span class="sym">=</span> <span class="num">4</span>
	unless N <span class="sym">&lt;</span> <span class="num">6</span> goto else
	maxdepth <span class="sym">=</span> mindepth <span class="sym">+</span> <span class="num">2</span>
	goto endif
else<span class="sym">:</span>
	maxdepth <span class="sym">=</span> N
endif<span class="sym">:</span>
	stretchdepth <span class="sym">=</span> maxdepth <span class="sym">+</span> <span class="num">1</span>
	$I0 <span class="sym">=</span> <span class="num">0</span>
	stretchtree <span class="sym">=</span> bottomuptree<span class="sym">(</span>$I0<span class="sym">,</span> stretchdepth<span class="sym">)</span>
	$I0 <span class="sym">=</span> itemcheck<span class="sym">(</span>stretchtree<span class="sym">)</span>

	print <span class="str">&quot;stretch tree of depth &quot;</span>
	print stretchdepth
	print <span class="str">&quot;\t check: &quot;</span>
	print $I0
	print <span class="str">&quot;\n&quot;</span>

	null stretchtree
	$I0 <span class="sym">=</span> <span class="num">0</span>
	longlivedtree <span class="sym">=</span> bottomuptree<span class="sym">(</span>$I0<span class="sym">,</span> maxdepth<span class="sym">)</span>

	dep <span class="sym">=</span> mindepth
beginfor_1<span class="sym">:</span>

	.<span class="kwa">local int</span> i<span class="sym">,</span> iterations<span class="sym">,</span> check

	$N0 <span class="sym">=</span> maxdepth <span class="sym">-</span> dep
	$N0 <span class="sym">+=</span> mindepth
	$N1 <span class="sym">=</span> <span class="num">2</span>
	$N2 <span class="sym">=</span> pow $N1<span class="sym">,</span> $N0
	iterations <span class="sym">=</span> $N2

	check <span class="sym">=</span> <span class="num">0</span>

	i <span class="sym">=</span> <span class="num">1</span>
	beginfor_2<span class="sym">:</span>
       noop

			tmptree <span class="sym">=</span> bottomuptree<span class="sym">(</span>i<span class="sym">,</span> dep<span class="sym">)</span>
			$I0 <span class="sym">=</span> itemcheck<span class="sym">(</span>tmptree<span class="sym">)</span>
			check <span class="sym">+=</span> $I0
			$I0 <span class="sym">=</span> <span class="num">0</span> <span class="sym">-</span> i
			tmptree <span class="sym">=</span> bottomuptree<span class="sym">(</span>$I0<span class="sym">,</span> dep<span class="sym">)</span>
			$I0 <span class="sym">=</span> itemcheck<span class="sym">(</span>tmptree<span class="sym">)</span>
			check <span class="sym">+=</span> $I0

	<span class="kwa">inc</span> i
	if i <span class="sym">&lt;=</span> iterations goto beginfor_2
	$I0 <span class="sym">=</span> iterations <span class="sym">*</span> <span class="num">2</span>
	print $I0
	print <span class="str">&quot;\t trees of depth &quot;</span>
	print dep
	print <span class="str">&quot;\t check: &quot;</span>
	print check
	print <span class="str">&quot;\n&quot;</span>


	dep <span class="sym">+=</span> <span class="num">2</span>
	if dep <span class="sym">&lt;=</span> maxdepth goto beginfor_1

	$I0 <span class="sym">=</span> itemcheck<span class="sym">(</span>longlivedtree<span class="sym">)</span>
	print <span class="str">&quot;long lived tree of depth &quot;</span>
	print maxdepth
	print <span class="str">&quot;\t check: &quot;</span>
	print $I0
	print <span class="str">&quot;\n&quot;</span>

.<span class="kwa">end</span>

