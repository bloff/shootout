<span class="com">/* -*- mode: c -*-
 * $Id: echo-icc.code,v 1.8 2005-09-25 23:29:39 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="dir">#include &lt;signal.h&gt;
</span><span class="dir">#include &lt;errno.h&gt;
</span><span class="dir">#include &lt;sys/types.h&gt;
</span><span class="dir">#include &lt;sys/socket.h&gt;
</span><span class="dir">#include &lt;sys/wait.h&gt;
</span><span class="dir">#include &lt;netinet/in.h&gt;
</span>

<span class="kwc">typedef</span> <span class="kwb">int</span> <span class="sym">(*</span>SOCKACTION_P<span class="sym">)(</span><span class="kwb">int</span><span class="sym">,</span><span class="kwb">struct</span> sockaddr <span class="sym">*,</span>socklen_t<span class="sym">);
</span><span class="dir">#define DATA</span> <span class="dstr">&quot;Hello there sailor</span><span class="esc">\n</span><span class="dstr">&quot;</span><span class="dir">
</span>
<span class="kwb">void</span> myabort <span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>m<span class="sym">) {</span> fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">);</span> exit<span class="sym">(</span><span class="num">1</span><span class="sym">); }
</span><span class="kwb">void</span> sysabort <span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>m<span class="sym">) {</span> perror<span class="sym">(</span>m<span class="sym">);</span> exit<span class="sym">(</span><span class="num">1</span><span class="sym">); }

</span><span class="kwb">int</span> sigchld <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwb">void</span> reaper <span class="sym">(</span><span class="kwb">int</span> sig<span class="sym">) {</span> sigchld <span class="sym">=</span> <span class="num">1</span><span class="sym">; }

</span><span class="kwb">int
</span>genericSock<span class="sym">(</span><span class="kwb">int</span> port<span class="sym">,</span>SOCKACTION_P action<span class="sym">,</span><span class="kwb">char</span> <span class="sym">*</span>actionExceptionText<span class="sym">) {
</span>    <span class="kwb">int</span> ss<span class="sym">,</span> optval <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwb">struct</span> sockaddr_in sin<span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">((</span>ss <span class="sym">=</span> socket<span class="sym">(</span>PF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> <span class="num">0</span><span class="sym">)) == -</span><span class="num">1</span><span class="sym">)
</span>	sysabort<span class="sym">(</span><span class="str">&quot;socket&quot;</span><span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(</span>setsockopt<span class="sym">(</span>ss<span class="sym">,</span> SOL_SOCKET<span class="sym">,</span> SO_REUSEADDR<span class="sym">, &amp;</span>optval<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>optval<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)
</span>	sysabort<span class="sym">(</span><span class="str">&quot;setsockopt&quot;</span><span class="sym">);
</span>    memset<span class="sym">(&amp;</span>sin<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="kwa">sizeof</span><span class="sym">(</span>sin<span class="sym">));
</span>    sin<span class="sym">.</span>sin_family <span class="sym">=</span> AF_INET<span class="sym">;
</span>    sin<span class="sym">.</span>sin_addr<span class="sym">.</span>s_addr <span class="sym">=</span> htonl<span class="sym">(</span>INADDR_LOOPBACK<span class="sym">);
</span>    sin<span class="sym">.</span>sin_port <span class="sym">=</span> port<span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span>action<span class="sym">(</span>ss<span class="sym">, (</span><span class="kwb">struct</span> sockaddr <span class="sym">*)&amp;</span>sin<span class="sym">,(</span>socklen_t<span class="sym">)</span><span class="kwa">sizeof</span><span class="sym">(</span>sin<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)
</span>	sysabort<span class="sym">(</span>actionExceptionText<span class="sym">);

</span>    <span class="kwa">return</span><span class="sym">(</span>ss<span class="sym">);
}

</span><span class="kwb">int
</span>server_sock <span class="sym">() {
</span>    <span class="kwb">int</span> ss <span class="sym">=</span> genericSock<span class="sym">(</span><span class="num">0</span><span class="sym">,(</span>SOCKACTION_P<span class="sym">)</span>bind<span class="sym">,</span><span class="str">&quot;server/bind&quot;</span><span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span>listen<span class="sym">(</span>ss<span class="sym">,</span><span class="num">2</span><span class="sym">),</span>ss<span class="sym">);
}

</span><span class="kwb">int
</span>client_sock <span class="sym">(</span><span class="kwb">int</span> port<span class="sym">) {
</span>    <span class="kwa">return</span><span class="sym">(</span>genericSock<span class="sym">(</span>port<span class="sym">,(</span>SOCKACTION_P<span class="sym">)</span>connect<span class="sym">,</span><span class="str">&quot;client/connect&quot;</span><span class="sym">));
}

</span><span class="kwb">int
</span>get_port <span class="sym">(</span><span class="kwb">int</span> sock<span class="sym">) {
</span>    <span class="kwb">struct</span> sockaddr_in sin<span class="sym">;
</span>    socklen_t slen <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span>sin<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(</span>getsockname<span class="sym">(</span>sock<span class="sym">, (</span><span class="kwb">struct</span> sockaddr <span class="sym">*)&amp;</span>sin<span class="sym">, &amp;</span>slen<span class="sym">) == -</span><span class="num">1</span><span class="sym">)
</span>	sysabort<span class="sym">(</span><span class="str">&quot;server/getsockname&quot;</span><span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span>sin<span class="sym">.</span>sin_port<span class="sym">);
}

</span><span class="kwb">void
</span>echo_client <span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">int</span> port<span class="sym">) {
</span>    <span class="kwb">int</span> i<span class="sym">,</span> sock<span class="sym">,</span> olen<span class="sym">,</span> len<span class="sym">,</span> nwritten<span class="sym">,</span> nread<span class="sym">;
</span>    <span class="kwb">char</span> <span class="sym">*</span>offset<span class="sym">,</span> obuf<span class="sym">[</span><span class="num">64</span><span class="sym">],</span> ibuf<span class="sym">[</span><span class="num">64</span><span class="sym">];
</span>    <span class="kwb">char</span> <span class="sym">*</span>end <span class="sym">=</span> ibuf <span class="sym">+</span> <span class="kwa">sizeof</span><span class="sym">(</span>ibuf<span class="sym">);

</span>    sock <span class="sym">=</span> client_sock<span class="sym">(</span>port<span class="sym">);
</span>    strcpy<span class="sym">(</span>obuf<span class="sym">,</span> DATA<span class="sym">);
</span>    olen <span class="sym">=</span> strlen<span class="sym">(</span>obuf<span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	len <span class="sym">=</span> olen<span class="sym">;
</span>	offset <span class="sym">=</span> obuf<span class="sym">;
</span>	<span class="kwa">while</span> <span class="sym">(</span>len <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>	    <span class="kwa">if</span> <span class="sym">((</span>nwritten <span class="sym">=</span> write<span class="sym">(</span>sock<span class="sym">,</span> offset<span class="sym">,</span> len<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)
</span>		sysabort<span class="sym">(</span><span class="str">&quot;client/write&quot;</span><span class="sym">);
</span>	    offset <span class="sym">+=</span> nwritten<span class="sym">;
</span>	    len <span class="sym">-=</span> nwritten<span class="sym">;
	}
</span>	offset <span class="sym">=</span> ibuf<span class="sym">;
</span>	<span class="kwa">while</span> <span class="sym">((</span>nread <span class="sym">=</span> read<span class="sym">(</span>sock<span class="sym">,</span> offset<span class="sym">, (</span>end <span class="sym">-</span> offset<span class="sym">))) &gt;</span> <span class="num">0</span><span class="sym">) {
</span>	    offset <span class="sym">+=</span> nread<span class="sym">;
</span>	    <span class="kwa">if</span> <span class="sym">(*(</span>offset<span class="num">-1</span><span class="sym">) ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;
	}
</span>	<span class="kwa">if</span> <span class="sym">(</span>nread <span class="sym">== -</span><span class="num">1</span><span class="sym">)
</span>	    sysabort<span class="sym">(</span><span class="str">&quot;client/read&quot;</span><span class="sym">);
	*</span>offset <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwa">if</span> <span class="sym">((</span>strcmp<span class="sym">(</span>obuf<span class="sym">,</span> ibuf<span class="sym">)) !=</span> <span class="num">0</span><span class="sym">) {
</span>	    <span class="kwb">char</span> mbuf<span class="sym">[</span><span class="num">128</span><span class="sym">];
</span>	    sprintf<span class="sym">(</span>mbuf<span class="sym">,</span> <span class="str">&quot;client:</span> <span class="esc">\&quot;</span><span class="str">%s</span><span class="esc">\&quot; </span> <span class="str">ne</span> <span class="esc">\&quot;</span><span class="str">%s</span><span class="esc">\&quot;</span><span class="str">&quot;</span><span class="sym">,</span> obuf<span class="sym">,</span> ibuf<span class="sym">);
</span>	    myabort<span class="sym">(</span>mbuf<span class="sym">);
	}
    }
</span>    close<span class="sym">(</span>sock<span class="sym">);
}

</span><span class="kwb">void
</span>echo_server <span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>    <span class="kwb">int</span> ssock<span class="sym">,</span> csock<span class="sym">,</span> len<span class="sym">,</span> nwritten<span class="sym">,</span> total_bytes<span class="sym">;
</span>    pid_t pid<span class="sym">;
</span>    <span class="kwb">char</span> buf<span class="sym">[</span><span class="num">64</span><span class="sym">], *</span>offset<span class="sym">;
</span>    <span class="kwb">struct</span> sockaddr_in sin<span class="sym">;
</span>    socklen_t slen <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span>sin<span class="sym">);
</span>    <span class="kwb">int</span> status<span class="sym">;

</span>    ssock <span class="sym">=</span> server_sock<span class="sym">();
</span>    signal<span class="sym">(</span>SIGCHLD<span class="sym">,</span> reaper<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">((</span>pid <span class="sym">=</span> fork<span class="sym">()) == -</span><span class="num">1</span><span class="sym">)
</span>	sysabort<span class="sym">(</span><span class="str">&quot;server/fork&quot;</span><span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(</span>pid<span class="sym">) {
</span>	<span class="com">/* parent is server */</span>
	<span class="kwa">if</span> <span class="sym">((</span>csock <span class="sym">=</span> accept<span class="sym">(</span>ssock<span class="sym">, (</span><span class="kwb">struct</span> sockaddr <span class="sym">*)&amp;</span>sin<span class="sym">, &amp;</span>slen<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)
</span>	    sysabort<span class="sym">(</span><span class="str">&quot;server/accept&quot;</span><span class="sym">);
</span>	total_bytes <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwa">while</span> <span class="sym">((</span>len <span class="sym">=</span> read<span class="sym">(</span>csock<span class="sym">,</span> buf<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>buf<span class="sym">))) &gt;</span> <span class="num">0</span><span class="sym">) {
</span>	    <span class="kwa">if</span> <span class="sym">(</span>sigchld<span class="sym">)</span> myabort<span class="sym">(</span><span class="str">&quot;server/sigchld&quot;</span><span class="sym">);
</span>	    offset <span class="sym">=</span> buf<span class="sym">;
</span>	    total_bytes <span class="sym">+=</span> len<span class="sym">;
</span>	    <span class="kwa">while</span> <span class="sym">(</span>len <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>		<span class="kwa">if</span> <span class="sym">((</span>nwritten <span class="sym">=</span> write<span class="sym">(</span>csock<span class="sym">,</span> offset<span class="sym">,</span> len<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)
</span>		    sysabort<span class="sym">(</span><span class="str">&quot;server/write&quot;</span><span class="sym">);
</span>		offset <span class="sym">+=</span> nwritten<span class="sym">;
</span>		len <span class="sym">-=</span> nwritten<span class="sym">;
	    }
	}
</span>	<span class="kwa">if</span> <span class="sym">(</span>len <span class="sym">== -</span><span class="num">1</span><span class="sym">)
</span>	    sysabort<span class="sym">(</span><span class="str">&quot;server/read&quot;</span><span class="sym">);
</span>	close<span class="sym">(</span>csock<span class="sym">);
</span>	fprintf<span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;server processed %d bytes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> total_bytes<span class="sym">);
    }</span> <span class="kwa">else</span> <span class="sym">{
</span>	<span class="com">/* child is client */</span>
	echo_client<span class="sym">(</span>n<span class="sym">,</span> get_port<span class="sym">(</span>ssock<span class="sym">));
    }
</span>    wait<span class="sym">(&amp;</span>status<span class="sym">);
}

</span><span class="kwb">int
</span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    echo_server<span class="sym">((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}</span>
