<span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; By Ralph Richard Cook
</span><span class="slc">;;; Optimizations by Nicolas Neuss
</span><span class="slc">;;; Includes code from the 'random' benchmark
</span><span class="slc">;;; Credits from the 'random' benchmark:
</span><span class="slc">;;; Chih-Chung Chang contributed better declarations to improve performance
</span><span class="slc">;;; Multi-lisp modifications by Brent Fulgham
</span>
<span class="sym">(</span>defconstant IM     <span class="num">139968</span><span class="sym">)
(</span>defconstant IA       <span class="num">3877</span><span class="sym">)
(</span>defconstant IC     <span class="num">29573</span><span class="sym">)

(</span>defparameter THE_LAST <span class="num">42</span><span class="sym">)

(</span>declaim <span class="sym">(</span>inline gen_random select<span class="sym">-</span>random<span class="sym">))

(</span><span class="kwa">defun</span> gen_random <span class="sym">(</span><span class="kwa">max</span><span class="sym">)
  (</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">30</span><span class="sym">)</span> IM IA IC THE_LAST<span class="sym">))
  (</span>declare <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float max</span><span class="sym">))
  (</span><span class="kwa">setq</span> THE_LAST <span class="sym">(</span>mod <span class="sym">(+ (</span>the <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">31</span><span class="sym">) (*</span> THE_LAST IA<span class="sym">))</span> IC<span class="sym">)</span> IM<span class="sym">))
  (/ (*</span> <span class="kwa">max</span> THE_LAST<span class="sym">)</span> IM<span class="sym">))

(</span>defconstant LINE_LENGTH <span class="num">60</span><span class="sym">)

(</span>defstruct <span class="sym">(</span>freq <span class="sym">(:</span><span class="kwa">type</span> vector<span class="sym">))
  (</span>c #\x <span class="sym">:</span><span class="kwa">type</span> base<span class="sym">-</span>char<span class="sym">)
  (</span>p <span class="num">0.0d0</span> <span class="sym">:</span><span class="kwa">type</span> double<span class="sym">-</span><span class="kwa">float</span><span class="sym">))

(</span>defparameter ALU <span class="sym">(</span>concatenate <span class="str">'string
  &quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;
  &quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;
  &quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;
  &quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;
  &quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;
  &quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;
  &quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;))

(defparameter IUB
  (vector
   (make-freq :c #</span><span class="esc">\a </span> <span class="str">:p 0.27d0)
   (make-freq :c #</span><span class="esc">\c </span> <span class="str">:p 0.12d0)
   (make-freq :c #</span><span class="esc">\g </span> <span class="str">:p 0.12d0)
   (make-freq :c #</span><span class="esc">\t </span> <span class="str">:p 0.27d0)

   (make-freq :c #</span><span class="esc">\B </span> <span class="str">:p 0.02d0)
   (make-freq :c #</span><span class="esc">\D </span> <span class="str">:p 0.02d0)
   (make-freq :c #</span><span class="esc">\H </span> <span class="str">:p 0.02d0)
   (make-freq :c #</span><span class="esc">\K </span> <span class="str">:p 0.02d0)
   (make-freq :c #</span><span class="esc">\M </span> <span class="str">:p 0.02d0)
   (make-freq :c #</span><span class="esc">\N </span> <span class="str">:p 0.02d0)
   (make-freq :c #</span><span class="esc">\R </span> <span class="str">:p 0.02d0)
   (make-freq :c #</span><span class="esc">\S </span> <span class="str">:p 0.02d0)
   (make-freq :c #</span><span class="esc">\V </span> <span class="str">:p 0.02d0)
   (make-freq :c #</span><span class="esc">\W </span> <span class="str">:p 0.02d0)
   (make-freq :c #</span><span class="esc">\Y </span> <span class="str">:p 0.02d0)))

(defparameter HomoSapiens
  (vector
   (make-freq :c #</span><span class="esc">\a </span> <span class="str">:p 0.3029549426680d0)
   (make-freq :c #</span><span class="esc">\c </span> <span class="str">:p 0.1979883004921d0)
   (make-freq :c #</span><span class="esc">\g </span> <span class="str">:p 0.1975473066391d0)
   (make-freq :c #</span><span class="esc">\t </span> <span class="str">:p 0.3015094502008d0)))

(defun make-cumulative (freqs)
  (let ((cp 0.0d0))
    (declare (double-float cp))
    (dotimes (i (length freqs))
      (incf cp (freq-p (aref freqs i)))
      (setf (freq-p (aref freqs i)) cp))))


(defun select-random (freqs len)
  (declare (fixnum len) (simple-vector freqs))
  (let ((r (gen_random 1.0d0)))
    (declare (double-float r))
    (dotimes (i len)
      (when (&lt; r (freq-p (aref freqs i)))
        (return-from select-random (freq-c (aref freqs i)))))
    (freq-c (aref freqs (1- len)))))

(defconstant BUFFER_SIZE 30000)
(defun make-random-fasta (id desc freqs freqs-length n line-length)
  (declare (fixnum freqs-length n line-length))
  (let ((buf (make-string BUFFER_SIZE :element-type '</span>base<span class="sym">-</span>char <span class="sym">:</span>initial<span class="sym">-</span>element #\Space<span class="sym">))
        (</span>index <span class="num">0</span><span class="sym">))
    (</span>declare <span class="sym">(</span>fixnum index<span class="sym">))
    (</span>format t <span class="str">&quot;&gt;~a ~a~%&quot;</span> id desc<span class="sym">)
    (</span>do<span class="sym">* ((</span>chars<span class="sym">-</span>remaining n <span class="sym">(-</span> chars<span class="sym">-</span>remaining current<span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">))
          (</span>current<span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span> <span class="num">0</span><span class="sym">))
         ((&lt;=</span> chars<span class="sym">-</span>remaining <span class="num">0</span><span class="sym">)</span> nil<span class="sym">)
      (</span>declare <span class="sym">(</span>fixnum chars<span class="sym">-</span>remaining current<span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">))
      (</span>setf current<span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span><span class="kwa">min</span> chars<span class="sym">-</span>remaining <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">))
      (</span>when <span class="sym">(&lt; (-</span> BUFFER_SIZE index<span class="sym">)</span> current<span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)
        (</span>write<span class="sym">-</span>sequence buf <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">* :</span>end index<span class="sym">)
        (</span>setf index <span class="num">0</span><span class="sym">))
      (</span>dotimes <span class="sym">(</span>i current<span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)
        (</span>declare <span class="sym">(</span>fixnum i<span class="sym">))
        (</span>setf <span class="sym">(</span>aref buf index<span class="sym">) (</span>select<span class="sym">-</span>random freqs freqs<span class="sym">-</span><span class="kwa">length</span><span class="sym">))
        (</span>incf index<span class="sym">))
      (</span>setf <span class="sym">(</span>aref buf index<span class="sym">)</span> #\Newline<span class="sym">)
      (</span>incf index<span class="sym">))
    (</span>when <span class="sym">(&gt;</span> index <span class="num">0</span><span class="sym">)
      (</span>write<span class="sym">-</span>sequence buf <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">* :</span>end index<span class="sym">))))


(</span><span class="kwa">defun</span> make<span class="sym">-</span><span class="kwa">repeat</span><span class="sym">-</span>fasta <span class="sym">(</span>id desc s n <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)
  (</span>declare <span class="sym">(</span>fixnum n <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">))
  (</span>let <span class="sym">((</span>s<span class="sym">-</span>start <span class="num">0</span><span class="sym">)</span>               <span class="slc">; this won't change
</span>        <span class="sym">(</span>s<span class="sym">-</span>end <span class="sym">(</span><span class="kwa">length</span> s<span class="sym">))</span>        <span class="slc">; this won't change
</span>        <span class="sym">(</span>w<span class="sym">-</span>start <span class="num">0</span><span class="sym">)</span>               <span class="slc">; this will cycle around
</span>        <span class="sym">(</span>w<span class="sym">-</span>end <span class="num">0</span><span class="sym">)</span>                 <span class="slc">; this will cycle around
</span>        <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span> <span class="num">0</span><span class="sym">))</span>  <span class="slc">; line-length or less for the last line
</span>    <span class="sym">(</span>declare <span class="sym">(</span>fixnum s<span class="sym">-</span>start s<span class="sym">-</span>end w<span class="sym">-</span>start w<span class="sym">-</span>end<span class="sym">))
    (</span>format t <span class="str">&quot;&gt;~a ~a~%&quot;</span> id desc<span class="sym">)
    (</span>do <span class="sym">((</span>chars<span class="sym">-</span>remaining n <span class="sym">(-</span> chars<span class="sym">-</span>remaining current<span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)))
        ((&lt;=</span> chars<span class="sym">-</span>remaining <span class="num">0</span><span class="sym">)</span> nil<span class="sym">)
        (</span>setf current<span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span><span class="kwa">min</span> chars<span class="sym">-</span>remaining <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">))
        (</span>setf w<span class="sym">-</span>end <span class="sym">(+</span> w<span class="sym">-</span>start current<span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">))
        (</span>when <span class="sym">(&gt;</span> w<span class="sym">-</span>end s<span class="sym">-</span>end<span class="sym">)
          (</span>decf w<span class="sym">-</span>end s<span class="sym">-</span>end<span class="sym">))
        (</span><span class="kwa">if</span> <span class="sym">(&gt;</span> w<span class="sym">-</span>end w<span class="sym">-</span>start<span class="sym">)
          (</span>write<span class="sym">-</span>sequence s <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">* :</span>start w<span class="sym">-</span>start <span class="sym">:</span>end w<span class="sym">-</span>end<span class="sym">)
          (</span><span class="kwa">progn
</span>            <span class="sym">(</span>write<span class="sym">-</span>sequence s <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">* :</span>start w<span class="sym">-</span>start <span class="sym">:</span>end s<span class="sym">-</span>end<span class="sym">)
            (</span>write<span class="sym">-</span>sequence s <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">* :</span>start s<span class="sym">-</span>start <span class="sym">:</span>end w<span class="sym">-</span>end<span class="sym">)))
        (</span>write<span class="sym">-</span>char #\Newline<span class="sym">)
        (</span>setf w<span class="sym">-</span>start w<span class="sym">-</span>end<span class="sym">))))


(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span>                                         #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*
</span>                                         #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">))))

    (</span>make<span class="sym">-</span>cumulative IUB<span class="sym">)
    (</span>make<span class="sym">-</span>cumulative HomoSapiens<span class="sym">)

    (</span>make<span class="sym">-</span><span class="kwa">repeat</span><span class="sym">-</span>fasta <span class="str">&quot;ONE&quot;</span> <span class="str">&quot;Homo sapiens alu&quot;</span> ALU <span class="sym">(*</span> n <span class="num">2</span><span class="sym">)</span> LINE_LENGTH<span class="sym">)
    (</span>make<span class="sym">-</span>random<span class="sym">-</span>fasta <span class="str">&quot;TWO&quot;</span> <span class="str">&quot;IUB ambiguity codes&quot;</span> IUB <span class="sym">(</span><span class="kwa">length</span> IUB<span class="sym">) (*</span> n <span class="num">3</span><span class="sym">)</span> LINE_LENGTH<span class="sym">)
    (</span>make<span class="sym">-</span>random<span class="sym">-</span>fasta <span class="str">&quot;THREE&quot;</span>  <span class="str">&quot;Homo sapiens frequency&quot;</span> HomoSapiens <span class="sym">(</span><span class="kwa">length</span> HomoSapiens<span class="sym">) (*</span> n <span class="num">5</span><span class="sym">)</span> LINE_LENGTH<span class="sym">)))</span>
