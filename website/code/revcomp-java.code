<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;

</span><span class="kwa">public class</span> revcomp <span class="sym">{

    </span>    <span class="kwa">static final</span> <span class="kwb">char</span> getComp<span class="sym">(</span><span class="kwb">char</span> ch<span class="sym">) {
</span>        <span class="kwa">if</span><span class="sym">(</span>ch <span class="sym">&gt;=</span> <span class="str">'a'</span> <span class="sym">&amp;&amp;</span> ch <span class="sym">&lt;=</span> <span class="str">'z'</span><span class="sym">)
</span>            ch <span class="sym">+=</span> <span class="str">'A'</span> <span class="sym">-</span> <span class="str">'a'</span><span class="sym">;
</span>        <span class="kwa">switch</span><span class="sym">(</span>ch<span class="sym">) {
</span>            <span class="kwa">case</span> <span class="str">'T'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'A'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'A'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'T'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'G'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'C'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'C'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'G'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'V'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'B'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'S'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'S'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'H'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'D'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'R'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'Y'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'W'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'W'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'M'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'K'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'Y'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'R'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'K'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'M'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'B'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'V'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'D'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'H'</span><span class="sym">;
</span>            <span class="kwa">case</span> <span class="str">'U'</span><span class="sym">:</span> <span class="kwa">return</span> <span class="str">'A'</span><span class="sym">;
        }
</span>        <span class="kwa">return</span> ch<span class="sym">;
    }

</span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{

        </span>        <span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));

</span>        <span class="kwc">String</span> header <span class="sym">=</span> in<span class="sym">.</span>readLine <span class="sym">();
</span>        <span class="kwa">while</span> <span class="sym">(</span>header <span class="sym">!=</span> null<span class="sym">) {
</span>            <span class="kwc">StringBuffer</span> sb <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">(</span><span class="num">5</span><span class="sym">*</span><span class="num">1024</span><span class="sym">);

</span>            <span class="slc">// read the sequence into the StringBuffer
</span>            <span class="kwc">String</span> line <span class="sym">=</span> in<span class="sym">.</span>readLine <span class="sym">();
</span>            <span class="kwa">while</span> <span class="sym">(</span>line <span class="sym">!=</span> null <span class="sym">&amp;&amp;</span> line<span class="sym">.</span>charAt <span class="sym">(</span><span class="num">0</span><span class="sym">) !=</span> <span class="str">'&gt;'</span><span class="sym">) {
</span>                sb<span class="sym">.</span>append <span class="sym">(</span>line<span class="sym">).</span>append <span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);
</span>                line <span class="sym">=</span> in<span class="sym">.</span>readLine <span class="sym">();
            }

            </span>            <span class="slc">// reverse StringBuffer + find complements, don't touch '\n'
</span>            <span class="kwb">int</span> from <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> to <span class="sym">=</span> sb<span class="sym">.</span>length <span class="sym">()-</span><span class="num">1</span><span class="sym">;
</span>            <span class="kwa">while</span><span class="sym">(</span>from<span class="sym">&lt;=</span>to<span class="sym">) {

                </span>                <span class="kwb">char</span> fromCh <span class="sym">=</span> sb<span class="sym">.</span>charAt <span class="sym">(</span>from<span class="sym">);
</span>                <span class="kwa">if</span><span class="sym">(</span>fromCh <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">) {
</span>                    from<span class="sym">++;
</span>                    <span class="kwa">continue</span><span class="sym">;
                }

                </span>                <span class="kwb">char</span> toCh   <span class="sym">=</span> sb<span class="sym">.</span>charAt <span class="sym">(</span>to<span class="sym">);
</span>                <span class="kwa">if</span><span class="sym">(</span>toCh <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">) {
</span>                    to<span class="sym">--;
</span>                    <span class="kwa">continue</span><span class="sym">;
                }

                </span>                sb<span class="sym">.</span>setCharAt <span class="sym">(</span>from<span class="sym">++,</span> getComp<span class="sym">(</span>toCh<span class="sym">));
</span>                sb<span class="sym">.</span>setCharAt <span class="sym">(</span>to<span class="sym">--,</span> getComp<span class="sym">(</span>fromCh<span class="sym">));
            }

            </span>            <span class="slc">// print
</span>            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>print<span class="sym">(</span>header<span class="sym">);
</span>            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>print<span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);
</span>            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>print<span class="sym">(</span>sb<span class="sym">);

</span>            header <span class="sym">=</span> line<span class="sym">;

        }
    }
}</span>
