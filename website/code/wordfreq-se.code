<span class="slc">-- -*- mode: eiffel -*-</span>
<span class="slc">-- $Id: wordfreq-se.code,v 1.13 2006-03-18 21:16:50 bfulgham Exp $</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- By Brent Fulgham</span>

<span class="kwa">class</span> WORDFREQ

insert
	ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>
    make <span class="kwa">is</span>
        <span class="kwa">local</span>
	    count<span class="sym">,</span> highlevel<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>
	    c<span class="sym">:</span> <span class="kwb">CHARACTER</span><span class="sym">;</span>
	    dictionary<span class="sym">:</span> DICTIONARY<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">,</span> STRING<span class="sym">];</span>
	    outcol<span class="sym">:</span> ARRAY<span class="sym">[</span>STRING<span class="sym">];</span>
	    sorter<span class="sym">:</span> REVERSE_COLLECTION_SORTER<span class="sym">[</span>STRING<span class="sym">];</span>
	    word<span class="sym">,</span> temp<span class="sym">:</span> STRING<span class="sym">;</span>
	    iter<span class="sym">:</span> ITERATOR<span class="sym">[</span>STRING<span class="sym">];</span>
	<span class="kwa">do</span>
	    count <span class="sym">:=</span> <span class="num">0</span>
	    <span class="kwa">from</span>
	        <span class="sym">!!</span>dictionary.<span class="kwd">with_capacity</span><span class="sym">(</span><span class="num">60000</span><span class="sym">)</span>
		<span class="sym">!!</span>word.<span class="kwd">make</span><span class="sym">(</span><span class="num">40</span><span class="sym">)</span>
	        io.read_character
	    until
	        io.end_of_input
	    <span class="kwa">loop</span>
	        c <span class="sym">:=</span> io.last_character.to_lower
		<span class="kwa">if not</span> c.is_letter <span class="kwa">then</span>
		    <span class="slc">-- insert word into dictionary</span>
		    <span class="kwa">if not</span> word.is_empty <span class="kwa">then</span>
		        <span class="kwa">if not</span> dictionary.<span class="kwd">has</span><span class="sym">(</span>word<span class="sym">)</span> <span class="kwa">then</span>
			    dictionary.<span class="kwd">add</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">clone</span><span class="sym">(</span>word<span class="sym">))</span>
			<span class="kwa">else</span>
			    count <span class="sym">:=</span> dictionary.<span class="kwd">at</span><span class="sym">(</span>word<span class="sym">);</span>
			    count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
			    dictionary.<span class="kwd">put</span><span class="sym">(</span>count<span class="sym">,</span>word<span class="sym">)</span>
			    <span class="kwa">if</span> highlevel <span class="sym">&lt;</span> count <span class="kwa">then</span>
			    	highlevel <span class="sym">:=</span> count
			    <span class="kwa">end</span>
			<span class="kwa">end</span>
		    <span class="kwa">end</span>
		    word.clear
		<span class="kwa">else</span>
		    <span class="slc">-- append to constructing word</span>
		    word.<span class="kwd">add_last</span><span class="sym">(</span>c<span class="sym">)</span>
		<span class="kwa">end</span>
		io.read_character
	    <span class="kwa">end</span><span class="sym">;</span>

	    <span class="sym">!!</span>outcol.<span class="kwd">with_capacity</span><span class="sym">(</span>dictionary.count<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>

	    <span class="kwa">from</span>
	        iter <span class="sym">:=</span> dictionary.get_new_iterator_on_keys
		iter.start
	    until
	        iter.is_off
	    <span class="kwa">loop</span>
	        temp <span class="sym">:=</span> dictionary.<span class="kwd">at</span><span class="sym">(</span>iter.item<span class="sym">)</span>.to_string
		temp.<span class="kwd">precede_to_count</span><span class="sym">(</span><span class="str">' '</span><span class="sym">,</span> <span class="num">7</span><span class="sym">)</span>
		temp.<span class="kwd">extend</span><span class="sym">(</span><span class="str">' '</span><span class="sym">)</span>
		temp.<span class="kwd">append</span><span class="sym">(</span>iter.item<span class="sym">)</span>

		outcol.<span class="kwd">add_first</span><span class="sym">(</span>temp<span class="sym">)</span>
		iter.next
	    <span class="kwa">end</span>

	    sorter.<span class="kwd">sort</span><span class="sym">(</span>outcol<span class="sym">)</span>

	    <span class="kwa">from</span>
	        iter <span class="sym">:=</span> outcol.get_new_iterator
		iter.start
	    until
	        iter.is_off
	    <span class="kwa">loop</span>
	        std_output.<span class="kwd">put_string</span><span class="sym">(</span>iter.item <span class="sym">+</span> <span class="str">&quot;%N&quot;</span><span class="sym">)</span>
		iter.next
	    <span class="kwa">end</span>
	<span class="kwa">end</span>
    <span class="kwa">end</span>

