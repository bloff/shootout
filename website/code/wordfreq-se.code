<span class="slc">-- -*- mode: eiffel -*-
</span><span class="slc">-- $Id: wordfreq-se.code,v 1.6 2005-05-09 01:22:47 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- By Brent Fulgham
</span>
<span class="kwa">class</span> WORDFREQ

creation make

<span class="kwa">feature

</span>    make <span class="kwa">is

        local
</span>	    count<span class="sym">,</span> highlevel<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;
</span>	    c<span class="sym">:</span> <span class="kwb">CHARACTER</span><span class="sym">;
</span>	    dictionary<span class="sym">:</span> DICTIONARY<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">,</span> STRING<span class="sym">];
</span>	    outcol<span class="sym">:</span> ARRAY<span class="sym">[</span>STRING<span class="sym">];
</span>	    sorter<span class="sym">:</span> REVERSE_COLLECTION_SORTER<span class="sym">[</span>STRING<span class="sym">];
</span>	    word<span class="sym">,</span> temp<span class="sym">:</span> STRING<span class="sym">;
</span>	    iter<span class="sym">:</span> ITERATOR<span class="sym">[</span>STRING<span class="sym">];
</span>	<span class="kwa">do
</span>	    count <span class="sym">:=</span> <span class="num">0
</span>	    <span class="kwa">from
</span>	        <span class="sym">!!</span>dictionary.with_capacity<span class="sym">(</span><span class="num">60000</span><span class="sym">)
		!!</span>word.make<span class="sym">(</span><span class="num">40</span><span class="sym">)
</span>	        io.read_character
	    until
	        io.end_of_input
	    <span class="kwa">loop
</span>	        c <span class="sym">:=</span> io.last_character.to_lower
		<span class="kwa">if not</span> c.is_letter <span class="kwa">then
</span>		    <span class="slc">-- insert word into dictionary
</span>		    <span class="kwa">if not</span> word.is_empty <span class="kwa">then
		        if not</span> dictionary.has<span class="sym">(</span>word<span class="sym">)</span> <span class="kwa">then
</span>			    dictionary.add<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> clone<span class="sym">(</span>word<span class="sym">))
</span>			<span class="kwa">else
</span>			    count <span class="sym">:=</span> dictionary.at<span class="sym">(</span>word<span class="sym">);
</span>			    count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>			    dictionary.put<span class="sym">(</span>count<span class="sym">,</span>word<span class="sym">)
</span>			    <span class="kwa">if</span> highlevel <span class="sym">&lt;</span> count <span class="kwa">then
</span>			    	highlevel <span class="sym">:=</span> count
			    <span class="kwa">end
			end
		    end
</span>		    word.clear
		<span class="kwa">else
</span>		    <span class="slc">-- append to constructing word
</span>		    word.add_last<span class="sym">(</span>c<span class="sym">)
</span>		<span class="kwa">end
</span>		io.read_character
	    <span class="kwa">end</span><span class="sym">;

	    !!</span>outcol.with_capacity<span class="sym">(</span>dictionary.count<span class="sym">,</span> <span class="num">0</span><span class="sym">)

</span>	    <span class="kwa">from
</span>	        iter <span class="sym">:=</span> dictionary.get_new_iterator_on_keys
		iter.start
	    until
	        iter.is_off
	    <span class="kwa">loop
</span>	        temp <span class="sym">:=</span> dictionary.at<span class="sym">(</span>iter.item<span class="sym">)</span>.to_string
		temp.precede_to_count<span class="sym">(</span><span class="str">' '</span><span class="sym">,</span> <span class="num">7</span><span class="sym">)
</span>		temp.extend<span class="sym">(</span><span class="str">' '</span><span class="sym">)
</span>		temp.append<span class="sym">(</span>iter.item<span class="sym">)

</span>		outcol.add_first<span class="sym">(</span>temp<span class="sym">)
</span>		iter.next
	    <span class="kwa">end

</span>	    sorter.sort<span class="sym">(</span>outcol<span class="sym">)

</span>	    <span class="kwa">from
</span>	        iter <span class="sym">:=</span> outcol.get_new_iterator
		iter.start
	    until
	        iter.is_off
	    <span class="kwa">loop
</span>	        std_output.put_string<span class="sym">(</span>iter.item <span class="sym">+</span> <span class="str">&quot;%N&quot;</span><span class="sym">)
</span>		iter.next
	    <span class="kwa">end
	end
    end
</span>
