<span class="com">/*</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * contributed by Anthony Donnefort</span>
<span class="com"> */</span>

<span class="kwa">public class</span> revcomp <span class="sym">{</span>
   <span class="kwa">static final</span> <span class="kwb">byte</span><span class="sym">[]</span> cmp <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span><span class="num">128</span><span class="sym">];</span>
   <span class="kwa">static</span> <span class="sym">{</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> cmp<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)</span> cmp<span class="sym">[</span>i<span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> i<span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'t'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'T'</span><span class="sym">] =</span> <span class="str">'A'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'a'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'A'</span><span class="sym">] =</span> <span class="str">'T'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'g'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'G'</span><span class="sym">] =</span> <span class="str">'C'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'c'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'C'</span><span class="sym">] =</span> <span class="str">'G'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'v'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'V'</span><span class="sym">] =</span> <span class="str">'B'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'h'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'H'</span><span class="sym">] =</span> <span class="str">'D'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'r'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'R'</span><span class="sym">] =</span> <span class="str">'Y'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'m'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'M'</span><span class="sym">] =</span> <span class="str">'K'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'y'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'Y'</span><span class="sym">] =</span> <span class="str">'R'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'k'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'K'</span><span class="sym">] =</span> <span class="str">'M'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'b'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'B'</span><span class="sym">] =</span> <span class="str">'V'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'d'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'D'</span><span class="sym">] =</span> <span class="str">'H'</span><span class="sym">;</span>
      cmp<span class="sym">[</span><span class="str">'u'</span><span class="sym">] =</span> cmp<span class="sym">[</span><span class="str">'U'</span><span class="sym">] =</span> <span class="str">'A'</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">static class</span> ReversibleByteArray <span class="kwa">extends</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">ByteArrayOutputStream</span> <span class="sym">{</span>
      <span class="kwb">void</span> <span class="kwd">reverse</span><span class="sym">()</span> <span class="kwa">throws</span> <span class="kwc">Exception</span> <span class="sym">{</span>
         <span class="kwa">if</span> <span class="sym">(</span>count <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
            <span class="kwb">int</span> begin <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> end <span class="sym">=</span> count <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">while</span> <span class="sym">(</span>buf<span class="sym">[</span>begin<span class="sym">++] !=</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span>
            <span class="kwa">while</span> <span class="sym">(</span>begin <span class="sym">&lt;=</span> end<span class="sym">) {</span>
               <span class="kwa">if</span> <span class="sym">(</span>buf<span class="sym">[</span>begin<span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span> begin<span class="sym">++;</span>
               <span class="kwa">if</span> <span class="sym">(</span>buf<span class="sym">[</span>end<span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span> end<span class="sym">--;</span>
               <span class="kwa">if</span> <span class="sym">(</span>begin <span class="sym">&lt;=</span> end<span class="sym">) {</span>
                  <span class="kwb">byte</span> tmp <span class="sym">=</span> buf<span class="sym">[</span>begin<span class="sym">];</span>
                  buf<span class="sym">[</span>begin<span class="sym">++] =</span> cmp<span class="sym">[</span>buf<span class="sym">[</span>end<span class="sym">]];</span>
                  buf<span class="sym">[</span>end<span class="sym">--] =</span> cmp<span class="sym">[</span>tmp<span class="sym">];</span>
               <span class="sym">}</span>
            <span class="sym">}</span>
            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>buf<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> count<span class="sym">);</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">Exception</span> <span class="sym">{</span>
      <span class="kwb">byte</span><span class="sym">[]</span> line <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span><span class="num">65536</span><span class="sym">];</span>
      <span class="kwb">int</span> read<span class="sym">;</span>
      ReversibleByteArray buf <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">ReversibleByteArray</span><span class="sym">();</span>
      <span class="kwa">while</span> <span class="sym">((</span>read <span class="sym">=</span> <span class="kwc">System</span><span class="sym">.</span>in<span class="sym">.</span><span class="kwd">read</span><span class="sym">(</span>line<span class="sym">)) != -</span><span class="num">1</span><span class="sym">) {</span>
         <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> last <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> read<span class="sym">) {</span>
            <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">[</span>i<span class="sym">] ==</span> <span class="str">'&gt;'</span><span class="sym">) {</span>
               buf<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>line<span class="sym">,</span> last<span class="sym">,</span> i <span class="sym">-</span> last<span class="sym">);</span>
               buf<span class="sym">.</span><span class="kwd">reverse</span><span class="sym">();</span>
               buf<span class="sym">.</span><span class="kwd">reset</span><span class="sym">();</span>
               last <span class="sym">=</span> i<span class="sym">;</span>
            <span class="sym">}</span>
            i<span class="sym">++;</span>
         <span class="sym">}</span>
         buf<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>line<span class="sym">,</span> last<span class="sym">,</span> read <span class="sym">-</span> last<span class="sym">);</span>
      <span class="sym">}</span>
      buf<span class="sym">.</span><span class="kwd">reverse</span><span class="sym">();</span>
   <span class="sym">}</span>
<span class="sym">}</span>
