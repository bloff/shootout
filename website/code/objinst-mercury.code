<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
%% $Id: objinst-mercury.code,v 1.1 2004-11-02 08:52:38 bfulgham Exp $
%% http:<I><FONT COLOR="#B22222">//www.bagley.org/~doug/shootout/
</FONT></I>%% from Fergus Henderson

:- module mytest.
:- <B><FONT COLOR="#A020F0">interface</FONT></B>.
:- import_module io.

:- pred main(io__state::di, io__state::uo) <B><FONT COLOR="#A020F0">is</FONT></B> det.

:- <B><FONT COLOR="#A020F0">implementation</FONT></B>.
:- import_module bool, int, <B><FONT COLOR="#A020F0">string</FONT></B>, list.

:- <B><FONT COLOR="#A020F0">type</FONT></B> toggle ---&gt; toggle(toggle_value::bool).

:- typeclass toggle(T) where [
	func value(T) = bool,
	func <B><FONT COLOR="#BC8F8F">'value :='</FONT></B>(T, bool) = T,
	func activate(T) = T
].

:- instance toggle(toggle) where [
	func(value/1) <B><FONT COLOR="#A020F0">is</FONT></B> toggle_value,
	func(<B><FONT COLOR="#BC8F8F">'value :='</FONT></B>/2) <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#BC8F8F">'toggle_value :='</FONT></B>,
	activate(toggle(yes)) = toggle(no),
	activate(toggle(no)) = toggle(yes)
].

:- <B><FONT COLOR="#A020F0">type</FONT></B> nth_toggle ---&gt; nth_toggle(base::toggle, counter::int, limit::int).

:- func make_nth_toggle(bool, int) = nth_toggle.
make_nth_toggle(Val, Max) = nth_toggle(toggle(Val), 0, Max).

:- instance toggle(nth_toggle) where [
	value(T) = T^base^value,
	<B><FONT COLOR="#BC8F8F">'value :='</FONT></B>(T, V) = T^base^value := V,
	(activate(T) = NewT :-
		C = T^counter + 1,
		(<B><FONT COLOR="#A020F0">if</FONT></B> C &gt;= T^limit <B><FONT COLOR="#A020F0">then</FONT></B>
			NewT = (T^counter := 0)^base := activate(T^base)
		<B><FONT COLOR="#A020F0">else</FONT></B>
			NewT = T^counter := C
		))
].

main --&gt;
	io__command_line_arguments(Args),
	<I><FONT COLOR="#B22222">{ N = (if Args = [Arg], to_int(Arg, N0) then N0 else 1) }</FONT></I>,
	<I><FONT COLOR="#B22222">{ Toggle1 = toggle(yes) }</FONT></I>,
	loop(5, (pred(T0::<B><FONT COLOR="#A020F0">in</FONT></B>, T::out, di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det --&gt;
			<I><FONT COLOR="#B22222">{ T = T0^activate }</FONT></I>,
			write_string(<B><FONT COLOR="#A020F0">if</FONT></B> T^value = yes <B><FONT COLOR="#A020F0">then</FONT></B> &quot;true&quot; <B><FONT COLOR="#A020F0">else</FONT></B> &quot;false&quot;),
			nl),
		Toggle1, Toggle2),
	loop(N, (pred(_T0::<B><FONT COLOR="#A020F0">in</FONT></B>, T::out, di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det --&gt;
			<I><FONT COLOR="#B22222">{ T = toggle(yes) }</FONT></I>),
		Toggle2, _Toggle3),
	nl,

	<I><FONT COLOR="#B22222">{ Toggle4 = make_nth_toggle(yes, 3) }</FONT></I>,
	loop(8, (pred(T0::<B><FONT COLOR="#A020F0">in</FONT></B>, T::out, di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det --&gt;
			<I><FONT COLOR="#B22222">{ T = T0^activate }</FONT></I>,
			write_string(<B><FONT COLOR="#A020F0">if</FONT></B> T^value = yes <B><FONT COLOR="#A020F0">then</FONT></B> &quot;true&quot; <B><FONT COLOR="#A020F0">else</FONT></B> &quot;false&quot;),
			nl),
		Toggle4, Toggle5),
	loop(N, (pred(_T0::<B><FONT COLOR="#A020F0">in</FONT></B>, T::out, di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det --&gt;
			<I><FONT COLOR="#B22222">{ T = make_nth_toggle(yes, 3) }</FONT></I>),
		Toggle5, _Toggle6).

:- pred loop(int, pred(T1, T1, T2, T2), T1, T1, T2, T2).
:- mode loop(<B><FONT COLOR="#A020F0">in</FONT></B>, pred(<B><FONT COLOR="#A020F0">in</FONT></B>, out, di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det, <B><FONT COLOR="#A020F0">in</FONT></B>, out, di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det.
loop(N, P, X0, X) --&gt;
	(<B><FONT COLOR="#A020F0">if</FONT></B> <I><FONT COLOR="#B22222">{ N = 0 }</FONT></I> <B><FONT COLOR="#A020F0">then</FONT></B>
		<I><FONT COLOR="#B22222">{ X = X0 }</FONT></I>
	<B><FONT COLOR="#A020F0">else</FONT></B>
		P(X0, X1),
		loop(N - 1, P, X1, X)
	).
</pre></td></tr></table>
