<span class="slc">%% $Id: objinst-mercury.code,v 1.4 2005-04-13 15:29:18 bfulgham Exp $
</span><span class="slc">%% http://www.bagley.org/~doug/shootout/
</span><span class="slc">%% from Fergus Henderson
</span>
<span class="sym">:-</span> module mytest.
<span class="sym">:-</span> interface.
<span class="sym">:-</span> import_module io.

<span class="sym">:-</span> pred main<span class="sym">(</span>io__state<span class="sym">::</span>di<span class="sym">,</span> io__state<span class="sym">::</span>uo<span class="sym">)</span> <span class="kwa">is</span> det.

<span class="sym">:-</span> implementation.
<span class="sym">:-</span> import_module bool<span class="sym">,</span> int<span class="sym">,</span> string<span class="sym">,</span> list.

<span class="sym">:-</span> type toggle <span class="sym">---&gt;</span> toggle<span class="sym">(</span>toggle_value<span class="sym">::</span>bool<span class="sym">)</span>.

<span class="sym">:-</span> typeclass toggle<span class="sym">(</span>T<span class="sym">)</span> where <span class="sym">[
</span>	func value<span class="sym">(</span>T<span class="sym">) =</span> bool<span class="sym">,
</span>	func <span class="str">'value :='</span><span class="sym">(</span>T<span class="sym">,</span> bool<span class="sym">) =</span> T<span class="sym">,
</span>	func activate<span class="sym">(</span>T<span class="sym">) =</span> T
<span class="sym">]</span>.

<span class="sym">:-</span> instance toggle<span class="sym">(</span>toggle<span class="sym">)</span> where <span class="sym">[
</span>	func<span class="sym">(</span>value<span class="sym">/</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">is</span> toggle_value<span class="sym">,
</span>	func<span class="sym">(</span><span class="str">'value :='</span><span class="sym">/</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">is</span> <span class="str">'toggle_value :='</span><span class="sym">,
</span>	activate<span class="sym">(</span>toggle<span class="sym">(</span>yes<span class="sym">)) =</span> toggle<span class="sym">(</span>no<span class="sym">),
</span>	activate<span class="sym">(</span>toggle<span class="sym">(</span>no<span class="sym">)) =</span> toggle<span class="sym">(</span>yes<span class="sym">)
]</span>.

<span class="sym">:-</span> type nth_toggle <span class="sym">---&gt;</span> nth_toggle<span class="sym">(</span>base<span class="sym">::</span>toggle<span class="sym">,</span> counter<span class="sym">::</span>int<span class="sym">,</span> limit<span class="sym">::</span>int<span class="sym">)</span>.

<span class="sym">:-</span> func make_nth_toggle<span class="sym">(</span>bool<span class="sym">,</span> int<span class="sym">) =</span> nth_toggle.
make_nth_toggle<span class="sym">(</span>Val<span class="sym">,</span> Max<span class="sym">) =</span> nth_toggle<span class="sym">(</span>toggle<span class="sym">(</span>Val<span class="sym">),</span> <span class="num">0</span><span class="sym">,</span> Max<span class="sym">)</span>.

<span class="sym">:-</span> instance toggle<span class="sym">(</span>nth_toggle<span class="sym">)</span> where <span class="sym">[
</span>	value<span class="sym">(</span>T<span class="sym">) =</span> T^base^value<span class="sym">,
</span>	<span class="str">'value :='</span><span class="sym">(</span>T<span class="sym">,</span> V<span class="sym">) =</span> T^base^value <span class="sym">:=</span> V<span class="sym">,
	(</span>activate<span class="sym">(</span>T<span class="sym">) =</span> NewT <span class="sym">:-
</span>		C <span class="sym">=</span> T^counter <span class="sym">+</span> <span class="num">1</span><span class="sym">,
		(</span>if C <span class="sym">&gt;=</span> T^limit then
			NewT <span class="sym">= (</span>T^counter <span class="sym">:=</span> <span class="num">0</span><span class="sym">)</span>^base <span class="sym">:=</span> activate<span class="sym">(</span>T^base<span class="sym">)
</span>		else
			NewT <span class="sym">=</span> T^counter <span class="sym">:=</span> C
		<span class="sym">))
]</span>.

main <span class="sym">--&gt;
</span>	io__command_line_arguments<span class="sym">(</span>Args<span class="sym">),
	{</span> N <span class="sym">= (</span>if Args <span class="sym">= [</span>Arg<span class="sym">],</span> to_int<span class="sym">(</span>Arg<span class="sym">,</span> N0<span class="sym">)</span> then N0 else <span class="num">1</span><span class="sym">) },
	{</span> Toggle1 <span class="sym">=</span> toggle<span class="sym">(</span>yes<span class="sym">) },
</span>	loop<span class="sym">(</span><span class="num">5</span><span class="sym">, (</span>pred<span class="sym">(</span>T0<span class="sym">::</span>in<span class="sym">,</span> T<span class="sym">::</span>out<span class="sym">,</span> di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det <span class="sym">--&gt;
			{</span> T <span class="sym">=</span> T0^activate <span class="sym">},
</span>			write_string<span class="sym">(</span>if T^value <span class="sym">=</span> yes then <span class="str">&quot;true&quot;</span> else <span class="str">&quot;false&quot;</span><span class="sym">),
</span>			<span class="kwa">nl</span><span class="sym">),
</span>		Toggle1<span class="sym">,</span> Toggle2<span class="sym">),
</span>	loop<span class="sym">(</span>N<span class="sym">, (</span>pred<span class="sym">(</span>_T0<span class="sym">::</span>in<span class="sym">,</span> T<span class="sym">::</span>out<span class="sym">,</span> di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det <span class="sym">--&gt;
			{</span> T <span class="sym">=</span> toggle<span class="sym">(</span>yes<span class="sym">) }),
</span>		Toggle2<span class="sym">,</span> _Toggle3<span class="sym">),
</span>	<span class="kwa">nl</span><span class="sym">,

	{</span> Toggle4 <span class="sym">=</span> make_nth_toggle<span class="sym">(</span>yes<span class="sym">,</span> <span class="num">3</span><span class="sym">) },
</span>	loop<span class="sym">(</span><span class="num">8</span><span class="sym">, (</span>pred<span class="sym">(</span>T0<span class="sym">::</span>in<span class="sym">,</span> T<span class="sym">::</span>out<span class="sym">,</span> di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det <span class="sym">--&gt;
			{</span> T <span class="sym">=</span> T0^activate <span class="sym">},
</span>			write_string<span class="sym">(</span>if T^value <span class="sym">=</span> yes then <span class="str">&quot;true&quot;</span> else <span class="str">&quot;false&quot;</span><span class="sym">),
</span>			<span class="kwa">nl</span><span class="sym">),
</span>		Toggle4<span class="sym">,</span> Toggle5<span class="sym">),
</span>	loop<span class="sym">(</span>N<span class="sym">, (</span>pred<span class="sym">(</span>_T0<span class="sym">::</span>in<span class="sym">,</span> T<span class="sym">::</span>out<span class="sym">,</span> di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det <span class="sym">--&gt;
			{</span> T <span class="sym">=</span> make_nth_toggle<span class="sym">(</span>yes<span class="sym">,</span> <span class="num">3</span><span class="sym">) }),
</span>		Toggle5<span class="sym">,</span> _Toggle6<span class="sym">)</span>.

<span class="sym">:-</span> pred loop<span class="sym">(</span>int<span class="sym">,</span> pred<span class="sym">(</span>T1<span class="sym">,</span> T1<span class="sym">,</span> T2<span class="sym">,</span> T2<span class="sym">),</span> T1<span class="sym">,</span> T1<span class="sym">,</span> T2<span class="sym">,</span> T2<span class="sym">)</span>.
<span class="sym">:-</span> mode loop<span class="sym">(</span>in<span class="sym">,</span> pred<span class="sym">(</span>in<span class="sym">,</span> out<span class="sym">,</span> di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det<span class="sym">,</span> in<span class="sym">,</span> out<span class="sym">,</span> di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det.
loop<span class="sym">(</span>N<span class="sym">,</span> P<span class="sym">,</span> X0<span class="sym">,</span> X<span class="sym">) --&gt;
	(</span>if <span class="sym">{</span> N <span class="sym">=</span> <span class="num">0</span> <span class="sym">}</span> then
		<span class="sym">{</span> X <span class="sym">=</span> X0 <span class="sym">}
</span>	else
		P<span class="sym">(</span>X0<span class="sym">,</span> X1<span class="sym">),
</span>		loop<span class="sym">(</span>N <span class="num">- 1</span><span class="sym">,</span> P<span class="sym">,</span> X1<span class="sym">,</span> X<span class="sym">)
	)</span>.

