<span class="com">(* binarytrees.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 *)</span>


<span class="kwa">type</span> int_tree <span class="sym">=</span> Empty <span class="kwa">of</span> <span class="kwb">int</span> <span class="sym">|</span> Node <span class="kwa">of</span> int_tree <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">*</span> int_tree

<span class="kwa">let rec</span> make item depth <span class="sym">=
</span>  <span class="kwa">if</span> depth <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then let</span> d <span class="sym">=</span> depth <span class="num">- 1</span> <span class="kwa">in</span> Node<span class="sym">(</span>make item d<span class="sym">,</span> item<span class="sym">,</span> make item d<span class="sym">)
</span>  <span class="kwa">else</span> Empty item

<span class="kwa">let rec</span> sum <span class="sym">=</span> <span class="kwa">function
</span>  <span class="sym">|</span> Empty i <span class="sym">-&gt;</span> i
  <span class="sym">|</span> Node<span class="sym">(</span>left<span class="sym">,</span> i<span class="sym">,</span> right<span class="sym">) -&gt;</span> i <span class="sym">+ (</span>sum left <span class="sym">+</span> sum right<span class="sym">)
</span><span class="kwa">let rec</span> diff <span class="sym">=</span> <span class="kwa">function
</span>  <span class="sym">|</span> Empty i <span class="sym">-&gt;</span> i
  <span class="sym">|</span> Node<span class="sym">(</span>left<span class="sym">,</span> i<span class="sym">,</span> right<span class="sym">) -&gt;</span> i <span class="sym">+ (</span>diff left <span class="sym">-</span> diff right<span class="sym">)


</span><span class="kwa">let</span> min_depth <span class="sym">=</span> <span class="num">4
</span><span class="kwa">let</span> check_factor <span class="sym">=</span> <span class="num">64
</span><span class="kwa">let</span> max_depth <span class="sym">=
</span>  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> int_of_string<span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">10</span> <span class="kwa">in
</span>  max <span class="sym">(</span>min_depth <span class="sym">+</span> <span class="num">2</span><span class="sym">)</span> n
<span class="kwa">let</span> stretch_depth <span class="sym">=</span> max_depth <span class="sym">+</span> <span class="num">1

</span><span class="kwa">let</span> <span class="sym">() =
</span>  <span class="kwa">let</span> check <span class="sym">=</span> sum <span class="sym">(</span>make <span class="sym">(-</span><span class="num">1</span><span class="sym">)</span> stretch_depth<span class="sym">)</span> <span class="kwa">in
</span>  Printf.printf <span class="str">&quot;stretch tree of depth %i</span><span class="esc">\t </span> <span class="str">check: %i</span><span class="esc">\n</span><span class="str">&quot;</span> stretch_depth check

<span class="kwa">let</span> long_lived_tree <span class="sym">=</span> make <span class="sym">(-</span><span class="num">1</span><span class="sym">)</span> max_depth

<span class="kwa">let rec</span> loop_depths d <span class="sym">=
</span>  <span class="kwa">if</span> d <span class="sym">&lt;=</span> max_depth <span class="kwa">then
    let</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>max_depth <span class="sym">-</span> d <span class="sym">+</span> min_depth<span class="sym">)</span> <span class="kwa">in
    let</span> check <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in
    for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> iterations <span class="kwa">do
</span>      check <span class="sym">:= !</span>check <span class="sym">+</span> diff <span class="sym">(</span>make i d<span class="sym">) /</span> check_factor
    <span class="kwa">done</span><span class="sym">;
</span>    Printf.printf <span class="str">&quot;%i</span><span class="esc">\t </span> <span class="str">trees of depth %i</span><span class="esc">\t </span> <span class="str">check: %i</span><span class="esc">\n</span><span class="str">&quot;</span> iterations d <span class="sym">!</span>check<span class="sym">;
</span>    loop_depths <span class="sym">(</span>d <span class="sym">+</span> <span class="num">2</span><span class="sym">)

</span><span class="kwa">let</span> <span class="sym">() =
</span>  loop_depths min_depth<span class="sym">;
</span>  Printf.printf <span class="str">&quot;long lived tree of depth %i</span><span class="esc">\t </span> <span class="str">check: %i&quot;</span>
    max_depth <span class="sym">(</span>sum long_lived_tree<span class="sym">)
</span>
