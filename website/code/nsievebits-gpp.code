<span class="com">/*
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Written by Jon Harrop, 2005
 * Compile: g++ -O2 -o nsieve_bits_g++ nsieve_bits.cpp
 */</span>

<span class="dir">#include &lt;iostream&gt;
</span><span class="dir">#include &lt;iomanip&gt;
</span><span class="dir">#include &lt;vector&gt;
</span><span class="dir">#include &lt;cstring&gt;
</span>
<span class="kwb">int</span> nsieve<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>  std<span class="sym">::</span>vector<span class="sym">&lt;</span><span class="kwb">bool</span><span class="sym">&gt;</span> t<span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span>  <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">; ++</span>i<span class="sym">)
</span>    <span class="kwa">if</span> <span class="sym">(!</span> t<span class="sym">.</span>at<span class="sym">(</span>i<span class="sym">)) {
      ++</span>count<span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span>i<span class="sym">*</span><span class="num">2</span><span class="sym">;</span> j<span class="sym">&lt;=</span>n<span class="sym">;</span> j<span class="sym">+=</span>i<span class="sym">)
</span>	t<span class="sym">.</span>at<span class="sym">(</span>j<span class="sym">) =</span> <span class="kwa">true</span><span class="sym">;
    }

</span>  <span class="kwa">return</span> count<span class="sym">;
}

</span><span class="kwb">void</span> test<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>  <span class="kwb">int</span> m <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;
</span>  std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Primes up to &quot;</span> <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>setw<span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> m <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>setw<span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> nsieve<span class="sym">(</span>m<span class="sym">) &lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;
}

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>  <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">!=</span> <span class="num">2</span><span class="sym">) {
</span>    std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: nsieve &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span>    <span class="kwa">return</span> <span class="num">1</span><span class="sym">;
  }
</span>  <span class="kwb">int</span> n <span class="sym">=</span> atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span>  test<span class="sym">(</span>n<span class="sym">);
</span>  <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">)</span> test<span class="sym">(</span>n <span class="num">- 1</span><span class="sym">);
</span>  <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">)</span> test<span class="sym">(</span>n <span class="num">- 2</span><span class="sym">);
</span>  exit<span class="sym">(</span><span class="num">0</span><span class="sym">);
}</span>
