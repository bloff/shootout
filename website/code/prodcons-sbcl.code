<span class="line">    1 </span><span class="slc">;;; -*- mode: lisp -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: prodcons-sbcl.code,v 1.3 2004-11-13 08:28:18 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">;;; From Jochen Schmidt
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">;;; Multi-lisp modifications by Brent Fulgham
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="sym">(</span>defparameter <span class="sym">*</span>counter<span class="sym">*</span> <span class="num">0</span><span class="sym">)
</span><span class="line">    8 </span><span class="sym">(</span>defparameter <span class="sym">*</span>produced<span class="sym">*</span> <span class="num">0</span><span class="sym">)
</span><span class="line">    9 </span><span class="sym">(</span>defparameter <span class="sym">*</span>consumed<span class="sym">*</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   10 </span><span class="sym">(</span>defparameter <span class="sym">*</span>data<span class="sym">*</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   11 </span><span class="sym">(</span>defparameter <span class="sym">*</span>mutex<span class="sym">* (</span>mp<span class="sym">:</span>make<span class="sym">-</span>lock <span class="str">&quot;Big Lock&quot;</span><span class="sym">))
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()
</span><span class="line">   14 </span><span class="sym">  (</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span><span class="line">   15 </span><span class="sym"></span>                                         #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">))))
</span><span class="line">   16 </span><span class="sym">    (</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">))
</span><span class="line">   17 </span><span class="sym">             (</span>fixnum n<span class="sym">))
</span><span class="line">   18 </span><span class="sym">    (</span>setf <span class="sym">*</span>counter<span class="sym">*</span> <span class="num">0
</span><span class="line">   19 </span><span class="num"></span>          <span class="sym">*</span>produced<span class="sym">*</span> <span class="num">0
</span><span class="line">   20 </span><span class="num"></span>          <span class="sym">*</span>consumed<span class="sym">*</span> <span class="num">0
</span><span class="line">   21 </span><span class="num"></span>          <span class="sym">*</span>data<span class="sym">*</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   22 </span><span class="sym">    (</span>let <span class="sym">((</span>producer <span class="sym">(</span>mp<span class="sym">:</span>make<span class="sym">-</span>process #<span class="str">'(lambda () (funcall #'</span>producer n<span class="sym">)) :</span>name <span class="str">&quot;Producer&quot;</span><span class="sym">))
</span><span class="line">   23 </span><span class="sym">          (</span>consumer <span class="sym">(</span>mp<span class="sym">:</span>make<span class="sym">-</span>process #<span class="str">'(lambda () (funcall #'</span>consumer n<span class="sym">)) :</span>name <span class="str">&quot;Consumer&quot;</span><span class="sym">)))
</span><span class="line">   24 </span><span class="sym">      (</span>mp<span class="sym">:</span>process<span class="sym">-</span>wait <span class="str">&quot;Wait on Producer&quot;</span> #<span class="str">'(lambda () (eq (mp:process-state producer) :killed)))
</span><span class="line">   25 </span><span class="str">      (mp:process-wait &quot;Wait on Consumer&quot; #'</span><span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span><span class="kwa">eq</span> <span class="sym">(</span>mp<span class="sym">:</span>process<span class="sym">-</span>state consumer<span class="sym">) :</span>killed<span class="sym">)))
</span><span class="line">   26 </span><span class="sym">      (</span>format t <span class="str">&quot;~A ~A~%&quot;</span> <span class="sym">*</span>produced<span class="sym">* *</span>consumed<span class="sym">*))))
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym">(</span><span class="kwa">defun</span> producer <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   29 </span><span class="sym">  (</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">))
</span><span class="line">   30 </span><span class="sym">           (</span>fixnum n<span class="sym">))
</span><span class="line">   31 </span><span class="sym">  (</span>loop <span class="sym">:</span>for i <span class="sym">:</span>of<span class="sym">-</span><span class="kwa">type</span> fixnum <span class="sym">:</span>from <span class="num">1</span> <span class="sym">:</span>to n
<span class="line">   32 </span>        <span class="sym">:</span>do
<span class="line">   33 </span>        <span class="sym">(</span>mp<span class="sym">:</span>process<span class="sym">-</span>wait <span class="str">&quot;Producer is waiting on Consumer&quot;</span> #<span class="str">'(lambda () (= *counter* 0)))
</span><span class="line">   34 </span><span class="str">        (mp:with-lock-held (*mutex*)
</span><span class="line">   35 </span><span class="str">          (setf *data* i
</span><span class="line">   36 </span><span class="str">                    *counter* 1))
</span><span class="line">   37 </span><span class="str">        (incf *produced*)))
</span><span class="line">   38 </span><span class="str">
</span><span class="line">   39 </span><span class="str">(defun consumer (n)
</span><span class="line">   40 </span><span class="str">  (declare (optimize (speed 3) (safety 0))
</span><span class="line">   41 </span><span class="str">           (fixnum n))
</span><span class="line">   42 </span><span class="str">  (let ((i 0))
</span><span class="line">   43 </span><span class="str">    (declare (fixnum i))
</span><span class="line">   44 </span><span class="str">    (loop
</span><span class="line">   45 </span><span class="str">     (mp:process-wait &quot;Consumer is waiting on Producer&quot; #'</span><span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (= *</span>counter<span class="sym">*</span> <span class="num">1</span><span class="sym">)))
</span><span class="line">   46 </span><span class="sym">     (</span>mp<span class="sym">:</span>with<span class="sym">-</span>lock<span class="sym">-</span>held <span class="sym">(*</span>mutex<span class="sym">*)
</span><span class="line">   47 </span><span class="sym">       (</span>setf i <span class="sym">*</span>data<span class="sym">*
</span><span class="line">   48 </span><span class="sym">             *</span>counter<span class="sym">*</span> <span class="num">0</span><span class="sym">))
</span><span class="line">   49 </span><span class="sym">     (</span>incf <span class="sym">*</span>consumed<span class="sym">*)
</span><span class="line">   50 </span><span class="sym">     (</span>when <span class="sym">(=</span> i n<span class="sym">)
</span><span class="line">   51 </span><span class="sym">       (</span>return<span class="sym">)))))</span>
