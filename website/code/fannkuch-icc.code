<span class="dir">#include &lt;stdbool.h&gt;
</span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span>
<span class="kwb">static</span> <span class="kwc">inline</span> <span class="kwb">void</span> swap<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>i<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">*</span>j<span class="sym">) {
</span>    <span class="kwb">int</span> tmp <span class="sym">= *</span>i<span class="sym">;
    *</span>i <span class="sym">= *</span>j<span class="sym">;
    *</span>j <span class="sym">=</span> tmp<span class="sym">;
}

</span><span class="kwb">static</span> <span class="kwc">inline</span> <span class="kwb">void</span> reverse<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>first<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">*</span>last<span class="sym">) {
</span>    <span class="kwa">while</span> <span class="sym">(</span>first <span class="sym">&lt;</span> last<span class="sym">)
</span>        swap<span class="sym">(</span>first<span class="sym">++, --</span>last<span class="sym">);
}

</span><span class="kwb">static bool</span> next_permutation<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>first<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">*</span>last<span class="sym">) {
</span>    <span class="kwb">int</span> <span class="sym">*</span>i <span class="sym">=</span> last <span class="num">- 1</span><span class="sym">;
</span>    <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {
</span>        <span class="kwb">int</span> <span class="sym">*</span>ii <span class="sym">=</span> i<span class="sym">;
</span>        i<span class="sym">--;
</span>        <span class="kwa">if</span> <span class="sym">(*</span>i <span class="sym">&lt; *</span>ii<span class="sym">) {
</span>            <span class="kwb">int</span> <span class="sym">*</span>j <span class="sym">=</span> last<span class="sym">;
</span>            <span class="kwa">while</span> <span class="sym">(*</span>i <span class="sym">&gt;= *--</span>j<span class="sym">)
                ;
</span>            swap<span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">);
</span>            reverse<span class="sym">(</span>ii<span class="sym">,</span> last<span class="sym">);
</span>            <span class="kwa">return true</span><span class="sym">;
        }
</span>        <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> first<span class="sym">) {
</span>            reverse<span class="sym">(</span>first<span class="sym">,</span> last<span class="sym">);
</span>            <span class="kwa">return false</span><span class="sym">;
        }
    }
}

</span><span class="kwb">static int</span> count_reversals<span class="sym">(</span><span class="kwb">const int</span> <span class="sym">*</span>pin<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {
</span>    <span class="kwb">int</span> p<span class="sym">[</span>n<span class="sym">];
</span>    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    memcpy<span class="sym">(</span>p<span class="sym">,</span> pin<span class="sym">,</span> <span class="kwa">sizeof</span> p<span class="sym">);
</span>    <span class="kwa">while</span> <span class="sym">(</span>p<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="num">1</span><span class="sym">) {
</span>	reverse<span class="sym">(</span>p<span class="sym">,</span> p <span class="sym">+</span> p<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>	count<span class="sym">++;
    }
</span>    <span class="kwa">return</span> count<span class="sym">;
}

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> n <span class="sym">=</span> atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span>    <span class="kwb">int</span> p<span class="sym">[</span>n<span class="sym">],</span> i<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)
</span>	p<span class="sym">[</span>i<span class="sym">] =</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;

</span>    <span class="kwb">int</span> max_count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwa">do</span> <span class="sym">{
</span>	<span class="kwb">int</span> count <span class="sym">=</span> count_reversals<span class="sym">(</span>p<span class="sym">,</span> n<span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>count <span class="sym">&gt;</span> max_count<span class="sym">)
</span>	    max_count <span class="sym">=</span> count<span class="sym">;
    }</span> <span class="kwa">while</span> <span class="sym">(</span>next_permutation<span class="sym">(</span>p<span class="sym">,</span> p <span class="sym">+</span> n<span class="sym">));
</span>    printf<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> max_count<span class="sym">);

</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}
</span>
