<span class="slc">// The Great Computer Language Shootout
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">//
</span><span class="slc">// contributed by David Hedbor
</span><span class="slc">// modified by Isaac Gouy
</span>
<span class="kwa">function</span> Toggle<span class="sym">(</span>start_state<span class="sym">) {
</span>  <span class="kwa">this</span>.bool <span class="sym">=</span> start_state<span class="sym">;
</span>  <span class="kwa">function</span> value <span class="sym">() {
</span>    <span class="kwa">return this</span>.bool<span class="sym">;
  }

</span>  <span class="kwa">function</span> activate <span class="sym">() {
</span>    <span class="kwa">this</span>.bool <span class="sym">= !</span><span class="kwa">this</span>.bool<span class="sym">;
</span>    <span class="kwa">return this</span><span class="sym">;
  }
}


</span><span class="kwa">function</span> NthToggle <span class="sym">(</span>start_state<span class="sym">,</span> max_counter<span class="sym">) {
</span>  <span class="kwa">this</span>.base <span class="sym">=</span> Toggle<span class="sym">;
</span>  <span class="kwa">this</span>.base<span class="sym">(</span>start_state<span class="sym">);
</span>  <span class="kwa">this</span>.count_max <span class="sym">=</span> max_counter<span class="sym">;
</span>  <span class="kwa">this</span>.count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>  <span class="kwa">function</span> activate <span class="sym">() {
</span>    <span class="kwa">if</span> <span class="sym">(++</span><span class="kwa">this</span>.count <span class="sym">&gt;=</span> <span class="kwa">this</span>.count_max<span class="sym">) {
</span>      <span class="kwa">this</span>.bool <span class="sym">= !</span><span class="kwa">this</span>.bool<span class="sym">;
</span>      <span class="kwa">this</span>.count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
    }
</span>    <span class="kwa">return this</span><span class="sym">;
  }
}
</span>NthToggle.prototype <span class="sym">=</span> <span class="kwa">new</span> Toggle<span class="sym">;

</span><span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="kwa">var</span> i<span class="sym">;
</span><span class="kwa">var</span> val <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;
</span><span class="kwa">var</span> toggle <span class="sym">=</span> <span class="kwa">new</span> Toggle<span class="sym">(</span>val<span class="sym">);
</span><span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>  val <span class="sym">=</span> toggle.activate<span class="sym">()</span>.value<span class="sym">();
}
</span>print<span class="sym">(</span>toggle.value<span class="sym">()</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);

</span>val <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;
</span><span class="kwa">var</span> ntoggle <span class="sym">=</span> <span class="kwa">new</span> NthToggle<span class="sym">(</span>val<span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span><span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>  val <span class="sym">=</span> ntoggle.activate<span class="sym">()</span>.value<span class="sym">();
}
</span>print<span class="sym">(</span>ntoggle.value<span class="sym">()</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);</span>
