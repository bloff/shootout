<span class="kwa">import</span> Data.<span class="kwb">Char</span><span class="sym">(</span>toUpper<span class="sym">)</span>
<span class="kwa">import</span> Data.Array
<span class="kwa">import</span> System.IO

<span class="com">{-  The Computer Language Shootout</span>
<span class="com">    http://shootout.alioth.debian.org/</span>
<span class="com">    contributed by Sebastian Sylvan</span>
<span class="com">-}</span>

complement i <span class="sym">=</span> complArr <span class="sym">!</span> i<span class="str">'</span>
<span class="str">             where i'</span> <span class="sym">=</span> toUpper i

complArr <span class="sym">=</span> array <span class="sym">(</span><span class="str">'A'</span><span class="sym">,</span><span class="str">'Z'</span><span class="sym">) (</span>self <span class="sym">++</span> complAssoc<span class="sym">)</span>
           <span class="kwa">where</span> self <span class="sym">=</span> az `zip` az
                 az <span class="sym">= [</span><span class="str">'A'</span>..<span class="str">'Z'</span><span class="sym">]</span>
complAssoc <span class="sym">= [</span>
              <span class="sym">(</span><span class="str">'A'</span><span class="sym">,</span><span class="str">'T'</span><span class="sym">),(</span><span class="str">'C'</span><span class="sym">,</span><span class="str">'G'</span><span class="sym">),(</span><span class="str">'G'</span><span class="sym">,</span><span class="str">'C'</span><span class="sym">),(</span><span class="str">'T'</span><span class="sym">,</span><span class="str">'A'</span><span class="sym">),(</span><span class="str">'U'</span><span class="sym">,</span><span class="str">'A'</span><span class="sym">),(</span><span class="str">'M'</span><span class="sym">,</span><span class="str">'K'</span><span class="sym">),(</span><span class="str">'R'</span><span class="sym">,</span><span class="str">'Y'</span><span class="sym">),(</span><span class="str">'W'</span><span class="sym">,</span><span class="str">'W'</span><span class="sym">),</span>
              <span class="sym">(</span><span class="str">'S'</span><span class="sym">,</span><span class="str">'S'</span><span class="sym">),(</span><span class="str">'Y'</span><span class="sym">,</span><span class="str">'R'</span><span class="sym">),(</span><span class="str">'K'</span><span class="sym">,</span><span class="str">'M'</span><span class="sym">),(</span><span class="str">'V'</span><span class="sym">,</span><span class="str">'B'</span><span class="sym">),(</span><span class="str">'D'</span><span class="sym">,</span><span class="str">'H'</span><span class="sym">),(</span><span class="str">'D'</span><span class="sym">,</span><span class="str">'H'</span><span class="sym">),(</span><span class="str">'B'</span><span class="sym">,</span><span class="str">'V'</span><span class="sym">),(</span><span class="str">'N'</span><span class="sym">,</span><span class="str">'N'</span><span class="sym">)</span>
             <span class="sym">]</span>

process header&#64;<span class="sym">(</span><span class="str">'&gt;'</span><span class="sym">:</span>xs<span class="sym">) =</span> putStrLn header
process x <span class="sym">=</span> putStrLn <span class="sym">(</span>map complement x<span class="sym">)</span>

loop h <span class="sym">=</span>
    <span class="kwa">do</span> eof <span class="sym">&lt;-</span> hIsEOF h
       <span class="kwa">case</span> eof <span class="kwa">of</span>
        <span class="kwa">True</span> <span class="sym">-&gt;</span> return <span class="sym">()</span>
        <span class="kwa">False</span> <span class="sym">-&gt;</span> <span class="kwa">do</span> xs <span class="sym">&lt;-</span> hGetLine h
                    process xs
                    loop h

main <span class="sym">=</span> loop stdin
