<span class="slc">-- $Id: nsieve-ghc.code,v 1.1 2004-12-22 06:22:08 bfulgham Exp $
</span><span class="slc">-- written by Einar Karttunen
</span>
<span class="kwa">import</span> Data.Array.IO
<span class="kwa">import</span> Data.Array.Base
<span class="kwa">import</span> Data.Bits <span class="sym">(</span>shiftL<span class="sym">)
</span><span class="kwa">import</span> System <span class="sym">(</span>getArgs<span class="sym">)

</span>loop <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IOUArray <span class="kwb">Int Bool</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="kwb">Int
</span>loop n m arr c <span class="sym">|</span> n <span class="sym">==</span> m    <span class="sym">=</span> return c
               <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span> el <span class="sym">&lt;-</span> unsafeRead arr n
                                if el <span class="kwa">then do</span> mapM_ <span class="sym">(</span>\i <span class="sym">-&gt;</span> unsafeWrite arr i <span class="kwa">False</span><span class="sym">) (</span>tail <span class="sym">[</span>n<span class="sym">,</span>n<span class="sym">+</span>n..m<span class="sym">])
</span>                                              loop <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> m arr $<span class="sym">!</span> c<span class="sym">+</span><span class="num">1
</span>                                      <span class="kwa">else do</span> loop <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> m arr c

sieve n <span class="sym">=</span> <span class="kwa">do let</span> m <span class="sym">= (</span><span class="num">1</span> `shiftL` n<span class="sym">) *</span> <span class="num">10000
</span>             arr <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">2</span><span class="sym">,</span>m<span class="sym">)</span> <span class="kwa">True
</span>             c   <span class="sym">&lt;-</span> loop <span class="num">2</span> m arr <span class="num">0
</span>             putStrLn <span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">++</span>show m<span class="sym">++</span><span class="str">&quot; &quot;</span><span class="sym">++</span>show c<span class="sym">)

</span>main <span class="sym">=</span> <span class="kwa">do</span> n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO.head
          sieve n <span class="sym">&gt;&gt;</span> sieve <span class="sym">(</span>n<span class="num">-1</span><span class="sym">) &gt;&gt;</span> sieve <span class="sym">(</span>n<span class="num">-2</span><span class="sym">)</span>
