<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: moments-cmucl.code,v 1.10 2005-11-13 04:35:27 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; From Bulent Murtezaoglu</span>
<span class="slc">;;; Multi-lisp modifications by Brent Fulgham</span>
<span class="slc">;;; Enhanced by Juho Snellman</span>

<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">)</span> #<span class="sym">-</span>gcl <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> do<span class="sym">-</span>moments <span class="sym">(</span>data n mean<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">)</span>
           <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float</span> mean<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span> data<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>average_deviation <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>standard_deviation <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>variance <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>skew <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>kurtosis <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>median <span class="num">0.0</span>d0<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float</span> mean average_deviation standard_deviation
			   variance skew kurtosis median<span class="sym">))</span>
    <span class="sym">(</span>loop for i fixnum from <span class="num">0</span> below n do
      <span class="sym">(</span>let<span class="sym">* ((</span>deviation <span class="sym">(- (</span>the double<span class="sym">-</span><span class="kwa">float</span> <span class="sym">(</span>aref data i<span class="sym">))</span> mean<span class="sym">))</span>
	     <span class="sym">(</span>deviation2 <span class="sym">(*</span> deviation deviation<span class="sym">))</span>
	     <span class="sym">(</span>deviation3 <span class="sym">(*</span> deviation deviation2<span class="sym">))</span>
	     <span class="sym">(</span>deviation4 <span class="sym">(*</span> deviation deviation3<span class="sym">)))</span>
	<span class="sym">(</span>incf average_deviation <span class="sym">(</span><span class="kwa">abs</span> deviation<span class="sym">))</span>
	<span class="sym">(</span>incf variance deviation2<span class="sym">)</span>
	<span class="sym">(</span>incf skew deviation3<span class="sym">)</span>
	<span class="sym">(</span>incf kurtosis deviation4<span class="sym">)))</span>

    <span class="sym">(</span><span class="kwa">setq</span> average_deviation <span class="sym">(/</span> average_deviation n<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">setq</span> variance <span class="sym">(/</span> variance <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">setq</span> standard_deviation <span class="sym">(</span><span class="kwa">sqrt</span> variance<span class="sym">))</span>

    <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> variance <span class="num">0.0</span>d0<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">setq</span> skew <span class="sym">(/</span> skew <span class="sym">(*</span> n variance standard_deviation<span class="sym">)))</span>
	   <span class="sym">(</span><span class="kwa">setq</span> kurtosis <span class="sym">(- (/</span> kurtosis <span class="sym">(* (</span>coerce n <span class="str">'double-float)</span>
<span class="str">					    variance variance))</span>
<span class="str">			     3.0d0))))</span>
<span class="str">    (setf data (sort data #'</span><span class="sym">&lt;))</span>
    <span class="sym">(</span>let <span class="sym">((</span>mid <span class="sym">(/</span> n <span class="num">2</span><span class="sym">)))</span>
      <span class="sym">(</span>declare <span class="sym">(</span>fixnum mid<span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">zerop</span> <span class="sym">(</span>mod n <span class="num">2</span><span class="sym">))</span>
	  <span class="sym">(</span><span class="kwa">setq</span> median <span class="sym">(/ (+ (</span>the double<span class="sym">-</span><span class="kwa">float</span> <span class="sym">(</span>aref data mid<span class="sym">))</span>
			     <span class="sym">(</span>the double<span class="sym">-</span><span class="kwa">float</span> <span class="sym">(</span>aref data <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> mid<span class="sym">))))</span>
			  <span class="num">2.0</span>d0<span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">setq</span> median <span class="sym">(</span>aref data mid<span class="sym">))))</span>
    <span class="sym">(</span>format t <span class="str">&quot;n:                  ~A~%&quot;</span> n<span class="sym">)</span>
    <span class="sym">(</span>format t <span class="str">&quot;median:             ~,6F~%&quot;</span> median<span class="sym">)</span>
    <span class="sym">(</span>format t <span class="str">&quot;mean:               ~,6F~%&quot;</span> mean<span class="sym">)</span>
    <span class="sym">(</span>format t <span class="str">&quot;average_deviation:  ~,6F~%&quot;</span> average_deviation<span class="sym">)</span>
    <span class="sym">(</span>format t <span class="str">&quot;standard_deviation: ~,6F~%&quot;</span> standard_deviation<span class="sym">)</span>
    <span class="sym">(</span>format t <span class="str">&quot;variance:           ~,6F~%&quot;</span> variance<span class="sym">)</span>
    <span class="sym">(</span>format t <span class="str">&quot;skew:               ~,6F~%&quot;</span> skew<span class="sym">)</span>
    <span class="sym">(</span>format t <span class="str">&quot;kurtosis:           ~,6F~%&quot;</span> kurtosis<span class="sym">)))</span>


<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let <span class="sym">((</span>buffer <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">4096</span><span class="sym">))</span>
	<span class="sym">(</span>start <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>end <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>result <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>char #\X<span class="sym">)</span>
	<span class="sym">(</span>stream <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*)</span>
	<span class="sym">(</span>eof<span class="sym">-</span>p nil<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>fixnum start end<span class="sym">)</span>
             <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float</span> result<span class="sym">))</span>
    <span class="sym">(</span>labels <span class="sym">((</span>get<span class="sym">-</span>char <span class="sym">()</span>
		       <span class="sym">(</span>when <span class="sym">(=</span> start end<span class="sym">)</span>
			 <span class="sym">(</span>setf start <span class="num">0</span><span class="sym">)</span>
			 <span class="sym">(</span>setf end <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>sequence buffer stream<span class="sym">))</span>
			 <span class="sym">(</span>when <span class="sym">(</span><span class="kwa">zerop</span> end<span class="sym">)</span>
			   <span class="sym">(</span>setf eof<span class="sym">-</span>p t<span class="sym">)</span>
			   <span class="sym">(</span>setf char #\Z<span class="sym">)</span> <span class="slc">;any non-digit will do</span>
			   <span class="sym">(</span>return<span class="sym">-</span>from get<span class="sym">-</span>char nil<span class="sym">)))</span>
		       <span class="sym">(</span>setf char <span class="sym">(</span>schar buffer start<span class="sym">))</span>
		       <span class="sym">(</span>incf start<span class="sym">))</span>
	     <span class="sym">(</span>get<span class="sym">-</span>dfloat <span class="sym">()</span><span class="slc">;; parse double float hack someone should rewrite this</span>
			 <span class="sym">(</span>let <span class="sym">((</span><span class="kwa">minusp</span> nil<span class="sym">)</span>
			       <span class="sym">(</span>expminusp nil<span class="sym">)</span>
			       <span class="sym">(</span>before<span class="sym">-</span>dp <span class="num">0</span><span class="sym">)</span>
			       <span class="sym">(</span>after<span class="sym">-</span>dp <span class="num">0</span><span class="sym">)</span>
			       <span class="sym">(</span>dec<span class="sym">-</span>digits <span class="num">0</span><span class="sym">)</span>
			       <span class="sym">(</span>exponent <span class="num">0</span><span class="sym">))</span>
			   <span class="sym">(</span>declare <span class="sym">(</span>fixnum before<span class="sym">-</span>dp after<span class="sym">-</span>dp exponent dec<span class="sym">-</span>digits<span class="sym">)</span>
				    <span class="sym">(</span>inline digit<span class="sym">-</span>char<span class="sym">-</span>p char<span class="sym">=))</span>
			   <span class="sym">(</span>loop <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">and</span>
					<span class="sym">(</span><span class="kwa">not</span>
					 <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(</span>char<span class="sym">=</span> #\- char<span class="sym">)</span>
						  <span class="sym">(</span><span class="kwa">setq minusp</span> t<span class="sym">))</span>
					     <span class="sym">(</span>digit<span class="sym">-</span>char<span class="sym">-</span>p char <span class="num">10</span><span class="sym">)))</span>
					<span class="sym">(</span>get<span class="sym">-</span>char<span class="sym">)))</span>
			   <span class="sym">(</span>loop
			     do <span class="sym">(</span>let <span class="sym">((</span>weight <span class="sym">(</span>digit<span class="sym">-</span>char<span class="sym">-</span>p char <span class="num">10</span><span class="sym">)))</span>
				  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span><span class="kwa">or null</span> fixnum<span class="sym">)</span> weight<span class="sym">))</span>
				  <span class="sym">(</span><span class="kwa">if</span> weight
				      <span class="sym">(</span><span class="kwa">setq</span> before<span class="sym">-</span>dp <span class="sym">(+</span> weight <span class="sym">(</span>the fixnum <span class="sym">(*</span> before<span class="sym">-</span>dp <span class="num">10</span><span class="sym">))))</span>
				    <span class="sym">(</span>return<span class="sym">)))</span>
			     until <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>get<span class="sym">-</span>char<span class="sym">)))</span>
			   <span class="sym">(</span><span class="kwa">if minusp</span> <span class="sym">(</span>setf before<span class="sym">-</span>dp <span class="sym">(-</span> before<span class="sym">-</span>dp<span class="sym">)))</span>
			   <span class="sym">(</span>when <span class="sym">(</span>char<span class="sym">=</span> #\. char<span class="sym">)</span>
			     <span class="sym">(</span>loop <span class="kwa">while</span> <span class="sym">(</span>get<span class="sym">-</span>char<span class="sym">)</span>
			       do <span class="sym">(</span>let <span class="sym">((</span>weight <span class="sym">(</span>digit<span class="sym">-</span>char<span class="sym">-</span>p char <span class="num">10</span><span class="sym">)))</span>
				    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span><span class="kwa">or null</span> <span class="sym">(</span>signed<span class="sym">-</span>byte <span class="num">32</span><span class="sym">))</span> weight<span class="sym">))</span>
				    <span class="sym">(</span><span class="kwa">if</span> weight
					<span class="sym">(</span><span class="kwa">setq</span> after<span class="sym">-</span>dp <span class="sym">(+</span> weight <span class="sym">(</span>the fixnum <span class="sym">(*</span> after<span class="sym">-</span>dp <span class="num">10</span><span class="sym">)))</span>
					      dec<span class="sym">-</span>digits <span class="sym">(</span>the fixnum <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> dec<span class="sym">-</span>digits<span class="sym">)))</span>
				      <span class="sym">(</span>return<span class="sym">)))))</span>
			   <span class="sym">(</span>when <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span>char<span class="sym">=</span> #\e char<span class="sym">) (</span>char<span class="sym">=</span> #\E char<span class="sym">))</span>
			     <span class="sym">(</span>get<span class="sym">-</span>char<span class="sym">)</span>
			     <span class="sym">(</span>when <span class="sym">(</span>char<span class="sym">=</span> #\- char<span class="sym">)</span>
			       <span class="sym">(</span><span class="kwa">setq</span> expminusp t<span class="sym">)</span>
			       <span class="sym">(</span>get<span class="sym">-</span>char<span class="sym">))</span>
			     <span class="sym">(</span>loop
			       do <span class="sym">(</span>let <span class="sym">((</span>weight <span class="sym">(</span>digit<span class="sym">-</span>char<span class="sym">-</span>p char <span class="num">10</span><span class="sym">)))</span>
				    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span><span class="kwa">or null</span> fixnum<span class="sym">)</span> weight<span class="sym">))</span>
				    <span class="sym">(</span><span class="kwa">if</span> weight
					<span class="sym">(</span><span class="kwa">setq</span> exponent <span class="sym">(+</span> weight <span class="sym">(</span>the fixnum <span class="sym">(*</span> exponent <span class="num">10</span><span class="sym">))))</span>
				      <span class="sym">(</span>return<span class="sym">)))</span>
			       until <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>get<span class="sym">-</span>char<span class="sym">)))</span>
			     <span class="sym">(</span><span class="kwa">if</span> expminusp <span class="sym">(</span>setf exponent <span class="sym">(-</span> exponent<span class="sym">))))</span>
			   <span class="sym">(</span><span class="kwa">setq</span> result
				 <span class="sym">(</span><span class="kwa">float</span> <span class="sym">(*</span>
					 <span class="sym">(+ (</span><span class="kwa">float</span> before<span class="sym">-</span>dp <span class="num">1.0</span>d0<span class="sym">)</span>
					    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">zerop</span> after<span class="sym">-</span>dp<span class="sym">)</span> <span class="num">0.0</span>d0
					      <span class="sym">(* (</span><span class="kwa">float</span> after<span class="sym">-</span>dp <span class="num">1.0</span>d0<span class="sym">)</span>
						 <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">zerop</span> dec<span class="sym">-</span>digits<span class="sym">)</span> <span class="num">1.0</span>d0
						   <span class="sym">(</span><span class="kwa">expt</span> <span class="num">10.0</span>d0 <span class="sym">(</span><span class="kwa">float</span> <span class="sym">(-</span> dec<span class="sym">-</span>digits<span class="sym">)</span> <span class="num">1.0</span>d0<span class="sym">))))))</span>
					 <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">zerop</span> exponent<span class="sym">)</span> <span class="num">1.0</span>d0
					   <span class="sym">(</span><span class="kwa">expt</span> <span class="num">10.0</span>d0 <span class="sym">(</span><span class="kwa">float</span> exponent <span class="num">1.0</span>d0<span class="sym">))))</span> <span class="num">1.0</span>d0<span class="sym">)))))</span>

      <span class="sym">(</span>let <span class="sym">((</span>sum <span class="num">0.0</span>d0<span class="sym">)</span>
	    nums <span class="sym">)</span>
	<span class="sym">(</span>declare <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float</span> sum<span class="sym">) (</span>inline vector<span class="sym">-</span>push<span class="sym">-</span>extend<span class="sym">))</span>
	<span class="sym">(</span>let<span class="sym">* ((</span>array<span class="sym">-</span>size <span class="num">10000</span><span class="sym">)</span>
	       <span class="sym">(</span>numbuffer <span class="sym">(</span>make<span class="sym">-</span>array array<span class="sym">-</span>size <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'double-float))</span>
<span class="str">	       (buflist (list numbuffer)) ;; Doug'</span>s idea put these together later
	       <span class="sym">(</span>fill<span class="sym">-</span>pointer <span class="num">0</span><span class="sym">))</span>
	  <span class="sym">(</span>loop
	    <span class="sym">(</span>get<span class="sym">-</span>dfloat<span class="sym">)</span>
	    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> eof<span class="sym">-</span>p<span class="sym">)</span>
		<span class="sym">(</span><span class="kwa">progn</span>
		  <span class="sym">(</span>incf sum result<span class="sym">)</span>
		  <span class="sym">(</span>setf <span class="sym">(</span>aref numbuffer fill<span class="sym">-</span>pointer<span class="sym">)</span> result<span class="sym">)</span>
		  <span class="sym">(</span>incf fill<span class="sym">-</span>pointer<span class="sym">)</span>
		  <span class="sym">(</span>when <span class="sym">(=</span> fill<span class="sym">-</span>pointer array<span class="sym">-</span>size<span class="sym">)</span>
		    <span class="sym">(</span>push
		     <span class="sym">(</span>setf numbuffer <span class="sym">(</span>make<span class="sym">-</span>array array<span class="sym">-</span>size <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'double-float))</span>
<span class="str">		     buflist)</span>
<span class="str">		    (setf fill-pointer 0)))</span>
<span class="str">	      (return)))</span>
<span class="str">	  (let* ((num-arrays (length buflist))</span>
<span class="str">		 (num-elem (+ (* (1- num-arrays) array-size) fill-pointer)))</span>
<span class="str">	    (setf nums (make-array  num-elem :element-type '</span>double<span class="sym">-</span><span class="kwa">float</span><span class="sym">))</span>
	    <span class="sym">(</span>locally <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span> nums<span class="sym">))</span>
		     <span class="sym">(</span>loop for i fixnum from <span class="num">0</span> to <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> num<span class="sym">-</span>arrays<span class="sym">)</span> do
		       <span class="sym">(</span>setf <span class="sym">(</span>subseq nums <span class="sym">(*</span> i array<span class="sym">-</span>size<span class="sym">))</span>
			     <span class="sym">(</span>the <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span>
			       <span class="sym">(</span>elt buflist <span class="sym">(- (</span><span class="num">1</span><span class="sym">-</span> num<span class="sym">-</span>arrays<span class="sym">)</span> i<span class="sym">)))))</span> <span class="slc">;;buflist is rev'd</span>
		     <span class="sym">(</span>do<span class="sym">-</span>moments nums num<span class="sym">-</span>elem <span class="sym">(/</span> sum num<span class="sym">-</span>elem<span class="sym">)))))))))</span>
