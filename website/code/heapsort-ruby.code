<span class="slc">#!/usr/bin/ruby
</span><span class="slc"># -*- mode: ruby -*-
</span><span class="slc"># $Id: heapsort-ruby.code,v 1.5 2005-03-31 10:40:24 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span>
IM = <span class="num">139968
</span>IA =   <span class="num">3877
</span>IC =  <span class="num">29573

</span>$last = <span class="num">42.0
</span><span class="kwa">def</span> gen_random <span class="sym">(</span>max<span class="sym">) (</span>max <span class="sym">* (</span>$last = <span class="sym">(</span>$last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> % IM<span class="sym">)) /</span> IM <span class="kwa">end

def</span> heapsort<span class="sym">(</span>n<span class="sym">,</span> ra<span class="sym">)
</span>    j = i = rra = <span class="num">0
</span>    l = <span class="sym">(</span>n <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1
</span>    ir = n

    <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">do
	if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">then
</span>	    rra = ra.at<span class="sym">(</span>l <span class="sym">-</span>= <span class="num">1</span><span class="sym">)
</span>	<span class="kwa">else
</span>	    rra = ra.at<span class="sym">(</span>ir<span class="sym">)
</span>	    ra<span class="sym">[</span>ir<span class="sym">]</span> = ra.at<span class="sym">(</span><span class="num">1</span><span class="sym">)
</span>	    <span class="kwa">if</span> <span class="sym">((</span>ir <span class="sym">-</span>= <span class="num">1</span><span class="sym">)</span> == <span class="num">1</span><span class="sym">)</span> <span class="kwa">then
</span>		ra<span class="sym">[</span><span class="num">1</span><span class="sym">]</span> = rra
		<span class="kwa">return
	    end
	end
</span>	i = l
	j = l <span class="sym">&lt;&lt;</span> <span class="num">1
</span>	<span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;</span>= ir<span class="sym">)</span> <span class="kwa">do
	    if</span> <span class="sym">((</span>j <span class="sym">&lt;</span> ir<span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>ra.at<span class="sym">(</span>j<span class="sym">) &lt;</span> ra.at<span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)))</span> <span class="kwa">then
</span>		j <span class="sym">+</span>= <span class="num">1
</span>	    <span class="kwa">end
	    if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra.at<span class="sym">(</span>j<span class="sym">))</span> <span class="kwa">then
</span>		ra<span class="sym">[</span>i<span class="sym">]</span> = ra.at<span class="sym">(</span>j<span class="sym">)
</span>		j <span class="sym">+</span>= <span class="sym">(</span>i = j<span class="sym">)
</span>	    <span class="kwa">else
</span>		j = ir <span class="sym">+</span> <span class="num">1
</span>	    <span class="kwa">end
	end
</span>	ra<span class="sym">[</span>i<span class="sym">]</span> = rra
    <span class="kwa">end
end

</span>N = Integer<span class="sym">(</span><span class="kwa">ARGV</span>.shift <span class="sym">||</span> <span class="num">1</span><span class="sym">)
</span>ary = Array.new<span class="sym">(</span>N<span class="sym">) {</span> gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">) }

</span>heapsort<span class="sym">(</span>N<span class="sym">,</span> ary<span class="sym">)

</span>printf <span class="str">&quot;%.10f\n&quot;</span><span class="sym">,</span> ary.at<span class="sym">(</span>N<span class="sym">)</span>
