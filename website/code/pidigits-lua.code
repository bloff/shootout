<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- contributed by Isaac Gouy
</span>
<span class="slc">-- requires BigNum library
</span><span class="slc">-- http://oss.digirati.com.br/luabignum/
</span>

require<span class="sym">(</span> <span class="str">&quot;BigNum.lua&quot;</span> <span class="sym">) ;

</span><span class="slc">-- Transformation
</span>
<span class="kwa">local</span> T <span class="sym">= {}

</span><span class="kwa">function</span> T.bigzero<span class="sym">()</span> <span class="kwa">return</span> BigNum.new<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">end
function</span> T.bigone<span class="sym">()</span> <span class="kwa">return</span> BigNum.new<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">end
function</span> T.bigten<span class="sym">()</span> <span class="kwa">return</span> BigNum.new<span class="sym">(</span><span class="num">10</span><span class="sym">)</span> <span class="kwa">end

function</span> T.new<span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">)
</span>   <span class="kwa">return</span> <span class="sym">{
</span>       q <span class="sym">=</span> BigNum.new<span class="sym">(</span>q<span class="sym">)
      ,</span>r <span class="sym">=</span> BigNum.new<span class="sym">(</span>r<span class="sym">)
      ,</span>s <span class="sym">=</span> BigNum.new<span class="sym">(</span>s<span class="sym">)
      ,</span>t <span class="sym">=</span> BigNum.new<span class="sym">(</span>t<span class="sym">)
      ,</span>k <span class="sym">=</span> <span class="num">0
</span>      <span class="sym">}
</span><span class="kwa">end

function</span> T.unity<span class="sym">()</span> <span class="kwa">return</span> T.new<span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">end
function</span> T.zero<span class="sym">()</span> <span class="kwa">return</span> T.new<span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">end

function</span> T.compose<span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">)
</span>   <span class="kwa">local</span> qq <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> qr <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> rt <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> qrrt <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> sq <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> ts <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> sqts <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> sr <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> tt <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> srtt <span class="sym">=</span> T.bigzero<span class="sym">()

</span>   BigNum.mul<span class="sym">(</span>a.q<span class="sym">,</span>b.q<span class="sym">,</span>qq<span class="sym">)

</span>   BigNum.mul<span class="sym">(</span>a.q<span class="sym">,</span>b.r<span class="sym">,</span>qr<span class="sym">)
</span>   BigNum.mul<span class="sym">(</span>a.r<span class="sym">,</span>b.t<span class="sym">,</span>rt<span class="sym">)
</span>   BigNum.add<span class="sym">(</span>qr<span class="sym">,</span>rt<span class="sym">,</span>qrrt<span class="sym">)

</span>   BigNum.mul<span class="sym">(</span>a.s<span class="sym">,</span>b.q<span class="sym">,</span>sq<span class="sym">)
</span>   BigNum.mul<span class="sym">(</span>a.t<span class="sym">,</span>b.s<span class="sym">,</span>ts<span class="sym">)
</span>   BigNum.add<span class="sym">(</span>sq<span class="sym">,</span>ts<span class="sym">,</span>sqts<span class="sym">)

</span>   BigNum.mul<span class="sym">(</span>a.s<span class="sym">,</span>b.r<span class="sym">,</span>sr<span class="sym">)
</span>   BigNum.mul<span class="sym">(</span>a.t<span class="sym">,</span>b.t<span class="sym">,</span>tt<span class="sym">)
</span>   BigNum.add<span class="sym">(</span>sr<span class="sym">,</span>tt<span class="sym">,</span>srtt<span class="sym">)

</span>   <span class="kwa">return</span> T.new<span class="sym">(</span>qq<span class="sym">,</span> qrrt<span class="sym">,</span> sqts<span class="sym">,</span> srtt<span class="sym">)
</span><span class="kwa">end


function</span> T.extract<span class="sym">(</span>a<span class="sym">,</span>j<span class="sym">)
</span>   <span class="kwa">local</span> bigj <span class="sym">=</span> BigNum.new<span class="sym">(</span>j<span class="sym">)
</span>   <span class="kwa">local</span> qj <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> qjr <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> sj <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> sjt <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> n <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> sjt <span class="sym">=</span> T.bigzero<span class="sym">()

</span>   BigNum.mul<span class="sym">(</span>a.q<span class="sym">,</span>bigj<span class="sym">,</span>qj<span class="sym">)
</span>   BigNum.add<span class="sym">(</span>qj<span class="sym">,</span>a.r<span class="sym">,</span>qjr<span class="sym">)

</span>   BigNum.mul<span class="sym">(</span>a.s<span class="sym">,</span>bigj<span class="sym">,</span>sj<span class="sym">)
</span>   BigNum.add<span class="sym">(</span>sj<span class="sym">,</span>a.t<span class="sym">,</span>sjt<span class="sym">)

</span>   <span class="kwa">local</span> d <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   <span class="kwa">local</span> r <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   BigNum.div<span class="sym">(</span>qjr<span class="sym">,</span>sjt<span class="sym">,</span>d<span class="sym">,</span>r<span class="sym">)

</span>   <span class="kwa">return</span> math.<span class="kwa">floor</span><span class="sym">(</span> <span class="kwa">tonumber</span><span class="sym">(</span> BigNum.mt.<span class="kwa">tostring</span><span class="sym">(</span>d<span class="sym">) ))
</span><span class="kwa">end

function</span> T.<span class="kwa">next</span><span class="sym">(</span>a<span class="sym">)
</span>   a.k <span class="sym">=</span> a.k <span class="sym">+</span> <span class="num">1
</span>   a.q <span class="sym">=</span> BigNum.new<span class="sym">(</span>a.k<span class="sym">)
</span>   a.r <span class="sym">=</span> BigNum.new<span class="sym">(</span><span class="num">4</span><span class="sym">*</span>a.k <span class="sym">+</span> <span class="num">2</span><span class="sym">)
</span>   a.s <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   a.t <span class="sym">=</span> BigNum.new<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>a.k <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span>   <span class="kwa">return</span> a
<span class="kwa">end


</span><span class="slc">-- Pi Digit Stream
</span>
<span class="kwa">local</span> P <span class="sym">= {}

</span><span class="kwa">function</span> P.new<span class="sym">()
</span>   <span class="kwa">return</span> <span class="sym">{
</span>       z <span class="sym">=</span> T.unity<span class="sym">()
      ,</span>x <span class="sym">=</span> T.zero<span class="sym">()
      ,</span>inverse <span class="sym">=</span> T.zero<span class="sym">()
      }
</span><span class="kwa">end

function</span> P.produce<span class="sym">(</span>a<span class="sym">,</span>j<span class="sym">)
</span>   <span class="kwa">local</span> i <span class="sym">=</span> a.inverse
   i.q <span class="sym">=</span> T.bigten<span class="sym">()
</span>   i.r <span class="sym">=</span> BigNum.new<span class="sym">(-</span><span class="num">10</span><span class="sym">*</span>j<span class="sym">)
</span>   i.s <span class="sym">=</span> T.bigzero<span class="sym">()
</span>   i.t <span class="sym">=</span> T.bigone<span class="sym">()
</span>   <span class="kwa">return</span> T.compose<span class="sym">(</span>i<span class="sym">,</span>a.z<span class="sym">)
</span><span class="kwa">end

function</span> P.consume<span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">)
</span>   <span class="kwa">return</span> T.compose<span class="sym">(</span>a.z<span class="sym">,</span>b<span class="sym">)
</span><span class="kwa">end

function</span> P.digit<span class="sym">(</span>a<span class="sym">)
</span>   <span class="kwa">return</span> T.extract<span class="sym">(</span>a.z<span class="sym">,</span><span class="num">3</span><span class="sym">)
</span><span class="kwa">end

function</span> P.isSafe<span class="sym">(</span>a<span class="sym">,</span>j<span class="sym">)
</span>   <span class="kwa">return</span> j <span class="sym">==</span> T.extract<span class="sym">(</span>a.z<span class="sym">,</span><span class="num">4</span><span class="sym">)
</span><span class="kwa">end

function</span> P.<span class="kwa">next</span><span class="sym">(</span>a<span class="sym">)
</span>   <span class="kwa">local</span> y
   y <span class="sym">=</span> P.digit<span class="sym">(</span>a<span class="sym">)
</span>   <span class="kwa">if</span> P.isSafe<span class="sym">(</span>a<span class="sym">,</span>y<span class="sym">)</span> <span class="kwa">then
</span>      a.z <span class="sym">=</span> P.produce<span class="sym">(</span>a<span class="sym">,</span>y<span class="sym">)
</span>      <span class="kwa">return</span> y
   <span class="kwa">else
</span>      a.z <span class="sym">=</span> P.consume<span class="sym">(</span>a<span class="sym">,</span>T.<span class="kwa">next</span><span class="sym">(</span>a.x<span class="sym">))
</span>      <span class="kwa">return</span> P.<span class="kwa">next</span><span class="sym">(</span>a<span class="sym">)
</span>   <span class="kwa">end
end


</span><span class="slc">-- Main
</span>
n <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">27
</span>i <span class="sym">=</span> <span class="num">0
</span>length <span class="sym">=</span> <span class="num">10
</span>pidigit <span class="sym">=</span> P.new<span class="sym">()

</span><span class="kwa">while</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">do
   if</span> n <span class="sym">&lt;</span> length <span class="kwa">then
      for</span> _ <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>n <span class="kwa">do</span> io.<span class="kwa">write</span><span class="sym">(</span> P.<span class="kwa">next</span><span class="sym">(</span>pidigit<span class="sym">) )</span> <span class="kwa">end
      for</span> _ <span class="sym">=</span> n<span class="sym">,</span>length <span class="kwa">do</span> io.<span class="kwa">write</span><span class="sym">(</span> <span class="str">' '</span> <span class="sym">)</span> <span class="kwa">end
</span>      i <span class="sym">=</span> i <span class="sym">+</span> n
   <span class="kwa">else
      for</span> _ <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>length <span class="kwa">do</span> io.<span class="kwa">write</span><span class="sym">(</span> P.<span class="kwa">next</span><span class="sym">(</span>pidigit<span class="sym">) )</span> <span class="kwa">end
</span>      i <span class="sym">=</span> i <span class="sym">+</span> length
   <span class="kwa">end
</span>   io.<span class="kwa">write</span><span class="sym">(</span><span class="str">'</span><span class="esc">\t</span><span class="str">:'</span><span class="sym">,</span> i<span class="sym">,</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)
</span>   n <span class="sym">=</span> n <span class="sym">-</span> length
<span class="kwa">end</span>
