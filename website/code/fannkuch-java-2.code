<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Klaus Friedel</span>
<span class="com">*/</span>

<span class="kwa">public class</span> fannkuch <span class="sym">{</span>
  <span class="kwa">final static class</span> Permutation<span class="sym">{</span>
    <span class="kwa">private final</span> <span class="kwb">byte</span> <span class="sym">[]</span> num<span class="sym">;</span>
    <span class="kwa">private final</span> <span class="kwb">int</span> n<span class="sym">;</span>

    <span class="kwd">Permutation</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
      <span class="kwa">this</span><span class="sym">.</span>n <span class="sym">=</span> n<span class="sym">;</span>
      <span class="kwa">this</span><span class="sym">.</span>num <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>n<span class="sym">];</span>
    <span class="sym">}</span>

    <span class="kwb">void</span> <span class="kwd">copyTo</span><span class="sym">(</span>Permutation p2<span class="sym">){</span>
      <span class="kwc">System</span><span class="sym">.</span><span class="kwd">arraycopy</span><span class="sym">(</span>num<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> p2<span class="sym">.</span>num<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> n<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwb">void</span> <span class="kwd">init</span><span class="sym">(){</span>
      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">byte</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> num<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">byte</span> <span class="kwd">get</span><span class="sym">(</span><span class="kwb">int</span> idx<span class="sym">){</span>
      <span class="kwa">return</span> num<span class="sym">[</span>idx<span class="sym">];</span>
    <span class="sym">}</span>

    <span class="kwb">byte</span> <span class="kwd">first</span><span class="sym">(){</span>
      <span class="kwa">return</span> num<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
    <span class="sym">}</span>

    <span class="slc">// rotate digit 0...r by one</span>
    <span class="kwb">void</span> <span class="kwd">rotate</span><span class="sym">(</span><span class="kwa">final</span> <span class="kwb">int</span> r<span class="sym">){</span>
      <span class="kwb">byte</span> fn <span class="sym">=</span> num<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">byte</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> r<span class="sym">;</span> i<span class="sym">++){</span>
        num<span class="sym">[</span>i<span class="sym">] =</span> num<span class="sym">[</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
      <span class="sym">}</span>
      num<span class="sym">[</span>r<span class="sym">] =</span> fn<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">void</span> <span class="kwd">reverse</span><span class="sym">(</span><span class="kwa">final</span> <span class="kwb">int</span> count<span class="sym">){</span>
      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">byte</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt; (</span>count<span class="sym">&gt;&gt;</span><span class="num">1</span><span class="sym">);</span> i<span class="sym">++){</span>
        <span class="kwb">byte</span> tmp <span class="sym">=</span> num<span class="sym">[</span>i<span class="sym">];</span>
        num<span class="sym">[</span>i<span class="sym">] =</span> num<span class="sym">[</span>count <span class="sym">-</span> i <span class="sym">-</span> <span class="num">1</span><span class="sym">];</span>
        num<span class="sym">[</span>count <span class="sym">-</span> i <span class="sym">-</span> <span class="num">1</span><span class="sym">] =</span> tmp<span class="sym">;</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwb">int</span> <span class="kwd">flipUntilDone</span><span class="sym">(){</span>
      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> flips <span class="sym">=</span> <span class="num">0</span><span class="sym">;;</span>flips<span class="sym">++){</span>
        <span class="kwa">final</span> <span class="kwb">byte</span> f <span class="sym">=</span> <span class="kwd">first</span><span class="sym">();</span>
        <span class="kwa">if</span><span class="sym">(</span>f <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> flips<span class="sym">;</span>
        <span class="kwd">reverse</span><span class="sym">((</span><span class="kwb">byte</span><span class="sym">) (</span>f <span class="sym">+</span> <span class="num">1</span><span class="sym">));</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwc">String</span> <span class="kwd">toString</span><span class="sym">() {</span>
      <span class="kwc">StringBuilder</span> s <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuilder</span><span class="sym">(</span><span class="num">30</span><span class="sym">);</span>
      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++){</span>
        s<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="kwd">get</span><span class="sym">(</span>i<span class="sym">) +</span> <span class="num">1</span><span class="sym">);</span>
      <span class="sym">}</span>
      <span class="kwa">return</span> s<span class="sym">.</span><span class="kwd">toString</span><span class="sym">();</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">static</span> <span class="kwb">long</span> <span class="kwd">fannkuch</span><span class="sym">(</span><span class="kwa">final</span> <span class="kwb">int</span> n<span class="sym">) {</span>
    Permutation perm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Permutation</span><span class="sym">(</span>n<span class="sym">);</span>
    Permutation perm1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Permutation</span><span class="sym">(</span>n<span class="sym">);</span>
    <span class="kwb">int</span><span class="sym">[]</span> count <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
    <span class="kwa">final</span> <span class="kwb">int</span> n1 <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
    perm1<span class="sym">.</span><span class="kwd">init</span><span class="sym">();</span>

    <span class="kwb">int</span> r <span class="sym">=</span> n<span class="sym">;</span>
    <span class="kwb">int</span> didpr <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> flipsMax <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(; ;) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>didpr <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">) {</span>
        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>perm1<span class="sym">.</span><span class="kwd">toString</span><span class="sym">());</span>
        didpr<span class="sym">++;</span>
      <span class="sym">}</span>

      <span class="kwa">for</span> <span class="sym">(;</span> r <span class="sym">!=</span> <span class="num">1</span><span class="sym">; --</span>r<span class="sym">)</span> count<span class="sym">[</span>r <span class="sym">-</span> <span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span>

      <span class="kwa">if</span> <span class="sym">(!(</span>perm1<span class="sym">.</span><span class="kwd">first</span><span class="sym">() ==</span> <span class="num">0</span> <span class="sym">||</span> perm1<span class="sym">.</span><span class="kwd">get</span><span class="sym">(</span>n1<span class="sym">) ==</span> n1<span class="sym">)) {</span>
        perm1<span class="sym">.</span><span class="kwd">copyTo</span><span class="sym">(</span>perm<span class="sym">);</span>
        <span class="kwb">int</span> flips <span class="sym">=</span> perm<span class="sym">.</span><span class="kwd">flipUntilDone</span><span class="sym">();</span>
        <span class="kwa">if</span> <span class="sym">(</span>flipsMax <span class="sym">&lt;</span> flips<span class="sym">) {</span>
          flipsMax <span class="sym">=</span> flips<span class="sym">;</span>
        <span class="sym">}</span>
      <span class="sym">}</span>

      <span class="kwa">for</span> <span class="sym">(; ;</span>r<span class="sym">++) {</span>
        <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span> <span class="kwa">return</span> flipsMax<span class="sym">;</span>
        <span class="com">/* rotate down perm1[0..r] by one */</span>
        perm1<span class="sym">.</span><span class="kwd">rotate</span><span class="sym">(</span>r<span class="sym">);</span>
        count<span class="sym">[</span>r<span class="sym">]--;</span>
        <span class="kwa">if</span> <span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="sym">}</span>
    <span class="sym">}</span>
  <span class="sym">}</span>


  <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {</span>
    <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">11</span><span class="sym">;</span>
    <span class="kwa">if</span><span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">fannkuch</span><span class="sym">((</span><span class="kwb">byte</span><span class="sym">)</span> n<span class="sym">));</span>
  <span class="sym">}</span>
<span class="sym">}</span>
