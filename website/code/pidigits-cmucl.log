BUILD COMMANDS FOR: pidigits.cmucl

Wed Sep 21 02:02:26 PDT 2005

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "pidigits.cmucl_compile")'
### START pidigits.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "pidigits.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END pidigits.cmucl_compile

; Loading #P"/opt/shootout/shootout/bench/pidigits/tmp/pidigits.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 21 SEP 05 02:02:28 am.
; Compiling: /opt/shootout/shootout/bench/pidigits/tmp/pidigits.cmucl 21 SEP 05 02:02:26 am

; Converted COMPUTE-PI.
; Converted COMP.
; Converted EXTR.
; Converted NEXT-STATE.
; Converted SAFE.
; Converted NEXT.
; Converted PROD.
; Converted CONSUME.
; Converted MAIN.
; Compiling DEFUN MAIN: 

; 
; 
; File: /opt/shootout/shootout/bench/pidigits/tmp/pidigits.cmucl

; In: DEFUN PROD

;   (* N -10)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The first argument is a NUMBER, not a INTEGER.
; 

; In: DEFUN COMP

;   (* (AREF A1 0) (AREF A2 0))
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The second argument is a NUMBER, not a INTEGER.
; 
;   (* (AREF A1 1) (AREF A2 2))
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The second argument is a NUMBER, not a INTEGER.
; 
;   (+ (* # #) (* # #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (* (AREF A1 0) (AREF A2 1))
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The second argument is a NUMBER, not a INTEGER.
; 
;   (* (AREF A1 1) (AREF A2 3))
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The second argument is a NUMBER, not a INTEGER.
; 
;   (+ (* # #) (* # #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (* (AREF A1 2) (AREF A2 0))
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The second argument is a NUMBER, not a INTEGER.
; 
;   (* (AREF A1 3) (AREF A2 2))
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The second argument is a NUMBER, not a INTEGER.
; 
;   (+ (* # #) (* # #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (* (AREF A1 2) (AREF A2 1))
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The second argument is a NUMBER, not a INTEGER.
; 
;   (* (AREF A1 3) (AREF A2 3))
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The second argument is a NUMBER, not a INTEGER.
; 
;   (+ (* # #) (* # #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN SAFE

;   (= N (FLOOR #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to open code because:
;     Operands might not be the same type.
; 
;   (FLOOR (EXTR Z 4))
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   (TRUNCATE NUMBER KERNEL::DIVISOR)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
;     The second argument is a REAL, not a (OR SINGLE-FLOAT
;                                              DOUBLE-FLOAT
;                                              INTEGER).
; 
; Note: Unable to convert division by 2^k to shift due to type uncertainty:
;     The first argument is a REAL, not a INTEGER.
;     The second argument is a REAL, not a INTEGER.
; 
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF AND IF 
; --> NOT IF ZEROP 
; ==>
;   (= REM 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; Note: Unable to open code because:
;     Operands might not be the same type.
; 
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF AND IF 
; --> AND IF MINUSP 
; ==>
;   (< KERNEL::DIVISOR 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF AND IF 
; --> AND IF PLUSP 
; ==>
;   (> NUMBER 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF AND IF 
; --> AND IF MINUSP 
; ==>
;   (< NUMBER 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF VALUES 
; ==>
;   (+ REM KERNEL::DIVISOR)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a RATIONAL.
;     The second argument is a REAL, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
;     The second argument is a REAL, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
; 

; In: DEFUN NEXT-STATE

;   (INCF (AREF *CURSTATE* 0))
; --> LET* 
; ==>
;   (+ (AREF #:G21 #:G20) #:G22)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (INCF (AREF *CURSTATE* 1) 4)
; --> LET* 
; ==>
;   (+ (AREF #:G25 #:G24) #:G26)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (INCF (AREF *CURSTATE* 3) 2)
; --> LET* 
; ==>
;   (+ (AREF #:G29 #:G28) #:G30)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN COMPUTE-PI

;   (>= DIGITS-OUT *STOP-DIGITS*)
; --> IF 
; ==>
;   (< DIGITS-OUT *STOP-DIGITS*)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
;     The second argument is a REAL, not a RATIONAL.
; 
;   (INCF DIGITS-OUT)
; --> LET* 
; ==>
;   (+ DIGITS-OUT #:G3)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
;   (ZEROP (MOD DIGITS-OUT *DIGITS-PER-LINE*))
; ==>
;   (= (MOD DIGITS-OUT *DIGITS-PER-LINE*) 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; Note: Unable to open code because:
;     Operands might not be the same type.
; 
;   (MOD DIGITS-OUT *DIGITS-PER-LINE*)
; --> BLOCK LET IF AND IF NOT IF ZEROP 
; ==>
;   (= REM 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; Note: Unable to open code because:
;     Operands might not be the same type.
; 
; --> BLOCK LET IF AND IF AND IF MINUSP 
; ==>
;   (< KERNEL::DIVISOR 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; --> BLOCK LET IF AND IF AND IF PLUSP 
; ==>
;   (> NUMBER 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; --> BLOCK LET IF AND IF AND IF MINUSP 
; ==>
;   (< NUMBER 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; --> BLOCK LET IF 
; ==>
;   (+ REM KERNEL::DIVISOR)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a RATIONAL.
;     The second argument is a REAL, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
;     The second argument is a REAL, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
; 
; --> BLOCK LET REM BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   (TRUNCATE NUMBER KERNEL::DIVISOR)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
;     The second argument is a REAL, not a (OR SINGLE-FLOAT
;                                              DOUBLE-FLOAT
;                                              INTEGER).
; 
; Note: Unable to convert division by 2^k to shift due to type uncertainty:
;     The first argument is a REAL, not a INTEGER.
;     The second argument is a REAL, not a INTEGER.
; 

; In: DEFUN NEXT-STATE

;   (INCF (AREF *CURSTATE* 3) 2)
; --> LET* LISP::%ASET LET* 
; ==>
;   (KERNEL:DATA-VECTOR-SET ARRAY KERNEL:INDEX C::NEW-VALUE)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
; --> LET* + AREF LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
;   (INCF (AREF *CURSTATE* 1) 4)
; --> LET* LISP::%ASET LET* 
; ==>
;   (KERNEL:DATA-VECTOR-SET ARRAY KERNEL:INDEX C::NEW-VALUE)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
; --> LET* + AREF LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
;   (INCF (AREF *CURSTATE* 0))
; --> LET* LISP::%ASET LET* 
; ==>
;   (KERNEL:DATA-VECTOR-SET ARRAY KERNEL:INDEX C::NEW-VALUE)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
; --> LET* + AREF LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 

; In: DEFUN COMP

;   (AREF A2 3)
; --> LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
;   (AREF A2 1)
; --> LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
;   (AREF A2 2)
; --> LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
;   (AREF A2 0)
; --> LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
;   (AREF A2 3)
; --> LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
;   (AREF A2 1)
; --> LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
;   (AREF A2 2)
; --> LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 
;   (AREF A2 0)
; --> LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; 

; In: DEFUN COMPUTE-PI

;   (>= DIGITS-OUT *STOP-DIGITS*)
; --> IF 
; ==>
;   (< DIGITS-OUT *STOP-DIGITS*)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline float comparison (cost 3) because:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
;     Unable to do inline float comparison (cost 3) because:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
;     etc.
; 

; In: DEFUN NEXT-STATE

;   (INCF (AREF *CURSTATE* 0))
; --> LET* 
; ==>
;   (+ (AREF #:G21 #:G20) #:G22)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
; --> LET* LISP::%ASET LET* 
; ==>
;   (KERNEL:DATA-VECTOR-SET ARRAY KERNEL:INDEX C::NEW-VALUE)
; Note: Forced to do full call.
;     Unable to do inline array store (cost 4) because:
;     The first argument is a VECTOR, not a (SIMPLE-ARRAY SINGLE-FLOAT (*)).
;     The third argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     Unable to do inline array store (cost 4) because:
;     The first argument is a VECTOR, not a (SIMPLE-ARRAY
;                                            (COMPLEX SINGLE-FLOAT) (*)).
;     The third argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The result is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     etc.
; 
;   (INCF (AREF *CURSTATE* 1) 4)
; --> LET* 
; ==>
;   (+ (AREF #:G25 #:G24) #:G26)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
; --> LET* LISP::%ASET LET* 
; ==>
;   (KERNEL:DATA-VECTOR-SET ARRAY KERNEL:INDEX C::NEW-VALUE)
; Note: Forced to do full call.
;     Unable to do inline array store (cost 4) because:
;     The first argument is a VECTOR, not a (SIMPLE-ARRAY SINGLE-FLOAT (*)).
;     The third argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     Unable to do inline array store (cost 4) because:
;     The first argument is a VECTOR, not a (SIMPLE-ARRAY
;                                            (COMPLEX SINGLE-FLOAT) (*)).
;     The third argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The result is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     etc.
; 
;   (INCF (AREF *CURSTATE* 3) 2)
; --> LET* 
; ==>
;   (+ (AREF #:G29 #:G28) #:G30)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
; --> LET* LISP::%ASET LET* 
; ==>
;   (KERNEL:DATA-VECTOR-SET ARRAY KERNEL:INDEX C::NEW-VALUE)
; Note: Forced to do full call.
;     Unable to do inline array store (cost 4) because:
;     The first argument is a VECTOR, not a (SIMPLE-ARRAY SINGLE-FLOAT (*)).
;     The third argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     Unable to do inline array store (cost 4) because:
;     The first argument is a VECTOR, not a (SIMPLE-ARRAY
;                                            (COMPLEX SINGLE-FLOAT) (*)).
;     The third argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The result is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     etc.
; 

; In: DEFUN COMPUTE-PI

;   (INCF DIGITS-OUT)
; --> LET* 
; ==>
;   (+ DIGITS-OUT #:G3)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a REAL, not a FIXNUM.
;     The result is a REAL, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a REAL, not a FIXNUM.
;     The result is a REAL, not a FIXNUM.
;     etc.
; 
;   (MOD DIGITS-OUT *DIGITS-PER-LINE*)
; --> BLOCK LET IF AND IF AND IF MINUSP 
; ==>
;   (< KERNEL::DIVISOR 0)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
; --> BLOCK LET IF AND IF AND IF PLUSP 
; ==>
;   (> NUMBER 0)
; Note: Forced to do GENERIC-> (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
; --> BLOCK LET IF AND IF AND IF MINUSP 
; ==>
;   (< NUMBER 0)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
; --> BLOCK LET IF 
; ==>
;   (+ REM KERNEL::DIVISOR)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
;     The result is a REAL, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
;     The result is a REAL, not a SINGLE-FLOAT.
;     etc.
; 

; In: DEFUN PROD

;   (* N -10)
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 3) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 

; In: DEFUN SAFE

;   (FLOOR (EXTR Z 4))
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF AND IF 
; --> AND IF MINUSP 
; ==>
;   (< KERNEL::DIVISOR 0)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF AND IF 
; --> AND IF PLUSP 
; ==>
;   (> NUMBER 0)
; Note: Forced to do GENERIC-> (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF AND IF 
; --> AND IF MINUSP 
; ==>
;   (< NUMBER 0)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF VALUES 1- 
; ==>
;   (- KERNEL::TRU 1)
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The result is a INTEGER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The result is a INTEGER, not a FIXNUM.
;     etc.
; 
; --> FLOOR BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL FUNCTION IF VALUES 
; ==>
;   (+ REM KERNEL::DIVISOR)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
;     The result is a REAL, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
;     The result is a REAL, not a SINGLE-FLOAT.
;     etc.
; 

; In: DEFUN EXTR

;   (* (AREF STATE 0) X)
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The result is a INTEGER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The result is a INTEGER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (+ (* # X) (AREF STATE 1))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The second argument is a INTEGER, not a FIXNUM.
;     The result is a INTEGER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The second argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The result is a INTEGER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (* (AREF STATE 2) X)
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The result is a INTEGER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The result is a INTEGER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (+ (* # X) (AREF STATE 3))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The second argument is a INTEGER, not a FIXNUM.
;     The result is a INTEGER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The second argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The result is a INTEGER, not a (SIGNED-BYTE 32).
;     etc.
; 

; In: DEFUN COMP

;   (* (AREF A1 0) (AREF A2 0))
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The second argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The second argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (* (AREF A1 1) (AREF A2 2))
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The second argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The second argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (+ (* # #) (* # #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 
;   (* (AREF A1 0) (AREF A2 1))
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The second argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The second argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (* (AREF A1 1) (AREF A2 3))
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The second argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The second argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (+ (* # #) (* # #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 
;   (* (AREF A1 2) (AREF A2 0))
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The second argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The second argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (* (AREF A1 3) (AREF A2 2))
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The second argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The second argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (+ (* # #) (* # #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 
;   (* (AREF A1 2) (AREF A2 1))
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The second argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The second argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (* (AREF A1 3) (AREF A2 3))
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The second argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a INTEGER, not a (SIGNED-BYTE 32).
;     The second argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (+ (* # #) (* # #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   165 notes


; pidigits.x86f written.
; Compilation finished in 0:00:01.
### START pidigits.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "pidigits.x86f" :verbose nil :print nil)
(main) (quit)
### END pidigits.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "pidigits.cmucl_run" :verbose nil :print nil)' %A
************************************************************
*   TEST (pidigits.cmucl_run) FAILED - ERROR:  pidigits.cmucl_out differs from Output.600
************************************************************
-rw-r--r--  1 brent brent  951 Sep 20 21:58 Output.600
-rw-r--r--  1 brent brent 1112 Sep 21 02:04 pidigits.cmucl_out
************************************************************
*   TEST (pidigits.cmucl_run) FAILED - ERROR:  pidigits.cmucl_out differs from Output.600
************************************************************
-rw-r--r--  1 brent brent  951 Sep 20 21:58 Output.600
-rw-r--r--  1 brent brent 1131 Sep 21 02:04 pidigits.cmucl_out


PROGRAM OUTPUT
==============
3141592653    :10
5897932384    :20
6264338327    :30
9502884197    :40
1693993751    :50
0582097494    :60
4592307816    :70
4062862089    :80
9862803482    :90
5342117067    :100
9821480865    :110
1328230664    :120
7093844609    :130
5505822317    :140
2535940812    :150
8481117450    :160
2841027019    :170
3852110555    :180
9644622948    :190
9549303819    :200
6442881097    :210
5665933446    :220
1284756482    :230
3378678316    :240
5271201909    :250
1456485669    :260
2346034861    :270
0454326648    :280
2133936072    :290
6024914127    :300
3724587006    :310
6063155881    :320
7488152092    :330
0962829254    :340
0917153643    :350
6789259036    :360
0011330530    :370
5488204665    :380
2138414695    :390
1941511609    :400
4330572703    :410
6575959195    :420
3092186117    :430
3819326117    :440
9310511854    :450
8074462379    :460
9627495673    :470
5188575272    :480
4891227938    :490
1830119491    :500
===================================
!!! Note: Truncated to 50 lines !!!
===================================
