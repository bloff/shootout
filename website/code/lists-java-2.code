<span class="slc">// $Id: lists-java-2.code,v 1.6 2005-12-08 06:38:39 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// from Stephen Darnell</span>

<span class="slc">//import java.io.*;		// XXX Not needed</span>
<span class="slc">//import java.util.*;	// XXX Replaced by private version</span>
<span class="slc">//import java.text.*;	// XXX Not needed</span>

<span class="kwa">public class</span> lists <span class="sym">{</span>

	<span class="slc">// XXX Make SIZE a final static</span>
    <span class="kwa">final static</span> <span class="kwb">int</span> SIZE <span class="sym">=</span> <span class="num">10000</span><span class="sym">;</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[])</span>
    <span class="sym">{</span>
		<span class="kwb">int</span> n <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
		<span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span>
		<span class="sym">{</span>
			n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
		<span class="sym">}</span>

		<span class="kwb">long</span> start <span class="sym">=</span> <span class="kwc">System</span><span class="sym">.</span><span class="kwd">currentTimeMillis</span><span class="sym">();</span>

		<span class="kwb">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {</span>
		    result <span class="sym">=</span> <span class="kwd">test_lists</span><span class="sym">();</span>
		<span class="sym">}</span>
		<span class="kwb">long</span> stop <span class="sym">=</span> <span class="kwc">System</span><span class="sym">.</span><span class="kwd">currentTimeMillis</span><span class="sym">();</span>

		<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>result<span class="sym">);</span>
		<span class="slc">// System.out.println(&quot;Took &quot;+(stop-start)+&quot; ms&quot;);</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">int</span> <span class="kwd">test_lists</span><span class="sym">() {</span>
	<span class="kwb">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="slc">// create a list of integers (Li1) from 1 to SIZE</span>
	<span class="kwc">LinkedList</span> Li1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> SIZE<span class="sym">+</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">++) {</span>
	    Li1<span class="sym">.</span><span class="kwd">addLast</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwd">LLEntry</span><span class="sym">(</span>i<span class="sym">));</span>
	<span class="sym">}</span>

<span class="slc">//	System.out.println(&quot;Li1 &quot;+Li1.size());</span>

	<span class="slc">// copy the list to Li2 (not by individual items)</span>
	<span class="kwc">LinkedList</span> Li2 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">(</span>Li1<span class="sym">);</span>
	<span class="kwc">LinkedList</span> Li3 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();</span>

<span class="slc">//	System.out.println(&quot;Li2 &quot;+Li2.size()+&quot; Li3 &quot;+Li3.size());</span>

	<span class="slc">// remove each individual item from left side of Li2 and</span>
	<span class="slc">// append to right side of Li3 (preserving order)</span>
	<span class="kwa">while</span> <span class="sym">(!</span> Li2<span class="sym">.</span><span class="kwd">isEmpty</span><span class="sym">()) {</span>
	    Li3<span class="sym">.</span><span class="kwd">addLast</span><span class="sym">(</span>Li2<span class="sym">.</span><span class="kwd">removeFirst</span><span class="sym">());</span>
	<span class="sym">}</span>

<span class="slc">//	System.out.println(&quot;Li2 &quot;+Li2.size()+&quot; Li3 &quot;+Li3.size());</span>

	<span class="slc">// Li2 must now be empty</span>
	<span class="slc">// remove each individual item from right side of Li3 and</span>
	<span class="slc">// append to right side of Li2 (reversing list)</span>
	<span class="kwa">while</span> <span class="sym">(!</span> Li3<span class="sym">.</span><span class="kwd">isEmpty</span><span class="sym">()) {</span>
	    Li2<span class="sym">.</span><span class="kwd">addLast</span><span class="sym">(</span>Li3<span class="sym">.</span><span class="kwd">removeLast</span><span class="sym">());</span>
	<span class="sym">}</span>

<span class="slc">//	System.out.println(&quot;Li2 &quot;+Li2.size()+&quot; Li3 &quot;+Li3.size());</span>

	<span class="slc">// Li3 must now be empty</span>
	<span class="slc">// reverse Li1</span>
	<span class="kwc">LinkedList</span> tmp <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();</span>
	<span class="kwa">while</span> <span class="sym">(!</span> Li1<span class="sym">.</span><span class="kwd">isEmpty</span><span class="sym">()) {</span>
	    tmp<span class="sym">.</span><span class="kwd">addFirst</span><span class="sym">(</span>Li1<span class="sym">.</span><span class="kwd">removeFirst</span><span class="sym">());</span>
	<span class="sym">}</span>
	Li1 <span class="sym">=</span> tmp<span class="sym">;</span>
	<span class="slc">// check that first item is now SIZE</span>
	<span class="kwa">if</span> <span class="sym">(</span>Li1<span class="sym">.</span><span class="kwd">getFirst</span><span class="sym">().</span>val <span class="sym">!=</span> SIZE<span class="sym">) {</span>
	    <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;first item of Li1 != SIZE&quot;</span><span class="sym">);</span>
	    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="slc">// compare Li1 and Li2 for equality</span>
	<span class="kwa">if</span> <span class="sym">(!</span> Li1<span class="sym">.</span><span class="kwd">equals</span><span class="sym">(</span>Li2<span class="sym">)) {</span>
	    <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;Li1 and Li2 differ&quot;</span><span class="sym">);</span>
	    <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;Li1:&quot;</span> <span class="sym">+</span> Li1<span class="sym">);</span>
	    <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;Li2:&quot;</span> <span class="sym">+</span> Li2<span class="sym">);</span>
	    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="slc">// return the length of the list</span>
	<span class="kwa">return</span><span class="sym">(</span>Li1<span class="sym">.</span><span class="kwd">size</span><span class="sym">());</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> LLEntry
<span class="sym">{</span>
	LLEntry prev<span class="sym">,</span> next<span class="sym">;</span>
	<span class="kwb">int</span> val<span class="sym">;</span>

	<span class="kwd">LLEntry</span><span class="sym">() { }</span>

	<span class="kwd">LLEntry</span><span class="sym">(</span><span class="kwb">int</span> value<span class="sym">) {</span>
		val <span class="sym">=</span> value<span class="sym">;</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwc">LinkedList</span> <span class="kwa">extends</span> LLEntry
<span class="sym">{</span>
	<span class="kwc">LinkedList</span><span class="sym">()</span>
	<span class="sym">{</span>
		next <span class="sym">=</span> prev <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwc">LinkedList</span><span class="sym">(</span> <span class="kwc">LinkedList</span> other <span class="sym">)</span>
	<span class="sym">{</span>
		<span class="kwa">this</span><span class="sym">();</span>

		LLEntry last <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;</span>
		<span class="kwa">for</span><span class="sym">(</span> LLEntry curr <span class="sym">=</span> other<span class="sym">.</span>next <span class="sym">;</span> curr <span class="sym">!=</span> other <span class="sym">;</span> curr <span class="sym">=</span> curr<span class="sym">.</span>next <span class="sym">)</span>
		<span class="sym">{</span>
			LLEntry entry <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">LLEntry</span><span class="sym">(</span>curr<span class="sym">.</span>val<span class="sym">);</span>
			last<span class="sym">.</span>next <span class="sym">=</span> entry<span class="sym">;</span>
			entry<span class="sym">.</span>prev <span class="sym">=</span> last<span class="sym">;</span>
			last <span class="sym">=</span> entry<span class="sym">;</span>
		<span class="sym">}</span>
		last<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;</span>
		<span class="kwa">this</span><span class="sym">.</span>prev <span class="sym">=</span> last<span class="sym">;</span>

		<span class="kwa">this</span><span class="sym">.</span>val <span class="sym">=</span> other<span class="sym">.</span>val<span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwb">boolean</span> <span class="kwd">isEmpty</span><span class="sym">()</span>
	<span class="sym">{</span>
		<span class="kwa">return</span> val <span class="sym">==</span> <span class="num">0</span><span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwb">void</span> <span class="kwd">addFirst</span><span class="sym">(</span> LLEntry entry <span class="sym">)</span>
	<span class="sym">{</span>
		entry<span class="sym">.</span>prev <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;</span>
		entry<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>next<span class="sym">;</span>
		<span class="kwa">this</span><span class="sym">.</span>next<span class="sym">.</span>prev <span class="sym">=</span> entry<span class="sym">;</span>
		<span class="kwa">this</span><span class="sym">.</span>next <span class="sym">=</span> entry<span class="sym">;</span>
		<span class="kwa">this</span><span class="sym">.</span>val<span class="sym">++;</span>
	<span class="sym">}</span>

	<span class="kwb">void</span> <span class="kwd">addLast</span><span class="sym">(</span> LLEntry entry <span class="sym">)</span>
	<span class="sym">{</span>
		entry<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;</span>
		entry<span class="sym">.</span>prev <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>prev<span class="sym">;</span>
		<span class="kwa">this</span><span class="sym">.</span>prev<span class="sym">.</span>next <span class="sym">=</span> entry<span class="sym">;</span>
		<span class="kwa">this</span><span class="sym">.</span>prev <span class="sym">=</span> entry<span class="sym">;</span>
		<span class="kwa">this</span><span class="sym">.</span>val<span class="sym">++;</span>
	<span class="sym">}</span>

	LLEntry <span class="kwd">removeFirst</span><span class="sym">()</span>
	<span class="sym">{</span>
		LLEntry entry <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>next<span class="sym">;</span>
		<span class="kwa">if</span> <span class="sym">(</span>entry <span class="sym">==</span> <span class="kwa">this</span><span class="sym">)</span>
			<span class="kwa">return</span> null<span class="sym">;</span>

		<span class="kwa">this</span><span class="sym">.</span>val<span class="sym">--;</span>
		<span class="kwa">this</span><span class="sym">.</span>next <span class="sym">=</span> entry<span class="sym">.</span>next<span class="sym">;</span>
		entry<span class="sym">.</span>next<span class="sym">.</span>prev <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;</span>
		<span class="kwa">return</span> entry<span class="sym">;</span>
	<span class="sym">}</span>

	LLEntry <span class="kwd">removeLast</span><span class="sym">()</span>
	<span class="sym">{</span>
		LLEntry entry <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>prev<span class="sym">;</span>
		<span class="kwa">if</span> <span class="sym">(</span>entry <span class="sym">==</span> <span class="kwa">this</span><span class="sym">)</span>
			<span class="kwa">return</span> null<span class="sym">;</span>

		<span class="kwa">this</span><span class="sym">.</span>val<span class="sym">--;</span>
		<span class="kwa">this</span><span class="sym">.</span>prev <span class="sym">=</span> entry<span class="sym">.</span>prev<span class="sym">;</span>
		entry<span class="sym">.</span>prev<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;</span>
		<span class="kwa">return</span> entry<span class="sym">;</span>
	<span class="sym">}</span>

	LLEntry <span class="kwd">getFirst</span><span class="sym">()</span>
	<span class="sym">{</span>
		<span class="kwa">return this</span><span class="sym">.</span>next<span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwb">int</span> <span class="kwd">size</span><span class="sym">()</span>
	<span class="sym">{</span>
<span class="slc">// Simple sanity checking code:</span>
<span class="slc">//		int n = 0;</span>
<span class="slc">//		for( LLEntry curr = this.next; curr != this ; curr = curr.next)</span>
<span class="slc">//		{</span>
<span class="slc">//			n++;</span>
<span class="slc">//		}</span>
<span class="slc">//		if (n != this.val)</span>
<span class="slc">//			throw new Error(&quot;size mismatch&quot;);</span>

		<span class="kwa">return this</span><span class="sym">.</span>val<span class="sym">;</span>
	<span class="sym">}</span>

	<span class="kwb">boolean</span> <span class="kwd">equals</span><span class="sym">(</span><span class="kwc">LinkedList</span> other<span class="sym">)</span>
	<span class="sym">{</span>
		LLEntry myItem <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;</span>
		LLEntry theirItem <span class="sym">=</span> other<span class="sym">;</span>
		<span class="kwa">do</span>
		<span class="sym">{</span>
			<span class="kwa">if</span> <span class="sym">(</span>myItem<span class="sym">.</span>val <span class="sym">!=</span> theirItem<span class="sym">.</span>val<span class="sym">)</span>
				<span class="kwa">return</span> false<span class="sym">;</span>
			theirItem <span class="sym">=</span> theirItem<span class="sym">.</span>next<span class="sym">;</span>
			myItem <span class="sym">=</span> myItem<span class="sym">.</span>next<span class="sym">;</span>
		<span class="sym">}</span>
		<span class="kwa">while</span><span class="sym">(</span>myItem <span class="sym">!=</span> <span class="kwa">this</span><span class="sym">);</span>
		<span class="kwa">return</span> true<span class="sym">;</span>
	<span class="sym">}</span>
<span class="sym">}</span>
