<span class="com">(* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy (Oberon-2 novice)</span>
<span class="com">   Line-by-line (more or less) translation of the C implemention.</span>
<span class="com">*)</span>


<span class="kwa">MODULE</span> lists<span class="sym">;</span>
<span class="kwa">IMPORT</span> Shootout<span class="sym">,</span> SYSTEM<span class="sym">,</span> Out<span class="sym">;</span>

<span class="kwa">CONST</span> size <span class="sym">=</span> <span class="num">10000</span><span class="sym">;</span>

<span class="kwa">TYPE</span>
   List <span class="sym">=</span> <span class="kwb">POINTER</span> <span class="kwa">TO</span> ListRec<span class="sym">;</span>
   ListRec <span class="sym">=</span> <span class="kwa">RECORD</span>
      val<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
      next<span class="sym">:</span> List<span class="sym">;</span>
      prev<span class="sym">:</span> List<span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>

<span class="kwa">VAR</span>
   n<span class="sym">,</span> result<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   l1<span class="sym">,</span> l2<span class="sym">,</span> l3<span class="sym">,</span> item<span class="sym">:</span> List<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">Length</span> <span class="sym">(</span>head<span class="sym">:</span> List<span class="sym">):</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">RETURN</span> head<span class="sym">.</span>val<span class="sym">;</span>
<span class="kwa">END</span> Length<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">Empty</span> <span class="sym">(</span>head<span class="sym">:</span> List<span class="sym">):</span> <span class="kwb">BOOLEAN</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">RETURN</span> <span class="kwd">Length</span><span class="sym">(</span>head<span class="sym">) =</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">END</span> Empty<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">First</span> <span class="sym">(</span>head<span class="sym">:</span> List<span class="sym">):</span> List<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">RETURN</span> head<span class="sym">.</span>next<span class="sym">;</span>
<span class="kwa">END</span> First<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">Last</span> <span class="sym">(</span>head<span class="sym">:</span> List<span class="sym">):</span> List<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">RETURN</span> head<span class="sym">.</span>prev<span class="sym">;</span>
<span class="kwa">END</span> Last<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">PushTail</span> <span class="sym">(</span><span class="kwa">VAR</span> head<span class="sym">:</span> List<span class="sym">;</span> item<span class="sym">:</span> List<span class="sym">);</span>
<span class="kwa">VAR</span> tail<span class="sym">:</span> List<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   tail <span class="sym">:=</span> head<span class="sym">.</span>prev<span class="sym">;</span>
   tail<span class="sym">.</span>next <span class="sym">:=</span> item<span class="sym">;</span>
   item<span class="sym">.</span>next <span class="sym">:=</span> head<span class="sym">;</span>
   head<span class="sym">.</span>prev <span class="sym">:=</span> item<span class="sym">;</span>
   item<span class="sym">.</span>prev <span class="sym">:=</span> tail<span class="sym">;</span>
   <span class="kwa">INC</span><span class="sym">(</span>head<span class="sym">.</span>val<span class="sym">);</span>
<span class="kwa">END</span> PushTail<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">PopTail</span> <span class="sym">(</span><span class="kwa">VAR</span> head<span class="sym">:</span> List<span class="sym">):</span> List<span class="sym">;</span>
<span class="kwa">VAR</span> prev<span class="sym">,</span> tail<span class="sym">:</span> List<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> <span class="kwd">Empty</span><span class="sym">(</span>head<span class="sym">)</span> <span class="kwa">THEN RETURN NIL</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
   tail <span class="sym">:=</span> head<span class="sym">.</span>prev<span class="sym">;</span>
   prev <span class="sym">:=</span> tail<span class="sym">.</span>prev<span class="sym">;</span>
   prev<span class="sym">.</span>next <span class="sym">:=</span> head<span class="sym">;</span>
   head<span class="sym">.</span>prev <span class="sym">:=</span> prev<span class="sym">;</span>
   <span class="kwa">DEC</span><span class="sym">(</span>head<span class="sym">.</span>val<span class="sym">);</span>
   <span class="kwa">RETURN</span> tail<span class="sym">;</span>
<span class="kwa">END</span> PopTail<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">PushHead</span> <span class="sym">(</span><span class="kwa">VAR</span> head<span class="sym">,</span> item<span class="sym">:</span> List<span class="sym">);</span> <span class="com">(* never used *)</span>
<span class="kwa">VAR</span> next<span class="sym">:</span> List<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   next <span class="sym">:=</span> head<span class="sym">.</span>next<span class="sym">;</span>
   head<span class="sym">.</span>next <span class="sym">:=</span> item<span class="sym">;</span>
   next<span class="sym">.</span>prev <span class="sym">:=</span> item<span class="sym">;</span>
   item<span class="sym">.</span>next <span class="sym">:=</span> next<span class="sym">;</span>
   item<span class="sym">.</span>prev <span class="sym">:=</span> head<span class="sym">;</span>
   <span class="kwa">INC</span><span class="sym">(</span>head<span class="sym">.</span>val<span class="sym">);</span>
<span class="kwa">END</span> PushHead<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">PopHead</span> <span class="sym">(</span><span class="kwa">VAR</span> head<span class="sym">:</span> List<span class="sym">):</span> List<span class="sym">;</span>
<span class="kwa">VAR</span> next<span class="sym">:</span> List<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> <span class="kwd">Empty</span><span class="sym">(</span>head<span class="sym">)</span> <span class="kwa">THEN RETURN NIL</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
   next <span class="sym">:=</span> head<span class="sym">.</span>next<span class="sym">;</span>
   head<span class="sym">.</span>next <span class="sym">:=</span> next<span class="sym">.</span>next<span class="sym">;</span>
   next<span class="sym">.</span>next<span class="sym">.</span>prev <span class="sym">:=</span> head<span class="sym">;</span>
   <span class="kwa">DEC</span><span class="sym">(</span>head<span class="sym">.</span>val<span class="sym">);</span>
   <span class="kwa">RETURN</span> next<span class="sym">;</span>
<span class="kwa">END</span> PopHead<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">Equal</span> <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">:</span> List<span class="sym">):</span> <span class="kwb">BOOLEAN</span><span class="sym">;</span>
<span class="kwa">VAR</span> xp<span class="sym">,</span> yp<span class="sym">:</span> List<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   xp <span class="sym">:=</span> x<span class="sym">;</span>
   yp <span class="sym">:=</span> y<span class="sym">;</span>
   <span class="kwa">WHILE</span> xp<span class="sym">.</span>next # x <span class="kwa">DO</span>
      <span class="kwa">IF</span> xp<span class="sym">.</span>val # yp<span class="sym">.</span>val <span class="kwa">THEN RETURN</span> FALSE<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
      xp <span class="sym">:=</span> xp<span class="sym">.</span>next<span class="sym">;</span>
      yp <span class="sym">:=</span> yp<span class="sym">.</span>next<span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">IF</span> xp<span class="sym">.</span>val # yp<span class="sym">.</span>val <span class="kwa">THEN RETURN</span> FALSE<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">RETURN</span>  yp<span class="sym">.</span>next <span class="sym">=</span> y<span class="sym">;</span>
<span class="kwa">END</span> Equal<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">Print</span> <span class="sym">(</span>msg<span class="sym">:</span> <span class="kwa">ARRAY OF</span> <span class="kwb">CHAR</span><span class="sym">;</span> x<span class="sym">:</span> List<span class="sym">);</span> <span class="com">(* never used *)</span>
<span class="kwa">VAR</span>
   xp<span class="sym">,</span> first<span class="sym">:</span> List<span class="sym">;</span>
   i<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   first <span class="sym">:=</span> x<span class="sym">.</span>next<span class="sym">;</span>
   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   xp <span class="sym">:=</span> x<span class="sym">.</span>next<span class="sym">;;</span>
   <span class="kwa">WHILE</span> xp<span class="sym">.</span>next # first <span class="kwa">DO</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span>msg<span class="sym">);</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;i:&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>i<span class="sym">,</span><span class="num">3</span><span class="sym">);</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;   v:&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>xp<span class="sym">.</span>val<span class="sym">,</span><span class="num">3</span><span class="sym">);</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;   n:&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>xp<span class="sym">.</span>next<span class="sym">.</span>val<span class="sym">,</span><span class="num">3</span><span class="sym">);</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;   p:&quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>xp<span class="sym">.</span>prev<span class="sym">.</span>val<span class="sym">,</span><span class="num">3</span><span class="sym">);</span>
      Out<span class="sym">.</span>Ln<span class="sym">;</span>
      <span class="kwa">INC</span><span class="sym">(</span>i<span class="sym">);</span>
      xp <span class="sym">:=</span> xp<span class="sym">.</span>next<span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;[last entry points to list head]&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;[val of next of tail is: &quot;</span><span class="sym">);</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>xp<span class="sym">.</span>next<span class="sym">.</span>val<span class="sym">,</span><span class="num">3</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;]&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
<span class="kwa">END</span> Print<span class="sym">;</span>



<span class="kwa">PROCEDURE</span> <span class="kwd">New</span> <span class="sym">():</span> List<span class="sym">;</span>
<span class="kwa">VAR</span> l<span class="sym">:</span> List<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">NEW</span><span class="sym">(</span>l<span class="sym">);</span>
   l<span class="sym">.</span>next <span class="sym">:=</span> l<span class="sym">;</span>
   l<span class="sym">.</span>prev <span class="sym">:=</span> l<span class="sym">;</span>
   l<span class="sym">.</span>val <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">RETURN</span> l<span class="sym">;</span>
<span class="kwa">END</span> New<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">Sequence</span> <span class="sym">(</span>from<span class="sym">,</span> to<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> List<span class="sym">;</span>
<span class="kwa">VAR</span>
   size<span class="sym">,</span> tmp<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   a<span class="sym">:</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY OF</span> ListRec<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   <span class="kwa">IF</span> from <span class="sym">&gt;</span> to <span class="kwa">THEN</span>
      tmp <span class="sym">:=</span> from<span class="sym">;</span> from <span class="sym">:=</span> to<span class="sym">;</span> to <span class="sym">:=</span> tmp<span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>
   size <span class="sym">:=</span> to <span class="sym">-</span> from <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

   <span class="kwa">NEW</span><span class="sym">(</span>a<span class="sym">,</span> size<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">DEC</span><span class="sym">(</span>from<span class="sym">);</span>
   j <span class="sym">:=</span> <span class="num">1</span><span class="sym">;</span>
   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> size<span class="sym">-</span><span class="num">1</span> <span class="kwa">DO</span>
      a<span class="sym">[</span>i<span class="sym">].</span>next <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">] ));</span>
      a<span class="sym">[</span>j<span class="sym">].</span>prev <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>j<span class="sym">-</span><span class="num">1</span><span class="sym">] ));</span>
      a<span class="sym">[</span>i<span class="sym">].</span>val <span class="sym">:=</span> from<span class="sym">;</span>
      <span class="kwa">INC</span><span class="sym">(</span>from<span class="sym">);</span>
      <span class="kwa">INC</span><span class="sym">(</span>j<span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>
   a<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>prev <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>size<span class="sym">] ));</span>
   a<span class="sym">[</span>size<span class="sym">].</span>next <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">] ));</span>
   a<span class="sym">[</span>size<span class="sym">].</span>prev <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>size<span class="sym">-</span><span class="num">1</span><span class="sym">] ));</span>
   a<span class="sym">[</span>size<span class="sym">].</span>val <span class="sym">:=</span> from<span class="sym">;</span>
   a<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>val <span class="sym">:=</span> size<span class="sym">;</span>
   <span class="kwa">RETURN</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">] ));</span>
<span class="kwa">END</span> Sequence<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">Copy</span> <span class="sym">(</span>x<span class="sym">:</span> List<span class="sym">):</span> List<span class="sym">;</span>
<span class="kwa">VAR</span>
   size<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   xp<span class="sym">:</span> List<span class="sym">;</span>
   a<span class="sym">:</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY OF</span> ListRec<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   size <span class="sym">:=</span> <span class="kwd">Length</span><span class="sym">(</span>x<span class="sym">);</span>
   <span class="kwa">NEW</span><span class="sym">(</span>a<span class="sym">,</span> size<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
   j <span class="sym">:=</span> <span class="num">1</span><span class="sym">;</span>
   xp <span class="sym">:=</span> x<span class="sym">;</span>
   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> size<span class="sym">-</span><span class="num">1</span> <span class="kwa">DO</span>
      a<span class="sym">[</span>i<span class="sym">].</span>next <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>j<span class="sym">] ));</span>
      a<span class="sym">[</span>j<span class="sym">].</span>prev <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>i<span class="sym">] ));</span>
      a<span class="sym">[</span>i<span class="sym">].</span>val <span class="sym">:=</span> xp<span class="sym">.</span>val<span class="sym">;</span>
      <span class="kwa">INC</span><span class="sym">(</span>j<span class="sym">);</span>
      xp <span class="sym">:=</span> xp<span class="sym">.</span>next<span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>
   a<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>prev <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>size<span class="sym">] ));</span>
   a<span class="sym">[</span>size<span class="sym">].</span>next <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">] ));</span>
   xp <span class="sym">:=</span> <span class="kwd">Last</span><span class="sym">(</span>x<span class="sym">);</span>
   a<span class="sym">[</span>size<span class="sym">].</span>val <span class="sym">:=</span> xp<span class="sym">.</span>val<span class="sym">;</span>
   <span class="kwa">RETURN</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">] ));</span>
<span class="kwa">END</span> Copy<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">Reverse</span> <span class="sym">(</span>head<span class="sym">:</span> List<span class="sym">);</span>
<span class="kwa">VAR</span> tmp<span class="sym">,</span> p<span class="sym">:</span> List<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   p <span class="sym">:=</span> head<span class="sym">;</span>
   <span class="kwa">REPEAT</span>
      tmp <span class="sym">:=</span> p<span class="sym">.</span>next<span class="sym">;</span>
      p<span class="sym">.</span>next <span class="sym">:=</span> p<span class="sym">.</span>prev<span class="sym">;</span>
      p<span class="sym">.</span>prev <span class="sym">:=</span> tmp<span class="sym">;</span>
      p <span class="sym">:=</span> tmp<span class="sym">;</span>
   <span class="kwa">UNTIL</span> p <span class="sym">=</span> head<span class="sym">;</span>
<span class="kwa">END</span> Reverse<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">TestLists</span> <span class="sym">():</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   l1 <span class="sym">:=</span> <span class="kwd">Sequence</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span>size<span class="sym">);</span> <span class="com">(* Print(&quot;L1 &quot;, l1); *)</span>
   l2 <span class="sym">:=</span> <span class="kwd">Copy</span><span class="sym">(</span>l1<span class="sym">);</span>         <span class="com">(* Print(&quot;L2 &quot;, l2); *)</span>
   l3 <span class="sym">:=</span> <span class="kwd">New</span><span class="sym">();</span>            <span class="com">(* Print(&quot;L3 &quot;, l3); *)</span>

   <span class="kwa">IF</span> ~<span class="kwd">Equal</span><span class="sym">(</span>l2<span class="sym">,</span> l1<span class="sym">)</span> <span class="kwa">THEN</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;l2 and l1 are not equal&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   <span class="kwa">WHILE</span> ~ <span class="kwd">Empty</span><span class="sym">(</span>l2<span class="sym">)</span> <span class="kwa">DO</span>
      <span class="kwd">PushTail</span><span class="sym">(</span>l3<span class="sym">,</span> <span class="kwd">PopHead</span><span class="sym">(</span>l2<span class="sym">));</span>
   <span class="kwa">END</span><span class="sym">;</span>
                           <span class="com">(* Print(&quot;L2 &quot;, l2);</span>
<span class="com">			      Print(&quot;L3 &quot;, l3); *)</span>
   <span class="kwa">IF</span> ~<span class="kwd">Empty</span><span class="sym">(</span>l2<span class="sym">)</span> <span class="kwa">THEN</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;l2 should be empty now&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   <span class="kwa">WHILE</span> ~ <span class="kwd">Empty</span><span class="sym">(</span>l3<span class="sym">)</span> <span class="kwa">DO</span>
      <span class="kwd">PushTail</span><span class="sym">(</span>l2<span class="sym">,</span> <span class="kwd">PopTail</span><span class="sym">(</span>l3<span class="sym">));</span>
   <span class="kwa">END</span><span class="sym">;</span>
                           <span class="com">(* Print(&quot;L2 &quot;, l2);</span>
<span class="com">			      Print(&quot;L3 &quot;, l3); *)</span>
   <span class="kwa">IF</span> ~<span class="kwd">Empty</span><span class="sym">(</span>l3<span class="sym">)</span> <span class="kwa">THEN</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;l3 should be empty now&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   <span class="kwd">Reverse</span><span class="sym">(</span>l1<span class="sym">);</span>            <span class="com">(* Print(&quot;L1 &quot;, l1); *)</span>

   item <span class="sym">:=</span> <span class="kwd">First</span><span class="sym">(</span>l1<span class="sym">);</span>
   <span class="kwa">IF</span> item<span class="sym">.</span>val # size <span class="kwa">THEN</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;L1 first value wrong, wanted &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>size<span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;, got &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>item<span class="sym">.</span>val<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   item <span class="sym">:=</span> <span class="kwd">Last</span><span class="sym">(</span>l1<span class="sym">);</span>
   <span class="kwa">IF</span> item<span class="sym">.</span>val # <span class="num">1</span> <span class="kwa">THEN</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;L1 last value wrong, wanted 1, got &quot;</span><span class="sym">);</span>
      Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>item<span class="sym">.</span>val<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   item <span class="sym">:=</span> <span class="kwd">First</span><span class="sym">(</span>l2<span class="sym">);</span>
   <span class="kwa">IF</span> item<span class="sym">.</span>val # size <span class="kwa">THEN</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;L2 first value wrong, wanted &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>size<span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;, got &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>item<span class="sym">.</span>val<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   item <span class="sym">:=</span> <span class="kwd">Last</span><span class="sym">(</span>l2<span class="sym">);</span>
   <span class="kwa">IF</span> item<span class="sym">.</span>val # <span class="num">1</span> <span class="kwa">THEN</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;L2 last value wrong, wanted 1, got &quot;</span><span class="sym">);</span>
      Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>item<span class="sym">.</span>val<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   <span class="kwa">IF</span> <span class="kwd">Length</span><span class="sym">(</span>l1<span class="sym">)</span> # size <span class="kwa">THEN</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;L1 size wrong, wanted &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>size<span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;, got &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span><span class="kwd">Length</span><span class="sym">(</span>l1<span class="sym">),</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   <span class="kwa">IF</span> ~<span class="kwd">Equal</span><span class="sym">(</span>l1<span class="sym">,</span> l2<span class="sym">)</span> <span class="kwa">THEN</span>
      Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;l1 and l2 are not equal&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   <span class="kwa">RETURN</span> <span class="kwd">Length</span><span class="sym">(</span>l1<span class="sym">);</span>
<span class="kwa">END</span> TestLists<span class="sym">;</span>


<span class="kwa">BEGIN</span>
   n <span class="sym">:=</span> Shootout<span class="sym">.</span><span class="kwd">Argi</span><span class="sym">();</span>
   result <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">WHILE</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">DO</span>
      result <span class="sym">:=</span> <span class="kwd">TestLists</span><span class="sym">();</span>
      <span class="kwa">DEC</span><span class="sym">(</span>n<span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>result<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
<span class="kwa">END</span> lists<span class="sym">.</span>
