<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: hash-gcl.code,v 1.9 2006-03-30 16:07:14 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; from Paul Foley</span>
<span class="slc">;;; Multi-lisp modifications by Brent Fulgham</span>
<span class="slc">;;; Enhanced by Juho Snellman</span>

<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)</span> #<span class="sym">-</span>gcl <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))</span>
<span class="sym">(</span><span class="kwa">defun command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>argument <span class="sym">()</span>
  <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
                                #<span class="sym">+</span>cmu  ext<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
				#<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">)))</span>


<span class="sym">(</span>defconstant <span class="sym">+</span>digit<span class="sym">+</span> <span class="str">&quot;0123456789ABCDEF&quot;</span><span class="sym">)</span>

<span class="sym">(</span>defconstant <span class="sym">+</span>digits<span class="sym">-</span>needed<span class="sym">+</span>
  #<span class="sym">((</span><span class="num">10 100 1000 10000 100000 10000000 100000000 536870911</span><span class="sym">)</span>
    <span class="sym">(</span><span class="num">16 256 4096 65536 1048576 16777216 268435456 4294967296 536870911</span><span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> fixnum<span class="sym">-</span>to<span class="sym">-</span>string <span class="sym">(</span>n base<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum n base<span class="sym">))</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>size <span class="sym">(</span>position<span class="sym">-</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x<span class="sym">) (&gt; (</span>the fixnum x<span class="sym">)</span> n<span class="sym">))</span>
			    <span class="sym">(</span>the <span class="sym">(</span>simple<span class="sym">-</span>array integer<span class="sym">)</span>
                                 <span class="sym">(</span>aref <span class="sym">+</span>digits<span class="sym">-</span>needed<span class="sym">+ (</span>ash base <span class="sym">-</span><span class="num">4</span><span class="sym">)))))</span>
	 <span class="sym">(</span>result <span class="sym">(</span>make<span class="sym">-</span>string <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> size<span class="sym">))))</span>
    <span class="sym">(</span>loop for i fixnum from size downto <span class="num">0</span> with q fixnum <span class="sym">=</span> n <span class="kwa">and</span> r fixnum <span class="sym">=</span> <span class="num">0</span>
      do <span class="sym">(</span>multiple<span class="sym">-</span>value<span class="sym">-</span><span class="kwa">setq</span> <span class="sym">(</span>q r<span class="sym">) (</span>floor q base<span class="sym">))</span>
         <span class="sym">(</span>setf <span class="sym">(</span>schar result i<span class="sym">) (</span>aref <span class="sym">+</span>digit<span class="sym">+</span> r<span class="sym">)))</span>
    result<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">(&amp;</span>optional <span class="sym">(</span>n <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>argument<span class="sym">)))</span>
  <span class="sym">(</span>let <span class="sym">((</span>hash <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>test <span class="str">'equal :size n)))</span>
<span class="str">    (macrolet ((hash (i base) `(gethash (fixnum-to-string ,i ,base) hash)))</span>
<span class="str">      (loop for i fixnum from 1 to n do (setf (hash i 16) i))</span>
<span class="str">      (format t &quot;~a~%&quot; (loop for i fixnum from n downto 1 count (hash i 10))))))</span>
