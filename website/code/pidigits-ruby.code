<span class="slc"># The Great Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by Gabriele Renzi</span>

<span class="kwa">class</span> PiDigitSpigot

    <span class="kwa">def</span> <span class="kwd">initialize</span><span class="sym">(</span>)
        &#64;z = Transformation<span class="sym">.</span>new <span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span>
        &#64;x = Transformation<span class="sym">.</span>new <span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span>
        &#64;inverse = Transformation<span class="sym">.</span>new <span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span>
    <span class="kwa">end</span>

    <span class="kwa">def next</span><span class="sym">!</span>
        &#64;y = &#64;z<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span><span class="num">3</span>)
        <span class="kwa">if</span> safe? &#64;y
            &#64;z = <span class="kwd">produce</span><span class="sym">(</span>&#64;y)
            &#64;y
        <span class="kwa">else</span>
            &#64;z = consume &#64;x<span class="sym">.</span><span class="kwa">next</span><span class="sym">!(</span>)
            <span class="kwa">next</span><span class="sym">!(</span>)
        <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="kwa">def</span> safe?<span class="sym">(</span>digit)
        digit == &#64;z<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span><span class="num">4</span>)
    <span class="kwa">end</span>

    <span class="kwa">def</span> <span class="kwd">produce</span><span class="sym">(</span>i)
        &#64;inverse<span class="sym">.</span><span class="kwd">qrst</span><span class="sym">(</span><span class="num">10</span><span class="sym">,-</span><span class="num">10</span><span class="sym">*</span>i<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span>)<span class="sym">.</span><span class="kwd">compose</span><span class="sym">(</span>&#64;z)
    <span class="kwa">end</span>

    <span class="kwa">def</span> <span class="kwd">consume</span><span class="sym">(</span>a)
        &#64;z<span class="sym">.</span><span class="kwd">compose</span><span class="sym">(</span>a)
    <span class="kwa">end</span>
<span class="kwa">end</span>


<span class="kwa">class</span> Transformation
    attr_reader <span class="sym">:</span>q<span class="sym">, :</span>r<span class="sym">, :</span>s<span class="sym">, :</span>t
    <span class="kwa">def</span> <span class="kwd">initialize</span> <span class="sym">(</span>q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t)
        &#64;q<span class="sym">,</span>&#64;r<span class="sym">,</span>&#64;s<span class="sym">,</span>&#64;t<span class="sym">,</span>&#64;k = q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">,</span><span class="num">0</span>
    <span class="kwa">end</span>

    <span class="kwa">def next</span><span class="sym">!(</span>)
        &#64;q = &#64;k = &#64;k <span class="sym">+</span> <span class="num">1</span>
        &#64;r = <span class="num">4</span> <span class="sym">*</span> &#64;k <span class="sym">+</span> <span class="num">2</span>
        &#64;s = <span class="num">0</span>
        &#64;t = <span class="num">2</span> <span class="sym">*</span> &#64;k <span class="sym">+</span> <span class="num">1</span>
        <span class="kwa">self</span>
    <span class="kwa">end</span>

    <span class="kwa">def</span> <span class="kwd">extract</span><span class="sym">(</span>j)
        <span class="sym">(</span>&#64;q <span class="sym">*</span> j <span class="sym">+</span> &#64;r) <span class="sym">/ (</span>&#64;s <span class="sym">*</span> j <span class="sym">+</span> &#64;t)
    <span class="kwa">end</span>

    <span class="kwa">def</span> <span class="kwd">compose</span><span class="sym">(</span>a)
        <span class="kwa">self</span><span class="sym">.</span><span class="kwa">class</span><span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span> &#64;q <span class="sym">*</span> a<span class="sym">.</span>q<span class="sym">,</span>
                        &#64;q <span class="sym">*</span> a<span class="sym">.</span>r <span class="sym">+</span> r <span class="sym">*</span> a<span class="sym">.</span>t<span class="sym">,</span>
                        &#64;s <span class="sym">*</span> a<span class="sym">.</span>q <span class="sym">+</span> t <span class="sym">*</span> a<span class="sym">.</span>s<span class="sym">,</span>
                        &#64;s <span class="sym">*</span> a<span class="sym">.</span>r <span class="sym">+</span> t <span class="sym">*</span> a<span class="sym">.</span>t
                    )
    <span class="kwa">end</span>

    <span class="kwa">def</span> qrst <span class="sym">*</span>args
        initialize <span class="sym">*</span>args
        <span class="kwa">self</span>
    <span class="kwa">end</span>


<span class="kwa">end</span>


WIDTH = <span class="num">10</span>
n = <span class="kwd">Integer</span><span class="sym">(</span><span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">]</span>)
j = <span class="num">0</span>

digits = PiDigitSpigot<span class="sym">.</span>new

<span class="kwa">while</span> n <span class="sym">&gt;</span> <span class="num">0</span>
    <span class="kwa">if</span> n <span class="sym">&gt;</span>= WIDTH
        WIDTH<span class="sym">.</span>times <span class="sym">{</span>print digits<span class="sym">.</span><span class="kwa">next</span><span class="sym">!}</span>
        j <span class="sym">+</span>= WIDTH
    <span class="kwa">else</span>
        n<span class="sym">.</span>times <span class="sym">{</span>print digits<span class="sym">.</span><span class="kwa">next</span><span class="sym">!}</span>
        <span class="sym">(</span>WIDTH-n)<span class="sym">.</span>times <span class="sym">{</span>print <span class="str">&quot; &quot;</span><span class="sym">}</span>
        j <span class="sym">+</span>= n
    <span class="kwa">end</span>
    puts <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">+</span>j<span class="sym">.</span>to_s
    n <span class="sym">-</span>= WIDTH
<span class="kwa">end</span>

