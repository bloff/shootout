<span class="line">    1 </span><span class="slc">// $Id: except-csharp.code,v 1.3 2004-11-11 07:13:57 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// contributed by Erik Saltwell
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">// Some clean-ups based on suggestions by Isaac Gouy
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="kwa">using</span> System<span class="sym">;
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym"></span><span class="kwc">class</span> LoException <span class="sym">:</span> System<span class="sym">.</span>Exception
<span class="line">    9 </span><span class="sym">{
</span><span class="line">   10 </span><span class="sym"></span>    <span class="kwc">public</span> LoException<span class="sym">() {}
</span><span class="line">   11 </span><span class="sym">}
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span><span class="kwc">class</span> HiException <span class="sym">:</span> System<span class="sym">.</span>Exception
<span class="line">   14 </span><span class="sym">{
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwc">public</span> HiException<span class="sym">() {}
</span><span class="line">   16 </span><span class="sym">}
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span><span class="kwc">public class</span> except
<span class="line">   19 </span><span class="sym">{
</span><span class="line">   20 </span><span class="sym"></span>    <span class="kwb">static int</span> Lo <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwb">static int</span> Hi <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>    <span class="kwb">static int</span> count<span class="sym">=</span><span class="num">0</span><span class="sym">;
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
</span><span class="line">   25 </span><span class="sym">    {
</span><span class="line">   26 </span><span class="sym"></span>        <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwb">int</span><span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   27 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span>count<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> count<span class="sym">&lt;</span>n<span class="sym">;</span> count<span class="sym">++)
</span><span class="line">   28 </span><span class="sym">        {
</span><span class="line">   29 </span><span class="sym"></span>            SomeFunction<span class="sym">();
</span><span class="line">   30 </span><span class="sym">        }
</span><span class="line">   31 </span><span class="sym"></span>        Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Exceptions: HI={0} / LO={1}&quot;</span><span class="sym">,</span> Hi<span class="sym">,</span> Lo<span class="sym">);
</span><span class="line">   32 </span><span class="sym">    }
</span><span class="line">   33 </span><span class="sym">
</span><span class="line">   34 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">static void</span> SomeFunction<span class="sym">()
</span><span class="line">   35 </span><span class="sym">    {
</span><span class="line">   36 </span><span class="sym"></span>        <span class="kwa">try
</span><span class="line">   37 </span><span class="kwa"></span>        <span class="sym">{
</span><span class="line">   38 </span><span class="sym"></span>            HiFunction<span class="sym">();
</span><span class="line">   39 </span><span class="sym">        }
</span><span class="line">   40 </span><span class="sym"></span>        <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">)
</span><span class="line">   41 </span><span class="sym">        {
</span><span class="line">   42 </span><span class="sym"></span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;We shouldn't get here: {0}&quot;</span><span class="sym">,</span> e<span class="sym">.</span>Message<span class="sym">);
</span><span class="line">   43 </span><span class="sym">        }
</span><span class="line">   44 </span><span class="sym">    }
</span><span class="line">   45 </span><span class="sym">
</span><span class="line">   46 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">static void</span> HiFunction<span class="sym">()
</span><span class="line">   47 </span><span class="sym">    {
</span><span class="line">   48 </span><span class="sym"></span>        <span class="kwa">try
</span><span class="line">   49 </span><span class="kwa"></span>        <span class="sym">{
</span><span class="line">   50 </span><span class="sym"></span>            LoFunction<span class="sym">();
</span><span class="line">   51 </span><span class="sym">        }
</span><span class="line">   52 </span><span class="sym"></span>        <span class="kwa">catch</span> <span class="sym">(</span>HiException<span class="sym">)
</span><span class="line">   53 </span><span class="sym">        {
</span><span class="line">   54 </span><span class="sym"></span>            Hi<span class="sym">++;
</span><span class="line">   55 </span><span class="sym">        }
</span><span class="line">   56 </span><span class="sym">    }
</span><span class="line">   57 </span><span class="sym">
</span><span class="line">   58 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">static void</span> LoFunction<span class="sym">()
</span><span class="line">   59 </span><span class="sym">    {
</span><span class="line">   60 </span><span class="sym"></span>        <span class="kwa">try
</span><span class="line">   61 </span><span class="kwa"></span>        <span class="sym">{
</span><span class="line">   62 </span><span class="sym"></span>            BlowUp<span class="sym">();
</span><span class="line">   63 </span><span class="sym">        }
</span><span class="line">   64 </span><span class="sym"></span>        <span class="kwa">catch</span> <span class="sym">(</span>LoException<span class="sym">)
</span><span class="line">   65 </span><span class="sym">        {
</span><span class="line">   66 </span><span class="sym"></span>            Lo<span class="sym">++;
</span><span class="line">   67 </span><span class="sym">        }
</span><span class="line">   68 </span><span class="sym">    }
</span><span class="line">   69 </span><span class="sym">
</span><span class="line">   70 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">static void</span> BlowUp<span class="sym">()
</span><span class="line">   71 </span><span class="sym">    {
</span><span class="line">   72 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">((</span>count <span class="sym">&amp;</span> <span class="num">1</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   73 </span><span class="sym">        {
</span><span class="line">   74 </span><span class="sym"></span>            <span class="kwa">throw new</span> LoException<span class="sym">();
</span><span class="line">   75 </span><span class="sym">        }
</span><span class="line">   76 </span><span class="sym"></span>        <span class="kwa">else
</span><span class="line">   77 </span><span class="kwa"></span>        <span class="sym">{
</span><span class="line">   78 </span><span class="sym"></span>            <span class="kwa">throw new</span> HiException<span class="sym">();
</span><span class="line">   79 </span><span class="sym">        }
</span><span class="line">   80 </span><span class="sym">    }
</span><span class="line">   81 </span><span class="sym">}</span>
