<span class="slc">// $Id: except-csharp.code,v 1.10 2005-09-20 04:14:20 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org
</span><span class="slc">// contributed by Erik Saltwell
</span><span class="slc">// Some clean-ups based on suggestions by Isaac Gouy
</span>
<span class="kwa">using</span> System<span class="sym">;

</span><span class="kwc">class</span> LoException <span class="sym">:</span> System<span class="sym">.</span>Exception
<span class="sym">{
</span>    <span class="kwc">public</span> LoException<span class="sym">() {}
}

</span><span class="kwc">class</span> HiException <span class="sym">:</span> System<span class="sym">.</span>Exception
<span class="sym">{
</span>    <span class="kwc">public</span> HiException<span class="sym">() {}
}

</span><span class="kwc">public class</span> except
<span class="sym">{
</span>    <span class="kwb">static int</span> Lo <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwb">static int</span> Hi <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwb">static int</span> count<span class="sym">=</span><span class="num">0</span><span class="sym">;

</span>    <span class="kwc">public</span> <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
    {
</span>        <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwb">int</span><span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>        <span class="kwa">for</span> <span class="sym">(</span>count<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> count<span class="sym">&lt;</span>n<span class="sym">;</span> count<span class="sym">++)
        {
</span>            SomeFunction<span class="sym">();
        }
</span>        Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Exceptions: HI={0} / LO={1}&quot;</span><span class="sym">,</span> Hi<span class="sym">,</span> Lo<span class="sym">);
    }

</span>    <span class="kwc">public</span> <span class="kwb">static void</span> SomeFunction<span class="sym">()
    {
</span>        <span class="kwa">try
</span>        <span class="sym">{
</span>            HiFunction<span class="sym">();
        }
</span>        <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">)
        {
</span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;We shouldn't get here: {0}&quot;</span><span class="sym">,</span> e<span class="sym">.</span>Message<span class="sym">);
        }
    }

</span>    <span class="kwc">public</span> <span class="kwb">static void</span> HiFunction<span class="sym">()
    {
</span>        <span class="kwa">try
</span>        <span class="sym">{
</span>            LoFunction<span class="sym">();
        }
</span>        <span class="kwa">catch</span> <span class="sym">(</span>HiException<span class="sym">)
        {
</span>            Hi<span class="sym">++;
        }
    }

</span>    <span class="kwc">public</span> <span class="kwb">static void</span> LoFunction<span class="sym">()
    {
</span>        <span class="kwa">try
</span>        <span class="sym">{
</span>            BlowUp<span class="sym">();
        }
</span>        <span class="kwa">catch</span> <span class="sym">(</span>LoException<span class="sym">)
        {
</span>            Lo<span class="sym">++;
        }
    }

</span>    <span class="kwc">public</span> <span class="kwb">static void</span> BlowUp<span class="sym">()
    {
</span>        <span class="kwa">if</span> <span class="sym">((</span>count <span class="sym">&amp;</span> <span class="num">1</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">)
        {
</span>            <span class="kwa">throw new</span> LoException<span class="sym">();
        }
</span>        <span class="kwa">else
</span>        <span class="sym">{
</span>            <span class="kwa">throw new</span> HiException<span class="sym">();
        }
    }
}</span>
