<span class="slc">// $Id: except-csharp.code,v 1.13 2006-01-16 06:51:02 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org</span>
<span class="slc">// contributed by Erik Saltwell</span>
<span class="slc">// Some clean-ups based on suggestions by Isaac Gouy</span>

<span class="kwa">using</span> System<span class="sym">;</span>

<span class="kwc">class</span> LoException <span class="sym">:</span> System<span class="sym">.</span>Exception
<span class="sym">{</span>
    <span class="kwc">public</span> <span class="kwd">LoException</span><span class="sym">() {}</span>
<span class="sym">}</span>

<span class="kwc">class</span> HiException <span class="sym">:</span> System<span class="sym">.</span>Exception
<span class="sym">{</span>
    <span class="kwc">public</span> <span class="kwd">HiException</span><span class="sym">() {}</span>
<span class="sym">}</span>

<span class="kwc">public class</span> except
<span class="sym">{</span>
    <span class="kwb">static int</span> Lo <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">static int</span> Hi <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">static int</span> count<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>

    <span class="kwc">public</span> <span class="kwb">static void</span> <span class="kwd">Main</span><span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwb">int</span><span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
        <span class="kwa">for</span> <span class="sym">(</span>count<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> count<span class="sym">&lt;</span>n<span class="sym">;</span> count<span class="sym">++)</span>
        <span class="sym">{</span>
            <span class="kwd">SomeFunction</span><span class="sym">();</span>
        <span class="sym">}</span>
        Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;Exceptions: HI={0} / LO={1}&quot;</span><span class="sym">,</span> Hi<span class="sym">,</span> Lo<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwc">public</span> <span class="kwb">static void</span> <span class="kwd">SomeFunction</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">try</span>
        <span class="sym">{</span>
            <span class="kwd">HiFunction</span><span class="sym">();</span>
        <span class="sym">}</span>
        <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">)</span>
        <span class="sym">{</span>
            Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;We shouldn't get here: {0}&quot;</span><span class="sym">,</span> e<span class="sym">.</span>Message<span class="sym">);</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwc">public</span> <span class="kwb">static void</span> <span class="kwd">HiFunction</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">try</span>
        <span class="sym">{</span>
            <span class="kwd">LoFunction</span><span class="sym">();</span>
        <span class="sym">}</span>
        <span class="kwa">catch</span> <span class="sym">(</span>HiException<span class="sym">)</span>
        <span class="sym">{</span>
            Hi<span class="sym">++;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwc">public</span> <span class="kwb">static void</span> <span class="kwd">LoFunction</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">try</span>
        <span class="sym">{</span>
            <span class="kwd">BlowUp</span><span class="sym">();</span>
        <span class="sym">}</span>
        <span class="kwa">catch</span> <span class="sym">(</span>LoException<span class="sym">)</span>
        <span class="sym">{</span>
            Lo<span class="sym">++;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwc">public</span> <span class="kwb">static void</span> <span class="kwd">BlowUp</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">if</span> <span class="sym">((</span>count <span class="sym">&amp;</span> <span class="num">1</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">throw new</span> <span class="kwd">LoException</span><span class="sym">();</span>
        <span class="sym">}</span>
        <span class="kwa">else</span>
        <span class="sym">{</span>
            <span class="kwa">throw new</span> <span class="kwd">HiException</span><span class="sym">();</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
