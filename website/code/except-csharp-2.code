<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;

</span>   <span class="kwc">class</span> Except
   <span class="sym">{
</span>      <span class="kwb">static int</span> Lo <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwb">static int</span> Hi <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>      <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){
</span>         <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>         <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> some_function<span class="sym">(</span>i<span class="sym">);
</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Exceptions: HI={0} / LO={1}&quot;</span><span class="sym">,</span> Hi<span class="sym">,</span> Lo<span class="sym">);
      }

</span>      <span class="kwc">public</span> <span class="kwb">static void</span> some_function<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">){
</span>         <span class="kwa">try</span> <span class="sym">{
</span>            hi_function<span class="sym">(</span>n<span class="sym">);
         }
</span>         <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">) {
</span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;We shouldn't get here: &quot;</span> <span class="sym">+</span> e<span class="sym">.</span>Message<span class="sym">);
         }
      }

</span>      <span class="kwc">public</span> <span class="kwb">static void</span> hi_function<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">){
</span>         <span class="kwa">try</span> <span class="sym">{
</span>            lo_function<span class="sym">(</span>n<span class="sym">);
         }
</span>         <span class="kwa">catch</span> <span class="sym">(</span>Hi_Exception e<span class="sym">) {
</span>            Hi<span class="sym">++;
         }
      }


</span>      <span class="kwc">public</span> <span class="kwb">static void</span> lo_function<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">){
</span>         <span class="kwa">try</span> <span class="sym">{
</span>            blowup<span class="sym">(</span>n<span class="sym">);
         }
</span>         <span class="kwa">catch</span> <span class="sym">(</span>Lo_Exception e<span class="sym">){
</span>            Lo<span class="sym">++;
         }
      }


</span>      <span class="kwc">public</span> <span class="kwb">static void</span> blowup<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">){
</span>         <span class="kwa">if</span> <span class="sym">((</span>n <span class="sym">%</span> <span class="num">2</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">throw new</span> Lo_Exception<span class="sym">();
</span>         <span class="kwa">else throw new</span> Hi_Exception<span class="sym">();
      }
   }

</span>   <span class="kwc">class</span> Lo_Exception <span class="sym">:</span> System<span class="sym">.</span>Exception <span class="sym">{
</span>      <span class="kwc">public</span> Lo_Exception<span class="sym">() {}
   }

</span>   <span class="kwc">class</span> Hi_Exception <span class="sym">:</span> System<span class="sym">.</span>Exception <span class="sym">{
</span>      <span class="kwc">public</span> Hi_Exception<span class="sym">() {}
   }</span>
