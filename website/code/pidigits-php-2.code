<span class="sym">&lt;</span>?php <span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Peter Baltruschat</span>
<span class="com">*/</span>
<span class="kwa">function</span> Transformation_Compose<span class="sym">(</span><span class="kwb">$tr</span><span class="sym">,</span> <span class="kwb">$a</span><span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">return array</span><span class="sym">(</span>
      <span class="kwa">gmp_mul</span><span class="sym">(</span><span class="kwb">$tr</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">0</span><span class="sym">]),</span>
      <span class="kwa">gmp_add</span><span class="sym">(</span><span class="kwa">gmp_mul</span><span class="sym">(</span><span class="kwb">$tr</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">1</span><span class="sym">]),</span> <span class="kwa">gmp_mul</span><span class="sym">(</span><span class="kwb">$tr</span><span class="sym">[</span><span class="num">1</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">3</span><span class="sym">])),</span>
      <span class="kwa">gmp_add</span><span class="sym">(</span><span class="kwa">gmp_mul</span><span class="sym">(</span><span class="kwb">$tr</span><span class="sym">[</span><span class="num">2</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">0</span><span class="sym">]),</span> <span class="kwa">gmp_mul</span><span class="sym">(</span><span class="kwb">$tr</span><span class="sym">[</span><span class="num">3</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">2</span><span class="sym">])),</span>
      <span class="kwa">gmp_add</span><span class="sym">(</span><span class="kwa">gmp_mul</span><span class="sym">(</span><span class="kwb">$tr</span><span class="sym">[</span><span class="num">2</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">1</span><span class="sym">]),</span> <span class="kwa">gmp_mul</span><span class="sym">(</span><span class="kwb">$tr</span><span class="sym">[</span><span class="num">3</span><span class="sym">],</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">3</span><span class="sym">]))</span>
   <span class="sym">);</span>
<span class="sym">}</span>
<span class="kwa">function</span> Transformation_Compose2<span class="sym">(</span><span class="kwb">$y</span><span class="sym">,</span> <span class="kwb">$a</span><span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">return array</span><span class="sym">(</span>
      <span class="kwa">gmp_mul</span><span class="sym">(</span><span class="num">10</span><span class="sym">,</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">0</span><span class="sym">]),</span>
      <span class="kwa">gmp_add</span><span class="sym">(</span><span class="kwa">gmp_mul</span><span class="sym">(</span><span class="num">10</span><span class="sym">,</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">1</span><span class="sym">]),</span> <span class="kwa">gmp_mul</span><span class="sym">(</span><span class="kwa">gmp_mul</span><span class="sym">(-</span><span class="num">10</span><span class="sym">,</span> <span class="kwb">$y</span><span class="sym">),</span> <span class="kwb">$a</span><span class="sym">[</span><span class="num">3</span><span class="sym">])),</span>
      <span class="kwb">$a</span><span class="sym">[</span><span class="num">2</span><span class="sym">],</span>
      <span class="kwb">$a</span><span class="sym">[</span><span class="num">3</span><span class="sym">]</span>
   <span class="sym">);</span>
<span class="sym">}</span>
<span class="kwa">function</span> Transformation_Extract<span class="sym">(</span><span class="kwb">$tr</span><span class="sym">,</span> <span class="kwb">$j</span><span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">return gmp_div_q</span><span class="sym">(</span>
      <span class="kwa">gmp_add</span><span class="sym">(</span><span class="kwa">gmp_mul</span><span class="sym">(</span><span class="kwb">$tr</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwb">$j</span><span class="sym">),</span> <span class="kwb">$tr</span><span class="sym">[</span><span class="num">1</span><span class="sym">]),</span>
      <span class="kwa">gmp_add</span><span class="sym">(</span><span class="kwa">gmp_mul</span><span class="sym">(</span><span class="kwb">$tr</span><span class="sym">[</span><span class="num">2</span><span class="sym">],</span> <span class="kwb">$j</span><span class="sym">),</span> <span class="kwb">$tr</span><span class="sym">[</span><span class="num">3</span><span class="sym">])</span>
   <span class="sym">);</span>
<span class="sym">}</span>
<span class="kwa">function</span> Transformation_Next<span class="sym">(&amp;</span><span class="kwb">$tr</span><span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">$tr</span><span class="sym">[</span><span class="num">3</span><span class="sym">] = (++</span><span class="kwb">$tr</span><span class="sym">[</span><span class="num">0</span><span class="sym">]&lt;&lt;</span><span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwb">$tr</span><span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> <span class="kwb">$tr</span><span class="sym">[</span><span class="num">3</span><span class="sym">]&lt;&lt;</span><span class="num">1</span><span class="sym">;</span>
   <span class="kwb">$tr</span><span class="sym">[</span><span class="num">2</span><span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">return</span> <span class="kwb">$tr</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="kwa">function</span> Pidigit_Next<span class="sym">(&amp;</span><span class="kwb">$pd</span><span class="sym">,</span> <span class="kwb">$times</span><span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">$digits</span> <span class="sym">=</span> <span class="str">''</span><span class="sym">;</span>
   <span class="kwb">$z</span> <span class="sym">=</span> <span class="kwb">$pd</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
   do
   <span class="sym">{</span>
      <span class="kwb">$y</span> <span class="sym">=</span> Transformation_Extract<span class="sym">(</span><span class="kwb">$z</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
      do
      <span class="sym">{</span>
         <span class="kwb">$z</span> <span class="sym">=</span> Transformation_Compose<span class="sym">(</span><span class="kwb">$z</span><span class="sym">,</span> Transformation_Next<span class="sym">(</span><span class="kwb">$pd</span><span class="sym">[</span><span class="num">1</span><span class="sym">]));</span>
         <span class="kwb">$y</span> <span class="sym">=</span> Transformation_Extract<span class="sym">(</span><span class="kwb">$z</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
      <span class="sym">}</span>
      <span class="kwa">while</span><span class="sym">(</span><span class="num">0</span> <span class="sym">!=</span> <span class="kwa">gmp_cmp</span><span class="sym">(</span>Transformation_Extract<span class="sym">(</span><span class="kwb">$z</span><span class="sym">,</span> <span class="num">4</span><span class="sym">),</span> <span class="kwb">$y</span><span class="sym">));</span>
      <span class="kwb">$z</span> <span class="sym">=</span> Transformation_Compose2<span class="sym">(</span><span class="kwb">$y</span><span class="sym">,</span> <span class="kwb">$z</span><span class="sym">);</span>
      <span class="kwb">$digits</span> .<span class="sym">=</span> <span class="kwa">gmp_strval</span><span class="sym">(</span><span class="kwb">$y</span><span class="sym">);</span>
   <span class="sym">}</span>
   <span class="kwa">while</span><span class="sym">(--</span><span class="kwb">$times</span><span class="sym">);</span>
   <span class="kwb">$pd</span><span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="kwb">$z</span><span class="sym">;</span>
   <span class="kwa">return</span> <span class="kwb">$digits</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">$n</span> <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span> <span class="kwb">$argv</span><span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
<span class="kwb">$i</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwb">$pidigit</span> <span class="sym">=</span> <span class="kwa">array</span><span class="sym">(</span><span class="kwa">array</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> <span class="kwa">array</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">));</span>

<span class="kwa">while</span><span class="sym">(</span><span class="kwb">$n</span><span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">if</span><span class="sym">(</span><span class="kwb">$n</span> <span class="sym">&lt;</span> <span class="num">10</span><span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;%s%s</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> Pidigit_Next<span class="sym">(</span><span class="kwb">$pidigit</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">),</span> <span class="kwa">str_repeat</span><span class="sym">(</span><span class="str">' '</span><span class="sym">,</span> <span class="num">10</span> <span class="sym">-</span> <span class="kwb">$n</span><span class="sym">),</span> <span class="kwb">$i</span> <span class="sym">+</span> <span class="kwb">$n</span><span class="sym">);</span>
      <span class="kwa">break</span><span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwa">else</span>
   <span class="sym">{</span>
      <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> Pidigit_Next<span class="sym">(</span><span class="kwb">$pidigit</span><span class="sym">,</span> <span class="num">10</span><span class="sym">),</span> <span class="kwb">$i</span> <span class="sym">+=</span> <span class="num">10</span><span class="sym">);</span>
   <span class="sym">}</span>
   <span class="kwb">$n</span> <span class="sym">-=</span> <span class="num">10</span><span class="sym">;</span>
<span class="sym">}</span>
?<span class="sym">&gt;</span>
