<span class="sym">&lt;</span>?php

<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Robert Bradshaw
*/</span>

# requires <span class="sym">--</span>enable<span class="sym">-</span>bcmath


<span class="kwb">$k</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwb">$z</span> <span class="sym">=</span> <span class="kwa">array</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);

</span><span class="kwa">function</span> next_digit<span class="sym">() {
</span>  <span class="kwa">while</span><span class="sym">((</span><span class="kwb">$y</span> <span class="sym">=</span> extract_digit<span class="sym">(</span><span class="num">3</span><span class="sym">)) !=</span> extract_digit<span class="sym">(</span><span class="num">4</span><span class="sym">)) {
</span>    consume<span class="sym">(</span>next_lft<span class="sym">());
  }
</span>  produce<span class="sym">(</span><span class="kwb">$y</span><span class="sym">);
</span>  <span class="kwa">return</span> <span class="kwb">$y</span><span class="sym">;
}

</span><span class="kwa">function</span> next_lft<span class="sym">() {
</span>  <span class="kwa">global</span> <span class="kwb">$k</span><span class="sym">;
</span>  <span class="kwb">$k</span><span class="sym">++;
</span>  <span class="kwa">return array</span><span class="sym">(</span><span class="kwb">$k</span><span class="sym">,</span> <span class="num">4</span><span class="sym">*</span><span class="kwb">$k</span><span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span><span class="kwb">$k</span><span class="sym">+</span><span class="num">1</span><span class="sym">);
}

</span><span class="kwa">function</span> extract_digit<span class="sym">(</span><span class="kwb">$x</span><span class="sym">) {
</span>  <span class="kwa">global</span> <span class="kwb">$z</span><span class="sym">;
</span>  <span class="kwa">print_r</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">);
</span>  <span class="kwa">return bcdiv</span><span class="sym">(</span> <span class="kwa">bcadd</span><span class="sym">(</span><span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwb">$x</span><span class="sym">),</span> <span class="kwb">$z</span><span class="sym">[</span><span class="num">1</span><span class="sym">]) ,</span> <span class="kwa">bcadd</span><span class="sym">(</span><span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">[</span><span class="num">2</span><span class="sym">],</span> <span class="kwb">$x</span><span class="sym">),</span> <span class="kwb">$z</span><span class="sym">[</span><span class="num">3</span><span class="sym">]) ,</span> <span class="num">0</span><span class="sym">);
}

</span><span class="kwa">function</span> produce<span class="sym">(</span><span class="kwb">$y</span><span class="sym">) {
</span>  <span class="kwa">global</span> <span class="kwb">$z</span><span class="sym">;
</span>  <span class="kwb">$z</span> <span class="sym">=</span> compose<span class="sym">(</span><span class="kwa">array</span><span class="sym">(</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span><span class="kwb">$y</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> <span class="kwb">$z</span><span class="sym">);
}

</span><span class="kwa">function</span> consume<span class="sym">(</span><span class="kwb">$w</span><span class="sym">) {
</span>  <span class="kwa">global</span> <span class="kwb">$z</span><span class="sym">;
</span>  <span class="kwb">$z</span> <span class="sym">=</span> compose<span class="sym">(</span><span class="kwb">$z</span><span class="sym">,</span> <span class="kwb">$w</span><span class="sym">);
}

</span><span class="kwa">function</span> compose<span class="sym">(</span><span class="kwb">$z</span><span class="sym">,</span> <span class="kwb">$w</span><span class="sym">) {
</span>  <span class="kwa">return array</span><span class="sym">(</span> <span class="kwa">bcadd</span><span class="sym">(</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwb">$w</span><span class="sym">[</span><span class="num">0</span><span class="sym">]) ,</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">[</span><span class="num">1</span><span class="sym">],</span> <span class="kwb">$w</span><span class="sym">[</span><span class="num">2</span><span class="sym">])),
</span>                <span class="kwa">bcadd</span><span class="sym">(</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwb">$w</span><span class="sym">[</span><span class="num">1</span><span class="sym">]) ,</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">[</span><span class="num">1</span><span class="sym">],</span> <span class="kwb">$w</span><span class="sym">[</span><span class="num">3</span><span class="sym">])),
</span>                <span class="kwa">bcadd</span><span class="sym">(</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">[</span><span class="num">2</span><span class="sym">],</span> <span class="kwb">$w</span><span class="sym">[</span><span class="num">0</span><span class="sym">]) ,</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">[</span><span class="num">3</span><span class="sym">],</span> <span class="kwb">$w</span><span class="sym">[</span><span class="num">2</span><span class="sym">])),
</span>                <span class="kwa">bcadd</span><span class="sym">(</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">[</span><span class="num">2</span><span class="sym">],</span> <span class="kwb">$w</span><span class="sym">[</span><span class="num">1</span><span class="sym">]) ,</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$z</span><span class="sym">[</span><span class="num">3</span><span class="sym">],</span> <span class="kwb">$w</span><span class="sym">[</span><span class="num">3</span><span class="sym">])) );
}


</span><span class="kwb">$n</span> <span class="sym">=</span> <span class="kwb">$argv</span><span class="sym">[</span><span class="num">1</span><span class="sym">];

</span><span class="kwa">for</span><span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">1</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;=</span><span class="kwb">$n</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {
</span>  <span class="kwa">echo</span> next_digit<span class="sym">();
</span>  <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$i</span> % <span class="num">10</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">echo</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:$i</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
}
</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$n</span> % <span class="num">10</span> <span class="sym">!=</span> <span class="num">0</span><span class="sym">) {
</span>  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">$j</span><span class="sym">=</span><span class="kwb">$n</span> % <span class="num">10</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">&lt;=</span><span class="num">10</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">++)</span> <span class="kwa">echo</span> <span class="str">&quot; &quot;</span><span class="sym">;
</span>  <span class="kwa">echo</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:$n</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
}


</span>?<span class="sym">&gt;</span>
