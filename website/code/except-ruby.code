<span class="slc">#!/usr/bin/ruby
</span><span class="slc"># -*- mode: ruby -*-
</span><span class="slc"># $Id: except-ruby.code,v 1.6 2005-05-23 06:14:19 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span>
$HI = <span class="num">0
</span>$LO = <span class="num">0
</span>NUM = Integer<span class="sym">(</span><span class="kwa">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">1</span><span class="sym">)


</span><span class="kwa">class</span> Lo_Exception <span class="sym">&lt;</span> Exception
    <span class="kwa">def</span> initialize<span class="sym">(</span>num<span class="sym">)
</span>        &#64;value = num
        <span class="kwa">return self
    end
end

class</span> Hi_Exception <span class="sym">&lt;</span> Exception
    <span class="kwa">def</span> initialize<span class="sym">(</span>num<span class="sym">)
</span>        &#64;value = num
        <span class="kwa">return self
    end
end

def</span> some_function<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwa">begin
</span>	hi_function<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwa">rescue
</span>        print <span class="str">&quot;We shouldn't get here, exception is: #{$!.type}\n&quot;</span>
    <span class="kwa">end
end

def</span> hi_function<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwa">begin
</span>	lo_function<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwa">rescue</span> Hi_Exception
	$HI = $HI <span class="sym">+</span> <span class="num">1
</span>    <span class="kwa">end
end

def</span> lo_function<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwa">begin
</span>	blowup<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwa">rescue</span> Lo_Exception
	$LO = $LO <span class="sym">+</span> <span class="num">1
</span>    <span class="kwa">end
end

def</span> blowup<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwa">if</span> num % <span class="num">2</span> == <span class="num">0
</span>	raise Lo_Exception.new<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwa">else
</span>	raise Hi_Exception.new<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwa">end
end


for</span> iter <span class="kwa">in</span> <span class="num">1</span> .. NUM
    some_function<span class="sym">(</span>iter<span class="sym">)
</span><span class="kwa">end
</span>print <span class="str">&quot;Exceptions: HI=&quot;</span><span class="sym">,</span> $HI<span class="sym">,</span> <span class="str">&quot; / LO=&quot;</span><span class="sym">,</span> $LO<span class="sym">,</span> <span class="str">&quot;\n&quot;</span>
