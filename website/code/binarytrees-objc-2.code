<span class="com">/*</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Original C contributed by Kevin Carson</span>
<span class="com"> * Conversion to Objective-C by Selman Ulug</span>
<span class="com"> * Modified by Sokolov Yura</span>
<span class="com"> */</span>

<span class="dir">#include &lt;objc/Object.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;math.h&gt;</span>

<span class="kwa">&#64;interface</span> TreeNode <span class="sym">:</span> Object
<span class="sym">{</span>
  TreeNode <span class="sym">*</span>left<span class="sym">;</span>
  TreeNode <span class="sym">*</span>right<span class="sym">;</span>
  <span class="kwb">long</span>      item<span class="sym">;</span>
<span class="sym">}</span>
<span class="sym">-</span> init <span class="sym">: (</span><span class="kwa">id</span><span class="sym">)</span>pLeft <span class="sym">: (</span><span class="kwa">id</span><span class="sym">)</span>pRight <span class="sym">: (</span><span class="kwb">long</span><span class="sym">)</span>pItem<span class="sym">;</span>
<span class="sym">- (</span><span class="kwb">long</span><span class="sym">)</span> itemCheck<span class="sym">;</span>
<span class="sym">+</span> bottomUpTree <span class="sym">: (</span><span class="kwb">long</span><span class="sym">)</span> tItem <span class="sym">: (</span><span class="kwb">unsigned</span><span class="sym">)</span> tDepth<span class="sym">;</span>
<span class="sym">-</span> free<span class="sym">;</span>
<span class="kwa">&#64;end</span>

<span class="kwa">&#64;implementation</span> TreeNode
<span class="sym">-</span>init <span class="sym">: (</span><span class="kwa">id</span><span class="sym">)</span>pLeft <span class="sym">: (</span><span class="kwa">id</span><span class="sym">)</span>pRight <span class="sym">: (</span><span class="kwb">long</span><span class="sym">)</span>pItem
<span class="sym">{</span>
  <span class="sym">[</span><span class="kwa">super</span> init<span class="sym">];</span>
  left <span class="sym">=</span> pLeft<span class="sym">;</span>
  right <span class="sym">=</span> pRight<span class="sym">;</span>
  item <span class="sym">=</span> pItem<span class="sym">;</span>
  <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="sym">- (</span><span class="kwb">long</span><span class="sym">)</span> itemCheck
<span class="sym">{</span>
  <span class="kwa">if</span> <span class="sym">(</span>left <span class="sym">==</span> <span class="kwa">nil</span><span class="sym">)</span>
    <span class="kwa">return</span> item<span class="sym">;</span>
  <span class="kwa">else</span>
    <span class="kwa">return</span> item <span class="sym">+ [</span>left itemCheck<span class="sym">] - [</span>right itemCheck<span class="sym">];</span>
<span class="sym">}</span>

<span class="sym">+</span> bottomUpTree <span class="sym">: (</span><span class="kwb">long</span><span class="sym">)</span>tItem <span class="sym">: (</span><span class="kwb">unsigned</span><span class="sym">)</span>tDepth
<span class="sym">{</span>
  <span class="kwa">if</span> <span class="sym">(</span>tDepth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwa">return</span> <span class="sym">[[</span>TreeNode alloc<span class="sym">]</span> init
			       <span class="sym">: [</span><span class="kwa">self</span> bottomUpTree <span class="sym">:</span> <span class="num">2</span> <span class="sym">*</span> tItem <span class="sym">-</span> <span class="num">1</span> <span class="sym">:</span> tDepth <span class="sym">-</span> <span class="num">1</span><span class="sym">]</span>
			       <span class="sym">: [</span><span class="kwa">self</span> bottomUpTree <span class="sym">:</span> <span class="num">2</span> <span class="sym">*</span> tItem <span class="sym">:</span> tDepth <span class="sym">-</span> <span class="num">1</span><span class="sym">]</span>
			       <span class="sym">:</span> tItem<span class="sym">];</span>
    <span class="sym">}</span>
  <span class="kwa">else</span>
    <span class="sym">{</span>
      <span class="kwa">return</span> <span class="sym">[[</span>TreeNode alloc<span class="sym">]</span> init <span class="sym">:</span> <span class="kwa">nil</span> <span class="sym">:</span> <span class="kwa">nil</span> <span class="sym">:</span> tItem<span class="sym">];</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="sym">-</span> free
<span class="sym">{</span>
  <span class="kwa">if</span> <span class="sym">(</span>left <span class="sym">!=</span> <span class="kwa">nil</span><span class="sym">)</span>
    <span class="sym">{</span>
      <span class="sym">[</span>left free<span class="sym">];</span>
      <span class="sym">[</span>right free<span class="sym">];</span>
    <span class="sym">}</span>
  <span class="kwa">return</span> <span class="sym">[</span><span class="kwa">super</span> free<span class="sym">];</span>
<span class="sym">}</span>
<span class="kwa">&#64;end</span>

<span class="kwb">int</span>
<span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">**</span> argv<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">unsigned</span>   N<span class="sym">,</span> depth<span class="sym">,</span> minDepth<span class="sym">,</span> maxDepth<span class="sym">,</span> stretchDepth<span class="sym">;</span>
  <span class="kwa">id</span>         stretchTree<span class="sym">,</span> longLivedTree<span class="sym">,</span> tempTree<span class="sym">;</span>

  <span class="kwa">if</span><span class="sym">(</span>argc<span class="sym">&gt;=</span><span class="num">2</span><span class="sym">)</span>
    N <span class="sym">=</span> <span class="kwd">atol</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
  <span class="kwa">else</span>
    N <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>

  minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>

  <span class="kwa">if</span> <span class="sym">((</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">) &gt;</span> N<span class="sym">)</span>
    maxDepth <span class="sym">=</span> minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">;</span>
  <span class="kwa">else</span>
    maxDepth <span class="sym">=</span> N<span class="sym">;</span>

  stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

  stretchTree <span class="sym">= [</span>TreeNode bottomUpTree <span class="sym">:</span> <span class="num">0</span> <span class="sym">:</span> stretchDepth<span class="sym">];</span>
  printf
    <span class="sym">(</span>
     <span class="str">&quot;stretch tree of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
     stretchDepth<span class="sym">,</span>
     <span class="sym">[</span>stretchTree itemCheck<span class="sym">]</span>
     <span class="sym">);</span>

  <span class="sym">[</span>stretchTree free<span class="sym">];</span>

  longLivedTree <span class="sym">= [</span>TreeNode bottomUpTree <span class="sym">:</span> <span class="num">0</span> <span class="sym">:</span> maxDepth<span class="sym">];</span>

  <span class="kwa">for</span> <span class="sym">(</span>depth <span class="sym">=</span> minDepth<span class="sym">;</span> depth <span class="sym">&lt;=</span> maxDepth<span class="sym">;</span> depth <span class="sym">+=</span> <span class="num">2</span><span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwb">long</span>    i<span class="sym">,</span> iterations<span class="sym">,</span> check<span class="sym">;</span>

      iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);</span>

      check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

      <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> iterations<span class="sym">;</span> i<span class="sym">++)</span>
        <span class="sym">{</span>
	  tempTree <span class="sym">= [</span>TreeNode bottomUpTree <span class="sym">:</span>i <span class="sym">:</span> depth<span class="sym">];</span>
	  check <span class="sym">+= [</span>tempTree itemCheck<span class="sym">];</span>
	  <span class="sym">[</span>tempTree free<span class="sym">];</span>

	  tempTree <span class="sym">= [</span>TreeNode bottomUpTree <span class="sym">: -</span>i <span class="sym">:</span> depth<span class="sym">];</span>
	  check <span class="sym">+= [</span>tempTree itemCheck<span class="sym">];</span>
	  <span class="sym">[</span>tempTree free<span class="sym">];</span>
        <span class="sym">}</span> <span class="com">/* for(i = 1...) */</span>

      printf
        <span class="sym">(</span>
	 <span class="str">&quot;%li</span><span class="esc">\t</span> <span class="str">trees of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	 iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span>
	 depth<span class="sym">,</span>
	 check
	 <span class="sym">);</span>
    <span class="sym">}</span> <span class="com">/* for(depth = minDepth...) */</span>

  printf
    <span class="sym">(</span>
     <span class="str">&quot;long lived tree of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
     maxDepth<span class="sym">,</span>
     <span class="sym">[</span>longLivedTree itemCheck<span class="sym">]</span>
     <span class="sym">);</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
