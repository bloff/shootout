#<span class="sym">!</span>.<span class="sym">/</span>parrot <span class="sym">-</span>C
#
# pidigits N  <span class="sym">(</span>N <span class="sym">=</span> <span class="num">1000</span> for shootout<span class="sym">)</span>
#
# <span class="kwa">this</span> requires libgmp <span class="sym">(</span>GMP<span class="sym">)</span> on the machine
#
# by Leopold Toetsch
# <span class="kwa">not</span> really optimized yet

#def gen_x<span class="sym">():</span>
#    return imap<span class="sym">(</span>lambda k<span class="sym">: (</span>k<span class="sym">,</span> <span class="num">4</span><span class="sym">*</span>k <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">),</span> count<span class="sym">(</span><span class="num">1</span><span class="sym">))</span>

.pragma n_operators <span class="num">1</span>

.<span class="kwa">sub</span> count
    .param pmc start
<span class="kwa">loop</span><span class="sym">:</span>
    .yield<span class="sym">(</span>start<span class="sym">)</span>
    <span class="kwa">inc</span> start
    goto <span class="kwa">loop</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> gen_x
    .param pmc start
    .<span class="kwa">local</span> pmc k
<span class="kwa">loop</span><span class="sym">:</span>
    k <span class="sym">=</span> count<span class="sym">(</span>start<span class="sym">)</span>
    $P0 <span class="sym">=</span> k <span class="sym">+</span> <span class="num">0</span>
    $P1 <span class="sym">=</span> k <span class="sym">*</span> <span class="num">4</span>
    <span class="kwa">inc</span> $P1
    <span class="kwa">inc</span> $P1
    $P2 <span class="sym">=</span> new .Integer
    $P3 <span class="sym">=</span> k <span class="sym">*</span> <span class="num">2</span>
    <span class="kwa">inc</span> $P3
    .yield <span class="sym">(</span>$P0<span class="sym">,</span> $P1<span class="sym">,</span> $P2<span class="sym">,</span> $P3<span class="sym">)</span>
    goto <span class="kwa">loop</span>
.<span class="kwa">end</span>

#def compose<span class="sym">((</span>aq<span class="sym">,</span> ar<span class="sym">,</span> as_<span class="sym">,</span> at<span class="sym">), (</span>bq<span class="sym">,</span> br<span class="sym">,</span> bs<span class="sym">,</span> <span class="kwa">bt</span><span class="sym">)):</span>
#    return <span class="sym">(</span>aq <span class="sym">*</span> bq<span class="sym">,</span>
#            aq <span class="sym">*</span> br <span class="sym">+</span> ar <span class="sym">*</span> <span class="kwa">bt</span><span class="sym">,</span>
#            as_ <span class="sym">*</span> bq <span class="sym">+</span> at <span class="sym">*</span> bs<span class="sym">,</span>
#            as_ <span class="sym">*</span> br <span class="sym">+</span> at <span class="sym">*</span> <span class="kwa">bt</span><span class="sym">)</span>

.<span class="kwa">sub</span> <span class="str">&quot;compose&quot;</span>
    .param pmc aq
    .param pmc ar
    .param pmc as
    .param pmc at
    .param pmc bq
    .param pmc br
    .param pmc bs
    .param pmc <span class="kwa">bt</span>
    $P0 <span class="sym">=</span> aq <span class="sym">*</span> bq
    $P1 <span class="sym">=</span> aq <span class="sym">*</span> br
    $P12 <span class="sym">=</span> ar <span class="sym">*</span> <span class="kwa">bt</span>
    $P1 <span class="sym">=</span> $P1 <span class="sym">+</span> $P12
    $P2 <span class="sym">=</span> as <span class="sym">*</span> bq
    $P22 <span class="sym">=</span> at <span class="sym">*</span> bs
    $P2 <span class="sym">=</span> $P2 <span class="sym">+</span> $P22
    $P3 <span class="sym">=</span> as <span class="sym">*</span> br
    $P32 <span class="sym">=</span> at <span class="sym">*</span> <span class="kwa">bt</span>
    $P3 <span class="sym">=</span>  $P3 <span class="sym">+</span> $P32
    .return <span class="sym">(</span>$P0<span class="sym">,</span> $P1<span class="sym">,</span> $P2<span class="sym">,</span> $P3<span class="sym">)</span>
.<span class="kwa">end</span>

#def extract<span class="sym">((</span>q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">),</span> j<span class="sym">):</span>
#    return <span class="sym">(</span>q<span class="sym">*</span>j <span class="sym">+</span> r<span class="sym">) // (</span>s<span class="sym">*</span>j <span class="sym">+</span> t<span class="sym">)</span>

.<span class="kwa">sub</span> extract
    .param pmc q
    .param pmc r
    .param pmc s
    .param pmc t
    .param pmc j
    $P0 <span class="sym">=</span> q <span class="sym">*</span> j
    $P0 <span class="sym">=</span> $P0 <span class="sym">+</span> r
    $P1 <span class="sym">=</span> s <span class="sym">*</span> j
    $P1 <span class="sym">=</span> $P1 <span class="sym">+</span> t
    $P0 <span class="sym">=</span> $P0 <span class="sym">//</span> $P1
    .return <span class="sym">(</span>$P0<span class="sym">)</span>
.<span class="kwa">end</span>

#def pi_digits<span class="sym">():</span>
#
#    z <span class="sym">= (</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
#    x <span class="sym">=</span> gen_x<span class="sym">()</span>

.<span class="kwa">sub</span> pi_digits
    .<span class="kwa">local</span> pmc x0<span class="sym">,</span>x1<span class="sym">,</span>x2<span class="sym">,</span>x3<span class="sym">,</span> y<span class="sym">,</span> z0<span class="sym">,</span>z1<span class="sym">,</span>z2<span class="sym">,</span>z3<span class="sym">,</span> one<span class="sym">,</span> three<span class="sym">,</span> four
    z0 <span class="sym">=</span> new .Integer
    z0 <span class="sym">=</span> <span class="num">1</span>
    z1 <span class="sym">=</span> new .Integer
    z2 <span class="sym">=</span> new .Integer
    z3 <span class="sym">=</span> new .Integer
    z3 <span class="sym">=</span> <span class="num">1</span>
    one <span class="sym">=</span> new .Integer
    one <span class="sym">=</span> <span class="num">1</span>
    three <span class="sym">=</span> new .Integer
    three <span class="sym">=</span> <span class="num">3</span>
    four <span class="sym">=</span> new .Integer
    four <span class="sym">=</span> <span class="num">4</span>
#    while <span class="num">1</span><span class="sym">:</span>
#        y <span class="sym">=</span> extract<span class="sym">(</span>z<span class="sym">,</span> <span class="num">3</span><span class="sym">)</span>
loop1<span class="sym">:</span>
	y <span class="sym">=</span> extract<span class="sym">(</span>z0<span class="sym">,</span> z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">,</span> three<span class="sym">)</span>

#        while y <span class="sym">!=</span> extract<span class="sym">(</span>z<span class="sym">,</span> <span class="num">4</span><span class="sym">):</span>
loop2<span class="sym">:</span>
	    $P0 <span class="sym">=</span> extract<span class="sym">(</span>z0<span class="sym">,</span> z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">,</span> four<span class="sym">)</span>
	    if y <span class="sym">==</span> $P0 goto end_loop2

#            z <span class="sym">=</span> compose<span class="sym">(</span>z<span class="sym">,</span> x.next<span class="sym">())</span>
	    <span class="sym">(</span>$P1<span class="sym">,</span> $P2<span class="sym">,</span> $P3<span class="sym">,</span> $P4<span class="sym">) =</span> gen_x<span class="sym">(</span>one<span class="sym">)</span>
	    <span class="sym">(</span>z0<span class="sym">,</span> z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">) =</span> <span class="str">&quot;compose&quot;</span><span class="sym">(</span>z0<span class="sym">,</span> z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">,</span> $P1<span class="sym">,</span> $P2<span class="sym">,</span> $P3<span class="sym">,</span> $P4<span class="sym">)</span>

#            y <span class="sym">=</span> extract<span class="sym">(</span>z<span class="sym">,</span> <span class="num">3</span><span class="sym">)</span>
	    y <span class="sym">=</span> extract<span class="sym">(</span>z0<span class="sym">,</span> z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">,</span> three<span class="sym">)</span>
	goto loop2
end_loop2<span class="sym">:</span>
#        z <span class="sym">=</span> compose<span class="sym">((</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>y<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> z<span class="sym">)</span>
#        yield y
	$P5 <span class="sym">=</span> new .Integer
	$P5 <span class="sym">=</span> <span class="num">10</span>
	$P6 <span class="sym">=</span> new .Integer
	$P6 <span class="sym">= -</span><span class="num">10</span>
	$P6 <span class="sym">=</span> $P6 <span class="sym">*</span> y
	$P7 <span class="sym">=</span> new .Integer
	$P8 <span class="sym">=</span> new .Integer
	$P8 <span class="sym">=</span> <span class="num">1</span>
	<span class="sym">(</span>z0<span class="sym">,</span> z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">) =</span> <span class="str">&quot;compose&quot;</span><span class="sym">(</span>$P5<span class="sym">,</span> $P6<span class="sym">,</span> $P7<span class="sym">,</span> $P8<span class="sym">,</span> z0<span class="sym">,</span> z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">)</span>
	.yield <span class="sym">(</span>y<span class="sym">)</span>
    goto loop1
.<span class="kwa">end</span>

#def main<span class="sym">():</span>
#    n <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys.argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>
#    digits <span class="sym">=</span> pi_digits<span class="sym">()</span>
#    <span class="kwa">width</span> <span class="sym">=</span> <span class="num">10</span>
#    for i <span class="kwa">in</span> xrange<span class="sym">(</span><span class="kwa">width</span><span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> <span class="kwa">width</span><span class="sym">):</span>
#        print <span class="str">&quot;%s\t:%d&quot;</span> <span class="sym">% (</span><span class="str">&quot;&quot;</span>.join<span class="sym">(</span>imap<span class="sym">(</span><span class="kwa">str</span><span class="sym">,</span> islice<span class="sym">(</span>digits<span class="sym">,</span> <span class="kwa">width</span><span class="sym">))),</span> i<span class="sym">)</span>
#    if n <span class="sym">%</span> <span class="kwa">width</span> <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">:</span>
#        print <span class="str">&quot;%s\t:%d&quot;</span> <span class="sym">% (</span><span class="str">&quot;&quot;</span>.join<span class="sym">(</span>imap<span class="sym">(</span><span class="kwa">str</span><span class="sym">,</span> islice<span class="sym">(</span>digits<span class="sym">,</span> n <span class="sym">%</span> <span class="kwa">width</span><span class="sym">)))</span>.ljust<span class="sym">(</span><span class="kwa">width</span><span class="sym">),</span> n<span class="sym">)</span>
#
#main<span class="sym">()</span>

.<span class="kwa">sub</span> main <span class="sym">:</span>main
    .param pmc argv
    $S0 <span class="sym">=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
    .<span class="kwa">local int</span> i<span class="sym">,</span> N<span class="sym">,</span> <span class="kwa">width</span>
    <span class="kwa">width</span> <span class="sym">=</span> <span class="num">10</span>
    N <span class="sym">=</span> $S0
    null i
<span class="kwa">loop</span><span class="sym">:</span>
    $P0 <span class="sym">=</span> pi_digits<span class="sym">()</span>
    print $P0
    <span class="kwa">inc</span> i
    $I0 <span class="sym">=</span> i <span class="sym">%</span> <span class="kwa">width</span>
    if $I0 goto n
    print <span class="str">&quot;\t:&quot;</span>
    print i
    print <span class="str">&quot;\n&quot;</span>
n<span class="sym">:</span>
    if i <span class="sym">&lt;</span> N goto <span class="kwa">loop</span>
    $I0 <span class="sym">=</span> i <span class="sym">%</span> <span class="kwa">width</span>
    unless $I0 goto done
    $I0 <span class="sym">=</span> <span class="kwa">width</span> <span class="sym">-</span> $I0
rest<span class="sym">:</span>
        print <span class="str">&quot; &quot;</span>
        <span class="kwa">dec</span> $I0
        if $I0 goto rest
    print <span class="str">&quot;\t:&quot;</span>
    print N
    print <span class="str">&quot;\n&quot;</span>
done<span class="sym">:</span>
.<span class="kwa">end</span>

