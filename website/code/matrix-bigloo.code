<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: scheme -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: matrix-bigloo.code,v 1.2 2004-11-08 08:15:15 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I>
(module matrix
	(option (<B><FONT COLOR="#A020F0">set!</FONT></B> *genericity* #f))
	(main main))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">size</FONT></B> 30)

(<B><FONT COLOR="#A020F0">define</FONT></B> (1+ x) (+ x 1))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">mkmatrix</FONT></B> rows cols)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((mx (make-vector rows 0))
	(count 1))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (1+ i)))
	((= i rows))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((row (make-vector cols 0)))
	(<B><FONT COLOR="#A020F0">do</FONT></B> ((j 0 (1+ j)))
	    ((= j cols))
	  (vector-set! row j count)
	  (<B><FONT COLOR="#A020F0">set!</FONT></B> count (+ count 1)))
	(vector-set! mx i row)))
    mx))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">num-cols</FONT></B> mx)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((row (vector-ref mx 0)))
    (vector-length row)))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">num-rows</FONT></B> mx)
  (vector-length mx))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">mmult</FONT></B> rows cols m1 m2)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((m3 (make-vector rows 0)))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (1+ i)))
	((= i rows))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((m1i (vector-ref m1 i))
	    (row (make-vector cols 0)))
	(<B><FONT COLOR="#A020F0">do</FONT></B> ((j 0 (1+ j)))
	    ((= j cols))
	  (<B><FONT COLOR="#A020F0">let</FONT></B> ((val 0))
	    (<B><FONT COLOR="#A020F0">do</FONT></B> ((k 0 (1+ k)))
		((= k cols))
	      (<B><FONT COLOR="#A020F0">set!</FONT></B> val (+ val (* (vector-ref m1i k)
				  (vector-ref (vector-ref m2 k) j)))))
	    (vector-set! row j val)))
	(vector-set! m3 i row)))
    m3))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">matrix-print</FONT></B> m)
  (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (1+ i)))
      ((= i (num-rows m)))
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((row (vector-ref m i)))
      (<B><FONT COLOR="#A020F0">do</FONT></B> ((j 0 (1+ j)))
	  ((= j (num-cols m)))
	(display (vector-ref row j))
	(<B><FONT COLOR="#A020F0">if</FONT></B> (&lt; j (num-cols m))
	    (display <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>)))
      (newline))))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">print-list</FONT></B> . items) (for-each display items) (newline))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (length args) 2) (string-&gt;number (cadr args))) 1)))
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((mm 0)
	  (m1 (mkmatrix size size))
	  (m2 (mkmatrix size size)))
      (<B><FONT COLOR="#A020F0">let</FONT></B> loop ((iter n))
	(<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; iter 0)
	       (<B><FONT COLOR="#A020F0">set!</FONT></B> mm (mmult size size m1 m2))
	       (loop (- iter 1)))))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((r0 (vector-ref mm 0))
	    (r2 (vector-ref mm 2))
	    (r3 (vector-ref mm 3))
	    (r4 (vector-ref mm 4)))
	(print-list (vector-ref r0 0) <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> (vector-ref r2 3) <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>
		    (vector-ref r3 2) <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> (vector-ref r4 4))))))</pre></td></tr></table>
