<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: regexmatch-hugs.code,v 1.1 2004-11-02 08:52:40 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">-- By Ray Racine (Haskell newbie)
</FONT></I><I><FONT COLOR="#B22222">-- Usage for 10 iterations:: regexp 10 &lt; Input.txt
</FONT></I>
<B><FONT COLOR="#A020F0">import</FONT></B> Control.Monad
<B><FONT COLOR="#A020F0">import</FONT></B> Data.Maybe
<B><FONT COLOR="#A020F0">import</FONT></B> System (getArgs)
<B><FONT COLOR="#A020F0">import</FONT></B> RegexString (matchRegex, mkRegex)

phoneMatch = matchRegex $ mkRegex regex
	     <B><FONT COLOR="#A020F0">where</FONT></B> regex = 
		       <B><FONT COLOR="#BC8F8F">&quot;(^|[^0-9\\(]+)&quot;</FONT></B> ++
		       <B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B> ++ 
	               <B><FONT COLOR="#BC8F8F">&quot;\\(([0-9][0-9][0-9])\\)&quot;</FONT></B> ++
	               <B><FONT COLOR="#BC8F8F">&quot;|&quot;</FONT></B> ++
	               <B><FONT COLOR="#BC8F8F">&quot;([0-9][0-9][0-9])&quot;</FONT></B> ++
	               <B><FONT COLOR="#BC8F8F">&quot;)&quot;</FONT></B> ++
	               <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> ++
	               <B><FONT COLOR="#BC8F8F">&quot;([0-9][0-9][0-9])&quot;</FONT></B> ++
	               <B><FONT COLOR="#BC8F8F">&quot;[ -]&quot;</FONT></B>  ++
	               <B><FONT COLOR="#BC8F8F">&quot;([0-9][0-9][0-9][0-9])&quot;</FONT></B> ++
		       <B><FONT COLOR="#BC8F8F">&quot;($|[^0-9])&quot;</FONT></B>

canonicalPhone matchGrps = <B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B> ++ areacode ++ <B><FONT COLOR="#BC8F8F">&quot;) &quot;</FONT></B> ++ phnum
                           <B><FONT COLOR="#A020F0">where</FONT></B> areacode = <B><FONT COLOR="#A020F0">let</FONT></B> (<B><FONT COLOR="#A020F0">_,b) </FONT></B>= splitAt 2 matchGrps <B><FONT COLOR="#A020F0">in</FONT></B>
					    (head b) ++ (head . tail $ b)
				 phnum = <B><FONT COLOR="#A020F0">let</FONT></B> (<B><FONT COLOR="#A020F0">_,b) </FONT></B>= splitAt 4 matchGrps <B><FONT COLOR="#A020F0">in</FONT></B>
					 (head b) ++ <B><FONT COLOR="#BC8F8F">&quot;-&quot;</FONT></B> ++ (head . tail) b	

matches l = return $ concatMap (fun . phoneMatch) l
    <B><FONT COLOR="#A020F0">where</FONT></B> fun Nothing = []
	  fun (Just v)= [canonicalPhone v]

main = do [num] &lt;- getArgs
	  lined &lt;- getContents &gt;&gt;= return . lines
	  foldM (\n <B><FONT COLOR="#A020F0">_ </FONT></B>-&gt; matches lined &gt;&gt;= \v -&gt; n `seq` return $ n + length v) 0 [2..(read num)] 
	  matches lined &gt;&gt;= foldM_ (\n v -&gt; putStrLn (show n ++ <B><FONT COLOR="#BC8F8F">&quot;: &quot;</FONT></B> ++ v) &gt;&gt; return (n+1)) 1</pre></td></tr></table>
