<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">(*
 * $Id: moments-ocaml.code,v 1.2 2004-11-08 08:15:17 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 * from Markus Mottl
 *)</FONT></I>

<B><FONT COLOR="#A020F0">let</FONT></B> cutoff <B><FONT COLOR="#5F9EA0">=</FONT></B> 5

<I><FONT COLOR="#B22222">(* Unscrupulously stolen from Array.stable_sort (OCaml standard distribution) *)</FONT></I>
<B><FONT COLOR="#A020F0">let</FONT></B> sort_floats len (ar : float <B><FONT COLOR="#228B22">array</FONT></B>) <B><FONT COLOR="#5F9EA0">=</FONT></B>
  <B><FONT COLOR="#A020F0">let</FONT></B> merge src1ofs src1len src2 src2ofs src2len dst dstofs <B><FONT COLOR="#5F9EA0">=</FONT></B>
    <B><FONT COLOR="#A020F0">let</FONT></B> src1r <B><FONT COLOR="#5F9EA0">=</FONT></B> src1ofs <B><FONT COLOR="#5F9EA0">+</FONT></B> src1len <B><FONT COLOR="#A020F0">and</FONT></B> src2r <B><FONT COLOR="#5F9EA0">=</FONT></B> src2ofs <B><FONT COLOR="#5F9EA0">+</FONT></B> src2len <B><FONT COLOR="#A020F0">in</FONT></B>
    <B><FONT COLOR="#A020F0">let</FONT></B> <B><FONT COLOR="#A020F0">rec</FONT></B> loop i1 s1 i2 s2 d <B><FONT COLOR="#5F9EA0">=</FONT></B>
      <B><FONT COLOR="#A020F0">if</FONT></B> s1 <B><FONT COLOR="#5F9EA0">&lt;=</FONT></B> s2 <B><FONT COLOR="#A020F0">then</FONT></B> begin
        dst.(d) &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> s1;
        <B><FONT COLOR="#A020F0">let</FONT></B> i1 <B><FONT COLOR="#5F9EA0">=</FONT></B> i1 <B><FONT COLOR="#5F9EA0">+</FONT></B> 1 <B><FONT COLOR="#A020F0">in</FONT></B>
        <B><FONT COLOR="#A020F0">if</FONT></B> i1 &lt; src1r <B><FONT COLOR="#A020F0">then</FONT></B> loop i1 ar.(i1) i2 s2 (d <B><FONT COLOR="#5F9EA0">+</FONT></B> 1)
        <B><FONT COLOR="#A020F0">else</FONT></B> Array.blit src2 i2 dst (d <B><FONT COLOR="#5F9EA0">+</FONT></B> 1) (src2r <B><FONT COLOR="#5F9EA0">-</FONT></B> i2)
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">else</FONT></B> begin
        dst.(d) &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> s2;
        <B><FONT COLOR="#A020F0">let</FONT></B> i2 <B><FONT COLOR="#5F9EA0">=</FONT></B> i2 <B><FONT COLOR="#5F9EA0">+</FONT></B> 1 <B><FONT COLOR="#A020F0">in</FONT></B>
        <B><FONT COLOR="#A020F0">if</FONT></B> i2 &lt; src2r <B><FONT COLOR="#A020F0">then</FONT></B> loop i1 s1 i2 src2.(i2) (d <B><FONT COLOR="#5F9EA0">+</FONT></B> 1)
        <B><FONT COLOR="#A020F0">else</FONT></B> Array.blit ar i1 dst (d <B><FONT COLOR="#5F9EA0">+</FONT></B> 1) (src1r <B><FONT COLOR="#5F9EA0">-</FONT></B> i1)
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">in</FONT></B>
    loop src1ofs ar.(src1ofs) src2ofs src2.(src2ofs) dstofs <B><FONT COLOR="#A020F0">in</FONT></B>
  <B><FONT COLOR="#A020F0">let</FONT></B> isortto srcofs dst dstofs len <B><FONT COLOR="#5F9EA0">=</FONT></B>
    for i <B><FONT COLOR="#5F9EA0">=</FONT></B> 0 to len <B><FONT COLOR="#5F9EA0">-</FONT></B> 1 <B><FONT COLOR="#A020F0">do</FONT></B>
      <B><FONT COLOR="#A020F0">let</FONT></B> e <B><FONT COLOR="#5F9EA0">=</FONT></B> ar.(srcofs <B><FONT COLOR="#5F9EA0">+</FONT></B> i) <B><FONT COLOR="#A020F0">and</FONT></B> j <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> (dstofs <B><FONT COLOR="#5F9EA0">+</FONT></B> i <B><FONT COLOR="#5F9EA0">-</FONT></B> 1) <B><FONT COLOR="#A020F0">in</FONT></B>
      <B><FONT COLOR="#A020F0">while</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>j <B><FONT COLOR="#5F9EA0">&gt;=</FONT></B> dstofs &amp;&amp; e <B><FONT COLOR="#5F9EA0">&lt;=</FONT></B> dst.(<B><FONT COLOR="#5F9EA0">!</FONT></B>j) <B><FONT COLOR="#A020F0">do</FONT></B>
        dst.(<B><FONT COLOR="#5F9EA0">!</FONT></B>j <B><FONT COLOR="#5F9EA0">+</FONT></B> 1) &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> dst.(<B><FONT COLOR="#5F9EA0">!</FONT></B>j);
        decr j;
      done;
      dst.(<B><FONT COLOR="#5F9EA0">!</FONT></B>j <B><FONT COLOR="#5F9EA0">+</FONT></B> 1) &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> e
    done <B><FONT COLOR="#A020F0">in</FONT></B>
  <B><FONT COLOR="#A020F0">let</FONT></B> <B><FONT COLOR="#A020F0">rec</FONT></B> sortto srcofs dst dstofs len <B><FONT COLOR="#5F9EA0">=</FONT></B>
    <B><FONT COLOR="#A020F0">if</FONT></B> len <B><FONT COLOR="#5F9EA0">&lt;=</FONT></B> cutoff <B><FONT COLOR="#A020F0">then</FONT></B> isortto srcofs dst dstofs len <B><FONT COLOR="#A020F0">else</FONT></B> begin
      <B><FONT COLOR="#A020F0">let</FONT></B> l1 <B><FONT COLOR="#5F9EA0">=</FONT></B> len <B><FONT COLOR="#5F9EA0">/</FONT></B> 2 <B><FONT COLOR="#A020F0">in</FONT></B>
      <B><FONT COLOR="#A020F0">let</FONT></B> l2 <B><FONT COLOR="#5F9EA0">=</FONT></B> len <B><FONT COLOR="#5F9EA0">-</FONT></B> l1 <B><FONT COLOR="#A020F0">in</FONT></B>
      sortto (srcofs <B><FONT COLOR="#5F9EA0">+</FONT></B> l1) dst (dstofs <B><FONT COLOR="#5F9EA0">+</FONT></B> l1) l2;
      sortto srcofs ar (srcofs <B><FONT COLOR="#5F9EA0">+</FONT></B> l2) l1;
      merge (srcofs <B><FONT COLOR="#5F9EA0">+</FONT></B> l2) l1 dst (dstofs <B><FONT COLOR="#5F9EA0">+</FONT></B> l1) l2 dst dstofs
    <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">in</FONT></B>
  <B><FONT COLOR="#A020F0">if</FONT></B> len <B><FONT COLOR="#5F9EA0">&lt;=</FONT></B> cutoff <B><FONT COLOR="#A020F0">then</FONT></B> isortto 0 ar 0 len <B><FONT COLOR="#A020F0">else</FONT></B> begin
    <B><FONT COLOR="#A020F0">let</FONT></B> l1 <B><FONT COLOR="#5F9EA0">=</FONT></B> len <B><FONT COLOR="#5F9EA0">/</FONT></B> 2 <B><FONT COLOR="#A020F0">in</FONT></B>
    <B><FONT COLOR="#A020F0">let</FONT></B> l2 <B><FONT COLOR="#5F9EA0">=</FONT></B> len <B><FONT COLOR="#5F9EA0">-</FONT></B> l1 <B><FONT COLOR="#A020F0">in</FONT></B>
    <B><FONT COLOR="#A020F0">let</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.make l2 ar.(0) <B><FONT COLOR="#A020F0">in</FONT></B>
    sortto l1 t 0 l2;
    sortto 0 ar l2 l1;
    merge l2 l1 t 0 l2 ar 0
  <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">let</FONT></B> n_ref <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0 <B><FONT COLOR="#A020F0">and</FONT></B> sum_ref <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0.0 <B><FONT COLOR="#A020F0">and</FONT></B> size_ref <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 4096
<B><FONT COLOR="#A020F0">let</FONT></B> nums_ref <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> (Array.create <B><FONT COLOR="#5F9EA0">!</FONT></B>size_ref 0.0);;

try
  <B><FONT COLOR="#A020F0">while</FONT></B> true <B><FONT COLOR="#A020F0">do</FONT></B>
    <B><FONT COLOR="#A020F0">let</FONT></B> num <B><FONT COLOR="#5F9EA0">=</FONT></B> float_of_string (input_line stdin) <B><FONT COLOR="#A020F0">in</FONT></B>
    <B><FONT COLOR="#5F9EA0">!</FONT></B>nums_ref.(<B><FONT COLOR="#5F9EA0">!</FONT></B>n_ref) &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> num;
    sum_ref <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>sum_ref <B><FONT COLOR="#5F9EA0">+</FONT></B>. num;
    incr n_ref;
    <B><FONT COLOR="#A020F0">let</FONT></B> size <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>size_ref <B><FONT COLOR="#A020F0">in</FONT></B>
    <B><FONT COLOR="#A020F0">if</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>n_ref <B><FONT COLOR="#5F9EA0">=</FONT></B> size <B><FONT COLOR="#A020F0">then</FONT></B> begin
      <B><FONT COLOR="#A020F0">let</FONT></B> new_size <B><FONT COLOR="#5F9EA0">=</FONT></B> size lsl 2 <B><FONT COLOR="#A020F0">in</FONT></B>
      size_ref <B><FONT COLOR="#5F9EA0">:=</FONT></B> new_size;
      <B><FONT COLOR="#A020F0">let</FONT></B> new_ar <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.create new_size 0.0 <B><FONT COLOR="#A020F0">in</FONT></B>
      Array.blit <B><FONT COLOR="#5F9EA0">!</FONT></B>nums_ref 0 new_ar 0 size;
      nums_ref <B><FONT COLOR="#5F9EA0">:=</FONT></B> new_ar
    <B><FONT COLOR="#A020F0">end</FONT></B>
  done
<B><FONT COLOR="#A020F0">with</FONT></B> End_of_file <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ();

<B><FONT COLOR="#A020F0">let</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>n_ref <B><FONT COLOR="#A020F0">and</FONT></B> nums <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>nums_ref <B><FONT COLOR="#A020F0">in</FONT></B>
<B><FONT COLOR="#A020F0">let</FONT></B> n_float <B><FONT COLOR="#5F9EA0">=</FONT></B> float n <B><FONT COLOR="#A020F0">in</FONT></B>
<B><FONT COLOR="#A020F0">let</FONT></B> mean <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>sum_ref <B><FONT COLOR="#5F9EA0">/</FONT></B>. n_float
<B><FONT COLOR="#A020F0">and</FONT></B> avg_dev_ref <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0.0 <B><FONT COLOR="#A020F0">and</FONT></B> std_dev_ref <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0.0 <B><FONT COLOR="#A020F0">and</FONT></B> var_ref <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0.0
<B><FONT COLOR="#A020F0">and</FONT></B> skew_ref <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0.0 <B><FONT COLOR="#A020F0">and</FONT></B> kurt_ref <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0.0 <B><FONT COLOR="#A020F0">in</FONT></B>

for i <B><FONT COLOR="#5F9EA0">=</FONT></B> 0 to n <B><FONT COLOR="#5F9EA0">-</FONT></B> 1 <B><FONT COLOR="#A020F0">do</FONT></B>
  <B><FONT COLOR="#A020F0">let</FONT></B> dev <B><FONT COLOR="#5F9EA0">=</FONT></B> nums.(i) <B><FONT COLOR="#5F9EA0">-</FONT></B>. mean <B><FONT COLOR="#A020F0">in</FONT></B>
  avg_dev_ref <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>avg_dev_ref <B><FONT COLOR="#5F9EA0">+</FONT></B>. abs_float dev;
  <B><FONT COLOR="#A020F0">let</FONT></B> dev2 <B><FONT COLOR="#5F9EA0">=</FONT></B> dev <B><FONT COLOR="#5F9EA0">*</FONT></B>. dev <B><FONT COLOR="#A020F0">in</FONT></B>
  var_ref <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>var_ref <B><FONT COLOR="#5F9EA0">+</FONT></B>. dev2;
  <B><FONT COLOR="#A020F0">let</FONT></B> dev3 <B><FONT COLOR="#5F9EA0">=</FONT></B> dev2 <B><FONT COLOR="#5F9EA0">*</FONT></B>. dev <B><FONT COLOR="#A020F0">in</FONT></B>
  skew_ref <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>skew_ref <B><FONT COLOR="#5F9EA0">+</FONT></B>. dev3;
  kurt_ref <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>kurt_ref <B><FONT COLOR="#5F9EA0">+</FONT></B>. dev3 <B><FONT COLOR="#5F9EA0">*</FONT></B>. dev
done;

<B><FONT COLOR="#A020F0">let</FONT></B> avg_dev <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>avg_dev_ref <B><FONT COLOR="#5F9EA0">/</FONT></B>. n_float <B><FONT COLOR="#A020F0">and</FONT></B> var <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>var_ref <B><FONT COLOR="#5F9EA0">/</FONT></B>. float (n <B><FONT COLOR="#5F9EA0">-</FONT></B> 1) <B><FONT COLOR="#A020F0">in</FONT></B>
<B><FONT COLOR="#A020F0">let</FONT></B> std_dev <B><FONT COLOR="#5F9EA0">=</FONT></B> sqrt var <B><FONT COLOR="#A020F0">in</FONT></B>

<B><FONT COLOR="#A020F0">if</FONT></B> var <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 0.0 <B><FONT COLOR="#A020F0">then</FONT></B> begin
  skew_ref <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>skew_ref <B><FONT COLOR="#5F9EA0">/</FONT></B>. n_float <B><FONT COLOR="#5F9EA0">/</FONT></B>. var <B><FONT COLOR="#5F9EA0">/</FONT></B>. std_dev;
  kurt_ref <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>kurt_ref <B><FONT COLOR="#5F9EA0">/</FONT></B>. n_float <B><FONT COLOR="#5F9EA0">/</FONT></B>. var <B><FONT COLOR="#5F9EA0">/</FONT></B>. var <B><FONT COLOR="#5F9EA0">-</FONT></B>. 3.0
<B><FONT COLOR="#A020F0">end</FONT></B>;

sort_floats n nums;

<B><FONT COLOR="#A020F0">let</FONT></B> median <B><FONT COLOR="#5F9EA0">=</FONT></B>
  <B><FONT COLOR="#A020F0">let</FONT></B> mid <B><FONT COLOR="#5F9EA0">=</FONT></B> n lsr 1 <B><FONT COLOR="#A020F0">in</FONT></B>
  <B><FONT COLOR="#A020F0">if</FONT></B> n <B><FONT COLOR="#5F9EA0">mod</FONT></B> 2 <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 <B><FONT COLOR="#A020F0">then</FONT></B> nums.(mid)
  <B><FONT COLOR="#A020F0">else</FONT></B> (nums.(mid) <B><FONT COLOR="#5F9EA0">+</FONT></B>. nums.(mid <B><FONT COLOR="#5F9EA0">-</FONT></B> 1)) <B><FONT COLOR="#5F9EA0">/</FONT></B>. 2.0 <B><FONT COLOR="#A020F0">in</FONT></B>

Printf.printf <B><FONT COLOR="#BC8F8F">&quot;n:                  %d\n&quot;</FONT></B> n;
Printf.printf <B><FONT COLOR="#BC8F8F">&quot;median:             %f\n&quot;</FONT></B> median;
Printf.printf <B><FONT COLOR="#BC8F8F">&quot;mean:               %f\n&quot;</FONT></B> mean;
Printf.printf <B><FONT COLOR="#BC8F8F">&quot;average_deviation:  %f\n&quot;</FONT></B> avg_dev;
Printf.printf <B><FONT COLOR="#BC8F8F">&quot;standard_deviation: %f\n&quot;</FONT></B> std_dev;
Printf.printf <B><FONT COLOR="#BC8F8F">&quot;variance:           %f\n&quot;</FONT></B> var;
Printf.printf <B><FONT COLOR="#BC8F8F">&quot;skew:               %f\n&quot;</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>skew_ref;
Printf.printf <B><FONT COLOR="#BC8F8F">&quot;kurtosis:           %f\n&quot;</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>kurt_ref</pre></td></tr></table>
