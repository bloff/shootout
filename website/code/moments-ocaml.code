<span class="line">    1 </span><span class="com">(*
</span><span class="line">    2 </span><span class="com"> * $Id: moments-ocaml.code,v 1.3 2004-11-11 07:14:01 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * from Markus Mottl
</span><span class="line">    5 </span><span class="com"> *)</span>
<span class="line">    6 </span>
<span class="line">    7 </span><span class="kwa">let</span> cutoff <span class="sym">=</span> <span class="num">5
</span><span class="line">    8 </span><span class="num">
</span><span class="line">    9 </span><span class="num"></span><span class="com">(* Unscrupulously stolen from Array.stable_sort (OCaml standard distribution) *)</span>
<span class="line">   10 </span><span class="kwa">let</span> sort_floats len <span class="sym">(</span>ar <span class="sym">:</span> <span class="kwb">float</span> array<span class="sym">) =
</span><span class="line">   11 </span><span class="sym"></span>  <span class="kwa">let</span> merge src1ofs src1len src2 src2ofs src2len dst dstofs <span class="sym">=
</span><span class="line">   12 </span><span class="sym"></span>    <span class="kwa">let</span> src1r <span class="sym">=</span> src1ofs <span class="sym">+</span> src1len <span class="kwa">and</span> src2r <span class="sym">=</span> src2ofs <span class="sym">+</span> src2len <span class="kwa">in
</span><span class="line">   13 </span><span class="kwa">    let rec</span> loop i1 s1 i2 s2 d <span class="sym">=
</span><span class="line">   14 </span><span class="sym"></span>      <span class="kwa">if</span> s1 <span class="sym">&lt;=</span> s2 <span class="kwa">then begin
</span><span class="line">   15 </span><span class="kwa"></span>        dst.<span class="sym">(</span>d<span class="sym">) &lt;-</span> s1<span class="sym">;
</span><span class="line">   16 </span><span class="sym"></span>        <span class="kwa">let</span> i1 <span class="sym">=</span> i1 <span class="sym">+</span> <span class="num">1</span> <span class="kwa">in
</span><span class="line">   17 </span><span class="kwa">        if</span> i1 <span class="sym">&lt;</span> src1r <span class="kwa">then</span> loop i1 ar.<span class="sym">(</span>i1<span class="sym">)</span> i2 s2 <span class="sym">(</span>d <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   18 </span><span class="sym"></span>        <span class="kwa">else</span> Array.blit src2 i2 dst <span class="sym">(</span>d <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span>src2r <span class="sym">-</span> i2<span class="sym">)
</span><span class="line">   19 </span><span class="sym"></span>      <span class="kwa">end else begin
</span><span class="line">   20 </span><span class="kwa"></span>        dst.<span class="sym">(</span>d<span class="sym">) &lt;-</span> s2<span class="sym">;
</span><span class="line">   21 </span><span class="sym"></span>        <span class="kwa">let</span> i2 <span class="sym">=</span> i2 <span class="sym">+</span> <span class="num">1</span> <span class="kwa">in
</span><span class="line">   22 </span><span class="kwa">        if</span> i2 <span class="sym">&lt;</span> src2r <span class="kwa">then</span> loop i1 s1 i2 src2.<span class="sym">(</span>i2<span class="sym">) (</span>d <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   23 </span><span class="sym"></span>        <span class="kwa">else</span> Array.blit ar i1 dst <span class="sym">(</span>d <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span>src1r <span class="sym">-</span> i1<span class="sym">)
</span><span class="line">   24 </span><span class="sym"></span>      <span class="kwa">end in
</span><span class="line">   25 </span><span class="kwa"></span>    loop src1ofs ar.<span class="sym">(</span>src1ofs<span class="sym">)</span> src2ofs src2.<span class="sym">(</span>src2ofs<span class="sym">)</span> dstofs <span class="kwa">in
</span><span class="line">   26 </span><span class="kwa">  let</span> isortto srcofs dst dstofs len <span class="sym">=
</span><span class="line">   27 </span><span class="sym"></span>    <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> len <span class="num">- 1</span> <span class="kwa">do
</span><span class="line">   28 </span><span class="kwa">      let</span> e <span class="sym">=</span> ar.<span class="sym">(</span>srcofs <span class="sym">+</span> i<span class="sym">)</span> <span class="kwa">and</span> j <span class="sym">=</span> ref <span class="sym">(</span>dstofs <span class="sym">+</span> i <span class="num">- 1</span><span class="sym">)</span> <span class="kwa">in
</span><span class="line">   29 </span><span class="kwa">      while</span> <span class="sym">!</span>j <span class="sym">&gt;=</span> dstofs <span class="sym">&amp;&amp;</span> e <span class="sym">&lt;=</span> dst.<span class="sym">(!</span>j<span class="sym">)</span> <span class="kwa">do
</span><span class="line">   30 </span><span class="kwa"></span>        dst.<span class="sym">(!</span>j <span class="sym">+</span> <span class="num">1</span><span class="sym">) &lt;-</span> dst.<span class="sym">(!</span>j<span class="sym">);
</span><span class="line">   31 </span><span class="sym"></span>        decr j<span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>      <span class="kwa">done</span><span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>      dst.<span class="sym">(!</span>j <span class="sym">+</span> <span class="num">1</span><span class="sym">) &lt;-</span> e
<span class="line">   34 </span>    <span class="kwa">done in
</span><span class="line">   35 </span><span class="kwa">  let rec</span> sortto srcofs dst dstofs len <span class="sym">=
</span><span class="line">   36 </span><span class="sym"></span>    <span class="kwa">if</span> len <span class="sym">&lt;=</span> cutoff <span class="kwa">then</span> isortto srcofs dst dstofs len <span class="kwa">else begin
</span><span class="line">   37 </span><span class="kwa">      let</span> l1 <span class="sym">=</span> len <span class="sym">/</span> <span class="num">2</span> <span class="kwa">in
</span><span class="line">   38 </span><span class="kwa">      let</span> l2 <span class="sym">=</span> len <span class="sym">-</span> l1 <span class="kwa">in
</span><span class="line">   39 </span><span class="kwa"></span>      sortto <span class="sym">(</span>srcofs <span class="sym">+</span> l1<span class="sym">)</span> dst <span class="sym">(</span>dstofs <span class="sym">+</span> l1<span class="sym">)</span> l2<span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>      sortto srcofs ar <span class="sym">(</span>srcofs <span class="sym">+</span> l2<span class="sym">)</span> l1<span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span>      merge <span class="sym">(</span>srcofs <span class="sym">+</span> l2<span class="sym">)</span> l1 dst <span class="sym">(</span>dstofs <span class="sym">+</span> l1<span class="sym">)</span> l2 dst dstofs
<span class="line">   42 </span>    <span class="kwa">end in
</span><span class="line">   43 </span><span class="kwa">  if</span> len <span class="sym">&lt;=</span> cutoff <span class="kwa">then</span> isortto <span class="num">0</span> ar <span class="num">0</span> len <span class="kwa">else begin
</span><span class="line">   44 </span><span class="kwa">    let</span> l1 <span class="sym">=</span> len <span class="sym">/</span> <span class="num">2</span> <span class="kwa">in
</span><span class="line">   45 </span><span class="kwa">    let</span> l2 <span class="sym">=</span> len <span class="sym">-</span> l1 <span class="kwa">in
</span><span class="line">   46 </span><span class="kwa">    let</span> t <span class="sym">=</span> Array.make l2 ar.<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">in
</span><span class="line">   47 </span><span class="kwa"></span>    sortto l1 t <span class="num">0</span> l2<span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span>    sortto <span class="num">0</span> ar l2 l1<span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span>    merge l2 l1 t <span class="num">0</span> l2 ar <span class="num">0
</span><span class="line">   50 </span><span class="num"></span>  <span class="kwa">end
</span><span class="line">   51 </span><span class="kwa">
</span><span class="line">   52 </span><span class="kwa">let</span> n_ref <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">and</span> sum_ref <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">and</span> size_ref <span class="sym">=</span> ref <span class="num">4096
</span><span class="line">   53 </span><span class="num"></span><span class="kwa">let</span> nums_ref <span class="sym">=</span> ref <span class="sym">(</span>Array.create <span class="sym">!</span>size_ref <span class="num">0.0</span><span class="sym">);;
</span><span class="line">   54 </span><span class="sym">
</span><span class="line">   55 </span><span class="sym"></span><span class="kwa">try
</span><span class="line">   56 </span><span class="kwa">  while true do
</span><span class="line">   57 </span><span class="kwa">    let</span> num <span class="sym">=</span> float_of_string <span class="sym">(</span>input_line stdin<span class="sym">)</span> <span class="kwa">in
</span><span class="line">   58 </span><span class="kwa"></span>    <span class="sym">!</span>nums_ref.<span class="sym">(!</span>n_ref<span class="sym">) &lt;-</span> num<span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>    sum_ref <span class="sym">:= !</span>sum_ref <span class="sym">+</span>. num<span class="sym">;
</span><span class="line">   60 </span><span class="sym"></span>    incr n_ref<span class="sym">;
</span><span class="line">   61 </span><span class="sym"></span>    <span class="kwa">let</span> size <span class="sym">= !</span>size_ref <span class="kwa">in
</span><span class="line">   62 </span><span class="kwa">    if</span> <span class="sym">!</span>n_ref <span class="sym">=</span> size <span class="kwa">then begin
</span><span class="line">   63 </span><span class="kwa">      let</span> new_size <span class="sym">=</span> size <span class="kwa">lsl</span> <span class="num">2</span> <span class="kwa">in
</span><span class="line">   64 </span><span class="kwa"></span>      size_ref <span class="sym">:=</span> new_size<span class="sym">;
</span><span class="line">   65 </span><span class="sym"></span>      <span class="kwa">let</span> new_ar <span class="sym">=</span> Array.create new_size <span class="num">0.0</span> <span class="kwa">in
</span><span class="line">   66 </span><span class="kwa"></span>      Array.blit <span class="sym">!</span>nums_ref <span class="num">0</span> new_ar <span class="num">0</span> size<span class="sym">;
</span><span class="line">   67 </span><span class="sym"></span>      nums_ref <span class="sym">:=</span> new_ar
<span class="line">   68 </span>    <span class="kwa">end
</span><span class="line">   69 </span><span class="kwa">  done
</span><span class="line">   70 </span><span class="kwa">with</span> End_of_file <span class="sym">-&gt; ();
</span><span class="line">   71 </span><span class="sym">
</span><span class="line">   72 </span><span class="sym"></span><span class="kwa">let</span> n <span class="sym">= !</span>n_ref <span class="kwa">and</span> nums <span class="sym">= !</span>nums_ref <span class="kwa">in
</span><span class="line">   73 </span><span class="kwa">let</span> n_float <span class="sym">=</span> <span class="kwb">float</span> n <span class="kwa">in
</span><span class="line">   74 </span><span class="kwa">let</span> mean <span class="sym">= !</span>sum_ref <span class="sym">/</span>. n_float
<span class="line">   75 </span><span class="kwa">and</span> avg_dev_ref <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">and</span> std_dev_ref <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">and</span> var_ref <span class="sym">=</span> ref <span class="num">0.0
</span><span class="line">   76 </span><span class="num"></span><span class="kwa">and</span> skew_ref <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">and</span> kurt_ref <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">in
</span><span class="line">   77 </span><span class="kwa">
</span><span class="line">   78 </span><span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> n <span class="num">- 1</span> <span class="kwa">do
</span><span class="line">   79 </span><span class="kwa">  let</span> dev <span class="sym">=</span> nums.<span class="sym">(</span>i<span class="sym">) -</span>. mean <span class="kwa">in
</span><span class="line">   80 </span><span class="kwa"></span>  avg_dev_ref <span class="sym">:= !</span>avg_dev_ref <span class="sym">+</span>. abs_float dev<span class="sym">;
</span><span class="line">   81 </span><span class="sym"></span>  <span class="kwa">let</span> dev2 <span class="sym">=</span> dev <span class="sym">*</span>. dev <span class="kwa">in
</span><span class="line">   82 </span><span class="kwa"></span>  var_ref <span class="sym">:= !</span>var_ref <span class="sym">+</span>. dev2<span class="sym">;
</span><span class="line">   83 </span><span class="sym"></span>  <span class="kwa">let</span> dev3 <span class="sym">=</span> dev2 <span class="sym">*</span>. dev <span class="kwa">in
</span><span class="line">   84 </span><span class="kwa"></span>  skew_ref <span class="sym">:= !</span>skew_ref <span class="sym">+</span>. dev3<span class="sym">;
</span><span class="line">   85 </span><span class="sym"></span>  kurt_ref <span class="sym">:= !</span>kurt_ref <span class="sym">+</span>. dev3 <span class="sym">*</span>. dev
<span class="line">   86 </span><span class="kwa">done</span><span class="sym">;
</span><span class="line">   87 </span><span class="sym">
</span><span class="line">   88 </span><span class="sym"></span><span class="kwa">let</span> avg_dev <span class="sym">= !</span>avg_dev_ref <span class="sym">/</span>. n_float <span class="kwa">and</span> var <span class="sym">= !</span>var_ref <span class="sym">/</span>. <span class="kwb">float</span> <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">)</span> <span class="kwa">in
</span><span class="line">   89 </span><span class="kwa">let</span> std_dev <span class="sym">=</span> sqrt var <span class="kwa">in
</span><span class="line">   90 </span><span class="kwa">
</span><span class="line">   91 </span><span class="kwa">if</span> var <span class="sym">&gt;</span> <span class="num">0.0</span> <span class="kwa">then begin
</span><span class="line">   92 </span><span class="kwa"></span>  skew_ref <span class="sym">:= !</span>skew_ref <span class="sym">/</span>. n_float <span class="sym">/</span>. var <span class="sym">/</span>. std_dev<span class="sym">;
</span><span class="line">   93 </span><span class="sym"></span>  kurt_ref <span class="sym">:= !</span>kurt_ref <span class="sym">/</span>. n_float <span class="sym">/</span>. var <span class="sym">/</span>. var <span class="sym">-</span>. <span class="num">3.0
</span><span class="line">   94 </span><span class="num"></span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   95 </span><span class="sym">
</span><span class="line">   96 </span><span class="sym"></span>sort_floats n nums<span class="sym">;
</span><span class="line">   97 </span><span class="sym">
</span><span class="line">   98 </span><span class="sym"></span><span class="kwa">let</span> median <span class="sym">=
</span><span class="line">   99 </span><span class="sym"></span>  <span class="kwa">let</span> mid <span class="sym">=</span> n <span class="kwa">lsr</span> <span class="num">1</span> <span class="kwa">in
</span><span class="line">  100 </span><span class="kwa">  if</span> n <span class="kwa">mod</span> <span class="num">2</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span> nums.<span class="sym">(</span>mid<span class="sym">)
</span><span class="line">  101 </span><span class="sym"></span>  <span class="kwa">else</span> <span class="sym">(</span>nums.<span class="sym">(</span>mid<span class="sym">) +</span>. nums.<span class="sym">(</span>mid <span class="num">- 1</span><span class="sym">)) /</span>. <span class="num">2.0</span> <span class="kwa">in
</span><span class="line">  102 </span><span class="kwa">
</span><span class="line">  103 </span><span class="kwa"></span>Printf.printf <span class="str">&quot;n:                  %d</span><span class="esc">\n</span><span class="str">&quot;</span> n<span class="sym">;
</span><span class="line">  104 </span><span class="sym"></span>Printf.printf <span class="str">&quot;median:             %f</span><span class="esc">\n</span><span class="str">&quot;</span> median<span class="sym">;
</span><span class="line">  105 </span><span class="sym"></span>Printf.printf <span class="str">&quot;mean:               %f</span><span class="esc">\n</span><span class="str">&quot;</span> mean<span class="sym">;
</span><span class="line">  106 </span><span class="sym"></span>Printf.printf <span class="str">&quot;average_deviation:  %f</span><span class="esc">\n</span><span class="str">&quot;</span> avg_dev<span class="sym">;
</span><span class="line">  107 </span><span class="sym"></span>Printf.printf <span class="str">&quot;standard_deviation: %f</span><span class="esc">\n</span><span class="str">&quot;</span> std_dev<span class="sym">;
</span><span class="line">  108 </span><span class="sym"></span>Printf.printf <span class="str">&quot;variance:           %f</span><span class="esc">\n</span><span class="str">&quot;</span> var<span class="sym">;
</span><span class="line">  109 </span><span class="sym"></span>Printf.printf <span class="str">&quot;skew:               %f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">!</span>skew_ref<span class="sym">;
</span><span class="line">  110 </span><span class="sym"></span>Printf.printf <span class="str">&quot;kurtosis:           %f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">!</span>kurt_ref
