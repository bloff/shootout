\ reverse<span class="sym">-</span>complement<span class="sym">.</span>gforth
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\
\ Submitted by Ian Osgood

\ complement mappings
create map s<span class="str">&quot; TVGHefCDijMlKNopqYSAABWxRz&quot;</span> mem<span class="sym">,</span>

<span class="sym">:</span> map<span class="sym">-</span><span class="kwd">c</span> <span class="sym">(</span> c <span class="sym">--</span> comp <span class="sym">)</span> <span class="num">32</span> <span class="kwa">or</span> <span class="str">'a - map + c&#64; ;</span>
<span class="str"></span>
<span class="str">60 constant line-len</span>
<span class="str"></span>
<span class="str">: rev-comp ( end -- start ) line-len</span>
<span class="str">  begin  over pad u&gt;</span>
<span class="str">  while  swap 1- dup c&#64; map-c emit</span>
<span class="str">         swap 1- dup 0= if cr line-len + then</span>
<span class="str">  repeat line-len &lt; if cr then ;</span>
<span class="str"></span>
<span class="str">: main   pad ( end )</span>
<span class="str">  begin  dup 80 stdin read-line throw</span>
<span class="str">  while  over c&#64; '</span><span class="sym">&gt; =</span>
         <span class="kwa">if</span>   over  rev<span class="sym">-</span>comp  <span class="sym">-</span>rot type cr
         <span class="kwa">else</span> <span class="sym">+</span> then
  repeat drop rev<span class="sym">-</span>comp drop <span class="sym">;</span>

main bye  \ done<span class="sym">!</span>

