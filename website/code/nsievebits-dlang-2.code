<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Joost van der Sluis</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release nsievebits2.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">3</span><span class="sym">;</span> i<span class="sym">++)</span>
        <span class="kwd">primes</span><span class="sym">(</span>n<span class="sym">-</span>i<span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">primes</span><span class="sym">(</span><span class="kwa">int</span> n<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">const uint</span> bpc <span class="sym">=</span> <span class="kwa">uint</span><span class="sym">.</span>sizeof <span class="sym">*</span> <span class="num">8</span><span class="sym">;</span>
    <span class="kwa">int</span> count<span class="sym">,</span> prime<span class="sym">,</span> size <span class="sym">=</span> <span class="num">10000</span> <span class="sym">&lt;&lt;</span> n<span class="sym">;</span>
    <span class="kwa">uint</span><span class="sym">[]</span> flags<span class="sym">;</span>

    flags<span class="sym">.</span>length <span class="sym">=</span> size <span class="sym">/</span> bpc <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    flags<span class="sym">[] =</span> <span class="kwa">uint</span><span class="sym">.</span>max<span class="sym">;</span>

    <span class="kwa">for</span><span class="sym">(</span>prime <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> prime <span class="sym">&lt;=</span> size<span class="sym">;</span> prime<span class="sym">++)</span>
    <span class="sym">{</span>
        bool <span class="kwb">I</span>s<span class="kwb">S</span>et<span class="sym">(</span><span class="kwa">uint</span> i<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">int</span> offset <span class="sym">=</span> i <span class="sym">/</span> bpc<span class="sym">;</span>
            <span class="kwa">uint</span> mask   <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>i <span class="sym">%</span> bpc<span class="sym">);</span>
            <span class="kwa">return</span> <span class="sym">(</span>flags<span class="sym">[</span>offset<span class="sym">] &amp;</span> mask<span class="sym">) &lt;&gt;</span> <span class="num">0</span><span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwa">if</span><span class="sym">(</span><span class="kwb">I</span>s<span class="kwb">S</span>et<span class="sym">(</span>prime<span class="sym">))</span>
        <span class="sym">{</span>
            count<span class="sym">++;</span>
            <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> prime <span class="sym">+</span> prime<span class="sym">;</span> i <span class="sym">&lt;=</span> size<span class="sym">;</span> i <span class="sym">+=</span> prime<span class="sym">)</span>
            <span class="sym">{</span>
                <span class="kwa">void</span> <span class="kwb">C</span>lear<span class="sym">(</span><span class="kwa">uint</span> i<span class="sym">)</span>
                <span class="sym">{</span>
                    <span class="kwa">int</span> offset <span class="sym">=</span> i <span class="sym">/</span> bpc<span class="sym">;</span>
                    <span class="kwa">uint</span> mask   <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>i <span class="sym">%</span> bpc<span class="sym">);</span>
                    <span class="kwa">if</span><span class="sym">((</span>flags<span class="sym">[</span>offset<span class="sym">] &amp;</span> mask<span class="sym">) &lt;&gt;</span> <span class="num">0</span><span class="sym">)</span> flags<span class="sym">[</span>offset<span class="sym">] =</span> flags<span class="sym">[</span>offset<span class="sym">]</span> ^ mask<span class="sym">;</span>
                <span class="sym">}</span>
                <span class="kwb">C</span>lear<span class="sym">(</span>i<span class="sym">);</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d&quot;</span><span class="sym">,</span> size<span class="sym">,</span> count<span class="sym">);</span>
<span class="sym">}</span>
