<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: pidigits-groovy.code,v 1.5 2005-10-01 07:37:29 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen

	Trailing 'G' stands for BigInteger (unrestricted size) in groovy
*/</span>

<span class="kwc">class</span> T <span class="sym">{

</span>	<span class="kwc">public</span> q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">,</span> k <span class="sym">=</span> <span class="num">0G

</span>	def compose<span class="sym">(</span>t2<span class="sym">) {
</span>		<span class="kwa">new</span> T<span class="sym">(</span>q<span class="sym">:</span> q <span class="sym">*</span> t2<span class="sym">.</span>q<span class="sym">,
</span>			r<span class="sym">:</span> q <span class="sym">*</span> t2<span class="sym">.</span>r <span class="sym">+</span> r <span class="sym">*</span> t2<span class="sym">.</span>t<span class="sym">,
</span>			s<span class="sym">:</span> s <span class="sym">*</span> t2<span class="sym">.</span>q <span class="sym">+</span> t <span class="sym">*</span> t2<span class="sym">.</span>s<span class="sym">,
</span>			t<span class="sym">:</span> s <span class="sym">*</span> t2<span class="sym">.</span>r <span class="sym">+</span> t <span class="sym">*</span> t2<span class="sym">.</span>t<span class="sym">)
	}

</span>	def extract<span class="sym">(</span>j<span class="sym">) {
</span>		<span class="slc">// groovy does not support integer division using /
</span>		<span class="sym">(</span>q<span class="sym">*</span>j <span class="sym">+</span> r<span class="sym">).</span>divide<span class="sym">(</span>s<span class="sym">*</span>j <span class="sym">+</span> t<span class="sym">)
	}

</span>	def next<span class="sym">() {
</span>		k<span class="sym">++
</span>		q <span class="sym">=</span> k
		r <span class="sym">=</span> <span class="num">4</span>G<span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span>G
		s <span class="sym">=</span> <span class="num">0G
</span>		t <span class="sym">=</span> <span class="num">2</span>G<span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span>G

		<span class="kwa">this
</span>	<span class="sym">}
}

</span><span class="kwc">class</span> Digits <span class="sym">{

</span>    def x <span class="sym">=</span> <span class="kwa">new</span> T<span class="sym">(</span>q<span class="sym">:</span><span class="num">0G</span><span class="sym">,</span> r<span class="sym">:</span><span class="num">0G</span><span class="sym">,</span> s<span class="sym">:</span><span class="num">0G</span><span class="sym">,</span> t<span class="sym">:</span><span class="num">0G</span><span class="sym">)
</span>    def z <span class="sym">=</span> <span class="kwa">new</span> T<span class="sym">(</span>q<span class="sym">:</span><span class="num">1</span>G<span class="sym">,</span> r<span class="sym">:</span><span class="num">0G</span><span class="sym">,</span> s<span class="sym">:</span><span class="num">0G</span><span class="sym">,</span> t<span class="sym">:</span><span class="num">1</span>G<span class="sym">)

</span>	<span class="kwc">private</span> consume<span class="sym">(</span>T t<span class="sym">) {
</span>		z<span class="sym">.</span>compose<span class="sym">(</span>t<span class="sym">)
	}

</span>	<span class="kwc">private</span> digit<span class="sym">() {
</span>		z<span class="sym">.</span>extract<span class="sym">(</span><span class="num">3</span>G<span class="sym">)
	}

</span>	<span class="kwc">private</span> isSafe<span class="sym">(</span>digit<span class="sym">) {
</span>		digit <span class="sym">==</span> z<span class="sym">.</span>extract<span class="sym">(</span><span class="num">4</span>G<span class="sym">)
	}

</span>	def next<span class="sym">() {
</span>		def y <span class="sym">=</span> digit<span class="sym">()
</span>		<span class="kwa">if</span> <span class="sym">(</span>isSafe<span class="sym">(</span>y<span class="sym">)) {
</span>			z <span class="sym">=</span> produce<span class="sym">(</span>y<span class="sym">)
</span>			<span class="kwa">return</span> y
		<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{
</span>			z <span class="sym">=</span> consume<span class="sym">(</span>x<span class="sym">.</span>next<span class="sym">())
</span>			<span class="kwa">return</span> next<span class="sym">()
		}
	}

</span>	<span class="kwc">private</span> produce<span class="sym">(</span>y<span class="sym">) {
</span>        <span class="kwa">new</span> T<span class="sym">(</span>q<span class="sym">:</span><span class="num">10G</span><span class="sym">,</span> r<span class="sym">:-</span><span class="num">10G</span><span class="sym">*</span>y<span class="sym">,</span> s<span class="sym">:</span><span class="num">0G</span><span class="sym">,</span> t<span class="sym">:</span><span class="num">1</span>G<span class="sym">).</span>compose<span class="sym">(</span>z<span class="sym">)
	}
}

</span>def L <span class="sym">=</span> <span class="num">10
</span>def n <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ? <span class="num">10</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>toInteger<span class="sym">()
</span>def digits <span class="sym">=</span> <span class="kwa">new</span> Digits<span class="sym">()
</span>def j <span class="sym">=</span> <span class="num">0
</span><span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){
</span>	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> L<span class="sym">) {
</span>		<span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>L<span class="sym">)</span> print digits<span class="sym">.</span>next<span class="sym">()
</span>		j <span class="sym">+=</span> L
	<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{
</span>		<span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>n<span class="sym">)</span> print digits<span class="sym">.</span>next<span class="sym">()
</span>		print<span class="sym">(</span><span class="str">&quot; &quot;</span> <span class="sym">* (</span>L<span class="sym">-</span>n<span class="num">-1</span><span class="sym">))
</span>		j <span class="sym">+=</span> n<span class="sym">;
	}
</span>	print<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">);
</span>	println j
	n <span class="sym">-=</span> L<span class="sym">;
}

</span><span class="slc">// EOF
</span>
