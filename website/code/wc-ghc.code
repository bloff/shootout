<span class="line">    1 </span><span class="slc">-- Implementation for 'wc' benchmark optimised for time and memory
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- Author: Tomasz Zielonka &lt;t.zielonka&#64;students.mimuw.edu.pl&gt;
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- compile with: ghc -O2 -o wc wc.hs
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="kwa">import</span> System.IO
<span class="line">    7 </span><span class="kwa">import</span> Data.Array.IO
<span class="line">    8 </span><span class="kwa">import</span> Data.Array.Base <span class="sym">(</span>unsafeRead<span class="sym">)
</span><span class="line">    9 </span><span class="sym"></span><span class="kwa">import</span> Data.Word
<span class="line">   10 </span><span class="kwa">import</span> List
<span class="line">   11 </span>
<span class="line">   12 </span>isspace <span class="sym">::</span> <span class="kwb">Char</span> <span class="sym">-&gt;</span> <span class="kwb">Bool
</span><span class="line">   13 </span><span class="kwb"></span>isspace <span class="str">' '</span>  <span class="sym">=</span> <span class="kwa">True
</span><span class="line">   14 </span><span class="kwa"></span>isspace <span class="str">'\n'</span> <span class="sym">=</span> <span class="kwa">True
</span><span class="line">   15 </span><span class="kwa"></span>isspace <span class="str">'\t'</span> <span class="sym">=</span> <span class="kwa">True
</span><span class="line">   16 </span><span class="kwa"></span>isspace  _   <span class="sym">=</span> <span class="kwa">False
</span><span class="line">   17 </span><span class="kwa">
</span><span class="line">   18 </span><span class="kwa"></span>wc <span class="sym">::</span> Handle <span class="sym">-&gt;</span> IO <span class="sym">(</span><span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">)
</span><span class="line">   19 </span><span class="sym"></span>wc h <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   20 </span><span class="kwa"></span>    buf <span class="sym">&lt;-</span> newArray_ <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> bufSize <span class="num">- 1</span><span class="sym">) ::</span> IO <span class="sym">(</span>IOUArray <span class="kwb">Int</span> Word8<span class="sym">)
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwa">let
</span><span class="line">   22 </span><span class="kwa"></span>        wcLoop <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">(</span><span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">)
</span><span class="line">   23 </span><span class="sym"></span>        wcLoop prevIsSpace nl nw nc i n
<span class="line">   24 </span>            <span class="sym">|</span> prevIsSpace `seq` nl `seq` nw `seq` nc `seq` i `seq` n `seq` <span class="kwa">False</span> <span class="sym">=
</span><span class="line">   25 </span><span class="sym"></span>                undefined
<span class="line">   26 </span>            <span class="sym">|</span> i <span class="sym">==</span> n <span class="sym">=
</span><span class="line">   27 </span><span class="sym"></span>                <span class="kwa">do</span>  n<span class="str">' &lt;- hGetArray h buf bufSize
</span><span class="line">   28 </span><span class="str">                    if n'</span> <span class="sym">==</span> <span class="num">0
</span><span class="line">   29 </span><span class="num"></span>                        <span class="kwa">then</span> return <span class="sym">(</span>nl<span class="sym">,</span> nw<span class="sym">,</span> nc<span class="sym">)
</span><span class="line">   30 </span><span class="sym"></span>                        <span class="kwa">else</span> wcLoop prevIsSpace nl nw nc <span class="num">0</span> n<span class="str">'
</span><span class="line">   31 </span><span class="str">            | otherwise =
</span><span class="line">   32 </span><span class="str">                do  c &lt;- fmap (toEnum . fromEnum) (unsafeRead buf i)
</span><span class="line">   33 </span><span class="str">                    -- Watch out, unsafeRead used here. This gives about
</span><span class="line">   34 </span><span class="str">                    -- 1.6x times speedup.
</span><span class="line">   35 </span><span class="str">
</span><span class="line">   36 </span><span class="str">                    let cIsSpace = oneIf (isspace c)
</span><span class="line">   37 </span><span class="str">                    wcLoop
</span><span class="line">   38 </span><span class="str">                        cIsSpace
</span><span class="line">   39 </span><span class="str">                        (incIf nl (c == '</span>\n<span class="str">'))
</span><span class="line">   40 </span><span class="str">                        (incIf nw (prevIsSpace &gt; cIsSpace))
</span><span class="line">   41 </span><span class="str">                        (nc + 1)
</span><span class="line">   42 </span><span class="str">                        (i + 1)
</span><span class="line">   43 </span><span class="str">                        n
</span><span class="line">   44 </span><span class="str">    wcLoop 1 0 0 0 0 0
</span><span class="line">   45 </span><span class="str">  where
</span><span class="line">   46 </span><span class="str">    bufSize :: Int
</span><span class="line">   47 </span><span class="str">    bufSize = 4096
</span><span class="line">   48 </span><span class="str">
</span><span class="line">   49 </span><span class="str">    oneIf c = if c then 1 else 0
</span><span class="line">   50 </span><span class="str">    incIf n c = if c then n + 1 else n
</span><span class="line">   51 </span><span class="str">
</span><span class="line">   52 </span><span class="str">main :: IO ()
</span><span class="line">   53 </span><span class="str">main = do
</span><span class="line">   54 </span><span class="str">    (nl, nw, nc) &lt;- wc stdin
</span><span class="line">   55 </span><span class="str">    putStrLn $ concat $ intersperse &quot; &quot; $ map show [nl, nw, nc]
</span><span class="line">   56 </span><span class="str"></span>
