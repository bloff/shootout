<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- Implementation for 'wc' benchmark optimised for time and memory
</FONT></I><I><FONT COLOR="#B22222">-- Author: Tomasz Zielonka &lt;t.zielonka@students.mimuw.edu.pl&gt;
</FONT></I><I><FONT COLOR="#B22222">-- http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">-- compile with: ghc -O2 -o wc wc.hs
</FONT></I>
<B><FONT COLOR="#A020F0">import</FONT></B> System.IO
<B><FONT COLOR="#A020F0">import</FONT></B> Data.Array.IO
<B><FONT COLOR="#A020F0">import</FONT></B> Data.Array.Base (unsafeRead)
<B><FONT COLOR="#A020F0">import</FONT></B> Data.Word
<B><FONT COLOR="#A020F0">import</FONT></B> List

isspace <B><FONT COLOR="#228B22">:: Char -&gt; Bool
</FONT></B>isspace <B><FONT COLOR="#BC8F8F">' '</FONT></B>  = True
isspace '\n' = True
isspace '\t' = True
isspace  <B><FONT COLOR="#A020F0">_ </FONT></B>  = False

wc <B><FONT COLOR="#228B22">:: Handle -&gt; IO (Int, Int, Int)
</FONT></B>wc h = do
    buf &lt;- newArray_ (0, bufSize - 1) <B><FONT COLOR="#228B22">:: IO (IOUArray Int Word8)
</FONT></B>    <B><FONT COLOR="#A020F0">let</FONT></B>
        wcLoop <B><FONT COLOR="#228B22">:: Int -&gt; Int -&gt; Int -&gt; Int -&gt; Int -&gt; Int -&gt; IO (Int, Int, Int)
</FONT></B>        wcLoop prevIsSpace nl nw nc i n 
            | prevIsSpace `seq` nl `seq` nw `seq` nc `seq` i `seq` n `seq` False =
                undefined
            | i == n =
                do  n' &lt;- hGetArray h buf bufSize
                    <B><FONT COLOR="#A020F0">if</FONT></B> n' == 0
                        <B><FONT COLOR="#A020F0">then</FONT></B> return (nl, nw, nc)
                        <B><FONT COLOR="#A020F0">else</FONT></B> wcLoop prevIsSpace nl nw nc 0 n'
            | otherwise =
                do  c &lt;- fmap (toEnum . fromEnum) (unsafeRead buf i)
                    <I><FONT COLOR="#B22222">-- Watch out, unsafeRead used here. This gives about
</FONT></I>                    <I><FONT COLOR="#B22222">-- 1.6x times speedup.
</FONT></I>
                    <B><FONT COLOR="#A020F0">let</FONT></B> cIsSpace = oneIf (isspace c)
                    wcLoop
                        cIsSpace
                        (incIf nl (c == '\n'))
                        (incIf nw (prevIsSpace &gt; cIsSpace))
                        (nc + 1)
                        (i + 1)
                        n
    wcLoop 1 0 0 0 0 0
  <B><FONT COLOR="#A020F0">where</FONT></B>
    bufSize <B><FONT COLOR="#228B22">:: Int
</FONT></B>    bufSize = 4096

    oneIf c = <B><FONT COLOR="#A020F0">if</FONT></B> c <B><FONT COLOR="#A020F0">then</FONT></B> 1 <B><FONT COLOR="#A020F0">else</FONT></B> 0
    incIf n c = <B><FONT COLOR="#A020F0">if</FONT></B> c <B><FONT COLOR="#A020F0">then</FONT></B> n + 1 <B><FONT COLOR="#A020F0">else</FONT></B> n

main <B><FONT COLOR="#228B22">:: IO ()
</FONT></B>main = do
    (nl, nw, nc) &lt;- wc stdin    
    putStrLn $ concat $ intersperse <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> $ map show [nl, nw, nc]
</pre></td></tr></table>
