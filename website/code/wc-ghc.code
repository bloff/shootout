<span class="slc">-- Implementation for 'wc' benchmark optimised for time and memory</span>
<span class="slc">-- Author: Tomasz Zielonka &lt;t.zielonka&#64;students.mimuw.edu.pl&gt;</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- compile with: ghc -O2 -o wc wc.hs</span>

<span class="kwa">import</span> System.IO
<span class="kwa">import</span> Data.Array.IO
<span class="kwa">import</span> Data.Array.Base <span class="sym">(</span>unsafeRead<span class="sym">)</span>
<span class="kwa">import</span> Data.Word
<span class="kwa">import</span> List

isspace <span class="sym">::</span> <span class="kwb">Char</span> <span class="sym">-&gt;</span> <span class="kwb">Bool</span>
isspace <span class="str">' '</span>  <span class="sym">=</span> <span class="kwa">True</span>
isspace <span class="str">'\n'</span> <span class="sym">=</span> <span class="kwa">True</span>
isspace <span class="str">'\t'</span> <span class="sym">=</span> <span class="kwa">True</span>
isspace  _   <span class="sym">=</span> <span class="kwa">False</span>

wc <span class="sym">::</span> Handle <span class="sym">-&gt;</span> IO <span class="sym">(</span><span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">)</span>
wc h <span class="sym">=</span> <span class="kwa">do</span>
    buf <span class="sym">&lt;-</span> newArray_ <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> bufSize <span class="sym">-</span> <span class="num">1</span><span class="sym">) ::</span> IO <span class="sym">(</span>IOUArray <span class="kwb">Int</span> Word8<span class="sym">)</span>
    <span class="kwa">let</span>
        wcLoop <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">(</span><span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">)</span>
        wcLoop prevIsSpace nl nw nc i n
            <span class="sym">|</span> prevIsSpace `seq` nl `seq` nw `seq` nc `seq` i `seq` n `seq` <span class="kwa">False</span> <span class="sym">=</span>
                undefined
            <span class="sym">|</span> i <span class="sym">==</span> n <span class="sym">=</span>
                <span class="kwa">do</span>  n<span class="str">' &lt;- hGetArray h buf bufSize</span>
<span class="str">                    if n'</span> <span class="sym">==</span> <span class="num">0</span>
                        <span class="kwa">then</span> return <span class="sym">(</span>nl<span class="sym">,</span> nw<span class="sym">,</span> nc<span class="sym">)</span>
                        <span class="kwa">else</span> wcLoop prevIsSpace nl nw nc <span class="num">0</span> n<span class="str">'</span>
<span class="str">            | otherwise =</span>
<span class="str">                do  c &lt;- fmap (toEnum . fromEnum) (unsafeRead buf i)</span>
<span class="str">                    -- Watch out, unsafeRead used here. This gives about</span>
<span class="str">                    -- 1.6x times speedup.</span>
<span class="str"></span>
<span class="str">                    let cIsSpace = oneIf (isspace c)</span>
<span class="str">                    wcLoop</span>
<span class="str">                        cIsSpace</span>
<span class="str">                        (incIf nl (c == '</span>\n<span class="str">'))</span>
<span class="str">                        (incIf nw (prevIsSpace &gt; cIsSpace))</span>
<span class="str">                        (nc + 1)</span>
<span class="str">                        (i + 1)</span>
<span class="str">                        n</span>
<span class="str">    wcLoop 1 0 0 0 0 0</span>
<span class="str">  where</span>
<span class="str">    bufSize :: Int</span>
<span class="str">    bufSize = 4096</span>
<span class="str"></span>
<span class="str">    oneIf c = if c then 1 else 0</span>
<span class="str">    incIf n c = if c then n + 1 else n</span>
<span class="str"></span>
<span class="str">main :: IO ()</span>
<span class="str">main = do</span>
<span class="str">    (nl, nw, nc) &lt;- wc stdin</span>
<span class="str">    putStrLn $ concat $ intersperse &quot; &quot; $ map show [nl, nw, nc]</span>
<span class="str"></span>
