\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2d</span>rop drop constant NUM

create f NUM allot
variable max<span class="sym">-</span>flips

<span class="sym">:</span> rev <span class="sym">(</span> n <span class="sym">-- )
</span>  dup f <span class="sym">+</span> swap <span class="num">2</span><span class="sym">/</span> f <span class="sym">+</span> f <span class="kwa">do
</span>    <span class="num">1</span><span class="sym">-</span>  i c&#64; over c&#64;  i c<span class="sym">!</span> over c<span class="sym">!
</span>  loop drop <span class="sym">;

:</span> flips <span class="sym">( --</span> n <span class="sym">)</span>  <span class="num">0
</span>  begin f c&#64; <span class="num">1</span><span class="sym">-</span> <span class="kwa">while</span> <span class="num">1</span><span class="sym">+</span>  f c&#64; rev repeat <span class="sym">;

: &gt;</span>f <span class="sym">( &lt;</span>items<span class="sym">&gt; -- &lt;</span>items<span class="sym">&gt; )
</span>  depth <span class="num">0</span> <span class="kwa">do</span> i pick i f <span class="sym">+</span> c<span class="sym">!</span> loop <span class="sym">;

:</span> perms <span class="sym">( &lt;</span>items<span class="sym">&gt;</span> n <span class="sym">-- &lt;</span>items<span class="sym">&gt;</span> n <span class="sym">)
</span>  dup <span class="num">1</span> <span class="sym">=</span> <span class="kwa">if
</span>    drop <span class="sym">&gt;</span>f flips max<span class="sym">-</span>flips &#64; max max<span class="sym">-</span>flips <span class="sym">!</span> <span class="num">1
</span>  <span class="kwa">else
</span>    dup <span class="num">0</span> <span class="kwa">do
</span>      dup <span class="sym">&gt;</span>r <span class="num">1</span><span class="sym">-</span> recurse roll r<span class="sym">&gt;
</span>    loop
  then <span class="sym">;

:</span> items <span class="sym">(</span> n <span class="sym">-- &lt;</span><span class="num">1</span><span class="sym">..</span>n<span class="sym">&gt;</span> n <span class="sym">)</span> dup <span class="num">1</span> <span class="kwa">do</span> i swap loop dup <span class="sym">;
:</span> drops <span class="sym">( &lt;</span>n items<span class="sym">&gt;</span> n <span class="sym">-- )</span> <span class="num">0</span> <span class="kwa">do</span> drop loop <span class="sym">;

</span>\ run <span class="kwa">and</span> print result from stack
   <span class="num">0</span> max<span class="sym">-</span>flips <span class="sym">!</span>  NUM items perms drops
   <span class="sym">.</span><span class="str">&quot; Pfannkuchen(&quot;</span> NUM <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">.</span><span class="str">&quot; ) = &quot;</span> max<span class="sym">-</span>flips &#64; <span class="num">1</span> u<span class="sym">.</span>r cr

bye  \ done<span class="sym">!

</span>
