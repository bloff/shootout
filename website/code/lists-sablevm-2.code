<span class="line">    1 </span><span class="slc">// $Id: lists-sablevm-2.code,v 1.4 2004-11-13 07:41:50 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// from Stephen Darnell
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="slc">//import java.io.*;                // XXX Not needed
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">//import java.util.*;        // XXX Replaced by private version
</span><span class="line">    7 </span><span class="slc"></span><span class="slc">//import java.text.*;        // XXX Not needed
</span><span class="line">    8 </span><span class="slc"></span>
<span class="line">    9 </span><span class="kwa">public class</span> lists <span class="sym">{
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span>        <span class="slc">// XXX Make SIZE a final static
</span><span class="line">   12 </span><span class="slc"></span>    <span class="kwa">final static</span> <span class="kwb">int</span> SIZE <span class="sym">=</span> <span class="num">10000</span><span class="sym">;
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[])
</span><span class="line">   15 </span><span class="sym">    {
</span><span class="line">   16 </span><span class="sym"></span>                <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">10</span><span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>                <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   18 </span><span class="sym">                {
</span><span class="line">   19 </span><span class="sym"></span>                        n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   20 </span><span class="sym">                }
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span>                <span class="kwb">long</span> start <span class="sym">=</span> <span class="kwc">System</span><span class="sym">.</span>currentTimeMillis<span class="sym">();
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span>                <span class="kwb">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>                <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   26 </span><span class="sym"></span>                    result <span class="sym">=</span> test_lists<span class="sym">();
</span><span class="line">   27 </span><span class="sym">                }
</span><span class="line">   28 </span><span class="sym"></span>                <span class="kwb">long</span> stop <span class="sym">=</span> <span class="kwc">System</span><span class="sym">.</span>currentTimeMillis<span class="sym">();
</span><span class="line">   29 </span><span class="sym">
</span><span class="line">   30 </span><span class="sym"></span>                <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>result<span class="sym">);
</span><span class="line">   31 </span><span class="sym"></span>                <span class="slc">// System.out.println(&quot;Took &quot;+(stop-start)+&quot; ms&quot;);
</span><span class="line">   32 </span><span class="slc"></span>    <span class="sym">}
</span><span class="line">   33 </span><span class="sym">
</span><span class="line">   34 </span><span class="sym"></span>    <span class="kwa">public static</span> <span class="kwb">int</span> test_lists<span class="sym">() {
</span><span class="line">   35 </span><span class="sym"></span>        <span class="kwb">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>        <span class="slc">// create a list of integers (Li1) from 1 to SIZE
</span><span class="line">   37 </span><span class="slc"></span>        <span class="kwc">LinkedList</span> Li1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   38 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> SIZE<span class="sym">+</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   39 </span><span class="sym"></span>            Li1<span class="sym">.</span>addLast<span class="sym">(</span><span class="kwa">new</span> LLEntry<span class="sym">(</span>i<span class="sym">));
</span><span class="line">   40 </span><span class="sym">        }
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym"></span><span class="slc">//        System.out.println(&quot;Li1 &quot;+Li1.size());
</span><span class="line">   43 </span><span class="slc"></span>
<span class="line">   44 </span>        <span class="slc">// copy the list to Li2 (not by individual items)
</span><span class="line">   45 </span><span class="slc"></span>        <span class="kwc">LinkedList</span> Li2 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">(</span>Li1<span class="sym">);
</span><span class="line">   46 </span><span class="sym"></span>        <span class="kwc">LinkedList</span> Li3 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   47 </span><span class="sym">
</span><span class="line">   48 </span><span class="sym"></span><span class="slc">//        System.out.println(&quot;Li2 &quot;+Li2.size()+&quot; Li3 &quot;+Li3.size());
</span><span class="line">   49 </span><span class="slc"></span>
<span class="line">   50 </span>        <span class="slc">// remove each individual item from left side of Li2 and
</span><span class="line">   51 </span><span class="slc"></span>        <span class="slc">// append to right side of Li3 (preserving order)
</span><span class="line">   52 </span><span class="slc"></span>        <span class="kwa">while</span> <span class="sym">(!</span> Li2<span class="sym">.</span>isEmpty<span class="sym">()) {
</span><span class="line">   53 </span><span class="sym"></span>            Li3<span class="sym">.</span>addLast<span class="sym">(</span>Li2<span class="sym">.</span>removeFirst<span class="sym">());
</span><span class="line">   54 </span><span class="sym">        }
</span><span class="line">   55 </span><span class="sym">
</span><span class="line">   56 </span><span class="sym"></span><span class="slc">//        System.out.println(&quot;Li2 &quot;+Li2.size()+&quot; Li3 &quot;+Li3.size());
</span><span class="line">   57 </span><span class="slc"></span>
<span class="line">   58 </span>        <span class="slc">// Li2 must now be empty
</span><span class="line">   59 </span><span class="slc"></span>        <span class="slc">// remove each individual item from right side of Li3 and
</span><span class="line">   60 </span><span class="slc"></span>        <span class="slc">// append to right side of Li2 (reversing list)
</span><span class="line">   61 </span><span class="slc"></span>        <span class="kwa">while</span> <span class="sym">(!</span> Li3<span class="sym">.</span>isEmpty<span class="sym">()) {
</span><span class="line">   62 </span><span class="sym"></span>            Li2<span class="sym">.</span>addLast<span class="sym">(</span>Li3<span class="sym">.</span>removeLast<span class="sym">());
</span><span class="line">   63 </span><span class="sym">        }
</span><span class="line">   64 </span><span class="sym">
</span><span class="line">   65 </span><span class="sym"></span><span class="slc">//        System.out.println(&quot;Li2 &quot;+Li2.size()+&quot; Li3 &quot;+Li3.size());
</span><span class="line">   66 </span><span class="slc"></span>
<span class="line">   67 </span>        <span class="slc">// Li3 must now be empty
</span><span class="line">   68 </span><span class="slc"></span>        <span class="slc">// reverse Li1
</span><span class="line">   69 </span><span class="slc"></span>        <span class="kwc">LinkedList</span> tmp <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   70 </span><span class="sym"></span>        <span class="kwa">while</span> <span class="sym">(!</span> Li1<span class="sym">.</span>isEmpty<span class="sym">()) {
</span><span class="line">   71 </span><span class="sym"></span>            tmp<span class="sym">.</span>addFirst<span class="sym">(</span>Li1<span class="sym">.</span>removeFirst<span class="sym">());
</span><span class="line">   72 </span><span class="sym">        }
</span><span class="line">   73 </span><span class="sym"></span>        Li1 <span class="sym">=</span> tmp<span class="sym">;
</span><span class="line">   74 </span><span class="sym"></span>        <span class="slc">// check that first item is now SIZE
</span><span class="line">   75 </span><span class="slc"></span>        <span class="kwa">if</span> <span class="sym">(</span>Li1<span class="sym">.</span>getFirst<span class="sym">().</span>val <span class="sym">!=</span> SIZE<span class="sym">) {
</span><span class="line">   76 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;first item of Li1 != SIZE&quot;</span><span class="sym">);
</span><span class="line">   77 </span><span class="sym"></span>            <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   78 </span><span class="sym">        }
</span><span class="line">   79 </span><span class="sym"></span>        <span class="slc">// compare Li1 and Li2 for equality
</span><span class="line">   80 </span><span class="slc"></span>        <span class="kwa">if</span> <span class="sym">(!</span> Li1<span class="sym">.</span>equals<span class="sym">(</span>Li2<span class="sym">)) {
</span><span class="line">   81 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Li1 and Li2 differ&quot;</span><span class="sym">);
</span><span class="line">   82 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Li1:&quot;</span> <span class="sym">+</span> Li1<span class="sym">);
</span><span class="line">   83 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Li2:&quot;</span> <span class="sym">+</span> Li2<span class="sym">);
</span><span class="line">   84 </span><span class="sym"></span>            <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   85 </span><span class="sym">        }
</span><span class="line">   86 </span><span class="sym"></span>        <span class="slc">// return the length of the list
</span><span class="line">   87 </span><span class="slc"></span>        <span class="kwa">return</span><span class="sym">(</span>Li1<span class="sym">.</span>size<span class="sym">());
</span><span class="line">   88 </span><span class="sym">    }
</span><span class="line">   89 </span><span class="sym">}
</span><span class="line">   90 </span><span class="sym">
</span><span class="line">   91 </span><span class="sym"></span><span class="kwa">class</span> LLEntry
<span class="line">   92 </span><span class="sym">{
</span><span class="line">   93 </span><span class="sym"></span>        LLEntry prev<span class="sym">,</span> next<span class="sym">;
</span><span class="line">   94 </span><span class="sym"></span>        <span class="kwb">int</span> val<span class="sym">;
</span><span class="line">   95 </span><span class="sym">
</span><span class="line">   96 </span><span class="sym"></span>        LLEntry<span class="sym">() { }
</span><span class="line">   97 </span><span class="sym">
</span><span class="line">   98 </span><span class="sym"></span>        LLEntry<span class="sym">(</span><span class="kwb">int</span> value<span class="sym">) {
</span><span class="line">   99 </span><span class="sym"></span>                val <span class="sym">=</span> value<span class="sym">;
</span><span class="line">  100 </span><span class="sym">        }
</span><span class="line">  101 </span><span class="sym">}
</span><span class="line">  102 </span><span class="sym">
</span><span class="line">  103 </span><span class="sym"></span><span class="kwa">class</span> <span class="kwc">LinkedList</span> <span class="kwa">extends</span> LLEntry
<span class="line">  104 </span><span class="sym">{
</span><span class="line">  105 </span><span class="sym"></span>        <span class="kwc">LinkedList</span><span class="sym">()
</span><span class="line">  106 </span><span class="sym">        {
</span><span class="line">  107 </span><span class="sym"></span>                next <span class="sym">=</span> prev <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;
</span><span class="line">  108 </span><span class="sym">        }
</span><span class="line">  109 </span><span class="sym">
</span><span class="line">  110 </span><span class="sym"></span>        <span class="kwc">LinkedList</span><span class="sym">(</span> <span class="kwc">LinkedList</span> other <span class="sym">)
</span><span class="line">  111 </span><span class="sym">        {
</span><span class="line">  112 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">();
</span><span class="line">  113 </span><span class="sym">
</span><span class="line">  114 </span><span class="sym"></span>                LLEntry last <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;
</span><span class="line">  115 </span><span class="sym"></span>                <span class="kwa">for</span><span class="sym">(</span> LLEntry curr <span class="sym">=</span> other<span class="sym">.</span>next <span class="sym">;</span> curr <span class="sym">!=</span> other <span class="sym">;</span> curr <span class="sym">=</span> curr<span class="sym">.</span>next <span class="sym">)
</span><span class="line">  116 </span><span class="sym">                {
</span><span class="line">  117 </span><span class="sym"></span>                        LLEntry entry <span class="sym">=</span> <span class="kwa">new</span> LLEntry<span class="sym">(</span>curr<span class="sym">.</span>val<span class="sym">);
</span><span class="line">  118 </span><span class="sym"></span>                        last<span class="sym">.</span>next <span class="sym">=</span> entry<span class="sym">;
</span><span class="line">  119 </span><span class="sym"></span>                        entry<span class="sym">.</span>prev <span class="sym">=</span> last<span class="sym">;
</span><span class="line">  120 </span><span class="sym"></span>                        last <span class="sym">=</span> entry<span class="sym">;
</span><span class="line">  121 </span><span class="sym">                }
</span><span class="line">  122 </span><span class="sym"></span>                last<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;
</span><span class="line">  123 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>prev <span class="sym">=</span> last<span class="sym">;
</span><span class="line">  124 </span><span class="sym">
</span><span class="line">  125 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>val <span class="sym">=</span> other<span class="sym">.</span>val<span class="sym">;
</span><span class="line">  126 </span><span class="sym">        }
</span><span class="line">  127 </span><span class="sym">
</span><span class="line">  128 </span><span class="sym"></span>        <span class="kwb">boolean</span> isEmpty<span class="sym">()
</span><span class="line">  129 </span><span class="sym">        {
</span><span class="line">  130 </span><span class="sym"></span>                <span class="kwa">return</span> val <span class="sym">==</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  131 </span><span class="sym">        }
</span><span class="line">  132 </span><span class="sym">
</span><span class="line">  133 </span><span class="sym"></span>        <span class="kwb">void</span> addFirst<span class="sym">(</span> LLEntry entry <span class="sym">)
</span><span class="line">  134 </span><span class="sym">        {
</span><span class="line">  135 </span><span class="sym"></span>                entry<span class="sym">.</span>prev <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;
</span><span class="line">  136 </span><span class="sym"></span>                entry<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>next<span class="sym">;
</span><span class="line">  137 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>next<span class="sym">.</span>prev <span class="sym">=</span> entry<span class="sym">;
</span><span class="line">  138 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>next <span class="sym">=</span> entry<span class="sym">;
</span><span class="line">  139 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>val<span class="sym">++;
</span><span class="line">  140 </span><span class="sym">        }
</span><span class="line">  141 </span><span class="sym">
</span><span class="line">  142 </span><span class="sym"></span>        <span class="kwb">void</span> addLast<span class="sym">(</span> LLEntry entry <span class="sym">)
</span><span class="line">  143 </span><span class="sym">        {
</span><span class="line">  144 </span><span class="sym"></span>                entry<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;
</span><span class="line">  145 </span><span class="sym"></span>                entry<span class="sym">.</span>prev <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>prev<span class="sym">;
</span><span class="line">  146 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>prev<span class="sym">.</span>next <span class="sym">=</span> entry<span class="sym">;
</span><span class="line">  147 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>prev <span class="sym">=</span> entry<span class="sym">;
</span><span class="line">  148 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>val<span class="sym">++;
</span><span class="line">  149 </span><span class="sym">        }
</span><span class="line">  150 </span><span class="sym">
</span><span class="line">  151 </span><span class="sym"></span>        LLEntry removeFirst<span class="sym">()
</span><span class="line">  152 </span><span class="sym">        {
</span><span class="line">  153 </span><span class="sym"></span>                LLEntry entry <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>next<span class="sym">;
</span><span class="line">  154 </span><span class="sym"></span>                <span class="kwa">if</span> <span class="sym">(</span>entry <span class="sym">==</span> <span class="kwa">this</span><span class="sym">)
</span><span class="line">  155 </span><span class="sym"></span>                        <span class="kwa">return</span> null<span class="sym">;
</span><span class="line">  156 </span><span class="sym">
</span><span class="line">  157 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>val<span class="sym">--;
</span><span class="line">  158 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>next <span class="sym">=</span> entry<span class="sym">.</span>next<span class="sym">;
</span><span class="line">  159 </span><span class="sym"></span>                entry<span class="sym">.</span>next<span class="sym">.</span>prev <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;
</span><span class="line">  160 </span><span class="sym"></span>                <span class="kwa">return</span> entry<span class="sym">;
</span><span class="line">  161 </span><span class="sym">        }
</span><span class="line">  162 </span><span class="sym">
</span><span class="line">  163 </span><span class="sym"></span>        LLEntry removeLast<span class="sym">()
</span><span class="line">  164 </span><span class="sym">        {
</span><span class="line">  165 </span><span class="sym"></span>                LLEntry entry <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>prev<span class="sym">;
</span><span class="line">  166 </span><span class="sym"></span>                <span class="kwa">if</span> <span class="sym">(</span>entry <span class="sym">==</span> <span class="kwa">this</span><span class="sym">)
</span><span class="line">  167 </span><span class="sym"></span>                        <span class="kwa">return</span> null<span class="sym">;
</span><span class="line">  168 </span><span class="sym">
</span><span class="line">  169 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>val<span class="sym">--;
</span><span class="line">  170 </span><span class="sym"></span>                <span class="kwa">this</span><span class="sym">.</span>prev <span class="sym">=</span> entry<span class="sym">.</span>prev<span class="sym">;
</span><span class="line">  171 </span><span class="sym"></span>                entry<span class="sym">.</span>prev<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;
</span><span class="line">  172 </span><span class="sym"></span>                <span class="kwa">return</span> entry<span class="sym">;
</span><span class="line">  173 </span><span class="sym">        }
</span><span class="line">  174 </span><span class="sym">
</span><span class="line">  175 </span><span class="sym"></span>        LLEntry getFirst<span class="sym">()
</span><span class="line">  176 </span><span class="sym">        {
</span><span class="line">  177 </span><span class="sym"></span>                <span class="kwa">return this</span><span class="sym">.</span>next<span class="sym">;
</span><span class="line">  178 </span><span class="sym">        }
</span><span class="line">  179 </span><span class="sym">
</span><span class="line">  180 </span><span class="sym"></span>        <span class="kwb">int</span> size<span class="sym">()
</span><span class="line">  181 </span><span class="sym">        {
</span><span class="line">  182 </span><span class="sym"></span><span class="slc">// Simple sanity checking code:
</span><span class="line">  183 </span><span class="slc"></span><span class="slc">//                int n = 0;
</span><span class="line">  184 </span><span class="slc"></span><span class="slc">//                for( LLEntry curr = this.next; curr != this ; curr = curr.next)
</span><span class="line">  185 </span><span class="slc"></span><span class="slc">//                {
</span><span class="line">  186 </span><span class="slc"></span><span class="slc">//                        n++;
</span><span class="line">  187 </span><span class="slc"></span><span class="slc">//                }
</span><span class="line">  188 </span><span class="slc"></span><span class="slc">//                if (n != this.val)
</span><span class="line">  189 </span><span class="slc"></span><span class="slc">//                        throw new Error(&quot;size mismatch&quot;);
</span><span class="line">  190 </span><span class="slc"></span>
<span class="line">  191 </span>                <span class="kwa">return this</span><span class="sym">.</span>val<span class="sym">;
</span><span class="line">  192 </span><span class="sym">        }
</span><span class="line">  193 </span><span class="sym">
</span><span class="line">  194 </span><span class="sym"></span>        <span class="kwb">boolean</span> equals<span class="sym">(</span><span class="kwc">LinkedList</span> other<span class="sym">)
</span><span class="line">  195 </span><span class="sym">        {
</span><span class="line">  196 </span><span class="sym"></span>                LLEntry myItem <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;
</span><span class="line">  197 </span><span class="sym"></span>                LLEntry theirItem <span class="sym">=</span> other<span class="sym">;
</span><span class="line">  198 </span><span class="sym"></span>                <span class="kwa">do
</span><span class="line">  199 </span><span class="kwa"></span>                <span class="sym">{
</span><span class="line">  200 </span><span class="sym"></span>                        <span class="kwa">if</span> <span class="sym">(</span>myItem<span class="sym">.</span>val <span class="sym">!=</span> theirItem<span class="sym">.</span>val<span class="sym">)
</span><span class="line">  201 </span><span class="sym"></span>                                <span class="kwa">return</span> false<span class="sym">;
</span><span class="line">  202 </span><span class="sym"></span>                        theirItem <span class="sym">=</span> theirItem<span class="sym">.</span>next<span class="sym">;
</span><span class="line">  203 </span><span class="sym"></span>                        myItem <span class="sym">=</span> myItem<span class="sym">.</span>next<span class="sym">;
</span><span class="line">  204 </span><span class="sym">                }
</span><span class="line">  205 </span><span class="sym"></span>                <span class="kwa">while</span><span class="sym">(</span>myItem <span class="sym">!=</span> <span class="kwa">this</span><span class="sym">);
</span><span class="line">  206 </span><span class="sym"></span>                <span class="kwa">return</span> true<span class="sym">;
</span><span class="line">  207 </span><span class="sym">        }
</span><span class="line">  208 </span><span class="sym">}</span>
