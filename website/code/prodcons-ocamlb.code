<span class="com">(*</span>
<span class="com"> * $Id: prodcons-ocamlb.code,v 1.7 2006-09-20 05:52:21 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> *</span>
<span class="com"> * ocamlopt -thread unix.cmxa threads.cmxa prodcons.ml -o prodcons</span>
<span class="com"> *  or</span>
<span class="com"> * ocamlc -thread unix.cma threads.cma prodcons.ml -o prodcons</span>
<span class="com"> *)</span>

<span class="kwa">let</span> count <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">let</span> data <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">let</span> produced <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">let</span> consumed <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">let</span> m <span class="sym">=</span> Mutex.<span class="kwd">create</span> <span class="sym">()</span>
<span class="kwa">let</span> c <span class="sym">=</span> Condition.<span class="kwd">create</span> <span class="sym">()</span>

<span class="kwa">let</span> producer n <span class="sym">=</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span>
    Mutex.lock m<span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">!</span>count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">do</span> Condition.wait c m <span class="kwa">done</span><span class="sym">;</span>
    data <span class="sym">:=</span> i<span class="sym">;</span>
    incr count<span class="sym">;</span>
    Condition.signal c<span class="sym">;</span>
    Mutex.unlock m<span class="sym">;</span>
    incr produced
  <span class="kwa">done</span>

<span class="kwa">let</span> consumer n <span class="sym">=</span>
  <span class="kwa">let</span> i <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">while</span> <span class="sym">!</span>i <span class="sym">&lt;&gt;</span> n <span class="kwa">do</span>
    Mutex.lock m<span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">!</span>count <span class="sym">=</span> <span class="num">0</span> <span class="kwa">do</span> Condition.wait c m <span class="kwa">done</span><span class="sym">;</span>
    i <span class="sym">:= !</span>data<span class="sym">;</span>
    decr count<span class="sym">;</span>
    Condition.signal c<span class="sym">;</span>
    Mutex.unlock m<span class="sym">;</span>
    incr consumed
  <span class="kwa">done</span>

<span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">if</span> Array.length Sys.argv <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">else</span> <span class="num">1</span>
<span class="kwa">let</span> p <span class="sym">=</span> Thread.create producer n <span class="kwa">and</span> c <span class="sym">=</span> Thread.create consumer n<span class="sym">;;</span>
Thread.join p<span class="sym">;</span> Thread.join c<span class="sym">;</span>
Printf.printf <span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">!</span>produced <span class="sym">!</span>consumed
