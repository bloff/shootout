<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: hash2-mlton.code,v 1.7 2006-02-15 07:29:44 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * Modified by Stephen Weeks (back to MLton style).</span>
<span class="com"> * Modified by Daniel Wang.</span>
<span class="com"> *)</span>

<span class="kwa">fun</span> hashtest2 n <span class="sym">=</span>
    <span class="kwa">let</span>
       <span class="kwa">fun</span> new <span class="sym">() =</span>
	  HashTable.new <span class="sym">{</span>equals <span class="sym">=</span> <span class="kwa">op</span> <span class="sym">=,</span> hash <span class="sym">=</span> <span class="kwa">String</span>.hash<span class="sym">,</span> size <span class="sym">=</span> <span class="num">10000</span><span class="sym">}</span>
       <span class="kwa">val</span> h1 <span class="sym">=</span> new <span class="sym">()</span>
       <span class="kwa">val</span> h2 <span class="sym">=</span> new <span class="sym">()</span>
       <span class="kwa">fun</span> doinserts1 i <span class="sym">=</span>
	  <span class="kwa">if</span> i <span class="sym">=</span> <span class="num">10000</span>
	     <span class="kwa">then</span> <span class="sym">()</span>
	  <span class="kwa">else</span>
	     <span class="kwa">let</span>
		<span class="kwa">val</span> s <span class="sym">=</span> <span class="str">&quot;foo_&quot;</span> ^ <span class="kwa">Int</span>.toString i
		<span class="kwa">val</span> _ <span class="sym">=</span> HashTable.insert <span class="sym">(</span>h1<span class="sym">,</span> s<span class="sym">,</span> i<span class="sym">)</span>
	     <span class="kwa">in</span>
		doinserts1 <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
	     <span class="kwa">end</span>
       <span class="kwa">fun</span> addinto <span class="sym">(</span>h<span class="sym">,</span> k<span class="sym">,</span> v<span class="sym">) =</span>
	   <span class="kwa">let</span>
	      <span class="kwa">val</span> r <span class="sym">=</span> HashTable.lookupOrInsert <span class="sym">(</span>h<span class="sym">,</span> k<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> ref <span class="num">0</span><span class="sym">)</span>
	   <span class="kwa">in</span>
	      r <span class="sym">:= !</span>r <span class="sym">+</span> v
	   <span class="kwa">end</span>
	<span class="kwa">fun</span> doinserts2 i <span class="sym">=</span>
	    <span class="kwa">if</span> i <span class="sym">=</span> n
	       <span class="kwa">then</span> <span class="sym">()</span>
	    <span class="kwa">else</span> <span class="sym">(</span>HashTable.foreach <span class="sym">(</span>h1<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">) =&gt;</span> addinto <span class="sym">(</span>h2<span class="sym">,</span> s<span class="sym">,</span> i<span class="sym">))</span>
		  <span class="sym">;</span> doinserts2 <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
    <span class="kwa">in</span>
	doinserts1 <span class="num">0</span><span class="sym">;</span>
	doinserts2 <span class="num">0</span><span class="sym">;</span>
	print <span class="sym">(</span><span class="kwa">Int</span>.toString <span class="sym">(</span>HashTable.lookup <span class="sym">(</span>h1<span class="sym">,</span> <span class="str">&quot;foo_1&quot;</span><span class="sym">)));</span> print <span class="str">&quot; &quot;</span><span class="sym">;</span>
	print <span class="sym">(</span><span class="kwa">Int</span>.toString <span class="sym">(</span>HashTable.lookup <span class="sym">(</span>h1<span class="sym">,</span> <span class="str">&quot;foo_9999&quot;</span><span class="sym">)));</span> print <span class="str">&quot; &quot;</span><span class="sym">;</span>
	print <span class="sym">(</span><span class="kwa">Int</span>.toString <span class="sym">(! (</span>HashTable.lookup <span class="sym">(</span>h2<span class="sym">,</span> <span class="str">&quot;foo_1&quot;</span><span class="sym">))));</span> print <span class="str">&quot; &quot;</span><span class="sym">;</span>
	print <span class="sym">(</span><span class="kwa">Int</span>.toString <span class="sym">(! (</span>HashTable.lookup <span class="sym">(</span>h2<span class="sym">,</span> <span class="str">&quot;foo_9999&quot;</span><span class="sym">))));</span>
	print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
    <span class="kwa">end</span>

<span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">;</span>

<span class="kwa">fun</span> main<span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>
    <span class="kwa">let</span>
	<span class="kwa">val</span> arg <span class="sym">=</span> hd<span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">])</span>
	<span class="kwa">val</span> num <span class="sym">=</span> atoi arg
    <span class="kwa">in</span>
	hashtest2 num<span class="sym">;</span>
	OS.Process.success
    <span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() );</span>
