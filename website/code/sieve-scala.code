<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy (Scala novice)</span>
<span class="com">*/</span>

<span class="kwa">object</span> sieve <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">var</span> n <span class="sym">=</span> toPositiveInt<span class="sym">(</span>args<span class="sym">);</span>
      <span class="kwa">val</span> start <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>
      <span class="kwa">val</span> stop <span class="sym">=</span> <span class="num">8192</span><span class="sym">;</span>
      <span class="kwa">val</span> isPrime <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">Boolean</span><span class="sym">](</span>stop<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
      <span class="kwa">var</span> count<span class="sym">:</span> Int <span class="sym">=</span> _<span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">&gt;</span><span class="num">0</span><span class="sym">) {</span>
         count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

         <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span>start<span class="sym">,</span>stop<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
            isPrime<span class="sym">(</span>i<span class="sym">)=</span>true<span class="sym">;</span>

         <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span>start<span class="sym">,</span>stop<span class="sym">+</span><span class="num">1</span><span class="sym">)) {</span>
            <span class="kwa">if</span><span class="sym">(</span> isPrime<span class="sym">(</span>i<span class="sym">) ) {</span>
               <span class="kwa">var</span> k <span class="sym">=</span> i<span class="sym">+</span>i<span class="sym">;</span>
               <span class="kwa">while</span> <span class="sym">(</span>k<span class="sym">&lt;=</span>stop<span class="sym">) {</span> isPrime<span class="sym">(</span>k<span class="sym">)=</span>false<span class="sym">;</span> k<span class="sym">=</span>k<span class="sym">+</span>i<span class="sym">; }</span>
               count <span class="sym">=</span> count<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
         n<span class="sym">=</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>

      Console<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Count: &quot;</span> <span class="sym">+</span> count<span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwa">private def</span> toPositiveInt<span class="sym">(</span>s<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> i <span class="sym">=</span>
         <span class="kwa">try</span> <span class="sym">{</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">(</span><span class="num">0</span><span class="sym">)); }</span>
         <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> _ <span class="sym">=&gt;</span> <span class="num">1</span> <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> i<span class="sym">;</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>



