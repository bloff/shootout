<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- contributed by Isaac Gouy
</span>

<span class="kwa">local function</span> kFrequency<span class="sym">(</span>s<span class="sym">,</span>freq<span class="sym">,</span>k<span class="sym">,</span>frame<span class="sym">)
</span>   <span class="kwa">local</span> n <span class="sym">=</span> <span class="kwb">string</span>.len<span class="sym">(</span>s<span class="sym">)-</span>k<span class="sym">+</span><span class="num">1
</span>   <span class="kwa">for</span> i <span class="sym">=</span> frame<span class="sym">,</span>n<span class="sym">,</span>k <span class="kwa">do
      local</span> c <span class="sym">=</span> <span class="kwb">string</span>.sub<span class="sym">(</span>s<span class="sym">,</span>i<span class="sym">,</span>i<span class="sym">+</span>k<span class="num">-1</span><span class="sym">)
</span>      record <span class="sym">=</span> freq<span class="sym">[</span>c<span class="sym">]
</span>      <span class="kwa">if</span> record <span class="kwa">then
</span>         record.count <span class="sym">=</span> record.count <span class="sym">+</span> <span class="num">1
</span>      <span class="kwa">else
</span>         freq<span class="sym">[</span>c<span class="sym">] = {</span>key<span class="sym">=</span>c<span class="sym">,</span>count<span class="sym">=</span><span class="num">1</span><span class="sym">}
</span>      <span class="kwa">end
   end
end

local function</span> SortByFrequencyAndCode<span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">)
</span>   <span class="kwa">if</span> a.count <span class="sym">==</span> b.count <span class="kwa">then
      return</span> a.key <span class="sym">&lt;</span> b.key
   <span class="kwa">else
      return</span> a.count <span class="sym">&gt;</span> b.count
   <span class="kwa">end
end

local function</span> frequency<span class="sym">(</span>s<span class="sym">,</span>k<span class="sym">)
</span>   <span class="kwa">local</span> freq <span class="sym">= {}
</span>   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>k <span class="kwa">do</span> kFrequency<span class="sym">(</span>s<span class="sym">,</span>freq<span class="sym">,</span>k<span class="sym">,</span>i<span class="sym">)</span> <span class="kwa">end

   local</span> sorted<span class="sym">,</span> sum <span class="sym">= {},</span> <span class="num">0
</span>   <span class="kwa">for</span> _<span class="sym">,</span>record <span class="kwa">in</span> pairs<span class="sym">(</span>freq<span class="sym">)</span> <span class="kwa">do
</span>      <span class="kwb">table</span>.insert<span class="sym">(</span>sorted<span class="sym">,</span>record<span class="sym">)
</span>      sum <span class="sym">=</span> sum <span class="sym">+</span> record.count
   <span class="kwa">end

</span>   <span class="kwb">table</span>.<span class="kwa">sort</span><span class="sym">(</span>sorted<span class="sym">,</span> SortByFrequencyAndCode<span class="sym">)

</span>   <span class="kwa">for</span> _<span class="sym">,</span>record <span class="kwa">in</span> ipairs<span class="sym">(</span>sorted<span class="sym">)</span> <span class="kwa">do
      local</span> percent <span class="sym">= (</span>record.count<span class="sym">/</span>sum<span class="sym">)*</span><span class="num">100
</span>      io.<span class="kwa">write</span><span class="sym">(</span> <span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;%s %0.2f&quot;</span><span class="sym">,</span>record.key<span class="sym">,</span>percent<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span>   <span class="kwa">end
</span>   io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span><span class="kwa">end


local function</span> count<span class="sym">(</span>sequence<span class="sym">,</span>fragment<span class="sym">)
</span>   <span class="kwa">local</span> freq<span class="sym">,</span> record<span class="sym">,</span> count <span class="sym">= {}
</span>   <span class="kwa">local</span> k <span class="sym">=</span> <span class="kwb">string</span>.len<span class="sym">(</span>fragment<span class="sym">)
</span>   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>k <span class="kwa">do</span> kFrequency<span class="sym">(</span>sequence<span class="sym">,</span>freq<span class="sym">,</span>k<span class="sym">,</span>i<span class="sym">)</span> <span class="kwa">end
</span>   record <span class="sym">=</span> freq<span class="sym">[</span>fragment<span class="sym">]
</span>   <span class="kwa">if</span> record <span class="kwa">then</span> count <span class="sym">=</span> record.count <span class="kwa">else</span> count <span class="sym">=</span> <span class="num">0</span> <span class="kwa">end
</span>   io.<span class="kwa">write</span><span class="sym">(</span> count<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span><span class="sym">,</span> fragment<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span><span class="kwa">end


</span><span class="slc">-- Read FASTA, extract fragment THREE, calculate frequencies &amp; counts
</span>
<span class="kwa">for</span> line <span class="kwa">in</span> io.lines<span class="sym">()</span> <span class="kwa">do
   if</span> <span class="kwb">string</span>.sub<span class="sym">(</span>line<span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">6</span><span class="sym">) ==</span> <span class="str">&quot;&gt;THREE&quot;</span> <span class="kwa">then break end
end

local</span> allLines <span class="sym">= {</span><span class="str">&quot;&quot;</span><span class="sym">}
</span><span class="kwa">for</span> line <span class="kwa">in</span> io.lines<span class="sym">()</span> <span class="kwa">do
   local</span> c <span class="sym">=</span> <span class="kwb">string</span>.sub<span class="sym">(</span>line<span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">)
</span>   <span class="kwa">if</span> c <span class="sym">==</span> <span class="str">&quot;&gt;&quot;</span> <span class="kwa">then
      break
   elseif</span> c ~<span class="sym">=</span> <span class="str">&quot;;&quot;</span> <span class="kwa">then
</span>      <span class="kwb">table</span>.insert<span class="sym">(</span>allLines<span class="sym">,</span>line<span class="sym">)
</span>   <span class="kwa">end
end
local</span> sequence <span class="sym">=</span> <span class="kwb">string</span>.upper<span class="sym">(</span><span class="kwb">table</span>.concat<span class="sym">(</span>allLines<span class="sym">))


</span>frequency<span class="sym">(</span>sequence<span class="sym">,</span><span class="num">1</span><span class="sym">)
</span>frequency<span class="sym">(</span>sequence<span class="sym">,</span><span class="num">2</span><span class="sym">)

</span>count<span class="sym">(</span>sequence<span class="sym">,</span><span class="str">&quot;GGT&quot;</span><span class="sym">)
</span>count<span class="sym">(</span>sequence<span class="sym">,</span><span class="str">&quot;GGTA&quot;</span><span class="sym">)
</span>count<span class="sym">(</span>sequence<span class="sym">,</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">)
</span>count<span class="sym">(</span>sequence<span class="sym">,</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">)
</span>count<span class="sym">(</span>sequence<span class="sym">,</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">)</span>
