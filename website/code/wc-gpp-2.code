<span class="com">/* The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org</span>
<span class="com"> *</span>
<span class="com"> * C++ 'wc' reimplentation, using a more similar algorithm to the current C</span>
<span class="com"> * implementation.</span>
<span class="com"> *</span>
<span class="com"> * Also supports memory mapped IO, if available (e.g. if executed with a file</span>
<span class="com"> * redirected to stdin).</span>
<span class="com"> *</span>
<span class="com"> * Contributor: Julian Hall &lt;jh-misc&#64;dsf.org.uk&gt;</span>
<span class="com"> */</span>
<span class="dir">#include &lt;sys/stat.h&gt;</span>
<span class="dir">#include &lt;sys/mman.h&gt;</span>
<span class="dir">#include &lt;stdint.h&gt;</span>

<span class="dir">#include &lt;iostream&gt;</span>

<span class="com">/* functions for scanning 64 bits and 32 bits at a time to see if there are any</span>
<span class="com"> * bytes in the group that we need to examine individually */</span>
<span class="kwc">inline</span> <span class="kwb">bool</span> <span class="kwd">need_to_check</span> <span class="sym">(</span><span class="kwb">uint64_t</span> w<span class="sym">) {</span> <span class="kwa">return</span> <span class="sym">(~</span>w <span class="sym">&amp;</span> <span class="num">0xD0D0D0D0D0D0D0D0</span>ULL<span class="sym">) !=</span> <span class="num">0</span><span class="sym">; }</span>
<span class="kwc">inline</span> <span class="kwb">bool</span> <span class="kwd">need_to_check</span> <span class="sym">(</span><span class="kwb">uint32_t</span> w<span class="sym">) {</span> <span class="kwa">return</span> <span class="sym">(~</span>w <span class="sym">&amp;</span> <span class="num">0xD0D0D0D0</span>L<span class="sym">) !=</span> <span class="num">0</span><span class="sym">; }</span>

<span class="com">/* statically initialise tables */</span>
<span class="dir">#define B    0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,</span>
<span class="dir">#define M    0x10001</span>
<span class="dir">#define P    M, M, M, M, M, M, M, M,  M, M, M, M, M, M, M, M,</span>
<span class="kwb">uint32_t</span> data<span class="sym">[] = {</span>
    <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span>  <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> M<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> B
    <span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span>  <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span>
    B  B B B B  B B B B  B B B B <span class="sym">};</span>
<span class="kwb">uint32_t</span> mask<span class="sym">[] = {</span>
    M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span>  M<span class="sym">,</span> M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> P
    M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span>  M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span> M<span class="sym">,</span>
    P  P P P P  P P P P  P P P P <span class="sym">};</span>

<span class="kwc">typedef</span> <span class="kwb">unsigned char</span> uchar<span class="sym">;</span>

<span class="kwc">class</span> wordcounter
<span class="sym">{</span>
    <span class="kwb">unsigned int</span> words<span class="sym">,</span> lines<span class="sym">,</span> bytecount<span class="sym">;</span>
    uchar last_char<span class="sym">;</span>
<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwd">wordcounter</span> <span class="sym">() {</span> words <span class="sym">=</span> lines <span class="sym">=</span> bytecount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> last_char <span class="sym">=</span> <span class="str">' '</span><span class="sym">; }</span>

    <span class="kwb">static const size_t</span> maxscan <span class="sym">=</span> <span class="num">128</span><span class="sym">*</span><span class="num">1024</span> <span class="sym">-</span> <span class="num">4</span><span class="sym">;</span>

    <span class="kwb">void</span> <span class="kwd">scan_block</span> <span class="sym">(</span><span class="kwb">const</span> uchar <span class="sym">*</span> start<span class="sym">,</span> <span class="kwb">const</span> uchar <span class="sym">*</span> end<span class="sym">)</span>
    <span class="sym">{</span>
	bytecount <span class="sym">+=</span> end <span class="sym">-</span> start<span class="sym">;</span>
	<span class="kwb">uint32_t</span> block_total <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">while</span> <span class="sym">(</span>start <span class="sym">&lt;</span> end <span class="sym">-</span> <span class="num">7</span><span class="sym">) {</span>
	    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">need_to_check</span> <span class="sym">(* (</span><span class="kwb">uint64_t</span> <span class="sym">*)</span> start<span class="sym">))</span>
	    <span class="sym">{</span>
		<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">need_to_check</span> <span class="sym">(* (</span><span class="kwb">uint32_t</span> <span class="sym">*)</span> start<span class="sym">))</span>
		<span class="sym">{</span>
		    block_total <span class="sym">+= (</span>data<span class="sym">[</span>start<span class="sym">[</span><span class="num">0</span><span class="sym">]] &amp;</span> mask<span class="sym">[</span>last_char<span class="sym">])</span>
			<span class="sym">+ (</span>data<span class="sym">[</span>start<span class="sym">[</span><span class="num">1</span><span class="sym">]] &amp;</span> mask<span class="sym">[</span>start<span class="sym">[</span><span class="num">0</span><span class="sym">]])</span>
			<span class="sym">+ (</span>data<span class="sym">[</span>start<span class="sym">[</span><span class="num">2</span><span class="sym">]] &amp;</span> mask<span class="sym">[</span>start<span class="sym">[</span><span class="num">1</span><span class="sym">]])</span>
			<span class="sym">+ (</span>data<span class="sym">[</span>start<span class="sym">[</span><span class="num">3</span><span class="sym">]] &amp;</span> mask<span class="sym">[</span>start<span class="sym">[</span><span class="num">2</span><span class="sym">]]);</span>
		    last_char <span class="sym">=</span> start<span class="sym">[</span><span class="num">3</span><span class="sym">];</span>
		<span class="sym">}</span>
		<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">need_to_check</span> <span class="sym">(* (</span><span class="kwb">uint32_t</span> <span class="sym">*) (</span>start <span class="sym">+</span> <span class="num">4</span><span class="sym">)))</span>
		<span class="sym">{</span>
		    block_total <span class="sym">+= (</span>data<span class="sym">[</span>start<span class="sym">[</span><span class="num">4</span><span class="sym">]] &amp;</span> mask<span class="sym">[</span>last_char<span class="sym">])</span>
			<span class="sym">+ (</span>data<span class="sym">[</span>start<span class="sym">[</span><span class="num">5</span><span class="sym">]] &amp;</span> mask<span class="sym">[</span>start<span class="sym">[</span><span class="num">1</span><span class="sym">]])</span>
			<span class="sym">+ (</span>data<span class="sym">[</span>start<span class="sym">[</span><span class="num">6</span><span class="sym">]] &amp;</span> mask<span class="sym">[</span>start<span class="sym">[</span><span class="num">2</span><span class="sym">]])</span>
			<span class="sym">+ (</span>data<span class="sym">[</span>start<span class="sym">[</span><span class="num">7</span><span class="sym">]] &amp;</span> mask<span class="sym">[</span>start<span class="sym">[</span><span class="num">3</span><span class="sym">]]);</span>
		    last_char <span class="sym">=</span> start<span class="sym">[</span><span class="num">7</span><span class="sym">];</span>
		<span class="sym">}</span>
	    <span class="sym">}</span>
	    start <span class="sym">+=</span> <span class="num">8</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">while</span> <span class="sym">(</span>start <span class="sym">&lt;</span> end<span class="sym">)</span>
	<span class="sym">{</span>
	    block_total <span class="sym">+=</span> data<span class="sym">[*(</span>start<span class="sym">)] &amp;</span> mask<span class="sym">[</span>last_char<span class="sym">];</span>
	    last_char <span class="sym">= *(</span>start<span class="sym">++);</span>
	<span class="sym">}</span>
	words <span class="sym">+=</span> block_total <span class="sym">&amp;</span> <span class="num">0xFFFF</span><span class="sym">;</span>
	lines <span class="sym">+=</span> block_total <span class="sym">&gt;&gt;</span> <span class="num">16</span><span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwb">void</span> <span class="kwd">printresults</span> <span class="sym">() {</span> std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> lines <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> words <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> bytecount <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">; }</span>
<span class="sym">};</span>

<span class="kwc">class</span> mapping_failed
<span class="sym">{</span>
<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwd">mapping_failed</span><span class="sym">() {</span> <span class="com">/* std::cout &lt;&lt; &quot;Mapping failed: &quot; &lt;&lt; errno &lt;&lt; &quot;\n&quot;; */</span> <span class="sym">}</span>
<span class="sym">};</span>

<span class="kwc">template</span><span class="sym">&lt;</span><span class="kwc">class</span> T<span class="sym">&gt;</span>
<span class="kwc">class</span> memory_mapping
<span class="sym">{</span>
<span class="kwc">private</span><span class="sym">:</span>
    <span class="kwb">size_t</span> len<span class="sym">;</span>
    T <span class="sym">*</span> data<span class="sym">;</span>
<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwd">memory_mapping</span> <span class="sym">(</span><span class="kwb">int</span> fd<span class="sym">)</span>
    <span class="sym">{</span>
	<span class="kwb">struct</span> stat st<span class="sym">;</span>
	data <span class="sym">=</span> NULL<span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">fstat</span> <span class="sym">(</span>fd<span class="sym">, &amp;</span>st<span class="sym">))</span> <span class="kwa">throw</span> <span class="kwd">mapping_failed</span><span class="sym">();</span>
	len <span class="sym">=</span> st<span class="sym">.</span>st_size<span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">(</span>len <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">throw</span> <span class="kwd">mapping_failed</span><span class="sym">();</span> <span class="slc">// probably a pipe</span>
	<span class="slc">// std::cout &lt;&lt; &quot;File is &quot; &lt;&lt; len &lt;&lt; &quot; bytes long\n&quot;;</span>
	data <span class="sym">= (</span>T <span class="sym">*)</span> <span class="kwd">mmap</span> <span class="sym">(</span>NULL<span class="sym">,</span> len<span class="sym">,</span> PROT_READ<span class="sym">,</span> MAP_SHARED<span class="sym">,</span> fd<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(!</span>data<span class="sym">)</span> <span class="kwa">throw</span> <span class="kwd">mapping_failed</span><span class="sym">();</span>
	<span class="slc">// std::cout &lt;&lt; &quot;Memory mapping succeeded!\n&quot;;</span>
    <span class="sym">}</span>
    <span class="sym">~</span><span class="kwd">memory_mapping</span> <span class="sym">()</span>
    <span class="sym">{</span>
	<span class="kwa">if</span> <span class="sym">(</span>data<span class="sym">)</span>
	    <span class="kwd">munmap</span> <span class="sym">(</span>data<span class="sym">,</span> len<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwb">size_t</span> <span class="kwd">getlength</span> <span class="sym">() {</span> <span class="kwa">return</span> len<span class="sym">; }</span>
    T <span class="sym">*</span> <span class="kwd">getdata</span> <span class="sym">() {</span> <span class="kwa">return</span> data<span class="sym">; }</span>
<span class="sym">};</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">void</span><span class="sym">)</span>
<span class="sym">{</span>
    wordcounter wc<span class="sym">;</span>
    <span class="kwa">try</span>
    <span class="sym">{</span>
	memory_mapping<span class="sym">&lt;</span>uchar<span class="sym">&gt;</span> <span class="kwd">map</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
	<span class="kwb">size_t</span> s <span class="sym">=</span> map<span class="sym">.</span><span class="kwd">getlength</span> <span class="sym">();</span>
	uchar <span class="sym">*</span> d <span class="sym">=</span> map<span class="sym">.</span><span class="kwd">getdata</span> <span class="sym">();</span>
	<span class="kwa">while</span> <span class="sym">(</span>s <span class="sym">&gt;</span> wc<span class="sym">.</span>maxscan<span class="sym">)</span>
	<span class="sym">{</span>
	    wc<span class="sym">.</span><span class="kwd">scan_block</span> <span class="sym">(</span>d<span class="sym">,</span> d <span class="sym">+</span> wc<span class="sym">.</span>maxscan<span class="sym">);</span>
	    s <span class="sym">-=</span> wc<span class="sym">.</span>maxscan<span class="sym">;</span>
	    d <span class="sym">+=</span> wc<span class="sym">.</span>maxscan<span class="sym">;</span>
	<span class="sym">}</span>
	wc<span class="sym">.</span><span class="kwd">scan_block</span> <span class="sym">(</span>d<span class="sym">,</span> d <span class="sym">+</span> s<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">catch</span> <span class="sym">(</span>mapping_failed f<span class="sym">)</span>
    <span class="sym">{</span>
	<span class="kwb">size_t</span> s<span class="sym">;</span>
	uchar buf<span class="sym">[</span><span class="num">32768</span><span class="sym">];</span>
	<span class="kwa">while</span> <span class="sym">((</span>s <span class="sym">=</span> <span class="kwd">read</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> buf<span class="sym">,</span> <span class="num">32768</span><span class="sym">)))</span>
	<span class="sym">{</span>
	    wc<span class="sym">.</span><span class="kwd">scan_block</span><span class="sym">(</span>buf<span class="sym">,</span> buf <span class="sym">+</span> s<span class="sym">);</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    wc<span class="sym">.</span><span class="kwd">printresults</span><span class="sym">();</span>
<span class="sym">}</span>
