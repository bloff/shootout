<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- health for SmartEiffel by jose</span>

<span class="slc">--SPLITFILE=health.e</span>

<span class="kwa">class</span> HEALTH <span class="kwa">inherit</span> ARGUMENTS creation make <span class="kwa">feature</span>
	make <span class="kwa">is local</span> i<span class="sym">,</span>n<span class="sym">:</span><span class="kwb">INTEGER</span> region<span class="sym">:</span>HEALTH_REGION t<span class="sym">:</span>TOTALS <span class="kwa">do</span>
		<span class="kwa">if</span> argument_count<span class="sym">=</span><span class="num">1</span> <span class="kwa">and then</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer <span class="kwa">then</span>
			n<span class="sym">:=</span><span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer <span class="kwa">end</span>
		n<span class="sym">:=</span>n.<span class="kwd">max</span><span class="sym">(</span><span class="num">10</span><span class="sym">)</span>
		<span class="kwa">create</span> region.make_main
		<span class="kwa">from</span> until i<span class="sym">=</span>n <span class="kwa">loop</span> region.next_time i<span class="sym">:=</span>i<span class="sym">+</span><span class="num">1</span> <span class="kwa">end</span>
		t<span class="sym">:=</span>region.accumulate_totals
		<span class="kwd">print</span><span class="sym">(</span><span class="str">&quot;Patients: &quot;</span><span class="sym">+</span>t.patients.out<span class="sym">+</span><span class="str">&quot;%N&quot;</span><span class="sym">)</span>
		<span class="kwd">print</span><span class="sym">(</span><span class="str">&quot;Time:     &quot;</span><span class="sym">+</span>t.time.out<span class="sym">+</span><span class="str">&quot;%N&quot;</span><span class="sym">)</span>
		<span class="kwd">print</span><span class="sym">(</span><span class="str">&quot;Visits:   &quot;</span><span class="sym">+</span>t.visits.out<span class="sym">+</span><span class="str">&quot;%N&quot;</span><span class="sym">)</span>
		<span class="kwd">print</span><span class="sym">(</span><span class="str">&quot;%NTreatment Queue - Remaining Treatment Time%N&quot;</span><span class="sym">)</span>
		region.hospital.treatment.<span class="kwd">do_all</span><span class="sym">(</span><span class="kwa">agent</span> <span class="kwd">end_print</span><span class="sym">(</span>?<span class="sym">))</span>
		<span class="kwa">end</span>
	<span class="kwd">end_print</span><span class="sym">(</span>p<span class="sym">:</span>PATIENT<span class="sym">)</span> <span class="kwa">is do</span>
		<span class="kwd">print</span><span class="sym">(</span>p.remaining_time.out<span class="sym">+</span><span class="str">&quot;%Tanonymous patient%N&quot;</span><span class="sym">)</span>
		<span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">--SPLITFILE=health_region.e</span>

<span class="kwa">class</span> HEALTH_REGION creation make_region<span class="sym">,</span> make_main <span class="kwa">feature</span>
	districts<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span>HEALTH_REGION<span class="sym">]</span>
	hospital<span class="sym">:</span> HOSPITAL
	Levels<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">5</span>
	Districts<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">4</span>
	make_main <span class="kwa">is do</span>
		<span class="kwd">make_region</span><span class="sym">(</span>Levels<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">42</span><span class="sym">)</span>
		<span class="kwa">end</span>
	<span class="kwd">make_region</span><span class="sym">(</span>level<span class="sym">,</span> seed1<span class="sym">,</span> seed2<span class="sym">:</span><span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
		<span class="kwa">local</span> staff<span class="sym">:</span><span class="kwb">INTEGER</span> hr<span class="sym">:</span>HEALTH_REGION i<span class="sym">:</span><span class="kwb">INTEGER</span> <span class="kwa">do</span>
		staff<span class="sym">:={</span><span class="kwb">INTEGER</span> <span class="num">1</span><span class="sym">} |&lt;&lt; (</span>level<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>.to_integer_8
		<span class="kwa">if</span> level<span class="sym">=</span><span class="num">1</span> <span class="kwa">then</span>
			<span class="kwd">make</span><span class="sym">(</span>staff<span class="sym">,</span>seed1<span class="sym">*</span>seed2<span class="sym">,</span><span class="kwa">False</span><span class="sym">)</span>
		<span class="kwa">else</span>
			<span class="kwd">make</span><span class="sym">(</span>staff<span class="sym">,</span>seed1<span class="sym">*</span>seed2<span class="sym">,</span>level<span class="sym">=</span>Levels<span class="sym">)</span>
			<span class="kwa">from</span> until i<span class="sym">=</span>Districts <span class="kwa">loop</span>
				<span class="kwa">create</span> hr.<span class="kwd">make_region</span><span class="sym">(</span>level<span class="sym">-</span><span class="num">1</span><span class="sym">,</span><span class="num">4</span><span class="sym">*</span>seed1<span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>seed2<span class="sym">)</span>
				districts.<span class="kwd">add_last</span><span class="sym">(</span>hr<span class="sym">)</span>
				i<span class="sym">:=</span>i<span class="sym">+</span><span class="num">1</span> <span class="kwa">end</span>
			<span class="kwa">end</span>
		<span class="kwa">end</span>
	<span class="kwd">make</span><span class="sym">(</span>staff<span class="sym">,</span>seed<span class="sym">:</span><span class="kwb">INTEGER</span><span class="sym">;</span>is_main<span class="sym">:</span><span class="kwb">BOOLEAN</span><span class="sym">)</span> <span class="kwa">is do</span>
		<span class="kwa">create</span> hospital.<span class="kwd">make</span><span class="sym">(</span>staff<span class="sym">,</span>seed<span class="sym">,</span>is_main<span class="sym">)</span>
		<span class="kwa">create</span> districts.<span class="kwd">with_capacity</span><span class="sym">(</span>Districts<span class="sym">)</span>
		<span class="kwa">end</span>
	next_time <span class="kwa">is do</span>
		districts.<span class="kwd">do_all</span><span class="sym">(</span><span class="kwa">agent</span> <span class="sym">{</span>HEALTH_REGION<span class="sym">}</span>.<span class="kwd">next_time_and_transfer_to</span><span class="sym">(</span>hospital<span class="sym">))</span>
		hospital.triage_examination
		<span class="kwa">end</span>
	<span class="kwd">next_time_and_transfer_to</span><span class="sym">(</span>destination<span class="sym">:</span>HOSPITAL<span class="sym">)</span> <span class="kwa">is do</span>
		next_time
		hospital.transfers.<span class="kwd">do_all</span><span class="sym">(</span><span class="kwa">agent</span> destination.<span class="kwd">new_arrival</span><span class="sym">(</span>?<span class="sym">))</span>
		<span class="kwa">end</span>
	accumulate_totals<span class="sym">:</span> TOTALS <span class="kwa">is local</span> i<span class="sym">:</span><span class="kwb">INTEGER</span> <span class="kwa">do</span>
		<span class="kwa">from Result</span><span class="sym">:=</span>hospital.accumulate_totals until i<span class="sym">&gt;</span>districts.upper <span class="kwa">loop</span>
			<span class="kwa">Result</span><span class="sym">:=</span><span class="kwa">Result</span><span class="sym">+</span>districts.<span class="kwd">item</span><span class="sym">(</span>i<span class="sym">)</span>.accumulate_totals
			i<span class="sym">:=</span>i<span class="sym">+</span><span class="num">1</span> <span class="kwa">end</span>
		<span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">--SPLITFILE=hospital.e</span>

<span class="kwa">class</span> HOSPITAL creation make <span class="kwa">feature</span>
	alea<span class="sym">:</span> RANDOM
	discharged<span class="sym">:</span> TOTALS
	is_main<span class="sym">:</span> <span class="kwb">BOOLEAN</span>
	staff<span class="sym">:</span> <span class="kwb">INTEGER</span>
	triage<span class="sym">,</span> examination<span class="sym">,</span> treatment<span class="sym">,</span> transfers<span class="sym">:</span> PATIENT_LIST
	<span class="kwd">make</span><span class="sym">(</span>staf<span class="sym">,</span>seed<span class="sym">:</span><span class="kwb">INTEGER</span><span class="sym">;</span>main<span class="sym">:</span><span class="kwb">BOOLEAN</span><span class="sym">)</span> <span class="kwa">is do</span>
		alea.<span class="kwd">set_seed</span><span class="sym">(</span>seed<span class="sym">)</span> staff<span class="sym">:=</span>staf is_main<span class="sym">:=</span>main
		<span class="kwa">end</span>
	triage_examination <span class="kwa">is do</span>
		transfers.clear
		treatment.<span class="kwd">do_all</span><span class="sym">(</span><span class="kwa">agent</span> <span class="kwd">discharge_one_patient</span><span class="sym">(</span>?<span class="sym">))</span>
		examination.<span class="kwd">do_all</span><span class="sym">(</span><span class="kwa">agent</span> <span class="kwd">treat_or_transfert_one_patient</span><span class="sym">(</span>?<span class="sym">))</span>
		triage.<span class="kwd">do_all</span><span class="sym">(</span><span class="kwa">agent</span> <span class="kwd">triage_one_patient</span><span class="sym">(</span>?<span class="sym">))</span>
		<span class="kwa">if</span> alea.<span class="kwd">test</span><span class="sym">(</span><span class="num">0.7</span><span class="sym">)</span> <span class="kwa">then</span> <span class="kwd">new_arrival</span><span class="sym">(</span><span class="kwa">create</span><span class="sym">{</span>PATIENT<span class="sym">})</span> <span class="kwa">end</span>
		<span class="kwa">end</span>
	<span class="kwd">new_arrival</span><span class="sym">(</span>p<span class="sym">:</span>PATIENT<span class="sym">)</span> <span class="kwa">is do</span>
		p.enter_hospital
		<span class="kwa">if</span> staff<span class="sym">&lt;=</span><span class="num">0</span> <span class="kwa">then</span> triage.<span class="kwd">add</span><span class="sym">(</span>p<span class="sym">)</span>
			<span class="kwa">else</span> staff<span class="sym">:=</span>staff<span class="sym">-</span><span class="num">1</span> examination.<span class="kwd">add</span><span class="sym">(</span>p<span class="sym">)</span> p.<span class="kwd">wait</span><span class="sym">(</span><span class="num">3</span><span class="sym">)</span> <span class="kwa">end</span>
		<span class="kwa">end</span>
	<span class="kwd">discharge_one_patient</span><span class="sym">(</span>p<span class="sym">:</span>PATIENT<span class="sym">)</span> <span class="kwa">is do</span>
		p.next_time
		<span class="kwa">if</span> p.finished <span class="kwa">then</span>
			staff<span class="sym">:=</span>staff<span class="sym">+</span><span class="num">1</span> treatment.<span class="kwd">remove</span><span class="sym">(</span>p<span class="sym">)</span>
			discharged.<span class="kwd">add</span><span class="sym">(</span>p<span class="sym">)</span> <span class="kwa">end</span>
		<span class="kwa">end</span>
	<span class="kwd">treat_or_transfert_one_patient</span><span class="sym">(</span>p<span class="sym">:</span>PATIENT<span class="sym">)</span> <span class="kwa">is do</span>
                p.next_time
		<span class="kwa">if</span> p.finished <span class="kwa">then</span>
			examination.<span class="kwd">remove</span><span class="sym">(</span>p<span class="sym">)</span>
			<span class="kwa">if</span> alea.<span class="kwd">test</span><span class="sym">(</span><span class="num">0.1</span><span class="sym">)</span> <span class="kwa">or else</span> is_main <span class="kwa">then</span>
				treatment.<span class="kwd">add</span><span class="sym">(</span>p<span class="sym">)</span> p.<span class="kwd">wait</span><span class="sym">(</span><span class="num">10</span><span class="sym">)</span>
			<span class="kwa">else</span>
				staff<span class="sym">:=</span>staff<span class="sym">+</span><span class="num">1</span> transfers.<span class="kwd">add</span><span class="sym">(</span>p<span class="sym">)</span> <span class="kwa">end</span>
			<span class="kwa">end</span>
		<span class="kwa">end</span>
	<span class="kwd">triage_one_patient</span><span class="sym">(</span>p<span class="sym">:</span>PATIENT<span class="sym">)</span> <span class="kwa">is do</span>
		<span class="kwa">if</span> staff<span class="sym">&lt;=</span><span class="num">0</span> <span class="kwa">then</span>
			p.incr_hospital_time
		<span class="kwa">else</span>
			staff<span class="sym">:=</span>staff<span class="sym">-</span><span class="num">1</span> triage.<span class="kwd">remove</span><span class="sym">(</span>p<span class="sym">)</span>
			examination.<span class="kwd">add</span><span class="sym">(</span>p<span class="sym">)</span> p.<span class="kwd">wait</span><span class="sym">(</span><span class="num">3</span><span class="sym">)</span> <span class="kwa">end</span>
		<span class="kwa">end</span>
	accumulate_totals<span class="sym">:</span> TOTALS <span class="kwa">is do</span>
		<span class="kwa">Result</span><span class="sym">:=</span>discharged<span class="sym">+</span>triage.accumulate_totals<span class="sym">+</span>
			examination.accumulate_totals<span class="sym">+</span>
			treatment.accumulate_totals
		<span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">--SPLITFILE=random.e</span>

<span class="kwa">expanded class</span> RANDOM <span class="kwa">feature</span>
	im<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">139968</span>
	ia<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">3877</span>
	ic<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">29573</span>
	inv_im<span class="sym">:</span> <span class="kwb">REAL</span> <span class="kwa">is once Result</span><span class="sym">:=</span><span class="num">1.0</span><span class="sym">/</span>im <span class="kwa">end</span>
	last_integer<span class="sym">:</span> <span class="kwb">INTEGER</span>
	next <span class="kwa">is do</span> last_integer <span class="sym">:= (</span>last_integer #<span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> #\\ im <span class="kwa">end</span>
	last_real<span class="sym">:</span> <span class="kwb">REAL</span> <span class="kwa">is do Result</span> <span class="sym">:=</span> inv_im <span class="sym">*</span> last_integer <span class="kwa">end</span>
	<span class="kwd">test</span><span class="sym">(</span>chance<span class="sym">:</span> <span class="kwb">REAL</span><span class="sym">):</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is do</span> next <span class="kwa">Result</span><span class="sym">:=</span>last_real<span class="sym">&gt;</span>chance <span class="kwa">end</span>
	<span class="kwd">set_seed</span><span class="sym">(</span>seed<span class="sym">:</span><span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is do</span> last_integer<span class="sym">:=</span>seed <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">--SPLITFILE=patient.e</span>

<span class="kwa">class</span> PATIENT <span class="kwa">feature</span>
	remaining_time<span class="sym">,</span> hospital_time<span class="sym">,</span> hospital_visits<span class="sym">:</span> <span class="kwb">INTEGER</span>
	<span class="kwd">wait</span><span class="sym">(</span>t<span class="sym">:</span><span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is do</span>  remaining_time<span class="sym">:=</span>t  hospital_time<span class="sym">:=</span>hospital_time<span class="sym">+</span>t  <span class="kwa">end</span>
	enter_hospital <span class="kwa">is do</span> hospital_visits<span class="sym">:=</span>hospital_visits<span class="sym">+</span><span class="num">1</span> <span class="kwa">end</span>
	next_time <span class="kwa">is do</span> remaining_time<span class="sym">:=</span>remaining_time<span class="sym">-</span><span class="num">1</span> <span class="kwa">end</span>
	finished<span class="sym">:</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is do Result</span><span class="sym">:=</span>remaining_time<span class="sym">=</span><span class="num">0</span> <span class="kwa">end</span>
	incr_hospital_time <span class="kwa">is do</span> hospital_time<span class="sym">:=</span>hospital_time<span class="sym">+</span><span class="num">1</span> <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">--SPLITFILE=totals.e</span>

<span class="kwa">expanded class</span> TOTALS <span class="kwa">feature</span>
	patients<span class="sym">,</span> time<span class="sym">,</span> visits<span class="sym">:</span> <span class="kwb">INTEGER</span>
	<span class="kwd">make</span><span class="sym">(</span>p<span class="sym">,</span>t<span class="sym">,</span>v<span class="sym">:</span><span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is do</span> patients<span class="sym">:=</span>p time<span class="sym">:=</span>t visits<span class="sym">:=</span>v <span class="kwa">end</span>
	<span class="kwa">infix</span> <span class="str">&quot;+&quot;</span><span class="sym">(</span>o<span class="sym">:</span>TOTALS<span class="sym">):</span>TOTALS <span class="kwa">is do</span>
		<span class="kwa">Result</span>.<span class="kwd">make</span><span class="sym">(</span>patients<span class="sym">+</span>o.patients<span class="sym">,</span>time<span class="sym">+</span>o.time<span class="sym">,</span>visits<span class="sym">+</span>o.visits<span class="sym">)</span>
		<span class="kwa">end</span>
	<span class="kwd">add</span><span class="sym">(</span>p<span class="sym">:</span>PATIENT<span class="sym">)</span> <span class="kwa">is do</span>
		patients<span class="sym">:=</span>patients<span class="sym">+</span><span class="num">1</span>
		time<span class="sym">:=</span>time<span class="sym">+</span>p.hospital_time
		visits<span class="sym">:=</span>visits<span class="sym">+</span>p.hospital_visits
		<span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">--SPLITFILE=patient_list_node.e</span>

<span class="kwa">class</span> PATIENT_LIST_NODE creation set_patient <span class="kwa">feature</span>
	patient<span class="sym">:</span> PATIENT
	next<span class="sym">:</span> <span class="kwa">like Current</span>
	<span class="kwd">set_patient</span><span class="sym">(</span>p<span class="sym">:</span>PATIENT<span class="sym">)</span> <span class="kwa">is do</span> patient<span class="sym">:=</span>p <span class="kwa">end</span>
	<span class="kwd">set_next</span><span class="sym">(</span>n<span class="sym">:</span> <span class="kwa">like Current</span><span class="sym">)</span> <span class="kwa">is do</span> next<span class="sym">:=</span>n <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">--SPLITFILE=patient_list.e</span>

<span class="kwa">expanded class</span> PATIENT_LIST <span class="kwa">feature</span>
	head<span class="sym">,</span> tail<span class="sym">:</span> PATIENT_LIST_NODE
	clear <span class="kwa">is do</span> head<span class="sym">:=</span>Void tail<span class="sym">:=</span>Void <span class="kwa">end</span>
	<span class="kwd">add</span><span class="sym">(</span>p<span class="sym">:</span>PATIENT<span class="sym">)</span> <span class="kwa">is local</span> node<span class="sym">:</span>PATIENT_LIST_NODE <span class="kwa">do</span>
		<span class="kwa">create</span> node.<span class="kwd">set_patient</span><span class="sym">(</span>p<span class="sym">)</span>
		<span class="kwa">if</span> tail<span class="sym">=</span>Void <span class="kwa">then</span> head<span class="sym">:=</span>node <span class="kwa">else</span> tail.<span class="kwd">set_next</span><span class="sym">(</span>node<span class="sym">)</span> <span class="kwa">end</span>
		tail<span class="sym">:=</span>node <span class="kwa">end</span>
	<span class="kwd">remove</span><span class="sym">(</span>p<span class="sym">:</span>PATIENT<span class="sym">)</span> <span class="kwa">is local</span> node<span class="sym">,</span>previous<span class="sym">:</span>PATIENT_LIST_NODE <span class="kwa">do</span>
		<span class="kwa">from</span> node<span class="sym">:=</span>head until node<span class="sym">=</span>Void <span class="kwa">or else</span> node.patient<span class="sym">=</span>p <span class="kwa">loop</span>
			previous<span class="sym">:=</span>node node<span class="sym">:=</span>node.next <span class="kwa">end</span>
		<span class="kwa">if</span> node<span class="sym">/=</span>Void <span class="kwa">then</span>
			<span class="kwa">if</span> previous<span class="sym">/=</span>Void <span class="kwa">then</span> previous.<span class="kwd">set_next</span><span class="sym">(</span>node.next<span class="sym">)</span>
				<span class="kwa">else</span> head<span class="sym">:=</span>node.next <span class="kwa">end</span>
			<span class="kwa">if</span> tail<span class="sym">=</span>node <span class="kwa">then</span> tail<span class="sym">:=</span>previous <span class="kwa">end</span>
			<span class="kwa">end</span>
		<span class="kwa">end</span>
	<span class="kwd">do_all</span><span class="sym">(</span>proc<span class="sym">:</span> ROUTINE<span class="sym">[</span>ANY<span class="sym">,</span><span class="kwa">TUPLE</span><span class="sym">[</span>PATIENT<span class="sym">]])</span> <span class="kwa">is local</span> node<span class="sym">:</span>PATIENT_LIST_NODE <span class="kwa">do</span>
		<span class="kwa">from</span> node<span class="sym">:=</span>head until node<span class="sym">=</span>Void <span class="kwa">loop</span>
			proc.<span class="kwd">call</span><span class="sym">([</span>node.patient<span class="sym">])</span>
			node<span class="sym">:=</span>node.next <span class="kwa">end</span>
		<span class="kwa">end</span>
	accumulate_totals<span class="sym">:</span> TOTALS <span class="kwa">is local</span> node<span class="sym">:</span>PATIENT_LIST_NODE <span class="kwa">do</span>
		<span class="kwa">from</span> node<span class="sym">:=</span>head until node<span class="sym">=</span>Void <span class="kwa">loop</span>
			<span class="kwa">Result</span>.<span class="kwd">add</span><span class="sym">(</span>node.patient<span class="sym">)</span>
			node<span class="sym">:=</span>node.next <span class="kwa">end</span>
		<span class="kwa">end</span>
<span class="kwa">end</span>
