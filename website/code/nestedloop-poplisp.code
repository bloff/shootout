<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: nestedloop-poplisp.code,v 1.7 2006-09-20 05:52:09 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>

<span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> pop11<span class="sym">::</span>poparglist<span class="sym">)</span> <span class="str">&quot;1&quot;</span><span class="sym">)))</span>
<span class="sym">(</span>x <span class="num">0</span><span class="sym">))</span>
<span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">)</span>
	 <span class="sym">(</span>fixnum x<span class="sym">)</span>
	 <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))</span>
<span class="sym">(</span>dotimes <span class="sym">(</span>a n<span class="sym">)</span>
  <span class="sym">(</span>dotimes <span class="sym">(</span>b n<span class="sym">)</span>
	<span class="sym">(</span>dotimes <span class="sym">(</span>c n<span class="sym">)</span>
	  <span class="sym">(</span>dotimes <span class="sym">(</span>d n<span class="sym">)</span>
		<span class="sym">(</span>dotimes <span class="sym">(</span>e n<span class="sym">)</span>
		  <span class="sym">(</span>dotimes <span class="sym">(</span>f n<span class="sym">)</span>
			<span class="sym">(</span>incf x<span class="sym">)))))))</span>
<span class="sym">(</span>format t <span class="str">&quot;~A~%&quot;</span> x<span class="sym">))</span>
