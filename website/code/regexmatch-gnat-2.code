<span class="slc">-- $Id: regexmatch-gnat-2.code,v 1.4 2005-06-08 07:55:52 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- Contributed by Pascal Obry on 2005/04/01
</span>
<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span>    <span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span><span class="kwa">with</span> Ada.Integer_Text_IO<span class="sym">;</span> <span class="kwa">use</span> Ada.Integer_Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Text_IO<span class="sym">;</span>         <span class="kwa">use</span> Ada.Text_IO<span class="sym">;
</span><span class="kwa">with</span> GNAT.Regpat<span class="sym">;</span>         <span class="kwa">use</span> GNAT.Regpat<span class="sym">;

</span><span class="kwa">procedure</span> Regexmatch.Gnat<span class="num">-2</span> <span class="kwa">is

</span>   N        <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value <span class="sym">(</span>Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));

</span>   Max_Line <span class="sym">:</span> <span class="kwa">constant</span> <span class="sym">:=</span> <span class="num">100</span><span class="sym">;

</span>   Pattern <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">String</span> <span class="sym">:=
</span>               <span class="str">&quot;(^|^</span><span class="esc">\D</span><span class="str">*[^</span><span class="esc">\(\d</span><span class="str">])&quot;</span>         <span class="slc">-- start conditions
</span>             <span class="sym">&amp;</span> <span class="str">&quot;((</span><span class="esc">\(\d\d\d\)</span><span class="str">)|(</span><span class="esc">\d\d\d</span><span class="str">))&quot;</span> <span class="slc">-- area code
</span>             <span class="sym">&amp;</span> <span class="str">&quot;[ ]&quot;</span>                     <span class="slc">-- area code followed by one space
</span>             <span class="sym">&amp;</span> <span class="str">&quot;(</span><span class="esc">\d\d\d</span><span class="str">)&quot;</span>                <span class="slc">-- match 3: prefix of 3 digits
</span>             <span class="sym">&amp;</span> <span class="str">&quot;[ -]&quot;</span>                    <span class="slc">-- separator is either space or dash
</span>             <span class="sym">&amp;</span> <span class="str">&quot;(</span><span class="esc">\d\d\d\d</span><span class="str">)&quot;</span>              <span class="slc">-- match 4: last 4 digits
</span>             <span class="sym">&amp;</span> <span class="str">&quot;(</span><span class="esc">\D</span><span class="str">|$)&quot;</span><span class="sym">;</span>                 <span class="slc">-- must be followed by a non-digit
</span>
   <span class="kwa">type</span> String_Access <span class="kwa">is access</span> <span class="kwb">String</span><span class="sym">;

</span>   Lines <span class="sym">:</span> <span class="kwa">array</span> <span class="sym">(</span><span class="num">1</span> .. Max_Line<span class="sym">)</span> <span class="kwa">of</span> String_Access<span class="sym">;
</span>   L     <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;

</span>   Buffer <span class="sym">:</span> <span class="kwb">String</span> <span class="sym">(</span><span class="num">1</span> .. <span class="num">1</span>_024<span class="sym">);
</span>   Last   <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;

</span>   Matcher <span class="sym">:</span> Pattern_Matcher <span class="sym">:=</span> Compile <span class="sym">(</span>Pattern<span class="sym">);
</span>   Matches <span class="sym">:</span> Match_Array <span class="sym">(</span><span class="num">1</span> .. <span class="num">10</span><span class="sym">);

</span>   Result  <span class="sym">:</span> <span class="kwb">String</span> <span class="sym">:=</span> <span class="str">&quot;: (...) ...-....&quot;</span><span class="sym">;
</span>   Count   <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;

</span>   <span class="kwa">subtype</span> Area_Code <span class="kwa">is</span> <span class="kwb">Positive</span> <span class="kwa">range</span> <span class="num">4</span> .. <span class="num">6</span><span class="sym">;
</span>   <span class="kwa">subtype</span> Prefix <span class="kwa">is</span> <span class="kwb">Positive</span> <span class="kwa">range</span> <span class="num">9</span> .. <span class="num">11</span><span class="sym">;
</span>   <span class="kwa">subtype</span> Number <span class="kwa">is</span> <span class="kwb">Positive</span> <span class="kwa">range</span> <span class="num">13</span> .. <span class="num">16</span><span class="sym">;

</span><span class="kwa">begin
   begin
      loop
</span>         Get_Line <span class="sym">(</span>Buffer<span class="sym">,</span> Last<span class="sym">);
</span>         L <span class="sym">:=</span> L <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         Lines <span class="sym">(</span>L<span class="sym">) :=</span> <span class="kwa">new</span> <span class="kwb">String</span><span class="sym">'(</span>Buffer <span class="sym">(</span><span class="num">1</span> .. Last<span class="sym">));
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">exception
      when others</span> <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span>   <span class="kwa">end</span><span class="sym">;

</span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop
      for</span> K <span class="kwa">in</span> <span class="num">1</span> .. L <span class="kwa">loop
</span>         Match <span class="sym">(</span>Matcher<span class="sym">,</span> Lines <span class="sym">(</span>K<span class="sym">)</span>.<span class="kwa">all</span><span class="sym">,</span> Matches<span class="sym">);

</span>         <span class="kwa">if</span> Iter <span class="sym">=</span> N <span class="kwa">then
            if</span> Matches <span class="sym">(</span><span class="num">1</span><span class="sym">) /=</span> No_Match <span class="kwa">then
               if</span> Lines <span class="sym">(</span>K<span class="sym">) (</span>Matches <span class="sym">(</span><span class="num">2</span><span class="sym">)</span>.First<span class="sym">) = '('</span> <span class="kwa">then
</span>                  Result <span class="sym">(</span>Area_Code<span class="sym">) :=
</span>                    Lines <span class="sym">(</span>K<span class="sym">) (</span>Matches <span class="sym">(</span><span class="num">2</span><span class="sym">)</span>.First <span class="sym">+</span> <span class="num">1</span> .. Matches <span class="sym">(</span><span class="num">2</span><span class="sym">)</span>.Last <span class="num">- 1</span><span class="sym">);
</span>               <span class="kwa">else
</span>                  Result <span class="sym">(</span>Area_Code<span class="sym">) :=
</span>                    Lines <span class="sym">(</span>K<span class="sym">) (</span>Matches <span class="sym">(</span><span class="num">2</span><span class="sym">)</span>.First .. Matches <span class="sym">(</span><span class="num">2</span><span class="sym">)</span>.Last<span class="sym">);
</span>               <span class="kwa">end if</span><span class="sym">;

</span>               Result <span class="sym">(</span>Prefix<span class="sym">) :=
</span>                 Lines <span class="sym">(</span>K<span class="sym">) (</span>Matches <span class="sym">(</span><span class="num">5</span><span class="sym">)</span>.First .. Matches <span class="sym">(</span><span class="num">5</span><span class="sym">)</span>.Last<span class="sym">);
</span>               Result <span class="sym">(</span>Number<span class="sym">) :=
</span>                 Lines <span class="sym">(</span>K<span class="sym">) (</span>Matches <span class="sym">(</span><span class="num">6</span><span class="sym">)</span>.First .. Matches <span class="sym">(</span><span class="num">6</span><span class="sym">)</span>.Last<span class="sym">);

</span>               Count <span class="sym">:=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>               Put <span class="sym">(</span>Count<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>               Put_Line <span class="sym">(</span>Result<span class="sym">);
</span>            <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="kwa">end</span> Regexmatch.Gnat<span class="num">-2</span><span class="sym">;</span>
