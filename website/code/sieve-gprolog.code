<span class="slc">%%% -*- mode: prolog -*-</span>
<span class="slc">%%% $Id: sieve-gprolog.code,v 1.6 2006-09-20 05:52:36 bfulgham Exp $</span>
<span class="slc">%%% http://shootout.alioth.debian.org/</span>
<span class="slc">%%%</span>
<span class="slc">%%% Based on a program by Jim Montgomery</span>
<span class="slc">%%%</span>

<span class="slc">%%% integers</span>
<span class="slc">%%%    Generates a list of integers from Low to High</span>
integers<span class="sym">(</span>_<span class="sym">,</span>_<span class="sym">,[])</span>.
integers<span class="sym">(</span>Low<span class="sym">,</span>Limit<span class="sym">,[</span>Low<span class="sym">|</span>Rest<span class="sym">]) :-</span>
    Low <span class="sym">=&lt;</span> Limit<span class="sym">,</span>
    <span class="sym">!,</span> CurrInt <span class="kwa">is</span> Low<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>
    integers<span class="sym">(</span>CurrInt<span class="sym">,</span>Limit<span class="sym">,</span>Rest<span class="sym">)</span>.

<span class="slc">%%% sieve</span>
<span class="slc">%%%    Selects smallest remaining number in list (it is prime) and then</span>
<span class="slc">%%%    removes all multiples of this prime from the list</span>
sieve<span class="sym">([],[])</span>.
sieve<span class="sym">([</span>Head<span class="sym">|</span>Tail<span class="sym">],[</span>Head<span class="sym">|</span>Primes<span class="sym">]) :-</span>
    remove<span class="sym">(</span>Head<span class="sym">,</span>Tail<span class="sym">,</span>New<span class="sym">),</span>
    sieve<span class="sym">(</span>New<span class="sym">,</span>Primes<span class="sym">)</span>.

<span class="slc">%%% remove</span>
<span class="slc">%%    Remove all multiples of the current prime number from list</span>
remove<span class="sym">(</span>Prime<span class="sym">,[],[])</span>.
remove<span class="sym">(</span>Prime<span class="sym">,[</span>H<span class="sym">|</span>Tail<span class="sym">],[</span>Head<span class="sym">|</span>Val<span class="sym">]) :-</span>
    \+<span class="sym">(</span><span class="num">0</span> <span class="kwa">is</span> Head <span class="kwa">mod</span> Prime<span class="sym">),</span>
    <span class="sym">!,</span> remove<span class="sym">(</span>Prime<span class="sym">,</span>Tail<span class="sym">,</span>Val<span class="sym">)</span>.
remove<span class="sym">(</span>Prime<span class="sym">,[</span>Head<span class="sym">|</span>Tail<span class="sym">],</span>Val<span class="sym">) :-</span>
    <span class="num">0</span> <span class="kwa">is</span> Head <span class="kwa">mod</span> Prime<span class="sym">,</span>
    <span class="sym">!,</span> remove<span class="sym">(</span>Prime<span class="sym">,</span>Tail<span class="sym">,</span>Val<span class="sym">)</span>.

<span class="slc">%%% loop</span>
<span class="slc">%%%%    loop construct to do this task Count times</span>
loop<span class="sym">(</span>_<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>_<span class="sym">)</span>.
loop<span class="sym">(</span>Limit<span class="sym">,</span>Count<span class="sym">,</span>List<span class="sym">) :-</span>
    Current <span class="kwa">is</span> Count <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span>
    integers<span class="sym">(</span><span class="num">2</span><span class="sym">,</span>Limit<span class="sym">,</span>Integers<span class="sym">),</span>
    sieve<span class="sym">(</span>Integers<span class="sym">,</span>List<span class="sym">),</span>
    loop<span class="sym">(</span>Limit<span class="sym">,</span>Current<span class="sym">,</span>List<span class="sym">)</span>.

<span class="slc">%%% main</span>
<span class="slc">%%%    program driver</span>
main <span class="sym">:-</span>
	argument_value<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> ACount<span class="sym">),</span>
	number_atom<span class="sym">(</span>Count<span class="sym">,</span>ACount<span class="sym">),</span>
	loop<span class="sym">(</span><span class="num">8192</span><span class="sym">,</span>Count<span class="sym">,</span>List<span class="sym">),</span>
	length<span class="sym">(</span>List<span class="sym">,</span>Val<span class="sym">),</span>
	<span class="kwb">write</span><span class="sym">(</span><span class="str">'Count: '</span><span class="sym">),</span>
	<span class="kwb">write</span><span class="sym">(</span>Val<span class="sym">),</span> <span class="kwa">nl</span><span class="sym">,</span> <span class="kwa">halt</span>.

<span class="sym">:-</span> initialization<span class="sym">(</span>main<span class="sym">)</span>.

