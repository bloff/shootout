<span class="line">    1 </span><span class="slc">%%% -*- mode: prolog -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">%%% $Id: sieve-gprolog.code,v 1.3 2004-11-13 08:28:18 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">%%% http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">%%%
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">%%% Based on a program by Jim Montgomery
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">%%%
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="slc">%%% integers
</span><span class="line">    9 </span><span class="slc"></span><span class="slc">%%%    Generates a list of integers from Low to High
</span><span class="line">   10 </span><span class="slc"></span>integers<span class="sym">(</span>_<span class="sym">,</span>_<span class="sym">,[])</span>.
<span class="line">   11 </span>integers<span class="sym">(</span>Low<span class="sym">,</span>Limit<span class="sym">,[</span>Low<span class="sym">|</span>Rest<span class="sym">]) :-
</span><span class="line">   12 </span><span class="sym"></span>    Low <span class="sym">=&lt;</span> Limit<span class="sym">,
</span><span class="line">   13 </span><span class="sym">    !,</span> CurrInt <span class="kwa">is</span> Low<span class="sym">+</span><span class="num">1</span><span class="sym">,
</span><span class="line">   14 </span><span class="sym"></span>    integers<span class="sym">(</span>CurrInt<span class="sym">,</span>Limit<span class="sym">,</span>Rest<span class="sym">)</span>.
<span class="line">   15 </span>
<span class="line">   16 </span><span class="slc">%%% sieve
</span><span class="line">   17 </span><span class="slc"></span><span class="slc">%%%    Selects smallest remaining number in list (it is prime) and then
</span><span class="line">   18 </span><span class="slc"></span><span class="slc">%%%    removes all multiples of this prime from the list
</span><span class="line">   19 </span><span class="slc"></span>sieve<span class="sym">([],[])</span>.
<span class="line">   20 </span>sieve<span class="sym">([</span>Head<span class="sym">|</span>Tail<span class="sym">],[</span>Head<span class="sym">|</span>Primes<span class="sym">]) :-
</span><span class="line">   21 </span><span class="sym"></span>    remove<span class="sym">(</span>Head<span class="sym">,</span>Tail<span class="sym">,</span>New<span class="sym">),
</span><span class="line">   22 </span><span class="sym"></span>    sieve<span class="sym">(</span>New<span class="sym">,</span>Primes<span class="sym">)</span>.
<span class="line">   23 </span>
<span class="line">   24 </span><span class="slc">%%% remove
</span><span class="line">   25 </span><span class="slc"></span><span class="slc">%%    Remove all multiples of the current prime number from list
</span><span class="line">   26 </span><span class="slc"></span>remove<span class="sym">(</span>Prime<span class="sym">,[],[])</span>.
<span class="line">   27 </span>remove<span class="sym">(</span>Prime<span class="sym">,[</span>H<span class="sym">|</span>Tail<span class="sym">],[</span>Head<span class="sym">|</span>Val<span class="sym">]) :-
</span><span class="line">   28 </span><span class="sym"></span>    \<span class="sym">+(</span><span class="num">0</span> <span class="kwa">is</span> Head <span class="kwa">mod</span> Prime<span class="sym">),
</span><span class="line">   29 </span><span class="sym">    !,</span> remove<span class="sym">(</span>Prime<span class="sym">,</span>Tail<span class="sym">,</span>Val<span class="sym">)</span>.
<span class="line">   30 </span>remove<span class="sym">(</span>Prime<span class="sym">,[</span>Head<span class="sym">|</span>Tail<span class="sym">],</span>Val<span class="sym">) :-
</span><span class="line">   31 </span><span class="sym"></span>    <span class="num">0</span> <span class="kwa">is</span> Head <span class="kwa">mod</span> Prime<span class="sym">,
</span><span class="line">   32 </span><span class="sym">    !,</span> remove<span class="sym">(</span>Prime<span class="sym">,</span>Tail<span class="sym">,</span>Val<span class="sym">)</span>.
<span class="line">   33 </span>
<span class="line">   34 </span><span class="slc">%%% loop
</span><span class="line">   35 </span><span class="slc"></span><span class="slc">%%%%    loop construct to do this task Count times
</span><span class="line">   36 </span><span class="slc"></span>loop<span class="sym">(</span>_<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>_<span class="sym">)</span>.
<span class="line">   37 </span>loop<span class="sym">(</span>Limit<span class="sym">,</span>Count<span class="sym">,</span>List<span class="sym">) :-
</span><span class="line">   38 </span><span class="sym"></span>    Current <span class="kwa">is</span> Count <span class="num">- 1</span><span class="sym">,
</span><span class="line">   39 </span><span class="sym"></span>    integers<span class="sym">(</span><span class="num">2</span><span class="sym">,</span>Limit<span class="sym">,</span>Integers<span class="sym">),
</span><span class="line">   40 </span><span class="sym"></span>    sieve<span class="sym">(</span>Integers<span class="sym">,</span>List<span class="sym">),
</span><span class="line">   41 </span><span class="sym"></span>    loop<span class="sym">(</span>Limit<span class="sym">,</span>Current<span class="sym">,</span>List<span class="sym">)</span>.
<span class="line">   42 </span>
<span class="line">   43 </span><span class="slc">%%% main
</span><span class="line">   44 </span><span class="slc"></span><span class="slc">%%%    program driver
</span><span class="line">   45 </span><span class="slc"></span>main <span class="sym">:-
</span><span class="line">   46 </span><span class="sym"></span>        argument_value<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> ACount<span class="sym">),
</span><span class="line">   47 </span><span class="sym"></span>        number_atom<span class="sym">(</span>Count<span class="sym">,</span>ACount<span class="sym">),
</span><span class="line">   48 </span><span class="sym"></span>        loop<span class="sym">(</span><span class="num">8192</span><span class="sym">,</span>Count<span class="sym">,</span>List<span class="sym">),
</span><span class="line">   49 </span><span class="sym"></span>        length<span class="sym">(</span>List<span class="sym">,</span>Val<span class="sym">),
</span><span class="line">   50 </span><span class="sym"></span>        <span class="kwb">write</span><span class="sym">(</span><span class="str">'Count: '</span><span class="sym">),
</span><span class="line">   51 </span><span class="sym"></span>        <span class="kwb">write</span><span class="sym">(</span>Val<span class="sym">),</span> <span class="kwa">nl</span><span class="sym">,</span> <span class="kwa">halt</span>.
<span class="line">   52 </span>
<span class="line">   53 </span><span class="sym">:-</span> initialization<span class="sym">(</span>main<span class="sym">)</span>.
<span class="line">   54 </span>
