<span class="com">(* nsieve.sml
 *
 *   Good old Sieve of Eratosthenes. (Based on the OCaml version.)
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume&#64;tti-c.org)
 *)</span>
<span class="kwa">structure</span> Test<span class="sym">:</span><span class="kwa">sig val</span> main<span class="sym">:</span><span class="kwb">string</span><span class="sym">*</span><span class="kwb">string</span> list<span class="sym">-&gt;</span>OS.Process.status <span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct

    infix</span> <span class="num">8</span> $  <span class="kwa">val op</span> $ <span class="sym">=</span> Unsafe.Word8Array.sub
    <span class="kwa">infix</span> <span class="num">3</span> <span class="sym">&lt;-</span> <span class="kwa">fun</span> <span class="sym">(</span>a<span class="sym">,</span>i<span class="sym">)&lt;-</span>x <span class="sym">=</span> Unsafe.Word8Array.update<span class="sym">(</span>a<span class="sym">,</span>i<span class="sym">,</span>x<span class="sym">)
</span>    <span class="kwa">infix</span> <span class="num">4</span> <span class="sym">&lt;&lt;</span> <span class="kwa">fun</span> i <span class="sym">&lt;&lt;</span> j <span class="sym">=</span> <span class="kwa">Word</span>.toIntX<span class="sym">(</span><span class="kwa">Word</span>.<span class="sym">&lt;&lt;(</span><span class="kwa">Word</span>.fromInt i<span class="sym">,</span><span class="kwa">Word</span>.fromInt j<span class="sym">))

</span>    <span class="kwa">fun</span> sieve n <span class="sym">=
</span>	<span class="kwa">let val</span> a <span class="sym">=</span> Word8Array.array <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> <span class="num">0w1</span><span class="sym">)
</span>	    <span class="kwa">fun</span> s <span class="sym">(</span>i<span class="sym">,</span>c<span class="sym">) =
</span>		<span class="kwa">let fun</span> k j <span class="sym">=</span> <span class="kwa">if</span> j<span class="sym">&lt;=</span>n <span class="kwa">then</span> <span class="sym">((</span>a<span class="sym">,</span>j<span class="sym">)&lt;-</span><span class="num">0w0</span><span class="sym">;</span> k<span class="sym">(</span>j<span class="sym">+</span>i<span class="sym">))</span> <span class="kwa">else</span> <span class="sym">()
</span>		<span class="kwa">in if</span> i<span class="sym">&gt;</span>n <span class="kwa">then</span> c <span class="kwa">else if</span> a$i<span class="sym">=</span><span class="num">0w0</span> <span class="kwa">then</span> s<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>c<span class="sym">)
</span>				      <span class="kwa">else</span> <span class="sym">(</span>k<span class="sym">(</span>i<span class="sym">+</span>i<span class="sym">);</span> s<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">))
</span>		<span class="kwa">end
	    open</span> FormatComb  <span class="kwa">fun</span> pl8i x <span class="sym">=</span> pad left <span class="num">8</span> <span class="kwb">int</span> x
	<span class="kwa">in</span> print <span class="sym">(</span>format <span class="sym">(</span>text <span class="str">&quot;Primes up to &quot;</span> <span class="kwa">o</span> pl8i <span class="kwa">o</span> pl8i <span class="kwa">o</span> nl<span class="sym">)</span> n <span class="sym">(</span>s<span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="num">0</span><span class="sym">)))
</span>	<span class="kwa">end

    fun</span> main' n <span class="sym">= (</span>sieve <span class="sym">((</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">);
</span>		   <span class="kwa">if</span> n<span class="sym">&gt;</span><span class="num">1</span> <span class="kwa">then</span> sieve <span class="sym">((</span><span class="num">1</span><span class="sym">&lt;&lt;(</span>n<span class="num">-1</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">)</span> <span class="kwa">else</span> <span class="sym">();
</span>		   <span class="kwa">if</span> n<span class="sym">&gt;</span><span class="num">2</span> <span class="kwa">then</span> sieve <span class="sym">((</span><span class="num">1</span><span class="sym">&lt;&lt;(</span>n<span class="num">-2</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">)</span> <span class="kwa">else</span> <span class="sym">();
</span>		   OS.Process.success<span class="sym">)

</span>    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1
</span>      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))
</span><span class="kwa">end</span>
