<span class="com">/* The Great Computer Language Shootout
 *    http://shootout.alioth.debian.org/
 *
 * contributed by Isaac Gouy */</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;

</span><span class="kwc">class</span> WordFreq
<span class="sym">{
</span>   <span class="kwb">static void</span> Main<span class="sym">()
   {
</span>      <span class="kwb">const int</span> size <span class="sym">=</span> <span class="num">4096</span><span class="sym">;
</span>      Hashtable wordCounts <span class="sym">=</span> <span class="kwa">new</span> Hashtable<span class="sym">(</span><span class="num">4000</span><span class="sym">);

</span>      <span class="kwa">using</span> <span class="sym">(</span>StreamReader r <span class="sym">=</span> <span class="kwa">new</span> StreamReader<span class="sym">(</span>Console<span class="sym">.</span>OpenStandardInput<span class="sym">(</span>size<span class="sym">)))
      {
</span>         <span class="kwb">char</span><span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>size<span class="sym">];
</span>         <span class="kwb">int</span> charsRead<span class="sym">;

</span>         <span class="kwb">bool</span> insideWord <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span>         string prefix <span class="sym">=</span> null<span class="sym">;

</span>         <span class="kwa">while</span> <span class="sym">((</span>charsRead <span class="sym">=</span> r<span class="sym">.</span>Read<span class="sym">(</span>buffer<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>size<span class="sym">)) &gt;</span> <span class="num">0</span><span class="sym">) {
</span>            <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>charsRead<span class="sym">;</span> j<span class="sym">++){
</span>               <span class="kwa">if</span> <span class="sym">(</span>Char<span class="sym">.</span>IsLetter<span class="sym">(</span>buffer<span class="sym">[</span>j<span class="sym">])){
</span>                  <span class="kwa">if</span> <span class="sym">(!</span>insideWord<span class="sym">){
</span>                     insideWord <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;
</span>                     i <span class="sym">=</span> j<span class="sym">;
                  }
               }
</span>               <span class="kwa">else if</span> <span class="sym">(</span>insideWord<span class="sym">){
</span>                  insideWord <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span>                  string w <span class="sym">= (</span><span class="kwa">new</span> String<span class="sym">(</span>buffer<span class="sym">,</span>i<span class="sym">,</span>j<span class="sym">-</span>i<span class="sym">));

</span>                  <span class="kwa">if</span> <span class="sym">(</span>prefix <span class="sym">!=</span> null<span class="sym">){
</span>                     w <span class="sym">=</span> string<span class="sym">.</span>Concat<span class="sym">(</span>prefix<span class="sym">,</span>w<span class="sym">);
</span>                     prefix <span class="sym">=</span> null<span class="sym">;
                  }
</span>                  w <span class="sym">=</span> w<span class="sym">.</span>ToLower<span class="sym">();

</span>                  object item<span class="sym">;
</span>                  <span class="kwa">if</span> <span class="sym">((</span>item <span class="sym">=</span> wordCounts<span class="sym">[</span>w<span class="sym">]) !=</span> null<span class="sym">)
                     ((</span>KeyValue<span class="sym">)</span>item<span class="sym">).</span>v<span class="sym">++;
</span>                  <span class="kwa">else
</span>                     wordCounts<span class="sym">[</span>w<span class="sym">] =</span> <span class="kwa">new</span> KeyValue<span class="sym">(</span>w<span class="sym">,</span><span class="num">1</span><span class="sym">);
               }
            }
</span>            <span class="kwa">if</span> <span class="sym">(</span>insideWord<span class="sym">)</span> prefix <span class="sym">= (</span><span class="kwa">new</span> String<span class="sym">(</span>buffer<span class="sym">,</span>i<span class="sym">,</span>charsRead<span class="sym">-</span>i<span class="sym">));
         }
      }

</span>      KeyValue<span class="sym">[]</span> items <span class="sym">=</span> <span class="kwa">new</span> KeyValue<span class="sym">[</span>wordCounts<span class="sym">.</span>Count<span class="sym">];
</span>      wordCounts<span class="sym">.</span>Values<span class="sym">.</span>CopyTo<span class="sym">(</span>items<span class="sym">,</span> <span class="num">0</span><span class="sym">);

</span>      Array<span class="sym">.</span>Sort<span class="sym">(</span>items<span class="sym">,</span> <span class="kwa">new</span> SortByFrequencyAndWord<span class="sym">() );

</span>      foreach <span class="sym">(</span>KeyValue each in items<span class="sym">) {
</span>         string frequency <span class="sym">=</span> each<span class="sym">.</span>v<span class="sym">.</span>ToString<span class="sym">().</span>PadLeft<span class="sym">(</span><span class="num">7</span><span class="sym">);
</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0} {1}&quot;</span><span class="sym">,</span> frequency<span class="sym">,</span> each<span class="sym">.</span>k<span class="sym">);
      }
   }


</span>   <span class="kwc">private class</span> KeyValue
   <span class="sym">{
</span>      internal String k<span class="sym">;
</span>      internal <span class="kwb">int</span> v<span class="sym">;

</span>      internal KeyValue<span class="sym">(</span>String k<span class="sym">,</span> <span class="kwb">int</span> v<span class="sym">) {
</span>         <span class="kwa">this</span><span class="sym">.</span>k <span class="sym">=</span> k<span class="sym">;
</span>         <span class="kwa">this</span><span class="sym">.</span>v <span class="sym">=</span> v<span class="sym">;
      }
   }


</span>   <span class="kwc">private class</span> SortByFrequencyAndWord <span class="sym">:</span> IComparer
   <span class="sym">{
</span>      <span class="kwc">public</span> SortByFrequencyAndWord<span class="sym">() {}

</span>      <span class="slc">// sort DictionaryEntry by Frequency, then by Word
</span>      <span class="kwb">int</span> IComparer<span class="sym">.</span>Compare<span class="sym">(</span>object o1<span class="sym">,</span> object o2<span class="sym">) {
</span>         KeyValue item1 <span class="sym">= (</span>KeyValue<span class="sym">)</span>o1<span class="sym">;
</span>         KeyValue item2 <span class="sym">= (</span>KeyValue<span class="sym">)</span>o2<span class="sym">;

</span>         <span class="kwb">int</span> comparison <span class="sym">=</span> item2<span class="sym">.</span>v<span class="sym">.</span>CompareTo<span class="sym">(</span>item1<span class="sym">.</span>v<span class="sym">);
</span>         <span class="kwa">if</span> <span class="sym">(</span>comparison <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> item2<span class="sym">.</span>k<span class="sym">.</span>CompareTo<span class="sym">(</span>item1<span class="sym">.</span>k<span class="sym">);
</span>         <span class="kwa">else return</span> comparison<span class="sym">;
      }
   }
}</span>
