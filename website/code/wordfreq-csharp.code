<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* The Great Computer Language Shootout 
   contributed by Isaac Gouy */</FONT></I>

using System;
using System.IO;
using System.Collections;
using System.Text;

class wordfreq 
{
   <B><FONT COLOR="#228B22">static</FONT></B> <B><FONT COLOR="#228B22">void</FONT></B> Main()
   { 
      <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B> bufferSize = 4096;
      Encoding code = Encoding.GetEncoding(0);
      Stream s = Console.OpenStandardInput( bufferSize );
      StreamReader stdin = new StreamReader(s, code, false, bufferSize);

      <B><FONT COLOR="#228B22">int</FONT></B> charValue, newCount;
      <B><FONT COLOR="#228B22">char</FONT></B> c;
      StringBuilder wordBuffer = new StringBuilder(32);
      Hashtable wordCounts = new Hashtable();
      object count;
      string word;

      <B><FONT COLOR="#A020F0">while</FONT></B> ( (charValue = stdin.Read()) &gt;= 0  ) {
         c = (<B><FONT COLOR="#228B22">char</FONT></B>)charValue;
         <B><FONT COLOR="#A020F0">if</FONT></B> ( Char.IsLetter(c) )
            wordBuffer.Append(Char.ToLower(c));
         <B><FONT COLOR="#A020F0">else</FONT></B>
            <B><FONT COLOR="#A020F0">if</FONT></B> (wordBuffer.Length &gt; 0) 
         {
            word = wordBuffer.ToString(0, wordBuffer.Length);
            <B><FONT COLOR="#A020F0">if</FONT></B> ((count = wordCounts[word]) == null) newCount = 1; 
            <B><FONT COLOR="#A020F0">else</FONT></B> newCount = (<B><FONT COLOR="#228B22">int</FONT></B>)count + 1;
            wordCounts[word] = newCount;
            wordBuffer.Length = 0;
         }
      }
      <I><FONT COLOR="#B22222">// check that we added the last word in the file
</FONT></I>      <I><FONT COLOR="#B22222">// could put the repeated code in a method, but it's slower...
</FONT></I>      <B><FONT COLOR="#A020F0">if</FONT></B> (wordBuffer.Length &gt; 0) 
      { 
         word = wordBuffer.ToString(0, wordBuffer.Length);
         <B><FONT COLOR="#A020F0">if</FONT></B> ((count = wordCounts[word]) == null) newCount = 1; 
         <B><FONT COLOR="#A020F0">else</FONT></B> newCount = (<B><FONT COLOR="#228B22">int</FONT></B>)count + 1;
         wordCounts[word] = newCount;
         wordBuffer.Length = 0;
      } 

      DictionaryEntry[] tuples = new DictionaryEntry[wordCounts.Count];
      wordCounts.CopyTo(tuples, 0);

      Array.Sort(tuples, new SortByFrequencyAndWord() );

      string frequency;
      foreach (DictionaryEntry each in tuples) {
         frequency = ((<B><FONT COLOR="#228B22">int</FONT></B>)each.Value).ToString().PadLeft(7);
         word = (string)each.Key;
         Console.WriteLine(<B><FONT COLOR="#BC8F8F">&quot;{0}\t{1}&quot;</FONT></B>, frequency, word);
      }   
   }
}

public class SortByFrequencyAndWord : IComparer
{
   public SortByFrequencyAndWord() {}

   <I><FONT COLOR="#B22222">// sort DictionaryEntry by Frequency, then by Word
</FONT></I>   <B><FONT COLOR="#228B22">int</FONT></B> IComparer.Compare(object o1, object o2) {
      DictionaryEntry item1 = (DictionaryEntry)o1;
      DictionaryEntry item2 = (DictionaryEntry)o2;
      <B><FONT COLOR="#228B22">int</FONT></B> comparison = ((<B><FONT COLOR="#228B22">int</FONT></B>)item1.Value).CompareTo((<B><FONT COLOR="#228B22">int</FONT></B>)item2.Value);
      <I><FONT COLOR="#B22222">// negate to provide descending order
</FONT></I>      <B><FONT COLOR="#A020F0">if</FONT></B> (comparison == 0) <B><FONT COLOR="#A020F0">return</FONT></B> -((string)item1.Key).CompareTo((string)item2.Key);
      <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">return</FONT></B> -comparison;
   }
}</pre></td></tr></table>
