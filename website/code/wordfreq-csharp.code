<span class="line">    1 </span><span class="com">/* The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="com">     contributed by Isaac Gouy */</span>
<span class="line">    3 </span>
<span class="line">    4 </span>  <span class="kwa">using</span> System<span class="sym">;
</span><span class="line">    5 </span><span class="sym"> </span><span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;
</span><span class="line">    6 </span><span class="sym"> </span><span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;
</span><span class="line">    7 </span><span class="sym"> </span><span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;
</span><span class="line">    8 </span><span class="sym"> 
</span><span class="line">    9 </span><span class="sym"> </span><span class="kwc">class</span> wordfreq
<span class="line">   10 </span>  <span class="sym">{
</span><span class="line">   11 </span><span class="sym"> </span>   <span class="kwb">static void</span> Main<span class="sym">()
</span><span class="line">   12 </span><span class="sym">    {
</span><span class="line">   13 </span><span class="sym">  </span>      <span class="kwb">const int</span> bufferSize <span class="sym">=</span> <span class="num">4096</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym"> </span>      Encoding code <span class="sym">=</span> Encoding<span class="sym">.</span>GetEncoding<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   15 </span><span class="sym"> </span>      Stream s <span class="sym">=</span> Console<span class="sym">.</span>OpenStandardInput<span class="sym">(</span> bufferSize <span class="sym">);
</span><span class="line">   16 </span><span class="sym"> </span>      StreamReader stdin <span class="sym">=</span> <span class="kwa">new</span> StreamReader<span class="sym">(</span>s<span class="sym">,</span> code<span class="sym">,</span> <span class="kwa">false</span><span class="sym">,</span> bufferSize<span class="sym">);
</span><span class="line">   17 </span><span class="sym"> 
</span><span class="line">   18 </span><span class="sym"> </span>      <span class="kwb">int</span> charValue<span class="sym">,</span> newCount<span class="sym">;
</span><span class="line">   19 </span><span class="sym"> </span>      <span class="kwb">char</span> c<span class="sym">;
</span><span class="line">   20 </span><span class="sym"> </span>      StringBuilder wordBuffer <span class="sym">=</span> <span class="kwa">new</span> StringBuilder<span class="sym">(</span><span class="num">32</span><span class="sym">);
</span><span class="line">   21 </span><span class="sym"> </span>      Hashtable wordCounts <span class="sym">=</span> <span class="kwa">new</span> Hashtable<span class="sym">();
</span><span class="line">   22 </span><span class="sym"> </span>      object count<span class="sym">;
</span><span class="line">   23 </span><span class="sym"> </span>      string word<span class="sym">;
</span><span class="line">   24 </span><span class="sym"> 
</span><span class="line">   25 </span><span class="sym"> </span>      <span class="kwa">while</span> <span class="sym">( (</span>charValue <span class="sym">=</span> stdin<span class="sym">.</span>Read<span class="sym">()) &gt;=</span> <span class="num">0</span>  <span class="sym">) {
</span><span class="line">   26 </span><span class="sym"> </span>         c <span class="sym">= (</span><span class="kwb">char</span><span class="sym">)</span>charValue<span class="sym">;
</span><span class="line">   27 </span><span class="sym"> </span>         <span class="kwa">if</span> <span class="sym">(</span> Char<span class="sym">.</span>IsLetter<span class="sym">(</span>c<span class="sym">) )
</span><span class="line">   28 </span><span class="sym"> </span>            wordBuffer<span class="sym">.</span>Append<span class="sym">(</span>Char<span class="sym">.</span>ToLower<span class="sym">(</span>c<span class="sym">));
</span><span class="line">   29 </span><span class="sym"> </span>         <span class="kwa">else
</span><span class="line">   30 </span><span class="kwa">             if</span> <span class="sym">(</span>wordBuffer<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   31 </span><span class="sym">           {
</span><span class="line">   32 </span><span class="sym"> </span>            word <span class="sym">=</span> wordBuffer<span class="sym">.</span>ToString<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> wordBuffer<span class="sym">.</span>Length<span class="sym">);
</span><span class="line">   33 </span><span class="sym"> </span>            <span class="kwa">if</span> <span class="sym">((</span>count <span class="sym">=</span> wordCounts<span class="sym">[</span>word<span class="sym">]) ==</span> null<span class="sym">)</span> newCount <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym">  </span>            <span class="kwa">else</span> newCount <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   35 </span><span class="sym"> </span>            wordCounts<span class="sym">[</span>word<span class="sym">] =</span> newCount<span class="sym">;
</span><span class="line">   36 </span><span class="sym"> </span>            wordBuffer<span class="sym">.</span>Length <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   37 </span><span class="sym">          }
</span><span class="line">   38 </span><span class="sym">       }
</span><span class="line">   39 </span><span class="sym"> </span>      <span class="slc">// check that we added the last word in the file 
</span><span class="line">   40 </span><span class="slc"></span>      <span class="slc">// could put the repeated code in a method, but it's slower... 
</span><span class="line">   41 </span><span class="slc"></span>      <span class="kwa">if</span> <span class="sym">(</span>wordBuffer<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   42 </span><span class="sym">        {
</span><span class="line">   43 </span><span class="sym">  </span>         word <span class="sym">=</span> wordBuffer<span class="sym">.</span>ToString<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> wordBuffer<span class="sym">.</span>Length<span class="sym">);
</span><span class="line">   44 </span><span class="sym"> </span>         <span class="kwa">if</span> <span class="sym">((</span>count <span class="sym">=</span> wordCounts<span class="sym">[</span>word<span class="sym">]) ==</span> null<span class="sym">)</span> newCount <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   45 </span><span class="sym">  </span>         <span class="kwa">else</span> newCount <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   46 </span><span class="sym"> </span>         wordCounts<span class="sym">[</span>word<span class="sym">] =</span> newCount<span class="sym">;
</span><span class="line">   47 </span><span class="sym"> </span>         wordBuffer<span class="sym">.</span>Length <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   48 </span><span class="sym">       }
</span><span class="line">   49 </span><span class="sym">  
</span><span class="line">   50 </span><span class="sym"> </span>      DictionaryEntry<span class="sym">[]</span> tuples <span class="sym">=</span> <span class="kwa">new</span> DictionaryEntry<span class="sym">[</span>wordCounts<span class="sym">.</span>Count<span class="sym">];
</span><span class="line">   51 </span><span class="sym"> </span>      wordCounts<span class="sym">.</span>CopyTo<span class="sym">(</span>tuples<span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span><span class="line">   52 </span><span class="sym"> 
</span><span class="line">   53 </span><span class="sym"> </span>      Array<span class="sym">.</span>Sort<span class="sym">(</span>tuples<span class="sym">,</span> <span class="kwa">new</span> SortByFrequencyAndWord<span class="sym">() );
</span><span class="line">   54 </span><span class="sym"> 
</span><span class="line">   55 </span><span class="sym"> </span>      string frequency<span class="sym">;
</span><span class="line">   56 </span><span class="sym"> </span>      foreach <span class="sym">(</span>DictionaryEntry each in tuples<span class="sym">) {
</span><span class="line">   57 </span><span class="sym"> </span>         frequency <span class="sym">= ((</span><span class="kwb">int</span><span class="sym">)</span>each<span class="sym">.</span>Value<span class="sym">).</span>ToString<span class="sym">().</span>PadLeft<span class="sym">(</span><span class="num">7</span><span class="sym">);
</span><span class="line">   58 </span><span class="sym"> </span>         word <span class="sym">= (</span>string<span class="sym">)</span>each<span class="sym">.</span>Key<span class="sym">;
</span><span class="line">   59 </span><span class="sym"> </span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0}</span><span class="esc">\t</span><span class="str">{1}&quot;</span><span class="sym">,</span> frequency<span class="sym">,</span> word<span class="sym">);
</span><span class="line">   60 </span><span class="sym">       }
</span><span class="line">   61 </span><span class="sym">       }
</span><span class="line">   62 </span><span class="sym"> }
</span><span class="line">   63 </span><span class="sym"> 
</span><span class="line">   64 </span><span class="sym"> </span><span class="kwc">public class</span> SortByFrequencyAndWord <span class="sym">:</span> IComparer
<span class="line">   65 </span> <span class="sym">{
</span><span class="line">   66 </span><span class="sym"> </span>   <span class="kwc">public</span> SortByFrequencyAndWord<span class="sym">() {}
</span><span class="line">   67 </span><span class="sym"> 
</span><span class="line">   68 </span><span class="sym"> </span>   <span class="slc">// sort DictionaryEntry by Frequency, then by Word 
</span><span class="line">   69 </span><span class="slc"></span>   <span class="kwb">int</span> IComparer<span class="sym">.</span>Compare<span class="sym">(</span>object o1<span class="sym">,</span> object o2<span class="sym">) {
</span><span class="line">   70 </span><span class="sym"> </span>      DictionaryEntry item1 <span class="sym">= (</span>DictionaryEntry<span class="sym">)</span>o1<span class="sym">;
</span><span class="line">   71 </span><span class="sym"> </span>      DictionaryEntry item2 <span class="sym">= (</span>DictionaryEntry<span class="sym">)</span>o2<span class="sym">;
</span><span class="line">   72 </span><span class="sym"> </span>      <span class="kwb">int</span> comparison <span class="sym">= ((</span><span class="kwb">int</span><span class="sym">)</span>item1<span class="sym">.</span>Value<span class="sym">).</span>CompareTo<span class="sym">((</span><span class="kwb">int</span><span class="sym">)</span>item2<span class="sym">.</span>Value<span class="sym">);
</span><span class="line">   73 </span><span class="sym"> </span>      <span class="slc">// negate to provide descending order 
</span><span class="line">   74 </span><span class="slc"></span>      <span class="kwa">if</span> <span class="sym">(</span>comparison <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-((</span>string<span class="sym">)</span>item1<span class="sym">.</span>Key<span class="sym">).</span>CompareTo<span class="sym">((</span>string<span class="sym">)</span>item2<span class="sym">.</span>Key<span class="sym">);
</span><span class="line">   75 </span><span class="sym"> </span>      <span class="kwa">else return</span> <span class="sym">-</span>comparison<span class="sym">;
</span><span class="line">   76 </span><span class="sym">    }
</span><span class="line">   77 </span><span class="sym"> }</span> 
