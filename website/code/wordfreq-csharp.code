<span class="com">/* The Great Computer Language Shootout
    contributed by Isaac Gouy */</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;

</span><span class="kwc">class</span> wordfreq
 <span class="sym">{
</span>   <span class="kwb">static void</span> Main<span class="sym">()
   {
 </span>      <span class="kwb">const int</span> bufferSize <span class="sym">=</span> <span class="num">4096</span><span class="sym">;
</span>      Encoding code <span class="sym">=</span> Encoding<span class="sym">.</span>GetEncoding<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>      Stream s <span class="sym">=</span> Console<span class="sym">.</span>OpenStandardInput<span class="sym">(</span> bufferSize <span class="sym">);
</span>      StreamReader stdin <span class="sym">=</span> <span class="kwa">new</span> StreamReader<span class="sym">(</span>s<span class="sym">,</span> code<span class="sym">,</span> <span class="kwa">false</span><span class="sym">,</span> bufferSize<span class="sym">);

</span>      <span class="kwb">int</span> charValue<span class="sym">,</span> newCount<span class="sym">;
</span>      <span class="kwb">char</span> c<span class="sym">;
</span>      StringBuilder wordBuffer <span class="sym">=</span> <span class="kwa">new</span> StringBuilder<span class="sym">(</span><span class="num">32</span><span class="sym">);
</span>      Hashtable wordCounts <span class="sym">=</span> <span class="kwa">new</span> Hashtable<span class="sym">();
</span>      object count<span class="sym">;
</span>      string word<span class="sym">;

</span>      <span class="kwa">while</span> <span class="sym">( (</span>charValue <span class="sym">=</span> stdin<span class="sym">.</span>Read<span class="sym">()) &gt;=</span> <span class="num">0</span>  <span class="sym">) {
</span>         c <span class="sym">= (</span><span class="kwb">char</span><span class="sym">)</span>charValue<span class="sym">;
</span>         <span class="kwa">if</span> <span class="sym">(</span> Char<span class="sym">.</span>IsLetter<span class="sym">(</span>c<span class="sym">) )
</span>            wordBuffer<span class="sym">.</span>Append<span class="sym">(</span>Char<span class="sym">.</span>ToLower<span class="sym">(</span>c<span class="sym">));
</span>         <span class="kwa">else
            if</span> <span class="sym">(</span>wordBuffer<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)
          {
</span>            word <span class="sym">=</span> wordBuffer<span class="sym">.</span>ToString<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> wordBuffer<span class="sym">.</span>Length<span class="sym">);
</span>            <span class="kwa">if</span> <span class="sym">((</span>count <span class="sym">=</span> wordCounts<span class="sym">[</span>word<span class="sym">]) ==</span> null<span class="sym">)</span> newCount <span class="sym">=</span> <span class="num">1</span><span class="sym">;
 </span>            <span class="kwa">else</span> newCount <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>            wordCounts<span class="sym">[</span>word<span class="sym">] =</span> newCount<span class="sym">;
</span>            wordBuffer<span class="sym">.</span>Length <span class="sym">=</span> <span class="num">0</span><span class="sym">;
         }
      }
</span>      <span class="slc">// check that we added the last word in the file
</span>      <span class="slc">// could put the repeated code in a method, but it's slower...
</span>      <span class="kwa">if</span> <span class="sym">(</span>wordBuffer<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)
       {
 </span>         word <span class="sym">=</span> wordBuffer<span class="sym">.</span>ToString<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> wordBuffer<span class="sym">.</span>Length<span class="sym">);
</span>         <span class="kwa">if</span> <span class="sym">((</span>count <span class="sym">=</span> wordCounts<span class="sym">[</span>word<span class="sym">]) ==</span> null<span class="sym">)</span> newCount <span class="sym">=</span> <span class="num">1</span><span class="sym">;
 </span>         <span class="kwa">else</span> newCount <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         wordCounts<span class="sym">[</span>word<span class="sym">] =</span> newCount<span class="sym">;
</span>         wordBuffer<span class="sym">.</span>Length <span class="sym">=</span> <span class="num">0</span><span class="sym">;
      }
 
</span>      DictionaryEntry<span class="sym">[]</span> tuples <span class="sym">=</span> <span class="kwa">new</span> DictionaryEntry<span class="sym">[</span>wordCounts<span class="sym">.</span>Count<span class="sym">];
</span>      wordCounts<span class="sym">.</span>CopyTo<span class="sym">(</span>tuples<span class="sym">,</span> <span class="num">0</span><span class="sym">);

</span>      Array<span class="sym">.</span>Sort<span class="sym">(</span>tuples<span class="sym">,</span> <span class="kwa">new</span> SortByFrequencyAndWord<span class="sym">() );

</span>      string frequency<span class="sym">;
</span>      foreach <span class="sym">(</span>DictionaryEntry each in tuples<span class="sym">) {
</span>         frequency <span class="sym">= ((</span><span class="kwb">int</span><span class="sym">)</span>each<span class="sym">.</span>Value<span class="sym">).</span>ToString<span class="sym">().</span>PadLeft<span class="sym">(</span><span class="num">7</span><span class="sym">);
</span>         word <span class="sym">= (</span>string<span class="sym">)</span>each<span class="sym">.</span>Key<span class="sym">;
</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0}</span><span class="esc">\t</span><span class="str">{1}&quot;</span><span class="sym">,</span> frequency<span class="sym">,</span> word<span class="sym">);
      }
      }
}

</span><span class="kwc">public class</span> SortByFrequencyAndWord <span class="sym">:</span> IComparer
<span class="sym">{
</span>   <span class="kwc">public</span> SortByFrequencyAndWord<span class="sym">() {}

</span>   <span class="slc">// sort DictionaryEntry by Frequency, then by Word
</span>   <span class="kwb">int</span> IComparer<span class="sym">.</span>Compare<span class="sym">(</span>object o1<span class="sym">,</span> object o2<span class="sym">) {
</span>      DictionaryEntry item1 <span class="sym">= (</span>DictionaryEntry<span class="sym">)</span>o1<span class="sym">;
</span>      DictionaryEntry item2 <span class="sym">= (</span>DictionaryEntry<span class="sym">)</span>o2<span class="sym">;
</span>      <span class="kwb">int</span> comparison <span class="sym">= ((</span><span class="kwb">int</span><span class="sym">)</span>item1<span class="sym">.</span>Value<span class="sym">).</span>CompareTo<span class="sym">((</span><span class="kwb">int</span><span class="sym">)</span>item2<span class="sym">.</span>Value<span class="sym">);
</span>      <span class="slc">// negate to provide descending order
</span>      <span class="kwa">if</span> <span class="sym">(</span>comparison <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-((</span>string<span class="sym">)</span>item1<span class="sym">.</span>Key<span class="sym">).</span>CompareTo<span class="sym">((</span>string<span class="sym">)</span>item2<span class="sym">.</span>Key<span class="sym">);
</span>      <span class="kwa">else return</span> <span class="sym">-</span>comparison<span class="sym">;
   }
}</span>
