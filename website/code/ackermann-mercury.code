<span class="slc">%% $Id: ackermann-mercury.code,v 1.7 2006-09-20 05:50:58 bfulgham Exp $</span>
<span class="slc">%% http://www.bagley.org/~doug/shootout/</span>

<span class="sym">:-</span> module mytest.

<span class="sym">:-</span> interface.

<span class="sym">:-</span> import_module io.

<span class="sym">:-</span> pred main<span class="sym">(</span>io__state<span class="sym">,</span> io__state<span class="sym">)</span>.
<span class="sym">:-</span> mode main<span class="sym">(</span>di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det.

<span class="sym">:-</span> implementation.

<span class="sym">:-</span> func ack<span class="sym">(</span>int<span class="sym">,</span> int<span class="sym">) =</span> int.
<span class="sym">:-</span> mode ack<span class="sym">(</span>in<span class="sym">,</span> in<span class="sym">) =</span> out <span class="kwa">is</span> det.

<span class="sym">:-</span> import_module string<span class="sym">,</span> list<span class="sym">,</span> int.

<span class="sym">:-</span> pred mytest<span class="sym">(</span>int<span class="sym">,</span> io__state<span class="sym">,</span> io__state<span class="sym">)</span>.
<span class="sym">:-</span> mode mytest<span class="sym">(</span>in<span class="sym">,</span> di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det.

ack<span class="sym">(</span>M<span class="sym">,</span> N<span class="sym">) =</span> R <span class="sym">:-</span>
    <span class="sym">(</span> if M <span class="sym">=</span> <span class="num">0</span> then
	R <span class="sym">=</span> N <span class="sym">+</span> <span class="num">1</span>
      else if N <span class="sym">=</span> <span class="num">0</span> then
	R <span class="sym">=</span> ack<span class="sym">(</span>M <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
      else
	R <span class="sym">=</span> ack<span class="sym">(</span>M <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> ack<span class="sym">(</span>M<span class="sym">,</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
    <span class="sym">)</span>.

mytest<span class="sym">(</span>Num<span class="sym">) --&gt;</span>
    io__write_string<span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span><span class="sym">),</span>
    io__write_int<span class="sym">(</span>Num<span class="sym">),</span>
    io__write_string<span class="sym">(</span><span class="str">&quot;): &quot;</span><span class="sym">),</span>
    io__write_int<span class="sym">(</span>ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span>Num<span class="sym">)),</span>
    io__write_string<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>.

main <span class="sym">--&gt;</span>
    io__command_line_arguments<span class="sym">(</span>Args<span class="sym">),</span>
    <span class="sym">(</span> if <span class="sym">{</span> Args <span class="sym">= [] }</span> then
         mytest<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
      else if <span class="sym">{</span> Args <span class="sym">= [</span>Arg<span class="sym">|</span>_<span class="sym">] }</span> then
         <span class="sym">(</span> if <span class="sym">{</span> string__to_int<span class="sym">(</span>Arg<span class="sym">,</span> N<span class="sym">),</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">}</span> then
             mytest<span class="sym">(</span>N<span class="sym">)</span>
	   else
             mytest<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
         <span class="sym">)</span>
    <span class="sym">)</span>.

