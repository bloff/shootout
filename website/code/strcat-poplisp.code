<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: strcat-poplisp.code,v 1.7 2006-09-20 05:52:41 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>

<span class="sym">(</span>defconstant <span class="sym">*</span>string<span class="sym">*</span> <span class="str">&quot;hello</span>
<span class="str">&quot;</span><span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> string<span class="sym">-</span>concat1 <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>str <span class="str">&quot;&quot;</span><span class="sym">)</span>
        <span class="sym">(</span>used<span class="sym">-</span>len <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>string<span class="sym">-</span>leng <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>i <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> n<span class="sym">)))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>fixnum i used<span class="sym">-</span>len string<span class="sym">-</span>leng<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>simple<span class="sym">-</span>base<span class="sym">-</span>string str<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))</span>
    <span class="sym">(</span>dotimes <span class="sym">(</span>i <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> i<span class="sym">) (</span>replace <span class="sym">(</span>make<span class="sym">-</span>string used<span class="sym">-</span>len<span class="sym">)</span> str<span class="sym">))</span>
      <span class="sym">(</span>let <span class="sym">((</span>required<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(+</span> used<span class="sym">-</span>len <span class="sym">(</span><span class="kwa">length</span> <span class="sym">*</span>string<span class="sym">*))))</span>
        <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">eq</span> string<span class="sym">-</span>leng <span class="num">0</span><span class="sym">)</span>
            <span class="sym">(</span><span class="kwa">setq</span> str <span class="sym">(</span>make<span class="sym">-</span>string required<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
                  string<span class="sym">-</span>leng required<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
          <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> required<span class="sym">-</span><span class="kwa">length</span> string<span class="sym">-</span>leng<span class="sym">)</span>
              <span class="sym">(</span>let <span class="sym">((</span>new<span class="sym">-</span>len <span class="sym">(+</span> string<span class="sym">-</span>leng string<span class="sym">-</span>leng<span class="sym">)))</span>
                <span class="sym">(</span>let <span class="sym">((</span>new<span class="sym">-</span>str <span class="sym">(</span>make<span class="sym">-</span>string new<span class="sym">-</span>len<span class="sym">)))</span>
                  <span class="sym">(</span>replace new<span class="sym">-</span>str str <span class="sym">:</span>end2 used<span class="sym">-</span>len<span class="sym">)</span>
                  <span class="sym">(</span><span class="kwa">setq</span> str new<span class="sym">-</span>str string<span class="sym">-</span>leng new<span class="sym">-</span>len<span class="sym">)))))</span>
        <span class="sym">(</span>replace str <span class="sym">*</span>string<span class="sym">* :</span>start1 used<span class="sym">-</span>len<span class="sym">)</span>
        <span class="sym">(</span><span class="kwa">setq</span> used<span class="sym">-</span>len required<span class="sym">-</span><span class="kwa">length</span><span class="sym">)))))</span>

<span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> pop11<span class="sym">::</span>poparglist<span class="sym">)</span> <span class="str">&quot;1&quot;</span><span class="sym">))))</span>
<span class="sym">(</span>format t <span class="str">&quot;~A~%&quot;</span> <span class="sym">(</span><span class="kwa">length</span> <span class="sym">(</span>string<span class="sym">-</span>concat1 n<span class="sym">))))</span>
