<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% IUB and HOMOSAPIEN data encoded as lists of tuples. This approach is</span>
<span class="slc">% much slower than encoding data as records [alternate code shown within</span>
<span class="slc">% comment markers] but is used because of the need to keep physical</span>
<span class="slc">% order for the building of cumulative frequency tables.</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span> Open<span class="sym">(</span>file text<span class="sym">)</span>

<span class="kwb">define</span>

  <span class="kwa">class</span> TextFile_
    <span class="kwb">from</span> Open.file Open.text
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  ALU <span class="sym">=</span>
    <span class="sym">{</span>ByteString.make
      <span class="sym">{</span>VirtualString.toString
        <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> #
        <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> #
        <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> #
        <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> #
        <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> #
        <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> #
        <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">}}</span>

<span class="slc">%</span>
<span class="slc">%  IUB =</span>
<span class="slc">%    freqs(&amp;a:0.27 &amp;c:0.12 &amp;g:0.12 &amp;t:0.27 &amp;B:0.02</span>
<span class="slc">%          &amp;D:0.02 &amp;H:0.02 &amp;K:0.02 &amp;M:0.02 &amp;N:0.02</span>
<span class="slc">%          &amp;R:0.02 &amp;S:0.02 &amp;V:0.02 &amp;W:0.02 &amp;Y:0.02)</span>
<span class="slc">%</span>
<span class="slc">%</span>
<span class="slc">%  HOMOSAPIEN =</span>
<span class="slc">%    freqs(&amp;a:0.3029549426680 &amp;c:0.1979883004921</span>
<span class="slc">%          &amp;g:0.1975473066391 &amp;t:0.3015094502008)</span>
<span class="slc">%</span>

<span class="slc">% ------------- %</span>

<span class="slc">%</span>
<span class="slc">%  fun {MakeCumulativeTable FrequencyTable}</span>
<span class="slc">%    CumulativeValue = {NewCell 0.0}</span>
<span class="slc">%    CumulativeTable = {Record.clone FrequencyTable}</span>
<span class="slc">%  in</span>
<span class="slc">%    for Key in {Arity FrequencyTable} do</span>
<span class="slc">%      CumulativeValue := &#64;CumulativeValue + FrequencyTable.Key</span>
<span class="slc">%      CumulativeTable.Key = &#64;CumulativeValue</span>
<span class="slc">%    end</span>
<span class="slc">%    CumulativeTable</span>
<span class="slc">%  end</span>
<span class="slc">%</span>

  IUB <span class="sym">= [&amp;</span>a#<span class="num">0.27</span> <span class="sym">&amp;</span>c#<span class="num">0.12</span> <span class="sym">&amp;</span>g#<span class="num">0.12</span> <span class="sym">&amp;</span>t#<span class="num">0.27</span> <span class="sym">&amp;</span>B#<span class="num">0.02</span>
         <span class="sym">&amp;</span>D#<span class="num">0.02</span> <span class="sym">&amp;</span>H#<span class="num">0.02</span> <span class="sym">&amp;</span>K#<span class="num">0.02</span> <span class="sym">&amp;</span>M#<span class="num">0.02</span> <span class="sym">&amp;</span>N#<span class="num">0.02</span>
         <span class="sym">&amp;</span>R#<span class="num">0.02</span> <span class="sym">&amp;</span>S#<span class="num">0.02</span> <span class="sym">&amp;</span>V#<span class="num">0.02</span> <span class="sym">&amp;</span>W#<span class="num">0.02</span> <span class="sym">&amp;</span>Y#<span class="num">0.02</span><span class="sym">]</span>

  HOMOSAPIEN <span class="sym">= [&amp;</span>a#<span class="num">0.3029549426680</span> <span class="sym">&amp;</span>c#<span class="num">0.1979883004921</span>
                <span class="sym">&amp;</span>g#<span class="num">0.1975473066391</span> <span class="sym">&amp;</span>t#<span class="num">0.3015094502008</span><span class="sym">]</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>MakeCumulativeTable FrequencyTable<span class="sym">}</span>
    CumulativeValue <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span>
    CumulativeTable <span class="sym">= {</span>NewCell <span class="kwa">nil</span><span class="sym">}</span>
  <span class="kwb">in</span>
    <span class="kwb">for</span> Key#Value <span class="kwb">in</span> FrequencyTable <span class="kwb">do</span>
      CumulativeValue <span class="sym">:=</span> &#64;CumulativeValue <span class="sym">+</span> Value
      CumulativeTable <span class="sym">:=</span> Key#&#64;CumulativeValue<span class="sym">|</span>&#64;CumulativeTable
    <span class="kwb">end</span>
    <span class="sym">{</span>List.reverse &#64;CumulativeTable<span class="sym">}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>NewFasta OUT<span class="sym">}</span>

    SEGMARKER <span class="sym">=</span> <span class="str">&quot;&gt;&quot;</span>  LF <span class="sym">= &amp;</span>\012

    <span class="slc">% ------------- %</span>

    <span class="kwa">local</span>
      Random <span class="sym">= {</span>NewRandom <span class="num">42</span><span class="sym">}</span>
    <span class="kwb">in</span>
      <span class="kwb">fun</span> <span class="sym">{</span>SelectRandom CumulativeTable<span class="sym">}</span>
        RValue <span class="sym">= {</span>Random.next <span class="num">1.0</span><span class="sym">}</span>
      <span class="kwb">in</span>
        <span class="kwb">if</span> RValue <span class="sym">==</span> <span class="num">1.0</span> <span class="kwb">then</span>
          <span class="num">1.0</span>
        <span class="kwb">else</span>

          <span class="slc">%</span>
          <span class="slc">% for Key in {Arity CumulativeTable} return:RETURN do</span>
          <span class="slc">%   if RValue &lt; CumulativeTable.Key then {RETURN Key} end</span>
          <span class="slc">% end</span>
          <span class="slc">%</span>

          <span class="kwb">for</span> Key#Value <span class="kwb">in</span> CumulativeTable return<span class="sym">:</span>RETURN <span class="kwb">do</span>
            <span class="kwb">if</span> RValue <span class="sym">&lt;</span> Value <span class="kwb">then</span> <span class="sym">{</span>RETURN Key<span class="sym">}</span> <span class="kwb">end</span>
          <span class="kwb">end</span>

        <span class="kwb">end</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwb">proc</span> <span class="sym">{</span>RepeatFasta Id Desc N_ Sequence LineLength<span class="sym">}</span>
      K <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>  M <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>  SeqLen <span class="sym">= {</span>ByteString.length Sequence<span class="sym">}</span>
    <span class="kwb">in</span>
      <span class="sym">{</span>OUT putS<span class="sym">({</span>VirtualString.toString SEGMARKER # Id # <span class="str">&quot; &quot;</span> # Desc<span class="sym">})}</span>

      <span class="kwb">for</span> N <span class="kwb">in</span> N_<span class="sym">;(</span>N <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">);(</span>N <span class="sym">-</span> LineLength<span class="sym">)</span> <span class="kwb">do</span>
        M <span class="sym">:=</span> <span class="kwb">if</span> N <span class="sym">&lt;</span> LineLength <span class="kwb">then</span> N <span class="kwb">else</span> LineLength <span class="kwb">end</span>
        <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">0</span><span class="sym">;(</span>I <span class="sym">&lt;</span> &#64;M<span class="sym">);(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="kwb">do</span>
          <span class="kwb">if</span> &#64;K <span class="sym">==</span> SeqLen <span class="kwb">then</span> K <span class="sym">:=</span> <span class="num">0</span> <span class="kwb">end</span>
          <span class="sym">{</span>OUT putC<span class="sym">({</span>ByteString.get Sequence &#64;K<span class="sym">})}</span>
          K <span class="sym">:=</span> &#64;K <span class="sym">+</span> <span class="num">1</span>
        <span class="kwb">end</span>
        <span class="sym">{</span>OUT putC<span class="sym">(</span>LF<span class="sym">)}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwb">proc</span> <span class="sym">{</span>RandomFasta Id Desc N_ CumulativeTable LineLength<span class="sym">}</span>
      M <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
    <span class="kwb">in</span>
      <span class="sym">{</span>OUT putS<span class="sym">({</span>VirtualString.toString SEGMARKER # Id # <span class="str">&quot; &quot;</span> # Desc<span class="sym">})}</span>

      <span class="kwb">for</span> N <span class="kwb">in</span> N_<span class="sym">;(</span>N <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">);(</span>N <span class="sym">-</span> LineLength<span class="sym">)</span> <span class="kwb">do</span>
        M <span class="sym">:=</span> <span class="kwb">if</span> N <span class="sym">&lt;</span> LineLength <span class="kwb">then</span> N <span class="kwb">else</span> LineLength <span class="kwb">end</span>
        <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">0</span><span class="sym">;(</span>I <span class="sym">&lt;</span> &#64;M<span class="sym">);(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="kwb">do</span>
          <span class="sym">{</span>OUT putC<span class="sym">({</span>SelectRandom CumulativeTable<span class="sym">})}</span>
        <span class="kwb">end</span>
        <span class="sym">{</span>OUT putC<span class="sym">(</span>LF<span class="sym">)}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="slc">% ------------- %</span>

  <span class="kwb">in</span>
    ops<span class="sym">(</span>randomFasta<span class="sym">:</span>RandomFasta repeatFasta<span class="sym">:</span>RepeatFasta<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>NewRandom Seed<span class="sym">}</span>
    <span class="kwa">local</span>
      IA <span class="sym">=</span> <span class="num">3877</span> IC <span class="sym">=</span> <span class="num">29573</span> IM <span class="sym">=</span> <span class="num">139968</span>
      Last <span class="sym">= {</span>NewCell Seed<span class="sym">}</span>
    <span class="kwb">in</span>
      <span class="kwb">fun</span> <span class="sym">{</span>Next Max<span class="sym">}</span>
        Last <span class="sym">:= (</span>&#64;Last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> mod IM
        Max <span class="sym">* {</span>Int.toFloat &#64;Last<span class="sym">} / {</span>Int.toFloat IM<span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>
  <span class="kwb">in</span>
    ops<span class="sym">(</span>next<span class="sym">:</span>Next<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span>
    N Nt <span class="kwb">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String.toInt <span class="sym">{</span>Application.getArgs plain<span class="sym">}</span>.Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwb">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwb">then</span> Default <span class="kwb">else</span> Nt <span class="kwb">end</span>
    <span class="kwa">catch</span> error<span class="sym">(</span>...<span class="sym">)</span> <span class="kwb">then</span>
      N <span class="sym">=</span> Default
    <span class="kwb">end</span>
    N
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  N Fasta <span class="sym">= {</span>NewFasta <span class="sym">{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdout<span class="sym">)}}</span>

<span class="slc">% ------------- %</span>

<span class="kwb">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1 1</span><span class="sym">}</span>

  <span class="sym">{</span>Fasta.repeatFasta <span class="str">&quot;ONE&quot;</span> <span class="str">&quot;Homo sapiens alu&quot;</span> <span class="sym">(</span>N <span class="sym">*</span> <span class="num">2</span><span class="sym">)</span> ALU <span class="num">60</span><span class="sym">}</span>

  <span class="sym">{</span>Fasta.randomFasta <span class="str">&quot;TWO&quot;</span> <span class="str">&quot;IUB ambiguity codes&quot;</span> <span class="sym">(</span>N <span class="sym">*</span> <span class="num">3</span><span class="sym">)</span>
    <span class="sym">{</span>MakeCumulativeTable IUB<span class="sym">}</span> <span class="num">60</span><span class="sym">}</span>

  <span class="sym">{</span>Fasta.randomFasta <span class="str">&quot;THREE&quot;</span> <span class="str">&quot;Homo sapiens frequency&quot;</span> <span class="sym">(</span>N <span class="sym">*</span> <span class="num">5</span><span class="sym">)</span>
    <span class="sym">{</span>MakeCumulativeTable HOMOSAPIEN<span class="sym">}</span> <span class="num">60</span><span class="sym">}</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

