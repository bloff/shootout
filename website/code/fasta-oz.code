<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application Open

<span class="kwb">define</span>
   <span class="slc">% lists convenient for declaring data</span>

   RawALU <span class="sym">=</span>
      <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> #
      <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> #
      <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> #
      <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> #
      <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> #
      <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> #
      <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

   RawIUB <span class="sym">= [</span>
      <span class="str">&quot;a&quot;</span>#<span class="num">0.27</span> <span class="str">&quot;c&quot;</span>#<span class="num">0.12</span> <span class="str">&quot;g&quot;</span>#<span class="num">0.12</span> <span class="str">&quot;t&quot;</span>#<span class="num">0.27</span>
      <span class="str">&quot;B&quot;</span>#<span class="num">0.02</span> <span class="str">&quot;D&quot;</span>#<span class="num">0.02</span> <span class="str">&quot;H&quot;</span>#<span class="num">0.02</span> <span class="str">&quot;K&quot;</span>#<span class="num">0.02</span>
      <span class="str">&quot;M&quot;</span>#<span class="num">0.02</span> <span class="str">&quot;N&quot;</span>#<span class="num">0.02</span> <span class="str">&quot;R&quot;</span>#<span class="num">0.02</span> <span class="str">&quot;S&quot;</span>#<span class="num">0.02</span>
      <span class="str">&quot;V&quot;</span>#<span class="num">0.02</span> <span class="str">&quot;W&quot;</span>#<span class="num">0.02</span> <span class="str">&quot;Y&quot;</span>#<span class="num">0.02</span> <span class="sym">]</span>

   RawHomoSapiens <span class="sym">= [</span>
      <span class="str">&quot;a&quot;</span># <span class="num">0.3029549426680</span>
      <span class="str">&quot;c&quot;</span># <span class="num">0.1979883004921</span>
      <span class="str">&quot;g&quot;</span># <span class="num">0.1975473066391</span>
      <span class="str">&quot;t&quot;</span># <span class="num">0.3015094502008</span> <span class="sym">]</span>


   <span class="slc">% arrays faster for indexed selection</span>

   <span class="kwb">fun</span> <span class="sym">{</span>MakeStringArray L<span class="sym">}</span>
      A <span class="sym">= {</span>NewArray <span class="num">1</span> <span class="sym">{</span>Length L<span class="sym">}</span> <span class="kwa">nil</span><span class="sym">}</span>
   <span class="kwb">in</span>
     <span class="sym">{</span>List.forAllInd L
        <span class="kwb">proc</span><span class="sym">{</span>$ I C<span class="sym">}</span> A.I <span class="sym">:= [</span>C<span class="sym">]</span> <span class="kwb">end</span><span class="sym">}</span>
     A
   <span class="kwb">end</span>

   <span class="kwb">fun</span> <span class="sym">{</span>MakeCumulative L<span class="sym">}</span>
      N <span class="sym">= {</span>Length L<span class="sym">}</span>
      A <span class="sym">= {</span>NewArray <span class="num">1</span> N <span class="num">0</span><span class="sym">}</span>
      Sum <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span>

      <span class="kwb">proc</span> <span class="sym">{</span>Acc I Code#Percent<span class="sym">}</span>
         A.I <span class="sym">:=</span> Code # <span class="sym">(</span>Percent <span class="sym">+</span> &#64;Sum<span class="sym">)</span>
         Sum <span class="sym">:=</span> &#64;Sum <span class="sym">+</span> Percent
      <span class="kwb">end</span>
   <span class="kwb">in</span>
      <span class="sym">{</span>List.forAllInd L Acc<span class="sym">}</span>
      A
   <span class="kwb">end</span>

   ALU <span class="sym">= {</span>MakeStringArray <span class="sym">{</span>VirtualString.toString RawALU<span class="sym">} }</span>
   IUB <span class="sym">= {</span>MakeCumulative RawIUB<span class="sym">}</span>
   HomoSapiens <span class="sym">= {</span>MakeCumulative RawHomoSapiens<span class="sym">}</span>


   <span class="slc">% random selection</span>

   <span class="kwb">fun</span> <span class="sym">{</span>PseudoRandomFunction Max<span class="sym">}</span>
      IM <span class="sym">=</span> <span class="num">139968</span> IMF <span class="sym">=</span> <span class="num">139968.0</span>
      IA <span class="sym">=</span> <span class="num">3877</span>
      IC <span class="sym">=</span> <span class="num">29573</span>
      Seed <span class="sym">= {</span>NewCell <span class="num">42</span><span class="sym">}</span>
   <span class="kwb">in</span>
      <span class="kwb">fun</span> <span class="sym">{</span>$<span class="sym">}</span>
         Seed <span class="sym">:= (</span>&#64;Seed <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> mod IM
         Max <span class="sym">* {</span>IntToFloat &#64;Seed<span class="sym">} /</span> IMF
      <span class="kwb">end</span>
   <span class="kwb">end</span>

   RandomNumber <span class="sym">= {</span>PseudoRandomFunction <span class="num">1.0</span><span class="sym">}</span>


   <span class="kwb">fun</span> <span class="sym">{</span>SelectRandom A<span class="sym">}</span>
      <span class="kwb">fun</span> <span class="sym">{</span>Select R A I N<span class="sym">}</span>   <span class="slc">% simple sequential search</span>
         Code#Percent <span class="sym">=</span> A.I
      <span class="kwb">in</span>
         <span class="kwb">if</span> R <span class="sym">=&lt;</span> Percent <span class="kwb">then</span> Code <span class="kwb">else</span> <span class="sym">{</span>Select R A I<span class="sym">+</span><span class="num">1</span> N<span class="sym">}</span> <span class="kwb">end</span>
      <span class="kwb">end</span>
   <span class="kwb">in</span>
      <span class="sym">{</span>Select <span class="sym">{</span>RandomNumber<span class="sym">}</span> A <span class="sym">{</span>Array.low A<span class="sym">} {</span>Array.high A<span class="sym">}}</span>
   <span class="kwb">end</span>


   <span class="slc">% based on Paul Hsieh's C program</span>
   <span class="kwb">proc</span> <span class="sym">{</span>MakeRandomFasta Id Desc A N F<span class="sym">}</span>
      <span class="kwb">fun</span> <span class="sym">{</span>Line I L<span class="sym">}</span>
         <span class="kwb">if</span> I <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then</span> <span class="sym">{</span>Line I<span class="sym">-</span><span class="num">1</span> L#<span class="sym">{</span>SelectRandom A<span class="sym">} }</span> <span class="kwb">else</span> L <span class="kwb">end</span>
      <span class="kwb">end</span>
   <span class="kwb">in</span>
      <span class="sym">{</span>F  write<span class="sym">(</span>vs<span class="sym">:</span> <span class="str">&quot;&gt;&quot;</span> # Id # <span class="str">&quot; &quot;</span> # Desc # <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)}</span>

      <span class="kwb">for</span> I <span class="kwb">in</span> N<span class="sym">;</span> I <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> I<span class="sym">-</span>LineLength <span class="kwb">do</span>
         M <span class="sym">=</span> <span class="kwb">if</span> I <span class="sym">&lt;</span> LineLength <span class="kwb">then</span> I <span class="kwb">else</span> LineLength <span class="kwb">end</span>
      <span class="kwb">in</span>
         <span class="sym">{</span>F  write<span class="sym">(</span>vs<span class="sym">: {</span>Line M <span class="str">&quot;&quot;</span><span class="sym">}</span> # <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)}</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>


   <span class="slc">% repeat selection</span>

   <span class="kwb">proc</span> <span class="sym">{</span>MakeRepeatFasta Id Desc A N F<span class="sym">}</span>
      Start <span class="sym">= {</span>NewCell <span class="num">1</span><span class="sym">}</span>
      Last <span class="sym">= {</span>Array.high A<span class="sym">}</span>

      <span class="kwb">fun</span> <span class="sym">{</span>Line I N L<span class="sym">}</span>
         <span class="kwb">if</span> I <span class="sym">=&lt;</span> N <span class="kwb">then</span> <span class="sym">{</span>Line I<span class="sym">+</span><span class="num">1</span> N L#A.I <span class="sym">}</span> <span class="kwb">else</span> L <span class="kwb">end</span>
      <span class="kwb">end</span>
   <span class="kwb">in</span>
      <span class="sym">{</span>F write<span class="sym">(</span>vs<span class="sym">:</span> <span class="str">&quot;&gt;&quot;</span> # Id # <span class="str">&quot; &quot;</span> # Desc # <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)}</span>

      <span class="kwb">for</span> I <span class="kwb">in</span> N<span class="sym">;</span> I <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> I<span class="sym">-</span>LineLength <span class="kwb">do</span>
         M <span class="sym">=</span> <span class="kwb">if</span> I <span class="sym">&lt;</span> LineLength <span class="kwb">then</span> I <span class="kwb">else</span> LineLength <span class="kwb">end</span>
         K <span class="sym">=</span> &#64;Start <span class="sym">+</span> M <span class="sym">-</span> <span class="num">1</span>
         Stop <span class="sym">=</span> <span class="kwb">if</span> K <span class="sym">&gt;</span> Last <span class="kwb">then</span> K<span class="sym">-</span>Last <span class="kwb">else</span> K <span class="kwb">end</span>
         L
      <span class="kwb">in</span>
         <span class="kwb">if</span> K <span class="sym">&gt;</span> Last <span class="kwb">then</span>
            L <span class="sym">= {</span>Line &#64;Start Last <span class="kwa">nil</span><span class="sym">}</span>
            Start <span class="sym">:=</span> <span class="num">1</span>
         <span class="kwb">else</span>
            L <span class="sym">=</span> <span class="kwa">nil</span>
         <span class="kwb">end</span>
         <span class="sym">{</span>F write<span class="sym">(</span>vs<span class="sym">: {</span>Line &#64;Start Stop L<span class="sym">}</span> # <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">) }</span>
         Start <span class="sym">:=</span> Stop <span class="sym">+</span> <span class="num">1</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>


   LineLength <span class="sym">=</span> <span class="num">60</span>

   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String.toInt Arg<span class="sym">}</span>
   StdOut <span class="sym">= {</span>New Open.file init<span class="sym">(</span>name<span class="sym">:</span>stdout<span class="sym">)}</span>

<span class="kwb">in</span>
   <span class="sym">{</span>MakeRepeatFasta <span class="str">&quot;ONE&quot;</span> <span class="str">&quot;Homo sapiens alu&quot;</span> ALU N<span class="sym">*</span><span class="num">2</span> StdOut<span class="sym">}</span>
   <span class="sym">{</span>MakeRandomFasta <span class="str">&quot;TWO&quot;</span> <span class="str">&quot;IUB ambiguity codes&quot;</span> IUB N<span class="sym">*</span><span class="num">3</span> StdOut<span class="sym">}</span>
   <span class="sym">{</span>MakeRandomFasta <span class="str">&quot;THREE&quot;</span> <span class="str">&quot;Homo sapiens frequency&quot;</span> HomoSapiens N<span class="sym">*</span><span class="num">5</span> StdOut<span class="sym">}</span>
   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
