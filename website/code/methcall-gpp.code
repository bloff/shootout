<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">// $Id: methcall-gpp.code,v 1.10 2006-04-01 21:26:59 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>

<span class="slc">// with some help from Bill Lear</span>

<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwc">class</span> Toggle <span class="sym">{</span>
<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwd">Toggle</span><span class="sym">(</span><span class="kwb">bool</span> start_state<span class="sym">) :</span> <span class="kwd">state</span><span class="sym">(</span>start_state<span class="sym">) { }</span>
    <span class="kwc">virtual</span> <span class="sym">~</span><span class="kwd">Toggle</span><span class="sym">() {  }</span>
    <span class="kwb">bool</span> <span class="kwd">value</span><span class="sym">() {</span>
	<span class="kwa">return</span><span class="sym">(</span>state<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwc">virtual</span> Toggle<span class="sym">&amp;</span> <span class="kwd">activate</span><span class="sym">() {</span>
	state <span class="sym">= !</span>state<span class="sym">;</span>
	<span class="kwa">return</span><span class="sym">(*</span><span class="kwa">this</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwb">bool</span> state<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwc">class</span> NthToggle <span class="sym">:</span> <span class="kwc">public</span> Toggle <span class="sym">{</span>
<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwd">NthToggle</span><span class="sym">(</span><span class="kwb">bool</span> start_state<span class="sym">,</span> <span class="kwb">int</span> max_counter<span class="sym">) :</span>
	<span class="kwd">Toggle</span><span class="sym">(</span>start_state<span class="sym">),</span> <span class="kwd">count_max</span><span class="sym">(</span>max_counter<span class="sym">),</span> <span class="kwd">counter</span><span class="sym">(</span><span class="num">0</span><span class="sym">) {</span>
    <span class="sym">}</span>
    Toggle<span class="sym">&amp;</span> <span class="kwd">activate</span><span class="sym">() {</span>
	<span class="kwa">if</span> <span class="sym">(++</span><span class="kwa">this</span><span class="sym">-&gt;</span>counter <span class="sym">&gt;=</span> <span class="kwa">this</span><span class="sym">-&gt;</span>count_max<span class="sym">) {</span>
	    state <span class="sym">= !</span>state<span class="sym">;</span>
	    counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">return</span><span class="sym">(*</span><span class="kwa">this</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="kwc">private</span><span class="sym">:</span>
    <span class="kwb">int</span> count_max<span class="sym">;</span>
    <span class="kwb">int</span> counter<span class="sym">;</span>
<span class="sym">};</span>


<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>

    <span class="kwb">bool</span> val <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
    Toggle <span class="sym">*</span>toggle <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Toggle</span><span class="sym">(</span>val<span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	val <span class="sym">=</span> toggle<span class="sym">-&gt;</span><span class="kwd">activate</span><span class="sym">().</span><span class="kwd">value</span><span class="sym">();</span>
    <span class="sym">}</span>
    cout <span class="sym">&lt;&lt; ((</span>val<span class="sym">)</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">) &lt;&lt;</span> endl<span class="sym">;</span>
    <span class="kwa">delete</span> toggle<span class="sym">;</span>

    val <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
    NthToggle <span class="sym">*</span>ntoggle <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">NthToggle</span><span class="sym">(</span>val<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	val <span class="sym">=</span> ntoggle<span class="sym">-&gt;</span><span class="kwd">activate</span><span class="sym">().</span><span class="kwd">value</span><span class="sym">();</span>
    <span class="sym">}</span>
    cout <span class="sym">&lt;&lt; ((</span>val<span class="sym">)</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">) &lt;&lt;</span> endl<span class="sym">;</span>
    <span class="kwa">delete</span> ntoggle<span class="sym">;</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
