<span class="slc">#!/usr/bin/perl -w
</span>
<span class="slc"># 
</span><span class="slc"># The Great Computer Language Shootout
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># Perl version of nseive benchmark
</span><span class="slc"># written David Pyke, March 2005
</span><span class="slc"># 
</span>
<span class="slc">####################################################################################
</span><span class="kwa">sub</span> nseive<span class="sym">(</span><span class="kwb">$</span><span class="sym">)
{
</span>	<span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$m</span><span class="sym">) =</span> &#64;_<span class="sym">;
</span>	<span class="kwc">my</span> &#64;a <span class="sym">= ();

</span><span class="slc">#	print &quot;m = $m\n&quot;;
</span>
	<span class="kwc">my</span> <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwa">for</span> <span class="sym">(</span><span class="kwc">my</span> <span class="kwb">$i</span> <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$m</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++){
</span>		<span class="kwa">if</span> <span class="sym">(!</span>defined <span class="kwb">$a</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">] ) {
</span>			<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$j</span> <span class="sym">=</span> <span class="kwb">$i</span> <span class="sym">+</span> <span class="kwb">$i</span><span class="sym">;</span> <span class="kwb">$j</span> <span class="sym">&lt;</span> <span class="kwb">$m</span><span class="sym">;</span> <span class="kwb">$j</span> <span class="sym">+=</span> <span class="kwb">$i</span><span class="sym">){
</span>				<span class="kwb">$a</span><span class="sym">[</span><span class="kwb">$j</span><span class="sym">] =</span> <span class="num">1</span><span class="sym">;
			}
</span>			<span class="kwb">$count</span><span class="sym">++;
		}
	}
</span>	<span class="kwa">return</span> <span class="kwb">$count</span><span class="sym">;
}

</span><span class="slc">####################################################################################
</span><span class="kwa">sub</span> nseive_test<span class="sym">(</span><span class="kwb">$</span><span class="sym">)
{
</span>	<span class="kwc">my</span><span class="sym">(</span><span class="kwb">$n</span><span class="sym">) =</span> &#64;_<span class="sym">;
</span><span class="slc">#	print &quot;n = $n\n&quot;;
</span>
	<span class="kwb">$m</span> <span class="sym">=</span> <span class="num">2</span><span class="sym">**</span><span class="kwb">$n</span> <span class="sym">*</span> <span class="num">10000</span><span class="sym">;

</span>	<span class="kwc">my</span> <span class="kwb">$ncount</span><span class="sym">=</span> nseive <span class="kwb">$m</span> <span class="sym">;

</span>	printf <span class="str">&quot;Primes up to %8u %8u</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$m</span><span class="sym">,</span> <span class="kwb">$ncount</span><span class="sym">;
}
</span><span class="slc">####################################################################################
</span><span class="slc">#main
</span>	<span class="kwc">my</span> <span class="kwb">$N</span> <span class="sym">= (</span><span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;</span> <span class="num">1</span><span class="sym">)</span> ? <span class="num">1</span> <span class="sym">:</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];

</span>	nseive_test <span class="kwb">$N</span> <span class="sym">;

</span>	nseive_test <span class="sym">(</span><span class="kwb">$N</span><span class="num">-1</span><span class="sym">)</span>  <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$N</span> <span class="sym">&gt;=</span><span class="num">1</span><span class="sym">);
</span>	nseive_test <span class="sym">(</span><span class="kwb">$N</span><span class="num">-2</span><span class="sym">)</span>  <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$N</span> <span class="sym">&gt;=</span><span class="num">2</span><span class="sym">);
</span>	exit<span class="sym">;

</span><span class="slc">#END OF FILE</span>
