<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- Simon Marlow</span>

<span class="com">{-# OPTIONS_GHC -funbox-strict-fields #-}</span>
<span class="kwa">import</span> System
<span class="kwa">import</span> Text.Printf

<span class="kwa">data</span> Tree <span class="sym">=</span> Nil <span class="sym">|</span> Node <span class="sym">!</span><span class="kwb">Int</span> Tree Tree

main <span class="sym">=</span> <span class="kwa">do</span>
  <span class="sym">[</span>n<span class="sym">] &lt;-</span> getArgs
  <span class="kwa">let</span> max<span class="str">' = max (min'</span><span class="sym">+</span><span class="num">2</span><span class="sym">) (</span>read n<span class="sym">)</span>
  <span class="kwa">let</span> t <span class="sym">=</span> make <span class="num">0</span> <span class="sym">(</span>max<span class="str">'+1)</span>
<span class="str">  printf &quot;stretch tree of depth %d\t check: %d\n&quot; (max'</span><span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>itemCheck t<span class="sym">)</span>
  <span class="kwa">let</span> longlived <span class="sym">=</span> make <span class="num">0</span> max<span class="str">'</span>
<span class="str">  depthLoop min'</span> max<span class="str">'</span>
<span class="str">  printf &quot;long lived tree of depth %d\t check: %d\n&quot; max'</span> <span class="sym">(</span>itemCheck longlived<span class="sym">)</span>

min<span class="str">' :: Int</span>
<span class="str">min'</span> <span class="sym">=</span> <span class="num">4</span>

depthLoop d m <span class="sym">|</span> d <span class="sym">&gt;</span> m <span class="sym">=</span> return <span class="sym">()</span>
depthLoop d m <span class="sym">=</span> <span class="kwa">do</span>
   printf <span class="str">&quot;%d\t trees of depth %d\t check: %d\n&quot;</span> <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">)</span> d <span class="sym">(</span>sumLoop n d <span class="num">0</span><span class="sym">)</span>
   depthLoop <span class="sym">(</span>d<span class="sym">+</span><span class="num">2</span><span class="sym">)</span> m
   <span class="kwa">where</span> n <span class="sym">=</span> <span class="num">2</span>^<span class="sym">(</span>m <span class="sym">-</span> d <span class="sym">+</span> min<span class="str">')</span>
<span class="str"></span>
<span class="str">sumLoop :: Int -&gt; Int -&gt; Int -&gt; Int</span>
<span class="str">sumLoop 0 d acc = acc</span>
<span class="str">sumLoop k d acc = c `seq` sumLoop (k-1) d (acc + c + c'</span><span class="sym">)</span>
    <span class="kwa">where</span> c  <span class="sym">=</span> itemCheck <span class="sym">(</span>make k d<span class="sym">)</span>
          c<span class="str">' = itemCheck (make (-1*k) d)</span>
<span class="str"></span>
<span class="str">make :: Int -&gt; Int -&gt; Tree</span>
<span class="str">make i 0 = i `seq` Nil</span>
<span class="str">make i d = Node i (make ((2*i)-1) (d-1)) (make (2*i) (d-1))</span>
<span class="str"></span>
<span class="str">itemCheck Nil = 0</span>
<span class="str">itemCheck (Node x l r) = x + itemCheck l - itemCheck r</span>
