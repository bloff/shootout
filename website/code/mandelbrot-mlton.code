<span class="com">(* mandelbrot.sml
 *
 *   Mandelbrot (fractal generation) benchmark.
 *     (Loosely based on the C version.)
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume&#64;tti-c.org)
 *
 *)</span>
<span class="kwa">structure</span> Test<span class="sym">:</span><span class="kwa">sig val</span> main<span class="sym">:</span><span class="kwb">string</span><span class="sym">*</span><span class="kwb">string</span> list<span class="sym">-&gt;</span>OS.Process.status <span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct

    val</span> <span class="sym">(</span>K<span class="sym">,</span> L2<span class="sym">) = (</span><span class="num">50</span><span class="sym">,</span> <span class="num">4.0</span><span class="sym">)
</span>    <span class="kwa">infix</span> <span class="sym">&lt;&lt;</span> <span class="kwa">val op</span> <span class="sym">&lt;&lt; =</span> <span class="kwa">Word8</span>.<span class="sym">&lt;&lt;</span> <span class="kwa">fun</span> b0 x <span class="sym">=</span> x<span class="sym">&lt;&lt;</span><span class="num">0w1</span> <span class="kwa">fun</span> b1 x <span class="sym">= (</span>b0 x<span class="sym">) +</span> <span class="num">0w1

</span>    <span class="kwa">fun</span> out w <span class="sym">=</span> <span class="kwa">TextIO</span>.output1 <span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,</span> Byte.byteToChar w<span class="sym">)
</span>    <span class="kwa">fun</span> outs s <span class="sym">=</span> <span class="kwa">TextIO</span>.output <span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,</span> s<span class="sym">)

</span>    <span class="kwa">fun</span> mandel <span class="sym">(</span>h<span class="sym">,</span> w<span class="sym">) =
</span>	<span class="kwa">let val</span> <span class="sym">(</span>hr'<span class="sym">,</span> wr'<span class="sym">) = (</span><span class="num">2.0</span><span class="sym">/</span><span class="kwb">real</span> h<span class="sym">,</span> <span class="num">2.0</span><span class="sym">/</span><span class="kwb">real</span> w<span class="sym">)
</span>	    <span class="kwa">fun</span> p<span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">) =
</span>		<span class="kwa">let val</span> <span class="sym">(</span>Cr<span class="sym">,</span> Ci<span class="sym">) = (</span><span class="kwb">real</span> x<span class="sym">*</span>wr'<span class="num">-1.5</span><span class="sym">,</span> <span class="kwb">real</span> y<span class="sym">*</span>hr'<span class="num">-1.0</span><span class="sym">)
</span>		    <span class="kwa">fun</span> l<span class="sym">(</span>r<span class="sym">,</span>i<span class="sym">,</span>k<span class="sym">) =
</span>			<span class="kwa">let val</span> <span class="sym">(</span>r2<span class="sym">,</span>i2<span class="sym">)=(</span>r<span class="sym">*</span>r<span class="sym">,</span>i<span class="sym">*</span>i<span class="sym">)
</span>			<span class="kwa">in</span> r2<span class="sym">+</span>i2<span class="sym">&lt;=</span>L2 <span class="kwa">andalso</span> <span class="sym">(</span>k<span class="sym">&gt;=</span>K <span class="kwa">orelse</span> l<span class="sym">(</span>r2<span class="sym">-</span>i2<span class="sym">+</span>Cr<span class="sym">,</span><span class="num">2.0</span><span class="sym">*</span>r<span class="sym">*</span>i<span class="sym">+</span>Ci<span class="sym">,</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">))</span> <span class="kwa">end
		in</span> l<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span><span class="num">0.0</span><span class="sym">,</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">end

	    fun</span> xl<span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>b<span class="sym">,</span>n<span class="sym">) =
</span>		<span class="kwa">if</span> x<span class="sym">&gt;=</span>w <span class="kwa">then</span> <span class="sym">(</span>out<span class="sym">(</span>b<span class="sym">&lt;&lt;</span>n<span class="sym">);</span> yl<span class="sym">(</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">))
</span>		<span class="kwa">else let val</span> <span class="sym">(</span>b<span class="sym">,</span>n<span class="sym">) =</span> <span class="kwa">if</span> n<span class="sym">=</span><span class="num">0w0</span> <span class="kwa">then</span> <span class="sym">(</span>out b<span class="sym">; (</span><span class="num">0w0</span><span class="sym">,</span><span class="num">0w8</span><span class="sym">))</span> <span class="kwa">else</span> <span class="sym">(</span>b<span class="sym">,</span>n<span class="sym">)
</span>		     <span class="kwa">in</span> xl<span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">,</span><span class="kwa">if</span> p<span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">)</span> <span class="kwa">then</span> b1 b <span class="kwa">else</span> b0 b<span class="sym">,</span> n<span class="num">-0w1</span><span class="sym">)</span> <span class="kwa">end

	    and</span> yl y <span class="sym">=</span> <span class="kwa">if</span> y<span class="sym">&lt;</span>h <span class="kwa">then</span> xl<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>y<span class="sym">,</span><span class="num">0w0</span><span class="sym">,</span><span class="num">0w8</span><span class="sym">)</span> <span class="kwa">else</span> OS.Process.success

	<span class="kwa">in</span> app outs <span class="sym">[</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString h<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString w<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">];</span> yl <span class="num">0
</span>	<span class="kwa">end

    fun</span> main' n <span class="sym">=</span> mandel <span class="sym">(</span>n<span class="sym">,</span> n<span class="sym">)
</span>    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1
</span>      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))
</span><span class="kwa">end

val</span> _ <span class="sym">=</span> Test.main <span class="sym">(</span>CommandLine.name <span class="sym">(),</span> CommandLine.arguments <span class="sym">())</span>
