<span class="dir">#!/usr/bin/pike</span>
<span class="slc">// -*- mode: pike -*-</span>
<span class="slc">// $Id: lists-pike.code,v 1.9 2005-12-31 16:45:38 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// from: Per Hedbor</span>
<span class="slc">// Optimized by Marcus Agehall</span>

<span class="dir">#define SIZE 10000</span>

<span class="dir">#define TB(X) werror(</span> <span class="dstr">&quot;%s: %.2f</span><span class="esc">\n</span><span class="dstr">&quot;</span><span class="dir">, X, gauge {</span>
<span class="dir">#define TE()  })</span>

<span class="kwb">int</span> <span class="kwd">test_lists</span><span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwb">mixed</span> Li1<span class="sym">,</span> Li2<span class="sym">,</span> Li3<span class="sym">;</span>
    <span class="slc">// create a list of integers from 1 to SIZE.</span>
    Li1 <span class="sym">=</span> <span class="kwa">indices</span><span class="sym">(</span><span class="kwa">allocate</span><span class="sym">(</span>SIZE<span class="sym">+</span><span class="num">1</span><span class="sym">))[</span><span class="num">1</span>..<span class="sym">];</span>
    <span class="slc">// copy the list to Li2.</span>
    Li2 <span class="sym">=</span> <span class="kwa">copy_value</span><span class="sym">(</span> Li1 <span class="sym">);</span>
    <span class="slc">// remove each element from left side of Li2 and append to</span>
    <span class="slc">// the right side of Li3 (preserving order)</span>

    Li3 <span class="sym">= ({});</span>

    <span class="kwd">while</span><span class="sym">(</span> <span class="kwa">sizeof</span><span class="sym">(</span> Li2 <span class="sym">) )</span>
    <span class="sym">{</span>
	Li3 <span class="sym">+=</span> Li2<span class="sym">[</span>.<span class="num">.0</span><span class="sym">];</span>
	Li2 <span class="sym">=</span> Li2<span class="sym">[</span><span class="num">1</span>..<span class="sym">];</span>
    <span class="sym">}</span>
    <span class="slc">// Li2 is now empty.</span>
    <span class="slc">// Remove each element from right side of Li3 and append to right</span>
    <span class="slc">// side of Li2</span>
    <span class="kwd">while</span><span class="sym">(</span> <span class="kwa">sizeof</span><span class="sym">(</span> Li3 <span class="sym">) )</span>
    <span class="sym">{</span>
	Li2 <span class="sym">+=</span> Li3<span class="sym">[</span><span class="kwa">sizeof</span><span class="sym">(</span> Li3 <span class="sym">)-</span><span class="num">1</span>..<span class="sym">];</span>
	Li3 <span class="sym">=</span> Li3<span class="sym">[</span>..<span class="kwa">sizeof</span><span class="sym">(</span> Li3 <span class="sym">)-</span><span class="num">2</span><span class="sym">];</span>
    <span class="sym">}</span>
    <span class="slc">// Li2 is now reversed, and Li3 empty.</span>
    <span class="slc">// Reverse Li1 in place.</span>
    Li1 <span class="sym">=</span> <span class="kwa">reverse</span><span class="sym">(</span> Li1 <span class="sym">);</span>
    <span class="kwd">if</span><span class="sym">(</span> Li1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> SIZE <span class="sym">)</span>
	return <span class="num">0</span><span class="sym">;</span>
    <span class="slc">// compare Li1 and Li2 for equality, and return the length of the list.</span>
    <span class="kwd">if</span><span class="sym">(</span> <span class="kwa">equal</span><span class="sym">(</span> Li1<span class="sym">,</span> Li2 <span class="sym">) )</span>
	return <span class="kwa">sizeof</span><span class="sym">(</span> Li1 <span class="sym">);</span>
    return <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span> argv<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> result<span class="sym">,</span> num <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">];</span>
    <span class="kwd">if</span><span class="sym">(</span> num <span class="sym">&lt;=</span>  <span class="num">0</span> <span class="sym">)</span>
	num <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwd">while</span><span class="sym">(</span> num<span class="sym">-- )</span>
	result <span class="sym">=</span> <span class="kwd">test_lists</span><span class="sym">();</span>
    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> result <span class="sym">);</span>
<span class="sym">}</span>
