<span class="line">    1 </span><span class="dir">#!/usr/bin/pike
</span><span class="line">    2 </span><span class="dir"></span><span class="slc">// -*- mode: pike -*-
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// $Id: lists-pike.code,v 1.3 2004-11-11 07:13:59 bfulgham Exp $
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">// from: Per Hedbor
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span>
<span class="line">    8 </span><span class="dir">#define SIZE 10000
</span><span class="line">    9 </span><span class="dir"></span>
<span class="line">   10 </span><span class="dir">#define TB(X) werror(</span> <span class="dstr">&quot;%s: %.2f</span><span class="esc">\n</span><span class="dstr">&quot;</span><span class="dir">, X, gauge {
</span><span class="line">   11 </span><span class="dir"></span><span class="dir">#define TE()  })
</span><span class="line">   12 </span><span class="dir"></span>
<span class="line">   13 </span><span class="kwb">int</span> test_lists<span class="sym">()
</span><span class="line">   14 </span><span class="sym">{
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwb">mixed</span> Li1<span class="sym">,</span> Li2<span class="sym">,</span> Li3<span class="sym">;
</span><span class="line">   16 </span><span class="sym"></span>    <span class="slc">// create a list of integers from 1 to SIZE.
</span><span class="line">   17 </span><span class="slc"></span>    Li1 <span class="sym">= (</span><span class="kwb">string</span><span class="sym">)</span><span class="kwa">indices</span><span class="sym">(</span><span class="kwa">allocate</span><span class="sym">(</span>SIZE<span class="sym">+</span><span class="num">1</span><span class="sym">))[</span><span class="num">1</span>..<span class="sym">];
</span><span class="line">   18 </span><span class="sym"></span>    <span class="slc">// copy the list to Li2.
</span><span class="line">   19 </span><span class="slc"></span>    Li2 <span class="sym">=</span> <span class="kwa">copy_value</span><span class="sym">(</span> Li1 <span class="sym">);
</span><span class="line">   20 </span><span class="sym"></span>    <span class="slc">// remove each element from left side of Li2 and append to
</span><span class="line">   21 </span><span class="slc"></span>    <span class="slc">// the right side of Li3 (preserving order)
</span><span class="line">   22 </span><span class="slc"></span>
<span class="line">   23 </span>    Li3 <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;
</span><span class="line">   24 </span><span class="sym">
</span><span class="line">   25 </span><span class="sym"></span>    while<span class="sym">(</span> <span class="kwa">sizeof</span><span class="sym">(</span> Li2 <span class="sym">) )
</span><span class="line">   26 </span><span class="sym">    {
</span><span class="line">   27 </span><span class="sym"></span>        Li3 <span class="sym">+=</span> Li2<span class="sym">[</span>.<span class="num">.0</span><span class="sym">];
</span><span class="line">   28 </span><span class="sym"></span>        Li2 <span class="sym">=</span> Li2<span class="sym">[</span><span class="num">1</span>..<span class="sym">];
</span><span class="line">   29 </span><span class="sym">    }
</span><span class="line">   30 </span><span class="sym"></span>    <span class="slc">// Li2 is now empty.
</span><span class="line">   31 </span><span class="slc"></span>    <span class="slc">// Remove each element from right side of Li3 and append to right
</span><span class="line">   32 </span><span class="slc"></span>    <span class="slc">// side of Li2
</span><span class="line">   33 </span><span class="slc"></span>    while<span class="sym">(</span> <span class="kwa">sizeof</span><span class="sym">(</span> Li3 <span class="sym">) )
</span><span class="line">   34 </span><span class="sym">    {
</span><span class="line">   35 </span><span class="sym"></span>        Li2 <span class="sym">+=</span> Li3<span class="sym">[</span><span class="kwa">sizeof</span><span class="sym">(</span> Li3 <span class="sym">)-</span><span class="num">1</span>..<span class="sym">];
</span><span class="line">   36 </span><span class="sym"></span>        Li3 <span class="sym">=</span> Li3<span class="sym">[</span>..<span class="kwa">sizeof</span><span class="sym">(</span> Li3 <span class="sym">)-</span><span class="num">2</span><span class="sym">];
</span><span class="line">   37 </span><span class="sym">    }
</span><span class="line">   38 </span><span class="sym"></span>    <span class="slc">// Li2 is now reversed, and Li3 empty.
</span><span class="line">   39 </span><span class="slc"></span>    <span class="slc">// Reverse Li1 in place.
</span><span class="line">   40 </span><span class="slc"></span>    Li1 <span class="sym">=</span> <span class="kwa">reverse</span><span class="sym">(</span> Li1 <span class="sym">);
</span><span class="line">   41 </span><span class="sym"></span>    if<span class="sym">(</span> Li1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> SIZE <span class="sym">)
</span><span class="line">   42 </span><span class="sym"></span>        return <span class="num">0</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>    <span class="slc">// compare Li1 and Li2 for equality, and return the length of the list.
</span><span class="line">   44 </span><span class="slc"></span>    if<span class="sym">(</span> <span class="kwa">equal</span><span class="sym">(</span> Li1<span class="sym">,</span> Li2 <span class="sym">) )
</span><span class="line">   45 </span><span class="sym"></span>        return <span class="kwa">sizeof</span><span class="sym">(</span> Li1 <span class="sym">);
</span><span class="line">   46 </span><span class="sym"></span>    return <span class="num">0</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym">}
</span><span class="line">   48 </span><span class="sym">
</span><span class="line">   49 </span><span class="sym"></span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span> argv<span class="sym">)
</span><span class="line">   50 </span><span class="sym">{
</span><span class="line">   51 </span><span class="sym"></span>    <span class="kwb">int</span> result<span class="sym">,</span> num <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">];
</span><span class="line">   52 </span><span class="sym"></span>    if<span class="sym">(</span> num <span class="sym">&lt;=</span>  <span class="num">0</span> <span class="sym">)
</span><span class="line">   53 </span><span class="sym"></span>        num <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   54 </span><span class="sym"></span>    while<span class="sym">(</span> num<span class="sym">-- )
</span><span class="line">   55 </span><span class="sym"></span>        result <span class="sym">=</span> test_lists<span class="sym">();
</span><span class="line">   56 </span><span class="sym"></span>    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> result <span class="sym">);
</span><span class="line">   57 </span><span class="sym">}</span>
