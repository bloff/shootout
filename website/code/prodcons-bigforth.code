\ $Id<span class="sym">:</span> prodcons<span class="sym">.</span>gforth<span class="sym">,</span>v <span class="num">1.1 2004</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">25 03</span><span class="sym">:</span><span class="num">27</span><span class="sym">:</span><span class="num">11</span> bfulgham Exp $
\ http<span class="sym">:</span><span class="slc">//www.bagley.org/~doug/shootout/</span>
\ from Bernd Paysan

require tasker<span class="sym">.</span>fs

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

Variable pcount
Variable data
Variable produced
Variable consumed

\ note<span class="sym">:</span> no mutex is needed here<span class="sym">.</span> bigFORTH<span class="str">'s tasker is cooperative</span>
<span class="str"></span><span class="esc">\ </span><span class="str">and switches tasks only with PAUSE.</span>
<span class="str"></span>
<span class="str">: producer ( n -- )</span>
<span class="str">  next-task swap 2 $1000 NewTask pass</span>
<span class="str">  0 ?DO</span>
<span class="str">     BEGIN  pcount &#64; 1 =  WHILE  pause  REPEAT</span>
<span class="str">     1 pcount ! I data !</span>
<span class="str">     1 produced +!</span>
<span class="str">  LOOP wake ;</span>
<span class="str"></span>
<span class="str">: consumer ( n -- )</span>
<span class="str">  next-task swap 2 $1000 NewTask pass</span>
<span class="str">  0 swap 0 ?DO</span>
<span class="str">     BEGIN  pcount &#64; 0=  WHILE  pause  REPEAT</span>
<span class="str">     0 pcount ! drop data &#64;</span>
<span class="str">     1 consumed +!</span>
<span class="str">  LOOP drop wake ;</span>
<span class="str"></span>
<span class="str">NUM producer</span>
<span class="str">NUM consumer</span>
<span class="str"></span>
<span class="str"></span><span class="esc">\ </span><span class="str">There is no &quot;main&quot; task - to synchronize, each of the two new</span>
<span class="str"></span><span class="esc">\ </span><span class="str">threads get the task address of the starting task, and wake it</span>
<span class="str"></span><span class="esc">\ </span><span class="str">when they are done. The main task therefore has to stop twice</span>
<span class="str"></span><span class="esc">\ </span><span class="str">(and wait to be woken up)</span>
<span class="str"></span>
<span class="str">stop stop</span>
<span class="str"></span>
<span class="str">produced &#64; .</span>
<span class="str">consumed &#64; 1 u.r cr</span>
<span class="str"></span>
<span class="str">bye</span> <span class="esc">\ </span><span class="str">th-th-that'</span>s all folks<span class="sym">!</span>
