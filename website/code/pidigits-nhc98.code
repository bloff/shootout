<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- contributed by Einar Karttunen
</span><span class="slc">-- adapted from the OCaml version.
</span>
<span class="kwa">import</span> System

floor_ev <span class="sym">(</span>q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">)</span> x <span class="sym">= (</span>q<span class="sym">*</span>x <span class="sym">+</span> r<span class="sym">)</span> `div` <span class="sym">(</span>s<span class="sym">*</span>x <span class="sym">+</span> t<span class="sym">)
</span>comp <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">) (</span>q<span class="str">',r'</span><span class="sym">,</span>s<span class="str">',t'</span><span class="sym">) = (</span>q<span class="sym">*</span>q<span class="str">' + r*s'</span><span class="sym">,</span> q<span class="sym">*</span>r<span class="str">' + r*t'</span><span class="sym">,</span> s<span class="sym">*</span>q<span class="str">' + t*s'</span><span class="sym">,</span> s<span class="sym">*</span>r<span class="str">' + t*t'</span><span class="sym">)
</span>next z <span class="sym">=</span> floor_ev z <span class="num">3
</span>safe z n <span class="sym">=</span> n <span class="sym">==</span> floor_ev z <span class="num">4
</span>prod z n <span class="sym">=</span> comp <span class="sym">(</span><span class="num">10</span><span class="sym">,-</span><span class="num">10</span> <span class="sym">*</span> n<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span> z
cons z k <span class="sym">=</span> <span class="kwa">let</span> den <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span> <span class="kwa">in</span> comp z <span class="sym">(</span>fromIntegral k<span class="sym">,</span> fromIntegral <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>den<span class="sym">),</span> <span class="num">0</span><span class="sym">,</span> fromIntegral den<span class="sym">)

</span>digit <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt; (</span>Integer<span class="sym">,</span>Integer<span class="sym">,</span>Integer<span class="sym">,</span>Integer<span class="sym">) -&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">()
</span>digit k z <span class="num">0</span> row col <span class="sym">=</span> putStrLn <span class="sym">(</span>take <span class="sym">(</span><span class="num">10</span><span class="sym">-</span>col<span class="sym">)</span> <span class="str">&quot;               &quot;</span><span class="sym">++</span><span class="str">&quot;\t:&quot;</span><span class="sym">++</span>show <span class="sym">(</span>row<span class="sym">+</span>col<span class="sym">))
</span>digit k z n row col <span class="sym">=
</span>  if safe z y
     <span class="kwa">then</span> if col <span class="sym">==</span> <span class="num">10
</span>	     <span class="kwa">then do let</span> row<span class="str">' = row + 10
	             putStr (&quot;\t:&quot;++show row'</span><span class="sym">++</span><span class="str">&quot;\n&quot;</span><span class="sym">++</span>show y<span class="sym">)
</span>		     digit k <span class="sym">(</span>prod z y<span class="sym">) (</span>n<span class="num">-1</span><span class="sym">)</span> row<span class="str">' 1
	     else putStr (show y) &gt;&gt; digit k (prod z y) (n-1) row (col+1)
     else digit (k+1) (cons z k) n row col
  where y = next z

main = do [n] &lt;- getArgs
	  digit 1 (1,0,0,1) (read n) 0 0</span>
