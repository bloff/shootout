<span class="line">    1 </span><span class="slc">//
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// Contributed by John Skaller
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">//
</span><span class="line">    4 </span><span class="slc"></span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span><span class="line">    5 </span><span class="sym"></span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);
</span><span class="line">    6 </span><span class="sym"></span><span class="slc">// Adapted from C++ solution
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="kwa">body</span> <span class="str">&quot;&quot;&quot;
</span><span class="line">    9 </span><span class="str">class Toggle {
</span><span class="line">   10 </span><span class="str">public:
</span><span class="line">   11 </span><span class="str">    Toggle(bool start_state) : state(start_state) { }
</span><span class="line">   12 </span><span class="str">    virtual ~Toggle() {  }
</span><span class="line">   13 </span><span class="str">    bool value() { return(state); }
</span><span class="line">   14 </span><span class="str">    virtual Toggle* activate() {
</span><span class="line">   15 </span><span class="str">        state = !state;
</span><span class="line">   16 </span><span class="str">        return this;
</span><span class="line">   17 </span><span class="str">    }
</span><span class="line">   18 </span><span class="str">protected:
</span><span class="line">   19 </span><span class="str">    bool state;
</span><span class="line">   20 </span><span class="str">};
</span><span class="line">   21 </span><span class="str">
</span><span class="line">   22 </span><span class="str">class NthToggle : public Toggle {
</span><span class="line">   23 </span><span class="str">public:
</span><span class="line">   24 </span><span class="str">    NthToggle(bool start_state, int max_counter) :
</span><span class="line">   25 </span><span class="str">        Toggle(start_state), count_max(max_counter), counter(0) {
</span><span class="line">   26 </span><span class="str">    }
</span><span class="line">   27 </span><span class="str">    Toggle *activate() {
</span><span class="line">   28 </span><span class="str">        if (++this-&gt;counter &gt;= this-&gt;count_max) {
</span><span class="line">   29 </span><span class="str">            state = !state;
</span><span class="line">   30 </span><span class="str">            counter = 0;
</span><span class="line">   31 </span><span class="str">        }
</span><span class="line">   32 </span><span class="str">        return this;
</span><span class="line">   33 </span><span class="str">    }
</span><span class="line">   34 </span><span class="str">private:
</span><span class="line">   35 </span><span class="str">    int count_max;
</span><span class="line">   36 </span><span class="str">    int counter;
</span><span class="line">   37 </span><span class="str">};
</span><span class="line">   38 </span><span class="str">&quot;&quot;&quot;</span><span class="sym">;
</span><span class="line">   39 </span><span class="sym">
</span><span class="line">   40 </span><span class="sym"></span>pod <span class="kwa">type</span> toggle <span class="sym">=</span>  <span class="str">&quot;class Toggle*&quot;</span><span class="sym">;
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym"></span><span class="kwa">fun</span> new_toggle<span class="sym">:</span> <span class="kwb">bool</span> <span class="sym">-&gt;</span> toggle <span class="sym">=</span> <span class="str">&quot;new Toggle($1)&quot;</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span><span class="kwa">fun</span> new_ntoggle<span class="sym">:</span> <span class="kwb">bool</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> toggle <span class="sym">=</span> <span class="str">&quot;new NthToggle($1,$2)&quot;</span><span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span><span class="kwa">proc</span> del<span class="sym">:</span> toggle <span class="sym">=</span> <span class="str">&quot;delete $1;&quot;</span><span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span><span class="kwa">fun</span> value<span class="sym">:</span> toggle <span class="sym">-&gt;</span> <span class="kwb">bool</span> <span class="sym">=</span> <span class="str">&quot;$1-&gt;value()&quot;</span><span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span><span class="kwa">proc</span> activate<span class="sym">:</span> toggle <span class="sym">=</span> <span class="str">&quot;$1-&gt;activate();&quot;</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span><span class="kwa">proc print</span> <span class="sym">(</span>t<span class="sym">:</span> toggle<span class="sym">) {</span> <span class="kwa">print</span> <span class="sym">(</span>value t<span class="sym">); }
</span><span class="line">   48 </span><span class="sym">
</span><span class="line">   49 </span><span class="sym"></span><span class="kwa">proc</span> check<span class="sym">(</span>t<span class="sym">:</span> toggle<span class="sym">,</span> k<span class="sym">:</span><span class="kwb">int</span><span class="sym">) {
</span><span class="line">   50 </span><span class="sym"></span>  <span class="kwa">var</span> tt <span class="sym">=</span> t<span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>  <span class="kwa">var</span> i<span class="sym">=</span>k<span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>  until i <span class="sym">==</span> <span class="num">0</span> do
<span class="line">   53 </span>    activate tt<span class="sym">;
</span><span class="line">   54 </span><span class="sym"></span>    <span class="kwa">print</span> tt<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">   55 </span><span class="sym">    --</span>i<span class="sym">;
</span><span class="line">   56 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>  del t<span class="sym">;
</span><span class="line">   58 </span><span class="sym">}
</span><span class="line">   59 </span><span class="sym">
</span><span class="line">   60 </span><span class="sym"></span>check<span class="sym">(</span>new_toggle <span class="kwa">true</span><span class="sym">,</span><span class="num">5</span><span class="sym">);
</span><span class="line">   61 </span><span class="sym">
</span><span class="line">   62 </span><span class="sym">{
</span><span class="line">   63 </span><span class="sym"></span>  <span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;
</span><span class="line">   64 </span><span class="sym"></span>  until i <span class="sym">==</span> <span class="num">0</span> do
<span class="line">   65 </span>    del <span class="sym">(</span>new_toggle <span class="kwa">true</span><span class="sym">);
</span><span class="line">   66 </span><span class="sym">    --</span>i<span class="sym">;
</span><span class="line">   67 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   68 </span><span class="sym"></span>  <span class="kwa">endl</span><span class="sym">;
</span><span class="line">   69 </span><span class="sym">};
</span><span class="line">   70 </span><span class="sym">
</span><span class="line">   71 </span><span class="sym"></span>check <span class="sym">(</span>new_ntoggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">),</span> <span class="num">8</span><span class="sym">);
</span><span class="line">   72 </span><span class="sym">
</span><span class="line">   73 </span><span class="sym">{
</span><span class="line">   74 </span><span class="sym"></span>  <span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;
</span><span class="line">   75 </span><span class="sym"></span>  until i <span class="sym">==</span> <span class="num">0</span> do
<span class="line">   76 </span>    del <span class="sym">(</span>new_ntoggle <span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">));
</span><span class="line">   77 </span><span class="sym">    --</span>i<span class="sym">;
</span><span class="line">   78 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   79 </span><span class="sym">};
</span><span class="line">   80 </span><span class="sym"></span>
