<span class="slc">//</span>
<span class="slc">// Contributed by John Skaller</span>
<span class="slc">//</span>
<span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;</span>
n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);</span>
<span class="slc">// Adapted from C++ solution</span>

<span class="kwa">body</span> <span class="str">&quot;&quot;&quot;</span>
<span class="str">class Toggle {</span>
<span class="str">public:</span>
<span class="str">    Toggle(bool start_state) : state(start_state) { }</span>
<span class="str">    virtual ~Toggle() {  }</span>
<span class="str">    bool value() { return(state); }</span>
<span class="str">    virtual Toggle* activate() {</span>
<span class="str">        state = !state;</span>
<span class="str">        return this;</span>
<span class="str">    }</span>
<span class="str">protected:</span>
<span class="str">    bool state;</span>
<span class="str">};</span>
<span class="str"></span>
<span class="str">class NthToggle : public Toggle {</span>
<span class="str">public:</span>
<span class="str">    NthToggle(bool start_state, int max_counter) :</span>
<span class="str">        Toggle(start_state), count_max(max_counter), counter(0) {</span>
<span class="str">    }</span>
<span class="str">    Toggle *activate() {</span>
<span class="str">        if (++this-&gt;counter &gt;= this-&gt;count_max) {</span>
<span class="str">            state = !state;</span>
<span class="str">            counter = 0;</span>
<span class="str">        }</span>
<span class="str">        return this;</span>
<span class="str">    }</span>
<span class="str">private:</span>
<span class="str">    int count_max;</span>
<span class="str">    int counter;</span>
<span class="str">};</span>
<span class="str">&quot;&quot;&quot;</span><span class="sym">;</span>

pod <span class="kwa">type</span> toggle <span class="sym">=</span>  <span class="str">&quot;class Toggle*&quot;</span><span class="sym">;</span>

<span class="kwa">fun</span> new_toggle<span class="sym">:</span> <span class="kwb">bool</span> <span class="sym">-&gt;</span> toggle <span class="sym">=</span> <span class="str">&quot;new Toggle($1)&quot;</span><span class="sym">;</span>
<span class="kwa">fun</span> new_ntoggle<span class="sym">:</span> <span class="kwb">bool</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> toggle <span class="sym">=</span> <span class="str">&quot;new NthToggle($1,$2)&quot;</span><span class="sym">;</span>
<span class="kwa">proc</span> del<span class="sym">:</span> toggle <span class="sym">=</span> <span class="str">&quot;delete $1;&quot;</span><span class="sym">;</span>
<span class="kwa">fun</span> value<span class="sym">:</span> toggle <span class="sym">-&gt;</span> <span class="kwb">bool</span> <span class="sym">=</span> <span class="str">&quot;$1-&gt;value()&quot;</span><span class="sym">;</span>
<span class="kwa">proc</span> activate<span class="sym">:</span> toggle <span class="sym">=</span> <span class="str">&quot;$1-&gt;activate();&quot;</span><span class="sym">;</span>
<span class="kwa">proc print</span> <span class="sym">(</span>t<span class="sym">:</span> toggle<span class="sym">) {</span> <span class="kwa">print</span> <span class="sym">(</span>value t<span class="sym">); }</span>

<span class="kwa">proc</span> check<span class="sym">(</span>t<span class="sym">:</span> toggle<span class="sym">,</span> k<span class="sym">:</span><span class="kwb">int</span><span class="sym">) {</span>
  <span class="kwa">var</span> tt <span class="sym">=</span> t<span class="sym">;</span>
  <span class="kwa">var</span> i<span class="sym">=</span>k<span class="sym">;</span>
  until i <span class="sym">==</span> <span class="num">0</span> do
    activate tt<span class="sym">;</span>
    <span class="kwa">print</span> tt<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;</span>
    <span class="sym">--</span>i<span class="sym">;</span>
  done<span class="sym">;</span>
  del t<span class="sym">;</span>
<span class="sym">}</span>

check<span class="sym">(</span>new_toggle <span class="kwa">true</span><span class="sym">,</span><span class="num">5</span><span class="sym">);</span>

<span class="sym">{</span>
  <span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;</span>
  until i <span class="sym">==</span> <span class="num">0</span> do
    del <span class="sym">(</span>new_toggle <span class="kwa">true</span><span class="sym">);</span>
    <span class="sym">--</span>i<span class="sym">;</span>
  done<span class="sym">;</span>
  <span class="kwa">endl</span><span class="sym">;</span>
<span class="sym">};</span>

check <span class="sym">(</span>new_ntoggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">),</span> <span class="num">8</span><span class="sym">);</span>

<span class="sym">{</span>
  <span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;</span>
  until i <span class="sym">==</span> <span class="num">0</span> do
    del <span class="sym">(</span>new_ntoggle <span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">));</span>
    <span class="sym">--</span>i<span class="sym">;</span>
  done<span class="sym">;</span>
<span class="sym">};</span>

