<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Rodrigo Queiro
*/</span>

<span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span><span class="dir">#include &lt;assert.h&gt;
</span>
<span class="dir">#include &lt;sys/types.h&gt;
</span><span class="dir">#include &lt;sys/wait.h&gt;
</span>
<span class="dir">#include &lt;sys/socket.h&gt;
</span><span class="dir">#include &lt;netinet/in.h&gt;
</span><span class="dir">#include &lt;arpa/inet.h&gt;
</span><span class="dir">#include &lt;netdb.h&gt;
</span>
<span class="dir">#define M 6400
</span><span class="dir">#define REPLY_SIZE 64
</span><span class="dir">#define REQUEST_SIZE 64
</span><span class="dir">#define MAX_SIZE 64</span> <span class="slc">// max(REPLY_SIZE, REQUEST_SIZE)
</span><span class="dir"></span><span class="dir">#define PORT 11000
</span><span class="dir">#define BUFSIZE 512
</span>
<span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">)
{
</span>    <span class="kwb">int</span> i<span class="sym">;

</span>    <span class="kwb">int</span> n<span class="sym">;
</span>    <span class="kwb">char</span> buf<span class="sym">[</span>BUFSIZE<span class="sym">],</span> text<span class="sym">[</span>MAX_SIZE<span class="sym">];

</span>    pid_t child_pid<span class="sym">;

</span>    <span class="com">/* server variables */</span>

    <span class="kwb">int</span> sockfd<span class="sym">,</span> newfd<span class="sym">;
</span>    <span class="kwb">struct</span> sockaddr_in my_addr<span class="sym">,</span> new_addr<span class="sym">;
</span>    <span class="kwb">int</span> sin_size<span class="sym">;
</span>    <span class="kwb">int</span> yes<span class="sym">=</span><span class="num">1</span><span class="sym">;

</span>    <span class="com">/* client variables */</span>

    <span class="kwb">int</span> theirfd<span class="sym">,</span> nreplies <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> nbytes <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwb">struct</span> hostent <span class="sym">*</span>he<span class="sym">;
</span>    <span class="kwb">struct</span> sockaddr_in their_addr<span class="sym">;

</span>    assert<span class="sym">(</span>argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">);
</span>    n <span class="sym">=</span> atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);

</span>    child_pid <span class="sym">=</span> fork<span class="sym">();

</span>    <span class="kwa">if</span><span class="sym">(</span>child_pid<span class="sym">)
    {
</span>        <span class="com">/* server code */</span>

        <span class="kwa">if</span> <span class="sym">((</span>sockfd <span class="sym">=</span> socket<span class="sym">(</span>AF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> <span class="num">0</span><span class="sym">)) == -</span><span class="num">1</span><span class="sym">) {
</span>            perror<span class="sym">(</span><span class="str">&quot;socket&quot;</span><span class="sym">);
</span>            exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
        }

</span>        <span class="kwa">if</span> <span class="sym">(</span>setsockopt<span class="sym">(</span>sockfd<span class="sym">,</span>SOL_SOCKET<span class="sym">,</span>SO_REUSEADDR<span class="sym">,&amp;</span>yes<span class="sym">,</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)) == -</span><span class="num">1</span><span class="sym">) {
</span>            perror<span class="sym">(</span><span class="str">&quot;setsockopt&quot;</span><span class="sym">);
</span>            exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
        }

</span>        my_addr<span class="sym">.</span>sin_family <span class="sym">=</span> AF_INET<span class="sym">;</span>         <span class="slc">// host byte order
</span>        my_addr<span class="sym">.</span>sin_port <span class="sym">=</span> htons<span class="sym">(</span>PORT<span class="sym">);</span>     <span class="slc">// short, network byte order
</span>        my_addr<span class="sym">.</span>sin_addr<span class="sym">.</span>s_addr <span class="sym">=</span> INADDR_ANY<span class="sym">;</span> <span class="slc">// automatically fill with my IP
</span>        memset<span class="sym">(&amp;(</span>my_addr<span class="sym">.</span>sin_zero<span class="sym">),</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="num">8</span><span class="sym">);</span> <span class="slc">// zero the rest of the struct
</span>
        <span class="kwa">if</span> <span class="sym">(</span>bind<span class="sym">(</span>sockfd<span class="sym">, (</span><span class="kwb">struct</span> sockaddr <span class="sym">*)&amp;</span>my_addr<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">struct</span> sockaddr<span class="sym">))
                == -</span><span class="num">1</span><span class="sym">) {
</span>            perror<span class="sym">(</span><span class="str">&quot;bind&quot;</span><span class="sym">);
</span>            exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
        }

</span>        <span class="kwa">if</span> <span class="sym">(</span>listen<span class="sym">(</span>sockfd<span class="sym">,</span> <span class="num">2</span><span class="sym">) == -</span><span class="num">1</span><span class="sym">) {
</span>            perror<span class="sym">(</span><span class="str">&quot;listen&quot;</span><span class="sym">);
</span>            exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
        }
</span>        sin_size <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">struct</span> sockaddr_in<span class="sym">);
</span>        <span class="kwa">if</span> <span class="sym">((</span>newfd <span class="sym">=</span> accept<span class="sym">(</span>sockfd<span class="sym">, (</span><span class="kwb">struct</span> sockaddr <span class="sym">*)&amp;</span>new_addr<span class="sym">,
                        &amp;</span>sin_size<span class="sym">)) == -</span><span class="num">1</span><span class="sym">) {
</span>            perror<span class="sym">(</span><span class="str">&quot;accept&quot;</span><span class="sym">);
</span>            exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
        }

</span>        <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> REPLY_SIZE<span class="sym">;</span> i<span class="sym">++)
</span>            text<span class="sym">[</span>i<span class="sym">] =</span> <span class="str">' '</span><span class="sym">;

</span>        <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n <span class="sym">*</span> M<span class="sym">;</span> i<span class="sym">++)
        {
</span>            recv<span class="sym">(</span>newfd<span class="sym">,</span> buf<span class="sym">,</span> BUFSIZE<span class="num">-1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>            send<span class="sym">(</span>newfd<span class="sym">,</span> text<span class="sym">,</span> REPLY_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">);
        }

</span>        wait<span class="sym">(</span>NULL<span class="sym">);
    }
</span>    <span class="kwa">else
</span>    <span class="sym">{
</span>        <span class="kwa">if</span> <span class="sym">((</span>he<span class="sym">=</span>gethostbyname<span class="sym">(</span><span class="str">&quot;localhost&quot;</span><span class="sym">)) ==</span> NULL<span class="sym">) {</span>  <span class="slc">// get the host info
</span>            perror<span class="sym">(</span><span class="str">&quot;gethostbyname&quot;</span><span class="sym">);
</span>            exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
        }

</span>        <span class="kwa">if</span> <span class="sym">((</span>theirfd <span class="sym">=</span> socket<span class="sym">(</span>AF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> <span class="num">0</span><span class="sym">)) == -</span><span class="num">1</span><span class="sym">) {
</span>            perror<span class="sym">(</span><span class="str">&quot;socket&quot;</span><span class="sym">);
</span>            exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
        }

</span>        their_addr<span class="sym">.</span>sin_family <span class="sym">=</span> AF_INET<span class="sym">;</span>    <span class="slc">// host byte order
</span>        their_addr<span class="sym">.</span>sin_port <span class="sym">=</span> htons<span class="sym">(</span>PORT<span class="sym">);</span>  <span class="slc">// short, network byte order
</span>        their_addr<span class="sym">.</span>sin_addr <span class="sym">= *((</span><span class="kwb">struct</span> in_addr <span class="sym">*)</span>he<span class="sym">-&gt;</span>h_addr<span class="sym">);
</span>        memset<span class="sym">(&amp;(</span>their_addr<span class="sym">.</span>sin_zero<span class="sym">),</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="num">8</span><span class="sym">);</span>  <span class="slc">// zero the rest of the struct
</span>
        <span class="kwa">while</span> <span class="sym">(</span>connect<span class="sym">(</span>theirfd<span class="sym">, (</span><span class="kwb">struct</span> sockaddr <span class="sym">*)&amp;</span>their_addr<span class="sym">,
</span>                    <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">struct</span> sockaddr<span class="sym">)) == -</span><span class="num">1</span><span class="sym">);

</span>        <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> REQUEST_SIZE<span class="sym">;</span> i<span class="sym">++)
</span>            text<span class="sym">[</span>i<span class="sym">] =</span> <span class="str">' '</span><span class="sym">;

</span>        <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n <span class="sym">*</span> M<span class="sym">;</span> i<span class="sym">++)
        {
</span>            send<span class="sym">(</span>theirfd<span class="sym">,</span> text<span class="sym">,</span> REQUEST_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>            nbytes <span class="sym">+=</span> recv<span class="sym">(</span>theirfd<span class="sym">,</span> buf<span class="sym">,</span> BUFSIZE<span class="num">-1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>            nreplies<span class="sym">++;
        }

</span>        printf<span class="sym">(</span><span class="str">&quot;replies: %d</span><span class="esc">\t</span><span class="str">bytes: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> nreplies<span class="sym">,</span> nbytes<span class="sym">);
    }

</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span>
