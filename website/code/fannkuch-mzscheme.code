<span class="slc">;; fannkuch benchmark for The Computer Language Shootout</span>
<span class="slc">;; Written by Dima Dorfman, 2004</span>
<span class="slc">;; Slightly improved by Sven Hartrumpf, 2005-2006</span>
<span class="slc">;;</span>
<span class="slc">;; Ever-so-slightly tweaked for MzScheme by Brent Fulgham</span>

<span class="sym">(</span>define vector<span class="sym">-</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>pred v<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(</span>add1 i<span class="sym">))</span>
       <span class="sym">(</span>v<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> v<span class="sym">)))</span>
      <span class="sym">((&gt;=</span> i v<span class="sym">-</span><span class="kwa">length</span><span class="sym">))</span>
    <span class="sym">(</span>pred <span class="sym">(</span>vector<span class="sym">-</span>ref v i<span class="sym">)))))</span>

<span class="sym">(</span>define <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>slice<span class="sym">!</span> v i j<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">((</span>i i <span class="sym">(</span>add1 i<span class="sym">))</span>
       <span class="sym">(</span>j <span class="sym">(</span>sub1 j<span class="sym">) (</span>sub1 j<span class="sym">)))</span> <span class="slc">; exclude position j</span>
      <span class="sym">((&lt;=</span> j i<span class="sym">))</span>
    <span class="sym">(</span>vector<span class="sym">-</span>swap<span class="sym">!</span> v i j<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>vector<span class="sym">-</span>swap<span class="sym">!</span> v i j<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>t <span class="sym">(</span>vector<span class="sym">-</span>ref v i<span class="sym">)))</span>
    <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> v i <span class="sym">(</span>vector<span class="sym">-</span>ref v j<span class="sym">))</span>
    <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> v j t<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>count<span class="sym">-</span>flips pi<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">((</span>rho <span class="sym">(</span>vector<span class="sym">-</span>copy pi<span class="sym">))</span>
       <span class="sym">(</span>i <span class="num">0</span> <span class="sym">(</span>add1 i<span class="sym">)))</span>
      <span class="sym">((= (</span>vector<span class="sym">-</span>ref rho <span class="num">0</span><span class="sym">)</span> <span class="num">0</span><span class="sym">)</span> i<span class="sym">)</span>
    <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>slice<span class="sym">!</span> rho <span class="num">0</span> <span class="sym">(</span>add1 <span class="sym">(</span>vector<span class="sym">-</span>ref rho <span class="num">0</span><span class="sym">)))))</span>

<span class="sym">(</span>define <span class="sym">(</span>vector<span class="sym">-</span>copy source<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">((</span>vec <span class="sym">(</span>make<span class="sym">-</span>vector <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> source<span class="sym">)))</span>
       <span class="sym">(</span>i <span class="num">0</span> <span class="sym">(</span>add1 i<span class="sym">)))</span>
      <span class="sym">((=</span> i <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> source<span class="sym">))</span> vec<span class="sym">)</span>
    <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> vec i <span class="sym">(</span>vector<span class="sym">-</span>ref source i<span class="sym">))))</span>

<span class="slc">;(define (vector-copy v)</span>
<span class="slc">;  (vector-resize v (vector-length v)))</span>

<span class="sym">(</span>define <span class="sym">(</span>fannkuch n<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>pi <span class="sym">(</span>do <span class="sym">((</span>pi <span class="sym">(</span>make<span class="sym">-</span>vector n<span class="sym">))</span>
                 <span class="sym">(</span>i <span class="num">0</span> <span class="sym">(</span>add1 i<span class="sym">)))</span>
              <span class="sym">((=</span> i n<span class="sym">)</span> pi<span class="sym">)</span>
              <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> pi i i<span class="sym">)))</span>
        <span class="sym">(</span>r n<span class="sym">)</span>
        <span class="sym">(</span>count <span class="sym">(</span>make<span class="sym">-</span>vector n<span class="sym">)))</span>
    <span class="sym">(</span>let loop <span class="sym">((</span>flips <span class="num">0</span><span class="sym">)</span>
               <span class="sym">(</span>perms <span class="num">0</span><span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> perms <span class="num">30</span><span class="sym">)</span>
             <span class="sym">(</span>vector<span class="sym">-</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x<span class="sym">)</span>
                                <span class="sym">(</span>display <span class="sym">(</span>add1 x<span class="sym">)))</span>
                              pi<span class="sym">)</span>
             <span class="sym">(</span>newline<span class="sym">)))</span>
      <span class="sym">(</span>do <span class="sym">()</span>
        <span class="sym">((=</span> r <span class="num">1</span><span class="sym">))</span>
        <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> count <span class="sym">(</span>sub1 r<span class="sym">)</span> r<span class="sym">)</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> r <span class="sym">(</span>sub1 r<span class="sym">)))</span>
      <span class="sym">(</span>let <span class="sym">((</span>flips2 <span class="sym">(</span><span class="kwa">max</span> <span class="sym">(</span>count<span class="sym">-</span>flips pi<span class="sym">)</span> flips<span class="sym">)))</span>
        <span class="sym">(</span>let <span class="sym">((</span>result
                <span class="sym">(</span>let loop2 <span class="sym">()</span>
                  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> r n<span class="sym">)</span>
                    flips2
                    <span class="sym">(</span>let <span class="sym">((</span>perm0 <span class="sym">(</span>vector<span class="sym">-</span>ref pi <span class="num">0</span><span class="sym">)))</span>
                      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span><span class="sym">))</span>
                        <span class="sym">((&gt;=</span> i r<span class="sym">))</span>
                        <span class="sym">(</span>let <span class="sym">((</span>j <span class="sym">(</span>add1 i<span class="sym">)))</span>
                          <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> pi i <span class="sym">(</span>vector<span class="sym">-</span>ref pi j<span class="sym">))</span>
                          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> i j<span class="sym">)))</span>
                      <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> pi r perm0<span class="sym">)</span>
                      <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> count r <span class="sym">(</span>sub1 <span class="sym">(</span>vector<span class="sym">-</span>ref count r<span class="sym">)))</span>
                      <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;= (</span>vector<span class="sym">-</span>ref count r<span class="sym">)</span> <span class="num">0</span><span class="sym">)</span>
                             <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> r <span class="sym">(</span>add1 r<span class="sym">))</span>
                             <span class="sym">(</span>loop2<span class="sym">))</span>
                            <span class="sym">(</span>else
                              #f<span class="sym">)))))))</span>
          <span class="sym">(</span><span class="kwa">or</span> result
              <span class="sym">(</span>loop flips2 <span class="sym">(</span>add1 perms<span class="sym">)))</span>
          <span class="sym">)))))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt; (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">)</span>
    <span class="sym">(</span>begin <span class="sym">(</span>display <span class="str">&quot;An argument is required&quot;</span><span class="sym">) (</span>newline<span class="sym">)</span> <span class="num">2</span><span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">))))</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>integer? n<span class="sym">))</span>
        <span class="sym">(</span>begin <span class="sym">(</span>display <span class="str">&quot;An integer is required&quot;</span><span class="sym">) (</span>newline<span class="sym">)</span> <span class="num">2</span><span class="sym">)</span>
        <span class="sym">(</span>printf <span class="str">&quot;Pfannkuchen(~S) = ~S~%&quot;</span> n <span class="sym">(</span>fannkuch n<span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt; (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">1</span><span class="sym">)</span>
      <span class="sym">(</span>begin <span class="sym">(</span>display <span class="str">&quot;An argument is required&quot;</span><span class="sym">) (</span>newline<span class="sym">)</span> <span class="num">2</span><span class="sym">)</span>
      <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">))))</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> n<span class="sym">)</span>
	    <span class="sym">(</span>begin <span class="sym">(</span>display <span class="str">&quot;An integer is required&quot;</span><span class="sym">) (</span>newline<span class="sym">)</span> <span class="num">2</span><span class="sym">)</span>
	    <span class="sym">(</span>let <span class="sym">((</span>f <span class="sym">(</span>fannkuch n<span class="sym">)))</span>
	      <span class="sym">(</span>begin
		<span class="sym">(</span>display <span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">)</span>
		<span class="sym">(</span>display n<span class="sym">)</span>
		<span class="sym">(</span>display <span class="str">&quot;) = &quot;</span><span class="sym">)</span>
		<span class="sym">(</span>display f<span class="sym">)</span>
		<span class="sym">(</span>newline<span class="sym">))</span>
	      <span class="num">0</span><span class="sym">)))))</span>

<span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
