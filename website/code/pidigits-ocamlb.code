<span class="com">(*
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * contributed by Christophe TROESTLER
 *)</span>


<span class="kwa">open</span> Printf
<span class="kwa">open</span> Big_int

<span class="kwa">let</span> <span class="sym">( !</span>$ <span class="sym">) =</span> Big_int.big_int_of_int
<span class="kwa">let</span> <span class="sym">( +</span>$ <span class="sym">) =</span> Big_int.add_big_int
<span class="kwa">let</span> <span class="sym">( *</span>$ <span class="sym">) =</span> Big_int.mult_big_int
<span class="kwa">let</span> <span class="sym">( =</span>$ <span class="sym">) =</span> Big_int.eq_big_int
<span class="kwa">let</span> zero <span class="sym">=</span> Big_int.zero_big_int
<span class="kwa">and</span> one  <span class="sym">=</span> Big_int.unit_big_int
<span class="kwa">and</span> three <span class="sym">= !</span>$ <span class="num">3
</span><span class="kwa">and</span> four <span class="sym">= !</span>$ <span class="num">4
</span><span class="kwa">and</span> ten  <span class="sym">= !</span>$ <span class="num">10
</span><span class="kwa">and</span> neg_ten <span class="sym">= !</span>$<span class="sym">(-</span><span class="num">10</span><span class="sym">)

</span><span class="com">(* Linear Fractional (aka Möbius) Transformations *)</span>
<span class="kwa">module</span> LFT <span class="sym">=
</span><span class="kwa">struct
  let</span> floor_ev <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">)</span> x <span class="sym">=</span> div_big_int <span class="sym">(</span>q <span class="sym">*</span>$ x <span class="sym">+</span>$ r<span class="sym">) (</span>s <span class="sym">*</span>$ x <span class="sym">+</span>$ t<span class="sym">)

</span>  <span class="kwa">let</span> <span class="kwb">unit</span> <span class="sym">= (</span>one<span class="sym">,</span> zero<span class="sym">,</span> zero<span class="sym">,</span> one<span class="sym">)

</span>  <span class="kwa">let</span> comp <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">) (</span>q<span class="str">',r'</span><span class="sym">,</span>s<span class="str">',t'</span><span class="sym">) =
    (</span>q <span class="sym">*</span>$ q<span class="str">' +$ r *$ s'</span><span class="sym">,</span>  q <span class="sym">*</span>$ r<span class="str">' +$ r *$ t'</span><span class="sym">,
</span>     s <span class="sym">*</span>$ q<span class="str">' +$ t *$ s'</span><span class="sym">,</span>  s <span class="sym">*</span>$ r<span class="str">' +$ t *$ t'</span><span class="sym">)
</span><span class="kwa">end

let</span> next z <span class="sym">=</span> LFT.floor_ev z three
<span class="kwa">and</span> safe z n <span class="sym">= (</span>n <span class="sym">=</span>$ LFT.floor_ev z four<span class="sym">)
</span><span class="kwa">and</span> prod z n <span class="sym">=</span> LFT.comp <span class="sym">(</span>ten<span class="sym">,</span> neg_ten <span class="sym">*</span>$ n<span class="sym">,</span> zero<span class="sym">,</span> one<span class="sym">)</span> z
<span class="kwa">and</span> cons z k <span class="sym">=
</span>  <span class="kwa">let</span> den <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span> <span class="kwa">in</span> LFT.comp z <span class="sym">(!</span>$ k<span class="sym">, !</span>$<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>den<span class="sym">),</span> zero<span class="sym">, !</span>$ den<span class="sym">)

</span><span class="kwa">let rec</span> digit k z n row col <span class="sym">=
</span>  <span class="kwa">if</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then
    let</span> y <span class="sym">=</span> next z <span class="kwa">in
    if</span> safe z y <span class="kwa">then
      if</span> col <span class="sym">=</span> <span class="num">10</span> <span class="kwa">then</span> <span class="sym">(
</span>	<span class="kwa">let</span> row <span class="sym">=</span> row <span class="sym">+</span> <span class="num">10</span> <span class="kwa">in
</span>	printf <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:%i</span><span class="esc">\n</span><span class="str">%s&quot;</span> row <span class="sym">(</span>string_of_big_int y<span class="sym">);
</span>	digit k <span class="sym">(</span>prod z y<span class="sym">) (</span>n<span class="num">-1</span><span class="sym">)</span> row <span class="num">1
</span>      <span class="sym">)
</span>      <span class="kwa">else</span> <span class="sym">(
</span>	print_string<span class="sym">(</span>string_of_big_int y<span class="sym">);
</span>	digit k <span class="sym">(</span>prod z y<span class="sym">) (</span>n<span class="num">-1</span><span class="sym">)</span> row <span class="sym">(</span>col<span class="sym">+</span><span class="num">1</span><span class="sym">)
      )
</span>    <span class="kwa">else</span> digit <span class="sym">(</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>cons z k<span class="sym">)</span> n row col
  <span class="kwa">else
</span>    printf <span class="str">&quot;%*s</span><span class="esc">\t</span><span class="str">:%i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span><span class="num">10</span> <span class="sym">-</span> col<span class="sym">)</span> <span class="str">&quot;&quot;</span> <span class="sym">(</span>row <span class="sym">+</span> col<span class="sym">)

</span><span class="kwa">let</span> digits n <span class="sym">=</span> digit <span class="num">1</span> LFT.<span class="kwb">unit</span> n <span class="num">0 0

</span><span class="kwa">let</span> <span class="sym">() =
</span>  digits<span class="sym">(</span>int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">))</span>
