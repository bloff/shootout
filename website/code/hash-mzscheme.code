#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r

<span class="sym">(</span>define <span class="sym">(</span>sequence start stop<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> start stop<span class="sym">)</span>
      <span class="str">'()</span>
<span class="str">      (cons start (sequence (+ start 1) stop))))</span>
<span class="str"></span>
<span class="str">(define (main)</span>
<span class="str">  (let* ([n (string-&gt;number (vector-ref argv 0))]</span>
<span class="str">	 [hash (make-hash-table '</span><span class="kwa">equal</span><span class="sym">)]</span>
	 <span class="sym">[</span>accum <span class="num">0</span><span class="sym">]</span>
	 <span class="sym">[</span>seq <span class="sym">(</span>sequence <span class="num">1</span> n<span class="sym">)]</span>
	 <span class="sym">[</span>revseq <span class="sym">(</span><span class="kwa">reverse</span> seq<span class="sym">)]</span>
	 <span class="sym">[</span>false <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span> #f<span class="sym">)])</span>
    <span class="sym">(</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>item<span class="sym">)</span>
		<span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>put<span class="sym">!</span> hash <span class="sym">(</span>number<span class="sym">-&gt;</span>string item <span class="num">16</span><span class="sym">)</span> item<span class="sym">))</span>
	      seq<span class="sym">)</span>
    <span class="sym">(</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>item<span class="sym">)</span>
		<span class="sym">(</span>when <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>get hash <span class="sym">(</span>number<span class="sym">-&gt;</span>string item<span class="sym">)</span> false<span class="sym">)</span>
		      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> accum <span class="sym">(+</span> accum <span class="num">1</span><span class="sym">))))</span>
	      revseq<span class="sym">)</span>
    <span class="sym">(</span>printf <span class="str">&quot;~s~n&quot;</span> accum<span class="sym">)))</span>

<span class="sym">(</span>main<span class="sym">)</span>
