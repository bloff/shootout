#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu

<span class="sym">(</span>module hash mzscheme
  <span class="sym">(</span>define <span class="sym">(</span>main argv<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ([</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref argv <span class="num">0</span><span class="sym">))]</span>
	   <span class="sym">[</span>hash <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="str">'equal)]</span>
<span class="str">	   [accum 0]</span>
<span class="str">	   [false (lambda () #f)])</span>
<span class="str">      (let loop ([i 1])</span>
<span class="str">	(unless (&gt; i n)</span>
<span class="str">	  (hash-table-put! hash (number-&gt;string i 16) i)</span>
<span class="str">	  (loop (add1 i))))</span>
<span class="str">      (let loop ([i n])</span>
<span class="str">	(unless (zero? i)</span>
<span class="str">	  (when (hash-table-get hash (number-&gt;string i) false)</span>
<span class="str">	    (set! accum (+ accum 1)))</span>
<span class="str">	  (loop (sub1 i))))</span>
<span class="str">      (printf &quot;~s~n&quot; accum)))</span>
<span class="str"></span>
<span class="str">  (main (current-command-line-arguments)))</span>
