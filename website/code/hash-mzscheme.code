<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="line">    2 </span>
<span class="line">    3 </span><span class="sym">(</span>define <span class="sym">(</span>sequence start stop<span class="sym">)
</span><span class="line">    4 </span><span class="sym">  (</span><span class="kwa">if</span> <span class="sym">(&gt;</span> start stop<span class="sym">)
</span><span class="line">    5 </span><span class="sym"></span>      <span class="str">'()
</span><span class="line">    6 </span><span class="str">      (cons start (sequence (+ start 1) stop))))
</span><span class="line">    7 </span><span class="str">
</span><span class="line">    8 </span><span class="str">(define (main)
</span><span class="line">    9 </span><span class="str">  (let* ([n (string-&gt;number (vector-ref argv 0))]
</span><span class="line">   10 </span><span class="str">         [hash (make-hash-table '</span><span class="kwa">equal</span><span class="sym">)]
</span><span class="line">   11 </span><span class="sym">         [</span>accum <span class="num">0</span><span class="sym">]
</span><span class="line">   12 </span><span class="sym">         [</span>seq <span class="sym">(</span>sequence <span class="num">1</span> n<span class="sym">)]
</span><span class="line">   13 </span><span class="sym">         [</span>revseq <span class="sym">(</span><span class="kwa">reverse</span> seq<span class="sym">)]
</span><span class="line">   14 </span><span class="sym">         [</span>false <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span> #f<span class="sym">)])
</span><span class="line">   15 </span><span class="sym">    (</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>item<span class="sym">)
</span><span class="line">   16 </span><span class="sym">                (</span>hash<span class="sym">-</span>table<span class="sym">-</span>put<span class="sym">!</span> hash <span class="sym">(</span>number<span class="sym">-&gt;</span>string item <span class="num">16</span><span class="sym">)</span> item<span class="sym">))
</span><span class="line">   17 </span><span class="sym"></span>              seq<span class="sym">)
</span><span class="line">   18 </span><span class="sym">    (</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>item<span class="sym">)
</span><span class="line">   19 </span><span class="sym">                (</span>when <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>get hash <span class="sym">(</span>number<span class="sym">-&gt;</span>string item<span class="sym">)</span> false<span class="sym">)
</span><span class="line">   20 </span><span class="sym">                      (</span><span class="kwa">set</span><span class="sym">!</span> accum <span class="sym">(+</span> accum <span class="num">1</span><span class="sym">))))
</span><span class="line">   21 </span><span class="sym"></span>              revseq<span class="sym">)
</span><span class="line">   22 </span><span class="sym">    (</span>printf <span class="str">&quot;~s~n&quot;</span> accum<span class="sym">)))
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym">(</span>main<span class="sym">)</span>
