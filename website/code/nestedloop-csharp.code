<span class="slc">// $Id: nestedloop-csharp.code,v 1.8 2005-05-16 08:22:40 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">// Some cleanups by Brent Fulgham
</span>
<span class="kwa">using</span> System<span class="sym">;

</span><span class="kwc">class</span> nestedloop
<span class="sym">{
</span>    <span class="kwc">public</span> <span class="kwb">static int</span> Main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">)
    {
</span>        <span class="kwb">int</span> a<span class="sym">,</span> b<span class="sym">,</span> c<span class="sym">,</span> d<span class="sym">,</span> e<span class="sym">,</span> f<span class="sym">,</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">;
</span>        <span class="kwb">int</span> n <span class="sym">=</span> System<span class="sym">.</span>Convert<span class="sym">.</span>ToInt32<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>        <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;

</span>        <span class="kwa">for</span> <span class="sym">(</span>a<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> a<span class="sym">&lt;</span>n<span class="sym">;</span> a<span class="sym">++) {
</span>	    <span class="kwa">for</span> <span class="sym">(</span>b<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> b<span class="sym">&lt;</span>n<span class="sym">;</span> b<span class="sym">++) {
</span>	        <span class="kwa">for</span> <span class="sym">(</span>c<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> c<span class="sym">&lt;</span>n<span class="sym">;</span> c<span class="sym">++) {
</span>		    <span class="kwa">for</span> <span class="sym">(</span>d<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> d<span class="sym">&lt;</span>n<span class="sym">;</span> d<span class="sym">++) {
</span>		        <span class="kwa">for</span> <span class="sym">(</span>e<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> e<span class="sym">&lt;</span>n<span class="sym">;</span> e<span class="sym">++) {
</span>			    <span class="kwa">for</span> <span class="sym">(</span>f<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> f<span class="sym">&lt;</span>n<span class="sym">;</span> f<span class="sym">++) {
</span>			        x<span class="sym">++;
			    }
			}
		    }
		}
	    }
	}

</span>        Console<span class="sym">.</span>WriteLine<span class="sym">(</span>x<span class="sym">);
</span>	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;
    }
}</span>
