<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;

</span><span class="kwc">class</span> SpectralNorm
<span class="sym">{
</span>   <span class="kwc">public</span> <span class="kwb">static void</span> Main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">) {
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">100</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0:f9}&quot;</span><span class="sym">,</span> <span class="kwa">new</span> SpectralNorm<span class="sym">().</span>Approximate<span class="sym">(</span>n<span class="sym">));
   }

</span>   <span class="kwc">public virtual</span> <span class="kwb">double</span> Approximate<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>      <span class="slc">// create unit vector
</span>      <span class="kwb">double</span><span class="sym">[]</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> u<span class="sym">[</span>i<span class="sym">] =</span>  <span class="num">1</span><span class="sym">;

</span>      <span class="slc">// 20 steps of the power method
</span>      <span class="kwb">double</span><span class="sym">[]</span> v <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> v<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;

</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span> i<span class="sym">++) {
</span>         MultiplyAtAv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">);
</span>         MultiplyAtAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);
      }

</span>      <span class="slc">// B=AtA         A multiplied by A transposed
</span>      <span class="slc">// v.Bv /(v.v)   eigenvalue of v
</span>      <span class="kwb">double</span> vBv <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> vv <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>         vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
</span>         vv  <span class="sym">+=</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
      }

</span>      <span class="kwa">return</span> Math<span class="sym">.</span>Sqrt<span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">);
   }


</span>   <span class="com">/* return element i,j of infinite matrix A */</span>
   <span class="kwc">public virtual</span> <span class="kwb">double</span> A<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">){
</span>      <span class="kwa">return</span> <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">) /</span><span class="num">2</span> <span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);
   }

</span>   <span class="com">/* multiply vector v by matrix A */</span>
   <span class="kwc">public virtual</span> <span class="kwb">void</span> MultiplyAv<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> Av<span class="sym">){
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){
</span>         Av<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">++)</span> Av<span class="sym">[</span>i<span class="sym">] +=</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">];
      }
   }

</span>   <span class="com">/* multiply vector v by matrix A transposed */</span>
   <span class="kwc">public virtual</span> <span class="kwb">void</span> MultiplyAtv<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> Atv<span class="sym">){
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>n<span class="sym">;</span>i<span class="sym">++){
</span>         Atv<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">++)</span> Atv<span class="sym">[</span>i<span class="sym">] +=</span> A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">];
      }
   }

</span>   <span class="com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
   <span class="kwc">public virtual</span> <span class="kwb">void</span> MultiplyAtAv<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> AtAv<span class="sym">){
</span>      <span class="kwb">double</span><span class="sym">[]</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];
</span>      MultiplyAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);
</span>      MultiplyAtv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>AtAv<span class="sym">);
   }
}</span>
