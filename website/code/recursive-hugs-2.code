<span class="slc">--</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Haskell Wiki page for Shootout entries - http://haskell.org/hawiki/ShootoutEntry</span>
<span class="slc">-- Contributed by Don Stewart</span>
<span class="slc">--</span>
<span class="slc">-- Compilation:</span>
<span class="slc">--    ghc -o d D.hs -O2 -fexcess-precision -optc-O3 -optc-ffast-math -fglasgow-exts</span>
<span class="slc">-- -fexcess-precision is important. ack and fibr have been carefully unboxed.</span>
<span class="slc">--</span>

<span class="kwa">import</span> System<span class="sym">;</span> <span class="kwa">import</span> Text.Printf<span class="sym">;</span> <span class="kwa">import</span> GHC.Exts

main <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">(</span>n&#64;<span class="sym">(</span>I# i<span class="sym">),</span>a&#64;<span class="sym">(</span>D# d<span class="sym">)) &lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head <span class="sym">&gt;&gt;=</span> \n <span class="sym">-&gt;</span> return <span class="sym">(</span>n<span class="sym">,</span><span class="num">27</span><span class="sym">+</span>fromIntegral n<span class="sym">)</span>
          <span class="kwa">let</span> <span class="sym">(</span>m3<span class="sym">,</span>m2<span class="sym">,</span>m<span class="sym">) = (</span>m<span class="sym">*</span><span class="num">3</span><span class="sym">,</span> m<span class="sym">*</span><span class="num">2</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
          putStrLn $ <span class="str">&quot;Ack(3,&quot;</span> <span class="sym">++</span> show n <span class="sym">++</span> <span class="str">&quot;): &quot;</span> <span class="sym">++</span> show <span class="sym">(</span>I# <span class="sym">(</span>ack <span class="num">3</span># i<span class="sym">))</span>
          printf <span class="str">&quot;Fib(%f): %f\n&quot;</span> a <span class="sym">(</span>D# <span class="sym">(</span>fibr d<span class="sym">))</span>
          putStrLn $ <span class="str">&quot;Tak(&quot;</span><span class="sym">++</span>show m3<span class="sym">++</span><span class="str">&quot;,&quot;</span><span class="sym">++</span>show m2<span class="sym">++</span><span class="str">&quot;,&quot;</span><span class="sym">++</span>show m<span class="sym">++</span><span class="str">&quot;): &quot;</span><span class="sym">++</span>
                        show <span class="sym">(</span>tak m3 m2 m<span class="sym">)</span>
          putStrLn $ <span class="str">&quot;Fib(3): &quot;</span>           <span class="sym">++</span> show <span class="sym">(</span>fib <span class="num">3</span> <span class="sym">::</span> <span class="kwb">Int</span><span class="sym">)</span>
          putStrLn $ <span class="str">&quot;Tak(3.0,2.0,1.0): &quot;</span> <span class="sym">++</span> show <span class="sym">(</span>tak <span class="num">3 2 1</span> <span class="sym">::</span> <span class="kwb">Double</span><span class="sym">)</span>

ack x y <span class="sym">=</span> if x <span class="sym">==</span># <span class="num">0</span># <span class="kwa">then</span> y <span class="sym">+</span># <span class="num">1</span># <span class="kwa">else</span> ack <span class="sym">(</span>x <span class="sym">-</span># <span class="num">1</span>#<span class="sym">) (</span>if y <span class="sym">==</span># <span class="num">0</span># <span class="kwa">then</span> <span class="num">1</span># <span class="kwa">else</span> ack x <span class="sym">(</span>y <span class="sym">-</span># <span class="num">1</span>#<span class="sym">))</span>

fib  n <span class="sym">=</span> if n <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">then</span> <span class="num">1</span> <span class="kwa">else</span> fib <span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">) +</span> fib <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
fibr n <span class="sym">=</span> if n <span class="sym">&lt;</span>## <span class="num">2.0</span>## <span class="kwa">then</span> <span class="num">1.0</span>## <span class="kwa">else</span> fibr <span class="sym">(</span>n <span class="sym">-</span>## <span class="num">2.0</span>##<span class="sym">) +</span>## <span class="sym">(</span>fibr <span class="sym">(</span>n<span class="sym">-</span>## <span class="num">1.0</span>##<span class="sym">))</span>

tak x y z <span class="sym">=</span> if y <span class="sym">&gt;=</span> x <span class="kwa">then</span> z <span class="kwa">else</span> tak <span class="sym">(</span>tak <span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> y z<span class="sym">) (</span>tak <span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> z x<span class="sym">) (</span>tak <span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> x y<span class="sym">)</span>

