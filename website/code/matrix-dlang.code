<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   http://www.bagley.org/~doug/shootout/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release matrix.d</span>
<span class="com">*/</span>

import std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwb">const int</span> SIZE <span class="sym">=</span> <span class="num">30</span><span class="sym">;</span>

<span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwb">int</span><span class="sym">[][]</span> m1 <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span>SIZE<span class="sym">);</span>
    <span class="kwb">int</span><span class="sym">[][]</span> m2 <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span>SIZE<span class="sym">);</span>
    <span class="kwb">int</span><span class="sym">[][]</span> mm <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span>SIZE<span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
        mmult<span class="sym">(</span>m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);</span>
    <span class="sym">}</span>

    writefln<span class="sym">(</span><span class="str">&quot;%d %d %d %d&quot;</span><span class="sym">,</span>mm<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">],</span>mm<span class="sym">[</span><span class="num">2</span><span class="sym">][</span><span class="num">3</span><span class="sym">],</span>mm<span class="sym">[</span><span class="num">3</span><span class="sym">][</span><span class="num">2</span><span class="sym">],</span>mm<span class="sym">[</span><span class="num">4</span><span class="sym">][</span><span class="num">4</span><span class="sym">]);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span><span class="sym">[][]</span> mkmatrix<span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span><span class="sym">[][]</span> m<span class="sym">;</span>
    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>

    m<span class="sym">.</span>length <span class="sym">=</span> rows<span class="sym">;</span>
    foreach<span class="sym">(</span>inout <span class="kwb">int</span><span class="sym">[]</span> mi<span class="sym">;</span> m<span class="sym">)</span>
    <span class="sym">{</span>
        mi<span class="sym">.</span>length <span class="sym">=</span> cols<span class="sym">;</span>
        foreach<span class="sym">(</span>inout <span class="kwb">int</span> mij<span class="sym">;</span> mi<span class="sym">)</span>
        <span class="sym">{</span>
            mij <span class="sym">=</span> count<span class="sym">++;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">return</span><span class="sym">(</span>m<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> mmult<span class="sym">(</span><span class="kwb">int</span><span class="sym">[][]</span> m1<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[][]</span> m2<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[][]</span> m3<span class="sym">)</span>
<span class="sym">{</span>
    foreach<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[]</span> m1i<span class="sym">;</span> m1<span class="sym">)</span>
    <span class="sym">{</span>
        foreach<span class="sym">(</span><span class="kwb">int</span> j<span class="sym">,</span> inout <span class="kwb">int</span> m3ij<span class="sym">;</span> m3<span class="sym">[</span>i<span class="sym">])</span>
        <span class="sym">{</span>
            <span class="kwb">int</span> val<span class="sym">;</span>
            foreach<span class="sym">(</span><span class="kwb">int</span> k<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[]</span> m2k<span class="sym">;</span> m2<span class="sym">)</span>
            <span class="sym">{</span>
                val <span class="sym">+=</span> m1i<span class="sym">[</span>k<span class="sym">] *</span> m2k<span class="sym">[</span>j<span class="sym">];</span>
            <span class="sym">}</span>
            m3ij <span class="sym">=</span> val<span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
