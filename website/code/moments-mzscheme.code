#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu
<span class="slc">;; Moments.scm</span>

<span class="sym">(</span>module moments mzscheme
  <span class="sym">(</span>require <span class="sym">(</span>only <span class="sym">(</span>lib <span class="str">&quot;list.ss&quot;</span><span class="sym">)</span> sort<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>roundto digits n<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ([</span>e <span class="sym">(</span><span class="kwa">expt</span> <span class="num">10</span> digits<span class="sym">)]</span>
	   <span class="sym">[</span>num <span class="sym">(</span>round <span class="sym">(</span><span class="kwa">abs</span> <span class="sym">(*</span> e <span class="sym">(</span>inexact<span class="sym">-&gt;</span>exact n<span class="sym">))))])</span>
      <span class="sym">(</span>format <span class="str">&quot;~a~a.~a&quot;</span>
	      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>negative? n<span class="sym">)</span> <span class="str">&quot;-&quot;</span> <span class="str">&quot;&quot;</span><span class="sym">)</span>
	      <span class="sym">(</span>quotient num e<span class="sym">)</span>
	      <span class="sym">(</span>substring <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> <span class="sym">(</span>number<span class="sym">-&gt;</span>string <span class="sym">(</span>remainder num e<span class="sym">))</span>
					<span class="sym">(</span>make<span class="sym">-</span>string digits #\0<span class="sym">))</span>
			 <span class="num">0</span> digits<span class="sym">))))</span>

  <span class="sym">(</span>let<span class="sym">* ((</span>sum <span class="num">0.0</span><span class="sym">)</span>
	 <span class="sym">(</span>numlist <span class="sym">(</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)) (</span>numlist <span class="str">'()))</span>
<span class="str">		    (cond ((eof-object? line) numlist)</span>
<span class="str">			  (else</span>
<span class="str">			   (let ((num (string-&gt;number line)))</span>
<span class="str">			     (set! sum (+ num sum))</span>
<span class="str">			     (loop (read-line) (cons num numlist))))))))</span>
<span class="str">    (let ((n (length numlist)))</span>
<span class="str">      (let ((mean (/ sum n))</span>
<span class="str">	    (average_deviation 0.0)</span>
<span class="str">	    (standard_deviation 0.0)</span>
<span class="str">	    (variance 0.0)</span>
<span class="str">	    (skew 0.0)</span>
<span class="str">	    (kurtosis 0.0)</span>
<span class="str">	    (median 0.0)</span>
<span class="str">	    (deviation 0.0))</span>
<span class="str">	(let loop ((nums numlist))</span>
<span class="str">	  (if (not (null? nums))</span>
<span class="str">	      (begin</span>
<span class="str">		(set! deviation (- (car nums) mean))</span>
<span class="str">		(set! average_deviation (+ average_deviation (abs deviation)))</span>
<span class="str">		(set! variance (+ variance (expt deviation 2.0)))</span>
<span class="str">		(set! skew (+ skew (expt deviation 3.0)))</span>
<span class="str">		(set! kurtosis (+ kurtosis (expt deviation 4)))</span>
<span class="str">		(loop (cdr nums)))))</span>
<span class="str"></span>
<span class="str">	(set! average_deviation (/ average_deviation (exact-&gt;inexact n)))</span>
<span class="str">	(set! variance (/ variance (- n 1)))</span>
<span class="str">	(set! standard_deviation (sqrt variance))</span>
<span class="str"></span>
<span class="str">	(cond ((&gt; variance 0.0)</span>
<span class="str">	       (set! skew (/ skew (* n variance standard_deviation)))</span>
<span class="str">	       (set! kurtosis (- (/ kurtosis (* n variance variance))</span>
<span class="str">				 3.0))))</span>
<span class="str"></span>
<span class="str">	(set! numlist (sort numlist (lambda (x y) (&lt; x y))))</span>
<span class="str"></span>
<span class="str">	(let ((mid (quotient n 2)))</span>
<span class="str">	  (if (zero? (modulo n 2))</span>
<span class="str">	      (set! median (/ (+ (car (list-tail numlist mid))</span>
<span class="str">				 (car (list-tail numlist (- mid 1))))</span>
<span class="str">			      2.0))</span>
<span class="str">	      (set! median (car (list-tail numlist mid)))))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">	(set! standard_deviation (/ (round (* standard_deviation 1000000))</span>
<span class="str">				    1000000))</span>
<span class="str"></span>
<span class="str">	(for-each display</span>
<span class="str">		  `(&quot;n:                  &quot; ,n                   &quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="str">		    &quot;median:             &quot; ,(roundto 6 median)  &quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="str">		    &quot;mean:               &quot; ,(roundto 6 mean)    &quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="str">		    &quot;average_deviation:  &quot; ,(roundto 6 average_deviation ) &quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="str">		    &quot;standard_deviation: &quot; ,(roundto 6 standard_deviation) &quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="str">		    &quot;variance:           &quot; ,(roundto 6 variance)&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="str">		    &quot;skew:               &quot; ,(roundto 6 skew)    &quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="str">		    &quot;kurtosis:           &quot; ,(roundto 6 kurtosis)&quot;</span><span class="esc">\n</span><span class="str">&quot; ))))))</span>
<span class="str"></span>
