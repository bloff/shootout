<span class="slc">%% The Computer Language Shootout</span>
<span class="slc">%% http://shootout.alioth.debian.org/</span>
<span class="slc">%% contributed by Kenneth Johansson, Vlad Dumitrescu, Ulf Wiger</span>

<span class="sym">-</span><span class="kwa">module</span><span class="sym">(</span>knucleotide<span class="sym">).</span>
<span class="sym">-</span><span class="kwa">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">]).</span>

<span class="slc">%% turn characters a..z to uppercase and strip out any newline</span>
<span class="kwd">to_upper_no_nl</span><span class="sym">(</span>Str<span class="sym">) -&gt;</span>                               <span class="kwd">to_upper_no_nl</span><span class="sym">(</span>Str<span class="sym">, []).</span>
<span class="kwd">to_upper_no_nl</span><span class="sym">([</span>C<span class="sym">|</span>Cs<span class="sym">],</span> Acc<span class="sym">)</span> <span class="kwa">when</span> C <span class="sym">&gt;=</span> $a<span class="sym">,</span> C <span class="sym">=&lt;</span> $z <span class="sym">-&gt;</span> <span class="kwd">to_upper_no_nl</span><span class="sym">(</span>Cs<span class="sym">, [</span>C<span class="sym">-(</span>$a<span class="sym">-</span>$A<span class="sym">)|</span> Acc<span class="sym">]);</span>
<span class="kwd">to_upper_no_nl</span><span class="sym">([</span>C<span class="sym">|</span>Cs<span class="sym">],</span> Acc<span class="sym">)</span> <span class="kwa">when</span> C <span class="sym">==</span> $\n <span class="sym">-&gt;</span>         <span class="kwd">to_upper_no_nl</span><span class="sym">(</span>Cs<span class="sym">,</span>  Acc<span class="sym">);</span>
<span class="kwd">to_upper_no_nl</span><span class="sym">([</span>C<span class="sym">|</span>Cs<span class="sym">],</span> Acc<span class="sym">) -&gt;</span>                       <span class="kwd">to_upper_no_nl</span><span class="sym">(</span>Cs<span class="sym">, [</span>C <span class="sym">|</span> Acc<span class="sym">]);</span>
<span class="kwd">to_upper_no_nl</span><span class="sym">([],</span> Acc<span class="sym">) -&gt;</span>                           lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>Acc<span class="sym">).</span>

<span class="slc">% Read in lines from stdin and discard them until a line starting with</span>
<span class="slc">% &gt;THREE are reached.</span>
<span class="kwd">seek_three</span><span class="sym">() -&gt;</span>
    <span class="kwa">case</span> io<span class="sym">:</span><span class="kwd">get_line</span><span class="sym">(</span><span class="str">''</span><span class="sym">)</span> <span class="kwa">of</span>
	<span class="str">&quot;&gt;TH&quot;</span> <span class="sym">++</span> _ <span class="sym">-&gt;</span> found<span class="sym">;</span>
	eof        <span class="sym">-&gt;</span> erlang<span class="sym">:</span><span class="kwd">error</span><span class="sym">(</span>eof<span class="sym">);</span>
	_          <span class="sym">-&gt;</span> <span class="kwd">seek_three</span><span class="sym">()</span>
    <span class="kwa">end</span><span class="sym">.</span>

<span class="slc">%% Read in lines from stdin until eof.</span>
<span class="slc">%% Lines are converted to upper case and put into a single list.</span>
<span class="kwd">dna_seq</span><span class="sym">()      -&gt;</span> <span class="kwd">seek_three</span><span class="sym">(),</span> <span class="kwd">dna_seq</span><span class="sym">([]).</span>
<span class="kwd">dna_seq</span><span class="sym">(</span> Seq <span class="sym">) -&gt;</span>
    <span class="kwa">case</span> io<span class="sym">:</span><span class="kwd">get_line</span><span class="sym">(</span><span class="str">''</span><span class="sym">)</span> <span class="kwa">of</span>
        eof  <span class="sym">-&gt;</span> <span class="kwb">list_to_binary</span><span class="sym">(</span>lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>Seq<span class="sym">));</span>
        Line <span class="sym">-&gt;</span> Uline <span class="sym">=</span> <span class="kwd">to_upper_no_nl</span><span class="sym">(</span>Line<span class="sym">),</span>
                <span class="kwd">dna_seq</span><span class="sym">([</span>Uline<span class="sym">|</span>Seq<span class="sym">])</span>
    <span class="kwa">end</span><span class="sym">.</span>

<span class="slc">%% Create a dictinary with the dna sequence as key and the number of times</span>
<span class="slc">%% it was in the original sequence as value.</span>
<span class="slc">%% Len is the number of basepairs to use as the key.</span>
<span class="kwd">gen_freq</span><span class="sym">(</span>T<span class="sym">,</span> Dna<span class="sym">,</span> Len<span class="sym">) -&gt;</span>
    <span class="kwd">gen_freq</span><span class="sym">(</span>Dna<span class="sym">,</span> Len<span class="sym">,</span> T <span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="kwb">size</span><span class="sym">(</span>Dna<span class="sym">)).</span>
<span class="kwd">gen_freq</span><span class="sym">(&lt;&lt;&gt;&gt;,</span> _<span class="sym">,</span> Frequency<span class="sym">,</span> Acc<span class="sym">,</span> _<span class="sym">) -&gt;</span>
    <span class="sym">{</span>Frequency<span class="sym">,</span>Acc<span class="sym">};</span>
<span class="kwd">gen_freq</span><span class="sym">(</span>Dna<span class="sym">,</span> Len<span class="sym">,</span> Frequency<span class="sym">,</span> Acc<span class="sym">,</span> Dec<span class="sym">)</span> <span class="kwa">when</span> Dec <span class="sym">&gt;=</span> Len <span class="sym">-&gt;</span>
    <span class="sym">&lt;&lt;</span>Key<span class="sym">:</span>Len<span class="sym">/</span><span class="kwb">binary</span><span class="sym">,</span> _<span class="sym">/</span><span class="kwb">binary</span><span class="sym">&gt;&gt; =</span> Dna<span class="sym">,</span>
    <span class="kwd">update_counter</span><span class="sym">(</span>Key<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> Frequency<span class="sym">),</span>
    <span class="sym">&lt;&lt;</span>_<span class="sym">,</span> T<span class="sym">/</span><span class="kwb">binary</span><span class="sym">&gt;&gt; =</span> Dna<span class="sym">,</span>
    <span class="kwd">gen_freq</span><span class="sym">(</span>T<span class="sym">,</span> Len<span class="sym">,</span> Frequency<span class="sym">,</span> Acc <span class="sym">+</span><span class="num">1</span><span class="sym">,</span> Dec <span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
<span class="kwd">gen_freq</span><span class="sym">(</span>_<span class="sym">,</span> _<span class="sym">,</span> Frequency<span class="sym">,</span> Acc<span class="sym">,</span> _<span class="sym">) -&gt;</span>
     <span class="sym">{</span>Frequency<span class="sym">,</span>Acc<span class="sym">}.</span>

<span class="kwd">update_counter</span><span class="sym">(</span>Key<span class="sym">,</span> Incr<span class="sym">,</span> T<span class="sym">) -&gt;</span>
    try ets<span class="sym">:</span><span class="kwd">update_counter</span><span class="sym">(</span>T<span class="sym">,</span> Key<span class="sym">,</span> Incr<span class="sym">)</span> <span class="kwa">of</span>
	Res <span class="sym">-&gt;</span>
	    Res
    <span class="kwa">catch</span>
	error<span class="sym">:</span>badarg <span class="sym">-&gt;</span>
	    ets<span class="sym">:</span><span class="kwd">insert</span><span class="sym">(</span>T<span class="sym">, {</span>Key<span class="sym">,</span> Incr<span class="sym">})</span>
    <span class="kwa">end</span><span class="sym">.</span>

<span class="slc">%% Print the frequency table</span>
<span class="kwd">printf</span><span class="sym">({</span>Frequency<span class="sym">,</span> Tot<span class="sym">}) -&gt;</span>
    <span class="kwd">printf</span><span class="sym">(</span>lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>lists<span class="sym">:</span><span class="kwd">keysort</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span>ets<span class="sym">:</span><span class="kwd">tab2list</span><span class="sym">(</span>Frequency<span class="sym">))),</span> Tot<span class="sym">).</span>
<span class="kwd">printf</span><span class="sym">([],</span>_<span class="sym">) -&gt;</span>
    io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
<span class="kwd">printf</span><span class="sym">([</span>H <span class="sym">|</span>T<span class="sym">],</span>Tot<span class="sym">)-&gt;</span>
    <span class="sym">{</span>Nucleoid<span class="sym">,</span>Cnt<span class="sym">}=</span>H<span class="sym">,</span>
    io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;~s ~.3f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,[</span><span class="kwb">binary_to_list</span><span class="sym">(</span>Nucleoid<span class="sym">),(</span>Cnt<span class="sym">*</span><span class="num">100.0</span><span class="sym">)/</span>Tot<span class="sym">]),</span>
    <span class="kwd">printf</span><span class="sym">(</span>T<span class="sym">,</span>Tot<span class="sym">).</span>

<span class="kwd">write_count</span><span class="sym">(</span>Dna<span class="sym">,</span> Pattern<span class="sym">) -&gt;</span>
    <span class="kwd">new_hash</span><span class="sym">(</span>
      <span class="kwa">fun</span><span class="sym">(</span>T<span class="sym">) -&gt;</span>
	      <span class="sym">{</span> Freq <span class="sym">,</span>_<span class="sym">} =</span> <span class="kwd">gen_freq</span><span class="sym">(</span>T<span class="sym">,</span> Dna<span class="sym">,</span> <span class="kwb">size</span><span class="sym">(</span>Pattern<span class="sym">)),</span>
	      <span class="kwa">case</span> ets<span class="sym">:</span><span class="kwd">lookup</span><span class="sym">(</span>Freq<span class="sym">,</span> Pattern<span class="sym">)</span> <span class="kwa">of</span>
		  <span class="sym">[{</span>_<span class="sym">,</span> Value<span class="sym">}] -&gt;</span>
		      io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;~w</span><span class="esc">\t</span><span class="str">~s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,[</span>Value<span class="sym">,</span><span class="kwb">binary_to_list</span><span class="sym">(</span>Pattern<span class="sym">)]);</span>
		  <span class="sym">[] -&gt;</span>
		      io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;~w</span><span class="esc">\t</span><span class="str">~s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,[</span><span class="num">0</span><span class="sym">,</span><span class="kwb">binary_to_list</span><span class="sym">(</span>Pattern<span class="sym">)])</span>
	      <span class="kwa">end</span>
      <span class="kwa">end</span><span class="sym">).</span>

<span class="kwd">new_hash</span><span class="sym">(</span>F<span class="sym">) -&gt;</span>
    T <span class="sym">=</span> ets<span class="sym">:</span><span class="kwd">new</span><span class="sym">(</span><span class="kwb">hash</span><span class="sym">, [</span>set<span class="sym">]),</span>
    Res <span class="sym">=</span> <span class="kwd">F</span><span class="sym">(</span>T<span class="sym">),</span>
    ets<span class="sym">:</span><span class="kwd">delete</span><span class="sym">(</span>T<span class="sym">),</span>
    Res<span class="sym">.</span>

<span class="kwd">main</span><span class="sym">(</span>_Arg<span class="sym">) -&gt;</span>
    Seq <span class="sym">=</span> <span class="kwd">dna_seq</span><span class="sym">(),</span>
    lists<span class="sym">:</span><span class="kwd">foreach</span><span class="sym">(</span><span class="kwa">fun</span><span class="sym">(</span>H<span class="sym">) -&gt;</span>
			  <span class="kwd">new_hash</span><span class="sym">(</span><span class="kwa">fun</span><span class="sym">(</span>T<span class="sym">) -&gt;</span>
					   <span class="kwd">printf</span><span class="sym">(</span><span class="kwd">gen_freq</span><span class="sym">(</span>T<span class="sym">,</span>Seq<span class="sym">,</span>H<span class="sym">))</span>
				   <span class="kwa">end</span><span class="sym">)</span>
		  <span class="kwa">end</span><span class="sym">, [</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">]),</span>
    lists<span class="sym">:</span><span class="kwd">foreach</span><span class="sym">(</span><span class="kwa">fun</span><span class="sym">(</span>H<span class="sym">) -&gt;</span> <span class="kwd">write_count</span><span class="sym">(</span>Seq<span class="sym">,</span>H<span class="sym">)</span> <span class="kwa">end</span><span class="sym">, [&lt;&lt;</span><span class="str">&quot;GGT&quot;</span><span class="sym">&gt;&gt;,&lt;&lt;</span><span class="str">&quot;GGTA&quot;</span><span class="sym">&gt;&gt;,&lt;&lt;</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">&gt;&gt;,&lt;&lt;</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">&gt;&gt;,&lt;&lt;</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">&gt;&gt;]),</span>
    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">).</span>

