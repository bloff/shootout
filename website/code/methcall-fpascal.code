<span class="kwa">program</span> methcall<span class="sym">;
</span><span class="com">{$MODE objfpc}</span>

<span class="kwa">uses</span> SysUtils<span class="sym">;

</span><span class="kwa">type</span> TToggle <span class="sym">=</span> <span class="kwa">class
	private
</span>		value <span class="sym">:</span> <span class="kwb">boolean</span><span class="sym">;

</span>	<span class="kwa">public
		property</span> Bool <span class="sym">:</span> <span class="kwb">boolean</span> read value write value<span class="sym">;
</span>		<span class="kwa">procedure</span> Activate<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">type</span> TNthToggle <span class="sym">=</span> <span class="kwa">class
	constructor</span> Create<span class="sym">;
</span>	<span class="kwa">private
</span>		value <span class="sym">:</span> <span class="kwb">boolean</span><span class="sym">;
</span>		counter <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>		cmax <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>	<span class="kwa">public
		property</span> CountMax <span class="sym">:</span> <span class="kwb">integer</span> read cmax write cmax<span class="sym">;
</span>		<span class="kwa">property</span> Bool <span class="sym">:</span> <span class="kwb">boolean</span> read value write value<span class="sym">;
</span>		<span class="kwa">procedure</span> Activate<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">constructor</span> TNthToggle.Create<span class="sym">;
</span><span class="kwa">begin
</span>	counter <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> TToggle.Activate<span class="sym">;
</span><span class="kwa">begin
	if</span> value <span class="sym">=</span> <span class="kwb">True</span> <span class="kwa">Then
</span>		value <span class="sym">:=</span> <span class="kwb">False
</span>	<span class="kwa">else
</span>		value <span class="sym">:=</span> <span class="kwb">True</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> TNthToggle.Activate<span class="sym">;
</span><span class="kwa">begin
</span>	counter <span class="sym">:=</span> counter <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>	<span class="kwa">if</span> counter <span class="sym">&gt;=</span> cmax <span class="kwa">Then begin
		if</span> value <span class="sym">=</span> <span class="kwb">True</span> <span class="kwa">Then
</span>			value <span class="sym">:=</span> <span class="kwb">False
</span>		<span class="kwa">Else
</span>			value <span class="sym">:=</span> <span class="kwb">True</span><span class="sym">;
</span>		counter <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;


</span><span class="kwa">var
</span>	NUM<span class="sym">,</span> i <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span>	val <span class="sym">:</span> <span class="kwb">boolean</span><span class="sym">;
</span>	oToggle <span class="sym">:</span> TToggle<span class="sym">;
</span>	onToggle <span class="sym">:</span> TNthToggle<span class="sym">;
</span><span class="kwa">begin
	if</span> ParamCount <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then
</span>		NUM <span class="sym">:=</span> <span class="num">1
</span>	<span class="kwa">else
</span>		NUM <span class="sym">:=</span> StrToInt<span class="sym">(</span>ParamStr<span class="sym">(</span><span class="num">1</span><span class="sym">));

</span>	<span class="kwa">if</span> NUM <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> NUM <span class="sym">:=</span> <span class="num">1</span><span class="sym">;

</span>	val <span class="sym">:=</span> <span class="kwb">True</span><span class="sym">;
</span>	oToggle <span class="sym">:=</span> TToggle.Create<span class="sym">;
</span>	oToggle.Bool <span class="sym">:=</span> val<span class="sym">;
</span>	<span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> NUM <span class="kwa">do
	begin
</span>		oToggle.Activate<span class="sym">;
</span>		val <span class="sym">:=</span> oToggle.Bool<span class="sym">;
</span>	<span class="kwa">end</span><span class="sym">;
</span>	<span class="kwa">If</span> val <span class="sym">=</span> <span class="kwb">True</span> <span class="kwa">Then
</span>		WriteLn<span class="sym">(</span><span class="str">'true'</span><span class="sym">)
</span>	<span class="kwa">else
</span>		WriteLn<span class="sym">(</span><span class="str">'false'</span><span class="sym">);

</span>	val <span class="sym">:=</span> <span class="kwb">True</span><span class="sym">;
</span>	onToggle <span class="sym">:=</span> TNthToggle.Create<span class="sym">;
</span>	onToggle.Bool <span class="sym">:=</span> val<span class="sym">;
</span>	onToggle.CountMax <span class="sym">:=</span> <span class="num">3</span><span class="sym">;
</span>	<span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> NUM <span class="kwa">do
	begin
</span>		onToggle.Activate<span class="sym">;
</span>		val <span class="sym">:=</span> onToggle.Bool<span class="sym">;
</span>	<span class="kwa">end</span><span class="sym">;
</span>	<span class="kwa">If</span> val <span class="sym">=</span> <span class="kwb">True</span> <span class="kwa">Then
</span>		WriteLn<span class="sym">(</span><span class="str">'true'</span><span class="sym">)
</span>	<span class="kwa">else
</span>		WriteLn<span class="sym">(</span><span class="str">'false'</span><span class="sym">);
</span><span class="kwa">end</span>.
