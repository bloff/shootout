<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: sieve-mlton.code,v 1.6 2006-01-01 17:59:58 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * with help from Stephen Weeks</span>
<span class="com"> *)</span>

<span class="kwa">val</span> size <span class="sym">=</span> <span class="num">8193</span>

<span class="kwa">val</span> flags <span class="sym">=</span> Array.array <span class="sym">(</span>size<span class="sym">,</span> <span class="kwa">false</span><span class="sym">)</span>

<span class="kwa">fun</span> init <span class="sym">() =</span>
   <span class="kwa">let</span>
      <span class="kwa">fun</span> loop i <span class="sym">=</span>
	 <span class="kwa">if</span> i <span class="sym">&lt;</span> size
	    <span class="kwa">then</span> <span class="sym">(</span>Array.update <span class="sym">(</span>flags<span class="sym">,</span> i<span class="sym">,</span> <span class="kwa">true</span><span class="sym">);</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
	 <span class="kwa">else</span> <span class="sym">()</span>
   <span class="kwa">in</span> loop <span class="num">2</span>
   <span class="kwa">end</span>

<span class="kwa">fun</span> do_elts <span class="sym">(</span>i<span class="sym">,</span> count<span class="sym">) =</span>
  <span class="kwa">if</span> i <span class="sym">&lt;</span> size
     <span class="kwa">then</span>
	<span class="kwa">if</span> Array.sub <span class="sym">(</span>flags<span class="sym">,</span> i<span class="sym">)</span>
	   <span class="kwa">then</span>
	      <span class="kwa">let</span>
		 <span class="kwa">fun</span> loop k <span class="sym">=</span>
		    <span class="kwa">if</span> k <span class="sym">&lt;</span> size
		       <span class="kwa">then</span> <span class="sym">(</span>Array.update <span class="sym">(</span>flags<span class="sym">,</span> k<span class="sym">,</span> <span class="kwa">false</span><span class="sym">);</span> loop <span class="sym">(</span>k <span class="sym">+</span> i<span class="sym">))</span>
		    <span class="kwa">else</span> <span class="sym">()</span>
	      <span class="kwa">in</span> loop <span class="sym">(</span>i <span class="sym">+</span> i<span class="sym">);</span> do_elts<span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span>count <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
	      <span class="kwa">end</span>
	<span class="kwa">else</span> do_elts <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> count<span class="sym">)</span>
  <span class="kwa">else</span> count

<span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">)</span>
<span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span>

<span class="kwa">fun</span> doit <span class="sym">() = (</span>init <span class="sym">();</span> do_elts <span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">))</span>

<span class="kwa">fun</span> repeat i <span class="sym">=</span>
   <span class="kwa">if</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">then</span> doit <span class="sym">()</span>
   <span class="kwa">else</span> <span class="sym">(</span>doit <span class="sym">();</span> repeat <span class="sym">(</span>i <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>

<span class="kwa">fun</span> main<span class="sym">(</span>name<span class="sym">,</span> param_list<span class="sym">) =</span>  <span class="kwa">let</span>
	<span class="kwa">val</span> arg <span class="sym">=</span> hd<span class="sym">(</span>param_list &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]);</span>
	<span class="kwa">val</span> num <span class="sym">=</span> atoi arg
	<span class="kwa">val</span> count <span class="sym">=</span> repeat <span class="sym">(</span>num <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">in</span>  printl <span class="sym">[</span><span class="str">&quot;Count: &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString count<span class="sym">];</span>
	OS.Process.success
    <span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() );</span>
