<span class="slc">// -*- mode: c++ -*-
</span><span class="slc">// $Id: wordfreq-gpp.code,v 1.8 2005-03-15 06:18:23 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">// By Tamás Benkõ
</span><span class="slc">// Extended for Intel's C++ compiler by Brent Fulgham
</span><span class="slc">// Many thanks to the posters at GameDev.net for help puzzling through
</span><span class="slc">//   Dinkumware's strange STL.
</span>
<span class="dir">#include &lt;cstdio&gt;
</span><span class="dir">#include &lt;cctype&gt;
</span><span class="dir">#include &lt;cstring&gt;
</span><span class="dir">#include &lt;ext/hash_map&gt;
</span><span class="dir">#include &lt;vector&gt;
</span><span class="dir">#include &lt;algorithm&gt;
</span><span class="dir">#include &lt;iomanip&gt;
</span><span class="dir">#include &lt;iostream&gt;
</span>
<span class="dir">#if (defined (__INTEL_COMPILER))
</span><span class="kwa">namespace</span> Sgi <span class="sym">=</span> std<span class="sym">;
</span><span class="dir">#else
</span><span class="kwa">namespace</span> Sgi <span class="sym">= ::</span>__gnu_cxx<span class="sym">;
</span><span class="dir">#endif
</span><span class="kwa">using namespace</span> std<span class="sym">;

</span><span class="kwb">int const</span> bufsize <span class="sym">=</span> <span class="num">4096</span><span class="sym">;
</span><span class="kwb">int const</span> wsize <span class="sym">=</span> <span class="num">64</span><span class="sym">;

</span><span class="kwc">class</span> word_reader
<span class="sym">{
</span>    <span class="kwb">int</span> ws<span class="sym">;
</span>    <span class="kwb">char</span> buf<span class="sym">[</span>bufsize<span class="sym">+</span><span class="num">1</span><span class="sym">], *</span>bptr<span class="sym">, *</span>word<span class="sym">;
</span>    <span class="kwb">FILE</span> <span class="sym">*</span>input<span class="sym">;

</span>    <span class="kwb">bool</span> fill<span class="sym">();

</span><span class="kwc">public</span><span class="sym">:
</span>    word_reader<span class="sym">(</span><span class="kwb">FILE</span> <span class="sym">*</span>i<span class="sym">):</span> ws<span class="sym">(</span>wsize<span class="sym">),</span> bptr<span class="sym">(</span>buf<span class="sym">),</span> word<span class="sym">(</span><span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>ws<span class="sym">+</span><span class="num">1</span><span class="sym">]),</span> input<span class="sym">(</span>i<span class="sym">)
	{*</span>bptr <span class="sym">= *</span>word <span class="sym">=</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;}
</span>    <span class="kwb">int</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">char const</span> <span class="sym">**);
};

</span><span class="kwc">inline</span> <span class="kwb">bool</span> word_reader<span class="sym">::</span>fill<span class="sym">()
{
</span>    <span class="kwb">int</span> nread <span class="sym">=</span> fread<span class="sym">(</span>buf<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">),</span> bufsize<span class="sym">,</span> input<span class="sym">);
</span>    buf<span class="sym">[</span>nread<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span>    bptr <span class="sym">=</span> buf<span class="sym">;
</span>    <span class="kwa">return</span> nread <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;
}

</span><span class="kwb">int</span> word_reader<span class="sym">::</span><span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">char const</span> <span class="sym">**</span>w<span class="sym">)
{
</span>    <span class="kwb">int</span> len <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwb">char</span> c<span class="sym">;
</span>    <span class="kwa">while</span> <span class="sym">(*</span>bptr <span class="sym">||</span> fill<span class="sym">()) {
</span>	<span class="kwa">if</span> <span class="sym">(</span>isalpha<span class="sym">(</span>c <span class="sym">= *</span>bptr<span class="sym">++)) {
</span>	    word<span class="sym">[</span>len<span class="sym">] =</span> tolower<span class="sym">(</span>c<span class="sym">);
</span>	    <span class="kwa">if</span> <span class="sym">(++</span>len <span class="sym">==</span> ws<span class="sym">) {
</span>		<span class="kwb">char</span> <span class="sym">*</span>nword <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[(</span>ws <span class="sym">*=</span> <span class="num">2</span><span class="sym">)+</span><span class="num">1</span><span class="sym">];
</span>		memcpy<span class="sym">(</span>nword<span class="sym">,</span> word<span class="sym">,</span> len<span class="sym">);
</span>		<span class="kwa">delete</span><span class="sym">[]</span> word<span class="sym">;
</span>		word <span class="sym">=</span> nword<span class="sym">;
	    }
	}
</span>	<span class="kwa">else if</span> <span class="sym">(</span>len <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;
    }
    *</span>w <span class="sym">=</span> word<span class="sym">;
</span>    word<span class="sym">[</span>len<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span>    <span class="kwa">return</span> len<span class="sym">;
}

</span><span class="kwc">typedef</span> pair<span class="sym">&lt;</span><span class="kwb">char const</span> <span class="sym">*,</span> <span class="kwb">int</span><span class="sym">&gt;</span> hpair<span class="sym">;

</span><span class="kwa">namespace</span> std
<span class="sym">{
</span>    <span class="kwc">inline</span> <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">&lt;(</span>hpair <span class="kwb">const</span> <span class="sym">&amp;</span>lhs<span class="sym">,</span> hpair <span class="kwb">const</span> <span class="sym">&amp;</span>rhs<span class="sym">)
    {
</span>	<span class="kwa">return</span> lhs<span class="sym">.</span>second <span class="sym">!=</span> rhs<span class="sym">.</span>second ? lhs<span class="sym">.</span>second <span class="sym">&gt;</span> rhs<span class="sym">.</span>second
	    <span class="sym">:</span> strcmp<span class="sym">(</span>lhs<span class="sym">.</span>first<span class="sym">,</span> rhs<span class="sym">.</span>first<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">;
    }

</span>    <span class="kwc">template</span><span class="sym">&lt;&gt;</span> <span class="kwb">struct</span> equal_to<span class="sym">&lt;</span><span class="kwb">char const</span> <span class="sym">*&gt;
    {
</span>	<span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">char const</span> <span class="sym">*</span>s1<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span>s2<span class="sym">)</span> <span class="kwb">const
</span>	    <span class="sym">{</span><span class="kwa">return</span> strcmp<span class="sym">(</span>s1<span class="sym">,</span> s2<span class="sym">) ==</span> <span class="num">0</span><span class="sym">;}
    };

</span>    <span class="kwb">struct</span> str_hash_compare
    <span class="sym">{
</span>        <span class="kwb">enum</span> <span class="sym">{</span> bucket_size <span class="sym">=</span> <span class="num">4</span><span class="sym">,</span> min_buckets <span class="sym">=</span> <span class="num">8</span> <span class="sym">};

</span>	<span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">char const</span> <span class="sym">*</span>s1<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span>s2<span class="sym">)</span> <span class="kwb">const
</span>	    <span class="sym">{</span><span class="kwa">return</span> strcmp<span class="sym">(</span>s1<span class="sym">,</span> s2<span class="sym">) &lt;</span> <span class="num">0</span><span class="sym">;}

</span>	<span class="kwb">size_t</span> <span class="kwc">operator</span><span class="sym">() (</span><span class="kwb">const char</span><span class="sym">*</span> s<span class="sym">)</span> <span class="kwb">const
</span>	<span class="sym">{
</span>	    <span class="kwb">size_t</span> h <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	    <span class="kwa">for</span> <span class="sym">(; *</span>s<span class="sym">; ++</span>s<span class="sym">)
</span>	        h <span class="sym">=</span> <span class="num">5</span> <span class="sym">*</span> h <span class="sym">+ *</span>s<span class="sym">;
</span>	    <span class="kwa">return</span> h<span class="sym">;
	}
     };
}

</span><span class="dir">#if (defined (__INTEL_COMPILER))
</span><span class="kwc">typedef</span> std<span class="sym">::</span>hash_map<span class="sym">&lt;</span><span class="kwb">char const</span> <span class="sym">*,</span> <span class="kwb">int</span><span class="sym">,</span> str_hash_compare<span class="sym">&gt;</span> counter<span class="sym">;
</span><span class="dir">#else
</span><span class="kwc">typedef</span> Sgi<span class="sym">::</span>hash_map<span class="sym">&lt;</span><span class="kwb">char const</span> <span class="sym">*,</span> <span class="kwb">int</span><span class="sym">&gt;</span> counter<span class="sym">;
</span><span class="dir">#endif
</span>
<span class="kwb">int</span> main<span class="sym">()
{
</span>    <span class="kwb">int</span> len<span class="sym">;
</span>    <span class="kwb">const char</span> <span class="sym">*</span>w<span class="sym">;
</span>    counter hist<span class="sym">;
</span>    word_reader wr<span class="sym">(</span>stdin<span class="sym">);

</span>    <span class="kwa">while</span> <span class="sym">((</span>len <span class="sym">=</span> wr<span class="sym">(&amp;</span>w<span class="sym">)) &gt;</span> <span class="num">0</span><span class="sym">) {
</span>	counter<span class="sym">::</span>iterator i <span class="sym">=</span> hist<span class="sym">.</span>find<span class="sym">(</span>w<span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> hist<span class="sym">.</span>end<span class="sym">())</span> hist<span class="sym">[</span>strcpy<span class="sym">(</span><span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>len<span class="sym">+</span><span class="num">1</span><span class="sym">],</span> w<span class="sym">)] =</span> <span class="num">1</span><span class="sym">;
</span>	<span class="kwa">else</span> <span class="sym">++</span>i<span class="sym">-&gt;</span>second<span class="sym">;
    }

</span>    vector<span class="sym">&lt;</span>hpair<span class="sym">&gt;</span> v<span class="sym">(</span>hist<span class="sym">.</span>begin<span class="sym">(),</span> hist<span class="sym">.</span>end<span class="sym">());
</span>    sort<span class="sym">(</span>v<span class="sym">.</span>begin<span class="sym">(),</span> v<span class="sym">.</span>end<span class="sym">());
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> v<span class="sym">.</span>size<span class="sym">(); ++</span>i<span class="sym">)
    {
</span>        cout <span class="sym">&lt;&lt;</span> setw<span class="sym">(</span><span class="num">7</span><span class="sym">) &lt;&lt;</span> v<span class="sym">[</span>i<span class="sym">].</span>second <span class="sym">&lt;&lt;</span> <span class="str">' '</span> <span class="sym">&lt;&lt;</span> v<span class="sym">[</span>i<span class="sym">].</span>first <span class="sym">&lt;&lt;</span> endl<span class="sym">;
    }

</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span>
