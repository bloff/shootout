<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: wordfreq-gpp.code,v 1.2 2004-11-10 07:10:36 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">// By Tamás Benkõ
</FONT></I>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;cstdio&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;cctype&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;cstring&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;ext/hash_map&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;vector&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;algorithm&gt;</FONT></B>

namespace Sgi = ::__gnu_cxx;
using namespace std;

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#228B22">const</FONT></B> bufsize = 4096;
<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#228B22">const</FONT></B> wsize = 64;

<B><FONT COLOR="#228B22">class</FONT></B> word_reader
{
    <B><FONT COLOR="#228B22">int</FONT></B> ws;
    <B><FONT COLOR="#228B22">char</FONT></B> buf[bufsize+1], *bptr, *word;
    FILE *input;

    <B><FONT COLOR="#228B22">bool</FONT></B> fill();

<B><FONT COLOR="#228B22">public</FONT></B>:
    word_reader(FILE *i): ws(wsize), bptr(buf), word(<B><FONT COLOR="#A020F0">new</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>[ws+1]), input(i)
	{*bptr = *word = <B><FONT COLOR="#BC8F8F">'\0'</FONT></B>;}
    <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#A020F0">operator</FONT></B>()(<B><FONT COLOR="#228B22">char</FONT></B> <B><FONT COLOR="#228B22">const</FONT></B> **);
};

<B><FONT COLOR="#228B22">inline</FONT></B> <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#0000FF">word_reader::fill</FONT></B>()
{
    <B><FONT COLOR="#228B22">int</FONT></B> nread = fread(buf, <B><FONT COLOR="#A020F0">sizeof</FONT></B>(<B><FONT COLOR="#228B22">char</FONT></B>), bufsize, input);
    buf[nread] = <B><FONT COLOR="#BC8F8F">'\0'</FONT></B>;
    bptr = buf;
    <B><FONT COLOR="#A020F0">return</FONT></B> nread &gt; 0;
}

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">word_reader::operator</FONT></B>()(<B><FONT COLOR="#228B22">char</FONT></B> <B><FONT COLOR="#228B22">const</FONT></B> **w)
{
    <B><FONT COLOR="#228B22">int</FONT></B> len = 0;
    <B><FONT COLOR="#228B22">char</FONT></B> c;
    <B><FONT COLOR="#A020F0">while</FONT></B> (*bptr || fill()) {
	<B><FONT COLOR="#A020F0">if</FONT></B> (isalpha(c = *bptr++)) {
	    word[len] = tolower(c);
	    <B><FONT COLOR="#A020F0">if</FONT></B> (++len == ws) {
		<B><FONT COLOR="#228B22">char</FONT></B> *nword = <B><FONT COLOR="#A020F0">new</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>[(ws *= 2)+1];
		memcpy(nword, word, len);
		<B><FONT COLOR="#A020F0">delete</FONT></B>[] word;
		word = nword;
	    }
	}
	<B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> (len &gt; 0) <B><FONT COLOR="#A020F0">break</FONT></B>;
    }
    *w = word;
    word[len] = <B><FONT COLOR="#BC8F8F">'\0'</FONT></B>;
    <B><FONT COLOR="#A020F0">return</FONT></B> len;
}

<B><FONT COLOR="#228B22">typedef</FONT></B> Sgi::hash_map&lt;<B><FONT COLOR="#228B22">char</FONT></B> <B><FONT COLOR="#228B22">const</FONT></B> *, <B><FONT COLOR="#228B22">int</FONT></B>&gt; counter;
<B><FONT COLOR="#228B22">typedef</FONT></B> pair&lt;<B><FONT COLOR="#228B22">char</FONT></B> <B><FONT COLOR="#228B22">const</FONT></B> *, <B><FONT COLOR="#228B22">int</FONT></B>&gt; hpair;

namespace std
{
    <B><FONT COLOR="#228B22">inline</FONT></B> <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#A020F0">operator</FONT></B>&lt;(hpair <B><FONT COLOR="#228B22">const</FONT></B> &amp;lhs, hpair <B><FONT COLOR="#228B22">const</FONT></B> &amp;rhs)
    {
	<B><FONT COLOR="#A020F0">return</FONT></B> lhs.second != rhs.second ? lhs.second &gt; rhs.second
	    : strcmp(lhs.first, rhs.first) &gt; 0;
    }

    <B><FONT COLOR="#228B22">template</FONT></B>&lt;&gt; <B><FONT COLOR="#228B22">struct</FONT></B> equal_to&lt;<B><FONT COLOR="#228B22">char</FONT></B> <B><FONT COLOR="#228B22">const</FONT></B> *&gt;
    {
	<B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#A020F0">operator</FONT></B>()(<B><FONT COLOR="#228B22">char</FONT></B> <B><FONT COLOR="#228B22">const</FONT></B> *s1, <B><FONT COLOR="#228B22">char</FONT></B> <B><FONT COLOR="#228B22">const</FONT></B> *s2) <B><FONT COLOR="#228B22">const</FONT></B>
	    {<B><FONT COLOR="#A020F0">return</FONT></B> strcmp(s1, s2) == 0;}
    };
}

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>()
{
    <B><FONT COLOR="#228B22">int</FONT></B> len;
    <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B> *w;
    counter hist;
    word_reader wr(stdin);

    <B><FONT COLOR="#A020F0">while</FONT></B> ((len = wr(&amp;w)) &gt; 0) {
	<B><FONT COLOR="#5F9EA0">counter</FONT></B>::iterator i = hist.find(w);
	<B><FONT COLOR="#A020F0">if</FONT></B> (i == hist.end()) hist[strcpy(<B><FONT COLOR="#A020F0">new</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>[len+1], w)] = 1;
	<B><FONT COLOR="#A020F0">else</FONT></B> ++i-&gt;second;
    }

    vector&lt;hpair&gt; v(hist.begin(), hist.end());
    sort(v.begin(), v.end());
    <B><FONT COLOR="#A020F0">for</FONT></B> (size_t i = 0; i &lt; v.size(); ++i)
	printf(<B><FONT COLOR="#BC8F8F">&quot;%7d %s\n&quot;</FONT></B>, v[i].second, v[i].first);

    <B><FONT COLOR="#A020F0">return</FONT></B> 0;
}</pre></td></tr></table>
