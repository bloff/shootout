<span class="line">    1 </span><span class="slc">// -*- mode: c++ -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// $Id: wordfreq-gpp.code,v 1.3 2004-11-11 07:14:20 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">// By Tamás Benkõ
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="dir">#include &lt;cstdio&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;cctype&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;cstring&gt;
</span><span class="line">    9 </span><span class="dir"></span><span class="dir">#include &lt;ext/hash_map&gt;
</span><span class="line">   10 </span><span class="dir"></span><span class="dir">#include &lt;vector&gt;
</span><span class="line">   11 </span><span class="dir"></span><span class="dir">#include &lt;algorithm&gt;
</span><span class="line">   12 </span><span class="dir"></span>
<span class="line">   13 </span><span class="kwa">namespace</span> Sgi <span class="sym">= ::</span>__gnu_cxx<span class="sym">;
</span><span class="line">   14 </span><span class="sym"></span><span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="line">   15 </span><span class="sym">
</span><span class="line">   16 </span><span class="sym"></span><span class="kwb">int const</span> bufsize <span class="sym">=</span> <span class="num">4096</span><span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span><span class="kwb">int const</span> wsize <span class="sym">=</span> <span class="num">64</span><span class="sym">;
</span><span class="line">   18 </span><span class="sym">
</span><span class="line">   19 </span><span class="sym"></span><span class="kwc">class</span> word_reader
<span class="line">   20 </span><span class="sym">{
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwb">int</span> ws<span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>    <span class="kwb">char</span> buf<span class="sym">[</span>bufsize<span class="sym">+</span><span class="num">1</span><span class="sym">], *</span>bptr<span class="sym">, *</span>word<span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>    <span class="kwb">FILE</span> <span class="sym">*</span>input<span class="sym">;
</span><span class="line">   24 </span><span class="sym">
</span><span class="line">   25 </span><span class="sym"></span>    <span class="kwb">bool</span> fill<span class="sym">();
</span><span class="line">   26 </span><span class="sym">
</span><span class="line">   27 </span><span class="sym"></span><span class="kwc">public</span><span class="sym">:
</span><span class="line">   28 </span><span class="sym"></span>    word_reader<span class="sym">(</span><span class="kwb">FILE</span> <span class="sym">*</span>i<span class="sym">):</span> ws<span class="sym">(</span>wsize<span class="sym">),</span> bptr<span class="sym">(</span>buf<span class="sym">),</span> word<span class="sym">(</span><span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>ws<span class="sym">+</span><span class="num">1</span><span class="sym">]),</span> input<span class="sym">(</span>i<span class="sym">)
</span><span class="line">   29 </span><span class="sym">        {*</span>bptr <span class="sym">= *</span>word <span class="sym">=</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;}
</span><span class="line">   30 </span><span class="sym"></span>    <span class="kwb">int</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">char const</span> <span class="sym">**);
</span><span class="line">   31 </span><span class="sym">};
</span><span class="line">   32 </span><span class="sym">
</span><span class="line">   33 </span><span class="sym"></span><span class="kwc">inline</span> <span class="kwb">bool</span> word_reader<span class="sym">::</span>fill<span class="sym">()
</span><span class="line">   34 </span><span class="sym">{
</span><span class="line">   35 </span><span class="sym"></span>    <span class="kwb">int</span> nread <span class="sym">=</span> fread<span class="sym">(</span>buf<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">),</span> bufsize<span class="sym">,</span> input<span class="sym">);
</span><span class="line">   36 </span><span class="sym"></span>    buf<span class="sym">[</span>nread<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span><span class="line">   37 </span><span class="sym"></span>    bptr <span class="sym">=</span> buf<span class="sym">;
</span><span class="line">   38 </span><span class="sym"></span>    <span class="kwa">return</span> nread <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   39 </span><span class="sym">}
</span><span class="line">   40 </span><span class="sym">
</span><span class="line">   41 </span><span class="sym"></span><span class="kwb">int</span> word_reader<span class="sym">::</span><span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">char const</span> <span class="sym">**</span>w<span class="sym">)
</span><span class="line">   42 </span><span class="sym">{
</span><span class="line">   43 </span><span class="sym"></span>    <span class="kwb">int</span> len <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>    <span class="kwb">char</span> c<span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(*</span>bptr <span class="sym">||</span> fill<span class="sym">()) {
</span><span class="line">   46 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>isalpha<span class="sym">(</span>c <span class="sym">= *</span>bptr<span class="sym">++)) {
</span><span class="line">   47 </span><span class="sym"></span>            word<span class="sym">[</span>len<span class="sym">] =</span> tolower<span class="sym">(</span>c<span class="sym">);
</span><span class="line">   48 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(++</span>len <span class="sym">==</span> ws<span class="sym">) {
</span><span class="line">   49 </span><span class="sym"></span>                <span class="kwb">char</span> <span class="sym">*</span>nword <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[(</span>ws <span class="sym">*=</span> <span class="num">2</span><span class="sym">)+</span><span class="num">1</span><span class="sym">];
</span><span class="line">   50 </span><span class="sym"></span>                memcpy<span class="sym">(</span>nword<span class="sym">,</span> word<span class="sym">,</span> len<span class="sym">);
</span><span class="line">   51 </span><span class="sym"></span>                <span class="kwa">delete</span><span class="sym">[]</span> word<span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>                word <span class="sym">=</span> nword<span class="sym">;
</span><span class="line">   53 </span><span class="sym">            }
</span><span class="line">   54 </span><span class="sym">        }
</span><span class="line">   55 </span><span class="sym"></span>        <span class="kwa">else if</span> <span class="sym">(</span>len <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;
</span><span class="line">   56 </span><span class="sym">    }
</span><span class="line">   57 </span><span class="sym">    *</span>w <span class="sym">=</span> word<span class="sym">;
</span><span class="line">   58 </span><span class="sym"></span>    word<span class="sym">[</span>len<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>    <span class="kwa">return</span> len<span class="sym">;
</span><span class="line">   60 </span><span class="sym">}
</span><span class="line">   61 </span><span class="sym">
</span><span class="line">   62 </span><span class="sym"></span><span class="kwc">typedef</span> Sgi<span class="sym">::</span>hash_map<span class="sym">&lt;</span><span class="kwb">char const</span> <span class="sym">*,</span> <span class="kwb">int</span><span class="sym">&gt;</span> counter<span class="sym">;
</span><span class="line">   63 </span><span class="sym"></span><span class="kwc">typedef</span> pair<span class="sym">&lt;</span><span class="kwb">char const</span> <span class="sym">*,</span> <span class="kwb">int</span><span class="sym">&gt;</span> hpair<span class="sym">;
</span><span class="line">   64 </span><span class="sym">
</span><span class="line">   65 </span><span class="sym"></span><span class="kwa">namespace</span> std
<span class="line">   66 </span><span class="sym">{
</span><span class="line">   67 </span><span class="sym"></span>    <span class="kwc">inline</span> <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">&lt;(</span>hpair <span class="kwb">const</span> <span class="sym">&amp;</span>lhs<span class="sym">,</span> hpair <span class="kwb">const</span> <span class="sym">&amp;</span>rhs<span class="sym">)
</span><span class="line">   68 </span><span class="sym">    {
</span><span class="line">   69 </span><span class="sym"></span>        <span class="kwa">return</span> lhs<span class="sym">.</span>second <span class="sym">!=</span> rhs<span class="sym">.</span>second ? lhs<span class="sym">.</span>second <span class="sym">&gt;</span> rhs<span class="sym">.</span>second
<span class="line">   70 </span>            <span class="sym">:</span> strcmp<span class="sym">(</span>lhs<span class="sym">.</span>first<span class="sym">,</span> rhs<span class="sym">.</span>first<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   71 </span><span class="sym">    }
</span><span class="line">   72 </span><span class="sym">
</span><span class="line">   73 </span><span class="sym"></span>    <span class="kwc">template</span><span class="sym">&lt;&gt;</span> <span class="kwb">struct</span> equal_to<span class="sym">&lt;</span><span class="kwb">char const</span> <span class="sym">*&gt;
</span><span class="line">   74 </span><span class="sym">    {
</span><span class="line">   75 </span><span class="sym"></span>        <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">char const</span> <span class="sym">*</span>s1<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span>s2<span class="sym">)</span> <span class="kwb">const
</span><span class="line">   76 </span><span class="kwb"></span>            <span class="sym">{</span><span class="kwa">return</span> strcmp<span class="sym">(</span>s1<span class="sym">,</span> s2<span class="sym">) ==</span> <span class="num">0</span><span class="sym">;}
</span><span class="line">   77 </span><span class="sym">    };
</span><span class="line">   78 </span><span class="sym">}
</span><span class="line">   79 </span><span class="sym">
</span><span class="line">   80 </span><span class="sym"></span><span class="kwb">int</span> main<span class="sym">()
</span><span class="line">   81 </span><span class="sym">{
</span><span class="line">   82 </span><span class="sym"></span>    <span class="kwb">int</span> len<span class="sym">;
</span><span class="line">   83 </span><span class="sym"></span>    <span class="kwb">const char</span> <span class="sym">*</span>w<span class="sym">;
</span><span class="line">   84 </span><span class="sym"></span>    counter hist<span class="sym">;
</span><span class="line">   85 </span><span class="sym"></span>    word_reader wr<span class="sym">(</span>stdin<span class="sym">);
</span><span class="line">   86 </span><span class="sym">
</span><span class="line">   87 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">((</span>len <span class="sym">=</span> wr<span class="sym">(&amp;</span>w<span class="sym">)) &gt;</span> <span class="num">0</span><span class="sym">) {
</span><span class="line">   88 </span><span class="sym"></span>        counter<span class="sym">::</span>iterator i <span class="sym">=</span> hist<span class="sym">.</span>find<span class="sym">(</span>w<span class="sym">);
</span><span class="line">   89 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> hist<span class="sym">.</span>end<span class="sym">())</span> hist<span class="sym">[</span>strcpy<span class="sym">(</span><span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>len<span class="sym">+</span><span class="num">1</span><span class="sym">],</span> w<span class="sym">)] =</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   90 </span><span class="sym"></span>        <span class="kwa">else</span> <span class="sym">++</span>i<span class="sym">-&gt;</span>second<span class="sym">;
</span><span class="line">   91 </span><span class="sym">    }
</span><span class="line">   92 </span><span class="sym">
</span><span class="line">   93 </span><span class="sym"></span>    vector<span class="sym">&lt;</span>hpair<span class="sym">&gt;</span> v<span class="sym">(</span>hist<span class="sym">.</span>begin<span class="sym">(),</span> hist<span class="sym">.</span>end<span class="sym">());
</span><span class="line">   94 </span><span class="sym"></span>    sort<span class="sym">(</span>v<span class="sym">.</span>begin<span class="sym">(),</span> v<span class="sym">.</span>end<span class="sym">());
</span><span class="line">   95 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> v<span class="sym">.</span>size<span class="sym">(); ++</span>i<span class="sym">)
</span><span class="line">   96 </span><span class="sym"></span>        printf<span class="sym">(</span><span class="str">&quot;%7d %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> v<span class="sym">[</span>i<span class="sym">].</span>second<span class="sym">,</span> v<span class="sym">[</span>i<span class="sym">].</span>first<span class="sym">);
</span><span class="line">   97 </span><span class="sym">
</span><span class="line">   98 </span><span class="sym"></span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   99 </span><span class="sym">}</span>
