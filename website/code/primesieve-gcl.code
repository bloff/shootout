<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; $Id: primesieve-gcl.code,v 1.1 2004-11-28 05:42:41 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; By Brent Fulgham, based on code by Paul Foley
</span>
<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)</span> #<span class="sym">-</span>gcl <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))

(</span><span class="kwa">defun</span> primesieve <span class="sym">(</span>n<span class="sym">)
  (</span>let <span class="sym">((</span>flags <span class="sym">(</span>make<span class="sym">-</span>array <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> n<span class="sym">) :</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'bit :initial-element 1))
	(count 0))

    (loop for i fixnum from 2 upto n do
      (unless (zerop (aref flags i))
         (loop for k fixnum from (+ i i) upto n by i do
	   (setf (aref flags k) 0))
	 (setq count (1+ count))))
	 count))

(defun main ()
  (let ((n (parse-integer (or (car (last #+sbcl sb-ext:*posix-argv*
                                         #+cmu  ext:*command-line-strings*
                                         #+gcl  si::*command-args*)) &quot;1&quot;))))
       (format t &quot;Count: ~D~%&quot; (primesieve n))))
</span>
