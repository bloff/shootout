<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy */</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Net<span class="sym">.</span>Sockets<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Diagnostics<span class="sym">;

</span><span class="kwc">class</span> tcpecho
<span class="sym">{
</span>   <span class="kwb">const int</span> M <span class="sym">=</span> <span class="num">6400</span><span class="sym">;</span> <span class="slc">// multiplier
</span>   <span class="kwb">const int</span> REPLY_SIZE <span class="sym">=</span> <span class="num">64</span><span class="sym">;
</span>   <span class="kwb">const int</span> REQUEST_SIZE <span class="sym">=</span> <span class="num">64</span><span class="sym">;
</span>   <span class="kwb">const int</span> BUFFER_SIZE <span class="sym">=</span> <span class="num">1024</span><span class="sym">;

</span>   <span class="kwb">static</span> byte<span class="sym">[]</span> REPLY <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>REPLY_SIZE<span class="sym">];
</span>   <span class="kwb">static</span> byte<span class="sym">[]</span> REQUEST <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>REQUEST_SIZE<span class="sym">];


</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){
</span>         n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]) *</span> M<span class="sym">;

</span>         Process p <span class="sym">=</span> <span class="kwa">new</span> Process<span class="sym">();
</span>         ProcessStartInfo i <span class="sym">=</span> p<span class="sym">.</span>StartInfo<span class="sym">;
</span>         i<span class="sym">.</span>FileName <span class="sym">=</span> <span class="str">&quot;mono&quot;</span><span class="sym">;
</span>         i<span class="sym">.</span>Arguments <span class="sym">=</span> <span class="str">&quot;tcpecho.csharp_run&quot;</span><span class="sym">;
</span>         i<span class="sym">.</span>UseShellExecute <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span>         p<span class="sym">.</span>Start<span class="sym">();

</span>         Client<span class="sym">.</span>Start<span class="sym">(</span>n<span class="sym">);
      }
</span>      <span class="kwa">else</span> <span class="sym">{
</span>         Listener<span class="sym">.</span>Start<span class="sym">();
      }
   }


</span>   <span class="kwc">class</span> Listener
   <span class="sym">{
</span>      <span class="kwc">public</span> <span class="kwb">static void</span> Start<span class="sym">() {
</span>         TcpListener listener <span class="sym">=</span> <span class="kwa">new</span> TcpListener<span class="sym">(</span><span class="num">11000</span><span class="sym">);
</span>         listener<span class="sym">.</span>Start<span class="sym">();

</span>         <span class="kwa">using</span> <span class="sym">(</span>TcpClient client <span class="sym">=</span> listener<span class="sym">.</span>AcceptTcpClient<span class="sym">()){
</span>            NetworkStream s <span class="sym">=</span> client<span class="sym">.</span>GetStream<span class="sym">();
</span>            byte<span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>BUFFER_SIZE<span class="sym">];

</span>            <span class="kwa">while</span> <span class="sym">(</span>s<span class="sym">.</span>Read<span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> REQUEST_SIZE<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">)
</span>               s<span class="sym">.</span>Write<span class="sym">(</span>REPLY<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> REPLY_SIZE<span class="sym">);
         }
</span>         listener<span class="sym">.</span>Stop<span class="sym">();
      }
   }


</span>   <span class="kwc">class</span> Client
   <span class="sym">{
</span>      <span class="kwc">public</span> <span class="kwb">static void</span> Start<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>         byte<span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>BUFFER_SIZE<span class="sym">];
</span>         <span class="kwb">int</span> replies <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> bytes <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>         <span class="kwa">using</span> <span class="sym">(</span>TcpClient client <span class="sym">=</span> <span class="kwa">new</span> TcpClient<span class="sym">(</span><span class="str">&quot;127.0.0.1&quot;</span><span class="sym">,</span><span class="num">11000</span><span class="sym">)){
</span>            <span class="kwb">int</span> byteCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>            NetworkStream s <span class="sym">=</span> client<span class="sym">.</span>GetStream<span class="sym">();

</span>            <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
</span>               s<span class="sym">.</span>Write<span class="sym">(</span>REQUEST<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> REQUEST<span class="sym">.</span>Length<span class="sym">);
</span>               <span class="kwa">while</span> <span class="sym">((</span>byteCount <span class="sym">+=</span> s<span class="sym">.</span>Read<span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> buffer<span class="sym">.</span>Length<span class="sym">)) &lt;</span> REPLY_SIZE<span class="sym">){}

</span>               bytes <span class="sym">+=</span> byteCount<span class="sym">;
</span>               byteCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>               replies<span class="sym">++;
            }
         }
</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;replies: {0}</span><span class="esc">\t</span><span class="str">bytes: {1}&quot;</span><span class="sym">,</span> replies<span class="sym">,</span> bytes<span class="sym">);
      }
   }
}</span>
