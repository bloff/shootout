<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: wc-gcc.code,v 1.18 2006-06-08 12:23:57 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> *</span>
<span class="com"> * Author: Waldemar Hebisch (hebisch&#64;math.uni.wroc.pl)</span>
<span class="com"> * Optimizations: Michael Herf (mike&#64;herfconsulting.com)</span>
<span class="com"> * Further Revisions: Paul Hsieh (qed&#64;pobox.com)</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;unistd.h&gt;</span>
<span class="dir">#include &lt;limits.h&gt;</span>

<span class="dir">#define BSIZ 4096</span>

<span class="kwb">unsigned long</span> ws<span class="sym">[</span>UCHAR_MAX <span class="sym">+</span> <span class="num">1</span><span class="sym">];</span>
<span class="kwb">unsigned long</span> nws<span class="sym">[</span>UCHAR_MAX <span class="sym">+</span> <span class="num">1</span><span class="sym">];</span>
<span class="kwb">char</span> buff<span class="sym">[</span>BSIZ<span class="sym">];</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">void</span><span class="sym">) {</span>
    <span class="kwb">unsigned long</span> prev_nws <span class="sym">=</span> <span class="num">0x10000</span>L<span class="sym">,</span> w_cnt <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> l_cnt <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> b_cnt <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> cnt<span class="sym">;</span>

    <span class="com">/* Fill tables */</span>
    <span class="kwa">for</span> <span class="sym">(</span>cnt <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> cnt <span class="sym">&lt;=</span> UCHAR_MAX<span class="sym">;</span> cnt<span class="sym">++) {</span>
         ws<span class="sym">[</span>cnt<span class="sym">] =  (</span>cnt <span class="sym">==</span> <span class="str">' '</span> <span class="sym">||</span> cnt <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">||</span> cnt <span class="sym">==</span> <span class="str">'</span><span class="esc">\t</span><span class="str">'</span><span class="sym">) + (</span><span class="num">0x10000</span>L <span class="sym">&amp; -(</span>cnt <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">));</span>
	nws<span class="sym">[</span>cnt<span class="sym">] = !(</span>cnt <span class="sym">==</span> <span class="str">' '</span> <span class="sym">||</span> cnt <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">||</span> cnt <span class="sym">==</span> <span class="str">'</span><span class="esc">\t</span><span class="str">'</span><span class="sym">) +</span>  <span class="num">0x10000</span>L<span class="sym">;</span>
    <span class="sym">}</span>


    <span class="com">/* Main loop */</span>
    <span class="kwa">while</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">!= (</span>cnt <span class="sym">=</span> <span class="kwd">read</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> buff<span class="sym">,</span> BSIZ<span class="sym">))) {</span>
        <span class="kwb">unsigned long</span> vect_count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwb">unsigned char</span> <span class="sym">*</span>pp<span class="sym">, *</span>pe<span class="sym">;</span>

	b_cnt <span class="sym">+=</span> cnt<span class="sym">;</span>
	pe <span class="sym">=</span> buff <span class="sym">+</span> cnt<span class="sym">;</span>
	pp <span class="sym">=</span> buff<span class="sym">;</span>

	<span class="kwa">while</span> <span class="sym">(</span>pp <span class="sym">&lt;</span> pe<span class="sym">) {</span>
	    vect_count <span class="sym">+=</span>  ws<span class="sym">[*</span>pp<span class="sym">] &amp;</span> prev_nws<span class="sym">;</span>
	    prev_nws    <span class="sym">=</span> nws<span class="sym">[*</span>pp<span class="sym">];</span>
	    pp <span class="sym">++;</span>
	<span class="sym">}</span>
	w_cnt <span class="sym">+=</span> vect_count  <span class="sym">&amp;</span> <span class="num">0xFFFF</span>L<span class="sym">;</span>
	l_cnt <span class="sym">+=</span> vect_count <span class="sym">&gt;&gt;</span> <span class="num">16</span><span class="sym">;</span>
    <span class="sym">}</span>

    w_cnt <span class="sym">+=</span> <span class="num">1</span> <span class="sym">&amp;</span> prev_nws<span class="sym">;</span>

    <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;%d %d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> l_cnt<span class="sym">,</span> w_cnt<span class="sym">,</span> b_cnt<span class="sym">);</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
