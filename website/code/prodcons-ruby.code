<span class="line">    1 </span><span class="slc">#!/usr/bin/ruby
</span><span class="line">    2 </span><span class="slc"></span><span class="slc"># -*- mode: ruby -*-
</span><span class="line">    3 </span><span class="slc"></span><span class="slc"># $Id: prodcons-ruby.code,v 1.3 2004-11-11 07:14:03 bfulgham Exp $
</span><span class="line">    4 </span><span class="slc"></span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span>require <span class="str">'thread'</span>
<span class="line">    7 </span>
<span class="line">    8 </span><span class="kwa">def</span> main<span class="sym">(</span>n<span class="sym">)
</span><span class="line">    9 </span><span class="sym"></span>    mutex = Mutex.new
<span class="line">   10 </span>    access = ConditionVariable.new
<span class="line">   11 </span>    count = <span class="kwa">data</span> = consumed = produced = <span class="num">0
</span><span class="line">   12 </span><span class="num"></span>    consumer = Thread.new <span class="kwa">do
</span><span class="line">   13 </span><span class="kwa"></span>        i = <span class="num">0
</span><span class="line">   14 </span><span class="num"></span>        loop <span class="kwa">do
</span><span class="line">   15 </span><span class="kwa"></span>            mutex.synchronize <span class="sym">{
</span><span class="line">   16 </span><span class="sym"></span>                <span class="kwa">while</span> count == <span class="num">0</span> <span class="kwa">do</span> access.wait<span class="sym">(</span>mutex<span class="sym">)</span> <span class="kwa">end
</span><span class="line">   17 </span><span class="kwa"></span>                i = <span class="kwa">data
</span><span class="line">   18 </span><span class="kwa"></span>                count = <span class="num">0
</span><span class="line">   19 </span><span class="num"></span>                access.signal
<span class="line">   20 </span>            <span class="sym">}
</span><span class="line">   21 </span><span class="sym"></span>            consumed <span class="sym">+</span>= <span class="num">1
</span><span class="line">   22 </span><span class="num"></span>            <span class="kwa">if</span> i == n <span class="kwa">then break end
</span><span class="line">   23 </span><span class="kwa">        end
</span><span class="line">   24 </span><span class="kwa">    end
</span><span class="line">   25 </span><span class="kwa"></span>    producer = Thread.new <span class="kwa">do
</span><span class="line">   26 </span><span class="kwa">        for</span> i <span class="kwa">in</span> <span class="num">1</span> .. n <span class="kwa">do
</span><span class="line">   27 </span><span class="kwa"></span>            mutex.synchronize <span class="sym">{
</span><span class="line">   28 </span><span class="sym"></span>                <span class="kwa">while</span> count == <span class="num">1</span> <span class="kwa">do</span> access.wait<span class="sym">(</span>mutex<span class="sym">)</span> <span class="kwa">end
</span><span class="line">   29 </span><span class="kwa">                data</span> = i
<span class="line">   30 </span>                count = <span class="num">1
</span><span class="line">   31 </span><span class="num"></span>                access.signal
<span class="line">   32 </span>            <span class="sym">}
</span><span class="line">   33 </span><span class="sym"></span>            produced <span class="sym">+</span>= <span class="num">1
</span><span class="line">   34 </span><span class="num"></span>        <span class="kwa">end
</span><span class="line">   35 </span><span class="kwa">    end
</span><span class="line">   36 </span><span class="kwa"></span>    producer.join
<span class="line">   37 </span>    consumer.join
<span class="line">   38 </span>    puts <span class="str">&quot;#{produced} #{consumed}&quot;</span>
<span class="line">   39 </span><span class="kwa">end
</span><span class="line">   40 </span><span class="kwa">
</span><span class="line">   41 </span><span class="kwa"></span>main<span class="sym">(</span>Integer<span class="sym">(</span><span class="kwa">ARGV</span>.shift <span class="sym">||</span> <span class="num">1</span><span class="sym">))</span>
