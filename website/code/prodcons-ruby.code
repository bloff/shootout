<span class="slc">#!/usr/bin/ruby</span>
<span class="slc"># -*- mode: ruby -*-</span>
<span class="slc"># $Id: prodcons-ruby.code,v 1.9 2005-12-31 16:45:41 bfulgham Exp $</span>
<span class="slc"># http://www.bagley.org/~doug/shootout/</span>

require <span class="str">'thread'</span>

<span class="kwa">def</span> <span class="kwd">main</span><span class="sym">(</span>n)
    mutex = Mutex<span class="sym">.</span>new
    access = ConditionVariable<span class="sym">.</span>new
    count = <span class="kwa">data</span> = consumed = produced = <span class="num">0</span>
    consumer = Thread<span class="sym">.</span>new <span class="kwa">do</span>
	i = <span class="num">0</span>
	loop <span class="kwa">do</span>
	    mutex<span class="sym">.</span>synchronize <span class="sym">{</span>
		<span class="kwa">while</span> count == <span class="num">0</span> <span class="kwa">do</span> access<span class="sym">.</span><span class="kwd">wait</span><span class="sym">(</span>mutex) <span class="kwa">end</span>
		i = <span class="kwa">data</span>
		count = <span class="num">0</span>
		access<span class="sym">.</span>signal
	    <span class="sym">}</span>
	    consumed <span class="sym">+</span>= <span class="num">1</span>
	    <span class="kwa">if</span> i == n <span class="kwa">then break end</span>
	<span class="kwa">end</span>
    <span class="kwa">end</span>
    producer = Thread<span class="sym">.</span>new <span class="kwa">do</span>
	<span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span> <span class="sym">..</span> n <span class="kwa">do</span>
	    mutex<span class="sym">.</span>synchronize <span class="sym">{</span>
		<span class="kwa">while</span> count == <span class="num">1</span> <span class="kwa">do</span> access<span class="sym">.</span><span class="kwd">wait</span><span class="sym">(</span>mutex) <span class="kwa">end</span>
		<span class="kwa">data</span> = i
		count = <span class="num">1</span>
		access<span class="sym">.</span>signal
	    <span class="sym">}</span>
	    produced <span class="sym">+</span>= <span class="num">1</span>
	<span class="kwa">end</span>
    <span class="kwa">end</span>
    producer<span class="sym">.</span>join
    consumer<span class="sym">.</span>join
    puts <span class="str">&quot;#{produced} #{consumed}&quot;</span>
<span class="kwa">end</span>

<span class="kwd">main</span><span class="sym">(</span><span class="kwd">Integer</span><span class="sym">(</span><span class="kwc">ARGV</span><span class="sym">.</span>shift <span class="sym">||</span> <span class="num">1</span>))
