#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

<span class="slc">; create a context/namespace to hold words</span>

<span class="sym">(</span>context <span class="str">'wc)</span>
<span class="str">(context MAIN)</span>
<span class="str"></span>
<span class="str">(define (main)</span>
<span class="str">;;	(HASH:make '</span>wc<span class="sym">)</span>

	<span class="sym">(</span><span class="kwa">while</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)</span>
		<span class="sym">(</span><span class="kwa">set</span> <span class="str">'data (parse (lower-case (current-line)) &quot;[^a-z]+&quot; 0))</span>
<span class="str">		(dolist (w data)</span>
<span class="str">			(if (set '</span>result <span class="sym">(</span><span class="kwa">eval</span> <span class="sym">(</span>symbol <span class="sym">(</span><span class="kwa">append</span> <span class="str">&quot;_&quot;</span> w<span class="sym">)</span> wc<span class="sym">) ))</span>
				<span class="sym">(</span><span class="kwa">set</span> <span class="sym">(</span>symbol <span class="sym">(</span><span class="kwa">append</span> <span class="str">&quot;_&quot;</span> w<span class="sym">)</span> wc<span class="sym">) (+</span> result <span class="num">1</span><span class="sym">))</span>
				<span class="sym">(</span><span class="kwa">set</span> <span class="sym">(</span>symbol <span class="sym">(</span><span class="kwa">append</span> <span class="str">&quot;_&quot;</span> w<span class="sym">)</span> wc<span class="sym">)</span> <span class="num">1</span><span class="sym">))))</span>

	<span class="sym">(</span>dolist <span class="sym">(</span>w <span class="sym">(</span>symbols wc<span class="sym">))</span>
		<span class="sym">(</span><span class="kwa">set</span> <span class="str">'wrd (name w))</span>
<span class="str">		(if (and (starts-with wrd &quot;_&quot;) (!= &quot;_&quot; wrd))</span>
<span class="str">			(push (list (eval w) (slice wrd 1) ) words) ))</span>
<span class="str"></span>
<span class="str">	(dolist (w (reverse (sort words)))</span>
<span class="str">		(println (format &quot;%7d %s&quot; (first w) (last w))))</span>
<span class="str">	)</span>
<span class="str"></span>
<span class="str">(main)</span>
<span class="str"></span>
<span class="str">;; eof</span>
<span class="str"></span>
