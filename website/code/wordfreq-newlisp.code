<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp
<span class="line">    2 </span>
<span class="line">    3 </span><span class="slc">; create a context/namespace to hold words
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">(</span>context <span class="str">'wc)
</span><span class="line">    6 </span><span class="str">(context MAIN)
</span><span class="line">    7 </span><span class="str">
</span><span class="line">    8 </span><span class="str">(define (main)
</span><span class="line">    9 </span><span class="str">;;        (HASH:make '</span>wc<span class="sym">)
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym">        (</span><span class="kwa">while</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)
</span><span class="line">   12 </span><span class="sym">                (</span><span class="kwa">set</span> <span class="str">'data (parse (lower-case (current-line)) &quot;[^a-z]+&quot; 0))
</span><span class="line">   13 </span><span class="str">                (dolist (w data)
</span><span class="line">   14 </span><span class="str">                        (if (set '</span>result <span class="sym">(</span><span class="kwa">eval</span> <span class="sym">(</span>symbol <span class="sym">(</span><span class="kwa">append</span> <span class="str">&quot;_&quot;</span> w<span class="sym">)</span> wc<span class="sym">) ))
</span><span class="line">   15 </span><span class="sym">                                (</span><span class="kwa">set</span> <span class="sym">(</span>symbol <span class="sym">(</span><span class="kwa">append</span> <span class="str">&quot;_&quot;</span> w<span class="sym">)</span> wc<span class="sym">) (+</span> result <span class="num">1</span><span class="sym">))
</span><span class="line">   16 </span><span class="sym">                                (</span><span class="kwa">set</span> <span class="sym">(</span>symbol <span class="sym">(</span><span class="kwa">append</span> <span class="str">&quot;_&quot;</span> w<span class="sym">)</span> wc<span class="sym">)</span> <span class="num">1</span><span class="sym">))))
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym">        (</span>dolist <span class="sym">(</span>w <span class="sym">(</span>symbols wc<span class="sym">))
</span><span class="line">   19 </span><span class="sym">                (</span><span class="kwa">set</span> <span class="str">'wrd (name w))
</span><span class="line">   20 </span><span class="str">                (if (and (starts-with wrd &quot;_&quot;) (!= &quot;_&quot; wrd))
</span><span class="line">   21 </span><span class="str">                        (push (list (eval w) (slice wrd 1) ) words) ))
</span><span class="line">   22 </span><span class="str">
</span><span class="line">   23 </span><span class="str">        (dolist (w (reverse (sort words)))
</span><span class="line">   24 </span><span class="str">                (println (format &quot;%7d %s&quot; (first w) (last w))))
</span><span class="line">   25 </span><span class="str">        )
</span><span class="line">   26 </span><span class="str">
</span><span class="line">   27 </span><span class="str">(main)
</span><span class="line">   28 </span><span class="str">
</span><span class="line">   29 </span><span class="str">;; eof
</span><span class="line">   30 </span><span class="str"></span>
