#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

<span class="slc">; create a context/namespace to hold words
</span>
<span class="sym">(</span>context <span class="str">'wc)
(context MAIN)

(define (main)
;;	(HASH:make '</span>wc<span class="sym">)

	(</span><span class="kwa">while</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)
		(</span><span class="kwa">set</span> <span class="str">'data (parse (lower-case (current-line)) &quot;[^a-z]+&quot; 0))
		(dolist (w data)
			(if (set '</span>result <span class="sym">(</span><span class="kwa">eval</span> <span class="sym">(</span>symbol <span class="sym">(</span><span class="kwa">append</span> <span class="str">&quot;_&quot;</span> w<span class="sym">)</span> wc<span class="sym">) ))
				(</span><span class="kwa">set</span> <span class="sym">(</span>symbol <span class="sym">(</span><span class="kwa">append</span> <span class="str">&quot;_&quot;</span> w<span class="sym">)</span> wc<span class="sym">) (+</span> result <span class="num">1</span><span class="sym">))
				(</span><span class="kwa">set</span> <span class="sym">(</span>symbol <span class="sym">(</span><span class="kwa">append</span> <span class="str">&quot;_&quot;</span> w<span class="sym">)</span> wc<span class="sym">)</span> <span class="num">1</span><span class="sym">))))

	(</span>dolist <span class="sym">(</span>w <span class="sym">(</span>symbols wc<span class="sym">))
		(</span><span class="kwa">set</span> <span class="str">'wrd (name w))
		(if (and (starts-with wrd &quot;_&quot;) (!= &quot;_&quot; wrd))
			(push (list (eval w) (slice wrd 1) ) words) ))

	(dolist (w (reverse (sort words)))
		(println (format &quot;%7d %s&quot; (first w) (last w))))
	)

(main)

;; eof
</span>
