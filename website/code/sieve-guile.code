#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: sieve-guile.code,v 1.6 2005-11-06 23:11:40 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>
<span class="slc">;;; with help from Benedikt Rosenau</span>

<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="sym">-</span><span class="num">9</span> format<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))</span>
	<span class="sym">(</span>count <span class="num">0</span><span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">while</span> <span class="sym">(&gt;</span> n <span class="num">0</span><span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> n <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))</span>
      <span class="sym">(</span>let <span class="sym">((</span>flags <span class="sym">(</span>make<span class="sym">-</span>vector <span class="num">8192</span> #t<span class="sym">)))</span>
	<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> count <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>do <span class="sym">((</span>i <span class="num">2</span> <span class="sym">(+</span> <span class="num">1</span> i<span class="sym">)))</span>
	    <span class="sym">((&gt;=</span> i <span class="num">8192</span><span class="sym">))</span>
	  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>vector<span class="sym">-</span>ref flags i<span class="sym">)</span>
	      <span class="sym">(</span>begin
		<span class="sym">(</span>do <span class="sym">((</span>k <span class="sym">(+</span> i i<span class="sym">) (+</span> k i<span class="sym">)))</span>
		    <span class="sym">((&gt;=</span> k <span class="num">8192</span><span class="sym">))</span>
		  <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> flags k #f<span class="sym">))</span>
		<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> count <span class="sym">(+</span> <span class="num">1</span> count<span class="sym">)))))))</span>
    <span class="sym">(</span>display <span class="sym">(</span>format <span class="str">&quot;Count: ~D</span><span class="esc">\n</span><span class="str">&quot;</span> count<span class="sym">))))</span>
