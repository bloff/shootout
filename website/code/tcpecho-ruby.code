<span class="slc">#!/usr/bin/ruby</span>
<span class="slc">#### The Great Computer Language Shootout</span>
<span class="slc">#### http://shootout.alioth.debian.org/</span>
<span class="slc">####</span>
<span class="slc">#### Contributed by Robbert Haarman</span>
<span class="slc">#### Modified by Ian Osgood</span>

require <span class="str">'socket'</span>

N = <span class="kwd">Integer</span><span class="sym">(</span><span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">10</span>)
M = <span class="num">6400</span>
REPLY_SIZE = <span class="num">64</span>
REQUEST_SIZE = <span class="num">1</span>
Host = <span class="str">'localhost'</span>
Port = <span class="num">12345</span>

sock = TCPServer<span class="sym">.</span>new Host<span class="sym">,</span> Port
<span class="kwa">if</span> fork
	<span class="slc"># Parent process</span>
	conn = sock<span class="sym">.</span>accept
	reply = <span class="str">'x'</span> <span class="sym">*</span> REPLY_SIZE
	<span class="kwa">while true</span>
		request = conn<span class="sym">.</span>read REQUEST_SIZE
		<span class="kwa">break if</span> request == <span class="kwa">nil</span>
		conn<span class="sym">.</span>write reply
	<span class="kwa">end</span>
<span class="kwa">else</span>
	<span class="slc"># Child process</span>
	conn = TCPSocket<span class="sym">.</span>new Host<span class="sym">,</span> Port
	replies = <span class="num">0</span>
	bytes = <span class="num">0</span>
	n = N <span class="sym">*</span> M
	request = <span class="str">'x'</span> <span class="sym">*</span> REQUEST_SIZE
	<span class="kwa">while</span> n <span class="sym">&gt;</span> <span class="num">0</span>
		n = n <span class="sym">-</span> <span class="num">1</span>
		conn<span class="sym">.</span>write request
		reply = conn<span class="sym">.</span>read REPLY_SIZE
		replies = replies <span class="sym">+</span> <span class="num">1</span>
		bytes = bytes <span class="sym">+</span> reply<span class="sym">.</span>length
	<span class="kwa">end</span>
	conn<span class="sym">.</span>close
	puts <span class="str">&quot;replies: #{replies}</span><span class="esc">\t</span><span class="str">bytes: #{bytes}&quot;</span>
<span class="kwa">end</span>

sock<span class="sym">.</span>close
