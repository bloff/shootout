#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">;; strcat.scm</span>

<span class="slc">;;; SPECIFICATION</span>

<span class="slc">;For this test, each program should be implemented in the same way,</span>
<span class="slc">;according to the following specification.</span>
<span class="slc">;</span>
<span class="slc">;    pseudocode for strcat test</span>
<span class="slc">;</span>
<span class="slc">;   s is initialized to the null string</span>
<span class="slc">;   repeat N times:</span>
<span class="slc">;     append &quot;hello\n&quot; to s</span>
<span class="slc">;   count the number of individual characters in s</span>
<span class="slc">;   print the count</span>

<span class="slc">;  There should be N distinct string append statements done in a loop.</span>
<span class="slc">;  After each append the resultant string should be 6 characters</span>
<span class="slc">;  longer (the length of &quot;hello\n&quot;).</span>
<span class="slc">;  s should be a string, string buffer, or character array.</span>
<span class="slc">;  The program should not construct a list of strings and join it.</span>

<span class="sym">(</span>define hello <span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

<span class="slc">;; Simple slow version</span>
<span class="slc">;; This is surprisingly slow</span>


<span class="slc">;(define (main args)</span>
<span class="slc">;  (let* ((n (or (and (= (length args) 2) (string-&gt;number (cadr args))) 1))</span>
<span class="slc">;  (str &quot;&quot;))</span>
<span class="slc">;    (do ((i 0 (+ i 1)))</span>
<span class="slc">; ((= i n))</span>
<span class="slc">;      (set! str (string-append str hello)))</span>
<span class="slc">;    (display (string-length str))</span>
<span class="slc">;    (newline)))</span>


<span class="slc">;; Quote from Bigloo documentation</span>

<span class="slc">;; (blit-string! string1 o1 string2 o2 len)</span>
<span class="slc">;; Fill string s2 starting at position o2 with len characters</span>
<span class="slc">;; taken out of string s1 from position o1.</span>
<span class="slc">;;</span>
<span class="slc">;; (let ((s (make-string 20 #\-)))</span>
<span class="slc">;;         (blit-string! &quot;toto&quot; 0 s 16 4)</span>
<span class="slc">;;         s)</span>
<span class="slc">;;    =&gt; &quot;----------------toto&quot;</span>


<span class="sym">(</span>define <span class="sym">(</span>blit<span class="sym">-</span>string<span class="sym">!</span> s1 o1 s2 o2 len<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">((</span>o1 o1 <span class="sym">(+</span> o1 <span class="num">1</span><span class="sym">))</span>
       <span class="sym">(</span>o2 o2 <span class="sym">(+</span> o2 <span class="num">1</span><span class="sym">))</span>
       <span class="sym">(</span>len len <span class="sym">(-</span> len <span class="num">1</span><span class="sym">)))</span>

      <span class="sym">((=</span> len <span class="num">0</span><span class="sym">))</span>

    <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> s2 o2 <span class="sym">(</span>string<span class="sym">-</span>ref s1 o1<span class="sym">))))</span>

<span class="slc">;; Serranos version (works like a charm)</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span>
                <span class="num">1</span><span class="sym">))</span>
  <span class="sym">(</span>i <span class="num">0</span><span class="sym">)</span>
  <span class="sym">(</span>buflen <span class="num">32</span><span class="sym">)</span>
  <span class="sym">(</span>strbuf <span class="sym">(</span>make<span class="sym">-</span>string buflen<span class="sym">))</span>
  <span class="sym">(</span>stufflen <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> hello<span class="sym">))</span>
  <span class="sym">(</span>stuff hello<span class="sym">)</span>
  <span class="sym">(</span>stuffstart <span class="num">0</span><span class="sym">))</span>

    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
         <span class="sym">((=</span> i n<span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;= (+</span> stufflen stuffstart<span class="sym">)</span> buflen<span class="sym">)</span>
   <span class="sym">(</span>let<span class="sym">* ((</span>nbuflen <span class="sym">(*</span> <span class="num">2</span> buflen<span class="sym">))</span>
   <span class="sym">(</span>nstrbuf <span class="sym">(</span>make<span class="sym">-</span>string nbuflen<span class="sym">)))</span>
     <span class="sym">(</span>blit<span class="sym">-</span>string<span class="sym">!</span> strbuf <span class="num">0</span> nstrbuf <span class="num">0</span> buflen<span class="sym">)</span>
     <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> buflen nbuflen<span class="sym">)</span>
     <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> strbuf nstrbuf<span class="sym">)))</span>
      <span class="sym">(</span>blit<span class="sym">-</span>string<span class="sym">!</span> stuff <span class="num">0</span> strbuf stuffstart stufflen<span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> stuffstart <span class="sym">(+</span> stuffstart stufflen<span class="sym">)))</span>

    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> strbuf <span class="sym">(</span>substring strbuf <span class="num">0</span> stuffstart<span class="sym">))</span>

    <span class="sym">(</span>display <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> strbuf<span class="sym">))</span>
    <span class="sym">(</span>newline<span class="sym">)))</span>

<span class="sym">(</span>time <span class="sym">(</span>main <span class="str">'(&quot;strcat&quot; &quot;40000&quot;)))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str"></span>
