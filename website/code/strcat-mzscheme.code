#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu
<span class="slc">;; strcat.scm</span>

<span class="slc">;;; SPECIFICATION</span>

<span class="slc">;For this test, each program should be implemented in the same way,</span>
<span class="slc">;according to the following specification.</span>
<span class="slc">;</span>
<span class="slc">;    pseudocode for strcat test</span>
<span class="slc">;</span>
<span class="slc">;   s is initialized to the null string</span>
<span class="slc">;   repeat N times:</span>
<span class="slc">;     append &quot;hello\n&quot; to s</span>
<span class="slc">;   count the number of individual characters in s</span>
<span class="slc">;   print the count</span>

<span class="slc">;  There should be N distinct string append statements done in a loop.</span>
<span class="slc">;  After each append the resultant string should be 6 characters</span>
<span class="slc">;  longer (the length of &quot;hello\n&quot;).</span>
<span class="slc">;  s should be a string, string buffer, or character array.</span>
<span class="slc">;  The program should not construct a list of strings and join it.</span>

<span class="sym">(</span>module <span class="kwa">strcat</span> mzscheme
  <span class="sym">(</span>define p <span class="sym">(</span><span class="kwa">open</span><span class="sym">-</span>output<span class="sym">-</span>bytes<span class="sym">))</span>

  <span class="sym">(</span>define hello #<span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

  <span class="sym">(</span>let loop <span class="sym">([</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number
		 <span class="sym">(</span>vector<span class="sym">-</span>ref <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)</span> <span class="num">0</span><span class="sym">))])</span>
    <span class="sym">(</span>unless <span class="sym">(</span>zero? n<span class="sym">)</span>
      <span class="sym">(</span>display hello p<span class="sym">)</span>
      <span class="slc">;; At this point, (get-output-bytes p) would</span>
      <span class="slc">;; return the byte string accumulated so far.</span>
      <span class="sym">(</span>loop <span class="sym">(</span>sub1 n<span class="sym">))))</span>

  <span class="sym">(</span>printf <span class="str">&quot;~a</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>file<span class="sym">-</span>position p<span class="sym">)))</span>
