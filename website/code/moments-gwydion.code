<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
module:         moments
synopsis:       implementation of <B><FONT COLOR="#BC8F8F">&quot;Statistical Moments&quot;</FONT></B> benchmark
author:         Peter Hinely
copyright:      public <B><FONT COLOR="#5F9EA0">domain</FONT></B>
use-libraries:  common-dylan, io, transcendental
use-modules:    common-dylan, standard-io, streams, format-out, transcendental


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">constant</FONT></B> <B><FONT COLOR="#228B22">&lt;vector-of-doubles&gt;</FONT></B> = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">limited</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;simple-vector&gt;</FONT></B>, <B><FONT COLOR="#5F9EA0">of:</FONT></B> <B><FONT COLOR="#228B22">&lt;double-float&gt;</FONT></B>);


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">kth-smallest </FONT></I></B></FONT></B>(a <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;vector-of-doubles&gt;</FONT></B>, k <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B>) <B><FONT COLOR="#A020F0">=&gt;</FONT></B> kth-smallest <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;double-float&gt;</FONT></B>;
  <B><FONT COLOR="#A020F0">let</FONT></B> L = 0;
  <B><FONT COLOR="#A020F0">let</FONT></B> R = A.size - 1;
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">while </FONT></I></B></FONT></B>(L &lt; R)
     <B><FONT COLOR="#A020F0">let</FONT></B> X = A[K];
     <B><FONT COLOR="#A020F0">let</FONT></B> I = L;
     <B><FONT COLOR="#A020F0">let</FONT></B> J = R;
     <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">until </FONT></I></B></FONT></B>((J &lt; K) | (K &lt; I))
       <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">while </FONT></I></B></FONT></B>(A[I] &lt; X) I <B><FONT COLOR="#5F9EA0">:</FONT></B>= I + 1; <B><FONT COLOR="#A020F0">end</FONT></B>;
       <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">while </FONT></I></B></FONT></B>(X &lt; A[J]) J <B><FONT COLOR="#5F9EA0">:</FONT></B>= J - 1; <B><FONT COLOR="#A020F0">end</FONT></B>;
       <B><FONT COLOR="#A020F0">let</FONT></B> W = A[I]; A[I] <B><FONT COLOR="#5F9EA0">:</FONT></B>= A[J]; A[J] <B><FONT COLOR="#5F9EA0">:</FONT></B>= W;
       I <B><FONT COLOR="#5F9EA0">:</FONT></B>= I + 1; J <B><FONT COLOR="#5F9EA0">:</FONT></B>= J - 1;
     <B><FONT COLOR="#A020F0">end</FONT></B>;
     <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">if </FONT></I></B></FONT></B>(J &lt; K) L <B><FONT COLOR="#5F9EA0">:</FONT></B>= I; <B><FONT COLOR="#A020F0">end</FONT></B>;
     <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">if </FONT></I></B></FONT></B>(K &lt; I) R <B><FONT COLOR="#5F9EA0">:</FONT></B>= J; <B><FONT COLOR="#A020F0">end</FONT></B>;
  <B><FONT COLOR="#A020F0">end</FONT></B>;
  a[k];
<B><FONT COLOR="#A020F0">end</FONT></B>; 


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">maximum </FONT></I></B></FONT></B>(vec <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;vector-of-doubles&gt;</FONT></B>, limit <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B>) <B><FONT COLOR="#A020F0">=&gt;</FONT></B> res <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;double-float&gt;</FONT></B>;
  <B><FONT COLOR="#A020F0">let</FONT></B> current-max = vec[0];
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(i <B><FONT COLOR="#A020F0">from</FONT></B> 1 <B><FONT COLOR="#A020F0">below</FONT></B> limit)
    <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">if </FONT></I></B></FONT></B>(vec[i] &gt; current-max)
       current-max <B><FONT COLOR="#5F9EA0">:</FONT></B>= vec[i];
    <B><FONT COLOR="#A020F0">end</FONT></B>;
  <B><FONT COLOR="#A020F0">end</FONT></B>;
  current-max;
<B><FONT COLOR="#A020F0">end</FONT></B>;


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main </FONT></I></B></FONT></B>() <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">=&gt;</FONT></I></B></FONT></B> ()
  <B><FONT COLOR="#A020F0">let</FONT></B> lines = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">make</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;stretchy-vector&gt;</FONT></B>);

  <B><FONT COLOR="#A020F0">let</FONT></B> line = #f;
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">while </FONT></I></B></FONT></B>(line <B><FONT COLOR="#5F9EA0">:</FONT></B>= <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">read-line</FONT></I></B></FONT></B>(*standard-input*, <B><FONT COLOR="#5F9EA0">on-end-of-stream:</FONT></B> #f))
    <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">add!</FONT></I></B></FONT></B>(lines, line);
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  <B><FONT COLOR="#A020F0">let</FONT></B> nums = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">make</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;vector-of-doubles&gt;</FONT></B>, <B><FONT COLOR="#5F9EA0">size:</FONT></B> lines.size, <B><FONT COLOR="#5F9EA0">fill:</FONT></B> 0.0);
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">map-into</FONT></I></B></FONT></B>(nums, string-to-float, lines);

  <B><FONT COLOR="#A020F0">let</FONT></B> sum = 0.0;

  <I><FONT COLOR="#B22222">// use a for loop instead of &quot;reduce1&quot; so &quot;+&quot; can be resolved.
</FONT></I>  <I><FONT COLOR="#B22222">// To-do: test that this is really necessary after we fix all the other gf_calls
</FONT></I>  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(num <B><FONT COLOR="#A020F0">in</FONT></B> nums)
    sum <B><FONT COLOR="#5F9EA0">:</FONT></B>= sum + num;
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  <B><FONT COLOR="#A020F0">let</FONT></B> n = nums.size;
  <B><FONT COLOR="#A020F0">let</FONT></B> mean = sum / n;
  <B><FONT COLOR="#A020F0">let</FONT></B> average-deviation = 0.0;
  <B><FONT COLOR="#A020F0">let</FONT></B> variance = 0.0;
  <B><FONT COLOR="#A020F0">let</FONT></B> skew = 0.0;
  <B><FONT COLOR="#A020F0">let</FONT></B> kurtosis = 0.0;

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(num <B><FONT COLOR="#A020F0">in</FONT></B> nums)
    <B><FONT COLOR="#A020F0">let</FONT></B> deviation = num - mean;
    average-deviation <B><FONT COLOR="#5F9EA0">:</FONT></B>= average-deviation + <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">abs</FONT></I></B></FONT></B>(deviation);
    variance <B><FONT COLOR="#5F9EA0">:</FONT></B>= variance <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">+ </FONT></I></B></FONT></B>(deviation ^ 2);
    skew <B><FONT COLOR="#5F9EA0">:</FONT></B>= skew <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">+ </FONT></I></B></FONT></B>(deviation ^ 3);
    kurtosis <B><FONT COLOR="#5F9EA0">:</FONT></B>= kurtosis <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">+ </FONT></I></B></FONT></B>(deviation ^ 4);
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  average-deviation <B><FONT COLOR="#5F9EA0">:</FONT></B>= average-deviation / n;
  variance <B><FONT COLOR="#5F9EA0">:</FONT></B>= variance <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">/ </FONT></I></B></FONT></B>(n - 1);
  <B><FONT COLOR="#A020F0">let</FONT></B> standard-deviation = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">sqrt</FONT></I></B></FONT></B>(variance);

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">if </FONT></I></B></FONT></B>(variance &gt; 0.0)
    skew <B><FONT COLOR="#5F9EA0">:</FONT></B>= skew <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">/ </FONT></I></B></FONT></B>(n * variance * standard-deviation);
    kurtosis <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">:= </FONT></I></B></FONT></B>(kurtosis <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">/ </FONT></I></B></FONT></B>(n * variance * variance)) - 3.0;
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  <B><FONT COLOR="#A020F0">let</FONT></B> mid = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">floor/</FONT></I></B></FONT></B>(n, 2);

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">kth-smallest</FONT></I></B></FONT></B>(nums, mid);

  <B><FONT COLOR="#A020F0">let</FONT></B> median = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">if </FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">even?</FONT></I></B></FONT></B>(n))
                 <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">floor/</FONT></I></B></FONT></B>(nums[mid] + <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">maximum</FONT></I></B></FONT></B>(nums, mid), 2);
               <B><FONT COLOR="#A020F0">else</FONT></B>
                 nums[mid];
               <B><FONT COLOR="#A020F0">end</FONT></B>;

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;n:                  %d\n&quot;</FONT></B>, n);
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;median:             %=\n&quot;</FONT></B>, median);
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;mean:               %=\n&quot;</FONT></B>, mean);
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;average_deviation:  %=\n&quot;</FONT></B>, average-deviation);
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;standard_deviation: %=\n&quot;</FONT></B>, standard-deviation);
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;variance:           %=\n&quot;</FONT></B>, variance);
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;skew:               %=\n&quot;</FONT></B>, skew);
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;kurtosis:           %=\n&quot;</FONT></B>, kurtosis);
<B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B>;


<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main</FONT></I></B></FONT></B>();</pre></td></tr></table>
