<span class="kwb">module</span><span class="sym">:</span>    moments
<span class="kwb">synopsis</span><span class="sym">:</span>  implementation of <span class="str">&quot;Statistical Moments&quot;</span> benchmark
<span class="kwb">author</span><span class="sym">:</span>    Peter Hinely
           Anthony Borla <span class="sym">[</span>added kludge <span class="kwa">to</span> correct output format<span class="sym">]</span>
<span class="kwb">copyright</span><span class="sym">:</span> public <span class="kwa">domain</span>
<span class="kwa">use</span><span class="sym">-</span>libraries<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> io<span class="sym">,</span> transcendental
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> standard<span class="sym">-</span>io<span class="sym">,</span> streams<span class="sym">,</span> format<span class="sym">-</span>out<span class="sym">,</span> transcendental


<span class="kwa">define constant</span> <span class="kwa">&lt;vector-of-doubles&gt;</span> <span class="sym">=</span> <span class="kwd">limited</span><span class="sym">(</span><span class="kwa">&lt;simple-vector&gt;</span><span class="sym">,</span> of<span class="sym">:</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">);</span>


<span class="kwa">define function</span> kth<span class="sym">-</span><span class="kwd">smallest</span> <span class="sym">(</span>a <span class="sym">::</span> <span class="kwa">&lt;vector-of-doubles&gt;</span><span class="sym">,</span> k <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; kth<span class="sym">-</span>smallest <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">;</span>
  <span class="kwa">let</span> L <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">let</span> R <span class="sym">=</span> A.size <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">while</span> <span class="sym">(</span>L <span class="kwa">&lt; R)</span>
     <span class="kwa">let</span> X <span class="sym">=</span> A<span class="sym">[</span>K<span class="sym">];</span>
     <span class="kwa">let</span> I <span class="sym">=</span> L<span class="sym">;</span>
     <span class="kwa">let</span> J <span class="sym">=</span> R<span class="sym">;</span>
     <span class="kwa">until</span> <span class="sym">((</span>J <span class="kwa">&lt; K) | (K &lt; I))</span>
       <span class="kwa">while</span> <span class="sym">(</span>A<span class="sym">[</span>I<span class="sym">]</span> <span class="kwa">&lt; X) I := I +</span> <span class="num">1</span><span class="kwa">; end;</span>
       <span class="kwa">while</span> <span class="sym">(</span>X <span class="kwa">&lt; A[J]) J := J -</span> <span class="num">1</span><span class="kwa">; end;</span>
       <span class="kwa">let</span> W <span class="sym">=</span> A<span class="sym">[</span>I<span class="sym">];</span> A<span class="sym">[</span>I<span class="sym">] :=</span> A<span class="sym">[</span>J<span class="sym">];</span> A<span class="sym">[</span>J<span class="sym">] :=</span> W<span class="sym">;</span>
       I <span class="sym">:=</span> I <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> J <span class="sym">:=</span> J <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
     <span class="kwa">end</span><span class="sym">;</span>
     <span class="kwa">if</span> <span class="sym">(</span>J <span class="kwa">&lt; K) L := I; end;</span>
     <span class="kwa">if</span> <span class="sym">(</span>K <span class="kwa">&lt; I) R := J; end;</span>
  <span class="kwa">end</span><span class="sym">;</span>
  a<span class="sym">[</span>k<span class="sym">];</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">define function</span> <span class="kwd">maximum</span> <span class="sym">(</span>vec <span class="sym">::</span> <span class="kwa">&lt;vector-of-doubles&gt;</span><span class="sym">,</span> limit <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; res <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">;</span>
  <span class="kwa">let</span> current<span class="sym">-</span>max <span class="sym">=</span> vec<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">below</span> limit<span class="sym">)</span>
    <span class="kwa">if</span> <span class="sym">(</span>vec<span class="sym">[</span>i<span class="sym">]</span> &gt; current<span class="sym">-</span>max<span class="sym">)</span>
       current<span class="sym">-</span>max <span class="sym">:=</span> vec<span class="sym">[</span>i<span class="sym">];</span>
    <span class="kwa">end</span><span class="sym">;</span>
  <span class="kwa">end</span><span class="sym">;</span>
  current<span class="sym">-</span>max<span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">define function</span> <span class="kwd">main</span> <span class="sym">() =</span>&gt; <span class="sym">();</span>
  <span class="kwa">let</span> lines <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;stretchy-vector&gt;</span><span class="sym">);</span>

  <span class="kwa">let</span> line <span class="sym">=</span> #f<span class="sym">;</span>
  <span class="kwa">while</span> <span class="sym">(</span>line <span class="sym">:=</span> read<span class="sym">-</span><span class="kwd">line</span><span class="sym">(*</span>standard<span class="sym">-</span>input<span class="sym">*,</span> on<span class="sym">-</span><span class="kwa">end</span><span class="sym">-</span>of<span class="sym">-</span>stream<span class="sym">:</span> #f<span class="sym">))</span>
    add<span class="sym">!(</span>lines<span class="sym">,</span> line<span class="sym">);</span>
  <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwa">let</span> nums <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;vector-of-doubles&gt;</span><span class="sym">,</span> size<span class="sym">:</span> lines.size<span class="sym">,</span> fill<span class="sym">:</span> <span class="num">0.0</span><span class="sym">);</span>
  map<span class="sym">-</span><span class="kwd">into</span><span class="sym">(</span>nums<span class="sym">,</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>float<span class="sym">,</span> lines<span class="sym">);</span>

  <span class="kwa">let</span> sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>

  <span class="slc">// use a for loop instead of &quot;reduce1&quot; so &quot;+&quot; can be resolved.</span>
  <span class="slc">// To-do: test that this is really necessary after we fix all the other gf_calls</span>
  <span class="kwa">for</span> <span class="sym">(</span>num <span class="kwa">in</span> nums<span class="sym">)</span>
    sum <span class="sym">:=</span> sum <span class="sym">+</span> num<span class="sym">;</span>
  <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwa">let</span> n <span class="sym">=</span> nums.size<span class="sym">;</span>
  <span class="kwa">let</span> mean <span class="sym">=</span> sum <span class="sym">/</span> n<span class="sym">;</span>
  <span class="kwa">let</span> average<span class="sym">-</span>deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">let</span> variance <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">let</span> skew <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">let</span> kurtosis <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>

  <span class="kwa">for</span> <span class="sym">(</span>num <span class="kwa">in</span> nums<span class="sym">)</span>
    <span class="kwa">let</span> deviation <span class="sym">=</span> num <span class="sym">-</span> mean<span class="sym">;</span>
    average<span class="sym">-</span>deviation <span class="sym">:=</span> average<span class="sym">-</span>deviation <span class="sym">+</span> <span class="kwd">abs</span><span class="sym">(</span>deviation<span class="sym">);</span>
    variance <span class="sym">:=</span> variance <span class="sym">+ (</span>deviation ^ <span class="num">2</span><span class="sym">);</span>
    skew <span class="sym">:=</span> skew <span class="sym">+ (</span>deviation ^ <span class="num">3</span><span class="sym">);</span>
    kurtosis <span class="sym">:=</span> kurtosis <span class="sym">+ (</span>deviation ^ <span class="num">4</span><span class="sym">);</span>
  <span class="kwa">end</span><span class="sym">;</span>

  average<span class="sym">-</span>deviation <span class="sym">:=</span> average<span class="sym">-</span>deviation <span class="sym">/</span> n<span class="sym">;</span>
  variance <span class="sym">:=</span> variance <span class="sym">/ (</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwa">let</span> standard<span class="sym">-</span>deviation <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span>variance<span class="sym">);</span>

  <span class="kwa">if</span> <span class="sym">(</span>variance &gt; <span class="num">0.0</span><span class="sym">)</span>
    skew <span class="sym">:=</span> skew <span class="sym">/ (</span>n <span class="sym">*</span> variance <span class="sym">*</span> standard<span class="sym">-</span>deviation<span class="sym">);</span>
    kurtosis <span class="sym">:= (</span>kurtosis <span class="sym">/ (</span>n <span class="sym">*</span> variance <span class="sym">*</span> variance<span class="sym">)) -</span> <span class="num">3.0</span><span class="sym">;</span>
  <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwa">let</span> mid <span class="sym">=</span> floor<span class="sym">/(</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>

  kth<span class="sym">-</span><span class="kwd">smallest</span><span class="sym">(</span>nums<span class="sym">,</span> mid<span class="sym">);</span>

  <span class="kwa">let</span> median <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>even?<span class="sym">(</span>n<span class="sym">))</span>
                 floor<span class="sym">/(</span>nums<span class="sym">[</span>mid<span class="sym">] +</span> <span class="kwd">maximum</span><span class="sym">(</span>nums<span class="sym">,</span> mid<span class="sym">),</span> <span class="num">2</span><span class="sym">);</span>
               <span class="kwa">else</span>
                 nums<span class="sym">[</span>mid<span class="sym">];</span>
               <span class="kwa">end</span><span class="sym">;</span>


  <span class="kwa">local method</span> <span class="kwd">padr</span><span class="sym">(</span>s <span class="sym">::</span> <span class="kwa">&lt;string&gt;</span><span class="sym">,</span> padlen <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> c <span class="sym">::</span> <span class="kwa">&lt;character&gt;</span><span class="sym">) =</span>&gt; <span class="sym">(</span><span class="kwa">&lt;string&gt;</span><span class="sym">);</span>
    <span class="kwa">let</span> reqlen <span class="sym">=</span> <span class="kwd">size</span><span class="sym">(</span>s<span class="sym">) -</span> padlen<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>reqlen <span class="kwa">&lt;</span> <span class="num">0</span><span class="kwa">)</span>
      s <span class="sym">:=</span> <span class="kwd">concatenate</span><span class="sym">(</span>s<span class="sym">,</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;string&gt;</span><span class="sym">,</span> size<span class="sym">:</span> <span class="kwd">abs</span><span class="sym">(</span>reqlen<span class="sym">),</span> fill<span class="sym">:</span> c<span class="sym">));</span>
    <span class="kwa">end if</span><span class="sym">;</span>
    s<span class="sym">;</span>
  <span class="kwa">end method</span> padr<span class="sym">;</span>


  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;n:                  %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">);</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;median:             %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">padr</span><span class="sym">(</span>format<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span><span class="kwd">string</span><span class="sym">(</span><span class="str">&quot;%.6f&quot;</span><span class="sym">,</span> median<span class="sym">),</span> <span class="num">6</span><span class="sym">,</span> <span class="str">'0'</span><span class="sym">));</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;mean:               %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">padr</span><span class="sym">(</span>format<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span><span class="kwd">string</span><span class="sym">(</span><span class="str">&quot;%.6f&quot;</span><span class="sym">,</span> mean<span class="sym">),</span> <span class="num">6</span><span class="sym">,</span> <span class="str">'0'</span><span class="sym">));</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;average_deviation:  %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">padr</span><span class="sym">(</span>format<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span><span class="kwd">string</span><span class="sym">(</span><span class="str">&quot;%.6f&quot;</span><span class="sym">,</span> average<span class="sym">-</span>deviation<span class="sym">),</span> <span class="num">6</span><span class="sym">,</span> <span class="str">'0'</span><span class="sym">));</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;standard_deviation: %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">padr</span><span class="sym">(</span>format<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span><span class="kwd">string</span><span class="sym">(</span><span class="str">&quot;%.6f&quot;</span><span class="sym">,</span> standard<span class="sym">-</span>deviation<span class="sym">),</span> <span class="num">6</span><span class="sym">,</span> <span class="str">'0'</span><span class="sym">));</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;variance:           %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">padr</span><span class="sym">(</span>format<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span><span class="kwd">string</span><span class="sym">(</span><span class="str">&quot;%.6f&quot;</span><span class="sym">,</span> variance<span class="sym">),</span> <span class="num">6</span><span class="sym">,</span> <span class="str">'0'</span><span class="sym">));</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;skew:               %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">padr</span><span class="sym">(</span>format<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span><span class="kwd">string</span><span class="sym">(</span><span class="str">&quot;%.6f&quot;</span><span class="sym">,</span> skew<span class="sym">),</span> <span class="num">6</span><span class="sym">,</span> <span class="str">'0'</span><span class="sym">));</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;kurtosis:           %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">padr</span><span class="sym">(</span>format<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span><span class="kwd">string</span><span class="sym">(</span><span class="str">&quot;%.6f&quot;</span><span class="sym">,</span> kurtosis<span class="sym">),</span> <span class="num">6</span><span class="sym">,</span> <span class="str">'0'</span><span class="sym">));</span>
<span class="kwa">end function</span><span class="sym">;</span>


<span class="kwd">main</span><span class="sym">();</span>

