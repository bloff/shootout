<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org
</span><span class="slc">--
</span><span class="slc">-- contributed by Jim Rogers
</span>
<span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;
</span><span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;

</span><span class="kwa">procedure</span> Nsieve <span class="kwa">is
   function</span> Sieve<span class="sym">(</span>M <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is
      type</span> Bool_Array <span class="kwa">is array</span><span class="sym">(</span><span class="num">1</span>..M<span class="sym">)</span> <span class="kwa">of</span> <span class="kwb">Boolean</span><span class="sym">;
</span>      A <span class="sym">:</span> Bool_Array <span class="sym">:= (</span><span class="kwa">others</span> <span class="sym">=&gt;</span> True<span class="sym">);
</span>      Count <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      Test_Num <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;
</span>   <span class="kwa">begin
      for</span> Num <span class="kwa">in</span> <span class="num">2</span>..M <span class="num">- 1</span> <span class="kwa">loop
         if</span> A<span class="sym">(</span>Num<span class="sym">)</span> <span class="kwa">then
</span>            Test_Num <span class="sym">:=</span> Num<span class="sym">;
</span>            <span class="kwa">while</span> Test_Num <span class="sym">&lt;</span> M <span class="kwa">loop
</span>               A<span class="sym">(</span>Test_Num<span class="sym">) :=</span> False<span class="sym">;
</span>               Test_Num <span class="sym">:=</span> Test_Num <span class="sym">+</span> Num<span class="sym">;
</span>            <span class="kwa">end loop</span><span class="sym">;
</span>				Count <span class="sym">:=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">return</span> Count<span class="sym">;
</span>   <span class="kwa">end</span> Sieve<span class="sym">;
</span>   <span class="kwa">procedure</span> Configure<span class="sym">(</span>N <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">)</span> <span class="kwa">is
</span>	   Max <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;
</span>   <span class="kwa">begin
	   if</span> N <span class="sym">&gt;=</span> <span class="num">2</span> <span class="kwa">then
	      for</span> Pow <span class="kwa">in reverse</span> N<span class="num">-2</span>..N <span class="kwa">loop
</span>	         Max <span class="sym">:= (</span><span class="num">2</span><span class="sym">**</span>Pow<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;
</span>            Put_Line<span class="sym">(</span><span class="str">&quot;Primes up to&quot;</span> <span class="sym">&amp;</span> <span class="kwb">Positive</span><span class="sym">'</span>Image<span class="sym">(</span>Max<span class="sym">) &amp;
</span>               <span class="str">&quot;  &quot;</span> <span class="sym">&amp;</span> <span class="kwb">Natural</span><span class="sym">'</span>Image<span class="sym">(</span>Sieve<span class="sym">(</span>Max<span class="sym">)));
</span>	      <span class="kwa">end loop</span><span class="sym">;
</span>		<span class="kwa">end if</span><span class="sym">;
</span>   <span class="kwa">end</span> Configure<span class="sym">;
</span>   N <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">2</span><span class="sym">;
</span><span class="kwa">begin
   if</span> Argument_Count <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then
</span>      N <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">end if</span><span class="sym">;
</span>   Configure<span class="sym">(</span>N<span class="sym">);
</span><span class="kwa">end</span> Nsieve<span class="sym">;</span>
