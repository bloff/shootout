<span class="line">    1 </span><span class="slc">-- $Id: random-gnat.code,v 1.3 2004-11-11 07:14:04 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- Ada 95 code by C.C.
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="kwa">with</span> System<span class="sym">,</span> Ada.Command_Line<span class="sym">,</span> Ada.Text_IO<span class="sym">;
</span><span class="line">    6 </span><span class="sym">
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">procedure</span> Random <span class="kwa">is
</span><span class="line">    8 </span><span class="kwa">   type</span> Real <span class="kwa">is digits</span> <span class="kwb">Positive</span><span class="sym">'</span>Max <span class="sym">(</span><span class="num">15</span><span class="sym">,</span> System.Max_Digits<span class="sym">);
</span><span class="line">    9 </span><span class="sym"></span>   <span class="kwa">package</span> Rio <span class="kwa">is new</span> Ada.Text_IO.Float_IO <span class="sym">(</span>Num <span class="sym">=&gt;</span> Real<span class="sym">);
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span>   <span class="kwa">package</span> Random_Real <span class="kwa">is
</span><span class="line">   12 </span><span class="kwa">      function</span> Gen_Random <span class="sym">(</span>Supr <span class="sym">:</span> Real<span class="sym">)</span> <span class="kwa">return</span> Real<span class="sym">;
</span><span class="line">   13 </span><span class="sym"></span>      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Gen_Random<span class="sym">);
</span><span class="line">   14 </span><span class="sym"></span>   <span class="kwa">end</span> Random_Real<span class="sym">;
</span><span class="line">   15 </span><span class="sym">
</span><span class="line">   16 </span><span class="sym"></span>   <span class="kwa">package body</span> Random_Real <span class="kwa">is
</span><span class="line">   17 </span><span class="kwa"></span>      IM          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">139968</span><span class="sym">;
</span><span class="line">   18 </span><span class="sym"></span>      IA          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">3877</span><span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>      IC          <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">29573</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>      Last        <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">42</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span>      <span class="kwa">function</span> Gen_Random <span class="sym">(</span>Supr <span class="sym">:</span> Real<span class="sym">)</span> <span class="kwa">return</span> Real <span class="kwa">is
</span><span class="line">   23 </span><span class="kwa">         pragma</span> Suppress <span class="sym">(</span>Overflow_Check<span class="sym">);
</span><span class="line">   24 </span><span class="sym"></span>         <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Range_Check<span class="sym">);
</span><span class="line">   25 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">   26 </span><span class="kwa"></span>         Last <span class="sym">:= (</span>Last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> <span class="kwa">mod</span> IM<span class="sym">;
</span><span class="line">   27 </span><span class="sym"></span>         <span class="kwa">return</span> Supr <span class="sym">*</span> Real <span class="sym">(</span>Last<span class="sym">) /</span> Real <span class="sym">(</span>IM<span class="sym">);
</span><span class="line">   28 </span><span class="sym"></span>      <span class="kwa">end</span> Gen_Random<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>         <span class="slc">--  Assume no overflow for &quot;Natural ((IM - 1) * IA + IC)&quot;
</span><span class="line">   30 </span><span class="slc"></span>   <span class="kwa">end</span> Random_Real<span class="sym">;
</span><span class="line">   31 </span><span class="sym">
</span><span class="line">   32 </span><span class="sym"></span>   Result   <span class="sym">:</span> Real<span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>   N        <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   35 </span><span class="kwa">   begin
</span><span class="line">   36 </span><span class="kwa"></span>      N <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span><span class="line">   37 </span><span class="sym"></span>   <span class="kwa">exception
</span><span class="line">   38 </span><span class="kwa">      when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">   39 </span><span class="sym"></span>   <span class="kwa">end</span><span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop
</span><span class="line">   41 </span><span class="kwa"></span>      Result <span class="sym">:=</span> Random_Real.Gen_Random <span class="sym">(</span>Supr <span class="sym">=&gt;</span> <span class="num">100.0</span><span class="sym">);
</span><span class="line">   42 </span><span class="sym"></span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>   Rio.Put <span class="sym">(</span>Result<span class="sym">,</span> Fore <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span><span class="line">   44 </span><span class="sym"></span>   Ada.Text_IO.New_Line<span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span><span class="kwa">end</span> Random<span class="sym">;</span>
