<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   http://www.bagley.org/~doug/shootout/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release lists.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">,</span> std<span class="sym">.</span>c<span class="sym">.</span>stdlib<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span>args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? std<span class="sym">.</span>string<span class="sym">.</span><span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--)</span> result <span class="sym">=</span> <span class="kwd">test_lists</span><span class="sym">();</span>
    <span class="kwd">writefln</span><span class="sym">(</span>result<span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="slc">// a simple Double Linked List</span>
<span class="slc">// the head node is special, it's val is length of list</span>
<span class="kwa">struct</span> DLL
<span class="sym">{</span>
    <span class="kwa">int</span> val<span class="sym">;</span>
    DLL<span class="sym">*</span> next<span class="sym">;</span>   <span class="com">/* points to next or head (if at tail) */</span>
    DLL<span class="sym">*</span> prev<span class="sym">;</span>   <span class="com">/* points to prev or tail (if at head) */</span>
<span class="sym">}</span>

<span class="kwa">int</span> <span class="kwd">list_length</span><span class="sym">(</span>DLL<span class="sym">*</span> head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">.</span>val<span class="sym">); }</span>
<span class="kwa">int</span> <span class="kwd">list_empty</span><span class="sym">(</span>DLL<span class="sym">*</span> head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span><span class="kwd">list_length</span><span class="sym">(</span>head<span class="sym">) ==</span> <span class="num">0</span><span class="sym">); }</span>
DLL<span class="sym">*</span> <span class="kwd">list_first</span><span class="sym">(</span>DLL<span class="sym">*</span> head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">.</span>next<span class="sym">); }</span>
DLL<span class="sym">*</span> <span class="kwd">list_last</span><span class="sym">(</span>DLL<span class="sym">*</span> head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">.</span>prev<span class="sym">); }</span>

<span class="kwa">void</span> <span class="kwd">list_push_tail</span><span class="sym">(</span>DLL<span class="sym">*</span> head<span class="sym">,</span> DLL<span class="sym">*</span> item<span class="sym">)</span>
<span class="sym">{</span>
    DLL<span class="sym">*</span> tail <span class="sym">=</span> head<span class="sym">.</span>prev<span class="sym">;</span>
    tail<span class="sym">.</span>next <span class="sym">=</span> item<span class="sym">;</span>
    item<span class="sym">.</span>next <span class="sym">=</span> head<span class="sym">;</span>
    head<span class="sym">.</span>prev <span class="sym">=</span> item<span class="sym">;</span>
    item<span class="sym">.</span>prev <span class="sym">=</span> tail<span class="sym">;</span>
    head<span class="sym">.</span>val<span class="sym">++;</span>
<span class="sym">}</span>

DLL<span class="sym">*</span> <span class="kwd">list_pop_tail</span><span class="sym">(</span>DLL<span class="sym">*</span> head<span class="sym">)</span>
<span class="sym">{</span>
    DLL<span class="sym">*</span> prev<span class="sym">,</span> tail<span class="sym">;</span>
    <span class="kwa">if</span><span class="sym">(</span><span class="kwd">list_empty</span><span class="sym">(</span>head<span class="sym">))</span> <span class="kwa">return</span><span class="sym">(</span><span class="kwa">null</span><span class="sym">);</span>
    tail <span class="sym">=</span> head<span class="sym">.</span>prev<span class="sym">;</span>
    prev <span class="sym">=</span> tail<span class="sym">.</span>prev<span class="sym">;</span>
    prev<span class="sym">.</span>next <span class="sym">=</span> head<span class="sym">;</span>
    head<span class="sym">.</span>prev <span class="sym">=</span> prev<span class="sym">;</span>
    head<span class="sym">.</span>val<span class="sym">--;</span>
    <span class="kwa">return</span><span class="sym">(</span>tail<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">list_push_head</span><span class="sym">(</span>DLL<span class="sym">*</span> head<span class="sym">,</span> DLL<span class="sym">*</span> item<span class="sym">)</span>
<span class="sym">{</span>
    DLL<span class="sym">*</span> next <span class="sym">=</span> head<span class="sym">.</span>next<span class="sym">;</span>
    head<span class="sym">.</span>next <span class="sym">=</span> item<span class="sym">;</span>
    next<span class="sym">.</span>prev <span class="sym">=</span> item<span class="sym">;</span>
    item<span class="sym">.</span>next <span class="sym">=</span> next<span class="sym">;</span>
    item<span class="sym">.</span>prev <span class="sym">=</span> head<span class="sym">;</span>
    head<span class="sym">.</span>val<span class="sym">++;</span>
<span class="sym">}</span>

DLL<span class="sym">*</span> <span class="kwd">list_pop_head</span><span class="sym">(</span>DLL<span class="sym">*</span> head<span class="sym">)</span>
<span class="sym">{</span>
    DLL<span class="sym">*</span> next<span class="sym">;</span>
    <span class="kwa">if</span><span class="sym">(</span><span class="kwd">list_empty</span><span class="sym">(</span>head<span class="sym">))</span> <span class="kwa">return</span><span class="sym">(</span><span class="kwa">null</span><span class="sym">);</span>
    next <span class="sym">=</span> head<span class="sym">.</span>next<span class="sym">;</span>
    head<span class="sym">.</span>next <span class="sym">=</span> next<span class="sym">.</span>next<span class="sym">;</span>
    next<span class="sym">.</span>next<span class="sym">.</span>prev <span class="sym">=</span> head<span class="sym">;</span>
    head<span class="sym">.</span>val<span class="sym">--;</span>
    <span class="kwa">return</span><span class="sym">(</span>next<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">int</span> <span class="kwd">list_equal</span><span class="sym">(</span>DLL<span class="sym">*</span> x<span class="sym">,</span> DLL<span class="sym">*</span> y<span class="sym">)</span>
<span class="sym">{</span>
    DLL<span class="sym">*</span> xp<span class="sym">,</span> yp<span class="sym">;</span>
    <span class="slc">// first val's checked will be list lengths</span>
    <span class="kwa">for</span><span class="sym">(</span>xp<span class="sym">=</span>x<span class="sym">,</span> yp<span class="sym">=</span>y<span class="sym">;</span> xp<span class="sym">.</span>next <span class="sym">!=</span> x<span class="sym">;</span> xp<span class="sym">=</span>xp<span class="sym">.</span>next<span class="sym">,</span> yp<span class="sym">=</span>yp<span class="sym">.</span>next<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>xp<span class="sym">.</span>val <span class="sym">!=</span> yp<span class="sym">.</span>val<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">if</span><span class="sym">(</span>xp<span class="sym">.</span>val <span class="sym">!=</span> yp<span class="sym">.</span>val<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span>yp<span class="sym">.</span>next <span class="sym">==</span> y<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">list_print</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">*</span> msg<span class="sym">,</span> DLL<span class="sym">*</span> x<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    DLL<span class="sym">*</span> xp<span class="sym">,</span> first <span class="sym">=</span> x<span class="sym">.</span>next<span class="sym">;</span>
    <span class="kwd">fputs</span><span class="sym">(</span>msg<span class="sym">,</span> stdout<span class="sym">);</span>
    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;length: &quot;</span><span class="sym">,</span><span class="kwd">list_length</span><span class="sym">(</span>x<span class="sym">));</span>
    <span class="kwa">for</span><span class="sym">(</span>xp<span class="sym">=</span>x<span class="sym">.</span>next<span class="sym">;</span> xp<span class="sym">.</span>next <span class="sym">!=</span> first<span class="sym">;</span> xp<span class="sym">=</span>xp<span class="sym">.</span>next<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;i:%3d  v:%3d  n:%3d  p:%3d&quot;</span><span class="sym">, ++</span>i<span class="sym">,</span> xp<span class="sym">.</span>val<span class="sym">,</span> xp<span class="sym">.</span>next<span class="sym">.</span>val<span class="sym">,</span> xp<span class="sym">.</span>prev<span class="sym">.</span>val<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;[last entry points to list head]&quot;</span><span class="sym">);</span>
    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;[val of next of tail is:  &quot;</span><span class="sym">,</span>xp<span class="sym">.</span>next<span class="sym">.</span>val<span class="sym">,</span><span class="str">&quot;]&quot;</span><span class="sym">);</span>
<span class="sym">}</span>

DLL<span class="sym">*</span> <span class="kwd">list_new</span><span class="sym">()</span>
<span class="sym">{</span>
    DLL<span class="sym">*</span> l <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">DLL</span><span class="sym">();</span>
    l<span class="sym">.</span>next <span class="sym">=</span> l<span class="sym">;</span>
    l<span class="sym">.</span>prev <span class="sym">=</span> l<span class="sym">;</span>
    l<span class="sym">.</span>val <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span>l<span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/* inclusive sequence 'from' &lt;-&gt; 'to' */</span>
DLL<span class="sym">*</span> <span class="kwd">list_sequence</span><span class="sym">(</span><span class="kwa">int</span> from<span class="sym">,</span> <span class="kwa">int</span> to<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> size<span class="sym">,</span> tmp<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">;</span>
    <span class="kwa">if</span><span class="sym">(</span>from <span class="sym">&gt;</span> to<span class="sym">)</span>
    <span class="sym">{</span>
        tmp <span class="sym">=</span> from<span class="sym">;</span> from <span class="sym">=</span> to<span class="sym">;</span> to <span class="sym">=</span> tmp<span class="sym">;</span>
    <span class="sym">}</span>
    size <span class="sym">=</span> to <span class="sym">-</span> from <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    DLL<span class="sym">*</span> l <span class="sym">=</span> <span class="kwa">new</span> DLL<span class="sym">[</span>size<span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
    from<span class="sym">--;</span>
    <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> j<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;</span>size<span class="sym">; ++</span>i<span class="sym">, ++</span>j<span class="sym">)</span>
    <span class="sym">{</span>
        l<span class="sym">[</span>i<span class="sym">].</span>next <span class="sym">= &amp;</span>l<span class="sym">[</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
        l<span class="sym">[</span>j<span class="sym">].</span>prev <span class="sym">= &amp;</span>l<span class="sym">[</span>j<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
        l<span class="sym">[</span>i<span class="sym">].</span>val <span class="sym">=</span> from<span class="sym">++;</span>
    <span class="sym">}</span>
    l<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>prev <span class="sym">= &amp;</span>l<span class="sym">[</span>size<span class="sym">];</span>
    l<span class="sym">[</span>size<span class="sym">].</span>next <span class="sym">= &amp;</span>l<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
    l<span class="sym">[</span>size<span class="sym">].</span>prev <span class="sym">= &amp;</span>l<span class="sym">[</span>size<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
    l<span class="sym">[</span>size<span class="sym">].</span>val <span class="sym">=</span> from<span class="sym">;</span>
    l<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>val <span class="sym">=</span> size<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span>l<span class="sym">);</span>
<span class="sym">}</span>

DLL<span class="sym">*</span> <span class="kwd">list_copy</span><span class="sym">(</span>DLL<span class="sym">*</span> x<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> i<span class="sym">,</span> j<span class="sym">,</span> size <span class="sym">=</span> <span class="kwd">list_length</span><span class="sym">(</span>x<span class="sym">);</span>
    DLL<span class="sym">*</span> xp<span class="sym">,</span> l <span class="sym">=</span> <span class="kwa">new</span> DLL<span class="sym">[</span>size<span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
    <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> j<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> xp<span class="sym">=</span>x<span class="sym">;</span> i<span class="sym">&lt;</span>size<span class="sym">;</span> i<span class="sym">++,</span> j<span class="sym">++,</span> xp<span class="sym">=</span>xp<span class="sym">.</span>next<span class="sym">)</span>
    <span class="sym">{</span>
        l<span class="sym">[</span>i<span class="sym">].</span>next <span class="sym">= &amp;</span>l<span class="sym">[</span>j<span class="sym">];</span>
        l<span class="sym">[</span>j<span class="sym">].</span>prev <span class="sym">= &amp;</span>l<span class="sym">[</span>i<span class="sym">];</span>
        l<span class="sym">[</span>i<span class="sym">].</span>val <span class="sym">=</span> xp<span class="sym">.</span>val<span class="sym">;</span>
    <span class="sym">}</span>
    l<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>prev <span class="sym">= &amp;</span>l<span class="sym">[</span>size<span class="sym">];</span>
    l<span class="sym">[</span>size<span class="sym">].</span>next <span class="sym">= &amp;</span>l<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
    l<span class="sym">[</span>size<span class="sym">].</span>val <span class="sym">=</span> <span class="kwd">list_last</span><span class="sym">(</span>x<span class="sym">).</span>val<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span>l<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">list_reverse</span> <span class="sym">(</span>DLL<span class="sym">*</span> head<span class="sym">)</span>
<span class="sym">{</span>
    DLL<span class="sym">*</span> tmp<span class="sym">,</span> p <span class="sym">=</span> head<span class="sym">;</span>
    <span class="kwa">do</span> <span class="sym">{</span>
        tmp <span class="sym">=</span> p<span class="sym">.</span>next<span class="sym">;</span>
        p<span class="sym">.</span>next <span class="sym">=</span> p<span class="sym">.</span>prev<span class="sym">;</span>
        p<span class="sym">.</span>prev <span class="sym">=</span> tmp<span class="sym">;</span>
        p <span class="sym">=</span> tmp<span class="sym">;</span>
    <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>p <span class="sym">!=</span> head<span class="sym">)</span>
<span class="sym">}</span>

<span class="kwa">const int</span> SIZE <span class="sym">=</span> <span class="num">10000</span><span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">test_lists</span><span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwa">int</span> len <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="slc">// create a list of integers (li1) from 1 to SIZE</span>
    DLL<span class="sym">*</span> li1 <span class="sym">=</span> <span class="kwd">list_sequence</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SIZE<span class="sym">);</span>
    <span class="slc">// copy the list to li2</span>
    DLL<span class="sym">*</span> li2 <span class="sym">=</span> <span class="kwd">list_copy</span><span class="sym">(</span>li1<span class="sym">);</span>
    <span class="slc">// remove each individual item from left side of li2 and</span>
    <span class="slc">// append to right side of li3 (preserving order)</span>
    DLL<span class="sym">*</span> li3 <span class="sym">=</span> <span class="kwd">list_new</span><span class="sym">();</span>
    <span class="slc">// compare li2 and li1 for equality</span>
    <span class="kwa">if</span><span class="sym">(!</span><span class="kwd">list_equal</span><span class="sym">(</span>li2<span class="sym">,</span> li1<span class="sym">))</span>
    <span class="sym">{</span>
        <span class="kwd">fwritefln</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;li2 and li1 are not equal&quot;</span><span class="sym">);</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">while</span> <span class="sym">(!</span><span class="kwd">list_empty</span><span class="sym">(</span>li2<span class="sym">))</span>
    <span class="sym">{</span>
        <span class="kwd">list_push_tail</span><span class="sym">(</span>li3<span class="sym">,</span> <span class="kwd">list_pop_head</span><span class="sym">(</span>li2<span class="sym">));</span>
    <span class="sym">}</span>
    <span class="slc">// li2 must now be empty</span>
    <span class="kwa">if</span><span class="sym">(!</span><span class="kwd">list_empty</span><span class="sym">(</span>li2<span class="sym">))</span>
    <span class="sym">{</span>
        <span class="kwd">fwritefln</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;li2 should be empty now&quot;</span><span class="sym">);</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="slc">// remove each individual item from right side of li3 and</span>
    <span class="slc">// append to right side of li2 (reversing list)</span>
    <span class="kwa">while</span> <span class="sym">(!</span><span class="kwd">list_empty</span><span class="sym">(</span>li3<span class="sym">))</span>
    <span class="sym">{</span>
        <span class="kwd">list_push_tail</span><span class="sym">(</span>li2<span class="sym">,</span> <span class="kwd">list_pop_tail</span><span class="sym">(</span>li3<span class="sym">));</span>
    <span class="sym">}</span>
    <span class="slc">// li3 must now be empty</span>
    <span class="kwa">if</span><span class="sym">(!</span><span class="kwd">list_empty</span><span class="sym">(</span>li3<span class="sym">))</span>
    <span class="sym">{</span>
        <span class="kwd">fwritefln</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;li3 should be empty now&quot;</span><span class="sym">);</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="slc">// reverse li1 in place</span>
    <span class="kwd">list_reverse</span><span class="sym">(</span>li1<span class="sym">);</span>
    <span class="slc">// check that li1's first item is now SIZE</span>
    <span class="kwa">if</span><span class="sym">(</span><span class="kwd">list_first</span><span class="sym">(</span>li1<span class="sym">).</span>val <span class="sym">!=</span> SIZE<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">fwritefln</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;li1 first value wrong, wanted %d, got %d&quot;</span><span class="sym">,</span>SIZE<span class="sym">,</span><span class="kwd">list_first</span><span class="sym">(</span>li1<span class="sym">).</span>val<span class="sym">);</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="slc">// check that li1's last item is now 1</span>
    <span class="kwa">if</span><span class="sym">(</span><span class="kwd">list_last</span><span class="sym">(</span>li1<span class="sym">).</span>val <span class="sym">!=</span> <span class="num">1</span><span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">fwritefln</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;last value wrong, wanted %d, got %d&quot;</span><span class="sym">,</span>SIZE<span class="sym">,</span><span class="kwd">list_last</span><span class="sym">(</span>li1<span class="sym">).</span>val<span class="sym">);</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="slc">// check that li2's first item is now SIZE</span>
    <span class="kwa">if</span><span class="sym">(</span><span class="kwd">list_first</span><span class="sym">(</span>li2<span class="sym">).</span>val <span class="sym">!=</span> SIZE<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">fwritefln</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;li2 first value wrong, wanted %d, got %d&quot;</span><span class="sym">,</span> SIZE<span class="sym">,</span> <span class="kwd">list_first</span><span class="sym">(</span>li2<span class="sym">).</span>val<span class="sym">);</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="slc">// check that li2's last item is now 1</span>
    <span class="kwa">if</span><span class="sym">(</span><span class="kwd">list_last</span><span class="sym">(</span>li2<span class="sym">).</span>val <span class="sym">!=</span> <span class="num">1</span><span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">fwritefln</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;last value wrong, wanted %d, got %d&quot;</span><span class="sym">,</span> SIZE<span class="sym">,</span> <span class="kwd">list_last</span><span class="sym">(</span>li2<span class="sym">).</span>val<span class="sym">);</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="slc">// check that li1's length is still SIZE</span>
    <span class="kwa">if</span><span class="sym">(</span><span class="kwd">list_length</span><span class="sym">(</span>li1<span class="sym">) !=</span> SIZE<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">fwritefln</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;li1 size wrong, wanted %d, got %d&quot;</span><span class="sym">,</span> SIZE<span class="sym">,</span> <span class="kwd">list_length</span><span class="sym">(</span>li1<span class="sym">));</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="slc">// compare li1 and li2 for equality</span>
    <span class="kwa">if</span><span class="sym">(!</span><span class="kwd">list_equal</span><span class="sym">(</span>li1<span class="sym">,</span> li2<span class="sym">))</span>
    <span class="sym">{</span>
        <span class="kwd">fwritefln</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;li1 and li2 are not equal&quot;</span><span class="sym">);</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    len <span class="sym">=</span> <span class="kwd">list_length</span><span class="sym">(</span>li1<span class="sym">);</span>

    <span class="kwa">delete</span> li1<span class="sym">;</span>
    <span class="kwa">delete</span> li2<span class="sym">;</span>
    <span class="kwa">delete</span> li3<span class="sym">;</span>

    <span class="slc">// return the length of the list</span>
    <span class="kwa">return</span><span class="sym">(</span>len<span class="sym">);</span>
<span class="sym">}</span>
