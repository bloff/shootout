<span class="dir">#!/usr/bin/pike</span>
<span class="slc">// -*- mode: pike -*-</span>
<span class="slc">// $Id: methcall-pike.code,v 1.9 2006-09-20 05:51:57 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>

class Toggle <span class="sym">{</span>
    <span class="kwb">int</span> bool<span class="sym">;</span>

    <span class="kwb">object</span> <span class="kwd">create</span> <span class="sym">(</span><span class="kwb">int</span> start_state<span class="sym">) {</span>
	bool <span class="sym">=</span> start_state<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">int</span> <span class="kwd">value</span> <span class="sym">() {</span>
	<span class="kwd">return</span><span class="sym">(</span>bool<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwb">object</span> <span class="kwd">activate</span> <span class="sym">() {</span>
	bool <span class="sym">= !</span>bool<span class="sym">;</span>
	<span class="kwd">return</span><span class="sym">(</span><span class="kwa">this_object</span><span class="sym">());</span>
    <span class="sym">}</span>
<span class="sym">}</span>

class NthToggle <span class="sym">{</span>
    inherit Toggle<span class="sym">;</span>

    <span class="kwb">int</span> count_max<span class="sym">,</span> count<span class="sym">;</span>

    <span class="kwb">object</span> <span class="kwd">create</span> <span class="sym">(</span><span class="kwb">int</span> start_state<span class="sym">,</span> <span class="kwb">int</span> max_counter<span class="sym">) {</span>
	<span class="sym">::</span><span class="kwd">create</span><span class="sym">(</span>start_state<span class="sym">);</span>
	count_max <span class="sym">=</span> max_counter<span class="sym">;</span>
	count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">object</span> <span class="kwd">activate</span> <span class="sym">() {</span>
	<span class="kwd">if</span> <span class="sym">(++</span>count <span class="sym">&gt;=</span> count_max<span class="sym">) {</span>
	    bool <span class="sym">= !</span>bool<span class="sym">;</span>
	    count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwd">return</span><span class="sym">(</span><span class="kwa">this_object</span><span class="sym">());</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">) {</span>
    <span class="kwb">int</span> n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">];</span>
    <span class="kwd">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwb">int</span> val <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">object</span> toggle <span class="sym">=</span> <span class="kwd">Toggle</span><span class="sym">(</span>val<span class="sym">);</span>
    <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	val <span class="sym">=</span> toggle<span class="sym">-&gt;</span><span class="kwd">activate</span><span class="sym">()-&gt;</span><span class="kwd">value</span><span class="sym">();</span>
    <span class="sym">}</span>
    <span class="kwa">write</span><span class="sym">((</span>toggle<span class="sym">-&gt;</span><span class="kwd">value</span><span class="sym">())</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

    val <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">object</span> ntoggle <span class="sym">=</span> <span class="kwd">NthToggle</span><span class="sym">(</span>val<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
    <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	val <span class="sym">=</span> ntoggle<span class="sym">-&gt;</span><span class="kwd">activate</span><span class="sym">()-&gt;</span><span class="kwd">value</span><span class="sym">();</span>
    <span class="sym">}</span>
    <span class="kwa">write</span><span class="sym">((</span>ntoggle<span class="sym">-&gt;</span><span class="kwd">value</span><span class="sym">())</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
<span class="sym">}</span>


