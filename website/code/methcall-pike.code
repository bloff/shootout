<span class="dir">#!/usr/bin/pike
</span><span class="slc">// -*- mode: pike -*-
</span><span class="slc">// $Id: methcall-pike.code,v 1.5 2005-05-17 05:20:32 bfulgham Exp $
</span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span>
class Toggle <span class="sym">{
</span>    <span class="kwb">int</span> bool<span class="sym">;

</span>    <span class="kwb">object</span> create <span class="sym">(</span><span class="kwb">int</span> start_state<span class="sym">) {
</span>	bool <span class="sym">=</span> start_state<span class="sym">;
    }

</span>    <span class="kwb">int</span> value <span class="sym">() {
</span>	return<span class="sym">(</span>bool<span class="sym">);
    }

</span>    <span class="kwb">object</span> activate <span class="sym">() {
</span>	bool <span class="sym">= !</span>bool<span class="sym">;
</span>	return<span class="sym">(</span><span class="kwa">this_object</span><span class="sym">());
    }
}

</span>class NthToggle <span class="sym">{
</span>    inherit Toggle<span class="sym">;

</span>    <span class="kwb">int</span> count_max<span class="sym">,</span> count<span class="sym">;

</span>    <span class="kwb">object</span> create <span class="sym">(</span><span class="kwb">int</span> start_state<span class="sym">,</span> <span class="kwb">int</span> max_counter<span class="sym">) {
	::</span>create<span class="sym">(</span>start_state<span class="sym">);
</span>	count_max <span class="sym">=</span> max_counter<span class="sym">;
</span>	count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
    }

</span>    <span class="kwb">object</span> activate <span class="sym">() {
</span>	if <span class="sym">(++</span>count <span class="sym">&gt;=</span> count_max<span class="sym">) {
</span>	    bool <span class="sym">= !</span>bool<span class="sym">;
</span>	    count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
	}
</span>	return<span class="sym">(</span><span class="kwa">this_object</span><span class="sym">());
    }
}

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">) {
</span>    <span class="kwb">int</span> n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">];
</span>    if <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;

</span>    <span class="kwb">int</span> val <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwb">object</span> toggle <span class="sym">=</span> Toggle<span class="sym">(</span>val<span class="sym">);
</span>    for <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	val <span class="sym">=</span> toggle<span class="sym">-&gt;</span>activate<span class="sym">()-&gt;</span>value<span class="sym">();
    }
</span>    <span class="kwa">write</span><span class="sym">((</span>toggle<span class="sym">-&gt;</span>value<span class="sym">())</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);

</span>    val <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwb">object</span> ntoggle <span class="sym">=</span> NthToggle<span class="sym">(</span>val<span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span>    for <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	val <span class="sym">=</span> ntoggle<span class="sym">-&gt;</span>activate<span class="sym">()-&gt;</span>value<span class="sym">();
    }
</span>    <span class="kwa">write</span><span class="sym">((</span>ntoggle<span class="sym">-&gt;</span>value<span class="sym">())</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
}

</span>
