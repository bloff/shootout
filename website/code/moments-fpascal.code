<span class="kwa">Program</span> moments<span class="sym">;
</span><span class="kwa">uses</span> SysUtils<span class="sym">,</span> Classes<span class="sym">;

</span><span class="kwa">function</span> Power<span class="sym">(</span>Base <span class="sym">:</span> <span class="kwb">Real</span> <span class="sym">;</span> Exponent<span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">):</span> <span class="kwb">Real</span><span class="sym">;
</span><span class="kwa">var</span> i <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">var</span> pow <span class="sym">:</span> <span class="kwb">real</span><span class="sym">;
</span><span class="kwa">begin
</span>	pow <span class="sym">:=</span> Base<span class="sym">;
</span>	<span class="kwa">For</span> i<span class="sym">:=</span> <span class="num">2</span> <span class="kwa">To</span> Exponent <span class="kwa">do</span> pow <span class="sym">:=</span> pow <span class="sym">*</span> Base<span class="sym">;
</span>	Power <span class="sym">:=</span> pow<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">function</span> Compare<span class="sym">(</span>A<span class="sym">,</span> B <span class="sym">:</span> <span class="kwb">Pointer</span><span class="sym">) :</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="kwa">begin
	if</span> A <span class="sym">&gt;</span> B <span class="kwa">then
</span>		Compare <span class="sym">:=</span> <span class="num">1
</span>	<span class="kwa">else if</span> A <span class="sym">&lt;</span> B <span class="kwa">Then
</span>		Compare <span class="sym">:= -</span><span class="num">1
</span>	<span class="kwa">else
</span>		Compare <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;


</span><span class="kwa">var
</span>	i<span class="sym">,</span> N<span class="sym">,</span> sum<span class="sym">,</span> num<span class="sym">,</span> middle <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span>	list <span class="sym">:</span> TList<span class="sym">;
</span>	median<span class="sym">,</span> mean<span class="sym">,</span> deviation<span class="sym">,
</span>	average_deviation<span class="sym">,</span> standard_deviation<span class="sym">,
</span>	variance<span class="sym">,</span> skew<span class="sym">,</span> kurtosis <span class="sym">:</span> <span class="kwb">real</span><span class="sym">;
</span><span class="kwa">begin
</span>	list <span class="sym">:=</span> TList.Create<span class="sym">;
</span>	<span class="kwa">While Not</span> Eof<span class="sym">(</span>input<span class="sym">)</span> <span class="kwa">do
	begin
</span>		Readln<span class="sym">(</span>input<span class="sym">,</span> num<span class="sym">);
</span>		list.Add<span class="sym">(</span> <span class="kwb">Pointer</span><span class="sym">(</span>num<span class="sym">) );
</span>	<span class="kwa">end</span><span class="sym">;
</span>	N <span class="sym">:=</span> list.Count<span class="sym">;
</span>	<span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> N<span class="num">-1</span> <span class="kwa">do</span> Inc<span class="sym">(</span>sum<span class="sym">,</span> <span class="kwb">longint</span><span class="sym">(</span>list.Items<span class="sym">[</span>i<span class="sym">]));
</span>	mean <span class="sym">:=</span> sum <span class="sym">/</span> N<span class="sym">;
</span>	average_deviation <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	standard_deviation <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	variance <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	skew <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	kurtosis <span class="sym">:=</span> <span class="num">0</span><span class="sym">;

</span>	<span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> N<span class="num">-1</span> <span class="kwa">do
	begin
</span>		deviation <span class="sym">:=</span> <span class="kwb">longint</span><span class="sym">(</span>list.Items<span class="sym">[</span>i<span class="sym">]) -</span> mean<span class="sym">;
</span>		average_deviation <span class="sym">:=</span> average_deviation <span class="sym">+</span> Abs<span class="sym">(</span>deviation<span class="sym">);
</span>		variance <span class="sym">:=</span> variance <span class="sym">+</span> Power<span class="sym">(</span>deviation<span class="sym">,</span> <span class="num">2</span><span class="sym">);
</span>		skew <span class="sym">:=</span> skew <span class="sym">+</span> Power<span class="sym">(</span>deviation<span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span>		kurtosis <span class="sym">:=</span> kurtosis <span class="sym">+</span> Power<span class="sym">(</span>deviation<span class="sym">,</span> <span class="num">4</span><span class="sym">);
</span>		<span class="com">{ WriteLn( deviation:6:6, ', ', Power(deviation, 2):6:6, ', ', Power(deviation, 3):6:6, ', ', Power(deviation, 4):6:6); }</span>
	<span class="kwa">end</span><span class="sym">;
</span>	average_deviation <span class="sym">:=</span> average_deviation <span class="sym">/</span> N<span class="sym">;
</span>	variance <span class="sym">:=</span> variance <span class="sym">/ (</span>N<span class="num">-1</span><span class="sym">);
</span>	standard_deviation <span class="sym">:=</span> Sqrt<span class="sym">(</span>variance<span class="sym">);
</span>	<span class="com">{ WriteLn('skew:               ', skew:6:6); }</span>

	<span class="kwa">If</span> variance <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">Then
	begin
</span>		skew <span class="sym">:=</span> skew <span class="sym">/ (</span>N <span class="sym">*</span> variance <span class="sym">*</span> standard_deviation<span class="sym">);
</span>		kurtosis <span class="sym">:=</span> kurtosis <span class="sym">/ (</span>N <span class="sym">*</span> variance <span class="sym">*</span> variance <span class="sym">) -</span> <span class="num">3.0</span><span class="sym">;
</span>	<span class="kwa">end</span><span class="sym">;

</span>	list.Sort<span class="sym">(&#64;</span>Compare<span class="sym">);


</span>	middle <span class="sym">:=</span> N <span class="kwa">Div</span> <span class="num">2</span><span class="sym">;

</span>	<span class="kwa">If</span> <span class="sym">(</span>N <span class="kwa">Mod</span> <span class="num">2</span><span class="sym">) &lt;&gt;</span> <span class="num">0</span> <span class="kwa">Then
</span>		median <span class="sym">:=</span> <span class="kwb">longint</span><span class="sym">(</span>list.Items<span class="sym">[</span>middle<span class="sym">])
</span>	<span class="kwa">Else
</span>		median <span class="sym">:= (</span><span class="kwb">longint</span><span class="sym">(</span>list.Items<span class="sym">[</span>middle<span class="sym">]) +</span> <span class="kwb">longint</span><span class="sym">(</span>list.Items<span class="sym">[</span>middle<span class="num">-1</span><span class="sym">])) /</span> <span class="num">2</span><span class="sym">;


</span>	WriteLn<span class="sym">(</span><span class="str">'n:                  '</span><span class="sym">,</span> N<span class="sym">);
</span>	WriteLn<span class="sym">(</span><span class="str">'median:             '</span><span class="sym">,</span> median<span class="sym">:</span><span class="num">6</span><span class="sym">:</span><span class="num">6</span><span class="sym">);
</span>	WriteLn<span class="sym">(</span><span class="str">'mean:               '</span><span class="sym">,</span> mean<span class="sym">:</span><span class="num">6</span><span class="sym">:</span><span class="num">6</span><span class="sym">);
</span>	WriteLn<span class="sym">(</span><span class="str">'average_deviation:  '</span><span class="sym">,</span> average_deviation<span class="sym">:</span><span class="num">6</span><span class="sym">:</span><span class="num">6</span><span class="sym">);
</span>	WriteLn<span class="sym">(</span><span class="str">'standard_deviation: '</span><span class="sym">,</span> standard_deviation<span class="sym">:</span><span class="num">6</span><span class="sym">:</span><span class="num">6</span><span class="sym">);
</span>	WriteLn<span class="sym">(</span><span class="str">'variance:           '</span><span class="sym">,</span> variance<span class="sym">:</span><span class="num">6</span><span class="sym">:</span><span class="num">6</span><span class="sym">);
</span>	WriteLn<span class="sym">(</span><span class="str">'skew:               '</span><span class="sym">,</span> skew<span class="sym">:</span><span class="num">6</span><span class="sym">:</span><span class="num">6</span><span class="sym">);
</span>	WriteLn<span class="sym">(</span><span class="str">'kurtosis:           '</span><span class="sym">,</span> kurtosis<span class="sym">:</span><span class="num">6</span><span class="sym">:</span><span class="num">6</span><span class="sym">);
</span><span class="kwa">end</span>.
