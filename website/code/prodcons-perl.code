<span class="line">    1 </span><span class="slc">#!/usr/bin/perl
</span><span class="line">    2 </span><span class="slc"></span><span class="slc"># $Id: prodcons-perl.code,v 1.3 2004-11-11 07:14:03 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="kwa">use</span> strict<span class="sym">;
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">use</span> Thread qw<span class="sym">(</span>cond_wait cond_signal<span class="sym">);
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym"></span><span class="kwc">my</span> <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">    9 </span><span class="sym"></span><span class="kwc">my</span> <span class="kwb">$data</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   10 </span><span class="sym"></span><span class="kwc">my</span> <span class="kwb">$produced</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span><span class="kwc">my</span> <span class="kwb">$consumed</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span><span class="kwa">sub</span> consumer <span class="sym">{
</span><span class="line">   14 </span><span class="sym"></span>    <span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">=</span> shift<span class="sym">;
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {
</span><span class="line">   16 </span><span class="sym"></span>        lock<span class="sym">(</span><span class="kwb">$count</span><span class="sym">);
</span><span class="line">   17 </span><span class="sym"></span>        cond_wait<span class="sym">(</span><span class="kwb">$count</span><span class="sym">)</span> <span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$count</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">);
</span><span class="line">   18 </span><span class="sym"></span>        <span class="kwc">my</span> <span class="kwb">$i</span> <span class="sym">=</span> <span class="kwb">$data</span><span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>        <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>        <span class="kwb">$consumed</span><span class="sym">++;
</span><span class="line">   21 </span><span class="sym"></span>        <span class="kwa">last if</span> <span class="sym">(</span><span class="kwb">$i</span> <span class="sym">==</span> <span class="kwb">$n</span><span class="sym">);
</span><span class="line">   22 </span><span class="sym"></span>        cond_signal<span class="sym">(</span><span class="kwb">$count</span><span class="sym">);
</span><span class="line">   23 </span><span class="sym">    }
</span><span class="line">   24 </span><span class="sym">}
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span><span class="kwa">sub</span> producer <span class="sym">{
</span><span class="line">   27 </span><span class="sym"></span>    <span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">=</span> shift<span class="sym">;
</span><span class="line">   28 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">my</span> <span class="kwb">$i</span><span class="sym">=</span><span class="num">1</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;=</span><span class="kwb">$n</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {
</span><span class="line">   29 </span><span class="sym"></span>        lock<span class="sym">(</span><span class="kwb">$count</span><span class="sym">);
</span><span class="line">   30 </span><span class="sym"></span>        cond_wait<span class="sym">(</span><span class="kwb">$count</span><span class="sym">)</span> <span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$count</span> <span class="sym">==</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   31 </span><span class="sym"></span>        <span class="kwb">$data</span> <span class="sym">=</span> <span class="kwb">$i</span><span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>        <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>        <span class="kwb">$produced</span><span class="sym">++;
</span><span class="line">   34 </span><span class="sym"></span>        cond_signal<span class="sym">(</span><span class="kwb">$count</span><span class="sym">);
</span><span class="line">   35 </span><span class="sym">    }
</span><span class="line">   36 </span><span class="sym">}
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym"></span><span class="kwa">sub</span> main <span class="sym">{
</span><span class="line">   39 </span><span class="sym"></span>    <span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">= (</span><span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;</span> <span class="num">1</span><span class="sym">)</span> ? <span class="num">1</span> <span class="sym">:</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="line">   40 </span><span class="sym"></span>    <span class="kwc">my</span> <span class="kwb">$p</span> <span class="sym">=</span> Thread<span class="sym">-&gt;</span>new<span class="sym">(</span>\<span class="sym">&amp;</span>producer<span class="sym">,</span> <span class="kwb">$n</span><span class="sym">);
</span><span class="line">   41 </span><span class="sym"></span>    <span class="kwc">my</span> <span class="kwb">$c</span> <span class="sym">=</span> Thread<span class="sym">-&gt;</span>new<span class="sym">(</span>\<span class="sym">&amp;</span>consumer<span class="sym">,</span> <span class="kwb">$n</span><span class="sym">);
</span><span class="line">   42 </span><span class="sym"></span>    <span class="kwb">$p</span><span class="sym">-&gt;</span>join<span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>    <span class="kwb">$c</span><span class="sym">-&gt;</span>join<span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>    print <span class="str">&quot;$produced $consumed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span><span class="line">   45 </span><span class="sym">}
</span><span class="line">   46 </span><span class="sym">
</span><span class="line">   47 </span><span class="sym">&amp;</span>main<span class="sym">();</span>
