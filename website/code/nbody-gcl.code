<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; contributed by Patrick Frankenberger</span>
<span class="slc">;;; modified by Juho Snellman 2005-11-18</span>
<span class="slc">;;;   * About 40% speedup on SBCL, 90% speedup on CMUCL</span>
<span class="slc">;;;   * Represent a body as a DEFSTRUCT with (:TYPE VECTOR DOUBLE-FLOAT), a</span>
<span class="slc">;;;     not as a structure that contains vectors</span>
<span class="slc">;;;   * Inline APPLYFORCES</span>
<span class="slc">;;;   * Replace (/ DT DISTANCE DISTANCE DISTANCE) with</span>
<span class="slc">;;;     (/ DT (* DISTANCE DISTANCE DISTANCE)), as is done in the other</span>
<span class="slc">;;;     implementations of this test.</span>
<span class="slc">;;;   * Add a couple of declarations</span>
<span class="slc">;;;   * Heavily rewritten for style (represent system as a list instead of</span>
<span class="slc">;;;     an array to make the nested iterations over it less clumsy, use</span>
<span class="slc">;;;     INCF/DECF where appropriate, break very long lines, etc)</span>

<span class="sym">(</span>defconstant <span class="sym">+</span>days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">+</span> <span class="num">365.24</span>d0<span class="sym">)</span>
<span class="sym">(</span>defconstant <span class="sym">+</span>solar<span class="sym">-</span>mass<span class="sym">+ (*</span> <span class="num">4</span>d0 pi pi<span class="sym">))</span>

<span class="sym">(</span>defstruct <span class="sym">(</span>body <span class="sym">(:</span><span class="kwa">type</span> <span class="sym">(</span>vector double<span class="sym">-</span><span class="kwa">float</span><span class="sym">))</span>
                 <span class="sym">(:</span>conc<span class="sym">-</span>name nil<span class="sym">)</span>
                 <span class="sym">(:</span>constructor make<span class="sym">-</span>body <span class="sym">(</span>x y z vx vy vz mass<span class="sym">)))</span>
  x y z
  vx vy vz
  mass<span class="sym">)</span>
<span class="sym">(</span>deftype body <span class="sym">()</span> <span class="str">'(vector double-float 7))</span>
<span class="str"></span>
<span class="str">(defparameter *jupiter*</span>
<span class="str">  (make-body 4.84143144246472090d0</span>
<span class="str">             -1.16032004402742839d0</span>
<span class="str">             -1.03622044471123109d-1</span>
<span class="str">             (* 1.66007664274403694d-3 +days-per-year+)</span>
<span class="str">             (* 7.69901118419740425d-3 +days-per-year+)</span>
<span class="str">             (* -6.90460016972063023d-5  +days-per-year+)</span>
<span class="str">             (* 9.54791938424326609d-4 +solar-mass+)))</span>
<span class="str"></span>
<span class="str">(defparameter *saturn*</span>
<span class="str">  (make-body 8.34336671824457987d0</span>
<span class="str">             4.12479856412430479d0</span>
<span class="str">             -4.03523417114321381d-1</span>
<span class="str">             (* -2.76742510726862411d-3 +days-per-year+)</span>
<span class="str">             (* 4.99852801234917238d-3 +days-per-year+)</span>
<span class="str">             (* 2.30417297573763929d-5 +days-per-year+)</span>
<span class="str">             (* 2.85885980666130812d-4 +solar-mass+)))</span>
<span class="str"></span>
<span class="str">(defparameter *uranus*</span>
<span class="str">  (make-body 1.28943695621391310d1</span>
<span class="str">             -1.51111514016986312d1</span>
<span class="str">             -2.23307578892655734d-1</span>
<span class="str">             (* 2.96460137564761618d-03 +days-per-year+)</span>
<span class="str">             (* 2.37847173959480950d-03 +days-per-year+)</span>
<span class="str">             (* -2.96589568540237556d-05 +days-per-year+)</span>
<span class="str">             (* 4.36624404335156298d-05 +solar-mass+)))</span>
<span class="str"></span>
<span class="str">(defparameter *neptune*</span>
<span class="str">  (make-body 1.53796971148509165d+01</span>
<span class="str">             -2.59193146099879641d+01</span>
<span class="str">             1.79258772950371181d-01</span>
<span class="str">             (* 2.68067772490389322d-03 +days-per-year+)</span>
<span class="str">             (* 1.62824170038242295d-03 +days-per-year+)</span>
<span class="str">             (* -9.51592254519715870d-05 +days-per-year+)</span>
<span class="str">             (* 5.15138902046611451d-05 +solar-mass+)))</span>
<span class="str"></span>
<span class="str">(defparameter *sun*</span>
<span class="str">  (make-body 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 +solar-mass+))</span>
<span class="str"></span>
<span class="str">(declaim (inline applyforces))</span>
<span class="str">(defun applyforces (a b dt)</span>
<span class="str">  (declare (type body a b) (type double-float dt))</span>
<span class="str">  (let* ((dx (- (x a) (x b)))</span>
<span class="str">         (dy (- (y a) (y b)))</span>
<span class="str">         (dz (- (z a) (z b)))</span>
<span class="str">	 (distance (sqrt (+ (* dx dx) (* dy dy) (* dz dz))))</span>
<span class="str">	 (mag (/ dt (* distance distance distance)))</span>
<span class="str">         (dxmag (* dx mag))</span>
<span class="str">         (dymag (* dy mag))</span>
<span class="str">         (dzmag (* dz mag)))</span>
<span class="str">    (decf (vx a) (* dxmag (mass b)))</span>
<span class="str">    (decf (vy a) (* dymag (mass b)))</span>
<span class="str">    (decf (vz a) (* dzmag (mass b)))</span>
<span class="str">    (incf (vx b) (* dxmag (mass a)))</span>
<span class="str">    (incf (vy b) (* dymag (mass a)))</span>
<span class="str">    (incf (vz b) (* dzmag (mass a))))</span>
<span class="str">  nil)</span>
<span class="str"></span>
<span class="str">(defun advance (system dt)</span>
<span class="str">  (declare (double-float dt))</span>
<span class="str">  (loop for (a . rest) on system do</span>
<span class="str">        (dolist (b rest)</span>
<span class="str">          (applyforces a b dt)))</span>
<span class="str">  (dolist (b system)</span>
<span class="str">    (incf (x b) (* dt (vx b)))</span>
<span class="str">    (incf (y b) (* dt (vy b)))</span>
<span class="str">    (incf (z b) (* dt (vz b)))))</span>
<span class="str"></span>
<span class="str">(defun energy (system)</span>
<span class="str">  (let ((e 0.0d0))</span>
<span class="str">    (declare (double-float e))</span>
<span class="str">    (loop for (a . rest) on system do</span>
<span class="str">          (incf e (* 0.5d0</span>
<span class="str">                     (mass a)</span>
<span class="str">                     (+ (* (vx a) (vx a))</span>
<span class="str">                        (* (vy a) (vy a))</span>
<span class="str">                        (* (vz a) (vz a)))))</span>
<span class="str">          (dolist (b rest)</span>
<span class="str">            (let* ((dx (- (x a) (x b)))</span>
<span class="str">                   (dy (- (y a) (y b)))</span>
<span class="str">                   (dz (- (z a) (z b)))</span>
<span class="str">                   (dist (sqrt (+ (* dx dx) (* dy dy) (* dz dz)))))</span>
<span class="str">              (decf e (/ (* (mass a) (mass b)) dist)))))</span>
<span class="str">    e))</span>
<span class="str"></span>
<span class="str">(defun offset-momentum (system)</span>
<span class="str">  (let ((px 0.0d0)</span>
<span class="str">	(py 0.0d0)</span>
<span class="str">	(pz 0.0d0))</span>
<span class="str">    (dolist (p system)</span>
<span class="str">      (incf px (* (vx p) (mass p)))</span>
<span class="str">      (incf py (* (vy p) (mass p)))</span>
<span class="str">      (incf pz (* (vz p) (mass p))))</span>
<span class="str">    (setf (vx (car system)) (/ (- px) +solar-mass+)</span>
<span class="str">          (vy (car system)) (/ (- py) +solar-mass+)</span>
<span class="str">          (vz (car system)) (/ (- pz) +solar-mass+))</span>
<span class="str">    nil))</span>
<span class="str"></span>
<span class="str">(defun nbody (n)</span>
<span class="str">  (declare (fixnum n))</span>
<span class="str">  (let ((system (list *sun* *jupiter* *saturn* *uranus* *neptune*)))</span>
<span class="str">    (offset-momentum system)</span>
<span class="str">    (format t &quot;~,9F~%&quot; (energy system))</span>
<span class="str">    (dotimes (i n)</span>
<span class="str">      (advance system 0.01d0))</span>
<span class="str">    (format t &quot;~,9F~%&quot; (energy system))))</span>
<span class="str"></span>
<span class="str">(defun main ()</span>
<span class="str">  (let ((n (parse-integer (or (car (last #+sbcl sb-ext:*posix-argv*</span>
<span class="str">                                         #+cmu  extensions:*command-line-strings*</span>
<span class="str">					 #+gcl  si::*command-args*)) &quot;1&quot;))))</span>
<span class="str">    (nbody n)))</span>
<span class="str"></span>
