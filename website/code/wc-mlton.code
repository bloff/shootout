<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: wc-mlton.code,v 1.11 2007-12-08 03:58:47 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * from Stephen Weeks</span>
<span class="com"> *)</span>
<span class="com">(* Translated from wc.ocaml. *)</span>

<span class="kwa">fun</span> incr r <span class="sym">=</span> r <span class="sym">:= !</span>r <span class="sym">+</span> <span class="num">1</span>

<span class="kwa">val</span> nl <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">val</span> nw <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">val</span> nc <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">val</span> max <span class="sym">=</span> <span class="num">4096</span>
<span class="kwa">val</span> buf <span class="sym">=</span> Word8Array.array <span class="sym">(</span>max<span class="sym">,</span> <span class="num">0</span>w0<span class="sym">)</span>
<span class="kwa">val</span> sub <span class="sym">=</span> Word8Array.sub

<span class="kwa">fun</span> readblock scanfun <span class="sym">=</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> nread <span class="sym">=</span> Posix.IO.readArr <span class="sym">(</span>Posix.FileSys.stdin<span class="sym">,</span>
				    Word8ArraySlice.slice<span class="sym">(</span>buf<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> NONE<span class="sym">))</span>
   <span class="kwa">in</span>
      <span class="kwa">if</span> nread <span class="sym">=</span> <span class="num">0</span>
	 <span class="kwa">then</span> <span class="sym">()</span>
      <span class="kwa">else</span> <span class="sym">(</span>nc <span class="sym">:= !</span>nc <span class="sym">+</span> nread<span class="sym">;</span>
	    scanfun <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> nread<span class="sym">))</span>
   <span class="kwa">end</span>

<span class="kwa">val</span> c2b <span class="sym">=</span> Byte.charToByte
<span class="kwa">val</span> newline <span class="sym">=</span> c2b #<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="kwa">val</span> space <span class="sym">=</span> c2b #<span class="str">&quot; &quot;</span>
<span class="kwa">val</span> tab <span class="sym">=</span> c2b #<span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span>

<span class="kwa">fun</span> scan_out_of_word <span class="sym">(</span>i<span class="sym">,</span> n<span class="sym">) =</span>
   <span class="kwa">if</span> i <span class="sym">&lt;</span> n
      <span class="kwa">then</span>
	 <span class="kwa">let</span>
	    <span class="kwa">val</span> c <span class="sym">=</span> sub <span class="sym">(</span>buf<span class="sym">,</span> i<span class="sym">)</span>
	 <span class="kwa">in</span>
	    <span class="kwa">if</span> c <span class="sym">=</span> newline
	       <span class="kwa">then</span> <span class="sym">(</span>incr nl<span class="sym">;</span> scan_out_of_word <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">))</span>
	    <span class="kwa">else if</span> c <span class="sym">=</span> space <span class="kwa">orelse</span> c <span class="sym">=</span> tab
		    <span class="kwa">then</span> scan_out_of_word <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">)</span>
		 <span class="kwa">else</span> <span class="sym">(</span>incr nw<span class="sym">;</span> scan_in_word <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">))</span>
	 <span class="kwa">end</span>
   <span class="kwa">else</span> readblock scan_out_of_word

<span class="kwa">and</span> scan_in_word <span class="sym">(</span>i<span class="sym">,</span> n<span class="sym">) =</span>
  <span class="kwa">if</span> i <span class="sym">&lt;</span> n <span class="kwa">then</span>
     <span class="kwa">let</span>
	<span class="kwa">val</span> c <span class="sym">=</span> sub <span class="sym">(</span>buf<span class="sym">,</span> i<span class="sym">)</span>
     <span class="kwa">in</span>
	<span class="kwa">if</span> c <span class="sym">=</span> newline
	   <span class="kwa">then</span> <span class="sym">(</span>incr nl<span class="sym">;</span> scan_out_of_word <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">))</span>
	<span class="kwa">else if</span> c <span class="sym">=</span> space <span class="kwa">orelse</span> c <span class="sym">=</span> tab
		<span class="kwa">then</span> scan_out_of_word <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">)</span>
	     <span class="kwa">else</span> scan_in_word <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">)</span>
     <span class="kwa">end</span>
  <span class="kwa">else</span> readblock scan_in_word

<span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">)</span>

<span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>
  <span class="kwa">let</span>
    <span class="kwa">val</span> _ <span class="sym">=</span>
        <span class="sym">(</span>scan_out_of_word <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
	printl <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(!</span>nl<span class="sym">),</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString <span class="sym">(!</span>nw<span class="sym">),</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString <span class="sym">(!</span>nc<span class="sym">)])</span>
  <span class="kwa">in</span>
    OS.Process.success
  <span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() )</span>
