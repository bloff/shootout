<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: regexmatch-poplisp.code,v 1.7 2006-09-20 05:52:30 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; from Jochen Schmidt</span>

<span class="sym">(</span>proclaim <span class="str">'(optimize (speed 3)(safety 0)(space 0)(debug 0)(compilation-speed 0)))</span>
<span class="str">(setf ext:*bytes-consed-between-gcs* 5000000)</span>
<span class="str">(use-package :meta)</span>
<span class="str">(eval-when (compile load eval)</span>
<span class="str">(meta:enable-meta-syntax)</span>
<span class="str">(deftype digit () '</span><span class="sym">(</span><span class="kwa">member</span> #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9<span class="sym">))</span>
<span class="sym">(</span>deftype non<span class="sym">-</span>digit <span class="sym">()</span> <span class="str">'(not (member #</span><span class="esc">\0</span> <span class="str">#</span><span class="esc">\1</span> <span class="str">#</span><span class="esc">\2</span> <span class="str">#</span><span class="esc">\3</span> <span class="str">#</span><span class="esc">\4</span> <span class="str">#</span><span class="esc">\5</span> <span class="str">#</span><span class="esc">\6</span> <span class="str">#</span><span class="esc">\7</span> <span class="str">#</span><span class="esc">\8</span> <span class="str">#</span><span class="esc">\9</span> <span class="str">#</span><span class="esc">\(</span> <span class="str">#</span><span class="esc">\)</span> <span class="str">))))</span>
<span class="str"></span>
<span class="str">(defun parse-tel (input)</span>
<span class="str">  (meta:with-string-meta (buffer input)</span>
<span class="str">    (let (last-result)</span>
<span class="str">      (declare (type (or null simple-base-string) last-result))</span>
<span class="str">      (labels ((skip-non-digits (&amp;aux d)</span>
<span class="str">                     (meta:match $[&#64;(non-digit d)]))</span>
<span class="str">               (digit-triplet (&amp;aux (old-index index) d (result (make-array 3 :element-type '</span>base<span class="sym">-</span>char<span class="sym">)))</span>
                     <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string result<span class="sym">))</span>
                     <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span>meta<span class="sym">:</span>match <span class="sym">[</span>&#64;<span class="sym">(</span>digit d<span class="sym">) !(</span>setf <span class="sym">(</span>schar result <span class="num">0</span><span class="sym">)</span> d<span class="sym">)</span>
                                      &#64;<span class="sym">(</span>digit d<span class="sym">) !(</span>setf <span class="sym">(</span>schar result <span class="num">1</span><span class="sym">)</span> d<span class="sym">)</span>
                                      &#64;<span class="sym">(</span>digit d<span class="sym">) !(</span>setf <span class="sym">(</span>schar result <span class="num">2</span><span class="sym">)</span> d<span class="sym">)</span>
                                      <span class="sym">!(</span>setf <span class="kwa">last</span><span class="sym">-</span>result result<span class="sym">)])</span>
                         <span class="sym">(</span><span class="kwa">progn</span> <span class="sym">(</span>setf index old<span class="sym">-</span>index<span class="sym">)</span> nil<span class="sym">)))</span>
               <span class="sym">(</span>digit<span class="sym">-</span><span class="num">4</span>tupel <span class="sym">(&amp;</span>aux <span class="sym">(</span>old<span class="sym">-</span>index index<span class="sym">)</span> d <span class="sym">(</span>result <span class="sym">(</span>make<span class="sym">-</span>array <span class="num">4</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'base-char)))</span>
<span class="str">                     (declare (type simple-base-string result))</span>
<span class="str">                     (or (meta:match [&#64;(digit d) !(setf (schar result 0) d)</span>
<span class="str">                                      &#64;(digit d) !(setf (schar result 1) d)</span>
<span class="str">                                      &#64;(digit d) !(setf (schar result 2) d)</span>
<span class="str">                                      &#64;(digit d) !(setf (schar result 3) d)</span>
<span class="str">                                      !(setf last-result result)])</span>
<span class="str">                         (progn (setf index old-index) nil)))</span>
<span class="str">              (telephone-nr (&amp;aux area-code exchange d)</span>
<span class="str">                    (declare (type (or null simple-base-string) area-code exchange))</span>
<span class="str">                    (and (meta:match [!(skip-non-digits)</span>
<span class="str">                                        {[#</span><span class="esc">\(</span> <span class="str">!(digit-triplet) #</span><span class="esc">\)</span><span class="str">] !(digit-triplet)} !(setf area-code last-result)</span>
<span class="str">                                        #</span><span class="esc">\s</span><span class="str">pace !(digit-triplet) !(setf exchange last-result)</span>
<span class="str">                                        {#</span><span class="esc">\s</span><span class="str">pace #</span><span class="esc">\-</span><span class="str">} !(digit-4tupel) {&#64;(non-digit d) !(= index end)}])</span>
<span class="str">                                      (values area-code exchange last-result))))</span>
<span class="str">            (telephone-nr)))))</span>
<span class="str"></span>
<span class="str">  (let ((n (parse-integer (or (car pop11::poparglist) &quot;1&quot;)))</span>
<span class="str">        (input (loop for line = (read-line *standard-input* nil '</span>eof<span class="sym">)</span>
                     until <span class="sym">(</span><span class="kwa">eq line</span> <span class="str">'eof) collect line)))</span>
<span class="str">    (loop for i of-type fixnum from 1 below n do</span>
<span class="str">      (loop for line of-type simple-base-string in input</span>
<span class="str">        do (parse-tel line)))</span>
<span class="str">    (loop with i of-type fixnum = 0</span>
<span class="str">          for line of-type string in input</span>
<span class="str">          do (multiple-value-bind (area-code exchange rest) (parse-tel line)</span>
<span class="str">               (when area-code</span>
<span class="str">                 (format t &quot;~A: (~A) ~A-~A~%&quot; (incf i) area-code exchange rest)))))</span>
