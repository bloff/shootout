<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; $Id: regexmatch-poplisp.code,v 1.5 2005-05-15 05:34:04 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; from Jochen Schmidt
</span>
<span class="sym">(</span>proclaim <span class="str">'(optimize (speed 3)(safety 0)(space 0)(debug 0)(compilation-speed 0)))
(setf ext:*bytes-consed-between-gcs* 5000000)
(use-package :meta)
(eval-when (compile load eval)
(meta:enable-meta-syntax)
(deftype digit () '</span><span class="sym">(</span><span class="kwa">member</span> #\<span class="num">0</span> #\<span class="num">1</span> #\<span class="num">2</span> #\<span class="num">3</span> #\<span class="num">4</span> #\<span class="num">5</span> #\<span class="num">6</span> #\<span class="num">7</span> #\<span class="num">8</span> #\<span class="num">9</span><span class="sym">))
(</span>deftype non<span class="sym">-</span>digit <span class="sym">()</span> <span class="str">'(not (member #</span><span class="esc">\0 </span> <span class="str">#</span><span class="esc">\1 </span> <span class="str">#</span><span class="esc">\2 </span> <span class="str">#</span><span class="esc">\3 </span> <span class="str">#</span><span class="esc">\4 </span> <span class="str">#</span><span class="esc">\5 </span> <span class="str">#</span><span class="esc">\6 </span> <span class="str">#</span><span class="esc">\7 </span> <span class="str">#</span><span class="esc">\8 </span> <span class="str">#</span><span class="esc">\9 </span> <span class="str">#</span><span class="esc">\( </span> <span class="str">#</span><span class="esc">\) </span> <span class="str">))))

(defun parse-tel (input)
  (meta:with-string-meta (buffer input)
    (let (last-result)
      (declare (type (or null simple-base-string) last-result))
      (labels ((skip-non-digits (&amp;aux d)
                     (meta:match $[&#64;(non-digit d)]))
               (digit-triplet (&amp;aux (old-index index) d (result (make-array 3 :element-type '</span>base<span class="sym">-</span>char<span class="sym">)))
                     (</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string result<span class="sym">))
                     (</span><span class="kwa">or</span> <span class="sym">(</span>meta<span class="sym">:</span>match <span class="sym">[</span>&#64;<span class="sym">(</span>digit d<span class="sym">) !(</span>setf <span class="sym">(</span>schar result <span class="num">0</span><span class="sym">)</span> d<span class="sym">)
</span>                                      &#64;<span class="sym">(</span>digit d<span class="sym">) !(</span>setf <span class="sym">(</span>schar result <span class="num">1</span><span class="sym">)</span> d<span class="sym">)
</span>                                      &#64;<span class="sym">(</span>digit d<span class="sym">) !(</span>setf <span class="sym">(</span>schar result <span class="num">2</span><span class="sym">)</span> d<span class="sym">)
                                      !(</span>setf <span class="kwa">last</span><span class="sym">-</span>result result<span class="sym">)])
                         (</span><span class="kwa">progn</span> <span class="sym">(</span>setf index old<span class="sym">-</span>index<span class="sym">)</span> nil<span class="sym">)))
               (</span>digit<span class="num">-4</span>tupel <span class="sym">(&amp;</span>aux <span class="sym">(</span>old<span class="sym">-</span>index index<span class="sym">)</span> d <span class="sym">(</span>result <span class="sym">(</span>make<span class="sym">-</span>array <span class="num">4</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'base-char)))
                     (declare (type simple-base-string result))
                     (or (meta:match [&#64;(digit d) !(setf (schar result 0) d)
                                      &#64;(digit d) !(setf (schar result 1) d)
                                      &#64;(digit d) !(setf (schar result 2) d)
                                      &#64;(digit d) !(setf (schar result 3) d)
                                      !(setf last-result result)])
                         (progn (setf index old-index) nil)))
              (telephone-nr (&amp;aux area-code exchange d)
                    (declare (type (or null simple-base-string) area-code exchange))
                    (and (meta:match [!(skip-non-digits)
                                        {[#</span><span class="esc">\( </span> <span class="str">!(digit-triplet) #</span><span class="esc">\)</span><span class="str">] !(digit-triplet)} !(setf area-code last-result)
                                        #</span><span class="esc">\s</span><span class="str">pace !(digit-triplet) !(setf exchange last-result)
                                        {#</span><span class="esc">\s</span><span class="str">pace #</span><span class="esc">\-</span><span class="str">} !(digit-4tupel) {&#64;(non-digit d) !(= index end)}])
                                      (values area-code exchange last-result))))
            (telephone-nr)))))

  (let ((n (parse-integer (or (car pop11::poparglist) &quot;1&quot;)))
        (input (loop for line = (read-line *standard-input* nil '</span>eof<span class="sym">)
</span>                     until <span class="sym">(</span><span class="kwa">eq line</span> <span class="str">'eof) collect line)))
    (loop for i of-type fixnum from 1 below n do
      (loop for line of-type simple-base-string in input
        do (parse-tel line)))
    (loop with i of-type fixnum = 0
          for line of-type string in input
          do (multiple-value-bind (area-code exchange rest) (parse-tel line)
               (when area-code
                 (format t &quot;~A: (~A) ~A-~A~%&quot; (incf i) area-code exchange rest)))))</span>
