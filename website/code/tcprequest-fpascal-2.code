<span class="com">{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Ales Katona
  modified by Marc Weustink
}</span>

<span class="kwa">program</span> tcprequest<span class="sym">;

</span><span class="com">{$mode objfpc}</span><span class="com">{$H-}</span><span class="com">{$I-}</span>

<span class="kwa">uses
</span>  Sockets<span class="sym">,</span> BaseUnix<span class="sym">;

</span><span class="kwa">const
</span>  M            <span class="sym">=</span> <span class="num">100</span><span class="sym">;
</span>  REPLY_SIZE   <span class="sym">=</span> <span class="num">4096</span><span class="sym">;

</span>  REQUEST_SIZE <span class="sym">=</span> <span class="num">64</span><span class="sym">;
</span>  PORT         <span class="sym">=</span> <span class="num">6747</span><span class="sym">;

</span><span class="kwa">var
</span>  Reply   <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>..REPLY_SIZE   <span class="num">- 1</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">Byte</span><span class="sym">;
</span>  Request <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>..REQUEST_SIZE <span class="num">- 1</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">Byte</span><span class="sym">;
</span>  Server  <span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;

</span><span class="kwa">procedure</span> DoServer<span class="sym">;
</span><span class="kwa">var
</span>  Client <span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;
</span>  Addr   <span class="sym">:</span> TSockAddr<span class="sym">;
</span>  len    <span class="sym">:</span> <span class="kwb">Cardinal</span> <span class="sym">=</span> SizeOf<span class="sym">(</span>Addr<span class="sym">);
</span><span class="kwa">begin
</span>  Client<span class="sym">:=</span>fpAccept<span class="sym">(</span>Server<span class="sym">, &#64;</span>addr<span class="sym">, &#64;</span>len<span class="sym">);

</span>  <span class="kwa">while</span> fpRecv<span class="sym">(</span>Client<span class="sym">, &#64;</span>Request<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> REQUEST_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">) &gt;</span> <span class="num">0</span> <span class="kwa">do
</span>    fpSend<span class="sym">(</span>Client<span class="sym">, &#64;</span>Reply<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> REPLY_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">);

</span>  CloseSocket<span class="sym">(</span>Client<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> DoClient<span class="sym">(</span><span class="kwa">const</span> msg_count<span class="sym">,</span> msg_mult<span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">);
</span><span class="kwa">var
</span>  n<span class="sym">,</span> cnt<span class="sym">,</span> Client<span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>  Addr          <span class="sym">:</span> TSockAddr<span class="sym">;
</span>  Replies       <span class="sym">:</span> <span class="kwb">Cardinal</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>  Bytes         <span class="sym">:</span> <span class="kwb">Cardinal</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">begin
</span>  Addr.sin_addr.s_addr <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>  Addr.sin_addr.s_bytes<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> <span class="num">127</span><span class="sym">;
</span>  Addr.sin_addr.s_bytes<span class="sym">[</span><span class="num">4</span><span class="sym">] :=</span> <span class="num">1</span><span class="sym">;
</span>  Addr.sin_port<span class="sym">:=</span>htons<span class="sym">(</span>PORT<span class="sym">);
</span>  Addr.sin_family<span class="sym">:=</span>AF_INET<span class="sym">;

</span>  Client<span class="sym">:=</span>fpSocket<span class="sym">(</span>AF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>  fpConnect<span class="sym">(</span>Client<span class="sym">, &#64;</span>Addr<span class="sym">,</span> SizeOf<span class="sym">(</span>Addr<span class="sym">));

</span>  <span class="kwa">for</span> n <span class="sym">:=</span> msg_count <span class="sym">*</span> msg_mult <span class="num">- 1</span> <span class="kwa">downto</span> <span class="num">0</span> <span class="kwa">do begin
</span>    fpSend<span class="sym">(</span>Client<span class="sym">, &#64;</span>Request<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> REQUEST_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>    cnt <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwa">repeat
</span>      Inc<span class="sym">(</span>cnt<span class="sym">,</span> fpRecv<span class="sym">(</span>Client<span class="sym">, &#64;</span>Reply<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> REPLY_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">));
</span>    <span class="kwa">until</span> cnt <span class="sym">&gt;=</span> REPLY_SIZE<span class="sym">;
</span>    Inc<span class="sym">(</span>Bytes<span class="sym">,</span> cnt<span class="sym">);
</span>    Inc<span class="sym">(</span>Replies<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;

</span>  CloseSocket<span class="sym">(</span>Client<span class="sym">);
</span>  Writeln<span class="sym">(</span><span class="str">'replies: '</span><span class="sym">,</span> Replies<span class="sym">,</span> <span class="esc">#9</span><span class="str">'bytes: '</span><span class="sym">,</span> Bytes<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">var
</span>  N<span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">=</span> <span class="num">10</span><span class="sym">;
</span>  e<span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>  PID<span class="sym">:</span> TPid<span class="sym">;
</span>  Addr   <span class="sym">:</span> TSockAddr<span class="sym">;
</span><span class="kwa">begin
  if</span> ParamCount <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> Val<span class="sym">(</span>ParamStr<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> N<span class="sym">,</span> e<span class="sym">);

</span>  Addr.sin_addr.s_addr<span class="sym">:=</span><span class="num">0</span><span class="sym">;
</span>  Addr.sin_port<span class="sym">:=</span>htons<span class="sym">(</span>PORT<span class="sym">);
</span>  Addr.sin_family<span class="sym">:=</span>AF_INET<span class="sym">;

</span>  Server<span class="sym">:=</span>fpSocket<span class="sym">(</span>AF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>  SetSocketOptions<span class="sym">(</span>Server<span class="sym">,</span> SOL_SOCKET<span class="sym">,</span> SO_REUSEADDR<span class="sym">,</span> <span class="kwb">True</span><span class="sym">,</span> SizeOF<span class="sym">(</span><span class="kwb">True</span><span class="sym">));
</span>  fpBind<span class="sym">(</span>Server<span class="sym">, &#64;</span>addr<span class="sym">,</span> SizeOf<span class="sym">(</span>Addr<span class="sym">));
</span>  fpListen<span class="sym">(</span>Server<span class="sym">,</span> <span class="num">1</span><span class="sym">);

</span>  PID<span class="sym">:=</span>fpFork<span class="sym">;
</span>  <span class="kwa">if</span> PID <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then begin
</span>    DoServer<span class="sym">;
</span>    CloseSocket<span class="sym">(</span>Server<span class="sym">);
</span>    FpWait<span class="sym">(</span>PID<span class="sym">);
</span>  <span class="kwa">end else</span> DoClient<span class="sym">(</span>M<span class="sym">,</span> N<span class="sym">);
</span><span class="kwa">end</span>.
