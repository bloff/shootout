<span class="dir">#!/usr/bin/env slsh
</span><span class="sym">%</span> The Computer Language Shootout Benchmarks
<span class="sym">%</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/
</span><span class="sym">%
%</span> contributed by John E<span class="sym">.</span> Davis

<span class="kwc">typedef</span> <span class="kwb">struct</span> <span class="sym">{</span> left<span class="sym">,</span> right<span class="sym">,</span> item <span class="sym">}</span> TreeNode_Type<span class="sym">;

</span><span class="kwc">private</span> define item_check <span class="sym">();
</span><span class="kwc">private</span> define item_check <span class="sym">(</span>tree<span class="sym">)
{
</span>   variable left <span class="sym">=</span> tree<span class="sym">.</span>left<span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>left <span class="sym">==</span> NULL<span class="sym">)
</span>     <span class="kwa">return</span> tree<span class="sym">.</span>item<span class="sym">;

</span>   <span class="kwa">return</span> tree<span class="sym">.</span>item <span class="sym">+</span> item_check<span class="sym">(</span>left<span class="sym">) -</span> item_check <span class="sym">(</span>tree<span class="sym">.</span>right<span class="sym">);
}

</span><span class="kwc">private</span> define bottomup_tree <span class="sym">();
</span><span class="kwc">private</span> define bottomup_tree <span class="sym">(</span>item<span class="sym">,</span> depth<span class="sym">)
{
</span>   variable s <span class="sym">=</span> &#64;TreeNode_Type<span class="sym">;
   !</span><span class="kwa">if</span> <span class="sym">(</span>depth<span class="sym">)
     {
</span>	s<span class="sym">.</span>item <span class="sym">=</span> item<span class="sym">;
</span>	<span class="kwa">return</span> s<span class="sym">;
     }
</span>   depth<span class="sym">--;
</span>   set_struct_fields <span class="sym">(</span>s<span class="sym">,</span> bottomup_tree <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item <span class="num">- 1</span><span class="sym">,</span> depth<span class="sym">),
</span>		      bottomup_tree <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> item<span class="sym">,</span> depth<span class="sym">),</span> item<span class="sym">);
</span>   <span class="kwa">return</span> s<span class="sym">;
}

</span>define slsh_main <span class="sym">()
{
</span>   variable N <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> N <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);

</span>   variable max_depth <span class="sym">=</span> N<span class="sym">,</span> min_depth <span class="sym">=</span> <span class="num">4</span><span class="sym">;

</span>   <span class="kwa">if</span> <span class="sym">(</span>min_depth <span class="sym">+</span> <span class="num">2</span> <span class="sym">&gt;</span> N<span class="sym">)
</span>     max_depth <span class="sym">=</span> min_depth <span class="sym">+</span> <span class="num">2</span><span class="sym">;

</span>   variable stretch_depth <span class="sym">=</span> max_depth <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>   variable stretch_tree <span class="sym">=</span> bottomup_tree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretch_depth<span class="sym">);
   () =</span> fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;stretch tree of depth %u</span><span class="esc">\t  </span>  <span class="str">check: %ld</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span>		 stretch_depth<span class="sym">,</span> item_check <span class="sym">(</span>stretch_tree<span class="sym">));
</span>   stretch_tree <span class="sym">=</span> NULL<span class="sym">;

</span>   variable longlived_tree <span class="sym">=</span> bottomup_tree <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> max_depth<span class="sym">);

</span>   _for <span class="sym">(</span>min_depth<span class="sym">,</span> max_depth<span class="sym">,</span> <span class="num">2</span><span class="sym">)
    {
</span>       variable depth <span class="sym">= ();
</span>       variable iterations <span class="sym">=</span> <span class="num">1</span> shl <span class="sym">(</span>max_depth <span class="sym">-</span> depth <span class="sym">+</span> min_depth<span class="sym">);
</span>       variable check <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>       _for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> iterations<span class="sym">,</span> <span class="num">1</span><span class="sym">)
	 {
</span>	    variable i <span class="sym">= ();
</span>            variable tmp <span class="sym">=</span> bottomup_tree <span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">);
</span>            check <span class="sym">+=</span> item_check <span class="sym">(</span>tmp<span class="sym">);
</span>	    tmp <span class="sym">=</span> NULL<span class="sym">;
</span>            tmp <span class="sym">=</span> bottomup_tree <span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">);
</span>            check <span class="sym">+=</span> item_check <span class="sym">(</span>tmp<span class="sym">);
</span>	    tmp <span class="sym">=</span> NULL<span class="sym">;
        }

       () =</span> fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d</span><span class="esc">\t  </span>  <span class="str">trees of depth %u</span><span class="esc">\t  </span>  <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span>		     iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> depth<span class="sym">,</span> check<span class="sym">);
    }

   () =</span> fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;long lived tree of depth %u</span><span class="esc">\t  </span>  <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span>		 max_depth<span class="sym">,</span> item_check <span class="sym">(</span>longlived_tree<span class="sym">));
}</span>
