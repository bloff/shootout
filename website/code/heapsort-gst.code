<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<B><FONT COLOR="#BC8F8F">&quot;  The Great Computer Language Shootout
   contributed by Isaac Gouy (improved by Paolo Bonzini)

   To run: gst -QI /usr/local/share/smalltalk/gst.im heapsort.st -a 80000
&quot;</FONT></B>


!Array methodsFor: <B><FONT COLOR="#BC8F8F">'sorting'</FONT></B>!

heapsort
   | j i ir l r |
   ir := self size.
   l := self size // 2 + 1.  
   
   [
      l &gt; 1 
         ifTrue: [ r := self at: (l := l - 1)]
         ifFalse: [
            r := self at: ir.
            self at: ir put: (self at: 1).
            ir := ir - 1.
            ir = 1 ifTrue: [self at: 1 put: r. ^self] ]. 
      
      i := l.
      j := l * 2.
      [j &lt;= ir] whileTrue: [
         (j &lt; ir <B><FONT COLOR="#A020F0">and</FONT></B>: [(self at: j) &lt; (self at: j + 1)]) 
            ifTrue: [j := j + 1].
            
         r &lt; (self at: j)
            ifTrue: [self at: i put: (self at: j). i := j. j := j + i]
            ifFalse: [j := ir + 1].
      ].
      self at: i put: r.
   
   ] repeat ! !


Object subclass: <I><FONT COLOR="#B22222">#RandomNumber
</FONT></I>instanceVariableNames: <B><FONT COLOR="#BC8F8F">'seed scale'</FONT></B>
classVariableNames: <B><FONT COLOR="#BC8F8F">'Increment Multiplier Modulus FModulus'</FONT></B>
poolDictionaries: <B><FONT COLOR="#BC8F8F">''</FONT></B>
category: nil !

!RandomNumber class methodsFor: <B><FONT COLOR="#BC8F8F">'initialize'</FONT></B>!

initialize
   Increment := 29573.
   Multiplier := 3877.
   Modulus := 139968.
   FModulus := 139968.0d ! !


!RandomNumber class methodsFor: <B><FONT COLOR="#BC8F8F">'instance creation'</FONT></B>!

to: anInteger
   ^self basicNew to: anInteger ! !


!RandomNumber methodsFor: <B><FONT COLOR="#BC8F8F">'accessing'</FONT></B>!

<B><FONT COLOR="#A020F0">next</FONT></B>
   seed := seed * Multiplier + Increment \\ Modulus.
     ^(seed * scale) asFloatD / FModulus ! !

!RandomNumber methodsFor: <B><FONT COLOR="#BC8F8F">'private'</FONT></B>!

to: anInteger
   seed := 42.
   scale := anInteger ! !


!Float methodsFor: <B><FONT COLOR="#BC8F8F">'printing'</FONT></B>!

printStringRoundedTo: anInteger
   | <B><FONT COLOR="#A020F0">s</FONT></B> |
   <B><FONT COLOR="#A020F0">s</FONT></B> := (0.5d * (10 raisedToInteger: anInteger negated) + self) printString.
   ^<B><FONT COLOR="#A020F0">s</FONT></B> copyFrom: 1 to: (<B><FONT COLOR="#A020F0">s</FONT></B> indexOf: $.) + anInteger ! !  



| n data randomNumber |
n := Smalltalk arguments first asInteger.
data := Array <B><FONT COLOR="#A020F0">new</FONT></B>: n.
randomNumber := RandomNumber initialize; to: 1.
1 to: n <B><FONT COLOR="#A020F0">do</FONT></B>: [:i| data at: i put: randomNumber <B><FONT COLOR="#A020F0">next</FONT></B>]. 

data heapsort.
(data <B><FONT COLOR="#A020F0">last</FONT></B> printStringRoundedTo: 10) displayNl !

</pre></td></tr></table>
