<span class="str">&quot;  The Great Computer Language Shootout</span>
<span class="str">   contributed by Isaac Gouy (improved by Paolo Bonzini)</span>
<span class="str"></span>
<span class="str">   To run: gst -QI /usr/share/gnu-smalltalk/gst.im heapsort.st -a 80000</span>
<span class="str">&quot;</span>

<span class="sym">!</span>Array methodsFor<span class="sym">:</span> <span class="str">'sorting'</span><span class="sym">!</span>

heapsort
   <span class="sym">|</span> j i ir l r <span class="sym">|</span>
   ir <span class="sym">:=</span> self size.
   l <span class="sym">:=</span> self size <span class="sym">//</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">1</span>.

   <span class="sym">[</span>
      l <span class="sym">&gt;</span> <span class="num">1</span>
         ifTrue<span class="sym">: [</span> r <span class="sym">:=</span> self at<span class="sym">: (</span>l <span class="sym">:=</span> l <span class="sym">-</span> <span class="num">1</span><span class="sym">)]</span>
         ifFalse<span class="sym">: [</span>
            r <span class="sym">:=</span> self at<span class="sym">:</span> ir.
            self at<span class="sym">:</span> ir put<span class="sym">: (</span>self at<span class="sym">:</span> <span class="num">1</span><span class="sym">)</span>.
            ir <span class="sym">:=</span> ir <span class="sym">-</span> <span class="num">1</span>.
            ir <span class="sym">=</span> <span class="num">1</span> ifTrue<span class="sym">: [</span>self at<span class="sym">:</span> <span class="num">1</span> put<span class="sym">:</span> r. ^self<span class="sym">] ]</span>.

      i <span class="sym">:=</span> l.
      j <span class="sym">:=</span> l <span class="sym">*</span> <span class="num">2</span>.
      <span class="sym">[</span>j <span class="sym">&lt;=</span> ir<span class="sym">]</span> whileTrue<span class="sym">: [</span>
         <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="kwa">and</span><span class="sym">: [(</span>self at<span class="sym">:</span> j<span class="sym">) &lt; (</span>self at<span class="sym">:</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">)])</span>
            ifTrue<span class="sym">: [</span>j <span class="sym">:=</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>.

         r <span class="sym">&lt; (</span>self at<span class="sym">:</span> j<span class="sym">)</span>
            ifTrue<span class="sym">: [</span>self at<span class="sym">:</span> i put<span class="sym">: (</span>self at<span class="sym">:</span> j<span class="sym">)</span>. i <span class="sym">:=</span> j. j <span class="sym">:=</span> j <span class="sym">+</span> i<span class="sym">]</span>
            ifFalse<span class="sym">: [</span>j <span class="sym">:=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>.
      <span class="sym">]</span>.
      self at<span class="sym">:</span> i put<span class="sym">:</span> r.
   <span class="sym">]</span> repeat <span class="sym">! !</span>


Object subclass<span class="sym">:</span> <span class="slc">#RandomNumber</span>
instanceVariableNames<span class="sym">:</span> <span class="str">'seed scale'</span>
classVariableNames<span class="sym">:</span> <span class="str">'Increment Multiplier Modulus FModulus'</span>
poolDictionaries<span class="sym">:</span> <span class="str">''</span>
category<span class="sym">:</span> nil <span class="sym">!</span>

<span class="sym">!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'initialize'</span><span class="sym">!</span>

initialize
   Increment <span class="sym">:=</span> <span class="num">29573</span>.
   Multiplier <span class="sym">:=</span> <span class="num">3877</span>.
   Modulus <span class="sym">:=</span> <span class="num">139968</span>.
   FModulus <span class="sym">:=</span> <span class="num">139968.0</span>d <span class="sym">! !</span>

<span class="sym">!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   ^self basicNew to<span class="sym">:</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

<span class="kwa">next</span>
   seed <span class="sym">:=</span> seed <span class="sym">*</span> Multiplier <span class="sym">+</span> Increment <span class="esc">\\</span> Modulus.
   ^<span class="sym">(</span>seed <span class="sym">*</span> scale<span class="sym">)</span> asFloatD <span class="sym">/</span> FModulus <span class="sym">! !</span>

<span class="sym">!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!</span>

to<span class="sym">:</span> anInteger
   seed <span class="sym">:=</span> <span class="num">42</span>.
   scale <span class="sym">:=</span> anInteger <span class="sym">! !</span>


<span class="sym">!</span>Float methodsFor<span class="sym">:</span> <span class="str">'printing'</span><span class="sym">!</span>

printStringRoundedTo<span class="sym">:</span> anInteger
   <span class="sym">|</span> s <span class="sym">|</span>
   s <span class="sym">:= (</span><span class="num">0.5</span>d <span class="sym">* (</span><span class="num">10</span> raisedToInteger<span class="sym">:</span> anInteger negated<span class="sym">) +</span> self<span class="sym">)</span> printString.
   ^s copyFrom<span class="sym">:</span> <span class="num">1</span> to<span class="sym">: (</span>s indexOf<span class="sym">: $</span>.<span class="sym">) +</span> anInteger <span class="sym">! !</span>


<span class="sym">|</span> n data randomNumber <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger.
data <span class="sym">:=</span> Array new<span class="sym">:</span> n.
randomNumber <span class="sym">:=</span> RandomNumber initialize<span class="sym">;</span> to<span class="sym">:</span> <span class="num">1</span>.
<span class="num">1</span> to<span class="sym">:</span> n <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span> data at<span class="sym">:</span> i put<span class="sym">:</span> randomNumber <span class="kwa">next</span><span class="sym">]</span>.
data heapsort.
<span class="sym">(</span>data <span class="kwa">last</span> printStringRoundedTo<span class="sym">:</span> <span class="num">10</span><span class="sym">)</span> displayNl <span class="sym">!</span>
