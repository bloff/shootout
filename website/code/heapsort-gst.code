<span class="line">    1 </span><span class="str">&quot;  The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="str">    contributed by Isaac Gouy (improved by Paolo Bonzini)
</span><span class="line">    3 </span><span class="str"> 
</span><span class="line">    4 </span><span class="str">    To run: gst -QI /usr/local/share/smalltalk/gst.im heapsort.st -a 80000
</span><span class="line">    5 </span><span class="str"> &quot;</span>
<span class="line">    6 </span>
<span class="line">    7 </span>
<span class="line">    8 </span>   <span class="sym">!</span>Array methodsFor<span class="sym">:</span> <span class="str">'sorting'</span><span class="sym">!
</span><span class="line">    9 </span><span class="sym"> 
</span><span class="line">   10 </span><span class="sym"> </span>heapsort
<span class="line">   11 </span>    <span class="sym">|</span> j i ir l r <span class="sym">|
</span><span class="line">   12 </span><span class="sym"> </span>   ir <span class="sym">:=</span> self size.
<span class="line">   13 </span>    l <span class="sym">:=</span> self size <span class="sym">//</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">1</span>.
<span class="line">   14 </span>
<span class="line">   15 </span>          <span class="sym">[
</span><span class="line">   16 </span><span class="sym"> </span>      l <span class="sym">&gt;</span> <span class="num">1
</span><span class="line">   17 </span><span class="num">  </span>         ifTrue<span class="sym">: [</span> r <span class="sym">:=</span> self at<span class="sym">: (</span>l <span class="sym">:=</span> l <span class="num">- 1</span><span class="sym">)]
</span><span class="line">   18 </span><span class="sym"> </span>         ifFalse<span class="sym">: [
</span><span class="line">   19 </span><span class="sym"> </span>            r <span class="sym">:=</span> self at<span class="sym">:</span> ir.
<span class="line">   20 </span>             self at<span class="sym">:</span> ir put<span class="sym">: (</span>self at<span class="sym">:</span> <span class="num">1</span><span class="sym">)</span>.
<span class="line">   21 </span>             ir <span class="sym">:=</span> ir <span class="num">- 1</span>.
<span class="line">   22 </span>             ir <span class="sym">=</span> <span class="num">1</span> ifTrue<span class="sym">: [</span>self at<span class="sym">:</span> <span class="num">1</span> put<span class="sym">:</span> r. ^self<span class="sym">] ]</span>.
<span class="line">   23 </span>
<span class="line">   24 </span>               i <span class="sym">:=</span> l.
<span class="line">   25 </span>       j <span class="sym">:=</span> l <span class="sym">*</span> <span class="num">2</span>.
<span class="line">   26 </span>       <span class="sym">[</span>j <span class="sym">&lt;=</span> ir<span class="sym">]</span> whileTrue<span class="sym">: [
</span><span class="line">   27 </span><span class="sym">          (</span>j <span class="sym">&lt;</span> ir <span class="kwa">and</span><span class="sym">: [(</span>self at<span class="sym">:</span> j<span class="sym">) &lt; (</span>self at<span class="sym">:</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">)])
</span><span class="line">   28 </span><span class="sym">  </span>            ifTrue<span class="sym">: [</span>j <span class="sym">:=</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>.
<span class="line">   29 </span>
<span class="line">   30 </span>                       r <span class="sym">&lt; (</span>self at<span class="sym">:</span> j<span class="sym">)
</span><span class="line">   31 </span><span class="sym"> </span>            ifTrue<span class="sym">: [</span>self at<span class="sym">:</span> i put<span class="sym">: (</span>self at<span class="sym">:</span> j<span class="sym">)</span>. i <span class="sym">:=</span> j. j <span class="sym">:=</span> j <span class="sym">+</span> i<span class="sym">]
</span><span class="line">   32 </span><span class="sym"> </span>            ifFalse<span class="sym">: [</span>j <span class="sym">:=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>.
<span class="line">   33 </span>       <span class="sym">]</span>.
<span class="line">   34 </span>       self at<span class="sym">:</span> i put<span class="sym">:</span> r.
<span class="line">   35 </span>
<span class="line">   36 </span>        <span class="sym">]</span> repeat <span class="sym">! !
</span><span class="line">   37 </span><span class="sym"> 
</span><span class="line">   38 </span><span class="sym"> 
</span><span class="line">   39 </span><span class="sym"> </span>Object subclass<span class="sym">:</span> <span class="slc">#RandomNumber 
</span><span class="line">   40 </span><span class="slc"></span>instanceVariableNames<span class="sym">:</span> <span class="str">'seed scale'</span>
<span class="line">   41 </span> classVariableNames<span class="sym">:</span> <span class="str">'Increment Multiplier Modulus FModulus'</span>
<span class="line">   42 </span> poolDictionaries<span class="sym">:</span> <span class="str">''</span>
<span class="line">   43 </span> category<span class="sym">:</span> nil <span class="sym">!
</span><span class="line">   44 </span><span class="sym"> 
</span><span class="line">   45 </span><span class="sym"> !</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'initialize'</span><span class="sym">!
</span><span class="line">   46 </span><span class="sym"> 
</span><span class="line">   47 </span><span class="sym"> </span>initialize
<span class="line">   48 </span>    Increment <span class="sym">:=</span> <span class="num">29573</span>.
<span class="line">   49 </span>    Multiplier <span class="sym">:=</span> <span class="num">3877</span>.
<span class="line">   50 </span>    Modulus <span class="sym">:=</span> <span class="num">139968</span>.
<span class="line">   51 </span>    FModulus <span class="sym">:=</span> <span class="num">139968.0d</span> <span class="sym">! !
</span><span class="line">   52 </span><span class="sym"> 
</span><span class="line">   53 </span><span class="sym"> 
</span><span class="line">   54 </span><span class="sym"> !</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!
</span><span class="line">   55 </span><span class="sym"> 
</span><span class="line">   56 </span><span class="sym"> </span>to<span class="sym">:</span> anInteger
<span class="line">   57 </span>    ^self basicNew to<span class="sym">:</span> anInteger <span class="sym">! !
</span><span class="line">   58 </span><span class="sym"> 
</span><span class="line">   59 </span><span class="sym"> 
</span><span class="line">   60 </span><span class="sym"> !</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!
</span><span class="line">   61 </span><span class="sym"> 
</span><span class="line">   62 </span><span class="sym"> </span><span class="kwa">next
</span><span class="line">   63 </span><span class="kwa"> </span>   seed <span class="sym">:=</span> seed <span class="sym">*</span> Multiplier <span class="sym">+</span> Increment \\ Modulus.
<span class="line">   64 </span>      ^<span class="sym">(</span>seed <span class="sym">*</span> scale<span class="sym">)</span> asFloatD <span class="sym">/</span> FModulus <span class="sym">! !
</span><span class="line">   65 </span><span class="sym"> 
</span><span class="line">   66 </span><span class="sym"> !</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!
</span><span class="line">   67 </span><span class="sym"> 
</span><span class="line">   68 </span><span class="sym"> </span>to<span class="sym">:</span> anInteger
<span class="line">   69 </span>    seed <span class="sym">:=</span> <span class="num">42</span>.
<span class="line">   70 </span>    scale <span class="sym">:=</span> anInteger <span class="sym">! !
</span><span class="line">   71 </span><span class="sym"> 
</span><span class="line">   72 </span><span class="sym"> 
</span><span class="line">   73 </span><span class="sym"> !</span>Float methodsFor<span class="sym">:</span> <span class="str">'printing'</span><span class="sym">!
</span><span class="line">   74 </span><span class="sym"> 
</span><span class="line">   75 </span><span class="sym"> </span>printStringRoundedTo<span class="sym">:</span> anInteger
<span class="line">   76 </span>    <span class="sym">|</span> s <span class="sym">|
</span><span class="line">   77 </span><span class="sym"> </span>   s <span class="sym">:= (</span><span class="num">0.5d</span> <span class="sym">* (</span><span class="num">10</span> raisedToInteger<span class="sym">:</span> anInteger negated<span class="sym">) +</span> self<span class="sym">)</span> printString.
<span class="line">   78 </span>    ^s copyFrom<span class="sym">:</span> <span class="num">1</span> to<span class="sym">: (</span>s indexOf<span class="sym">:</span> <span class="kwb">$</span>.<span class="sym">) +</span> anInteger <span class="sym">! !
</span><span class="line">   79 </span><span class="sym">   
</span><span class="line">   80 </span><span class="sym"> 
</span><span class="line">   81 </span><span class="sym"> 
</span><span class="line">   82 </span><span class="sym"> |</span> n data randomNumber <span class="sym">|
</span><span class="line">   83 </span><span class="sym"> </span>n <span class="sym">:=</span> Smalltalk arguments first asInteger.
<span class="line">   84 </span> data <span class="sym">:=</span> Array new<span class="sym">:</span> n.
<span class="line">   85 </span> randomNumber <span class="sym">:=</span> RandomNumber initialize<span class="sym">;</span> to<span class="sym">:</span> <span class="num">1</span>.
<span class="line">   86 </span> <span class="num">1</span> to<span class="sym">:</span> n <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span> data at<span class="sym">:</span> i put<span class="sym">:</span> randomNumber <span class="kwa">next</span><span class="sym">]</span>.
<span class="line">   87 </span>
<span class="line">   88 </span>   data heapsort.
<span class="line">   89 </span> <span class="sym">(</span>data <span class="kwa">last</span> printStringRoundedTo<span class="sym">:</span> <span class="num">10</span><span class="sym">)</span> displayNl <span class="sym">!
</span><span class="line">   90 </span><span class="sym"> 
</span><span class="line">   91 </span><span class="sym"> </span> 
