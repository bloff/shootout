<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org
</span>
<span class="slc">-- contributed by Jim Rogers
</span>

<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span><span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;

</span><span class="kwa">procedure</span> Fannkuch <span class="kwa">is
   type</span> Perm_Array <span class="kwa">is array</span><span class="sym">(</span><span class="kwb">Natural</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> <span class="kwb">Natural</span><span class="sym">;
</span>   <span class="kwa">procedure</span> Swap<span class="sym">(</span>A<span class="sym">,</span> B <span class="sym">:</span> <span class="kwa">in out</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">is
</span>      Temp <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> A<span class="sym">;
</span>   <span class="kwa">begin
</span>      A <span class="sym">:=</span> B<span class="sym">;
</span>      B <span class="sym">:=</span> Temp<span class="sym">;
</span>   <span class="kwa">end</span> Swap<span class="sym">;

</span>   <span class="kwa">function</span> Fann<span class="sym">(</span>N <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is
</span>      M        <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> N <span class="num">- 1</span><span class="sym">;
</span>      Perm     <span class="sym">:</span> Perm_Array<span class="sym">(</span><span class="num">0</span>..M<span class="sym">);
</span>      Perm1    <span class="sym">:</span> Perm_Array<span class="sym">(</span><span class="num">0</span>..M<span class="sym">);
</span>      Count    <span class="sym">:</span> Perm_Array<span class="sym">(</span><span class="num">0</span>..M<span class="sym">);
</span>      Max_Flips_Count <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      R        <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> N<span class="sym">;
</span>   <span class="kwa">begin
      for</span> I <span class="kwa">in</span> Perm1<span class="sym">'</span><span class="kwa">range loop
</span>         Perm1<span class="sym">(</span>I<span class="sym">) :=</span> I<span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">loop
         while</span> R <span class="sym">/=</span> <span class="num">1</span> <span class="kwa">loop
</span>            Count<span class="sym">(</span>R <span class="num">- 1</span><span class="sym">) :=</span> R<span class="sym">;
</span>            R <span class="sym">:=</span> R <span class="num">- 1</span><span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>         <span class="kwa">if not</span> <span class="sym">(</span>Perm1<span class="sym">(</span><span class="num">0</span><span class="sym">) =</span> <span class="num">0</span> <span class="kwa">or</span> Perm1<span class="sym">(</span>M<span class="sym">) =</span> M<span class="sym">)</span> <span class="kwa">then
</span>            Perm <span class="sym">:=</span> Perm1<span class="sym">;
</span>            <span class="kwa">declare
</span>               Flips_Count <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>               K           <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;
</span>            <span class="kwa">begin
               loop
</span>                  K <span class="sym">:=</span> Perm<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>                  <span class="kwa">exit when</span> K <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>                  <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span>..<span class="sym">((</span>K <span class="sym">+</span> <span class="num">1</span><span class="sym">)/</span><span class="num">2</span> <span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">loop
</span>                     Swap<span class="sym">(</span>Perm<span class="sym">(</span>I<span class="sym">),</span> Perm<span class="sym">(</span>K <span class="sym">-</span> I<span class="sym">));
</span>                  <span class="kwa">end loop</span><span class="sym">;
</span>                  Flips_Count <span class="sym">:=</span> Flips_Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>               <span class="kwa">end loop</span><span class="sym">;
</span>               <span class="kwa">if</span> Flips_Count <span class="sym">&gt;</span> Max_Flips_Count <span class="kwa">then
</span>                  Max_Flips_Count <span class="sym">:=</span> Flips_Count<span class="sym">;
</span>               <span class="kwa">end if</span><span class="sym">;
</span>            <span class="kwa">end</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">loop
            if</span> R <span class="sym">=</span> N <span class="kwa">then
               return</span> Max_Flips_Count<span class="sym">;
</span>            <span class="kwa">end if</span><span class="sym">;
</span>            <span class="kwa">declare
</span>               Perm0 <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> Perm1<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>               J <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;
</span>               I <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>            <span class="kwa">begin
               while</span> I <span class="sym">&lt;</span> R <span class="kwa">loop
</span>                  J <span class="sym">:=</span> I <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>                  Perm1<span class="sym">(</span>I<span class="sym">) :=</span> Perm1<span class="sym">(</span>J<span class="sym">);
</span>                  I <span class="sym">:=</span> J<span class="sym">;
</span>               <span class="kwa">end loop</span><span class="sym">;
</span>               Perm1<span class="sym">(</span>r<span class="sym">) :=</span> Perm0<span class="sym">;
</span>            <span class="kwa">end</span><span class="sym">;
</span>            Count<span class="sym">(</span>R<span class="sym">) :=</span> Count<span class="sym">(</span>R<span class="sym">) -</span> <span class="num">1</span><span class="sym">;
</span>            <span class="kwa">exit when</span> Count<span class="sym">(</span>R<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">;
</span>            r <span class="sym">:=</span> R <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">end</span> Fann<span class="sym">;
</span>   Num <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">7</span><span class="sym">;
</span><span class="kwa">begin
   if</span> Argument_Count <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then
</span>      Num <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">end if</span><span class="sym">;
</span>   Put_Line<span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">&amp;
</span>      <span class="kwb">Positive</span><span class="sym">'</span>Image<span class="sym">(</span>Num<span class="sym">) &amp;
</span>         <span class="str">&quot; ) =&quot;</span> <span class="sym">&amp;</span> <span class="kwb">Positive</span><span class="sym">'</span>Image<span class="sym">(</span>Fann<span class="sym">(</span>Num<span class="sym">)));
</span><span class="kwa">end</span> Fannkuch<span class="sym">;
</span>
