<span class="com">(*</span>
<span class="com"> * $Id: heapsort-ocamlb.code,v 1.9 2006-09-30 16:39:17 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * with help from Markus Mottl</span>
<span class="com"> *)</span>

<span class="kwa">let</span> im <span class="sym">=</span> <span class="num">139968</span> <span class="kwa">and</span> ia <span class="sym">=</span> <span class="num">3877</span> <span class="kwa">and</span> ic <span class="sym">=</span> <span class="num">29573</span> <span class="kwa">and</span> last_ref <span class="sym">=</span> ref <span class="num">42</span>

<span class="kwa">let</span> gen_random max <span class="sym">=</span>
  <span class="kwa">let</span> new_last <span class="sym">= (!</span>last_ref <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> <span class="kwa">mod</span> im <span class="kwa">in</span>
  last_ref <span class="sym">:=</span> new_last<span class="sym">;</span>
  max <span class="sym">*</span>. float_of_int new_last <span class="sym">/</span>. <span class="kwb">float</span> im


<span class="kwa">let</span> heapsort n ra <span class="sym">=</span>
  <span class="kwa">let</span> l <span class="sym">=</span> <span class="kwd">ref</span> <span class="sym">((</span>n <span class="kwa">lsr</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">)</span>
  <span class="kwa">and</span> rra <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">and</span> i <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">and</span> j <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">and</span> ir <span class="sym">=</span> ref n <span class="kwa">in</span>
  <span class="kwa">try</span>
    <span class="kwa">while true do</span>
      <span class="kwa">if</span> <span class="sym">!</span>l <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then begin</span>
        decr l<span class="sym">;</span>
        rra <span class="sym">:=</span> ra.<span class="sym">(!</span>l<span class="sym">)</span>
      <span class="kwa">end</span>
      <span class="kwa">else begin</span>
        rra <span class="sym">:=</span> ra.<span class="sym">(!</span>ir<span class="sym">);</span>
        ra.<span class="sym">(!</span>ir<span class="sym">) &lt;-</span> ra.<span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
        decr ir<span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">!</span>ir <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then begin</span>
          ra.<span class="sym">(</span><span class="num">1</span><span class="sym">) &lt;- !</span>rra<span class="sym">;</span>
          raise Exit
        <span class="kwa">end</span>
      <span class="kwa">end</span><span class="sym">;</span>
      i <span class="sym">:= !</span>l<span class="sym">;</span>
      j <span class="sym">:= !</span>l <span class="kwa">lsl</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">while</span> <span class="sym">!</span>j <span class="sym">&lt;= !</span>ir <span class="kwa">do</span>
        <span class="kwa">if</span> <span class="sym">!</span>j <span class="sym">&lt; !</span>ir <span class="sym">&amp;&amp;</span> ra.<span class="sym">(!</span>j<span class="sym">) &lt;</span> ra.<span class="sym">(!</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">then</span> incr j<span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">!</span>rra <span class="sym">&lt;</span> ra.<span class="sym">(!</span>j<span class="sym">)</span> <span class="kwa">then begin</span>
          ra.<span class="sym">(!</span>i<span class="sym">) &lt;-</span> ra.<span class="sym">(!</span>j<span class="sym">);</span>
          i <span class="sym">:= !</span>j<span class="sym">;</span>
          j <span class="sym">:= !</span>j <span class="sym">+ !</span>i
        <span class="kwa">end</span>
        <span class="kwa">else</span> j <span class="sym">:= !</span>ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">done</span><span class="sym">;</span>
      ra.<span class="sym">(!</span>i<span class="sym">) &lt;- !</span>rra<span class="sym">;</span>
    <span class="kwa">done</span>
  <span class="kwa">with</span> Exit <span class="sym">-&gt; ()</span>

<span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">if</span> Array.length Sys.argv <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;;</span>
<span class="kwa">let</span> ary <span class="sym">=</span> Array.<span class="kwd">init</span> <span class="sym">(</span>n <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span><span class="kwa">fun</span> _ <span class="sym">-&gt;</span> gen_random <span class="num">1.0</span><span class="sym">)</span> <span class="kwa">in</span>
heapsort n ary<span class="sym">;</span>
Printf.printf <span class="str">&quot;%.10f</span><span class="esc">\n</span><span class="str">&quot;</span> ary.<span class="sym">(</span>n<span class="sym">)</span>
