<span class="com">/* The Great Computer Language Shootout
    http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

To compile:
	   nicec --sourcepath=.. -d=. -a hash2.jar hash2

To run:
   java -ea -jar hash2.jar 150
*/</span>


<span class="kwa">import</span> ackermann<span class="sym">;</span> <span class="slc">// reuse toSinglePositiveInt
</span>
<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   var n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);
</span>   <span class="kwa">let</span> nKeys <span class="sym">=</span> <span class="num">10000</span><span class="sym">;

</span>   <span class="kwa">let</span> table1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">(</span>nKeys<span class="sym">);
</span>   <span class="kwa">let</span> table2 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();
</span>   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;=</span> nKeys<span class="sym">;</span> i<span class="sym">++)
 </span>      table1<span class="sym">[</span><span class="str">&quot;foo_&quot;</span> <span class="sym">+</span> i<span class="sym">] =</span> <span class="kwa">new</span> Cell<span class="sym">(</span>value<span class="sym">:</span> i<span class="sym">);

</span>   <span class="kwc">String</span> key<span class="sym">;
</span>   <span class="kwb">int</span> v1<span class="sym">;
        </span>   ?Cell c2<span class="sym">;</span>      <span class="slc">// c2 = table2[key] can be null 
</span>
   <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)
 </span>     <span class="kwa">for</span> <span class="sym">(</span>each <span class="sym">:</span> table1<span class="sym">.</span>entrySet<span class="sym">) {
</span>         key <span class="sym">=</span> each<span class="sym">.</span>getKey<span class="sym">;
</span>         v1 <span class="sym">=</span> each<span class="sym">.</span>getValue<span class="sym">.</span>value<span class="sym">;
                       </span>         <span class="kwa">if</span> <span class="sym">( (</span>c2 <span class="sym">=</span> table2<span class="sym">[</span>key<span class="sym">]) !=</span> null<span class="sym">)
</span>            c2<span class="sym">.</span>value <span class="sym">+=</span> v1<span class="sym">;
   </span>         <span class="kwa">else
 </span>            table2<span class="sym">[</span>key<span class="sym">] =</span> <span class="kwa">new</span> Cell<span class="sym">(</span>value<span class="sym">:</span> v1<span class="sym">);
      }

   </span>   print<span class="sym">(</span>table1<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">]);
</span>   print<span class="sym">(</span><span class="str">&quot; &quot;</span> <span class="sym">+</span> table1<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">]);
</span>   print<span class="sym">(</span><span class="str">&quot; &quot;</span> <span class="sym">+</span> table2<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">]);
</span>   println<span class="sym">(</span><span class="str">&quot; &quot;</span> <span class="sym">+</span> table2<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">]);
}


</span><span class="kwa">class</span> Cell <span class="sym">{</span> <span class="kwb">int</span> value<span class="sym">; }

</span>toString<span class="sym">(</span>Cell c<span class="sym">) =</span> c<span class="sym">.</span>value<span class="sym">.</span>toString<span class="sym">;</span>
