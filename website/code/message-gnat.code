<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org
</span><span class="slc">--
</span><span class="slc">-- contributed by Jim Rogers
</span>
<span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;
</span><span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;

</span><span class="kwa">procedure</span> Threads_flow <span class="kwa">is
   type</span> Link<span class="sym">;
</span>   <span class="kwa">type</span> Link_Access <span class="kwa">is access</span> Link<span class="sym">;
</span>   <span class="kwa">task type</span> Link <span class="sym">(</span>Next_Link <span class="sym">:</span> Link_Access<span class="sym">;</span> Num_Iter <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">)</span><span class="kwa">is
      entry</span> Receive<span class="sym">(</span>I <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Integer</span><span class="sym">);
</span>   <span class="kwa">end</span> Link<span class="sym">;

</span>   <span class="kwa">task body</span> Link <span class="kwa">is
</span>      Val <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      New_Val <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>   <span class="kwa">begin
      for</span> iter <span class="kwa">in</span> <span class="num">1</span>..Num_Iter <span class="kwa">loop
         accept</span> Receive<span class="sym">(</span>I <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">do
</span>            New_Val <span class="sym">:=</span> I<span class="sym">;
</span>         <span class="kwa">end</span> Receive<span class="sym">;
</span>         <span class="kwa">if</span> Next_Link <span class="sym">/=</span> <span class="kwa">null then
</span>            Val <span class="sym">:=</span> New_Val <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>            Next_Link.Receive<span class="sym">(</span>Val<span class="sym">);
</span>         <span class="kwa">else
</span>            Val <span class="sym">:=</span> Val <span class="sym">+</span> New_Val <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">if</span> Next_Link <span class="sym">=</span> <span class="kwa">null then
</span>         Put_Line<span class="sym">(</span><span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Val<span class="sym">));
</span>      <span class="kwa">end if</span><span class="sym">;
</span>   <span class="kwa">end</span> Link<span class="sym">;
</span>   Num_Tasks <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">250</span><span class="sym">;
</span>   Num_Iter  <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">200</span><span class="sym">;
</span>   New_Task <span class="sym">:</span> Link_Access<span class="sym">;
</span>   Last_Task <span class="sym">:</span> Link_Access <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span><span class="kwa">begin
   if</span> Argument_Count <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then
</span>      Num_Iter <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">end if</span><span class="sym">;
</span>   <span class="kwa">for</span> Item <span class="kwa">in</span> <span class="num">1</span>..Num_Tasks <span class="kwa">loop
</span>      New_Task <span class="sym">:=</span> <span class="kwa">new</span> Link<span class="sym">(</span>Last_Task<span class="sym">,</span> Num_Iter<span class="sym">);
</span>      Last_Task <span class="sym">:=</span> New_Task<span class="sym">;
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">for</span> iter <span class="kwa">in</span> <span class="num">1</span>..Num_Iter <span class="kwa">loop
</span>      New_Task.Receive<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="kwa">end</span> Threads_flow<span class="sym">;</span>
