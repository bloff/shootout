<span class="slc"># The Great Computer Language Shootout
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># contributed by Robert Seeger and Simon Geard
</span>

<span class="kwa">package</span> require <span class="kwa">Tcl</span> <span class="num">8.4

</span><span class="kwa">proc</span> main <span class="sym">{</span>n<span class="sym">} {
</span>    <span class="kwa">foreach</span> value <span class="sym">[</span><span class="kwa">list</span> <span class="kwb">$n</span> <span class="sym">[</span><span class="kwa">incr</span> n <span class="num">-1</span><span class="sym">] [</span><span class="kwa">incr</span> n <span class="num">-1</span><span class="sym">]] {
</span>        <span class="kwa">set</span> num <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span> int<span class="sym">(</span>pow<span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="kwb">$value</span><span class="sym">) *</span> <span class="num">10000</span><span class="sym">) }]
</span>        <span class="kwa">puts</span> <span class="sym">[</span><span class="kwa">format</span> <span class="str">&quot;Primes up to %8d %8d&quot;</span> <span class="kwb">$num</span> <span class="sym">[</span>nsieve <span class="kwb">$num</span><span class="sym">]]
    }
}

</span><span class="kwa">proc</span> nsieve <span class="sym">{</span>n<span class="sym">} {
</span>    <span class="kwa">set</span> data <span class="sym">{}
</span>    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {
</span>        <span class="kwa">lappend</span> data <span class="num">1
</span>    <span class="sym">}

</span>    <span class="kwa">set</span> count <span class="num">0
</span>    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">2</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {
</span>        <span class="kwa">if</span> <span class="sym">{ [</span><span class="kwa">lindex</span> <span class="kwb">$data $i</span><span class="sym">] } {
</span>            <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> j <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$i</span> <span class="sym">+</span> <span class="kwb">$i</span><span class="sym">}]} {</span><span class="kwb">$j</span> <span class="sym">&lt;=</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> j <span class="kwb">$i</span><span class="sym">} {
</span>                <span class="kwa">lset</span> data <span class="kwb">$j</span> <span class="num">0
</span>            <span class="sym">}
</span>            <span class="kwa">incr</span> count
        <span class="sym">}
    }

</span>    <span class="kwa">return</span> <span class="kwb">$count
</span><span class="sym">}

</span>main <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]</span>
