<span class="slc">// $Id: heapsort-elastic.code,v 1.5 2006-02-10 07:03:39 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
package heapsort<span class="sym">;</span>

import basic<span class="sym">;</span>
import sys<span class="sym">;</span>
import array<span class="sym">;</span>

local IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>
local IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span>
local IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>

<span class="kwc">private</span> function <span class="kwd">gen_random</span><span class="sym">(</span> n <span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">static</span> LAST <span class="sym">=</span> <span class="num">42.0</span><span class="sym">;</span>
    LAST <span class="sym">= (</span>LAST <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span>n <span class="sym">*</span> LAST <span class="sym">/</span> IM<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwc">private</span> function <span class="kwd">heapsort</span><span class="sym">(</span> n<span class="sym">,</span> ra <span class="sym">)</span>
<span class="sym">{</span>
    local rra<span class="sym">;</span>
    local i<span class="sym">;</span>
    local j<span class="sym">;</span>

    local l <span class="sym">= (</span>n <span class="sym">/</span> <span class="num">2</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>
    local ir <span class="sym">=</span> n<span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {</span>
        <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {</span>
            rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];</span>
            ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
            <span class="kwa">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">) {</span>
                ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;</span>
                <span class="kwa">return</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        i <span class="sym">=</span> l<span class="sym">;</span>
        j <span class="sym">=</span> l <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span>
        <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">) {</span>
            <span class="kwa">if</span> <span class="sym">( (</span>j <span class="sym">&lt;</span> ir<span class="sym">) &amp;&amp; (</span>ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) ) {</span>
                j<span class="sym">++;</span>
            <span class="sym">}</span>
            <span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]) {</span>
                ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];</span>
                i <span class="sym">=</span> j<span class="sym">;</span>
                j <span class="sym">=</span> j <span class="sym">+</span> i<span class="sym">;</span>
            <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">private</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
<span class="kwc">private</span> i<span class="sym">;</span>
<span class="kwc">private</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwc">private</span> ary <span class="sym">=</span> <span class="dir">#[];</span>
<span class="kwa">if</span><span class="sym">(</span>array<span class="sym">.</span><span class="kwd">length</span><span class="sym">(</span>sys<span class="sym">.</span>args<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">) {</span>
    n <span class="sym">=</span> basic<span class="sym">.</span><span class="kwb">int</span><span class="sym">(</span>sys<span class="sym">.</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
    n <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
    ary<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span>
<span class="sym">}</span>
<span class="kwd">heapsort</span><span class="sym">(</span>n<span class="sym">,</span> ary<span class="sym">);</span>

basic<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span>ary<span class="sym">[-</span><span class="num">1</span><span class="sym">],</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
