<span class="line">    1 </span><span class="slc">// $Id: heapsort-elastic.code,v 1.4 2004-11-13 07:41:40 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="slc"></span>package heapsort<span class="sym">;
</span><span class="line">    4 </span><span class="sym">
</span><span class="line">    5 </span><span class="sym"></span>import basic<span class="sym">;
</span><span class="line">    6 </span><span class="sym"></span>import sys<span class="sym">;
</span><span class="line">    7 </span><span class="sym"></span>import array<span class="sym">;
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span>local IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;
</span><span class="line">   10 </span><span class="sym"></span>local IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span>local IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span><span class="kwc">private</span> function gen_random<span class="sym">(</span> n <span class="sym">)
</span><span class="line">   14 </span><span class="sym">{
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwb">static</span> LAST <span class="sym">=</span> <span class="num">42.0</span><span class="sym">;
</span><span class="line">   16 </span><span class="sym"></span>    LAST <span class="sym">= (</span>LAST <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>n <span class="sym">*</span> LAST <span class="sym">/</span> IM<span class="sym">);
</span><span class="line">   18 </span><span class="sym">}
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym"></span><span class="kwc">private</span> function heapsort<span class="sym">(</span> n<span class="sym">,</span> ra <span class="sym">)
</span><span class="line">   21 </span><span class="sym">{
</span><span class="line">   22 </span><span class="sym"></span>    local rra<span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>    local i<span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span>    local j<span class="sym">;
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span>    local l <span class="sym">= (</span>n <span class="sym">/</span> <span class="num">2</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   27 </span><span class="sym"></span>    local ir <span class="sym">=</span> n<span class="sym">;
</span><span class="line">   28 </span><span class="sym">
</span><span class="line">   29 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {
</span><span class="line">   30 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {
</span><span class="line">   31 </span><span class="sym"></span>            rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];
</span><span class="line">   32 </span><span class="sym">        }</span> <span class="kwa">else</span> <span class="sym">{
</span><span class="line">   33 </span><span class="sym"></span>            rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];
</span><span class="line">   34 </span><span class="sym"></span>            ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];
</span><span class="line">   35 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">) {
</span><span class="line">   36 </span><span class="sym"></span>                ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;
</span><span class="line">   37 </span><span class="sym"></span>                <span class="kwa">return</span><span class="sym">;
</span><span class="line">   38 </span><span class="sym">            }
</span><span class="line">   39 </span><span class="sym">        }
</span><span class="line">   40 </span><span class="sym"></span>        i <span class="sym">=</span> l<span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span>        j <span class="sym">=</span> l <span class="sym">*</span> <span class="num">2</span><span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>        <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">) {
</span><span class="line">   43 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">( (</span>j <span class="sym">&lt;</span> ir<span class="sym">) &amp;&amp; (</span>ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) ) {
</span><span class="line">   44 </span><span class="sym"></span>                j<span class="sym">++;
</span><span class="line">   45 </span><span class="sym">            }
</span><span class="line">   46 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]) {
</span><span class="line">   47 </span><span class="sym"></span>                ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];
</span><span class="line">   48 </span><span class="sym"></span>                i <span class="sym">=</span> j<span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span>                j <span class="sym">=</span> j <span class="sym">+</span> i<span class="sym">;
</span><span class="line">   50 </span><span class="sym">            }</span> <span class="kwa">else</span> <span class="sym">{
</span><span class="line">   51 </span><span class="sym"></span>                j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym">            }
</span><span class="line">   53 </span><span class="sym">        }
</span><span class="line">   54 </span><span class="sym"></span>        ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;
</span><span class="line">   55 </span><span class="sym">    }
</span><span class="line">   56 </span><span class="sym">}
</span><span class="line">   57 </span><span class="sym">
</span><span class="line">   58 </span><span class="sym"></span><span class="kwc">private</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span><span class="kwc">private</span> i<span class="sym">;
</span><span class="line">   60 </span><span class="sym"></span><span class="kwc">private</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   61 </span><span class="sym"></span><span class="kwc">private</span> ary <span class="sym">=</span> <span class="dir">#[];
</span><span class="line">   62 </span><span class="dir"></span><span class="kwa">if</span><span class="sym">(</span>array<span class="sym">.</span>length<span class="sym">(</span>sys<span class="sym">.</span>args<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">) {
</span><span class="line">   63 </span><span class="sym"></span>    n <span class="sym">=</span> basic<span class="sym">.</span><span class="kwb">int</span><span class="sym">(</span>sys<span class="sym">.</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   64 </span><span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{
</span><span class="line">   65 </span><span class="sym"></span>    n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   66 </span><span class="sym">}
</span><span class="line">   67 </span><span class="sym"></span><span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   68 </span><span class="sym"></span>    ary<span class="sym">[</span>i<span class="sym">] =</span> gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">);
</span><span class="line">   69 </span><span class="sym">}
</span><span class="line">   70 </span><span class="sym"></span>heapsort<span class="sym">(</span>n<span class="sym">,</span> ary<span class="sym">);
</span><span class="line">   71 </span><span class="sym">
</span><span class="line">   72 </span><span class="sym"></span>basic<span class="sym">.</span>print<span class="sym">(</span>ary<span class="sym">[-</span><span class="num">1</span><span class="sym">],</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
