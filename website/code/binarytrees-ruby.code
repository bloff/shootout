<span class="slc">#!/usr/bin/ruby
</span><span class="slc"># The Comptuer Language Shootout Benchmarks
</span><span class="slc"># http://shootout.alioth.debian.org
</span><span class="slc">#
</span><span class="slc"># contributed by Jesse Millikan
</span>
<span class="kwa">class</span> TreeNode
 <span class="kwa">def</span> initialize<span class="sym">(</span>left<span class="sym">,</span> right<span class="sym">,</span> item<span class="sym">)
</span>  &#64;left = left
  &#64;right = right
  &#64;item = item
 <span class="kwa">end

 def</span> ItemCheck
  <span class="kwa">if</span> &#64;left == <span class="kwa">nil
</span>   &#64;item
  <span class="kwa">else
</span>   &#64;item <span class="sym">+</span> &#64;left.ItemCheck <span class="sym">-</span> &#64;right.ItemCheck
  <span class="kwa">end
 end
end

def</span> BottomUpTree<span class="sym">(</span>item<span class="sym">,</span> depth<span class="sym">)
</span> <span class="kwa">if</span> depth <span class="sym">&gt;</span> <span class="num">0
</span>  item_item = <span class="num">2</span> <span class="sym">*</span> item
  depth <span class="sym">-</span>= <span class="num">1
</span>  TreeNode.new<span class="sym">(
</span>   BottomUpTree<span class="sym">(</span> item_item <span class="num">- 1</span><span class="sym">,</span> depth<span class="sym">),
</span>   BottomUpTree<span class="sym">(</span> item_item<span class="sym">,</span> depth<span class="sym">),
</span>   item<span class="sym">)
</span> <span class="kwa">else
</span>  TreeNode.new<span class="sym">(</span><span class="kwa">nil</span><span class="sym">,</span> <span class="kwa">nil</span><span class="sym">,</span> item<span class="sym">)
</span> <span class="kwa">end
end

</span>max_depth = <span class="kwa">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">]</span>.to_i
min_depth = <span class="num">4

</span>max_depth = min_depth <span class="sym">+</span> <span class="num">2</span> <span class="kwa">if</span> min_depth <span class="sym">+</span> <span class="num">2</span> <span class="sym">&gt;</span> max_depth

stretch_depth = max_depth <span class="sym">+</span> <span class="num">1
</span>stretch_tree = BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretch_depth<span class="sym">)

</span>puts <span class="str">&quot;stretch tree of depth #{stretch_depth}\t check: #{stretch_tree.ItemCheck}&quot;</span>
stretch_tree = <span class="kwa">nil
</span>GC.start <span class="slc"># slightly faster
</span>
long_lived_tree = BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> max_depth<span class="sym">)

</span>min_depth.step<span class="sym">(</span>max_depth <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">do</span> <span class="sym">|</span>depth<span class="sym">|
</span> iterations = <span class="num">2</span><span class="sym">**(</span>max_depth <span class="sym">-</span> depth <span class="sym">+</span> min_depth<span class="sym">)
</span> check = <span class="num">0

</span> <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span>..iterations  <span class="slc"># 1.upto(iterations) do |i|
</span>  temp_tree = BottomUpTree<span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">)
</span>  check <span class="sym">+</span>= temp_tree.ItemCheck

  temp_tree = BottomUpTree<span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">)
</span>  check <span class="sym">+</span>= temp_tree.ItemCheck
 <span class="kwa">end

</span> puts <span class="str">&quot;#{iterations * 2}\t trees of depth #{depth}\t check: #{check}&quot;</span>
<span class="kwa">end

</span>puts <span class="str">&quot;long lived tree of depth #{max_depth}\t check: #{long_lived_tree.ItemCheck}&quot;</span>

