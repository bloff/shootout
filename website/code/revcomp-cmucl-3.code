<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; written by Patrick Frankenberger
</span><span class="slc">;;; modified by Ralph Richard Cook
</span><span class="slc">;;; slight optimization by Risto Laakso
</span>
<span class="sym">(</span>defparameter <span class="sym">*</span><span class="kwa">line</span><span class="sym">*</span> nil<span class="sym">)

(</span>defparameter <span class="sym">+</span><span class="kwa">trans</span><span class="sym">-</span>table<span class="sym">+
  (</span>let <span class="sym">((</span>arr <span class="sym">(</span>make<span class="sym">-</span>array <span class="num">256</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'base-char :initial-element #</span><span class="esc">\s</span><span class="str">pace :adjustable nil :fill-pointer nil)))
    (loop for ch across &quot;ACGTUMRYKVHDB&quot; for tr-ch across &quot;TGCAAKYRMBDHV&quot;
	  do (setf (aref arr (char-code ch)) tr-ch
		   (aref arr (char-code (char-downcase ch))) tr-ch))
    (coerce arr '</span>string<span class="sym">)))
(</span>declaim <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array base<span class="sym">-</span>char <span class="sym">*) +</span><span class="kwa">trans</span><span class="sym">-</span>table<span class="sym">+))

(</span>defmacro complem <span class="sym">(</span>code<span class="sym">)
</span>  `<span class="sym">(</span>aref <span class="sym">+</span><span class="kwa">trans</span><span class="sym">-</span>table<span class="sym">+ (</span>char<span class="sym">-</span>code <span class="sym">,</span>code<span class="sym">)))

(</span><span class="kwa">defun</span> write<span class="sym">-</span><span class="kwa">fix</span><span class="sym">-</span>lines <span class="sym">(</span>data<span class="sym">)
  (</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array base<span class="sym">-</span>char <span class="sym">*)</span> data<span class="sym">))
  (</span>do <span class="sym">((</span>from <span class="num">0</span><span class="sym">)
       (</span>to <span class="sym">(</span><span class="num">1</span><span class="sym">- (</span><span class="kwa">length</span> data<span class="sym">))))
      ((&gt;</span> from to<span class="sym">)</span> nil<span class="sym">)
      (</span>declare <span class="sym">(</span>fixnum from to<span class="sym">))
    (</span>let <span class="sym">((</span>fromchar <span class="sym">(</span>aref data from<span class="sym">))
          (</span>tochar <span class="sym">(</span>aref data to<span class="sym">)))
      (</span>declare <span class="sym">(</span>base<span class="sym">-</span>char fromchar tochar<span class="sym">))
      (</span><span class="kwa">cond</span> <span class="sym">((</span>char<span class="sym">=</span> fromchar #\Newline<span class="sym">) (</span>incf from<span class="sym">))
            ((</span>char<span class="sym">=</span> tochar #\Newline<span class="sym">) (</span>decf to<span class="sym">))
            (</span>t <span class="sym">(</span><span class="kwa">progn
</span>                 <span class="sym">(</span>setf <span class="sym">(</span>aref data from<span class="sym">) (</span>complem tochar<span class="sym">))
                 (</span>setf <span class="sym">(</span>aref data to<span class="sym">) (</span>complem fromchar<span class="sym">))
                 (</span>incf from<span class="sym">)
                 (</span>decf to<span class="sym">))))))
  (</span>write<span class="sym">-</span>string data<span class="sym">))

(</span><span class="kwa">defun</span> write<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>complement <span class="sym">(</span>title data<span class="sym">)
  (</span>write<span class="sym">-</span><span class="kwa">line</span> title<span class="sym">)
  (</span>write<span class="sym">-</span><span class="kwa">fix</span><span class="sym">-</span>lines data<span class="sym">))

(</span><span class="kwa">defun read</span><span class="sym">-</span>pop <span class="sym">(</span>stream eof<span class="sym">-</span>errorp eof<span class="sym">-</span>value<span class="sym">)
  (</span><span class="kwa">if</span> <span class="sym">*</span><span class="kwa">line</span><span class="sym">* (</span>pop <span class="sym">*</span><span class="kwa">line</span><span class="sym">*)
      (</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> stream eof<span class="sym">-</span>errorp eof<span class="sym">-</span>value<span class="sym">)))

(</span><span class="kwa">defun</span> get<span class="sym">-</span>body <span class="sym">()
  (</span>with<span class="sym">-</span>output<span class="sym">-</span>to<span class="sym">-</span>string <span class="sym">(</span>s<span class="sym">)
      (</span>let <span class="sym">((</span><span class="kwa">line</span> <span class="str">&quot;&quot;</span><span class="sym">))
        (</span>loop
          <span class="sym">(</span>setf <span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>pop <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*</span> nil nil<span class="sym">))
          (</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">null line</span><span class="sym">) (</span>return<span class="sym">))
                ((</span>char<span class="sym">= (</span>aref <span class="kwa">line</span> <span class="num">0</span><span class="sym">)</span> #\<span class="sym">&gt;) (</span><span class="kwa">progn</span> <span class="sym">(</span>push <span class="kwa">line</span> <span class="sym">*</span><span class="kwa">line</span><span class="sym">*) (</span>return<span class="sym">)))
                (</span>t <span class="sym">(</span><span class="kwa">progn</span> <span class="sym">(</span>write<span class="sym">-</span>string <span class="kwa">line</span> s<span class="sym">) (</span>write<span class="sym">-</span>char #\Newline s<span class="sym">))))))))

(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>do <span class="sym">((</span>title <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>pop <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*</span> nil nil<span class="sym">)
              (</span><span class="kwa">read</span><span class="sym">-</span>pop <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*</span> nil nil<span class="sym">)))
      ((</span><span class="kwa">null</span> title<span class="sym">)</span> nil<span class="sym">)
    (</span>write<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>complement title <span class="sym">(</span>get<span class="sym">-</span>body<span class="sym">))))</span>
