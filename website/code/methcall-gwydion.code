<span class="kwb">module</span><span class="sym">:</span>     methcall
<span class="kwb">synopsis</span><span class="sym">:</span>   implementation of <span class="str">&quot;Method Calls&quot;</span> benchmark
<span class="kwb">author</span><span class="sym">:</span>     Peter Hinely
<span class="kwb">copyright</span><span class="sym">:</span>  public <span class="kwa">domain</span>


<span class="kwa">define sealed domain</span> <span class="kwd">make</span> <span class="sym">(</span><span class="kwa">subclass</span><span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">));</span>
<span class="kwa">define sealed domain</span> <span class="kwd">initialize</span> <span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">);</span>


<span class="kwa">define class</span> <span class="kwa">&lt;toggle&gt;</span> <span class="sym">(</span><span class="kwa">&lt;object&gt;</span><span class="sym">)</span>
  <span class="kwa">slot</span> value <span class="sym">::</span> <span class="kwa">&lt;boolean&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> start<span class="sym">-</span>state<span class="sym">:;</span>
<span class="kwa">end class</span><span class="sym">;</span>


<span class="kwa">define class</span> <span class="kwa">&lt;nth-toggle&gt;</span> <span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">)</span>
  <span class="kwa">slot</span> counter <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">slot</span> counter<span class="sym">-</span>maxiumum <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> counter<span class="sym">-</span>maxiumum<span class="sym">:;</span>
<span class="kwa">end class</span><span class="sym">;</span>


<span class="kwa">define inline method</span> <span class="kwd">activate</span> <span class="sym">(</span>t <span class="sym">::</span> <span class="kwa">&lt;toggle&gt;</span><span class="sym">) =</span>&gt; t <span class="sym">::</span> <span class="kwa">&lt;toggle&gt;</span><span class="sym">;</span>
  t.value <span class="sym">:=</span> ~t.value<span class="sym">;</span>
  t<span class="sym">;</span>
<span class="kwa">end method</span><span class="sym">;</span>


<span class="kwa">define inline method</span> <span class="kwd">activate</span> <span class="sym">(</span>t <span class="sym">::</span> <span class="kwa">&lt;nth-toggle&gt;</span><span class="sym">) =</span>&gt; t <span class="sym">::</span> <span class="kwa">&lt;nth-toggle&gt;</span><span class="sym">;</span>
  t.counter <span class="sym">:=</span> t.counter <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>t.counter &gt;<span class="sym">=</span> t.counter<span class="sym">-</span>maxiumum<span class="sym">)</span>
    t.value <span class="sym">:=</span> ~t.value<span class="sym">;</span>
    t.counter <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">end</span><span class="sym">;</span>
  t<span class="sym">;</span>
<span class="kwa">end method</span><span class="sym">;</span>


<span class="kwa">begin</span>
  <span class="kwa">let</span> arg <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span><span class="kwd">integer</span><span class="sym">(</span><span class="kwd">element</span><span class="sym">(</span>application<span class="sym">-</span><span class="kwd">arguments</span><span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;1&quot;</span><span class="sym">));</span>

  <span class="kwa">let</span> val <span class="sym">=</span> #t<span class="sym">;</span>
  <span class="kwa">let</span> toggle <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">,</span> start<span class="sym">-</span>state<span class="sym">:</span> val<span class="sym">);</span>

  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> arg<span class="sym">)</span>
    val <span class="sym">:=</span> toggle.activate.value<span class="sym">;</span>
  <span class="kwa">end</span><span class="sym">;</span>

  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwa">if</span> <span class="sym">(</span>val<span class="sym">)</span> <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false&quot;</span> <span class="kwa">end</span><span class="sym">);</span>

  val <span class="sym">:=</span> #t<span class="sym">;</span>
  <span class="kwa">let</span> nth<span class="sym">-</span>toggle <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;nth-toggle&gt;</span><span class="sym">,</span> start<span class="sym">-</span>state<span class="sym">:</span> val<span class="sym">,</span> counter<span class="sym">-</span>maxiumum<span class="sym">:</span> <span class="num">3</span><span class="sym">);</span>

  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> arg<span class="sym">)</span>
    val <span class="sym">:=</span> nth<span class="sym">-</span>toggle.activate.value<span class="sym">;</span>
  <span class="kwa">end</span><span class="sym">;</span>

  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwa">if</span> <span class="sym">(</span>val<span class="sym">)</span> <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false&quot;</span> <span class="kwa">end</span><span class="sym">);</span>
<span class="kwa">end</span>
