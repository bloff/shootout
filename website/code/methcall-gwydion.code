<span class="line">    1 </span><span class="kwb">module</span><span class="sym">:</span>     methcall
<span class="line">    2 </span><span class="kwb">synopsis</span><span class="sym">:</span>   implementation of <span class="str">&quot;Method Calls&quot;</span> benchmark
<span class="line">    3 </span><span class="kwb">author</span><span class="sym">:</span>     Peter Hinely
<span class="line">    4 </span><span class="kwb">copyright</span><span class="sym">:</span>  public <span class="kwa">domain
</span><span class="line">    5 </span><span class="kwa">
</span><span class="line">    6 </span><span class="kwa">
</span><span class="line">    7 </span><span class="kwa">define sealed domain</span> make <span class="sym">(</span><span class="kwa">subclass</span><span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">));
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">define sealed domain</span> initialize <span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">);
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span><span class="kwa">define class</span> <span class="kwa">&lt;toggle&gt;</span> <span class="sym">(</span><span class="kwa">&lt;object&gt;</span><span class="sym">)
</span><span class="line">   12 </span><span class="sym"></span>  <span class="kwa">slot</span> value <span class="sym">::</span> <span class="kwa">&lt;boolean&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> start<span class="sym">-</span>state<span class="sym">:;
</span><span class="line">   13 </span><span class="sym"></span><span class="kwa">end class</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym">
</span><span class="line">   16 </span><span class="sym"></span><span class="kwa">define class</span> <span class="kwa">&lt;nth-toggle&gt;</span> <span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">)
</span><span class="line">   17 </span><span class="sym"></span>  <span class="kwa">slot</span> counter <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   18 </span><span class="sym"></span>  <span class="kwa">slot</span> counter<span class="sym">-</span>maxiumum <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> counter<span class="sym">-</span>maxiumum<span class="sym">:;
</span><span class="line">   19 </span><span class="sym"></span><span class="kwa">end class</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym">
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span><span class="kwa">define inline method</span> activate <span class="sym">(</span>t <span class="sym">::</span> <span class="kwa">&lt;toggle&gt;</span><span class="sym">) =</span>&gt; t <span class="sym">::</span> <span class="kwa">&lt;toggle&gt;</span><span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>  t.value <span class="sym">:=</span> ~t.value<span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span>  t<span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span><span class="kwa">end method</span><span class="sym">;
</span><span class="line">   26 </span><span class="sym">
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym"></span><span class="kwa">define inline method</span> activate <span class="sym">(</span>t <span class="sym">::</span> <span class="kwa">&lt;nth-toggle&gt;</span><span class="sym">) =</span>&gt; t <span class="sym">::</span> <span class="kwa">&lt;nth-toggle&gt;</span><span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>  t.counter <span class="sym">:=</span> t.counter <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>  <span class="kwa">if</span> <span class="sym">(</span>t.counter &gt;<span class="sym">=</span> t.counter<span class="sym">-</span>maxiumum<span class="sym">)
</span><span class="line">   31 </span><span class="sym"></span>    t.value <span class="sym">:=</span> ~t.value<span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>    t.counter <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>  t<span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span><span class="kwa">end method</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym">
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   39 </span><span class="kwa">  let</span> arg <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">(</span>element<span class="sym">(</span>application<span class="sym">-</span>arguments<span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;1&quot;</span><span class="sym">));
</span><span class="line">   40 </span><span class="sym">
</span><span class="line">   41 </span><span class="sym"></span>  <span class="kwa">let</span> val <span class="sym">=</span> #t<span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>  <span class="kwa">let</span> toggle <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">,</span> start<span class="sym">-</span>state<span class="sym">:</span> val<span class="sym">);
</span><span class="line">   43 </span><span class="sym">
</span><span class="line">   44 </span><span class="sym"></span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> arg<span class="sym">)
</span><span class="line">   45 </span><span class="sym"></span>    val <span class="sym">:=</span> toggle.activate.value<span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym">
</span><span class="line">   48 </span><span class="sym"></span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwa">if</span> <span class="sym">(</span>val<span class="sym">)</span> <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false&quot;</span> <span class="kwa">end</span><span class="sym">);
</span><span class="line">   49 </span><span class="sym">
</span><span class="line">   50 </span><span class="sym"></span>  val <span class="sym">:=</span> #t<span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>  <span class="kwa">let</span> nth<span class="sym">-</span>toggle <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;nth-toggle&gt;</span><span class="sym">,</span> start<span class="sym">-</span>state<span class="sym">:</span> val<span class="sym">,</span> counter<span class="sym">-</span>maxiumum<span class="sym">:</span> <span class="num">3</span><span class="sym">);
</span><span class="line">   52 </span><span class="sym">
</span><span class="line">   53 </span><span class="sym"></span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> arg<span class="sym">)
</span><span class="line">   54 </span><span class="sym"></span>    val <span class="sym">:=</span> nth<span class="sym">-</span>toggle.activate.value<span class="sym">;
</span><span class="line">   55 </span><span class="sym"></span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   56 </span><span class="sym">
</span><span class="line">   57 </span><span class="sym"></span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwa">if</span> <span class="sym">(</span>val<span class="sym">)</span> <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false&quot;</span> <span class="kwa">end</span><span class="sym">);
</span><span class="line">   58 </span><span class="sym"></span><span class="kwa">end</span>
