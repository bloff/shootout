<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Word frequency benchmark implemented in a functional style, and using</span>
<span class="slc">% only native list processing facilities. An alternate version using</span>
<span class="slc">% regexp is included within comment markers interspersed throughout the</span>
<span class="slc">% code. List processing version appears to be faster and more efficient,</span>
<span class="slc">% in general at least 50% faster.</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo show<span class="sym">)</span> Application<span class="sym">(</span>exit<span class="sym">)</span> Open<span class="sym">(</span>file text<span class="sym">)</span>

  <span class="slc">%</span>
  <span class="slc">%  Regex at 'x-oz://contrib/regex'</span>
  <span class="slc">%</span>

<span class="kwb">define</span>
  <span class="kwa">class</span> TextFile_
    <span class="kwb">from</span> Open.file Open.text
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  LF <span class="sym">= &amp;</span>\012 SPACE <span class="sym">= &amp;</span>\040

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>MakeWordFreqTable FILE<span class="sym">}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>AddToTable E<span class="sym">}</span> Key <span class="kwb">in</span>
      <span class="kwb">if</span> E \= <span class="kwa">nil</span> <span class="kwb">then</span>
        Key <span class="sym">= {</span>String.toAtom E<span class="sym">}</span>
        <span class="sym">{</span>Dictionary.put Table Key <span class="sym">({</span>Dictionary.condGet Table Key <span class="num">0</span><span class="sym">} +</span> <span class="num">1</span><span class="sym">)}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="slc">%</span>
    <span class="slc">% local</span>
    <span class="slc">%   CFT = {MakeCFT Char.isSpace nil Char.toLower}</span>
    <span class="slc">% in</span>
    <span class="slc">%   fun {CompressLowercaseAndSplit S}</span>
    <span class="slc">%     {String.tokens {CFT S false} SPACE}</span>
    <span class="slc">%   end</span>
    <span class="slc">% end</span>
    <span class="slc">%</span>
    <span class="slc">% RX = {Regex.make &quot;[^A-Za-z]&quot;}</span>
    <span class="slc">%</span>

    <span class="kwa">local</span>
      Fp <span class="sym">=</span> <span class="kwb">fun</span> <span class="sym">{</span>$ E<span class="sym">} {</span>Not <span class="sym">{</span>Char.isAlpha E<span class="sym">}}</span> <span class="kwb">end</span>
      CFT <span class="sym">= {</span>MakeCFT Char.isSpace Fp Char.toLower<span class="sym">}</span>
    <span class="kwb">in</span>
      <span class="kwb">fun</span> <span class="sym">{</span>CompressFilterLowercaseAndSplit S<span class="sym">}</span>
        <span class="sym">{</span>String.tokens <span class="sym">{</span>CFT S false<span class="sym">}</span> SPACE<span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="kwb">proc</span> <span class="sym">{</span>LoadTable<span class="sym">}</span>
      <span class="kwb">case</span> <span class="sym">{</span>FILE getS<span class="sym">(</span>$<span class="sym">)}</span> <span class="kwb">of</span> false <span class="kwb">then</span>
        skip
      <span class="kwb">elseof</span> <span class="sym">!</span>LF<span class="sym">|</span>_ <span class="kwb">then</span>
        skip
      <span class="kwb">elseof</span> LINE <span class="kwb">then</span>

        <span class="slc">%</span>
        <span class="slc">% {ForAll</span>
        <span class="slc">%    {CompressLowercaseAndSplit</span>
        <span class="slc">%      {ByteString.toString {Regex.replace</span>
        <span class="slc">%         LINE</span>
        <span class="slc">%         RX</span>
        <span class="slc">%         fun {$ X Y} &quot; &quot; end}}}</span>
        <span class="slc">%    AddToTable}</span>
        <span class="slc">%</span>

        <span class="sym">{</span>ForAll
          <span class="sym">{</span>CompressFilterLowercaseAndSplit LINE<span class="sym">}</span>
          AddToTable<span class="sym">}</span>

        <span class="sym">{</span>LoadTable<span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    Table <span class="sym">= {</span>NewDictionary<span class="sym">}</span>
  <span class="kwb">in</span>
    <span class="sym">{</span>LoadTable<span class="sym">}</span>
    Table
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>MakeCFT Cp Fp Tp<span class="sym">}</span>
    Compressable <span class="sym">=</span> <span class="kwb">if</span> Cp \= <span class="kwa">nil</span> <span class="kwb">then</span> Cp <span class="kwb">else fun</span> <span class="sym">{</span>$ E<span class="sym">}</span> E <span class="kwb">end end</span>
    Filterable <span class="sym">=</span> <span class="kwb">if</span> Fp \= <span class="kwa">nil</span> <span class="kwb">then</span> Fp <span class="kwb">else fun</span> <span class="sym">{</span>$ _<span class="sym">}</span> false <span class="kwb">end end</span>
    Transform <span class="sym">=</span> <span class="kwb">if</span> Tp \= <span class="kwa">nil</span> <span class="kwb">then</span> Tp <span class="kwb">else fun</span> <span class="sym">{</span>$ E<span class="sym">}</span> E <span class="kwb">end end</span>

    <span class="kwb">fun</span> <span class="sym">{</span>CFT S Flag<span class="sym">}</span>
      <span class="kwb">case</span> S <span class="kwb">of</span> <span class="kwa">nil</span> <span class="kwb">then</span> <span class="kwa">nil</span>
      <span class="kwb">elseof</span> H<span class="sym">|</span>T <span class="kwb">then</span> Pt <span class="kwb">in</span>
        <span class="kwb">if</span> <span class="sym">(</span>Pt <span class="sym">= {</span>Compressable H<span class="sym">})</span> <span class="kwb">then</span>
          <span class="kwb">if</span> Flag <span class="kwb">then</span>
            <span class="sym">{</span>CFT T true<span class="sym">}</span>
          <span class="kwb">else</span>
            <span class="kwb">if</span> <span class="sym">{</span>Filterable H<span class="sym">}</span> <span class="kwb">then</span> SPACE<span class="sym">|{</span>CFT T Pt<span class="sym">}</span> <span class="kwb">else</span> H<span class="sym">|{</span>CFT T Pt<span class="sym">}</span> <span class="kwb">end</span>
          <span class="kwb">end</span>
        <span class="kwb">else</span>
          <span class="kwb">if</span> <span class="sym">{</span>Filterable H<span class="sym">}</span> <span class="kwb">then</span>
            SPACE<span class="sym">|{</span>CFT T Pt<span class="sym">}</span>
          <span class="kwb">else</span>
            <span class="sym">{</span>Transform H<span class="sym">}|{</span>CFT T Pt<span class="sym">}</span>
          <span class="kwb">end</span>
        <span class="kwb">end</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>
  <span class="kwb">in</span>
    CFT
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>PadLeft S Padlen C<span class="sym">} {</span>Append <span class="sym">{</span>MakePad S Padlen C<span class="sym">}</span> S<span class="sym">}</span> <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>MakePad  S Padlen C<span class="sym">}</span> Reqlen <span class="sym">= {</span>Length S<span class="sym">} -</span> Padlen <span class="kwb">in</span>
    <span class="kwb">if</span> Reqlen <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwb">then</span> L <span class="sym">= {</span>MakeList <span class="sym">{</span>Abs Reqlen<span class="sym">}}</span> <span class="kwb">in</span>
      <span class="kwb">for</span> I <span class="kwb">in</span> L <span class="kwb">do</span> I <span class="sym">=</span> C <span class="kwb">end</span>
      L
    <span class="kwb">else</span>
      <span class="kwa">nil</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  Sorter ShowEntry

<span class="slc">% ------------- %</span>

<span class="kwb">in</span>
  Sorter <span class="sym">=</span> <span class="kwb">fun</span> <span class="sym">{</span>$ X#Xt Y#Yt<span class="sym">}</span> <span class="kwb">if</span> Xt <span class="sym">==</span> Yt <span class="kwb">then</span> X <span class="sym">&gt;</span> Y <span class="kwb">else</span> Xt <span class="sym">&gt;</span> Yt <span class="kwb">end end</span>
  ShowEntry <span class="sym">=</span> <span class="kwb">proc</span> <span class="sym">{</span>$ K#V<span class="sym">} {</span>System.showInfo <span class="sym">{</span>PadLeft <span class="sym">{</span>Int.toString V<span class="sym">}</span> <span class="num">7</span> SPACE<span class="sym">}</span> # <span class="str">&quot; &quot;</span> # K<span class="sym">}</span> <span class="kwb">end</span>

  <span class="sym">{</span>ForAll
    <span class="sym">{</span>List.sort <span class="sym">{</span>Dictionary.entries <span class="sym">{</span>MakeWordFreqTable <span class="sym">{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}}}</span> Sorter<span class="sym">}</span>
    ShowEntry<span class="sym">}</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

