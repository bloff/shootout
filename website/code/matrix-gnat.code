<span class="slc">-- $Id: matrix-gnat.code,v 1.5 2004-11-22 07:08:57 bfulgham Exp $
</span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="slc">-- Ada 95 code by C.C.
</span>
<span class="kwa">with</span> Text_IO<span class="sym">,</span> Ada.Strings.Fixed<span class="sym">,</span> Ada.Command_Line<span class="sym">;

</span><span class="kwa">procedure</span> Matrix <span class="kwa">is
   function</span> L_Trim <span class="sym">(</span>Source <span class="sym">:</span> <span class="kwb">String</span><span class="sym">;</span> Side <span class="sym">:</span> Ada.Strings.Trim_End <span class="sym">:=
</span>               Ada.Strings.Left<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">String</span> <span class="kwa">renames</span> Ada.Strings.Fixed.Trim<span class="sym">;

</span>   <span class="kwa">type</span> Int <span class="kwa">is new</span> <span class="kwb">Integer</span><span class="sym">;
</span>   <span class="kwa">type</span> Int_Matrix <span class="kwa">is array</span> <span class="sym">(</span><span class="kwb">Positive</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;,</span> <span class="kwb">Positive</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> Int<span class="sym">;

</span>   <span class="kwa">function</span> Mk_Matrix <span class="sym">(</span>NRows<span class="sym">,</span> NCols <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">return</span> Int_Matrix <span class="kwa">is
</span>      Count    <span class="sym">:</span> Int <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>      M        <span class="sym">:</span> Int_Matrix <span class="sym">(</span><span class="num">1</span> .. NRows<span class="sym">,</span> <span class="num">1</span> .. NCols<span class="sym">);
</span>   <span class="kwa">begin
      for</span> I <span class="kwa">in</span> M<span class="sym">'</span><span class="kwa">Range</span> <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">loop
         for</span> J <span class="kwa">in</span> M<span class="sym">'</span><span class="kwa">Range</span> <span class="sym">(</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">loop
</span>            M <span class="sym">(</span>I<span class="sym">,</span> J<span class="sym">) :=</span> Count<span class="sym">;
</span>            Count <span class="sym">:=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">return</span> M<span class="sym">;
</span>   <span class="kwa">end</span> Mk_Matrix<span class="sym">;

</span>   <span class="kwa">procedure</span> M_Mult <span class="sym">(</span>M1<span class="sym">,</span> M2 <span class="sym">:</span> Int_Matrix<span class="sym">;</span> MM <span class="sym">:</span> <span class="kwa">in out</span> Int_Matrix<span class="sym">)</span> <span class="kwa">is
      pragma</span> Inline <span class="sym">(</span>M_Mult<span class="sym">);
</span>      <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Index_Check<span class="sym">);
</span>      Sum      <span class="sym">:</span> Int<span class="sym">;
</span>   <span class="kwa">begin
      if not</span> <span class="sym">(</span>M1<span class="sym">'</span>First <span class="sym">(</span><span class="num">2</span><span class="sym">) =</span> M2<span class="sym">'</span>First <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">and</span> M1<span class="sym">'</span>Last <span class="sym">(</span><span class="num">2</span><span class="sym">) =</span> M2<span class="sym">'</span>Last <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">and
</span>               M1<span class="sym">'</span>First <span class="sym">(</span><span class="num">1</span><span class="sym">) =</span> MM<span class="sym">'</span>First <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">and</span> M1<span class="sym">'</span>Last <span class="sym">(</span><span class="num">1</span><span class="sym">) =</span> MM<span class="sym">'</span>Last <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">and
</span>               M2<span class="sym">'</span>First <span class="sym">(</span><span class="num">2</span><span class="sym">) =</span> MM<span class="sym">'</span>First <span class="sym">(</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">and</span> M2<span class="sym">'</span>Last <span class="sym">(</span><span class="num">2</span><span class="sym">) =</span> MM<span class="sym">'</span>Last <span class="sym">(</span><span class="num">2</span><span class="sym">))</span> <span class="kwa">then
         raise</span> Constraint_Error<span class="sym">;
</span>      <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">for</span> I <span class="kwa">in</span> M1<span class="sym">'</span><span class="kwa">Range</span> <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">loop
         for</span> J <span class="kwa">in</span> M2<span class="sym">'</span><span class="kwa">Range</span> <span class="sym">(</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">loop
</span>            Sum <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>            <span class="kwa">for</span> KK <span class="kwa">in</span> M1<span class="sym">'</span><span class="kwa">Range</span> <span class="sym">(</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">loop
</span>               Sum <span class="sym">:=</span> Sum <span class="sym">+</span> M1 <span class="sym">(</span>I<span class="sym">,</span> KK<span class="sym">) *</span> M2 <span class="sym">(</span>KK<span class="sym">,</span> J<span class="sym">);
</span>            <span class="kwa">end loop</span><span class="sym">;
</span>            MM <span class="sym">(</span>I<span class="sym">,</span> J<span class="sym">) :=</span> Sum<span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">end</span> M_Mult<span class="sym">;

</span>   Size     <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">30</span><span class="sym">;
</span>   M1<span class="sym">,</span> M2<span class="sym">,</span> MM <span class="sym">:</span> Int_Matrix <span class="sym">(</span><span class="num">1</span> .. Size<span class="sym">,</span> <span class="num">1</span> .. Size<span class="sym">);
</span>   N        <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="kwa">begin
   begin
</span>      N <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">exception
      when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span>   <span class="kwa">end</span><span class="sym">;
</span>   M1 <span class="sym">:=</span> Mk_Matrix <span class="sym">(</span>Size<span class="sym">,</span> Size<span class="sym">);
</span>   M2 <span class="sym">:=</span> Mk_Matrix <span class="sym">(</span>Size<span class="sym">,</span> Size<span class="sym">);
</span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop
</span>      M_Mult <span class="sym">(</span>M1<span class="sym">,</span> M2<span class="sym">,</span> MM<span class="sym">);
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   Text_IO.Put_Line <span class="sym">(</span>L_Trim <span class="sym">(</span>Int<span class="sym">'</span>Image <span class="sym">(</span>MM <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">))) &amp;</span> Int<span class="sym">'</span>Image <span class="sym">(</span>MM <span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="num">4</span><span class="sym">)) &amp;
</span>            Int<span class="sym">'</span>Image <span class="sym">(</span>MM <span class="sym">(</span><span class="num">4</span><span class="sym">,</span> <span class="num">3</span><span class="sym">)) &amp;</span> Int<span class="sym">'</span>Image <span class="sym">(</span>MM <span class="sym">(</span><span class="num">5</span><span class="sym">,</span> <span class="num">5</span><span class="sym">)));
</span><span class="kwa">end</span> Matrix<span class="sym">;</span>
