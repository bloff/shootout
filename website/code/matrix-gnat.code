<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: matrix-gnat.code,v 1.1 2004-11-02 08:52:36 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://dada.perl.it/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- Ada 95 code by C.C.
</FONT></I>
<B><FONT COLOR="#A020F0">with</FONT></B> Text_IO, Ada.Strings.Fixed, Ada.Command_Line;

<B><FONT COLOR="#A020F0">procedure</FONT></B> Matrix <B><FONT COLOR="#A020F0">is</FONT></B>
   <B><FONT COLOR="#A020F0">function</FONT></B> L_Trim (Source : String; Side : Ada.Strings.Trim_End :=
               Ada.Strings.Left) <B><FONT COLOR="#A020F0">return</FONT></B> String <B><FONT COLOR="#A020F0">renames</FONT></B> Ada.Strings.Fixed.Trim;

   <B><FONT COLOR="#A020F0">type</FONT></B> Int <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> Integer;
   <B><FONT COLOR="#A020F0">type</FONT></B> Int_Matrix <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">array</FONT></B> (Positive <B><FONT COLOR="#A020F0">range</FONT></B> &lt;&gt;, Positive <B><FONT COLOR="#A020F0">range</FONT></B> &lt;&gt;) <B><FONT COLOR="#A020F0">of</FONT></B> Int;

   <B><FONT COLOR="#A020F0">function</FONT></B> Mk_Matrix (NRows, NCols : Natural) <B><FONT COLOR="#A020F0">return</FONT></B> Int_Matrix <B><FONT COLOR="#A020F0">is</FONT></B>
      Count    : Int := 1;
      M        : Int_Matrix (1 .. NRows, 1 .. NCols);
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      <B><FONT COLOR="#A020F0">for</FONT></B> I <B><FONT COLOR="#A020F0">in</FONT></B> M'Range (1) <B><FONT COLOR="#A020F0">loop</FONT></B>
         <B><FONT COLOR="#A020F0">for</FONT></B> J <B><FONT COLOR="#A020F0">in</FONT></B> M'Range (2) <B><FONT COLOR="#A020F0">loop</FONT></B>
            M (I, J) := Count;
            Count := Count + 1;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
      <B><FONT COLOR="#A020F0">return</FONT></B> M;
   <B><FONT COLOR="#A020F0">end</FONT></B> Mk_Matrix;

   <B><FONT COLOR="#A020F0">procedure</FONT></B> M_Mult (M1, M2 : Int_Matrix; MM : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> Int_Matrix) <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Inline (M_Mult);
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Index_Check);
      Sum      : Int;
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      <B><FONT COLOR="#A020F0">if</FONT></B> <B><FONT COLOR="#A020F0">not</FONT></B> (M1'First (2) = M2'First (1) <B><FONT COLOR="#A020F0">and</FONT></B> M1'Last (2) = M2'Last (1) <B><FONT COLOR="#A020F0">and</FONT></B>
               M1'First (1) = MM'First (1) <B><FONT COLOR="#A020F0">and</FONT></B> M1'Last (1) = MM'Last (1) <B><FONT COLOR="#A020F0">and</FONT></B>
               M2'First (2) = MM'First (2) <B><FONT COLOR="#A020F0">and</FONT></B> M2'Last (2) = MM'Last (2)) <B><FONT COLOR="#A020F0">then</FONT></B>
         <B><FONT COLOR="#A020F0">raise</FONT></B> Constraint_Error;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
      <B><FONT COLOR="#A020F0">for</FONT></B> I <B><FONT COLOR="#A020F0">in</FONT></B> M1'Range (1) <B><FONT COLOR="#A020F0">loop</FONT></B>
         <B><FONT COLOR="#A020F0">for</FONT></B> J <B><FONT COLOR="#A020F0">in</FONT></B> M2'Range (2) <B><FONT COLOR="#A020F0">loop</FONT></B>
            Sum := 0;
            <B><FONT COLOR="#A020F0">for</FONT></B> KK <B><FONT COLOR="#A020F0">in</FONT></B> M1'Range (2) <B><FONT COLOR="#A020F0">loop</FONT></B>
               Sum := Sum + M1 (I, KK) * M2 (KK, J);
            <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
            MM (I, J) := Sum;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B> M_Mult;

   Size     : <B><FONT COLOR="#A020F0">constant</FONT></B> Natural := 30;
   M1, M2, MM : Int_Matrix (1 .. Size, 1 .. Size);
   N        : Positive := 1;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      N := Positive'Value (Ada.Command_Line.Argument (1));
   <B><FONT COLOR="#A020F0">exception</FONT></B>
      <B><FONT COLOR="#A020F0">when</FONT></B> Constraint_Error =&gt; <B><FONT COLOR="#A020F0">null</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B>;
   M1 := Mk_Matrix (Size, Size);
   M2 := Mk_Matrix (Size, Size);
   <B><FONT COLOR="#A020F0">for</FONT></B> Iter <B><FONT COLOR="#A020F0">in</FONT></B> 1 .. N <B><FONT COLOR="#A020F0">loop</FONT></B>
      M_Mult (M1, M2, MM);
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   Text_IO.Put_Line (L_Trim (Int'Image (MM (1, 1))) &amp; Int'Image (MM (3, 4)) &amp;
            Int'Image (MM (4, 3)) &amp; Int'Image (MM (5, 5)));
<B><FONT COLOR="#A020F0">end</FONT></B> Matrix;</pre></td></tr></table>
