<span class="line">    1 </span><span class="slc">-- $Id: matrix-gnat.code,v 1.4 2004-11-13 07:42:11 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- Ada 95 code by C.C.
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="kwa">with</span> Text_IO<span class="sym">,</span> Ada.Strings.Fixed<span class="sym">,</span> Ada.Command_Line<span class="sym">;
</span><span class="line">    6 </span><span class="sym">
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">procedure</span> Matrix <span class="kwa">is
</span><span class="line">    8 </span><span class="kwa">   function</span> L_Trim <span class="sym">(</span>Source <span class="sym">:</span> <span class="kwb">String</span><span class="sym">;</span> Side <span class="sym">:</span> Ada.Strings.Trim_End <span class="sym">:=
</span><span class="line">    9 </span><span class="sym"></span>               Ada.Strings.Left<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">String</span> <span class="kwa">renames</span> Ada.Strings.Fixed.Trim<span class="sym">;
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span>   <span class="kwa">type</span> Int <span class="kwa">is new</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="line">   12 </span><span class="sym"></span>   <span class="kwa">type</span> Int_Matrix <span class="kwa">is array</span> <span class="sym">(</span><span class="kwb">Positive</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;,</span> <span class="kwb">Positive</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> Int<span class="sym">;
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span>   <span class="kwa">function</span> Mk_Matrix <span class="sym">(</span>NRows<span class="sym">,</span> NCols <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">return</span> Int_Matrix <span class="kwa">is
</span><span class="line">   15 </span><span class="kwa"></span>      Count    <span class="sym">:</span> Int <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   16 </span><span class="sym"></span>      M        <span class="sym">:</span> Int_Matrix <span class="sym">(</span><span class="num">1</span> .. NRows<span class="sym">,</span> <span class="num">1</span> .. NCols<span class="sym">);
</span><span class="line">   17 </span><span class="sym"></span>   <span class="kwa">begin
</span><span class="line">   18 </span><span class="kwa">      for</span> I <span class="kwa">in</span> M<span class="sym">'</span><span class="kwa">Range</span> <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">loop
</span><span class="line">   19 </span><span class="kwa">         for</span> J <span class="kwa">in</span> M<span class="sym">'</span><span class="kwa">Range</span> <span class="sym">(</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">loop
</span><span class="line">   20 </span><span class="kwa"></span>            M <span class="sym">(</span>I<span class="sym">,</span> J<span class="sym">) :=</span> Count<span class="sym">;
</span><span class="line">   21 </span><span class="sym"></span>            Count <span class="sym">:=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>         <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>      <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span>      <span class="kwa">return</span> M<span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>   <span class="kwa">end</span> Mk_Matrix<span class="sym">;
</span><span class="line">   26 </span><span class="sym">
</span><span class="line">   27 </span><span class="sym"></span>   <span class="kwa">procedure</span> M_Mult <span class="sym">(</span>M1<span class="sym">,</span> M2 <span class="sym">:</span> Int_Matrix<span class="sym">;</span> MM <span class="sym">:</span> <span class="kwa">in out</span> Int_Matrix<span class="sym">)</span> <span class="kwa">is
</span><span class="line">   28 </span><span class="kwa">      pragma</span> Inline <span class="sym">(</span>M_Mult<span class="sym">);
</span><span class="line">   29 </span><span class="sym"></span>      <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Index_Check<span class="sym">);
</span><span class="line">   30 </span><span class="sym"></span>      Sum      <span class="sym">:</span> Int<span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span>   <span class="kwa">begin
</span><span class="line">   32 </span><span class="kwa">      if not</span> <span class="sym">(</span>M1<span class="sym">'</span>First <span class="sym">(</span><span class="num">2</span><span class="sym">) =</span> M2<span class="sym">'</span>First <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">and</span> M1<span class="sym">'</span>Last <span class="sym">(</span><span class="num">2</span><span class="sym">) =</span> M2<span class="sym">'</span>Last <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">and
</span><span class="line">   33 </span><span class="kwa"></span>               M1<span class="sym">'</span>First <span class="sym">(</span><span class="num">1</span><span class="sym">) =</span> MM<span class="sym">'</span>First <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">and</span> M1<span class="sym">'</span>Last <span class="sym">(</span><span class="num">1</span><span class="sym">) =</span> MM<span class="sym">'</span>Last <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">and
</span><span class="line">   34 </span><span class="kwa"></span>               M2<span class="sym">'</span>First <span class="sym">(</span><span class="num">2</span><span class="sym">) =</span> MM<span class="sym">'</span>First <span class="sym">(</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">and</span> M2<span class="sym">'</span>Last <span class="sym">(</span><span class="num">2</span><span class="sym">) =</span> MM<span class="sym">'</span>Last <span class="sym">(</span><span class="num">2</span><span class="sym">))</span> <span class="kwa">then
</span><span class="line">   35 </span><span class="kwa">         raise</span> Constraint_Error<span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>      <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   37 </span><span class="sym"></span>      <span class="kwa">for</span> I <span class="kwa">in</span> M1<span class="sym">'</span><span class="kwa">Range</span> <span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">loop
</span><span class="line">   38 </span><span class="kwa">         for</span> J <span class="kwa">in</span> M2<span class="sym">'</span><span class="kwa">Range</span> <span class="sym">(</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">loop
</span><span class="line">   39 </span><span class="kwa"></span>            Sum <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>            <span class="kwa">for</span> KK <span class="kwa">in</span> M1<span class="sym">'</span><span class="kwa">Range</span> <span class="sym">(</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">loop
</span><span class="line">   41 </span><span class="kwa"></span>               Sum <span class="sym">:=</span> Sum <span class="sym">+</span> M1 <span class="sym">(</span>I<span class="sym">,</span> KK<span class="sym">) *</span> M2 <span class="sym">(</span>KK<span class="sym">,</span> J<span class="sym">);
</span><span class="line">   42 </span><span class="sym"></span>            <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>            MM <span class="sym">(</span>I<span class="sym">,</span> J<span class="sym">) :=</span> Sum<span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>         <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span>      <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span>   <span class="kwa">end</span> M_Mult<span class="sym">;
</span><span class="line">   47 </span><span class="sym">
</span><span class="line">   48 </span><span class="sym"></span>   Size     <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">30</span><span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span>   M1<span class="sym">,</span> M2<span class="sym">,</span> MM <span class="sym">:</span> Int_Matrix <span class="sym">(</span><span class="num">1</span> .. Size<span class="sym">,</span> <span class="num">1</span> .. Size<span class="sym">);
</span><span class="line">   50 </span><span class="sym"></span>   N        <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   52 </span><span class="kwa">   begin
</span><span class="line">   53 </span><span class="kwa"></span>      N <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span><span class="line">   54 </span><span class="sym"></span>   <span class="kwa">exception
</span><span class="line">   55 </span><span class="kwa">      when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">   56 </span><span class="sym"></span>   <span class="kwa">end</span><span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>   M1 <span class="sym">:=</span> Mk_Matrix <span class="sym">(</span>Size<span class="sym">,</span> Size<span class="sym">);
</span><span class="line">   58 </span><span class="sym"></span>   M2 <span class="sym">:=</span> Mk_Matrix <span class="sym">(</span>Size<span class="sym">,</span> Size<span class="sym">);
</span><span class="line">   59 </span><span class="sym"></span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop
</span><span class="line">   60 </span><span class="kwa"></span>      M_Mult <span class="sym">(</span>M1<span class="sym">,</span> M2<span class="sym">,</span> MM<span class="sym">);
</span><span class="line">   61 </span><span class="sym"></span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   62 </span><span class="sym"></span>   Text_IO.Put_Line <span class="sym">(</span>L_Trim <span class="sym">(</span>Int<span class="sym">'</span>Image <span class="sym">(</span>MM <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">))) &amp;</span> Int<span class="sym">'</span>Image <span class="sym">(</span>MM <span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="num">4</span><span class="sym">)) &amp;
</span><span class="line">   63 </span><span class="sym"></span>            Int<span class="sym">'</span>Image <span class="sym">(</span>MM <span class="sym">(</span><span class="num">4</span><span class="sym">,</span> <span class="num">3</span><span class="sym">)) &amp;</span> Int<span class="sym">'</span>Image <span class="sym">(</span>MM <span class="sym">(</span><span class="num">5</span><span class="sym">,</span> <span class="num">5</span><span class="sym">)));
</span><span class="line">   64 </span><span class="sym"></span><span class="kwa">end</span> Matrix<span class="sym">;</span>
