<span class="dir">#!/usr/bin/env slsh</span>
<span class="sym">%</span> The Computer Language Shootout Benchmarks
<span class="sym">%</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
<span class="sym">%</span>
<span class="sym">%</span> contributed by John E<span class="sym">.</span> Davis
<span class="kwc">private</span> define <span class="kwd">fannkuch</span> <span class="sym">(</span>n<span class="sym">)</span>
<span class="sym">{</span>
   variable m <span class="sym">=</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
   variable perm1 <span class="sym">= [</span><span class="num">0</span><span class="sym">:</span>m<span class="sym">];</span>
   variable r0<span class="sym">,</span> r1<span class="sym">,</span> r <span class="sym">=</span> n<span class="sym">;</span>
   variable count <span class="sym">=</span> Int_Type<span class="sym">[</span>n<span class="sym">];</span>
   variable max_flipcounts <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   forever
     <span class="sym">{</span>
	<span class="kwd">loop</span> <span class="sym">(</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">) {</span> r<span class="sym">;</span> r<span class="sym">--;</span> count<span class="sym">[</span>r<span class="sym">] = (); }</span>

	<span class="sym">!</span><span class="kwa">if</span> <span class="sym">((</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">or</span> <span class="sym">(</span>perm1<span class="sym">[</span>m<span class="sym">] ==</span> m<span class="sym">))</span>
	  <span class="sym">{</span>
	     variable perm <span class="sym">=</span> &#64;perm1<span class="sym">;</span>
	     variable flipcounts <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	     forever
	       <span class="sym">{</span>
		  variable k <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
		  <span class="sym">!</span><span class="kwa">if</span> <span class="sym">(</span>k<span class="sym">)</span>
		    <span class="kwa">break</span><span class="sym">;</span>
		  <span class="kwd">array_reverse</span> <span class="sym">(</span>perm<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> k<span class="sym">);</span>
		  flipcounts<span class="sym">++;</span>
	       <span class="sym">}</span>
	     <span class="kwa">if</span> <span class="sym">(</span>flipcounts <span class="sym">&gt;</span> max_flipcounts<span class="sym">)</span>
	       max_flipcounts <span class="sym">=</span> flipcounts<span class="sym">;</span>
	  <span class="sym">}</span>
	forever
	  <span class="sym">{</span>
	     <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span>
	       <span class="kwa">return</span> max_flipcounts<span class="sym">;</span>

	     variable perm0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
	     r0 <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> r1 <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
	     <span class="kwd">loop</span> <span class="sym">(</span>r<span class="sym">) {</span> perm1<span class="sym">[</span>r0<span class="sym">] =</span> perm1<span class="sym">[</span>r1<span class="sym">];</span> r0<span class="sym">++;</span> r1<span class="sym">++; }</span>
	     perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0<span class="sym">;</span>
	     variable cr <span class="sym">=</span> count<span class="sym">[</span>r<span class="sym">]-</span><span class="num">1</span><span class="sym">;</span>
	     count<span class="sym">[</span>r<span class="sym">] =</span> cr<span class="sym">;</span>
	     <span class="kwa">if</span> <span class="sym">(</span>cr <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
	       <span class="kwa">break</span><span class="sym">;</span>
	     r<span class="sym">++;</span>
	  <span class="sym">}</span>
     <span class="sym">}</span>
<span class="sym">}</span>

define <span class="kwd">slsh_main</span> <span class="sym">()</span>
<span class="sym">{</span>
   variable num <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> num <span class="sym">=</span> <span class="kwd">integer</span> <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
   <span class="kwd">vmessage</span> <span class="sym">(</span><span class="str">&quot;Pfannkuchen(%d) = %ld&quot;</span><span class="sym">,</span> num<span class="sym">,</span> <span class="kwd">fannkuch</span> <span class="sym">(</span>num<span class="sym">));</span>
<span class="sym">}</span>

