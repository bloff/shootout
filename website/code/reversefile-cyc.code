<span class="com">/*</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> */</span>

<span class="dir">#include &lt;core.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;unistd.h&gt;</span>

<span class="dir">#define MAXREAD 4096</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> ??argv<span class="sym">) {</span>
    <span class="kwb">int</span> nread<span class="sym">,</span> len <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> size <span class="sym">= (</span><span class="num">4</span> <span class="sym">*</span> MAXREAD<span class="sym">);</span>
    <span class="kwb">char</span> ? &#64;nozeroterm buf<span class="sym">;</span>
    buf <span class="sym">=</span> <span class="kwd">umalloc</span><span class="sym">(</span>size <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>

    <span class="kwa">while</span><span class="sym">((</span>nread <span class="sym">= ({</span>let alias<span class="sym">&lt;</span>`r<span class="sym">&gt;</span> <span class="kwb">char</span> ?&#64;nozeroterm `r abuf <span class="sym">=</span> buf<span class="sym">;</span> <span class="kwd">read</span><span class="sym">(</span><span class="num">0</span><span class="sym">,(</span>abuf<span class="sym">+</span>len<span class="sym">),</span>MAXREAD<span class="sym">); })) &gt;</span> <span class="num">0</span><span class="sym">) {</span>
        len <span class="sym">+=</span> nread<span class="sym">;</span>
        <span class="kwa">if</span><span class="sym">(</span>MAXREAD <span class="sym">&gt; (</span>size <span class="sym">-</span> len<span class="sym">)) {</span>
	    <span class="kwb">char</span> ? &#64;nozeroterm buf2<span class="sym">;</span>
            size <span class="sym">&lt;&lt;=</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">if</span><span class="sym">((</span>buf2 <span class="sym">=</span> <span class="kwd">rqrealloc</span><span class="sym">(</span>Core<span class="sym">::</span>heap_region<span class="sym">,</span>Core<span class="sym">::</span>unique_qual<span class="sym">,</span>buf<span class="sym">,</span>size<span class="sym">+</span><span class="num">1</span><span class="sym">)) ==</span> NULL<span class="sym">)</span>
                <span class="kwa">return</span><span class="sym">(</span><span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;realloc failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span>EXIT_FAILURE<span class="sym">);</span>
	    Core<span class="sym">::</span><span class="kwd">ufree</span><span class="sym">(</span>buf<span class="sym">);</span>
	    buf <span class="sym">=</span> buf2<span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">if</span><span class="sym">(</span>nread <span class="sym">== -</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span><span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;read</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span>EXIT_FAILURE<span class="sym">);</span>

    <span class="sym">{</span> let alias <span class="sym">&lt;</span>`r<span class="sym">&gt;</span><span class="kwb">char</span> ? &#64;nozeroterm `r abuf <span class="sym">=</span> buf<span class="sym">;</span>
      <span class="kwb">char</span> ? &#64;nozeroterm `r cp<span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span>cp <span class="sym">=</span> abuf<span class="sym">+</span>len<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> cp <span class="sym">!=</span> abuf<span class="sym">; --</span>cp<span class="sym">,</span>nread<span class="sym">++)</span>
	<span class="kwa">if</span> <span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">== *</span>cp<span class="sym">) {</span>
            <span class="kwd">fwrite</span><span class="sym">(</span>cp<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>nread<span class="sym">,</span><span class="num">1</span><span class="sym">,</span>stdout<span class="sym">);</span>
            nread <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="sym">}</span>

      <span class="kwd">fwrite</span><span class="sym">(</span>cp<span class="sym">,</span>nread<span class="sym">+</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span>stdout<span class="sym">);</span>
    <span class="sym">}</span>
    Core<span class="sym">::</span><span class="kwd">ufree</span><span class="sym">(</span>buf<span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span>EXIT_SUCCESS<span class="sym">);</span>
<span class="sym">}</span>
