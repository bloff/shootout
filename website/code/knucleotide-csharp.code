<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;

</span><span class="kwc">class</span> KNucleotide <span class="sym">{
</span>   <span class="kwc">private</span> String sequence<span class="sym">;
</span>   <span class="kwc">private</span> Hashtable frequencies<span class="sym">;
</span>   <span class="kwc">private</span> <span class="kwb">int</span> k<span class="sym">;

</span>   KNucleotide<span class="sym">(</span>String s<span class="sym">) {
</span>      sequence <span class="sym">=</span> s<span class="sym">;
</span>      frequencies <span class="sym">=</span> <span class="kwa">new</span> Hashtable<span class="sym">();
</span>      k <span class="sym">=</span> <span class="num">0</span><span class="sym">;
   }

</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){
</span>      <span class="slc">// extract nucleotide sequence
</span>      StringBuilder builder <span class="sym">=</span> <span class="kwa">new</span> StringBuilder<span class="sym">();
</span>      String line<span class="sym">;
</span>      <span class="kwb">char</span> c<span class="sym">;

</span>      <span class="kwa">while</span> <span class="sym">( (</span>line <span class="sym">=</span> Console<span class="sym">.</span>ReadLine<span class="sym">()) !=</span> null <span class="sym">) {
</span>         c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>         <span class="kwa">if</span> <span class="sym">((</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">) &amp;&amp; (</span>line<span class="sym">.</span>Substring<span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">5</span><span class="sym">)==</span><span class="str">&quot;THREE&quot;</span><span class="sym">))</span> <span class="kwa">break</span><span class="sym">;
      }

</span>      <span class="kwa">while</span> <span class="sym">( (</span>line <span class="sym">=</span> Console<span class="sym">.</span>ReadLine<span class="sym">()) !=</span> null <span class="sym">) {
</span>         c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>         <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">)
</span>            <span class="kwa">break</span><span class="sym">;
</span>         <span class="kwa">else if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)
</span>            builder<span class="sym">.</span>Append<span class="sym">(</span>line<span class="sym">.</span>ToUpper<span class="sym">());
      }

</span>      <span class="slc">// calculate nucleotide frequencies
</span>      KNucleotide kn <span class="sym">=</span> <span class="kwa">new</span> KNucleotide<span class="sym">(</span> builder<span class="sym">.</span>ToString<span class="sym">() );
</span>      kn<span class="sym">.</span>WriteFrequencies<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span>      kn<span class="sym">.</span>WriteFrequencies<span class="sym">(</span><span class="num">2</span><span class="sym">);

</span>      kn<span class="sym">.</span>WriteCount<span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">);
</span>      kn<span class="sym">.</span>WriteCount<span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">);
</span>      kn<span class="sym">.</span>WriteCount<span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">);
</span>      kn<span class="sym">.</span>WriteCount<span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);
</span>      kn<span class="sym">.</span>WriteCount<span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);
   }


</span>   <span class="kwb">void</span> WriteFrequencies<span class="sym">(</span><span class="kwb">int</span> nucleotideLength<span class="sym">) {
</span>      GenerateFrequencies<span class="sym">(</span>nucleotideLength<span class="sym">);

</span>      KeyValue<span class="sym">[]</span> items <span class="sym">=</span> <span class="kwa">new</span> KeyValue<span class="sym">[</span>frequencies<span class="sym">.</span>Count<span class="sym">];
</span>      frequencies<span class="sym">.</span>Values<span class="sym">.</span>CopyTo<span class="sym">(</span>items<span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>      <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      foreach <span class="sym">(</span>KeyValue each in items<span class="sym">)</span> sum <span class="sym">+= (</span><span class="kwb">int</span><span class="sym">)</span>each<span class="sym">.</span>v<span class="sym">;

</span>      Array<span class="sym">.</span>Sort<span class="sym">(</span>items<span class="sym">,</span> <span class="kwa">new</span> SortByValue<span class="sym">() );
</span>      foreach <span class="sym">(</span>KeyValue each in items<span class="sym">) {
</span>         <span class="kwb">double</span> percent <span class="sym">= (</span><span class="kwb">double</span><span class="sym">)((</span><span class="kwb">int</span><span class="sym">)</span>each<span class="sym">.</span>v<span class="sym">)/(</span><span class="kwb">double</span><span class="sym">)</span>sum <span class="sym">*</span> <span class="num">100.0</span><span class="sym">;
</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0} {1:f2}&quot;</span><span class="sym">, (</span>string<span class="sym">)</span>each<span class="sym">.</span>k<span class="sym">,</span> percent <span class="sym">);
      }
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);
   }

</span>   <span class="kwb">void</span> WriteCount<span class="sym">(</span>String nucleotideFragment<span class="sym">) {
</span>      GenerateFrequencies<span class="sym">(</span>nucleotideFragment<span class="sym">.</span>Length<span class="sym">);

</span>      <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      object item<span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">((</span>item <span class="sym">=</span> frequencies<span class="sym">[</span>nucleotideFragment<span class="sym">]) !=</span> null<span class="sym">)
</span>         count <span class="sym">= ((</span>KeyValue<span class="sym">)</span>item<span class="sym">).</span>v<span class="sym">;
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0}</span><span class="esc">\t</span><span class="str">{1}&quot;</span><span class="sym">,</span> count<span class="sym">,</span> nucleotideFragment <span class="sym">);
   }


</span>   <span class="kwc">private</span> <span class="kwb">void</span> GenerateFrequencies<span class="sym">(</span><span class="kwb">int</span> length<span class="sym">) {
</span>      k <span class="sym">=</span> length<span class="sym">;
</span>      frequencies<span class="sym">.</span>Clear<span class="sym">();
</span>      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> frame<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> frame<span class="sym">&lt;</span>k<span class="sym">;</span> frame<span class="sym">++)</span> KFrequency<span class="sym">(</span>frame<span class="sym">);
   }

</span>   <span class="kwc">private</span> <span class="kwb">void</span> KFrequency<span class="sym">(</span><span class="kwb">int</span> readingFrame<span class="sym">) {
</span>      <span class="kwb">int</span> n <span class="sym">=</span> sequence<span class="sym">.</span>Length <span class="sym">-</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>      object item<span class="sym">;
</span>      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span>readingFrame<span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">+=</span>k<span class="sym">) {
</span>         String knucleo <span class="sym">=</span> sequence<span class="sym">.</span>Substring<span class="sym">(</span>i<span class="sym">,</span>k<span class="sym">);
</span>         <span class="kwa">if</span> <span class="sym">( (</span>item <span class="sym">=</span> frequencies<span class="sym">[</span>knucleo<span class="sym">]) !=</span> null<span class="sym">)
            ((</span>KeyValue<span class="sym">)</span>item<span class="sym">).</span>v<span class="sym">++;
</span>         <span class="kwa">else
</span>            frequencies<span class="sym">[</span>knucleo<span class="sym">] =</span> <span class="kwa">new</span> KeyValue<span class="sym">(</span>knucleo<span class="sym">,</span><span class="num">1</span><span class="sym">);
      }
   }

</span>   <span class="kwc">private class</span> KeyValue <span class="sym">{
</span>      internal String k<span class="sym">;
</span>      internal <span class="kwb">int</span> v<span class="sym">;

</span>      internal KeyValue<span class="sym">(</span>String k<span class="sym">,</span> <span class="kwb">int</span> v<span class="sym">) {
</span>         <span class="kwa">this</span><span class="sym">.</span>k <span class="sym">=</span> k<span class="sym">;
</span>         <span class="kwa">this</span><span class="sym">.</span>v <span class="sym">=</span> v<span class="sym">;
      }
   }

</span>   <span class="kwc">private class</span> SortByValue <span class="sym">:</span> IComparer <span class="sym">{
</span>      internal SortByValue<span class="sym">() {}

</span>      <span class="kwb">int</span> IComparer<span class="sym">.</span>Compare<span class="sym">(</span>object o1<span class="sym">,</span> object o2<span class="sym">) {
</span>         <span class="kwa">return</span> <span class="sym">((</span><span class="kwb">int</span><span class="sym">)((</span>KeyValue<span class="sym">)</span>o2<span class="sym">).</span>v<span class="sym">).</span>CompareTo<span class="sym">((</span><span class="kwb">int</span><span class="sym">)((</span>KeyValue<span class="sym">)</span>o1<span class="sym">).</span>v<span class="sym">);
      }
   }
}



</span>
