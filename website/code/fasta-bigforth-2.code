\ The Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\ Submitted by Ian Osgood
\ modified by Bernd Paysan

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

import <span class="kwb">float float</span> also

<span class="sym">:</span> mem<span class="sym">,</span>
  here over allot swap move <span class="sym">;</span>

\ random
<span class="num">42</span> value seed
<span class="sym">:</span> <span class="kwd">random</span> <span class="sym">( --</span> u <span class="sym">)</span> seed <span class="num">3877</span> <span class="sym">*</span> <span class="num">29573</span> <span class="sym">+</span> <span class="num">139968</span> mod dup to seed <span class="sym">;</span>
<span class="sym">:</span> gen<span class="sym">-</span><span class="kwd">random</span> <span class="sym">(</span> r <span class="sym">--</span> r<span class="str">' ) random fm* 139968e f/ ;</span>
<span class="str"></span>
<span class="str">60 constant line-len</span>
<span class="str">128 constant lines</span>
<span class="str">line-len 1+ lines * Constant buf-size</span>
<span class="str"></span>
<span class="str"></span><span class="esc">\ </span><span class="str">data arrays</span>
<span class="str">Variable linebuf buf-size allot</span>
<span class="str"></span>
<span class="str">create ALU</span>
<span class="str">  s&quot; GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot; mem,</span>
<span class="str">  s&quot; GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot; mem,</span>
<span class="str">  s&quot; CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot; mem,</span>
<span class="str">  s&quot; ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot; mem,</span>
<span class="str">  s&quot; GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot; mem,</span>
<span class="str">  s&quot; AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot; mem,</span>
<span class="str">  s&quot; AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot; mem,</span>
<span class="str">here constant ALU-end</span>
<span class="str"></span>
<span class="str">: f+, ( a f -- a'</span> <span class="sym">)</span> f<span class="sym">+</span> fdup f<span class="sym">, ;</span>
<span class="sym">:</span> <span class="num">0.02</span><span class="sym">-</span>remainder<span class="sym">, (</span> a <span class="sym">--</span> a<span class="sym">&gt;=</span><span class="num">1</span><span class="sym">)</span>
  begin fdup <span class="num">1</span>e f<span class="sym">&lt;</span> <span class="kwa">while</span> <span class="num">0.02</span>e f<span class="sym">+,</span> repeat <span class="sym">;</span>

\ <span class="str">&quot; acgtBDHKMNRSVWY&quot;</span>
falign create IUB   <span class="num">0</span>e
  <span class="num">0.27</span>e f<span class="sym">+,</span>  <span class="num">0.12</span>e f<span class="sym">+,</span>  <span class="num">0.12</span>e f<span class="sym">+,</span>  <span class="num">0.27</span>e f<span class="sym">+,</span>
  <span class="num">0.02</span><span class="sym">-</span>remainder<span class="sym">,</span> fdrop

\ <span class="str">&quot; acgt&quot;</span>
falign create HomoSap  <span class="num">0</span>e
  <span class="num">0.3029549426680</span>e f<span class="sym">+,</span>  <span class="num">0.1979883004921</span>e f<span class="sym">+,</span>
  <span class="num">0.1975473066391</span>e f<span class="sym">+,</span>  <span class="num">0.3015094502008</span>e f<span class="sym">+,</span>  fdrop

<span class="sym">:</span> next<span class="sym">-</span><span class="kwb">char</span> <span class="sym">(</span> a <span class="sym">--</span> a<span class="str">' c )</span>
<span class="str">  dup ALU-end = if drop ALU then  count ;</span>
<span class="str"></span>
<span class="str">: flush, linebuf &#64;+ swap type linebuf off ;</span>
<span class="str">: emit, ( char -- )  linebuf &#64;+ + c!  1 linebuf +! ;</span>
<span class="str">: cr,  #lf emit, linebuf &#64; buf-size = IF</span>
<span class="str">	flush,</span>
<span class="str">    THEN ;</span>
<span class="str"></span>
<span class="str">: ?cr ( col -- col'</span> <span class="sym">)</span> <span class="num">1</span><span class="sym">-</span> dup <span class="num">0</span><span class="sym">=</span> <span class="kwa">if</span> cr<span class="sym">,</span> line<span class="sym">-</span>len <span class="sym">+</span> then <span class="sym">;</span>
<span class="sym">:</span> ?end<span class="sym">-</span><span class="kwd">cr</span> <span class="sym">(</span> col <span class="sym">-- )</span> line<span class="sym">-</span>len <span class="sym">&lt;</span> <span class="kwa">if</span> cr<span class="sym">,</span> then flush<span class="sym">, ;</span>

<span class="sym">:</span> fasta<span class="sym">-</span><span class="kwd">repeat</span> <span class="sym">(</span> n <span class="sym">-- )</span> ALU
    begin over <span class="num">0</span><span class="sym">&gt;</span> <span class="kwa">while</span>
	    over line<span class="sym">-</span>len min <span class="num">0</span> ?DO
		next<span class="sym">-</span><span class="kwb">char</span> emit<span class="sym">,</span>  LOOP  cr<span class="sym">,</span>
	    swap line<span class="sym">-</span>len <span class="sym">-</span> swap
  repeat drop flush<span class="sym">, ;</span>

<span class="sym">:</span> sel<span class="sym">-</span><span class="kwd">random</span> <span class="sym">(</span> probs <span class="sym">--</span> probs c <span class="sym">)</span>
  <span class="num">1</span>e gen<span class="sym">-</span>random s<span class="str">&quot; acgtBDHKMNRSVWY&quot;</span> drop over
  begin dup f&#64; fover f<span class="sym">&lt;</span> <span class="kwa">while</span> <span class="kwb">float</span><span class="sym">+</span> swap <span class="kwb">char</span><span class="sym">+</span> swap repeat
  fdrop drop c&#64; <span class="sym">;</span>

<span class="sym">:</span> fasta<span class="sym">-</span><span class="kwd">random</span> <span class="sym">(</span> n which <span class="sym">-- )</span>
    begin over <span class="num">0</span><span class="sym">&gt;</span> <span class="kwa">while</span>
	    over line<span class="sym">-</span>len min <span class="num">0</span> ?DO
		sel<span class="sym">-</span>random emit<span class="sym">,</span>  LOOP  cr<span class="sym">,</span>
	    swap line<span class="sym">-</span>len <span class="sym">-</span> swap
  repeat drop flush<span class="sym">, ;</span>

<span class="sym">:</span> main
  <span class="sym">.</span><span class="str">&quot; &gt;ONE Homo sapiens alu&quot;</span> cr
  NUM <span class="num">2</span><span class="sym">*</span> fasta<span class="sym">-</span>repeat
  <span class="sym">.</span><span class="str">&quot; &gt;TWO IUB ambiguity codes&quot;</span> cr
  NUM <span class="num">3</span> <span class="sym">*</span> IUB fasta<span class="sym">-</span>random
  <span class="sym">.</span><span class="str">&quot; &gt;THREE Homo sapiens frequency&quot;</span> cr
  NUM <span class="num">5</span> <span class="sym">*</span> HomoSap fasta<span class="sym">-</span>random <span class="sym">;</span>

main bye  \ done<span class="sym">!</span>


