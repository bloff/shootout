<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   http://www.bagley.org/~doug/shootout/
   from Waldek Hebisch

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release moments.d
*/</span>

import std<span class="sym">.</span>stream<span class="sym">,</span> std<span class="sym">.</span>math<span class="sym">,</span> std<span class="sym">.</span>c<span class="sym">.</span>stdlib<span class="sym">;

</span><span class="kwb">void</span> main<span class="sym">()
{
</span>    <span class="kwb">int</span>         n <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwb">int</span>         mid <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwb">double</span>      sum  <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span>      mean <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span>      average_deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span>      standard_deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span>      variance <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span>      skew <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span>      kurtosis <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span>      median <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span><span class="sym">[]</span>    nums<span class="sym">;

</span>    <span class="kwb">int</span> start <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    nums<span class="sym">.</span>length <span class="sym">=</span> <span class="num">4096</span><span class="sym">;
</span>    <span class="kwb">char</span><span class="sym">[]</span> file <span class="sym">=</span> stdin<span class="sym">.</span>toString<span class="sym">();
</span>    foreach<span class="sym">(</span><span class="kwb">int</span> idx<span class="sym">,</span> <span class="kwb">char</span> c<span class="sym">;</span> file<span class="sym">)
    {
</span>        <span class="kwa">if</span><span class="sym">(</span>c <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">||</span> idx <span class="sym">== (</span>file<span class="sym">.</span>length <span class="num">- 1</span><span class="sym">))
        {
</span>            <span class="kwa">if</span><span class="sym">(</span>nums<span class="sym">.</span>length <span class="sym">==</span> n<span class="sym">)</span> nums<span class="sym">.</span>length <span class="sym">=</span> n <span class="sym">*</span> <span class="num">2</span><span class="sym">;
</span>            sum <span class="sym">+= (</span>nums<span class="sym">[</span>n<span class="sym">++] =</span> atof<span class="sym">(</span>cast<span class="sym">(</span><span class="kwb">char</span><span class="sym">*)</span>file<span class="sym">[</span>start<span class="sym">..</span>idx<span class="sym">]));
</span>            start <span class="sym">=</span> idx <span class="sym">+</span> <span class="num">1</span><span class="sym">;
        }
    }

</span>    mean <span class="sym">=</span> sum <span class="sym">/</span> n<span class="sym">;

</span>    foreach<span class="sym">(</span><span class="kwb">double</span> num<span class="sym">;</span> nums<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>n<span class="sym">])
    {
</span>        <span class="kwb">double</span> dev <span class="sym">=</span> num <span class="sym">-</span> mean<span class="sym">;
</span>        average_deviation <span class="sym">+=</span> fabs<span class="sym">(</span>dev<span class="sym">);
</span>        variance <span class="sym">+=</span> dev <span class="sym">*</span> dev<span class="sym">;
</span>        skew <span class="sym">+=</span> dev <span class="sym">*</span> dev <span class="sym">*</span> dev<span class="sym">;
</span>        kurtosis <span class="sym">+=</span> dev <span class="sym">*</span> dev <span class="sym">*</span> dev <span class="sym">*</span> dev<span class="sym">;
    }

</span>    average_deviation <span class="sym">/=</span> n<span class="sym">;
</span>    variance <span class="sym">/= (</span>n <span class="num">- 1</span><span class="sym">);
</span>    standard_deviation <span class="sym">=</span> sqrt<span class="sym">(</span>variance<span class="sym">);

</span>    <span class="kwa">if</span><span class="sym">(</span>variance<span class="sym">)
    {
</span>        skew <span class="sym">/= (</span>n <span class="sym">*</span> variance <span class="sym">*</span> standard_deviation<span class="sym">);
</span>        kurtosis <span class="sym">= (</span>kurtosis<span class="sym">/(</span>n <span class="sym">*</span> variance <span class="sym">*</span> variance<span class="sym">)) -</span> <span class="num">3.0</span><span class="sym">;
    }

</span>    mid <span class="sym">=</span> n <span class="sym">/</span> <span class="num">2</span><span class="sym">;
</span>    kmedian<span class="sym">(</span>nums<span class="sym">,</span> n<span class="sym">,</span> mid<span class="sym">);
</span>    median <span class="sym">=</span> n <span class="sym">%</span> <span class="num">2</span> ? nums<span class="sym">[</span>mid<span class="sym">] : (</span>nums<span class="sym">[</span>mid<span class="sym">] +</span> max<span class="sym">(</span>nums<span class="sym">,</span>mid<span class="sym">))/</span><span class="num">2</span><span class="sym">;

</span>    stdout<span class="sym">.</span>writefln<span class="sym">(</span><span class="str">&quot;n:                  %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n
                   <span class="sym">,</span><span class="str">&quot;median:             %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> median
                   <span class="sym">,</span><span class="str">&quot;mean:               %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> mean
                   <span class="sym">,</span><span class="str">&quot;average_deviation:  %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> average_deviation
                   <span class="sym">,</span><span class="str">&quot;standard_deviation: %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> standard_deviation
                   <span class="sym">,</span><span class="str">&quot;variance:           %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> variance
                   <span class="sym">,</span><span class="str">&quot;skew:               %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> skew
                   <span class="sym">,</span><span class="str">&quot;kurtosis:           %f&quot;</span>  <span class="sym">,</span> kurtosis<span class="sym">);
}

</span><span class="kwb">void</span> kmedian<span class="sym">(</span><span class="kwb">double</span><span class="sym">*</span> a<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">int</span> k<span class="sym">)
{
</span>    <span class="kwa">while</span><span class="sym">(</span><span class="num">1</span><span class="sym">)
    {
</span>        <span class="kwb">int</span> j <span class="sym">=</span> rand<span class="sym">() %</span> n<span class="sym">;
</span>        <span class="kwb">double</span> b <span class="sym">=</span> a<span class="sym">[</span>j<span class="sym">];
</span>        <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>        j <span class="sym">=</span> n <span class="num">- 1</span><span class="sym">;
</span>        <span class="kwa">while</span><span class="sym">(</span><span class="num">1</span><span class="sym">)
        {
</span>            <span class="kwa">while</span><span class="sym">(</span>a<span class="sym">[</span>i<span class="sym">] &lt;</span> b<span class="sym">)</span> i<span class="sym">++;
</span>            <span class="kwa">while</span><span class="sym">(</span>a<span class="sym">[</span>j<span class="sym">] &gt;</span> b<span class="sym">)</span> j<span class="sym">--;
</span>            <span class="kwa">if</span><span class="sym">(</span>i <span class="sym">&lt;</span> j<span class="sym">)
            {
</span>                <span class="kwb">double</span> t <span class="sym">=</span> a<span class="sym">[</span>i<span class="sym">];
</span>                a<span class="sym">[</span>i<span class="sym">] =</span> a<span class="sym">[</span>j<span class="sym">];
</span>                a<span class="sym">[</span>j<span class="sym">] =</span> t<span class="sym">;
</span>                i<span class="sym">++;
</span>                j<span class="sym">--;
            }
</span>            <span class="kwa">else
</span>            <span class="sym">{
</span>                <span class="kwa">if</span><span class="sym">(</span>a<span class="sym">[</span>j<span class="sym">] &lt;</span> b<span class="sym">)</span> j<span class="sym">++;
</span>                <span class="kwa">if</span><span class="sym">(</span>a<span class="sym">[</span>i<span class="sym">] &gt;</span> b<span class="sym">)</span> i<span class="sym">--;
</span>                <span class="kwa">break</span><span class="sym">;
            }
        }
</span>        <span class="kwa">if</span><span class="sym">(</span>i <span class="sym">&lt;</span> k<span class="sym">)
        {
</span>            k <span class="sym">-=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>            n <span class="sym">-=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>            a <span class="sym">+=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
        }
</span>        <span class="kwa">else if</span><span class="sym">(</span>j <span class="sym">&gt;</span> k<span class="sym">)
        {
</span>            n <span class="sym">=</span> j<span class="sym">;
        }
</span>        <span class="kwa">else
</span>        <span class="sym">{
</span>        <span class="kwa">return</span><span class="sym">;
        }
    }
}

</span><span class="kwb">double</span> max<span class="sym">(</span><span class="kwb">double</span><span class="sym">[]</span> a<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)
{
</span>    <span class="kwb">double</span> m <span class="sym">=</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">];

</span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;</span> n<span class="sym">;</span> j<span class="sym">++)
    {
</span>        <span class="kwa">if</span><span class="sym">(</span>a<span class="sym">[</span>j<span class="sym">] &gt;</span> m<span class="sym">)</span> m <span class="sym">=</span> a<span class="sym">[</span>j<span class="sym">];
    }

</span>    <span class="kwa">return</span><span class="sym">(</span>m<span class="sym">);
}</span>
