<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   http://www.bagley.org/~doug/shootout/</span>
<span class="com">   from Waldek Hebisch</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release moments.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stream<span class="sym">,</span> std<span class="sym">.</span>math<span class="sym">,</span> std<span class="sym">.</span>c<span class="sym">.</span>stdlib<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwa">int</span>         n <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">int</span>         mid <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">double</span>      sum  <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">double</span>      mean <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">double</span>      average_deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">double</span>      standard_deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">double</span>      variance <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">double</span>      skew <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">double</span>      kurtosis <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">double</span>      median <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">double</span><span class="sym">[]</span>    nums<span class="sym">;</span>

    <span class="kwa">int</span> start <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    nums<span class="sym">.</span>length <span class="sym">=</span> <span class="num">4096</span><span class="sym">;</span>
    <span class="kwa">char</span><span class="sym">[]</span> file <span class="sym">=</span> stdin<span class="sym">.</span><span class="kwd">toString</span><span class="sym">();</span>
    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">int</span> idx<span class="sym">,</span> <span class="kwa">char</span> c<span class="sym">;</span> file<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>c <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">||</span> idx <span class="sym">== (</span>file<span class="sym">.</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>nums<span class="sym">.</span>length <span class="sym">==</span> n<span class="sym">)</span> nums<span class="sym">.</span>length <span class="sym">=</span> n <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span>
            sum <span class="sym">+= (</span>nums<span class="sym">[</span>n<span class="sym">++] =</span> <span class="kwd">atof</span><span class="sym">(</span><span class="kwa">cast</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">*)</span>file<span class="sym">[</span>start<span class="sym">..</span>idx<span class="sym">]));</span>
            start <span class="sym">=</span> idx <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    mean <span class="sym">=</span> sum <span class="sym">/</span> n<span class="sym">;</span>

    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">double</span> num<span class="sym">;</span> nums<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>n<span class="sym">])</span>
    <span class="sym">{</span>
        <span class="kwa">double</span> dev <span class="sym">=</span> num <span class="sym">-</span> mean<span class="sym">;</span>
        average_deviation <span class="sym">+=</span> <span class="kwc">fabs</span><span class="sym">(</span>dev<span class="sym">);</span>
        variance <span class="sym">+=</span> dev <span class="sym">*</span> dev<span class="sym">;</span>
        skew <span class="sym">+=</span> dev <span class="sym">*</span> dev <span class="sym">*</span> dev<span class="sym">;</span>
        kurtosis <span class="sym">+=</span> dev <span class="sym">*</span> dev <span class="sym">*</span> dev <span class="sym">*</span> dev<span class="sym">;</span>
    <span class="sym">}</span>

    average_deviation <span class="sym">/=</span> n<span class="sym">;</span>
    variance <span class="sym">/= (</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
    standard_deviation <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span>variance<span class="sym">);</span>

    <span class="kwa">if</span><span class="sym">(</span>variance<span class="sym">)</span>
    <span class="sym">{</span>
        skew <span class="sym">/= (</span>n <span class="sym">*</span> variance <span class="sym">*</span> standard_deviation<span class="sym">);</span>
        kurtosis <span class="sym">= (</span>kurtosis<span class="sym">/(</span>n <span class="sym">*</span> variance <span class="sym">*</span> variance<span class="sym">)) -</span> <span class="num">3.0</span><span class="sym">;</span>
    <span class="sym">}</span>

    mid <span class="sym">=</span> n <span class="sym">/</span> <span class="num">2</span><span class="sym">;</span>
    <span class="kwd">kmedian</span><span class="sym">(</span>nums<span class="sym">,</span> n<span class="sym">,</span> mid<span class="sym">);</span>
    median <span class="sym">=</span> n <span class="sym">%</span> <span class="num">2</span> ? nums<span class="sym">[</span>mid<span class="sym">] : (</span>nums<span class="sym">[</span>mid<span class="sym">] +</span> <span class="kwd">max</span><span class="sym">(</span>nums<span class="sym">,</span>mid<span class="sym">))/</span><span class="num">2</span><span class="sym">;</span>

    stdout<span class="sym">.</span><span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;n:                  %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n
                   <span class="sym">,</span><span class="str">&quot;median:             %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> median
                   <span class="sym">,</span><span class="str">&quot;mean:               %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> mean
                   <span class="sym">,</span><span class="str">&quot;average_deviation:  %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> average_deviation
                   <span class="sym">,</span><span class="str">&quot;standard_deviation: %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> standard_deviation
                   <span class="sym">,</span><span class="str">&quot;variance:           %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> variance
                   <span class="sym">,</span><span class="str">&quot;skew:               %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> skew
                   <span class="sym">,</span><span class="str">&quot;kurtosis:           %f&quot;</span>  <span class="sym">,</span> kurtosis<span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">kmedian</span><span class="sym">(</span><span class="kwa">double</span><span class="sym">*</span> a<span class="sym">,</span> <span class="kwa">int</span> n<span class="sym">,</span> <span class="kwa">int</span> k<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">while</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">int</span> j <span class="sym">=</span> <span class="kwd">rand</span><span class="sym">() %</span> n<span class="sym">;</span>
        <span class="kwa">double</span> b <span class="sym">=</span> a<span class="sym">[</span>j<span class="sym">];</span>
        <span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        j <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">while</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">while</span><span class="sym">(</span>a<span class="sym">[</span>i<span class="sym">] &lt;</span> b<span class="sym">)</span> i<span class="sym">++;</span>
            <span class="kwa">while</span><span class="sym">(</span>a<span class="sym">[</span>j<span class="sym">] &gt;</span> b<span class="sym">)</span> j<span class="sym">--;</span>
            <span class="kwa">if</span><span class="sym">(</span>i <span class="sym">&lt;</span> j<span class="sym">)</span>
            <span class="sym">{</span>
                <span class="kwa">double</span> t <span class="sym">=</span> a<span class="sym">[</span>i<span class="sym">];</span>
                a<span class="sym">[</span>i<span class="sym">] =</span> a<span class="sym">[</span>j<span class="sym">];</span>
                a<span class="sym">[</span>j<span class="sym">] =</span> t<span class="sym">;</span>
                i<span class="sym">++;</span>
                j<span class="sym">--;</span>
            <span class="sym">}</span>
            <span class="kwa">else</span>
            <span class="sym">{</span>
                <span class="kwa">if</span><span class="sym">(</span>a<span class="sym">[</span>j<span class="sym">] &lt;</span> b<span class="sym">)</span> j<span class="sym">++;</span>
                <span class="kwa">if</span><span class="sym">(</span>a<span class="sym">[</span>i<span class="sym">] &gt;</span> b<span class="sym">)</span> i<span class="sym">--;</span>
                <span class="kwa">break</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        <span class="kwa">if</span><span class="sym">(</span>i <span class="sym">&lt;</span> k<span class="sym">)</span>
        <span class="sym">{</span>
            k <span class="sym">-=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            n <span class="sym">-=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            a <span class="sym">+=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwa">else if</span><span class="sym">(</span>j <span class="sym">&gt;</span> k<span class="sym">)</span>
        <span class="sym">{</span>
            n <span class="sym">=</span> j<span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwa">else</span>
        <span class="sym">{</span>
        <span class="kwa">return</span><span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">double</span> <span class="kwd">max</span><span class="sym">(</span><span class="kwa">double</span><span class="sym">[]</span> a<span class="sym">,</span> <span class="kwa">int</span> n<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">double</span> m <span class="sym">=</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> j <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;</span> n<span class="sym">;</span> j<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>a<span class="sym">[</span>j<span class="sym">] &gt;</span> m<span class="sym">)</span> m <span class="sym">=</span> a<span class="sym">[</span>j<span class="sym">];</span>
    <span class="sym">}</span>

    <span class="kwa">return</span><span class="sym">(</span>m<span class="sym">);</span>
<span class="sym">}</span>
