<span class="com">(*</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Jon Harrop, 2005</span>
<span class="com"> * Compile: ocamlopt -ffast-math -inline 100 raytracer.ocaml -o raytracer</span>
<span class="com"> *)</span>

<span class="kwa">let</span> delta <span class="sym">=</span> sqrt epsilon_float <span class="kwa">and</span> pi <span class="sym">=</span> <span class="num">4</span>. <span class="sym">*</span>. atan <span class="num">1</span>.

<span class="kwa">type</span> vec <span class="sym">= {</span>x<span class="sym">:</span><span class="kwb">float</span><span class="sym">;</span> y<span class="sym">:</span><span class="kwb">float</span><span class="sym">;</span> z<span class="sym">:</span><span class="kwb">float</span><span class="sym">}</span>
<span class="kwa">let</span> <span class="sym">( *| )</span> s r <span class="sym">= {</span>x <span class="sym">=</span> s <span class="sym">*</span>. r.x<span class="sym">;</span> y <span class="sym">=</span> s <span class="sym">*</span>. r.y<span class="sym">;</span> z <span class="sym">=</span> s <span class="sym">*</span>. r.z<span class="sym">}</span>
<span class="kwa">let</span> <span class="sym">( +| )</span> a b <span class="sym">= {</span>x <span class="sym">=</span> a.x <span class="sym">+</span>. b.x<span class="sym">;</span> y <span class="sym">=</span> a.y <span class="sym">+</span>. b.y<span class="sym">;</span> z <span class="sym">=</span> a.z <span class="sym">+</span>. b.z<span class="sym">}</span>
<span class="kwa">let</span> <span class="sym">( -| )</span> a b <span class="sym">= {</span>x <span class="sym">=</span> a.x <span class="sym">-</span>. b.x<span class="sym">;</span> y <span class="sym">=</span> a.y <span class="sym">-</span>. b.y<span class="sym">;</span> z <span class="sym">=</span> a.z <span class="sym">-</span>. b.z<span class="sym">}</span>
<span class="kwa">let</span> dot a b <span class="sym">=</span> a.x <span class="sym">*</span>. b.x <span class="sym">+</span>. a.y <span class="sym">*</span>. b.y <span class="sym">+</span>. a.z <span class="sym">*</span>. b.z
<span class="kwa">let</span> unitise r <span class="sym">= (</span><span class="num">1</span>. <span class="sym">/</span>. <span class="kwd">sqrt</span> <span class="sym">(</span>dot r r<span class="sym">)) *|</span> r

<span class="kwa">type</span> ray <span class="sym">= {</span> orig<span class="sym">:</span> vec<span class="sym">;</span> dir<span class="sym">:</span> vec <span class="sym">}</span>

<span class="kwa">type</span> scene <span class="sym">=</span> Sphere <span class="kwa">of</span> vec <span class="sym">*</span> <span class="kwb">float</span> <span class="sym">|</span> Group <span class="kwa">of</span> vec <span class="sym">*</span> <span class="kwb">float</span> <span class="sym">*</span> scene array

<span class="kwa">let</span> ray_sphere ray center radius <span class="sym">=</span>
  <span class="kwa">let</span> v <span class="sym">=</span> center <span class="sym">-|</span> ray.orig <span class="kwa">in</span>
  <span class="kwa">let</span> b <span class="sym">=</span> dot v ray.dir <span class="kwa">in</span>
  <span class="kwa">let</span> disc <span class="sym">=</span> b <span class="sym">*</span>. b <span class="sym">-</span>. dot v v <span class="sym">+</span>. radius <span class="sym">*</span>. radius <span class="kwa">in</span>
  <span class="kwa">if</span> disc <span class="sym">&lt;</span> <span class="num">0</span>. <span class="kwa">then</span> infinity <span class="kwa">else</span>
    <span class="kwa">let</span> disc <span class="sym">=</span> sqrt disc <span class="kwa">in</span>
    <span class="sym">(</span><span class="kwa">fun</span> t2 <span class="sym">-&gt;</span> <span class="kwa">if</span> t2 <span class="sym">&lt;</span> <span class="num">0</span>. <span class="kwa">then</span> infinity <span class="kwa">else</span>
       <span class="sym">((</span><span class="kwa">fun</span> t1 <span class="sym">-&gt;</span> <span class="kwa">if</span> t1 <span class="sym">&gt;</span> <span class="num">0</span>. <span class="kwa">then</span> t1 <span class="kwa">else</span> t2<span class="sym">) (</span>b <span class="sym">-</span>. disc<span class="sym">))) (</span>b <span class="sym">+</span>. disc<span class="sym">)</span>

<span class="kwa">let</span> intersect ray scene <span class="sym">=</span>
  <span class="kwa">let rec</span> <span class="kwd">of_scene</span> <span class="sym">((</span>l<span class="sym">,</span> _<span class="sym">)</span> <span class="kwa">as</span> first<span class="sym">) =</span> <span class="kwa">function</span>
      <span class="kwd">Sphere</span> <span class="sym">(</span>center<span class="sym">,</span> radius<span class="sym">) -&gt;</span>
	<span class="kwa">let</span> l<span class="str">' = ray_sphere ray center radius in</span>
<span class="str">	if l'</span> <span class="sym">&gt;=</span> l <span class="kwa">then</span> first <span class="kwa">else</span>
	  l<span class="str">', unitise (ray.orig +| l'</span> <span class="sym">*|</span> ray.dir <span class="sym">-|</span> center<span class="sym">)</span>
    <span class="sym">|</span> <span class="kwd">Group</span> <span class="sym">(</span>center<span class="sym">,</span> radius<span class="sym">,</span> scenes<span class="sym">) -&gt;</span>
	<span class="kwa">let</span> l<span class="str">' = ray_sphere ray center radius in</span>
<span class="str">	if l'</span> <span class="sym">&gt;=</span> l <span class="kwa">then</span> first <span class="kwa">else</span> Array.fold_left of_scene first scenes <span class="kwa">in</span>
  <span class="kwd">of_scene</span> <span class="sym">(</span>infinity<span class="sym">, {</span>x<span class="sym">=</span><span class="num">0</span>.<span class="sym">;</span> y<span class="sym">=</span><span class="num">0</span>.<span class="sym">;</span> z<span class="sym">=</span><span class="num">0</span>.<span class="sym">})</span> scene

<span class="kwa">let rec</span> ray_trace light ray scene <span class="sym">=</span>
  <span class="kwa">let</span> lambda<span class="sym">,</span> n <span class="sym">=</span> intersect ray scene <span class="kwa">in</span>
  <span class="kwa">if</span> lambda <span class="sym">=</span> infinity <span class="kwa">then</span> <span class="num">0</span>. <span class="kwa">else</span>
    <span class="kwa">let</span> g <span class="sym">= -</span>. dot n light <span class="kwa">in</span>
    <span class="kwa">if</span> g <span class="sym">&lt;=</span> <span class="num">0</span>. <span class="kwa">then</span> <span class="num">0</span>. <span class="kwa">else</span>
      <span class="kwa">match</span> intersect <span class="sym">{</span> orig <span class="sym">=</span> ray.orig <span class="sym">+|</span> lambda <span class="sym">*|</span> ray.dir <span class="sym">+|</span> delta <span class="sym">*|</span> n<span class="sym">;</span>
			dir <span class="sym">= {</span>x<span class="sym">=</span><span class="num">0</span>.<span class="sym">;</span> y<span class="sym">=</span><span class="num">0</span>.<span class="sym">;</span> z<span class="sym">=</span><span class="num">0</span>.<span class="sym">} -|</span> light <span class="sym">}</span> scene <span class="kwa">with</span>
	l<span class="sym">,</span> _ <span class="kwa">when</span> l <span class="sym">=</span> infinity <span class="sym">-&gt;</span> g <span class="sym">|</span> _ <span class="sym">-&gt;</span> <span class="num">0</span>.

<span class="kwa">let rec</span> create level <span class="kwd">r</span> <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">) =</span>
  <span class="kwa">let</span> obj <span class="sym">=</span> <span class="kwd">Sphere</span> <span class="sym">({</span>x<span class="sym">=</span>x<span class="sym">;</span> y<span class="sym">=</span>y<span class="sym">;</span> z<span class="sym">=</span>z<span class="sym">},</span> r<span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">if</span> level <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span> obj <span class="kwa">else</span>
    <span class="kwa">let</span> aux <span class="kwd">l</span> <span class="sym">(</span>x<span class="str">', y'</span><span class="sym">,</span> z<span class="str">') =</span>
<span class="str">      create (level-1) (0.5 *. r) (x -. x'</span><span class="sym">,</span> y <span class="sym">+</span>. y<span class="str">', z +. z'</span><span class="sym">) ::</span> l <span class="kwa">in</span>
    <span class="kwa">let</span> objs <span class="sym">=</span> <span class="kwa">let</span> r<span class="str">' = 3. *. r /. sqrt 12. in</span>
<span class="str">    Array.fold_left aux [obj]</span>
<span class="str">      [|-.r'</span><span class="sym">,</span> r<span class="str">', -.r'</span><span class="sym">;</span> r<span class="str">', r'</span><span class="sym">, -</span>.r<span class="str">'; -.r'</span><span class="sym">,</span> r<span class="str">', r'</span><span class="sym">;</span> r<span class="str">', r'</span><span class="sym">,</span> r<span class="str">'|] in</span>
<span class="str">    Group ({x=x; y=y; z=z}, 3. *. r, Array.of_list objs)</span>
<span class="str"></span>
<span class="str">let () =</span>
<span class="str">  let level = 6 and ss = 4 in</span>
<span class="str">  let n = match Sys.argv with [| _; l |] -&gt; int_of_string l | _ -&gt; 256 in</span>
<span class="str">  let scene = create level 1. (0., -1., 0.) in</span>
<span class="str"></span>
<span class="str">  Printf.printf &quot;P5</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">255</span><span class="esc">\n</span><span class="str">&quot; n n;</span>
<span class="str">  for y = n - 1 downto 0 do</span>
<span class="str">    for x = 0 to n - 1 do</span>
<span class="str">      let g = ref 0. in</span>
<span class="str">      for dx = 0 to ss - 1 do</span>
<span class="str">	for dy = 0 to ss - 1 do</span>
<span class="str">	  let x, y, dx, dy, n = float x, float y, float dx, float dy, float n in</span>
<span class="str">	  let ray =</span>
<span class="str">	    {orig = {x=0.; y=0.; z= -4.};</span>
<span class="str">	     dir = unitise {x = x -. n /. 2. +. dx /. float ss;</span>
<span class="str">			    y = y -. n /. 2. +. dy /. float ss;</span>
<span class="str">			    z = n } } in</span>
<span class="str">	  g := !g +. ray_trace (unitise {x= -1.; y= -3.; z=2.}) ray scene;</span>
<span class="str">	done;</span>
<span class="str">      done;</span>
<span class="str">      let g = 0.5 +. 255. *. !g /. float (ss*ss) in</span>
<span class="str">      Printf.printf &quot;%c&quot; (char_of_int (int_of_float g));</span>
<span class="str">    done;</span>
<span class="str">  done;</span>
