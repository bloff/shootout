<span class="line">    1 </span><span class="slc">-- $Id: except-lua.code,v 1.4 2004-11-13 07:41:32 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- from Roberto Ierusalimschy
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="slc">-- uses `call' to catch errors; return the error message
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">-- (or nil if there are no errors)
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="kwa">function</span> try <span class="sym">(</span>f<span class="sym">,</span> arg<span class="sym">)
</span><span class="line">    9 </span><span class="sym"></span>  <span class="kwa">local</span> status<span class="sym">,</span> err <span class="sym">=</span> pcall<span class="sym">(</span>f<span class="sym">,</span> arg<span class="sym">)
</span><span class="line">   10 </span><span class="sym"></span>  <span class="kwa">if not</span> status <span class="kwa">then return</span> err <span class="kwa">end
</span><span class="line">   11 </span><span class="kwa">end
</span><span class="line">   12 </span><span class="kwa">
</span><span class="line">   13 </span><span class="kwa">local</span> HI <span class="sym">=</span> <span class="num">0
</span><span class="line">   14 </span><span class="num"></span><span class="kwa">local</span> LO <span class="sym">=</span> <span class="num">0
</span><span class="line">   15 </span><span class="num">
</span><span class="line">   16 </span><span class="num"></span><span class="kwa">function</span> some_function <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   17 </span><span class="sym"></span>  <span class="kwa">local</span> res <span class="sym">=</span> try<span class="sym">(</span>hi_function<span class="sym">,</span> n<span class="sym">)
</span><span class="line">   18 </span><span class="sym"></span>  <span class="kwa">if</span> res <span class="kwa">then print</span><span class="sym">(</span><span class="str">&quot;We shouldn't get here: &quot;</span> .. res<span class="sym">)</span> <span class="kwa">end
</span><span class="line">   19 </span><span class="kwa">end
</span><span class="line">   20 </span><span class="kwa">
</span><span class="line">   21 </span><span class="kwa">
</span><span class="line">   22 </span><span class="kwa">function</span> hi_function <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   23 </span><span class="sym"></span>  <span class="kwa">local</span> res <span class="sym">=</span> try<span class="sym">(</span>lo_function<span class="sym">,</span> n<span class="sym">)
</span><span class="line">   24 </span><span class="sym"></span>  <span class="kwa">if</span> res <span class="sym">==</span> <span class="str">&quot;Hi_Exception&quot;</span> <span class="kwa">then</span> HI <span class="sym">=</span> HI<span class="sym">+</span><span class="num">1
</span><span class="line">   25 </span><span class="num"></span>  <span class="kwa">elseif</span> res <span class="kwa">then error</span><span class="sym">(</span>res<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>  <span class="slc">-- rethrow
</span><span class="line">   26 </span><span class="slc"></span>  <span class="kwa">end
</span><span class="line">   27 </span><span class="kwa">end
</span><span class="line">   28 </span><span class="kwa">
</span><span class="line">   29 </span><span class="kwa">
</span><span class="line">   30 </span><span class="kwa">function</span> lo_function <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   31 </span><span class="sym"></span>  <span class="kwa">local</span> res <span class="sym">=</span> try<span class="sym">(</span>blowup<span class="sym">,</span> n<span class="sym">)
</span><span class="line">   32 </span><span class="sym"></span>  <span class="kwa">if</span> res <span class="sym">==</span> <span class="str">&quot;Lo_Exception&quot;</span> <span class="kwa">then</span> LO <span class="sym">=</span> LO<span class="sym">+</span><span class="num">1
</span><span class="line">   33 </span><span class="num"></span>  <span class="kwa">elseif</span> res <span class="kwa">then error</span><span class="sym">(</span>res<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>  <span class="slc">-- rethrow
</span><span class="line">   34 </span><span class="slc"></span>  <span class="kwa">end
</span><span class="line">   35 </span><span class="kwa">end
</span><span class="line">   36 </span><span class="kwa">
</span><span class="line">   37 </span><span class="kwa">
</span><span class="line">   38 </span><span class="kwa">function</span> blowup <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   39 </span><span class="sym"></span>  <span class="kwa">if</span> math.<span class="kwa">mod</span><span class="sym">(</span>n<span class="sym">,</span><span class="num">2</span><span class="sym">)</span> ~<span class="sym">=</span> <span class="num">0</span> <span class="kwa">then error</span><span class="sym">(</span><span class="str">&quot;Lo_Exception&quot;</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   40 </span><span class="sym"></span>  <span class="kwa">else error</span><span class="sym">(</span><span class="str">&quot;Hi_Exception&quot;</span><span class="sym">,</span><span class="num">0</span><span class="sym">)
</span><span class="line">   41 </span><span class="sym"></span>  <span class="kwa">end
</span><span class="line">   42 </span><span class="kwa">end
</span><span class="line">   43 </span><span class="kwa">
</span><span class="line">   44 </span><span class="kwa">
</span><span class="line">   45 </span><span class="kwa"></span>N <span class="sym">= (</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1
</span><span class="line">   46 </span><span class="num"></span><span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>N <span class="kwa">do
</span><span class="line">   47 </span><span class="kwa"></span>  some_function<span class="sym">(</span>i<span class="sym">)
</span><span class="line">   48 </span><span class="sym"></span><span class="kwa">end
</span><span class="line">   49 </span><span class="kwa">
</span><span class="line">   50 </span><span class="kwa">print</span><span class="sym">(</span><span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;Exceptions: HI=%d / LO=%d&quot;</span><span class="sym">,</span> HI<span class="sym">,</span> LO<span class="sym">))</span>
