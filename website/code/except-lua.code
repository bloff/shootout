<span class="slc">-- $Id: except-lua.code,v 1.7 2006-02-05 09:51:30 bfulgham Exp $</span>
<span class="slc">-- http://www.bagley.org/~doug/shootout/</span>
<span class="slc">-- from Roberto Ierusalimschy</span>

<span class="slc">-- uses `call' to catch errors; return the error message</span>
<span class="slc">-- (or nil if there are no errors)</span>

<span class="kwa">function</span> try <span class="sym">(</span>f<span class="sym">,</span> arg<span class="sym">)</span>
  <span class="kwa">local</span> status<span class="sym">,</span> err <span class="sym">=</span> pcall<span class="sym">(</span>f<span class="sym">,</span> arg<span class="sym">)</span>
  <span class="kwa">if not</span> status <span class="kwa">then return</span> err <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local</span> HI <span class="sym">=</span> <span class="num">0</span>
<span class="kwa">local</span> LO <span class="sym">=</span> <span class="num">0</span>

<span class="kwa">function</span> some_function <span class="sym">(</span>n<span class="sym">)</span>
  <span class="kwa">local</span> res <span class="sym">=</span> try<span class="sym">(</span>hi_function<span class="sym">,</span> n<span class="sym">)</span>
  <span class="kwa">if</span> res <span class="kwa">then print</span><span class="sym">(</span><span class="str">&quot;We shouldn't get here: &quot;</span> .. res<span class="sym">)</span> <span class="kwa">end</span>
<span class="kwa">end</span>


<span class="kwa">function</span> hi_function <span class="sym">(</span>n<span class="sym">)</span>
  <span class="kwa">local</span> res <span class="sym">=</span> try<span class="sym">(</span>lo_function<span class="sym">,</span> n<span class="sym">)</span>
  <span class="kwa">if</span> res <span class="sym">==</span> <span class="str">&quot;Hi_Exception&quot;</span> <span class="kwa">then</span> HI <span class="sym">=</span> HI<span class="sym">+</span><span class="num">1</span>
  <span class="kwa">elseif</span> res <span class="kwa">then error</span><span class="sym">(</span>res<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>  <span class="slc">-- rethrow</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>


<span class="kwa">function</span> lo_function <span class="sym">(</span>n<span class="sym">)</span>
  <span class="kwa">local</span> res <span class="sym">=</span> try<span class="sym">(</span>blowup<span class="sym">,</span> n<span class="sym">)</span>
  <span class="kwa">if</span> res <span class="sym">==</span> <span class="str">&quot;Lo_Exception&quot;</span> <span class="kwa">then</span> LO <span class="sym">=</span> LO<span class="sym">+</span><span class="num">1</span>
  <span class="kwa">elseif</span> res <span class="kwa">then error</span><span class="sym">(</span>res<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>  <span class="slc">-- rethrow</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>


<span class="kwa">function</span> blowup <span class="sym">(</span>n<span class="sym">)</span>
  <span class="kwa">if</span> math.<span class="kwa">mod</span><span class="sym">(</span>n<span class="sym">,</span><span class="num">2</span><span class="sym">)</span> ~<span class="sym">=</span> <span class="num">0</span> <span class="kwa">then error</span><span class="sym">(</span><span class="str">&quot;Lo_Exception&quot;</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
  <span class="kwa">else error</span><span class="sym">(</span><span class="str">&quot;Hi_Exception&quot;</span><span class="sym">,</span><span class="num">0</span><span class="sym">)</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>


N <span class="sym">= (</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1</span>
<span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>N <span class="kwa">do</span>
  some_function<span class="sym">(</span>i<span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">print</span><span class="sym">(</span><span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;Exceptions: HI=%d / LO=%d&quot;</span><span class="sym">,</span> HI<span class="sym">,</span> LO<span class="sym">))</span>
