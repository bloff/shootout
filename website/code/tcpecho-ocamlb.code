<span class="com">(* tcp-request-reply.ml / tcp-echo.ml / tcp-stream.ml</span>
<span class="com"> *</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Troestler Christophe</span>
<span class="com"> *)</span>

<span class="kwa">let</span> m <span class="sym">=</span> <span class="num">6400</span> <span class="kwa">and</span> reply_size <span class="sym">=</span> <span class="num">64</span>  <span class="com">(* tcp-echo *)</span>

<span class="kwa">let</span> request_size <span class="sym">=</span> <span class="num">64</span>
<span class="kwa">let</span> buffer_size  <span class="sym">=</span> <span class="num">4096</span>
<span class="kwa">let</span> port	 <span class="sym">=</span> <span class="num">11000</span>

<span class="kwa">let</span> reply   <span class="sym">=</span> String.create reply_size
<span class="kwa">let</span> request <span class="sym">=</span> String.create request_size

<span class="com">(* Monomorphic version for speed *)</span>
<span class="kwa">let</span> min i j <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">:</span><span class="kwb">int</span><span class="sym">) &lt;</span> j <span class="kwa">then</span> i <span class="kwa">else</span> j

<span class="com">(* Return [false] if EOF is reached *)</span>
<span class="kwa">let rec</span> read sock buf n <span class="sym">=</span>
  n <span class="sym">&lt;=</span> <span class="num">0</span> <span class="sym">|| (</span><span class="kwa">let</span> r <span class="sym">=</span> Unix.read sock buf <span class="num">0</span> <span class="sym">(</span>min n buffer_size<span class="sym">)</span> <span class="kwa">in</span>
	     r <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> read sock buf <span class="sym">(</span>n <span class="sym">-</span> r<span class="sym">))</span>

<span class="kwa">let</span> server sock <span class="sym">=</span>
  <span class="kwa">let</span> b <span class="sym">=</span> String.create buffer_size <span class="kwa">in</span>
  <span class="kwa">let</span> <span class="sym">(</span>s<span class="sym">,</span> _<span class="sym">) =</span> Unix.accept sock <span class="kwa">in</span>
  <span class="kwa">while</span> read s b request_size <span class="kwa">do</span> ignore<span class="sym">(</span>Unix.write s reply <span class="num">0</span> reply_size<span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
  Unix.close s<span class="sym">;</span>
  Unix.close sock

<span class="kwa">let</span> client n <span class="sym">=</span>
  <span class="kwa">let</span> b <span class="sym">=</span> String.create buffer_size
  <span class="kwa">and</span> replies <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">and</span> bytes <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in</span> <span class="com">(* useless but mandated by spec *)</span>
  <span class="kwa">let</span> sock <span class="sym">=</span> Unix.socket Unix.PF_INET Unix.SOCK_STREAM <span class="num">0</span> <span class="kwa">in</span>
  Unix.connect sock <span class="sym">(</span>Unix.ADDR_INET<span class="sym">(</span>Unix.inet_addr_loopback<span class="sym">,</span> port<span class="sym">));</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span>
    ignore<span class="sym">(</span>Unix.write sock request <span class="num">0</span> request_size<span class="sym">);</span>
    ignore<span class="sym">(</span>read sock b reply_size<span class="sym">);</span>
    bytes <span class="sym">:= !</span>bytes <span class="sym">+</span> reply_size<span class="sym">;</span>
    incr replies
  <span class="kwa">done</span><span class="sym">;</span>
  Unix.close sock<span class="sym">;</span>
  Printf.printf <span class="str">&quot;replies: %i</span><span class="esc">\t</span><span class="str">bytes: %i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">!</span>replies <span class="sym">!</span>bytes<span class="sym">;</span> flush stdout


<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> n <span class="sym">=</span> m <span class="sym">* (</span><span class="kwa">try</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">10</span><span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">let</span> sock <span class="sym">=</span> Unix.socket Unix.PF_INET Unix.SOCK_STREAM <span class="num">0</span> <span class="kwa">in</span>
  Unix.setsockopt sock Unix.SO_REUSEADDR <span class="kwa">true</span><span class="sym">;</span>
  Unix.bind sock <span class="sym">(</span>Unix.ADDR_INET<span class="sym">(</span>Unix.inet_addr_any<span class="sym">,</span> port<span class="sym">));</span>
  Unix.listen sock <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">match</span> Unix.fork<span class="sym">()</span> <span class="kwa">with</span>
  <span class="sym">|</span> <span class="num">0</span> <span class="sym">-&gt;</span>   server sock
  <span class="sym">|</span> pid <span class="sym">-&gt;</span> client n<span class="sym">;</span> ignore<span class="sym">(</span>Unix.wait<span class="sym">())</span>

