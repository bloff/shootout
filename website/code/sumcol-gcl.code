<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: sumcol-gcl.code,v 1.9 2005-12-19 03:11:56 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; by Risto Laakso 12/2005</span>

<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">)</span> #<span class="sym">-</span>gcl <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>flet <span class="sym">((</span><span class="kwa">read</span><span class="sym">-</span>int <span class="sym">(</span>x<span class="sym">)</span>
	   <span class="sym">(</span>let <span class="sym">((</span>int <span class="num">0</span><span class="sym">) (</span>sgn <span class="num">1</span><span class="sym">) (</span>eof t<span class="sym">))</span>
	     <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum int sgn<span class="sym">))</span>
	     <span class="sym">(</span>loop for byte of<span class="sym">-</span><span class="kwa">type</span> fixnum <span class="sym">= (</span>char<span class="sym">-</span>code <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>char x nil #\null<span class="sym">))</span>
		   for num of<span class="sym">-</span><span class="kwa">type</span> fixnum <span class="sym">= (-</span> byte <span class="sym">(</span>char<span class="sym">-</span>code #\0<span class="sym">))</span>
		   when <span class="sym">(=</span> byte <span class="sym">(</span>char<span class="sym">-</span>code #\-<span class="sym">))</span> do <span class="sym">(</span><span class="kwa">setq</span> sgn <span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
		   when <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(/=</span> byte <span class="sym">(</span>char<span class="sym">-</span>code #\-<span class="sym">)) (</span><span class="kwa">or</span> <span class="sym">(&lt;</span> num <span class="num">0</span><span class="sym">) (&gt;=</span> num <span class="num">10</span><span class="sym">)))</span> do <span class="sym">(</span>return <span class="sym">(</span><span class="kwa">if</span> eof nil <span class="sym">(*</span> int sgn<span class="sym">)))</span>
		   when <span class="sym">(/=</span> byte <span class="sym">(</span>char<span class="sym">-</span>code #\-<span class="sym">))</span> do
		   <span class="sym">(</span><span class="kwa">if</span> eof <span class="sym">(</span><span class="kwa">setq</span> eof nil<span class="sym">))</span>
		   <span class="sym">(</span><span class="kwa">setq</span> int <span class="sym">(+ (</span>the fixnum <span class="sym">(*</span> int <span class="num">10</span><span class="sym">))</span> num<span class="sym">))))))</span>

    <span class="sym">(</span><span class="kwa">princ</span>
     <span class="sym">(</span>loop for int <span class="sym">= (</span><span class="kwa">read</span><span class="sym">-</span>int <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*)</span>
	   when <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span><span class="kwa">null</span> int<span class="sym">))</span> sum <span class="sym">(</span>the fixnum int<span class="sym">)</span> into res
	   when <span class="sym">(</span><span class="kwa">null</span> int<span class="sym">)</span> do <span class="sym">(</span>return res<span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">terpri</span><span class="sym">)))</span>


