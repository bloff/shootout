<span class="slc">%%% -*- mode: erlang -*-
</span><span class="slc">%%% $Id: methcall-erlang.code,v 1.6 2005-04-06 14:49:58 bfulgham Exp $
</span><span class="slc">%%% http://shootout.alioth.debian.org/
</span><span class="slc">%%%
</span><span class="slc">%%% Provided by Bengt Kleberg (Erlang Guru!)
</span><span class="sym">-</span>module<span class="sym">(</span>methcall<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="sym">-</span><span class="kwb">record</span><span class="sym">(</span> toggle_base<span class="sym">, {</span>state<span class="sym">,</span> value <span class="sym">=</span> <span class="kwa">fun</span> value<span class="sym">/</span><span class="num">1</span><span class="sym">,</span> activate <span class="sym">=</span> <span class="kwa">fun</span> activate<span class="sym">/</span><span class="num">1</span><span class="sym">} )</span>.
<span class="sym">-</span><span class="kwb">record</span><span class="sym">(</span> toggle<span class="sym">, {</span>toggle_base<span class="sym">} )</span>.
<span class="sym">-</span><span class="kwb">record</span><span class="sym">(</span> nth_toggle<span class="sym">, {</span> toggle_base<span class="sym">,</span> counter <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> max_count <span class="sym">} )</span>.

<span class="slc">%% ignore program argument
</span>main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">'1'</span><span class="sym">])</span>.
main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span>	Number_of_Times <span class="sym">=</span> erlang<span class="sym">:</span><span class="kwb">list_to_integer</span><span class="sym">(</span>erlang<span class="sym">:</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Arg<span class="sym">)),
</span>	State <span class="sym">=</span> activate_toggle<span class="sym">(</span> Number_of_Times<span class="sym">,</span> toggle_new<span class="sym">(</span> true <span class="sym">) ),
</span>	io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>State<span class="sym">]),
</span>	Nth_State <span class="sym">=</span> activate_toggle<span class="sym">(</span> Number_of_Times<span class="sym">,</span> nth_toggle_new<span class="sym">(</span> true<span class="sym">,</span> <span class="num">3</span> <span class="sym">) ),
</span>	io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>Nth_State<span class="sym">]),
</span>	erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">()</span>.

activate_toggle<span class="sym">(</span> <span class="num">0</span><span class="sym">,</span> Toggle <span class="sym">) -&gt;
</span>	Value <span class="sym">= (</span>Toggle#toggle.toggle_base<span class="sym">)</span>#toggle_base.value<span class="sym">,
</span>	Value<span class="sym">(</span> Toggle <span class="sym">);
</span>activate_toggle<span class="sym">(</span> Number_of_Times<span class="sym">,</span> Toggle <span class="sym">) -&gt;
</span>	Activate <span class="sym">= (</span>Toggle#toggle.toggle_base<span class="sym">)</span>#toggle_base.activate<span class="sym">,
</span>	activate_toggle<span class="sym">(</span> Number_of_Times <span class="num">- 1</span><span class="sym">,</span> Activate<span class="sym">(</span> Toggle <span class="sym">))</span>.


toggle_base_new<span class="sym">(</span> State <span class="sym">) -&gt;
</span>	#toggle_base<span class="sym">{</span>state <span class="sym">=</span> State<span class="sym">}</span>.

toggle_new<span class="sym">(</span> State <span class="sym">) -&gt;
</span>	Toggle <span class="sym">=</span> toggle_base_new<span class="sym">(</span> State <span class="sym">),
</span>	#toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> Toggle<span class="sym">}</span>.

nth_toggle_new<span class="sym">(</span> State<span class="sym">,</span> Max_Count <span class="sym">) -&gt;
</span>	Toggle <span class="sym">=</span> toggle_base_new<span class="sym">(</span> State <span class="sym">),
</span>	#nth_toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> Toggle<span class="sym">,</span> max_count <span class="sym">=</span> Max_Count <span class="num">- 1</span><span class="sym">}</span>.


activate<span class="sym">(</span> #toggle_base<span class="sym">{</span>state <span class="sym">=</span> true<span class="sym">} =</span> Toggle_Base <span class="sym">) -&gt;
</span>	Toggle_Base#toggle_base<span class="sym">{</span>state <span class="sym">=</span> false<span class="sym">};
</span>activate<span class="sym">(</span> #toggle_base<span class="sym">{</span>state <span class="sym">=</span> false<span class="sym">} =</span> Toggle_Base <span class="sym">) -&gt;
</span>	Toggle_Base#toggle_base<span class="sym">{</span>state <span class="sym">=</span> true<span class="sym">};
</span>activate<span class="sym">(</span> #toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> Toggle_Base<span class="sym">} =</span> Toggle <span class="sym">) -&gt;
</span>	Toggle#toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> activate<span class="sym">(</span> Toggle_Base <span class="sym">)};
</span>activate<span class="sym">(</span> #nth_toggle<span class="sym">{</span>counter <span class="sym">=</span> Max_Count<span class="sym">,</span> max_count <span class="sym">=</span> Max_Count<span class="sym">,</span> toggle_base <span class="sym">=</span> Toggle_Base<span class="sym">} =</span> Nth_Toggle <span class="sym">) -&gt;
</span>	Nth_Toggle#nth_toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> activate<span class="sym">(</span> Toggle_Base <span class="sym">),</span> counter <span class="sym">=</span> <span class="num">0</span><span class="sym">};
</span>activate<span class="sym">(</span> #nth_toggle<span class="sym">{</span>counter <span class="sym">=</span> Count<span class="sym">} =</span> Nth_Toggle <span class="sym">) -&gt;
</span>	Nth_Toggle#nth_toggle<span class="sym">{</span>counter <span class="sym">=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">}</span>.

value<span class="sym">(</span> #toggle_base<span class="sym">{</span>state <span class="sym">=</span> State<span class="sym">} ) -&gt;
</span>	State<span class="sym">;
</span>value<span class="sym">(</span> #toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> Toggle_Base<span class="sym">} ) -&gt;
</span>	value<span class="sym">(</span> Toggle_Base <span class="sym">);
</span>value<span class="sym">(</span> #nth_toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> Toggle_Base<span class="sym">} ) -&gt;
</span>	value<span class="sym">(</span> Toggle_Base <span class="sym">)</span>.

