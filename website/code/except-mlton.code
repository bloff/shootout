<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: except-mlton.code,v 1.6 2005-12-08 06:38:04 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * Translated from except.ocaml by Stephen Weeks</span>
<span class="com"> *)</span>

<span class="kwa">fun</span> incr r <span class="sym">=</span> r <span class="sym">:= !</span>r <span class="sym">+</span> <span class="num">1</span>
<span class="kwa">fun</span> print_endline s <span class="sym">= (</span>print s<span class="sym">;</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

<span class="kwa">exception</span> HiException <span class="kwa">of</span> <span class="kwb">int</span>
<span class="kwa">exception</span> LoException <span class="kwa">of</span> <span class="kwb">int</span>

<span class="kwa">val</span> hi <span class="sym">=</span> ref <span class="num">0</span>
<span class="kwa">val</span> lo <span class="sym">=</span> ref <span class="num">0</span>

<span class="kwa">fun</span> blowup n <span class="sym">=</span>
  <span class="kwa">if</span> n mod <span class="num">2</span> <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then raise</span> <span class="sym">(</span>LoException n<span class="sym">)</span>
  <span class="kwa">else raise</span> <span class="sym">(</span>HiException n<span class="sym">)</span>

<span class="kwa">fun</span> lo_fun n <span class="sym">=</span>
  blowup n
  <span class="kwa">handle</span> LoException ex <span class="sym">=&gt;</span> incr lo

<span class="kwa">fun</span> hi_fun n <span class="sym">=</span>
  lo_fun n
  <span class="kwa">handle</span> HiException ex <span class="sym">=&gt;</span> incr hi

<span class="kwa">fun</span> some_fun n <span class="sym">=</span>
  hi_fun n
  <span class="kwa">handle</span> x <span class="sym">=&gt;</span>
     <span class="sym">(</span>print_endline <span class="str">&quot;Should not get here.&quot;</span><span class="sym">;</span>
      <span class="kwa">raise</span> x<span class="sym">)</span>

<span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">);</span>

<span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> some_fun<span class="sym">)</span>
   <span class="kwa">in</span>
      printl <span class="sym">[</span><span class="str">&quot;Exceptions: HI=&quot;</span><span class="sym">,</span>
	      <span class="kwa">Int</span>.toString <span class="sym">(!</span>hi<span class="sym">),</span>
	      <span class="str">&quot; / LO=&quot;</span><span class="sym">,</span>
	      <span class="kwa">Int</span>.toString <span class="sym">(!</span>lo<span class="sym">)];</span>
      OS.Process.success
   <span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() )</span>
