<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local floor</span><span class="sym">,</span> <span class="kwa">ceil</span> <span class="sym">=</span> math.<span class="kwa">floor</span><span class="sym">,</span> math.<span class="kwa">ceil</span>

<span class="kwa">local</span> precision <span class="sym">=</span> <span class="num">50</span> <span class="slc">-- Maximum precision of lua_Number (minus safety margin).</span>
<span class="kwa">local</span> onebits <span class="sym">= (</span><span class="num">2</span>^precision<span class="sym">)-</span><span class="num">1</span>

<span class="kwa">local function</span> nsieve<span class="sym">(</span>p<span class="sym">,</span> m<span class="sym">)</span>
  <span class="kwa">local</span> cm <span class="sym">=</span> <span class="kwa">ceil</span><span class="sym">(</span>m<span class="sym">/</span>precision<span class="sym">)</span>
  <span class="kwa">do local</span> onebits <span class="sym">=</span> onebits<span class="sym">;</span> <span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>cm <span class="kwa">do</span> p<span class="sym">[</span>i<span class="sym">] =</span> onebits <span class="kwa">end end</span>
  <span class="kwa">local</span> count<span class="sym">,</span> idx<span class="sym">,</span> bit <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> <span class="num">2</span>
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">,</span>m <span class="kwa">do</span>
    <span class="kwa">local</span> r <span class="sym">=</span> p<span class="sym">[</span>idx<span class="sym">] /</span> bit
    <span class="kwa">if</span> r <span class="sym">-</span> <span class="kwa">floor</span><span class="sym">(</span>r<span class="sym">) &gt;=</span> <span class="num">0.5</span> <span class="kwa">then</span> <span class="slc">-- Bit set?</span>
      <span class="kwa">local</span> kidx<span class="sym">,</span> kbit <span class="sym">=</span> idx<span class="sym">,</span> bit
      <span class="kwa">for</span> k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">,</span>m<span class="sym">,</span>i <span class="kwa">do</span>
        kidx <span class="sym">=</span> kidx <span class="sym">+</span> i
        <span class="kwa">while</span> kidx <span class="sym">&gt;=</span> cm <span class="kwa">do</span> kidx <span class="sym">=</span> kidx <span class="sym">-</span> cm<span class="sym">;</span> kbit <span class="sym">=</span> kbit <span class="sym">+</span> kbit <span class="kwa">end</span>
        <span class="kwa">local</span> x <span class="sym">=</span> p<span class="sym">[</span>kidx<span class="sym">]</span>
        <span class="kwa">local</span> r <span class="sym">=</span> x <span class="sym">/</span> kbit
        <span class="kwa">if</span> r <span class="sym">-</span> <span class="kwa">floor</span><span class="sym">(</span>r<span class="sym">) &gt;=</span> <span class="num">0.5</span> <span class="kwa">then</span> p<span class="sym">[</span>kidx<span class="sym">] =</span> x <span class="sym">-</span> kbit<span class="sym">*</span><span class="num">0.5</span> <span class="kwa">end</span> <span class="slc">-- Clear bit.</span>
      <span class="kwa">end</span>
      count <span class="sym">=</span> count <span class="sym">+</span> <span class="num">1</span>
    <span class="kwa">end</span>
    idx <span class="sym">=</span> idx <span class="sym">+</span> <span class="num">1</span>
    <span class="kwa">if</span> idx <span class="sym">&gt;=</span> cm <span class="kwa">then</span> idx <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> bit <span class="sym">=</span> bit <span class="sym">+</span> bit <span class="kwa">end</span>
  <span class="kwa">end</span>
  <span class="kwa">return</span> count
<span class="kwa">end</span>

<span class="kwa">local</span> N <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1</span>
<span class="kwa">if</span> N <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">then</span> N <span class="sym">=</span> <span class="num">2</span> <span class="kwa">end</span>
<span class="kwa">local</span> primes <span class="sym">= {}</span>

<span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span> <span class="kwa">do</span>
  <span class="kwa">local</span> m <span class="sym">= (</span><span class="num">2</span>^<span class="sym">(</span>N<span class="sym">-</span>i<span class="sym">))*</span><span class="num">10000</span>
  io.<span class="kwa">write</span><span class="sym">(</span><span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>primes<span class="sym">,</span> m<span class="sym">)))</span>
<span class="kwa">end</span>
