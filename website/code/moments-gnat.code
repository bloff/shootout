<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: moments-gnat.code,v 1.2 2004-11-08 08:15:17 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://dada.perl.it/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- Ada 95 code by C.C.
</FONT></I>
<I><FONT COLOR="#B22222">-- Annotated Ada Reference Manual ISO/IEC 8652:1995: http://www.ada-auth.org/
</FONT></I>
<B><FONT COLOR="#A020F0">with</FONT></B> System, Ada.Numerics.Generic_Elementary_Functions;
<B><FONT COLOR="#A020F0">with</FONT></B> Ada.Unchecked_Deallocation, Ada.Text_IO;

<B><FONT COLOR="#A020F0">procedure</FONT></B> Moments <B><FONT COLOR="#A020F0">is</FONT></B>
   <B><FONT COLOR="#A020F0">type</FONT></B> Real <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">digits</FONT></B> Positive'Max (15, System.Max_Digits);
   <B><FONT COLOR="#A020F0">package</FONT></B> AF <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B>
         Ada.Numerics.Generic_Elementary_Functions (Float_Type =&gt; Real);
   <B><FONT COLOR="#A020F0">package</FONT></B> Io <B><FONT COLOR="#A020F0">renames</FONT></B> Ada.Text_IO;
   <B><FONT COLOR="#A020F0">package</FONT></B> Rio <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> Ada.Text_IO.Float_IO (Num =&gt; Real);
   <B><FONT COLOR="#A020F0">procedure</FONT></B> Put (Item : Real; Fore : Io.Field := 0; Aft : Io.Field := 6;
                  Exp : Io.Field := 0) <B><FONT COLOR="#A020F0">renames</FONT></B> Rio.Put;

   <B><FONT COLOR="#A020F0">generic</FONT></B>
       <B><FONT COLOR="#A020F0">type</FONT></B> Item_Type <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">private</FONT></B>;      <I><FONT COLOR="#B22222">--  Component type of array to be sorted
</FONT></I>       <B><FONT COLOR="#A020F0">with</FONT></B> <B><FONT COLOR="#A020F0">function</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;&lt;=&quot;</FONT></B> (X, Y : Item_Type) <B><FONT COLOR="#A020F0">return</FONT></B> Boolean;
       <B><FONT COLOR="#A020F0">type</FONT></B> Sequence <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">array</FONT></B> (Integer <B><FONT COLOR="#A020F0">range</FONT></B> &lt;&gt;) <B><FONT COLOR="#A020F0">of</FONT></B> Item_Type;
   <B><FONT COLOR="#A020F0">package</FONT></B> Sort_Pkg <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Quick_Sort (S : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> Sequence);
   <B><FONT COLOR="#A020F0">end</FONT></B> Sort_Pkg;  <I><FONT COLOR="#B22222">--  Copied from Southampton Ada MPICH supercomputer bindings
</FONT></I>
   <B><FONT COLOR="#A020F0">package</FONT></B> <B><FONT COLOR="#A020F0">body</FONT></B> Sort_Pkg <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Quick_Sort (S : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> Sequence) <B><FONT COLOR="#A020F0">is</FONT></B>
         <B><FONT COLOR="#A020F0">procedure</FONT></B> Sort_Recursive (Lwb, Upb : Integer) <B><FONT COLOR="#A020F0">is</FONT></B>
            Pivot    : Item_Type := S (Upb);
            Front    : Integer := Lwb;
            Back     : Integer := Upb;
            Temp     : Item_Type;
         <B><FONT COLOR="#A020F0">begin</FONT></B>
            <B><FONT COLOR="#A020F0">if</FONT></B> Lwb &lt; Upb <B><FONT COLOR="#A020F0">then</FONT></B>
               <B><FONT COLOR="#A020F0">while</FONT></B>  (Front &lt;= Back)  <B><FONT COLOR="#A020F0">loop</FONT></B>
                  <B><FONT COLOR="#A020F0">while</FONT></B> <B><FONT COLOR="#A020F0">not</FONT></B>  (Pivot &lt;= S (Front)) <B><FONT COLOR="#A020F0">loop</FONT></B>
                     Front := Front + 1;
                  <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
                  <B><FONT COLOR="#A020F0">while</FONT></B> <B><FONT COLOR="#A020F0">not</FONT></B>  (S (Back) &lt;= Pivot) <B><FONT COLOR="#A020F0">loop</FONT></B>
                     Back := Back - 1;
                  <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
                  <B><FONT COLOR="#A020F0">if</FONT></B> Front &lt;= Back <B><FONT COLOR="#A020F0">then</FONT></B>
                     Temp := S (Front);
                     S (Front) := S (Back);
                     S (Back) := Temp;
                     Front := Front + 1;
                     Back  := Back - 1;
                  <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
               <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
               Sort_Recursive (Lwb, Back);
               Sort_Recursive (Front, Upb);
            <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">end</FONT></B> Sort_Recursive;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         Sort_Recursive (S'First, S'Last);
      <B><FONT COLOR="#A020F0">end</FONT></B> Quick_Sort;
   <B><FONT COLOR="#A020F0">end</FONT></B> Sort_Pkg;

   <B><FONT COLOR="#A020F0">type</FONT></B> Real_Array <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">array</FONT></B> (Integer <B><FONT COLOR="#A020F0">range</FONT></B> &lt;&gt;) <B><FONT COLOR="#A020F0">of</FONT></B> Real;
   <B><FONT COLOR="#A020F0">type</FONT></B> Real_Array_Ptr <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">access</FONT></B> Real_Array;
   <B><FONT COLOR="#A020F0">procedure</FONT></B> Deallocate_Real_Array <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> Ada.Unchecked_Deallocation (

                  Object =&gt; Real_Array, Name =&gt; Real_Array_Ptr);
   <B><FONT COLOR="#A020F0">package</FONT></B> Sort <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> Sort_Pkg (Real, <B><FONT COLOR="#BC8F8F">&quot;&lt;=&quot;</FONT></B> =&gt; <B><FONT COLOR="#BC8F8F">&quot;&lt;=&quot;</FONT></B>, Sequence =&gt; Real_Array);

   Data           : Real_Array_Ptr := <B><FONT COLOR="#A020F0">new</FONT></B> Real_Array (1 .. 0);
   Temp_Array     : Real_Array_Ptr;
   Dev, D_2, Mean, Median     : Real;
   Standard_Deviation         : Real;
   Sum, Avg_Abs_Deviation     : Real := 0.0;
   Variance, Skew, Kurtosis   : Real := 0.0;
   M              : Natural := 0;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   <B><FONT COLOR="#A020F0">while</FONT></B> <B><FONT COLOR="#A020F0">not</FONT></B> Io.End_Of_File <B><FONT COLOR="#A020F0">loop</FONT></B>
      M := M + 1;
      <B><FONT COLOR="#A020F0">if</FONT></B> M &gt; Data'Last <B><FONT COLOR="#A020F0">then</FONT></B>                  <I><FONT COLOR="#B22222">--  Lengthen array of strings
</FONT></I>         Temp_Array := <B><FONT COLOR="#A020F0">new</FONT></B> Real_Array (
                        1 .. 4 + Positive (Real'Ceiling (1.70 * Real (M))));
         Temp_Array (Data'Range) := Data.<B><FONT COLOR="#A020F0">all</FONT></B>;
         Deallocate_Real_Array (Data);
         Data := Temp_Array;     <I><FONT COLOR="#B22222">--  Replace the old array with the new one
</FONT></I>      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
      Rio.Get (Item =&gt; Data (M));      <I><FONT COLOR="#B22222">-- Read  numbers between whitespace
</FONT></I>      Sum := Sum + Data (M);
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   Mean := Sum / Real (M);
   <B><FONT COLOR="#A020F0">for</FONT></B> K <B><FONT COLOR="#A020F0">in</FONT></B> 1 .. M <B><FONT COLOR="#A020F0">loop</FONT></B>
      Dev := Data (K) - Mean;
      Avg_Abs_Deviation := Avg_Abs_Deviation + <B><FONT COLOR="#A020F0">abs</FONT></B> Dev;
      D_2 := Dev * Dev;
      Variance := Variance + D_2;
      Skew := Skew + (D_2 * Dev);
      Kurtosis := Kurtosis + (D_2 * D_2);
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   Avg_Abs_Deviation := Avg_Abs_Deviation / Real (M);
   Variance := Variance / Real (M - 1);
   Standard_Deviation := AF.Sqrt (Variance);
   <B><FONT COLOR="#A020F0">if</FONT></B> Variance &lt; 10.0 * Real'Model_Epsilon <B><FONT COLOR="#A020F0">then</FONT></B>
      Io.Put_Line (<B><FONT COLOR="#BC8F8F">&quot;&gt; Reduced accuracy results: 0 = ((Variance/10 + 1) - 1)&quot;</FONT></B>);
   <B><FONT COLOR="#A020F0">else</FONT></B>
      Skew := Skew / (Real (M) * Variance * Standard_Deviation);
      Kurtosis := -3.0 + Kurtosis / (Real (M) * Variance * Variance);
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
   Sort.Quick_Sort (S =&gt; Data (1 .. M));
   <B><FONT COLOR="#A020F0">if</FONT></B> 1 = (M <B><FONT COLOR="#A020F0">mod</FONT></B> 2) <B><FONT COLOR="#A020F0">then</FONT></B>
      Median := Data ((M + 1) / 2);
   <B><FONT COLOR="#A020F0">else</FONT></B>
      Median := (Data (M / 2) + Data (1 + M / 2)) / 2.0;
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
   Io.Put_Line (<B><FONT COLOR="#BC8F8F">&quot;n:                 &quot;</FONT></B> &amp; Integer'Image (M));
   Io.Put (<B><FONT COLOR="#BC8F8F">&quot;median:             &quot;</FONT></B>); Put (Median);              Io.New_Line;
   Io.Put (<B><FONT COLOR="#BC8F8F">&quot;mean:               &quot;</FONT></B>); Put (Mean);                Io.New_Line;
   Io.Put (<B><FONT COLOR="#BC8F8F">&quot;average_deviation:  &quot;</FONT></B>); Put (Avg_Abs_Deviation);   Io.New_Line;
   Io.Put (<B><FONT COLOR="#BC8F8F">&quot;standard_deviation: &quot;</FONT></B>); Put (Standard_Deviation);  Io.New_Line;
   Io.Put (<B><FONT COLOR="#BC8F8F">&quot;variance:           &quot;</FONT></B>); Put (Variance);            Io.New_Line;
   Io.Put (<B><FONT COLOR="#BC8F8F">&quot;skew:               &quot;</FONT></B>); Put (Skew);                Io.New_Line;
   Io.Put (<B><FONT COLOR="#BC8F8F">&quot;kurtosis:           &quot;</FONT></B>); Put (Kurtosis);            Io.New_Line;
<B><FONT COLOR="#A020F0">end</FONT></B> Moments;
</pre></td></tr></table>
