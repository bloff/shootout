<span class="line">    1 </span><span class="slc">-- $Id: moments-gnat.code,v 1.3 2004-11-11 07:14:01 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- Ada 95 code by C.C.
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="slc">-- Annotated Ada Reference Manual ISO/IEC 8652:1995: http://www.ada-auth.org/
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="kwa">with</span> System<span class="sym">,</span> Ada.Numerics.Generic_Elementary_Functions<span class="sym">;
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">with</span> Ada.Unchecked_Deallocation<span class="sym">,</span> Ada.Text_IO<span class="sym">;
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym"></span><span class="kwa">procedure</span> Moments <span class="kwa">is
</span><span class="line">   11 </span><span class="kwa">   type</span> Real <span class="kwa">is digits</span> <span class="kwb">Positive</span><span class="sym">'</span>Max <span class="sym">(</span><span class="num">15</span><span class="sym">,</span> System.Max_Digits<span class="sym">);
</span><span class="line">   12 </span><span class="sym"></span>   <span class="kwa">package</span> AF <span class="kwa">is new
</span><span class="line">   13 </span><span class="kwa"></span>         Ada.Numerics.Generic_Elementary_Functions <span class="sym">(</span>Float_Type <span class="sym">=&gt;</span> Real<span class="sym">);
</span><span class="line">   14 </span><span class="sym"></span>   <span class="kwa">package</span> Io <span class="kwa">renames</span> Ada.Text_IO<span class="sym">;
</span><span class="line">   15 </span><span class="sym"></span>   <span class="kwa">package</span> Rio <span class="kwa">is new</span> Ada.Text_IO.Float_IO <span class="sym">(</span>Num <span class="sym">=&gt;</span> Real<span class="sym">);
</span><span class="line">   16 </span><span class="sym"></span>   <span class="kwa">procedure</span> Put <span class="sym">(</span>Item <span class="sym">:</span> Real<span class="sym">;</span> Fore <span class="sym">:</span> Io.Field <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span> Aft <span class="sym">:</span> Io.Field <span class="sym">:=</span> <span class="num">6</span><span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>                  Exp <span class="sym">:</span> Io.Field <span class="sym">:=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">renames</span> Rio.Put<span class="sym">;
</span><span class="line">   18 </span><span class="sym">
</span><span class="line">   19 </span><span class="sym"></span>   <span class="kwa">generic
</span><span class="line">   20 </span><span class="kwa">       type</span> Item_Type <span class="kwa">is private</span><span class="sym">;</span>      <span class="slc">--  Component type of array to be sorted
</span><span class="line">   21 </span><span class="slc"></span>       <span class="kwa">with function</span> <span class="str">&quot;&lt;=&quot;</span> <span class="sym">(</span>X<span class="sym">,</span> Y <span class="sym">:</span> Item_Type<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span><span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>       <span class="kwa">type</span> Sequence <span class="kwa">is array</span> <span class="sym">(</span><span class="kwb">Integer</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> Item_Type<span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>   <span class="kwa">package</span> Sort_Pkg <span class="kwa">is
</span><span class="line">   24 </span><span class="kwa">      procedure</span> Quick_Sort <span class="sym">(</span>S <span class="sym">:</span> <span class="kwa">in out</span> Sequence<span class="sym">);
</span><span class="line">   25 </span><span class="sym"></span>   <span class="kwa">end</span> Sort_Pkg<span class="sym">;</span>  <span class="slc">--  Copied from Southampton Ada MPICH supercomputer bindings
</span><span class="line">   26 </span><span class="slc"></span>
<span class="line">   27 </span>   <span class="kwa">package body</span> Sort_Pkg <span class="kwa">is
</span><span class="line">   28 </span><span class="kwa">      procedure</span> Quick_Sort <span class="sym">(</span>S <span class="sym">:</span> <span class="kwa">in out</span> Sequence<span class="sym">)</span> <span class="kwa">is
</span><span class="line">   29 </span><span class="kwa">         procedure</span> Sort_Recursive <span class="sym">(</span>Lwb<span class="sym">,</span> Upb <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is
</span><span class="line">   30 </span><span class="kwa"></span>            Pivot    <span class="sym">:</span> Item_Type <span class="sym">:=</span> S <span class="sym">(</span>Upb<span class="sym">);
</span><span class="line">   31 </span><span class="sym"></span>            Front    <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> Lwb<span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>            Back     <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> Upb<span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>            Temp     <span class="sym">:</span> Item_Type<span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>         <span class="kwa">begin
</span><span class="line">   35 </span><span class="kwa">            if</span> Lwb <span class="sym">&lt;</span> Upb <span class="kwa">then
</span><span class="line">   36 </span><span class="kwa">               while</span>  <span class="sym">(</span>Front <span class="sym">&lt;=</span> Back<span class="sym">)</span>  <span class="kwa">loop
</span><span class="line">   37 </span><span class="kwa">                  while not</span>  <span class="sym">(</span>Pivot <span class="sym">&lt;=</span> S <span class="sym">(</span>Front<span class="sym">))</span> <span class="kwa">loop
</span><span class="line">   38 </span><span class="kwa"></span>                     Front <span class="sym">:=</span> Front <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   39 </span><span class="sym"></span>                  <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>                  <span class="kwa">while not</span>  <span class="sym">(</span>S <span class="sym">(</span>Back<span class="sym">) &lt;=</span> Pivot<span class="sym">)</span> <span class="kwa">loop
</span><span class="line">   41 </span><span class="kwa"></span>                     Back <span class="sym">:=</span> Back <span class="num">- 1</span><span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>                  <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>                  <span class="kwa">if</span> Front <span class="sym">&lt;=</span> Back <span class="kwa">then
</span><span class="line">   44 </span><span class="kwa"></span>                     Temp <span class="sym">:=</span> S <span class="sym">(</span>Front<span class="sym">);
</span><span class="line">   45 </span><span class="sym"></span>                     S <span class="sym">(</span>Front<span class="sym">) :=</span> S <span class="sym">(</span>Back<span class="sym">);
</span><span class="line">   46 </span><span class="sym"></span>                     S <span class="sym">(</span>Back<span class="sym">) :=</span> Temp<span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span>                     Front <span class="sym">:=</span> Front <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span>                     Back  <span class="sym">:=</span> Back <span class="num">- 1</span><span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span>                  <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   50 </span><span class="sym"></span>               <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>               Sort_Recursive <span class="sym">(</span>Lwb<span class="sym">,</span> Back<span class="sym">);
</span><span class="line">   52 </span><span class="sym"></span>               Sort_Recursive <span class="sym">(</span>Front<span class="sym">,</span> Upb<span class="sym">);
</span><span class="line">   53 </span><span class="sym"></span>            <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   54 </span><span class="sym"></span>         <span class="kwa">end</span> Sort_Recursive<span class="sym">;
</span><span class="line">   55 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">   56 </span><span class="kwa"></span>         Sort_Recursive <span class="sym">(</span>S<span class="sym">'</span>First<span class="sym">,</span> S<span class="sym">'</span>Last<span class="sym">);
</span><span class="line">   57 </span><span class="sym"></span>      <span class="kwa">end</span> Quick_Sort<span class="sym">;
</span><span class="line">   58 </span><span class="sym"></span>   <span class="kwa">end</span> Sort_Pkg<span class="sym">;
</span><span class="line">   59 </span><span class="sym">
</span><span class="line">   60 </span><span class="sym"></span>   <span class="kwa">type</span> Real_Array <span class="kwa">is array</span> <span class="sym">(</span><span class="kwb">Integer</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> Real<span class="sym">;
</span><span class="line">   61 </span><span class="sym"></span>   <span class="kwa">type</span> Real_Array_Ptr <span class="kwa">is access</span> Real_Array<span class="sym">;
</span><span class="line">   62 </span><span class="sym"></span>   <span class="kwa">procedure</span> Deallocate_Real_Array <span class="kwa">is new</span> Ada.Unchecked_Deallocation <span class="sym">(
</span><span class="line">   63 </span><span class="sym">
</span><span class="line">   64 </span><span class="sym"></span>                  Object <span class="sym">=&gt;</span> Real_Array<span class="sym">,</span> Name <span class="sym">=&gt;</span> Real_Array_Ptr<span class="sym">);
</span><span class="line">   65 </span><span class="sym"></span>   <span class="kwa">package</span> Sort <span class="kwa">is new</span> Sort_Pkg <span class="sym">(</span>Real<span class="sym">,</span> <span class="str">&quot;&lt;=&quot;</span> <span class="sym">=&gt;</span> <span class="str">&quot;&lt;=&quot;</span><span class="sym">,</span> Sequence <span class="sym">=&gt;</span> Real_Array<span class="sym">);
</span><span class="line">   66 </span><span class="sym">
</span><span class="line">   67 </span><span class="sym"></span>   Data           <span class="sym">:</span> Real_Array_Ptr <span class="sym">:=</span> <span class="kwa">new</span> Real_Array <span class="sym">(</span><span class="num">1</span> .. <span class="num">0</span><span class="sym">);
</span><span class="line">   68 </span><span class="sym"></span>   Temp_Array     <span class="sym">:</span> Real_Array_Ptr<span class="sym">;
</span><span class="line">   69 </span><span class="sym"></span>   Dev<span class="sym">,</span> D_2<span class="sym">,</span> Mean<span class="sym">,</span> Median     <span class="sym">:</span> Real<span class="sym">;
</span><span class="line">   70 </span><span class="sym"></span>   Standard_Deviation         <span class="sym">:</span> Real<span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span>   Sum<span class="sym">,</span> Avg_Abs_Deviation     <span class="sym">:</span> Real <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   72 </span><span class="sym"></span>   Variance<span class="sym">,</span> Skew<span class="sym">,</span> Kurtosis   <span class="sym">:</span> Real <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   73 </span><span class="sym"></span>   M              <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   74 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   75 </span><span class="kwa">   while not</span> Io.End_Of_File <span class="kwa">loop
</span><span class="line">   76 </span><span class="kwa"></span>      M <span class="sym">:=</span> M <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   77 </span><span class="sym"></span>      <span class="kwa">if</span> M <span class="sym">&gt;</span> Data<span class="sym">'</span>Last <span class="kwa">then</span>                  <span class="slc">--  Lengthen array of strings
</span><span class="line">   78 </span><span class="slc"></span>         Temp_Array <span class="sym">:=</span> <span class="kwa">new</span> Real_Array <span class="sym">(
</span><span class="line">   79 </span><span class="sym"></span>                        <span class="num">1</span> .. <span class="num">4</span> <span class="sym">+</span> <span class="kwb">Positive</span> <span class="sym">(</span>Real<span class="sym">'</span>Ceiling <span class="sym">(</span><span class="num">1.70</span> <span class="sym">*</span> Real <span class="sym">(</span>M<span class="sym">))));
</span><span class="line">   80 </span><span class="sym"></span>         Temp_Array <span class="sym">(</span>Data<span class="sym">'</span><span class="kwa">Range</span><span class="sym">) :=</span> Data.<span class="kwa">all</span><span class="sym">;
</span><span class="line">   81 </span><span class="sym"></span>         Deallocate_Real_Array <span class="sym">(</span>Data<span class="sym">);
</span><span class="line">   82 </span><span class="sym"></span>         Data <span class="sym">:=</span> Temp_Array<span class="sym">;</span>     <span class="slc">--  Replace the old array with the new one
</span><span class="line">   83 </span><span class="slc"></span>      <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   84 </span><span class="sym"></span>      Rio.Get <span class="sym">(</span>Item <span class="sym">=&gt;</span> Data <span class="sym">(</span>M<span class="sym">));</span>      <span class="slc">-- Read  numbers between whitespace
</span><span class="line">   85 </span><span class="slc"></span>      Sum <span class="sym">:=</span> Sum <span class="sym">+</span> Data <span class="sym">(</span>M<span class="sym">);
</span><span class="line">   86 </span><span class="sym"></span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   87 </span><span class="sym"></span>   Mean <span class="sym">:=</span> Sum <span class="sym">/</span> Real <span class="sym">(</span>M<span class="sym">);
</span><span class="line">   88 </span><span class="sym"></span>   <span class="kwa">for</span> K <span class="kwa">in</span> <span class="num">1</span> .. M <span class="kwa">loop
</span><span class="line">   89 </span><span class="kwa"></span>      Dev <span class="sym">:=</span> Data <span class="sym">(</span>K<span class="sym">) -</span> Mean<span class="sym">;
</span><span class="line">   90 </span><span class="sym"></span>      Avg_Abs_Deviation <span class="sym">:=</span> Avg_Abs_Deviation <span class="sym">+</span> <span class="kwa">abs</span> Dev<span class="sym">;
</span><span class="line">   91 </span><span class="sym"></span>      D_2 <span class="sym">:=</span> Dev <span class="sym">*</span> Dev<span class="sym">;
</span><span class="line">   92 </span><span class="sym"></span>      Variance <span class="sym">:=</span> Variance <span class="sym">+</span> D_2<span class="sym">;
</span><span class="line">   93 </span><span class="sym"></span>      Skew <span class="sym">:=</span> Skew <span class="sym">+ (</span>D_2 <span class="sym">*</span> Dev<span class="sym">);
</span><span class="line">   94 </span><span class="sym"></span>      Kurtosis <span class="sym">:=</span> Kurtosis <span class="sym">+ (</span>D_2 <span class="sym">*</span> D_2<span class="sym">);
</span><span class="line">   95 </span><span class="sym"></span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">   96 </span><span class="sym"></span>   Avg_Abs_Deviation <span class="sym">:=</span> Avg_Abs_Deviation <span class="sym">/</span> Real <span class="sym">(</span>M<span class="sym">);
</span><span class="line">   97 </span><span class="sym"></span>   Variance <span class="sym">:=</span> Variance <span class="sym">/</span> Real <span class="sym">(</span>M <span class="num">- 1</span><span class="sym">);
</span><span class="line">   98 </span><span class="sym"></span>   Standard_Deviation <span class="sym">:=</span> AF.Sqrt <span class="sym">(</span>Variance<span class="sym">);
</span><span class="line">   99 </span><span class="sym"></span>   <span class="kwa">if</span> Variance <span class="sym">&lt;</span> <span class="num">10.0</span> <span class="sym">*</span> Real<span class="sym">'</span>Model_Epsilon <span class="kwa">then
</span><span class="line">  100 </span><span class="kwa"></span>      Io.Put_Line <span class="sym">(</span><span class="str">&quot;&gt; Reduced accuracy results: 0 = ((Variance/10 + 1) - 1)&quot;</span><span class="sym">);
</span><span class="line">  101 </span><span class="sym"></span>   <span class="kwa">else
</span><span class="line">  102 </span><span class="kwa"></span>      Skew <span class="sym">:=</span> Skew <span class="sym">/ (</span>Real <span class="sym">(</span>M<span class="sym">) *</span> Variance <span class="sym">*</span> Standard_Deviation<span class="sym">);
</span><span class="line">  103 </span><span class="sym"></span>      Kurtosis <span class="sym">:= -</span><span class="num">3.0</span> <span class="sym">+</span> Kurtosis <span class="sym">/ (</span>Real <span class="sym">(</span>M<span class="sym">) *</span> Variance <span class="sym">*</span> Variance<span class="sym">);
</span><span class="line">  104 </span><span class="sym"></span>   <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  105 </span><span class="sym"></span>   Sort.Quick_Sort <span class="sym">(</span>S <span class="sym">=&gt;</span> Data <span class="sym">(</span><span class="num">1</span> .. M<span class="sym">));
</span><span class="line">  106 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="num">1</span> <span class="sym">= (</span>M <span class="kwa">mod</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">then
</span><span class="line">  107 </span><span class="kwa"></span>      Median <span class="sym">:=</span> Data <span class="sym">((</span>M <span class="sym">+</span> <span class="num">1</span><span class="sym">) /</span> <span class="num">2</span><span class="sym">);
</span><span class="line">  108 </span><span class="sym"></span>   <span class="kwa">else
</span><span class="line">  109 </span><span class="kwa"></span>      Median <span class="sym">:= (</span>Data <span class="sym">(</span>M <span class="sym">/</span> <span class="num">2</span><span class="sym">) +</span> Data <span class="sym">(</span><span class="num">1</span> <span class="sym">+</span> M <span class="sym">/</span> <span class="num">2</span><span class="sym">)) /</span> <span class="num">2.0</span><span class="sym">;
</span><span class="line">  110 </span><span class="sym"></span>   <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  111 </span><span class="sym"></span>   Io.Put_Line <span class="sym">(</span><span class="str">&quot;n:                 &quot;</span> <span class="sym">&amp;</span> <span class="kwb">Integer</span><span class="sym">'</span>Image <span class="sym">(</span>M<span class="sym">));
</span><span class="line">  112 </span><span class="sym"></span>   Io.Put <span class="sym">(</span><span class="str">&quot;median:             &quot;</span><span class="sym">);</span> Put <span class="sym">(</span>Median<span class="sym">);</span>              Io.New_Line<span class="sym">;
</span><span class="line">  113 </span><span class="sym"></span>   Io.Put <span class="sym">(</span><span class="str">&quot;mean:               &quot;</span><span class="sym">);</span> Put <span class="sym">(</span>Mean<span class="sym">);</span>                Io.New_Line<span class="sym">;
</span><span class="line">  114 </span><span class="sym"></span>   Io.Put <span class="sym">(</span><span class="str">&quot;average_deviation:  &quot;</span><span class="sym">);</span> Put <span class="sym">(</span>Avg_Abs_Deviation<span class="sym">);</span>   Io.New_Line<span class="sym">;
</span><span class="line">  115 </span><span class="sym"></span>   Io.Put <span class="sym">(</span><span class="str">&quot;standard_deviation: &quot;</span><span class="sym">);</span> Put <span class="sym">(</span>Standard_Deviation<span class="sym">);</span>  Io.New_Line<span class="sym">;
</span><span class="line">  116 </span><span class="sym"></span>   Io.Put <span class="sym">(</span><span class="str">&quot;variance:           &quot;</span><span class="sym">);</span> Put <span class="sym">(</span>Variance<span class="sym">);</span>            Io.New_Line<span class="sym">;
</span><span class="line">  117 </span><span class="sym"></span>   Io.Put <span class="sym">(</span><span class="str">&quot;skew:               &quot;</span><span class="sym">);</span> Put <span class="sym">(</span>Skew<span class="sym">);</span>                Io.New_Line<span class="sym">;
</span><span class="line">  118 </span><span class="sym"></span>   Io.Put <span class="sym">(</span><span class="str">&quot;kurtosis:           &quot;</span><span class="sym">);</span> Put <span class="sym">(</span>Kurtosis<span class="sym">);</span>            Io.New_Line<span class="sym">;
</span><span class="line">  119 </span><span class="sym"></span><span class="kwa">end</span> Moments<span class="sym">;
</span><span class="line">  120 </span><span class="sym"></span>
