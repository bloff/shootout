<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Jim Rogers</span>

<span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;</span>
<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;</span>
<span class="kwa">with</span> Ada.Integer_Text_IO<span class="sym">;</span> <span class="kwa">use</span> Ada.Integer_Text_IO<span class="sym">;</span>

<span class="kwa">procedure</span> ThreadRing <span class="kwa">is</span>

   <span class="kwa">protected</span> Flag <span class="kwa">is</span>
      <span class="kwa">procedure</span> Set<span class="sym">(</span>Num <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">);</span>
      <span class="kwa">entry</span> Wait<span class="sym">(</span>Last <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Positive</span><span class="sym">);</span>
   <span class="kwa">private</span>
      Done <span class="sym">:</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> False<span class="sym">;</span>
      Id <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;</span>
   <span class="kwa">end</span> Flag<span class="sym">;</span>
   <span class="kwa">protected body</span> Flag <span class="kwa">is</span>
      <span class="kwa">procedure</span> Set<span class="sym">(</span>Num <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">begin</span>
         Done <span class="sym">:=</span> True<span class="sym">;</span>
         Id <span class="sym">:=</span> Num<span class="sym">;</span>
      <span class="kwa">end</span> Set<span class="sym">;</span>
      <span class="kwa">entry</span> Wait<span class="sym">(</span>Last <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Positive</span><span class="sym">)</span> <span class="kwa">when</span> Done <span class="kwa">is</span>
      <span class="kwa">begin</span>
         Last <span class="sym">:=</span> Id<span class="sym">;</span>
      <span class="kwa">end</span> Wait<span class="sym">;</span>
   <span class="kwa">end</span> Flag<span class="sym">;</span>

   <span class="kwa">type</span> Node<span class="sym">;</span>
   <span class="kwa">type</span> Node_Access <span class="kwa">is access</span> Node<span class="sym">;</span>

   Ring <span class="sym">:</span> <span class="kwa">array</span><span class="sym">(</span><span class="num">1</span>.<span class="num">.503</span><span class="sym">)</span> <span class="kwa">of</span> Node_Access<span class="sym">;</span>

   <span class="kwa">task type</span> Node<span class="sym">(</span>Id <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">entry</span> Start<span class="sym">(</span>Next <span class="sym">:</span> Node_Access<span class="sym">);</span>
      <span class="kwa">entry</span> Put<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Natural</span><span class="sym">);</span>
      <span class="kwa">entry</span> Stop<span class="sym">;</span>
   <span class="kwa">end</span> Node<span class="sym">;</span>

   <span class="kwa">task body</span> Node <span class="kwa">is</span>
      Val <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>
      Next_Node <span class="sym">:</span> Node_Access<span class="sym">;</span>
   <span class="kwa">begin</span>
      <span class="kwa">accept</span> Start<span class="sym">(</span>Next <span class="sym">:</span> Node_Access<span class="sym">)</span> <span class="kwa">do</span>
         Next_Node <span class="sym">:=</span> Next<span class="sym">;</span>
      <span class="kwa">end</span> Start<span class="sym">;</span>

      <span class="kwa">loop</span>
         <span class="kwa">select</span>
            <span class="kwa">accept</span> Put<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">do</span>
               Val <span class="sym">:=</span> Item<span class="sym">;</span>
            <span class="kwa">end</span> Put<span class="sym">;</span>
         <span class="kwa">or</span>
            <span class="kwa">accept</span> Stop<span class="sym">;</span>
            <span class="kwa">exit</span><span class="sym">;</span>
         <span class="kwa">end select</span><span class="sym">;</span>
         <span class="kwa">if</span> Val <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
            Val <span class="sym">:=</span> Val <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
            Next_Node.Put<span class="sym">(</span>Val<span class="sym">);</span>
         <span class="kwa">else</span>
            Flag.Set<span class="sym">(</span>Id<span class="sym">);</span>
         <span class="kwa">end if</span><span class="sym">;</span>
      <span class="kwa">end loop</span><span class="sym">;</span>
   <span class="kwa">end</span> Node<span class="sym">;</span>

   Num_Passes <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>
   Last_Node <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;</span>
<span class="kwa">begin</span>
   Num_Passes <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));</span>
   <span class="kwa">for</span> I <span class="kwa">in</span> Ring<span class="sym">'</span><span class="kwa">range loop</span>
      Ring<span class="sym">(</span>I<span class="sym">) :=</span> <span class="kwa">new</span> Node<span class="sym">(</span>I<span class="sym">);</span>
   <span class="kwa">end loop</span><span class="sym">;</span>
   Ring<span class="sym">(</span>Ring<span class="sym">'</span>Last<span class="sym">)</span>.Start<span class="sym">(</span>Ring<span class="sym">(</span><span class="num">1</span><span class="sym">));</span>
   <span class="kwa">for</span> I <span class="kwa">in</span> Ring<span class="sym">'</span>First..Ring<span class="sym">'</span>Last <span class="sym">-</span> <span class="num">1</span> <span class="kwa">loop</span>
      Ring<span class="sym">(</span>I<span class="sym">)</span>.Start<span class="sym">(</span>Ring<span class="sym">(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">));</span>
   <span class="kwa">end loop</span><span class="sym">;</span>
   Ring<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.Put<span class="sym">(</span>Num_Passes<span class="sym">);</span>
   Flag.Wait<span class="sym">(</span>Last_Node<span class="sym">);</span>
   Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Last_Node<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);</span>
   New_Line<span class="sym">;</span>
   <span class="kwa">for</span> I <span class="kwa">in</span> Ring<span class="sym">'</span><span class="kwa">range loop</span>
      Ring<span class="sym">(</span>I<span class="sym">)</span>.Stop<span class="sym">;</span>
   <span class="kwa">end loop</span><span class="sym">;</span>

<span class="kwa">end</span> ThreadRing<span class="sym">;</span>
