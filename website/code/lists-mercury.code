<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
% ---------------------------------------------------------------------------- %
% lists.m
% Ralph Becket &lt;rbeck@microsoft.com&gt;
% Tue Jan  9 13:50:50 GMT 2001
% vim: ts=4 sw=4 et tw=0 wm=0 ff=unix
%
% NOTE: this <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">not</FONT></B> really a fair test since the Mercury list
% <B><FONT COLOR="#A020F0">library</FONT></B> does <B><FONT COLOR="#A020F0">not</FONT></B> implement doubly-linked lists as the C <B><FONT COLOR="#A020F0">and</FONT></B>
% (presumably) Python versions <B><FONT COLOR="#A020F0">do</FONT></B>.
% ---------------------------------------------------------------------------- %

:- module mytest.
:- <B><FONT COLOR="#A020F0">interface</FONT></B>.

:- import_module io.



:- pred main(io__state, io__state).
:- mode main(di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> cc_multi.



:- <B><FONT COLOR="#A020F0">implementation</FONT></B>.



:- import_module <B><FONT COLOR="#A020F0">string</FONT></B>, list, int, require, benchmarking.



main --&gt;
    io__command_line_arguments(ArgV),
    (   <I><FONT COLOR="#B22222">{ ArgV = [],        Repeats = 1 }</FONT></I>
    ;   <I><FONT COLOR="#B22222">{ ArgV = [Arg],     Repeats = string__det_to_int(Arg) }</FONT></I>
    ;   <I><FONT COLOR="#B22222">{ ArgV = [_,_|_],   error(&quot;usage: nestedloops [Repeats]&quot;) }</FONT></I>
    ),
    <I><FONT COLOR="#B22222">{ benchmarking__benchmark_det(test_list_ops, 0, N, Repeats, Time) }</FONT></I>,
    io__format(&quot;%d\n&quot;, [i(N)]).



:- func size = int.
size = 10000.



:- pred test_list_ops(int, int).
:- mode test_list_ops(<B><FONT COLOR="#A020F0">in</FONT></B>, out) <B><FONT COLOR="#A020F0">is</FONT></B> det.

test_list_ops(_, N) :-
    L1 = 1 `..` size,                   % Build [1, 2, ..., size].
    copy(L1, L2),                       % Make a copy.
                                        % <B><FONT COLOR="#A020F0">Do</FONT></B> a naive reverse.
    L3 = list__foldl(func(X, L) = L ++ [X], L2, []),
                                        % Now <B><FONT COLOR="#A020F0">do</FONT></B> a weird copy.
    L4 = list__foldr(func(X, L) = L ++ [X], L3, []),
    L5 = list__reverse(L1),             % Standard reverse.
    (
             <B><FONT COLOR="#A020F0">if</FONT></B> list__det_head(L5) \= size  <B><FONT COLOR="#A020F0">then</FONT></B> N = 0
        <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> L1 \= L2                    <B><FONT COLOR="#A020F0">then</FONT></B> N = 0
        <B><FONT COLOR="#A020F0">else</FONT></B>                                     N = list__length(L4)
    ).</pre></td></tr></table>
