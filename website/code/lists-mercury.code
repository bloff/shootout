<span class="line">    1 </span><span class="slc">% ---------------------------------------------------------------------------- %
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">% lists.m
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">% Ralph Becket &lt;rbeck&#64;microsoft.com&gt;
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">% Tue Jan  9 13:50:50 GMT 2001
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">% vim: ts=4 sw=4 et tw=0 wm=0 ff=unix
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">%
</span><span class="line">    7 </span><span class="slc"></span><span class="slc">% NOTE: this is not really a fair test since the Mercury list
</span><span class="line">    8 </span><span class="slc"></span><span class="slc">% library does not implement doubly-linked lists as the C and
</span><span class="line">    9 </span><span class="slc"></span><span class="slc">% (presumably) Python versions do.
</span><span class="line">   10 </span><span class="slc"></span><span class="slc">% ---------------------------------------------------------------------------- %
</span><span class="line">   11 </span><span class="slc"></span>
<span class="line">   12 </span><span class="sym">:-</span> module mytest.
<span class="line">   13 </span><span class="sym">:-</span> interface.
<span class="line">   14 </span>
<span class="line">   15 </span><span class="sym">:-</span> import_module io.
<span class="line">   16 </span>
<span class="line">   17 </span>
<span class="line">   18 </span>
<span class="line">   19 </span><span class="sym">:-</span> pred main<span class="sym">(</span>io__state<span class="sym">,</span> io__state<span class="sym">)</span>.
<span class="line">   20 </span><span class="sym">:-</span> mode main<span class="sym">(</span>di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> cc_multi.
<span class="line">   21 </span>
<span class="line">   22 </span>
<span class="line">   23 </span>
<span class="line">   24 </span><span class="sym">:-</span> implementation.
<span class="line">   25 </span>
<span class="line">   26 </span>
<span class="line">   27 </span>
<span class="line">   28 </span><span class="sym">:-</span> import_module string<span class="sym">,</span> list<span class="sym">,</span> int<span class="sym">,</span> require<span class="sym">,</span> benchmarking.
<span class="line">   29 </span>
<span class="line">   30 </span>
<span class="line">   31 </span>
<span class="line">   32 </span>main <span class="sym">--&gt;
</span><span class="line">   33 </span><span class="sym"></span>    io__command_line_arguments<span class="sym">(</span>ArgV<span class="sym">),
</span><span class="line">   34 </span><span class="sym">    (   {</span> ArgV <span class="sym">= [],</span>        Repeats <span class="sym">=</span> <span class="num">1</span> <span class="sym">}
</span><span class="line">   35 </span><span class="sym">    ;   {</span> ArgV <span class="sym">= [</span>Arg<span class="sym">],</span>     Repeats <span class="sym">=</span> string__det_to_int<span class="sym">(</span>Arg<span class="sym">) }
</span><span class="line">   36 </span><span class="sym">    ;   {</span> ArgV <span class="sym">= [</span>_<span class="sym">,</span>_<span class="sym">|</span>_<span class="sym">],</span>   error<span class="sym">(</span><span class="str">&quot;usage: nestedloops [Repeats]&quot;</span><span class="sym">) }
</span><span class="line">   37 </span><span class="sym">    ),
</span><span class="line">   38 </span><span class="sym">    {</span> benchmarking__benchmark_det<span class="sym">(</span>test_list_ops<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> N<span class="sym">,</span> Repeats<span class="sym">,</span> Time<span class="sym">) },
</span><span class="line">   39 </span><span class="sym"></span>    io__format<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>i<span class="sym">(</span>N<span class="sym">)])</span>.
<span class="line">   40 </span>
<span class="line">   41 </span>
<span class="line">   42 </span>
<span class="line">   43 </span><span class="sym">:-</span> func size <span class="sym">=</span> int.
<span class="line">   44 </span>size <span class="sym">=</span> <span class="num">10000</span>.
<span class="line">   45 </span>
<span class="line">   46 </span>
<span class="line">   47 </span>
<span class="line">   48 </span><span class="sym">:-</span> pred test_list_ops<span class="sym">(</span>int<span class="sym">,</span> int<span class="sym">)</span>.
<span class="line">   49 </span><span class="sym">:-</span> mode test_list_ops<span class="sym">(</span>in<span class="sym">,</span> out<span class="sym">)</span> <span class="kwa">is</span> det.
<span class="line">   50 </span>
<span class="line">   51 </span>test_list_ops<span class="sym">(</span>_<span class="sym">,</span> N<span class="sym">) :-
</span><span class="line">   52 </span><span class="sym"></span>    L1 <span class="sym">=</span> <span class="num">1</span> `..` size<span class="sym">,</span>                   <span class="slc">% Build [1, 2, ..., size].
</span><span class="line">   53 </span><span class="slc"></span>    copy<span class="sym">(</span>L1<span class="sym">,</span> L2<span class="sym">),</span>                       <span class="slc">% Make a copy.
</span><span class="line">   54 </span><span class="slc"></span>                                        <span class="slc">% Do a naive reverse.
</span><span class="line">   55 </span><span class="slc"></span>    L3 <span class="sym">=</span> list__foldl<span class="sym">(</span>func<span class="sym">(</span>X<span class="sym">,</span> L<span class="sym">) =</span> L <span class="sym">++ [</span>X<span class="sym">],</span> L2<span class="sym">, []),
</span><span class="line">   56 </span><span class="sym"></span>                                        <span class="slc">% Now do a weird copy.
</span><span class="line">   57 </span><span class="slc"></span>    L4 <span class="sym">=</span> list__foldr<span class="sym">(</span>func<span class="sym">(</span>X<span class="sym">,</span> L<span class="sym">) =</span> L <span class="sym">++ [</span>X<span class="sym">],</span> L3<span class="sym">, []),
</span><span class="line">   58 </span><span class="sym"></span>    L5 <span class="sym">=</span> list__reverse<span class="sym">(</span>L1<span class="sym">),</span>             <span class="slc">% Standard reverse.
</span><span class="line">   59 </span><span class="slc"></span>    <span class="sym">(
</span><span class="line">   60 </span><span class="sym"></span>             if list__det_head<span class="sym">(</span>L5<span class="sym">)</span> \<span class="sym">=</span> size  then N <span class="sym">=</span> <span class="num">0
</span><span class="line">   61 </span><span class="num"></span>        else if L1 \<span class="sym">=</span> L2                    then N <span class="sym">=</span> <span class="num">0
</span><span class="line">   62 </span><span class="num"></span>        else                                     N <span class="sym">=</span> list__length<span class="sym">(</span>L4<span class="sym">)
</span><span class="line">   63 </span><span class="sym">    )</span>.
