<span class="com">/*</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * this program is modified from:</span>
<span class="com"> *   http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html</span>
<span class="com"> * Timing Trials, or, the Trials of Timing: Experiments with Scripting</span>
<span class="com"> * and User-Interface Languages&lt;/a&gt; by Brian W. Kernighan and</span>
<span class="com"> * Christopher J. Van Wyk.</span>
<span class="com"> *</span>
<span class="com"> * I added free() to deallocate memory.</span>
<span class="com"> */</span>

<span class="dir">#include &lt;core.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;assert.h&gt;</span>

<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> ??argv<span class="sym">) {</span>
    let n<span class="sym">&lt;</span>`n<span class="sym">&gt; = ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwb">int</span> k<span class="sym">,</span> &#64;<span class="sym">{</span><span class="kwd">valueof</span><span class="sym">(</span>`n<span class="sym">)}</span> \U  x<span class="sym">,</span> &#64;<span class="sym">{</span><span class="kwd">valueof</span><span class="sym">(</span>`n<span class="sym">)}</span> \U y<span class="sym">;</span>
    <span class="kwb">unsigned int</span> i<span class="sym">;</span>

    x <span class="sym">=</span> <span class="kwd">calloc</span><span class="sym">(</span>n<span class="sym">,</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">));</span>
    y <span class="sym">=</span> <span class="kwd">calloc</span><span class="sym">(</span>n<span class="sym">,</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">));</span>

    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {</span>
        x<span class="sym">[</span>i<span class="sym">] =</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> k<span class="sym">&lt;</span><span class="num">1000</span><span class="sym">;</span> k<span class="sym">++) {</span>
    <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">--) {</span>
        y<span class="sym">[</span>i<span class="sym">] +=</span> x<span class="sym">[</span>i<span class="sym">];</span>
    <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
      i <span class="sym">=</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
      <span class="kwd">assert</span><span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">);</span>
      <span class="kwd">fprintf</span><span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> y<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> y<span class="sym">[</span>i<span class="sym">]);</span>
    <span class="sym">}</span>
<span class="slc">//     Core::ufree(x);</span>
<span class="slc">//     Core::ufree(y);</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
