<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: wordfreq-poly.code,v 1.4 2004-11-13 07:43:35 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * from Stephen Weeks
</span><span class="line">    5 </span><span class="com"> *)</span>
<span class="line">    6 </span>
<span class="line">    7 </span><span class="kwa">fun</span> for <span class="sym">(</span>start<span class="sym">,</span> stop<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">    8 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">    9 </span><span class="kwa">      fun</span> loop i <span class="sym">=
</span><span class="line">   10 </span><span class="sym"></span>         <span class="kwa">if</span> i <span class="sym">&gt;</span> stop
<span class="line">   11 </span>            <span class="kwa">then</span> <span class="sym">()
</span><span class="line">   12 </span><span class="sym"></span>         <span class="kwa">else</span> <span class="sym">(</span>f i<span class="sym">;</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   13 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">   14 </span><span class="kwa"></span>      loop start
<span class="line">   15 </span>   <span class="kwa">end
</span><span class="line">   16 </span><span class="kwa">fun</span> incr r <span class="sym">=</span> r <span class="sym">:=</span> <span class="num">1</span> <span class="sym">+ !</span>r
<span class="line">   17 </span><span class="kwa">val</span> sub <span class="sym">=</span> Array.sub
<span class="line">   18 </span><span class="kwa">val</span> update <span class="sym">=</span> Array.update
<span class="line">   19 </span>
<span class="line">   20 </span><span class="kwa">signature</span> HASH_SET <span class="sym">=
</span><span class="line">   21 </span><span class="sym"></span>   <span class="kwa">sig
</span><span class="line">   22 </span><span class="kwa">      type</span> 'a t
<span class="line">   23 </span>
<span class="line">   24 </span>      <span class="kwa">val</span> foreach<span class="sym">:</span> 'a t <span class="sym">* (</span>'a <span class="sym">-&gt;</span> unit<span class="sym">) -&gt;</span> unit
<span class="line">   25 </span>      <span class="com">(* lookupOrInsert (s, h, p, f)  looks in the set s for an entry with hash h
</span><span class="line">   26 </span><span class="com">       * satisfying predicate p.  If the entry is there, it is returned.
</span><span class="line">   27 </span><span class="com">       * Otherwise, the function f is called to create a new entry, which is
</span><span class="line">   28 </span><span class="com">       * inserted and returned.
</span><span class="line">   29 </span><span class="com">       *)</span>
<span class="line">   30 </span>      <span class="kwa">val</span> lookupOrInsert<span class="sym">:</span> 'a t <span class="sym">*</span> <span class="kwb">word</span> <span class="sym">* (</span>'a <span class="sym">-&gt;</span> <span class="kwb">bool</span><span class="sym">) * (</span>unit <span class="sym">-&gt;</span> 'a<span class="sym">) -&gt;</span> 'a
<span class="line">   31 </span>      <span class="kwa">val</span> new<span class="sym">: {</span>hash<span class="sym">:</span> 'a <span class="sym">-&gt;</span> <span class="kwb">word</span><span class="sym">} -&gt;</span> 'a t
<span class="line">   32 </span>      <span class="kwa">val</span> size<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> <span class="kwb">int
</span><span class="line">   33 </span><span class="kwb"></span>   <span class="kwa">end
</span><span class="line">   34 </span><span class="kwa">
</span><span class="line">   35 </span><span class="kwa">structure</span> HashSet<span class="sym">:</span> HASH_SET <span class="sym">=
</span><span class="line">   36 </span><span class="sym"></span><span class="kwa">struct
</span><span class="line">   37 </span><span class="kwa">
</span><span class="line">   38 </span><span class="kwa">datatype</span> 'a t <span class="sym">=
</span><span class="line">   39 </span><span class="sym"></span>   T <span class="kwa">of</span> <span class="sym">{</span>buckets<span class="sym">:</span> 'a list array ref<span class="sym">,
</span><span class="line">   40 </span><span class="sym"></span>         hash<span class="sym">:</span> 'a <span class="sym">-&gt;</span> <span class="kwb">word</span><span class="sym">,
</span><span class="line">   41 </span><span class="sym"></span>         mask<span class="sym">:</span> <span class="kwb">word</span> ref<span class="sym">,
</span><span class="line">   42 </span><span class="sym"></span>         numItems<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">}
</span><span class="line">   43 </span><span class="sym">
</span><span class="line">   44 </span><span class="sym"></span><span class="kwa">val</span> initialSize<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">65536
</span><span class="line">   45 </span><span class="num"></span><span class="kwa">val</span> initialMask<span class="sym">:</span> <span class="kwb">word</span> <span class="sym">=</span> <span class="kwa">Word</span>.fromInt initialSize <span class="num">- 0w1
</span><span class="line">   46 </span><span class="num">
</span><span class="line">   47 </span><span class="num"></span><span class="kwa">fun</span> 'a new <span class="sym">{</span>hash<span class="sym">}:</span> 'a t <span class="sym">=
</span><span class="line">   48 </span><span class="sym"></span>   T <span class="sym">{</span>buckets <span class="sym">=</span> ref <span class="sym">(</span>Array.array <span class="sym">(</span>initialSize<span class="sym">, [])),
</span><span class="line">   49 </span><span class="sym"></span>      hash <span class="sym">=</span> hash<span class="sym">,
</span><span class="line">   50 </span><span class="sym"></span>      numItems <span class="sym">=</span> ref <span class="num">0</span><span class="sym">,
</span><span class="line">   51 </span><span class="sym"></span>      mask <span class="sym">=</span> ref initialMask<span class="sym">}
</span><span class="line">   52 </span><span class="sym">
</span><span class="line">   53 </span><span class="sym"></span><span class="kwa">fun</span> size <span class="sym">(</span>T <span class="sym">{</span>numItems<span class="sym">,</span> ...<span class="sym">}) = !</span>numItems
<span class="line">   54 </span><span class="kwa">fun</span> numBuckets <span class="sym">(</span>T <span class="sym">{</span>buckets<span class="sym">,</span> ...<span class="sym">}) =</span> Array.length <span class="sym">(!</span>buckets<span class="sym">)
</span><span class="line">   55 </span><span class="sym">
</span><span class="line">   56 </span><span class="sym"></span><span class="kwa">fun</span> index <span class="sym">(</span>w<span class="sym">:</span> <span class="kwb">word</span><span class="sym">,</span> mask<span class="sym">:</span> <span class="kwb">word</span><span class="sym">):</span> <span class="kwb">int</span> <span class="sym">=
</span><span class="line">   57 </span><span class="sym"></span>   <span class="kwa">Word</span>.toInt <span class="sym">(</span><span class="kwa">Word</span>.andb <span class="sym">(</span>w<span class="sym">,</span> mask<span class="sym">))
</span><span class="line">   58 </span><span class="sym">
</span><span class="line">   59 </span><span class="sym"></span><span class="kwa">fun</span> resize <span class="sym">(</span>T <span class="sym">{</span>buckets<span class="sym">,</span> hash<span class="sym">,</span> mask<span class="sym">,</span> ...<span class="sym">},</span> size<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> newMask<span class="sym">:</span> <span class="kwb">word</span><span class="sym">):</span> unit <span class="sym">=
</span><span class="line">   60 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   61 </span><span class="kwa">      val</span> newBuckets <span class="sym">=</span> Array.array <span class="sym">(</span>size<span class="sym">, [])
</span><span class="line">   62 </span><span class="sym"></span>   <span class="kwa">in</span> Array.app <span class="sym">(</span><span class="kwa">fn</span> r <span class="sym">=&gt;
</span><span class="line">   63 </span><span class="sym"></span>                 <span class="kwa">List</span>.app <span class="sym">(</span><span class="kwa">fn</span> a <span class="sym">=&gt;
</span><span class="line">   64 </span><span class="sym"></span>                               <span class="kwa">let val</span> j <span class="sym">=</span> index <span class="sym">(</span>hash a<span class="sym">,</span> newMask<span class="sym">)
</span><span class="line">   65 </span><span class="sym"></span>                               <span class="kwa">in</span> Array.update
<span class="line">   66 </span>                                  <span class="sym">(</span>newBuckets<span class="sym">,</span> j<span class="sym">,
</span><span class="line">   67 </span><span class="sym"></span>                                   a <span class="sym">::</span> Array.sub <span class="sym">(</span>newBuckets<span class="sym">,</span> j<span class="sym">))
</span><span class="line">   68 </span><span class="sym"></span>                               <span class="kwa">end</span><span class="sym">)</span> r<span class="sym">) (!</span>buckets<span class="sym">)
</span><span class="line">   69 </span><span class="sym">      ;</span> buckets <span class="sym">:=</span> newBuckets
<span class="line">   70 </span>      <span class="sym">;</span> mask <span class="sym">:=</span> newMask
<span class="line">   71 </span>   <span class="kwa">end
</span><span class="line">   72 </span><span class="kwa">
</span><span class="line">   73 </span><span class="kwa">fun</span> maybeGrow <span class="sym">(</span>s <span class="kwa">as</span> T <span class="sym">{</span>buckets<span class="sym">,</span> mask<span class="sym">,</span> numItems<span class="sym">,</span> ...<span class="sym">}):</span> unit <span class="sym">=
</span><span class="line">   74 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   75 </span><span class="kwa">      val</span> n <span class="sym">=</span> Array.length <span class="sym">(!</span>buckets<span class="sym">)
</span><span class="line">   76 </span><span class="sym"></span>   <span class="kwa">in if</span> <span class="sym">!</span>numItems <span class="sym">*</span> <span class="num">4</span> <span class="sym">&gt;</span> n
<span class="line">   77 </span>         <span class="kwa">then</span> resize <span class="sym">(</span>s<span class="sym">,
</span><span class="line">   78 </span><span class="sym"></span>                      n <span class="sym">*</span> <span class="num">2</span><span class="sym">,
</span><span class="line">   79 </span><span class="sym"></span>                      <span class="com">(* The new mask depends on growFactor being 2. *)</span>
<span class="line">   80 </span>                      <span class="kwa">Word</span>.orb <span class="sym">(</span><span class="num">0w1</span><span class="sym">,</span> <span class="kwa">Word</span>.<span class="sym">&lt;&lt; (!</span>mask<span class="sym">,</span> <span class="num">0w1</span><span class="sym">)))
</span><span class="line">   81 </span><span class="sym"></span>      <span class="kwa">else</span> <span class="sym">()
</span><span class="line">   82 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">   83 </span><span class="kwa">
</span><span class="line">   84 </span><span class="kwa">fun</span> peekGen <span class="sym">(</span>T <span class="sym">{</span>buckets <span class="sym">=</span> ref buckets<span class="sym">,</span> mask<span class="sym">,</span> ...<span class="sym">},</span> w<span class="sym">,</span> p<span class="sym">,</span> no<span class="sym">,</span> yes<span class="sym">) =
</span><span class="line">   85 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   86 </span><span class="kwa">      val</span> j <span class="sym">=</span> index <span class="sym">(</span>w<span class="sym">, !</span>mask<span class="sym">)
</span><span class="line">   87 </span><span class="sym"></span>      <span class="kwa">val</span> b <span class="sym">=</span> Array.sub <span class="sym">(</span>buckets<span class="sym">,</span> j<span class="sym">)
</span><span class="line">   88 </span><span class="sym"></span>   <span class="kwa">in case List</span>.find p b <span class="kwa">of
</span><span class="line">   89 </span><span class="kwa"></span>      NONE <span class="sym">=&gt;</span> no <span class="sym">(</span>j<span class="sym">,</span> b<span class="sym">)
</span><span class="line">   90 </span><span class="sym">    |</span> SOME a <span class="sym">=&gt;</span> yes a
<span class="line">   91 </span>   <span class="kwa">end
</span><span class="line">   92 </span><span class="kwa">
</span><span class="line">   93 </span><span class="kwa">fun</span> lookupOrInsert <span class="sym">(</span>table <span class="kwa">as</span> T <span class="sym">{</span>buckets<span class="sym">,</span> numItems<span class="sym">,</span> ...<span class="sym">},</span> w<span class="sym">,</span> p<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">   94 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   95 </span><span class="kwa">      fun</span> no <span class="sym">(</span>j<span class="sym">,</span> b<span class="sym">) =
</span><span class="line">   96 </span><span class="sym"></span>         <span class="kwa">let val</span> a <span class="sym">=</span> f <span class="sym">()
</span><span class="line">   97 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=</span> incr numItems
<span class="line">   98 </span>            <span class="kwa">val</span> _ <span class="sym">=</span> Array.update <span class="sym">(!</span>buckets<span class="sym">,</span> j<span class="sym">,</span> a <span class="sym">::</span> b<span class="sym">)
</span><span class="line">   99 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=</span> maybeGrow table
<span class="line">  100 </span>         <span class="kwa">in</span> a
<span class="line">  101 </span>         <span class="kwa">end
</span><span class="line">  102 </span><span class="kwa">   in</span> peekGen <span class="sym">(</span>table<span class="sym">,</span> w<span class="sym">,</span> p<span class="sym">,</span> no<span class="sym">,</span> <span class="kwa">fn</span> x <span class="sym">=&gt;</span> x<span class="sym">)
</span><span class="line">  103 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">  104 </span><span class="kwa">
</span><span class="line">  105 </span><span class="kwa">fun</span> foreach <span class="sym">(</span>T <span class="sym">{</span>buckets<span class="sym">,</span> ...<span class="sym">},</span> f<span class="sym">) =
</span><span class="line">  106 </span><span class="sym"></span>   Array.app <span class="sym">(</span><span class="kwa">fn</span> r <span class="sym">=&gt;</span> <span class="kwa">List</span>.app f r<span class="sym">) (!</span>buckets<span class="sym">)
</span><span class="line">  107 </span><span class="sym">
</span><span class="line">  108 </span><span class="sym"></span><span class="kwa">end
</span><span class="line">  109 </span><span class="kwa">
</span><span class="line">  110 </span><span class="kwa">structure</span> Buffer<span class="sym">:
</span><span class="line">  111 </span><span class="sym"></span>   <span class="kwa">sig
</span><span class="line">  112 </span><span class="kwa">      type</span> t
<span class="line">  113 </span>
<span class="line">  114 </span>      <span class="kwa">val</span> add<span class="sym">:</span> t <span class="sym">*</span> <span class="kwa">Word8</span>.<span class="kwb">word</span> <span class="sym">-&gt;</span> unit
<span class="line">  115 </span>      <span class="kwa">val</span> clear<span class="sym">:</span> t <span class="sym">-&gt;</span> unit
<span class="line">  116 </span>      <span class="kwa">val</span> contents<span class="sym">:</span> t <span class="sym">-&gt;</span> <span class="kwb">string
</span><span class="line">  117 </span><span class="kwb"></span>      <span class="kwa">val</span> new<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> t
<span class="line">  118 </span>   <span class="kwa">end</span> <span class="sym">=
</span><span class="line">  119 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">  120 </span><span class="kwa">      datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>elts<span class="sym">:</span> Word8Array.array ref<span class="sym">,
</span><span class="line">  121 </span><span class="sym"></span>                         size<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">}
</span><span class="line">  122 </span><span class="sym">
</span><span class="line">  123 </span><span class="sym"></span>      <span class="kwa">fun</span> contents <span class="sym">(</span>T <span class="sym">{</span>elts<span class="sym">,</span> size<span class="sym">,</span> ...<span class="sym">}) =
</span><span class="line">  124 </span><span class="sym"></span>         Byte.bytesToString <span class="sym">(</span>Word8Array.extract <span class="sym">(!</span>elts<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> SOME <span class="sym">(!</span>size<span class="sym">)))
</span><span class="line">  125 </span><span class="sym">
</span><span class="line">  126 </span><span class="sym"></span>      <span class="kwa">fun</span> clear <span class="sym">(</span>T <span class="sym">{</span>size<span class="sym">,</span> ...<span class="sym">}) =</span> size <span class="sym">:=</span> <span class="num">0
</span><span class="line">  127 </span><span class="num">
</span><span class="line">  128 </span><span class="num"></span>      <span class="kwa">fun</span> new <span class="sym">(</span>bufSize<span class="sym">) =
</span><span class="line">  129 </span><span class="sym"></span>         T <span class="sym">{</span>elts <span class="sym">=</span> ref <span class="sym">(</span>Word8Array.array <span class="sym">(</span>bufSize<span class="sym">,</span> <span class="num">0w0</span><span class="sym">)),
</span><span class="line">  130 </span><span class="sym"></span>            size <span class="sym">=</span> ref <span class="num">0</span><span class="sym">}
</span><span class="line">  131 </span><span class="sym">
</span><span class="line">  132 </span><span class="sym"></span>      <span class="kwa">fun</span> add <span class="sym">(</span>T <span class="sym">{</span>elts<span class="sym">,</span> size<span class="sym">},</span> x<span class="sym">) =
</span><span class="line">  133 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  134 </span><span class="kwa">            val</span> s <span class="sym">= !</span>size
<span class="line">  135 </span>            <span class="kwa">val</span> _ <span class="sym">=</span> size <span class="sym">:=</span> s <span class="sym">+</span> <span class="num">1
</span><span class="line">  136 </span><span class="num"></span>            <span class="kwa">val</span> a <span class="sym">= !</span>elts
<span class="line">  137 </span>            <span class="kwa">val</span> n <span class="sym">=</span> Word8Array.length a
<span class="line">  138 </span>         <span class="kwa">in
</span><span class="line">  139 </span><span class="kwa">            if</span> s <span class="sym">=</span> n
<span class="line">  140 </span>               <span class="kwa">then
</span><span class="line">  141 </span><span class="kwa">                  let
</span><span class="line">  142 </span><span class="kwa">                     val</span> a' <span class="sym">=
</span><span class="line">  143 </span><span class="sym"></span>                        Word8Array.tabulate
<span class="line">  144 </span>                        <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> n<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span><span class="line">  145 </span><span class="sym"></span>                         <span class="kwa">if</span> i <span class="sym">&lt;</span> n <span class="kwa">then</span> Word8Array.sub <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">)</span> <span class="kwa">else</span> <span class="num">0w0</span><span class="sym">)
</span><span class="line">  146 </span><span class="sym"></span>                     <span class="kwa">val</span> _ <span class="sym">=</span> elts <span class="sym">:=</span> a'
<span class="line">  147 </span>                     <span class="kwa">val</span> _ <span class="sym">=</span> Word8Array.update <span class="sym">(</span>a'<span class="sym">,</span> s<span class="sym">,</span> x<span class="sym">)
</span><span class="line">  148 </span><span class="sym"></span>                  <span class="kwa">in</span> <span class="sym">()
</span><span class="line">  149 </span><span class="sym"></span>                  <span class="kwa">end
</span><span class="line">  150 </span><span class="kwa">            else</span> Word8Array.update <span class="sym">(</span>a<span class="sym">,</span> s<span class="sym">,</span> x<span class="sym">)
</span><span class="line">  151 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  152 </span><span class="kwa">   end
</span><span class="line">  153 </span><span class="kwa">
</span><span class="line">  154 </span><span class="kwa">structure</span> Quicksort<span class="sym">:
</span><span class="line">  155 </span><span class="sym"></span>   <span class="kwa">sig
</span><span class="line">  156 </span><span class="kwa">      val</span> quicksort<span class="sym">:</span> 'a array <span class="sym">* (</span>'a <span class="sym">*</span> 'a <span class="sym">-&gt;</span> <span class="kwb">bool</span><span class="sym">) -&gt;</span> unit
<span class="line">  157 </span>   <span class="kwa">end</span> <span class="sym">=
</span><span class="line">  158 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">  159 </span><span class="kwa">      fun</span> assert <span class="sym">(</span>s<span class="sym">,</span> f<span class="sym">:</span> unit <span class="sym">-&gt;</span> <span class="kwb">bool</span><span class="sym">) =
</span><span class="line">  160 </span><span class="sym"></span>         <span class="kwa">if true orelse</span> f <span class="sym">()
</span><span class="line">  161 </span><span class="sym"></span>            <span class="kwa">then</span> <span class="sym">()
</span><span class="line">  162 </span><span class="sym"></span>         <span class="kwa">else raise</span> Fail <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;assert: &quot;</span><span class="sym">,</span> s<span class="sym">])
</span><span class="line">  163 </span><span class="sym">
</span><span class="line">  164 </span><span class="sym"></span>      <span class="kwa">fun</span> forall <span class="sym">(</span>low<span class="sym">,</span> high<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">  165 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  166 </span><span class="kwa">            fun</span> loop i <span class="sym">=</span> i <span class="sym">&gt;</span> high <span class="kwa">orelse</span> <span class="sym">(</span>f i <span class="kwa">andalso</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">  167 </span><span class="sym"></span>         <span class="kwa">in
</span><span class="line">  168 </span><span class="kwa"></span>            loop low
<span class="line">  169 </span>         <span class="kwa">end
</span><span class="line">  170 </span><span class="kwa">
</span><span class="line">  171 </span><span class="kwa">      fun</span> fold <span class="sym">(</span>l<span class="sym">,</span> u<span class="sym">,</span> state<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">  172 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  173 </span><span class="kwa">            fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> state<span class="sym">) =
</span><span class="line">  174 </span><span class="sym"></span>               <span class="kwa">if</span> i <span class="sym">&gt;</span> u
<span class="line">  175 </span>                  <span class="kwa">then</span> state
<span class="line">  176 </span>               <span class="kwa">else</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> f <span class="sym">(</span>i<span class="sym">,</span> state<span class="sym">))
</span><span class="line">  177 </span><span class="sym"></span>         <span class="kwa">in
</span><span class="line">  178 </span><span class="kwa"></span>            loop <span class="sym">(</span>l<span class="sym">,</span> state<span class="sym">)
</span><span class="line">  179 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  180 </span><span class="kwa">
</span><span class="line">  181 </span><span class="kwa"></span>      <span class="com">(* Check if entries in a[lo ... hi] are sorted. *)</span>
<span class="line">  182 </span>      <span class="kwa">fun</span> 'a isSorted <span class="sym">(</span>a<span class="sym">:</span> 'a array<span class="sym">,
</span><span class="line">  183 </span><span class="sym"></span>                       lo<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,
</span><span class="line">  184 </span><span class="sym"></span>                       hi<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,
</span><span class="line">  185 </span><span class="sym"></span>                       <span class="kwa">op</span> <span class="sym">&lt;= :</span> 'a <span class="sym">*</span> 'a <span class="sym">-&gt;</span> <span class="kwb">bool</span><span class="sym">) =
</span><span class="line">  186 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  187 </span><span class="kwa">            fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> x<span class="sym">) =
</span><span class="line">  188 </span><span class="sym"></span>               i <span class="sym">&gt;</span> hi
<span class="line">  189 </span>               <span class="kwa">orelse let
</span><span class="line">  190 </span><span class="kwa">                         val</span> y <span class="sym">=</span> sub <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  191 </span><span class="sym"></span>                      <span class="kwa">in
</span><span class="line">  192 </span><span class="kwa"></span>                         x <span class="sym">&lt;=</span> y <span class="kwa">andalso</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> y<span class="sym">)
</span><span class="line">  193 </span><span class="sym"></span>                      <span class="kwa">end
</span><span class="line">  194 </span><span class="kwa">         in
</span><span class="line">  195 </span><span class="kwa"></span>            lo <span class="sym">&gt;=</span> hi <span class="kwa">orelse</span> loop <span class="sym">(</span>lo <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> sub <span class="sym">(</span>a<span class="sym">,</span> lo<span class="sym">))
</span><span class="line">  196 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  197 </span><span class="kwa">
</span><span class="line">  198 </span><span class="kwa"></span>      <span class="com">(* From page 284 of Numerical Recipes in C. *)</span>
<span class="line">  199 </span>      <span class="kwa">local
</span><span class="line">  200 </span><span class="kwa">         open Word
</span><span class="line">  201 </span><span class="kwa">         val</span> seed <span class="sym">=</span> ref <span class="num">0w13
</span><span class="line">  202 </span><span class="num"></span>      <span class="kwa">in
</span><span class="line">  203 </span><span class="kwa">         fun</span> rand <span class="sym">() =
</span><span class="line">  204 </span><span class="sym"></span>            <span class="kwa">let
</span><span class="line">  205 </span><span class="kwa">               val</span> res <span class="sym">=</span> <span class="num">0w1664525</span> <span class="sym">* !</span>seed <span class="sym">+</span> <span class="num">0w1013904223
</span><span class="line">  206 </span><span class="num"></span>               <span class="kwa">val</span> _ <span class="sym">=</span> seed <span class="sym">:=</span> res
<span class="line">  207 </span>            <span class="kwa">in
</span><span class="line">  208 </span><span class="kwa"></span>               toIntX res
<span class="line">  209 </span>            <span class="kwa">end
</span><span class="line">  210 </span><span class="kwa">      end
</span><span class="line">  211 </span><span class="kwa">
</span><span class="line">  212 </span><span class="kwa">      fun</span> randInt <span class="sym">(</span>lo<span class="sym">,</span> hi<span class="sym">) =</span> lo <span class="sym">+</span> <span class="kwa">Int</span>.mod <span class="sym">(</span>rand<span class="sym">(),</span> hi <span class="sym">-</span> lo <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">  213 </span><span class="sym">
</span><span class="line">  214 </span><span class="sym"></span>      <span class="com">(* insertion sort based on page 108 of Programming Pearls, by Bentley. *)</span>
<span class="line">  215 </span>      <span class="kwa">fun</span> insertionSort <span class="sym">(</span>a<span class="sym">:</span> 'a array<span class="sym">,</span> <span class="kwa">op</span> <span class="sym">&lt;= :</span> 'a <span class="sym">*</span> 'a <span class="sym">-&gt;</span> <span class="kwb">bool</span><span class="sym">):</span> unit <span class="sym">=
</span><span class="line">  216 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  217 </span><span class="kwa">            fun</span> x i <span class="sym">=</span> sub <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  218 </span><span class="sym"></span>         <span class="kwa">in
</span><span class="line">  219 </span><span class="kwa"></span>            for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> Array.length a <span class="num">- 1</span><span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span><span class="line">  220 </span><span class="sym"></span>                 <span class="kwa">let
</span><span class="line">  221 </span><span class="kwa">                    val</span> _ <span class="sym">=
</span><span class="line">  222 </span><span class="sym"></span>                       assert <span class="sym">(</span><span class="str">&quot;insertionSort1&quot;</span><span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">() =&gt;
</span><span class="line">  223 </span><span class="sym"></span>                               isSorted <span class="sym">(</span>a<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> i <span class="num">- 1</span><span class="sym">,</span> <span class="kwa">op</span> <span class="sym">&lt;=))
</span><span class="line">  224 </span><span class="sym"></span>                    <span class="kwa">val</span> t <span class="sym">=</span> x i
<span class="line">  225 </span>                    <span class="kwa">fun</span> sift <span class="sym">(</span>j<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) =
</span><span class="line">  226 </span><span class="sym">                       (</span>assert <span class="sym">(</span><span class="str">&quot;insertionSort2&quot;</span><span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">() =&gt;
</span><span class="line">  227 </span><span class="sym"></span>                                isSorted <span class="sym">(</span>a<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> j <span class="num">- 1</span><span class="sym">,</span> <span class="kwa">op</span> <span class="sym">&lt;=)
</span><span class="line">  228 </span><span class="sym"></span>                                <span class="kwa">andalso</span> isSorted <span class="sym">(</span>a<span class="sym">,</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> i<span class="sym">,</span> <span class="kwa">op</span> <span class="sym">&lt;=)
</span><span class="line">  229 </span><span class="sym"></span>                                <span class="kwa">andalso</span> forall <span class="sym">(</span>j <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> i<span class="sym">,</span> <span class="kwa">fn</span> k <span class="sym">=&gt;</span> t <span class="sym">&lt;=</span> x k<span class="sym">))
</span><span class="line">  230 </span><span class="sym">                        ;</span> <span class="kwa">if</span> j <span class="sym">&gt;</span> <span class="num">0
</span><span class="line">  231 </span><span class="num"></span>                             <span class="kwa">then
</span><span class="line">  232 </span><span class="kwa">                                let
</span><span class="line">  233 </span><span class="kwa">                                   val</span> j' <span class="sym">=</span> j <span class="num">- 1
</span><span class="line">  234 </span><span class="num"></span>                                   <span class="kwa">val</span> z <span class="sym">=</span> x j'
<span class="line">  235 </span>                                <span class="kwa">in if</span> t <span class="sym">&lt;=</span> z
<span class="line">  236 </span>                                      <span class="kwa">then</span> <span class="sym">(</span>update <span class="sym">(</span>a<span class="sym">,</span> j<span class="sym">,</span> z<span class="sym">);
</span><span class="line">  237 </span><span class="sym"></span>                                            sift j'<span class="sym">)
</span><span class="line">  238 </span><span class="sym"></span>                                   <span class="kwa">else</span> j
<span class="line">  239 </span>                                <span class="kwa">end
</span><span class="line">  240 </span><span class="kwa">                          else</span> j<span class="sym">)
</span><span class="line">  241 </span><span class="sym"></span>                    <span class="kwa">val</span> _ <span class="sym">=</span> update <span class="sym">(</span>a<span class="sym">,</span> sift i<span class="sym">,</span> t<span class="sym">)
</span><span class="line">  242 </span><span class="sym"></span>                 <span class="kwa">in</span> <span class="sym">()
</span><span class="line">  243 </span><span class="sym"></span>                 <span class="kwa">end</span><span class="sym">)
</span><span class="line">  244 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  245 </span><span class="kwa">
</span><span class="line">  246 </span><span class="kwa"></span>      <span class="com">(* quicksort based on page 112 of Programming Pearls, by Bentley. *)</span>
<span class="line">  247 </span>      <span class="kwa">fun</span> 'a quicksort <span class="sym">(</span>a<span class="sym">:</span> 'a array<span class="sym">,</span> <span class="kwa">op</span> <span class="sym">&lt;= :</span> 'a <span class="sym">*</span> 'a <span class="sym">-&gt;</span> <span class="kwb">bool</span><span class="sym">):</span> unit <span class="sym">=
</span><span class="line">  248 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  249 </span><span class="kwa">            fun</span> x i <span class="sym">=</span> Array.sub <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  250 </span><span class="sym"></span>            <span class="kwa">fun</span> swap <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =
</span><span class="line">  251 </span><span class="sym"></span>               <span class="kwa">let
</span><span class="line">  252 </span><span class="kwa">                  val</span> t <span class="sym">=</span> x i
<span class="line">  253 </span>                  <span class="kwa">val</span> _ <span class="sym">=</span> update <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> x j<span class="sym">)
</span><span class="line">  254 </span><span class="sym"></span>                  <span class="kwa">val</span> _ <span class="sym">=</span> update <span class="sym">(</span>a<span class="sym">,</span> j<span class="sym">,</span> t<span class="sym">)
</span><span class="line">  255 </span><span class="sym"></span>               <span class="kwa">in</span> <span class="sym">()
</span><span class="line">  256 </span><span class="sym"></span>               <span class="kwa">end
</span><span class="line">  257 </span><span class="kwa">            val</span> cutoff <span class="sym">=</span> <span class="num">20
</span><span class="line">  258 </span><span class="num"></span>            <span class="kwa">fun</span> qsort <span class="sym">(</span>l<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> u<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> unit <span class="sym">=
</span><span class="line">  259 </span><span class="sym"></span>               <span class="kwa">if</span> u <span class="sym">-</span> l <span class="sym">&gt;</span> cutoff
<span class="line">  260 </span>                  <span class="kwa">then
</span><span class="line">  261 </span><span class="kwa">                     let
</span><span class="line">  262 </span><span class="kwa">                        val</span> _ <span class="sym">=</span> swap <span class="sym">(</span>l<span class="sym">,</span> randInt <span class="sym">(</span>l<span class="sym">,</span> u<span class="sym">))
</span><span class="line">  263 </span><span class="sym"></span>                        <span class="kwa">val</span> t <span class="sym">=</span> x l
<span class="line">  264 </span>                        <span class="kwa">val</span> m <span class="sym">=
</span><span class="line">  265 </span><span class="sym"></span>                           fold
<span class="line">  266 </span>                           <span class="sym">(</span>l <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> u<span class="sym">,</span> l<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>i<span class="sym">,</span> m<span class="sym">) =&gt;
</span><span class="line">  267 </span><span class="sym">                            (</span>assert
<span class="line">  268 </span>                             <span class="sym">(</span><span class="str">&quot;qsort&quot;</span><span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">() =&gt;
</span><span class="line">  269 </span><span class="sym"></span>                              forall <span class="sym">(</span>l <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> m<span class="sym">,</span> <span class="kwa">fn</span> k <span class="sym">=&gt;</span> x k <span class="sym">&lt;=</span> t<span class="sym">)
</span><span class="line">  270 </span><span class="sym"></span>                              <span class="kwa">andalso</span> forall <span class="sym">(</span>m <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> i <span class="num">- 1</span><span class="sym">,</span> <span class="kwa">fn</span> k <span class="sym">=&gt;</span> not <span class="sym">(</span>x k <span class="sym">&lt;=</span> t<span class="sym">)))
</span><span class="line">  271 </span><span class="sym">                             ;</span> <span class="kwa">if</span> x i <span class="sym">&lt;=</span> t
<span class="line">  272 </span>                                  <span class="kwa">then</span> <span class="sym">(</span>swap <span class="sym">(</span>m <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> i<span class="sym">)
</span><span class="line">  273 </span><span class="sym">                                        ;</span> m <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">  274 </span><span class="sym"></span>                               <span class="kwa">else</span> m<span class="sym">))
</span><span class="line">  275 </span><span class="sym"></span>                        <span class="kwa">val</span> _ <span class="sym">=</span> swap <span class="sym">(</span>l<span class="sym">,</span> m<span class="sym">)
</span><span class="line">  276 </span><span class="sym"></span>                        <span class="kwa">val</span> _ <span class="sym">=</span> qsort <span class="sym">(</span>l<span class="sym">,</span> m <span class="num">- 1</span><span class="sym">)
</span><span class="line">  277 </span><span class="sym"></span>                        <span class="kwa">val</span> _ <span class="sym">=</span> qsort <span class="sym">(</span>m <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> u<span class="sym">)
</span><span class="line">  278 </span><span class="sym"></span>                     <span class="kwa">in</span> <span class="sym">()
</span><span class="line">  279 </span><span class="sym"></span>                     <span class="kwa">end
</span><span class="line">  280 </span><span class="kwa">               else</span> <span class="sym">()
</span><span class="line">  281 </span><span class="sym"></span>            <span class="kwa">val</span> max <span class="sym">=</span> Array.length a <span class="num">- 1
</span><span class="line">  282 </span><span class="num"></span>            <span class="kwa">val</span> _ <span class="sym">=</span> qsort <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> max<span class="sym">)
</span><span class="line">  283 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=</span> insertionSort <span class="sym">(</span>a<span class="sym">,</span> <span class="kwa">op</span> <span class="sym">&lt;=)
</span><span class="line">  284 </span><span class="sym"></span>         <span class="kwa">in
</span><span class="line">  285 </span><span class="kwa"></span>            <span class="sym">()
</span><span class="line">  286 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  287 </span><span class="kwa">   end
</span><span class="line">  288 </span><span class="kwa">
</span><span class="line">  289 </span><span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
</span><span class="line">  290 </span><span class="kwa">    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt; {}
</span><span class="line">  291 </span><span class="sym"></span><span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
</span><span class="line">  292 </span><span class="kwa">
</span><span class="line">  293 </span><span class="kwa"></span><span class="com">(* This hash function is taken from pages 56-57 of
</span><span class="line">  294 </span><span class="com"> * The Practice of Programming by Kernighan and Pike.
</span><span class="line">  295 </span><span class="com"> *)</span>
<span class="line">  296 </span><span class="kwa">fun</span> hash <span class="sym">(</span>s<span class="sym">:</span> <span class="kwb">string</span><span class="sym">):</span> <span class="kwb">word</span> <span class="sym">=
</span><span class="line">  297 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">  298 </span><span class="kwa">      val</span> n <span class="sym">=</span> <span class="kwa">String</span>.size s
<span class="line">  299 </span>      <span class="kwa">fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> w<span class="sym">) =
</span><span class="line">  300 </span><span class="sym"></span>         <span class="kwa">if</span> i <span class="sym">=</span> n
<span class="line">  301 </span>            <span class="kwa">then</span> w
<span class="line">  302 </span>         <span class="kwa">else Word</span>.fromInt <span class="sym">(</span><span class="kwa">Char</span>.ord <span class="sym">(</span><span class="kwa">String</span>.sub <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">))) +</span> <span class="kwa">Word</span>.<span class="sym">* (</span>w<span class="sym">,</span> <span class="num">0w31</span><span class="sym">)
</span><span class="line">  303 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">  304 </span><span class="kwa"></span>      loop <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0w0</span><span class="sym">)
</span><span class="line">  305 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">  306 </span><span class="kwa">
</span><span class="line">  307 </span><span class="kwa">fun</span> hash <span class="sym">(</span>s<span class="sym">:</span> <span class="kwb">string</span><span class="sym">):</span> <span class="kwb">word</span> <span class="sym">=
</span><span class="line">  308 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">  309 </span><span class="kwa">      val</span> n <span class="sym">=</span> <span class="kwa">String</span>.size s
<span class="line">  310 </span>      <span class="kwa">fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> w<span class="sym">) =
</span><span class="line">  311 </span><span class="sym"></span>         <span class="kwa">if</span> i <span class="sym">=</span> n
<span class="line">  312 </span>            <span class="kwa">then</span> w
<span class="line">  313 </span>         <span class="kwa">else</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,
</span><span class="line">  314 </span><span class="sym"></span>                    <span class="kwa">Word</span>.fromInt <span class="sym">(</span><span class="kwa">Char</span>.ord <span class="sym">(</span><span class="kwa">String</span>.sub <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">)))
</span><span class="line">  315 </span><span class="sym">                       +</span> <span class="kwa">Word</span>.<span class="sym">* (</span>w<span class="sym">,</span> <span class="num">0w31</span><span class="sym">))
</span><span class="line">  316 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">  317 </span><span class="kwa"></span>      loop <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0w0</span><span class="sym">)
</span><span class="line">  318 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">  319 </span><span class="kwa">
</span><span class="line">  320 </span><span class="kwa"></span><span class="com">(* Based on wordfreq.ocaml. *)</span>
<span class="line">  321 </span>
<span class="line">  322 </span><span class="kwa">val</span> max <span class="sym">=</span> <span class="num">4096
</span><span class="line">  323 </span><span class="num"></span><span class="kwa">val</span> buf <span class="sym">=</span> Word8Array.array <span class="sym">(</span>max<span class="sym">,</span> <span class="num">0w0</span><span class="sym">)
</span><span class="line">  324 </span><span class="sym"></span><span class="kwa">val</span> count<span class="sym">: {</span>hash<span class="sym">:</span> <span class="kwb">word</span><span class="sym">,
</span><span class="line">  325 </span><span class="sym"></span>            <span class="kwb">word</span><span class="sym">:</span> <span class="kwb">string</span><span class="sym">,
</span><span class="line">  326 </span><span class="sym"></span>            count<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">}</span> HashSet.t <span class="sym">=</span> HashSet.new <span class="sym">{</span>hash <span class="sym">=</span> #hash<span class="sym">}
</span><span class="line">  327 </span><span class="sym"></span><span class="kwa">val</span> wbuf <span class="sym">=</span> Buffer.new <span class="num">64
</span><span class="line">  328 </span><span class="num">
</span><span class="line">  329 </span><span class="num"></span><span class="kwa">val</span> c2b <span class="sym">=</span> Byte.charToByte
<span class="line">  330 </span><span class="kwa">fun</span> scan_words <span class="sym">(</span>i<span class="sym">,</span> n<span class="sym">,</span> inword<span class="sym">) =
</span><span class="line">  331 </span><span class="sym"></span>  <span class="kwa">if</span> i <span class="sym">&lt;</span> n
<span class="line">  332 </span>     <span class="kwa">then
</span><span class="line">  333 </span><span class="kwa">        let
</span><span class="line">  334 </span><span class="kwa">           val</span> c <span class="sym">=</span> Word8Array.sub <span class="sym">(</span>buf<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  335 </span><span class="sym"></span>        <span class="kwa">in
</span><span class="line">  336 </span><span class="kwa">           if</span> c2b #<span class="str">&quot;a&quot;</span> <span class="sym">&lt;=</span> c <span class="kwa">andalso</span> c <span class="sym">&lt;=</span> c2b #<span class="str">&quot;z&quot;</span>
<span class="line">  337 </span>              <span class="kwa">then</span> <span class="sym">(</span>Buffer.add <span class="sym">(</span>wbuf<span class="sym">,</span> c<span class="sym">);
</span><span class="line">  338 </span><span class="sym"></span>                    scan_words <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">true</span><span class="sym">))
</span><span class="line">  339 </span><span class="sym"></span>           <span class="kwa">else
</span><span class="line">  340 </span><span class="kwa">              if</span> c2b #<span class="str">&quot;A&quot;</span> <span class="sym">&lt;=</span> c <span class="kwa">andalso</span> c <span class="sym">&lt;=</span> c2b #<span class="str">&quot;Z&quot;</span>
<span class="line">  341 </span>                 <span class="kwa">then
</span><span class="line">  342 </span><span class="kwa"></span>                    <span class="sym">(</span>Buffer.add <span class="sym">(</span>wbuf<span class="sym">,</span> c <span class="sym">+</span> <span class="num">0w32</span><span class="sym">);
</span><span class="line">  343 </span><span class="sym"></span>                     scan_words <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">true</span><span class="sym">))
</span><span class="line">  344 </span><span class="sym"></span>              <span class="kwa">else
</span><span class="line">  345 </span><span class="kwa">                 if</span> inword
<span class="line">  346 </span>                    <span class="kwa">then
</span><span class="line">  347 </span><span class="kwa">                       let
</span><span class="line">  348 </span><span class="kwa">                          val</span> w <span class="sym">=</span> Buffer.contents wbuf
<span class="line">  349 </span>                          <span class="kwa">val</span> h <span class="sym">=</span> hash w
<span class="line">  350 </span>                       <span class="kwa">in
</span><span class="line">  351 </span><span class="kwa"></span>                          incr <span class="sym">(</span>#count
<span class="line">  352 </span>                                <span class="sym">(</span>HashSet.lookupOrInsert
<span class="line">  353 </span>                                 <span class="sym">(</span>count<span class="sym">,</span> h<span class="sym">,
</span><span class="line">  354 </span><span class="sym"></span>                                  <span class="kwa">fn</span> <span class="sym">{</span>hash<span class="sym">,</span> <span class="kwb">word</span><span class="sym">,</span> ...<span class="sym">} =&gt;
</span><span class="line">  355 </span><span class="sym"></span>                                  hash <span class="sym">=</span> h <span class="kwa">andalso</span> <span class="kwb">word</span> <span class="sym">=</span> w<span class="sym">,
</span><span class="line">  356 </span><span class="sym"></span>                                  <span class="kwa">fn</span> <span class="sym">() =&gt; {</span>hash <span class="sym">=</span> h<span class="sym">,</span> <span class="kwb">word</span> <span class="sym">=</span> w<span class="sym">,</span> count <span class="sym">=</span> ref <span class="num">0</span><span class="sym">})));
</span><span class="line">  357 </span><span class="sym"></span>                          Buffer.clear wbuf<span class="sym">;
</span><span class="line">  358 </span><span class="sym"></span>                          scan_words <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  359 </span><span class="sym"></span>                       <span class="kwa">end
</span><span class="line">  360 </span><span class="kwa">                 else</span> scan_words <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  361 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">  362 </span><span class="kwa">  else
</span><span class="line">  363 </span><span class="kwa">     let
</span><span class="line">  364 </span><span class="kwa">        val</span> nread <span class="sym">=
</span><span class="line">  365 </span><span class="sym"></span>           Posix.IO.readArr <span class="sym">(</span>Posix.FileSys.stdin<span class="sym">,
</span><span class="line">  366 </span><span class="sym">                             {</span>buf <span class="sym">=</span> buf<span class="sym">,</span> i <span class="sym">=</span>  <span class="num">0</span><span class="sym">,</span> sz <span class="sym">=</span> NONE<span class="sym">})
</span><span class="line">  367 </span><span class="sym"></span>     <span class="kwa">in
</span><span class="line">  368 </span><span class="kwa">        if</span> nread <span class="sym">=</span> <span class="num">0
</span><span class="line">  369 </span><span class="num"></span>           <span class="kwa">then</span> <span class="sym">()
</span><span class="line">  370 </span><span class="sym"></span>        <span class="kwa">else</span> scan_words <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> nread<span class="sym">,</span> inword<span class="sym">)
</span><span class="line">  371 </span><span class="sym"></span>     <span class="kwa">end
</span><span class="line">  372 </span><span class="kwa">
</span><span class="line">  373 </span><span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">)
</span><span class="line">  374 </span><span class="sym">
</span><span class="line">  375 </span><span class="sym"></span><span class="kwa">fun</span> rightJustify <span class="sym">(</span>s<span class="sym">:</span> <span class="kwb">string</span><span class="sym">,</span> width<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) =
</span><span class="line">  376 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">  377 </span><span class="kwa">      val</span> n <span class="sym">=</span> <span class="kwa">String</span>.size s
<span class="line">  378 </span>   <span class="kwa">in</span> concat <span class="sym">[</span>CharVector.tabulate <span class="sym">(</span>width <span class="sym">-</span> n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> #<span class="str">&quot; &quot;</span><span class="sym">),</span> s<span class="sym">]
</span><span class="line">  379 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">  380 </span><span class="kwa">
</span><span class="line">  381 </span><span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =
</span><span class="line">  382 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">  383 </span><span class="kwa">        val</span> _ <span class="sym">=</span> scan_words <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  384 </span><span class="sym"></span>        <span class="kwa">val</span> a <span class="sym">=</span> Array.array <span class="sym">(</span>HashSet.size count<span class="sym">, (</span><span class="num">0</span><span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">))
</span><span class="line">  385 </span><span class="sym"></span>        <span class="kwa">val</span> i <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  386 </span><span class="num"></span>        <span class="kwa">val</span> _ <span class="sym">=</span> HashSet.foreach <span class="sym">(</span>count<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">{</span><span class="kwb">word</span><span class="sym">,</span> count<span class="sym">,</span> ...<span class="sym">} =&gt;
</span><span class="line">  387 </span><span class="sym">                         (</span>Array.update <span class="sym">(</span>a<span class="sym">, !</span>i<span class="sym">, (!</span>count<span class="sym">,</span> <span class="kwb">word</span><span class="sym">));</span> incr i<span class="sym">))
</span><span class="line">  388 </span><span class="sym"></span>        <span class="kwa">val</span> _ <span class="sym">=</span> Quicksort.quicksort <span class="sym">(</span>a<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">((</span>c<span class="sym">,</span> w<span class="sym">), (</span>c'<span class="sym">,</span> w'<span class="sym">)) =&gt;
</span><span class="line">  389 </span><span class="sym"></span>                             c <span class="sym">&gt;</span> c' <span class="kwa">orelse</span> c <span class="sym">=</span> c' <span class="kwa">andalso</span> w <span class="sym">&gt;=</span> w'<span class="sym">)
</span><span class="line">  390 </span><span class="sym"></span>        <span class="kwa">val</span> _ <span class="sym">=</span> Array.app <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">(</span>c<span class="sym">,</span> w<span class="sym">) =&gt;
</span><span class="line">  391 </span><span class="sym"></span>                   printl <span class="sym">[</span>rightJustify <span class="sym">(</span><span class="kwa">Int</span>.toString c<span class="sym">,</span> <span class="num">7</span><span class="sym">),</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> w<span class="sym">])</span> a
<span class="line">  392 </span>   <span class="kwa">in
</span><span class="line">  393 </span><span class="kwa"></span>      PolyML.quit<span class="sym">()
</span><span class="line">  394 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">  395 </span><span class="kwa">end
</span><span class="line">  396 </span><span class="kwa">
</span><span class="line">  397 </span><span class="kwa">val</span> _ <span class="sym">=</span> PolyML.print_depth <span class="num">0</span><span class="sym">;
</span><span class="line">  398 </span><span class="sym"></span><span class="kwa">val</span> _ <span class="sym">=</span> PolyML.error_depth <span class="num">0</span><span class="sym">;
</span><span class="line">  399 </span><span class="sym"></span><span class="kwa">val</span> _ <span class="sym">=</span> PolyML.onEntry<span class="sym">(</span><span class="kwa">fn</span><span class="sym">() =&gt;</span> Test.main<span class="sym">(</span><span class="str">&quot;wordfreq&quot;</span><span class="sym">,</span> CommandLine.arguments<span class="sym">()));
</span><span class="line">  400 </span><span class="sym"></span><span class="kwa">val</span> _ <span class="sym">=</span> PolyML.commit<span class="sym">();
</span><span class="line">  401 </span><span class="sym"></span>
