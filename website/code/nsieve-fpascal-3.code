<span class="com">{ The Computer Language Shootout</span>
<span class="com">  http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">  contributed by Joost van der Sluis</span>
<span class="com">}</span>

<span class="kwa">program</span> nsieve<span class="sym">;</span>

<span class="com">{$mode fpc}</span><span class="com">{$I-}</span>

<span class="kwa">var</span>
  n <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>

<span class="kwa">procedure</span> <span class="kwd">primes</span><span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">);</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">var</span>
  flags<span class="sym">:</span> PBoolean<span class="sym">;</span>
  size<span class="sym">,</span>i<span class="sym">,</span>j<span class="sym">,</span>count <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
  size <span class="sym">:=</span> <span class="num">10000</span> <span class="kwa">shl</span> n<span class="sym">;</span>
  flags <span class="sym">:=</span> <span class="kwd">getmem</span><span class="sym">(</span>size<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
  <span class="kwd">fillchar</span><span class="sym">(</span>flags^<span class="sym">,</span><span class="kwd">memsize</span><span class="sym">(</span>flags<span class="sym">),</span><span class="kwb">true</span><span class="sym">);</span>
  count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">2</span> <span class="kwa">to</span> size <span class="kwa">do</span>
    <span class="kwa">if</span> flags<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">then</span>
    <span class="kwa">begin</span>
      <span class="kwd">inc</span><span class="sym">(</span>count<span class="sym">);</span>
      j <span class="sym">:=</span> i <span class="sym">+</span> i<span class="sym">;</span>
      <span class="kwa">while</span> j <span class="sym">&lt;=</span> size <span class="kwa">do begin</span>
        flags<span class="sym">[</span>j<span class="sym">] :=</span> <span class="kwb">false</span><span class="sym">;</span>
        <span class="kwd">inc</span><span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">);</span>
      <span class="kwa">end</span><span class="sym">;</span>
    <span class="kwa">end</span><span class="sym">;</span>
  <span class="kwd">writeln</span><span class="sym">(</span><span class="str">'Primes up to'</span><span class="sym">,</span> size<span class="sym">:</span><span class="num">9</span><span class="sym">,</span> count<span class="sym">:</span><span class="num">9</span><span class="sym">);</span>
  <span class="kwd">freemem</span><span class="sym">(</span>flags<span class="sym">);</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">begin</span>
  <span class="kwd">val</span><span class="sym">(</span><span class="kwd">ParamStr</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span> n<span class="sym">);</span>
  <span class="kwd">primes</span><span class="sym">(</span>n<span class="sym">);</span>
  <span class="kwd">primes</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
  <span class="kwd">primes</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">);</span>
<span class="kwa">end</span>.
