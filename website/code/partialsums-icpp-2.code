<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// contributed by Paul Kitchin</span>

<span class="dir">#include &lt;cmath&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;sstream&gt;</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">* *</span> argv<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">!=</span> <span class="num">2</span><span class="sym">)</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;Usage: &quot;</span> <span class="sym">&lt;&lt;</span> argv<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
      <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
   std<span class="sym">::</span><span class="kwb">size_t</span> n<span class="sym">;</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>istringstream <span class="kwd">convertor</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
      <span class="kwa">if</span> <span class="sym">(!(</span>convertor <span class="sym">&gt;&gt;</span> n<span class="sym">) || !</span>convertor<span class="sym">.</span><span class="kwd">eof</span><span class="sym">())</span>
      <span class="sym">{</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;Usage: &quot;</span> <span class="sym">&lt;&lt;</span> argv<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">n must be an integer</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="sym">++</span>n<span class="sym">;</span>
   <span class="kwb">double</span> two_thirds_to_the_k <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
   <span class="kwb">double</span> one_over_k_squared_plus_k <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
   <span class="kwb">double</span> one_over_root_k <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
   <span class="kwb">double</span> harmonic <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
   <span class="kwb">double</span> alternating_harmonic <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
   <span class="kwb">double</span> gregory <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
   <span class="kwb">double</span> alternating_value <span class="sym">=</span> <span class="num">1.0</span><span class="sym">;</span>
   <span class="kwb">int</span> int_value <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">double</span> value <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> value <span class="sym">&lt;</span> n<span class="sym">; ++</span>value<span class="sym">,</span> alternating_value <span class="sym">= -</span>alternating_value<span class="sym">, ++</span>int_value<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">double</span> one_over_value <span class="sym">=</span> <span class="num">1.0</span> <span class="sym">/</span> value<span class="sym">;</span>
      two_thirds_to_the_k <span class="sym">+=</span> std<span class="sym">::</span><span class="kwd">pow</span><span class="sym">(</span><span class="num">2.0</span> <span class="sym">/</span> <span class="num">3.0</span><span class="sym">,</span> int_value<span class="sym">);</span>
      one_over_root_k <span class="sym">+=</span> <span class="num">1.0</span> <span class="sym">/</span> std<span class="sym">::</span><span class="kwd">sqrt</span><span class="sym">(</span>value<span class="sym">);</span>
      one_over_k_squared_plus_k <span class="sym">+=</span> <span class="num">1.0</span> <span class="sym">/ (</span>value <span class="sym">* (</span>value <span class="sym">+</span> <span class="num">1.0</span><span class="sym">));</span>
      harmonic <span class="sym">+=</span> <span class="num">1.0</span> <span class="sym">/</span> value<span class="sym">;</span>
      alternating_harmonic <span class="sym">+=</span> alternating_value <span class="sym">*</span> one_over_value<span class="sym">;</span>
      gregory <span class="sym">+=</span> alternating_value <span class="sym">/ (</span><span class="num">2.0</span> <span class="sym">*</span> value <span class="sym">-</span> <span class="num">1.0</span><span class="sym">);</span>
   <span class="sym">}</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setprecision</span><span class="sym">(</span><span class="num">9</span><span class="sym">) &lt;&lt;</span> std<span class="sym">::</span>fixed<span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> two_thirds_to_the_k <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">(2/3)^k</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> one_over_root_k <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">k^-0.5</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> one_over_k_squared_plus_k <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">1/k(k+1)</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
   <span class="kwb">double</span> flint_hills <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
   <span class="kwb">double</span> cookson_hills <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
   <span class="kwb">double</span> rieman_zeta <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">double</span> value <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> value <span class="sym">&lt;</span> n<span class="sym">; ++</span>value<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">double</span> value_squared <span class="sym">=</span> value <span class="sym">*</span> value<span class="sym">;</span>
      <span class="kwb">double</span> value_cubed <span class="sym">=</span> value_squared <span class="sym">*</span> value<span class="sym">;</span>
      <span class="kwb">double</span> sin_value <span class="sym">=</span> std<span class="sym">::</span><span class="kwd">sin</span><span class="sym">(</span>value<span class="sym">);</span>
      <span class="kwb">double</span> cos_value <span class="sym">=</span> std<span class="sym">::</span><span class="kwd">cos</span><span class="sym">(</span>value<span class="sym">);</span>
      flint_hills <span class="sym">+=</span> <span class="num">1.0</span> <span class="sym">/ (</span>value_cubed <span class="sym">*</span> sin_value <span class="sym">*</span> sin_value<span class="sym">);</span>
      cookson_hills <span class="sym">+=</span> <span class="num">1.0</span> <span class="sym">/ (</span>value_cubed <span class="sym">*</span> cos_value <span class="sym">*</span> cos_value<span class="sym">);</span>
      rieman_zeta <span class="sym">+=</span> <span class="num">1.0</span> <span class="sym">/</span> value_squared<span class="sym">;</span>
   <span class="sym">}</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> flint_hills <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">Flint Hills</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> cookson_hills <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">Cookson Hills</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> harmonic <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">Harmonic</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> rieman_zeta <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">Riemann Zeta</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> alternating_harmonic <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">Alternating Harmonic</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> gregory <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">Gregory</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
<span class="sym">}</span>
