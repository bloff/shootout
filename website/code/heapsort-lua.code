#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>lua
<span class="slc">-- $Id: heapsort-lua.code,v 1.8 2006-09-20 05:51:33 bfulgham Exp $</span>
<span class="slc">-- http://shootout.alioth.debian.org</span>
<span class="slc">-- contributed by Roberto Ierusalimschy</span>

<span class="kwa">local</span> IM <span class="sym">=</span> <span class="num">139968</span>
<span class="kwa">local</span> IA <span class="sym">=</span>   <span class="num">3877</span>
<span class="kwa">local</span> IC <span class="sym">=</span>  <span class="num">29573</span>

<span class="kwa">local</span> LAST <span class="sym">=</span> <span class="num">42</span>
<span class="kwa">function</span> gen_random<span class="sym">(</span><span class="kwa">max</span><span class="sym">)</span>
    LAST <span class="sym">=</span> math.<span class="kwa">mod</span><span class="sym">((</span>LAST <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">),</span> IM<span class="sym">)</span>
    <span class="kwa">return</span><span class="sym">( (</span><span class="kwa">max</span> <span class="sym">*</span> LAST<span class="sym">) /</span> IM <span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">function</span> heapsort<span class="sym">(</span>n<span class="sym">,</span> ra<span class="sym">)</span>
    <span class="kwa">local</span> j<span class="sym">,</span> i<span class="sym">,</span> rra
    <span class="kwa">local</span> l <span class="sym">=</span> math.<span class="kwa">floor</span><span class="sym">(</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">) +</span> <span class="num">1</span>
    <span class="kwa">local</span> ir <span class="sym">=</span> n<span class="sym">;</span>
    <span class="kwa">while</span> <span class="num">1</span> <span class="kwa">do</span>
	<span class="kwa">if</span> l <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span>
	    l <span class="sym">=</span> l <span class="sym">-</span> <span class="num">1</span>
	    rra <span class="sym">=</span> ra<span class="sym">[</span>l<span class="sym">]</span>
	<span class="kwa">else</span>
	    rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">]</span>
	    ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	    ir <span class="sym">=</span> ir <span class="sym">-</span> <span class="num">1</span>
	    <span class="kwa">if</span> <span class="sym">(</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">then</span>
		ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra
		<span class="kwa">return</span>
	    <span class="kwa">end</span>
	<span class="kwa">end</span>
	i <span class="sym">=</span> l
	j <span class="sym">=</span> l <span class="sym">*</span> <span class="num">2</span>
	<span class="kwa">while</span> j <span class="sym">&lt;=</span> ir <span class="kwa">do</span>
	    <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir<span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">then</span>
		j <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span>
	    <span class="kwa">end</span>
	    <span class="kwa">if</span> rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]</span> <span class="kwa">then</span>
		ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">]</span>
		i <span class="sym">=</span> j
		j <span class="sym">=</span> j <span class="sym">+</span> i
	    <span class="kwa">else</span>
		j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span>
	    <span class="kwa">end</span>
	<span class="kwa">end</span>
	ra<span class="sym">[</span>i<span class="sym">] =</span> rra
    <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local</span> ary <span class="sym">= {}</span>
<span class="kwa">local</span> N <span class="sym">= (</span><span class="kwa">tonumber</span><span class="sym">((</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">]))</span> <span class="kwa">or</span> <span class="num">1</span><span class="sym">)</span>

<span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> N <span class="kwa">do</span>
    ary<span class="sym">[</span>i<span class="sym">] =</span> gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">)</span>
<span class="kwa">end</span>

heapsort<span class="sym">(</span>N<span class="sym">,</span> ary<span class="sym">)</span>

io.<span class="kwa">write</span><span class="sym">(</span><span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;%0.10f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> ary<span class="sym">[</span>N<span class="sym">]))</span>
