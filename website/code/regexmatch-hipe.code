<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">%%% -*- mode: erlang -*-
</FONT></I><I><FONT COLOR="#B22222">%%% $Id: regexmatch-hipe.code,v 1.1 2004-11-02 08:52:40 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">%%% http://www.bagley.org/~doug/shootout/
</FONT></I>
<B><FONT COLOR="#5F9EA0">-module</FONT></B>(regexmatch).
<B><FONT COLOR="#5F9EA0">-export</FONT></B>([main/0, main/1]).

<I><FONT COLOR="#B22222">%% get the program argument, which is how many test iterations to run
</FONT></I><B><FONT COLOR="#0000FF">main</FONT></B>() -&gt; main([<B><FONT COLOR="#BC8F8F">'1'</FONT></B>]).
<B><FONT COLOR="#0000FF">main</FONT></B>([<FONT COLOR="#B8860B">Arg</FONT>]) -&gt;
    <FONT COLOR="#B8860B">Num</FONT> = <B><FONT COLOR="#A020F0">list_to_integer</FONT></B>(<B><FONT COLOR="#A020F0">atom_to_list</FONT></B>(<FONT COLOR="#B8860B">Arg</FONT>)),
    {ok, <FONT COLOR="#B8860B">Re</FONT>} = regexp:parse(
		 <B><FONT COLOR="#BC8F8F">&quot;(^|[^0-9\\(])&quot;</FONT></B>		<I><FONT COLOR="#B22222">% preceeding non-digit or bol
</FONT></I>		 <B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B>				<I><FONT COLOR="#B22222">% area code
</FONT></I>		 <B><FONT COLOR="#BC8F8F">&quot;\\([0-9][0-9][0-9]\\)&quot;</FONT></B>	<I><FONT COLOR="#B22222">% is either 3 digits in parens
</FONT></I>		 <B><FONT COLOR="#BC8F8F">&quot;|&quot;</FONT></B>				<I><FONT COLOR="#B22222">% or
</FONT></I>		 <B><FONT COLOR="#BC8F8F">&quot;[0-9][0-9][0-9]&quot;</FONT></B>		<I><FONT COLOR="#B22222">% just 3 digits
</FONT></I>		 <B><FONT COLOR="#BC8F8F">&quot;)&quot;</FONT></B>				<I><FONT COLOR="#B22222">% end of area code
</FONT></I>		 <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>				<I><FONT COLOR="#B22222">% area code is followed by one space
</FONT></I>		 <B><FONT COLOR="#BC8F8F">&quot;[0-9][0-9][0-9]&quot;</FONT></B>		<I><FONT COLOR="#B22222">% exchange is 3 digits
</FONT></I>		 <B><FONT COLOR="#BC8F8F">&quot;[ -]&quot;</FONT></B>				<I><FONT COLOR="#B22222">% separator is either space or dash
</FONT></I>		 <B><FONT COLOR="#BC8F8F">&quot;[0-9][0-9][0-9][0-9]&quot;</FONT></B>		<I><FONT COLOR="#B22222">% last 4 digits
</FONT></I>		 <B><FONT COLOR="#BC8F8F">&quot;($|[^0-9])&quot;</FONT></B>			<I><FONT COLOR="#B22222">% must be followed by a non-digit
</FONT></I>		),
    <FONT COLOR="#B8860B">Plist</FONT> = readlines(),
    test(<FONT COLOR="#B8860B">Num</FONT>, <FONT COLOR="#B8860B">Re</FONT>, <FONT COLOR="#B8860B">Plist</FONT>),
    <B><FONT COLOR="#A020F0">halt</FONT></B>(0).


<B><FONT COLOR="#0000FF">test</FONT></B>(1, <FONT COLOR="#B8860B">Regexp</FONT>, <FONT COLOR="#B8860B">Plist</FONT>) -&gt; 
    <I><FONT COLOR="#B22222">% display output on last iteration
</FONT></I>    <FONT COLOR="#B8860B">Nums</FONT> = match_phones(<FONT COLOR="#B8860B">Regexp</FONT>, <FONT COLOR="#B8860B">Plist</FONT>),
    print_phones(1, <FONT COLOR="#B8860B">Nums</FONT>),
    true;
<B><FONT COLOR="#0000FF">test</FONT></B>(<FONT COLOR="#B8860B">N</FONT>, <FONT COLOR="#B8860B">Regexp</FONT>, <FONT COLOR="#B8860B">Plist</FONT>) -&gt;
    match_phones(<FONT COLOR="#B8860B">Regexp</FONT>, <FONT COLOR="#B8860B">Plist</FONT>),
    test(<FONT COLOR="#B8860B">N</FONT>-1, <FONT COLOR="#B8860B">Regexp</FONT>, <FONT COLOR="#B8860B">Plist</FONT>).


<B><FONT COLOR="#0000FF">print_phones</FONT></B>(<FONT COLOR="#B8860B">Count</FONT>, [<FONT COLOR="#B8860B">H</FONT>|<FONT COLOR="#B8860B">T</FONT>]) -&gt;
    [<FONT COLOR="#B8860B">A</FONT>,<FONT COLOR="#B8860B">E</FONT>,<FONT COLOR="#B8860B">N</FONT>] = <FONT COLOR="#B8860B">H</FONT>,
    <I><FONT COLOR="#B22222">% A,E,N is a list of the matching sub-expressions, which are:
</FONT></I>    <I><FONT COLOR="#B22222">% Areacode (3 digits), Exchange (3 digits), Number (4 digits)
</FONT></I>    io:fwrite(<B><FONT COLOR="#BC8F8F">&quot;~w: (~s) ~s-~s~n&quot;</FONT></B>, [<FONT COLOR="#B8860B">Count</FONT>, <FONT COLOR="#B8860B">A</FONT>,<FONT COLOR="#B8860B">E</FONT>,<FONT COLOR="#B8860B">N</FONT>]),
    print_phones(<FONT COLOR="#B8860B">Count</FONT>+1, <FONT COLOR="#B8860B">T</FONT>);
<B><FONT COLOR="#0000FF">print_phones</FONT></B>(<FONT COLOR="#B8860B">_</FONT>, []) -&gt;
    true.


<B><FONT COLOR="#0000FF">match_phones</FONT></B>(<FONT COLOR="#B8860B">Regexp</FONT>, <FONT COLOR="#B8860B">List</FONT>) -&gt;
    mapfilter(
      <B><FONT COLOR="#A020F0">fun</FONT></B>(<FONT COLOR="#B8860B">String</FONT>) -&gt;
	      <B><FONT COLOR="#A020F0">case</FONT></B> regexp:matches(<FONT COLOR="#B8860B">String</FONT>, <FONT COLOR="#B8860B">Regexp</FONT>) <B><FONT COLOR="#A020F0">of</FONT></B>
		  {match, []}      -&gt; false;
		  {match, <FONT COLOR="#B8860B">Matches</FONT>} -&gt; parse_phone(<FONT COLOR="#B8860B">String</FONT>, <FONT COLOR="#B8860B">Matches</FONT>);
		  <FONT COLOR="#B8860B">_</FONT>                -&gt; false
	      <B><FONT COLOR="#A020F0">end</FONT></B>
      <B><FONT COLOR="#A020F0">end</FONT></B>,
      <FONT COLOR="#B8860B">List</FONT>).


<B><FONT COLOR="#0000FF">parse_phone</FONT></B>(<FONT COLOR="#B8860B">Str</FONT>, [<FONT COLOR="#B8860B">H</FONT>|<FONT COLOR="#B8860B">T</FONT>]) -&gt;
    {<FONT COLOR="#B8860B">Start</FONT>, <FONT COLOR="#B8860B">Len</FONT>} = <FONT COLOR="#B8860B">H</FONT>,
    <I><FONT COLOR="#B22222">% Numstr is something that looks like a complete phone #
</FONT></I>    <FONT COLOR="#B8860B">Numstr</FONT> = string:substr(<FONT COLOR="#B8860B">Str</FONT>, <FONT COLOR="#B8860B">Start</FONT>, <FONT COLOR="#B8860B">Len</FONT>),
    <B><FONT COLOR="#A020F0">case</FONT></B> regexp:matches(<FONT COLOR="#B8860B">Numstr</FONT>, <B><FONT COLOR="#BC8F8F">&quot;[0-9][0-9][0-9][0-9]*&quot;</FONT></B>) <B><FONT COLOR="#A020F0">of</FONT></B>
	{match, []}      -&gt; false;
	{match, <FONT COLOR="#B8860B">Matches</FONT>} -&gt;
	    lists:map(<B><FONT COLOR="#A020F0">fun</FONT></B>({<FONT COLOR="#B8860B">Offset</FONT>, <FONT COLOR="#B8860B">Length</FONT>}) -&gt;
			      string:substr(<FONT COLOR="#B8860B">Numstr</FONT>, <FONT COLOR="#B8860B">Offset</FONT>, <FONT COLOR="#B8860B">Length</FONT>) <B><FONT COLOR="#A020F0">end</FONT></B>,
		      <FONT COLOR="#B8860B">Matches</FONT>);
	<FONT COLOR="#B8860B">_</FONT>                -&gt; false
    <B><FONT COLOR="#A020F0">end</FONT></B>;
<B><FONT COLOR="#0000FF">parse_phone</FONT></B>(<FONT COLOR="#B8860B">Str</FONT>, []) -&gt; [].


<B><FONT COLOR="#0000FF">mapfilter</FONT></B>(<FONT COLOR="#B8860B">Fun</FONT>, [<FONT COLOR="#B8860B">H</FONT>|<FONT COLOR="#B8860B">T</FONT>]) -&gt;
    <B><FONT COLOR="#A020F0">case</FONT></B> <FONT COLOR="#B8860B">Fun</FONT>(<FONT COLOR="#B8860B">H</FONT>) <B><FONT COLOR="#A020F0">of</FONT></B>
	false -&gt; mapfilter(<FONT COLOR="#B8860B">Fun</FONT>, <FONT COLOR="#B8860B">T</FONT>);
	<FONT COLOR="#B8860B">New</FONT>   -&gt; [<FONT COLOR="#B8860B">New</FONT> | mapfilter(<FONT COLOR="#B8860B">Fun</FONT>, <FONT COLOR="#B8860B">T</FONT>)]
    <B><FONT COLOR="#A020F0">end</FONT></B>;
<B><FONT COLOR="#0000FF">mapfilter</FONT></B>(<FONT COLOR="#B8860B">_</FONT>, []) -&gt; [].


<B><FONT COLOR="#0000FF">readlines</FONT></B>() -&gt;
    <FONT COLOR="#B8860B">Port</FONT> = <B><FONT COLOR="#A020F0">open_port</FONT></B>({fd, 0, 1}, [eof, {line, 512}]),
    readlines_from_stream([], <FONT COLOR="#B8860B">Port</FONT>).

<B><FONT COLOR="#0000FF">readlines_from_stream</FONT></B>(<FONT COLOR="#B8860B">Lines</FONT>, <FONT COLOR="#B8860B">Port</FONT>) -&gt;
    <B><FONT COLOR="#A020F0">receive</FONT></B>
	{<FONT COLOR="#B8860B">Port</FONT>, eof} -&gt;
	    lists:reverse(<FONT COLOR="#B8860B">Lines</FONT>);
	{<FONT COLOR="#B8860B">Port</FONT>, {<FONT COLOR="#B8860B">_</FONT>, {<FONT COLOR="#B8860B">_</FONT>, <FONT COLOR="#B8860B">Line</FONT>}}} -&gt;
	    readlines_from_stream([<FONT COLOR="#B8860B">Line</FONT>|<FONT COLOR="#B8860B">Lines</FONT>], <FONT COLOR="#B8860B">Port</FONT>)
    <B><FONT COLOR="#A020F0">end</FONT></B>.</pre></td></tr></table>
