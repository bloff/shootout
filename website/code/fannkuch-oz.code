<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>printInfo showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span>

<span class="kwb">define</span>

<span class="slc">% ------------- %</span>

  NEWLINE <span class="sym">=</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>Flips L<span class="sym">}</span>
    <span class="kwb">fun</span> <span class="sym">{</span>Flips_ L FlipAcc<span class="sym">}</span>
      <span class="kwb">case</span> L <span class="kwb">of</span> <span class="num">1</span><span class="sym">|</span>_ <span class="kwb">then</span>
        FlipAcc
      <span class="kwb">elseof</span> N<span class="sym">|</span>_ <span class="kwb">then</span> Lt Ld <span class="kwb">in</span>
        <span class="sym">{</span>List.takeDrop L N Lt Ld<span class="sym">}</span>
        <span class="sym">{</span>Flips_ <span class="sym">{</span>List.append <span class="sym">{</span>List.reverse Lt<span class="sym">}</span> Ld<span class="sym">}</span> FlipAcc <span class="sym">+</span> <span class="num">1</span><span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>
  <span class="kwb">in</span>
    <span class="sym">{</span>Flips_ L <span class="num">0</span><span class="sym">}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>RotateLeft L<span class="sym">}</span>
    <span class="kwb">case</span> L <span class="kwb">of</span> <span class="kwa">nil</span> <span class="kwb">then</span> <span class="kwa">nil</span>
    <span class="kwb">elseof</span> X<span class="sym">|</span>Xr <span class="kwb">then</span>
      <span class="sym">{</span>List.append Xr <span class="sym">[</span>X<span class="sym">]}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>PrintPerm L<span class="sym">}</span>
    <span class="sym">{</span>ForAll L <span class="kwb">proc</span> <span class="sym">{</span>$ X<span class="sym">} {</span>System.printInfo X<span class="sym">}</span> <span class="kwb">end</span><span class="sym">}</span>
    <span class="sym">{</span>System.printInfo NEWLINE<span class="sym">}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>ProcessPerm L<span class="sym">}</span>
    FlipCount <span class="sym">= {</span>Flips L<span class="sym">}</span>
  <span class="kwb">in</span>
    <span class="kwb">if</span> FlipCount <span class="sym">&gt;</span> &#64;MaxFlips <span class="kwb">then</span>
      MaxFlips <span class="sym">:=</span> FlipCount
    <span class="kwb">end</span>

    <span class="kwb">if</span> &#64;PermN <span class="sym">&lt;</span> <span class="num">30</span> <span class="kwb">then</span>
      <span class="sym">{</span>PrintPerm L<span class="sym">}</span>
      PermN <span class="sym">:=</span> &#64;PermN <span class="sym">+</span> <span class="num">1</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>Permutations L N I<span class="sym">}</span>
    <span class="kwb">if</span> I <span class="sym">&lt;</span> N <span class="kwb">then</span>
      <span class="kwb">if</span> N <span class="sym">==</span> <span class="num">1</span> <span class="kwb">then</span>
        <span class="sym">{</span>ProcessPerm L<span class="sym">}</span>
      <span class="kwb">else</span> Lt Ld <span class="kwb">in</span>
	<span class="sym">{</span>Permutations L <span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="num">0</span><span class="sym">}</span>
        <span class="sym">{</span>List.takeDrop L N Lt Ld<span class="sym">}</span>
	<span class="sym">{</span>Permutations <span class="sym">{</span>List.append <span class="sym">{</span>RotateLeft Lt<span class="sym">}</span> Ld<span class="sym">}</span> N <span class="sym">(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span>
    N Nt <span class="kwb">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String.toInt <span class="sym">{</span>Application.getArgs plain<span class="sym">}</span>.Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwb">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwb">then</span> Default <span class="kwb">else</span> Nt <span class="kwb">end</span>
    <span class="kwa">catch</span> error<span class="sym">(</span>...<span class="sym">)</span> <span class="kwb">then</span>
      N <span class="sym">=</span> Default
    <span class="kwb">end</span>
    N
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  PermN <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>  MaxFlips <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>  N

<span class="slc">% ------------- %</span>

<span class="kwb">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1 1</span><span class="sym">}</span>

  <span class="sym">{</span>Permutations <span class="sym">{</span>List.number <span class="num">1</span> N <span class="num">1</span><span class="sym">}</span> N <span class="num">0</span><span class="sym">}</span>
  <span class="sym">{</span>System.showInfo <span class="str">&quot;Pfannkuchen(&quot;</span> # N # <span class="str">&quot;) = &quot;</span> # &#64;MaxFlips<span class="sym">}</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

