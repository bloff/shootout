<span class="slc">#!/usr/bin/env python</span>

<span class="slc"># The Great Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># modified by Ian Osgood</span>

<span class="kwa">import</span> sys
<span class="kwa">import</span> itertools
<span class="kwa">import</span> bisect

<span class="kwa">def</span> <span class="kwd">gen_random</span><span class="sym">(</span>max_<span class="sym">,</span> last<span class="sym">=[</span><span class="num">42</span><span class="sym">],</span> ia<span class="sym">=</span><span class="num">3877</span><span class="sym">,</span> ic<span class="sym">=</span><span class="num">29573</span><span class="sym">,</span> im<span class="sym">=</span><span class="num">139968</span><span class="sym">):</span>
    last<span class="sym">[</span><span class="num">0</span><span class="sym">] = (</span>last<span class="sym">[</span><span class="num">0</span><span class="sym">] *</span> ia <span class="sym">+</span> ic<span class="sym">) %</span> im
    <span class="kwa">return</span> <span class="sym">(</span>max_ <span class="sym">*</span> last<span class="sym">[</span><span class="num">0</span><span class="sym">]) /</span> im

<span class="kwa">def</span> <span class="kwd">make_cumulative</span><span class="sym">(</span>table<span class="sym">):</span>
    l <span class="sym">= []</span>
    prob <span class="sym">=</span> <span class="num">0.0</span>
    <span class="kwa">for</span> char<span class="sym">,</span> p <span class="kwa">in</span> table<span class="sym">:</span>
        prob <span class="sym">+=</span> p
        l<span class="sym">.</span><span class="kwd">append</span><span class="sym">((</span>prob<span class="sym">,</span> char<span class="sym">))</span>
    <span class="kwa">return</span> l

alu <span class="sym">= (</span>
   <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
   <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
   <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
   <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
   <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
   <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
   <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>
<span class="sym">)</span>

iub <span class="sym">= [</span>
    <span class="sym">(</span><span class="str">&quot;a&quot;</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;c&quot;</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;g&quot;</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;t&quot;</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),</span>

    <span class="sym">(</span><span class="str">&quot;B&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;D&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;H&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;K&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;M&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;N&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;R&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;S&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;V&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;Y&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
<span class="sym">]</span>

homosapiens <span class="sym">= [</span>
    <span class="sym">(</span><span class="str">&quot;a&quot;</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;c&quot;</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;g&quot;</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">),</span>
    <span class="sym">(</span><span class="str">&quot;t&quot;</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">),</span>
<span class="sym">]</span>


<span class="kwa">def</span> <span class="kwd">make_repeat_fasta</span><span class="sym">(</span>id_<span class="sym">,</span> desc<span class="sym">,</span> src<span class="sym">,</span> n<span class="sym">):</span>
    <span class="kwa">print</span> <span class="str">&quot;&gt;%s %s&quot;</span> <span class="sym">% (</span>id_<span class="sym">,</span> desc<span class="sym">)</span>
    width <span class="sym">=</span> <span class="num">60</span>
    l <span class="sym">=</span> <span class="kwb">len</span><span class="sym">(</span>src<span class="sym">)</span>
    s <span class="sym">=</span> src <span class="sym">* (</span>n <span class="sym">//</span> l<span class="sym">)</span>
    s <span class="sym">+=</span> src<span class="sym">[:</span>n <span class="sym">%</span> l<span class="sym">]</span>
    <span class="kwa">assert</span> <span class="kwb">len</span><span class="sym">(</span>s<span class="sym">) ==</span> n
    <span class="kwa">print</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">([</span>s<span class="sym">[</span>i<span class="sym">:</span>i<span class="sym">+</span>width<span class="sym">]</span> <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">xrange</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> width<span class="sym">)])</span>

<span class="kwa">def</span> <span class="kwd">make_random_fasta</span><span class="sym">(</span>id_<span class="sym">,</span> desc<span class="sym">,</span> table<span class="sym">,</span> n<span class="sym">):</span>
    <span class="kwa">print</span> <span class="str">&quot;&gt;%s %s&quot;</span> <span class="sym">% (</span>id_<span class="sym">,</span> desc<span class="sym">)</span>
    width <span class="sym">=</span> <span class="num">60</span>
    chunk <span class="sym">=</span> <span class="num">1</span> <span class="sym">*</span> width
    _gr <span class="sym">=</span> gen_random
    _table <span class="sym">=</span> <span class="kwd">make_cumulative</span><span class="sym">(</span>table<span class="sym">)</span>
    probs <span class="sym">= [</span>t<span class="sym">[</span><span class="num">0</span><span class="sym">]</span> <span class="kwa">for</span> t <span class="kwa">in</span> _table<span class="sym">]</span>
    chars <span class="sym">= [</span>t<span class="sym">[</span><span class="num">1</span><span class="sym">]</span> <span class="kwa">for</span> t <span class="kwa">in</span> _table<span class="sym">]</span>
    _bisect <span class="sym">=</span> bisect<span class="sym">.</span>bisect
    r <span class="sym">=</span> <span class="kwb">range</span><span class="sym">(</span>width<span class="sym">)</span>
    <span class="kwa">for</span> j <span class="kwa">in</span> <span class="kwb">xrange</span><span class="sym">(</span>n <span class="sym">//</span> width<span class="sym">):</span>
        <span class="kwa">print</span> <span class="str">&quot;&quot;</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">([</span>chars<span class="sym">[</span><span class="kwd">_bisect</span><span class="sym">(</span>probs<span class="sym">,</span> <span class="kwd">_gr</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">))]</span> <span class="kwa">for</span> i <span class="kwa">in</span> r<span class="sym">])</span>
    <span class="kwa">if</span> n <span class="sym">%</span> width<span class="sym">:</span>
        <span class="kwa">print</span> <span class="str">&quot;&quot;</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">([</span>chars<span class="sym">[</span><span class="kwd">_bisect</span><span class="sym">(</span>probs<span class="sym">,</span> <span class="kwd">_gr</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">))]</span> <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">xrange</span><span class="sym">(</span>n <span class="sym">%</span> width<span class="sym">)])</span>

<span class="kwa">def</span> <span class="kwd">main</span><span class="sym">():</span>
    <span class="kwa">try</span><span class="sym">:</span>
        n <span class="sym">=</span> <span class="kwb">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>
    <span class="kwa">except</span><span class="sym">:</span>
        <span class="kwa">print</span> <span class="str">&quot;Usage: %s &lt;N&gt;&quot;</span> <span class="sym">%</span> sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
    <span class="kwd">make_repeat_fasta</span><span class="sym">(</span><span class="str">'ONE'</span><span class="sym">,</span> <span class="str">'Homo sapiens alu'</span><span class="sym">,</span> alu<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">)</span>
    <span class="kwd">make_random_fasta</span><span class="sym">(</span><span class="str">'TWO'</span><span class="sym">,</span> <span class="str">'IUB ambiguity codes'</span><span class="sym">,</span> iub<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">)</span>
    <span class="kwd">make_random_fasta</span><span class="sym">(</span><span class="str">'THREE'</span><span class="sym">,</span> <span class="str">'Homo sapiens frequency'</span><span class="sym">,</span> homosapiens<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">)</span>

<span class="kwd">main</span><span class="sym">()</span>
