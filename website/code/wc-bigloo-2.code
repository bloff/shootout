<span class="slc">;;; The Great Computer Language Shootout
</span><span class="slc">;;; http://shootout.alioth.debian.org/great
</span><span class="slc">;;; from Sven Hartrumpf
</span>
<span class="sym">(</span>module pidigits <span class="sym">(</span>main main<span class="sym">) (</span>option <span class="sym">(</span><span class="kwa">set</span><span class="sym">! *</span>genericity<span class="sym">*</span> #f<span class="sym">)))

(</span>define <span class="sym">(</span>wc file<span class="sym">)
  (</span>call<span class="sym">-</span>with<span class="sym">-</span>input<span class="sym">-</span>file
    file
    <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>port<span class="sym">)
      (</span>let <span class="sym">((</span>num<span class="sym">-</span>lines <span class="num">0</span><span class="sym">)
            (</span>num<span class="sym">-</span>words <span class="num">0</span><span class="sym">)
            (</span>num<span class="sym">-</span>characters <span class="num">0</span><span class="sym">)
            (</span>in<span class="sym">-</span>word? #f<span class="sym">)
            (</span>buffer <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">4096</span><span class="sym">)))
        (</span>let iter <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>fill<span class="sym">-</span>string<span class="sym">!</span> buffer <span class="num">0 4096</span> port<span class="sym">)))
          (</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> n <span class="num">0</span><span class="sym">)
                 (</span><span class="kwa">set</span><span class="sym">!</span> num<span class="sym">-</span>characters <span class="sym">(+</span> num<span class="sym">-</span>characters n<span class="sym">))
                 (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
                   ((&gt;=</span> i n<span class="sym">))
                    (</span>case <span class="sym">(</span>string<span class="sym">-</span>ref buffer i<span class="sym">)
                      ((</span>#\space #\tab<span class="sym">)
                       (</span><span class="kwa">cond</span> <span class="sym">(</span>in<span class="sym">-</span>word?
                               <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> num<span class="sym">-</span>words <span class="sym">(+</span> num<span class="sym">-</span>words <span class="num">1</span><span class="sym">))
                               (</span><span class="kwa">set</span><span class="sym">!</span> in<span class="sym">-</span>word? #f<span class="sym">))))
                      ((</span>#\newline<span class="sym">)
                       (</span><span class="kwa">set</span><span class="sym">!</span> num<span class="sym">-</span>lines <span class="sym">(+</span> num<span class="sym">-</span>lines <span class="num">1</span><span class="sym">))
                       (</span><span class="kwa">cond</span> <span class="sym">(</span>in<span class="sym">-</span>word? <span class="slc">; cond copied from case above
</span>                               <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> num<span class="sym">-</span>words <span class="sym">(+</span> num<span class="sym">-</span>words <span class="num">1</span><span class="sym">))
                               (</span><span class="kwa">set</span><span class="sym">!</span> in<span class="sym">-</span>word? #f<span class="sym">))))
                      (</span>else
                        <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">not</span> in<span class="sym">-</span>word?<span class="sym">)
                               (</span><span class="kwa">set</span><span class="sym">!</span> in<span class="sym">-</span>word? #t<span class="sym">))))))
                 (</span>iter <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>fill<span class="sym">-</span>string<span class="sym">!</span> buffer <span class="num">0 4096</span> port<span class="sym">)))))
        (</span>write num<span class="sym">-</span>lines<span class="sym">) (</span>write<span class="sym">-</span>char #\space<span class="sym">) (</span>write num<span class="sym">-</span>words<span class="sym">) (</span>write<span class="sym">-</span>char #\space<span class="sym">) (</span>write num<span class="sym">-</span>characters<span class="sym">) (</span>newline<span class="sym">)))))

(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>wc <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span>
