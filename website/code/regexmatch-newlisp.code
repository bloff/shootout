#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

<span class="slc">;; regexmatch - benchmark</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Lutz Mueller</span>

<span class="slc">;; get phone data from stdin</span>
<span class="sym">(</span><span class="kwa">while</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">) (</span>push <span class="sym">(</span><span class="kwa">append</span> <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">line</span><span class="sym">)</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span> phones<span class="sym">))</span>
<span class="sym">(</span><span class="kwa">reverse</span> phones<span class="sym">)</span>

<span class="slc">;; patterns</span>
<span class="sym">(</span><span class="kwa">set</span> <span class="str">'pattern (append</span>
<span class="str">    {(?:^|[^</span><span class="esc">\d\(</span><span class="str">])}		; must be preceeded by non-digit</span>
<span class="str">    {(</span><span class="esc">\(</span><span class="str">)?}				; match 1: possible initial left paren</span>
<span class="str">    {(</span><span class="esc">\d\d\d</span><span class="str">)}			; match 2: area code is 3 digits</span>
<span class="str">    {(?(1)</span><span class="esc">\)</span><span class="str">)}			; if match1 then match right paren</span>
<span class="str">    {[ ]}				; area code followed by one space</span>
<span class="str">    {(</span><span class="esc">\d\d\d</span><span class="str">)}			; match 3: prefix of 3 digits</span>
<span class="str">    {[ -]}			      ; separator is either space or dash</span>
<span class="str">    {(</span><span class="esc">\d\d\d\d</span><span class="str">)}			; match 4: last 4 digits</span>
<span class="str">    {</span><span class="esc">\D</span><span class="str">}				; must be followed by a non-digit</span>
<span class="str">))</span>
<span class="str"></span>
<span class="str">;; get N</span>
<span class="str">(set '</span>N <span class="sym">(</span>integer <span class="sym">(</span><span class="kwa">last</span> <span class="sym">(</span>main<span class="sym">-</span>args<span class="sym">))))</span>
<span class="sym">(</span><span class="kwa">set</span> <span class="str">'cnt 0)</span>
<span class="str"></span>
<span class="str">(dotimes (i N)</span>
<span class="str">  (dolist (phone phones)</span>
<span class="str">    (if (regex pattern phone)</span>
<span class="str">        (if (= i 0)</span>
<span class="str">          (begin</span>
<span class="str">            (inc '</span>cnt<span class="sym">)</span>
            <span class="sym">(</span>println <span class="sym">(</span>string cnt <span class="str">&quot;: (&quot;</span> $<span class="num">2</span> <span class="str">&quot;) &quot;</span> $<span class="num">3</span> <span class="str">&quot;-&quot;</span> $<span class="num">4</span><span class="sym">)))))))</span>

<span class="slc">;; eof</span>
