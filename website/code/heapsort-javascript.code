<span class="slc">// The Great Computer Language Shootout
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">//
</span><span class="slc">// contributed by David Hedbor
</span><span class="slc">// modified by Isaac Gouy
</span>
<span class="kwa">var</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;
</span><span class="kwa">var</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;
</span><span class="kwa">var</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;

</span><span class="kwa">var</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;

</span><span class="kwa">function</span> gen_random<span class="sym">(</span>max<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>max <span class="sym">* (</span>last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) /</span> IM<span class="sym">); }

</span><span class="kwa">function</span> heapsort<span class="sym">(</span>n<span class="sym">,</span> ra<span class="sym">) {
</span>    <span class="kwa">var</span> l<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> i<span class="sym">;
</span>    <span class="kwa">var</span> rra<span class="sym">;

</span>    l <span class="sym">= (</span>n <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;
</span>    ir <span class="sym">=</span> n<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(;;) {
</span>        <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {
</span>            rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];
        }</span> <span class="kwa">else</span> <span class="sym">{
</span>            rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];
</span>            ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];
</span>            <span class="kwa">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">) {
</span>                ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;
</span>                <span class="kwa">return</span><span class="sym">;
            }
        }
</span>        i <span class="sym">=</span> l<span class="sym">;
</span>        j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;
</span>        <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">) {
</span>            <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j<span class="sym">; }
</span>            <span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]) {
</span>                ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];
</span>                j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">);
            }</span> <span class="kwa">else</span> <span class="sym">{
</span>                j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;
            }
        }
</span>        ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;
    }
}


</span><span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="kwa">var</span> ary<span class="sym">,</span> i<span class="sym">;

</span><span class="slc">// create an array of N random floats
</span>ary <span class="sym">=</span> Array<span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span><span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>  ary<span class="sym">[</span>i<span class="sym">] =</span> gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">);
}
</span>heapsort<span class="sym">(</span>n<span class="sym">,</span> ary<span class="sym">);
</span>print<span class="sym">(</span>ary<span class="sym">[</span>n<span class="sym">]</span>.valueOf<span class="sym">());</span>
