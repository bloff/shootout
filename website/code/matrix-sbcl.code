<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: lisp -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: matrix-sbcl.code,v 1.2 2004-11-08 08:15:17 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">;;; from Jochen Schmidt (jsc@dataheaven.de, http://www.dataheaven.de)
</FONT></I><I><FONT COLOR="#B22222">;;; Multi-lisp modifications by Brent Fulgham
</FONT></I>
(proclaim '(optimize (speed 3) (space 0) (compilation-speed 0) (debug 0) (safety 0)))

(defun matmul (a b c n m k)
  (declare (optimize (speed 3) (safety 0) (debug 0))
           (type (simple-array (unsigned-byte 32) (*)) a b c)
           (fixnum n m k))
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((sum 0)
        (i1 (- m))
        (k2 0))
    (declare (type (unsigned-byte 32) sum) (type fixnum i1 k2))
    (dotimes (i n c)
      (declare (fixnum i))
      (setf i1 (+ i1 m)) <I><FONT COLOR="#B22222">;; i1=i*m
</FONT></I>      (dotimes (j k)
        (declare (fixnum j))
        (setf sum 0)
        (setf k2 (- k))
        (dotimes (l m)
          (declare (fixnum l))
          (setf k2 (+ k2 k)) <I><FONT COLOR="#B22222">;; k2= l*k
</FONT></I>          (setf sum (the (unsigned-byte 32) (+ (the (unsigned-byte 32) sum) 
                                               (the (unsigned-byte 32) (* (aref a (+ i1 l))
                                                                          (aref b (+ k2 j))))))))
        (setf (aref c (+ i1 j)) sum)))))

(defun main ()
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (parse-integer (<B><FONT COLOR="#A020F0">or</FONT></B> (car (last #+sbcl sb-ext:*posix-argv*
                                         #+cmu  extensions:*command-line-strings*)) <B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B>))))
    (declare (fixnum n)	
	     (optimize (speed 3) (debug 0) (safety 0)))
    (<B><FONT COLOR="#A020F0">let*</FONT></B> ((m1 (make-matrix 30 30))
	   (m2 (make-matrix 30 30))
	   (m3 (make-matrix 30 30))
	   (mm (make-array '(30 30) <B><FONT COLOR="#5F9EA0">:element-type</FONT></B> '(unsigned-byte 32) <B><FONT COLOR="#5F9EA0">:displaced-to</FONT></B> m3)))
      (loop repeat n <B><FONT COLOR="#A020F0">do</FONT></B> (matmul m1 m2 m3 30 30 30))
      (format t <B><FONT COLOR="#BC8F8F">&quot;~A ~A ~A ~A~%&quot;</FONT></B>
	      (aref mm 0 0) (aref mm 2 3) (aref mm 3 2) (aref mm 4 4)))))

(defun make-matrix (rows cols)
  (declare (type (unsigned-byte 32) rows cols)
           (optimize (speed 3) (safety 0)))<I><FONT COLOR="#B22222">; (hcl:fixnum-safety 0)))
</FONT></I>  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((space (* rows cols))
         (matrix (make-array space
                             <B><FONT COLOR="#5F9EA0">:element-type</FONT></B> '(unsigned-byte 32))))
    (declare (type (simple-array (unsigned-byte 32) (*)) matrix)
             (fixnum space))
    (loop <B><FONT COLOR="#5F9EA0">:for</FONT></B> i <B><FONT COLOR="#5F9EA0">:of-type</FONT></B> fixnum <B><FONT COLOR="#5F9EA0">:from</FONT></B> 0 <B><FONT COLOR="#5F9EA0">:below</FONT></B> space
          <B><FONT COLOR="#5F9EA0">:do</FONT></B> (setf (aref matrix i) (1+ i)))
    matrix))</pre></td></tr></table>
