<span class="com">/* The Great Computer Language Shootout
    http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

   Transliterated from the Java implementation

To compile:
	   nicec --sourcepath=.. -d=. -a heapsort.jar heapsort

To run:
   java -ea -jar heapsort.jar 80000
*/</span>


<span class="kwa">import</span> random<span class="sym">;</span> <span class="slc">// reuse gen_random &amp; floatFormat 
</span>               <span class="slc">// &amp; toSinglePositiveInt
</span>
<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   <span class="kwa">let</span> n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);

</span>   <span class="kwa">let</span> numbers <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">];
</span>   <span class="kwa">for</span> <span class="sym">(</span>var i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> n<span class="sym">;</span> i<span class="sym">++)</span> numbers<span class="sym">[</span>i<span class="sym">] =</span> gen_random<span class="sym">(</span><span class="num">1</span><span class="sym">);

</span>   heapsort<span class="sym">(</span>n<span class="sym">,</span> numbers<span class="sym">);

</span>   println<span class="sym">(</span>floatFormat<span class="sym">(</span><span class="num">10</span><span class="sym">).</span>format<span class="sym">(</span>numbers<span class="sym">[</span>n<span class="sym">]));
}


</span><span class="kwb">void</span> heapsort<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> ra<span class="sym">) {
</span>   <span class="kwb">int</span> l<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> i<span class="sym">;
</span>   <span class="kwb">double</span> rra<span class="sym">;

</span>   <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">return</span><span class="sym">;
</span>   l <span class="sym">= (</span>n <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;
</span>   ir <span class="sym">=</span> n<span class="sym">;
</span>   <span class="kwa">for</span> <span class="sym">(;;) {
</span>      <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];
</span>      <span class="kwa">else</span> <span class="sym">{
</span>         rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];
</span>         ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];
</span>         <span class="kwa">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">) {
</span>            ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;
</span>            <span class="kwa">return</span><span class="sym">;
         }
      }
</span>      i <span class="sym">=</span> l<span class="sym">;
</span>      j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">) {
</span>         <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j<span class="sym">; }
</span>         <span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]) {
</span>            ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];
</span>            j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">);
         }
 </span>         <span class="kwa">else</span> j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;
      }
</span>      ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;
   }
}</span>
