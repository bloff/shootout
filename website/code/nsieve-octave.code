# nsieve benchmark <span class="kwa">for</span> The <span class="kwa">Computer</span> Language Shootout
# Written by Francesco Potorti<span class="sym">,</span> <span class="num">1995</span>

<span class="kwa">function</span> A <span class="sym">=</span> nsieve <span class="sym">(</span>n<span class="sym">)</span>
# Erathostenes sieve algorithm<span class="sym">:</span> <span class="kwb">find all</span> primes not greater than n
# Put in the public domain by Francesco Potorti` <span class="sym">&lt;</span>pot at cnuce <span class="kwb">dot</span> cnr <span class="kwb">dot</span> it<span class="sym">&gt;</span> <span class="num">1995</span>

  <span class="kwa">if</span> <span class="sym">(!</span>is_scalar<span class="sym">(</span>n<span class="sym">) ||</span> n <span class="sym">&lt;</span> <span class="num">1</span> <span class="sym">||</span> n <span class="sym">!=</span> <span class="kwb">round</span><span class="sym">(</span>n<span class="sym">))</span>
    <span class="kwa">error</span> <span class="sym">(</span><span class="str">&quot;n should be a positive integer\n&quot;</span><span class="sym">);</span>
  endif

  <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;=</span> <span class="num">3</span><span class="sym">)</span>
    A <span class="sym">= [</span><span class="num">2</span><span class="sym">:</span>n<span class="sym">];</span>
    <span class="kwa">return</span><span class="sym">;</span>
  endif

  # Make an array of <span class="kwa">ones</span><span class="sym">,</span> one <span class="kwa">for</span> the number <span class="num">2</span> and one <span class="kwa">for</span> each odd number
  # greater than <span class="num">2</span> and not greater than n.  The natural corresponding to the
  # i<span class="sym">-</span>th one <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">2</span><span class="sym">)</span> is then <span class="num">2</span><span class="sym">*</span>n<span class="sym">-</span><span class="num">1</span>.  Put a zero where the corresponding
  # natural is not a prime.

  lp <span class="sym">=</span> <span class="kwb">floor</span> <span class="sym">((</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">);</span>
  prime <span class="sym">=</span> <span class="kwa">ones</span> <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> lp<span class="sym">);</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">:(</span><span class="kwb">sqrt</span><span class="sym">(</span>n<span class="sym">)+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span>
    <span class="kwa">if</span> prime<span class="sym">(</span>i<span class="sym">)</span>
      Ni <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
      range <span class="sym">= (</span>Ni<span class="sym">*</span>Ni<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">:</span>Ni<span class="sym">:</span>lp<span class="sym">;</span>
      prime<span class="sym">(</span>range<span class="sym">) =</span> zeros <span class="sym">(</span><span class="kwa">size</span> <span class="sym">(</span>range<span class="sym">));</span>
    endif
  endfor

  A <span class="sym">=</span> <span class="num">2</span> <span class="sym">*</span> <span class="kwb">find</span> <span class="sym">(</span>prime<span class="sym">) -</span> <span class="num">1</span><span class="sym">;</span>
  A<span class="sym">(</span><span class="num">1</span><span class="sym">) =</span> <span class="num">2</span><span class="sym">;</span>
endfunction

<span class="kwa">function</span> B <span class="sym">=</span> test<span class="sym">(</span>n<span class="sym">)</span>
  m <span class="sym">=</span> <span class="num">2</span><span class="sym">**</span>n <span class="sym">*</span> <span class="num">10000</span><span class="sym">;</span>
  PL <span class="sym">=</span> nsieve<span class="sym">(</span>m<span class="sym">);</span>
  count <span class="sym">=</span> <span class="kwa">length</span><span class="sym">(</span> nsieve<span class="sym">(</span>m<span class="sym">) );</span>
  printf<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d\n&quot;</span><span class="sym">,</span> m<span class="sym">,</span> count<span class="sym">)</span>
endfunction

nn <span class="sym">=</span> <span class="kwb">str2num</span><span class="sym">(</span>argv<span class="sym">{</span><span class="num">1</span><span class="sym">});</span>
<span class="kwa">if</span> <span class="sym">(</span>nn <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">)</span>
  test<span class="sym">(</span>nn<span class="sym">);</span>
endif<span class="sym">;</span>
<span class="kwa">if</span> <span class="sym">(</span>nn <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">)</span>
  test<span class="sym">(</span>nn <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
endif<span class="sym">;</span>
<span class="kwa">if</span> <span class="sym">(</span>nn <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">)</span>
  test<span class="sym">(</span>nn <span class="sym">-</span> <span class="num">2</span><span class="sym">);</span>
endif<span class="sym">;</span>
