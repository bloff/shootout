<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Lester Vecsey */</span>


<span class="kwa">class</span> mandelbrot <span class="sym">{

</span>	<span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {

</span>		<span class="kwb">double</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> Tr<span class="sym">,</span> Ti<span class="sym">,</span> Zr<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> Zi<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> limit_sq <span class="sym">=</span> <span class="num">4.0</span><span class="sym">;
</span>		<span class="kwb">int</span> max<span class="sym">,</span> res<span class="sym">,</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> y<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> pos<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> acc<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> iter <span class="sym">=</span> <span class="num">50</span><span class="sym">;

</span>		res <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">)</span> ? <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="num">10</span><span class="sym">) :</span> <span class="num">200</span><span class="sym">;

</span>		<span class="kwb">byte</span> pbm_data<span class="sym">[] =</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[ (</span> max <span class="sym">= (</span>res <span class="sym">*</span> res<span class="sym">) &gt;&gt;&gt;</span> <span class="num">3</span><span class="sym">) ];

</span>		<span class="kwc">String</span> pbm_header <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">String</span><span class="sym">(</span><span class="str">&quot;P4&quot;</span> <span class="sym">+ ((</span><span class="kwb">char</span><span class="sym">)</span> <span class="num">012</span><span class="sym">) +</span> res <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> res <span class="sym">+ ((</span><span class="kwb">char</span><span class="sym">)</span> <span class="num">012</span><span class="sym">));

</span>		<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>write<span class="sym">(</span>pbm_header<span class="sym">.</span>getBytes<span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> pbm_header<span class="sym">.</span>length<span class="sym">());

</span>		<span class="kwa">for</span> <span class="sym">( ;</span> pos <span class="sym">&lt;</span> max<span class="sym">;</span> x<span class="sym">%=</span>res<span class="sym">,</span> Zr<span class="sym">=</span>Zi<span class="sym">=</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">) {

						</span>			Cr <span class="sym">= (</span><span class="num">2</span><span class="sym">*((</span><span class="kwb">double</span><span class="sym">)</span>x<span class="sym">++)/</span>res <span class="num">- 1.5</span><span class="sym">);</span> Ci<span class="sym">=(</span><span class="num">2</span><span class="sym">*((</span><span class="kwb">double</span><span class="sym">)</span>y<span class="sym">)/</span>res <span class="num">- 1</span><span class="sym">);

</span>			<span class="kwa">for</span><span class="sym">(</span>acc<span class="sym">&lt;&lt;=</span><span class="num">1</span><span class="sym">; (</span>acc<span class="sym">&amp;</span><span class="num">1</span><span class="sym">)==</span><span class="num">0</span> <span class="sym">&amp;&amp;</span> i<span class="sym">++ &lt;</span> iter<span class="sym">;</span> acc <span class="sym">|=</span> Zr<span class="sym">*</span>Zr<span class="sym">+</span>Zi<span class="sym">*</span>Zi <span class="sym">&gt;</span> limit_sq ? <span class="num">1</span> <span class="sym">:</span> <span class="num">0</span><span class="sym">) {

</span>				Tr <span class="sym">=</span> Zr<span class="sym">*</span>Zr <span class="sym">-</span> Zi<span class="sym">*</span>Zi <span class="sym">+</span> Cr<span class="sym">;
</span>				Ti <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci<span class="sym">;
</span>				Zr <span class="sym">=</span> Tr<span class="sym">;</span> Zi <span class="sym">=</span> Ti<span class="sym">;

				}

			</span>			<span class="kwa">if</span> <span class="sym">(</span>x<span class="sym">==</span>res<span class="sym">) {</span> y<span class="sym">++;</span> <span class="kwa">if</span> <span class="sym">(</span>acc<span class="sym">&lt;</span><span class="num">256</span><span class="sym">)</span> acc <span class="sym">&lt;&lt;= (</span><span class="num">8</span><span class="sym">-</span>res<span class="sym">%</span><span class="num">8</span><span class="sym">); }

</span>			<span class="kwa">if</span> <span class="sym">(</span>acc<span class="sym">&gt;</span><span class="num">255</span><span class="sym">) {</span> pbm_data <span class="sym">[</span> pos<span class="sym">++ ] = (</span><span class="kwb">byte</span><span class="sym">) (</span>acc^<span class="sym">=</span><span class="num">255</span><span class="sym">);</span> acc <span class="sym">=</span> <span class="num">1</span><span class="sym">; }

						}

</span>		<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>write<span class="sym">(</span> pbm_data<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> pos<span class="sym">);

		}

	}</span>
