<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;;   http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; resubmitted by Wade Humeniuk (Fix Stream Problem)</span>
<span class="slc">;;; Original contributed by Yannick Gingras &lt;ygingras&#64;ygingras.net&gt;</span>
<span class="slc">;;;</span>
<span class="slc">;;; To compile</span>
<span class="slc">;;; sbcl --load mandelbrot.lisp --eval &quot;(save-lisp-and-die \&quot;mandelbrot.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="slc">;;; To run</span>
<span class="slc">;;; sbcl --noinform --core mandelbrot.core %A</span>

<span class="sym">(</span><span class="kwa">defun</span> render <span class="sym">(</span>size stream<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum size<span class="sym">) (</span>stream stream<span class="sym">)</span>
	   <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">)))</span>
  <span class="sym">(</span>assert <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(&lt;=</span> <span class="num">8</span> size <span class="num">10000</span><span class="sym">) (</span><span class="kwa">zerop</span> <span class="sym">(</span>mod size <span class="num">8</span><span class="sym">))))</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>code <span class="num">0</span><span class="sym">) (</span>bit <span class="num">0</span><span class="sym">)</span>
         <span class="sym">(</span>zr <span class="num">0.0</span>d0<span class="sym">) (</span>zi <span class="num">0.0</span>d0<span class="sym">) (</span>tr <span class="num">0.0</span>d0<span class="sym">)</span>
	 <span class="sym">(</span>delta <span class="sym">(/</span> <span class="num">2</span>d0 size<span class="sym">))</span>
         <span class="sym">(</span>base<span class="sym">-</span>real <span class="sym">-</span><span class="num">1.5</span>d0<span class="sym">) (</span>base<span class="sym">-</span>imag <span class="sym">-</span><span class="num">1.0</span>d0<span class="sym">)</span>
         <span class="sym">(</span>buffer <span class="sym">(</span>make<span class="sym">-</span>array <span class="sym">(*</span> size <span class="sym">(</span>ceiling size <span class="num">8</span><span class="sym">)) :</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="sym">'(</span>unsigned<span class="sym">-</span>byte <span class="num">8</span><span class="sym">)))</span>
         <span class="sym">(</span>index <span class="num">0</span><span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">8</span><span class="sym">)</span> code<span class="sym">)</span>
             <span class="sym">(</span><span class="kwa">type</span> double<span class="sym">-</span><span class="kwa">float</span> zr zi tr base<span class="sym">-</span>real base<span class="sym">-</span>imag delta<span class="sym">)</span>
             <span class="sym">(</span><span class="kwa">type</span> fixnum index bit<span class="sym">))</span>

    <span class="sym">(</span>dotimes <span class="sym">(</span>y size<span class="sym">)</span>
      <span class="sym">(</span>setf base<span class="sym">-</span>imag <span class="sym">(-</span> <span class="num">1.0</span>d0 <span class="sym">(*</span> delta y<span class="sym">)))</span>
      <span class="sym">(</span>dotimes <span class="sym">(</span>x size<span class="sym">)</span>
	<span class="sym">(</span>declare <span class="sym">(</span>fixnum x<span class="sym">))</span>
	<span class="sym">(</span>setf base<span class="sym">-</span>real <span class="sym">(+ -</span><span class="num">1.5</span>d0 <span class="sym">(*</span> delta x<span class="sym">))</span>
	      zr base<span class="sym">-</span>real
	      zi base<span class="sym">-</span>imag<span class="sym">)</span>
        <span class="sym">(</span>setf code <span class="sym">(</span><span class="kwa">logior</span> <span class="sym">(</span>ash code <span class="num">1</span><span class="sym">)</span>
			   <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>dotimes <span class="sym">(</span>n <span class="num">50</span><span class="sym">)</span>
				 <span class="sym">(</span>when <span class="sym">(&lt;</span> <span class="num">4.0</span>d0 <span class="sym">(+ (*</span> zr zr<span class="sym">) (*</span> zi zi<span class="sym">)))</span>
				   <span class="sym">(</span>return t<span class="sym">))</span>
				 <span class="sym">(</span>setf tr <span class="sym">(+ (*</span> zr zr<span class="sym">) (- (*</span> zi zi<span class="sym">))</span> base<span class="sym">-</span>real<span class="sym">)</span>
				       zi <span class="sym">(+ (*</span> <span class="num">2.0</span>d0 zr zi<span class="sym">)</span> base<span class="sym">-</span>imag<span class="sym">)</span>
				       zr tr<span class="sym">))</span>
			       #x00
			       #x01<span class="sym">)))</span>
	<span class="sym">(</span>when <span class="sym">(= (</span>incf bit<span class="sym">)</span> <span class="num">8</span><span class="sym">)</span>
	  <span class="sym">(</span>setf <span class="sym">(</span>aref buffer index<span class="sym">)</span> code
		bit <span class="num">0</span> code <span class="num">0</span><span class="sym">)</span>
	  <span class="sym">(</span>incf index<span class="sym">))))</span>

    <span class="sym">(</span>write<span class="sym">-</span>sequence buffer stream<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">0</span><span class="sym">) (</span>safety <span class="num">3</span><span class="sym">)))</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>args sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*)</span>
	 <span class="sym">(</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span>second args<span class="sym">))))</span>
    <span class="sym">(</span>with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span>stream <span class="sym">(</span>stream <span class="sym">(</span>sb<span class="sym">-</span>sys<span class="sym">:</span>make<span class="sym">-</span>fd<span class="sym">-</span>stream <span class="sym">(</span>sb<span class="sym">-</span>sys<span class="sym">:</span>fd<span class="sym">-</span>stream<span class="sym">-</span>fd sb<span class="sym">-</span>sys<span class="sym">:*</span>stdout<span class="sym">*)</span>
						     <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="sym">:</span>default
						     <span class="sym">:</span>buffering <span class="sym">:</span>full
						     <span class="sym">:</span>output t <span class="sym">:</span>input nil<span class="sym">))</span>

      <span class="sym">(</span>format stream <span class="str">&quot;P4~%~d ~d~%&quot;</span> n n<span class="sym">)</span>
      <span class="sym">(</span>render n stream<span class="sym">)</span>
      <span class="sym">(</span>force<span class="sym">-</span>output stream<span class="sym">))))</span>
