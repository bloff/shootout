<span class="sym">&lt;</span>?php
<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Wing-Chung Leung</span>
<span class="com">   modified by Isaac Gouy</span>
<span class="com">*/</span>

# <span class="kwa">error_reporting</span><span class="sym">(</span>E_STRICT<span class="sym">);</span>

<span class="kwa">define</span> <span class="sym">(</span><span class="str">'IM'</span><span class="sym">,</span> <span class="num">139968</span><span class="sym">);</span>
<span class="kwa">define</span> <span class="sym">(</span><span class="str">'IA'</span><span class="sym">,</span> <span class="num">3877</span><span class="sym">);</span>
<span class="kwa">define</span> <span class="sym">(</span><span class="str">'IC'</span><span class="sym">,</span> <span class="num">29573</span><span class="sym">);</span>

<span class="kwa">function</span> gen_random<span class="sym">(</span><span class="kwb">$max</span><span class="sym">) {</span>
   static <span class="kwb">$last</span> <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>
   <span class="kwa">return</span> <span class="kwb">$max</span> <span class="sym">* (</span><span class="kwb">$last</span> <span class="sym">= (</span><span class="kwb">$last</span> <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> % IM<span class="sym">) /</span> IM<span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* Weighted selection from alphabet */</span>

<span class="kwa">function</span> makeCumulative<span class="sym">(&amp;</span><span class="kwb">$genelist</span><span class="sym">) {</span>
   <span class="kwb">$count</span> <span class="sym">=</span> <span class="kwa">count</span><span class="sym">(</span><span class="kwb">$genelist</span><span class="sym">);</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">1</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$count</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {</span>
      <span class="kwb">$genelist</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">][</span><span class="num">1</span><span class="sym">] +=</span> <span class="kwb">$genelist</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">-</span><span class="num">1</span><span class="sym">][</span><span class="num">1</span><span class="sym">];</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">function</span> selectRandom<span class="sym">(&amp;</span><span class="kwb">$a</span><span class="sym">) {</span>
   <span class="kwb">$r</span> <span class="sym">=</span> gen_random<span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwb">$hi</span> <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">$a</span><span class="sym">);</span>

   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$hi</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$r</span> <span class="sym">&lt;</span> <span class="kwb">$a</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">][</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">return</span> <span class="kwb">$a</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">][</span><span class="num">0</span><span class="sym">];</span>
   <span class="sym">}</span>
   <span class="kwa">return</span> <span class="kwb">$a</span><span class="sym">[</span><span class="kwb">$hi</span><span class="sym">-</span><span class="num">1</span><span class="sym">][</span><span class="num">0</span><span class="sym">];</span>
<span class="sym">}</span>

<span class="com">/* Generate and write FASTA format */</span>

<span class="kwa">define</span> <span class="sym">(</span><span class="str">'LINE_LENGTH'</span><span class="sym">,</span> <span class="num">60</span><span class="sym">);</span>


<span class="kwa">function</span> makeRandomFasta<span class="sym">(</span><span class="kwb">$id</span><span class="sym">,</span> <span class="kwb">$desc</span><span class="sym">, &amp;</span><span class="kwb">$genelist</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">) {</span>
   <span class="kwa">print</span><span class="sym">(</span><span class="str">&quot;&gt;$id $desc</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$todo</span> <span class="sym">=</span> <span class="kwb">$n</span><span class="sym">;</span> <span class="kwb">$todo</span> <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> <span class="kwb">$todo</span> <span class="sym">-=</span> LINE_LENGTH<span class="sym">) {</span>
      <span class="kwb">$pick</span> <span class="sym">=</span> <span class="str">''</span><span class="sym">;</span>
      <span class="kwb">$m</span> <span class="sym">=</span> <span class="kwb">$todo</span> <span class="sym">&lt;</span> LINE_LENGTH ? <span class="kwb">$todo</span> <span class="sym">:</span> LINE_LENGTH<span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$m</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++)</span> <span class="kwb">$pick</span> .<span class="sym">=</span> selectRandom<span class="sym">(&amp;</span><span class="kwb">$genelist</span><span class="sym">);</span>
      <span class="kwb">$pick</span> .<span class="sym">=</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
      <span class="kwa">print</span><span class="sym">(</span> <span class="kwb">$pick</span> <span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">function</span> makeRepeatFasta<span class="sym">(</span><span class="kwb">$id</span><span class="sym">,</span> <span class="kwb">$desc</span><span class="sym">,</span> <span class="kwb">$s</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">) {</span>
   <span class="kwa">echo</span> <span class="str">&quot;&gt;$id $desc</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
   <span class="kwb">$i</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwb">$sLength</span> <span class="sym">=</span> <span class="kwa">strlen</span><span class="sym">(</span><span class="kwb">$s</span><span class="sym">);</span> <span class="kwb">$lineLength</span> <span class="sym">=</span> LINE_LENGTH<span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$n</span> <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$n</span> <span class="sym">&lt;</span> <span class="kwb">$lineLength</span><span class="sym">)</span> <span class="kwb">$lineLength</span> <span class="sym">=</span> <span class="kwb">$n</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$i</span> <span class="sym">+</span> <span class="kwb">$lineLength</span> <span class="sym">&lt;</span> <span class="kwb">$sLength</span><span class="sym">){</span>
         <span class="kwa">print</span><span class="sym">(</span><span class="kwa">substr</span><span class="sym">(</span><span class="kwb">$s</span><span class="sym">,</span><span class="kwb">$i</span><span class="sym">,</span><span class="kwb">$lineLength</span><span class="sym">));</span> <span class="kwa">print</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
         <span class="kwb">$i</span> <span class="sym">+=</span> <span class="kwb">$lineLength</span><span class="sym">;</span>
      <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
         <span class="kwa">print</span><span class="sym">(</span><span class="kwa">substr</span><span class="sym">(</span><span class="kwb">$s</span><span class="sym">,</span><span class="kwb">$i</span><span class="sym">));</span>
         <span class="kwb">$i</span> <span class="sym">=</span> <span class="kwb">$lineLength</span> <span class="sym">- (</span><span class="kwb">$sLength</span> <span class="sym">-</span> <span class="kwb">$i</span><span class="sym">);</span>
         <span class="kwa">print</span><span class="sym">(</span><span class="kwa">substr</span><span class="sym">(</span><span class="kwb">$s</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="kwb">$i</span><span class="sym">));</span> <span class="kwa">print</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
      <span class="sym">}</span>
      <span class="kwb">$n</span> <span class="sym">-=</span> <span class="kwb">$lineLength</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="com">/* Main -- define alphabets, make 3 fragments */</span>

<span class="kwb">$iub</span><span class="sym">=</span><span class="kwa">array</span><span class="sym">(</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),</span>

   <span class="kwa">array</span><span class="sym">(</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
<span class="sym">);</span>

<span class="kwb">$homosapiens</span> <span class="sym">=</span> <span class="kwa">array</span><span class="sym">(</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">),</span>
   <span class="kwa">array</span><span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">)</span>
<span class="sym">);</span>

<span class="kwb">$alu</span> <span class="sym">=</span>
   <span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span> .
   <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span> .
   <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span> .
   <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span> .
   <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span> .
   <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span> .
   <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span><span class="sym">;</span>

<span class="kwb">$n</span> <span class="sym">=</span> <span class="num">1000</span><span class="sym">;</span>

<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$_SERVER</span><span class="sym">[</span><span class="str">'argc'</span><span class="sym">] &gt;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwb">$n</span> <span class="sym">=</span> <span class="kwb">$_SERVER</span><span class="sym">[</span><span class="str">'argv'</span><span class="sym">][</span><span class="num">1</span><span class="sym">];</span>

   makeCumulative<span class="sym">(&amp;</span><span class="kwb">$iub</span><span class="sym">);</span>
   makeCumulative<span class="sym">(&amp;</span><span class="kwb">$homosapiens</span><span class="sym">);</span>

   makeRepeatFasta<span class="sym">(</span><span class="str">'ONE'</span><span class="sym">,</span> <span class="str">'Homo sapiens alu'</span><span class="sym">,</span> <span class="kwb">$alu</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">*</span><span class="num">2</span><span class="sym">);</span>
   makeRandomFasta<span class="sym">(</span><span class="str">'TWO'</span><span class="sym">,</span> <span class="str">'IUB ambiguity codes'</span><span class="sym">,</span> <span class="kwb">$iub</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">*</span><span class="num">3</span><span class="sym">);</span>
   makeRandomFasta<span class="sym">(</span><span class="str">'THREE'</span><span class="sym">,</span> <span class="str">'Homo sapiens frequency'</span><span class="sym">,</span> <span class="kwb">$homosapiens</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">*</span><span class="num">5</span><span class="sym">);</span>
?<span class="sym">&gt;</span>
