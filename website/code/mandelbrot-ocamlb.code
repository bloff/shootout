<span class="com">(*
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * contributed by Christophe TROESTLER
 *
 * Plot the Mandelbrot set [-1.5-i,0.5+i] on an N-by-N bitmap
 * (http://www-info2.informatik.uni-wuerzburg.de/mitarbeiter/wolfram/lehre/bildformate.html#pbm).
 *)</span>


<span class="kwa">let</span> niter <span class="sym">=</span> <span class="num">50
</span><span class="kwa">let</span> limit <span class="sym">=</span> <span class="num">2</span>.

<span class="kwa">let</span> limit2 <span class="sym">=</span> limit <span class="sym">*</span>. limit

<span class="kwa">let</span> add_bit0 cr ci byte <span class="sym">=
</span>  <span class="kwa">let rec</span> loop i zr zi <span class="sym">=
</span>    <span class="kwa">if</span> zr <span class="sym">*</span>. zr <span class="sym">+</span>. zi <span class="sym">*</span>. zi <span class="sym">&gt;</span> limit2 <span class="kwa">then</span> <span class="sym">(</span>byte <span class="kwa">lsl</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">lor</span> <span class="num">0x00
</span>    <span class="kwa">else if</span> i <span class="sym">&gt;</span> niter <span class="kwa">then</span> <span class="sym">(</span>byte <span class="kwa">lsl</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">lor</span> <span class="num">0x01
</span>    <span class="kwa">else</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span>zr <span class="sym">*</span>. zr <span class="sym">-</span>. zi <span class="sym">*</span>. zi <span class="sym">+</span>. cr<span class="sym">) (</span><span class="num">2</span>. <span class="sym">*</span>. zr <span class="sym">*</span>. zi <span class="sym">+</span>. ci<span class="sym">)</span> <span class="kwa">in
</span>  loop <span class="num">1 0</span>. <span class="num">0</span>.

<span class="kwa">let</span> <span class="sym">() =
</span>  <span class="kwa">let</span> w <span class="sym">=</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">in
  let</span> h <span class="sym">=</span> w <span class="kwa">in
  let</span> fw <span class="sym">=</span> <span class="kwb">float</span> w
  <span class="kwa">and</span> fh <span class="sym">=</span> <span class="kwb">float</span> h
  <span class="kwa">and</span> cplmt8 <span class="sym">=</span> <span class="num">8</span> <span class="sym">-</span> w <span class="kwa">mod</span> <span class="num">8</span> <span class="kwa">in
</span>  Printf.printf <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%i %i</span><span class="esc">\n</span><span class="str">&quot;</span> w h<span class="sym">;
</span>  <span class="kwa">let</span> byte <span class="sym">=</span> ref <span class="num">0
</span>  <span class="kwa">and</span> bit <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in
  for</span> y <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> h <span class="num">- 1</span> <span class="kwa">do
    let</span> ci <span class="sym">=</span> <span class="num">2</span>. <span class="sym">*</span>. <span class="kwb">float</span> y <span class="sym">/</span>. fh <span class="sym">-</span>. <span class="num">1</span>. <span class="kwa">in
    for</span> x <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> w <span class="num">- 1</span> <span class="kwa">do
</span>      byte <span class="sym">:=</span> add_bit0 <span class="sym">(</span><span class="num">2</span>. <span class="sym">*</span>. <span class="kwb">float</span> x <span class="sym">/</span>. fw <span class="sym">-</span>. <span class="num">1.5</span><span class="sym">)</span> ci <span class="sym">!</span>byte<span class="sym">;
</span>      incr bit<span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">!</span>bit <span class="sym">=</span> <span class="num">8</span> <span class="kwa">then</span> <span class="sym">(
</span>	output_byte stdout <span class="sym">!</span>byte<span class="sym">;
</span>	byte <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	bit <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
      )
</span>    <span class="kwa">done</span><span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">!</span>bit <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(
</span>      output_byte stdout <span class="sym">(!</span>byte <span class="kwa">lsl</span> cplmt8<span class="sym">);
</span>      byte <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      bit <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
    )
</span>  <span class="kwa">done</span>
