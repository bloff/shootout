<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy (Scala novice)</span>
<span class="com">*/</span>

<span class="kwa">object</span> objinst <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">var</span> n <span class="sym">=</span> toPositiveInt<span class="sym">(</span>args<span class="sym">);</span>

      <span class="kwa">var</span> toggle <span class="sym">=</span> <span class="kwa">new</span> Toggle<span class="sym">(</span>true<span class="sym">);</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">5</span><span class="sym">))</span>
         Console println<span class="sym">(</span> toggle<span class="sym">.</span>activate<span class="sym">.</span>value <span class="sym">);</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">))</span>
         toggle <span class="sym">=</span> <span class="kwa">new</span> Toggle<span class="sym">(</span>true<span class="sym">);</span>

      Console print<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

      <span class="kwa">var</span> ntoggle <span class="sym">=</span> <span class="kwa">new</span> NToggle<span class="sym">(</span>true<span class="sym">,</span><span class="num">3</span><span class="sym">);</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">8</span><span class="sym">))</span>
         Console println<span class="sym">(</span> ntoggle<span class="sym">.</span>activate<span class="sym">.</span>value <span class="sym">);</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">))</span>
         ntoggle <span class="sym">=</span> <span class="kwa">new</span> NToggle<span class="sym">(</span>true<span class="sym">,</span><span class="num">3</span><span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwa">private def</span> toPositiveInt<span class="sym">(</span>s<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> i <span class="sym">=</span>
         <span class="kwa">try</span> <span class="sym">{</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">(</span><span class="num">0</span><span class="sym">)); }</span>
         <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> _ <span class="sym">=&gt;</span> <span class="num">1</span> <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> i<span class="sym">;</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">private class</span> Toggle<span class="sym">(</span>b<span class="sym">:</span> <span class="kwc">Boolean</span><span class="sym">) {</span>
   <span class="kwa">var</span> state <span class="sym">=</span> b<span class="sym">;</span>

   <span class="kwa">def</span> value <span class="sym">=</span> state<span class="sym">;</span>

   <span class="kwa">def</span> activate <span class="sym">= {</span>
      state <span class="sym">= !</span>state<span class="sym">;</span>
      <span class="kwa">this</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">private class</span> NToggle<span class="sym">(</span>b<span class="sym">:</span> <span class="kwc">Boolean</span><span class="sym">,</span> trigger<span class="sym">:</span> Int<span class="sym">)</span>
<span class="kwa">extends</span> Toggle<span class="sym">(</span>b<span class="sym">) {</span>

   <span class="kwa">val</span> toggleTrigger <span class="sym">=</span> trigger<span class="sym">;</span>
   <span class="kwa">var</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   <span class="kwa">override def</span> activate <span class="sym">= {</span>
      count <span class="sym">=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>count <span class="sym">&gt;=</span> toggleTrigger<span class="sym">) {</span>
         state <span class="sym">= !</span>state<span class="sym">;</span>
         count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">this</span>
   <span class="sym">}</span>
<span class="sym">}</span>
