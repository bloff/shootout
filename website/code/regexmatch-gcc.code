<span class="line">    1 </span><span class="com">/* -*- mode: c -*-
</span><span class="line">    2 </span><span class="com"> * $Id: regexmatch-gcc.code,v 1.3 2004-11-11 07:14:04 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> */</span>
<span class="line">    5 </span>
<span class="line">    6 </span><span class="dir">#include &lt;sys/types.h&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;sys/stat.h&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;fcntl.h&gt;
</span><span class="line">    9 </span><span class="dir"></span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="line">   10 </span><span class="dir"></span><span class="dir">#include &lt;pcre.h&gt;
</span><span class="line">   11 </span><span class="dir"></span><span class="dir">#include &lt;string.h&gt;
</span><span class="line">   12 </span><span class="dir"></span>
<span class="line">   13 </span><span class="dir">#define MAXLINES   100
</span><span class="line">   14 </span><span class="dir"></span><span class="dir">#define MAXLINELEN 132
</span><span class="line">   15 </span><span class="dir"></span>
<span class="line">   16 </span><span class="kwb">char</span> <span class="sym">*</span>pattern <span class="sym">=
</span><span class="line">   17 </span><span class="sym"></span><span class="str">&quot;(?:^|[^</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">(])&quot;</span>                <span class="com">/* must be preceeded by non-digit */</span>
<span class="line">   18 </span><span class="str">&quot;(</span><span class="esc">\\</span><span class="str">()?&quot;</span>                        <span class="com">/* match 1: possible initial left paren */</span>
<span class="line">   19 </span><span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>                        <span class="com">/* match 2: area code is 3 digits */</span>
<span class="line">   20 </span><span class="str">&quot;(?(1)</span><span class="esc">\\</span><span class="str">))&quot;</span>                        <span class="com">/* if match1 then match right paren */</span>
<span class="line">   21 </span><span class="str">&quot;[ ]&quot;</span>                                <span class="com">/* area code followed by one space */</span>
<span class="line">   22 </span><span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>                        <span class="com">/* match 3: prefix of 3 digits */</span>
<span class="line">   23 </span><span class="str">&quot;[ -]&quot;</span>                                <span class="com">/* separator is either space or dash */</span>
<span class="line">   24 </span><span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>                <span class="com">/* match 4: last 4 digits */</span>
<span class="line">   25 </span><span class="str">&quot;</span><span class="esc">\\</span><span class="str">D&quot;</span>                                <span class="com">/* must be followed by a non-digit */</span>
<span class="line">   26 </span><span class="sym">;
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym">
</span><span class="line">   29 </span><span class="sym"></span><span class="kwb">int
</span><span class="line">   30 </span><span class="kwb"></span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span><span class="line">   31 </span><span class="sym"></span>    <span class="kwb">int</span> NUM <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   32 </span><span class="sym"></span>    <span class="kwb">int</span> count<span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>    <span class="kwb">char</span> <span class="sym">*</span>cptr <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>    <span class="kwb">char</span> <span class="sym">**</span>phones<span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span>    pcre <span class="sym">*</span>re<span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>    <span class="kwb">int</span> erroffset<span class="sym">;
</span><span class="line">   37 </span><span class="sym"></span>    <span class="kwb">const char</span> <span class="sym">*</span>errptr<span class="sym">;
</span><span class="line">   38 </span><span class="sym"></span>    <span class="kwb">int</span> n<span class="sym">,</span> lines <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   39 </span><span class="sym"></span>    <span class="kwb">char</span> num<span class="sym">[</span><span class="num">256</span><span class="sym">];
</span><span class="line">   40 </span><span class="sym"></span>    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> matchlen<span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span>    <span class="kwb">char</span> <span class="sym">*</span>matchoffset<span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>    <span class="kwb">int</span> nmatches<span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>    <span class="kwb">int</span> <span class="sym">*</span>ovec<span class="sym">,</span> ovecsize<span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>    pcre_extra <span class="sym">*</span>study<span class="sym">;
</span><span class="line">   45 </span><span class="sym">
</span><span class="line">   46 </span><span class="sym"></span>    phones <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">**)</span>malloc<span class="sym">(</span>MAXLINES <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">char</span> <span class="sym">*));
</span><span class="line">   47 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(!</span>phones<span class="sym">) {
</span><span class="line">   48 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;malloc for phones array failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   49 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   50 </span><span class="sym">    }
</span><span class="line">   51 </span><span class="sym"></span>    lines <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span>cptr<span class="sym">) {
</span><span class="line">   53 </span><span class="sym"></span>        phones<span class="sym">[</span>lines<span class="sym">] = (</span><span class="kwb">char</span> <span class="sym">*)</span>malloc<span class="sym">(</span>MAXLINELEN<span class="sym">);
</span><span class="line">   54 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(!</span>phones<span class="sym">[</span>lines<span class="sym">]) {
</span><span class="line">   55 </span><span class="sym"></span>            fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;malloc to hold line #%d failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> lines<span class="sym">);
</span><span class="line">   56 </span><span class="sym"></span>            exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   57 </span><span class="sym">        }
</span><span class="line">   58 </span><span class="sym"></span>        cptr <span class="sym">=</span> fgets<span class="sym">(</span>phones<span class="sym">[</span>lines<span class="sym">],</span> MAXLINELEN<span class="sym">,</span> stdin<span class="sym">);
</span><span class="line">   59 </span><span class="sym"></span>        lines<span class="sym">++;
</span><span class="line">   60 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>lines <span class="sym">&gt;</span> MAXLINES<span class="sym">) {
</span><span class="line">   61 </span><span class="sym"></span>            fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;MAXLINES is too small</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   62 </span><span class="sym"></span>            exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   63 </span><span class="sym">        }
</span><span class="line">   64 </span><span class="sym">    }
</span><span class="line">   65 </span><span class="sym">
</span><span class="line">   66 </span><span class="sym"></span>    re <span class="sym">=</span> pcre_compile<span class="sym">(</span>pattern<span class="sym">,</span> <span class="num">0</span><span class="sym">, &amp;</span>errptr<span class="sym">, &amp;</span>erroffset<span class="sym">,</span> NULL<span class="sym">);
</span><span class="line">   67 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(!</span>re<span class="sym">) {
</span><span class="line">   68 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;can't open compile regexp</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   69 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   70 </span><span class="sym">    }
</span><span class="line">   71 </span><span class="sym">
</span><span class="line">   72 </span><span class="sym"></span>    study <span class="sym">=</span> pcre_study<span class="sym">(</span>re<span class="sym">,</span> <span class="num">0</span><span class="sym">, &amp;</span>errptr<span class="sym">);
</span><span class="line">   73 </span><span class="sym">
</span><span class="line">   74 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>pcre_fullinfo<span class="sym">(</span>re<span class="sym">,</span> NULL<span class="sym">,</span> PCRE_INFO_CAPTURECOUNT<span class="sym">, &amp;</span>nmatches<span class="sym">) !=</span> <span class="num">0</span><span class="sym">) {
</span><span class="line">   75 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;pcre_fullinfo failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   76 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   77 </span><span class="sym">    }
</span><span class="line">   78 </span><span class="sym"></span>    nmatches<span class="sym">++;</span>                        <span class="com">/* add match of entire pattern */</span>
<span class="line">   79 </span>
<span class="line">   80 </span>    ovecsize <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">) *</span> nmatches <span class="sym">*</span> <span class="num">3</span><span class="sym">;
</span><span class="line">   81 </span><span class="sym"></span>    ovec <span class="sym">= (</span><span class="kwb">int</span> <span class="sym">*)</span>malloc<span class="sym">(</span>ovecsize<span class="sym">);
</span><span class="line">   82 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(!</span>ovec<span class="sym">) {
</span><span class="line">   83 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;malloc for ovec array failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   84 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   85 </span><span class="sym">    }
</span><span class="line">   86 </span><span class="sym">
</span><span class="line">   87 </span><span class="sym"></span>    count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   88 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span>NUM<span class="sym">--) {
</span><span class="line">   89 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>lines<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   90 </span><span class="sym"></span>            n <span class="sym">=</span> pcre_exec<span class="sym">(</span>re<span class="sym">,</span> study<span class="sym">,
</span><span class="line">   91 </span><span class="sym"></span>                          phones<span class="sym">[</span>i<span class="sym">],</span> strlen<span class="sym">(</span>phones<span class="sym">[</span>i<span class="sym">]),</span> <span class="num">0</span><span class="sym">,
</span><span class="line">   92 </span><span class="sym"></span>                          <span class="num">0</span><span class="sym">,</span> ovec<span class="sym">,</span> ovecsize<span class="sym">);
</span><span class="line">   93 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> nmatches<span class="sym">) {
</span><span class="line">   94 </span><span class="sym"></span>                <span class="com">/* stuff the match into the buffer &quot;num&quot; */</span>
<span class="line">   95 </span>                k <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span><span class="num">2</span><span class="sym">;</span>        <span class="com">/* initial offset into ovec */</span>
<span class="line">   96 </span>                <span class="com">/* areacode */</span>
<span class="line">   97 </span>                j <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   98 </span><span class="sym"></span>                num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">'('</span><span class="sym">;
</span><span class="line">   99 </span><span class="sym"></span>                matchoffset <span class="sym">=</span> phones<span class="sym">[</span>i<span class="sym">] +</span> ovec<span class="sym">[</span>k<span class="sym">];
</span><span class="line">  100 </span><span class="sym"></span>                matchlen <span class="sym">=</span> ovec<span class="sym">[</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] -</span> ovec<span class="sym">[</span>k<span class="sym">];
</span><span class="line">  101 </span><span class="sym"></span>                strncpy<span class="sym">(</span>num<span class="sym">+</span>j<span class="sym">,</span> matchoffset<span class="sym">,</span> matchlen<span class="sym">);
</span><span class="line">  102 </span><span class="sym"></span>                j <span class="sym">+=</span> matchlen<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">;
</span><span class="line">  103 </span><span class="sym"></span>                num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">')'</span><span class="sym">;
</span><span class="line">  104 </span><span class="sym"></span>                <span class="com">/* space separator */</span>
<span class="line">  105 </span>                num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">' '</span><span class="sym">;
</span><span class="line">  106 </span><span class="sym"></span>                <span class="com">/* exchange */</span>
<span class="line">  107 </span>                matchoffset <span class="sym">=</span> phones<span class="sym">[</span>i<span class="sym">] +</span> ovec<span class="sym">[</span>k<span class="sym">];
</span><span class="line">  108 </span><span class="sym"></span>                matchlen <span class="sym">=</span> ovec<span class="sym">[</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] -</span> ovec<span class="sym">[</span>k<span class="sym">];
</span><span class="line">  109 </span><span class="sym"></span>                strncpy<span class="sym">(</span>num<span class="sym">+</span>j<span class="sym">,</span> matchoffset<span class="sym">,</span> matchlen<span class="sym">);
</span><span class="line">  110 </span><span class="sym"></span>                j <span class="sym">+=</span> matchlen<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">;
</span><span class="line">  111 </span><span class="sym"></span>                <span class="com">/* dash */</span>
<span class="line">  112 </span>                num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">'-'</span><span class="sym">;
</span><span class="line">  113 </span><span class="sym"></span>                <span class="com">/* last 4 digits */</span>
<span class="line">  114 </span>                matchoffset <span class="sym">=</span> phones<span class="sym">[</span>i<span class="sym">] +</span> ovec<span class="sym">[</span>k<span class="sym">];
</span><span class="line">  115 </span><span class="sym"></span>                matchlen <span class="sym">=</span> ovec<span class="sym">[</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] -</span> ovec<span class="sym">[</span>k<span class="sym">];
</span><span class="line">  116 </span><span class="sym"></span>                strncpy<span class="sym">(</span>num<span class="sym">+</span>j<span class="sym">,</span> matchoffset<span class="sym">,</span> matchlen<span class="sym">);
</span><span class="line">  117 </span><span class="sym"></span>                j <span class="sym">+=</span> matchlen<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">;
</span><span class="line">  118 </span><span class="sym"></span>                <span class="com">/* with a cherry on top */</span>
<span class="line">  119 </span>                num<span class="sym">[</span>j<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  120 </span><span class="sym"></span>                <span class="kwa">if</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">==</span> NUM<span class="sym">) {
</span><span class="line">  121 </span><span class="sym"></span>                    count<span class="sym">++;
</span><span class="line">  122 </span><span class="sym"></span>                    printf<span class="sym">(</span><span class="str">&quot;%d: %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> count<span class="sym">,</span> num<span class="sym">);
</span><span class="line">  123 </span><span class="sym">                }
</span><span class="line">  124 </span><span class="sym">            }
</span><span class="line">  125 </span><span class="sym">        }
</span><span class="line">  126 </span><span class="sym">    }
</span><span class="line">  127 </span><span class="sym">
</span><span class="line">  128 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>MAXLINES<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">  129 </span><span class="sym"></span>        free<span class="sym">(</span>phones<span class="sym">[</span>i<span class="sym">]);
</span><span class="line">  130 </span><span class="sym">    }
</span><span class="line">  131 </span><span class="sym"></span>    free<span class="sym">(</span>phones<span class="sym">);
</span><span class="line">  132 </span><span class="sym"></span>    free<span class="sym">(</span>ovec<span class="sym">);
</span><span class="line">  133 </span><span class="sym">
</span><span class="line">  134 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">  135 </span><span class="sym">}
</span><span class="line">  136 </span><span class="sym"></span>
