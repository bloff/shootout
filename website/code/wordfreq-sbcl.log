BUILD COMMANDS FOR: wordfreq.sbcl

Mon Apr  4 01:32:41 PDT 2005

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "wordfreq.sbcl_compile")'
### START wordfreq.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "wordfreq.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END wordfreq.sbcl_compile

; compiling file "/opt/shootout/shootout/bench/wordfreq/tmp/wordfreq.sbcl" (written 04 APR 2005 01:32:41 AM):
; compiling (DECLAIM (OPTIMIZE # ...))
; compiling (DEFUN MAIN ...)

; file: /opt/shootout/shootout/bench/wordfreq/tmp/wordfreq.sbcl
; in: DEFUN MAIN
;     (THE SIMPLE-BASE-STRING NEW-BUFFER)
; 
; note: deleting unreachable code

;     (SETF BUFFER NEW-BUFFER)
; --> SETQ THE 
; ==>
;   NEW-BUFFER
; 
; note: deleting unreachable code

;     (LET* ((H (MAKE-HASH-TABLE :TEST 'EQUAL :SIZE 3380 :REHASH-THRESHOLD 1.0))
;          (BUFFER (MAKE-STRING 10)))
;     (DECLARE (INLINE GETHASH MAPHASH))
;     (DECLARE (TYPE SIMPLE-BASE-STRING BUFFER))
;     (LOOP (SETF BUFFER (READER BUFFER))
;           (IF (NOT EOF) (IF (= 1 #) (SETF BUFFER #)) (RETURN)))
;     (LET ((L 'NIL))
;       (MAPHASH #'(LAMBDA (KEY VAL) (PUSH # L)) H)
;       (SETF L (SORT L #'(LAMBDA # #)))
;       (MAPCAR #'(LAMBDA (P) (FORMAT T "~7D ~A~&" # #)) L)))
; 
; note: deleting unreachable code

;     (= FILL-PTR SIZE)
; ==>
;   FILL-PTR
; 
; note: deleting unreachable code

;     (SETF (SCHAR BUFFER FILL-PTR) (CODE-CHAR CURRENT))
; --> SB-KERNEL:%SCHARSET SB-KERNEL:%ASET 
; ==>
;   FILL-PTR
; 
; note: deleting unreachable code

;     (INCF FILL-PTR)
; --> LET* + 
; ==>
;   FILL-PTR
; 
; note: deleting unreachable code

;     (WORD-CONSTITUENT-P)
; 
; note: deleting unreachable code

;     (SB-KERNEL:SHRINK-VECTOR BUFFER FILL-PTR)
; ==>
;   BUFFER
; 
; note: deleting unreachable code

;     (INCF (THE FIXNUM (GETHASH BUFFER H 0)))
; --> LET* 
; ==>
;   BUFFER
; 
; note: deleting unreachable code

;     (= 1 (THE FIXNUM (INCF (THE FIXNUM (GETHASH BUFFER H 0)))))
; 
; note: deleting unreachable code

;     (MAKE-STRING 10)
; 
; note: deleting unreachable code
; 
; note: deleting unreachable code
; 
; note: deleting unreachable code

;     (READER BUFFER)
; ==>
;   BUFFER
; 
; note: deleting unreachable code

;     (LET ((NEW-BUFFER (MAKE-STRING (THE FIXNUM #))))
;     (SETF (SUBSEQ (THE SIMPLE-BASE-STRING NEW-BUFFER) 0 FILL-PTR) BUFFER)
;     (SETF BUFFER NEW-BUFFER))
; 
; note: deleting unreachable code
; 
; note: deleting unreachable code

;     (LABELS ((GET-CHAR ()
;              (WHEN (= START END) (SETF START 0) (SETF END #) (WHEN # # #))
;              (SETF CURRENT (AREF INPUTBUFFER START))
;              (INCF START))
;            (WORD-CONSTITUENT-P ()
;              (OR (AND # #) (AND # # #)))
;            (READER (BUFFER)
;              (DECLARE (TYPE SIMPLE-BASE-STRING BUFFER))
;              (LET* (# #)
;                (DECLARE #)
;                (LOOP WHILE #)
;                (LOOP # # # #)
;                (SB-KERNEL:SHRINK-VECTOR BUFFER FILL-PTR))))
;     (LET* ((H (MAKE-HASH-TABLE :TEST 'EQUAL :SIZE 3380 :REHASH-THRESHOLD 1.0))
;            (BUFFER (MAKE-STRING 10)))
;       (DECLARE (INLINE GETHASH MAPHASH))
;       (DECLARE (TYPE SIMPLE-BASE-STRING BUFFER))
;       (LOOP (SETF BUFFER (READER BUFFER)) (IF (NOT EOF) (IF # #) (RETURN)))
;       (LET ((L 'NIL))
;         (MAPHASH #'(LAMBDA # #) H)
;         (SETF L (SORT L #'#))
;         (MAPCAR #'(LAMBDA # #) L))))
; 
; note: deleting unreachable code

;     (LET* ((SIZE (LENGTH BUFFER)) (FILL-PTR 0))
;     (DECLARE (TYPE (INTEGER 0 1000) SIZE FILL-PTR))
;     (LOOP WHILE
;           (AND (OR (GET-CHAR) (RETURN-FROM READER BUFFER))
;                (NOT (WORD-CONSTITUENT-P))))
;     (LOOP
;      (WHEN (= FILL-PTR SIZE)
;        (LET (#)
;          (SETF # BUFFER)
;          (SETF BUFFER NEW-BUFFER)))
;      (SETF (SCHAR BUFFER FILL-PTR) (CODE-CHAR CURRENT))
;      (INCF FILL-PTR)
;      (IF (GET-CHAR) (IF (NOT #) (RETURN)) (RETURN)))
;     (SB-KERNEL:SHRINK-VECTOR BUFFER FILL-PTR))
; 
; note: deleting unreachable code

;     (WORD-CONSTITUENT-P)
; 
; note: deleting unreachable code

;     (GET-CHAR)
; 
; note: deleting unreachable code

;     (RETURN-FROM READER BUFFER)
; ==>
;   BUFFER
; 
; note: deleting unreachable code

;     (NOT EOF)
; --> IF 
; ==>
;   EOF
; 
; note: deleting unreachable code

;     (LET ((L 'NIL))
;     (MAPHASH #'(LAMBDA (KEY VAL) (PUSH (CONS KEY VAL) L)) H)
;     (SETF L (SORT L #'(LAMBDA (V1 V2) (IF # T #))))
;     (MAPCAR #'(LAMBDA (P) (FORMAT T "~7D ~A~&" (CDR P) (CAR P))) L))
; 
; note: deleting unreachable code

;     (SORT L
;         #'(LAMBDA (V1 V2)
;             (IF (> (THE FIXNUM #) (THE FIXNUM #))
;                 T
;                 (IF (= # #) (STRING-LESSP # #) NIL))))
; ==>
;   L
; 
; note: deleting unreachable code

;     (MAPCAR #'(LAMBDA (P) (FORMAT T "~7D ~A~&" (CDR P) (CAR P))) L)
; --> LET SB-INT:DO-ANONYMOUS BLOCK LET 
; ==>
;   L
; 
; note: deleting unreachable code

;     (LET* ((H (MAKE-HASH-TABLE :TEST 'EQUAL :SIZE 3380 :REHASH-THRESHOLD 1.0))
;          (BUFFER (MAKE-STRING 10)))
;     (DECLARE (INLINE GETHASH MAPHASH))
;     (DECLARE (TYPE SIMPLE-BASE-STRING BUFFER))
;     (LOOP (SETF BUFFER (READER BUFFER))
;           (IF (NOT EOF) (IF (= 1 #) (SETF BUFFER #)) (RETURN)))
;     (LET ((L 'NIL))
;       (MAPHASH #'(LAMBDA (KEY VAL) (PUSH # L)) H)
;       (SETF L (SORT L #'(LAMBDA # #)))
;       (MAPCAR #'(LAMBDA (P) (FORMAT T "~7D ~A~&" # #)) L)))
; 
; caught WARNING:
;   Asserted type SIMPLE-BASE-STRING conflicts with derived type
;   (VALUES (SIMPLE-ARRAY CHARACTER (10)) &OPTIONAL).
;   See also:
;     The SBCL Manual, Node "Handling of Types"
; 
; compilation unit finished
;   caught 1 WARNING condition
;   printed 25 notes

; /opt/shootout/shootout/bench/wordfreq/tmp/wordfreq.fasl written
; compilation finished in 0:00:01
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/wordfreq/tmp/sbcl.core:
writing 18608424 bytes from the read-only space at 0x01000000
writing 7184784 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START wordfreq.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END wordfreq.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load wordfreq.sbcl_run %A


PROGRAM OUTPUT
==============
