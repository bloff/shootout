<span class="slc">%   The Great Computer Language Shootout
</span><span class="slc">%   http://shootout.alioth.debian.org/
</span><span class="slc">%
</span><span class="slc">%   contributed by Mark Scandariato
</span><span class="slc">%
</span><span class="slc">%   erl -noshell -noinput -run josephus-2 main 41
</span>
<span class="sym">-</span>module<span class="sym">(</span>josephus<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.
<span class="sym">-</span>compile<span class="sym">(</span>export_all<span class="sym">)</span>.

main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span>    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),
</span>    main<span class="sym">(</span>N<span class="sym">),
</span>    erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">();
</span>main<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">when</span> N <span class="sym">&gt;</span> <span class="num">1</span> <span class="sym">-&gt;
</span>    L <span class="sym">=</span> lists<span class="sym">:</span>seq<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>N<span class="sym">),
</span>    lists<span class="sym">:</span>foreach<span class="sym">(</span><span class="kwa">fun</span><span class="sym">(</span>M<span class="sym">) -&gt;</span> j<span class="sym">(</span>M<span class="sym">,</span> L<span class="sym">, [],</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">end</span><span class="sym">,</span> lists<span class="sym">:</span>seq<span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="num">10</span><span class="sym">))</span>.

j<span class="sym">(</span>M<span class="sym">,</span> L<span class="sym">, [],</span> _<span class="sym">)</span> <span class="kwa">when</span> <span class="kwb">length</span><span class="sym">(</span>L<span class="sym">) &lt;</span> M <span class="sym">-&gt;</span> print<span class="sym">(</span>L<span class="sym">);
</span>j<span class="sym">(</span>M<span class="sym">, [],</span> R<span class="sym">,</span> P<span class="sym">) -&gt;</span> j<span class="sym">(</span>M<span class="sym">,</span> lists<span class="sym">:</span>reverse<span class="sym">(</span>R<span class="sym">), [],</span> P<span class="sym">);
</span>j<span class="sym">(</span>M<span class="sym">, [</span>_<span class="sym">|</span>T<span class="sym">],</span> R<span class="sym">,</span> M<span class="sym">) -&gt;</span> j<span class="sym">(</span>M<span class="sym">,</span> T<span class="sym">,</span> R<span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span>j<span class="sym">(</span>M<span class="sym">, [</span>H<span class="sym">|</span>T<span class="sym">],</span> R<span class="sym">,</span> P<span class="sym">) -&gt;</span> j<span class="sym">(</span>M<span class="sym">,</span> T<span class="sym">, [</span>H<span class="sym">|</span>R<span class="sym">],</span> P<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>.

print<span class="sym">([]) -&gt;</span> io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~n&quot;</span><span class="sym">);
</span>print<span class="sym">([</span>H<span class="sym">|</span>T<span class="sym">]) -&gt;
</span>    io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~p</span><span class="esc">\t</span><span class="str">&quot;</span><span class="sym">, [</span>H<span class="sym">]),
</span>    print<span class="sym">(</span>T<span class="sym">)</span>.

<span class="slc">% vim: ts=4 ft=erlang</span>
