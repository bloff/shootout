<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   unoptimised reference implementation

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;

</span><span class="kwc">class</span> Bottles
<span class="sym">{

</span>   <span class="kwc">public</span> <span class="kwb">static void</span> Main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">)
   {
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>      Bottle
         b1 <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> b2 <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span><span class="num">2</span><span class="sym">),
</span>         b3 <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span><span class="num">3</span><span class="sym">),</span> b4 <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span><span class="num">4</span><span class="sym">),
</span>         b5 <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span><span class="num">5</span><span class="sym">),</span> b6 <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span><span class="num">6</span><span class="sym">),
</span>         b7 <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span><span class="num">7</span><span class="sym">),</span> b8 <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span><span class="num">8</span><span class="sym">),
</span>         b9 <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span><span class="num">9</span><span class="sym">),</span> b0 <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span><span class="num">0</span><span class="sym">);

</span>      PressurizedBottle
         p1 <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> p2 <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span><span class="num">2</span><span class="sym">),
</span>         p3 <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span><span class="num">3</span><span class="sym">),</span> p4 <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span><span class="num">4</span><span class="sym">),
</span>         p5 <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span><span class="num">5</span><span class="sym">),</span> p6 <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span><span class="num">6</span><span class="sym">),
</span>         p7 <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span><span class="num">7</span><span class="sym">),</span> p8 <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span><span class="num">8</span><span class="sym">),
</span>         p9 <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span><span class="num">9</span><span class="sym">),</span> p0 <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span><span class="num">0</span><span class="sym">);

</span>      <span class="kwb">int</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++){
</span>         check <span class="sym">+=</span> bottleCheck<span class="sym">(</span>b1<span class="sym">,</span>b2<span class="sym">,</span>b3<span class="sym">,</span>b4<span class="sym">,</span>b5<span class="sym">,</span>i<span class="sym">);
</span>         check <span class="sym">+=</span> bottleCheck<span class="sym">(</span>b6<span class="sym">,</span>b7<span class="sym">,</span>b8<span class="sym">,</span>b9<span class="sym">,</span>b0<span class="sym">,</span>i<span class="sym">);

</span>         check <span class="sym">+=</span> bottleCheck<span class="sym">(</span>p1<span class="sym">,</span>p2<span class="sym">,</span>p3<span class="sym">,</span>p4<span class="sym">,</span>p5<span class="sym">,</span>i<span class="sym">);
</span>         check <span class="sym">-=</span> bottleCheck<span class="sym">(</span>p6<span class="sym">,</span>p7<span class="sym">,</span>p8<span class="sym">,</span>p9<span class="sym">,</span>p0<span class="sym">,</span>i<span class="sym">);
      }
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;check: {0}&quot;</span><span class="sym">,</span> check<span class="sym">);
   }


</span>   <span class="kwc">public</span> <span class="kwb">static int</span> bottleCheck<span class="sym">(</span>Bottle a1<span class="sym">,</span> Bottle a2<span class="sym">,</span> Bottle a3<span class="sym">,</span> Bottle a4<span class="sym">,</span> Bottle a5<span class="sym">,</span> <span class="kwb">int</span> i<span class="sym">){
</span>      a1<span class="sym">.</span>cycle<span class="sym">();</span> a2<span class="sym">.</span>cycle<span class="sym">();</span> a3<span class="sym">.</span>cycle<span class="sym">();</span> a4<span class="sym">.</span>cycle<span class="sym">();</span> a5<span class="sym">.</span>cycle<span class="sym">();

</span>      <span class="kwb">int</span> c <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      Math<span class="sym">.</span>DivRem<span class="sym">(</span>i<span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> out c<span class="sym">);
</span>      <span class="kwa">return</span> a1<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a2<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a3<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a4<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a5<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">);
   }


</span>   internal interface IBottle
   <span class="sym">{
</span>      <span class="kwb">void</span> state<span class="sym">(</span>BottleState s<span class="sym">);
   }

</span>   internal abstract <span class="kwc">class</span> BottleState
   <span class="sym">{
</span>      internal <span class="kwb">static</span> EmptyState Empty <span class="sym">=</span> <span class="kwa">new</span> EmptyState<span class="sym">();
</span>      internal <span class="kwb">static</span> FullState Full <span class="sym">=</span> <span class="kwa">new</span> FullState<span class="sym">();
</span>      internal <span class="kwb">static</span> SealedState Sealed <span class="sym">=</span> <span class="kwa">new</span> SealedState<span class="sym">();

</span>      abstract internal <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">);
</span>      abstract internal <span class="kwb">int</span> tag<span class="sym">();
</span>      internal <span class="kwb">static</span> BottleState initialState<span class="sym">(){</span> <span class="kwa">return</span> Empty<span class="sym">; }

</span>      internal <span class="kwc">class</span> EmptyState <span class="sym">:</span> BottleState <span class="sym">{
</span>         override internal <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">){</span> b<span class="sym">.</span>state<span class="sym">(</span>Full<span class="sym">); }
</span>         override internal <span class="kwb">int</span> tag<span class="sym">(){</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">; }
      }

</span>      internal <span class="kwc">class</span> FullState <span class="sym">:</span> BottleState <span class="sym">{
</span>         override internal <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">){</span> b<span class="sym">.</span>state<span class="sym">(</span>Sealed<span class="sym">); }
</span>         override internal <span class="kwb">int</span> tag<span class="sym">(){</span> <span class="kwa">return</span> <span class="num">2</span><span class="sym">; }
      }

</span>      internal <span class="kwc">class</span> SealedState <span class="sym">:</span> BottleState <span class="sym">{
</span>         override internal <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">){</span> b<span class="sym">.</span>state<span class="sym">(</span>Empty<span class="sym">); }
</span>         override internal <span class="kwb">int</span> tag<span class="sym">(){</span> <span class="kwa">return</span> <span class="num">3</span><span class="sym">; }
      }
   }


</span>   abstract internal <span class="kwc">class</span> PressurizedBottleState <span class="sym">:</span> BottleState
   <span class="sym">{
</span>      internal <span class="kwb">static</span> UnpressurizedEmptyState UnpressurizedEmpty <span class="sym">=</span> <span class="kwa">new</span> UnpressurizedEmptyState<span class="sym">();
</span>      internal <span class="kwb">static</span> UnpressurizedFullState UnpressurizedFull <span class="sym">=</span> <span class="kwa">new</span> UnpressurizedFullState<span class="sym">();
</span>      internal <span class="kwb">static</span> PressurizedUnsealedState PressurizedUnsealed <span class="sym">=</span> <span class="kwa">new</span> PressurizedUnsealedState<span class="sym">();
</span>      internal <span class="kwb">static</span> PressurizedSealedState PressurizedSealed <span class="sym">=</span> <span class="kwa">new</span> PressurizedSealedState<span class="sym">();

</span>      <span class="kwa">new</span> internal <span class="kwb">static</span> BottleState initialState<span class="sym">(){
</span>         <span class="kwa">return</span> UnpressurizedEmpty<span class="sym">;
      }

</span>      internal <span class="kwc">class</span> UnpressurizedEmptyState <span class="sym">:</span> PressurizedBottleState <span class="sym">{
</span>         override internal <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">){</span> b<span class="sym">.</span>state<span class="sym">(</span>UnpressurizedFull<span class="sym">); }
</span>         override internal <span class="kwb">int</span> tag<span class="sym">(){</span> <span class="kwa">return</span> <span class="num">4</span><span class="sym">; }
      }

</span>      internal <span class="kwc">class</span> UnpressurizedFullState <span class="sym">:</span> PressurizedBottleState <span class="sym">{
</span>         override internal <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">){</span> b<span class="sym">.</span>state<span class="sym">(</span>PressurizedUnsealed<span class="sym">); }
</span>         override internal <span class="kwb">int</span> tag<span class="sym">(){</span> <span class="kwa">return</span> <span class="num">5</span><span class="sym">; }
      }

</span>      internal <span class="kwc">class</span> PressurizedUnsealedState <span class="sym">:</span> PressurizedBottleState <span class="sym">{
</span>         override internal <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">){</span> b<span class="sym">.</span>state<span class="sym">(</span>Sealed<span class="sym">); }
</span>         override internal <span class="kwb">int</span> tag<span class="sym">(){</span> <span class="kwa">return</span> <span class="num">6</span><span class="sym">; }
      }

</span>      internal <span class="kwc">class</span> PressurizedSealedState <span class="sym">:</span> PressurizedBottleState <span class="sym">{
</span>         override internal <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">){</span> b<span class="sym">.</span>state<span class="sym">(</span>UnpressurizedEmpty<span class="sym">); }
</span>         override internal <span class="kwb">int</span> tag<span class="sym">(){</span> <span class="kwa">return</span> <span class="num">7</span><span class="sym">; }
      }
   }



</span>   internal <span class="kwc">class</span> Bottle <span class="sym">:</span> IBottle
   <span class="sym">{
</span>      <span class="kwc">protected</span> BottleState s<span class="sym">;
</span>      <span class="kwc">protected</span> <span class="kwb">int</span> id<span class="sym">;

</span>      <span class="kwc">public</span> Bottle<span class="sym">(</span><span class="kwb">int</span> id<span class="sym">){
</span>         <span class="kwa">this</span><span class="sym">.</span>id <span class="sym">=</span> id<span class="sym">;
</span>         s <span class="sym">=</span> initialState<span class="sym">();
      }

</span>      <span class="kwc">public</span> <span class="kwb">void</span> state<span class="sym">(</span>BottleState s<span class="sym">){</span> <span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> s<span class="sym">; }

</span>      internal <span class="kwc">virtual</span> <span class="kwb">void</span> cycle<span class="sym">(){
</span>         fill<span class="sym">();</span> seal<span class="sym">();</span> empty<span class="sym">();
      }

</span>      internal <span class="kwb">static</span> BottleState initialState<span class="sym">(){
</span>         <span class="kwa">return</span> BottleState<span class="sym">.</span>initialState<span class="sym">();
      }

</span>      <span class="kwc">protected</span> <span class="kwb">void</span> empty<span class="sym">(){</span> s<span class="sym">.</span>next<span class="sym">(</span><span class="kwa">this</span><span class="sym">); }
</span>      <span class="kwc">protected</span> <span class="kwb">void</span> fill<span class="sym">(){</span> s<span class="sym">.</span>next<span class="sym">(</span><span class="kwa">this</span><span class="sym">); }
</span>      <span class="kwc">protected</span> <span class="kwb">void</span> seal<span class="sym">(){</span> s<span class="sym">.</span>next<span class="sym">(</span><span class="kwa">this</span><span class="sym">); }

</span>      internal <span class="kwb">int</span> check<span class="sym">(</span><span class="kwb">int</span> c<span class="sym">){</span> <span class="kwa">return</span> s<span class="sym">.</span>tag<span class="sym">() +</span> id <span class="sym">+</span> c<span class="sym">; }
   }


</span>   <span class="kwc">class</span> PressurizedBottle <span class="sym">:</span> Bottle
   <span class="sym">{
</span>      <span class="kwc">public</span> PressurizedBottle<span class="sym">(</span><span class="kwb">int</span> id<span class="sym">) :</span> base<span class="sym">(</span>id<span class="sym">){}

</span>      <span class="kwa">new</span> internal <span class="kwb">static</span> BottleState initialState<span class="sym">(){
</span>         <span class="kwa">return</span> PressurizedBottleState<span class="sym">.</span>initialState<span class="sym">();
      }

</span>      <span class="kwb">void</span> pressurize<span class="sym">(){</span> s<span class="sym">.</span>next<span class="sym">(</span><span class="kwa">this</span><span class="sym">); }

</span>      internal override <span class="kwb">void</span> cycle<span class="sym">(){
</span>         fill<span class="sym">();</span> pressurize<span class="sym">();</span> seal<span class="sym">();</span> empty<span class="sym">();
      }
   }
}</span>
