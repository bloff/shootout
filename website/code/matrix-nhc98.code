<span class="line">    1 </span><span class="slc">-- $Id: matrix-nhc98.code,v 1.3 2004-11-11 07:14:00 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- originally from Julian Assange, but
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- rewritten by Malcolm Wallace
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="kwa">module</span> Main<span class="sym">(</span>main<span class="sym">)</span> <span class="kwa">where
</span><span class="line">    7 </span><span class="kwa">import</span> System<span class="sym">(</span>getArgs<span class="sym">,</span> exitWith<span class="sym">,</span> ExitCode<span class="sym">(</span>..<span class="sym">))
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">import</span> Numeric<span class="sym">(</span>readDec<span class="sym">)
</span><span class="line">    9 </span><span class="sym"></span><span class="kwa">import</span> List<span class="sym">(</span>transpose<span class="sym">)
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span>main <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   12 </span><span class="kwa"></span>       arg <span class="sym">&lt;-</span> getArgs
<span class="line">   13 </span>       <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">case</span> arg <span class="kwa">of</span> <span class="sym">[</span>n<span class="sym">] -&gt; (</span>fst.head.readDec<span class="sym">)</span> n<span class="sym">;</span> _ <span class="sym">-&gt;</span> <span class="num">1
</span><span class="line">   14 </span><span class="num"></span>           m1 <span class="sym">=</span> mkmat size
<span class="line">   15 </span>           m2 <span class="sym">=</span> m1
<span class="line">   16 </span>           mm <span class="sym">=</span> strictlast <span class="sym">(</span>zipWith mmult <span class="sym">(</span>replicate n m1<span class="sym">) (</span>replicate n m2<span class="sym">))
</span><span class="line">   17 </span><span class="sym"></span>       putStrLn <span class="sym">(</span>disp mm <span class="num">0 0</span> <span class="sym">++</span> <span class="str">&quot; &quot;</span> <span class="sym">++
</span><span class="line">   18 </span><span class="sym"></span>                  disp mm <span class="num">3 2</span> <span class="sym">++</span> <span class="str">&quot; &quot;</span> <span class="sym">++
</span><span class="line">   19 </span><span class="sym"></span>                  disp mm <span class="num">2 3</span> <span class="sym">++</span> <span class="str">&quot; &quot;</span> <span class="sym">++
</span><span class="line">   20 </span><span class="sym"></span>                  disp mm <span class="num">4 4</span><span class="sym">)
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwa">where
</span><span class="line">   22 </span><span class="kwa"></span>          disp m row col  <span class="sym">=</span> show <span class="sym">(</span>m<span class="sym">!!</span>row<span class="sym">!!</span>col<span class="sym">)
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span>strictlast <span class="sym">[</span>x<span class="sym">] =</span> x
<span class="line">   25 </span>strictlast <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) |</span> force x <span class="sym">=</span> strictlast xs
<span class="line">   26 </span>force <span class="sym">[] =</span> <span class="kwa">True
</span><span class="line">   27 </span><span class="kwa"></span>force <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) |</span> inner x <span class="sym">=</span> force xs
<span class="line">   28 </span>inner <span class="sym">[] =</span> <span class="kwa">True
</span><span class="line">   29 </span><span class="kwa"></span>inner <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) =</span> x `seq` inner xs
<span class="line">   30 </span>
<span class="line">   31 </span>size <span class="sym">=</span> <span class="num">30
</span><span class="line">   32 </span><span class="num"></span>mkmat x    <span class="sym">= [[(</span>y<span class="num">-1</span><span class="sym">)*</span>x<span class="sym">+</span><span class="num">1</span>..y<span class="sym">*</span>x<span class="sym">]|</span> y <span class="sym">&lt;- [</span><span class="num">1</span>..x<span class="sym">]]
</span><span class="line">   33 </span><span class="sym"></span>mmult a b  <span class="sym">= [[</span>dot row col <span class="num">0</span> <span class="sym">|</span> col <span class="sym">&lt;-</span> a<span class="sym">]|</span> row <span class="sym">&lt;-</span> transpose b<span class="sym">]
</span><span class="line">   34 </span><span class="sym"></span>       <span class="kwa">where
</span><span class="line">   35 </span><span class="kwa"></span>               dot <span class="sym">:: [</span><span class="kwb">Int</span><span class="sym">] -&gt; [</span><span class="kwb">Int</span><span class="sym">] -&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int
</span><span class="line">   36 </span><span class="kwb"></span>               dot <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) (</span>y<span class="sym">:</span>ys<span class="sym">)</span> z <span class="sym">=</span> dot xs ys <span class="sym">(</span>z <span class="sym">+</span> x<span class="sym">*</span>y<span class="sym">)
</span><span class="line">   37 </span><span class="sym"></span>               dot  _      _     z <span class="sym">=</span> z
<span class="line">   38 </span>
<span class="line">   39 </span><span class="slc">-- slightly slower transposing mmult in one line:
</span><span class="line">   40 </span><span class="slc"></span><span class="slc">--  mmult a b  = [[sum$zipWith (*) row col 0 | col &lt;- transpose a]| row &lt;-b]
</span><span class="line">   41 </span><span class="slc"></span>
