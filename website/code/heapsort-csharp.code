<span class="slc">// $Id: heapsort-csharp.code,v 1.5 2005-02-25 08:57:53 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">// contributed by Erik Saltwell
</span><span class="slc">// Modified to meet string formatting specification for test
</span><span class="slc">//   by Brent Fulgham
</span>
<span class="kwa">using</span> System<span class="sym">;

</span><span class="kwc">class</span> heapsort
<span class="sym">{
</span>    <span class="kwc">public</span> <span class="kwb">const long</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;
</span>    <span class="kwc">public</span> <span class="kwb">const long</span> IA <span class="sym">=</span>   <span class="num">3877</span><span class="sym">;
</span>    <span class="kwc">public</span> <span class="kwb">const long</span> IC <span class="sym">=</span>  <span class="num">29573</span><span class="sym">;

</span>    <span class="kwc">public</span> <span class="kwb">static long</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;

</span>    <span class="kwc">public</span> <span class="kwb">static double</span> gen_random<span class="sym">(</span><span class="kwb">double</span> max<span class="sym">)
    {
</span>        last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;
</span>        <span class="kwa">return</span> <span class="sym">((</span>max <span class="sym">*</span> last<span class="sym">) /</span> IM<span class="sym">);
    }

</span>    <span class="kwc">public</span> <span class="kwb">static int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

    [</span>STAThread<span class="sym">]
</span>    <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
    {
</span>        count <span class="sym">=</span> <span class="kwb">int</span><span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>        <span class="kwb">double</span><span class="sym">[]</span> ary <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>count<span class="sym">+</span><span class="num">1</span><span class="sym">];
</span>        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;=</span> count<span class="sym">; ++</span>i<span class="sym">)
        {
</span>            ary<span class="sym">[</span>i<span class="sym">]=</span>gen_random<span class="sym">(</span><span class="num">1</span><span class="sym">);
        }
</span>        _heapsort<span class="sym">(</span>ary<span class="sym">);
</span>        Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0:f10}&quot;</span><span class="sym">,</span> ary<span class="sym">[</span>count<span class="sym">]);
    }

</span>    <span class="kwc">public</span> <span class="kwb">static void</span> _heapsort<span class="sym">(</span><span class="kwb">double</span><span class="sym">[]</span> ra<span class="sym">)
    {
</span>        <span class="kwb">int</span> j<span class="sym">,</span> i<span class="sym">;
</span>        <span class="kwb">double</span> rra<span class="sym">;

</span>        <span class="kwb">int</span> l <span class="sym">= (</span>count <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;
</span>        <span class="kwb">int</span> ir <span class="sym">=</span> count<span class="sym">;

</span>        <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">)
        {
</span>            <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)
            {
</span>                rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];
            }
</span>            <span class="kwa">else
</span>            <span class="sym">{
</span>                rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];
</span>                ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];
</span>                <span class="kwa">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">)
                {
</span>                    ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;
</span>                    <span class="kwa">return</span><span class="sym">;
                }
            }
</span>            i <span class="sym">=</span> l<span class="sym">;
</span>            j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;
</span>            <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">)
            {
</span>                <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j<span class="sym">; }
</span>                <span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">])
                {
</span>                    ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];
</span>                    j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">);
                }
</span>                <span class="kwa">else
</span>                <span class="sym">{
</span>                    j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;
                }
            }
</span>            ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;
        }
    }
}</span>
