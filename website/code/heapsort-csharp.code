<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>


<span class="kwa">using</span> System<span class="sym">;</span>

<span class="kwa">class</span> Heapsort
<span class="sym">{</span>
   <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">[]</span> args<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
      <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
         <span class="kwb">double</span><span class="sym">[]</span> numbers <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> n<span class="sym">;</span> i<span class="sym">++)</span> numbers<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
         <span class="kwd">heapsort</span><span class="sym">(</span>n<span class="sym">,</span> numbers<span class="sym">);</span>
         Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0:f10}&quot;</span><span class="sym">,</span> numbers<span class="sym">[</span>n<span class="sym">]);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">heapsort</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> ra<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">int</span> l<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> i<span class="sym">;</span>
      <span class="kwb">double</span> rra<span class="sym">;</span>

      l <span class="sym">= (</span>n <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>
      ir <span class="sym">=</span> n<span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(;;)</span>
      <span class="sym">{</span>
         <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span>
         <span class="sym">{</span>
            rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];</span>
         <span class="sym">}</span>
         <span class="kwa">else</span>
         <span class="sym">{</span>
            rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];</span>
            ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
            <span class="kwa">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span>
            <span class="sym">{</span>
               ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;</span>
               <span class="kwa">return</span><span class="sym">;</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
         i <span class="sym">=</span> l<span class="sym">;</span>
         j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span>
         <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">)</span>
         <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j<span class="sym">; }</span>
            <span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">])</span>
            <span class="sym">{</span>
               ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];</span>
               j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">);</span>
            <span class="sym">}</span>
            <span class="kwa">else</span>
            <span class="sym">{</span>
               j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
         ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwb">const int</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>
   <span class="kwb">const int</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span>
   <span class="kwb">const int</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>
   <span class="kwa">static</span> <span class="kwb">int</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>

   <span class="kwa">static</span> <span class="kwb">double</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="kwb">double</span> max<span class="sym">) {</span>
      last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;</span>
      <span class="kwa">return</span><span class="sym">(</span> max <span class="sym">*</span> last <span class="sym">/</span> IM <span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>
