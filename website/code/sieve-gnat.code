<span class="slc">-- $Id: sieve-gnat.code,v 1.5 2004-11-22 07:09:05 bfulgham Exp $
</span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="slc">-- Ada 95 code by C.C.
</span>
<span class="kwa">with</span> Text_IO<span class="sym">,</span> Ada.Command_Line<span class="sym">;

</span><span class="kwa">procedure</span> Sieve <span class="kwa">is
</span>   High        <span class="sym">:</span> <span class="kwa">constant</span> <span class="sym">:=</span> <span class="num">8192</span><span class="sym">;
</span>   Is_Prime    <span class="sym">:</span> <span class="kwa">array</span> <span class="sym">(</span><span class="num">2</span> .. High<span class="sym">)</span> <span class="kwa">of</span> <span class="kwb">Boolean</span><span class="sym">;
</span>   Count<span class="sym">,</span> K<span class="sym">,</span> N <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">begin
   begin
</span>      N <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">exception
      when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span>   <span class="kwa">end</span><span class="sym">;
</span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop
      declare
         pragma</span> Suppress <span class="sym">(</span>Overflow_Check<span class="sym">);
</span>         <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Index_Check<span class="sym">);
</span>         <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Range_Check<span class="sym">);
</span>      <span class="kwa">begin
</span>         Count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>         Is_Prime <span class="sym">:= (</span><span class="kwa">others</span> <span class="sym">=&gt;</span> True<span class="sym">);
</span>         <span class="kwa">for</span> J <span class="kwa">in</span> Is_Prime<span class="sym">'</span><span class="kwa">Range loop
            if</span> Is_Prime <span class="sym">(</span>J<span class="sym">)</span> <span class="kwa">then
</span>               K <span class="sym">:=</span> J <span class="sym">+</span> J<span class="sym">;
</span>               <span class="kwa">while</span> K <span class="sym">&lt;=</span> Is_Prime<span class="sym">'</span>Last <span class="kwa">loop
</span>                  Is_Prime <span class="sym">(</span>K<span class="sym">) :=</span> False<span class="sym">;</span>        <span class="slc">--  K is not a prime since a
</span>                  K <span class="sym">:=</span> K <span class="sym">+</span> J<span class="sym">;</span>                   <span class="slc">--  multiple of prime J
</span>               <span class="kwa">end loop</span><span class="sym">;
</span>               Count <span class="sym">:=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>            <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">end</span><span class="sym">;
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   Text_IO.Put_Line <span class="sym">(</span><span class="str">&quot;Count:&quot;</span> <span class="sym">&amp;</span> <span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>Count<span class="sym">));
</span><span class="kwa">end</span> Sieve<span class="sym">;</span>
