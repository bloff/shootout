BUILD COMMANDS FOR: matrix.sbcl

Sat Nov 27 15:58:40 PST 2004

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "matrix.sbcl_compile")'
### START matrix.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "matrix.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END matrix.sbcl_compile

; compiling file "/opt/shootout/shootout/bench/matrix/tmp/matrix.cmucl" (written 27 NOV 2004 03:58:40 PM):
; compiling top level form: 
; recognizing DEFUN MATMUL
; compiling DEFUN MATMUL: 
; compiling top level form: 
; recognizing DEFUN MAIN
; compiling DEFUN MAIN: 

; file: /opt/shootout/shootout/bench/matrix/tmp/matrix.cmucl
; in: DEFUN MAIN
;     (AREF MM 0 0)
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   (SB-KERNEL:%DATA-VECTOR-AND-INDEX ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (ARRAY (UNSIGNED-BYTE 32) (* *)), not a SIMPLE-ARRAY.

;     (AREF MM 2 3)
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   (SB-KERNEL:%DATA-VECTOR-AND-INDEX ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (ARRAY (UNSIGNED-BYTE 32) (* *)), not a SIMPLE-ARRAY.

;     (AREF MM 3 2)
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   (SB-KERNEL:%DATA-VECTOR-AND-INDEX ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (ARRAY (UNSIGNED-BYTE 32) (* *)), not a SIMPLE-ARRAY.

;     (AREF MM 4 4)
; --> LET* SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL 
; ==>
;   (SB-KERNEL:%DATA-VECTOR-AND-INDEX ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (ARRAY (UNSIGNED-BYTE 32) (* *)), not a SIMPLE-ARRAY.

;     (LOOP REPEAT N DO (MATMUL M1 M2 M3 30 30 30))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY IF <= IF 
; ==>
;   (> #:LOOP-REPEAT-34 0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a (INTEGER -536870912), not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER -536870912), not a FIXNUM.
;       etc.

; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY IF DECF LET* 
; ==>
;   (- #:LOOP-REPEAT-34 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; --> BLOCK 
; ==>
;   (LET ((#:LOOP-REPEAT-34 (CEILING N)))
;     (DECLARE (TYPE INTEGER #:LOOP-REPEAT-34))
;     (SB-LOOP::LOOP-BODY NIL
;                         ((IF # # #))
;                         ((MATMUL M1 M2 M3 30 30 30))
;                         ((IF # # #))
;                         NIL))
; 
; note: doing signed word to integer coercion (cost 20) to #:LOOP-REPEAT-34

;     (FORMAT T
;           "~A ~A ~A ~A~%"
;           (AREF MM 0 0)
;           (AREF MM 2 3)
;           (AREF MM 3 2)
;           (AREF MM 4 4))
; --> FORMAT FORMATTER FUNCTION BLOCK 
; ==>
;   (PRINC #:FORMAT-ARG-54 STREAM)
; 
; note: doing unsigned word to integer coercion (cost 20)

; ==>
;   (PRINC #:FORMAT-ARG-55 STREAM)
; 
; note: doing unsigned word to integer coercion (cost 20)

; ==>
;   (PRINC #:FORMAT-ARG-56 STREAM)
; 
; note: doing unsigned word to integer coercion (cost 20)

; ==>
;   (PRINC #:FORMAT-ARG-57 STREAM)
; 
; note: doing unsigned word to integer coercion (cost 20)

; compiling top level form: 
; recognizing DEFUN MAKE-MATRIX
; compiling DEFUN MAKE-MATRIX: 
; compiling top level form: 
; compilation unit finished
;   printed 11 notes

; /opt/shootout/shootout/bench/matrix/tmp/matrix.fasl written
; compilation finished in 0:00:00
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/matrix/tmp/sbcl.core:
writing 18083936 bytes from the read-only space at 0x01000000
writing 5843776 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START matrix.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END matrix.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load matrix.sbcl_run %A


PROGRAM OUTPUT
==============
270165 1061760 1453695 1856025
