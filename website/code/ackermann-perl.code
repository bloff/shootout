<span class="line">    1 </span><span class="slc">#!/usr/bin/perl
</span><span class="line">    2 </span><span class="slc"></span><span class="slc"># $Id: ackermann-perl.code,v 1.4 2004-11-13 07:40:39 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="slc"># With help from Ernesto Hernandez-Novich
</span><span class="line">    6 </span><span class="slc"></span><span class="kwa">use</span> integer<span class="sym">;
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym"></span><span class="slc"># Note:  If memoization were allowed in this program, we could
</span><span class="line">    9 </span><span class="slc"></span><span class="slc"># do so by adding:
</span><span class="line">   10 </span><span class="slc"></span><span class="slc"># use Memoization;
</span><span class="line">   11 </span><span class="slc"></span><span class="slc"># memoize(&quot;Ack&quot;);
</span><span class="line">   12 </span><span class="slc"></span><span class="slc">#
</span><span class="line">   13 </span><span class="slc"></span>
<span class="line">   14 </span><span class="slc"># It's prettier but slower to do this
</span><span class="line">   15 </span><span class="slc"></span><span class="slc">#sub Ack {
</span><span class="line">   16 </span><span class="slc"></span><span class="slc">#    my($M, $N) = &#64;_;
</span><span class="line">   17 </span><span class="slc"></span><span class="slc">#    return( $N + 1 )         if ($M == 0);
</span><span class="line">   18 </span><span class="slc"></span><span class="slc">#    return( Ack($M - 1, 1) ) if ($N == 0);
</span><span class="line">   19 </span><span class="slc"></span><span class="slc">#    Ack($M - 1, Ack($M, $N - 1));
</span><span class="line">   20 </span><span class="slc"></span><span class="slc">#}
</span><span class="line">   21 </span><span class="slc"></span>
<span class="line">   22 </span><span class="slc"># in our quest for speed, we must get ugly:
</span><span class="line">   23 </span><span class="slc"></span><span class="slc"># it helps reduce stack frame size a little bit
</span><span class="line">   24 </span><span class="slc"></span><span class="slc"># from Leif Stensson
</span><span class="line">   25 </span><span class="slc"></span><span class="kwa">sub</span> Ack <span class="sym">{
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwa">return</span> <span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]</span> ? <span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">1</span><span class="sym">]</span> ? Ack<span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-</span><span class="num">1</span><span class="sym">,</span> Ack<span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwb">$_</span><span class="sym">[</span><span class="num">1</span><span class="sym">]-</span><span class="num">1</span><span class="sym">))
</span><span class="line">   27 </span><span class="sym">                    :</span> Ack<span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   28 </span><span class="sym">        :</span> <span class="kwb">$_</span><span class="sym">[</span><span class="num">1</span><span class="sym">]+</span><span class="num">1</span><span class="sym">;
</span><span class="line">   29 </span><span class="sym">}
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym"></span><span class="kwc">my</span> <span class="kwb">$NUM</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="line">   32 </span><span class="sym"></span><span class="kwb">$NUM</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$NUM</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   33 </span><span class="sym"></span><span class="kwc">my</span> <span class="kwb">$ack</span> <span class="sym">=</span> Ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">$NUM</span><span class="sym">);
</span><span class="line">   34 </span><span class="sym"></span>print <span class="str">&quot;Ack(3,$NUM): $ack</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
