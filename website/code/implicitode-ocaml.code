<span class="com">(* implicitode.ml                                           -*-tuareg-*-</span>
<span class="com"> *</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Sebastien Loisel</span>
<span class="com"> * Cleaned up and made more idiomatic by Christophe Troestler</span>
<span class="com"> *)</span>

<span class="kwa">module type</span> SCALAR <span class="sym">=</span> <span class="kwa">sig</span>
  <span class="kwa">type</span> t
  <span class="kwa">val</span> <span class="sym">( + ) :</span> t <span class="sym">-&gt;</span> t <span class="sym">-&gt;</span> t
  <span class="kwa">val</span> <span class="sym">( - ) :</span> t <span class="sym">-&gt;</span> t <span class="sym">-&gt;</span> t
  <span class="kwa">val</span> <span class="sym">( * ) :</span> t <span class="sym">-&gt;</span> t <span class="sym">-&gt;</span> t
  <span class="kwa">val</span> <span class="sym">( / ) :</span> t <span class="sym">-&gt;</span> t <span class="sym">-&gt;</span> t
  <span class="kwa">val</span> mk <span class="sym">:</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> t
  <span class="kwa">val</span> mf <span class="sym">:</span> <span class="kwb">float</span> <span class="sym">-&gt;</span> t
  <span class="kwa">val</span> pr <span class="sym">:</span> t <span class="sym">-&gt;</span> <span class="kwb">string</span>
<span class="kwa">end</span>

<span class="kwa">module</span> FL64 <span class="sym">:</span> SCALAR <span class="sym">=</span> <span class="kwa">struct</span>
  <span class="kwa">type</span> t <span class="sym">=</span> <span class="kwb">float</span>
  <span class="kwa">let</span> <span class="sym">( + )</span> x y <span class="sym">=</span> x <span class="sym">+</span>. y
  <span class="kwa">let</span> <span class="sym">( - )</span> x y <span class="sym">=</span> x <span class="sym">-</span>. y
  <span class="kwa">let</span> <span class="sym">( * )</span> x y <span class="sym">=</span> x <span class="sym">*</span>. y
  <span class="kwa">let</span> <span class="sym">( / )</span> x y <span class="sym">=</span> x <span class="sym">/</span>. y
  <span class="kwa">let</span> mk <span class="sym">=</span> <span class="kwb">float</span>
  <span class="kwa">let</span> mf x <span class="sym">=</span> x
  <span class="kwa">let</span> pr x <span class="sym">=</span> Printf.sprintf <span class="str">&quot;%.12e&quot;</span> x
<span class="kwa">end</span>

<span class="com">(* Low precision floating point type. *)</span>
<span class="kwa">module</span> FL <span class="sym">:</span> SCALAR <span class="sym">=</span> <span class="kwa">struct</span>
  <span class="kwa">type</span> t <span class="sym">=</span> <span class="kwb">float</span>
  <span class="kwa">let</span> pr x <span class="sym">=</span> Printf.sprintf <span class="str">&quot;%.2e&quot;</span> x
  <span class="kwa">let</span> mf x <span class="sym">=</span>
    <span class="kwa">if</span> x <span class="sym">=</span> <span class="num">0.0</span> <span class="kwa">then</span> <span class="num">0.0</span> <span class="kwa">else</span>
      <span class="kwa">let</span> k <span class="sym">=</span> <span class="kwd">truncate</span><span class="sym">(</span><span class="kwd">log</span><span class="sym">(</span>abs_float x<span class="sym">))</span> <span class="kwa">in</span>
      <span class="kwa">let</span> x<span class="str">' = exp(6. -. float k) in floor(x *. x'</span> <span class="sym">+</span>. <span class="num">0.5</span><span class="sym">) /</span>. x<span class="str">'</span>
<span class="str">  let mk x = mf (float x)</span>
<span class="str">  let ( + ) x y = mf (x +. y)</span>
<span class="str">  let ( - ) x y = mf (x -. y)</span>
<span class="str">  let ( * ) x y = mf (x *. y)</span>
<span class="str">  let ( / ) x y = mf (x /. y)</span>
<span class="str">end</span>
<span class="str"></span>
<span class="str">(* Complex numbers on the field [F].  Overflow is not handled. *)</span>
<span class="str">module C(F : SCALAR) = struct</span>
<span class="str">  type t = { re: F.t; im: F.t }</span>
<span class="str">  let mk a = { re = F.mk a;  im = F.mk 0 }</span>
<span class="str">  let mf a = { re = F.mf a;  im = F.mk 0 }</span>
<span class="str">  let mc a b = { re = a; im = b }</span>
<span class="str">  let pr a = F.pr a.re ^ &quot; &quot; ^ F.pr a.im</span>
<span class="str"></span>
<span class="str">  open F</span>
<span class="str">  let ( + ) a b = { re = a.re + b.re;  im = a.im + b.im }</span>
<span class="str">  and ( - ) a b = { re = a.re - b.re;  im = a.im - b.im }</span>
<span class="str">  and ( * ) a b = { re = a.re * b.re - a.im * b.im;</span>
<span class="str">		    im = a.re * b.im + a.im * b.re }</span>
<span class="str">  and ( / ) a b =</span>
<span class="str">    let mag = b.re * b.re + b.im * b.im in</span>
<span class="str">    { re = (a.re * b.re + a.im * b.im) / mag;</span>
<span class="str">      im = (a.im * b.re - a.re * b.im) / mag }</span>
<span class="str">end</span>
<span class="str"></span>
<span class="str">module Functions(F : SCALAR) = struct</span>
<span class="str">  let f0 = F.mk 0 and f1 = F.mk 1 and f2 = F.mk 2 and f3 = F.mk 3</span>
<span class="str">  let f5 = F.mk 5 and f6 = F.mk 6 and f7 = F.mk 7</span>
<span class="str">  let sqr x = F.( * ) x x</span>
<span class="str">  let rec ( ** ) x k =</span>
<span class="str">    if k = 0 then f1</span>
<span class="str">    else if k mod 2 = 0 then sqr(x**(k/2)) else F.( * ) x (x**(k-1))</span>
<span class="str"></span>
<span class="str">  open F</span>
<span class="str">  let rat x = ((f2 * x + f3 * x**2 + f7 * x**6 + f5 * x**11 + f1)</span>
<span class="str">	       / (f5 * x - f6 * x**3 - f3 * x**7 + f2))</span>
<span class="str"></span>
<span class="str">  (* Automatic differentiation type on the field [F]. *)</span>
<span class="str">  module AD = struct</span>
<span class="str">    type t = { x : F.t; dx : F.t }</span>
<span class="str">    let mk i = { x = F.mk i; dx = f0 }</span>
<span class="str">    let mf x = { x = F.mf x; dx = f0 }</span>
<span class="str">    let pr a = pr a.x ^ &quot; &quot; ^ pr a.dx</span>
<span class="str">    let vr y dy = { x = y; dx = dy }</span>
<span class="str">    let ( + ) a b = { x = a.x + b.x;  dx = a.dx + b.dx }</span>
<span class="str">    and ( - ) a b = { x = a.x - b.x;  dx = a.dx - b.dx }</span>
<span class="str">    and ( * ) a b = { x = a.x * b.x;  dx = a.dx * b.x + a.x * b.dx }</span>
<span class="str">    and ( / ) a b = { x = a.x/b.x; dx = (a.dx*b.x-a.x*b.dx)/(b.x*b.x) }</span>
<span class="str"></span>
<span class="str">    let newton x0 n g =</span>
<span class="str">      let x = ref x0 in</span>
<span class="str">      for i = 1 to n do</span>
<span class="str">	let v = g(vr !x f1) in</span>
<span class="str">	x := F.(-) !x (F.(/) v.x v.dx)</span>
<span class="str">      done; !x</span>
<span class="str"></span>
<span class="str">    let trapezoid_method_rooter gad gf y0 t0 t1 =</span>
<span class="str">      let vt1 = vr t1 f0</span>
<span class="str">      and dt2 = vr (F.(/) (F.(-) t1 t0) f2) f0</span>
<span class="str">      and vy0 = vr y0 f0</span>
<span class="str">      and vg0 = vr (gf t0 y0) f0 in</span>
<span class="str">      fun y1 -&gt; (gad vt1 y1 + vg0) * dt2 + vy0 - y1</span>
<span class="str"></span>
<span class="str">    let trapezoid_method t0 dt y0 gad gf numsteps =</span>
<span class="str">      let y = ref y0 and t = ref t0 in</span>
<span class="str">      for i = 1 to numsteps do</span>
<span class="str">	y := newton !y 10 (trapezoid_method_rooter gad gf !y !t (F.(+) !t dt));</span>
<span class="str">	t := F.(+) !t dt;</span>
<span class="str">      done; !y</span>
<span class="str">  end</span>
<span class="str">end</span>
<span class="str"></span>
<span class="str">module Integrate_functions(F : SCALAR) = struct</span>
<span class="str">  module Funs = Functions(F)</span>
<span class="str">  module AD = Funs.AD</span>
<span class="str">  module ADFuns = Functions(AD)</span>
<span class="str">  open F</span>
<span class="str"></span>
<span class="str">  let sqrintegrandad t y = ADFuns.sqr y</span>
<span class="str">  let sqrintegrandf t y = Funs.sqr y</span>
<span class="str">  let ratintegrandad t y = AD.(-) (ADFuns.rat y) t</span>
<span class="str">  let ratintegrandf t y = Funs.rat y -  t</span>
<span class="str">  let integrate_functions x0 n =</span>
<span class="str">    let integ f df = AD.trapezoid_method (mk 1) (mk 1 / mk n) x0 f df n in</span>
<span class="str">    print_string (&quot;i1 &quot; ^ (pr (integ sqrintegrandad sqrintegrandf)) ^&quot;</span><span class="esc">\n</span><span class="str">&quot;);</span>
<span class="str">    print_string (&quot;i2 &quot; ^ (pr (integ ratintegrandad ratintegrandf)) ^&quot;</span><span class="esc">\n</span><span class="str">&quot;)</span>
<span class="str">  end</span>
<span class="str"></span>
<span class="str">module Funs = Functions(FL64)</span>
<span class="str">module AD = Funs.AD</span>
<span class="str">module ADFuns = Functions(AD)</span>
<span class="str"></span>
<span class="str">let mysqrt x = AD.(-) (ADFuns.sqr x) (AD.mk 2)</span>
<span class="str">let () =</span>
<span class="str">  let f1 = FL64.mk 1 in</span>
<span class="str">  print_string(&quot;rational_taylor_series: &quot; ^</span>
<span class="str">		 (AD.pr (ADFuns.rat (AD.vr (FL64.mf 0.25) f1))) ^ &quot;</span><span class="esc">\n</span><span class="str">&quot;);</span>
<span class="str">  print_string(&quot;newton-sqrt_2: &quot; ^ (FL64.pr (AD.newton f1 10 mysqrt)) ^ &quot;</span><span class="esc">\n</span><span class="str">&quot;);</span>
<span class="str">  print_string(&quot;newton-rat: &quot; ^</span>
<span class="str">		 (FL64.pr (AD.newton (FL64.mk (-1)) 6 ADFuns.rat)) ^ &quot;</span><span class="esc">\n</span><span class="str">&quot;)</span>
<span class="str"></span>
<span class="str">let n = int_of_string(Array.get Sys.argv 1)</span>
<span class="str">let pfl64 = FL64.mf 0.02</span>
<span class="str">let pfl = FL.mf 0.02</span>
<span class="str">module I1 = Integrate_functions(FL64)</span>
<span class="str">module I2 = Integrate_functions(FL)</span>
<span class="str">let () =</span>
<span class="str">  I1.integrate_functions pfl64 (n*4);</span>
<span class="str">  I2.integrate_functions pfl n</span>
<span class="str"></span>
<span class="str">module CFL64 = C(FL64)</span>
<span class="str">module CFL = C(FL)</span>
<span class="str">module I3 = Integrate_functions(CFL64)</span>
<span class="str">module I4 = Integrate_functions(CFL)</span>
<span class="str">let () =</span>
<span class="str">  I3.integrate_functions (CFL64.mc pfl64 pfl64) n;</span>
<span class="str">  I4.integrate_functions (CFL.mc pfl pfl) n</span>
