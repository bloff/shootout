<span class="slc"># $Id: moments-gawk.code,v 1.7 2006-09-20 05:51:58 bfulgham Exp $</span>
<span class="slc"># http://www.bagley.org/~doug/shootout/</span>

<span class="kwa">BEGIN</span> <span class="sym">{</span>
    <span class="kwa">delete</span> <span class="kwb">ARGV</span><span class="sym">;</span>
    sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    n <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="sym">{</span>
    nums<span class="sym">[</span>n<span class="sym">++] =</span> $<span class="num">1</span><span class="sym">;</span>
    sum <span class="sym">+=</span> $<span class="num">1</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">END</span> <span class="sym">{</span>
    mean <span class="sym">=</span> sum<span class="sym">/</span>n<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>num in nums<span class="sym">) {</span>
	dev <span class="sym">=</span> num <span class="sym">-</span> mean<span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">(</span>dev <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span> avg_dev <span class="sym">+=</span> dev<span class="sym">; }</span> <span class="kwa">else</span> <span class="sym">{</span> avg_dev <span class="sym">-=</span> dev<span class="sym">; }</span>
	vari <span class="sym">+=</span> dev^<span class="num">2</span><span class="sym">;</span>
	skew <span class="sym">+=</span> dev^<span class="num">3</span><span class="sym">;</span>
	kurt <span class="sym">+=</span> dev^<span class="num">4</span><span class="sym">;</span>
    <span class="sym">}</span>
    avg_dev <span class="sym">/=</span> n<span class="sym">;</span>
    vari <span class="sym">/= (</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
    std_dev <span class="sym">=</span> sqrt<span class="sym">(</span>vari<span class="sym">);</span>

    <span class="kwa">if</span> <span class="sym">(</span>vari <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
	skew <span class="sym">/= (</span>n <span class="sym">*</span> vari <span class="sym">*</span> std_dev<span class="sym">);</span>
	kurt <span class="sym">=</span> kurt<span class="sym">/(</span>n <span class="sym">*</span> vari <span class="sym">*</span> vari<span class="sym">) -</span> <span class="num">3.0</span><span class="sym">;</span>
    <span class="sym">}</span>

    nums<span class="sym">[</span>n<span class="sym">] =</span> nums<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
    heapsort<span class="sym">(</span>n<span class="sym">,</span> nums<span class="sym">);</span>

    mid <span class="sym">=</span> int<span class="sym">(</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">)+</span><span class="num">1</span><span class="sym">;</span>
    median <span class="sym">= (</span>n % <span class="num">2</span><span class="sym">)</span> ? nums<span class="sym">[</span>mid<span class="sym">] : (</span>nums<span class="sym">[</span>mid<span class="sym">] +</span> nums<span class="sym">[</span>mid<span class="sym">-</span><span class="num">1</span><span class="sym">])/</span><span class="num">2</span><span class="sym">;</span>

    <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;n:</span>                  <span class="esc">%d\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">);</span>
    <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;median:</span>             <span class="esc">%f\n</span><span class="str">&quot;</span><span class="sym">,</span> median<span class="sym">);</span>
    <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;mean:</span>               <span class="esc">%f\n</span><span class="str">&quot;</span><span class="sym">,</span> mean<span class="sym">);</span>
    <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;average_deviation:</span>  <span class="esc">%f\n</span><span class="str">&quot;</span><span class="sym">,</span> avg_dev<span class="sym">);</span>
    <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;standard_deviation:</span> <span class="esc">%f\n</span><span class="str">&quot;</span><span class="sym">,</span> std_dev<span class="sym">);</span>
    <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;variance:</span>           <span class="esc">%f\n</span><span class="str">&quot;</span><span class="sym">,</span> vari<span class="sym">);</span>
    <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;skew:</span>               <span class="esc">%f\n</span><span class="str">&quot;</span><span class="sym">,</span> skew<span class="sym">);</span>
    <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;kurtosis:</span>           <span class="esc">%f\n</span><span class="str">&quot;</span><span class="sym">,</span> kurt<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwc">function</span> heapsort <span class="sym">(</span>n<span class="sym">,</span> ra<span class="sym">) {</span>
    l <span class="sym">=</span> int<span class="sym">(</span><span class="num">0.5</span><span class="sym">+</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">) +</span> <span class="num">1</span>
    ir <span class="sym">=</span> n<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(;;) {</span>
        <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {</span>
            rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];</span>
            ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
            <span class="kwa">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">) {</span>
                ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;</span>
                <span class="kwa">return</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        i <span class="sym">=</span> l<span class="sym">;</span>
        j <span class="sym">=</span> l <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span>
        <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">) {</span>
            <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j<span class="sym">; }</span>
            <span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]) {</span>
                ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];</span>
                j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">);</span>
            <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>
