<span class="slc">%%%  The Great Computer Language Shootout</span>
<span class="slc">%%%  http://shootout.alioth.debian.org/</span>
<span class="slc">%%%</span>
<span class="slc">%%%  contributed by Sebastian Strollo</span>
<span class="slc">%%%  modified by Bengt Kleberg</span>
<span class="slc">%%%  modified by Isaac Gouy</span>

<span class="sym">-</span><span class="kwd">module</span><span class="sym">(</span>echo<span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="sym">-</span><span class="kwd">define</span><span class="sym">(</span>DATA<span class="sym">, &lt;&lt;</span><span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">&gt;&gt;)</span>.

<span class="kwd">main</span><span class="sym">() -&gt;</span> <span class="kwd">main</span><span class="sym">([</span><span class="str">&quot;1&quot;</span><span class="sym">])</span>.
<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
   N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
   <span class="sym">{</span>ok<span class="sym">,</span> ServerSock<span class="sym">} =</span> gen_tcp<span class="sym">:</span><span class="kwd">listen</span><span class="sym">(</span><span class="num">0</span><span class="sym">, [</span><span class="kwb">binary</span><span class="sym">]),</span>
   <span class="sym">{</span>ok<span class="sym">,</span> Port<span class="sym">} =</span> inet<span class="sym">:</span><span class="kwd">port</span><span class="sym">(</span>ServerSock<span class="sym">),</span>
   erlang<span class="sym">:</span><span class="kwb">spawn</span><span class="sym">(</span> <span class="kwa">fun</span><span class="sym">() -&gt;</span> <span class="kwd">client</span><span class="sym">(</span> N<span class="sym">,</span> Port <span class="sym">)</span> <span class="kwa">end</span> <span class="sym">),</span>
   <span class="kwd">server</span><span class="sym">(</span>ServerSock<span class="sym">),</span>
   gen_tcp<span class="sym">:</span><span class="kwd">close</span><span class="sym">(</span>ServerSock<span class="sym">),</span>
   init<span class="sym">:</span><span class="kwd">stop</span><span class="sym">()</span>.

<span class="kwd">client</span><span class="sym">(</span>N<span class="sym">,</span> ServerPort<span class="sym">) -&gt;</span>
   <span class="sym">{</span>ok<span class="sym">,</span> Sock<span class="sym">} =</span> gen_tcp<span class="sym">:</span><span class="kwd">connect</span><span class="sym">(</span><span class="str">&quot;localhost&quot;</span><span class="sym">,</span> ServerPort<span class="sym">, [</span><span class="kwb">binary</span><span class="sym">]),</span>
   <span class="kwd">client_loop</span><span class="sym">(</span>N<span class="sym">,</span> Sock<span class="sym">),</span>
   gen_tcp<span class="sym">:</span><span class="kwd">close</span><span class="sym">(</span>Sock<span class="sym">)</span>.

<span class="kwd">client_loop</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> _Sock<span class="sym">) -&gt;</span> ok<span class="sym">;</span>
<span class="kwd">client_loop</span><span class="sym">(</span>N<span class="sym">,</span> Sock<span class="sym">) -&gt;</span>
   ok <span class="sym">=</span> gen_tcp<span class="sym">:</span><span class="kwd">send</span><span class="sym">(</span>Sock<span class="sym">,</span> ?DATA<span class="sym">),</span>
   <span class="kwa">receive</span>
      <span class="sym">{</span>tcp<span class="sym">,</span> Sock<span class="sym">,</span> ?DATA<span class="sym">} -&gt;</span> <span class="kwd">client_loop</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> Sock<span class="sym">);</span>
      <span class="sym">{</span>tcp_closed<span class="sym">,</span> Sock<span class="sym">} -&gt;</span> ok
   <span class="kwa">end</span>.

<span class="kwd">server</span><span class="sym">(</span>LSock<span class="sym">) -&gt;</span>
   <span class="sym">{</span>ok<span class="sym">,</span> Sock<span class="sym">} =</span> gen_tcp<span class="sym">:</span><span class="kwd">accept</span><span class="sym">(</span>LSock<span class="sym">),</span>
   <span class="kwd">server_loop</span><span class="sym">(</span>Sock<span class="sym">,</span> <span class="num">0</span><span class="sym">),</span>
   gen_tcp<span class="sym">:</span><span class="kwd">close</span><span class="sym">(</span>Sock<span class="sym">)</span>.

<span class="kwd">server_loop</span><span class="sym">(</span>Sock<span class="sym">,</span> Bytes<span class="sym">) -&gt;</span>
   <span class="kwa">receive</span>
      <span class="sym">{</span>tcp<span class="sym">,</span> Sock<span class="sym">,</span> Packet<span class="sym">} -&gt;</span>
         ok <span class="sym">=</span> gen_tcp<span class="sym">:</span><span class="kwd">send</span><span class="sym">(</span>Sock<span class="sym">,</span> Packet<span class="sym">),</span>
         <span class="kwd">server_loop</span><span class="sym">(</span>Sock<span class="sym">,</span> Bytes <span class="sym">+</span> erlang<span class="sym">:</span><span class="kwb">size</span><span class="sym">(</span>Packet<span class="sym">));</span>
      <span class="sym">{</span>tcp_closed<span class="sym">,</span> Sock<span class="sym">} -&gt;</span> io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;server processed ~w bytes~n&quot;</span><span class="sym">, [</span>Bytes<span class="sym">])</span>
   <span class="kwa">end</span>.
