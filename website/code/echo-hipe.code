<span class="slc">%%% -*- mode: erlang -*-
</span><span class="slc">%%% $Id: echo-hipe.code,v 1.9 2005-05-03 07:19:16 bfulgham Exp $
</span><span class="slc">%%% http://shootout.alioth.debian.org
</span><span class="slc">%%% with help from Sebastian Strollo
</span><span class="slc">%%% Rewritten by Erlang Guru Bengt Kleberg
</span><span class="sym">-</span>module<span class="sym">(</span>echo<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="sym">-</span>define<span class="sym">(</span>DATA<span class="sym">, &lt;&lt;</span><span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">&gt;&gt;)</span>.

main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span>    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),
    {</span>ok<span class="sym">,</span> ServerSock<span class="sym">} =</span> gen_tcp<span class="sym">:</span>listen<span class="sym">(</span><span class="num">0</span><span class="sym">, [</span><span class="kwb">binary</span><span class="sym">]),
    {</span>ok<span class="sym">,</span> Port<span class="sym">} =</span> inet<span class="sym">:</span>port<span class="sym">(</span>ServerSock<span class="sym">),
</span>    erlang<span class="sym">:</span><span class="kwb">spawn</span><span class="sym">(</span> <span class="kwa">fun</span><span class="sym">() -&gt;</span> client<span class="sym">(</span> N<span class="sym">,</span> Port <span class="sym">)</span> <span class="kwa">end</span> <span class="sym">),
</span>    server<span class="sym">(</span>ServerSock<span class="sym">),
</span>    gen_tcp<span class="sym">:</span>close<span class="sym">(</span>ServerSock<span class="sym">),
</span>    init<span class="sym">:</span>stop<span class="sym">()</span>.

atom_to_integer<span class="sym">(</span> Atom <span class="sym">) -&gt;</span> erlang<span class="sym">:</span><span class="kwb">list_to_integer</span><span class="sym">(</span>erlang<span class="sym">:</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Atom<span class="sym">))</span>.


client<span class="sym">(</span>N<span class="sym">,</span> ServerPort<span class="sym">) -&gt;
    {</span>ok<span class="sym">,</span> Sock<span class="sym">} =</span> gen_tcp<span class="sym">:</span>connect<span class="sym">(</span><span class="str">&quot;localhost&quot;</span><span class="sym">,</span> ServerPort<span class="sym">, [</span><span class="kwb">binary</span><span class="sym">]),
</span>    client_loop<span class="sym">(</span>N<span class="sym">,</span> Sock<span class="sym">),
</span>    gen_tcp<span class="sym">:</span>close<span class="sym">(</span>Sock<span class="sym">)</span>.

client_loop<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> _Sock<span class="sym">) -&gt;</span> ok<span class="sym">;
</span>client_loop<span class="sym">(</span>N<span class="sym">,</span> Sock<span class="sym">) -&gt;
</span>    ok <span class="sym">=</span> gen_tcp<span class="sym">:</span>send<span class="sym">(</span>Sock<span class="sym">,</span> ?DATA<span class="sym">),
</span>    <span class="kwa">receive
</span>        <span class="sym">{</span>tcp<span class="sym">,</span> Sock<span class="sym">,</span> ?DATA<span class="sym">} -&gt;</span> client_loop<span class="sym">(</span>N<span class="num">-1</span><span class="sym">,</span> Sock<span class="sym">);
        {</span>tcp_closed<span class="sym">,</span> Sock<span class="sym">} -&gt;</span> ok
    <span class="kwa">end</span>.


server<span class="sym">(</span>LSock<span class="sym">) -&gt;
    {</span>ok<span class="sym">,</span> Sock<span class="sym">} =</span> gen_tcp<span class="sym">:</span>accept<span class="sym">(</span>LSock<span class="sym">),
</span>    server_loop<span class="sym">(</span>Sock<span class="sym">,</span> <span class="num">0</span><span class="sym">),
</span>    gen_tcp<span class="sym">:</span>close<span class="sym">(</span>Sock<span class="sym">)</span>.

server_loop<span class="sym">(</span>Sock<span class="sym">,</span> Bytes<span class="sym">) -&gt;
</span>    <span class="kwa">receive
</span>        <span class="sym">{</span>tcp<span class="sym">,</span> Sock<span class="sym">,</span> Packet<span class="sym">} -&gt;
</span>            ok <span class="sym">=</span> gen_tcp<span class="sym">:</span>send<span class="sym">(</span>Sock<span class="sym">,</span> Packet<span class="sym">),
</span>            server_loop<span class="sym">(</span>Sock<span class="sym">,</span> Bytes <span class="sym">+</span> erlang<span class="sym">:</span><span class="kwb">size</span><span class="sym">(</span>Packet<span class="sym">));
        {</span>tcp_closed<span class="sym">,</span> Sock<span class="sym">} -&gt;</span> io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;server processed ~w bytes~n&quot;</span><span class="sym">, [</span>Bytes<span class="sym">])
</span>    <span class="kwa">end</span>.
