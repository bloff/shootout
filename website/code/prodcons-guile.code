#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: prodcons-guile.code,v 1.5 2005-04-13 15:29:19 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="num">-9</span> threads<span class="sym">))

(</span>define mutex <span class="sym">(</span>make<span class="sym">-</span>mutex<span class="sym">))
(</span>define access <span class="sym">(</span>make<span class="sym">-</span>condition<span class="sym">-</span>variable<span class="sym">))
(</span>define count <span class="num">0</span><span class="sym">)
(</span>define data <span class="num">0</span><span class="sym">)
(</span>define produced <span class="num">0</span><span class="sym">)
(</span>define consumed <span class="num">0</span><span class="sym">)

</span><span class="slc">;; the consumer thread definition seems wrong
</span><span class="slc">;; how does it ever stop/get joined?
</span><span class="sym">(</span>define <span class="sym">(</span>consumer n<span class="sym">)
  (</span>let <span class="sym">((</span>i <span class="num">0</span><span class="sym">))
    (</span><span class="kwa">while</span> #t
	 <span class="sym">(</span>lock<span class="sym">-</span>mutex mutex<span class="sym">)
	 (</span><span class="kwa">while</span> <span class="sym">(=</span> count <span class="num">0</span><span class="sym">)
		(</span>wait<span class="sym">-</span>condition<span class="sym">-</span>variable access mutex<span class="sym">))
	 (</span><span class="kwa">set</span><span class="sym">!</span> i data<span class="sym">)
	 (</span><span class="kwa">set</span><span class="sym">!</span> count <span class="num">0</span><span class="sym">)
	 (</span>signal<span class="sym">-</span>condition<span class="sym">-</span>variable access<span class="sym">)
	 (</span>unlock<span class="sym">-</span>mutex mutex<span class="sym">)
	 (</span><span class="kwa">set</span><span class="sym">!</span> consumed <span class="sym">(+</span> consumed <span class="num">1</span><span class="sym">)))))

(</span>define <span class="sym">(</span>producer n<span class="sym">)
  (</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
      ((&gt;</span> i n<span class="sym">))
    (</span>lock<span class="sym">-</span>mutex mutex<span class="sym">)
    (</span><span class="kwa">while</span> <span class="sym">(=</span> count <span class="num">1</span><span class="sym">)
      (</span>wait<span class="sym">-</span>condition<span class="sym">-</span>variable access mutex<span class="sym">))
    (</span><span class="kwa">set</span><span class="sym">!</span> data i<span class="sym">)
    (</span><span class="kwa">set</span><span class="sym">!</span> count <span class="num">1</span><span class="sym">)
    (</span>signal<span class="sym">-</span>condition<span class="sym">-</span>variable access<span class="sym">)
    (</span>unlock<span class="sym">-</span>mutex mutex<span class="sym">)
    (</span><span class="kwa">set</span><span class="sym">!</span> produced <span class="sym">(+</span> produced <span class="num">1</span><span class="sym">))))

(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))
    (</span>let <span class="sym">((</span>c <span class="sym">(</span>make<span class="sym">-</span>thread <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span>consumer n<span class="sym">)))))
      (</span>producer n<span class="sym">)
      (</span>join<span class="sym">-</span>thread c<span class="sym">)
      (</span>display produced<span class="sym">) (</span>display <span class="str">&quot; &quot;</span><span class="sym">) (</span>display consumed<span class="sym">) (</span>newline<span class="sym">))))</span>
