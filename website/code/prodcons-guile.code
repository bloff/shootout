<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/guile \
-e main -s
!#

<I><FONT COLOR="#B22222">;;; $Id: prodcons-guile.code,v 1.2 2004-11-08 08:15:18 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I>
(use-modules (ice-9 threads))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">mutex</FONT></B> (make-mutex))
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">access</FONT></B> (make-condition-variable))
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">count</FONT></B> 0)
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">data</FONT></B> 0)
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">produced</FONT></B> 0)
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">consumed</FONT></B> 0)

<I><FONT COLOR="#B22222">;; the consumer thread definition seems wrong
</FONT></I><I><FONT COLOR="#B22222">;; how does it ever stop/get joined?
</FONT></I>(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">consumer</FONT></B> n)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((i 0))
    (while #t
	 (lock-mutex mutex)
	 (while (= count 0)
		(wait-condition-variable access mutex))
	 (<B><FONT COLOR="#A020F0">set!</FONT></B> i data)
	 (<B><FONT COLOR="#A020F0">set!</FONT></B> count 0)
	 (signal-condition-variable access)
	 (unlock-mutex mutex)
	 (<B><FONT COLOR="#A020F0">set!</FONT></B> consumed (+ consumed 1)))))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">producer</FONT></B> n)
  (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 1 (+ i 1)))
      ((&gt; i n))
    (lock-mutex mutex)
    (while (= count 1)
      (wait-condition-variable access mutex))
    (<B><FONT COLOR="#A020F0">set!</FONT></B> data i)
    (<B><FONT COLOR="#A020F0">set!</FONT></B> count 1)
    (signal-condition-variable access)
    (unlock-mutex mutex)
    (<B><FONT COLOR="#A020F0">set!</FONT></B> produced (+ produced 1))))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (length args) 2) (string-&gt;number (cadr args))) 1)))
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((c (make-thread (<B><FONT COLOR="#A020F0">lambda</FONT></B> () (consumer n)))))
      (producer n)
      (join-thread c)
      (display produced) (display <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>) (display consumed) (newline))))</pre></td></tr></table>
