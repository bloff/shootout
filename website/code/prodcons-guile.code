<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="line">    2 </span><span class="sym">-</span>e main <span class="sym">-</span>s
<span class="line">    3 </span><span class="sym">!</span>#
<span class="line">    4 </span>
<span class="line">    5 </span><span class="slc">;;; $Id: prodcons-guile.code,v 1.3 2004-11-11 07:14:03 bfulgham Exp $
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="num">-9</span> threads<span class="sym">))
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym">(</span>define mutex <span class="sym">(</span>make<span class="sym">-</span>mutex<span class="sym">))
</span><span class="line">   11 </span><span class="sym">(</span>define access <span class="sym">(</span>make<span class="sym">-</span>condition<span class="sym">-</span>variable<span class="sym">))
</span><span class="line">   12 </span><span class="sym">(</span>define count <span class="num">0</span><span class="sym">)
</span><span class="line">   13 </span><span class="sym">(</span>define data <span class="num">0</span><span class="sym">)
</span><span class="line">   14 </span><span class="sym">(</span>define produced <span class="num">0</span><span class="sym">)
</span><span class="line">   15 </span><span class="sym">(</span>define consumed <span class="num">0</span><span class="sym">)
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span><span class="slc">;; the consumer thread definition seems wrong
</span><span class="line">   18 </span><span class="slc"></span><span class="slc">;; how does it ever stop/get joined?
</span><span class="line">   19 </span><span class="slc"></span><span class="sym">(</span>define <span class="sym">(</span>consumer n<span class="sym">)
</span><span class="line">   20 </span><span class="sym">  (</span>let <span class="sym">((</span>i <span class="num">0</span><span class="sym">))
</span><span class="line">   21 </span><span class="sym">    (</span><span class="kwa">while</span> #t
<span class="line">   22 </span>         <span class="sym">(</span>lock<span class="sym">-</span>mutex mutex<span class="sym">)
</span><span class="line">   23 </span><span class="sym">         (</span><span class="kwa">while</span> <span class="sym">(=</span> count <span class="num">0</span><span class="sym">)
</span><span class="line">   24 </span><span class="sym">                (</span>wait<span class="sym">-</span>condition<span class="sym">-</span>variable access mutex<span class="sym">))
</span><span class="line">   25 </span><span class="sym">         (</span><span class="kwa">set</span><span class="sym">!</span> i data<span class="sym">)
</span><span class="line">   26 </span><span class="sym">         (</span><span class="kwa">set</span><span class="sym">!</span> count <span class="num">0</span><span class="sym">)
</span><span class="line">   27 </span><span class="sym">         (</span>signal<span class="sym">-</span>condition<span class="sym">-</span>variable access<span class="sym">)
</span><span class="line">   28 </span><span class="sym">         (</span>unlock<span class="sym">-</span>mutex mutex<span class="sym">)
</span><span class="line">   29 </span><span class="sym">         (</span><span class="kwa">set</span><span class="sym">!</span> consumed <span class="sym">(+</span> consumed <span class="num">1</span><span class="sym">)))))
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym">(</span>define <span class="sym">(</span>producer n<span class="sym">)
</span><span class="line">   32 </span><span class="sym">  (</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
</span><span class="line">   33 </span><span class="sym">      ((&gt;</span> i n<span class="sym">))
</span><span class="line">   34 </span><span class="sym">    (</span>lock<span class="sym">-</span>mutex mutex<span class="sym">)
</span><span class="line">   35 </span><span class="sym">    (</span><span class="kwa">while</span> <span class="sym">(=</span> count <span class="num">1</span><span class="sym">)
</span><span class="line">   36 </span><span class="sym">      (</span>wait<span class="sym">-</span>condition<span class="sym">-</span>variable access mutex<span class="sym">))
</span><span class="line">   37 </span><span class="sym">    (</span><span class="kwa">set</span><span class="sym">!</span> data i<span class="sym">)
</span><span class="line">   38 </span><span class="sym">    (</span><span class="kwa">set</span><span class="sym">!</span> count <span class="num">1</span><span class="sym">)
</span><span class="line">   39 </span><span class="sym">    (</span>signal<span class="sym">-</span>condition<span class="sym">-</span>variable access<span class="sym">)
</span><span class="line">   40 </span><span class="sym">    (</span>unlock<span class="sym">-</span>mutex mutex<span class="sym">)
</span><span class="line">   41 </span><span class="sym">    (</span><span class="kwa">set</span><span class="sym">!</span> produced <span class="sym">(+</span> produced <span class="num">1</span><span class="sym">))))
</span><span class="line">   42 </span><span class="sym">
</span><span class="line">   43 </span><span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
</span><span class="line">   44 </span><span class="sym">  (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))
</span><span class="line">   45 </span><span class="sym">    (</span>let <span class="sym">((</span>c <span class="sym">(</span>make<span class="sym">-</span>thread <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span>consumer n<span class="sym">)))))
</span><span class="line">   46 </span><span class="sym">      (</span>producer n<span class="sym">)
</span><span class="line">   47 </span><span class="sym">      (</span>join<span class="sym">-</span>thread c<span class="sym">)
</span><span class="line">   48 </span><span class="sym">      (</span>display produced<span class="sym">) (</span>display <span class="str">&quot; &quot;</span><span class="sym">) (</span>display consumed<span class="sym">) (</span>newline<span class="sym">))))</span>
