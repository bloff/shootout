<span class="slc">%%% $Id: heapsort-oz.code,v 1.10 2006-10-02 01:08:42 bfulgham Exp $</span>
<span class="slc">%%% http://dada.perl.it/shootout/</span>
<span class="slc">%%%</span>
<span class="slc">%%% contributed by Isaac Gouy</span>
<span class="slc">%%% Using string conversion routines suggested by Juergen Stuber</span>
<span class="slc">%%%   and Jorge Marques Pelizzoni</span>

<span class="slc">%%  Transliterated from the Mercury solution</span>
<span class="slc">%%</span>
<span class="slc">%%  Usage: start from command line with</span>
<span class="slc">%%     ozc -x heapsort.oz -o heapsort.oz.exe</span>
<span class="slc">%%     heapsort.oz.exe 1000</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> System Application

<span class="kwa">define</span>
   IM <span class="sym">=</span> <span class="num">139968</span>
   IA <span class="sym">=</span> <span class="num">3877</span>
   IC <span class="sym">=</span> <span class="num">29573</span>
   Seed <span class="sym">=</span> <span class="num">42</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Random_heap H I S0<span class="sym">}</span>
      <span class="kwa">local</span> R S <span class="kwa">in</span>
     <span class="kwa">if</span> I <span class="sym">=&lt; {</span>Array<span class="sym">.</span>high H<span class="sym">}</span> <span class="kwa">then</span>
        <span class="sym">{</span>Gen_random R S0 S<span class="sym">}</span>
        <span class="sym">{</span>Random_heap <span class="sym">{</span>Up_heap H I R<span class="sym">}</span> I<span class="sym">+</span><span class="num">1</span> S<span class="sym">}</span>
     <span class="kwa">else</span>
        H
     <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Up_heap H N Y<span class="sym">}</span>
      <span class="kwa">local</span> HalfN X <span class="kwa">in</span>
     HalfN <span class="sym">=</span> N div <span class="num">2</span>
     X <span class="sym">= {</span>Get H HalfN<span class="sym">}</span>
     <span class="kwa">if</span> <span class="num">0</span> <span class="sym">&lt;</span> N <span class="kwa">andthen</span> X <span class="sym">&lt;</span> Y <span class="kwa">then</span>
        <span class="sym">{</span>Put H N X<span class="sym">}</span>
        <span class="sym">{</span>Up_heap H HalfN Y<span class="sym">}</span>
     <span class="kwa">else</span>
        <span class="sym">{</span>Put H N Y<span class="sym">}</span>
        H
     <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Heapsort H N<span class="sym">}</span>
      <span class="kwa">if</span> N <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> H
      <span class="kwa">else</span> <span class="sym">{</span>Heapsort <span class="sym">{</span>Remove_greatest H N<span class="sym">}</span> N<span class="sym">-</span><span class="num">1</span><span class="sym">}</span> <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Remove_greatest H N<span class="sym">}</span>
      <span class="kwa">local</span> X Y <span class="kwa">in</span>
     X <span class="sym">= {</span>Get H <span class="num">0</span><span class="sym">}</span>
     Y <span class="sym">= {</span>Get H N<span class="sym">}</span>
     <span class="sym">{</span>Put H N X<span class="sym">}</span>
     <span class="sym">{</span>Down_heap H <span class="num">0</span> N<span class="sym">-</span><span class="num">1</span> Y<span class="sym">}</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Down_heap H I N X<span class="sym">}</span>
      <span class="kwa">local</span> L R J Y <span class="kwa">in</span>
     L <span class="sym">=</span> I <span class="sym">+</span> I <span class="sym">+</span> <span class="num">1</span>
     R <span class="sym">=</span> L <span class="sym">+</span> <span class="num">1</span>
     <span class="kwa">if</span> N <span class="sym">&lt;</span> L <span class="kwa">then</span>
        <span class="sym">{</span>Put H I X<span class="sym">}</span>
        H
     <span class="kwa">else</span>
        J <span class="sym">=</span> <span class="kwa">if</span> R <span class="sym">&lt;</span> N <span class="kwa">andthen</span> <span class="sym">{</span>Get H R<span class="sym">} &gt; {</span>Get H L<span class="sym">}</span>
        <span class="kwa">then</span>  R <span class="kwa">else</span> L <span class="kwa">end</span>
        Y <span class="sym">= {</span>Get H J<span class="sym">}</span>
        <span class="kwa">if</span> X <span class="sym">&gt;</span> Y <span class="kwa">then</span>
           <span class="sym">{</span>Put H I X<span class="sym">}</span>
           H
        <span class="kwa">else</span>
           <span class="sym">{</span>Put H I Y<span class="sym">}</span>
           <span class="sym">{</span>Down_heap H J N X<span class="sym">}</span>
        <span class="kwa">end</span>
     <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>Gen_random R S0 S<span class="sym">}</span>
      S <span class="sym">= (</span>S0 <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> mod IM
      R <span class="sym">= {</span>IntToFloat S<span class="sym">} / {</span>IntToFloat IM<span class="sym">}</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>FloatAbs X<span class="sym">}</span>
      <span class="kwa">if</span> X <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then</span> X <span class="kwa">else</span> <span class="sym">~</span>X <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>FloatSquare X<span class="sym">}</span>
      X <span class="sym">*</span> X
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>FloatPower X E<span class="sym">}</span>
      <span class="kwa">if</span> E<span class="sym">==</span><span class="num">0</span> <span class="kwa">then</span> <span class="num">1.0</span>
      <span class="kwa">elseif</span> E<span class="sym">&lt;</span><span class="num">0</span> <span class="kwa">then raise</span> negativeExponent<span class="sym">(</span>E<span class="sym">)</span> <span class="kwa">end</span>
      <span class="kwa">else</span>
	 <span class="kwa">if</span> E mod <span class="num">2</span> <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span> X <span class="kwa">else</span> <span class="num">1.0</span> <span class="kwa">end</span>
	 <span class="sym">* {</span>FloatSquare <span class="sym">{</span>FloatPower X E div <span class="num">2</span><span class="sym">}}</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>MakePadding Ch L<span class="sym">}</span>
      <span class="kwa">if</span> L <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
	 Padding <span class="sym">= {</span>MakeList L<span class="sym">}</span>
      <span class="kwa">in</span>
	 <span class="kwa">for</span> V <span class="kwa">in</span> Padding do V <span class="sym">=</span> Ch <span class="kwa">end</span>
	 Padding
      <span class="kwa">else</span>
	 nil
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>PadLeft Ch String L<span class="sym">}</span>
      PL <span class="sym">=</span> L <span class="sym">- {</span>List<span class="sym">.</span>length String<span class="sym">}</span>
   <span class="kwa">in</span>
      <span class="sym">{</span>MakePadding Ch PL<span class="sym">} #</span> String
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>FloatToVS F Prec<span class="sym">}</span>
      <span class="kwa">fun</span> <span class="sym">{</span>FractionToString Frac Prec<span class="sym">}</span>
	 <span class="kwa">if</span> Prec <span class="sym">=&lt;</span> <span class="num">0</span> <span class="kwa">then</span> &quot;&quot;
	 <span class="kwa">elseif</span> Prec <span class="sym">&gt;</span> <span class="num">9</span> <span class="kwa">then raise</span> excessivePrecision<span class="sym">(</span>Prec<span class="sym">)</span> <span class="kwa">end</span>
	 <span class="kwa">else</span>
	    Shifted <span class="sym">= {</span>FloatPower <span class="num">10.0</span> Prec<span class="sym">} *</span> Frac
	    Digits <span class="sym">= {</span>FloatToInt <span class="sym">{</span>Round Shifted<span class="sym">}}</span>
	 <span class="kwa">in</span>
	    <span class="sym">{</span>PadLeft <span class="sym">&amp;</span><span class="num">0</span> <span class="sym">{</span>IntToString Digits<span class="sym">}</span> Prec<span class="sym">}</span>
	 <span class="kwa">end</span>
      <span class="kwa">end</span>

      I <span class="sym">= {</span>FloatToInt <span class="sym">{</span><span class="kwa">if</span> F <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then</span> Floor <span class="kwa">else</span> Ceil <span class="kwa">end</span> F<span class="sym">}}</span>
      Frac <span class="sym">= {</span>FloatAbs F <span class="sym">- {</span>IntToFloat I<span class="sym">}}</span>
   <span class="kwa">in</span>
      <span class="sym">{</span>IntToString I<span class="sym">} #</span> &quot;<span class="sym">.</span>&quot; <span class="sym"># {</span>FractionToString Frac Prec<span class="sym">}</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>FloatToString F Prec<span class="sym">}</span>
      <span class="sym">{</span>VirtualString<span class="sym">.</span>toString <span class="sym">{</span>FloatToVS F Prec<span class="sym">}}</span>
   <span class="kwa">end</span>
<span class="kwa">in</span>
   <span class="kwa">local</span> Args N RandomHeap SortedHeap <span class="kwa">in</span>
      <span class="sym">[</span>Args<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
      N <span class="sym">= {</span>String<span class="sym">.</span>toInt Args<span class="sym">}</span>
      RandomHeap <span class="sym">= {</span>Random_heap <span class="sym">{</span>NewArray <span class="num">0</span> N<span class="sym">-</span><span class="num">1 0.0</span><span class="sym">}</span> <span class="num">0</span> Seed<span class="sym">}</span>
      SortedHeap <span class="sym">= {</span>Heapsort RandomHeap N<span class="sym">-</span><span class="num">1</span><span class="sym">}</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="sym">{</span>FloatToString <span class="sym">{</span>Get SortedHeap N<span class="sym">-</span><span class="num">1</span><span class="sym">}</span> <span class="num">9</span><span class="sym">}}</span>
   <span class="kwa">end</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
