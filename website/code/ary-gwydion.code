<span class="kwb">module</span><span class="sym">:</span> ary

<span class="kwa">define constant</span> <span class="kwa">&lt;integer-vector&gt;</span> <span class="sym">=</span> <span class="kwd">limited</span><span class="sym">(</span><span class="kwa">&lt;vector&gt;</span><span class="sym">,</span> of<span class="sym">:</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">);</span>

<span class="kwa">define function</span> <span class="kwd">main</span> <span class="sym">(</span>arguments<span class="sym">)</span>
  <span class="kwa">let</span> n <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span><span class="kwd">integer</span><span class="sym">(</span><span class="kwd">element</span><span class="sym">(</span>arguments<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;1&quot;</span><span class="sym">));</span>

  <span class="kwa">let</span> x <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;integer-vector&gt;</span><span class="sym">,</span> size<span class="sym">:</span> n<span class="sym">,</span> fill<span class="sym">:</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwa">let</span> y <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;integer-vector&gt;</span><span class="sym">,</span> size<span class="sym">:</span> n<span class="sym">,</span> fill<span class="sym">:</span> <span class="num">0</span><span class="sym">);</span>

  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> x.size<span class="sym">)</span>
    x<span class="sym">[</span>i<span class="sym">] :=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">end for</span><span class="sym">;</span>

  <span class="kwa">for</span> <span class="sym">(</span>k <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> <span class="num">1000</span><span class="sym">)</span>
    <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> n <span class="sym">-</span> <span class="num">1</span> <span class="kwa">to</span> <span class="num">0</span> <span class="kwa">by</span> <span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
      y<span class="sym">[</span>i<span class="sym">] :=</span> y<span class="sym">[</span>i<span class="sym">] +</span> x<span class="sym">[</span>i<span class="sym">];</span>
    <span class="kwa">end for</span><span class="sym">;</span>
  <span class="kwa">end for</span><span class="sym">;</span>

  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> y<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> y<span class="sym">[</span>y.size <span class="sym">-</span> <span class="num">1</span><span class="sym">]);</span>
<span class="kwa">end function</span> main<span class="sym">;</span>

<span class="kwd">main</span><span class="sym">(</span>application<span class="sym">-</span><span class="kwd">arguments</span><span class="sym">());</span>
