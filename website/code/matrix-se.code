<span class="slc">-- -*- mode: eiffel -*-</span>
<span class="slc">-- $Id: matrix-se.code,v 1.12 2005-12-23 06:48:49 bfulgham Exp $</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- from Steve Thompson</span>
<span class="slc">--</span>
<span class="slc">-- Revised to use FIXED_ARRAY2 by Jose Bollo.</span>
<span class="slc">--</span>
<span class="slc">-- &lt;LOC-OFF&gt;</span>
<span class="slc">--indexing</span>
<span class="slc">--   description: &quot;This class performs the matrix multiplication test&quot;</span>
<span class="slc">--   author : Steve Thompson</span>
<span class="slc">--   email  : &quot;Steve_Thompson&#64;prodigy.net&quot;</span>
<span class="slc">--   date   : February 18, 2001</span>
<span class="slc">--   compile: &quot;compile -clean -boost -no_split -O3 main.e -o main&quot;</span>
<span class="slc">--   run    : &quot;main 300&quot;</span>
<span class="slc">-- &lt;LOC-ON&gt;</span>

<span class="kwa">class</span> MATRIX

insert
	ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span> <span class="slc">-- Creation</span>
   make <span class="kwa">is</span>
      <span class="kwa">local</span>
	 index<span class="sym">,</span> count<span class="sym">:</span> <span class="kwb">INTEGER</span>
	 m1<span class="sym">,</span> m2<span class="sym">:</span> <span class="kwa">like</span> matrix
      <span class="kwa">do</span>
	 <span class="kwa">from</span>
	    <span class="kwa">if</span> argument_count <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span>
	       count <span class="sym">:=</span> <span class="num">1</span>
	    <span class="kwa">else</span>
	       count <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
	    <span class="kwa">end</span>
	    index <span class="sym">:=</span> <span class="num">0</span>
	    m1 <span class="sym">:=</span> <span class="kwd">new_matrix</span><span class="sym">(</span><span class="num">30</span><span class="sym">,</span> <span class="num">30</span><span class="sym">)</span>
	    m2 <span class="sym">:=</span> <span class="kwd">new_matrix</span><span class="sym">(</span><span class="num">30</span><span class="sym">,</span> <span class="num">30</span><span class="sym">)</span>
	    <span class="sym">!!</span>matrix.<span class="kwd">make</span><span class="sym">(</span><span class="num">30</span><span class="sym">,</span> <span class="num">30</span><span class="sym">)</span>
	 until
	    index <span class="sym">=</span> count
	 <span class="kwa">loop</span>
	    <span class="kwd">mmult</span><span class="sym">(</span><span class="num">30</span><span class="sym">,</span> <span class="num">30</span><span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">)</span>
	    index <span class="sym">:=</span> index <span class="sym">+</span> <span class="num">1</span>
	 <span class="kwa">end</span> <span class="slc">-- from</span>
	 <span class="kwd">print</span><span class="sym">(</span>matrix.<span class="kwd">item</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>.to_string <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> matrix.<span class="kwd">item</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="num">3</span><span class="sym">)</span>.to_string <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span>
	       matrix.<span class="kwd">item</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="num">2</span><span class="sym">)</span>.to_string <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> matrix.<span class="kwd">item</span><span class="sym">(</span><span class="num">4</span><span class="sym">,</span> <span class="num">4</span><span class="sym">)</span>.to_string <span class="sym">+</span> <span class="str">&quot;%N&quot;</span><span class="sym">)</span>
      <span class="kwa">end</span> <span class="slc">-- make</span>

<span class="kwa">feature</span> <span class="slc">-- Queries</span>

   matrix<span class="sym">:</span> FIXED_ARRAY2<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">]</span>

   <span class="kwd">new_matrix</span><span class="sym">(</span>rows<span class="sym">,</span> columns<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">):</span> <span class="kwa">like</span> matrix <span class="kwa">is</span>
	 <span class="slc">-- Create and populate a new matrix.</span>
      <span class="kwa">local</span>
	 i<span class="sym">,</span> j<span class="sym">,</span> count<span class="sym">:</span> <span class="kwb">INTEGER</span>
      <span class="kwa">do</span>
	 <span class="sym">!!</span><span class="kwa">Result</span>.<span class="kwd">make</span><span class="sym">(</span>rows<span class="sym">,</span> columns<span class="sym">)</span>
	 <span class="kwa">from</span>
	    count <span class="sym">:=</span> <span class="num">1</span>
	    i <span class="sym">:=</span> <span class="num">0</span>
	 until i <span class="sym">=</span> rows <span class="kwa">loop</span>
	    <span class="kwa">from</span> j <span class="sym">:=</span> <span class="num">0</span> until j <span class="sym">=</span> columns <span class="kwa">loop</span>
	       <span class="kwa">Result</span>.<span class="kwd">put</span><span class="sym">(</span>count<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">)</span>
	       count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span>
	       j <span class="sym">:=</span> j <span class="sym">+</span> <span class="num">1</span>
	    <span class="kwa">end</span>
	    i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>
	 <span class="kwa">end</span>
      <span class="kwa">end</span> <span class="slc">-- new_matrix</span>

<span class="kwa">feature</span> <span class="slc">-- Commands</span>

   <span class="kwd">zero_matrix</span><span class="sym">(</span>rows<span class="sym">,</span> columns<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> a_matrix<span class="sym">:</span> <span class="kwa">like</span> matrix<span class="sym">)</span> <span class="kwa">is</span>
	 <span class="slc">-- Clear a matrix</span>
      <span class="kwa">do</span>
	 matrix.<span class="kwd">make</span><span class="sym">(</span>rows<span class="sym">,</span> columns<span class="sym">)</span>
      <span class="kwa">end</span> <span class="slc">-- zero_matrix</span>

   <span class="kwd">mmult</span><span class="sym">(</span>rows<span class="sym">,</span> columns<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> first<span class="sym">,</span> second<span class="sym">:</span> <span class="kwa">like</span> matrix<span class="sym">)</span> <span class="kwa">is</span>
	 <span class="slc">-- Multiply two matrices.</span>
      <span class="kwa">local</span>
	 i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> val<span class="sym">:</span> <span class="kwb">INTEGER</span>
      <span class="kwa">do</span>
	 <span class="kwd">zero_matrix</span><span class="sym">(</span>rows<span class="sym">,</span> columns<span class="sym">,</span> matrix<span class="sym">)</span>
	 <span class="kwa">from</span> i <span class="sym">:=</span> <span class="num">0</span> until i <span class="sym">=</span> rows <span class="kwa">loop</span>
	    <span class="kwa">from</span> j <span class="sym">:=</span> <span class="num">0</span> until j <span class="sym">=</span> columns <span class="kwa">loop</span>
	       val <span class="sym">:=</span> <span class="num">0</span>
	       <span class="kwa">from</span> k <span class="sym">:=</span> <span class="num">0</span> until k <span class="sym">=</span> columns <span class="kwa">loop</span>
		  val <span class="sym">:=</span> val <span class="sym">+</span> first.<span class="kwd">item</span><span class="sym">(</span>i<span class="sym">,</span> k<span class="sym">) *</span> second.<span class="kwd">item</span><span class="sym">(</span>k<span class="sym">,</span> j<span class="sym">)</span>
		  k <span class="sym">:=</span> k <span class="sym">+</span> <span class="num">1</span>
	       <span class="kwa">end</span>
	       matrix.<span class="kwd">put</span><span class="sym">(</span>val<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">)</span>
	       j <span class="sym">:=</span> j <span class="sym">+</span> <span class="num">1</span>
	    <span class="kwa">end</span>
	    i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>
	 <span class="kwa">end</span> <span class="slc">-- from</span>
      <span class="kwa">end</span> <span class="slc">-- mmult</span>

<span class="kwa">end</span>
