<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: lists1-g++.code,v 1.1 2004-11-02 08:52:35 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://www.bagley.org/~doug/shootout/
</FONT></I>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iostream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;list&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;numeric&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;ext/numeric&gt;</FONT></B>

using namespace std;

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">list_print_n</FONT></B> (list&lt;<B><FONT COLOR="#228B22">int</FONT></B>&gt; L, <B><FONT COLOR="#228B22">int</FONT></B> n) {
    <B><FONT COLOR="#228B22">int</FONT></B> c, lastc = n - 1;
    list&lt;<B><FONT COLOR="#228B22">int</FONT></B>&gt;::iterator i;
    <B><FONT COLOR="#A020F0">for</FONT></B> (c = 0, i = L.begin(); i != L.end(), c &lt; n; ++i, ++c) {
	cout &lt;&lt; (*i);
	<B><FONT COLOR="#A020F0">if</FONT></B> (c &lt; lastc) cout &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>;
    }
    cout &lt;&lt; endl;
}

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> argc, <B><FONT COLOR="#228B22">char</FONT></B>* argv[]) {
    <B><FONT COLOR="#228B22">int</FONT></B> N = (argc == 2 ? (atoi(argv[1]) &lt; 1 ? 1 : atoi(argv[1])): 1);
    list&lt;<B><FONT COLOR="#228B22">int</FONT></B>&gt;::iterator i;

    <I><FONT COLOR="#B22222">// create empty list B
</FONT></I>    list&lt;<B><FONT COLOR="#228B22">int</FONT></B>&gt; B;

    <I><FONT COLOR="#B22222">// create list (A) of integers from 1 through N
</FONT></I>    list&lt;<B><FONT COLOR="#228B22">int</FONT></B>&gt; A(N);
    <B><FONT COLOR="#5F9EA0">__gnu_cxx</FONT></B>::iota(A.begin(), A.end(), 1);

    <I><FONT COLOR="#B22222">// move each individual item from A to B, in a loop, reversing order
</FONT></I>    <B><FONT COLOR="#A020F0">while</FONT></B> (! A.empty()) {
        B.push_front(A.front());
        A.pop_front();
    }
    
    <I><FONT COLOR="#B22222">// print first 2 elements of B
</FONT></I>    list_print_n(B, 2);

    <I><FONT COLOR="#B22222">// reverse B (can be done in place)
</FONT></I>    B.reverse();
    <I><FONT COLOR="#B22222">// reverse(B.begin(), B.end());
</FONT></I>
    <I><FONT COLOR="#B22222">// is 0 a member of B?
</FONT></I>    cout &lt;&lt; ((find(B.begin(), B.end(), 0) == B.end()) ? <B><FONT COLOR="#BC8F8F">&quot;false&quot;</FONT></B> : <B><FONT COLOR="#BC8F8F">&quot;true&quot;</FONT></B>) &lt;&lt; endl;

    <I><FONT COLOR="#B22222">// is N a member of B?
</FONT></I>    cout &lt;&lt; ((find(B.begin(), B.end(), N) == B.end()) ? <B><FONT COLOR="#BC8F8F">&quot;false&quot;</FONT></B> : <B><FONT COLOR="#BC8F8F">&quot;true&quot;</FONT></B>) &lt;&lt; endl;

    <I><FONT COLOR="#B22222">// filter values from B to A that are less than N/2, preserving order
</FONT></I>    <B><FONT COLOR="#228B22">int</FONT></B> mid = N/2;
    <B><FONT COLOR="#A020F0">for</FONT></B> (i = B.begin(); i != B.end(); ++i) {
	<B><FONT COLOR="#A020F0">if</FONT></B> ((*i) &lt; mid) A.push_back(*i);
    }

    <I><FONT COLOR="#B22222">// print first ten items of A
</FONT></I>    list_print_n(A, 10);

    <I><FONT COLOR="#B22222">// print sum of items in A that are less than 1000
</FONT></I>    <B><FONT COLOR="#228B22">int</FONT></B> sum = 0;
    <B><FONT COLOR="#A020F0">for</FONT></B> (i = A.begin(); i != A.end(); ++i) {
	<B><FONT COLOR="#A020F0">if</FONT></B> ((*i) &lt; 1000) sum += (*i);
    }
    cout &lt;&lt; sum &lt;&lt; endl;

    <I><FONT COLOR="#B22222">// append B to end of A
</FONT></I>    A.splice(A.end(), B);

    <I><FONT COLOR="#B22222">// print length and last element of A
</FONT></I>    cout &lt;&lt; A.size() &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> &lt;&lt; A.back() &lt;&lt; endl;
}</pre></td></tr></table>
