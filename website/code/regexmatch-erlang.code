<span class="line">    1 </span><span class="slc">%%% -*- mode: erlang -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">%%% $Id: regexmatch-erlang.code,v 1.4 2004-11-13 07:42:31 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">%%% http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">-</span>module<span class="sym">(</span>regexmatch<span class="sym">)</span>.
<span class="line">    6 </span><span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.
<span class="line">    7 </span>
<span class="line">    8 </span><span class="slc">%% get the program argument, which is how many test iterations to run
</span><span class="line">    9 </span><span class="slc"></span>main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">'1'</span><span class="sym">])</span>.
<span class="line">   10 </span>main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span><span class="line">   11 </span><span class="sym"></span>    Num <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Arg<span class="sym">)),
</span><span class="line">   12 </span><span class="sym">    {</span>ok<span class="sym">,</span> Re<span class="sym">} =</span> regexp<span class="sym">:</span>parse<span class="sym">(
</span><span class="line">   13 </span><span class="sym"></span>                 <span class="str">&quot;(^|[^0-9</span><span class="esc">\\</span><span class="str">(])&quot;</span>                <span class="slc">% preceeding non-digit or bol
</span><span class="line">   14 </span><span class="slc"></span>                 <span class="str">&quot;(&quot;</span>                                <span class="slc">% area code
</span><span class="line">   15 </span><span class="slc"></span>                 <span class="str">&quot;</span><span class="esc">\\</span><span class="str">([0-9][0-9][0-9]</span><span class="esc">\\</span><span class="str">)&quot;</span>        <span class="slc">% is either 3 digits in parens
</span><span class="line">   16 </span><span class="slc"></span>                 <span class="str">&quot;|&quot;</span>                                <span class="slc">% or
</span><span class="line">   17 </span><span class="slc"></span>                 <span class="str">&quot;[0-9][0-9][0-9]&quot;</span>                <span class="slc">% just 3 digits
</span><span class="line">   18 </span><span class="slc"></span>                 <span class="str">&quot;)&quot;</span>                                <span class="slc">% end of area code
</span><span class="line">   19 </span><span class="slc"></span>                 <span class="str">&quot; &quot;</span>                                <span class="slc">% area code is followed by one space
</span><span class="line">   20 </span><span class="slc"></span>                 <span class="str">&quot;[0-9][0-9][0-9]&quot;</span>                <span class="slc">% exchange is 3 digits
</span><span class="line">   21 </span><span class="slc"></span>                 <span class="str">&quot;[ -]&quot;</span>                                <span class="slc">% separator is either space or dash
</span><span class="line">   22 </span><span class="slc"></span>                 <span class="str">&quot;[0-9][0-9][0-9][0-9]&quot;</span>                <span class="slc">% last 4 digits
</span><span class="line">   23 </span><span class="slc"></span>                 <span class="str">&quot;($|[^0-9])&quot;</span>                        <span class="slc">% must be followed by a non-digit
</span><span class="line">   24 </span><span class="slc"></span>                <span class="sym">),
</span><span class="line">   25 </span><span class="sym"></span>    Plist <span class="sym">=</span> readlines<span class="sym">(),
</span><span class="line">   26 </span><span class="sym"></span>    test<span class="sym">(</span>Num<span class="sym">,</span> Re<span class="sym">,</span> Plist<span class="sym">),
</span><span class="line">   27 </span><span class="sym"></span>    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.
<span class="line">   28 </span>
<span class="line">   29 </span>
<span class="line">   30 </span>test<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> Regexp<span class="sym">,</span> Plist<span class="sym">) -&gt;
</span><span class="line">   31 </span><span class="sym"></span>    <span class="slc">% display output on last iteration
</span><span class="line">   32 </span><span class="slc"></span>    Nums <span class="sym">=</span> match_phones<span class="sym">(</span>Regexp<span class="sym">,</span> Plist<span class="sym">),
</span><span class="line">   33 </span><span class="sym"></span>    print_phones<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> Nums<span class="sym">),
</span><span class="line">   34 </span><span class="sym"></span>    true<span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span>test<span class="sym">(</span>N<span class="sym">,</span> Regexp<span class="sym">,</span> Plist<span class="sym">) -&gt;
</span><span class="line">   36 </span><span class="sym"></span>    match_phones<span class="sym">(</span>Regexp<span class="sym">,</span> Plist<span class="sym">),
</span><span class="line">   37 </span><span class="sym"></span>    test<span class="sym">(</span>N<span class="num">-1</span><span class="sym">,</span> Regexp<span class="sym">,</span> Plist<span class="sym">)</span>.
<span class="line">   38 </span>
<span class="line">   39 </span>
<span class="line">   40 </span>print_phones<span class="sym">(</span>Count<span class="sym">, [</span>H<span class="sym">|</span>T<span class="sym">]) -&gt;
</span><span class="line">   41 </span><span class="sym">    [</span>A<span class="sym">,</span>E<span class="sym">,</span>N<span class="sym">] =</span> H<span class="sym">,
</span><span class="line">   42 </span><span class="sym"></span>    <span class="slc">% A,E,N is a list of the matching sub-expressions, which are:
</span><span class="line">   43 </span><span class="slc"></span>    <span class="slc">% Areacode (3 digits), Exchange (3 digits), Number (4 digits)
</span><span class="line">   44 </span><span class="slc"></span>    io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~w: (~s) ~s-~s~n&quot;</span><span class="sym">, [</span>Count<span class="sym">,</span> A<span class="sym">,</span>E<span class="sym">,</span>N<span class="sym">]),
</span><span class="line">   45 </span><span class="sym"></span>    print_phones<span class="sym">(</span>Count<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> T<span class="sym">);
</span><span class="line">   46 </span><span class="sym"></span>print_phones<span class="sym">(</span>_<span class="sym">, []) -&gt;
</span><span class="line">   47 </span><span class="sym"></span>    true.
<span class="line">   48 </span>
<span class="line">   49 </span>
<span class="line">   50 </span>match_phones<span class="sym">(</span>Regexp<span class="sym">,</span> List<span class="sym">) -&gt;
</span><span class="line">   51 </span><span class="sym"></span>    mapfilter<span class="sym">(
</span><span class="line">   52 </span><span class="sym"></span>      <span class="kwa">fun</span><span class="sym">(</span>String<span class="sym">) -&gt;
</span><span class="line">   53 </span><span class="sym"></span>              <span class="kwa">case</span> regexp<span class="sym">:</span>matches<span class="sym">(</span>String<span class="sym">,</span> Regexp<span class="sym">)</span> <span class="kwa">of
</span><span class="line">   54 </span><span class="kwa"></span>                  <span class="sym">{</span>match<span class="sym">, []}      -&gt;</span> false<span class="sym">;
</span><span class="line">   55 </span><span class="sym">                  {</span>match<span class="sym">,</span> Matches<span class="sym">} -&gt;</span> parse_phone<span class="sym">(</span>String<span class="sym">,</span> Matches<span class="sym">);
</span><span class="line">   56 </span><span class="sym"></span>                  _                <span class="sym">-&gt;</span> false
<span class="line">   57 </span>              <span class="kwa">end
</span><span class="line">   58 </span><span class="kwa">      end</span><span class="sym">,
</span><span class="line">   59 </span><span class="sym"></span>      List<span class="sym">)</span>.
<span class="line">   60 </span>
<span class="line">   61 </span>
<span class="line">   62 </span>parse_phone<span class="sym">(</span>Str<span class="sym">, [</span>H<span class="sym">|</span>T<span class="sym">]) -&gt;
</span><span class="line">   63 </span><span class="sym">    {</span>Start<span class="sym">,</span> Len<span class="sym">} =</span> H<span class="sym">,
</span><span class="line">   64 </span><span class="sym"></span>    <span class="slc">% Numstr is something that looks like a complete phone #
</span><span class="line">   65 </span><span class="slc"></span>    Numstr <span class="sym">=</span> string<span class="sym">:</span>substr<span class="sym">(</span>Str<span class="sym">,</span> Start<span class="sym">,</span> Len<span class="sym">),
</span><span class="line">   66 </span><span class="sym"></span>    <span class="kwa">case</span> regexp<span class="sym">:</span>matches<span class="sym">(</span>Numstr<span class="sym">,</span> <span class="str">&quot;[0-9][0-9][0-9][0-9]*&quot;</span><span class="sym">)</span> <span class="kwa">of
</span><span class="line">   67 </span><span class="kwa"></span>        <span class="sym">{</span>match<span class="sym">, []}      -&gt;</span> false<span class="sym">;
</span><span class="line">   68 </span><span class="sym">        {</span>match<span class="sym">,</span> Matches<span class="sym">} -&gt;
</span><span class="line">   69 </span><span class="sym"></span>            lists<span class="sym">:</span>map<span class="sym">(</span><span class="kwa">fun</span><span class="sym">({</span>Offset<span class="sym">,</span> Length<span class="sym">}) -&gt;
</span><span class="line">   70 </span><span class="sym"></span>                              string<span class="sym">:</span>substr<span class="sym">(</span>Numstr<span class="sym">,</span> Offset<span class="sym">,</span> Length<span class="sym">)</span> <span class="kwa">end</span><span class="sym">,
</span><span class="line">   71 </span><span class="sym"></span>                      Matches<span class="sym">);
</span><span class="line">   72 </span><span class="sym"></span>        _                <span class="sym">-&gt;</span> false
<span class="line">   73 </span>    <span class="kwa">end</span><span class="sym">;
</span><span class="line">   74 </span><span class="sym"></span>parse_phone<span class="sym">(</span>Str<span class="sym">, []) -&gt; []</span>.
<span class="line">   75 </span>
<span class="line">   76 </span>
<span class="line">   77 </span>mapfilter<span class="sym">(</span>Fun<span class="sym">, [</span>H<span class="sym">|</span>T<span class="sym">]) -&gt;
</span><span class="line">   78 </span><span class="sym"></span>    <span class="kwa">case</span> Fun<span class="sym">(</span>H<span class="sym">)</span> <span class="kwa">of
</span><span class="line">   79 </span><span class="kwa"></span>        false <span class="sym">-&gt;</span> mapfilter<span class="sym">(</span>Fun<span class="sym">,</span> T<span class="sym">);
</span><span class="line">   80 </span><span class="sym"></span>        New   <span class="sym">-&gt; [</span>New <span class="sym">|</span> mapfilter<span class="sym">(</span>Fun<span class="sym">,</span> T<span class="sym">)]
</span><span class="line">   81 </span><span class="sym"></span>    <span class="kwa">end</span><span class="sym">;
</span><span class="line">   82 </span><span class="sym"></span>mapfilter<span class="sym">(</span>_<span class="sym">, []) -&gt; []</span>.
<span class="line">   83 </span>
<span class="line">   84 </span>
<span class="line">   85 </span>readlines<span class="sym">() -&gt;
</span><span class="line">   86 </span><span class="sym"></span>    Port <span class="sym">=</span> <span class="kwb">open_port</span><span class="sym">({</span>fd<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">}, [</span>eof<span class="sym">, {</span>line<span class="sym">,</span> <span class="num">512</span><span class="sym">}]),
</span><span class="line">   87 </span><span class="sym"></span>    readlines_from_stream<span class="sym">([],</span> Port<span class="sym">)</span>.
<span class="line">   88 </span>
<span class="line">   89 </span>readlines_from_stream<span class="sym">(</span>Lines<span class="sym">,</span> Port<span class="sym">) -&gt;
</span><span class="line">   90 </span><span class="sym"></span>    <span class="kwa">receive
</span><span class="line">   91 </span><span class="kwa"></span>        <span class="sym">{</span>Port<span class="sym">,</span> eof<span class="sym">} -&gt;
</span><span class="line">   92 </span><span class="sym"></span>            lists<span class="sym">:</span>reverse<span class="sym">(</span>Lines<span class="sym">);
</span><span class="line">   93 </span><span class="sym">        {</span>Port<span class="sym">, {</span>_<span class="sym">, {</span>_<span class="sym">,</span> Line<span class="sym">}}} -&gt;
</span><span class="line">   94 </span><span class="sym"></span>            readlines_from_stream<span class="sym">([</span>Line<span class="sym">|</span>Lines<span class="sym">],</span> Port<span class="sym">)
</span><span class="line">   95 </span><span class="sym"></span>    <span class="kwa">end</span>.
