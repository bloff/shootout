BUILD COMMANDS FOR: binarytrees.cmucl

Sat Sep 17 09:51:03 PDT 2005

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "binarytrees.cmucl_compile")'
### START binarytrees.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "binarytrees.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END binarytrees.cmucl_compile

; Loading #P"/opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 17 SEP 05 09:51:03 am.
; Compiling: /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.cmucl 17 SEP 05 09:51:03 am

; Converted BINARYTREE.
; Converted DODEPTH.
; Converted TREENODE.
; Converted ITEMCHECK.
; Converted MAIN.
; Compiling DEFUN MAIN: 

; 
; 
; File: /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.cmucl

; In: DEFUN DODEPTH

;   (+ CHECK (ITEMCHECK #) (ITEMCHECK #))
; --> + 
; ==>
;   (+ CHECK (ITEMCHECK #))
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; ==>
;   (+ (+ CHECK #) (ITEMCHECK #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN ITEMCHECK

;   (+ (CAR TREE) (ITEMCHECK #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (- (+ # #) (ITEMCHECK #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (+ (CAR TREE) (ITEMCHECK #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 
;   (- (+ # #) (ITEMCHECK #))
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 

; In: DEFUN BINARYTREE

;   (DOTIMES (I # NIL)
;     (COND
;       #))
; --> DO BLOCK LET TAGBODY UNLESS COND IF NOT IF >= IF 
; ==>
;   (< I #:G0)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a UNSIGNED-BYTE, not a FIXNUM.
; 

; In: DEFUN DODEPTH

;   (+ CHECK (ITEMCHECK #) (ITEMCHECK #))
; --> + 
; ==>
;   (+ CHECK (ITEMCHECK #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The second argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The second argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 

; In: DEFUN BINARYTREE

;   (DOTIMES (I # NIL)
;     (COND
;       #))
; --> DO BLOCK LET TAGBODY PSETQ PSETF LET* MULTIPLE-VALUE-BIND LET 1+ 
; ==>
;   (+ I 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;     The result is a (INTEGER 1), not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;     The result is a (INTEGER 1), not a FIXNUM.
;     etc.
; 

; In: DEFUN DODEPTH

;   (FORMAT T
;           "~D~9T trees of depth ~D~32T  check: ~D"
;           (* ITERATIONS 2)
;           DEPTH
;           ...)
; --> FORMAT FORMATTER FUNCTION BLOCK 
; ==>
;   (WRITE #:FORMAT-ARG-33 :STREAM STREAM :BASE ...)
; Note: Doing signed word to integer coercion (cost 20).
; 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   39 notes


; binarytrees.x86f written.
; Compilation finished in 0:00:01.
### START binarytrees.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "binarytrees.x86f" :verbose nil :print nil)
(main) (quit)
### END binarytrees.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "binarytrees.cmucl_run" :verbose nil :print nil)' %A
************************************************************
*   TEST (binarytrees.cmucl_run) FAILED - ERROR:  binarytrees.cmucl_out differs from Output.12
************************************************************
-rw-r--r--  1 brent brent 266 Sep 17 09:50 Output.12
-rw-r--r--  1 brent brent 319 Sep 17 09:51 binarytrees.cmucl_out


PROGRAM OUTPUT
==============
stretch tree of depth 13          check: -1
8192      trees of depth 4        check: -8192
2048      trees of depth 6        check: -2048
512       trees of depth 8        check: -512
128       trees of depth 10       check: -128
32        trees of depth 12       check: -32
long lived tree of depth 12       check: -1
