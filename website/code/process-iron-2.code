<span class="slc">#!/usr/bin/python -OO</span>
<span class="slc"># The Computer Language Shootout Benchmarks</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by Antoine Pitrou</span>

<span class="kwa">import</span> sys

<span class="slc">#</span>
<span class="slc"># A very simple cooperative threads package using generators,</span>
<span class="slc">#</span>

<span class="kwa">def</span> <span class="kwd">singleton</span><span class="sym">(</span>cls<span class="sym">):</span>
    instance <span class="sym">= []</span>
    <span class="kwa">def</span> <span class="kwd">wrapper</span><span class="sym">(*</span>args<span class="sym">, **</span>kargs<span class="sym">):</span>
        <span class="kwa">if not</span> instance<span class="sym">:</span>
            instance<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="kwd">cls</span><span class="sym">(*</span>args<span class="sym">, **</span>kargs<span class="sym">))</span>
        <span class="kwa">return</span> instance<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
    <span class="kwa">return</span> wrapper

<span class="kwa">class</span> <span class="kwd">WaitObject</span><span class="sym">(</span><span class="kwb">object</span><span class="sym">):</span>
    <span class="kwa">def</span> <span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">,</span> switcher<span class="sym">=</span><span class="kwa">None</span><span class="sym">):</span>
        self<span class="sym">.</span>switcher <span class="sym">=</span> switcher <span class="kwa">or</span> <span class="kwd">global_switcher</span><span class="sym">()</span>
        self<span class="sym">.</span>waiters <span class="sym">= []</span>

    <span class="kwa">def</span> <span class="kwd">get_waiter</span><span class="sym">(</span>self<span class="sym">):</span>
        <span class="kwa">try</span><span class="sym">:</span>
            <span class="kwa">return</span> self<span class="sym">.</span>waiters<span class="sym">.</span><span class="kwd">pop</span><span class="sym">()</span>
        <span class="kwa">except</span> <span class="kwc">IndexError</span><span class="sym">:</span>
            <span class="kwa">return None</span>

    <span class="kwa">def</span> <span class="kwd">add_waiter</span><span class="sym">(</span>self<span class="sym">,</span> waiter<span class="sym">):</span>
        self<span class="sym">.</span>waiters<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>waiter<span class="sym">)</span>

    <span class="kwa">def</span> <span class="kwd">set_ready</span><span class="sym">(</span>self<span class="sym">,</span> ready<span class="sym">):</span>
        self<span class="sym">.</span>switcher<span class="sym">.</span><span class="kwd">set_ready</span><span class="sym">(</span>self<span class="sym">,</span> ready<span class="sym">)</span>

<span class="kwa">class</span> <span class="kwd">Queue</span><span class="sym">(</span>WaitObject<span class="sym">):</span>
    <span class="kwa">def</span> <span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">):</span>
        WaitObject<span class="sym">.</span><span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">)</span>
        self<span class="sym">.</span>data <span class="sym">= []</span>

    <span class="kwa">def</span> <span class="kwd">put</span><span class="sym">(</span>self<span class="sym">,</span> value<span class="sym">):</span>
        self<span class="sym">.</span>data<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>value<span class="sym">)</span>
        self<span class="sym">.</span><span class="kwd">set_ready</span><span class="sym">(</span><span class="kwa">True</span><span class="sym">)</span>

    <span class="kwa">def</span> <span class="kwd">get</span><span class="sym">(</span>self<span class="sym">):</span>
        self<span class="sym">.</span><span class="kwd">set_ready</span><span class="sym">(</span><span class="kwb">len</span><span class="sym">(</span>self<span class="sym">.</span>data<span class="sym">) &gt;</span> <span class="num">1</span><span class="sym">)</span>
        <span class="kwa">return</span> self<span class="sym">.</span>data<span class="sym">.</span><span class="kwd">pop</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>

<span class="kwa">class</span> <span class="kwd">_Ready</span><span class="sym">(</span>WaitObject<span class="sym">):</span>
    <span class="kwa">def</span> <span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">):</span>
        WaitObject<span class="sym">.</span><span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">)</span>
        self<span class="sym">.</span><span class="kwd">set_ready</span><span class="sym">(</span><span class="kwa">True</span><span class="sym">)</span>

<span class="slc"># Special-casing Ready as a singleton is important for scalability</span>
Ready <span class="sym">=</span> <span class="kwd">singleton</span><span class="sym">(</span>_Ready<span class="sym">)</span>

<span class="kwa">class</span> <span class="kwd">Thread</span><span class="sym">(</span><span class="kwb">object</span><span class="sym">):</span>
    <span class="kwa">def</span> <span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">,</span> switcher<span class="sym">=</span><span class="kwa">None</span><span class="sym">):</span>
        self<span class="sym">.</span>switcher <span class="sym">=</span> switcher <span class="kwa">or</span> <span class="kwd">global_switcher</span><span class="sym">()</span>
        self<span class="sym">.</span>switcher<span class="sym">.</span><span class="kwd">add_thread</span><span class="sym">(</span>self<span class="sym">)</span>

<span class="kwa">class</span> <span class="kwd">Switcher</span><span class="sym">(</span><span class="kwb">object</span><span class="sym">):</span>
    <span class="kwa">def</span> <span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">):</span>
        self<span class="sym">.</span>threads <span class="sym">=</span> <span class="kwb">set</span><span class="sym">()</span>
        self<span class="sym">.</span>ready_objects <span class="sym">=</span> <span class="kwb">set</span><span class="sym">()</span>

    <span class="kwa">def</span> <span class="kwd">add_thread</span><span class="sym">(</span>self<span class="sym">,</span> thread<span class="sym">):</span>
        <span class="kwd">Ready</span><span class="sym">().</span><span class="kwd">add_waiter</span><span class="sym">(</span>thread<span class="sym">)</span>
        thread<span class="sym">.</span>runner <span class="sym">=</span> thread<span class="sym">.</span><span class="kwd">run</span><span class="sym">()</span>
        self<span class="sym">.</span>threads<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span>thread<span class="sym">)</span>

    <span class="kwa">def</span> <span class="kwd">set_ready</span><span class="sym">(</span>self<span class="sym">,</span> wait_object<span class="sym">,</span> ready<span class="sym">):</span>
        <span class="kwa">if</span> ready<span class="sym">:</span>
            self<span class="sym">.</span>ready_objects<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span>wait_object<span class="sym">)</span>
        <span class="kwa">else</span><span class="sym">:</span>
            self<span class="sym">.</span>ready_objects<span class="sym">.</span><span class="kwd">discard</span><span class="sym">(</span>wait_object<span class="sym">)</span>

    <span class="kwa">def</span> <span class="kwd">run</span><span class="sym">(</span>self<span class="sym">):</span>
        <span class="kwa">while</span> <span class="kwb">len</span><span class="sym">(</span>self<span class="sym">.</span>threads<span class="sym">):</span>
            <span class="kwa">for</span> r <span class="kwa">in</span> self<span class="sym">.</span>ready_objects<span class="sym">:</span>
                thread <span class="sym">=</span> r<span class="sym">.</span><span class="kwd">get_waiter</span><span class="sym">()</span>
                <span class="kwa">if not</span> thread <span class="kwa">or not</span> thread<span class="sym">.</span>runner<span class="sym">:</span>
                    <span class="kwa">continue</span>
                <span class="kwa">try</span><span class="sym">:</span>
                    wait_object <span class="sym">=</span> thread<span class="sym">.</span>runner<span class="sym">.</span><span class="kwd">next</span><span class="sym">()</span>
                <span class="kwa">except</span> <span class="kwc">StopIteration</span><span class="sym">:</span>
                    thread<span class="sym">.</span>runner <span class="sym">=</span> <span class="kwa">None</span>
                    self<span class="sym">.</span>threads<span class="sym">.</span><span class="kwd">remove</span><span class="sym">(</span>thread<span class="sym">)</span>
                <span class="kwa">else</span><span class="sym">:</span>
                    wait_object<span class="sym">.</span><span class="kwd">add_waiter</span><span class="sym">(</span>thread<span class="sym">)</span>
                <span class="kwa">break</span>

global_switcher <span class="sym">=</span> <span class="kwd">singleton</span><span class="sym">(</span>Switcher<span class="sym">)</span>

<span class="slc">#</span>
<span class="slc"># Here the problem-specific definitions</span>
<span class="slc">#</span>

<span class="kwa">class</span> <span class="kwd">Link</span><span class="sym">(</span>Thread<span class="sym">):</span>
    <span class="kwa">def</span> <span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">,</span> next<span class="sym">):</span>
        Thread<span class="sym">.</span><span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">)</span>
        self<span class="sym">.</span>next <span class="sym">=</span> next
        self<span class="sym">.</span>incoming <span class="sym">=</span> <span class="kwd">Queue</span><span class="sym">()</span>

    <span class="kwa">def</span> <span class="kwd">run</span><span class="sym">(</span>self<span class="sym">):</span>
        <span class="kwa">yield</span> self<span class="sym">.</span>incoming
        self<span class="sym">.</span>store <span class="sym">=</span> self<span class="sym">.</span>incoming<span class="sym">.</span><span class="kwd">get</span><span class="sym">()</span>
        self<span class="sym">.</span>next<span class="sym">.</span>incoming<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span>self<span class="sym">.</span>store <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>

<span class="kwa">class</span> <span class="kwd">Terminus</span><span class="sym">(</span>Thread<span class="sym">):</span>
    <span class="kwa">def</span> <span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">):</span>
        Thread<span class="sym">.</span><span class="kwd">__init__</span><span class="sym">(</span>self<span class="sym">)</span>
        self<span class="sym">.</span>incoming <span class="sym">=</span> <span class="kwd">Queue</span><span class="sym">()</span>

    <span class="kwa">def</span> <span class="kwd">run</span><span class="sym">(</span>self<span class="sym">):</span>
        <span class="kwa">yield</span> self<span class="sym">.</span>incoming
        self<span class="sym">.</span><span class="kwb">sum</span> <span class="sym">=</span> self<span class="sym">.</span>incoming<span class="sym">.</span><span class="kwd">get</span><span class="sym">()</span>
        <span class="kwa">print</span> <span class="str">&quot;%d&quot;</span> <span class="sym">%</span> self<span class="sym">.</span><span class="kwb">sum</span>

<span class="kwa">def</span> <span class="kwd">main</span><span class="sym">():</span>
    N <span class="sym">=</span> <span class="kwb">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>

    <span class="slc"># Create the chain of threads then run them all</span>
    task <span class="sym">=</span> <span class="kwd">Terminus</span><span class="sym">()</span>
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">xrange</span><span class="sym">(</span>N<span class="sym">):</span>
        task <span class="sym">=</span> <span class="kwd">Link</span><span class="sym">(</span>task<span class="sym">)</span>
    task<span class="sym">.</span>incoming<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>

    <span class="kwd">global_switcher</span><span class="sym">().</span><span class="kwd">run</span><span class="sym">()</span>

<span class="kwd">main</span><span class="sym">()</span>
