<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>
<span class="slc">% based on Andrei Formiga's functional Scala program</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application System

<span class="kwb">define</span>
   <span class="kwb">fun</span> <span class="sym">{</span>Flips A<span class="sym">}</span>
      Last <span class="sym">=</span> A<span class="num">.1</span>
   <span class="kwb">in</span>
      <span class="kwb">if</span> Last <span class="sym">==</span> <span class="num">1</span> <span class="kwb">then</span> <span class="num">0</span>
      <span class="kwb">else</span>
         <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..Last div <span class="num">2</span> <span class="kwb">do</span>
            From <span class="sym">=</span> Last <span class="sym">+</span> <span class="num">1</span> <span class="sym">-</span> I
            Swap <span class="sym">=</span> A.I
         <span class="kwb">in</span>
            A.I <span class="sym">:=</span> A.From
            A.From <span class="sym">:=</span> Swap
         <span class="kwb">end</span>

         <span class="sym">{</span>Flips A<span class="sym">} +</span> <span class="num">1</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>


   <span class="kwb">proc</span> <span class="sym">{</span>ShowPermutation A<span class="sym">}</span>
      <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..<span class="sym">{</span>Array.high A<span class="sym">}</span> <span class="kwb">do</span> <span class="sym">{</span>System.printInfo A.I<span class="sym">}</span> <span class="kwb">end</span>
      <span class="sym">{</span>System.showInfo <span class="str">&quot;&quot;</span><span class="sym">}</span>
   <span class="kwb">end</span>

   <span class="kwb">proc</span> <span class="sym">{</span>FlipPermutation A<span class="sym">}</span>
      Count <span class="sym">= {</span>Flips <span class="sym">{</span>Array.clone A<span class="sym">}}</span>
   <span class="kwb">in</span>
      <span class="kwb">if</span> Count <span class="sym">&gt;</span> &#64;MaxFlipsCount <span class="kwb">then</span> MaxFlipsCount <span class="sym">:=</span> Count <span class="kwb">end</span>
      <span class="kwb">if</span> &#64;Check <span class="sym">&lt;</span> <span class="num">30</span> <span class="kwb">then</span> <span class="sym">{</span>ShowPermutation A<span class="sym">}</span> Check <span class="sym">:=</span> &#64;Check <span class="sym">+</span> <span class="num">1</span> <span class="kwb">end</span>
   <span class="kwb">end</span>


   <span class="kwb">proc</span> <span class="sym">{</span>RotateLeft ?A N<span class="sym">}</span>
      Swap <span class="sym">=</span> A<span class="num">.1</span>
   <span class="kwb">in</span>
      <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..N<span class="sym">-</span><span class="num">1</span> <span class="kwb">do</span> A.I <span class="sym">:=</span> A.<span class="sym">(</span>I<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwb">end</span>
      A.N <span class="sym">:=</span> Swap
   <span class="kwb">end</span>

   <span class="kwb">proc</span> <span class="sym">{</span>Permutations A N J<span class="sym">}</span>
      <span class="kwb">if</span> J <span class="sym">&lt;</span> N <span class="kwb">then</span>
         <span class="kwb">if</span> N <span class="sym">==</span> <span class="num">1</span> <span class="kwb">then</span>
            <span class="sym">{</span>FlipPermutation A<span class="sym">}</span>
         <span class="kwb">else</span>
            <span class="sym">{</span>Permutations A N<span class="sym">-</span><span class="num">1 0</span><span class="sym">}</span>
            <span class="sym">{</span>RotateLeft A N<span class="sym">}</span>
            <span class="sym">{</span>Permutations A N J<span class="sym">+</span><span class="num">1</span><span class="sym">}</span>
         <span class="kwb">end</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>


   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String.toInt Arg<span class="sym">}</span>

   <span class="kwb">fun</span> <span class="sym">{</span>Numbers N<span class="sym">}</span>
      A <span class="sym">= {</span>NewArray <span class="num">1</span> N <span class="num">0</span><span class="sym">}</span>
   <span class="kwb">in</span>
      <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..N <span class="kwb">do</span> A.I <span class="sym">:=</span> I <span class="kwb">end</span>
      A
   <span class="kwb">end</span>

   MaxFlipsCount <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
   Check <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>

<span class="kwb">in</span>
   <span class="sym">{</span>Permutations <span class="sym">{</span>Numbers N<span class="sym">}</span> N <span class="num">0</span><span class="sym">}</span>
   <span class="sym">{</span>System.showInfo <span class="str">&quot;Pfannkuchen(&quot;</span> # N # <span class="str">&quot;) = &quot;</span> # &#64;MaxFlipsCount<span class="sym">}</span>
   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
