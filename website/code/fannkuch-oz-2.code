<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span>
   System Application

<span class="kwb">define</span>
   <span class="kwb">fun</span> <span class="sym">{</span>Fannkuch N<span class="sym">}</span>
      <span class="kwa">local</span>
         M <span class="sym">=</span> N<span class="sym">-</span><span class="num">1</span>
         R <span class="sym">= {</span>NewCell N<span class="sym">}</span>
         Check <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
         Perm <span class="sym">= {</span>NewArray <span class="num">0</span> M <span class="num">0</span><span class="sym">}</span>
         Perm1 <span class="sym">= {</span>NewArray <span class="num">0</span> M <span class="num">0</span><span class="sym">}</span>
         Count <span class="sym">= {</span>NewArray <span class="num">0</span> M <span class="num">0</span><span class="sym">}</span>
         MaxPerm <span class="sym">= {</span>NewArray <span class="num">0</span> M <span class="num">0</span><span class="sym">}</span>
         FlipsCount <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
         MaxFlipsCount <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
         Done <span class="sym">= {</span>NewCell false<span class="sym">}</span>
      <span class="kwb">in</span>

         <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">0</span>..M <span class="kwb">do</span> Perm1.I <span class="sym">:=</span> I <span class="kwb">end</span>

         <span class="kwb">for</span> break<span class="sym">:</span>B <span class="kwb">do</span>

            <span class="slc">% show we're working with the same sequence of permutations</span>
            <span class="kwb">if</span> &#64;Check<span class="sym">&lt;</span><span class="num">30</span> <span class="kwb">then</span>
               <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">0</span>..M <span class="kwb">do</span> <span class="sym">{</span>System.print Perm1.I <span class="sym">+</span> <span class="num">1</span><span class="sym">}</span> <span class="kwb">end</span>
               <span class="sym">{</span>System.printInfo <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">}</span>
               Check <span class="sym">:=</span> &#64;Check <span class="sym">+</span> <span class="num">1</span>
            <span class="kwb">end</span>

            <span class="kwb">for</span> while<span class="sym">:</span> &#64;R \= <span class="num">1</span> <span class="kwb">do</span>
               Count.<span class="sym">(</span>&#64;R<span class="sym">-</span><span class="num">1</span><span class="sym">) :=</span> &#64;R
               R <span class="sym">:=</span> &#64;R <span class="sym">-</span> <span class="num">1</span>
            <span class="kwb">end</span>

            <span class="kwb">if</span> <span class="sym">{</span>Not Perm1.0 <span class="sym">==</span> <span class="num">0</span> orelse Perm1.M <span class="sym">==</span> M<span class="sym">}</span> <span class="kwb">then</span>
               <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">0</span>..M <span class="kwb">do</span> Perm.I <span class="sym">:=</span> Perm1.I <span class="kwb">end</span>
               FlipsCount <span class="sym">:=</span> <span class="num">0</span>

               <span class="kwb">for</span> break<span class="sym">:</span>B <span class="kwb">do</span>
                  <span class="kwa">local</span> K <span class="sym">=</span> Perm<span class="num">.0</span> <span class="kwb">in</span>
                     <span class="kwb">if</span> K <span class="sym">==</span> <span class="num">0</span> <span class="kwb">then</span> <span class="sym">{</span>B<span class="sym">}</span> <span class="kwb">end</span>   <span class="slc">% break loop</span>

                     <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">0</span>..<span class="sym">((</span>K<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> div <span class="num">2</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwb">do</span>
                        <span class="kwa">local</span> Swap <span class="sym">=</span> Perm.I <span class="kwb">in</span>
                           Perm.I <span class="sym">:=</span> Perm.<span class="sym">(</span>K<span class="sym">-</span>I<span class="sym">)</span>
                           Perm.<span class="sym">(</span>K<span class="sym">-</span>I<span class="sym">) :=</span> Swap
                        <span class="kwb">end</span>
                     <span class="kwb">end</span>
                     FlipsCount <span class="sym">:=</span> &#64;FlipsCount <span class="sym">+</span> <span class="num">1</span>
                  <span class="kwb">end</span>
               <span class="kwb">end</span>
               <span class="kwb">if</span> &#64;FlipsCount <span class="sym">&gt;</span> &#64;MaxFlipsCount <span class="kwb">then</span>
                  MaxFlipsCount <span class="sym">:=</span> &#64;FlipsCount
                  <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">0</span>..M <span class="kwb">do</span> MaxPerm.I <span class="sym">:=</span> Perm1.I <span class="kwb">end</span>
               <span class="kwb">end</span>
            <span class="kwb">end</span>

            <span class="kwb">for</span> break<span class="sym">:</span>B <span class="kwb">do</span>
               <span class="kwb">if</span> &#64;R <span class="sym">==</span> N <span class="kwb">then</span> Done <span class="sym">:=</span> true <span class="sym">{</span>B<span class="sym">}</span> <span class="kwb">end</span>   <span class="slc">% return from function</span>

               <span class="kwa">local</span> Perm0 <span class="sym">=</span> Perm1.0 I <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span> K <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span> <span class="kwb">in</span>
                  <span class="kwb">for</span> while<span class="sym">:</span> &#64;I <span class="sym">&lt;</span> &#64;R <span class="kwb">do</span>
                     K <span class="sym">:=</span> &#64;I <span class="sym">+</span> <span class="num">1</span>
                     Perm1.&#64;I <span class="sym">:=</span> Perm1.&#64;K
                     I <span class="sym">:=</span> &#64;K
                  <span class="kwb">end</span>
                  Perm1.&#64;R <span class="sym">:=</span> Perm0
               <span class="kwb">end</span>

               Count.&#64;R <span class="sym">:=</span> Count.&#64;R <span class="sym">-</span> <span class="num">1</span>
               <span class="kwb">if</span> Count.&#64;R <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then</span> <span class="sym">{</span>B<span class="sym">}</span> <span class="kwb">end</span>   <span class="slc">% break loop</span>

               R <span class="sym">:=</span> &#64;R <span class="sym">+</span> <span class="num">1</span>
            <span class="kwb">end</span>

            <span class="kwb">if</span> &#64;Done <span class="kwb">then</span> <span class="sym">{</span>B<span class="sym">}</span> <span class="kwb">end</span>

         <span class="kwb">end</span>
         &#64;MaxFlipsCount

      <span class="kwb">end</span>
   <span class="kwb">end</span>


   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String.toInt Arg<span class="sym">}</span>

<span class="kwb">in</span>
   <span class="sym">{</span>System.showInfo <span class="str">&quot;Pfannkuchen(&quot;</span> # <span class="sym">{</span>IntToString N<span class="sym">}</span> # <span class="str">&quot;) = &quot;</span> #
      <span class="sym">{</span>IntToString <span class="sym">{</span>Fannkuch N<span class="sym">}} }</span>
   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
