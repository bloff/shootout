<span class="com">/*</span>
<span class="com">   The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Threading<span class="sym">;</span>

<span class="kwa">class</span> prodcons
<span class="sym">{</span>
   <span class="kwa">private class</span> Buffer
   <span class="sym">{</span>
      <span class="kwa">private</span> <span class="kwb">int</span> m_contents <span class="sym">= -</span><span class="num">1</span><span class="sym">;</span>
      <span class="kwa">private</span> <span class="kwb">bool</span> m_available <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>

      <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">Get</span><span class="sym">(){</span>
         <span class="kwd">lock</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">)</span>
         <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(!</span>m_available<span class="sym">)</span> Monitor<span class="sym">.</span><span class="kwd">Wait</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
            m_available <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
            Monitor<span class="sym">.</span><span class="kwd">Pulse</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
         <span class="sym">}</span>
         <span class="kwa">return</span> m_contents<span class="sym">;</span>
      <span class="sym">}</span>

      <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">Put</span><span class="sym">(</span><span class="kwb">int</span> <span class="kwa">value</span><span class="sym">){</span>
         <span class="kwd">lock</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">)</span>
         <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>m_available<span class="sym">)</span> Monitor<span class="sym">.</span><span class="kwd">Wait</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
            m_contents <span class="sym">=</span> <span class="kwa">value</span><span class="sym">;</span>
            m_available <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
            Monitor<span class="sym">.</span><span class="kwd">Pulse</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="slc">// Could create separate Producer and Consumer classes</span>
   <span class="slc">// Instead add the members and methods to ProdCons class</span>
   <span class="kwa">private</span> Buffer b<span class="sym">;</span>
   <span class="kwa">private</span> <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">private static</span> <span class="kwb">int</span> produced <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> consumed <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   <span class="kwa">private</span> <span class="kwd">prodcons</span><span class="sym">(</span>Buffer sharedBuffer<span class="sym">,</span> <span class="kwb">int</span> nTimes<span class="sym">) {</span>
      b <span class="sym">=</span> sharedBuffer<span class="sym">;</span>
      n <span class="sym">=</span> nTimes<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">private</span> <span class="kwb">void</span> <span class="kwd">Produce</span><span class="sym">() {</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++){</span>
         b<span class="sym">.</span><span class="kwd">Put</span><span class="sym">(</span>i<span class="sym">);</span>
         <span class="sym">++</span>produced<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">private</span> <span class="kwb">void</span> <span class="kwd">Consume</span><span class="sym">() {</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++){</span>
         b<span class="sym">.</span><span class="kwd">Get</span><span class="sym">();</span>
         <span class="sym">++</span>consumed<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">[]</span> args<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="slc">// Get the number of iterations</span>
      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

      Buffer sharedBuffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Buffer</span><span class="sym">();</span>
      <span class="slc">//create producer and consumer</span>
      prodcons producer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">prodcons</span><span class="sym">(</span>sharedBuffer<span class="sym">,</span> n<span class="sym">);</span>
      prodcons consumer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">prodcons</span><span class="sym">(</span>sharedBuffer<span class="sym">,</span> n<span class="sym">);</span>

      <span class="slc">//start producer and consumer threads</span>
      Thread tProducer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Thread</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwd">ThreadStart</span><span class="sym">(</span> producer<span class="sym">.</span>Produce <span class="sym">));</span>
      Thread tConsumer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Thread</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwd">ThreadStart</span><span class="sym">(</span> consumer<span class="sym">.</span>Consume <span class="sym">));</span>
      tProducer<span class="sym">.</span><span class="kwd">Start</span><span class="sym">();</span>
      tConsumer<span class="sym">.</span><span class="kwd">Start</span><span class="sym">();</span>

      <span class="slc">// wait on both threads</span>
      tProducer<span class="sym">.</span><span class="kwd">Join</span><span class="sym">();</span>
      tConsumer<span class="sym">.</span><span class="kwd">Join</span><span class="sym">();</span>

        Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0} {1}&quot;</span><span class="sym">,</span> prodcons<span class="sym">.</span>produced<span class="sym">,</span> prodcons<span class="sym">.</span>consumed<span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>
