<span class="line">    1 </span><span class="com">/*
</span><span class="line">    2 </span><span class="com">   The Great Computer Language Shootout
</span><span class="line">    3 </span><span class="com">   http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="com">   contributed by Isaac Gouy
</span><span class="line">    5 </span><span class="com">*/</span>
<span class="line">    6 </span>
<span class="line">    7 </span><span class="kwa">using</span> System<span class="sym">;
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">using</span> System<span class="sym">.</span>Threading<span class="sym">;
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym"></span><span class="kwc">class</span> prodcons
<span class="line">   11 </span><span class="sym">{
</span><span class="line">   12 </span><span class="sym"></span>   <span class="kwc">private class</span> Buffer
<span class="line">   13 </span>   <span class="sym">{
</span><span class="line">   14 </span><span class="sym"></span>      <span class="kwc">private</span> <span class="kwb">int</span> m_contents <span class="sym">= -</span><span class="num">1</span><span class="sym">;
</span><span class="line">   15 </span><span class="sym"></span>      <span class="kwc">private</span> <span class="kwb">bool</span> m_available <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span>      <span class="kwc">public</span> <span class="kwb">int</span> Get<span class="sym">(){
</span><span class="line">   18 </span><span class="sym"></span>         lock<span class="sym">(</span><span class="kwa">this</span><span class="sym">)
</span><span class="line">   19 </span><span class="sym">         {
</span><span class="line">   20 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(!</span>m_available<span class="sym">)</span> Monitor<span class="sym">.</span>Wait<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span><span class="line">   21 </span><span class="sym"></span>            m_available <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>            Monitor<span class="sym">.</span>Pulse<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span><span class="line">   23 </span><span class="sym">         }
</span><span class="line">   24 </span><span class="sym"></span>         <span class="kwa">return</span> m_contents<span class="sym">;
</span><span class="line">   25 </span><span class="sym">      }
</span><span class="line">   26 </span><span class="sym">
</span><span class="line">   27 </span><span class="sym"></span>      <span class="kwc">public</span> <span class="kwb">void</span> Put<span class="sym">(</span><span class="kwb">int</span> value<span class="sym">){
</span><span class="line">   28 </span><span class="sym"></span>         lock<span class="sym">(</span><span class="kwa">this</span><span class="sym">)
</span><span class="line">   29 </span><span class="sym">         {
</span><span class="line">   30 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>m_available<span class="sym">)</span> Monitor<span class="sym">.</span>Wait<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span><span class="line">   31 </span><span class="sym"></span>            m_contents <span class="sym">=</span> value<span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>            m_available <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>            Monitor<span class="sym">.</span>Pulse<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span><span class="line">   34 </span><span class="sym">         }
</span><span class="line">   35 </span><span class="sym">      }
</span><span class="line">   36 </span><span class="sym">   }
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym">
</span><span class="line">   39 </span><span class="sym"></span>   <span class="slc">// Could create separate Producer and Consumer classes
</span><span class="line">   40 </span><span class="slc"></span>   <span class="slc">// Instead add the members and methods to ProdCons class
</span><span class="line">   41 </span><span class="slc"></span>   <span class="kwc">private</span> Buffer b<span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>   <span class="kwc">private</span> <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>   <span class="kwc">private</span> <span class="kwb">static int</span> produced <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> consumed <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   44 </span><span class="sym">
</span><span class="line">   45 </span><span class="sym"></span>   <span class="kwc">private</span> prodcons<span class="sym">(</span>Buffer sharedBuffer<span class="sym">,</span> <span class="kwb">int</span> nTimes<span class="sym">) {
</span><span class="line">   46 </span><span class="sym"></span>      b <span class="sym">=</span> sharedBuffer<span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span>      n <span class="sym">=</span> nTimes<span class="sym">;
</span><span class="line">   48 </span><span class="sym">   }
</span><span class="line">   49 </span><span class="sym">
</span><span class="line">   50 </span><span class="sym"></span>   <span class="kwc">private</span> <span class="kwb">void</span> Produce<span class="sym">() {
</span><span class="line">   51 </span><span class="sym"></span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++){
</span><span class="line">   52 </span><span class="sym"></span>         b<span class="sym">.</span>Put<span class="sym">(</span>i<span class="sym">);
</span><span class="line">   53 </span><span class="sym">         ++</span>produced<span class="sym">;
</span><span class="line">   54 </span><span class="sym">      }
</span><span class="line">   55 </span><span class="sym">   }
</span><span class="line">   56 </span><span class="sym">
</span><span class="line">   57 </span><span class="sym"></span>   <span class="kwc">private</span> <span class="kwb">void</span> Consume<span class="sym">() {
</span><span class="line">   58 </span><span class="sym"></span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++){
</span><span class="line">   59 </span><span class="sym"></span>         b<span class="sym">.</span>Get<span class="sym">();
</span><span class="line">   60 </span><span class="sym">         ++</span>consumed<span class="sym">;
</span><span class="line">   61 </span><span class="sym">      }
</span><span class="line">   62 </span><span class="sym">   }
</span><span class="line">   63 </span><span class="sym">
</span><span class="line">   64 </span><span class="sym">
</span><span class="line">   65 </span><span class="sym"></span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
</span><span class="line">   66 </span><span class="sym">   {
</span><span class="line">   67 </span><span class="sym"></span>      <span class="slc">// Get the number of iterations
</span><span class="line">   68 </span><span class="slc"></span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   69 </span><span class="sym"></span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   70 </span><span class="sym">
</span><span class="line">   71 </span><span class="sym"></span>      Buffer sharedBuffer <span class="sym">=</span> <span class="kwa">new</span> Buffer<span class="sym">();
</span><span class="line">   72 </span><span class="sym"></span>      <span class="slc">//create producer and consumer
</span><span class="line">   73 </span><span class="slc"></span>      prodcons producer <span class="sym">=</span> <span class="kwa">new</span> prodcons<span class="sym">(</span>sharedBuffer<span class="sym">,</span> n<span class="sym">);
</span><span class="line">   74 </span><span class="sym"></span>      prodcons consumer <span class="sym">=</span> <span class="kwa">new</span> prodcons<span class="sym">(</span>sharedBuffer<span class="sym">,</span> n<span class="sym">);
</span><span class="line">   75 </span><span class="sym">
</span><span class="line">   76 </span><span class="sym"></span>      <span class="slc">//start producer and consumer threads
</span><span class="line">   77 </span><span class="slc"></span>      Thread tProducer <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">(</span><span class="kwa">new</span> ThreadStart<span class="sym">(</span> producer<span class="sym">.</span>Produce <span class="sym">));
</span><span class="line">   78 </span><span class="sym"></span>      Thread tConsumer <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">(</span><span class="kwa">new</span> ThreadStart<span class="sym">(</span> consumer<span class="sym">.</span>Consume <span class="sym">));
</span><span class="line">   79 </span><span class="sym"></span>      tProducer<span class="sym">.</span>Start<span class="sym">();
</span><span class="line">   80 </span><span class="sym"></span>      tConsumer<span class="sym">.</span>Start<span class="sym">();
</span><span class="line">   81 </span><span class="sym">
</span><span class="line">   82 </span><span class="sym"></span>      <span class="slc">// wait on both threads
</span><span class="line">   83 </span><span class="slc"></span>      tProducer<span class="sym">.</span>Join<span class="sym">();
</span><span class="line">   84 </span><span class="sym"></span>      tConsumer<span class="sym">.</span>Join<span class="sym">();
</span><span class="line">   85 </span><span class="sym">
</span><span class="line">   86 </span><span class="sym"></span>        Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0} {1}&quot;</span><span class="sym">,</span> prodcons<span class="sym">.</span>produced<span class="sym">,</span> prodcons<span class="sym">.</span>consumed<span class="sym">);
</span><span class="line">   87 </span><span class="sym">   }
</span><span class="line">   88 </span><span class="sym">}</span>
