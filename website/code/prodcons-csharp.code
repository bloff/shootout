<span class="com">/*
   The Great Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Threading<span class="sym">;

</span><span class="kwc">class</span> prodcons
<span class="sym">{
</span>   <span class="kwc">private class</span> Buffer
   <span class="sym">{
</span>      <span class="kwc">private</span> <span class="kwb">int</span> m_contents <span class="sym">= -</span><span class="num">1</span><span class="sym">;
</span>      <span class="kwc">private</span> <span class="kwb">bool</span> m_available <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;

</span>      <span class="kwc">public</span> <span class="kwb">int</span> Get<span class="sym">(){
</span>         lock<span class="sym">(</span><span class="kwa">this</span><span class="sym">)
         {
</span>            <span class="kwa">if</span> <span class="sym">(!</span>m_available<span class="sym">)</span> Monitor<span class="sym">.</span>Wait<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span>            m_available <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span>            Monitor<span class="sym">.</span>Pulse<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
         }
</span>         <span class="kwa">return</span> m_contents<span class="sym">;
      }

</span>      <span class="kwc">public</span> <span class="kwb">void</span> Put<span class="sym">(</span><span class="kwb">int</span> value<span class="sym">){
</span>         lock<span class="sym">(</span><span class="kwa">this</span><span class="sym">)
         {
</span>            <span class="kwa">if</span> <span class="sym">(</span>m_available<span class="sym">)</span> Monitor<span class="sym">.</span>Wait<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span>            m_contents <span class="sym">=</span> value<span class="sym">;
</span>            m_available <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;
</span>            Monitor<span class="sym">.</span>Pulse<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
         }
      }
   }


</span>   <span class="slc">// Could create separate Producer and Consumer classes
</span>   <span class="slc">// Instead add the members and methods to ProdCons class
</span>   <span class="kwc">private</span> Buffer b<span class="sym">;
</span>   <span class="kwc">private</span> <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>   <span class="kwc">private</span> <span class="kwb">static int</span> produced <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> consumed <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>   <span class="kwc">private</span> prodcons<span class="sym">(</span>Buffer sharedBuffer<span class="sym">,</span> <span class="kwb">int</span> nTimes<span class="sym">) {
</span>      b <span class="sym">=</span> sharedBuffer<span class="sym">;
</span>      n <span class="sym">=</span> nTimes<span class="sym">;
   }

</span>   <span class="kwc">private</span> <span class="kwb">void</span> Produce<span class="sym">() {
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++){
</span>         b<span class="sym">.</span>Put<span class="sym">(</span>i<span class="sym">);
         ++</span>produced<span class="sym">;
      }
   }

</span>   <span class="kwc">private</span> <span class="kwb">void</span> Consume<span class="sym">() {
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++){
</span>         b<span class="sym">.</span>Get<span class="sym">();
         ++</span>consumed<span class="sym">;
      }
   }


</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
   {
</span>      <span class="slc">// Get the number of iterations
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>      Buffer sharedBuffer <span class="sym">=</span> <span class="kwa">new</span> Buffer<span class="sym">();
</span>      <span class="slc">//create producer and consumer
</span>      prodcons producer <span class="sym">=</span> <span class="kwa">new</span> prodcons<span class="sym">(</span>sharedBuffer<span class="sym">,</span> n<span class="sym">);
</span>      prodcons consumer <span class="sym">=</span> <span class="kwa">new</span> prodcons<span class="sym">(</span>sharedBuffer<span class="sym">,</span> n<span class="sym">);

</span>      <span class="slc">//start producer and consumer threads
</span>      Thread tProducer <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">(</span><span class="kwa">new</span> ThreadStart<span class="sym">(</span> producer<span class="sym">.</span>Produce <span class="sym">));
</span>      Thread tConsumer <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">(</span><span class="kwa">new</span> ThreadStart<span class="sym">(</span> consumer<span class="sym">.</span>Consume <span class="sym">));
</span>      tProducer<span class="sym">.</span>Start<span class="sym">();
</span>      tConsumer<span class="sym">.</span>Start<span class="sym">();

</span>      <span class="slc">// wait on both threads
</span>      tProducer<span class="sym">.</span>Join<span class="sym">();
</span>      tConsumer<span class="sym">.</span>Join<span class="sym">();

</span>        Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0} {1}&quot;</span><span class="sym">,</span> prodcons<span class="sym">.</span>produced<span class="sym">,</span> prodcons<span class="sym">.</span>consumed<span class="sym">);
   }
}</span>
