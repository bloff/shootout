<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/*
   The Great Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*/</FONT></I>

using System;
using System.Threading;

class prodcons
{
   private class Buffer 
   {
      private <B><FONT COLOR="#228B22">int</FONT></B> m_contents = -1;
      private bool m_available = false;

      public <B><FONT COLOR="#228B22">int</FONT></B> Get(){
         lock(this)
         {
            <B><FONT COLOR="#A020F0">if</FONT></B> (!m_available) Monitor.Wait(this);
            m_available = false;
            Monitor.Pulse(this);
         }
         <B><FONT COLOR="#A020F0">return</FONT></B> m_contents;
      }

      public <B><FONT COLOR="#228B22">void</FONT></B> Put(<B><FONT COLOR="#228B22">int</FONT></B> value){
         lock(this)
         {
            <B><FONT COLOR="#A020F0">if</FONT></B> (m_available) Monitor.Wait(this);
            m_contents = value;
            m_available = true;
            Monitor.Pulse(this);
         }
      }
   }


   <I><FONT COLOR="#B22222">// Could create separate Producer and Consumer classes
</FONT></I>   <I><FONT COLOR="#B22222">// Instead add the members and methods to ProdCons class
</FONT></I>   private Buffer b;
   private <B><FONT COLOR="#228B22">int</FONT></B> n = 0;
   private <B><FONT COLOR="#228B22">static</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B> produced = 0, consumed = 0;

   private prodcons(Buffer sharedBuffer, <B><FONT COLOR="#228B22">int</FONT></B> nTimes) {
      b = sharedBuffer;
      n = nTimes;
   }

   private <B><FONT COLOR="#228B22">void</FONT></B> Produce() {
      <B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#228B22">int</FONT></B> i = 0; i &lt; n; i++){
         b.Put(i);
         ++produced;
      }
   }

   private <B><FONT COLOR="#228B22">void</FONT></B> Consume() {
      <B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#228B22">int</FONT></B> i = 0; i &lt; n; i++){
         b.Get();
         ++consumed;
      }
   }


   <B><FONT COLOR="#228B22">static</FONT></B> <B><FONT COLOR="#228B22">void</FONT></B> Main(string[] args)
   {
      <I><FONT COLOR="#B22222">// Get the number of iterations
</FONT></I>      <B><FONT COLOR="#228B22">int</FONT></B> n = 1;
      <B><FONT COLOR="#A020F0">if</FONT></B> (args.Length &gt; 0) n = Int32.Parse(args[0]); 

      Buffer sharedBuffer = new Buffer();
      <I><FONT COLOR="#B22222">//create producer and consumer
</FONT></I>      prodcons producer = new prodcons(sharedBuffer, n);
      prodcons consumer = new prodcons(sharedBuffer, n);

      <I><FONT COLOR="#B22222">//start producer and consumer threads
</FONT></I>      Thread tProducer = new Thread(new ThreadStart( producer.Produce ));
      Thread tConsumer = new Thread(new ThreadStart( consumer.Consume ));
      tProducer.Start();
      tConsumer.Start();

      <I><FONT COLOR="#B22222">// wait on both threads
</FONT></I>      tProducer.Join();
      tConsumer.Join();

        Console.WriteLine(<B><FONT COLOR="#BC8F8F">&quot;{0} {1}&quot;</FONT></B>, prodcons.produced, prodcons.consumed);
   }
}</pre></td></tr></table>
