<span class="sym">!</span> NestedLoop function implementation
<span class="sym">!</span> Simon Geard<span class="sym">,</span> <span class="num">3</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">04
</span><span class="sym">!
!</span> Building info<span class="sym">.
! ==============
!
!</span> Linux  <span class="sym">-</span> <span class="kwa">using</span> the Intel Fortran90 compiler<span class="sym">:
!
!</span>          ifort nestedloop<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span><span class="kwb">static</span><span class="sym">-</span>libcxa <span class="sym">-</span>o nestedloop
<span class="sym">!
!</span> WinXP  <span class="sym">-</span> Compaq Visual Fortran <span class="num">6.6c
</span><span class="sym">!
!</span>          f90 nestedloop<span class="sym">.</span>f90 <span class="sym">/</span>link <span class="sym">/</span>libpath<span class="sym">:</span><span class="str">&quot;d:</span><span class="esc">\P</span><span class="str">rogram Files</span><span class="esc">\M</span><span class="str">icrosoft Visual Studio</span><span class="esc">\d</span><span class="str">f98</span><span class="esc">\l</span><span class="str">ib&quot;</span>
<span class="sym">!
!</span> Cygwin <span class="sym">-</span> g95 compiler
<span class="sym">!
!</span>          g95 nestedloop<span class="sym">.</span>f90 <span class="sym">-</span>o nestedloop<span class="sym">.</span>exe
<span class="sym">!
</span>program nestedloop
  implicit none
  integer <span class="sym">::</span> a<span class="sym">,</span> b<span class="sym">,</span> c<span class="sym">,</span> d<span class="sym">,</span> e<span class="sym">,</span> f<span class="sym">,</span> num<span class="sym">,</span> x<span class="sym">=</span><span class="num">0
</span>  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">2</span><span class="sym">)</span> argv

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,</span><span class="str">'(I2)'</span><span class="sym">)</span> num


    x <span class="sym">=</span> <span class="num">0
</span>    <span class="kwa">do</span> a<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>num
       <span class="kwa">do</span> b<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>num
          <span class="kwa">do</span> c<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>num
             <span class="kwa">do</span> d<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>num
                <span class="kwa">do</span> e<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>num
                   <span class="kwa">do</span> f<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>num
                      x <span class="sym">=</span> x<span class="sym">+</span><span class="num">1
</span>                   end <span class="kwa">do
</span>                end <span class="kwa">do
</span>             end <span class="kwa">do
</span>          end <span class="kwa">do
</span>       end <span class="kwa">do
</span>    end <span class="kwa">do
</span>  print <span class="sym">*,</span> x

end program nestedloop
<span class="sym">!</span> vim<span class="sym">:</span> ts<span class="sym">=</span><span class="num">4</span> ft<span class="sym">=</span>fortran
