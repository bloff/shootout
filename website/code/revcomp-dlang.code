<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Dave Fladebo

   compile: dmd -O -inline -release knucleotide.d
*/</span>

import std<span class="sym">.</span>outbuffer<span class="sym">,</span> std<span class="sym">.</span>stream<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;

</span><span class="kwb">void</span> main<span class="sym">()
{
</span>    <span class="kwb">char</span><span class="sym">[</span><span class="num">4096</span><span class="sym">]</span>      bufr<span class="sym">;
</span>    BufferedStream  bsi <span class="sym">=</span> <span class="kwa">new</span> BufferedStream<span class="sym">(</span>std<span class="sym">.</span>stream<span class="sym">.</span>stdin<span class="sym">,</span>bufr<span class="sym">.</span>length<span class="sym">);
</span>    OutBuffer       ob <span class="sym">=</span> <span class="kwa">new</span> OutBuffer<span class="sym">();

</span>    <span class="kwb">char</span><span class="sym">[]</span> line<span class="sym">,</span>desc<span class="sym">;
</span>    <span class="kwa">while</span><span class="sym">(!</span>bsi<span class="sym">.</span>eof<span class="sym">())
    {
</span>        line <span class="sym">=</span> bsi<span class="sym">.</span>readLine<span class="sym">(</span>bufr<span class="sym">);
</span>        <span class="kwa">if</span><span class="sym">(</span>line<span class="sym">.</span>length<span class="sym">)
        {
</span>            <span class="kwb">char</span> c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>            <span class="kwa">if</span><span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">)
            {
</span>                writeRC<span class="sym">(</span>desc<span class="sym">,</span>ob<span class="sym">,</span>line<span class="sym">);
            }
</span>            <span class="kwa">else if</span><span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)
            {
</span>                ob<span class="sym">.</span>write<span class="sym">(</span>toupper<span class="sym">(</span>line<span class="sym">));
            }
        }
    }
</span>    writeRC<span class="sym">(</span>desc<span class="sym">,</span>ob<span class="sym">,</span>line<span class="sym">);
}

</span><span class="kwb">void</span> writeRC<span class="sym">(</span>inout <span class="kwb">char</span><span class="sym">[]</span> desc<span class="sym">,</span>inout OutBuffer ob<span class="sym">,</span><span class="kwb">char</span><span class="sym">[]</span> line<span class="sym">)
{
</span>    <span class="kwa">if</span><span class="sym">(</span>desc<span class="sym">.</span>length<span class="sym">)
    {
</span>        <span class="kwb">char</span><span class="sym">[]</span> bufr <span class="sym">=</span> ob<span class="sym">.</span>toString<span class="sym">.</span>reverse<span class="sym">;
</span>        <span class="kwb">const int</span> lineLen <span class="sym">=</span> <span class="num">60</span><span class="sym">;
</span>        <span class="kwb">int</span> start <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>        std<span class="sym">.</span>stdio<span class="sym">.</span>writefln<span class="sym">(</span>desc<span class="sym">);
</span>        foreach<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> inout <span class="kwb">char</span> c<span class="sym">;</span> bufr<span class="sym">)
        {
</span>            revComp<span class="sym">(</span>c<span class="sym">);
</span>            <span class="kwa">if</span><span class="sym">((</span>i <span class="sym">&amp;&amp; !(</span>i <span class="sym">%</span> lineLen<span class="sym">)) ||</span> i <span class="sym">== (</span>bufr<span class="sym">.</span>length<span class="num">-1</span><span class="sym">))
            {
</span>                <span class="kwb">char</span><span class="sym">[]</span> lineOut<span class="sym">;
</span>                <span class="kwa">if</span><span class="sym">(</span>i <span class="sym">== (</span>bufr<span class="sym">.</span>length<span class="num">-1</span><span class="sym">))
                {
</span>                    lineOut <span class="sym">=</span> bufr<span class="sym">[</span>start<span class="sym">..</span>bufr<span class="sym">.</span>length<span class="sym">];
                }
</span>                <span class="kwa">else
</span>                <span class="sym">{
</span>                    lineOut <span class="sym">=</span> bufr<span class="sym">[</span>start<span class="sym">..</span>i<span class="sym">];
</span>                    start <span class="sym">=</span> i<span class="sym">;
                }
</span>                std<span class="sym">.</span>stdio<span class="sym">.</span>writefln<span class="sym">(</span>lineOut<span class="sym">);
            }
        }

</span>        ob <span class="sym">=</span> <span class="kwa">new</span> OutBuffer<span class="sym">();
    }

</span>    desc <span class="sym">=</span> line<span class="sym">.</span>dup<span class="sym">;
}

</span><span class="kwb">void</span> revComp<span class="sym">(</span>inout <span class="kwb">char</span> c<span class="sym">)
{
</span>    <span class="kwa">switch</span><span class="sym">(</span>c<span class="sym">)
    {
</span>    <span class="kwa">case</span> <span class="str">'A'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'T'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'B'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'V'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'C'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'G'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'D'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'H'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'G'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'C'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'H'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'D'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'K'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'M'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'M'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'K'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'R'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'Y'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'T'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'A'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'V'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'B'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">case</span> <span class="str">'Y'</span><span class="sym">:</span> c <span class="sym">=</span> <span class="str">'R'</span><span class="sym">;</span> <span class="kwa">break</span><span class="sym">;
</span>    <span class="kwa">default</span> <span class="sym">:</span> <span class="kwa">break</span><span class="sym">;
    }
}</span>
