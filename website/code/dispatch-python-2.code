<span class="slc">#!/usr/bin/python -OO
</span><span class="slc"># The Computer Language Shootout Benchmarks
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># contributed by Antoine Pitrou
</span>
<span class="kwc">import</span> sys

<span class="kwa">class</span> BottleState<span class="sym">(</span>object<span class="sym">):
</span>    <span class="kwb">pass

</span><span class="kwa">class</span> EmptyState<span class="sym">(</span>BottleState<span class="sym">):
</span>    tag <span class="sym">=</span> <span class="num">1

</span>    <span class="kwb">def</span> do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> target<span class="sym">):
</span>        target<span class="sym">.</span>state <span class="sym">=</span> Full

<span class="kwa">class</span> FullState<span class="sym">(</span>BottleState<span class="sym">):
</span>    tag <span class="sym">=</span> <span class="num">2

</span>    <span class="kwb">def</span> do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> target<span class="sym">):
</span>        target<span class="sym">.</span>state <span class="sym">=</span> Sealed

<span class="kwa">class</span> SealedState<span class="sym">(</span>BottleState<span class="sym">):
</span>    tag <span class="sym">=</span> <span class="num">3

</span>    <span class="kwb">def</span> do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> target<span class="sym">):
</span>        target<span class="sym">.</span>state <span class="sym">=</span> Empty

Empty <span class="sym">=</span> EmptyState<span class="sym">()
</span>Full <span class="sym">=</span> FullState<span class="sym">()
</span>Sealed <span class="sym">=</span> SealedState<span class="sym">()
</span>BottleState<span class="sym">.</span>initial_state <span class="sym">=</span> Empty

<span class="kwa">class</span> PressurizedBottleState<span class="sym">(</span>BottleState<span class="sym">):
</span>    <span class="kwb">pass

</span><span class="kwa">class</span> UnpressurizedEmptyState<span class="sym">(</span>PressurizedBottleState<span class="sym">):
</span>    tag <span class="sym">=</span> <span class="num">4

</span>    <span class="kwb">def</span> do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> target<span class="sym">):
</span>        target<span class="sym">.</span>state <span class="sym">=</span> UnpressurizedFull

<span class="kwa">class</span> UnpressurizedFullState<span class="sym">(</span>PressurizedBottleState<span class="sym">):
</span>    tag <span class="sym">=</span> <span class="num">5

</span>    <span class="kwb">def</span> do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> target<span class="sym">):
</span>        target<span class="sym">.</span>state <span class="sym">=</span> PressurizedUnsealed

<span class="kwa">class</span> PressurizedUnsealedState<span class="sym">(</span>PressurizedBottleState<span class="sym">):
</span>    tag <span class="sym">=</span> <span class="num">6

</span>    <span class="kwb">def</span> do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> target<span class="sym">):
</span>        target<span class="sym">.</span>state <span class="sym">=</span> Sealed

<span class="kwa">class</span> PressurizedSealedState<span class="sym">(</span>PressurizedBottleState<span class="sym">):
</span>    tag <span class="sym">=</span> <span class="num">7

</span>    <span class="kwb">def</span> do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> target<span class="sym">):
</span>        target<span class="sym">.</span>state <span class="sym">=</span> UnpressurizedEmpty

UnpressurizedEmpty <span class="sym">=</span> UnpressurizedEmptyState<span class="sym">()
</span>UnpressurizedFull <span class="sym">=</span> UnpressurizedFullState<span class="sym">()
</span>PressurizedUnsealed <span class="sym">=</span> PressurizedUnsealedState<span class="sym">()
</span>PressurizedSealed <span class="sym">=</span> PressurizedSealedState<span class="sym">()
</span>PressurizedBottleState<span class="sym">.</span>initial_state <span class="sym">=</span> UnpressurizedEmpty


<span class="kwa">class</span> Bottle<span class="sym">(</span>object<span class="sym">):
</span>    state_type <span class="sym">=</span> BottleState

    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> id_<span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>id_ <span class="sym">=</span> id_
        <span class="kwc">self</span><span class="sym">.</span>state <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>state_type<span class="sym">.</span>initial_state

    <span class="kwb">def</span> fill<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>state<span class="sym">.</span>do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">)

</span>    <span class="kwb">def</span> seal<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>state<span class="sym">.</span>do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">)

</span>    <span class="kwb">def</span> empty<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>state<span class="sym">.</span>do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">)

</span>    <span class="kwb">def</span> cycle<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>fill<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>seal<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>empty<span class="sym">()

</span>    <span class="kwb">def</span> check<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> c<span class="sym">):
</span>        <span class="kwb">return</span> c <span class="sym">+</span> <span class="kwc">self</span><span class="sym">.</span>id_ <span class="sym">+</span> <span class="kwc">self</span><span class="sym">.</span>state<span class="sym">.</span>tag


<span class="kwa">class</span> PressurizedBottle<span class="sym">(</span>Bottle<span class="sym">):
</span>    state_type <span class="sym">=</span> PressurizedBottleState

    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">, *</span>args<span class="sym">, **</span>kargs<span class="sym">):
</span>        Bottle<span class="sym">.</span>__init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">, *</span>args<span class="sym">, **</span>kargs<span class="sym">)

</span>    <span class="kwb">def</span> pressurize<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>state<span class="sym">.</span>do_next<span class="sym">(</span><span class="kwc">self</span><span class="sym">)

</span>    <span class="kwb">def</span> cycle<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>fill<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>pressurize<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>seal<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>empty<span class="sym">()


</span><span class="kwb">def</span> bottle_check<span class="sym">(</span>a1<span class="sym">,</span> a2<span class="sym">,</span> a3<span class="sym">,</span> a4<span class="sym">,</span> a5<span class="sym">,</span> i<span class="sym">):
</span>    a1<span class="sym">.</span>cycle<span class="sym">()
</span>    a2<span class="sym">.</span>cycle<span class="sym">()
</span>    a3<span class="sym">.</span>cycle<span class="sym">()
</span>    a4<span class="sym">.</span>cycle<span class="sym">()
</span>    a5<span class="sym">.</span>cycle<span class="sym">()
</span>    c <span class="sym">=</span> i <span class="sym">%</span> <span class="num">2
</span>    <span class="kwb">return</span> a1<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a2<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a3<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a4<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a5<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">)

</span><span class="kwb">def</span> main<span class="sym">():
</span>    n <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])
</span>    b0<span class="sym">,</span> b1<span class="sym">,</span> b2<span class="sym">,</span> b3<span class="sym">,</span> b4<span class="sym">,</span> b5<span class="sym">,</span> b6<span class="sym">,</span> b7<span class="sym">,</span> b8<span class="sym">,</span> b9 <span class="sym">= [
</span>        Bottle<span class="sym">(</span>i<span class="sym">)</span> <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">range</span><span class="sym">(</span><span class="num">10</span><span class="sym">)]
</span>    p0<span class="sym">,</span> p1<span class="sym">,</span> p2<span class="sym">,</span> p3<span class="sym">,</span> p4<span class="sym">,</span> p5<span class="sym">,</span> p6<span class="sym">,</span> p7<span class="sym">,</span> p8<span class="sym">,</span> p9 <span class="sym">= [
</span>        PressurizedBottle<span class="sym">(</span>i<span class="sym">)</span> <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">range</span><span class="sym">(</span><span class="num">10</span><span class="sym">)]

</span>    check <span class="sym">=</span> <span class="num">0
</span>    <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">):
</span>        check <span class="sym">+=</span> bottle_check<span class="sym">(</span>b1<span class="sym">,</span> b2<span class="sym">,</span> b3<span class="sym">,</span> b4<span class="sym">,</span> b5<span class="sym">,</span> i<span class="sym">)
</span>        check <span class="sym">+=</span> bottle_check<span class="sym">(</span>b6<span class="sym">,</span> b7<span class="sym">,</span> b8<span class="sym">,</span> b9<span class="sym">,</span> b0<span class="sym">,</span> i<span class="sym">)
</span>        check <span class="sym">+=</span> bottle_check<span class="sym">(</span>p1<span class="sym">,</span> p2<span class="sym">,</span> p3<span class="sym">,</span> p4<span class="sym">,</span> p5<span class="sym">,</span> i<span class="sym">)
</span>        check <span class="sym">-=</span> bottle_check<span class="sym">(</span>p6<span class="sym">,</span> p7<span class="sym">,</span> p8<span class="sym">,</span> p9<span class="sym">,</span> p0<span class="sym">,</span> i<span class="sym">)

</span>    <span class="kwb">print</span> <span class="str">&quot;%d&quot;</span> <span class="sym">%</span> check

main<span class="sym">()
</span>
