<span class="slc">#!/usr/bin/python -OO
</span><span class="slc"># The Computer Language Shootout Benchmarks
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># contributed by Antoine Pitrou
</span>
<span class="kwc">import</span> sys
<span class="kwc">import</span> psyco
<span class="slc">#~ psyco.full()
</span>
<span class="kwb">def</span> make_tree<span class="sym">(</span>item<span class="sym">,</span> depth<span class="sym">):
</span>    <span class="kwb">if</span> depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">:
</span>        i <span class="sym">=</span> item <span class="sym">*</span> <span class="num">2
</span>        depth <span class="sym">-=</span> <span class="num">1
</span>        <span class="kwb">return</span> <span class="sym">(</span>item<span class="sym">,</span> make_tree<span class="sym">(</span>i <span class="num">- 1</span><span class="sym">,</span> depth<span class="sym">),</span> make_tree<span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">))
</span>    <span class="kwb">else</span><span class="sym">:
</span>        <span class="kwb">return</span> <span class="sym">(</span>item<span class="sym">,</span> None<span class="sym">,</span> None<span class="sym">)

</span><span class="kwb">def</span> check_tree<span class="sym">((</span>item<span class="sym">,</span> left<span class="sym">,</span> right<span class="sym">)):
</span>    <span class="kwb">if</span> left <span class="kwb">is not</span> None<span class="sym">:
</span>        <span class="kwb">return</span> item <span class="sym">+</span> check_tree<span class="sym">(</span>left<span class="sym">) -</span> check_tree<span class="sym">(</span>right<span class="sym">)
</span>    <span class="kwb">else</span><span class="sym">:
</span>        <span class="kwb">return</span> item

<span class="kwb">def</span> main<span class="sym">():
</span>    N <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])

</span>    min_depth <span class="sym">=</span> <span class="num">4
</span>    max_depth <span class="sym">=</span> <span class="kwa">max</span><span class="sym">(</span>min_depth <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> N<span class="sym">)
</span>    stretch_depth <span class="sym">=</span> max_depth <span class="sym">+</span> <span class="num">1

</span>    strecth_tree <span class="sym">=</span> make_tree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretch_depth<span class="sym">)
</span>    <span class="kwb">print</span> <span class="str">&quot;stretch tree of depth %d</span><span class="esc">\t  </span>  <span class="str">check: %d&quot;</span> \
        <span class="sym">% (</span>stretch_depth<span class="sym">,</span> check_tree<span class="sym">(</span>strecth_tree<span class="sym">))
</span>    strecth_tree <span class="sym">=</span> None

    long_lived_tree <span class="sym">=</span> make_tree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretch_depth<span class="sym">)
</span>    <span class="kwb">for</span> depth <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>min_depth<span class="sym">,</span> max_depth <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="num">2</span><span class="sym">):
</span>        iterations <span class="sym">=</span> <span class="num">2</span><span class="sym">**(</span>max_depth <span class="sym">-</span> depth <span class="sym">+</span> min_depth<span class="sym">)
</span>        check <span class="sym">=</span> <span class="num">0

</span>        <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> iterations <span class="sym">+</span> <span class="num">1</span><span class="sym">):
</span>            temp_tree <span class="sym">=</span> make_tree<span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">)
</span>            check <span class="sym">+=</span> check_tree<span class="sym">(</span>temp_tree<span class="sym">)
</span>            temp_tree <span class="sym">=</span> make_tree<span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">)
</span>            check <span class="sym">+=</span> check_tree<span class="sym">(</span>temp_tree<span class="sym">)

</span>        <span class="kwb">print</span> <span class="str">&quot;%d</span><span class="esc">\t  </span>  <span class="str">trees of depth %d</span><span class="esc">\t  </span>  <span class="str">check: %d&quot;</span> \
            <span class="sym">% (</span>iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> depth<span class="sym">,</span> check<span class="sym">)

</span>    <span class="kwb">print</span> <span class="str">&quot;long lived tree of depth %d</span><span class="esc">\t  </span>  <span class="str">check: %d&quot;</span> \
        <span class="sym">% (</span>max_depth<span class="sym">,</span> check_tree<span class="sym">(</span>long_lived_tree<span class="sym">))


</span>main<span class="sym">()</span>
