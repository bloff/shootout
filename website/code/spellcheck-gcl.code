<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: spellcheck-gcl.code,v 1.12 2006-09-20 05:52:39 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">)</span> #<span class="sym">-</span>gcl <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>dict <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>test <span class="str">'equal :size 10000)))</span>
<span class="str"></span>
<span class="str">    (with-open-file (dictfile &quot;Usr.Dict.Words&quot; :direction :input)</span>
<span class="str">		    (do ((line (read-line dictfile)</span>
<span class="str">			       (read-line dictfile nil '</span>eof<span class="sym">)))</span>
			<span class="sym">((</span><span class="kwa">eq line</span> <span class="str">'eof))</span>
<span class="str">		      (setf (gethash line dict) t)))</span>
<span class="str"></span>
<span class="str">    (do ((word (read-line *standard-input*)</span>
<span class="str">	       (read-line *standard-input* nil '</span>eof<span class="sym">)))</span>
	<span class="sym">((</span><span class="kwa">eq</span> word <span class="str">'eof))</span>
<span class="str">      (if (not (gethash word dict))</span>
<span class="str">	  (write-line word)))))</span>
