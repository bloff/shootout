<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- Written by Dima Dorfman, 2004
</span><span class="slc">--
</span><span class="slc">-- converted to SE 2.1 by jos&eacute;
</span><span class="slc">--
</span>
<span class="kwa">class</span> NSIEVEBITS creation make <span class="kwa">feature

</span>	flags<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span>INTEGER_32<span class="sym">]

</span>	Bit_length<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">32

</span>	make <span class="kwa">is local</span> n<span class="sym">,</span> m<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">do
		check</span> argument_count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">end
		check</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer <span class="kwa">end
</span>		n <span class="sym">:=</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
		<span class="kwa">check</span> n.in_range<span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="num">17</span><span class="sym">)</span> <span class="kwa">end

</span>		m <span class="sym">:=</span> <span class="num">10000</span> <span class="sym">|&lt;&lt;</span> n.to_integer_8
		<span class="kwa">create</span> flags.make<span class="sym">((</span>m<span class="sym">+</span>Bit_length<span class="num">-1</span><span class="sym">)//</span>Bit_length<span class="sym">)
</span>		std_output.put_string<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">)
</span>		std_output.put_integer_format<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">)
</span>		<span class="slc">--std_output.put_character(' ')
</span>		std_output.put_integer_format<span class="sym">(</span>nsieves<span class="sym">(</span>flags<span class="sym">,</span>m<span class="sym">),</span><span class="num">8</span><span class="sym">)
</span>		std_output.put_new_line

		m <span class="sym">:=</span> m <span class="sym">|&gt;&gt;</span> <span class="num">1
</span>		flags.resize<span class="sym">((</span>m<span class="sym">+</span>Bit_length<span class="num">-1</span><span class="sym">)//</span>Bit_length<span class="sym">)
</span>		std_output.put_string<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">)
</span>		std_output.put_integer_format<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">)
</span>		<span class="slc">--std_output.put_character(' ')
</span>		std_output.put_integer_format<span class="sym">(</span>nsieves<span class="sym">(</span>flags<span class="sym">,</span>m<span class="sym">),</span><span class="num">8</span><span class="sym">)
</span>		std_output.put_new_line

		m <span class="sym">:=</span> m <span class="sym">|&gt;&gt;</span> <span class="num">1
</span>		flags.resize<span class="sym">((</span>m<span class="sym">+</span>Bit_length<span class="num">-1</span><span class="sym">)//</span>Bit_length<span class="sym">)
</span>		std_output.put_string<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">)
</span>		std_output.put_integer_format<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">)
</span>		<span class="slc">--std_output.put_character(' ')
</span>		std_output.put_integer_format<span class="sym">(</span>nsieves<span class="sym">(</span>flags<span class="sym">,</span>m<span class="sym">),</span><span class="num">8</span><span class="sym">)
</span>		std_output.put_new_line
	<span class="kwa">end

</span>	nsieves<span class="sym">(</span>is_prime<span class="sym">:</span> <span class="kwa">like</span> flags<span class="sym">;</span> upper<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">):</span> <span class="kwb">INTEGER</span> <span class="kwa">is local</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">do
</span>		is_prime.set_all_with<span class="sym">({</span>INTEGER_32 <span class="num">-1</span><span class="sym">})
</span>		<span class="kwa">from</span> i<span class="sym">:=</span><span class="num">2</span> until i<span class="sym">&gt;=</span>upper <span class="kwa">loop
			if</span> <span class="sym">(</span>is_prime.item<span class="sym">(</span>i #<span class="sym">//</span> Bit_length<span class="sym">) &amp; ({</span>INTEGER_32 <span class="num">1</span><span class="sym">} |&lt;&lt; (</span>i #\\ Bit_length<span class="sym">)</span>.to_integer_8<span class="sym">)) /=</span> <span class="num">0</span> <span class="kwa">then
				from</span> j<span class="sym">:=</span>i<span class="sym">+</span>i until j<span class="sym">&gt;=</span>upper <span class="kwa">loop
</span>					k <span class="sym">:=</span> j #<span class="sym">//</span> Bit_length
					is_prime.put<span class="sym">(</span>is_prime.item<span class="sym">(</span>k<span class="sym">) &amp; (</span>~<span class="sym">({</span>INTEGER_32 <span class="num">1</span><span class="sym">} |&lt;&lt; (</span>j #\\ Bit_length<span class="sym">)</span>.to_integer_8<span class="sym">)),</span>k<span class="sym">)
</span>					j <span class="sym">:=</span> j<span class="sym">+</span>i
				<span class="kwa">end
				Result</span> <span class="sym">:=</span> <span class="kwa">Result</span> <span class="sym">+</span> <span class="num">1
</span>			<span class="kwa">end
</span>			i <span class="sym">:=</span> i<span class="sym">+</span><span class="num">1
</span>		<span class="kwa">end
	end
end
</span>
