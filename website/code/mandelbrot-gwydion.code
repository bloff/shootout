<span class="kwb">module</span><span class="sym">:</span> mandelbrot
<span class="kwa">use</span><span class="sym">-</span>libraries<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> io
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> standard<span class="sym">-</span>io<span class="sym">,</span> streams<span class="sym">,</span> format<span class="sym">-</span>out

<span class="kwa">begin</span>
  <span class="kwa">let</span> w <span class="sym">=</span> application<span class="sym">-</span><span class="kwd">arguments</span><span class="sym">()[</span><span class="num">0</span><span class="sym">]</span>.string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">;</span>
  <span class="kwa">let</span> h <span class="sym">=</span> w<span class="sym">;</span>
  <span class="kwa">let</span> bit<span class="sym">-</span>num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">let</span> byte<span class="sym">-</span>acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">let</span> limit2 <span class="sym">=</span> <span class="num">4.0</span><span class="sym">;</span>
  <span class="kwa">let</span> Zr <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">let</span> Zi <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">let</span> Cr <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">let</span> Ci <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">let</span> Tr <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">let</span> Ti <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
  <span class="kwa">let</span> tmp <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>

  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>w<span class="sym">,</span>h<span class="sym">);</span>

  <span class="kwa">for</span> <span class="sym">(</span>y <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span> <span class="kwa">from</span> <span class="num">0.0</span>d0 <span class="kwa">below</span> h<span class="sym">)</span>
    <span class="kwa">for</span> <span class="sym">(</span>x <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span> <span class="kwa">from</span> <span class="num">0.0</span>d0 <span class="kwa">below</span> w<span class="sym">)</span>
      Zr <span class="sym">:= (</span>Zi <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">);</span>
      Cr <span class="sym">:= (</span><span class="num">2</span> <span class="sym">*</span> x <span class="sym">/</span> <span class="kwd">as</span><span class="sym">(</span><span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span>w<span class="sym">) -</span> <span class="num">1.5</span><span class="sym">);</span>
      Ci <span class="sym">:= (</span><span class="num">2</span> <span class="sym">*</span> y <span class="sym">/</span> <span class="kwd">as</span><span class="sym">(</span><span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span>h<span class="sym">) -</span> <span class="num">1</span><span class="sym">);</span>
      byte<span class="sym">-</span>acc <span class="sym">:=</span> <span class="kwd">ash</span><span class="sym">(</span>byte<span class="sym">-</span>acc<span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
      bit<span class="sym">-</span>num <span class="sym">:=</span> bit<span class="sym">-</span>num <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">block</span> <span class="sym">(</span>done<span class="sym">)</span>
        <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> <span class="num">50</span><span class="sym">)</span>
          Tr <span class="sym">:=</span> Zr <span class="sym">*</span> Zr <span class="sym">-</span> Zi <span class="sym">*</span> Zi <span class="sym">+</span> Cr<span class="sym">;</span>
          Ti <span class="sym">:=</span> <span class="num">2</span> <span class="sym">*</span> Zr <span class="sym">*</span> Zi <span class="sym">+</span> Ci<span class="sym">;</span>
          Zr <span class="sym">:=</span> Tr<span class="sym">;</span>
          Zi <span class="sym">:=</span> Ti<span class="sym">;</span>
          tmp <span class="sym">:=</span> Zr <span class="sym">*</span> Zr <span class="sym">+</span> Zi <span class="sym">*</span> Zi<span class="sym">;</span>
          <span class="kwa">if</span> <span class="sym">(</span>tmp &gt; limit2<span class="sym">)</span>
            <span class="kwd">done</span><span class="sym">();</span>
          <span class="kwa">end if</span><span class="sym">;</span>
        <span class="kwa">end for</span><span class="sym">;</span>
      <span class="kwa">end block</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>tmp <span class="kwa">&lt; limit2)</span>
        byte<span class="sym">-</span>acc <span class="sym">:=</span> byte<span class="sym">-</span>acc <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">end if</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>bit<span class="sym">-</span>num <span class="sym">=</span> <span class="num">8</span><span class="sym">)</span>
        write<span class="sym">-</span><span class="kwd">element</span><span class="sym">(*</span>standard<span class="sym">-</span>output<span class="sym">*,</span><span class="kwd">as</span><span class="sym">(</span><span class="kwa">&lt;byte-character&gt;</span><span class="sym">,</span>byte<span class="sym">-</span>acc<span class="sym">));</span>
        bit<span class="sym">-</span>num <span class="sym">:= (</span>byte<span class="sym">-</span>acc <span class="sym">:=</span> <span class="num">0</span><span class="sym">);</span>
      <span class="kwa">elseif</span> <span class="sym">(</span>x <span class="sym">=</span> w <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
        byte<span class="sym">-</span>acc <span class="sym">:=</span> <span class="kwd">ash</span><span class="sym">(</span>byte<span class="sym">-</span>acc<span class="sym">, (</span><span class="num">8</span> <span class="sym">-</span> <span class="kwd">modulo</span><span class="sym">(</span>w<span class="sym">,</span><span class="num">8</span><span class="sym">)));</span>
        write<span class="sym">-</span><span class="kwd">element</span><span class="sym">(*</span>standard<span class="sym">-</span>output<span class="sym">*,</span><span class="kwd">as</span><span class="sym">(</span><span class="kwa">&lt;byte-character&gt;</span><span class="sym">,</span>byte<span class="sym">-</span>acc<span class="sym">));</span>
        bit<span class="sym">-</span>num <span class="sym">:= (</span>byte<span class="sym">-</span>acc <span class="sym">:=</span> <span class="num">0</span><span class="sym">);</span>
      <span class="kwa">end if</span><span class="sym">;</span>
    <span class="kwa">end for</span><span class="sym">;</span>
  <span class="kwa">end for</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>
