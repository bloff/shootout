<span class="sym">;;; -*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-
;;;</span> $Id<span class="sym">:</span> fibo<span class="sym">.</span>pop11<span class="sym">,</span>v <span class="num">1.3 2005</span><span class="sym">/</span><span class="num">04</span><span class="sym">/</span><span class="num">25 19</span><span class="sym">:</span><span class="num">01</span><span class="sym">:</span><span class="num">38</span> igouy<span class="sym">-</span>guest Exp $
<span class="com">/*
 Trivial Fibonacci implementation.  Does not attempt to force
 Poplog to use tail-recursive calls.
 */</span>
vars n<span class="sym">;

</span>define constant procedure fib <span class="sym">(</span>m<span class="sym">);
</span>   <span class="kwa">if</span> m <span class="sym">&lt;</span> <span class="num">2</span> then <span class="num">1</span> <span class="kwa">else
</span>      fib <span class="sym">(</span>m fi_<span class="num">- 1</span><span class="sym">) +</span> fib<span class="sym">(</span>m fi_<span class="num">- 2</span><span class="sym">)
</span>   endif
enddefine<span class="sym">;

</span>define constant procedure get_args<span class="sym">();
</span>   <span class="kwa">if</span> null<span class="sym">(</span>poparglist<span class="sym">)</span> then <span class="num">1</span> <span class="kwa">else
</span>      strnumber<span class="sym">(</span> hd<span class="sym">(</span>poparglist<span class="sym">) )
</span>   endif
enddefine<span class="sym">;

</span>get_args<span class="sym">() -&gt;</span> n<span class="sym">;

</span>format_print<span class="sym">(</span><span class="str">'~D</span><span class="esc">\n</span><span class="str">'</span><span class="sym">, [</span>^<span class="sym">(</span>fib<span class="sym">(</span>n<span class="sym">))]);</span>
