<span class="sym">;;; -*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
<span class="sym">;;;</span> $Id<span class="sym">:</span> fibo<span class="sym">.</span>pop11<span class="sym">,</span>v <span class="num">1.3 2005</span><span class="sym">/</span><span class="num">04</span><span class="sym">/</span><span class="num">25 19</span><span class="sym">:</span><span class="num">01</span><span class="sym">:</span><span class="num">38</span> igouy<span class="sym">-</span>guest Exp $
<span class="com">/*</span>
<span class="com"> Trivial Fibonacci implementation.  Does not attempt to force</span>
<span class="com"> Poplog to use tail-recursive calls.</span>
<span class="com"> */</span>
vars n<span class="sym">;</span>

define constant procedure <span class="kwd">fib</span> <span class="sym">(</span>m<span class="sym">);</span>
   <span class="kwa">if</span> m <span class="sym">&lt;</span> <span class="num">2</span> then <span class="num">1</span> <span class="kwa">else</span>
      <span class="kwd">fib</span> <span class="sym">(</span>m fi_<span class="sym">-</span> <span class="num">1</span><span class="sym">) +</span> <span class="kwd">fib</span><span class="sym">(</span>m fi_<span class="sym">-</span> <span class="num">2</span><span class="sym">)</span>
   endif
enddefine<span class="sym">;</span>

define constant procedure <span class="kwd">get_args</span><span class="sym">();</span>
   <span class="kwa">if</span> <span class="kwd">null</span><span class="sym">(</span>poparglist<span class="sym">)</span> then <span class="num">1</span> <span class="kwa">else</span>
      <span class="kwd">strnumber</span><span class="sym">(</span> <span class="kwd">hd</span><span class="sym">(</span>poparglist<span class="sym">) )</span>
   endif
enddefine<span class="sym">;</span>

<span class="kwd">get_args</span><span class="sym">() -&gt;</span> n<span class="sym">;</span>

<span class="kwd">format_print</span><span class="sym">(</span><span class="str">'~D</span><span class="esc">\n</span><span class="str">'</span><span class="sym">, [</span>^<span class="sym">(</span><span class="kwd">fib</span><span class="sym">(</span>n<span class="sym">))]);</span>
