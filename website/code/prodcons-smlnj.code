<span class="com">(* prodcons.sml</span>
<span class="com"> *</span>
<span class="com"> *   Producer-Consumer using Concurrent ML.</span>
<span class="com"> *</span>
<span class="com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="com"> *</span>
<span class="com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="com"> *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
    <span class="kwa">val</span> main <span class="sym">:</span> <span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list <span class="sym">-&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>

    <span class="kwa">fun</span> doit n <span class="sym">=</span>
	<span class="kwa">let val</span> <span class="sym">(</span>ch<span class="sym">,</span> ret<span class="sym">) = (</span>CML.channel <span class="sym">(),</span> CML.channel <span class="sym">())</span>
	    <span class="kwa">fun</span> prod <span class="sym">(</span>i<span class="sym">,</span> n<span class="sym">) =</span> <span class="kwa">if</span> i <span class="sym">&gt;=</span> n <span class="kwa">then</span> CML.send <span class="sym">(</span>ret<span class="sym">,</span> i<span class="sym">)</span>
			      <span class="kwa">else</span> <span class="sym">(</span>CML.send <span class="sym">(</span>ch<span class="sym">,</span> i<span class="sym">);</span> prod <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">))</span>
	    <span class="kwa">fun</span> cons <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> m<span class="sym">) =</span> m
	      <span class="sym">|</span> cons <span class="sym">(</span>i<span class="sym">,</span> m<span class="sym">) = (</span>ignore <span class="sym">(</span>CML.recv ch<span class="sym">);</span> cons <span class="sym">(</span>i <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> m <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
	    <span class="kwa">val</span> _ <span class="sym">=</span> CML.spawn <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt;</span> prod <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">))</span>
	    <span class="kwa">val</span> c <span class="sym">=</span> cons <span class="sym">(</span>n<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
	    <span class="kwa">val</span> p <span class="sym">=</span> CML.recv ret
	    <span class="kwa">open</span> FormatComb
	<span class="kwa">in TextIO</span>.output <span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,</span> format <span class="sym">(</span><span class="kwb">int</span> <span class="kwa">o</span> sp <span class="num">1</span> <span class="kwa">o</span> <span class="kwb">int</span> <span class="kwa">o</span> nl<span class="sym">)</span> p c<span class="sym">)</span>
	<span class="kwa">end</span>

    <span class="kwa">fun</span> main' n <span class="sym">= (</span>RunCML.doit <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt;</span> doit n<span class="sym">,</span> NONE<span class="sym">);</span> OS.Process.success<span class="sym">)</span>
    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1</span>
      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
<span class="kwa">end</span>
