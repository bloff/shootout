<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: prodcons-smlnj.code,v 1.3 2004-11-11 07:14:03 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * from Matthias Blume
</span><span class="line">    5 </span><span class="com"> *)</span>
<span class="line">    6 </span>
<span class="line">    7 </span><span class="com">(* producer-consumer threads in SML/NJ
</span><span class="line">    8 </span><span class="com"> * (concurrency primitives re-implemented &quot;by hand&quot; on top of call/cc
</span><span class="line">    9 </span><span class="com"> * using the code in John Reppy's book &quot;Concurrent Programming in ML&quot;)
</span><span class="line">   10 </span><span class="com"> *
</span><span class="line">   11 </span><span class="com"> * (C) 2001 Lucent Technologies, Bell Labs
</span><span class="line">   12 </span><span class="com"> * written by Matthias Blume
</span><span class="line">   13 </span><span class="com"> *)</span>
<span class="line">   14 </span>
<span class="line">   15 </span><span class="kwa">structure</span> Queue <span class="sym">:&gt;</span> <span class="kwa">sig
</span><span class="line">   16 </span><span class="kwa">    exception</span> Empty
<span class="line">   17 </span>    <span class="kwa">type</span> tt <span class="sym">=</span> unit SMLofNJ.Cont.cont
<span class="line">   18 </span>    <span class="kwa">type</span> q
<span class="line">   19 </span>    <span class="kwa">val</span> new <span class="sym">:</span> unit <span class="sym">-&gt;</span> q
<span class="line">   20 </span>    <span class="kwa">val</span> enqueue <span class="sym">:</span> q <span class="sym">*</span> tt <span class="sym">-&gt;</span> unit
<span class="line">   21 </span>    <span class="kwa">val</span> dequeue <span class="sym">:</span> q <span class="sym">-&gt;</span> tt
<span class="line">   22 </span>    <span class="kwa">val</span> empty <span class="sym">:</span> q <span class="sym">-&gt;</span> <span class="kwb">bool
</span><span class="line">   23 </span><span class="kwb"></span><span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
</span><span class="line">   24 </span><span class="kwa">
</span><span class="line">   25 </span><span class="kwa">    exception</span> Empty
<span class="line">   26 </span>
<span class="line">   27 </span>    <span class="kwa">type</span> tt <span class="sym">=</span> unit SMLofNJ.Cont.cont
<span class="line">   28 </span>    <span class="kwa">type</span> q <span class="sym">=</span> tt list ref <span class="sym">*</span> tt list ref
<span class="line">   29 </span>
<span class="line">   30 </span>    <span class="kwa">fun</span> new <span class="sym">() :</span> q <span class="sym">= (</span>ref <span class="sym">[],</span> ref <span class="sym">[])
</span><span class="line">   31 </span><span class="sym">
</span><span class="line">   32 </span><span class="sym"></span>    <span class="kwa">fun</span> enqueue <span class="sym">((</span>f <span class="kwa">as</span> ref <span class="sym">[],</span> ref <span class="sym">[]) :</span> q<span class="sym">,</span> x<span class="sym">) =</span> f <span class="sym">:= [</span>x<span class="sym">]
</span><span class="line">   33 </span><span class="sym">      |</span> enqueue <span class="sym">((</span>_<span class="sym">,</span> b <span class="kwa">as</span> ref xs<span class="sym">),</span> x<span class="sym">) =</span> b <span class="sym">:=</span> x <span class="sym">::</span> xs
<span class="line">   34 </span>
<span class="line">   35 </span>    <span class="kwa">fun</span> dequeue <span class="sym">((</span>f<span class="sym">,</span> b<span class="sym">) :</span> q<span class="sym">) =
</span><span class="line">   36 </span><span class="sym"></span>        <span class="kwa">case</span> <span class="sym">!</span>f <span class="kwa">of
</span><span class="line">   37 </span><span class="kwa"></span>            <span class="sym">[] =&gt; (</span><span class="kwa">case</span> rev <span class="sym">(!</span>b<span class="sym">)</span> <span class="kwa">of
</span><span class="line">   38 </span><span class="kwa"></span>                       x <span class="sym">::</span> xs <span class="sym">=&gt; (</span>f <span class="sym">:=</span> xs<span class="sym">;</span> b <span class="sym">:= [];</span> x<span class="sym">)
</span><span class="line">   39 </span><span class="sym">                     | [] =&gt;</span> <span class="kwa">raise</span> Empty<span class="sym">)
</span><span class="line">   40 </span><span class="sym">          |</span> x <span class="sym">::</span> xs <span class="sym">=&gt; (</span>f <span class="sym">:=</span> xs<span class="sym">;</span> x<span class="sym">)
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym"></span>    <span class="kwa">fun</span> empty <span class="sym">((</span>ref <span class="sym">[],</span> ref <span class="sym">[]) :</span> q<span class="sym">) =</span> <span class="kwa">true
</span><span class="line">   43 </span><span class="kwa"></span>      <span class="sym">|</span> empty _ <span class="sym">=</span> <span class="kwa">false
</span><span class="line">   44 </span><span class="kwa">
</span><span class="line">   45 </span><span class="kwa">end
</span><span class="line">   46 </span><span class="kwa">
</span><span class="line">   47 </span><span class="kwa">structure</span> Mutex <span class="sym">:&gt;</span> <span class="kwa">sig
</span><span class="line">   48 </span><span class="kwa">
</span><span class="line">   49 </span><span class="kwa">    val</span> yield <span class="sym">:</span> unit <span class="sym">-&gt;</span> unit
<span class="line">   50 </span>    <span class="kwa">val</span> fork <span class="sym">: (</span>unit <span class="sym">-&gt;</span> unit<span class="sym">) -&gt;</span> unit
<span class="line">   51 </span>    <span class="kwa">val</span> exit <span class="sym">:</span> unit <span class="sym">-&gt;</span> 'a
<span class="line">   52 </span>
<span class="line">   53 </span>    <span class="kwa">type</span> mutex
<span class="line">   54 </span>    <span class="kwa">type</span> condition
<span class="line">   55 </span>
<span class="line">   56 </span>    <span class="kwa">val</span> mutex <span class="sym">:</span> unit <span class="sym">-&gt;</span> mutex
<span class="line">   57 </span>    <span class="kwa">val</span> lock <span class="sym">:</span> mutex <span class="sym">-&gt;</span> unit
<span class="line">   58 </span>    <span class="kwa">val</span> unlock <span class="sym">:</span> mutex <span class="sym">-&gt;</span> unit
<span class="line">   59 </span>
<span class="line">   60 </span>    <span class="kwa">val</span> condition <span class="sym">:</span> mutex <span class="sym">-&gt;</span> condition
<span class="line">   61 </span>    <span class="kwa">val</span> wait <span class="sym">:</span> condition <span class="sym">-&gt;</span> unit
<span class="line">   62 </span>    <span class="kwa">val</span> signal <span class="sym">:</span> condition <span class="sym">-&gt;</span> unit
<span class="line">   63 </span>
<span class="line">   64 </span>    <span class="kwa">val</span> run <span class="sym">: (</span>unit <span class="sym">-&gt;</span> unit<span class="sym">) *</span> Time.time <span class="sym">-&gt;</span> unit
<span class="line">   65 </span>
<span class="line">   66 </span><span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
</span><span class="line">   67 </span><span class="kwa">
</span><span class="line">   68 </span><span class="kwa">    local
</span><span class="line">   69 </span><span class="kwa">        structure</span> C <span class="sym">=</span> SMLofNJ.Cont
<span class="line">   70 </span>        <span class="kwa">structure</span> Q <span class="sym">=</span> Queue
<span class="line">   71 </span>        <span class="kwa">type</span> tt <span class="sym">=</span> unit C.cont
<span class="line">   72 </span>
<span class="line">   73 </span>        <span class="com">(* We take the easy way out: Simply drop signals that
</span><span class="line">   74 </span><span class="com">         * arrive during an atomic section on the floor.  This is
</span><span class="line">   75 </span><span class="com">         * enough for our purpose and simplifies the coding... *)</span>
<span class="line">   76 </span>        <span class="kwa">val</span> atomicState <span class="sym">=</span> ref <span class="kwa">false
</span><span class="line">   77 </span><span class="kwa">        fun</span> atomicBegin <span class="sym">() =</span> atomicState <span class="sym">:=</span> <span class="kwa">true
</span><span class="line">   78 </span><span class="kwa">        fun</span> atomicEnd <span class="sym">() =</span> atomicState <span class="sym">:=</span> <span class="kwa">false
</span><span class="line">   79 </span><span class="kwa">        val</span> readyQ <span class="sym">:</span> Q.q <span class="sym">=</span> Q.new <span class="sym">()
</span><span class="line">   80 </span><span class="sym">
</span><span class="line">   81 </span><span class="sym"></span>        <span class="kwa">fun</span> dispatch <span class="sym">() =</span> C.throw <span class="sym">(</span>Q.dequeue readyQ<span class="sym">) ()
</span><span class="line">   82 </span><span class="sym">
</span><span class="line">   83 </span><span class="sym"></span>        <span class="kwa">fun</span> sigH <span class="sym">(</span>_<span class="sym">:</span> Signals.signal<span class="sym">,</span> _<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> k<span class="sym">:</span> tt<span class="sym">) =
</span><span class="line">   84 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">!</span>atomicState <span class="kwa">then</span> k
<span class="line">   85 </span>            <span class="kwa">else</span> <span class="sym">(</span>Q.enqueue <span class="sym">(</span>readyQ<span class="sym">,</span> k<span class="sym">);</span> Q.dequeue readyQ<span class="sym">)
</span><span class="line">   86 </span><span class="sym"></span>    <span class="kwa">in
</span><span class="line">   87 </span><span class="kwa"></span>        <span class="com">(* coroutines *)</span>
<span class="line">   88 </span>        <span class="kwa">fun</span> yield <span class="sym">() =
</span><span class="line">   89 </span><span class="sym">            (</span>atomicBegin <span class="sym">();
</span><span class="line">   90 </span><span class="sym"></span>             C.callcc <span class="sym">(</span><span class="kwa">fn</span> k <span class="sym">=&gt; (</span>Q.enqueue <span class="sym">(</span>readyQ<span class="sym">,</span> k<span class="sym">);</span> dispatch <span class="sym">()));
</span><span class="line">   91 </span><span class="sym"></span>             atomicEnd <span class="sym">())
</span><span class="line">   92 </span><span class="sym">
</span><span class="line">   93 </span><span class="sym"></span>        <span class="kwa">fun</span> exit <span class="sym">() = (</span>atomicBegin <span class="sym">();</span> dispatch <span class="sym">())
</span><span class="line">   94 </span><span class="sym">
</span><span class="line">   95 </span><span class="sym"></span>        <span class="kwa">fun</span> fork f <span class="sym">=</span> <span class="kwa">let
</span><span class="line">   96 </span><span class="kwa">            val</span> k <span class="sym">=</span> C.isolate <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt; (</span>atomicEnd <span class="sym">();
</span><span class="line">   97 </span><span class="sym"></span>                                         f <span class="sym">()</span> <span class="kwa">handle</span> _ <span class="sym">=&gt; ();
</span><span class="line">   98 </span><span class="sym"></span>                                         exit <span class="sym">()))
</span><span class="line">   99 </span><span class="sym"></span>        <span class="kwa">in
</span><span class="line">  100 </span><span class="kwa"></span>            atomicBegin <span class="sym">();
</span><span class="line">  101 </span><span class="sym"></span>            Q.enqueue <span class="sym">(</span>readyQ<span class="sym">,</span> k<span class="sym">);
</span><span class="line">  102 </span><span class="sym"></span>            atomicEnd <span class="sym">()
</span><span class="line">  103 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">  104 </span><span class="kwa">
</span><span class="line">  105 </span><span class="kwa"></span>        <span class="com">(* mutex locks *)</span>
<span class="line">  106 </span>        <span class="kwa">datatype</span> mutex <span class="sym">=</span> Mutex <span class="kwa">of</span> <span class="sym">{</span> locked <span class="sym">:</span> <span class="kwb">bool</span> ref<span class="sym">,</span> blocked <span class="sym">:</span> Q.q <span class="sym">}
</span><span class="line">  107 </span><span class="sym">
</span><span class="line">  108 </span><span class="sym"></span>        <span class="kwa">fun</span> mutex <span class="sym">() =</span> Mutex <span class="sym">{</span> locked <span class="sym">=</span> ref <span class="kwa">false</span><span class="sym">,</span> blocked <span class="sym">=</span> Q.new <span class="sym">() }
</span><span class="line">  109 </span><span class="sym">
</span><span class="line">  110 </span><span class="sym"></span>        <span class="kwa">fun</span> lock <span class="sym">(</span>Mutex <span class="sym">{</span> locked<span class="sym">,</span> blocked <span class="sym">}) =
</span><span class="line">  111 </span><span class="sym">            (</span>atomicBegin <span class="sym">();
</span><span class="line">  112 </span><span class="sym"></span>             <span class="kwa">if</span> <span class="sym">!</span>locked <span class="kwa">then
</span><span class="line">  113 </span><span class="kwa"></span>                 C.callcc <span class="sym">(</span><span class="kwa">fn</span> k <span class="sym">=&gt; (</span>Q.enqueue <span class="sym">(</span>blocked<span class="sym">,</span> k<span class="sym">);
</span><span class="line">  114 </span><span class="sym"></span>                                    dispatch <span class="sym">()))
</span><span class="line">  115 </span><span class="sym"></span>             <span class="kwa">else</span> locked <span class="sym">:=</span> <span class="kwa">true</span><span class="sym">;
</span><span class="line">  116 </span><span class="sym"></span>             atomicEnd <span class="sym">())
</span><span class="line">  117 </span><span class="sym">
</span><span class="line">  118 </span><span class="sym"></span>        <span class="kwa">fun</span> unlock <span class="sym">(</span>Mutex <span class="sym">{</span> locked<span class="sym">,</span> blocked <span class="sym">}) =
</span><span class="line">  119 </span><span class="sym">            (</span>atomicBegin <span class="sym">();
</span><span class="line">  120 </span><span class="sym"></span>             <span class="kwa">if</span> Q.empty blocked <span class="kwa">then</span> locked <span class="sym">:=</span> <span class="kwa">false
</span><span class="line">  121 </span><span class="kwa">             else</span> C.callcc <span class="sym">(</span><span class="kwa">fn</span> k <span class="sym">=&gt; (</span>Q.enqueue <span class="sym">(</span>readyQ<span class="sym">,</span> k<span class="sym">);
</span><span class="line">  122 </span><span class="sym"></span>                                     C.throw <span class="sym">(</span>Q.dequeue blocked<span class="sym">) ()));
</span><span class="line">  123 </span><span class="sym"></span>             atomicEnd <span class="sym">())
</span><span class="line">  124 </span><span class="sym">
</span><span class="line">  125 </span><span class="sym">
</span><span class="line">  126 </span><span class="sym"></span>        <span class="com">(* conditions *)</span>
<span class="line">  127 </span>        <span class="kwa">datatype</span> condition <span class="sym">=</span> Cond <span class="kwa">of</span> <span class="sym">{</span> mutex <span class="sym">:</span> mutex<span class="sym">,</span> waiting <span class="sym">:</span> Q.q <span class="sym">}
</span><span class="line">  128 </span><span class="sym">
</span><span class="line">  129 </span><span class="sym"></span>        <span class="kwa">fun</span> condition m <span class="sym">=</span> Cond <span class="sym">{</span> mutex <span class="sym">=</span> m<span class="sym">,</span> waiting <span class="sym">=</span> Q.new <span class="sym">() }
</span><span class="line">  130 </span><span class="sym">
</span><span class="line">  131 </span><span class="sym"></span>        <span class="kwa">fun</span> wait <span class="sym">(</span>Cond <span class="sym">{</span> mutex <span class="sym">=</span> m <span class="kwa">as</span> Mutex <span class="sym">{</span> locked<span class="sym">,</span> blocked <span class="sym">},</span> waiting <span class="sym">}) =
</span><span class="line">  132 </span><span class="sym">            (</span>atomicBegin <span class="sym">();
</span><span class="line">  133 </span><span class="sym"></span>             C.callcc <span class="sym">(</span><span class="kwa">fn</span> k <span class="sym">=&gt;
</span><span class="line">  134 </span><span class="sym">                          (</span>Q.enqueue <span class="sym">(</span>waiting<span class="sym">,</span> k<span class="sym">);
</span><span class="line">  135 </span><span class="sym"></span>                           <span class="kwa">if</span> Q.empty blocked <span class="kwa">then</span> <span class="sym">(</span>locked <span class="sym">:=</span> <span class="kwa">false</span><span class="sym">;
</span><span class="line">  136 </span><span class="sym"></span>                                                    dispatch <span class="sym">())
</span><span class="line">  137 </span><span class="sym"></span>                           <span class="kwa">else</span> C.throw <span class="sym">(</span>Q.dequeue blocked<span class="sym">) ()));
</span><span class="line">  138 </span><span class="sym"></span>             <span class="kwa">if</span> <span class="sym">!</span>locked <span class="kwa">then
</span><span class="line">  139 </span><span class="kwa"></span>                 C.callcc <span class="sym">(</span><span class="kwa">fn</span> k <span class="sym">=&gt; (</span>Q.enqueue <span class="sym">(</span>blocked<span class="sym">,</span> k<span class="sym">);
</span><span class="line">  140 </span><span class="sym"></span>                                    dispatch <span class="sym">()))
</span><span class="line">  141 </span><span class="sym"></span>             <span class="kwa">else</span> locked <span class="sym">:=</span> <span class="kwa">true</span><span class="sym">;
</span><span class="line">  142 </span><span class="sym"></span>             atomicEnd <span class="sym">())
</span><span class="line">  143 </span><span class="sym">
</span><span class="line">  144 </span><span class="sym"></span>        <span class="kwa">fun</span> signal <span class="sym">(</span>Cond <span class="sym">{</span> waiting<span class="sym">,</span> ... <span class="sym">}) =
</span><span class="line">  145 </span><span class="sym">            (</span>atomicBegin <span class="sym">();
</span><span class="line">  146 </span><span class="sym"></span>             <span class="kwa">if</span> Q.empty waiting <span class="kwa">then</span> <span class="sym">()
</span><span class="line">  147 </span><span class="sym"></span>             <span class="kwa">else</span> Q.enqueue <span class="sym">(</span>readyQ<span class="sym">,</span> Q.dequeue waiting<span class="sym">);
</span><span class="line">  148 </span><span class="sym"></span>             atomicEnd <span class="sym">())
</span><span class="line">  149 </span><span class="sym">
</span><span class="line">  150 </span><span class="sym"></span>        <span class="kwa">fun</span> run <span class="sym">(</span>f<span class="sym">,</span> t<span class="sym">) =</span> <span class="kwa">let
</span><span class="line">  151 </span><span class="kwa">            val</span> oh <span class="sym">=</span> Signals.setHandler <span class="sym">(</span>Signals.sigALRM<span class="sym">,
</span><span class="line">  152 </span><span class="sym"></span>                                         Signals.HANDLER sigH<span class="sym">)
</span><span class="line">  153 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=</span> SMLofNJ.IntervalTimer.setIntTimer <span class="sym">(</span>SOME t<span class="sym">)
</span><span class="line">  154 </span><span class="sym"></span>            <span class="kwa">fun</span> reset <span class="sym">() =
</span><span class="line">  155 </span><span class="sym">                (</span>ignore <span class="sym">(</span>Signals.setHandler <span class="sym">(</span>Signals.sigALRM<span class="sym">,</span> oh<span class="sym">));
</span><span class="line">  156 </span><span class="sym"></span>                 SMLofNJ.IntervalTimer.setIntTimer NONE<span class="sym">)
</span><span class="line">  157 </span><span class="sym">
</span><span class="line">  158 </span><span class="sym"></span>        <span class="kwa">in
</span><span class="line">  159 </span><span class="kwa"></span>            <span class="sym">(</span>f <span class="sym">()</span> <span class="kwa">handle</span> e <span class="sym">=&gt; (</span>reset <span class="sym">();</span> <span class="kwa">raise</span> e<span class="sym">))
</span><span class="line">  160 </span><span class="sym"></span>            <span class="kwa">before</span> reset <span class="sym">()
</span><span class="line">  161 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">  162 </span><span class="kwa">    end
</span><span class="line">  163 </span><span class="kwa">end
</span><span class="line">  164 </span><span class="kwa">
</span><span class="line">  165 </span><span class="kwa">structure</span> ProdCons <span class="sym">:</span> <span class="kwa">sig
</span><span class="line">  166 </span><span class="kwa">    val</span> main <span class="sym">:</span> <span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list <span class="sym">-&gt;</span> OS.Process.status
<span class="line">  167 </span><span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
</span><span class="line">  168 </span><span class="kwa">
</span><span class="line">  169 </span><span class="kwa">    fun</span> doit n <span class="sym">=</span> <span class="kwa">let
</span><span class="line">  170 </span><span class="kwa">
</span><span class="line">  171 </span><span class="kwa">        val</span> c_running <span class="sym">=</span> Mutex.mutex <span class="sym">()
</span><span class="line">  172 </span><span class="sym"></span>        <span class="kwa">val</span> p_running <span class="sym">=</span> Mutex.mutex <span class="sym">()
</span><span class="line">  173 </span><span class="sym">
</span><span class="line">  174 </span><span class="sym"></span>        <span class="kwa">val</span> consumer's_turn <span class="sym">=</span> ref <span class="kwa">false
</span><span class="line">  175 </span><span class="kwa">        val</span> data <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  176 </span><span class="num"></span>        <span class="kwa">val</span> produced <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  177 </span><span class="num"></span>        <span class="kwa">val</span> consumed <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  178 </span><span class="num"></span>        <span class="kwa">val</span> m <span class="sym">=</span> Mutex.mutex <span class="sym">()
</span><span class="line">  179 </span><span class="sym"></span>        <span class="kwa">val</span> c <span class="sym">=</span> Mutex.condition m
<span class="line">  180 </span>
<span class="line">  181 </span>        <span class="kwa">fun</span> producer <span class="sym">() =</span> <span class="kwa">let
</span><span class="line">  182 </span><span class="kwa">            fun</span> wait <span class="sym">() =</span> <span class="kwa">if</span> <span class="sym">!</span>consumer's_turn <span class="kwa">then</span> wait <span class="sym">(</span>Mutex.wait c<span class="sym">)</span> <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  183 </span><span class="sym"></span>            <span class="kwa">fun</span> loop i <span class="sym">=
</span><span class="line">  184 </span><span class="sym"></span>                <span class="kwa">if</span> i <span class="sym">&lt;=</span> n <span class="kwa">then
</span><span class="line">  185 </span><span class="kwa">                    let val</span> _ <span class="sym">=</span> Mutex.lock m
<span class="line">  186 </span>                        <span class="kwa">val</span> _ <span class="sym">=</span> wait <span class="sym">()
</span><span class="line">  187 </span><span class="sym"></span>                    <span class="kwa">in
</span><span class="line">  188 </span><span class="kwa"></span>                        data <span class="sym">:=</span> i<span class="sym">;
</span><span class="line">  189 </span><span class="sym"></span>                        consumer's_turn <span class="sym">:=</span> <span class="kwa">true</span><span class="sym">;
</span><span class="line">  190 </span><span class="sym"></span>                        produced <span class="sym">:= !</span>produced <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  191 </span><span class="sym"></span>                        Mutex.signal c<span class="sym">;
</span><span class="line">  192 </span><span class="sym"></span>                        Mutex.unlock m<span class="sym">;
</span><span class="line">  193 </span><span class="sym"></span>                        loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">  194 </span><span class="sym"></span>                    <span class="kwa">end
</span><span class="line">  195 </span><span class="kwa">                else</span> <span class="sym">()
</span><span class="line">  196 </span><span class="sym"></span>        <span class="kwa">in
</span><span class="line">  197 </span><span class="kwa"></span>            loop <span class="num">1</span> <span class="kwa">before</span> Mutex.unlock p_running
<span class="line">  198 </span>        <span class="kwa">end
</span><span class="line">  199 </span><span class="kwa">
</span><span class="line">  200 </span><span class="kwa">        fun</span> consumer <span class="sym">() =</span> <span class="kwa">let
</span><span class="line">  201 </span><span class="kwa">            fun</span> wait <span class="sym">() =</span> <span class="kwa">if</span> <span class="sym">!</span>consumer's_turn <span class="kwa">then</span> <span class="sym">()</span> <span class="kwa">else</span> wait <span class="sym">(</span>Mutex.wait c<span class="sym">)
</span><span class="line">  202 </span><span class="sym"></span>            <span class="kwa">fun</span> loop <span class="sym">() =</span> <span class="kwa">let
</span><span class="line">  203 </span><span class="kwa">                val</span> _ <span class="sym">=</span> Mutex.lock m
<span class="line">  204 </span>                <span class="kwa">val</span> _ <span class="sym">=</span> wait <span class="sym">()
</span><span class="line">  205 </span><span class="sym"></span>                <span class="kwa">val</span> i <span class="sym">= !</span>data
<span class="line">  206 </span>            <span class="kwa">in
</span><span class="line">  207 </span><span class="kwa"></span>                consumer's_turn <span class="sym">:=</span> <span class="kwa">false</span><span class="sym">;
</span><span class="line">  208 </span><span class="sym"></span>                consumed <span class="sym">:= !</span>consumed <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  209 </span><span class="sym"></span>                Mutex.signal c<span class="sym">;
</span><span class="line">  210 </span><span class="sym"></span>                Mutex.unlock m<span class="sym">;
</span><span class="line">  211 </span><span class="sym"></span>                <span class="kwa">if</span> i <span class="sym">&lt;&gt;</span> n <span class="kwa">then</span> loop <span class="sym">()</span> <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  212 </span><span class="sym"></span>            <span class="kwa">end
</span><span class="line">  213 </span><span class="kwa">        in
</span><span class="line">  214 </span><span class="kwa"></span>            loop <span class="sym">()</span> <span class="kwa">before</span> Mutex.unlock c_running
<span class="line">  215 </span>        <span class="kwa">end
</span><span class="line">  216 </span><span class="kwa">
</span><span class="line">  217 </span><span class="kwa"></span>        <span class="com">(* hack to simulate &quot;join&quot; *)</span>
<span class="line">  218 </span>        <span class="kwa">val</span> _ <span class="sym">=</span> Mutex.lock p_running
<span class="line">  219 </span>        <span class="kwa">val</span> _ <span class="sym">=</span> Mutex.lock c_running
<span class="line">  220 </span>
<span class="line">  221 </span>        <span class="kwa">val</span> p <span class="sym">=</span> Mutex.fork producer
<span class="line">  222 </span>        <span class="kwa">val</span> c <span class="sym">=</span> Mutex.fork consumer
<span class="line">  223 </span>    <span class="kwa">in
</span><span class="line">  224 </span><span class="kwa"></span>        <span class="com">(* &quot;join&quot; *)</span>
<span class="line">  225 </span>        Mutex.lock p_running<span class="sym">;
</span><span class="line">  226 </span><span class="sym"></span>        Mutex.lock c_running<span class="sym">;
</span><span class="line">  227 </span><span class="sym">
</span><span class="line">  228 </span><span class="sym"></span>        <span class="kwa">TextIO</span>.output <span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,
</span><span class="line">  229 </span><span class="sym"></span>                       concat <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(!</span>produced<span class="sym">),</span> <span class="str">&quot; &quot;</span><span class="sym">,
</span><span class="line">  230 </span><span class="sym"></span>                               <span class="kwa">Int</span>.toString <span class="sym">(!</span>consumed<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])
</span><span class="line">  231 </span><span class="sym"></span>    <span class="kwa">end
</span><span class="line">  232 </span><span class="kwa">
</span><span class="line">  233 </span><span class="kwa">    fun</span> main <span class="sym">(</span>_<span class="sym">,</span> args<span class="sym">) =</span> <span class="kwa">let
</span><span class="line">  234 </span><span class="kwa">        val</span> n <span class="sym">=</span> <span class="kwa">case</span> args <span class="kwa">of</span> <span class="sym">[] =&gt;</span> <span class="num">1
</span><span class="line">  235 </span><span class="num"></span>                           <span class="sym">| (</span>x <span class="sym">::</span> _<span class="sym">) =&gt;</span> getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString x<span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span><span class="line">  236 </span><span class="sym"></span>    <span class="kwa">in
</span><span class="line">  237 </span><span class="kwa"></span>        Mutex.run <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">() =&gt;</span> doit n<span class="sym">,</span> Time.fromMilliseconds <span class="num">1</span><span class="sym">);
</span><span class="line">  238 </span><span class="sym"></span>        OS.Process.success
<span class="line">  239 </span>    <span class="kwa">end
</span><span class="line">  240 </span><span class="kwa">end
</span><span class="line">  241 </span><span class="kwa">
</span><span class="line">  242 </span><span class="kwa">val</span> _ <span class="sym">=</span> SMLofNJ.exportFn<span class="sym">(</span><span class="str">&quot;prodcons&quot;</span><span class="sym">,</span> ProdCons.main<span class="sym">);</span>
