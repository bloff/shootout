<span class="com">(* tcprequest.sml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 * Translated to SML by sweeks&#64;sweeks.com
 *
 *)</span>

<span class="kwa">val</span> m <span class="sym">=</span> <span class="num">100

</span><span class="kwa">val</span> bufferSize <span class="sym">=</span> <span class="num">4096
</span><span class="kwa">val</span> port <span class="sym">=</span> <span class="num">11000

</span><span class="kwa">fun</span> buf size <span class="sym">=</span> Word8ArraySlice.full <span class="sym">(</span>Word8Array.array <span class="sym">(</span>size<span class="sym">,</span> <span class="num">0w0</span><span class="sym">))
</span><span class="kwa">val</span> replySize <span class="sym">=</span> <span class="num">4096
</span><span class="kwa">val</span> reply <span class="sym">=</span> buf replySize
<span class="kwa">val</span> request <span class="sym">=</span> buf <span class="num">64

</span><span class="com">(* Return [false] if EOF is reached *)</span>
<span class="kwa">fun</span> read <span class="sym">(</span>sock<span class="sym">,</span> buf<span class="sym">,</span> n<span class="sym">) =
</span>   <span class="kwa">let
      fun</span> loop n <span class="sym">=
</span>	 n <span class="sym">&lt;=</span> <span class="num">0</span> <span class="kwa">orelse
	 let
	    val</span> r <span class="sym">=</span> Socket.recvArr <span class="sym">(</span>sock<span class="sym">,
</span>				    Word8ArraySlice.slice
				    <span class="sym">(</span>buf<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> SOME <span class="sym">(</span><span class="kwa">Int</span>.min <span class="sym">(</span>n<span class="sym">,</span> bufferSize<span class="sym">))))
</span>	 <span class="kwa">in
</span>	    r <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">andalso</span> loop <span class="sym">(</span>n <span class="sym">-</span> r<span class="sym">)
</span>	 <span class="kwa">end
   in
</span>      loop n
   <span class="kwa">end

fun</span> server sock <span class="sym">=
</span>  <span class="kwa">let
     val</span> b <span class="sym">=</span> Word8Array.array <span class="sym">(</span>bufferSize<span class="sym">,</span> <span class="num">0w0</span><span class="sym">)
</span>     <span class="kwa">val</span> <span class="sym">(</span>s<span class="sym">,</span> _<span class="sym">) =</span> Socket.accept sock
     <span class="kwa">val</span> <span class="sym">() =
</span>	<span class="kwa">while</span> Socket.recvArr <span class="sym">(</span>s<span class="sym">,</span> Word8ArraySlice.full b<span class="sym">) &gt;</span> <span class="num">0
</span>	   <span class="kwa">do</span> ignore <span class="sym">(</span>Socket.sendArr <span class="sym">(</span>s<span class="sym">,</span> reply<span class="sym">))
</span>     <span class="kwa">val</span> <span class="sym">() =</span> Socket.close s
     <span class="kwa">val</span> <span class="sym">() =</span> Socket.close sock
  <span class="kwa">in
</span>     <span class="sym">()
</span>  <span class="kwa">end

fun</span> client n <span class="sym">=
</span>  <span class="kwa">let
     val</span> b <span class="sym">=</span> Word8Array.array <span class="sym">(</span>bufferSize<span class="sym">,</span> <span class="num">0w0</span><span class="sym">)
</span>     <span class="kwa">val</span> replies <span class="sym">=</span> ref <span class="num">0
</span>     <span class="kwa">val</span> bytes <span class="sym">=</span> ref <span class="num">0</span> <span class="com">(* useless but mandated by spec *)</span>
     <span class="kwa">val</span> sock <span class="sym">=</span> INetSock.TCP.socket <span class="sym">()
</span>     <span class="kwa">val</span> <span class="sym">() =
</span>	Socket.connect
	<span class="sym">(</span>sock<span class="sym">,</span> INetSock.toAddr <span class="sym">(</span>NetHostDB.addr
				<span class="sym">(</span>valOf <span class="sym">(</span>NetHostDB.getByName <span class="str">&quot;127.0.0.1&quot;</span><span class="sym">)),
</span>				port<span class="sym">))
</span>     <span class="kwa">val</span> <span class="sym">() =
</span>	for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;
	     (</span>ignore <span class="sym">(</span>Socket.sendArr <span class="sym">(</span>sock<span class="sym">,</span> request<span class="sym">))
	      ;</span> ignore <span class="sym">(</span>read <span class="sym">(</span>sock<span class="sym">,</span> b<span class="sym">,</span> replySize<span class="sym">))
	      ;</span> bytes <span class="sym">:= !</span>bytes <span class="sym">+</span> replySize
	      <span class="sym">;</span> replies <span class="sym">:=</span> <span class="num">1</span> <span class="sym">+ !</span>replies<span class="sym">))
</span>     <span class="kwa">val</span> <span class="sym">() =</span> Socket.close sock
  <span class="kwa">in
</span>     print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;replies: &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString <span class="sym">(!</span>replies<span class="sym">),
</span>		    <span class="str">&quot;</span><span class="esc">\t</span><span class="str">bytes: &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString <span class="sym">(!</span>bytes<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])
</span>  <span class="kwa">end

val</span> n <span class="sym">=</span> m <span class="sym">* (</span>valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString <span class="sym">(</span>hd <span class="sym">(</span>CommandLine.arguments <span class="sym">())))
</span>	     <span class="kwa">handle</span> _ <span class="sym">=&gt;</span> <span class="num">10</span><span class="sym">)
</span><span class="kwa">val</span> sock <span class="sym">=</span> INetSock.TCP.socket <span class="sym">()
</span><span class="kwa">val</span> <span class="sym">() =</span> Socket.Ctl.setREUSEADDR <span class="sym">(</span>sock<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)
</span><span class="kwa">val</span> <span class="sym">() =</span> Socket.bind <span class="sym">(</span>sock<span class="sym">,</span> INetSock.any port<span class="sym">)
</span><span class="kwa">val</span> <span class="sym">() =</span> Socket.listen <span class="sym">(</span>sock<span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span><span class="kwa">val</span> <span class="sym">() =
</span>   <span class="kwa">case</span> Posix.Process.fork <span class="sym">()</span> <span class="kwa">of
</span>      NONE <span class="sym">=&gt;</span> server sock
    <span class="sym">|</span> SOME pid <span class="sym">=&gt; (</span>client n<span class="sym">;</span> ignore <span class="sym">(</span>Posix.Process.wait <span class="sym">()))</span>
