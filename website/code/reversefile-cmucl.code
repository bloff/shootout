<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: lisp -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: reversefile-cmucl.code,v 1.2 2004-11-08 08:15:23 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">;;; from Bulent Murtezaoglu
</FONT></I><I><FONT COLOR="#B22222">;;; Multi-lisp modifications by Brent Fulgham
</FONT></I>
(declaim (optimize (speed 3) (debug 0) (safety 0) (space 0) (compilation-speed 0)))

(defconstant BLOCKSIZE 4096)

(declaim (inline position-rev))
<I><FONT COLOR="#B22222">;; I wrote the the function below because the default cmucl image
</FONT></I><I><FONT COLOR="#B22222">;; doesn't seem to to have the inline expansion of position available
</FONT></I>(defun position-rev (string end char)
  (declare (simple-string string) (fixnum end))
  (declare (inline char=))
  (loop for i from (1- end) downto 0
    <B><FONT COLOR="#A020F0">do</FONT></B> (when (char= (aref string i) char)
	 (return-from position-rev i))))

(defun main ()
  (declare (inline read-sequence write-string position-rev replace))
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((fp 0)
	(bufsize BLOCKSIZE)
	(buf (make-string BLOCKSIZE)))
    (declare (fixnum bufsize) (simple-string buf))
    (loop for i fixnum = (read-sequence buf *standard-input*
	<B><FONT COLOR="#5F9EA0">:start</FONT></B> fp <B><FONT COLOR="#5F9EA0">:end</FONT></B> (+ fp BLOCKSIZE))
      until (= i fp) <B><FONT COLOR="#A020F0">do</FONT></B>
      (setq fp i)
      (when (&gt; (+ i BLOCKSIZE) bufsize)
	(setq bufsize (* 2 bufsize))
	(<B><FONT COLOR="#A020F0">let</FONT></B> ((tmpbuf (make-string bufsize)))
	  (replace tmpbuf buf <B><FONT COLOR="#5F9EA0">:start1</FONT></B> 0 <B><FONT COLOR="#5F9EA0">:end1</FONT></B> fp <B><FONT COLOR="#5F9EA0">:start2</FONT></B> 0 <B><FONT COLOR="#5F9EA0">:end2</FONT></B> fp)
	  (setq buf tmpbuf))))
    (loop for i = (1- fp) then j as j = (position-rev buf i #\Newline)
      <B><FONT COLOR="#A020F0">do</FONT></B> (write-string buf *standard-output* <B><FONT COLOR="#5F9EA0">:start</FONT></B> (<B><FONT COLOR="#A020F0">if</FONT></B> j (1+ j) 0) <B><FONT COLOR="#5F9EA0">:end</FONT></B> (1+ i))
      while j)))</pre></td></tr></table>
