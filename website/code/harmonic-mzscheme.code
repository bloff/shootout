#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">;; $d: harmonic.mzscheme,v 1.1 2005/04/24 03:55:57 bfulgham Exp $</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Based on the Chicken implementation by Felix</span>
<span class="slc">;; Contributed by Brent Fulgham</span>
<span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;13.ss&quot;</span> <span class="str">&quot;srfi&quot;</span><span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>sum<span class="sym">-</span>harmonic4 n<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">([</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)]</span>
       <span class="sym">[</span>sum <span class="num">1.0</span> <span class="sym">(+</span> sum <span class="sym">(/</span> ifloat<span class="sym">))]</span>
       <span class="sym">[</span>ifloat <span class="num">2.0</span> <span class="sym">(+</span> ifloat <span class="num">1</span><span class="sym">)] )</span>
      <span class="sym">((&gt;=</span> i n<span class="sym">)</span> sum<span class="sym">) ) )</span>

<span class="slc">;;; Round a floating point value</span>
<span class="sym">(</span>define <span class="sym">(</span>roundto digits num<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>numstr <span class="sym">(</span>number<span class="sym">-&gt;</span>string num<span class="sym">))</span>
         <span class="sym">(</span>digidx <span class="sym">(</span>string<span class="sym">-</span>index numstr #\.<span class="sym">))</span>
         <span class="sym">(</span>outstr <span class="sym">(</span>substring numstr <span class="num">0</span> <span class="sym">(+</span> digidx digits<span class="sym">)))</span>
         <span class="sym">(</span>lastchar
          <span class="sym">(</span>char<span class="sym">-&gt;</span>integer <span class="sym">(</span>string<span class="sym">-</span>ref numstr <span class="sym">(+</span> digidx digits <span class="num">1</span><span class="sym">))))</span>
         <span class="sym">(</span>nxtlstchr
          <span class="sym">(</span>char<span class="sym">-&gt;</span>integer <span class="sym">(</span>string<span class="sym">-</span>ref numstr <span class="sym">(+</span> digidx digits<span class="sym">)))))</span>
    <span class="sym">(</span>string<span class="sym">-&gt;</span>number
     <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span>
      outstr
      <span class="sym">(</span>string
       <span class="sym">(</span>integer<span class="sym">-&gt;</span>char
        <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> lastchar <span class="num">52</span><span class="sym">)</span><span class="slc">;; 52 == ASCII '4'</span>
            <span class="sym">(</span>add1 nxtlstchr<span class="sym">)</span>
            nxtlstchr<span class="sym">)))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt; (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">1</span><span class="sym">)</span>
      <span class="sym">(</span>begin
        <span class="sym">(</span>display <span class="str">&quot;An argument is required&quot;</span><span class="sym">)</span>
        <span class="sym">(</span>newline<span class="sym">))</span>
      <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">))))</span>
        <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> n<span class="sym">)</span>
            <span class="sym">(</span>begin
              <span class="sym">(</span>display <span class="str">&quot;An integer is required&quot;</span><span class="sym">) (</span>newline<span class="sym">))</span>
            <span class="sym">(</span>printf <span class="str">&quot;~a~%&quot;</span> <span class="sym">(</span>roundto <span class="num">9</span> <span class="sym">(</span>sum<span class="sym">-</span>harmonic4 n<span class="sym">)))))))</span>
<span class="slc">;;; &quot;~,9f\n&quot;</span>

<span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
