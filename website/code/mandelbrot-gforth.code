\ The Great Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/
</span>\
\ contributed by  Greg Buchholz
\ run<span class="sym">:</span> gforth mandel<span class="sym">.</span>gforth <span class="num">600</span> <span class="sym">&gt;</span>out<span class="sym">.</span>pbm


<span class="num">4.0e0</span> fconstant limit_sqr
variable bit_num <span class="num">0</span> bit_num <span class="sym">!
</span>variable byte_acc <span class="num">0</span> byte_acc <span class="sym">!

</span><span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2d</span>rop drop constant NUM

<span class="sym">:</span> s<span class="sym">&gt;</span>f s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f <span class="sym">;
:</span> <span class="num">2</span><span class="sym">*!</span> dup &#64; <span class="num">2</span><span class="sym">*</span> swap <span class="sym">! ;
:</span> inc<span class="sym">!</span> dup &#64; <span class="num">1</span><span class="sym">+</span> swap <span class="sym">! ;
:</span> <span class="num">2fdu</span>p fover fover <span class="sym">;
:</span> <span class="num">2f</span>over_swap <span class="sym">(</span> F<span class="sym">:</span> a b c d <span class="sym">--</span> F<span class="sym">:</span> a b a b c d <span class="sym">)
</span>    <span class="num">3</span> fpick frot frot
    <span class="num">3</span> fpick frot frot <span class="sym">;
:</span> add_cmplx <span class="sym">(</span> F<span class="sym">:</span> Ar Ai Br Bi <span class="sym">--</span> F<span class="sym">:</span> Cr Ci <span class="sym">)
</span>    frot f<span class="sym">+
</span>    frot frot f<span class="sym">+</span> fswap <span class="sym">;
:</span> mag_sqr <span class="sym">(</span> F<span class="sym">:</span> Zr Zi <span class="sym">--</span> F<span class="sym">:</span> m <span class="sym">)
</span>    fdup f<span class="sym">*</span> fswap fdup f<span class="sym">*</span> f<span class="sym">+ ;
:</span> sqr_cmplx <span class="sym">(</span> F<span class="sym">:</span> Ar Ai <span class="sym">--</span> F<span class="sym">:</span> Br Bi <span class="sym">)
</span>    <span class="num">2fdu</span>p fdup f<span class="sym">*</span> fswap fdup f<span class="sym">*
</span>    fswap f<span class="sym">-</span> frot frot f<span class="sym">*</span> <span class="num">2.0e0</span> f<span class="sym">* ;
:</span> mandel <span class="sym">(</span> F<span class="sym">:</span> Cr Ci Zr Zi <span class="sym">--</span> F<span class="sym">:</span> Zr Zi <span class="sym">)
</span>    sqr_cmplx add_cmplx <span class="sym">;
:</span> iterate
    <span class="num">50 0</span> ?<span class="kwa">do
</span>           <span class="num">2f</span>over_swap
           mandel <span class="num">2fdu</span>p mag_sqr
           limit_sqr f<span class="sym">&gt;</span> <span class="kwa">if</span> leave endif
         loop <span class="sym">;
:</span> show_byte byte_acc &#64; emit <span class="sym">;
:</span> preamble <span class="sym">.</span><span class="str">&quot; P4&quot;</span> cr NUM dup <span class="sym">.</span> <span class="num">0</span> u<span class="sym">.</span>r cr <span class="sym">;
:</span> cmplx_plane <span class="sym">(</span> y x <span class="sym">--</span> F<span class="sym">:</span> Cr Ci<span class="sym">)
</span>    s<span class="sym">&gt;</span>f <span class="num">2.0e</span> f<span class="sym">*</span> NUM s<span class="sym">&gt;</span>f f<span class="sym">/</span> <span class="num">1.5e</span> f<span class="sym">-
</span>    s<span class="sym">&gt;</span>f <span class="num">2.0e</span> f<span class="sym">*</span> NUM s<span class="sym">&gt;</span>f f<span class="sym">/</span> <span class="num">1.0e</span> f<span class="sym">- ;
:</span> for_x NUM <span class="num">0</span> ?<span class="kwa">do</span> dup i
                cmplx_plane
                <span class="num">0.0e0 0.0e0</span> iterate

                byte_acc <span class="num">2</span><span class="sym">*!
</span>                mag_sqr limit_sqr f<span class="sym">&lt;=</span> <span class="kwa">if</span> byte_acc inc<span class="sym">!</span> endif
                bit_num inc<span class="sym">!
</span>                bit_num &#64; <span class="num">8</span> <span class="sym">=</span> <span class="kwa">if</span> show_byte <span class="num">0</span> bit_num <span class="sym">!</span> <span class="num">0</span> byte_acc <span class="sym">!
</span>                              <span class="kwa">else</span> i NUM <span class="num">1</span><span class="sym">- =</span> <span class="kwa">if</span> byte_acc &#64; <span class="num">8</span> NUM <span class="num">8</span> mod <span class="sym">-
</span>                                                 lshift byte_acc <span class="sym">!
</span>                                                 show_byte
                                                 <span class="num">0</span> bit_num <span class="sym">!
</span>                                                 <span class="num">0</span> byte_acc <span class="sym">!
</span>                                              endif
                              endif
                fdrop fdrop
              loop <span class="sym">;
:</span> for_y NUM <span class="num">0</span> ?<span class="kwa">do</span> i for_x loop <span class="sym">;

</span>preamble
for_y
bye
