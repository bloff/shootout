<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org
</span><span class="slc">--
</span><span class="slc">-- contributed by Jim Rogers
</span><span class="slc">-- Fixed by Pascal Obry on 2005/03/19
</span>
<span class="kwa">with</span> Ada.Text_IO<span class="sym">;</span>         <span class="kwa">use</span> Ada.Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Integer_Text_IO<span class="sym">;</span> <span class="kwa">use</span> Ada.Integer_Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span>    <span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span><span class="kwa">with</span> Interfaces<span class="sym">;</span>          <span class="kwa">use</span> Interfaces<span class="sym">;

</span><span class="kwa">procedure</span> Mandelbrot <span class="kwa">is
   type</span> Real <span class="kwa">is digits</span> <span class="num">15</span><span class="sym">;
</span>   Iter                   <span class="sym">:</span> <span class="kwa">constant</span> <span class="sym">:=</span> <span class="num">50</span><span class="sym">;
</span>   Limit                  <span class="sym">:</span> <span class="kwa">constant</span> Real <span class="sym">:=</span> <span class="num">2.0</span><span class="sym">;
</span>   Limit2                 <span class="sym">:</span> <span class="kwa">constant</span> Real <span class="sym">:=</span> Limit <span class="sym">*</span> Limit<span class="sym">;
</span>   Width<span class="sym">,</span> Height          <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;
</span>   Bit_Num                <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>   Byte_Acc               <span class="sym">:</span> Unsigned_8 <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>   Zr<span class="sym">,</span> Zi<span class="sym">,</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> Tr<span class="sym">,</span> Ti <span class="sym">:</span> Real<span class="sym">;
</span>   L<span class="sym">,</span> Zr2<span class="sym">,</span> Zi2            <span class="sym">:</span> Real<span class="sym">;
</span><span class="kwa">begin
</span>   Width <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value <span class="sym">(</span>Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));

</span>   Height <span class="sym">:=</span> Width<span class="sym">;

</span>   Put_Line <span class="sym">(</span><span class="str">&quot;P4&quot;</span><span class="sym">);
</span>   Put <span class="sym">(</span>Item <span class="sym">=&gt;</span> Width<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>   Put <span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);
</span>   Put <span class="sym">(</span>Item <span class="sym">=&gt;</span> Height<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>   New_Line<span class="sym">;

</span>   <span class="kwa">for</span> Y <span class="kwa">in</span> <span class="num">0</span> .. Height <span class="num">- 1</span> <span class="kwa">loop
      for</span> X <span class="kwa">in</span> <span class="num">0</span> .. Width <span class="num">- 1</span> <span class="kwa">loop
</span>         Zr <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>         Zi <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>         Cr <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> Real <span class="sym">(</span>X<span class="sym">) /</span> Real <span class="sym">(</span>Width<span class="sym">) -</span> <span class="num">1.5</span><span class="sym">;
</span>         Ci <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> Real <span class="sym">(</span>Y<span class="sym">) /</span> Real <span class="sym">(</span>Height<span class="sym">) -</span> <span class="num">1.0</span><span class="sym">;

</span>         <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span> .. Iter <span class="kwa">loop
</span>            Zr2 <span class="sym">:=</span> Zr <span class="sym">**</span> <span class="num">2</span><span class="sym">;
</span>            Zi2 <span class="sym">:=</span> Zi <span class="sym">**</span> <span class="num">2</span><span class="sym">;
</span>            Tr  <span class="sym">:=</span> Zr2 <span class="sym">-</span> Zi2 <span class="sym">+</span> Cr<span class="sym">;
</span>            Ti  <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> Zr <span class="sym">*</span> Zi <span class="sym">+</span> Ci<span class="sym">;
</span>            Zr  <span class="sym">:=</span> Tr<span class="sym">;
</span>            Zi  <span class="sym">:=</span> Ti<span class="sym">;
</span>            L   <span class="sym">:=</span> Zr2 <span class="sym">+</span> Zi2<span class="sym">;
</span>            <span class="kwa">exit when</span> L <span class="sym">&gt;</span> Limit2<span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;

</span>         <span class="kwa">if</span> L <span class="sym">&gt;</span> Limit2 <span class="kwa">then
</span>            Byte_Acc <span class="sym">:=</span> Shift_Left <span class="sym">(</span>Byte_Acc<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">or</span> <span class="num">16</span>#<span class="num">00</span>#<span class="sym">;
</span>         <span class="kwa">else
</span>            Byte_Acc <span class="sym">:=</span> Shift_Left <span class="sym">(</span>Byte_Acc<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">or</span> <span class="num">16</span>#<span class="num">01</span>#<span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;

</span>         Bit_Num <span class="sym">:=</span> Bit_Num <span class="sym">+</span> <span class="num">1</span><span class="sym">;

</span>         <span class="kwa">if</span> Bit_Num <span class="sym">=</span> <span class="num">8</span> <span class="kwa">then
</span>            Put <span class="sym">(</span><span class="kwb">Character</span><span class="sym">'</span>Val<span class="sym">(</span>Byte_Acc<span class="sym">));
</span>         <span class="kwa">elsif</span> X <span class="sym">=</span> Width <span class="num">- 1</span> <span class="kwa">then
</span>            Byte_Acc <span class="sym">:=</span> Shift_Left <span class="sym">(</span>Byte_Acc<span class="sym">,</span> <span class="num">8</span> <span class="sym">-</span> Width <span class="kwa">mod</span> <span class="num">8</span><span class="sym">);
</span>            Put <span class="sym">(</span><span class="kwb">Character</span><span class="sym">'</span>Val <span class="sym">(</span>Byte_Acc<span class="sym">));
</span>         <span class="kwa">end if</span><span class="sym">;

</span>         Byte_Acc <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>         Bit_Num  <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="kwa">end</span> Mandelbrot<span class="sym">;</span>
