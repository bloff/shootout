<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release pidigits.d gmp4d/gmppool.d gmp4d/mpz.d -Igmp4d -L-lgmp

   GMP for D library provided by Ben Hinkle (http://home.comcast.net/~benhinkle/gmp-d/)
   Original D code optimized by Ben Hinkle to recycle GMP objects.
*/</span>

import std<span class="sym">.</span>conv<span class="sym">,</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">,</span> mpz<span class="sym">,</span> gmp<span class="sym">;

</span><span class="kwb">const int</span> L <span class="sym">=</span> <span class="num">10</span><span class="sym">;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)
{
</span>    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>    PiDigitSpigot digits <span class="sym">=</span> <span class="kwa">new</span> PiDigitSpigot<span class="sym">();

</span>    <span class="kwa">while</span><span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){
</span>       <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&gt;=</span> L<span class="sym">){
</span>          <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> L<span class="sym">;</span> i<span class="sym">++)</span> writef<span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span>digits<span class="sym">.</span>next<span class="sym">());
</span>          j <span class="sym">+=</span> L<span class="sym">;
       }</span> <span class="kwa">else</span> <span class="sym">{
</span>          <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> writef<span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span>digits<span class="sym">.</span>next<span class="sym">());
</span>          <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> n<span class="sym">;</span> i <span class="sym">&lt;</span> L<span class="sym">;</span> i<span class="sym">++)</span> writef<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);
</span>          j <span class="sym">+=</span> n<span class="sym">;
       }
</span>       writef<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">);</span> writefln<span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span>j<span class="sym">);
</span>       n <span class="sym">-=</span> L<span class="sym">;
    }
}

</span><span class="kwc">class</span> PiDigitSpigot
<span class="sym">{
</span><span class="kwc">private</span><span class="sym">:
</span>    Transformation z<span class="sym">,</span> x<span class="sym">,</span> inverse<span class="sym">;

</span><span class="kwc">public</span><span class="sym">:
</span>    <span class="kwa">this</span><span class="sym">()
    {
</span>        z <span class="sym">=</span> <span class="kwa">new</span> Transformation<span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">);
</span>        x <span class="sym">=</span> <span class="kwa">new</span> Transformation<span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">);
</span>        inverse <span class="sym">=</span> <span class="kwa">new</span> Transformation<span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">);
    }

</span>    <span class="kwb">int</span> next<span class="sym">()
    {
</span>        <span class="kwb">int</span> y <span class="sym">=</span> digit<span class="sym">();
</span>        <span class="kwa">if</span><span class="sym">(</span>isSafe<span class="sym">(</span>y<span class="sym">))
        {
</span>            Transformation oldz <span class="sym">=</span> z<span class="sym">;
</span>            z <span class="sym">=</span> produce<span class="sym">(</span>y<span class="sym">);
</span>            oldz<span class="sym">.</span>recycle<span class="sym">();
</span>            <span class="kwa">return</span> y<span class="sym">;
        }</span> <span class="kwa">else</span> <span class="sym">{
</span>            Transformation oldz <span class="sym">=</span> z<span class="sym">;
</span>            z <span class="sym">=</span> consume<span class="sym">(</span> x<span class="sym">.</span>next<span class="sym">() );
</span>            oldz<span class="sym">.</span>recycle<span class="sym">();
</span>            <span class="kwa">return</span> next<span class="sym">();
        }
    }

</span>    <span class="kwb">int</span> digit<span class="sym">()
    {
</span>        <span class="kwa">return</span> z<span class="sym">.</span>extract<span class="sym">(</span><span class="num">3</span><span class="sym">);
    }

</span>    <span class="kwb">bool</span> isSafe<span class="sym">(</span><span class="kwb">int</span> digit<span class="sym">)
    {
</span>        <span class="kwa">return</span> digit <span class="sym">==</span> z<span class="sym">.</span>extract<span class="sym">(</span><span class="num">4</span><span class="sym">);
    }

</span>    Transformation produce<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">)
    {
</span>        <span class="kwa">return</span> <span class="sym">(</span>inverse<span class="sym">.</span>qrst<span class="sym">(</span><span class="num">10</span><span class="sym">,-</span><span class="num">10</span><span class="sym">*</span>i<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">)).</span>compose<span class="sym">(</span>z<span class="sym">);
    }

</span>    Transformation consume<span class="sym">(</span>Transformation a<span class="sym">){
</span>        <span class="kwa">return</span> z<span class="sym">.</span>compose<span class="sym">(</span>a<span class="sym">);
    }
}

</span><span class="kwc">class</span> Transformation
<span class="sym">{
</span><span class="kwc">private</span><span class="sym">:
</span>    alias mpz BigInteger<span class="sym">;
</span>    BigInteger q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">;
</span>    <span class="kwb">int</span> k<span class="sym">;

</span><span class="kwc">public</span><span class="sym">:
</span>    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">int</span> q<span class="sym">,</span> <span class="kwb">int</span> r<span class="sym">,</span> <span class="kwb">int</span> s<span class="sym">,</span> <span class="kwb">int</span> t<span class="sym">)
    {
</span>        <span class="kwa">this</span><span class="sym">.</span>q <span class="sym">=</span> <span class="kwa">new</span> BigInteger<span class="sym">(</span>q<span class="sym">,</span>Recycle<span class="sym">.</span>Temp<span class="sym">);
</span>        <span class="kwa">this</span><span class="sym">.</span>r <span class="sym">=</span> <span class="kwa">new</span> BigInteger<span class="sym">(</span>r<span class="sym">,</span>Recycle<span class="sym">.</span>Temp<span class="sym">);
</span>        <span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> <span class="kwa">new</span> BigInteger<span class="sym">(</span>s<span class="sym">,</span>Recycle<span class="sym">.</span>Temp<span class="sym">);
</span>        <span class="kwa">this</span><span class="sym">.</span>t <span class="sym">=</span> <span class="kwa">new</span> BigInteger<span class="sym">(</span>t<span class="sym">,</span>Recycle<span class="sym">.</span>Temp<span class="sym">);
</span>        k <span class="sym">=</span> <span class="num">0</span><span class="sym">;
    }

</span>    <span class="kwa">this</span><span class="sym">(</span>BigInteger q_<span class="sym">,</span> BigInteger r_<span class="sym">,</span> BigInteger s_<span class="sym">,</span> BigInteger t_<span class="sym">)
    {
</span>        q <span class="sym">=</span> q_<span class="sym">;
</span>        r <span class="sym">=</span> r_<span class="sym">;
</span>        s <span class="sym">=</span> s_<span class="sym">;
</span>        t <span class="sym">=</span> t_<span class="sym">;
</span>        k <span class="sym">=</span> <span class="num">0</span><span class="sym">;
    }

</span>    <span class="kwb">void</span> recycle<span class="sym">()
    {
</span>        mpzpool<span class="sym">.</span>recycle<span class="sym">(</span>q<span class="sym">);
</span>        mpzpool<span class="sym">.</span>recycle<span class="sym">(</span>s<span class="sym">);
</span>        mpzpool<span class="sym">.</span>recycle<span class="sym">(</span>r<span class="sym">);
</span>        mpzpool<span class="sym">.</span>recycle<span class="sym">(</span>t<span class="sym">);
    }

</span>    Transformation next<span class="sym">()
    {
</span>        k<span class="sym">++;
</span>        q<span class="sym">.</span>si <span class="sym">=</span> k<span class="sym">;
</span>        r<span class="sym">.</span>si <span class="sym">=</span> <span class="num">4</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">2</span><span class="sym">;
</span>        s<span class="sym">.</span>si <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>        t<span class="sym">.</span>si <span class="sym">=</span> <span class="num">2</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>        <span class="kwa">return this</span><span class="sym">;
    }

</span>    <span class="kwb">int</span> extract<span class="sym">(</span><span class="kwb">int</span> j<span class="sym">)
    {
</span>        <span class="kwa">return</span> atoi<span class="sym">(((</span>q <span class="sym">*</span> j <span class="sym">+</span> r<span class="sym">) / (</span>s <span class="sym">*</span> j <span class="sym">+</span> t<span class="sym">)).</span>toString<span class="sym">);
    }

</span>    Transformation qrst<span class="sym">(</span><span class="kwb">int</span> q_<span class="sym">,</span> <span class="kwb">int</span> r_<span class="sym">,</span> <span class="kwb">int</span> s_<span class="sym">,</span> <span class="kwb">int</span> t_<span class="sym">)
    {
</span>        q<span class="sym">.</span>si <span class="sym">=</span> q_<span class="sym">;
</span>        r<span class="sym">.</span>si <span class="sym">=</span> r_<span class="sym">;
</span>        s<span class="sym">.</span>si <span class="sym">=</span> s_<span class="sym">;
</span>        t<span class="sym">.</span>si <span class="sym">=</span> t_<span class="sym">;
</span>        k <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>        <span class="kwa">return this</span><span class="sym">;
    }

</span>    Transformation compose<span class="sym">(</span>Transformation a<span class="sym">)
    {
</span>        mpz tq <span class="sym">= (</span>q <span class="sym">*</span> a<span class="sym">.</span>q<span class="sym">).</span>save<span class="sym">;
</span>        mpz tr <span class="sym">= ((</span>q <span class="sym">*</span> a<span class="sym">.</span>r<span class="sym">) + (</span>r <span class="sym">*</span> a<span class="sym">.</span>t<span class="sym">)).</span>save<span class="sym">;
</span>        mpz ts <span class="sym">= ((</span>s <span class="sym">*</span> a<span class="sym">.</span>q<span class="sym">) + (</span>t <span class="sym">*</span> a<span class="sym">.</span>s<span class="sym">)).</span>save<span class="sym">;
</span>        mpz tt <span class="sym">= ((</span>s <span class="sym">*</span> a<span class="sym">.</span>r<span class="sym">) + (</span>t <span class="sym">*</span> a<span class="sym">.</span>t<span class="sym">)).</span>save<span class="sym">;
</span>        <span class="kwa">return new</span> Transformation<span class="sym">(</span>tq<span class="sym">,</span>tr<span class="sym">,</span>ts<span class="sym">,</span>tt<span class="sym">);
    }
}</span>
