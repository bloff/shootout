<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release pidigits.d gmp4d/gmppool.d gmp4d/mpz.d -Igmp4d -L-lgmp</span>
<span class="com"></span>
<span class="com">   GMP for D library provided by Ben Hinkle (http://home.comcast.net/~benhinkle/gmp-d/)</span>
<span class="com">   Original D code optimized by Ben Hinkle to recycle GMP objects.</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>conv<span class="sym">,</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">,</span> mpz<span class="sym">,</span> gmp<span class="sym">;</span>

<span class="kwa">const int</span> <span class="kwb">L</span> <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwb">P</span>i<span class="kwb">D</span>igit<span class="kwb">S</span>pigot digits <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">P</span>i<span class="kwb">D</span>igit<span class="kwb">S</span>pigot<span class="sym">();</span>

    <span class="kwa">while</span><span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
       <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="kwb">L</span><span class="sym">){</span>
          <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="kwb">L</span><span class="sym">;</span> i<span class="sym">++)</span> <span class="kwd">writef</span><span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span>digits<span class="sym">.</span><span class="kwd">next</span><span class="sym">());</span>
          j <span class="sym">+=</span> <span class="kwb">L</span><span class="sym">;</span>
       <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
          <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> <span class="kwd">writef</span><span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span>digits<span class="sym">.</span><span class="kwd">next</span><span class="sym">());</span>
          <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> n<span class="sym">;</span> i <span class="sym">&lt;</span> <span class="kwb">L</span><span class="sym">;</span> i<span class="sym">++)</span> <span class="kwd">writef</span><span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span>
          j <span class="sym">+=</span> n<span class="sym">;</span>
       <span class="sym">}</span>
       <span class="kwd">writef</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">);</span> <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span>j<span class="sym">);</span>
       n <span class="sym">-=</span> <span class="kwb">L</span><span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">P</span>i<span class="kwb">D</span>igit<span class="kwb">S</span>pigot
<span class="sym">{</span>
<span class="kwa">private</span><span class="sym">:</span>
    <span class="kwb">T</span>ransformation z<span class="sym">,</span> x<span class="sym">,</span> inverse<span class="sym">;</span>

<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">this</span><span class="sym">()</span>
    <span class="sym">{</span>
        z <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">T</span>ransformation<span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
        x <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">T</span>ransformation<span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span>
        inverse <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">T</span>ransformation<span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">int</span> <span class="kwd">next</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">int</span> y <span class="sym">=</span> <span class="kwd">digit</span><span class="sym">();</span>
        <span class="kwa">if</span><span class="sym">(</span><span class="kwd">isSafe</span><span class="sym">(</span>y<span class="sym">))</span>
        <span class="sym">{</span>
            <span class="kwb">T</span>ransformation oldz <span class="sym">=</span> z<span class="sym">;</span>
            z <span class="sym">=</span> <span class="kwd">produce</span><span class="sym">(</span>y<span class="sym">);</span>
            oldz<span class="sym">.</span><span class="kwd">recycle</span><span class="sym">();</span>
            <span class="kwa">return</span> y<span class="sym">;</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            <span class="kwb">T</span>ransformation oldz <span class="sym">=</span> z<span class="sym">;</span>
            z <span class="sym">=</span> <span class="kwd">consume</span><span class="sym">(</span> x<span class="sym">.</span><span class="kwd">next</span><span class="sym">() );</span>
            oldz<span class="sym">.</span><span class="kwd">recycle</span><span class="sym">();</span>
            <span class="kwa">return</span> <span class="kwd">next</span><span class="sym">();</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">int</span> <span class="kwd">digit</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">return</span> z<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span><span class="num">3</span><span class="sym">);</span>
    <span class="sym">}</span>

    bool <span class="kwd">isSafe</span><span class="sym">(</span><span class="kwa">int</span> digit<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">return</span> digit <span class="sym">==</span> z<span class="sym">.</span><span class="kwd">extract</span><span class="sym">(</span><span class="num">4</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwb">T</span>ransformation <span class="kwd">produce</span><span class="sym">(</span><span class="kwa">int</span> i<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">return</span> <span class="sym">(</span>inverse<span class="sym">.</span><span class="kwd">qrst</span><span class="sym">(</span><span class="num">10</span><span class="sym">,-</span><span class="num">10</span><span class="sym">*</span>i<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">)).</span><span class="kwd">compose</span><span class="sym">(</span>z<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwb">T</span>ransformation <span class="kwd">consume</span><span class="sym">(</span><span class="kwb">T</span>ransformation a<span class="sym">){</span>
        <span class="kwa">return</span> z<span class="sym">.</span><span class="kwd">compose</span><span class="sym">(</span>a<span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">T</span>ransformation
<span class="sym">{</span>
<span class="kwa">private</span><span class="sym">:</span>
    <span class="kwa">alias</span> mpz <span class="kwb">B</span>ig<span class="kwb">I</span>nteger<span class="sym">;</span>
    <span class="kwb">B</span>ig<span class="kwb">I</span>nteger q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">;</span>
    <span class="kwa">int</span> k<span class="sym">;</span>

<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">this</span><span class="sym">(</span><span class="kwa">int</span> q<span class="sym">,</span> <span class="kwa">int</span> r<span class="sym">,</span> <span class="kwa">int</span> s<span class="sym">,</span> <span class="kwa">int</span> t<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">this</span><span class="sym">.</span>q <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">B</span>ig<span class="kwb">I</span>nteger<span class="sym">(</span>q<span class="sym">,</span><span class="kwb">R</span>ecycle<span class="sym">.</span><span class="kwb">T</span>emp<span class="sym">);</span>
        <span class="kwa">this</span><span class="sym">.</span>r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">B</span>ig<span class="kwb">I</span>nteger<span class="sym">(</span>r<span class="sym">,</span><span class="kwb">R</span>ecycle<span class="sym">.</span><span class="kwb">T</span>emp<span class="sym">);</span>
        <span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">B</span>ig<span class="kwb">I</span>nteger<span class="sym">(</span>s<span class="sym">,</span><span class="kwb">R</span>ecycle<span class="sym">.</span><span class="kwb">T</span>emp<span class="sym">);</span>
        <span class="kwa">this</span><span class="sym">.</span>t <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">B</span>ig<span class="kwb">I</span>nteger<span class="sym">(</span>t<span class="sym">,</span><span class="kwb">R</span>ecycle<span class="sym">.</span><span class="kwb">T</span>emp<span class="sym">);</span>
        k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">B</span>ig<span class="kwb">I</span>nteger q_<span class="sym">,</span> <span class="kwb">B</span>ig<span class="kwb">I</span>nteger r_<span class="sym">,</span> <span class="kwb">B</span>ig<span class="kwb">I</span>nteger s_<span class="sym">,</span> <span class="kwb">B</span>ig<span class="kwb">I</span>nteger t_<span class="sym">)</span>
    <span class="sym">{</span>
        q <span class="sym">=</span> q_<span class="sym">;</span>
        r <span class="sym">=</span> r_<span class="sym">;</span>
        s <span class="sym">=</span> s_<span class="sym">;</span>
        t <span class="sym">=</span> t_<span class="sym">;</span>
        k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwd">recycle</span><span class="sym">()</span>
    <span class="sym">{</span>
        mpzpool<span class="sym">.</span><span class="kwd">recycle</span><span class="sym">(</span>q<span class="sym">);</span>
        mpzpool<span class="sym">.</span><span class="kwd">recycle</span><span class="sym">(</span>s<span class="sym">);</span>
        mpzpool<span class="sym">.</span><span class="kwd">recycle</span><span class="sym">(</span>r<span class="sym">);</span>
        mpzpool<span class="sym">.</span><span class="kwd">recycle</span><span class="sym">(</span>t<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwb">T</span>ransformation <span class="kwd">next</span><span class="sym">()</span>
    <span class="sym">{</span>
        k<span class="sym">++;</span>
        q<span class="sym">.</span>si <span class="sym">=</span> k<span class="sym">;</span>
        r<span class="sym">.</span>si <span class="sym">=</span> <span class="num">4</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">2</span><span class="sym">;</span>
        s<span class="sym">.</span>si <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        t<span class="sym">.</span>si <span class="sym">=</span> <span class="num">2</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">return this</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">int</span> <span class="kwd">extract</span><span class="sym">(</span><span class="kwa">int</span> j<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">return</span> <span class="kwd">atoi</span><span class="sym">(((</span>q <span class="sym">*</span> j <span class="sym">+</span> r<span class="sym">) / (</span>s <span class="sym">*</span> j <span class="sym">+</span> t<span class="sym">)).</span>toString<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwb">T</span>ransformation <span class="kwd">qrst</span><span class="sym">(</span><span class="kwa">int</span> q_<span class="sym">,</span> <span class="kwa">int</span> r_<span class="sym">,</span> <span class="kwa">int</span> s_<span class="sym">,</span> <span class="kwa">int</span> t_<span class="sym">)</span>
    <span class="sym">{</span>
        q<span class="sym">.</span>si <span class="sym">=</span> q_<span class="sym">;</span>
        r<span class="sym">.</span>si <span class="sym">=</span> r_<span class="sym">;</span>
        s<span class="sym">.</span>si <span class="sym">=</span> s_<span class="sym">;</span>
        t<span class="sym">.</span>si <span class="sym">=</span> t_<span class="sym">;</span>
        k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="kwa">return this</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">T</span>ransformation <span class="kwd">compose</span><span class="sym">(</span><span class="kwb">T</span>ransformation a<span class="sym">)</span>
    <span class="sym">{</span>
        mpz tq <span class="sym">= (</span>q <span class="sym">*</span> a<span class="sym">.</span>q<span class="sym">).</span>save<span class="sym">;</span>
        mpz tr <span class="sym">= ((</span>q <span class="sym">*</span> a<span class="sym">.</span>r<span class="sym">) + (</span>r <span class="sym">*</span> a<span class="sym">.</span>t<span class="sym">)).</span>save<span class="sym">;</span>
        mpz ts <span class="sym">= ((</span>s <span class="sym">*</span> a<span class="sym">.</span>q<span class="sym">) + (</span>t <span class="sym">*</span> a<span class="sym">.</span>s<span class="sym">)).</span>save<span class="sym">;</span>
        mpz tt <span class="sym">= ((</span>s <span class="sym">*</span> a<span class="sym">.</span>r<span class="sym">) + (</span>t <span class="sym">*</span> a<span class="sym">.</span>t<span class="sym">)).</span>save<span class="sym">;</span>
        <span class="kwa">return new</span> <span class="kwb">T</span>ransformation<span class="sym">(</span>tq<span class="sym">,</span>tr<span class="sym">,</span>ts<span class="sym">,</span>tt<span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>
