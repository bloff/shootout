<span class="com">(* -*- mode: sml -*-
 * $Id: sieve-poly.code,v 1.5 2005-05-15 05:34:05 bfulgham Exp $
 * http://shootout.alioth.debian.org/
 *)</span>

<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt; {}
</span><span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct

structure</span> WA <span class="sym">=</span> Word8Array
<span class="kwa">val</span> flags  <span class="sym">=</span> WA.array <span class="sym">(</span><span class="num">8193</span><span class="sym">,</span> <span class="num">0w0</span><span class="sym">)

</span><span class="kwa">fun</span> init<span class="sym">() =</span> <span class="kwa">let
  fun</span> loop i <span class="sym">=
</span>    <span class="kwa">if</span> i <span class="sym">&lt;</span> <span class="num">8193</span> <span class="kwa">then</span> <span class="sym">(</span>WA.update<span class="sym">(</span>flags<span class="sym">,</span>i<span class="sym">,</span><span class="num">0w1</span><span class="sym">);</span>loop<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">))
</span>    <span class="kwa">else</span> <span class="sym">()
</span><span class="kwa">in</span> loop <span class="num">2
</span><span class="kwa">end

fun</span> do_elts<span class="sym">(</span>i<span class="sym">,</span>count<span class="sym">) =
</span>  <span class="kwa">if</span> i <span class="sym">&lt;</span> <span class="num">8193</span> <span class="kwa">then
    if</span> WA.sub<span class="sym">(</span>flags<span class="sym">,</span>i<span class="sym">) =</span> <span class="num">0w1</span> <span class="kwa">then let
      fun</span> loop k <span class="sym">=
</span>	<span class="kwa">if</span> k <span class="sym">&lt;</span> <span class="num">8193</span> <span class="kwa">then</span> <span class="sym">(</span>WA.update<span class="sym">(</span>flags<span class="sym">,</span>k<span class="sym">,</span><span class="num">0w0</span><span class="sym">);</span>loop<span class="sym">(</span>k<span class="sym">+</span>i<span class="sym">))
</span>	<span class="kwa">else</span> <span class="sym">()
</span>    <span class="kwa">in</span> loop <span class="sym">(</span>i <span class="sym">+</span> i<span class="sym">) ;</span> do_elts<span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span>count <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span>    <span class="kwa">end
    else</span> do_elts<span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> count<span class="sym">)
</span>  <span class="kwa">else</span> count

<span class="kwa">fun</span> repeat <span class="num">0</span> <span class="sym">= (</span>init <span class="sym">();</span> do_elts<span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="num">0</span><span class="sym">))
  |</span> repeat n <span class="sym">= (</span>init <span class="sym">();</span> do_elts<span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span>repeat<span class="sym">(</span>n<span class="num">-1</span><span class="sym">))

</span><span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">)
</span><span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0

</span><span class="kwa">fun</span> main<span class="sym">(</span>name<span class="sym">,</span> param_list<span class="sym">) =</span>  <span class="kwa">let
	val</span> arg <span class="sym">=</span> hd<span class="sym">(</span>param_list &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]);
</span>	<span class="kwa">val</span> num <span class="sym">=</span> atoi arg
	<span class="kwa">val</span> count <span class="sym">=</span> repeat num
    <span class="kwa">in</span>  printl <span class="sym">[</span><span class="str">&quot;Count: &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString count<span class="sym">];
</span>	PolyML.quit<span class="sym">()
</span>    <span class="kwa">end
end

val</span> _ <span class="sym">=</span> PolyML.print_depth <span class="num">0</span><span class="sym">;
</span><span class="kwa">val</span> _ <span class="sym">=</span> PolyML.error_depth <span class="num">0</span><span class="sym">;
</span><span class="kwa">val</span> _ <span class="sym">=</span> PolyML.onEntry<span class="sym">(</span><span class="kwa">fn</span><span class="sym">() =&gt;</span> Test.main<span class="sym">(</span><span class="str">&quot;sieve&quot;</span><span class="sym">,</span> CommandLine.arguments<span class="sym">()));
</span><span class="kwa">val</span> _ <span class="sym">=</span> PolyML.commit<span class="sym">();</span>
