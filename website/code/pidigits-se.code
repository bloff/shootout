<span class="slc">-- SPLITFILE=pi_digits.e</span>
<span class="kwa">class</span> PI_DIGITS
<span class="slc">--</span>
<span class="slc">-- Written by Cyril Adrian &lt;cyril.adrian&#64;laposte.net&gt;</span>
<span class="slc">--</span>

insert
	ARGUMENTS

<span class="kwa">create</span> <span class="sym">{</span>ANY<span class="sym">}</span>
	make

<span class="kwa">feature</span> <span class="sym">{}</span>
	step<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">10</span>

	make <span class="kwa">is</span>
		<span class="kwa">local</span>
			digits<span class="sym">:</span> PI_DIGIT_SPIGOT<span class="sym">;</span> n<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">INTEGER</span>
		<span class="kwa">do</span>
			<span class="kwa">if</span> argument_count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span>
				<span class="kwa">from</span>
					n <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
					<span class="kwa">create</span> digits.make
				until n <span class="sym">&lt;=</span> <span class="num">0</span> <span class="kwa">loop</span>
					<span class="kwa">if</span> n <span class="sym">&gt;=</span> step <span class="kwa">then</span>
						<span class="kwa">from</span> i <span class="sym">:=</span> <span class="num">0</span> until i <span class="sym">=</span> step <span class="kwa">loop</span>
							digits.next
							std_output.<span class="kwd">put_integer</span><span class="sym">(</span>digits.item<span class="sym">)</span>
							i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>
						<span class="kwa">end</span>
						j <span class="sym">:=</span> j <span class="sym">+</span> step
					<span class="kwa">else</span>
						<span class="kwa">from</span>
							<span class="kwa">from</span> i <span class="sym">:=</span> <span class="num">0</span> until i <span class="sym">=</span> n <span class="kwa">loop</span>
								digits.next
								std_output.<span class="kwd">put_integer</span><span class="sym">(</span>digits.item<span class="sym">)</span>
								i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>
							<span class="kwa">end</span>
						until i <span class="sym">=</span> step <span class="kwa">loop</span>
							std_output.<span class="kwd">put_character</span><span class="sym">(</span><span class="str">' '</span><span class="sym">)</span>
							i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>
						<span class="kwa">end</span>
						j <span class="sym">:=</span> j <span class="sym">+</span> n
					<span class="kwa">end</span>
					std_output.<span class="kwd">put_character</span><span class="sym">(</span><span class="str">'%T'</span><span class="sym">)</span>
					std_output.<span class="kwd">put_character</span><span class="sym">(</span><span class="str">':'</span><span class="sym">)</span>
					std_output.<span class="kwd">put_integer</span><span class="sym">(</span>j<span class="sym">)</span>
					std_output.put_new_line
					n <span class="sym">:=</span> n <span class="sym">-</span> step
				<span class="kwa">end</span>
			<span class="kwa">end</span>
		<span class="kwa">end</span>

<span class="kwa">end</span>
<span class="slc">-- SPLITFILE=pi_digit_spigot.e</span>
<span class="kwa">class</span> PI_DIGIT_SPIGOT
<span class="slc">--</span>
<span class="slc">-- Written by Cyril Adrian &lt;cyril.adrian&#64;laposte.net&gt;</span>
<span class="slc">--</span>

<span class="kwa">create</span> <span class="sym">{</span>PI_DIGITS<span class="sym">}</span>
	make

<span class="kwa">feature</span> <span class="sym">{</span>PI_DIGITS<span class="sym">}</span>
	next <span class="kwa">is</span>
		<span class="kwa">do</span>
			item <span class="sym">:=</span> digit
			<span class="kwa">if</span> <span class="kwd">is_safe</span><span class="sym">(</span>item<span class="sym">)</span> <span class="kwa">then</span>
				<span class="kwd">produce</span><span class="sym">(</span>item<span class="sym">)</span>
			<span class="kwa">else</span>
				consume
				next
			<span class="kwa">end</span>
		<span class="kwa">end</span>

	item<span class="sym">:</span> <span class="kwb">INTEGER</span>

<span class="kwa">feature</span> <span class="sym">{}</span>
	digit<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span>
		<span class="kwa">do</span>
			<span class="kwa">Result</span> <span class="sym">:=</span> z.<span class="kwd">extract</span><span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
		<span class="kwa">end</span>

	<span class="kwd">is_safe</span> <span class="sym">(</span>a_digit<span class="sym">:</span> <span class="kwa">like</span> digit<span class="sym">):</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is</span>
		<span class="kwa">do</span>
			<span class="kwa">Result</span> <span class="sym">:=</span> a_digit <span class="sym">=</span> z.<span class="kwd">extract</span><span class="sym">(</span><span class="num">4</span><span class="sym">)</span>
		<span class="kwa">end</span>

	<span class="kwd">produce</span> <span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
		<span class="kwa">do</span>
			inverse.<span class="kwd">qrst</span><span class="sym">(</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span> <span class="sym">*</span> i<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
			inverse.<span class="kwd">compose</span><span class="sym">(</span>z<span class="sym">)</span>
			z.<span class="kwd">copy</span><span class="sym">(</span>inverse<span class="sym">)</span>
		<span class="kwa">end</span>

	consume <span class="kwa">is</span>
		<span class="kwa">do</span>
			x.next
			z.<span class="kwd">compose</span><span class="sym">(</span>x<span class="sym">)</span>
		<span class="kwa">end</span>

<span class="kwa">feature</span> <span class="sym">{}</span>
	x<span class="sym">,</span> z<span class="sym">,</span> inverse<span class="sym">:</span> TRANSFORMATION

	make <span class="kwa">is</span>
		<span class="kwa">do</span>
			z.<span class="kwd">qrst</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
		<span class="kwa">end</span>

<span class="kwa">end</span>
<span class="slc">-- SPLITFILE=transformation.e</span>
<span class="kwa">expanded class</span> TRANSFORMATION
<span class="slc">--</span>
<span class="slc">-- Written by Cyril Adrian &lt;cyril.adrian&#64;laposte.net&gt;</span>
<span class="slc">-- and Frederic Merizen &lt;frederic.merizen&#64;loria.fr&gt;</span>
<span class="slc">--</span>

insert
	ANY
		<span class="kwa">redefine</span>
			default_create<span class="sym">,</span> copy<span class="sym">,</span> is_equal
		<span class="kwa">end</span>

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>
	<span class="kwd">copy</span> <span class="sym">(</span>other<span class="sym">:</span> <span class="kwa">like Current</span><span class="sym">)</span> <span class="kwa">is</span>
		<span class="kwa">do</span>
			q.<span class="kwd">copy</span><span class="sym">(</span>other.q<span class="sym">)</span>
			r.<span class="kwd">copy</span><span class="sym">(</span>other.r<span class="sym">)</span>
			s.<span class="kwd">copy</span><span class="sym">(</span>other.s<span class="sym">)</span>
			t.<span class="kwd">copy</span><span class="sym">(</span>other.t<span class="sym">)</span>
		<span class="kwa">end</span>

	<span class="kwd">is_equal</span> <span class="sym">(</span>other<span class="sym">:</span> <span class="kwa">like Current</span><span class="sym">):</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is</span>
		<span class="kwa">do</span>
			<span class="kwa">Result</span> <span class="sym">:=</span> q.<span class="kwd">is_equal</span><span class="sym">(</span>other.q<span class="sym">)</span> <span class="kwa">and then</span> r.<span class="kwd">is_equal</span><span class="sym">(</span>other.r<span class="sym">)</span> <span class="kwa">and then</span> s.<span class="kwd">is_equal</span><span class="sym">(</span>other.s<span class="sym">)</span> <span class="kwa">and then</span> t.<span class="kwd">is_equal</span><span class="sym">(</span>other.t<span class="sym">)</span>
		<span class="kwa">end</span>

<span class="kwa">feature</span> <span class="sym">{</span>TRANSFORMATION<span class="sym">}</span>
	q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">:</span> MUTABLE_BIG_INTEGER

<span class="kwa">feature</span> <span class="sym">{</span>PI_DIGIT_SPIGOT<span class="sym">}</span>
	<span class="kwd">qrst</span> <span class="sym">(</span>a_q<span class="sym">,</span> a_r<span class="sym">,</span> a_s<span class="sym">,</span> a_t<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
		<span class="kwa">do</span>
			q.<span class="kwd">from_integer</span><span class="sym">(</span>a_q<span class="sym">)</span>
			r.<span class="kwd">from_integer</span><span class="sym">(</span>a_r<span class="sym">)</span>
			s.<span class="kwd">from_integer</span><span class="sym">(</span>a_s<span class="sym">)</span>
			t.<span class="kwd">from_integer</span><span class="sym">(</span>a_t<span class="sym">)</span>
			k <span class="sym">:=</span> <span class="num">0</span>
		<span class="kwa">end</span>

	next <span class="kwa">is</span>
		<span class="kwa">do</span>
			k <span class="sym">:=</span> k <span class="sym">+</span> <span class="num">1</span>
			q.<span class="kwd">from_integer</span><span class="sym">(</span>k<span class="sym">)</span>
			r.<span class="kwd">from_integer</span><span class="sym">(</span><span class="num">4</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">2</span><span class="sym">)</span>
			s.<span class="kwd">from_integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
			t.<span class="kwd">from_integer</span><span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
		<span class="kwa">end</span>

	<span class="kwd">extract</span> <span class="sym">(</span>j<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">):</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span>
		<span class="kwa">do</span>
			tmp1.<span class="kwd">from_integer</span><span class="sym">(</span>j<span class="sym">)</span>

			<span class="slc">-- n = q*j+r</span>
			tmp2.<span class="kwd">copy</span><span class="sym">(</span>q<span class="sym">)</span>
			tmp2.<span class="kwd">multiply</span><span class="sym">(</span>tmp1<span class="sym">)</span>
			tmp2.<span class="kwd">add</span><span class="sym">(</span>r<span class="sym">)</span>

			<span class="slc">-- d = q*j+t</span>
			tmp3.<span class="kwd">copy</span><span class="sym">(</span>s<span class="sym">)</span>
			tmp3.<span class="kwd">multiply</span><span class="sym">(</span>tmp1<span class="sym">)</span>
			tmp3.<span class="kwd">add</span><span class="sym">(</span>t<span class="sym">)</span>

			<span class="slc">-- Result = n/d</span>
			tmp2.<span class="kwd">divide</span><span class="sym">(</span>tmp3<span class="sym">)</span>
			<span class="kwa">Result</span> <span class="sym">:=</span> tmp2.to_integer
		<span class="kwa">end</span>

	<span class="kwd">compose</span> <span class="sym">(</span>a<span class="sym">:</span> <span class="kwa">like Current</span><span class="sym">)</span> <span class="kwa">is</span>
		<span class="kwa">do</span>
			tmp1.<span class="kwd">copy</span><span class="sym">(</span>s<span class="sym">)</span>

			<span class="slc">-- ns = s*a.q + t*a.s</span>
			s.<span class="kwd">multiply</span><span class="sym">(</span>a.q<span class="sym">)</span>
			tmp2.<span class="kwd">copy</span><span class="sym">(</span>t<span class="sym">)</span>
			tmp2.<span class="kwd">multiply</span><span class="sym">(</span>a.s<span class="sym">)</span>
			s.<span class="kwd">add</span><span class="sym">(</span>tmp2<span class="sym">)</span>

			<span class="slc">-- nt = s*a.r + t*a.t</span>
			tmp1.<span class="kwd">multiply</span><span class="sym">(</span>a.r<span class="sym">)</span>
			t.<span class="kwd">multiply</span><span class="sym">(</span>a.t<span class="sym">)</span>
			t.<span class="kwd">add</span><span class="sym">(</span>tmp1<span class="sym">)</span>

			<span class="slc">-- nr = q*a.r + r*a.t</span>
			tmp1.<span class="kwd">copy</span><span class="sym">(</span>a.r<span class="sym">)</span>
			tmp1.<span class="kwd">multiply</span><span class="sym">(</span>q<span class="sym">)</span>
			r.<span class="kwd">multiply</span><span class="sym">(</span>a.t<span class="sym">)</span>
			r.<span class="kwd">add</span><span class="sym">(</span>tmp1<span class="sym">)</span>

			<span class="slc">-- nq = q*a.q</span>
			q.<span class="kwd">multiply</span><span class="sym">(</span>a.q<span class="sym">)</span>

			k <span class="sym">:=</span> <span class="num">0</span>
		<span class="kwa">end</span>

<span class="kwa">feature</span> <span class="sym">{}</span>
	k<span class="sym">:</span> <span class="kwb">INTEGER</span>

	tmp1<span class="sym">:</span> MUTABLE_BIG_INTEGER <span class="kwa">is</span>
		<span class="kwa">once</span>
			<span class="kwa">create Result</span>.<span class="kwd">from_integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
		<span class="kwa">end</span>

	tmp2<span class="sym">:</span> MUTABLE_BIG_INTEGER <span class="kwa">is</span>
		<span class="kwa">once</span>
			<span class="kwa">create Result</span>.<span class="kwd">from_integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
		<span class="kwa">end</span>

	tmp3<span class="sym">:</span> MUTABLE_BIG_INTEGER <span class="kwa">is</span>
		<span class="kwa">once</span>
			<span class="kwa">create Result</span>.<span class="kwd">from_integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
		<span class="kwa">end</span>

	default_create <span class="kwa">is</span>
		<span class="kwa">do</span>
			<span class="kwa">create</span> q.<span class="kwd">from_integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
			<span class="kwa">create</span> r.<span class="kwd">from_integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
			<span class="kwa">create</span> s.<span class="kwd">from_integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
			<span class="kwa">create</span> t.<span class="kwd">from_integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
		<span class="kwa">end</span>

<span class="kwa">end</span>
