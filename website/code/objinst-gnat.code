<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: objinst-gnat.code,v 1.2 2004-11-08 08:15:18 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://dada.perl.it/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- Ada 95 code by C.C.
</FONT></I>
<I><FONT COLOR="#B22222">-- Annotated Ada Reference Manual ISO/IEC 8652:1995: http://www.ada-auth.org/
</FONT></I>
<B><FONT COLOR="#A020F0">with</FONT></B> Ada.Command_Line, Ada.Characters.Handling, Text_IO, Ada.Tags;

<B><FONT COLOR="#A020F0">procedure</FONT></B> ObjInst <B><FONT COLOR="#A020F0">is</FONT></B>    <I><FONT COLOR="#B22222">--  3.451
</FONT></I>   <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Discriminant_Check);
   <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Access_Check);
   <B><FONT COLOR="#A020F0">package</FONT></B> CH <B><FONT COLOR="#A020F0">renames</FONT></B> Ada.Characters.Handling;
   <B><FONT COLOR="#A020F0">use</FONT></B> <B><FONT COLOR="#A020F0">type</FONT></B> Ada.Tags.Tag;

   <B><FONT COLOR="#A020F0">package</FONT></B> Toggles <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">type</FONT></B> A_Rec <B><FONT COLOR="#A020F0">is</FONT></B>
         <B><FONT COLOR="#A020F0">tagged</FONT></B> <B><FONT COLOR="#A020F0">record</FONT></B>                 <I><FONT COLOR="#B22222">--  'tagged' allows fields to be added
</FONT></I>            Value       : Boolean := True;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">record</FONT></B>;

      <B><FONT COLOR="#A020F0">type</FONT></B> B_Rec <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> A_Rec <B><FONT COLOR="#A020F0">with</FONT></B>
         <B><FONT COLOR="#A020F0">record</FONT></B>
            Flip_Period : Positive := 1;
            Count       : Natural := 0;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">record</FONT></B>;

      <B><FONT COLOR="#A020F0">type</FONT></B> A_Recs_Family_Ptr <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">access</FONT></B> <B><FONT COLOR="#A020F0">all</FONT></B> A_Rec'Class;

      <B><FONT COLOR="#A020F0">function</FONT></B> Activate (X : A_Recs_Family_Ptr) <B><FONT COLOR="#A020F0">return</FONT></B> A_Recs_Family_Ptr;
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Inline (Activate);
   <B><FONT COLOR="#A020F0">end</FONT></B> Toggles;

   <B><FONT COLOR="#A020F0">package</FONT></B> <B><FONT COLOR="#A020F0">body</FONT></B> Toggles <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">function</FONT></B> Activate (X : A_Recs_Family_Ptr) <B><FONT COLOR="#A020F0">return</FONT></B> A_Recs_Family_Ptr <B><FONT COLOR="#A020F0">is</FONT></B>
         <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Range_Check);
         <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Tag_Check);
      <B><FONT COLOR="#A020F0">begin</FONT></B>                   <I><FONT COLOR="#B22222">--  X is a ptr: no &quot;in out&quot; parms in a function
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> X.<B><FONT COLOR="#A020F0">all</FONT></B>'Tag = A_Rec'Tag <B><FONT COLOR="#A020F0">then</FONT></B>                         <I><FONT COLOR="#B22222">--  A_Rec case
</FONT></I>            X.<B><FONT COLOR="#A020F0">all</FONT></B>.Value := <B><FONT COLOR="#A020F0">not</FONT></B> X.<B><FONT COLOR="#A020F0">all</FONT></B>.Value;
         <B><FONT COLOR="#A020F0">else</FONT></B>
            <B><FONT COLOR="#A020F0">declare</FONT></B>                       <I><FONT COLOR="#B22222">--  Make visible the 2 B_Rec fields
</FONT></I>               <B><FONT COLOR="#A020F0">pragma</FONT></B> Suppress (Tag_Check);
               B        : B_Rec <B><FONT COLOR="#A020F0">renames</FONT></B> B_Rec (X.<B><FONT COLOR="#A020F0">all</FONT></B>);
            <B><FONT COLOR="#A020F0">begin</FONT></B>
               B.Count := B.Count + 1;
               <B><FONT COLOR="#A020F0">if</FONT></B> B.Count = B.Flip_Period <B><FONT COLOR="#A020F0">then</FONT></B>
                  B.Count := 0;
                  B.Value := <B><FONT COLOR="#A020F0">not</FONT></B> B.Value;
               <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
            <B><FONT COLOR="#A020F0">end</FONT></B>;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">return</FONT></B> X;
      <B><FONT COLOR="#A020F0">end</FONT></B> Activate;
   <B><FONT COLOR="#A020F0">end</FONT></B> Toggles;

   A        : <B><FONT COLOR="#A020F0">aliased</FONT></B> Toggles.A_Rec;      <I><FONT COLOR="#B22222">--  &quot;aliased&quot;, since X'Access is used
</FONT></I>   B        : <B><FONT COLOR="#A020F0">aliased</FONT></B> Toggles.B_Rec;      <I><FONT COLOR="#B22222">--  &quot;access all&quot; above for aliased
</FONT></I>   N        : Positive := 1;
   Res      : Boolean;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      N := Positive'Value (Ada.Command_Line.Argument (1));
   <B><FONT COLOR="#A020F0">exception</FONT></B>
      <B><FONT COLOR="#A020F0">when</FONT></B> Constraint_Error =&gt; <B><FONT COLOR="#A020F0">null</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B>;
   A := Toggles.A_Rec'(Value =&gt; True);
   <B><FONT COLOR="#A020F0">for</FONT></B> K <B><FONT COLOR="#A020F0">in</FONT></B> 1 .. 5 <B><FONT COLOR="#A020F0">loop</FONT></B>
      Res := Toggles.Activate (A'Access).Value;
      Text_IO.Put_Line (CH.To_Lower (Boolean'Image (Res)));
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   <B><FONT COLOR="#A020F0">for</FONT></B> Iter <B><FONT COLOR="#A020F0">in</FONT></B> 1 .. N <B><FONT COLOR="#A020F0">loop</FONT></B>
      A := Toggles.A_Rec'(Value =&gt; True);
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   Text_IO.New_Line;
   B := Toggles.B_Rec'(Value =&gt; True, Flip_Period =&gt; 3, Count =&gt; 0);
   <B><FONT COLOR="#A020F0">for</FONT></B> K <B><FONT COLOR="#A020F0">in</FONT></B> 1 .. 8 <B><FONT COLOR="#A020F0">loop</FONT></B>
      Res := Toggles.Activate (B'Access).Value;
      Text_IO.Put_Line (CH.To_Lower (Boolean'Image (Res)));
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   <B><FONT COLOR="#A020F0">for</FONT></B> Iter <B><FONT COLOR="#A020F0">in</FONT></B> 1 .. N <B><FONT COLOR="#A020F0">loop</FONT></B>
      B := Toggles.B_Rec'(Value =&gt; True, Flip_Period =&gt; 3, Count =&gt; 0);
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
<B><FONT COLOR="#A020F0">end</FONT></B> ObjInst;</pre></td></tr></table>
