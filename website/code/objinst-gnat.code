<span class="slc">-- $Id: objinst-gnat.code,v 1.6 2005-03-13 23:29:18 bfulgham Exp $
</span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="slc">-- Ada 95 code by C.C.
</span>
<span class="slc">-- Annotated Ada Reference Manual ISO/IEC 8652:1995: http://www.ada-auth.org/
</span>
<span class="kwa">with</span> Ada.Command_Line<span class="sym">,</span> Ada.Characters.Handling<span class="sym">,</span> Text_IO<span class="sym">,</span> Ada.Tags<span class="sym">;

</span><span class="kwa">procedure</span> ObjInst <span class="kwa">is</span>    <span class="slc">--  3.451
</span>   <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Discriminant_Check<span class="sym">);
</span>   <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Access_Check<span class="sym">);
</span>   <span class="kwa">package</span> CH <span class="kwa">renames</span> Ada.Characters.Handling<span class="sym">;
</span>   <span class="kwa">use type</span> Ada.Tags.Tag<span class="sym">;

</span>   <span class="kwa">package</span> Toggles <span class="kwa">is
      type</span> A_Rec <span class="kwa">is
         tagged record</span>                 <span class="slc">--  'tagged' allows fields to be added
</span>            Value       <span class="sym">:</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> True<span class="sym">;
</span>         <span class="kwa">end record</span><span class="sym">;

</span>      <span class="kwa">type</span> B_Rec <span class="kwa">is new</span> A_Rec <span class="kwa">with
         record
</span>            Flip_Period <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>            Count       <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">end record</span><span class="sym">;

</span>      <span class="kwa">type</span> A_Recs_Family_Ptr <span class="kwa">is access all</span> A_Rec<span class="sym">'</span>Class<span class="sym">;

</span>      <span class="kwa">function</span> Activate <span class="sym">(</span>X <span class="sym">:</span> A_Recs_Family_Ptr<span class="sym">)</span> <span class="kwa">return</span> A_Recs_Family_Ptr<span class="sym">;
</span>      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Activate<span class="sym">);
</span>   <span class="kwa">end</span> Toggles<span class="sym">;

</span>   <span class="kwa">package body</span> Toggles <span class="kwa">is
      function</span> Activate <span class="sym">(</span>X <span class="sym">:</span> A_Recs_Family_Ptr<span class="sym">)</span> <span class="kwa">return</span> A_Recs_Family_Ptr <span class="kwa">is
         pragma</span> Suppress <span class="sym">(</span>Range_Check<span class="sym">);
</span>         <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Tag_Check<span class="sym">);
</span>      <span class="kwa">begin</span>                   <span class="slc">--  X is a ptr: no &quot;in out&quot; parms in a function
</span>         <span class="kwa">if</span> X.<span class="kwa">all</span><span class="sym">'</span>Tag <span class="sym">=</span> A_Rec<span class="sym">'</span>Tag <span class="kwa">then</span>                         <span class="slc">--  A_Rec case
</span>            X.<span class="kwa">all</span>.Value <span class="sym">:=</span> <span class="kwa">not</span> X.<span class="kwa">all</span>.Value<span class="sym">;
</span>         <span class="kwa">else
            declare</span>                       <span class="slc">--  Make visible the 2 B_Rec fields
</span>               <span class="kwa">pragma</span> Suppress <span class="sym">(</span>Tag_Check<span class="sym">);
</span>               B        <span class="sym">:</span> B_Rec <span class="kwa">renames</span> B_Rec <span class="sym">(</span>X.<span class="kwa">all</span><span class="sym">);
</span>            <span class="kwa">begin
</span>               B.Count <span class="sym">:=</span> B.Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>               <span class="kwa">if</span> B.Count <span class="sym">=</span> B.Flip_Period <span class="kwa">then
</span>                  B.Count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>                  B.Value <span class="sym">:=</span> <span class="kwa">not</span> B.Value<span class="sym">;
</span>               <span class="kwa">end if</span><span class="sym">;
</span>            <span class="kwa">end</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">return</span> X<span class="sym">;
</span>      <span class="kwa">end</span> Activate<span class="sym">;
</span>   <span class="kwa">end</span> Toggles<span class="sym">;

</span>   A        <span class="sym">:</span> <span class="kwa">aliased</span> Toggles.A_Rec<span class="sym">;</span>      <span class="slc">--  &quot;aliased&quot;, since X'Access is used
</span>   B        <span class="sym">:</span> <span class="kwa">aliased</span> Toggles.B_Rec<span class="sym">;</span>      <span class="slc">--  &quot;access all&quot; above for aliased
</span>   N        <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>   Res      <span class="sym">:</span> <span class="kwb">Boolean</span><span class="sym">;
</span><span class="kwa">begin
   begin
</span>      N <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">exception
      when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span>   <span class="kwa">end</span><span class="sym">;
</span>   A <span class="sym">:=</span> Toggles.A_Rec<span class="sym">'(</span>Value <span class="sym">=&gt;</span> True<span class="sym">);
</span>   <span class="kwa">for</span> K <span class="kwa">in</span> <span class="num">1</span> .. <span class="num">5</span> <span class="kwa">loop
</span>      Res <span class="sym">:=</span> Toggles.Activate <span class="sym">(</span>A<span class="sym">'</span><span class="kwa">Access</span><span class="sym">)</span>.Value<span class="sym">;
</span>      Text_IO.Put_Line <span class="sym">(</span>CH.To_Lower <span class="sym">(</span><span class="kwb">Boolean</span><span class="sym">'</span>Image <span class="sym">(</span>Res<span class="sym">)));
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop
</span>      A <span class="sym">:=</span> Toggles.A_Rec<span class="sym">'(</span>Value <span class="sym">=&gt;</span> True<span class="sym">);
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   Text_IO.New_Line<span class="sym">;
</span>   B <span class="sym">:=</span> Toggles.B_Rec<span class="sym">'(</span>Value <span class="sym">=&gt;</span> True<span class="sym">,</span> Flip_Period <span class="sym">=&gt;</span> <span class="num">3</span><span class="sym">,</span> Count <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>   <span class="kwa">for</span> K <span class="kwa">in</span> <span class="num">1</span> .. <span class="num">8</span> <span class="kwa">loop
</span>      Res <span class="sym">:=</span> Toggles.Activate <span class="sym">(</span>B<span class="sym">'</span><span class="kwa">Access</span><span class="sym">)</span>.Value<span class="sym">;
</span>      Text_IO.Put_Line <span class="sym">(</span>CH.To_Lower <span class="sym">(</span><span class="kwb">Boolean</span><span class="sym">'</span>Image <span class="sym">(</span>Res<span class="sym">)));
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop
</span>      B <span class="sym">:=</span> Toggles.B_Rec<span class="sym">'(</span>Value <span class="sym">=&gt;</span> True<span class="sym">,</span> Flip_Period <span class="sym">=&gt;</span> <span class="num">3</span><span class="sym">,</span> Count <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="kwa">end</span> ObjInst<span class="sym">;</span>
