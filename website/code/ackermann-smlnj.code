<span class="com">(* ackermann.sml
 *
 *   Testing recursive calls using the Ackermann function.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume&#64;tti-c.org)
 *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
    open</span> FormatComb
    <span class="kwa">val</span> fmt <span class="sym">=</span> format <span class="sym">(</span>text <span class="str">&quot;Ack(3,&quot;</span> <span class="kwa">o</span> <span class="kwb">int</span> <span class="kwa">o</span> text <span class="str">&quot;): &quot;</span> <span class="kwa">o</span> <span class="kwb">int</span> <span class="kwa">o</span> nl<span class="sym">)

</span>    <span class="kwa">fun</span> ack <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">) =</span> n <span class="sym">+</span> <span class="num">1
</span>      <span class="sym">|</span> ack <span class="sym">(</span>m<span class="sym">,</span> <span class="num">0</span><span class="sym">) =</span> ack <span class="sym">(</span>m <span class="num">- 1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)
      |</span> ack <span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">) =</span> ack <span class="sym">(</span>m <span class="num">- 1</span><span class="sym">,</span> ack <span class="sym">(</span>m<span class="sym">,</span> n <span class="num">- 1</span><span class="sym">))

</span>    <span class="kwa">fun</span> main' n <span class="sym">= (</span>print <span class="sym">(</span>fmt n <span class="sym">(</span>ack <span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">)));</span> OS.Process.success<span class="sym">)
</span>    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1
</span>      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))
</span><span class="kwa">end</span>
