<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local function</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">)</span>
  <span class="kwa">local</span> p<span class="sym">,</span> q<span class="sym">,</span> s<span class="sym">,</span> odd<span class="sym">,</span> check<span class="sym">,</span> maxflips <span class="sym">= {}, {}, {},</span> <span class="kwa">true</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span>
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n <span class="kwa">do</span> p<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span> s<span class="sym">[</span>i<span class="sym">] =</span> i <span class="kwa">end</span>
  <span class="kwa">repeat</span>
    <span class="slc">-- Print max. 30 permutations.</span>
    <span class="kwa">if</span> check <span class="sym">&lt;</span> <span class="num">30</span> <span class="kwa">then</span>
      <span class="kwa">if not</span> p<span class="sym">[</span>n<span class="sym">]</span> <span class="kwa">then return</span> maxflips <span class="kwa">end</span>	<span class="slc">-- Catch n = 0, 1, 2.</span>
      <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n <span class="kwa">do</span> io<span class="sym">.</span><span class="kwb">write</span><span class="sym">(</span>p<span class="sym">[</span>i<span class="sym">])</span> <span class="kwa">end</span><span class="sym">;</span> io<span class="sym">.</span><span class="kwb">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
      check <span class="sym">=</span> check <span class="sym">+</span> <span class="num">1</span>
    <span class="kwa">end</span>
    <span class="slc">-- Copy and flip.</span>
    <span class="kwa">local</span> q1 <span class="sym">=</span> p<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>				<span class="slc">-- Cache 1st element.</span>
    <span class="kwa">if</span> p<span class="sym">[</span>n<span class="sym">]</span> ~<span class="sym">=</span> n <span class="kwa">and</span> q1 ~<span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span>		<span class="slc">-- Avoid useless work.</span>
      <span class="kwa">for</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">,</span>n <span class="kwa">do</span> q<span class="sym">[</span>i<span class="sym">] =</span> p<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">end</span>		<span class="slc">-- Work on a copy.</span>
      <span class="kwa">for</span> flips<span class="sym">=</span><span class="num">1</span><span class="sym">,</span><span class="num">1000000</span> <span class="kwa">do</span>			<span class="slc">-- Flip ...</span>
	<span class="kwa">local</span> j <span class="sym">=</span> q1 <span class="sym">-</span> <span class="num">1</span>
	<span class="kwa">for</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">,</span>q1<span class="sym">/</span><span class="num">2</span> <span class="kwa">do</span> q<span class="sym">[</span>i<span class="sym">],</span> q<span class="sym">[</span>j<span class="sym">] =</span> q<span class="sym">[</span>j<span class="sym">],</span> q<span class="sym">[</span>i<span class="sym">];</span> j <span class="sym">=</span> j <span class="sym">-</span> <span class="num">1</span> <span class="kwa">end</span>
	<span class="kwa">local</span> qq <span class="sym">=</span> q<span class="sym">[</span>q1<span class="sym">]</span>
	<span class="kwa">if</span> qq <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span>				<span class="slc">-- ... until 1st element is 1.</span>
	  <span class="kwa">if</span> flips <span class="sym">&gt;</span> maxflips <span class="kwa">then</span> maxflips <span class="sym">=</span> flips <span class="kwa">end</span> <span class="slc">-- New maximum?</span>
	  <span class="kwa">break</span>
	<span class="kwa">end</span>
	q<span class="sym">[</span>q1<span class="sym">] =</span> q1
	q1 <span class="sym">=</span> qq
      <span class="kwa">end</span>
    <span class="kwa">end</span>
    <span class="slc">-- Permute.</span>
    <span class="kwa">if</span> odd <span class="kwa">then</span>
      p<span class="sym">[</span><span class="num">2</span><span class="sym">],</span> p<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> p<span class="sym">[</span><span class="num">1</span><span class="sym">],</span> p<span class="sym">[</span><span class="num">2</span><span class="sym">];</span> odd <span class="sym">=</span> <span class="kwa">false</span>	<span class="slc">-- Rotate 1&lt;-2.</span>
    <span class="kwa">else</span>
      p<span class="sym">[</span><span class="num">2</span><span class="sym">],</span> p<span class="sym">[</span><span class="num">3</span><span class="sym">] =</span> p<span class="sym">[</span><span class="num">3</span><span class="sym">],</span> p<span class="sym">[</span><span class="num">2</span><span class="sym">];</span> odd <span class="sym">=</span> <span class="kwa">true</span>	<span class="slc">-- Rotate 1&lt;-2 and 1&lt;-2&lt;-3.</span>
      <span class="kwa">for</span> i<span class="sym">=</span><span class="num">3</span><span class="sym">,</span>n <span class="kwa">do</span>
	<span class="kwa">local</span> sx <span class="sym">=</span> s<span class="sym">[</span>i<span class="sym">]</span>
	<span class="kwa">if</span> sx ~<span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span> sx <span class="sym">=</span> sx <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span> s<span class="sym">[</span>i<span class="sym">] =</span> sx<span class="sym">;</span> <span class="kwa">break end</span>
	<span class="kwa">if</span> i <span class="sym">==</span> n <span class="kwa">then return</span> maxflips <span class="kwa">end</span>	<span class="slc">-- Out of permutations.</span>
	s<span class="sym">[</span>i<span class="sym">] =</span> i
	<span class="slc">-- Rotate 1&lt;-...&lt;-i+1.</span>
	<span class="kwa">local</span> t <span class="sym">=</span> p<span class="sym">[</span><span class="num">1</span><span class="sym">];</span> <span class="kwa">for</span> j<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>i <span class="kwa">do</span> p<span class="sym">[</span>j<span class="sym">] =</span> p<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]</span> <span class="kwa">end</span><span class="sym">;</span> p<span class="sym">[</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">] =</span> t
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">until false</span>
<span class="kwa">end</span>

<span class="kwa">local</span> n <span class="sym">=</span> <span class="kwb">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1</span>
io<span class="sym">.</span><span class="kwb">write</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="str">&quot;) = &quot;</span><span class="sym">,</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
