<span class="slc">% The Computer Language Benchmarks Game</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Fredrik Svahn</span>

<span class="sym">-</span><span class="kwa">module</span><span class="sym">(</span>fasta<span class="sym">).</span>
<span class="sym">-</span><span class="kwa">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">]).</span>

<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>LINELEN<span class="sym">,</span> <span class="num">60</span><span class="sym">).</span>
<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>PREC<span class="sym">,</span><span class="num">10000000</span><span class="sym">).</span>

<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>IM<span class="sym">,</span> <span class="num">139968</span><span class="sym">).</span>
<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>IC<span class="sym">,</span> <span class="num">29573</span><span class="sym">).</span>
<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>IA<span class="sym">,</span> <span class="num">3877</span><span class="sym">).</span>

<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>ALU<span class="sym">,&lt;&lt;</span><span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">&gt;&gt;).</span>

<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>IUB<span class="sym">, [{</span>$a<span class="sym">,</span> <span class="num">0.27</span><span class="sym">}, {</span>$c<span class="sym">,</span> <span class="num">0.12</span><span class="sym">}, {</span>$g<span class="sym">,</span> <span class="num">0.12</span><span class="sym">}, {</span>$t<span class="sym">,</span> <span class="num">0.27</span><span class="sym">}, {</span>$B<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}, {</span>$D<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}, {</span>$H<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}, {</span>$K<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}, {</span>$M<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}, {</span>$N<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}, {</span>$R<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}, {</span>$S<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}, {</span>$V<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}, {</span>$W<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}, {</span>$Y<span class="sym">,</span> <span class="num">0.02</span><span class="sym">}]).</span>

<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>HS<span class="sym">, [{</span>$a<span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">}, {</span>$c<span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">}, {</span>$g<span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">}, {</span>$t<span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">}]).</span>

<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
    <span class="kwb">put</span><span class="sym">(</span>port<span class="sym">,</span> <span class="kwb">open_port</span><span class="sym">({</span>fd<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">}, [</span>out<span class="sym">,</span> <span class="kwb">binary</span><span class="sym">])),</span>

    Seed <span class="sym">=</span> <span class="num">42</span><span class="sym">,</span>
    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>

    <span class="kwd">print</span><span class="sym">(&lt;&lt;</span><span class="str">&quot;&gt;ONE Homo sapiens alu</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">&gt;&gt;),</span>
    <span class="kwd">cycle</span><span class="sym">(?</span>ALU<span class="sym">,</span> N<span class="sym">*</span><span class="num">2</span><span class="sym">, [],</span> <span class="num">0</span><span class="sym">),</span>

    <span class="kwd">print</span><span class="sym">(&lt;&lt;</span><span class="str">&quot;&gt;TWO IUB ambiguity codes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">&gt;&gt;),</span>
    NewSeed <span class="sym">=</span> <span class="kwd">rand</span><span class="sym">(</span><span class="kwd">mk_list</span><span class="sym">(?</span>IUB<span class="sym">), ?</span>LINELEN<span class="sym">,</span> N<span class="sym">*</span><span class="num">3</span><span class="sym">, [],</span> Seed<span class="sym">, [],</span> <span class="num">0</span><span class="sym">),</span>

    <span class="kwd">print</span><span class="sym">(&lt;&lt;</span><span class="str">&quot;&gt;THREE Homo sapiens frequency</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">&gt;&gt;),</span>
    <span class="kwd">rand</span><span class="sym">(</span><span class="kwd">mk_list</span><span class="sym">(?</span>HS<span class="sym">), ?</span>LINELEN<span class="sym">,</span> N<span class="sym">*</span><span class="num">5</span><span class="sym">, [],</span> NewSeed<span class="sym">, [],</span><span class="num">0</span><span class="sym">),</span>
    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">).</span>

<span class="slc">%Newline every LINELEN char, however io is expensive so we want to buffer</span>
<span class="slc">%up a few lines before printing. 16 lines in buffer seem to be fastest.</span>
<span class="kwd">cycle</span><span class="sym">(</span>Seq<span class="sym">,</span> Total<span class="sym">,</span> RowBuf<span class="sym">,</span> _<span class="sym">)</span> <span class="kwa">when</span> Total <span class="sym">&lt; ?</span>LINELEN <span class="sym">-&gt;</span>
    <span class="sym">&lt;&lt;</span>Seq1<span class="sym">:</span>Total<span class="sym">/</span><span class="kwb">binary</span><span class="sym">,</span> _<span class="sym">/</span><span class="kwb">binary</span><span class="sym">&gt;&gt; = &lt;&lt;</span>Seq<span class="sym">/</span><span class="kwb">binary</span><span class="sym">, ?</span>ALU<span class="sym">/</span><span class="kwb">binary</span><span class="sym">&gt;&gt;,</span>
    <span class="kwd">reverse_print</span><span class="sym">(</span>RowBuf<span class="sym">),</span>
    <span class="kwd">print</span><span class="sym">(&lt;&lt;</span>Seq1<span class="sym">/</span><span class="kwb">binary</span><span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">&gt;&gt;);</span>

<span class="kwd">cycle</span><span class="sym">(</span>Seq<span class="sym">,</span> Total<span class="sym">,</span> RowBuf<span class="sym">,</span> RowBufSize<span class="sym">)</span> <span class="kwa">when</span> RowBufSize <span class="sym">==</span> <span class="num">16</span> <span class="sym">-&gt;</span>
    <span class="kwd">reverse_print</span><span class="sym">(</span>RowBuf<span class="sym">),</span>
    <span class="kwd">cycle</span><span class="sym">(</span>Seq<span class="sym">,</span> Total<span class="sym">, [],</span> <span class="num">0</span><span class="sym">);</span>

<span class="kwd">cycle</span><span class="sym">(</span>Seq<span class="sym">,</span> Total<span class="sym">,</span> RowBuf<span class="sym">,</span> RowBufSize <span class="sym">)</span> <span class="kwa">when</span> <span class="kwb">size</span><span class="sym">(</span>Seq<span class="sym">) &lt; ?</span>LINELEN <span class="sym">-&gt;</span>
    <span class="sym">&lt;&lt;</span>Seq1<span class="sym">:?</span>LINELEN<span class="sym">/</span><span class="kwb">binary</span><span class="sym">,</span> Seq2<span class="sym">/</span><span class="kwb">binary</span><span class="sym">&gt;&gt; = &lt;&lt;</span>Seq<span class="sym">/</span><span class="kwb">binary</span><span class="sym">, ?</span>ALU<span class="sym">/</span><span class="kwb">binary</span><span class="sym">&gt;&gt;,</span>
    <span class="kwd">cycle</span><span class="sym">(</span>Seq2<span class="sym">,</span> Total<span class="sym">-?</span>LINELEN<span class="sym">, [&lt;&lt;</span>Seq1<span class="sym">/</span><span class="kwb">binary</span><span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">&gt;&gt;|</span> RowBuf<span class="sym">],</span> RowBufSize<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>

<span class="kwd">cycle</span><span class="sym">(</span>Seq<span class="sym">,</span> Total<span class="sym">,</span> RowBuf<span class="sym">,</span> RowBufSize<span class="sym">) -&gt;</span>
    <span class="sym">&lt;&lt;</span>Seq1<span class="sym">:?</span>LINELEN<span class="sym">/</span><span class="kwb">binary</span><span class="sym">,</span> Seq2<span class="sym">/</span><span class="kwb">binary</span><span class="sym">&gt;&gt; =</span> Seq<span class="sym">,</span>
    <span class="kwd">cycle</span><span class="sym">(</span>Seq2<span class="sym">,</span> Total<span class="sym">-?</span>LINELEN<span class="sym">, [&lt;&lt;</span>Seq1<span class="sym">/</span><span class="kwb">binary</span><span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">&gt;&gt;|</span> RowBuf<span class="sym">],</span> RowBufSize<span class="sym">+</span><span class="num">1</span><span class="sym">).</span>

<span class="kwd">rand</span><span class="sym">(</span>_<span class="sym">,</span> _<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> List<span class="sym">,</span> Seed<span class="sym">,</span> RowBuf<span class="sym">,</span> _<span class="sym">) -&gt;</span>
    LastLine <span class="sym">=</span> lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">([</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> List<span class="sym">]),</span>
    <span class="kwd">reverse_print</span><span class="sym">([</span>LastLine <span class="sym">|</span> RowBuf<span class="sym">]),</span>
    Seed<span class="sym">;</span>

<span class="kwd">rand</span><span class="sym">(</span>Freq<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> Total<span class="sym">,</span> List<span class="sym">,</span> Seed<span class="sym">,</span> RowBuf<span class="sym">,</span> RowBufSize<span class="sym">)</span> <span class="kwa">when</span> RowBufSize <span class="sym">==</span> <span class="num">16</span> <span class="sym">-&gt;</span>
    Line <span class="sym">=</span> lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">([</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> List<span class="sym">]),</span>
    <span class="kwd">reverse_print</span><span class="sym">([</span>Line <span class="sym">|</span> RowBuf<span class="sym">]),</span>
    <span class="kwd">rand</span><span class="sym">(</span>Freq<span class="sym">, ?</span>LINELEN<span class="sym">,</span> Total<span class="sym">, [],</span> Seed<span class="sym">, [],</span> <span class="num">0</span><span class="sym">);</span>

<span class="kwd">rand</span><span class="sym">(</span>Freq<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> Total<span class="sym">,</span> List<span class="sym">,</span> Seed<span class="sym">,</span> RowBuf<span class="sym">,</span> RowBufSize<span class="sym">) -&gt;</span>
    Line <span class="sym">=</span> lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">([</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> List<span class="sym">]),</span>
    <span class="kwd">rand</span><span class="sym">(</span>Freq<span class="sym">, ?</span>LINELEN<span class="sym">,</span> Total<span class="sym">, [],</span> Seed<span class="sym">, [</span> Line <span class="sym">|</span> RowBuf<span class="sym">],</span> RowBufSize <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>

<span class="kwd">rand</span><span class="sym">(</span>Freq<span class="sym">,</span> LineLen<span class="sym">,</span> Total<span class="sym">,</span> List<span class="sym">,</span> Seed<span class="sym">,</span> RowBuf<span class="sym">,</span> RowBufSize<span class="sym">) -&gt;</span>
    <span class="sym">{</span>Rand<span class="sym">,</span> NewSeed<span class="sym">} =</span> <span class="kwd">random</span><span class="sym">(</span>Seed<span class="sym">),</span>
    Base <span class="sym">=</span> <span class="kwd">get_base</span><span class="sym">(</span>Freq<span class="sym">,</span> Rand<span class="sym">),</span>
    <span class="kwd">rand</span><span class="sym">(</span>Freq<span class="sym">,</span> LineLen<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> Total<span class="sym">-</span><span class="num">1</span><span class="sym">, [</span>Base <span class="sym">|</span> List<span class="sym">],</span> NewSeed<span class="sym">,</span> RowBuf<span class="sym">,</span> RowBufSize<span class="sym">).</span>

<span class="kwd">random</span><span class="sym">(</span>Seed<span class="sym">) -&gt;</span>
    NewSeed <span class="sym">= (</span>Seed <span class="sym">* ?</span>IA <span class="sym">+ ?</span>IC<span class="sym">)</span> <span class="kwa">rem</span> <span class="sym">?</span>IM<span class="sym">,</span>
    <span class="sym">{</span><span class="kwb">trunc</span><span class="sym">(</span>NewSeed <span class="sym">/ ?</span>IM <span class="sym">* ?</span>PREC<span class="sym">),</span> NewSeed<span class="sym">}.</span>

<span class="kwd">get_base</span><span class="sym">([{</span>Base<span class="sym">,</span> _<span class="sym">}],</span> _P<span class="sym">) -&gt;</span> Base<span class="sym">;</span>
<span class="kwd">get_base</span><span class="sym">([{</span>Base<span class="sym">,</span> Freq<span class="sym">}|</span>_<span class="sym">],</span> P<span class="sym">)</span> <span class="kwa">when</span> P <span class="sym">&lt;</span> Freq <span class="sym">-&gt;</span> Base<span class="sym">;</span>
<span class="kwd">get_base</span><span class="sym">([{</span>_<span class="sym">,</span> _<span class="sym">} |</span> Rest<span class="sym">],</span> P<span class="sym">) -&gt;</span> <span class="kwd">get_base</span><span class="sym">(</span>Rest<span class="sym">,</span> P<span class="sym">).</span>

<span class="slc">%Floats are expensive and we want to avoid dealing with floats in get_base/1.</span>
<span class="slc">%Precalculate list of accumulated integers</span>
<span class="kwd">mk_list</span><span class="sym">(</span>Probs<span class="sym">)-&gt;</span> lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span><span class="kwd">mk_list</span><span class="sym">(</span>Probs<span class="sym">,</span> <span class="num">0</span><span class="sym">, [])).</span>
<span class="kwd">mk_list</span><span class="sym">([{</span>B<span class="sym">,</span> P<span class="sym">}],</span> AccP<span class="sym">,</span> AccL<span class="sym">)-&gt; [{</span>B<span class="sym">,</span> AccP <span class="sym">+</span> <span class="kwb">trunc</span><span class="sym">(</span>P<span class="sym">*?</span>PREC<span class="sym">)}|</span> AccL<span class="sym">];</span>
<span class="kwd">mk_list</span><span class="sym">([{</span>B<span class="sym">,</span> P<span class="sym">}|</span>T<span class="sym">],</span> AccP<span class="sym">,</span> AccL<span class="sym">)-&gt;</span>
    <span class="kwd">mk_list</span><span class="sym">(</span>T<span class="sym">,</span> AccP <span class="sym">+</span> <span class="kwb">trunc</span><span class="sym">(</span>P<span class="sym">*?</span>PREC<span class="sym">), [{</span>B<span class="sym">,</span> AccP <span class="sym">+</span> <span class="kwb">trunc</span><span class="sym">(</span>P<span class="sym">*?</span>PREC<span class="sym">)}|</span> AccL<span class="sym">]).</span>

<span class="kwd">print</span><span class="sym">(</span>List<span class="sym">) -&gt;</span> <span class="kwd">port_command</span><span class="sym">(</span><span class="kwb">get</span><span class="sym">(</span>port<span class="sym">),</span> List<span class="sym">).</span>
<span class="kwd">reverse_print</span><span class="sym">(</span>List<span class="sym">) -&gt;</span> <span class="kwd">port_command</span><span class="sym">(</span><span class="kwb">get</span><span class="sym">(</span>port<span class="sym">),</span> lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>List<span class="sym">)).</span>
