<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
*/</span>


<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   <span class="kwc">HashMap</span><span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">,</span><span class="kwb">int</span><span class="sym">&gt;</span> dictionary <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();

</span>   <span class="kwa">try</span> <span class="sym">{
</span>      <span class="kwa">let</span> f <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">FileReader</span><span class="sym">(</span><span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">));
</span>      f<span class="sym">.</span>foreach<span class="sym">(</span><span class="kwc">String</span> word <span class="sym">=&gt; {</span> dictionary<span class="sym">.</span>put<span class="sym">(</span>word<span class="sym">,</span> <span class="num">1</span><span class="sym">); });
</span>      f<span class="sym">.</span>close<span class="sym">;
   }
</span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span>      <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
</span>      <span class="kwa">return</span><span class="sym">;
   }

</span>   <span class="kwa">try</span> <span class="sym">{
</span>      <span class="kwa">let</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span>      r<span class="sym">.</span>foreach<span class="sym">(</span><span class="kwc">String</span> word <span class="sym">=&gt; {
</span>         <span class="kwa">if</span> <span class="sym">(!</span>dictionary<span class="sym">.</span>containsKey<span class="sym">(</span>word<span class="sym">))</span> println<span class="sym">(</span>word<span class="sym">); });
   }
</span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span>      <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
   }
}


</span><span class="kwb">void</span> foreach<span class="sym">(</span><span class="kwc">BufferedReader</span> r<span class="sym">,</span> <span class="kwc">String</span> <span class="sym">-&gt;</span> <span class="kwb">void</span> expr<span class="sym">) {
</span>   var ?<span class="kwc">String</span> s<span class="sym">;
</span>   <span class="kwa">while</span> <span class="sym">((</span>s <span class="sym">=</span> r<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">)</span> expr<span class="sym">(</span>s<span class="sym">);
}</span>
