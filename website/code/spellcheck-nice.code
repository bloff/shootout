<span class="line">    1 </span><span class="com">/* The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="com">     http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="com">    contributed by Isaac Gouy
</span><span class="line">    4 </span><span class="com"> 
</span><span class="line">    5 </span><span class="com"> To compile:
</span><span class="line">    6 </span><span class="com">            nicec --sourcepath=.. -d=. -a spellcheck.jar spellcheck
</span><span class="line">    7 </span><span class="com"> 
</span><span class="line">    8 </span><span class="com"> To run:
</span><span class="line">    9 </span><span class="com">    java -jar spellcheck.jar &lt; input.txt &gt; out.txt
</span><span class="line">   10 </span><span class="com"> */</span>
<span class="line">   11 </span>
<span class="line">   12 </span>
<span class="line">   13 </span>   <span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="line">   14 </span><span class="sym"> 
</span><span class="line">   15 </span><span class="sym"> </span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span><span class="line">   16 </span><span class="sym"> </span>   <span class="kwa">let</span> dictionary <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();
</span><span class="line">   17 </span><span class="sym"> 
</span><span class="line">   18 </span><span class="sym"> </span>   <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   19 </span><span class="sym"> </span>      <span class="kwa">let</span> f <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">FileReader</span><span class="sym">(</span><span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">));
</span><span class="line">   20 </span><span class="sym"> </span>      f<span class="sym">.</span>foreach<span class="sym">(</span><span class="kwc">String</span> word <span class="sym">=&gt; {</span> dictionary<span class="sym">.</span>put<span class="sym">(</span>word<span class="sym">,</span> <span class="num">1</span><span class="sym">); });
</span><span class="line">   21 </span><span class="sym"> </span>      f<span class="sym">.</span>close<span class="sym">;
</span><span class="line">   22 </span><span class="sym">    }
</span><span class="line">   23 </span><span class="sym">  </span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span><span class="line">   24 </span><span class="sym">  </span>      <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
</span><span class="line">   25 </span><span class="sym">  </span>      <span class="kwa">return</span><span class="sym">;
</span><span class="line">   26 </span><span class="sym">     }
</span><span class="line">   27 </span><span class="sym"> 
</span><span class="line">   28 </span><span class="sym"> </span>   <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   29 </span><span class="sym"> </span>      <span class="kwa">let</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span><span class="line">   30 </span><span class="sym"> </span>      r<span class="sym">.</span>foreach<span class="sym">(</span><span class="kwc">String</span> word <span class="sym">=&gt; {
</span><span class="line">   31 </span><span class="sym">  </span>         <span class="kwa">if</span> <span class="sym">(!</span>dictionary<span class="sym">.</span>containsKey<span class="sym">(</span>word<span class="sym">))</span> println<span class="sym">(</span>word<span class="sym">); });
</span><span class="line">   32 </span><span class="sym">    }
</span><span class="line">   33 </span><span class="sym">  </span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span><span class="line">   34 </span><span class="sym">  </span>      <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
</span><span class="line">   35 </span><span class="sym">     }
</span><span class="line">   36 </span><span class="sym"> }
</span><span class="line">   37 </span><span class="sym"> 
</span><span class="line">   38 </span><span class="sym"> 
</span><span class="line">   39 </span><span class="sym"> </span><span class="kwb">void</span> foreach<span class="sym">(</span><span class="kwc">BufferedReader</span> r<span class="sym">,</span> <span class="kwc">String</span> <span class="sym">-&gt;</span> <span class="kwb">void</span> expr<span class="sym">) {
</span><span class="line">   40 </span><span class="sym">  </span>   var ?<span class="kwc">String</span> s<span class="sym">;
</span><span class="line">   41 </span><span class="sym"> </span>   <span class="kwa">while</span> <span class="sym">((</span>s <span class="sym">=</span> r<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">)</span> expr<span class="sym">(</span>s<span class="sym">);
</span><span class="line">   42 </span><span class="sym"> }</span> 
