<span class="com">/* -*- mode: c -*-
 * $Id: strcat-tcc.code,v 1.2 2005-09-21 04:54:32 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span>
<span class="dir">#define STUFF</span> <span class="dstr">&quot;hello</span><span class="esc">\n</span><span class="dstr">&quot;</span><span class="dir">
</span>
<span class="kwb">int
</span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwb">int</span> i<span class="sym">,</span> buflen <span class="sym">=</span> <span class="num">32</span><span class="sym">;
</span>    <span class="kwb">char</span> <span class="sym">*</span>strbuf <span class="sym">=</span> calloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">),</span> buflen<span class="sym">);
</span>    <span class="kwb">char</span> <span class="sym">*</span>strend <span class="sym">=</span> strbuf<span class="sym">;
</span>    <span class="kwb">int</span> stufflen <span class="sym">=</span> strlen<span class="sym">(</span>STUFF<span class="sym">);

</span>    <span class="kwa">if</span> <span class="sym">(!</span>strbuf<span class="sym">) {</span> perror<span class="sym">(</span><span class="str">&quot;calloc strbuf&quot;</span><span class="sym">);</span> exit<span class="sym">(</span><span class="num">1</span><span class="sym">); }
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	<span class="kwa">if</span> <span class="sym">(((</span>strbuf<span class="sym">+</span>buflen<span class="sym">)-</span>strend<span class="sym">) &lt; (</span>stufflen<span class="sym">+</span><span class="num">1</span><span class="sym">)) {
</span>	    buflen <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>buflen<span class="sym">;
</span>	    strbuf <span class="sym">=</span> realloc<span class="sym">(</span>strbuf<span class="sym">,</span> buflen<span class="sym">);
</span>	    <span class="kwa">if</span> <span class="sym">(!</span>strbuf<span class="sym">) {</span> perror<span class="sym">(</span><span class="str">&quot;realloc strbuf&quot;</span><span class="sym">);</span> exit<span class="sym">(</span><span class="num">1</span><span class="sym">); }
</span>	    strend <span class="sym">=</span> strbuf <span class="sym">+</span> strlen<span class="sym">(</span>strbuf<span class="sym">);
	}
</span>	<span class="com">/* much faster to strcat to strend than to strbuf */</span>
	strcat<span class="sym">(</span>strend<span class="sym">,</span> STUFF<span class="sym">);
</span>	strend <span class="sym">+=</span> stufflen<span class="sym">;
    }
</span>    fprintf<span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> strlen<span class="sym">(</span>strbuf<span class="sym">));
</span>    free<span class="sym">(</span>strbuf<span class="sym">);

</span>    sleep<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}</span>
