<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: fasta-groovy.code,v 1.1 2005-09-21 05:17:34 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
	modified by

    Each program should

        * encode the expected cumulative probabilities for 2 alphabets
        * generate DNA sequences, by weighted random selection from the alphabets (using the pseudo-random number generator from the random benchmark)
        * generate DNA sequences, by copying from a given sequence
        * write 3 sequences line-by-line in FASTA format

    Correct output N = 1000 is in this 10KB output file.

    We'll use the generated FASTA file as input for other benchmarks (reverse-complement, k-nucleotide).

    Random DNA sequences can be based on a variety of Random Models (554KB pdf). You can use Markov chains or independently distributed nucleotides to generate random DNA sequences online.
*/</span>

<span class="kwc">public class</span> frequency <span class="sym">{
</span>    &#64;Property String s
    &#64;Property c<span class="sym">,</span> p

	<span class="slc">// Store string representation as Byte
</span>	<span class="kwc">public</span> <span class="kwb">void</span> setS<span class="sym">(</span>String rep<span class="sym">) {
</span>		s <span class="sym">=</span> rep
		<span class="slc">// Cannot call def method from here, aborts without warning/ error
</span>		c <span class="sym">=</span> rep<span class="sym">.</span>getBytes<span class="sym">()[</span><span class="num">0</span><span class="sym">]
	}

}

</span>def NEWLINE <span class="sym">=</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">.</span>getBytes<span class="sym">()[</span><span class="num">0</span><span class="sym">]

</span>def LINE_LENGTH <span class="sym">=</span> <span class="num">60

</span><span class="slc">// Weighted selection from alphabet
</span>def ALU <span class="sym">=</span> <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="sym">+
</span><span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="sym">+
</span><span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="sym">+
</span><span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="sym">+
</span><span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="sym">+
</span><span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="sym">+
</span><span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>
def ALUB <span class="sym">=</span> ALU<span class="sym">.</span>getBytes<span class="sym">()

</span>def IUB <span class="sym">= [
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'a'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.27d</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'c'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.12d</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'g'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.12d</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'t'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.27d</span><span class="sym">),

</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'B'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'D'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'H'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'K'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'M'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'N'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'R'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'S'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'V'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'W'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'Y'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.02</span><span class="sym">)
]

</span>def HomoSapiens <span class="sym">= [
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'a'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.3029549426680d</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'c'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.1979883004921d</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'g'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.1975473066391d</span><span class="sym">),
</span>        <span class="kwa">new</span> frequency<span class="sym">(</span>s<span class="sym">:</span><span class="str">'t'</span><span class="sym">,</span> p<span class="sym">:</span><span class="num">0.3015094502008d</span><span class="sym">)
]

</span>def BUFFER_SIZE <span class="sym">=</span> <span class="num">8192
</span>def index <span class="sym">=</span> <span class="num">0
</span>def bbuffer <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>BUFFER_SIZE<span class="sym">]

</span><span class="slc">// pseudo-random number generator
</span>def IM <span class="sym">=</span> <span class="num">139968
</span>def IA <span class="sym">=</span> <span class="num">3877
</span>def IC <span class="sym">=</span> <span class="num">29573
</span>def last <span class="sym">=</span> <span class="num">42

</span>def random<span class="sym">(</span>def max<span class="sym">) {
</span>    last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM
    max <span class="sym">*</span> last <span class="sym">/</span> IM
<span class="sym">}


</span>def makeCumulative<span class="sym">(</span>a<span class="sym">) {
</span>        def cp <span class="sym">=</span> <span class="num">0.0d
</span>        <span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>a<span class="sym">.</span>size<span class="sym">()) {
</span>            cp <span class="sym">+=</span> a<span class="sym">[</span>i<span class="sym">].</span>p
            a<span class="sym">[</span>i<span class="sym">].</span>p <span class="sym">=</span> cp
        <span class="sym">}
}

</span><span class="slc">// select a random frequency.c
</span>def selectRandom<span class="sym">(</span>a<span class="sym">) {
</span>    def len <span class="sym">=</span> a<span class="sym">.</span>size<span class="sym">()
</span>    def r <span class="sym">=</span> random<span class="sym">(</span><span class="num">1.0d</span><span class="sym">)
</span>    <span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>len<span class="sym">)
</span>        <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&lt;</span> a<span class="sym">[</span>i<span class="sym">].</span>p<span class="sym">)
</span>            <span class="kwa">return</span> a<span class="sym">[</span>i<span class="sym">].</span>c
    <span class="kwa">return</span> a<span class="sym">[</span>len <span class="num">- 1</span><span class="sym">].</span>c
<span class="sym">}

</span>def makeRepeatFasta<span class="sym">(</span>id<span class="sym">,</span> desc<span class="sym">,</span> alu<span class="sym">,</span> n<span class="sym">,</span> writer<span class="sym">) {
</span>	index <span class="sym">=</span> <span class="num">0
</span>	<span class="kwb">int</span> m <span class="sym">=</span> <span class="num">0
</span>	<span class="kwb">int</span> k <span class="sym">=</span> <span class="num">0
</span>	<span class="kwb">int</span> kn <span class="sym">=</span> ALUB<span class="sym">.</span>length
	writer <span class="sym">&lt;&lt;</span> <span class="str">&quot;&gt;&quot;</span> <span class="sym">+</span> id <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> desc <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
	<span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>			m <span class="sym">= (</span>n <span class="sym">&lt;</span> LINE_LENGTH<span class="sym">)</span> ? n <span class="sym">:</span> LINE_LENGTH
			<span class="kwa">if</span> <span class="sym">(</span>BUFFER_SIZE <span class="sym">-</span> index <span class="sym">&lt;</span> m<span class="sym">){
</span>					writer<span class="sym">.</span>write<span class="sym">(</span>bbuffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> index<span class="sym">)
</span>					index <span class="sym">=</span> <span class="num">0
</span>			<span class="sym">}
</span>			<span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>m<span class="sym">) {
</span>					<span class="kwa">if</span> <span class="sym">(</span>k <span class="sym">==</span> kn<span class="sym">)</span> k <span class="sym">=</span> <span class="num">0
</span>					bbuffer<span class="sym">[</span>index<span class="sym">++] =</span> ALUB<span class="sym">[</span>k<span class="sym">]
</span>					k<span class="sym">++
			}
</span>			bbuffer<span class="sym">[</span>index<span class="sym">++] =</span> NEWLINE
			n <span class="sym">-=</span> LINE_LENGTH
	<span class="sym">}
</span>	<span class="kwa">if</span><span class="sym">(</span>index <span class="sym">!=</span> <span class="num">0</span><span class="sym">)</span> writer<span class="sym">.</span>write<span class="sym">(</span>bbuffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> index<span class="sym">)
}

</span>def makeRandomFasta<span class="sym">(</span>id<span class="sym">,</span> desc<span class="sym">,</span> a<span class="sym">,</span> n<span class="sym">,</span> writer<span class="sym">) {
</span>	index <span class="sym">=</span> <span class="num">0
</span>	<span class="kwb">int</span> m <span class="sym">=</span> <span class="num">0
</span>	writer <span class="sym">&lt;&lt;</span> <span class="str">&quot;&gt;&quot;</span> <span class="sym">+</span> id <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> desc <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
	<span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>			m <span class="sym">= (</span>n <span class="sym">&lt;</span> LINE_LENGTH<span class="sym">)</span> ? n <span class="sym">:</span> LINE_LENGTH
			<span class="kwa">if</span> <span class="sym">(</span>BUFFER_SIZE <span class="sym">-</span> index <span class="sym">&lt;</span> m<span class="sym">){
</span>					writer<span class="sym">.</span>write<span class="sym">(</span>bbuffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> index<span class="sym">)
</span>					index <span class="sym">=</span> <span class="num">0
</span>			<span class="sym">}
</span>			<span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>m<span class="sym">) {
</span>					bbuffer<span class="sym">[</span>index<span class="sym">++] =</span> selectRandom<span class="sym">(</span>a<span class="sym">)
			}
</span>			bbuffer<span class="sym">[</span>index<span class="sym">++] =</span> NEWLINE
			n <span class="sym">-=</span> LINE_LENGTH
	<span class="sym">}
</span>	<span class="kwa">if</span><span class="sym">(</span>index <span class="sym">!=</span> <span class="num">0</span><span class="sym">)</span> writer<span class="sym">.</span>write<span class="sym">(</span>bbuffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> index<span class="sym">)
}


</span>makeCumulative<span class="sym">(</span>HomoSapiens<span class="sym">)
</span>makeCumulative<span class="sym">(</span>IUB<span class="sym">)

</span>def n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span> ? <span class="num">2500000</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>toInteger<span class="sym">()
</span>def out <span class="sym">=</span> <span class="kwa">new</span> BufferedOutputStream<span class="sym">(</span>System<span class="sym">.</span>out<span class="sym">)

</span>makeRepeatFasta<span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> ALU<span class="sym">,</span> n <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> out<span class="sym">)
</span>makeRandomFasta<span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> IUB<span class="sym">,</span> n <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> out<span class="sym">)
</span>makeRandomFasta<span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> HomoSapiens<span class="sym">,</span> n <span class="sym">*</span> <span class="num">5</span><span class="sym">,</span> out<span class="sym">)
</span>out<span class="sym">.</span>flush<span class="sym">()

</span><span class="slc">// EOF
</span>
