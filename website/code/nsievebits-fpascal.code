<span class="com">{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Joost van der Sluis
}</span>

<span class="kwa">program</span> nsieveBits<span class="sym">;

</span><span class="com">{$mode objfpc}</span>

<span class="kwa">const</span> bpc <span class="sym">=</span> SizeOf<span class="sym">(</span><span class="kwb">cardinal</span><span class="sym">) *</span> <span class="num">8</span><span class="sym">;

</span><span class="kwa">procedure</span> primes<span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">);
</span><span class="kwa">var</span> size<span class="sym">,</span>count<span class="sym">,</span>prime<span class="sym">,</span>i <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>    flags <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">cardinal</span><span class="sym">;

</span>  <span class="kwa">function</span> IsSet<span class="sym">(</span>i <span class="sym">:</span> longword<span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;
</span>  <span class="kwa">var</span> offset <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span> mask <span class="sym">:</span> <span class="kwb">cardinal</span><span class="sym">;
</span>  <span class="kwa">begin
</span>    offset <span class="sym">:=</span> i <span class="kwa">div</span> bpc<span class="sym">;
</span>    mask   <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">shl</span> <span class="sym">(</span>i <span class="kwa">mod</span> bpc<span class="sym">);
</span>    IsSet <span class="sym">:= (</span>flags<span class="sym">[</span>offset<span class="sym">]</span> <span class="kwa">and</span> mask<span class="sym">) &lt;&gt;</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">end</span><span class="sym">;

</span>  <span class="kwa">procedure</span> Clear<span class="sym">(</span>i <span class="sym">:</span> longword<span class="sym">);</span> <span class="kwa">inline</span><span class="sym">;
</span>  <span class="kwa">var</span> offset <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span> mask <span class="sym">:</span> <span class="kwb">cardinal</span><span class="sym">;
</span>  <span class="kwa">begin
</span>    offset <span class="sym">:=</span> i <span class="kwa">div</span> bpc<span class="sym">;
</span>    mask   <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">shl</span> <span class="sym">(</span>i <span class="kwa">mod</span> bpc<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">((</span>flags<span class="sym">[</span>offset<span class="sym">]</span> <span class="kwa">and</span> mask<span class="sym">) &lt;&gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">then</span> flags<span class="sym">[</span>offset<span class="sym">] :=</span> flags<span class="sym">[</span>offset<span class="sym">]</span> <span class="kwa">and not</span> mask<span class="sym">;
</span>  <span class="kwa">end</span><span class="sym">;

</span><span class="kwa">begin
</span>  size <span class="sym">:=</span> <span class="num">10000</span> <span class="kwa">shl</span> n<span class="sym">;
</span>  SetLength<span class="sym">(</span>flags<span class="sym">,</span> size <span class="kwa">div</span> bpc <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span>  filldword<span class="sym">(</span>flags<span class="sym">[</span><span class="num">0</span><span class="sym">],</span>length<span class="sym">(</span>flags<span class="sym">),</span>high<span class="sym">(</span><span class="kwb">cardinal</span><span class="sym">));

</span>  count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">for</span> prime <span class="sym">:=</span> <span class="num">2</span> <span class="kwa">to</span> size <span class="kwa">do
    if</span> IsSet<span class="sym">(</span>prime<span class="sym">)</span> <span class="kwa">then
    begin
</span>      count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>      i <span class="sym">:=</span> prime <span class="sym">+</span> prime<span class="sym">;
</span>      <span class="kwa">while</span> i <span class="sym">&lt;=</span> size <span class="kwa">do
      begin
</span>        Clear<span class="sym">(</span>i<span class="sym">);
</span>        i <span class="sym">:=</span> i <span class="sym">+</span> prime<span class="sym">;
</span>      <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;
</span>  writeln<span class="sym">(</span><span class="str">'Primes up to'</span><span class="sym">,</span> size<span class="sym">:</span><span class="num">9</span><span class="sym">,</span> count<span class="sym">:</span><span class="num">9</span><span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">var</span> n<span class="sym">,</span> z <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">begin
</span>  Val<span class="sym">(</span>ParamStr<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> n<span class="sym">,</span> z<span class="sym">);
</span>  primes<span class="sym">(</span>n<span class="sym">);
</span>  primes<span class="sym">(</span>n<span class="num">-1</span><span class="sym">);
</span>  primes<span class="sym">(</span>n<span class="num">-2</span><span class="sym">);
</span><span class="kwa">end</span>.
