<span class="slc">% ---------------------------------------------------------------------------- %
</span><span class="slc">% sieve.m
</span><span class="slc">% Ralph Becket &lt;rbeck&#64;microsoft.com&gt;
</span><span class="slc">% Mon Jan  8 14:23:22 GMT 2001
</span><span class="slc">% vim: ts=4 sw=4 et tw=0 wm=0 ff=unix
</span><span class="slc">%
</span><span class="slc">% Eratosthenes' Sieve - counts the number of primes in 2..8192
</span><span class="slc">%
</span><span class="slc">% ---------------------------------------------------------------------------- %
</span>
<span class="sym">:-</span> module mytest.

<span class="sym">:-</span> interface.

<span class="sym">:-</span> import_module io.



<span class="sym">:-</span> pred main<span class="sym">(</span>io__state<span class="sym">,</span> io__state<span class="sym">)</span>.
<span class="sym">:-</span> mode main<span class="sym">(</span>di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> cc_multi.



<span class="sym">:-</span> implementation.

<span class="sym">:-</span> import_module int<span class="sym">,</span> bool<span class="sym">,</span> array<span class="sym">,</span> string<span class="sym">,</span> list<span class="sym">,</span> require<span class="sym">,</span> benchmarking.



main <span class="sym">--&gt;
</span>    io__command_line_arguments<span class="sym">(</span>ArgV<span class="sym">),
    (   {</span> ArgV <span class="sym">= [],</span>        Repeats <span class="sym">=</span> <span class="num">1</span> <span class="sym">}
    ;   {</span> ArgV <span class="sym">= [</span>Arg<span class="sym">],</span>     Repeats <span class="sym">=</span> string__det_to_int<span class="sym">(</span>Arg<span class="sym">) }
    ;   {</span> ArgV <span class="sym">= [</span>_<span class="sym">,</span>_<span class="sym">|</span>_<span class="sym">],</span>   error<span class="sym">(</span><span class="str">&quot;usage: sieve [NumIterations]&quot;</span><span class="sym">) }
    ),
    {</span> P <span class="sym">= (</span> pred<span class="sym">(</span>Sz<span class="sym">::</span>in<span class="sym">,</span> N<span class="sym">::</span>out<span class="sym">)</span> <span class="kwa">is</span> det <span class="sym">:-</span> N <span class="sym">=</span> count_primes<span class="sym">(</span>Sz<span class="sym">) ) },
    {</span> benchmarking__benchmark_det<span class="sym">(</span>P<span class="sym">,</span> <span class="num">8192</span><span class="sym">,</span> Count<span class="sym">,</span> Repeats<span class="sym">,</span> Time<span class="sym">) },
</span>    io__format<span class="sym">(</span><span class="str">&quot;Count: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>i<span class="sym">(</span>Count<span class="sym">)])</span>.



<span class="sym">:-</span> func count_primes<span class="sym">(</span>int<span class="sym">) =</span> int.

count_primes<span class="sym">(</span>Size<span class="sym">) =</span> sieve_and_count<span class="sym">(</span><span class="num">2</span><span class="sym">,</span> array__init<span class="sym">(</span>Size<span class="sym">,</span> yes<span class="sym">),</span> <span class="num">0</span><span class="sym">)</span>.



<span class="sym">:-</span> func sieve_and_count<span class="sym">(</span>int<span class="sym">,</span> array<span class="sym">(</span>bool<span class="sym">),</span> int<span class="sym">) =</span> int.
<span class="sym">:-</span> mode sieve_and_count<span class="sym">(</span>in<span class="sym">,</span> array_di<span class="sym">,</span> in<span class="sym">) =</span> out <span class="kwa">is</span> det.

sieve_and_count<span class="sym">(</span>I<span class="sym">,</span> A<span class="sym">,</span> N<span class="sym">) =
    (</span>      if I <span class="sym">&gt;</span> array__max<span class="sym">(</span>A<span class="sym">)</span>         then N
      else if array__lookup<span class="sym">(</span>A<span class="sym">,</span> I<span class="sym">) =</span> no  then sieve_and_count<span class="sym">(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> A<span class="sym">,</span> N<span class="sym">)
</span>      else    sieve_and_count<span class="sym">(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> filter_multiples<span class="sym">(</span>I <span class="sym">+</span> I<span class="sym">,</span> I<span class="sym">,</span> A<span class="sym">),</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">)
    )</span>.



<span class="sym">:-</span> func filter_multiples<span class="sym">(</span>int<span class="sym">,</span> int<span class="sym">,</span> array<span class="sym">(</span>bool<span class="sym">)) =</span> array<span class="sym">(</span>bool<span class="sym">)</span>.
<span class="sym">:-</span> mode filter_multiples<span class="sym">(</span>in<span class="sym">,</span> in<span class="sym">,</span> array_di<span class="sym">) =</span> array_uo <span class="kwa">is</span> det.

filter_multiples<span class="sym">(</span>I<span class="sym">,</span> P<span class="sym">,</span> A<span class="sym">) =
    (</span> if I <span class="sym">&gt;</span> array__max<span class="sym">(</span>A<span class="sym">)
</span>      then A
      else filter_multiples<span class="sym">(</span>I <span class="sym">+</span> P<span class="sym">,</span> P<span class="sym">,</span> array__set<span class="sym">(</span>A<span class="sym">,</span> I<span class="sym">,</span> no<span class="sym">))
    )</span>.
