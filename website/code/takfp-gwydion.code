<span class="kwb">module</span><span class="sym">:</span> takfp
<span class="kwa">use</span><span class="sym">-</span>libraries<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> io
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> format<span class="sym">-</span>out

<span class="kwa">define function</span> <span class="kwd">takn</span> <span class="sym">(</span>n <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;single-float&gt;</span><span class="sym">;</span>
  <span class="kwa">local method</span> <span class="kwd">tak</span><span class="sym">(</span>X <span class="sym">::</span> <span class="kwa">&lt;single-float&gt;</span><span class="sym">,</span> Y <span class="sym">::</span> <span class="kwa">&lt;single-float&gt;</span><span class="sym">,</span> Z <span class="sym">::</span> <span class="kwa">&lt;single-float&gt;</span><span class="sym">)</span>
         <span class="sym">=</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;single-float&gt;</span><span class="sym">;</span>
          <span class="kwa">if</span> <span class="sym">(</span>y &gt;<span class="sym">=</span> x<span class="sym">)</span>
            z<span class="sym">;</span>
          <span class="kwa">else</span>
            <span class="kwd">tak</span> <span class="sym">(</span><span class="kwd">tak</span><span class="sym">((</span>x <span class="sym">-</span> <span class="num">1.0</span>s0<span class="sym">),</span> y<span class="sym">,</span> z<span class="sym">),</span>
                 <span class="kwd">tak</span><span class="sym">((</span>y <span class="sym">-</span> <span class="num">1.0</span>s0<span class="sym">),</span> z<span class="sym">,</span> x<span class="sym">),</span>
                 <span class="kwd">tak</span><span class="sym">((</span>z <span class="sym">-</span> <span class="num">1.0</span>s0<span class="sym">),</span> x<span class="sym">,</span> y<span class="sym">));</span>
          <span class="kwa">end if</span><span class="sym">;</span>
        <span class="kwa">end method</span> tak<span class="sym">;</span>

  <span class="kwd">tak</span><span class="sym">(</span><span class="num">3.0</span>s0 <span class="sym">*</span> n<span class="sym">,</span> <span class="num">2.0</span>s0 <span class="sym">*</span> n<span class="sym">,</span> <span class="num">1.0</span>s0 <span class="sym">*</span> n<span class="sym">);</span>
<span class="kwa">end function</span> takn<span class="sym">;</span>

<span class="kwa">begin</span>
  <span class="kwa">let</span> n <span class="sym">=</span> application<span class="sym">-</span><span class="kwd">arguments</span><span class="sym">()[</span><span class="num">0</span><span class="sym">]</span>.string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">;</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;%.1f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">takn</span><span class="sym">(</span>n<span class="sym">));</span>
<span class="kwa">end</span><span class="sym">;</span>

