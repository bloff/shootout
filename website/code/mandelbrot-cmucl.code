<span class="slc">;;; The Great Computer Language Shootout
</span><span class="slc">;;;   http://shootout.alioth.debian.org/
</span>
<span class="slc">;;;   contributed by Yannick Gingras &lt;ygingras&#64;ygingras.net&gt;
</span>
<span class="slc">;;;   for a colorful web zoomer for the Mandelbrot Set by the same
</span><span class="slc">;;;   author see http://fract.ygingras.net/
</span>

<span class="sym">(</span>declaim <span class="sym">(</span>optimize speed <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))

(</span><span class="kwa">defun</span> render <span class="sym">(</span>size <span class="sym">&amp;</span>optional <span class="sym">(</span>stream <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">*))
  (</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum size<span class="sym">)
           (</span><span class="kwa">type</span> stream stream<span class="sym">))
  (</span>let<span class="sym">* ((</span>inc <span class="sym">(/</span> <span class="num">2.0</span> size<span class="sym">))
         (</span>code <span class="num">0</span><span class="sym">)
         (</span>mask <span class="num">128</span><span class="sym">))
    (</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">8</span><span class="sym">)</span> code<span class="sym">)
             (</span><span class="kwa">type</span> <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">8</span><span class="sym">)</span> mask<span class="sym">))
    (</span>format stream <span class="str">&quot;P4~%~d ~d~%&quot;</span> size size<span class="sym">)
    (</span>dotimes <span class="sym">(</span>y size<span class="sym">)
      (</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum y<span class="sym">))
      (</span>let <span class="sym">((</span>base<span class="sym">-</span>imag <span class="sym">(+ (*</span> inc y<span class="sym">) -</span><span class="num">1.0</span><span class="sym">)))
        (</span>declare <span class="sym">(</span><span class="kwa">type</span> single<span class="sym">-</span><span class="kwa">float</span> base<span class="sym">-</span>imag<span class="sym">))
        (</span>dotimes <span class="sym">(</span>x size<span class="sym">)
          (</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum x<span class="sym">))
          (</span>let<span class="sym">* ((</span>z #c<span class="sym">(</span><span class="num">0.0 0.0</span><span class="sym">))
                 (</span>c <span class="sym">(</span>complex <span class="sym">(+ (*</span> inc x<span class="sym">) -</span><span class="num">1.5</span><span class="sym">)</span> base<span class="sym">-</span>imag<span class="sym">))
                 (</span>imag <span class="num">0.0</span><span class="sym">)
                 (</span>real <span class="num">0.0</span><span class="sym">))
            (</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>complex single<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span> z<span class="sym">)
                     (</span><span class="kwa">type</span> <span class="sym">(</span>complex single<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span> c<span class="sym">))
            (</span>when <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>dotimes <span class="sym">(</span>n <span class="num">50</span><span class="sym">)
                         (</span>when <span class="sym">(&lt;</span> <span class="num">4.0</span> <span class="sym">(+ (*</span> imag imag<span class="sym">) (*</span> real real<span class="sym">)))
                           (</span>return t<span class="sym">))
                         (</span>setf z <span class="sym">(+ (*</span> z z<span class="sym">)</span> c<span class="sym">))
                         (</span>setf imag <span class="sym">(</span>imagpart z<span class="sym">))
                         (</span>setf real <span class="sym">(</span>realpart z<span class="sym">))))
              (</span>setf code <span class="sym">(</span><span class="kwa">logior</span> mask code<span class="sym">)))
            (</span>setf mask <span class="sym">(</span>ash mask <span class="num">-1</span><span class="sym">))
            (</span>when <span class="sym">(</span><span class="kwa">zerop</span> mask<span class="sym">)
              (</span>setf mask <span class="num">128</span><span class="sym">)
              (</span>write<span class="sym">-</span>char <span class="sym">(</span>code<span class="sym">-</span>char code<span class="sym">)</span> stream<span class="sym">)
              (</span>setf code <span class="num">0</span><span class="sym">))))))))

(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let<span class="sym">* ((</span>args #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span>               #<span class="sym">+</span>cmu extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*
</span>               #<span class="sym">+</span>gcl si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*)
         (</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> args<span class="sym">)))))
    (</span>render n<span class="sym">)))


</span>
