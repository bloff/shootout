<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Written by Dima Dorfman, 2004

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release nsievebits.d
*/</span>

import std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)
{
</span>    bit<span class="sym">[]</span> flags<span class="sym">;
</span>    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;

</span>    <span class="kwb">void</span> run_test<span class="sym">(</span><span class="kwb">int</span> m<span class="sym">)
    {
</span>        flags<span class="sym">.</span>length <span class="sym">=</span> <span class="num">10000</span> <span class="sym">* (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> m<span class="sym">);
</span>        writefln<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d&quot;</span><span class="sym">,</span> flags<span class="sym">.</span>length<span class="sym">,</span> NSieve<span class="sym">(</span>flags<span class="sym">));
    }

</span>    run_test<span class="sym">(</span>n<span class="sym">);
</span>    <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">)
    {
</span>        <span class="kwb">int</span> m <span class="sym">=</span> n <span class="num">- 1</span><span class="sym">;
</span>        run_test<span class="sym">(</span>m<span class="sym">);
    }
</span>    <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">)
    {
</span>        <span class="kwb">int</span> m <span class="sym">=</span> n <span class="num">- 2</span><span class="sym">;
</span>        run_test<span class="sym">(</span>m<span class="sym">);
    }

</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}

</span><span class="kwb">int</span> NSieve<span class="sym">(</span>bit<span class="sym">[]</span> isPrime<span class="sym">)
{
</span>    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>    isPrime<span class="sym">[] =</span> <span class="kwa">true</span><span class="sym">;
</span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> isPrime<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)
    {
</span>        <span class="kwa">if</span><span class="sym">(</span>isPrime<span class="sym">[</span>i<span class="sym">])
        {
</span>            <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> k <span class="sym">=</span> i <span class="sym">+</span> i<span class="sym">;</span> k <span class="sym">&lt;</span> isPrime<span class="sym">.</span>length<span class="sym">;</span> k <span class="sym">+=</span> i<span class="sym">)</span> isPrime<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">false</span><span class="sym">;
</span>            count<span class="sym">++;
        }
    }

</span>    <span class="kwa">return</span><span class="sym">(</span>count<span class="sym">);
}</span>
