<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp
<span class="line">    2 </span>
<span class="line">    3 </span>  # heapsort <span class="sym">-</span> benchmark
<span class="line">    4 </span> #
<span class="line">    5 </span> # note<span class="sym">,</span> that newLISP has fast built<span class="sym">-</span>in sort <span class="kwa">and</span> random algorithms
<span class="line">    6 </span> # <span class="kwa">not</span> used in this <span class="sym">-</span> same way <span class="sym">-</span> benchmark
<span class="line">    7 </span> #
<span class="line">    8 </span>
<span class="line">    9 </span>  <span class="sym">(</span><span class="kwa">set</span> <span class="str">'IM 139968)
</span><span class="line">   10 </span><span class="str"> (set '</span>IA <span class="num">3877</span><span class="sym">)
</span><span class="line">   11 </span><span class="sym"> (</span><span class="kwa">set</span> <span class="str">'IC 29573)
</span><span class="line">   12 </span><span class="str"> 
</span><span class="line">   13 </span><span class="str"> (set '</span>LAST <span class="num">42</span><span class="sym">)
</span><span class="line">   14 </span><span class="sym"> 
</span><span class="line">   15 </span><span class="sym"> (</span>define <span class="sym">(</span>gen_random maximum<span class="sym">)
</span><span class="line">   16 </span><span class="sym">         (</span><span class="kwa">set</span> <span class="str">'LAST (mod (add (mul LAST IA) IC) IM))
</span><span class="line">   17 </span><span class="str">         (div (mul maximum LAST) IM))
</span><span class="line">   18 </span><span class="str"> 
</span><span class="line">   19 </span><span class="str"> (define (heapsort n ra)
</span><span class="line">   20 </span><span class="str">         (set '</span>rra <span class="num">0</span> <span class="str">'i 0 '</span>j <span class="num">0</span><span class="sym">)
</span><span class="line">   21 </span><span class="sym">         (</span><span class="kwa">set</span> <span class="str">'l (+ (&gt;&gt; n 1) 1))
</span><span class="line">   22 </span><span class="str">         (set '</span>ir n<span class="sym">)
</span><span class="line">   23 </span><span class="sym"> 
</span><span class="line">   24 </span><span class="sym">         (</span><span class="kwa">while</span> <span class="sym">(</span><span class="kwa">not</span> done<span class="sym">)
</span><span class="line">   25 </span><span class="sym">                 (</span><span class="kwa">if</span> <span class="sym">(&gt;</span> l <span class="num">1</span><span class="sym">)
</span><span class="line">   26 </span><span class="sym">                          (</span>begin
<span class="line">   27 </span>                                 <span class="sym">(</span>dec <span class="str">'l)
</span><span class="line">   28 </span><span class="str">                                 (set '</span>rra <span class="sym">(</span><span class="kwa">nth</span> l ra<span class="sym">)))
</span><span class="line">   29 </span><span class="sym">                         (</span>begin
<span class="line">   30 </span>                                 <span class="sym">(</span><span class="kwa">set</span> <span class="str">'rra (nth ir ra))
</span><span class="line">   31 </span><span class="str">                                 (nth-set ir ra (nth 1 ra))
</span><span class="line">   32 </span><span class="str">                                 (dec '</span>ir<span class="sym">)
</span><span class="line">   33 </span><span class="sym">                                 (</span><span class="kwa">if</span> <span class="sym">(=</span> ir <span class="num">1</span><span class="sym">)
</span><span class="line">   34 </span><span class="sym">                                         (</span>begin
<span class="line">   35 </span>                                                 <span class="sym">(</span><span class="kwa">nth</span><span class="sym">-</span><span class="kwa">set</span> <span class="num">1</span> ra rra<span class="sym">)
</span><span class="line">   36 </span><span class="sym">                                                 (</span><span class="kwa">set</span> <span class="str">'done true)
</span><span class="line">   37 </span><span class="str">                                                 ; return
</span><span class="line">   38 </span><span class="str">                                                 ra))))
</span><span class="line">   39 </span><span class="str">                 (set '</span>i l<span class="sym">)
</span><span class="line">   40 </span><span class="sym">                 (</span><span class="kwa">set</span> <span class="str">'j (&lt;&lt; l 1))
</span><span class="line">   41 </span><span class="str">                 (if (not done) (begin
</span><span class="line">   42 </span><span class="str">                          (while (&lt;= j ir)
</span><span class="line">   43 </span><span class="str">                                 (if (and (&lt; j ir) (&lt; (nth j ra) (nth (+ j 1) ra)))
</span><span class="line">   44 </span><span class="str">                                         (inc '</span> j<span class="sym">))
</span><span class="line">   45 </span><span class="sym">                                 (</span><span class="kwa">if</span> <span class="sym">(&lt;</span> rra <span class="sym">(</span><span class="kwa">nth</span> j ra<span class="sym">))
</span><span class="line">   46 </span><span class="sym">                                         (</span>begin
<span class="line">   47 </span>                                                 <span class="sym">(</span><span class="kwa">nth</span><span class="sym">-</span><span class="kwa">set</span> i ra <span class="sym">(</span><span class="kwa">nth</span> j ra<span class="sym">))
</span><span class="line">   48 </span><span class="sym">                                                 (</span><span class="kwa">set</span> <span class="str">'i j)
</span><span class="line">   49 </span><span class="str">                                                 (inc '</span>j i<span class="sym">))
</span><span class="line">   50 </span><span class="sym">                                         (</span><span class="kwa">set</span> <span class="str">'j (+ ir 1))))
</span><span class="line">   51 </span><span class="str">                         (nth-set i ra rra))
</span><span class="line">   52 </span><span class="str">                 ) ra))
</span><span class="line">   53 </span><span class="str"> 
</span><span class="line">   54 </span><span class="str"> (define (main)
</span><span class="line">   55 </span><span class="str">         (set '</span>N <span class="sym">(</span>integer <span class="sym">(</span><span class="kwa">last</span> <span class="sym">(</span>main<span class="sym">-</span>args<span class="sym">))))
</span><span class="line">   56 </span><span class="sym"> 
</span><span class="line">   57 </span><span class="sym">         (</span><span class="kwa">set</span> <span class="str">'ary (array (+ N 1)))
</span><span class="line">   58 </span><span class="str"> 
</span><span class="line">   59 </span><span class="str">         (for (i 1 N) (nth-set i ary (gen_random 1.0)))
</span><span class="line">   60 </span><span class="str"> 
</span><span class="line">   61 </span><span class="str">         (set '</span>ary <span class="sym">(</span>heapsort N ary<span class="sym">))
</span><span class="line">   62 </span><span class="sym"> 
</span><span class="line">   63 </span><span class="sym">         (</span>println <span class="sym">(</span>format <span class="str">&quot;%.10f&quot;</span> <span class="sym">(</span><span class="kwa">nth</span> N ary<span class="sym">)))
</span><span class="line">   64 </span><span class="sym"> )
</span><span class="line">   65 </span><span class="sym"> 
</span><span class="line">   66 </span><span class="sym"> (</span>main<span class="sym">)
</span><span class="line">   67 </span><span class="sym"> (</span><span class="kwa">exit</span><span class="sym">)
</span><span class="line">   68 </span><span class="sym"> 
</span><span class="line">   69 </span><span class="sym"> </span><span class="slc">;; eof 
</span><span class="line">   70 </span><span class="slc"></span>
<span class="line">   71 </span>
<span class="line">   72 </span>
<span class="line">   73 </span>
<span class="line">   74 </span>                                                                                             
