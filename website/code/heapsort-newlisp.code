#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

# heapsort <span class="sym">-</span> benchmark
#
# note<span class="sym">,</span> that newLISP has fast built<span class="sym">-</span>in sort <span class="kwa">and</span> random algorithms
# <span class="kwa">not</span> used in this <span class="sym">-</span> same way <span class="sym">-</span> benchmark
#

<span class="sym">(</span><span class="kwa">set</span> <span class="str">'IM 139968)</span>
<span class="str">(set '</span>IA <span class="num">3877</span><span class="sym">)</span>
<span class="sym">(</span><span class="kwa">set</span> <span class="str">'IC 29573)</span>
<span class="str"></span>
<span class="str">(set '</span>LAST <span class="num">42</span><span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>gen_random maximum<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'LAST (mod (add (mul LAST IA) IC) IM))</span>
<span class="str">	(div (mul maximum LAST) IM))</span>
<span class="str"></span>
<span class="str">(define (heapsort n ra)</span>
<span class="str">	(set '</span>rra <span class="num">0</span> <span class="str">'i 0 '</span>j <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'l (+ (&gt;&gt; n 1) 1))</span>
<span class="str">	(set '</span>ir n<span class="sym">)</span>

	<span class="sym">(</span><span class="kwa">while</span> <span class="sym">(</span><span class="kwa">not</span> done<span class="sym">)</span>
		<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> l <span class="num">1</span><span class="sym">)</span>
			<span class="sym">(</span>begin
				<span class="sym">(</span>dec <span class="str">'l)</span>
<span class="str">				(set '</span>rra <span class="sym">(</span><span class="kwa">nth</span> l ra<span class="sym">)))</span>
			<span class="sym">(</span>begin
				<span class="sym">(</span><span class="kwa">set</span> <span class="str">'rra (nth ir ra))</span>
<span class="str">				(nth-set ir ra (nth 1 ra))</span>
<span class="str">				(dec '</span>ir<span class="sym">)</span>
				<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> ir <span class="num">1</span><span class="sym">)</span>
					<span class="sym">(</span>begin
						<span class="sym">(</span><span class="kwa">nth</span><span class="sym">-</span><span class="kwa">set</span> <span class="num">1</span> ra rra<span class="sym">)</span>
						<span class="sym">(</span><span class="kwa">set</span> <span class="str">'done true)</span>
<span class="str">						; return</span>
<span class="str">						ra))))</span>
<span class="str">		(set '</span>i l<span class="sym">)</span>
		<span class="sym">(</span><span class="kwa">set</span> <span class="str">'j (&lt;&lt; l 1))</span>
<span class="str">		(if (not done) (begin</span>
<span class="str">			(while (&lt;= j ir)</span>
<span class="str">				(if (and (&lt; j ir) (&lt; (nth j ra) (nth (+ j 1) ra)))</span>
<span class="str">					(inc '</span> j<span class="sym">))</span>
				<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> rra <span class="sym">(</span><span class="kwa">nth</span> j ra<span class="sym">))</span>
					<span class="sym">(</span>begin
						<span class="sym">(</span><span class="kwa">nth</span><span class="sym">-</span><span class="kwa">set</span> i ra <span class="sym">(</span><span class="kwa">nth</span> j ra<span class="sym">))</span>
						<span class="sym">(</span><span class="kwa">set</span> <span class="str">'i j)</span>
<span class="str">						(inc '</span>j i<span class="sym">))</span>
					<span class="sym">(</span><span class="kwa">set</span> <span class="str">'j (+ ir 1))))</span>
<span class="str">			(nth-set i ra rra))</span>
<span class="str">		) ra))</span>
<span class="str"></span>
<span class="str">(define (main)</span>
<span class="str">	(set '</span>N <span class="sym">(</span>integer <span class="sym">(</span><span class="kwa">last</span> <span class="sym">(</span>main<span class="sym">-</span>args<span class="sym">))))</span>

	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'ary (array (+ N 1)))</span>
<span class="str"></span>
<span class="str">	(for (i 1 N) (nth-set i ary (gen_random 1.0)))</span>
<span class="str"></span>
<span class="str">	(set '</span>ary <span class="sym">(</span>heapsort N ary<span class="sym">))</span>

	<span class="sym">(</span>println <span class="sym">(</span>format <span class="str">&quot;%.10f&quot;</span> <span class="sym">(</span><span class="kwa">nth</span> N ary<span class="sym">)))</span>
<span class="sym">)</span>

<span class="sym">(</span>main<span class="sym">)</span>
<span class="sym">(</span><span class="kwa">exit</span><span class="sym">)</span>

<span class="slc">;; eof</span>





