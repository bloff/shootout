<span class="slc">#!/usr/bin/ruby
</span><span class="slc"># The Great Computer Language Shootout
</span><span class="slc"># http://shootout.alioth.debian.org
</span><span class="slc">#
</span><span class="slc"># contributed by Martin DeMello
</span><span class="slc"># modified by Jabari Zakiya 3/20/05
</span>
include Math

SOLAR_MASS = <span class="num">4</span><span class="sym">*</span>PI<span class="sym">*</span>PI
DAYS_PER_YEAR = <span class="num">365.24

</span>Vector3D = Struct.new<span class="sym">(</span><span class="str">&quot;Vector3D&quot;</span><span class="sym">, :</span>x<span class="sym">, :</span>y<span class="sym">, :</span>z<span class="sym">)

</span><span class="kwa">class</span> Vector3D

  <span class="kwa">def</span> <span class="sym">*(</span>val<span class="sym">)
</span>    Vector3D.new<span class="sym">(*</span><span class="kwa">self</span>.map <span class="sym">{|</span>i<span class="sym">|</span> i <span class="sym">*</span> val<span class="sym">})
</span>  <span class="kwa">end

  def</span> <span class="sym">/(</span>val<span class="sym">)
</span>    Vector3D.new<span class="sym">(*</span><span class="kwa">self</span>.map <span class="sym">{|</span>i<span class="sym">|</span> i <span class="sym">/</span> val<span class="sym">})
</span>  <span class="kwa">end

</span>  <span class="slc">#in-place add with scale
</span>  <span class="slc"># a.adds(b, s) -&gt; a += b*s
</span>
  <span class="kwa">def</span> adds<span class="sym">(</span>other<span class="sym">,</span> scale<span class="sym">)
</span>    <span class="kwa">self</span><span class="sym">[</span><span class="num">0</span><span class="sym">] +</span>= other<span class="sym">[</span><span class="num">0</span><span class="sym">]*</span>scale<span class="sym">;</span> <span class="kwa">self</span><span class="sym">[</span><span class="num">1</span><span class="sym">] +</span>= other<span class="sym">[</span><span class="num">1</span><span class="sym">]*</span>scale
    <span class="kwa">self</span><span class="sym">[</span><span class="num">2</span><span class="sym">] +</span>= other<span class="sym">[</span><span class="num">2</span><span class="sym">]*</span>scale
  <span class="kwa">end

  def</span> subs<span class="sym">(</span>other<span class="sym">,</span> scale<span class="sym">)
</span>    <span class="kwa">self</span><span class="sym">[</span><span class="num">0</span><span class="sym">] -</span>= other<span class="sym">[</span><span class="num">0</span><span class="sym">]*</span>scale<span class="sym">;</span> <span class="kwa">self</span><span class="sym">[</span><span class="num">1</span><span class="sym">] -</span>= other<span class="sym">[</span><span class="num">1</span><span class="sym">]*</span>scale
    <span class="kwa">self</span><span class="sym">[</span><span class="num">2</span><span class="sym">] -</span>= other<span class="sym">[</span><span class="num">2</span><span class="sym">]*</span>scale
  <span class="kwa">end

  def</span> magnitude
    x=<span class="kwa">self</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span> y=<span class="kwa">self</span><span class="sym">[</span><span class="num">1</span><span class="sym">];</span> z=<span class="kwa">self</span><span class="sym">[</span><span class="num">2</span><span class="sym">]
</span>    sqrt<span class="sym">(</span>x<span class="sym">*</span>x <span class="sym">+</span> y<span class="sym">*</span>y <span class="sym">+</span> z<span class="sym">*</span>z<span class="sym">)
</span>  <span class="kwa">end

</span>  <span class="slc"># |self - other|
</span>  <span class="kwa">def</span> dmag<span class="sym">(</span>other<span class="sym">)
</span>    x=<span class="kwa">self</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-</span>other<span class="sym">[</span><span class="num">0</span><span class="sym">];</span> y=<span class="kwa">self</span><span class="sym">[</span><span class="num">1</span><span class="sym">]-</span>other<span class="sym">[</span><span class="num">1</span><span class="sym">];</span> z=<span class="kwa">self</span><span class="sym">[</span><span class="num">2</span><span class="sym">]-</span>other<span class="sym">[</span><span class="num">2</span><span class="sym">]
</span>    sqrt<span class="sym">(</span>x<span class="sym">*</span>x <span class="sym">+</span> y<span class="sym">*</span>y <span class="sym">+</span> z<span class="sym">*</span>z<span class="sym">)
</span>  <span class="kwa">end
end

class</span> Planet
  attr_accessor <span class="sym">:</span>pos<span class="sym">, :</span>v<span class="sym">, :</span>mass

  <span class="kwa">def</span> initialize<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">,</span> vx<span class="sym">,</span> vy<span class="sym">,</span> vz<span class="sym">,</span> mass<span class="sym">)
</span>    &#64;pos = Vector3D.new<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">)
</span>    &#64;v = Vector3D.new<span class="sym">(</span>vx<span class="sym">,</span> vy<span class="sym">,</span> vz<span class="sym">) *</span> DAYS_PER_YEAR
    &#64;mass = mass <span class="sym">*</span> SOLAR_MASS
  <span class="kwa">end

  def</span> distance<span class="sym">(</span>other<span class="sym">)
</span>    <span class="kwa">self</span>.pos.dmag<span class="sym">(</span>other.pos<span class="sym">)
</span>  <span class="kwa">end
end

</span>jupiter = Planet.new<span class="sym">(
</span>   <span class="num">4.84143144246472090e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
   -</span><span class="num">1.16032004402742839e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
   -</span><span class="num">1.03622044471123109e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
</span>   <span class="num">1.66007664274403694e</span><span class="sym">-</span><span class="num">03</span><span class="sym">,
</span>   <span class="num">7.69901118419740425e</span><span class="sym">-</span><span class="num">03</span><span class="sym">,
   -</span><span class="num">6.90460016972063023e</span><span class="sym">-</span><span class="num">05</span><span class="sym">,
</span>   <span class="num">9.54791938424326609e</span><span class="sym">-</span><span class="num">04</span><span class="sym">)

</span>saturn = Planet.new<span class="sym">(
</span>   <span class="num">8.34336671824457987e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
</span>   <span class="num">4.12479856412430479e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
   -</span><span class="num">4.03523417114321381e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
   -</span><span class="num">2.76742510726862411e</span><span class="sym">-</span><span class="num">03</span><span class="sym">,
</span>   <span class="num">4.99852801234917238e</span><span class="sym">-</span><span class="num">03</span><span class="sym">,
</span>   <span class="num">2.30417297573763929e</span><span class="sym">-</span><span class="num">05</span><span class="sym">,
</span>   <span class="num">2.85885980666130812e</span><span class="sym">-</span><span class="num">04</span><span class="sym">)

</span>uranus = Planet.new<span class="sym">(
</span>   <span class="num">1.28943695621391310e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
   -</span><span class="num">1.51111514016986312e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
   -</span><span class="num">2.23307578892655734e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
</span>   <span class="num">2.96460137564761618e</span><span class="sym">-</span><span class="num">03</span><span class="sym">,
</span>   <span class="num">2.37847173959480950e</span><span class="sym">-</span><span class="num">03</span><span class="sym">,
   -</span><span class="num">2.96589568540237556e</span><span class="sym">-</span><span class="num">05</span><span class="sym">,
</span>   <span class="num">4.36624404335156298e</span><span class="sym">-</span><span class="num">05</span><span class="sym">)

</span>neptune = Planet.new<span class="sym">(
</span>   <span class="num">1.53796971148509165e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
   -</span><span class="num">2.59193146099879641e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
</span>   <span class="num">1.79258772950371181e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
</span>   <span class="num">2.68067772490389322e</span><span class="sym">-</span><span class="num">03</span><span class="sym">,
</span>   <span class="num">1.62824170038242295e</span><span class="sym">-</span><span class="num">03</span><span class="sym">,
   -</span><span class="num">9.51592254519715870e</span><span class="sym">-</span><span class="num">05</span><span class="sym">,
</span>   <span class="num">5.15138902046611451e</span><span class="sym">-</span><span class="num">05</span><span class="sym">)

</span>sun = Planet.new<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)

</span><span class="kwa">class</span> Array
  <span class="kwa">def</span> each_pair
    a = <span class="sym">[]
</span>    each_index <span class="sym">{|</span>i<span class="sym">|
      ((</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>...length<span class="sym">)</span>.each <span class="sym">{|</span>j<span class="sym">|
</span>        <span class="kwa">yield</span> at<span class="sym">(</span>i<span class="sym">),</span> at<span class="sym">(</span>j<span class="sym">)
      }
    }
</span>  <span class="kwa">end
end

</span>bodies = <span class="sym">[</span>sun<span class="sym">,</span> jupiter<span class="sym">,</span> saturn<span class="sym">,</span> uranus<span class="sym">,</span> neptune<span class="sym">]

</span><span class="kwa">class</span> <span class="sym">&lt;&lt;</span> bodies
  <span class="kwa">def</span> advance<span class="sym">(</span>dt<span class="sym">)
</span>    mag = m1 = m2 = <span class="kwa">nil
</span>    each_pair <span class="sym">{|</span>b1<span class="sym">,</span> b2<span class="sym">|
</span>      d = b1.distance<span class="sym">(</span>b2<span class="sym">)
</span>      mag = dt<span class="sym">/(</span>d<span class="sym">*</span>d<span class="sym">*</span>d<span class="sym">)

</span>      m1 = b1.mass <span class="sym">*</span> mag
      m2 = b2.mass <span class="sym">*</span> mag

      b1.v.adds<span class="sym">(</span>b2.pos<span class="sym">,</span> m2<span class="sym">)
</span>      b1.v.subs<span class="sym">(</span>b1.pos<span class="sym">,</span> m2<span class="sym">)
</span>      b2.v.adds<span class="sym">(</span>b1.pos<span class="sym">,</span> m1<span class="sym">)
</span>      b2.v.subs<span class="sym">(</span>b2.pos<span class="sym">,</span> m1<span class="sym">)
    }

</span>    each <span class="sym">{|</span>b<span class="sym">|</span> b.pos.adds<span class="sym">(</span>b.v<span class="sym">,</span> dt<span class="sym">)}
</span>  <span class="kwa">end

  def</span> energy
    e = <span class="num">0
</span>    each <span class="sym">{|</span>b<span class="sym">|</span> e <span class="sym">+</span>= <span class="num">0.5</span> <span class="sym">*</span> b.mass <span class="sym">* (</span>b.v.magnitude <span class="sym">**</span> <span class="num">2</span><span class="sym">) }
</span>    each_pair <span class="sym">{|</span>b1<span class="sym">,</span> b2<span class="sym">|</span> e <span class="sym">-</span>= <span class="sym">(</span>b1.mass <span class="sym">*</span> b2.mass<span class="sym">) /</span> b1.distance<span class="sym">(</span>b2<span class="sym">) }
</span>    e
  <span class="kwa">end

  def</span> offset_momentum
    p = Vector3D.new<span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">)
</span>    sun = <span class="kwa">self</span><span class="sym">[</span><span class="num">0</span><span class="sym">]
</span>    each <span class="sym">{|</span>b<span class="sym">|</span> p.adds<span class="sym">(</span>b.v<span class="sym">,</span> b.mass<span class="sym">) }
</span>    sun.v.subs<span class="sym">(</span>p<span class="sym">,</span> <span class="num">1.0</span><span class="sym">/</span>sun.mass<span class="sym">)
</span>  <span class="kwa">end
end

</span>bodies.offset_momentum
puts bodies.energy
Integer<span class="sym">(</span><span class="kwa">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">])</span>.times <span class="sym">{</span> bodies.advance<span class="sym">(</span><span class="num">0.01</span><span class="sym">) }
</span>puts bodies.energy

