<span class="slc"># The Great Computer Language Shootout
</span><span class="slc">#   http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc">#   contributed by Robert Bradshaw
</span>

<span class="kwa">use</span> Math<span class="sym">::</span>BigInt<span class="sym">;


</span><span class="kwb">$k</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwb">$z</span> <span class="sym">= [</span>Math<span class="sym">::</span>BigInt<span class="sym">-&gt;</span>new<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> Math<span class="sym">::</span>BigInt<span class="sym">-&gt;</span>new<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> Math<span class="sym">::</span>BigInt<span class="sym">-&gt;</span>new<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> Math<span class="sym">::</span>BigInt<span class="sym">-&gt;</span>new<span class="sym">(</span><span class="num">1</span><span class="sym">)];

</span><span class="kwa">sub</span> next_digit <span class="sym">{
</span>  <span class="kwa">while</span> <span class="sym">((</span><span class="kwb">$y</span> <span class="sym">=</span> extract_digit<span class="sym">(</span><span class="num">3</span><span class="sym">)) !=</span> extract_digit<span class="sym">(</span><span class="num">4</span><span class="sym">)) {</span> <span class="slc"># y not safe
</span>    consume<span class="sym">(</span>next_lft<span class="sym">());
  }
</span>  produce<span class="sym">(</span><span class="kwb">$y</span><span class="sym">);
</span>  <span class="kwa">return</span> <span class="kwb">$y</span><span class="sym">;
}

</span><span class="kwa">sub</span> next_lft <span class="sym">{
</span>  <span class="kwb">$k</span><span class="sym">++;
</span>  <span class="kwa">return</span> <span class="sym">[</span><span class="kwb">$k</span><span class="sym">,</span> <span class="num">4</span><span class="sym">*</span><span class="kwb">$k</span><span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span><span class="kwb">$k</span><span class="sym">+</span><span class="num">1</span><span class="sym">];
}

</span><span class="kwa">sub</span> extract_digit <span class="sym">{
</span>  <span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$x</span><span class="sym">) =</span> &#64;_<span class="sym">;
</span>  <span class="kwa">return</span> int<span class="sym">( (</span><span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">0</span><span class="sym">] *</span> <span class="kwb">$x</span> <span class="sym">+</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">]) / (</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">2</span><span class="sym">] *</span> <span class="kwb">$x</span> <span class="sym">+</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">3</span><span class="sym">]) );
}

</span><span class="kwa">sub</span> produce <span class="sym">{
</span>  <span class="kwb">$z</span> <span class="sym">=</span> compose<span class="sym">([</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>shift<span class="sym">(</span>&#64;_<span class="sym">),</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">],</span> <span class="kwb">$z</span><span class="sym">);
}

</span><span class="kwa">sub</span> consume <span class="sym">{
</span>  <span class="kwb">$z</span> <span class="sym">=</span> compose<span class="sym">(</span><span class="kwb">$z</span><span class="sym">,</span> shift<span class="sym">(</span>&#64;_<span class="sym">));
}

</span><span class="kwa">sub</span> compose <span class="sym">{
</span>  <span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$z</span><span class="sym">,</span> <span class="kwb">$w</span><span class="sym">) =</span> &#64;_<span class="sym">;
</span>  <span class="kwa">return</span> <span class="sym">[</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">0</span><span class="sym">] *</span> <span class="kwb">$w</span><span class="sym">-&gt;[</span><span class="num">0</span><span class="sym">] +</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">] *</span> <span class="kwb">$w</span><span class="sym">-&gt;[</span><span class="num">2</span><span class="sym">],
</span>           <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">0</span><span class="sym">] *</span> <span class="kwb">$w</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">] +</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">] *</span> <span class="kwb">$w</span><span class="sym">-&gt;[</span><span class="num">3</span><span class="sym">],
</span>           <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">2</span><span class="sym">] *</span> <span class="kwb">$w</span><span class="sym">-&gt;[</span><span class="num">0</span><span class="sym">] +</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">3</span><span class="sym">] *</span> <span class="kwb">$w</span><span class="sym">-&gt;[</span><span class="num">2</span><span class="sym">],
</span>           <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">2</span><span class="sym">] *</span> <span class="kwb">$w</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">] +</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">3</span><span class="sym">] *</span> <span class="kwb">$w</span><span class="sym">-&gt;[</span><span class="num">3</span><span class="sym">] ];
}


</span><span class="slc"># main loop
</span>
<span class="kwb">$n</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];

</span><span class="kwa">for</span><span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">1</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;=</span><span class="kwb">$n</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {
</span>  print next_digit<span class="sym">();
</span>  <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$i</span> % <span class="num">10</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>  print <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:$i</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;  }
}
</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$n</span> % <span class="num">10</span> <span class="sym">!=</span> <span class="num">0</span><span class="sym">) {
</span>  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">$j</span><span class="sym">=</span><span class="kwb">$n</span> % <span class="num">10</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">&lt;=</span><span class="num">10</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">++) {</span>  print <span class="str">&quot; &quot;</span><span class="sym">;  }
</span>  print <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:$n</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
}</span>
