<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com"> contributed by Patrick Perry</span>
<span class="com"></span>
<span class="com"> ported from the Java 6 -server #3 program</span>
<span class="com"> which was contributed by Luzius Meisser</span>
<span class="com"> based on a contribution by Keenan Tims</span>
<span class="com"> that was modified by Michael Barker</span>
<span class="com"> */</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Threading<span class="sym">;</span>


<span class="kwa">public class</span> Chameneos
<span class="sym">{</span>
    <span class="kwa">public</span> <span class="kwb">enum</span> Color <span class="sym">{</span> Red<span class="sym">,</span> Blue<span class="sym">,</span> Yellow<span class="sym">,</span> Faded <span class="sym">}</span>

    <span class="kwa">public static</span> Color <span class="kwd">Complement</span> <span class="sym">(</span>Color color<span class="sym">,</span> Color other<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span> <span class="sym">(</span>color <span class="sym">==</span> other<span class="sym">) {</span>
            <span class="kwa">return</span> color<span class="sym">;</span>
        <span class="sym">}</span> <span class="kwa">else if</span> <span class="sym">(</span>color <span class="sym">==</span> Color<span class="sym">.</span>Blue<span class="sym">) {</span>
            <span class="kwa">return</span> color <span class="sym">==</span> Color<span class="sym">.</span>Red ? Color<span class="sym">.</span>Yellow <span class="sym">:</span> Color<span class="sym">.</span>Red<span class="sym">;</span>
        <span class="sym">}</span> <span class="kwa">else if</span> <span class="sym">(</span>color <span class="sym">==</span> Color<span class="sym">.</span>Yellow<span class="sym">) {</span>
            <span class="kwa">return</span> color <span class="sym">==</span> Color<span class="sym">.</span>Blue ? Color<span class="sym">.</span>Red <span class="sym">:</span> Color<span class="sym">.</span>Blue<span class="sym">;</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            <span class="kwa">return</span> color <span class="sym">==</span> Color<span class="sym">.</span>Yellow ? Color<span class="sym">.</span>Blue <span class="sym">:</span> Color<span class="sym">.</span>Yellow<span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public class</span> Future<span class="sym">&lt;</span>T<span class="sym">&gt;</span>
    <span class="sym">{</span>
        <span class="kwa">private</span> volatile T t<span class="sym">;</span>
        <span class="kwa">private</span> volatile <span class="kwb">bool</span> hasValue<span class="sym">;</span>

        <span class="kwa">public</span> T Value <span class="sym">{</span>
            <span class="kwa">get</span> <span class="sym">{</span>
                <span class="kwa">while</span> <span class="sym">(!</span>hasValue<span class="sym">) {</span>
                    Thread<span class="sym">.</span><span class="kwd">Sleep</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
                <span class="sym">}</span>

                <span class="kwa">return</span> t<span class="sym">;</span>
            <span class="sym">}</span>

            <span class="kwa">set</span> <span class="sym">{</span>
                t <span class="sym">=</span> <span class="kwa">value</span><span class="sym">;</span>
                hasValue <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public class</span> InterruptedException <span class="sym">:</span> Exception <span class="sym">{ }</span>

    <span class="kwa">public class</span> Creature
    <span class="sym">{</span>
        <span class="kwa">private</span> MeetingPlace mp<span class="sym">;</span>
        <span class="kwa">private</span> Color color<span class="sym">;</span>
        <span class="kwa">private</span> <span class="kwb">int</span> met<span class="sym">;</span>

        <span class="kwa">public</span> <span class="kwd">Creature</span> <span class="sym">(</span>Color initialColor<span class="sym">,</span> MeetingPlace mp<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">this</span><span class="sym">.</span>color <span class="sym">=</span> initialColor<span class="sym">;</span>
            <span class="kwa">this</span><span class="sym">.</span>mp <span class="sym">=</span> mp<span class="sym">;</span>
            <span class="kwa">this</span><span class="sym">.</span>met <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">Be</span> <span class="sym">()</span>
        <span class="sym">{</span>
            <span class="kwa">try</span> <span class="sym">{</span>
                <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {</span>
                    color <span class="sym">=</span> mp<span class="sym">.</span><span class="kwd">Meet</span><span class="sym">(</span>color<span class="sym">);</span>
                    met<span class="sym">++;</span>
                <span class="sym">}</span>
            <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span>InterruptedException<span class="sym">) {</span>
                color <span class="sym">=</span> Color<span class="sym">.</span>Faded<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">int</span> CreaturesMet
        <span class="sym">{</span>
            <span class="kwa">get</span> <span class="sym">{</span> <span class="kwa">return</span> met<span class="sym">; }</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> Color Color
        <span class="sym">{</span>
            <span class="kwa">get</span> <span class="sym">{</span> <span class="kwa">return</span> color<span class="sym">; }</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public class</span> MeetingPlace
    <span class="sym">{</span>
        <span class="kwa">private</span> <span class="kwb">int</span> meetingsLeft<span class="sym">;</span>
        <span class="kwa">private</span> Color first<span class="sym">;</span>
        <span class="kwa">private</span> <span class="kwb">bool</span> hasFirst <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
        <span class="kwa">private</span> Future<span class="sym">&lt;</span>Color<span class="sym">&gt;</span> current<span class="sym">;</span>

        <span class="kwa">public</span> <span class="kwd">MeetingPlace</span> <span class="sym">(</span><span class="kwb">int</span> meetings<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">this</span><span class="sym">.</span>meetingsLeft <span class="sym">=</span> meetings<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> Color <span class="kwd">Meet</span> <span class="sym">(</span>Color myColor<span class="sym">)</span>
        <span class="sym">{</span>
            Future<span class="sym">&lt;</span>Color<span class="sym">&gt;</span> newColor<span class="sym">;</span>

            <span class="kwd">lock</span> <span class="sym">(</span><span class="kwa">this</span><span class="sym">) {</span>
                <span class="kwa">if</span> <span class="sym">(</span>meetingsLeft <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
                    <span class="kwa">throw new</span> <span class="kwd">InterruptedException</span><span class="sym">();</span>
                <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                    <span class="kwa">if</span> <span class="sym">(!</span>hasFirst<span class="sym">) {</span>
                        first <span class="sym">=</span> myColor<span class="sym">;</span>
                        hasFirst <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
                        current <span class="sym">=</span> <span class="kwa">new</span> Future<span class="sym">&lt;</span>Color<span class="sym">&gt;();</span>
                    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                        current<span class="sym">.</span>Value <span class="sym">=</span> Chameneos<span class="sym">.</span><span class="kwd">Complement</span><span class="sym">(</span>myColor<span class="sym">,</span> first<span class="sym">);</span>
                        hasFirst <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
                        meetingsLeft<span class="sym">--;</span>
                    <span class="sym">}</span>
                    newColor <span class="sym">=</span> current<span class="sym">;</span>
                <span class="sym">}</span>
            <span class="sym">}</span>

            <span class="kwa">return</span> newColor<span class="sym">.</span>Value<span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public static readonly</span> Color<span class="sym">[]</span> Colors <span class="sym">= {</span>
        Color<span class="sym">.</span>Blue<span class="sym">,</span> Color<span class="sym">.</span>Red<span class="sym">,</span> Color<span class="sym">.</span>Yellow<span class="sym">,</span> Color<span class="sym">.</span>Blue <span class="sym">};</span>

    <span class="kwa">private</span> MeetingPlace mp<span class="sym">;</span>
    <span class="kwa">private</span> Creature<span class="sym">[]</span> creatures<span class="sym">;</span>
    <span class="kwa">private</span> Thread<span class="sym">[]</span> threads<span class="sym">;</span>

    <span class="kwa">public</span> <span class="kwd">Chameneos</span> <span class="sym">(</span><span class="kwb">int</span> meetings<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">this</span><span class="sym">.</span>mp <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">MeetingPlace</span><span class="sym">(</span>meetings<span class="sym">);</span>
        <span class="kwa">this</span><span class="sym">.</span>creatures <span class="sym">=</span> <span class="kwa">new</span> Creature<span class="sym">[</span>Colors<span class="sym">.</span>Length<span class="sym">];</span>
        <span class="kwa">this</span><span class="sym">.</span>threads <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">[</span>Colors<span class="sym">.</span>Length<span class="sym">];</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">Run</span> <span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> Colors<span class="sym">.</span>Length<span class="sym">;</span> i<span class="sym">++) {</span>
            creatures<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">Creature</span><span class="sym">(</span>Colors<span class="sym">[</span>i<span class="sym">],</span> mp<span class="sym">);</span>
            threads<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">Thread</span><span class="sym">(</span>creatures<span class="sym">[</span>i<span class="sym">].</span>Be<span class="sym">);</span>
            threads<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">Start</span><span class="sym">();</span>
        <span class="sym">}</span>

        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> Colors<span class="sym">.</span>Length<span class="sym">;</span> i<span class="sym">++) {</span>
            threads<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">Join</span><span class="sym">();</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">PrintResult</span> <span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwb">int</span> meetings <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> Colors<span class="sym">.</span>Length<span class="sym">;</span> i<span class="sym">++) {</span>
            meetings <span class="sym">+=</span> creatures<span class="sym">[</span>i<span class="sym">].</span>CreaturesMet<span class="sym">;</span>
        <span class="sym">}</span>

        Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span>meetings<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span> <span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">) {</span>
            <span class="kwa">throw new</span> <span class="kwd">ArgumentException</span><span class="sym">();</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            Chameneos cham <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Chameneos</span><span class="sym">(</span>Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]));</span>
            cham<span class="sym">.</span><span class="kwd">Run</span><span class="sym">();</span>
            cham<span class="sym">.</span><span class="kwd">PrintResult</span><span class="sym">();</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

