<span class="kwa">program</span> matrix<span class="sym">;
</span><span class="kwa">uses</span> SysUtils<span class="sym">;

</span><span class="kwa">const
</span>        size <span class="sym">=</span> <span class="num">30</span><span class="sym">;

</span><span class="kwa">type</span> tMatrix <span class="sym">=</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>..size<span class="num">-1</span><span class="sym">,</span> <span class="num">0</span>..size<span class="num">-1</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">longint</span><span class="sym">;

</span><span class="kwa">procedure</span> mkmatrix<span class="sym">(</span> rows<span class="sym">,</span> cols <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span> <span class="kwa">var</span> mx <span class="sym">:</span> tMatrix<span class="sym">);
</span><span class="kwa">var
</span>        R<span class="sym">,</span> C <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>        count <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="kwa">begin
</span>        count <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>        <span class="kwa">for</span> R <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> rows<span class="num">-1</span> <span class="kwa">do
        begin
                for</span> C <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> cols<span class="num">-1</span> <span class="kwa">do
                begin
</span>                        mx<span class="sym">[</span>R<span class="sym">,</span> C<span class="sym">] :=</span> count<span class="sym">;
</span>                        Inc<span class="sym">(</span>count<span class="sym">);
</span>                <span class="kwa">end</span><span class="sym">;
</span>        <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">End</span><span class="sym">;

</span><span class="kwa">procedure</span> mmult<span class="sym">(</span>rows<span class="sym">,</span> cols <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span> <span class="kwa">const</span> m1<span class="sym">,</span> m2 <span class="sym">:</span> tMatrix<span class="sym">;</span> <span class="kwa">var</span> mm <span class="sym">:</span> tMatrix <span class="sym">);</span> <span class="kwa">inline</span><span class="sym">;
</span><span class="kwa">var
</span>        i<span class="sym">,</span> j<span class="sym">,</span> k <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>        val<span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="kwa">begin
        For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> rows<span class="num">-1</span> <span class="kwa">do
        begin
                For</span> j <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> cols<span class="num">-1</span> <span class="kwa">do
                begin
</span>                        val <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>                        <span class="kwa">For</span> k <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> cols<span class="num">-1</span> <span class="kwa">do
                        begin
</span>                                Inc<span class="sym">(</span>val<span class="sym">,</span> m1<span class="sym">[</span>i<span class="sym">,</span> k<span class="sym">] *</span> m2<span class="sym">[</span>k<span class="sym">,</span> j<span class="sym">]);
</span>                        <span class="kwa">end</span><span class="sym">;
</span>                        mm<span class="sym">[</span>i<span class="sym">,</span> j<span class="sym">] :=</span> val<span class="sym">;
</span>                <span class="kwa">end</span><span class="sym">;
</span>        <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">End</span><span class="sym">;


</span><span class="kwa">procedure</span> main<span class="sym">;
</span><span class="kwa">var</span> NUM<span class="sym">,</span> I <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>        M1<span class="sym">,</span> M2<span class="sym">,</span> MM <span class="sym">:</span> tMatrix<span class="sym">;

</span><span class="kwa">begin
        if</span> ParamCount <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then
</span>                NUM <span class="sym">:=</span> <span class="num">1
</span>        <span class="kwa">else
</span>                NUM <span class="sym">:=</span> StrToInt<span class="sym">(</span>ParamStr<span class="sym">(</span><span class="num">1</span><span class="sym">));

</span>        <span class="kwa">if</span> NUM <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> NUM <span class="sym">:=</span> <span class="num">1</span><span class="sym">;

</span>        mkmatrix<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">,</span> M1<span class="sym">);
</span>        mkmatrix<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">,</span> M2<span class="sym">);

</span>        <span class="kwa">for</span> I <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> NUM<span class="num">-1</span> <span class="kwa">do
        begin
</span>                mmult<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">,</span> M1<span class="sym">,</span> M2<span class="sym">,</span> MM<span class="sym">);
</span>        <span class="kwa">end</span><span class="sym">;
</span>        WriteLn<span class="sym">(</span> IntToStr<span class="sym">(</span>MM<span class="sym">[</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">]) +</span> <span class="str">' '</span> <span class="sym">+</span> IntToStr<span class="sym">(</span>MM<span class="sym">[</span><span class="num">2</span><span class="sym">,</span> <span class="num">3</span><span class="sym">]) +</span> <span class="str">' '</span> <span class="sym">+
</span>                         IntToStr<span class="sym">(</span>MM<span class="sym">[</span><span class="num">3</span><span class="sym">,</span> <span class="num">2</span><span class="sym">]) +</span> <span class="str">' '</span> <span class="sym">+</span> IntToStr<span class="sym">(</span>MM<span class="sym">[</span><span class="num">4</span><span class="sym">,</span> <span class="num">4</span><span class="sym">]));
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">begin
</span>  main<span class="sym">;
</span><span class="kwa">end</span>.
