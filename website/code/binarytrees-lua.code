<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local function</span> BottomUpTree<span class="sym">(</span>item<span class="sym">,</span> depth<span class="sym">)</span>
  <span class="kwa">if</span> depth <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
    <span class="kwa">local</span> i <span class="sym">=</span> item <span class="sym">+</span> item
    depth <span class="sym">=</span> depth <span class="sym">-</span> <span class="num">1</span>
    <span class="kwa">local</span> left<span class="sym">,</span> right <span class="sym">=</span> BottomUpTree<span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">),</span> BottomUpTree<span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">)</span>
    <span class="kwa">return</span> <span class="sym">{</span> item<span class="sym">,</span> left<span class="sym">,</span> right <span class="sym">}</span>
  <span class="kwa">else</span>
    <span class="kwa">return</span> <span class="sym">{</span> item <span class="sym">}</span> <span class="slc">-- Faster for LuaJIT: return { item, false }</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> ItemCheck<span class="sym">(</span>tree<span class="sym">)</span>
  <span class="kwa">if</span> tree<span class="sym">[</span><span class="num">2</span><span class="sym">]</span> <span class="kwa">then</span>
    <span class="kwa">return</span> tree<span class="sym">[</span><span class="num">1</span><span class="sym">] +</span> ItemCheck<span class="sym">(</span>tree<span class="sym">[</span><span class="num">2</span><span class="sym">]) -</span> ItemCheck<span class="sym">(</span>tree<span class="sym">[</span><span class="num">3</span><span class="sym">])</span>
  <span class="kwa">else</span>
    <span class="kwa">return</span> tree<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local</span> N <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">0</span>
<span class="kwa">local</span> mindepth <span class="sym">=</span> <span class="num">4</span>
<span class="kwa">local</span> maxdepth <span class="sym">=</span> mindepth <span class="sym">+</span> <span class="num">2</span>
<span class="kwa">if</span> maxdepth <span class="sym">&lt;</span> N <span class="kwa">then</span> maxdepth <span class="sym">=</span> N <span class="kwa">end</span>

<span class="kwa">do</span>
  <span class="kwa">local</span> stretchdepth <span class="sym">=</span> maxdepth <span class="sym">+</span> <span class="num">1</span>
  <span class="kwa">local</span> stretchtree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretchdepth<span class="sym">)</span>
  io.<span class="kwa">write</span><span class="sym">(</span><span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
    stretchdepth<span class="sym">,</span> ItemCheck<span class="sym">(</span>stretchtree<span class="sym">)))</span>
<span class="kwa">end</span>

<span class="kwa">local</span> longlivedtree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxdepth<span class="sym">)</span>

<span class="kwa">for</span> depth<span class="sym">=</span>mindepth<span class="sym">,</span>maxdepth<span class="sym">,</span><span class="num">2</span> <span class="kwa">do</span>
  <span class="kwa">local</span> iterations <span class="sym">=</span> <span class="num">2</span> ^ <span class="sym">(</span>maxdepth <span class="sym">-</span> depth <span class="sym">+</span> mindepth<span class="sym">)</span>
  <span class="kwa">local</span> check <span class="sym">=</span> <span class="num">0</span>
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>iterations <span class="kwa">do</span>
    check <span class="sym">=</span> check <span class="sym">+</span> ItemCheck<span class="sym">(</span>BottomUpTree<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">)) +</span>
            ItemCheck<span class="sym">(</span>BottomUpTree<span class="sym">(-</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">))</span>
  <span class="kwa">end</span>
  io.<span class="kwa">write</span><span class="sym">(</span><span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\t</span> <span class="str">trees of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
    iterations<span class="sym">*</span><span class="num">2</span><span class="sym">,</span> depth<span class="sym">,</span> check<span class="sym">))</span>
<span class="kwa">end</span>

io.<span class="kwa">write</span><span class="sym">(</span><span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
  maxdepth<span class="sym">,</span> ItemCheck<span class="sym">(</span>longlivedtree<span class="sym">)))</span>

