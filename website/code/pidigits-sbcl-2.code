<span class="slc">;; The Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; adapted from the Java and Python versions by Robert Brown 2006-10-06</span>

<span class="sym">(</span>defconstant <span class="sym">+</span>digits<span class="sym">-</span>per<span class="sym">-</span><span class="kwa">line</span><span class="sym">+</span> <span class="num">10</span><span class="sym">)</span>
<span class="sym">(</span>defconstant <span class="sym">+</span>default<span class="sym">-</span>stop<span class="sym">-</span>digits<span class="sym">+</span> <span class="str">&quot;1000&quot;</span><span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> make<span class="sym">-</span>digit<span class="sym">-</span>generator <span class="sym">()</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))</span>
  <span class="sym">(</span>let <span class="sym">((</span>zq <span class="num">1</span><span class="sym">)</span>
        <span class="sym">(</span>zr <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>zt <span class="num">1</span><span class="sym">)</span>
        <span class="sym">(</span>k <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span><span class="num">4</span>k<span class="sym">+</span><span class="num">2 2</span><span class="sym">)</span>
        <span class="sym">(</span><span class="num">2</span>k<span class="sym">+</span><span class="num">1 1</span><span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> integer zq zr zt<span class="sym">)</span>
             <span class="sym">(</span><span class="kwa">type</span> fixnum k <span class="num">4</span>k<span class="sym">+</span><span class="num">2 2</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
    <span class="sym">(</span>labels <span class="sym">((</span>extract <span class="sym">(</span>j<span class="sym">)</span>
               <span class="sym">(</span>the <span class="sym">(</span>integer <span class="num">0 9</span><span class="sym">) (</span>floor <span class="sym">(+ (*</span> zq j<span class="sym">)</span> zr<span class="sym">)</span> zt<span class="sym">)))</span>
             <span class="sym">(</span>compose <span class="sym">(</span>aq ar at bq br bt<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">setq</span> zq <span class="sym">(*</span> aq bq<span class="sym">)</span>
                     zr <span class="sym">(+ (*</span> aq br<span class="sym">) (*</span> ar bt<span class="sym">))</span>
                     zt <span class="sym">(*</span> at bt<span class="sym">))))</span>
      #<span class="sym">'(</span><span class="kwa">lambda</span> <span class="sym">()</span>
          <span class="sym">(</span>let <span class="sym">((</span>y <span class="sym">(</span>extract <span class="num">3</span><span class="sym">)))</span>
            <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>integer <span class="num">0 9</span><span class="sym">)</span> y<span class="sym">))</span>
            <span class="sym">(</span>loop <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(=</span> y <span class="sym">(</span>extract <span class="num">4</span><span class="sym">)))</span>
                  do <span class="sym">(</span>compose zq zr zt <span class="sym">(</span>incf k<span class="sym">) (</span>incf <span class="num">4</span>k<span class="sym">+</span><span class="num">2 4</span><span class="sym">) (</span>incf <span class="num">2</span>k<span class="sym">+</span><span class="num">1 2</span><span class="sym">))</span>
                     <span class="sym">(</span>setf y <span class="sym">(</span>extract <span class="num">3</span><span class="sym">)))</span>
            <span class="sym">(</span>compose <span class="num">10</span> <span class="sym">(* -</span><span class="num">10</span> y<span class="sym">)</span> <span class="num">1</span> zq zr zt<span class="sym">)</span>
            y<span class="sym">)))))</span>

<span class="sym">(</span><span class="kwa">defun</span> spigot <span class="sym">(</span>digits<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum digits<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>digits<span class="sym">-</span>printed <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>next<span class="sym">-</span>digit <span class="sym">(</span>make<span class="sym">-</span>digit<span class="sym">-</span>generator<span class="sym">)))</span>
    <span class="sym">(</span>loop <span class="kwa">while</span> <span class="sym">(</span>plusp digits<span class="sym">)</span>
          do <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;=</span> digits <span class="sym">+</span>digits<span class="sym">-</span>per<span class="sym">-</span><span class="kwa">line</span><span class="sym">+)</span>
                 <span class="sym">(</span><span class="kwa">progn</span> <span class="sym">(</span>loop <span class="kwa">repeat</span> <span class="sym">+</span>digits<span class="sym">-</span>per<span class="sym">-</span><span class="kwa">line</span><span class="sym">+</span>
                              do <span class="sym">(</span>format t <span class="str">&quot;~d&quot;</span> <span class="sym">(</span>funcall next<span class="sym">-</span>digit<span class="sym">)))</span>
                        <span class="sym">(</span>incf digits<span class="sym">-</span>printed <span class="sym">+</span>digits<span class="sym">-</span>per<span class="sym">-</span><span class="kwa">line</span><span class="sym">+))</span>
                 <span class="sym">(</span><span class="kwa">progn</span> <span class="sym">(</span>loop <span class="kwa">repeat</span> digits
                              do <span class="sym">(</span>format t <span class="str">&quot;~d&quot;</span> <span class="sym">(</span>funcall next<span class="sym">-</span>digit<span class="sym">)))</span>
                        <span class="sym">(</span>loop <span class="kwa">repeat</span> <span class="sym">(- +</span>digits<span class="sym">-</span>per<span class="sym">-</span><span class="kwa">line</span><span class="sym">+</span> digits<span class="sym">)</span>
                              do <span class="sym">(</span>format t <span class="str">&quot; &quot;</span><span class="sym">))</span>
                        <span class="sym">(</span>incf digits<span class="sym">-</span>printed digits<span class="sym">)))</span>
             <span class="sym">(</span>format t <span class="str">&quot;~a:~d~%&quot;</span> #\Tab digits<span class="sym">-</span>printed<span class="sym">)</span>
             <span class="sym">(</span>decf digits <span class="sym">+</span>digits<span class="sym">-</span>per<span class="sym">-</span><span class="kwa">line</span><span class="sym">+))))</span>


<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">(&amp;</span>optional
	     <span class="sym">(</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer
                 <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
                                #<span class="sym">+</span>cmu extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
                                #<span class="sym">+</span>gcl si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span>
                     <span class="sym">+</span>default<span class="sym">-</span>stop<span class="sym">-</span>digits<span class="sym">+))))</span>
    <span class="sym">(</span>spigot n<span class="sym">)))</span>
