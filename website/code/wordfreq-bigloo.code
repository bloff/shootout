<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: wordfreq-bigloo.code,v 1.5 2006-02-10 07:03:52 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; with help from Sven Hartrumpf</span>

<span class="sym">(</span>module hash
	<span class="sym">(</span>main main<span class="sym">)</span>
	<span class="sym">(</span>extern <span class="sym">(</span>macro printf<span class="sym">::</span>int <span class="sym">(</span>string int string<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">)))</span>


<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span><span class="kwa">max</span> <span class="sym">(</span>do <span class="sym">((</span><span class="kwa">max</span> <span class="num">1</span> <span class="sym">(*</span> <span class="kwa">max</span> <span class="num">2</span><span class="sym">))) ((&gt;</span> <span class="kwa">max</span> <span class="num">75000</span><span class="sym">)</span> <span class="kwa">max</span><span class="sym">)))</span>
	 <span class="sym">(</span>count <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="kwa">max</span>
				  <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>o<span class="sym">) (</span>string<span class="sym">-&gt;</span><span class="num">0</span>.<span class="num">.2</span>^x<span class="sym">-</span><span class="num">1</span> o <span class="num">16</span><span class="sym">))</span>
				  <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>c<span class="sym">) (</span><span class="kwa">car</span> c<span class="sym">))</span>
				  string<span class="sym">=</span>?
				  <span class="kwa">max</span><span class="sym">)))</span>

    <span class="sym">(</span><span class="kwa">read</span><span class="sym">/</span>rp <span class="sym">(</span>regular<span class="sym">-</span>grammar <span class="sym">((</span>word <span class="sym">(+ (</span>in <span class="sym">(</span><span class="str">&quot;azAZ&quot;</span><span class="sym">))))</span>
			       <span class="sym">(</span><span class="kwa">not</span><span class="sym">-</span>word <span class="sym">(+ (</span>out <span class="sym">(</span><span class="str">&quot;azAZ&quot;</span><span class="sym">)))))</span>
			      <span class="sym">((:</span> word<span class="sym">)</span>
			       <span class="sym">(</span>let<span class="sym">* ((</span>key <span class="sym">(</span>string<span class="sym">-</span>downcase<span class="sym">! (</span>the<span class="sym">-</span>string<span class="sym">)))</span>
				      <span class="sym">(</span>old<span class="sym">-</span>cell <span class="sym">(</span>get<span class="sym">-</span>hash key count<span class="sym">)))</span>
                                 <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">(</span>old<span class="sym">-</span>cell
					<span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span><span class="kwa">cdr</span><span class="sym">!</span> old<span class="sym">-</span>cell <span class="sym">(+ (</span><span class="kwa">cdr</span> old<span class="sym">-</span>cell<span class="sym">)</span> <span class="num">1</span><span class="sym">)))</span>
                                       <span class="sym">(</span>else
			          	<span class="sym">(</span>put<span class="sym">-</span>hash<span class="sym">! (</span><span class="kwa">cons</span> key <span class="num">1</span><span class="sym">)</span> count<span class="sym">))))</span>
			       <span class="sym">(</span>ignore<span class="sym">))</span>
			      <span class="sym">((:</span> <span class="kwa">not</span><span class="sym">-</span>word<span class="sym">)</span>
			       <span class="sym">(</span>ignore<span class="sym">))</span>
			      <span class="sym">(</span>else
			       <span class="sym">(</span>the<span class="sym">-</span>failure<span class="sym">)))</span>
	     <span class="sym">(</span>current<span class="sym">-</span>input<span class="sym">-</span>port<span class="sym">))</span>

    <span class="sym">(</span>let <span class="sym">((</span>alist <span class="str">'()))</span>
<span class="str">      (for-each-hash (lambda (cell)</span>
<span class="str">		       (let ((key (car cell))</span>
<span class="str">			     (val (cdr cell)))</span>
<span class="str">			 (set! alist (cons (cons key val) alist))))</span>
<span class="str">		     count)</span>
<span class="str"></span>
<span class="str">      (for-each (lambda (cell)</span>
<span class="str">		  (printf #&quot;%7d %s</span><span class="esc">\n</span><span class="str">&quot; (cdr cell) (car cell)))</span>
<span class="str">		(sort alist (lambda (x y)</span>
<span class="str">			      (let ((xval (cdr x))</span>
<span class="str">				    (yval (cdr y)))</span>
<span class="str">			      (if (= xval yval)</span>
<span class="str">				  (string&lt;? (car y) (car x))</span>
<span class="str">				  (&lt; yval xval)))))))))</span>
