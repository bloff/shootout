<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: scheme -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: wordfreq-bigloo.code,v 1.2 2004-11-08 08:15:54 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">;;; with help from Sven Hartrumpf
</FONT></I>
(module hash
	(main main)
	(extern (macro printf::int (string int string) <B><FONT COLOR="#BC8F8F">&quot;printf&quot;</FONT></B>)))


(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((max (<B><FONT COLOR="#A020F0">do</FONT></B> ((max 1 (* max 2))) ((&gt; max 75000) max)))
	 (count (make-hash-table max
				  (<B><FONT COLOR="#A020F0">lambda</FONT></B> (o) (string-&gt;0..2^x-1 o 16))
				  (<B><FONT COLOR="#A020F0">lambda</FONT></B> (c) (car c))
				  string=?
				  max)))

    (read/rp (regular-grammar ((word (+ (in (<B><FONT COLOR="#BC8F8F">&quot;azAZ&quot;</FONT></B>))))
			       (not-word (+ (out (<B><FONT COLOR="#BC8F8F">&quot;azAZ&quot;</FONT></B>)))))
			      ((: word)
			       (<B><FONT COLOR="#A020F0">let*</FONT></B> ((key (string-downcase! (the-string)))
				      (old-cell (get-hash key count)))
                                 (<B><FONT COLOR="#A020F0">cond</FONT></B> (old-cell
					(set-cdr! old-cell (+ (cdr old-cell) 1)))
                                       (<B><FONT COLOR="#A020F0">else</FONT></B>
			          	(put-hash! (cons key 1) count))))
			       (ignore))
			      ((: not-word)
			       (ignore))
			      (<B><FONT COLOR="#A020F0">else</FONT></B>
			       (the-failure)))
	     (current-input-port))

    (<B><FONT COLOR="#A020F0">let</FONT></B> ((alist '()))
      (for-each-hash (<B><FONT COLOR="#A020F0">lambda</FONT></B> (cell)
		       (<B><FONT COLOR="#A020F0">let</FONT></B> ((key (car cell))
			     (val (cdr cell)))
			 (<B><FONT COLOR="#A020F0">set!</FONT></B> alist (cons (cons key val) alist))))
		     count)
      
      (for-each (<B><FONT COLOR="#A020F0">lambda</FONT></B> (cell)
		  (printf #<B><FONT COLOR="#BC8F8F">&quot;%7d %s\n&quot;</FONT></B> (cdr cell) (car cell)))
		(sort alist (<B><FONT COLOR="#A020F0">lambda</FONT></B> (x y)
			      (<B><FONT COLOR="#A020F0">let</FONT></B> ((xval (cdr x))
				    (yval (cdr y)))
			      (<B><FONT COLOR="#A020F0">if</FONT></B> (= xval yval)
				  (string&lt;? (car y) (car x))
				  (&lt; yval xval)))))))))</pre></td></tr></table>
