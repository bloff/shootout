<span class="line">    1 </span><span class="slc">// -*- mode: c++ -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// $Id: sieve-gpp-2.code,v 1.4 2004-11-13 07:43:20 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="dir">#include &lt;iostream&gt;
</span><span class="line">    6 </span><span class="dir"></span><span class="dir">#include &lt;vector&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;list&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;cstdlib&gt;
</span><span class="line">    9 </span><span class="dir"></span>
<span class="line">   10 </span><span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym"></span><span class="kwb">void</span> sieve<span class="sym">(</span>list<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;&amp;</span> unknown<span class="sym">,</span> vector<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;&amp;</span> primes<span class="sym">)
</span><span class="line">   13 </span><span class="sym">{
</span><span class="line">   14 </span><span class="sym"></span>        <span class="kwa">while</span> <span class="sym">(!</span>unknown<span class="sym">.</span>empty<span class="sym">())
</span><span class="line">   15 </span><span class="sym">        {
</span><span class="line">   16 </span><span class="sym"></span>                <span class="kwb">int</span> p <span class="sym">=</span> unknown<span class="sym">.</span>front<span class="sym">();
</span><span class="line">   17 </span><span class="sym"></span>                unknown<span class="sym">.</span>pop_front<span class="sym">();
</span><span class="line">   18 </span><span class="sym"></span>                list<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;::</span>iterator i <span class="sym">=</span> unknown<span class="sym">.</span>begin<span class="sym">();
</span><span class="line">   19 </span><span class="sym"></span>                <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">!=</span> unknown<span class="sym">.</span>end<span class="sym">())
</span><span class="line">   20 </span><span class="sym">                {
</span><span class="line">   21 </span><span class="sym"></span>                        <span class="kwa">if</span> <span class="sym">(*</span>i <span class="sym">%</span> p<span class="sym">)
</span><span class="line">   22 </span><span class="sym">                                ++</span>i<span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>                        <span class="kwa">else
</span><span class="line">   24 </span><span class="kwa"></span>                                i <span class="sym">=</span> unknown<span class="sym">.</span>erase<span class="sym">(</span>i<span class="sym">);
</span><span class="line">   25 </span><span class="sym">                }
</span><span class="line">   26 </span><span class="sym"></span>                primes<span class="sym">.</span>push_back<span class="sym">(</span>p<span class="sym">);
</span><span class="line">   27 </span><span class="sym">        }
</span><span class="line">   28 </span><span class="sym">}
</span><span class="line">   29 </span><span class="sym">
</span><span class="line">   30 </span><span class="sym"></span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])
</span><span class="line">   31 </span><span class="sym">{
</span><span class="line">   32 </span><span class="sym"></span>    <span class="kwb">size_t</span> NUM <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span> ? <span class="sym">(</span>atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) &lt;</span> <span class="num">1</span> ? <span class="num">1</span> <span class="sym">:</span> atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])):
</span><span class="line">   33 </span><span class="sym"></span><span class="num">1</span><span class="sym">);
</span><span class="line">   34 </span><span class="sym">
</span><span class="line">   35 </span><span class="sym"></span>        vector<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;</span> primes<span class="sym">;
</span><span class="line">   36 </span><span class="sym">
</span><span class="line">   37 </span><span class="sym"></span>        <span class="slc">// run the sieve repeatedly
</span><span class="line">   38 </span><span class="slc"></span>    <span class="kwa">while</span> <span class="sym">(</span>NUM<span class="sym">--) {
</span><span class="line">   39 </span><span class="sym"></span>                list<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;</span> integers<span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>                <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">8192</span><span class="sym">; ++</span>i<span class="sym">)
</span><span class="line">   41 </span><span class="sym"></span>                        integers<span class="sym">.</span>push_back<span class="sym">(</span>i<span class="sym">);
</span><span class="line">   42 </span><span class="sym"></span>                primes<span class="sym">.</span>clear<span class="sym">();
</span><span class="line">   43 </span><span class="sym"></span>                sieve<span class="sym">(</span>integers<span class="sym">,</span> primes<span class="sym">);
</span><span class="line">   44 </span><span class="sym">    }
</span><span class="line">   45 </span><span class="sym">
</span><span class="line">   46 </span><span class="sym"></span>    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Count: &quot;</span> <span class="sym">&lt;&lt;</span> primes<span class="sym">.</span>size<span class="sym">() &lt;&lt;</span> endl<span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span>        <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   48 </span><span class="sym">}</span>
