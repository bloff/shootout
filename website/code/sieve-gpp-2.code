<span class="slc">// -*- mode: c++ -*-
</span><span class="slc">// $Id: sieve-gpp-2.code,v 1.6 2005-03-15 06:18:19 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org/
</span>
<span class="dir">#include &lt;iostream&gt;
</span><span class="dir">#include &lt;vector&gt;
</span><span class="dir">#include &lt;list&gt;
</span><span class="dir">#include &lt;cstdlib&gt;
</span>
<span class="kwa">using namespace</span> std<span class="sym">;

</span><span class="kwb">void</span> sieve<span class="sym">(</span>list<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;&amp;</span> unknown<span class="sym">,</span> vector<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;&amp;</span> primes<span class="sym">)
{
</span>	<span class="kwa">while</span> <span class="sym">(!</span>unknown<span class="sym">.</span>empty<span class="sym">())
	{
</span>		<span class="kwb">int</span> p <span class="sym">=</span> unknown<span class="sym">.</span>front<span class="sym">();
</span>		unknown<span class="sym">.</span>pop_front<span class="sym">();
</span>		list<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;::</span>iterator i <span class="sym">=</span> unknown<span class="sym">.</span>begin<span class="sym">();
</span>		<span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">!=</span> unknown<span class="sym">.</span>end<span class="sym">())
		{
</span>			<span class="kwa">if</span> <span class="sym">(*</span>i <span class="sym">%</span> p<span class="sym">)
				++</span>i<span class="sym">;
</span>			<span class="kwa">else
</span>				i <span class="sym">=</span> unknown<span class="sym">.</span>erase<span class="sym">(</span>i<span class="sym">);
		}
</span>		primes<span class="sym">.</span>push_back<span class="sym">(</span>p<span class="sym">);
	}
}

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])
{
</span>    <span class="kwb">size_t</span> NUM <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span> ? <span class="sym">(</span>atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) &lt;</span> <span class="num">1</span> ? <span class="num">1</span> <span class="sym">:</span> atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])):
</span><span class="num">1</span><span class="sym">);

</span>	vector<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;</span> primes<span class="sym">;

</span>	<span class="slc">// run the sieve repeatedly
</span>    <span class="kwa">while</span> <span class="sym">(</span>NUM<span class="sym">--) {
</span>		list<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;</span> integers<span class="sym">;
</span>		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">8192</span><span class="sym">; ++</span>i<span class="sym">)
</span>			integers<span class="sym">.</span>push_back<span class="sym">(</span>i<span class="sym">);
</span>		primes<span class="sym">.</span>clear<span class="sym">();
</span>		sieve<span class="sym">(</span>integers<span class="sym">,</span> primes<span class="sym">);
    }

</span>    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Count: &quot;</span> <span class="sym">&lt;&lt;</span> primes<span class="sym">.</span>size<span class="sym">() &lt;&lt;</span> endl<span class="sym">;
</span>	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span>
