<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: sieve-gpp-2.code,v 1.1 2004-11-08 14:59:29 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://shootout.alioth.debian.org/
</FONT></I>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iostream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;vector&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;list&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;cstdlib&gt;</FONT></B>

using namespace std;

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">sieve</FONT></B>(list&lt;<B><FONT COLOR="#228B22">int</FONT></B>&gt;&amp; unknown, vector&lt;<B><FONT COLOR="#228B22">int</FONT></B>&gt;&amp; primes)
{
	<B><FONT COLOR="#A020F0">while</FONT></B> (!unknown.empty())
	{
		<B><FONT COLOR="#228B22">int</FONT></B> p = unknown.front();
		unknown.pop_front();
		list&lt;<B><FONT COLOR="#228B22">int</FONT></B>&gt;::iterator i = unknown.begin();
		<B><FONT COLOR="#A020F0">while</FONT></B> (i != unknown.end())
		{
			<B><FONT COLOR="#A020F0">if</FONT></B> (*i % p)
				++i;
			<B><FONT COLOR="#A020F0">else</FONT></B>
				i = unknown.erase(i);
		}
		primes.push_back(p);
	}
}

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> argc, <B><FONT COLOR="#228B22">char</FONT></B> *argv[]) 
{
    size_t NUM = (argc == 2 ? (atoi(argv[1]) &lt; 1 ? 1 : atoi(argv[1])): 
1);

	vector&lt;<B><FONT COLOR="#228B22">int</FONT></B>&gt; primes;

	<I><FONT COLOR="#B22222">// run the sieve repeatedly
</FONT></I>    <B><FONT COLOR="#A020F0">while</FONT></B> (NUM--) {
		list&lt;<B><FONT COLOR="#228B22">int</FONT></B>&gt; integers;
		<B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#228B22">int</FONT></B> i = 2; i &lt; 8192; ++i)
			integers.push_back(i);
		primes.clear();
		sieve(integers, primes);
    }

    cout &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot;Count: &quot;</FONT></B> &lt;&lt; primes.size() &lt;&lt; endl;
	<B><FONT COLOR="#A020F0">return</FONT></B> 0;
}</pre></td></tr></table>
