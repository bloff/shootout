<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

INTBL <span class="sym">=</span> <span class="str">&quot;wsatugcyrkmbdhvnATUGCYRKMBDHVN&quot;</span>
OUTBL <span class="sym">=</span> <span class="str">&quot;WSTAACGRYMKVHDBNTAACGRYMKVHDBN&quot;</span>

THRESHOLD <span class="sym">=</span> <span class="num">32</span> <span class="sym">;</span> LINELENGTH <span class="sym">=</span> <span class="num">60</span> <span class="sym">;</span> NULL <span class="sym">=</span> <span class="str">&quot;&quot;</span> <span class="sym">;</span> HEAD <span class="sym">=</span> <span class="str">&quot;head&quot;</span> <span class="sym">;</span> DATA <span class="sym">=</span> <span class="str">&quot;data&quot;</span>

okToDump <span class="sym">=</span> <span class="num">0</span>

<span class="kwa">call</span> makeQueues

<span class="kwa">do while</span> <span class="kwb">LINES</span><span class="sym">() &gt;</span> <span class="num">0</span>
  <span class="kwb">line</span> <span class="sym">=</span> <span class="kwb">LINEIN</span><span class="sym">() ;</span> <span class="kwa">if</span> <span class="kwb">line</span> <span class="sym">==</span> NULL <span class="kwa">then</span> <span class="sym">;</span> <span class="kwa">leave</span>

  <span class="kwa">if</span> <span class="kwb">SUBSTR</span><span class="sym">(</span><span class="kwb">line</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">) ==</span> <span class="str">&quot;&gt;&quot;</span> <span class="kwa">then do</span>

    <span class="kwa">call</span> queueHeader <span class="kwb">line</span>
    <span class="kwa">if</span> \okToDump <span class="kwa">then do</span> <span class="sym">;</span> okToDump <span class="sym">=</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwa">iterate</span> <span class="sym">;</span> <span class="kwa">end</span>

    <span class="kwa">call</span> dumpSegment

  <span class="kwa">end</span> <span class="sym">;</span> <span class="kwa">else do</span>

    <span class="kwa">call</span> queueData <span class="kwb">line</span>

  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">call</span> dumpSegment

<span class="kwa">call</span> dropQueues <span class="sym">;</span> <span class="kwa">exit</span> <span class="num">0</span>

<span class="com">/* ----------------------------- */</span>

makeQueues <span class="sym">: ;</span> <span class="kwa">call</span> <span class="kwb">RXQUEUE</span> <span class="str">'C'</span><span class="sym">,</span> HEAD <span class="sym">;</span> <span class="kwa">call</span> <span class="kwb">RXQUEUE</span> <span class="str">'C'</span><span class="sym">,</span> DATA <span class="sym">;</span> <span class="kwa">return</span>

<span class="com">/* ----------- */</span>

dropQueues <span class="sym">: ;</span> <span class="kwa">call</span> <span class="kwb">RXQUEUE</span> <span class="str">'D'</span><span class="sym">,</span> HEAD <span class="sym">;</span> <span class="kwa">call</span> <span class="kwb">RXQUEUE</span> <span class="str">'D'</span><span class="sym">,</span> DATA <span class="sym">;</span> <span class="kwa">return</span>

<span class="com">/* ----------------------------- */</span>

queueHeader <span class="sym">: ;</span> <span class="kwa">call</span> <span class="kwb">RXQUEUE</span> <span class="str">'S'</span><span class="sym">,</span> HEAD <span class="sym">;</span> <span class="kwa">queue ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> <span class="kwa">call</span> <span class="kwb">RXQUEUE</span> <span class="str">'S'</span><span class="sym">,</span> DATA <span class="sym">;</span> <span class="kwa">return</span>

<span class="com">/* ----------- */</span>

queueData <span class="sym">: ;</span> <span class="kwa">push</span> <span class="kwb">REVERSE</span><span class="sym">(</span><span class="kwb">TRANSLATE</span><span class="sym">(</span><span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span> OUTBL<span class="sym">,</span> INTBL<span class="sym">)) ;</span> <span class="kwa">return</span>

<span class="com">/* ----------------------------- */</span>

dumpSegment <span class="sym">:</span> <span class="kwa">procedure expose</span> HEADER DATA THRESHOLD LINELENGTH NULL
  FORCEOUTPUT <span class="sym">=</span> <span class="num">1</span> <span class="sym">;</span> output <span class="sym">=</span> NULL <span class="sym">;</span> lineno <span class="sym">=</span> <span class="num">0</span>

  <span class="kwa">call</span> <span class="kwb">RXQUEUE</span> <span class="str">'S'</span><span class="sym">,</span> HEAD <span class="sym">;</span> <span class="kwa">parse pull</span> header <span class="sym">;</span> <span class="kwa">say</span> header <span class="sym">;</span> <span class="kwa">call</span> <span class="kwb">RXQUEUE</span> <span class="str">'S'</span><span class="sym">,</span> DATA

  <span class="kwa">do while</span> <span class="kwb">QUEUED</span><span class="sym">() &gt;</span> <span class="num">0</span>
    lineno <span class="sym">=</span> lineno <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwa">parse pull</span> <span class="kwb">line</span> <span class="sym">;</span> output <span class="sym">=</span> output <span class="sym">||</span> <span class="kwb">line</span>

    <span class="kwa">if</span> lineno <span class="sym">==</span> THRESHOLD <span class="kwa">then do</span>
      output <span class="sym">=</span> dumpSegmentLines<span class="sym">(</span>output<span class="sym">) ;</span> lineno <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">call</span> dumpSegmentLines output<span class="sym">,</span> FORCEOUTPUT <span class="sym">;</span> <span class="kwa">return</span>

<span class="com">/* ----------- */</span>

dumpSegmentLines <span class="sym">:</span> <span class="kwa">procedure expose</span> LINELENGTH NULL
  s <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> slen <span class="sym">=</span> <span class="kwb">LENGTH</span><span class="sym">(</span>s<span class="sym">) ;</span> stop <span class="sym">=</span> slen <span class="sym">%</span> LINELENGTH <span class="sym">;</span> remaining <span class="sym">=</span> slen <span class="sym">//</span> LINELENGTH

  <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">while</span> i <span class="sym">&lt;</span> stop
    start <span class="sym">=</span> LINELENGTH <span class="sym">*</span> i <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwa">say</span> <span class="kwb">SUBSTR</span><span class="sym">(</span>s<span class="sym">,</span> start<span class="sym">,</span> LINELENGTH<span class="sym">)</span>
  <span class="kwa">end</span>

  r <span class="sym">=</span> NULL

  <span class="kwa">if</span> remaining <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then do</span>
    r <span class="sym">=</span> <span class="kwb">SUBSTR</span><span class="sym">(</span>s<span class="sym">,</span> start <span class="sym">+</span> LINELENGTH<span class="sym">,</span> remaining<span class="sym">) ;</span> <span class="kwa">if</span> \<span class="kwa">ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="str">'O'</span><span class="sym">)</span> <span class="kwa">then</span> <span class="sym">;</span> <span class="kwa">say</span> r
  <span class="kwa">end</span>

  <span class="kwa">return</span> r
