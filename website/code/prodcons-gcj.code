<span class="slc">// $Id: prodcons-gcj.code,v 1.8 2006-01-03 06:05:21 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>
<span class="slc">// Producer-Consumer Example by Bill Lear</span>
<span class="slc">// Adapted from http://java.sun.com/docs/books/tutorial/essential/threads</span>

<span class="kwa">public class</span> prodcons <span class="sym">{</span>
    <span class="kwa">private class</span> CubbyHole <span class="sym">{</span>
        <span class="kwa">private</span> <span class="kwb">int</span> m_contents<span class="sym">;</span>
        <span class="kwa">private</span> <span class="kwb">boolean</span> m_available <span class="sym">=</span> false<span class="sym">;</span>

        <span class="kwa">public synchronized</span> <span class="kwb">int</span> <span class="kwd">get</span><span class="sym">() {</span>
            <span class="kwa">while</span> <span class="sym">(</span>m_available <span class="sym">==</span> false<span class="sym">) {</span>
                <span class="kwa">try</span> <span class="sym">{</span>
                    <span class="kwd">wait</span><span class="sym">();</span>
                <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }</span>
            <span class="sym">}</span>
            m_available <span class="sym">=</span> false<span class="sym">;</span>
            <span class="kwd">notifyAll</span><span class="sym">();</span>
            <span class="kwa">return</span> m_contents<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public synchronized</span> <span class="kwb">void</span> <span class="kwd">put</span><span class="sym">(</span><span class="kwb">int</span> value<span class="sym">) {</span>
            <span class="kwa">while</span> <span class="sym">(</span>m_available <span class="sym">==</span> true<span class="sym">) {</span>
                <span class="kwa">try</span> <span class="sym">{</span>
                    <span class="kwd">wait</span><span class="sym">();</span>
                <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }</span>
            <span class="sym">}</span>
            m_contents <span class="sym">=</span> value<span class="sym">;</span>
            m_available <span class="sym">=</span> true<span class="sym">;</span>
            <span class="kwd">notifyAll</span><span class="sym">();</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">private class</span> Producer <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{</span>
        <span class="kwa">private</span> CubbyHole m_cubbyhole<span class="sym">;</span>
        <span class="kwa">private</span> <span class="kwb">int</span> m_count<span class="sym">;</span>

        <span class="kwa">public</span> <span class="kwd">Producer</span><span class="sym">(</span>CubbyHole c<span class="sym">,</span> <span class="kwb">int</span> count<span class="sym">) {</span>
            m_cubbyhole <span class="sym">=</span> c<span class="sym">;</span>
            m_count <span class="sym">=</span> count<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> m_count<span class="sym">;</span> i<span class="sym">++) {</span>
                m_cubbyhole<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span>i<span class="sym">);</span>
                <span class="sym">++</span>m_produced<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">private class</span> Consumer <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{</span>
        <span class="kwa">private</span> CubbyHole m_cubbyhole<span class="sym">;</span>
        <span class="kwa">private</span> <span class="kwb">int</span> m_count<span class="sym">;</span>

        <span class="kwa">public</span> <span class="kwd">Consumer</span><span class="sym">(</span>CubbyHole c<span class="sym">,</span> <span class="kwb">int</span> count<span class="sym">) {</span>
            m_cubbyhole <span class="sym">=</span> c<span class="sym">;</span>
            m_count <span class="sym">=</span> count<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
            <span class="kwb">int</span> value <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> m_count<span class="sym">;</span> i<span class="sym">++) {</span>
                value <span class="sym">=</span> m_cubbyhole<span class="sym">.</span><span class="kwd">get</span><span class="sym">();</span>
                <span class="sym">++</span>m_consumed<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
        m_producer<span class="sym">.</span><span class="kwd">start</span><span class="sym">();</span>
        m_consumer<span class="sym">.</span><span class="kwd">start</span><span class="sym">();</span>
        <span class="kwa">try</span> <span class="sym">{</span> m_producer<span class="sym">.</span><span class="kwd">join</span><span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }</span>
        <span class="kwa">try</span> <span class="sym">{</span> m_consumer<span class="sym">.</span><span class="kwd">join</span><span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }</span>
        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>m_produced <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> m_consumed<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwd">prodcons</span><span class="sym">(</span><span class="kwb">int</span> count<span class="sym">) {</span>
        CubbyHole m_cubbyhole <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">CubbyHole</span><span class="sym">();</span>
        m_producer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Producer</span><span class="sym">(</span>m_cubbyhole<span class="sym">,</span> count<span class="sym">);</span>
        m_consumer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Consumer</span><span class="sym">(</span>m_cubbyhole<span class="sym">,</span> count<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {</span>
        <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">try</span> <span class="sym">{</span> count <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) { }</span>
        <span class="kwa">new</span> <span class="kwd">prodcons</span><span class="sym">(</span>count<span class="sym">).</span><span class="kwd">run</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">private</span> Producer m_producer<span class="sym">;</span>
    <span class="kwa">private</span> Consumer m_consumer<span class="sym">;</span>
    <span class="kwa">private</span> <span class="kwb">int</span> m_produced <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">private</span> <span class="kwb">int</span> m_consumed <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
