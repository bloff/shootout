variable Toggle <span class="sym">=</span> <span class="kwb">struct</span> <span class="sym">{</span> state<span class="sym">,</span> value<span class="sym">,</span> activate <span class="sym">};

</span>define toggle_value <span class="sym">(</span><span class="kwa">this</span><span class="sym">)
{
</span>   <span class="kwa">return this</span><span class="sym">.</span>state<span class="sym">;
}

</span>define toggle_activate <span class="sym">(</span><span class="kwa">this</span><span class="sym">)
{
</span>   <span class="kwa">this</span><span class="sym">.</span>state <span class="sym">=</span> <span class="kwa">not this</span><span class="sym">.</span>state<span class="sym">;
</span>   <span class="kwa">return this</span><span class="sym">;
}

</span>define init_Toggle <span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> start_state<span class="sym">)
{
</span>   <span class="kwa">this</span><span class="sym">.</span>state <span class="sym">=</span> start_state<span class="sym">;
</span>   <span class="kwa">this</span><span class="sym">.</span>value <span class="sym">= &amp;</span>toggle_value<span class="sym">;
</span>   <span class="kwa">this</span><span class="sym">.</span>activate <span class="sym">= &amp;</span>toggle_activate<span class="sym">;
</span>   <span class="kwa">return this</span><span class="sym">;
}
</span>define new_Toggle <span class="sym">(</span>start_state<span class="sym">)
{
</span>   <span class="kwa">return</span> init_Toggle <span class="sym">(</span>&#64;Toggle<span class="sym">,</span> start_state<span class="sym">);
}

</span>define NthToggle_activate <span class="sym">(</span><span class="kwa">this</span><span class="sym">)
{
</span>   variable counter <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>counter<span class="sym">;
</span>   counter<span class="sym">++;
</span>   <span class="kwa">if</span> <span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span>count_max <span class="sym">&lt;=</span> counter<span class="sym">)
     {
</span>	<span class="kwa">this</span><span class="sym">.</span>state <span class="sym">=</span> <span class="kwa">not</span> <span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span>state<span class="sym">);
</span>	counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;
    }
</span>   <span class="kwa">this</span><span class="sym">.</span>counter <span class="sym">=</span> counter<span class="sym">;
</span>   <span class="kwa">return this</span><span class="sym">;
}

</span>define init_NthToggle <span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> max_count<span class="sym">)
{
</span>   <span class="kwa">this</span><span class="sym">.</span>count_max <span class="sym">=</span> max_count<span class="sym">;
</span>   <span class="kwa">this</span><span class="sym">.</span>counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>   <span class="kwa">this</span><span class="sym">.</span>activate <span class="sym">= &amp;</span>NthToggle_activate<span class="sym">;
</span>   <span class="kwa">return this</span><span class="sym">;
}

</span>variable NthToggle <span class="sym">=</span> &#64;Struct_Type
  <span class="sym">([</span>get_struct_field_names<span class="sym">(</span>Toggle<span class="sym">),</span> <span class="str">&quot;count_max&quot;</span><span class="sym">,</span> <span class="str">&quot;counter&quot;</span><span class="sym">]);

</span>define new_NthToggle <span class="sym">(</span>start_state<span class="sym">,</span> max_count<span class="sym">)
{
</span>   variable <span class="kwa">this</span> <span class="sym">=</span> init_Toggle<span class="sym">(</span>&#64;NthToggle<span class="sym">,</span> start_state<span class="sym">);
</span>   <span class="kwa">return</span> init_NthToggle<span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> max_count<span class="sym">);
}

</span>define do_toggle <span class="sym">(</span>tog<span class="sym">,</span> n<span class="sym">)
{
</span>   variable val<span class="sym">;
</span>   loop <span class="sym">(</span>n<span class="sym">)
</span>     val <span class="sym">=</span> &#64;<span class="sym">((</span>&#64;tog<span class="sym">.</span>activate<span class="sym">)(</span>tog<span class="sym">).</span>value<span class="sym">)(</span>tog<span class="sym">);
}

</span>define main <span class="sym">()
{
</span>   variable n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> n <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);

</span>   variable tog<span class="sym">,</span> ntog<span class="sym">,</span> val<span class="sym">;
</span>   tog <span class="sym">=</span> new_Toggle<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span>   loop <span class="sym">(</span><span class="num">5</span><span class="sym">)
     {
</span>	val <span class="sym">=</span> &#64;<span class="sym">((</span>&#64;tog<span class="sym">.</span>activate<span class="sym">)(</span>tog<span class="sym">).</span>value<span class="sym">)(</span>tog<span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>val<span class="sym">)
</span>	  fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>	<span class="kwa">else
</span>	  fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
     }

</span>   loop <span class="sym">(</span>n<span class="sym">)
</span>     tog <span class="sym">=</span> new_Toggle<span class="sym">(</span><span class="num">1</span><span class="sym">);

   () =</span> fputs<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);

</span>   ntog <span class="sym">=</span> new_NthToggle<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span>   loop <span class="sym">(</span><span class="num">8</span><span class="sym">)
     {
</span>	val <span class="sym">=</span> &#64;<span class="sym">((</span>&#64;ntog<span class="sym">.</span>activate<span class="sym">)(</span>ntog<span class="sym">).</span>value<span class="sym">)(</span>ntog<span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>val<span class="sym">)
</span>	  fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>	<span class="kwa">else
</span>	  fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
     }
</span>   loop <span class="sym">(</span>n<span class="sym">)
</span>     ntog <span class="sym">=</span> new_NthToggle<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);
}
</span>main <span class="sym">();</span>
