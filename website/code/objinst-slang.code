<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
variable Toggle = <B><FONT COLOR="#228B22">struct</FONT></B> { state, value, activate };

define <B><FONT COLOR="#0000FF">toggle_value</FONT></B> (this) 
{
   <B><FONT COLOR="#A020F0">return</FONT></B> this.state;
}

define <B><FONT COLOR="#0000FF">toggle_activate</FONT></B> (this)
{
   this.state = not this.state;
   <B><FONT COLOR="#A020F0">return</FONT></B> this;
}

define <B><FONT COLOR="#0000FF">init_Toggle</FONT></B> (this, start_state) 
{
   this.state = start_state;
   this.value = &amp;toggle_value;
   this.activate = &amp;toggle_activate;
   <B><FONT COLOR="#A020F0">return</FONT></B> this;
}
define <B><FONT COLOR="#0000FF">new_Toggle</FONT></B> (start_state) 
{
   <B><FONT COLOR="#A020F0">return</FONT></B> init_Toggle (@Toggle, start_state);
}

define <B><FONT COLOR="#0000FF">NthToggle_activate</FONT></B> (this)
{
   variable counter = this.counter;
   counter++;
   <B><FONT COLOR="#A020F0">if</FONT></B> (this.count_max &lt;= counter)
     {
	this.state = not (this.state);
	counter = 0;
    }
   this.counter = counter;
   <B><FONT COLOR="#A020F0">return</FONT></B> this;
}

define <B><FONT COLOR="#0000FF">init_NthToggle</FONT></B> (this, max_count) 
{
   this.count_max = max_count;
   this.counter = 0;
   this.activate = &amp;NthToggle_activate;
   <B><FONT COLOR="#A020F0">return</FONT></B> this;
}

variable NthToggle = @Struct_Type
  ([get_struct_field_names(Toggle), <B><FONT COLOR="#BC8F8F">&quot;count_max&quot;</FONT></B>, <B><FONT COLOR="#BC8F8F">&quot;counter&quot;</FONT></B>]);

define <B><FONT COLOR="#0000FF">new_NthToggle</FONT></B> (start_state, max_count) 
{
   variable this = init_Toggle(@NthToggle, start_state);
   <B><FONT COLOR="#A020F0">return</FONT></B> init_NthToggle(this, max_count);
}

define <B><FONT COLOR="#0000FF">do_toggle</FONT></B> (tog, n)
{
   variable val;
   loop (n)
     val = @((@tog.activate)(tog).value)(tog);
}

define <B><FONT COLOR="#0000FF">main</FONT></B> ()
{
   variable n = 1;
   <B><FONT COLOR="#A020F0">if</FONT></B> (__argc == 2) n = integer (__argv[1]);
   
   variable tog, ntog, val;
   tog = new_Toggle(1);
   loop (5)
     {
	val = @((@tog.activate)(tog).value)(tog);
	<B><FONT COLOR="#A020F0">if</FONT></B> (val)
	  fprintf (stdout, <B><FONT COLOR="#BC8F8F">&quot;true\n&quot;</FONT></B>);
	<B><FONT COLOR="#A020F0">else</FONT></B>
	  fprintf (stdout, <B><FONT COLOR="#BC8F8F">&quot;false\n&quot;</FONT></B>);
     }
   
   loop (n)
     tog = new_Toggle(1);
    
   () = fputs(<B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>, stdout);

   ntog = new_NthToggle(1, 3);
   loop (8)
     {
	val = @((@ntog.activate)(ntog).value)(ntog);
	<B><FONT COLOR="#A020F0">if</FONT></B> (val)
	  fprintf (stdout, <B><FONT COLOR="#BC8F8F">&quot;true\n&quot;</FONT></B>);
	<B><FONT COLOR="#A020F0">else</FONT></B>
	  fprintf (stdout, <B><FONT COLOR="#BC8F8F">&quot;false\n&quot;</FONT></B>);
     }
   loop (n)
     ntog = new_NthToggle(1, 3);
}
<B><FONT COLOR="#0000FF">main</FONT></B> ();</pre></td></tr></table>
