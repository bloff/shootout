<span class="kwb">module</span><span class="sym">:</span> fibo

<span class="kwa">define function</span> fibo<span class="sym">(</span>M <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)
 =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">;
</span>  <span class="kwa">case
</span>    M <span class="kwa">&lt;</span> <span class="num">2</span>     <span class="kwa">=&gt;</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">otherwise</span> <span class="sym">=</span>&gt; fibo <span class="sym">(</span>M <span class="num">- 2</span><span class="sym">) +</span> fibo <span class="sym">(</span>M <span class="num">- 1</span><span class="sym">);
</span>  <span class="kwa">end case</span><span class="sym">;
</span><span class="kwa">end function</span> fibo<span class="sym">;

</span><span class="kwa">begin
  let</span> arg <span class="sym">=</span> application<span class="sym">-</span>arguments<span class="sym">()[</span><span class="num">0</span><span class="sym">]</span>.string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">;
</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> fibo<span class="sym">(</span>arg<span class="sym">));
</span><span class="kwa">end</span><span class="sym">;
</span>
