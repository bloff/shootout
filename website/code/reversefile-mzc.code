#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: reversefile-mzc.code,v 1.7 2006-06-07 04:37:43 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; Provided by Bengt Kleberg</span>
<span class="sym">(</span>define <span class="kwa">reverse</span><span class="sym">-</span>input
   <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>inport<span class="sym">)</span>
     <span class="sym">(</span>letrec <span class="sym">((</span>rev <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span><span class="kwa">line</span><span class="sym">)</span>
		    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>eof<span class="sym">-</span>object? <span class="kwa">line</span><span class="sym">)</span>
                         <span class="str">'ok</span>
<span class="str">		      (begin</span>
<span class="str">		       (rev (read-line inport))</span>
<span class="str">		       (display line)</span>
<span class="str">		       (newline))))))</span>
<span class="str">	    (rev  (read-line inport)))))</span>
<span class="str"></span>
<span class="str">(define main</span>
<span class="str">   (lambda ()</span>
<span class="str">     (reverse-input (current-input-port))))</span>
<span class="str"></span>
<span class="str">(main)</span>
