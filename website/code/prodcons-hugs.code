<span class="slc">-- $Id: prodcons-hugs.code,v 1.6 2005-03-19 07:50:22 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- by JP Bernardy, optimized by Einar Karttunen
</span>
<span class="kwa">import</span> Control.Concurrent
<span class="kwa">import</span> System

producer n m mv <span class="sym">|</span> n <span class="sym">==</span> m <span class="sym">=</span> return m
		<span class="sym">|</span> <span class="kwa">True</span>   <span class="sym">=</span> putMVar mv n <span class="sym">&gt;&gt;</span> producer <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> m mv

consumer <span class="num">0</span> m mv <span class="sym">=</span> return m
consumer n m mv <span class="sym">=</span> takeMVar mv <span class="sym">&gt;&gt;</span> consumer <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)</span> m mv

main <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">[</span>a<span class="sym">] &lt;-</span> getArgs
          <span class="kwa">let</span> n <span class="sym">=</span> read a <span class="sym">::</span> <span class="kwb">Int
</span>          mvar <span class="sym">&lt;-</span> newEmptyMVar
	  ret  <span class="sym">&lt;-</span> newEmptyMVar
          forkIO <span class="sym">(</span>producer <span class="num">0</span> n mvar <span class="sym">&gt;&gt;=</span> putMVar ret<span class="sym">)
</span>	  m <span class="sym">&lt;-</span> consumer n n mvar
	  r <span class="sym">&lt;-</span> takeMVar ret
	  putStrLn <span class="sym">(</span>show r <span class="sym">++</span> <span class="str">&quot; &quot;</span> <span class="sym">++</span> show m<span class="sym">)</span>
