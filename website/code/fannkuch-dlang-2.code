<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>

<span class="slc">// Converted and improved from C to D by bearophile</span>
<span class="slc">// Compile:  dmd -O -release fannkuch.d</span>

<span class="slc">// This code doesn't look nice because it's optimized</span>
<span class="slc">//   for speed. D code that looks better is possible.</span>

<span class="kwa">import</span> std<span class="sym">.</span>string<span class="sym">:</span> atoi<span class="sym">;</span>
<span class="kwa">import</span> std<span class="sym">.</span>c<span class="sym">.</span>stdlib<span class="sym">:</span> calloc<span class="sym">;</span>
<span class="kwa">import</span> std<span class="sym">.</span>c<span class="sym">.</span>string<span class="sym">:</span> memcpy<span class="sym">;</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">) {</span>
    size_t n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(%d) = %ld</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">));</span>
<span class="sym">}</span>

size_t <span class="kwd">fannkuch</span><span class="sym">(</span>size_t n<span class="sym">) {</span>
    size_t<span class="sym">*</span> perm<span class="sym">;</span>
    size_t<span class="sym">*</span> perm1<span class="sym">;</span>
    size_t<span class="sym">*</span> count<span class="sym">;</span>
    size_t flips<span class="sym">,</span> flipsMax<span class="sym">,</span> aux<span class="sym">,</span> r<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">,</span> didpr<span class="sym">;</span>
    size_t n1 <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span>
        <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>

    perm <span class="sym">=</span> <span class="kwa">cast</span><span class="sym">(</span><span class="kwa">typeof</span><span class="sym">(</span>perm<span class="sym">))</span><span class="kwd">calloc</span><span class="sym">(</span>n<span class="sym">, (*</span>perm<span class="sym">).</span>sizeof<span class="sym">);</span>
    perm1 <span class="sym">=</span> <span class="kwa">cast</span><span class="sym">(</span><span class="kwa">typeof</span><span class="sym">(</span>perm1<span class="sym">))</span><span class="kwd">calloc</span><span class="sym">(</span>n<span class="sym">, (*</span>perm1<span class="sym">).</span>sizeof<span class="sym">);</span>
    count <span class="sym">=</span> <span class="kwa">cast</span><span class="sym">(</span><span class="kwa">typeof</span><span class="sym">(</span>count<span class="sym">))</span><span class="kwd">calloc</span><span class="sym">(</span>n<span class="sym">, (*</span>count<span class="sym">).</span>sizeof<span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> i <span class="sym">&lt;</span> n <span class="sym">; ++</span>i<span class="sym">)</span>
        perm1<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>

    r <span class="sym">=</span> n<span class="sym">;</span>
    didpr <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    flipsMax <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">( ; ; ) {</span>
        <span class="kwa">if</span> <span class="sym">(</span>didpr <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">) {</span>
            <span class="kwa">for</span><span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">; ++</span>i<span class="sym">)</span>
                <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span> <span class="num">1</span> <span class="sym">+</span> perm1<span class="sym">[</span>i<span class="sym">]);</span>
            <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
            <span class="sym">++</span>didpr<span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwa">for</span> <span class="sym">( ;</span> r <span class="sym">!=</span> <span class="num">1</span><span class="sym">; --</span>r<span class="sym">)</span>
            count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span>

        <span class="kwa">if</span> <span class="sym">(!(</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="num">0</span> <span class="sym">||</span> perm1<span class="sym">[</span>n1<span class="sym">] ==</span> n1<span class="sym">)) {</span>
            flips <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="slc">// for (i = 1; i &lt; n; ++i) perm[i] = perm1[i];</span>
            <span class="kwd">memcpy</span><span class="sym">(&amp;(</span>perm<span class="sym">[</span><span class="num">1</span><span class="sym">]), &amp;(</span>perm1<span class="sym">[</span><span class="num">1</span><span class="sym">]), (*</span>perm<span class="sym">).</span>sizeof<span class="sym">*(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>
            k <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            <span class="kwa">do</span> <span class="sym">{</span>
                size_t j<span class="sym">;</span>
                <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> j <span class="sym">=</span> k<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> j<span class="sym">; ++</span>i<span class="sym">, --</span>j<span class="sym">) {</span>
                    aux <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">];</span>
                    perm<span class="sym">[</span>i<span class="sym">] =</span> perm<span class="sym">[</span>j<span class="sym">];</span>
                    perm<span class="sym">[</span>j<span class="sym">] =</span> aux<span class="sym">;</span>
                <span class="sym">}</span>
                <span class="sym">++</span>flips<span class="sym">;</span>
                j <span class="sym">=</span> perm<span class="sym">[</span>k<span class="sym">];</span>
                perm<span class="sym">[</span>k<span class="sym">] =</span> k<span class="sym">;</span>
                k <span class="sym">=</span> j<span class="sym">;</span>
            <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>k<span class="sym">);</span>
            <span class="kwa">if</span> <span class="sym">(</span>flipsMax <span class="sym">&lt;</span> flips<span class="sym">)</span>
                flipsMax <span class="sym">=</span> flips<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">for</span> <span class="sym">( ; ; ) {</span>
            <span class="kwa">if</span><span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span>
                <span class="kwa">return</span> flipsMax<span class="sym">;</span>
            <span class="sym">{</span>
                size_t perm0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
                i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> r<span class="sym">) {</span>
                    k <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>
                    perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>k<span class="sym">];</span>
                    i <span class="sym">=</span> k<span class="sym">;</span>
                <span class="sym">}</span>
                perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0<span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">if</span> <span class="sym">((</span>count<span class="sym">[</span>r<span class="sym">] -=</span> <span class="num">1</span><span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">)</span>
                <span class="kwa">break</span><span class="sym">;</span>
            <span class="sym">++</span>r<span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
