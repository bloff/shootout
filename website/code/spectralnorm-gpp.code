<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">//</span>
<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Original C contributed by Sebastien Loisel</span>
<span class="slc">// Conversion to C++ by Jon Harrop</span>
<span class="slc">// Compile: g++ -O3 -o spectralnorm spectralnorm.cpp</span>

<span class="dir">#include &lt;cmath&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwb">double</span> <span class="kwd">eval_A</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">) {</span> <span class="kwa">return</span> <span class="num">1.0</span> <span class="sym">/ ((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">); }</span>

<span class="kwb">void</span> <span class="kwd">eval_A_times_u</span><span class="sym">(</span><span class="kwb">const</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>u<span class="sym">,</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>Au<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>u<span class="sym">.</span><span class="kwd">size</span><span class="sym">();</span> i<span class="sym">++)</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>u<span class="sym">.</span><span class="kwd">size</span><span class="sym">();</span> j<span class="sym">++)</span> Au<span class="sym">[</span>i<span class="sym">] +=</span> <span class="kwd">eval_A</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) *</span> u<span class="sym">[</span>j<span class="sym">];</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">eval_At_times_u</span><span class="sym">(</span><span class="kwb">const</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>u<span class="sym">,</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>Au<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>u<span class="sym">.</span><span class="kwd">size</span><span class="sym">();</span> i<span class="sym">++)</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>u<span class="sym">.</span><span class="kwd">size</span><span class="sym">();</span> j<span class="sym">++)</span> Au<span class="sym">[</span>i<span class="sym">] +=</span> <span class="kwd">eval_A</span><span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">) *</span> u<span class="sym">[</span>j<span class="sym">];</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">eval_AtA_times_u</span><span class="sym">(</span><span class="kwb">const</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>u<span class="sym">,</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>AtAu<span class="sym">)</span>
<span class="sym">{</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> <span class="kwd">v</span><span class="sym">(</span>u<span class="sym">.</span><span class="kwd">size</span><span class="sym">());</span> <span class="kwd">eval_A_times_u</span><span class="sym">(</span>u<span class="sym">,</span> v<span class="sym">);</span> <span class="kwd">eval_At_times_u</span><span class="sym">(</span>v<span class="sym">,</span> AtAu<span class="sym">); }</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
  <span class="kwb">int</span> N <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">2000</span><span class="sym">);</span>
  vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> <span class="kwd">u</span><span class="sym">(</span>N<span class="sym">),</span> <span class="kwd">v</span><span class="sym">(</span>N<span class="sym">);</span>

  <span class="kwd">fill</span><span class="sym">(</span>u<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> u<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> <span class="num">1</span><span class="sym">);</span>

  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span> i<span class="sym">++) {</span>
    <span class="kwd">eval_AtA_times_u</span><span class="sym">(</span>u<span class="sym">,</span> v<span class="sym">);</span>
    <span class="kwd">fill</span><span class="sym">(</span>u<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> u<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> <span class="num">0</span><span class="sym">);</span>
    <span class="kwd">eval_AtA_times_u</span><span class="sym">(</span>v<span class="sym">,</span> u<span class="sym">);</span>
  <span class="sym">}</span>

  <span class="kwb">double</span> vBv<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> vv<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>N<span class="sym">;</span> i<span class="sym">++) {</span> vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];</span> vv <span class="sym">+=</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">]; }</span>

  cout <span class="sym">&lt;&lt;</span> <span class="kwd">setprecision</span><span class="sym">(</span><span class="num">10</span><span class="sym">) &lt;&lt;</span> <span class="kwd">sqrt</span><span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">) &lt;&lt;</span> endl<span class="sym">;</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
