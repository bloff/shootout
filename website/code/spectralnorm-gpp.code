<span class="slc">// -*- mode: c++ -*-
</span><span class="slc">//
</span><span class="slc">// The Great Computer Language Shootout
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">//
</span><span class="slc">// Original C contributed by Sebastien Loisel
</span><span class="slc">// Conversion to C++ by Jon Harrop
</span><span class="slc">// Compile: g++ -O3 -o spectralnorm spectralnorm.cpp
</span>
<span class="dir">#include &lt;cmath&gt;
</span><span class="dir">#include &lt;vector&gt;
</span><span class="dir">#include &lt;iostream&gt;
</span><span class="dir">#include &lt;iomanip&gt;
</span>
<span class="kwa">using namespace</span> std<span class="sym">;

</span><span class="kwb">double</span> eval_A<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">) {</span> <span class="kwa">return</span> <span class="num">1.0</span> <span class="sym">/ ((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span> <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">); }

</span><span class="kwb">void</span> eval_A_times_u<span class="sym">(</span><span class="kwb">const</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>u<span class="sym">,</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>Au<span class="sym">)
{
</span>  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>u<span class="sym">.</span>size<span class="sym">();</span> i<span class="sym">++)
</span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>u<span class="sym">.</span>size<span class="sym">();</span> j<span class="sym">++)</span> Au<span class="sym">[</span>i<span class="sym">] +=</span> eval_A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) *</span> u<span class="sym">[</span>j<span class="sym">];
}

</span><span class="kwb">void</span> eval_At_times_u<span class="sym">(</span><span class="kwb">const</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>u<span class="sym">,</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>Au<span class="sym">)
{
</span>  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>u<span class="sym">.</span>size<span class="sym">();</span> i<span class="sym">++)
</span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>u<span class="sym">.</span>size<span class="sym">();</span> j<span class="sym">++)</span> Au<span class="sym">[</span>i<span class="sym">] +=</span> eval_A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">) *</span> u<span class="sym">[</span>j<span class="sym">];
}

</span><span class="kwb">void</span> eval_AtA_times_u<span class="sym">(</span><span class="kwb">const</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>u<span class="sym">,</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt; &amp;</span>AtAu<span class="sym">)
{</span> vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> v<span class="sym">(</span>u<span class="sym">.</span>size<span class="sym">());</span> eval_A_times_u<span class="sym">(</span>u<span class="sym">,</span> v<span class="sym">);</span> eval_At_times_u<span class="sym">(</span>v<span class="sym">,</span> AtAu<span class="sym">); }

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])
{
</span>  <span class="kwb">int</span> N <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">2000</span><span class="sym">);
</span>  vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> u<span class="sym">(</span>N<span class="sym">),</span> v<span class="sym">(</span>N<span class="sym">);

</span>  fill<span class="sym">(</span>u<span class="sym">.</span>begin<span class="sym">(),</span> u<span class="sym">.</span>end<span class="sym">(),</span> <span class="num">1</span><span class="sym">);

</span>  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span> i<span class="sym">++) {
</span>    eval_AtA_times_u<span class="sym">(</span>u<span class="sym">,</span> v<span class="sym">);
</span>    fill<span class="sym">(</span>u<span class="sym">.</span>begin<span class="sym">(),</span> u<span class="sym">.</span>end<span class="sym">(),</span> <span class="num">0</span><span class="sym">);
</span>    eval_AtA_times_u<span class="sym">(</span>v<span class="sym">,</span> u<span class="sym">);
  }

</span>  <span class="kwb">double</span> vBv<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> vv<span class="sym">=</span><span class="num">0</span><span class="sym">;
</span>  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>N<span class="sym">;</span> i<span class="sym">++) {</span> vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];</span> vv <span class="sym">+=</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">]; }

</span>  cout <span class="sym">&lt;&lt;</span> setprecision<span class="sym">(</span><span class="num">10</span><span class="sym">) &lt;&lt;</span> sqrt<span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">) &lt;&lt;</span> endl<span class="sym">;

</span>  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span>
