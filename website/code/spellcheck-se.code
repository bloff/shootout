<span class="slc">-- -*- mode: eiffel -*-</span>
<span class="slc">-- $Id: spellcheck-se.code,v 1.12 2005-12-31 16:46:05 bfulgham Exp $</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- from Steve Thompson</span>
<span class="slc">-- Updated for current SmartEiffel by Brent Fulgham (with a lot</span>
<span class="slc">--   of help from Philippe Ribet!)</span>

<span class="slc">-- &lt;LOC-OFF&gt;</span>
<span class="slc">--indexing</span>
<span class="slc">--   description: &quot;This class performs the spell check test&quot;</span>
<span class="slc">--   author : Steve Thompson</span>
<span class="slc">--   email  : &quot;Steve_Thompson&#64;prodigy.net&quot;</span>
<span class="slc">--   date   : February 18, 2001</span>
<span class="slc">--   compile: &quot;compile -clean -boost -no_split -O3 spellcheck.e -o spellcheck&quot;</span>
<span class="slc">--   run    : &quot;spellcheck &lt; Input&quot;</span>
<span class="slc">-- &lt;LOC-ON&gt;</span>

<span class="kwa">class</span> SPELLCHECK

insert
	ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>
	<span class="slc">-- Creation</span>
   make <span class="kwa">is</span>
      <span class="kwa">do</span>
	 read_dictionary
	 <span class="kwa">from</span>
	    std_input.read_line
	 until std_input.end_of_input <span class="kwa">loop</span>
	    <span class="kwa">if</span> dictionary.<span class="kwd">has</span><span class="sym">(</span>std_input.last_string<span class="sym">) =</span> <span class="kwa">False then</span>
	       std_output.<span class="kwd">put_string</span><span class="sym">(</span>std_input.last_string<span class="sym">)</span>
	       std_output.put_new_line
	    <span class="kwa">end</span>
	    std_input.read_line
	 <span class="kwa">end</span>
      <span class="kwa">end</span> <span class="slc">-- make</span>

<span class="kwa">feature</span> <span class="slc">-- Queries</span>

   dictionary<span class="sym">:</span> DICTIONARY<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">,</span> STRING<span class="sym">]</span>

<span class="kwa">feature</span> <span class="slc">-- Commands</span>

   read_dictionary <span class="kwa">is</span>
      <span class="kwa">local</span>
	 file<span class="sym">:</span> TEXT_FILE_READ
	 value<span class="sym">:</span> <span class="kwb">INTEGER</span>
      <span class="kwa">do</span>
	 value <span class="sym">:=</span> <span class="num">1</span>
	 <span class="kwa">from</span>
	    <span class="sym">!!</span>dictionary.<span class="kwd">with_capacity</span><span class="sym">(</span><span class="num">60000</span><span class="sym">)</span>
	    <span class="sym">!!</span>file.<span class="kwd">connect_to</span><span class="sym">(</span><span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">)</span>
	 until
	    file.end_of_input
	 <span class="kwa">loop</span>
	    file.read_line
	    <span class="kwa">if not</span> file.last_string.is_empty <span class="kwa">then</span>
	       <span class="kwa">if not</span> dictionary.<span class="kwd">has</span><span class="sym">(</span>file.last_string<span class="sym">)</span> <span class="kwa">then</span>
	          dictionary.<span class="kwd">add</span><span class="sym">(</span>value<span class="sym">,</span> file.last_string.twin<span class="sym">)</span>
	       <span class="kwa">end</span>
	    <span class="kwa">end</span>
	 <span class="kwa">end</span>
	 file.disconnect
      <span class="kwa">end</span> <span class="slc">-- read_dictionary</span>

<span class="kwa">end</span>
