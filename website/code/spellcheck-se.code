<span class="slc">-- -*- mode: eiffel -*-
</span><span class="slc">-- $Id: spellcheck-se.code,v 1.7 2005-05-09 01:22:46 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- from Steve Thompson
</span><span class="slc">-- Updated for current SmartEiffel by Brent Fulgham (with a lot
</span><span class="slc">--   of help from Philippe Ribet!)
</span>
<span class="slc">-- &lt;LOC-OFF&gt;
</span><span class="slc">--indexing
</span><span class="slc">--   description: &quot;This class performs the spell check test&quot;
</span><span class="slc">--   author : Steve Thompson
</span><span class="slc">--   email  : &quot;Steve_Thompson&#64;prodigy.net&quot;
</span><span class="slc">--   date   : February 18, 2001
</span><span class="slc">--   compile: &quot;compile -clean -boost -no_split -O3 spellcheck.e -o spellcheck&quot;
</span><span class="slc">--   run    : &quot;spellcheck &lt; Input&quot;
</span><span class="slc">-- &lt;LOC-ON&gt;
</span>
<span class="kwa">class</span> SPELLCHECK

creation make

<span class="kwa">feature</span> <span class="slc">-- Creation
</span>
   make <span class="kwa">is
      do
</span>	 read_dictionary
	 <span class="kwa">from
</span>	    std_input.read_line
	 until std_input.end_of_input <span class="kwa">loop
	    if</span> dictionary.has<span class="sym">(</span>std_input.last_string<span class="sym">) =</span> <span class="kwa">False then
</span>	       std_output.put_string<span class="sym">(</span>std_input.last_string<span class="sym">)
</span>	       std_output.put_new_line
	    <span class="kwa">end
</span>	    std_input.read_line
	 <span class="kwa">end
      end</span> <span class="slc">-- make
</span>
<span class="kwa">feature</span> <span class="slc">-- Queries
</span>
   dictionary<span class="sym">:</span> DICTIONARY<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">,</span> STRING<span class="sym">]

</span><span class="kwa">feature</span> <span class="slc">-- Commands
</span>
   read_dictionary <span class="kwa">is
      local
</span>	 file<span class="sym">:</span> TEXT_FILE_READ
	 value<span class="sym">:</span> <span class="kwb">INTEGER
</span>      <span class="kwa">do
</span>	 value <span class="sym">:=</span> <span class="num">1
</span>	 <span class="kwa">from
</span>	    <span class="sym">!!</span>dictionary.with_capacity<span class="sym">(</span><span class="num">60000</span><span class="sym">)
	    !!</span>file.connect_to<span class="sym">(</span><span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">)
</span>	 until
	    file.end_of_input
	 <span class="kwa">loop
</span>	    file.read_line
	    <span class="kwa">if not</span> file.last_string.is_empty <span class="kwa">then
	       if not</span> dictionary.has<span class="sym">(</span>file.last_string<span class="sym">)</span> <span class="kwa">then
</span>	          dictionary.add<span class="sym">(</span>value<span class="sym">,</span> file.last_string.twin<span class="sym">)
</span>	       <span class="kwa">end
	    end
	 end
</span>	 file.disconnect
      <span class="kwa">end</span> <span class="slc">-- read_dictionary
</span>
<span class="kwa">end</span>
