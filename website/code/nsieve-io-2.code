<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com">   contributed by Robert Brandner */</span>


mkbuf <span class="sym">:=</span> <span class="kwa">method</span><span class="sym">(</span>n<span class="sym">,</span>
	b <span class="sym">:=</span> <span class="kwb">List</span> <span class="kwa">clone</span>
	b <span class="kwd">preallocateToSize</span><span class="sym">(</span>n<span class="sym">)</span>
	n <span class="kwd">repeat</span><span class="sym">(</span>b <span class="kwd">append</span><span class="sym">(</span>true<span class="sym">))</span>
	<span class="kwa">return</span> b
<span class="sym">)</span>

nsieve <span class="sym">:=</span> <span class="kwa">method</span><span class="sym">(</span>n<span class="sym">,</span>
	primes <span class="sym">:=</span> <span class="kwd">mkbuf</span><span class="sym">(</span>n<span class="sym">)</span>
	cnt <span class="sym">:=</span> <span class="num">0</span>
	<span class="kwa">for</span><span class="sym">(</span>i<span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">,</span>
		<span class="kwa">if</span><span class="sym">(</span>primes <span class="kwd">at</span><span class="sym">(</span>i<span class="sym">),</span>
			k <span class="sym">:=</span> i <span class="sym">+</span> i
			<span class="kwd">while</span> <span class="sym">(</span>k <span class="sym">&lt;</span> n<span class="sym">,</span>
				primes <span class="kwd">atPut</span><span class="sym">(</span>k<span class="sym">,</span> false<span class="sym">)</span>
				k <span class="sym">=</span> k <span class="sym">+</span> i
			<span class="sym">)</span>
			cnt <span class="sym">=</span> cnt <span class="sym">+</span> <span class="num">1</span>
		<span class="sym">)</span>
	<span class="sym">)</span>
	<span class="kwd">writeln</span><span class="sym">(</span><span class="str">&quot;Primes up to&quot;</span><span class="sym">,</span> n asString <span class="kwd">alignRight</span><span class="sym">(</span><span class="num">9</span><span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">),</span> cnt asString <span class="kwd">alignRight</span><span class="sym">(</span><span class="num">9</span><span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">))</span>
<span class="sym">)</span>

n <span class="sym">:=</span> args <span class="kwd">at</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span> asNumber
<span class="kwd">nsieve</span><span class="sym">( (</span><span class="num">2</span><span class="sym">^</span>n<span class="sym">)*</span><span class="num">10000</span> <span class="sym">)</span>
<span class="kwd">nsieve</span><span class="sym">( (</span><span class="num">2</span><span class="sym">^(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">))*</span><span class="num">10000</span> <span class="sym">)</span>
<span class="kwd">nsieve</span><span class="sym">( (</span><span class="num">2</span><span class="sym">^(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">))*</span><span class="num">10000</span> <span class="sym">)</span>
