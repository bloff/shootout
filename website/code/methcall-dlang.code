<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   http://www.bagley.org/~doug/shootout/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release methcall.d</span>
<span class="com">*/</span>

import std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

	<span class="kwb">bool</span> val <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
	Toggle toggle <span class="sym">=</span> <span class="kwa">new</span> Toggle<span class="sym">(</span>val<span class="sym">);</span>
	<span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
		val <span class="sym">=</span> toggle<span class="sym">.</span>activate<span class="sym">().</span>value<span class="sym">;</span>
	<span class="sym">}</span>
	writefln<span class="sym">(</span>val ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);</span>

	val <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
	NthToggle ntoggle <span class="sym">=</span> <span class="kwa">new</span> NthToggle<span class="sym">(</span>val<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
	<span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
		val <span class="sym">=</span> ntoggle<span class="sym">.</span>activate<span class="sym">().</span>value<span class="sym">;</span>
	<span class="sym">}</span>
	writefln<span class="sym">(</span>val ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">class</span> Toggle
<span class="sym">{</span>
package<span class="sym">:</span>
    <span class="kwb">bool</span> state<span class="sym">;</span>

    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">bool</span> start_state<span class="sym">) {</span> state <span class="sym">=</span> start_state<span class="sym">; }</span>

    <span class="kwb">bool</span> value<span class="sym">()</span>
    <span class="sym">{</span>
		<span class="kwa">return</span><span class="sym">(</span>state<span class="sym">);</span>
    <span class="sym">}</span>

    Toggle activate<span class="sym">()</span>
    <span class="sym">{</span>
		state <span class="sym">= !</span>state<span class="sym">;</span>
		<span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">class</span> NthToggle <span class="sym">:</span> <span class="kwc">public</span> Toggle
<span class="sym">{</span>
package<span class="sym">:</span>
    <span class="kwb">int</span> count_max<span class="sym">;</span>
    <span class="kwb">int</span> counter<span class="sym">;</span>

    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">bool</span> start_state<span class="sym">,</span> <span class="kwb">int</span> max_counter<span class="sym">) {</span> super<span class="sym">(</span>start_state<span class="sym">);</span> count_max <span class="sym">=</span> max_counter<span class="sym">; }</span>

    Toggle activate<span class="sym">()</span>
    <span class="sym">{</span>
        counter<span class="sym">++;</span>
		<span class="kwa">if</span><span class="sym">(</span>counter <span class="sym">&gt;=</span> count_max<span class="sym">)</span>
        <span class="sym">{</span>
			state <span class="sym">= !</span>state<span class="sym">;</span>
			counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="sym">}</span>
		<span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>
