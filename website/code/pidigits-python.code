
<span class="kwc">import</span> sys
<span class="kwc">from</span> itertools <span class="kwc">import</span> <span class="sym">*

</span><span class="kwb">def</span> gen_x<span class="sym">():
</span>    <span class="kwb">return</span> imap<span class="sym">(</span><span class="kwa">lambda</span> k<span class="sym">: (</span>k<span class="sym">,</span> <span class="num">4</span><span class="sym">*</span>k <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">),</span> count<span class="sym">(</span><span class="num">1</span><span class="sym">))

</span><span class="kwb">def</span> compose<span class="sym">((</span>aq<span class="sym">,</span> ar<span class="sym">,</span> as_<span class="sym">,</span> at<span class="sym">), (</span>bq<span class="sym">,</span> br<span class="sym">,</span> bs<span class="sym">,</span> bt<span class="sym">)):
</span>    <span class="kwb">return</span> <span class="sym">(</span>aq <span class="sym">*</span> bq<span class="sym">,
</span>            aq <span class="sym">*</span> br <span class="sym">+</span> ar <span class="sym">*</span> bt<span class="sym">,
</span>            as_ <span class="sym">*</span> bq <span class="sym">+</span> at <span class="sym">*</span> bs<span class="sym">,
</span>            as_ <span class="sym">*</span> br <span class="sym">+</span> at <span class="sym">*</span> bt<span class="sym">)

</span><span class="kwb">def</span> extract<span class="sym">((</span>q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">),</span> j<span class="sym">):
</span>    <span class="kwb">return</span> <span class="sym">(</span>q<span class="sym">*</span>j <span class="sym">+</span> r<span class="sym">) // (</span>s<span class="sym">*</span>j <span class="sym">+</span> t<span class="sym">)

</span><span class="kwb">def</span> pi_digits<span class="sym">():
</span>    z <span class="sym">= (</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span>    x <span class="sym">=</span> gen_x<span class="sym">()
</span>    <span class="kwb">while</span> <span class="num">1</span><span class="sym">:
</span>        y <span class="sym">=</span> extract<span class="sym">(</span>z<span class="sym">,</span> <span class="num">3</span><span class="sym">)
</span>        <span class="kwb">while</span> y <span class="sym">!=</span> extract<span class="sym">(</span>z<span class="sym">,</span> <span class="num">4</span><span class="sym">):
</span>            z <span class="sym">=</span> compose<span class="sym">(</span>z<span class="sym">,</span> x<span class="sym">.</span>next<span class="sym">())
</span>            y <span class="sym">=</span> extract<span class="sym">(</span>z<span class="sym">,</span> <span class="num">3</span><span class="sym">)
</span>        z <span class="sym">=</span> compose<span class="sym">((</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>y<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> z<span class="sym">)
</span>        yield y

<span class="kwb">def</span> main<span class="sym">():
</span>    n <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])
</span>    digits <span class="sym">=</span> pi_digits<span class="sym">()
</span>    width <span class="sym">=</span> <span class="num">10
</span>    <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>width<span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> width<span class="sym">):
</span>        <span class="kwb">print</span> <span class="str">&quot;%s</span><span class="esc">\t </span> <span class="str">:%d&quot;</span> <span class="sym">% (</span><span class="str">&quot;&quot;</span><span class="sym">.</span>join<span class="sym">(</span>imap<span class="sym">(</span><span class="kwa">str</span><span class="sym">,</span> islice<span class="sym">(</span>digits<span class="sym">,</span> width<span class="sym">))),</span> i<span class="sym">)
</span>    <span class="kwb">if</span> n <span class="sym">%</span> width <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">:
</span>        <span class="kwb">print</span> <span class="str">&quot;%s</span><span class="esc">\t </span> <span class="str">:%d&quot;</span> <span class="sym">% (</span><span class="str">&quot;&quot;</span><span class="sym">.</span>join<span class="sym">(</span>imap<span class="sym">(</span><span class="kwa">str</span><span class="sym">,</span> islice<span class="sym">(</span>digits<span class="sym">,</span> n <span class="sym">%</span> width<span class="sym">))).</span>ljust<span class="sym">(</span>width<span class="sym">),</span> n<span class="sym">)


</span>main<span class="sym">()</span>
