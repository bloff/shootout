#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile<span class="sym">-</span>oops \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: methcall-guile.code,v 1.5 2005-04-06 14:49:58 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="slc">;;; from: Benedikt Rosenau
</span>
<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>oop goops<span class="sym">))

(</span>define<span class="sym">-</span>method <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>b <span class="sym">&lt;</span>boolean<span class="sym">&gt;))
   (</span>display <span class="sym">(</span><span class="kwa">if</span> b <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)))


(</span>define<span class="sym">-</span>class <span class="sym">&lt;</span>toggle<span class="sym">&gt; ()
  (</span>state #<span class="sym">:</span>getter value? #<span class="sym">:</span>init<span class="sym">-</span>keyword #<span class="sym">:</span>state<span class="sym">))

(</span>define<span class="sym">-</span>class <span class="sym">&lt;</span><span class="kwa">nth</span><span class="sym">-</span>toggle<span class="sym">&gt; (&lt;</span>toggle<span class="sym">&gt;)
  (</span>count<span class="sym">-</span><span class="kwa">max</span> #<span class="sym">:</span>init<span class="sym">-</span>keyword #<span class="sym">:</span>count<span class="sym">-</span><span class="kwa">max</span><span class="sym">)
  (</span>counter #<span class="sym">:</span>init<span class="sym">-</span>value <span class="num">0</span><span class="sym">))


(</span>define<span class="sym">-</span>method <span class="sym">(</span>activate<span class="sym">! (</span>t <span class="sym">&lt;</span>toggle<span class="sym">&gt;))
  (</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> t <span class="str">'state (not (slot-ref t '</span>state<span class="sym">)))
</span>   t<span class="sym">)

(</span>define<span class="sym">-</span>method <span class="sym">(</span>activate<span class="sym">! (</span>n<span class="sym">-</span>t <span class="sym">&lt;</span><span class="kwa">nth</span><span class="sym">-</span>toggle<span class="sym">&gt;))
  (</span>let <span class="sym">((</span>counter <span class="sym">(+</span> <span class="num">1</span> <span class="sym">(</span>slot<span class="sym">-</span>ref n<span class="sym">-</span>t <span class="str">'counter))))
    (slot-set! n-t '</span>counter counter<span class="sym">)
    (</span><span class="kwa">if</span> <span class="sym">(&gt;=</span> counter <span class="sym">(</span>slot<span class="sym">-</span>ref n<span class="sym">-</span>t <span class="str">'count-max))
      (begin (slot-set! n-t '</span>state <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>slot<span class="sym">-</span>ref n<span class="sym">-</span>t <span class="str">'state)))
             (slot-set! n-t '</span>counter <span class="num">0</span><span class="sym">)))
</span>     n<span class="sym">-</span>t<span class="sym">))


(</span>define<span class="sym">-</span>method <span class="sym">(</span>main <span class="sym">(</span>l <span class="sym">&lt;</span><span class="kwa">list</span><span class="sym">&gt;))
  (</span>let <span class="sym">((</span>n <span class="sym">(</span>catch #t <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> l<span class="sym">)))
                     (</span><span class="kwa">lambda</span> ex <span class="num">1</span><span class="sym">))))
    (</span>let <span class="sym">((</span>tog <span class="sym">(</span>make <span class="sym">&lt;</span>toggle<span class="sym">&gt;</span> #<span class="sym">:</span>state #t<span class="sym">)))
      (</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i n<span class="sym">))
          (</span>value? <span class="sym">(</span>activate<span class="sym">!</span> tog<span class="sym">)))
      (</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>value? <span class="sym">(</span>activate<span class="sym">!</span> tog<span class="sym">))))
    (</span>let <span class="sym">((</span>ntog <span class="sym">(</span>make <span class="sym">&lt;</span><span class="kwa">nth</span><span class="sym">-</span>toggle<span class="sym">&gt;</span> #<span class="sym">:</span>state #t #<span class="sym">:</span>count<span class="sym">-</span><span class="kwa">max</span> <span class="num">3</span><span class="sym">)))
      (</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i n<span class="sym">))
          (</span>value? <span class="sym">(</span>activate<span class="sym">!</span> ntog<span class="sym">)))
      (</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>value? <span class="sym">(</span>activate<span class="sym">!</span> ntog<span class="sym">))))))</span>
