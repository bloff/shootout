<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// contributed by David Hedbor</span>
<span class="slc">// modified by Sjoerd Visscher</span>


<span class="kwa">function</span> <span class="kwd">Toggle</span><span class="sym">(</span>start_state<span class="sym">) {</span>
   <span class="kwa">this</span><span class="sym">.</span>state <span class="sym">=</span> start_state<span class="sym">;</span>
<span class="sym">}</span>

Toggle<span class="sym">.</span><span class="kwa">prototype</span><span class="sym">.</span><span class="kwc">value</span> <span class="sym">=</span> <span class="kwa">function</span><span class="sym">() {</span>
   <span class="kwa">return this</span><span class="sym">.</span>state<span class="sym">;</span>
<span class="sym">}</span>

Toggle<span class="sym">.</span><span class="kwa">prototype</span><span class="sym">.</span>activate <span class="sym">=</span> <span class="kwa">function</span><span class="sym">() {</span>
   <span class="kwa">this</span><span class="sym">.</span>state <span class="sym">= !</span><span class="kwa">this</span><span class="sym">.</span>state<span class="sym">;</span>
   <span class="kwa">return this</span><span class="sym">;</span>
<span class="sym">}</span>


<span class="kwa">function</span> <span class="kwd">NthToggle</span> <span class="sym">(</span>start_state<span class="sym">,</span> max_counter<span class="sym">) {</span>
   Toggle<span class="sym">.</span><span class="kwd">call</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> start_state<span class="sym">);</span>
   <span class="kwa">this</span><span class="sym">.</span>count_max <span class="sym">=</span> max_counter<span class="sym">;</span>
   <span class="kwa">this</span><span class="sym">.</span>count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

NthToggle<span class="sym">.</span><span class="kwa">prototype</span> <span class="sym">=</span> <span class="kwa">new</span> Toggle<span class="sym">;</span>

NthToggle<span class="sym">.</span><span class="kwa">prototype</span><span class="sym">.</span>activate <span class="sym">=</span> <span class="kwa">function</span><span class="sym">() {</span>
   <span class="kwa">if</span> <span class="sym">(++</span><span class="kwa">this</span><span class="sym">.</span>count <span class="sym">&gt;=</span> <span class="kwa">this</span><span class="sym">.</span>count_max<span class="sym">) {</span>
     <span class="kwa">this</span><span class="sym">.</span>state <span class="sym">= !</span><span class="kwa">this</span><span class="sym">.</span>state<span class="sym">;</span>
     <span class="kwa">this</span><span class="sym">.</span>count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwa">return this</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwa">var</span> i<span class="sym">;</span>
<span class="kwa">var</span> val <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
<span class="kwa">var</span> toggle <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Toggle</span><span class="sym">(</span>val<span class="sym">);</span>
<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
  val <span class="sym">=</span> toggle<span class="sym">.</span><span class="kwd">activate</span><span class="sym">().</span><span class="kwc">value</span><span class="sym">();</span>
<span class="sym">}</span>
<span class="kwc">print</span><span class="sym">(</span>toggle<span class="sym">.</span><span class="kwc">value</span><span class="sym">()</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);</span>

val <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
<span class="kwa">var</span> ntoggle <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">NthToggle</span><span class="sym">(</span>val<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
  val <span class="sym">=</span> ntoggle<span class="sym">.</span><span class="kwd">activate</span><span class="sym">().</span><span class="kwc">value</span><span class="sym">();</span>
<span class="sym">}</span>
<span class="kwc">print</span><span class="sym">(</span>ntoggle<span class="sym">.</span><span class="kwc">value</span><span class="sym">()</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);</span>
