<span class="slc">;;; The Great Computer Language Shootout
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; contributed by Nicolas Neuss, 2005
</span>
<span class="sym">(</span><span class="kwa">defun</span> nsieve <span class="sym">(</span>m<span class="sym">)
  (</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum m<span class="sym">))
  (</span>let <span class="sym">((</span>a <span class="sym">(</span>make<span class="sym">-</span>array m <span class="sym">:</span>initial<span class="sym">-</span>element t <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'boolean)))
    (loop for i of-type fixnum from 2 below m
       when (aref a i) do
	 (loop for j of-type fixnum from (* 2 i) below m by i do
	      (setf (aref a j) nil))
       and count t)))

(defun main ()
  (let* ((args #+sbcl sb-ext:*posix-argv*
               #+cmu  extensions:*command-line-strings*
	       #+gcl  si::*command-args*)
	 (n (parse-integer (car (last args)))))
  (loop for k from n downto (- n 2)
     for m = (* 10000 (expt 2 k)) do
       (format t &quot;Primes up to~T~8&lt;~d~&gt;~T~8&lt;~d~&gt;~%&quot; m (nsieve m)))))
</span>
