<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; contributed by Nicolas Neuss, 2005</span>

<span class="sym">(</span><span class="kwa">defun</span> nsieve <span class="sym">(</span>m<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> fixnum m<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>a <span class="sym">(</span>make<span class="sym">-</span>array m <span class="sym">:</span>initial<span class="sym">-</span>element t <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'boolean)))</span>
<span class="str">    (loop for i of-type fixnum from 2 below m</span>
<span class="str">       when (aref a i) do</span>
<span class="str">	 (loop for j of-type fixnum from (* 2 i) below m by i do</span>
<span class="str">	      (setf (aref a j) nil))</span>
<span class="str">       and count t)))</span>
<span class="str"></span>
<span class="str">(defun main ()</span>
<span class="str">  (let* ((args #+sbcl sb-ext:*posix-argv*</span>
<span class="str">               #+cmu  extensions:*command-line-strings*</span>
<span class="str">	       #+gcl  si::*command-args*)</span>
<span class="str">	 (n (parse-integer (car (last args)))))</span>
<span class="str">  (loop for k from n downto (- n 2)</span>
<span class="str">     for m = (* 10000 (expt 2 k)) do</span>
<span class="str">       (format t &quot;Primes up to~T~8&lt;~d~&gt;~T~8&lt;~d~&gt;~%&quot; m (nsieve m)))))</span>
<span class="str"></span>
