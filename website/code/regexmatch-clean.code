<span class="kwa">module</span> regexmatch

<span class="kwa">import</span> StdEnv<span class="sym">,</span>ArgEnv
argi <span class="sym">=</span> if <span class="sym">(</span>size cl <span class="sym">==</span> <span class="num">2</span><span class="sym">) (</span>toInt <span class="sym">(</span>cl.<span class="sym">[</span><span class="num">1</span><span class="sym">]))</span> <span class="num">1</span>
<span class="kwa">where</span>
	cl <span class="sym">=</span> getCommandLine

Start world
	# <span class="sym">(</span>console<span class="sym">,</span> world<span class="sym">)	=</span> stdio world
	# <span class="sym">(</span>phones<span class="sym">,</span>console<span class="sym">)	=</span> readInput <span class="sym">[]</span> console
	# tb			<span class="sym">=</span> <span class="num">0</span>
	# <span class="sym">(</span>errptr<span class="sym">,</span>tb<span class="sym">)		=</span> malloc <span class="num">1024</span> tb
	# <span class="sym">(</span>errhdl<span class="sym">,</span>tb<span class="sym">)		=</span> malloc <span class="num">4</span> tb
	# tb			<span class="sym">=</span> store errhdl errptr tb
	# <span class="sym">(</span>erroffset<span class="sym">,</span>tb<span class="sym">)	=</span> malloc <span class="num">4</span> tb
	# tb			<span class="sym">=</span> store erroffset <span class="num">0</span> tb
<span class="sym">//</span>	# <span class="sym">(</span>re<span class="sym">,</span>tb<span class="sym">)		=</span> pcre_compile pattern <span class="num">0</span> errhdl erroffset NULL tb
	# <span class="sym">(</span>re<span class="sym">,</span>tb<span class="sym">)		=</span> pcre_compile pattern` <span class="num">0</span> errhdl erroffset NULL tb
	<span class="sym">|</span> re <span class="sym">==</span> <span class="num">0</span>		<span class="sym">=</span> abort <span class="str">&quot;pcre_compile failed\n&quot;</span>
	# <span class="sym">(</span>study<span class="sym">,</span>tb<span class="sym">)		=</span> pcre_study re <span class="num">0</span> errhdl tb
	# <span class="sym">(</span>errres<span class="sym">,</span>tb<span class="sym">)		=</span> load errhdl tb
	<span class="sym">|</span> study <span class="sym">==</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> errres <span class="sym">&lt;&gt;</span> <span class="num">0</span>
		<span class="sym">=</span> abort <span class="str">&quot;pcre_study failed\n&quot;</span>
	# <span class="sym">(</span>nmptr<span class="sym">,</span>tb<span class="sym">)		=</span> malloc <span class="num">4</span> tb
	# tb			<span class="sym">=</span> store nmptr <span class="num">0</span> tb
	# <span class="sym">(</span>cnt<span class="sym">,</span>tb<span class="sym">)		=</span> pcre_fullinfo re NULL PCRE_INFO_CAPTURECOUNT nmptr tb
	<span class="sym">|</span> cnt <span class="sym">&lt;&gt;</span> <span class="num">0</span>		<span class="sym">=</span> abort <span class="str">&quot;pcre_fullinfo failed\n&quot;</span>
	# <span class="sym">(</span>nm<span class="sym">,</span>tb<span class="sym">)		=</span> load nmptr tb
	# nm			<span class="sym">=</span> nm <span class="sym">+</span> <span class="num">1</span>
	# tb			<span class="sym">=</span> store nmptr nm tb
	# ovecsize		<span class="sym">=</span> <span class="num">4</span> <span class="sym">*</span> nm <span class="sym">*</span> <span class="num">3</span>
	# <span class="sym">(</span>ovec<span class="sym">,</span>tb<span class="sym">)		=</span> malloc ovecsize tb


	# <span class="sym">(</span>out<span class="sym">,</span>tb<span class="sym">)		=</span> oloop argi console phones nm ovec ovecsize re study tb
	# <span class="sym">(</span>ok<span class="sym">,</span>world<span class="sym">)		=</span> fclose out world
	<span class="sym">=</span> world

oloop cnt out phones nm ovec ovecsize re study tb
	# count		<span class="sym">=</span> <span class="num">1</span>
<span class="sym">//</span>	# num		<span class="sym">=</span> createArray <span class="num">256</span> <span class="str">'&#64;'</span>
	# num		<span class="sym">=</span> <span class="str">&quot;(&#64;&#64;&#64;) &#64;&#64;&#64;-&#64;&#64;&#64;&#64;&quot;</span>
	# nb		<span class="sym">=</span> nm<span class="sym">*</span><span class="num">2</span><span class="sym">*</span><span class="num">4</span>
	# ovecs` 	<span class="sym">=</span> createArray nb <span class="num">0</span>
	# <span class="sym">(</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">) =</span> seq <span class="sym">[</span>iloop <span class="sym">(</span>n<span class="sym">==</span>cnt<span class="sym">)</span> ovec ovecsize nm nb re study phones \\ n <span class="sym">&lt;- [</span><span class="num">1</span>..cnt<span class="sym">]] (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)</span>
	<span class="sym">= (</span>out<span class="sym">,</span>tb<span class="sym">)</span>

iloop <span class="sym">:: !</span>.<span class="kwb">Bool</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">![</span>String<span class="sym">] !*(!</span>.<span class="kwb">Int</span><span class="sym">,!*</span>String<span class="sym">,!</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>File<span class="sym">,!*</span>Toolbox<span class="sym">) -&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>String<span class="sym">,!</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>File<span class="sym">,!*</span>Toolbox<span class="sym">)</span>
iloop print ovec ovecsize nm nb  re study <span class="sym">[] (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)</span>
	<span class="sym">= (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)</span>
iloop print ovec ovecsize nm nb re study <span class="sym">[</span>phones_i<span class="sym">:</span>phones<span class="sym">] (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)</span>
	# <span class="sym">(</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">) =</span> match print ovec ovecsize nm nb re study phones_i <span class="sym">(</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)</span>
	<span class="sym">=</span> iloop print ovec ovecsize nm nb re study phones <span class="sym">(</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)</span>

match <span class="sym">:: !</span>.<span class="kwb">Bool</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>String <span class="sym">!*(!</span>.<span class="kwb">Int</span><span class="sym">,!*</span>String<span class="sym">,!</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>File<span class="sym">,!*</span>Toolbox<span class="sym">) -&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>String<span class="sym">,!</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>File<span class="sym">,!*</span>Toolbox<span class="sym">)</span>
match print ovec ovecsize nm nb re study phones_i <span class="sym">(</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)</span>
	# <span class="sym">(</span>n<span class="sym">,</span>tb<span class="sym">)	=</span> pcre_exec re study phones_i <span class="sym">(</span>size phones_i<span class="sym">)</span> <span class="num">0 0</span> ovec ovecsize tb
	<span class="sym">|</span> n <span class="sym">&lt;&gt;</span> nm
		<span class="sym">= (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)</span>
	# <span class="sym">(</span>ovecs`<span class="sym">,</span>tb<span class="sym">)	=</span> LoadOvec ovecs` ovec nb tb
	# ss1		<span class="sym">=</span> ss phones_i ovecs` <span class="num">1</span>
	# ss2		<span class="sym">=</span> ss phones_i ovecs` <span class="num">2</span>
	# ss3		<span class="sym">=</span> ss phones_i ovecs` <span class="num">3</span>
	# ss4		<span class="sym">=</span> ss phones_i ovecs` <span class="num">4</span>
<span class="sym">//</span>	# ss5		<span class="sym">=</span> ss phones_i ovecs` <span class="num">5</span>
<span class="sym">//</span>	# ss6		<span class="sym">=</span> ss phones_i ovecs` <span class="num">6</span>
	# ss0		<span class="sym">=</span> ss phones_i ovecs` <span class="num">0</span>
<span class="sym">//</span>	# area		<span class="sym">=</span> if <span class="sym">(</span>size ss3 <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ss4 ss3
<span class="sym">//</span>	# exch		<span class="sym">=</span> ss5
<span class="sym">//</span>	# exts		<span class="sym">=</span> ss6
	# area		<span class="sym">=</span> ss2
	# exch		<span class="sym">=</span> ss3
	# exts		<span class="sym">=</span> ss4
<span class="sym">//</span>	# num		<span class="sym">=</span> <span class="str">&quot;(&quot;</span><span class="sym">+++</span>area<span class="sym">+++</span><span class="str">&quot;) &quot;</span><span class="sym">+++</span>exch<span class="sym">+++</span><span class="str">&quot;-&quot;</span><span class="sym">+++</span>exts
	# num		<span class="sym">=</span> ss` phones_i ovecs` <span class="num">2</span> num <span class="num">1</span>
	# num		<span class="sym">=</span> ss` phones_i ovecs` <span class="num">3</span> num <span class="num">6</span>
	# num		<span class="sym">=</span> ss` phones_i ovecs` <span class="num">4</span> num <span class="num">10</span>
	<span class="sym">|</span> not print
		<span class="sym">= (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)</span>
	#<span class="sym">!</span> out <span class="sym">=</span> out <span class="sym">&lt;&lt;&lt;</span> count <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot;: &quot;</span> <span class="sym">&lt;&lt;&lt;</span> num <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot;\n&quot;</span>
	<span class="sym">= (</span>count<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)</span>

<span class="sym">//</span>
ss <span class="sym">:: !</span>String <span class="sym">!</span>{#<span class="kwb">Int</span>} <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">-&gt;</span> String
ss string ovecs i
	# j		<span class="sym">=</span> i <span class="sym">*</span> <span class="num">2</span>
	# b		<span class="sym">=</span> ovecs.<span class="sym">[</span>j<span class="sym">]</span>
	# e		<span class="sym">=</span> ovecs.<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]</span>
	<span class="sym">=</span> string<span class="sym">%(</span>b<span class="sym">,</span>e<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>

ss` <span class="sym">:: !</span>String <span class="sym">!</span>{#<span class="kwb">Int</span>} <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!*</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span>String
ss` string ovecs i res k
	# j		<span class="sym">=</span> i <span class="sym">*</span> <span class="num">2</span>
	# b		<span class="sym">=</span> ovecs.<span class="sym">[</span>j<span class="sym">]</span>
	# e		<span class="sym">=</span> ovecs.<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]</span>
	# res	<span class="sym">=</span> ssloop string k b e res
	<span class="sym">=</span> res
<span class="kwa">where</span>
	ssloop <span class="sym">:: !</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!*</span>{#<span class="kwb">Char</span>} <span class="sym">-&gt; *</span>{#<span class="kwb">Char</span>}
	ssloop string x y s res
		<span class="sym">|</span> y <span class="sym">&gt;=</span> s
			<span class="sym">=</span> res
		<span class="sym">=</span> ssloop string <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> s {res <span class="sym">&amp; [</span>x<span class="sym">] =</span> string.<span class="sym">[</span>y<span class="sym">]</span>}

LoadOvec <span class="sym">:: !</span>{#<span class="kwb">Int</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>Toolbox<span class="sym">)</span>
LoadOvec a ptr nb tb
	# tb	<span class="sym">=</span> mmove a ptr nb tb
	<span class="sym">= (</span>a<span class="sym">,</span>tb<span class="sym">)</span>

readInput acc input
	# <span class="sym">(</span>l<span class="sym">,</span>input<span class="sym">)	=</span> freadline input
	<span class="sym">|</span> size l <span class="sym">==</span> <span class="num">0</span>
		<span class="sym">= (</span>reverse acc<span class="sym">,</span>input<span class="sym">)</span>
	<span class="sym">=</span> readInput <span class="sym">[</span>l<span class="sym">:</span>acc<span class="sym">]</span> input


NULL				<span class="sym">:==</span> <span class="num">0</span>
PCRE_INFO_CAPTURECOUNT		<span class="sym">:==</span> <span class="num">2</span>
pattern <span class="sym">=</span>
   <span class="str">&quot;(^|[^0-9\\(]+)&quot;</span> <span class="sym">+++				//</span> $<span class="num">1</span>
   <span class="str">&quot;(&quot;</span> <span class="sym">+++					//</span> $<span class="num">2</span>
   <span class="str">&quot;\\(([0-9][0-9][0-9])\\)&quot;</span> <span class="sym">+++		//</span> $<span class="num">3</span>
   <span class="str">&quot;|&quot;</span> <span class="sym">+++</span>
   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span> <span class="sym">+++			//</span> $<span class="num">4</span>
   <span class="str">&quot;)&quot;</span> <span class="sym">+++</span>
   <span class="str">&quot; &quot;</span> <span class="sym">+++</span>
   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span> <span class="sym">+++			//</span> $<span class="num">5</span>
   <span class="str">&quot;[ -]&quot;</span>  <span class="sym">+++</span>
   <span class="str">&quot;([0-9][0-9][0-9][0-9])&quot;</span> <span class="sym">+++			//</span> $<span class="num">6</span>
   <span class="str">&quot;[^0-9]&quot;</span> <span class="sym">+++</span>
   <span class="str">&quot;\0&quot;</span>

pattern` <span class="sym">=</span>
   <span class="str">&quot;(?:^|[^\\d\\(])&quot;</span>	<span class="sym">+++	/*</span> must be preceeded by non<span class="sym">-</span>digit <span class="sym">*/</span>
   <span class="str">&quot;(\\()?&quot;</span>		<span class="sym">+++	/*</span> match <span class="num">1</span><span class="sym">:</span> possible initial left paren <span class="sym">*/</span>
   <span class="str">&quot;(\\d\\d\\d)&quot;</span>	<span class="sym">+++	/*</span> match <span class="num">2</span><span class="sym">:</span> area code is <span class="num">3</span> digits <span class="sym">*/</span>
   <span class="str">&quot;(?(1)\\))&quot;</span>		<span class="sym">+++	/*</span> if match1 <span class="kwa">then</span> match right paren <span class="sym">*/</span>
   <span class="str">&quot;[ ]&quot;</span>		<span class="sym">+++	/*</span> area code followed by one space <span class="sym">*/</span>
   <span class="str">&quot;(\\d\\d\\d)&quot;</span>	<span class="sym">+++	/*</span> match <span class="num">3</span><span class="sym">:</span> prefix <span class="kwa">of</span> <span class="num">3</span> digits <span class="sym">*/</span>
   <span class="str">&quot;[ -]&quot;</span>		<span class="sym">+++	/*</span> separator is either space or dash <span class="sym">*/</span>
   <span class="str">&quot;(\\d\\d\\d\\d)&quot;</span>	<span class="sym">+++	/*</span> match <span class="num">4</span><span class="sym">:</span> last <span class="num">4</span> digits <span class="sym">*/</span>
   <span class="str">&quot;\\D&quot;</span>			<span class="sym">/*</span> must be followed by a non<span class="sym">-</span>digit <span class="sym">*/</span>


<span class="sym">::</span> MyPtr a	<span class="sym">:==</span> <span class="kwb">Int</span>
<span class="sym">::</span> PCRE		<span class="sym">:==</span> <span class="kwb">Int</span>
<span class="sym">::</span> PCREE	<span class="sym">:==</span> <span class="kwb">Int</span>
pcre_compile <span class="sym">:: !</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!(</span>MyPtr String<span class="sym">) !(</span>MyPtr <span class="kwb">Int</span><span class="sym">) !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>PCRE<span class="sym">,!*</span>Toolbox<span class="sym">)</span>
pcre_compile _ _ _ _ _ _ <span class="sym">=</span> code {
	ccall pcre_compile <span class="str">&quot;sIIII:I:I&quot;</span>
	}
pcre_study <span class="sym">:: !</span>PCRE <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!(</span>MyPtr String<span class="sym">) !*</span>Toolbox <span class="sym">-&gt; (!</span>PCREE<span class="sym">,!*</span>Toolbox<span class="sym">)</span>
pcre_study _ _ _ _ <span class="sym">=</span> code {
	ccall pcre_study <span class="str">&quot;III:I:I&quot;</span>
	}
pcre_fullinfo <span class="sym">:: !</span>PCRE <span class="sym">!</span>PCREE <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>Toolbox<span class="sym">)</span>
pcre_fullinfo _ _ _ _ _ <span class="sym">=</span> code {
	ccall pcre_fullinfo <span class="str">&quot;IIII:I:I&quot;</span>
	}
pcre_exec <span class="sym">:: !</span>PCRE <span class="sym">!</span>PCREE <span class="sym">!</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!(</span>MyPtr <span class="kwb">Int</span><span class="sym">) !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>Toolbox<span class="sym">)</span>
pcre_exec _ _ _ _ _ _ _ _ _ <span class="sym">=</span> code {
	ccall pcre_exec <span class="str">&quot;IIsIIIII:I:I&quot;</span>
	}

<span class="sym">//</span> memory access
<span class="sym">::</span> Ptr		<span class="sym">:==</span> <span class="kwb">Int</span>
<span class="sym">::</span> Toolbox	<span class="sym">:==</span> <span class="kwb">Int</span>
<span class="sym">//</span> win32
<span class="sym">/*</span>
<span class="kwa">import</span> code from library <span class="str">&quot;pcre_library&quot;</span>
malloc <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>Ptr<span class="sym">,!*</span>Toolbox<span class="sym">)</span>
malloc n tb <span class="sym">= (</span>GlobalAlloc GPTR n<span class="sym">,</span>tb<span class="sym">)</span>
<span class="kwa">where</span>
	GPTR	<span class="sym">=</span> <span class="num">0x0040</span>

	GlobalAlloc <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> Ptr
	GlobalAlloc uFlags dwBytes <span class="sym">=</span> code {
		ccall GlobalAlloc&#64;<span class="num">8</span> <span class="str">&quot;PII:I&quot;</span>
		}
load <span class="sym">:: !</span>Ptr <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>Toolbox<span class="sym">)</span>
load ptr tb <span class="sym">= (</span>read4 ptr<span class="sym">,</span>tb<span class="sym">)</span>
<span class="kwa">where</span>
	read4 <span class="sym">:: !</span>Ptr <span class="sym">-&gt;</span> <span class="kwb">Int</span>
	read4 p <span class="sym">=</span> code {
		instruction <span class="num">139</span>
		instruction <span class="num">0</span> <span class="sym">|</span> mov   eax<span class="sym">,</span>dword ptr <span class="sym">[</span>eax<span class="sym">]</span>
		}
store <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; *</span>Toolbox
store ptr val tb
	<span class="sym">=</span> write4 ptr val tb
<span class="kwa">where</span>
	write4 <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.env <span class="sym">-&gt;</span> .env
	write4 address value env <span class="sym">=</span> code {
			instruction <span class="num">137</span>		<span class="sym">|</span> movl <span class="sym">%</span>eax<span class="sym">, (%</span>ebx<span class="sym">)</span>
			instruction <span class="num">3</span>
			pop_b	<span class="num">2</span>
		}
mmove <span class="sym">:: !</span>.{#<span class="kwb">Int</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; *</span>Toolbox
mmove dst src len tb <span class="sym">=</span> code {
	ccall RtlMoveMemory&#64;<span class="num">12</span> <span class="str">&quot;PAII:V:I&quot;</span>
	}
<span class="sym">*/</span>

<span class="sym">//</span> linux386
malloc <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>Ptr<span class="sym">,!*</span>Toolbox<span class="sym">)</span>
malloc n tb
	# <span class="sym">(</span>ptr<span class="sym">,</span>tb<span class="sym">)	=</span> malloc_ n tb
	<span class="sym">|</span> ptr <span class="sym">==</span> <span class="num">0</span>	<span class="sym">=</span> abort <span class="str">&quot;malloc failed\n&quot;</span>
	<span class="sym">= (</span>ptr<span class="sym">,</span>tb<span class="sym">)</span>
<span class="kwa">where</span>
	malloc_ <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>MyPtr a<span class="sym">,!*</span>Toolbox<span class="sym">)</span>
	malloc_ _ _ <span class="sym">=</span> code {
		ccall malloc <span class="str">&quot;I:I:I&quot;</span>
		}
load <span class="sym">:: !</span>Ptr <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>Toolbox<span class="sym">)</span>
load ptr tb <span class="sym">= (</span>read4 ptr<span class="sym">,</span>tb<span class="sym">)</span>
<span class="kwa">where</span>
	read4 <span class="sym">:: !</span>Ptr <span class="sym">-&gt;</span> <span class="kwb">Int</span>
	read4 p <span class="sym">=</span> code {
		instruction <span class="num">139</span>
		instruction <span class="num">0</span> <span class="sym">|</span> mov   eax<span class="sym">,</span>dword ptr <span class="sym">[</span>eax<span class="sym">]</span>
		}
store <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; *</span>Toolbox
store ptr val tb
	<span class="sym">=</span> write4 ptr val tb
<span class="kwa">where</span>
	write4 <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.env <span class="sym">-&gt;</span> .env
	write4 address value env <span class="sym">=</span> code {
			instruction <span class="num">137</span>		<span class="sym">|</span> movl <span class="sym">%</span>eax<span class="sym">, (%</span>ebx<span class="sym">)</span>
			instruction <span class="num">3</span>
			pop_b	<span class="num">2</span>
		}

mmove <span class="sym">:: !</span>.{#<span class="kwb">Int</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; *</span>Toolbox
mmove dst src len tb <span class="sym">=</span> code {
	ccall memmove <span class="str">&quot;AII:V:I&quot;</span>
	}
<span class="sym">//</span> mosx
<span class="sym">/*</span>
malloc <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>Ptr<span class="sym">,!*</span>Toolbox<span class="sym">)</span>
malloc n tb
	# <span class="sym">(</span>ptr<span class="sym">,</span>tb<span class="sym">)	=</span> malloc_ n tb
	<span class="sym">|</span> ptr <span class="sym">==</span> <span class="num">0</span>	<span class="sym">=</span> abort <span class="str">&quot;malloc failed\n&quot;</span>
	<span class="sym">= (</span>ptr<span class="sym">,</span>tb<span class="sym">)</span>
<span class="kwa">where</span>
	malloc_ <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>MyPtr a<span class="sym">,!*</span>Toolbox<span class="sym">)</span>
	malloc_ _ _ <span class="sym">=</span> code {
		ccall malloc <span class="str">&quot;I:I:I&quot;</span>
		}
load <span class="sym">:: !</span>Ptr <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>Toolbox<span class="sym">)</span>
load ptr tb
	<span class="sym">= (</span>LoadLong1 ptr<span class="sym">,</span> tb<span class="sym">)</span>
<span class="kwa">where</span>
	LoadLong1 <span class="sym">:: !</span>Ptr <span class="sym">-&gt;</span> <span class="kwb">Int</span>
	LoadLong1 p <span class="sym">=</span> code <span class="sym">(</span>p<span class="sym">=</span>U<span class="sym">)(</span>r<span class="sym">=</span>A0<span class="sym">)</span>{
		instruction <span class="num">0x83180000</span>	<span class="sym">|</span>	lwz	r24<span class="sym">,</span><span class="num">0</span><span class="sym">(</span>r24<span class="sym">)</span>
		}
store <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; *</span>Toolbox
store ptr val tb
	<span class="sym">=</span> StoreLong1 ptr val
<span class="kwa">where</span>
	StoreLong1 <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span>Ptr
	StoreLong1 p v <span class="sym">=</span> code <span class="sym">(</span>p<span class="sym">=</span>U<span class="sym">,</span>v<span class="sym">=</span>U<span class="sym">)(</span>q<span class="sym">=</span>A0<span class="sym">)</span>{
		instruction	<span class="num">0x93190000</span>	<span class="sym">|</span>	stw	r24<span class="sym">,</span><span class="num">0</span><span class="sym">(</span>r25<span class="sym">)</span>
		instruction	<span class="num">0x7F38CB78</span>	<span class="sym">|</span>	mr	r24<span class="sym">,</span>r25
		}
<span class="sym">*/</span>
