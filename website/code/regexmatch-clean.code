<span class="line">    1 </span><span class="kwa">module</span> regexmatch
<span class="line">    2 </span>
<span class="line">    3 </span><span class="kwa">import</span> StdEnv<span class="sym">,</span>ArgEnv
<span class="line">    4 </span>argi <span class="sym">=</span> if <span class="sym">(</span>size cl <span class="sym">==</span> <span class="num">2</span><span class="sym">) (</span>toInt <span class="sym">(</span>cl.<span class="sym">[</span><span class="num">1</span><span class="sym">]))</span> <span class="num">1
</span><span class="line">    5 </span><span class="num"></span><span class="kwa">where
</span><span class="line">    6 </span><span class="kwa"></span>        cl <span class="sym">=</span> getCommandLine
<span class="line">    7 </span>
<span class="line">    8 </span>Start world
<span class="line">    9 </span>        # <span class="sym">(</span>console<span class="sym">,</span> world<span class="sym">)        =</span> stdio world
<span class="line">   10 </span>        # <span class="sym">(</span>phones<span class="sym">,</span>console<span class="sym">)        =</span> readInput <span class="sym">[]</span> console
<span class="line">   11 </span>        # tb                        <span class="sym">=</span> <span class="num">0
</span><span class="line">   12 </span><span class="num"></span>        # <span class="sym">(</span>errptr<span class="sym">,</span>tb<span class="sym">)                =</span> malloc <span class="num">1024</span> tb
<span class="line">   13 </span>        # <span class="sym">(</span>errhdl<span class="sym">,</span>tb<span class="sym">)                =</span> malloc <span class="num">4</span> tb
<span class="line">   14 </span>        # tb                        <span class="sym">=</span> store errhdl errptr tb
<span class="line">   15 </span>        # <span class="sym">(</span>erroffset<span class="sym">,</span>tb<span class="sym">)        =</span> malloc <span class="num">4</span> tb
<span class="line">   16 </span>        # tb                        <span class="sym">=</span> store erroffset <span class="num">0</span> tb
<span class="line">   17 </span><span class="sym">//</span>        # <span class="sym">(</span>re<span class="sym">,</span>tb<span class="sym">)                =</span> pcre_compile pattern <span class="num">0</span> errhdl erroffset NULL tb
<span class="line">   18 </span>        # <span class="sym">(</span>re<span class="sym">,</span>tb<span class="sym">)                =</span> pcre_compile pattern` <span class="num">0</span> errhdl erroffset NULL tb
<span class="line">   19 </span>        <span class="sym">|</span> re <span class="sym">==</span> <span class="num">0</span>                <span class="sym">=</span> abort <span class="str">&quot;pcre_compile failed\n&quot;</span>
<span class="line">   20 </span>        # <span class="sym">(</span>study<span class="sym">,</span>tb<span class="sym">)                =</span> pcre_study re <span class="num">0</span> errhdl tb
<span class="line">   21 </span>        # <span class="sym">(</span>errres<span class="sym">,</span>tb<span class="sym">)                =</span> load errhdl tb
<span class="line">   22 </span>        <span class="sym">|</span> study <span class="sym">==</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> errres <span class="sym">&lt;&gt;</span> <span class="num">0
</span><span class="line">   23 </span><span class="num"></span>                <span class="sym">=</span> abort <span class="str">&quot;pcre_study failed\n&quot;</span>
<span class="line">   24 </span>        # <span class="sym">(</span>nmptr<span class="sym">,</span>tb<span class="sym">)                =</span> malloc <span class="num">4</span> tb
<span class="line">   25 </span>        # tb                        <span class="sym">=</span> store nmptr <span class="num">0</span> tb
<span class="line">   26 </span>        # <span class="sym">(</span>cnt<span class="sym">,</span>tb<span class="sym">)                =</span> pcre_fullinfo re NULL PCRE_INFO_CAPTURECOUNT nmptr tb
<span class="line">   27 </span>        <span class="sym">|</span> cnt <span class="sym">&lt;&gt;</span> <span class="num">0</span>                <span class="sym">=</span> abort <span class="str">&quot;pcre_fullinfo failed\n&quot;</span>
<span class="line">   28 </span>        # <span class="sym">(</span>nm<span class="sym">,</span>tb<span class="sym">)                =</span> load nmptr tb
<span class="line">   29 </span>        # nm                        <span class="sym">=</span> nm <span class="sym">+</span> <span class="num">1
</span><span class="line">   30 </span><span class="num"></span>        # tb                        <span class="sym">=</span> store nmptr nm tb
<span class="line">   31 </span>        # ovecsize                <span class="sym">=</span> <span class="num">4</span> <span class="sym">*</span> nm <span class="sym">*</span> <span class="num">3
</span><span class="line">   32 </span><span class="num"></span>        # <span class="sym">(</span>ovec<span class="sym">,</span>tb<span class="sym">)                =</span> malloc ovecsize tb
<span class="line">   33 </span>
<span class="line">   34 </span>
<span class="line">   35 </span>        # <span class="sym">(</span>out<span class="sym">,</span>tb<span class="sym">)                =</span> oloop argi console phones nm ovec ovecsize re study tb
<span class="line">   36 </span>        # <span class="sym">(</span>ok<span class="sym">,</span>world<span class="sym">)                =</span> fclose out world
<span class="line">   37 </span>        <span class="sym">=</span> world
<span class="line">   38 </span>
<span class="line">   39 </span>oloop cnt out phones nm ovec ovecsize re study tb
<span class="line">   40 </span>        # count                <span class="sym">=</span> <span class="num">1
</span><span class="line">   41 </span><span class="num"></span><span class="sym">//</span>        # num                <span class="sym">=</span> createArray <span class="num">256</span> <span class="str">'&#64;'</span>
<span class="line">   42 </span>        # num                <span class="sym">=</span> <span class="str">&quot;(&#64;&#64;&#64;) &#64;&#64;&#64;-&#64;&#64;&#64;&#64;&quot;</span>
<span class="line">   43 </span>        # nb                <span class="sym">=</span> nm<span class="sym">*</span><span class="num">2</span><span class="sym">*</span><span class="num">4
</span><span class="line">   44 </span><span class="num"></span>        # ovecs`         <span class="sym">=</span> createArray nb <span class="num">0
</span><span class="line">   45 </span><span class="num"></span>        # <span class="sym">(</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">) =</span> seq <span class="sym">[</span>iloop <span class="sym">(</span>n<span class="sym">==</span>cnt<span class="sym">)</span> ovec ovecsize nm nb re study phones \\ n <span class="sym">&lt;- [</span><span class="num">1</span>..cnt<span class="sym">]] (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   46 </span><span class="sym">        = (</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   47 </span><span class="sym">
</span><span class="line">   48 </span><span class="sym"></span>iloop <span class="sym">:: !</span>.<span class="kwb">Bool</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">![</span>String<span class="sym">] !*(!</span>.<span class="kwb">Int</span><span class="sym">,!*</span>String<span class="sym">,!</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>File<span class="sym">,!*</span>Toolbox<span class="sym">) -&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>String<span class="sym">,!</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>File<span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">   49 </span><span class="sym"></span>iloop print ovec ovecsize nm nb  re study <span class="sym">[] (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   50 </span><span class="sym">        = (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   51 </span><span class="sym"></span>iloop print ovec ovecsize nm nb re study <span class="sym">[</span>phones_i<span class="sym">:</span>phones<span class="sym">] (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   52 </span><span class="sym"></span>        # <span class="sym">(</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">) =</span> match print ovec ovecsize nm nb re study phones_i <span class="sym">(</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   53 </span><span class="sym">        =</span> iloop print ovec ovecsize nm nb re study phones <span class="sym">(</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   54 </span><span class="sym">
</span><span class="line">   55 </span><span class="sym"></span>match <span class="sym">:: !</span>.<span class="kwb">Bool</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span>String <span class="sym">!*(!</span>.<span class="kwb">Int</span><span class="sym">,!*</span>String<span class="sym">,!</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>File<span class="sym">,!*</span>Toolbox<span class="sym">) -&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>String<span class="sym">,!</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>File<span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">   56 </span><span class="sym"></span>match print ovec ovecsize nm nb re study phones_i <span class="sym">(</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   57 </span><span class="sym"></span>        # <span class="sym">(</span>n<span class="sym">,</span>tb<span class="sym">)        =</span> pcre_exec re study phones_i <span class="sym">(</span>size phones_i<span class="sym">)</span> <span class="num">0 0</span> ovec ovecsize tb
<span class="line">   58 </span>        <span class="sym">|</span> n <span class="sym">&lt;&gt;</span> nm
<span class="line">   59 </span>                <span class="sym">= (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   60 </span><span class="sym"></span>        # <span class="sym">(</span>ovecs`<span class="sym">,</span>tb<span class="sym">)        =</span> LoadOvec ovecs` ovec nb tb
<span class="line">   61 </span>        # ss1                <span class="sym">=</span> ss phones_i ovecs` <span class="num">1
</span><span class="line">   62 </span><span class="num"></span>        # ss2                <span class="sym">=</span> ss phones_i ovecs` <span class="num">2
</span><span class="line">   63 </span><span class="num"></span>        # ss3                <span class="sym">=</span> ss phones_i ovecs` <span class="num">3
</span><span class="line">   64 </span><span class="num"></span>        # ss4                <span class="sym">=</span> ss phones_i ovecs` <span class="num">4
</span><span class="line">   65 </span><span class="num"></span><span class="sym">//</span>        # ss5                <span class="sym">=</span> ss phones_i ovecs` <span class="num">5
</span><span class="line">   66 </span><span class="num"></span><span class="sym">//</span>        # ss6                <span class="sym">=</span> ss phones_i ovecs` <span class="num">6
</span><span class="line">   67 </span><span class="num"></span>        # ss0                <span class="sym">=</span> ss phones_i ovecs` <span class="num">0
</span><span class="line">   68 </span><span class="num"></span><span class="sym">//</span>        # area                <span class="sym">=</span> if <span class="sym">(</span>size ss3 <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ss4 ss3
<span class="line">   69 </span><span class="sym">//</span>        # exch                <span class="sym">=</span> ss5
<span class="line">   70 </span><span class="sym">//</span>        # exts                <span class="sym">=</span> ss6
<span class="line">   71 </span>        # area                <span class="sym">=</span> ss2
<span class="line">   72 </span>        # exch                <span class="sym">=</span> ss3
<span class="line">   73 </span>        # exts                <span class="sym">=</span> ss4
<span class="line">   74 </span><span class="sym">//</span>        # num                <span class="sym">=</span> <span class="str">&quot;(&quot;</span><span class="sym">+++</span>area<span class="sym">+++</span><span class="str">&quot;) &quot;</span><span class="sym">+++</span>exch<span class="sym">+++</span><span class="str">&quot;-&quot;</span><span class="sym">+++</span>exts
<span class="line">   75 </span>        # num                <span class="sym">=</span> ss` phones_i ovecs` <span class="num">2</span> num <span class="num">1
</span><span class="line">   76 </span><span class="num"></span>        # num                <span class="sym">=</span> ss` phones_i ovecs` <span class="num">3</span> num <span class="num">6
</span><span class="line">   77 </span><span class="num"></span>        # num                <span class="sym">=</span> ss` phones_i ovecs` <span class="num">4</span> num <span class="num">10
</span><span class="line">   78 </span><span class="num"></span>        <span class="sym">|</span> not print
<span class="line">   79 </span>                <span class="sym">= (</span>count<span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   80 </span><span class="sym"></span>        #<span class="sym">!</span> out <span class="sym">=</span> out <span class="sym">&lt;&lt;&lt;</span> count <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot;: &quot;</span> <span class="sym">&lt;&lt;&lt;</span> num <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot;\n&quot;</span>
<span class="line">   81 </span>        <span class="sym">= (</span>count<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>num<span class="sym">,</span>ovecs`<span class="sym">,</span>out<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">   82 </span><span class="sym">
</span><span class="line">   83 </span><span class="sym">//
</span><span class="line">   84 </span><span class="sym"></span>ss <span class="sym">:: !</span>String <span class="sym">!</span>{#<span class="kwb">Int</span>} <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">-&gt;</span> String
<span class="line">   85 </span>ss string ovecs i
<span class="line">   86 </span>        # j                <span class="sym">=</span> i <span class="sym">*</span> <span class="num">2
</span><span class="line">   87 </span><span class="num"></span>        # b                <span class="sym">=</span> ovecs.<span class="sym">[</span>j<span class="sym">]
</span><span class="line">   88 </span><span class="sym"></span>        # e                <span class="sym">=</span> ovecs.<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]
</span><span class="line">   89 </span><span class="sym">        =</span> string<span class="sym">%(</span>b<span class="sym">,</span>e<span class="num">-1</span><span class="sym">)
</span><span class="line">   90 </span><span class="sym">
</span><span class="line">   91 </span><span class="sym"></span>ss` <span class="sym">:: !</span>String <span class="sym">!</span>{#<span class="kwb">Int</span>} <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!*</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span>String
<span class="line">   92 </span>ss` string ovecs i res k
<span class="line">   93 </span>        # j                <span class="sym">=</span> i <span class="sym">*</span> <span class="num">2
</span><span class="line">   94 </span><span class="num"></span>        # b                <span class="sym">=</span> ovecs.<span class="sym">[</span>j<span class="sym">]
</span><span class="line">   95 </span><span class="sym"></span>        # e                <span class="sym">=</span> ovecs.<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]
</span><span class="line">   96 </span><span class="sym"></span>        # res        <span class="sym">=</span> ssloop string k b e res
<span class="line">   97 </span>        <span class="sym">=</span> res
<span class="line">   98 </span><span class="kwa">where
</span><span class="line">   99 </span><span class="kwa"></span>        ssloop <span class="sym">:: !</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!*</span>{#<span class="kwb">Char</span>} <span class="sym">-&gt; *</span>{#<span class="kwb">Char</span>}
<span class="line">  100 </span>        ssloop string x y s res
<span class="line">  101 </span>                <span class="sym">|</span> y <span class="sym">&gt;=</span> s
<span class="line">  102 </span>                        <span class="sym">=</span> res
<span class="line">  103 </span>                <span class="sym">=</span> ssloop string <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> s {res <span class="sym">&amp; [</span>x<span class="sym">] =</span> string.<span class="sym">[</span>y<span class="sym">]</span>}
<span class="line">  104 </span>
<span class="line">  105 </span>LoadOvec <span class="sym">:: !</span>{#<span class="kwb">Int</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  106 </span><span class="sym"></span>LoadOvec a ptr nb tb
<span class="line">  107 </span>        # tb        <span class="sym">=</span> mmove a ptr nb tb
<span class="line">  108 </span>        <span class="sym">= (</span>a<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">  109 </span><span class="sym">
</span><span class="line">  110 </span><span class="sym"></span>readInput acc input
<span class="line">  111 </span>        # <span class="sym">(</span>l<span class="sym">,</span>input<span class="sym">)        =</span> freadline input
<span class="line">  112 </span>        <span class="sym">|</span> size l <span class="sym">==</span> <span class="num">0
</span><span class="line">  113 </span><span class="num"></span>                <span class="sym">= (</span>reverse acc<span class="sym">,</span>input<span class="sym">)
</span><span class="line">  114 </span><span class="sym">        =</span> readInput <span class="sym">[</span>l<span class="sym">:</span>acc<span class="sym">]</span> input
<span class="line">  115 </span>
<span class="line">  116 </span>
<span class="line">  117 </span>NULL                                <span class="sym">:==</span> <span class="num">0
</span><span class="line">  118 </span><span class="num"></span>PCRE_INFO_CAPTURECOUNT                <span class="sym">:==</span> <span class="num">2
</span><span class="line">  119 </span><span class="num"></span>pattern <span class="sym">=
</span><span class="line">  120 </span><span class="sym"></span>   <span class="str">&quot;(^|[^0-9\\(]+)&quot;</span> <span class="sym">+++                                //</span> $<span class="num">1
</span><span class="line">  121 </span><span class="num"></span>   <span class="str">&quot;(&quot;</span> <span class="sym">+++                                        //</span> $<span class="num">2
</span><span class="line">  122 </span><span class="num"></span>   <span class="str">&quot;\\(([0-9][0-9][0-9])\\)&quot;</span> <span class="sym">+++                //</span> $<span class="num">3
</span><span class="line">  123 </span><span class="num"></span>   <span class="str">&quot;|&quot;</span> <span class="sym">+++
</span><span class="line">  124 </span><span class="sym"></span>   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span> <span class="sym">+++                        //</span> $<span class="num">4
</span><span class="line">  125 </span><span class="num"></span>   <span class="str">&quot;)&quot;</span> <span class="sym">+++
</span><span class="line">  126 </span><span class="sym"></span>   <span class="str">&quot; &quot;</span> <span class="sym">+++
</span><span class="line">  127 </span><span class="sym"></span>   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span> <span class="sym">+++                        //</span> $<span class="num">5
</span><span class="line">  128 </span><span class="num"></span>   <span class="str">&quot;[ -]&quot;</span>  <span class="sym">+++
</span><span class="line">  129 </span><span class="sym"></span>   <span class="str">&quot;([0-9][0-9][0-9][0-9])&quot;</span> <span class="sym">+++                        //</span> $<span class="num">6
</span><span class="line">  130 </span><span class="num"></span>   <span class="str">&quot;[^0-9]&quot;</span> <span class="sym">+++
</span><span class="line">  131 </span><span class="sym"></span>   <span class="str">&quot;\0&quot;</span>
<span class="line">  132 </span>
<span class="line">  133 </span>pattern` <span class="sym">=
</span><span class="line">  134 </span><span class="sym"></span>   <span class="str">&quot;(?:^|[^\\d\\(])&quot;</span>        <span class="sym">+++        /*</span> must be preceeded by non<span class="sym">-</span>digit <span class="sym">*/
</span><span class="line">  135 </span><span class="sym"></span>   <span class="str">&quot;(\\()?&quot;</span>                <span class="sym">+++        /*</span> match <span class="num">1</span><span class="sym">:</span> possible initial left paren <span class="sym">*/
</span><span class="line">  136 </span><span class="sym"></span>   <span class="str">&quot;(\\d\\d\\d)&quot;</span>        <span class="sym">+++        /*</span> match <span class="num">2</span><span class="sym">:</span> area code is <span class="num">3</span> digits <span class="sym">*/
</span><span class="line">  137 </span><span class="sym"></span>   <span class="str">&quot;(?(1)\\))&quot;</span>                <span class="sym">+++        /*</span> if match1 <span class="kwa">then</span> match right paren <span class="sym">*/
</span><span class="line">  138 </span><span class="sym"></span>   <span class="str">&quot;[ ]&quot;</span>                <span class="sym">+++        /*</span> area code followed by one space <span class="sym">*/
</span><span class="line">  139 </span><span class="sym"></span>   <span class="str">&quot;(\\d\\d\\d)&quot;</span>        <span class="sym">+++        /*</span> match <span class="num">3</span><span class="sym">:</span> prefix <span class="kwa">of</span> <span class="num">3</span> digits <span class="sym">*/
</span><span class="line">  140 </span><span class="sym"></span>   <span class="str">&quot;[ -]&quot;</span>                <span class="sym">+++        /*</span> separator is either space or dash <span class="sym">*/
</span><span class="line">  141 </span><span class="sym"></span>   <span class="str">&quot;(\\d\\d\\d\\d)&quot;</span>        <span class="sym">+++        /*</span> match <span class="num">4</span><span class="sym">:</span> last <span class="num">4</span> digits <span class="sym">*/
</span><span class="line">  142 </span><span class="sym"></span>   <span class="str">&quot;\\D&quot;</span>                        <span class="sym">/*</span> must be followed by a non<span class="sym">-</span>digit <span class="sym">*/
</span><span class="line">  143 </span><span class="sym">
</span><span class="line">  144 </span><span class="sym">
</span><span class="line">  145 </span><span class="sym">::</span> MyPtr a        <span class="sym">:==</span> <span class="kwb">Int
</span><span class="line">  146 </span><span class="kwb"></span><span class="sym">::</span> PCRE                <span class="sym">:==</span> <span class="kwb">Int
</span><span class="line">  147 </span><span class="kwb"></span><span class="sym">::</span> PCREE        <span class="sym">:==</span> <span class="kwb">Int
</span><span class="line">  148 </span><span class="kwb"></span>pcre_compile <span class="sym">:: !</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!(</span>MyPtr String<span class="sym">) !(</span>MyPtr <span class="kwb">Int</span><span class="sym">) !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>PCRE<span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  149 </span><span class="sym"></span>pcre_compile _ _ _ _ _ _ <span class="sym">=</span> code {
<span class="line">  150 </span>        ccall pcre_compile <span class="str">&quot;sIIII:I:I&quot;</span>
<span class="line">  151 </span>        }
<span class="line">  152 </span>pcre_study <span class="sym">:: !</span>PCRE <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!(</span>MyPtr String<span class="sym">) !*</span>Toolbox <span class="sym">-&gt; (!</span>PCREE<span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  153 </span><span class="sym"></span>pcre_study _ _ _ _ <span class="sym">=</span> code {
<span class="line">  154 </span>        ccall pcre_study <span class="str">&quot;III:I:I&quot;</span>
<span class="line">  155 </span>        }
<span class="line">  156 </span>pcre_fullinfo <span class="sym">:: !</span>PCRE <span class="sym">!</span>PCREE <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  157 </span><span class="sym"></span>pcre_fullinfo _ _ _ _ _ <span class="sym">=</span> code {
<span class="line">  158 </span>        ccall pcre_fullinfo <span class="str">&quot;IIII:I:I&quot;</span>
<span class="line">  159 </span>        }
<span class="line">  160 </span>pcre_exec <span class="sym">:: !</span>PCRE <span class="sym">!</span>PCREE <span class="sym">!</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!(</span>MyPtr <span class="kwb">Int</span><span class="sym">) !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  161 </span><span class="sym"></span>pcre_exec _ _ _ _ _ _ _ _ _ <span class="sym">=</span> code {
<span class="line">  162 </span>        ccall pcre_exec <span class="str">&quot;IIsIIIII:I:I&quot;</span>
<span class="line">  163 </span>        }
<span class="line">  164 </span>
<span class="line">  165 </span><span class="sym">//</span> memory access
<span class="line">  166 </span><span class="sym">::</span> Ptr                <span class="sym">:==</span> <span class="kwb">Int
</span><span class="line">  167 </span><span class="kwb"></span><span class="sym">::</span> Toolbox        <span class="sym">:==</span> <span class="kwb">Int
</span><span class="line">  168 </span><span class="kwb"></span><span class="sym">//</span> win32
<span class="line">  169 </span><span class="sym">/*
</span><span class="line">  170 </span><span class="sym"></span><span class="kwa">import</span> code from library <span class="str">&quot;pcre_library&quot;</span>
<span class="line">  171 </span>malloc <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>Ptr<span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  172 </span><span class="sym"></span>malloc n tb <span class="sym">= (</span>GlobalAlloc GPTR n<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">  173 </span><span class="sym"></span><span class="kwa">where
</span><span class="line">  174 </span><span class="kwa"></span>        GPTR        <span class="sym">=</span> <span class="num">0x0040
</span><span class="line">  175 </span><span class="num">
</span><span class="line">  176 </span><span class="num"></span>        GlobalAlloc <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> Ptr
<span class="line">  177 </span>        GlobalAlloc uFlags dwBytes <span class="sym">=</span> code {
<span class="line">  178 </span>                ccall GlobalAlloc&#64;<span class="num">8</span> <span class="str">&quot;PII:I&quot;</span>
<span class="line">  179 </span>                }
<span class="line">  180 </span>load <span class="sym">:: !</span>Ptr <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  181 </span><span class="sym"></span>load ptr tb <span class="sym">= (</span>read4 ptr<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">  182 </span><span class="sym"></span><span class="kwa">where
</span><span class="line">  183 </span><span class="kwa"></span>        read4 <span class="sym">:: !</span>Ptr <span class="sym">-&gt;</span> <span class="kwb">Int
</span><span class="line">  184 </span><span class="kwb"></span>        read4 p <span class="sym">=</span> code {
<span class="line">  185 </span>                instruction <span class="num">139
</span><span class="line">  186 </span><span class="num"></span>                instruction <span class="num">0</span> <span class="sym">|</span> mov   eax<span class="sym">,</span>dword ptr <span class="sym">[</span>eax<span class="sym">]
</span><span class="line">  187 </span><span class="sym"></span>                }
<span class="line">  188 </span>store <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; *</span>Toolbox
<span class="line">  189 </span>store ptr val tb
<span class="line">  190 </span>        <span class="sym">=</span> write4 ptr val tb
<span class="line">  191 </span><span class="kwa">where
</span><span class="line">  192 </span><span class="kwa"></span>        write4 <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.env <span class="sym">-&gt;</span> .env
<span class="line">  193 </span>        write4 address value env <span class="sym">=</span> code {
<span class="line">  194 </span>                        instruction <span class="num">137</span>                <span class="sym">|</span> movl <span class="sym">%</span>eax<span class="sym">, (%</span>ebx<span class="sym">)
</span><span class="line">  195 </span><span class="sym"></span>                        instruction <span class="num">3
</span><span class="line">  196 </span><span class="num"></span>                        pop_b        <span class="num">2
</span><span class="line">  197 </span><span class="num"></span>                }
<span class="line">  198 </span>mmove <span class="sym">:: !</span>.{#<span class="kwb">Int</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; *</span>Toolbox
<span class="line">  199 </span>mmove dst src len tb <span class="sym">=</span> code {
<span class="line">  200 </span>        ccall RtlMoveMemory&#64;<span class="num">12</span> <span class="str">&quot;PAII:V:I&quot;</span>
<span class="line">  201 </span>        }
<span class="line">  202 </span><span class="sym">*/
</span><span class="line">  203 </span><span class="sym">
</span><span class="line">  204 </span><span class="sym">//</span> linux386
<span class="line">  205 </span>malloc <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>Ptr<span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  206 </span><span class="sym"></span>malloc n tb
<span class="line">  207 </span>        # <span class="sym">(</span>ptr<span class="sym">,</span>tb<span class="sym">)        =</span> malloc_ n tb
<span class="line">  208 </span>        <span class="sym">|</span> ptr <span class="sym">==</span> <span class="num">0</span>        <span class="sym">=</span> abort <span class="str">&quot;malloc failed\n&quot;</span>
<span class="line">  209 </span>        <span class="sym">= (</span>ptr<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">  210 </span><span class="sym"></span><span class="kwa">where
</span><span class="line">  211 </span><span class="kwa"></span>        malloc_ <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>MyPtr a<span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  212 </span><span class="sym"></span>        malloc_ _ _ <span class="sym">=</span> code {
<span class="line">  213 </span>                ccall malloc <span class="str">&quot;I:I:I&quot;</span>
<span class="line">  214 </span>                }
<span class="line">  215 </span>load <span class="sym">:: !</span>Ptr <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  216 </span><span class="sym"></span>load ptr tb <span class="sym">= (</span>read4 ptr<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">  217 </span><span class="sym"></span><span class="kwa">where
</span><span class="line">  218 </span><span class="kwa"></span>        read4 <span class="sym">:: !</span>Ptr <span class="sym">-&gt;</span> <span class="kwb">Int
</span><span class="line">  219 </span><span class="kwb"></span>        read4 p <span class="sym">=</span> code {
<span class="line">  220 </span>                instruction <span class="num">139
</span><span class="line">  221 </span><span class="num"></span>                instruction <span class="num">0</span> <span class="sym">|</span> mov   eax<span class="sym">,</span>dword ptr <span class="sym">[</span>eax<span class="sym">]
</span><span class="line">  222 </span><span class="sym"></span>                }
<span class="line">  223 </span>store <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; *</span>Toolbox
<span class="line">  224 </span>store ptr val tb
<span class="line">  225 </span>        <span class="sym">=</span> write4 ptr val tb
<span class="line">  226 </span><span class="kwa">where
</span><span class="line">  227 </span><span class="kwa"></span>        write4 <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.env <span class="sym">-&gt;</span> .env
<span class="line">  228 </span>        write4 address value env <span class="sym">=</span> code {
<span class="line">  229 </span>                        instruction <span class="num">137</span>                <span class="sym">|</span> movl <span class="sym">%</span>eax<span class="sym">, (%</span>ebx<span class="sym">)
</span><span class="line">  230 </span><span class="sym"></span>                        instruction <span class="num">3
</span><span class="line">  231 </span><span class="num"></span>                        pop_b        <span class="num">2
</span><span class="line">  232 </span><span class="num"></span>                }
<span class="line">  233 </span>
<span class="line">  234 </span>mmove <span class="sym">:: !</span>.{#<span class="kwb">Int</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; *</span>Toolbox
<span class="line">  235 </span>mmove dst src len tb <span class="sym">=</span> code {
<span class="line">  236 </span>        ccall memmove <span class="str">&quot;AII:V:I&quot;</span>
<span class="line">  237 </span>        }
<span class="line">  238 </span><span class="sym">//</span> mosx
<span class="line">  239 </span><span class="sym">/*
</span><span class="line">  240 </span><span class="sym"></span>malloc <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>Ptr<span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  241 </span><span class="sym"></span>malloc n tb
<span class="line">  242 </span>        # <span class="sym">(</span>ptr<span class="sym">,</span>tb<span class="sym">)        =</span> malloc_ n tb
<span class="line">  243 </span>        <span class="sym">|</span> ptr <span class="sym">==</span> <span class="num">0</span>        <span class="sym">=</span> abort <span class="str">&quot;malloc failed\n&quot;</span>
<span class="line">  244 </span>        <span class="sym">= (</span>ptr<span class="sym">,</span>tb<span class="sym">)
</span><span class="line">  245 </span><span class="sym"></span><span class="kwa">where
</span><span class="line">  246 </span><span class="kwa"></span>        malloc_ <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span>MyPtr a<span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  247 </span><span class="sym"></span>        malloc_ _ _ <span class="sym">=</span> code {
<span class="line">  248 </span>                ccall malloc <span class="str">&quot;I:I:I&quot;</span>
<span class="line">  249 </span>                }
<span class="line">  250 </span>load <span class="sym">:: !</span>Ptr <span class="sym">!*</span>Toolbox <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>Toolbox<span class="sym">)
</span><span class="line">  251 </span><span class="sym"></span>load ptr tb
<span class="line">  252 </span>        <span class="sym">= (</span>LoadLong1 ptr<span class="sym">,</span> tb<span class="sym">)
</span><span class="line">  253 </span><span class="sym"></span><span class="kwa">where
</span><span class="line">  254 </span><span class="kwa"></span>        LoadLong1 <span class="sym">:: !</span>Ptr <span class="sym">-&gt;</span> <span class="kwb">Int
</span><span class="line">  255 </span><span class="kwb"></span>        LoadLong1 p <span class="sym">=</span> code <span class="sym">(</span>p<span class="sym">=</span>U<span class="sym">)(</span>r<span class="sym">=</span>A0<span class="sym">)</span>{
<span class="line">  256 </span>                instruction <span class="num">0x83180000</span>        <span class="sym">|</span>        lwz        r24<span class="sym">,</span><span class="num">0</span><span class="sym">(</span>r24<span class="sym">)
</span><span class="line">  257 </span><span class="sym"></span>                }
<span class="line">  258 </span>store <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>Toolbox <span class="sym">-&gt; *</span>Toolbox
<span class="line">  259 </span>store ptr val tb
<span class="line">  260 </span>        <span class="sym">=</span> StoreLong1 ptr val
<span class="line">  261 </span><span class="kwa">where
</span><span class="line">  262 </span><span class="kwa"></span>        StoreLong1 <span class="sym">:: !</span>Ptr <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span>Ptr
<span class="line">  263 </span>        StoreLong1 p v <span class="sym">=</span> code <span class="sym">(</span>p<span class="sym">=</span>U<span class="sym">,</span>v<span class="sym">=</span>U<span class="sym">)(</span>q<span class="sym">=</span>A0<span class="sym">)</span>{
<span class="line">  264 </span>                instruction        <span class="num">0x93190000</span>        <span class="sym">|</span>        stw        r24<span class="sym">,</span><span class="num">0</span><span class="sym">(</span>r25<span class="sym">)
</span><span class="line">  265 </span><span class="sym"></span>                instruction        <span class="num">0x7F38CB78</span>        <span class="sym">|</span>        mr        r24<span class="sym">,</span>r25
<span class="line">  266 </span>                }
<span class="line">  267 </span><span class="sym">*/</span>
