<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/mzscheme -r

<I><FONT COLOR="#B22222">;  http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">;  wordfreq.mzscheme by Grzegorz Chrupaa
</FONT></I><I><FONT COLOR="#B22222">;
</FONT></I>
(require (lib <B><FONT COLOR="#BC8F8F">&quot;list.ss&quot;</FONT></B>)
         (lib <B><FONT COLOR="#BC8F8F">&quot;string.ss&quot;</FONT></B>))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">port-for-each</FONT></B>
  (<B><FONT COLOR="#A020F0">lambda</FONT></B> (processor reader)
    (<B><FONT COLOR="#A020F0">let</FONT></B> loop ((next (reader)))
      (unless (eof-object? next)
        (processor next)
        (loop (reader))))))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">hash-table-&gt;alist</FONT></B> table)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((alist '()))
    (hash-table-for-each
     table
     (<B><FONT COLOR="#A020F0">lambda</FONT></B> (key value) (<B><FONT COLOR="#A020F0">set!</FONT></B> alist (cons (cons key value) alist))))
    alist))
                         

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> . _)
  (<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">table</FONT></B> (make-hash-table 'equal))
  (port-for-each (<B><FONT COLOR="#A020F0">lambda</FONT></B> (line) (parse-line line table)) read-line)
  (hash-table-remove! table <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>)
  (for-each (<B><FONT COLOR="#A020F0">lambda</FONT></B> (pair)
              (<B><FONT COLOR="#A020F0">let</FONT></B> ((word (car pair))
                    (count (cdr pair)))
                (printf <B><FONT COLOR="#BC8F8F">&quot;~a~a~a~n&quot;</FONT></B> count <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> word)))
            (quicksort (hash-table-&gt;alist table)
                  (<B><FONT COLOR="#A020F0">lambda</FONT></B> (pair1 pair2)
                    (<B><FONT COLOR="#A020F0">or</FONT></B> (&gt; (cdr pair1) (cdr pair2))
                        (<B><FONT COLOR="#A020F0">and</FONT></B> (= (cdr pair1) (cdr pair2))
                             (string&lt;? (car pair2) (car pair1))))))))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">rx</FONT></B> (regexp <B><FONT COLOR="#BC8F8F">&quot;[^a-zA-Z]+&quot;</FONT></B>))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">parse-line</FONT></B> line table)
  (string-lowercase! line)
  (for-each
   (<B><FONT COLOR="#A020F0">lambda</FONT></B> (word)
     (<B><FONT COLOR="#A020F0">let</FONT></B> ((count (hash-table-get table word (<B><FONT COLOR="#A020F0">lambda</FONT></B> () 0))))
       (hash-table-put! table word (+ count 1))))
   (regexp-split rx line)))

(main)</pre></td></tr></table>
