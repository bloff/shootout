<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="line">    2 </span>
<span class="line">    3 </span><span class="slc">;  http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">;  wordfreq.mzscheme by Grzegorz Chrupaa
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">;
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;list.ss&quot;</span><span class="sym">)
</span><span class="line">    8 </span><span class="sym">         (</span>lib <span class="str">&quot;string.ss&quot;</span><span class="sym">))
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym">(</span>define port<span class="sym">-</span>for<span class="sym">-</span>each
<span class="line">   11 </span>  <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>processor reader<span class="sym">)
</span><span class="line">   12 </span><span class="sym">    (</span>let loop <span class="sym">((</span>next <span class="sym">(</span>reader<span class="sym">)))
</span><span class="line">   13 </span><span class="sym">      (</span>unless <span class="sym">(</span>eof<span class="sym">-</span>object? next<span class="sym">)
</span><span class="line">   14 </span><span class="sym">        (</span>processor next<span class="sym">)
</span><span class="line">   15 </span><span class="sym">        (</span>loop <span class="sym">(</span>reader<span class="sym">))))))
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym">(</span>define <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-&gt;</span>alist table<span class="sym">)
</span><span class="line">   18 </span><span class="sym">  (</span>let <span class="sym">((</span>alist <span class="str">'()))
</span><span class="line">   19 </span><span class="str">    (hash-table-for-each
</span><span class="line">   20 </span><span class="str">     table
</span><span class="line">   21 </span><span class="str">     (lambda (key value) (set! alist (cons (cons key value) alist))))
</span><span class="line">   22 </span><span class="str">    alist))
</span><span class="line">   23 </span><span class="str">
</span><span class="line">   24 </span><span class="str">
</span><span class="line">   25 </span><span class="str">(define (main . _)
</span><span class="line">   26 </span><span class="str">  (define table (make-hash-table '</span><span class="kwa">equal</span><span class="sym">))
</span><span class="line">   27 </span><span class="sym">  (</span>port<span class="sym">-</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span><span class="kwa">line</span><span class="sym">) (</span>parse<span class="sym">-</span><span class="kwa">line line</span> table<span class="sym">))</span> <span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)
</span><span class="line">   28 </span><span class="sym">  (</span>hash<span class="sym">-</span>table<span class="sym">-</span>remove<span class="sym">!</span> table <span class="str">&quot;&quot;</span><span class="sym">)
</span><span class="line">   29 </span><span class="sym">  (</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>pair<span class="sym">)
</span><span class="line">   30 </span><span class="sym">              (</span>let <span class="sym">((</span>word <span class="sym">(</span><span class="kwa">car</span> pair<span class="sym">))
</span><span class="line">   31 </span><span class="sym">                    (</span>count <span class="sym">(</span><span class="kwa">cdr</span> pair<span class="sym">)))
</span><span class="line">   32 </span><span class="sym">                (</span>printf <span class="str">&quot;~a~a~a~n&quot;</span> count <span class="str">&quot; &quot;</span> word<span class="sym">)))
</span><span class="line">   33 </span><span class="sym">            (</span>quicksort <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-&gt;</span>alist table<span class="sym">)
</span><span class="line">   34 </span><span class="sym">                  (</span><span class="kwa">lambda</span> <span class="sym">(</span>pair1 pair2<span class="sym">)
</span><span class="line">   35 </span><span class="sym">                    (</span><span class="kwa">or</span> <span class="sym">(&gt; (</span><span class="kwa">cdr</span> pair1<span class="sym">) (</span><span class="kwa">cdr</span> pair2<span class="sym">))
</span><span class="line">   36 </span><span class="sym">                        (</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">cdr</span> pair1<span class="sym">) (</span><span class="kwa">cdr</span> pair2<span class="sym">))
</span><span class="line">   37 </span><span class="sym">                             (</span>string<span class="sym">&lt;</span>? <span class="sym">(</span><span class="kwa">car</span> pair2<span class="sym">) (</span><span class="kwa">car</span> pair1<span class="sym">))))))))
</span><span class="line">   38 </span><span class="sym">
</span><span class="line">   39 </span><span class="sym">(</span>define rx <span class="sym">(</span>regexp <span class="str">&quot;[^a-zA-Z]+&quot;</span><span class="sym">))
</span><span class="line">   40 </span><span class="sym">
</span><span class="line">   41 </span><span class="sym">(</span>define <span class="sym">(</span>parse<span class="sym">-</span><span class="kwa">line line</span> table<span class="sym">)
</span><span class="line">   42 </span><span class="sym">  (</span>string<span class="sym">-</span>lowercase<span class="sym">!</span> <span class="kwa">line</span><span class="sym">)
</span><span class="line">   43 </span><span class="sym">  (</span>for<span class="sym">-</span>each
<span class="line">   44 </span>   <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>word<span class="sym">)
</span><span class="line">   45 </span><span class="sym">     (</span>let <span class="sym">((</span>count <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>get table word <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span> <span class="num">0</span><span class="sym">))))
</span><span class="line">   46 </span><span class="sym">       (</span>hash<span class="sym">-</span>table<span class="sym">-</span>put<span class="sym">!</span> table word <span class="sym">(+</span> count <span class="num">1</span><span class="sym">))))
</span><span class="line">   47 </span><span class="sym">   (</span>regexp<span class="sym">-</span>split rx <span class="kwa">line</span><span class="sym">)))
</span><span class="line">   48 </span><span class="sym">
</span><span class="line">   49 </span><span class="sym">(</span>main<span class="sym">)</span>
