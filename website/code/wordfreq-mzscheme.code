#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">; $Id: wordfreq-mzscheme.code,v 1.16 2007-05-19 07:50:09 bfulgham Exp $</span>
<span class="slc">;  http://shootout.alioth.debian.org/</span>
<span class="slc">;  wordfreq.mzscheme by Grzegorz Chrupaa</span>
<span class="slc">;  Updated and corrected by Brent Fulgham</span>
<span class="slc">;  Re-written by Matthew Flatt with some inspriation from the Python example</span>

<span class="sym">(</span>module wordfreq mzscheme
  <span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;list.ss&quot;</span><span class="sym">))</span>

  <span class="sym">(</span>define t <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">'</span><span class="kwa">equal</span><span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>register<span class="sym">-</span>word<span class="sym">!</span> s<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">([</span>s <span class="sym">(</span>string<span class="sym">-</span>downcase <span class="sym">(</span>bytes<span class="sym">-&gt;</span>string<span class="sym">/</span>utf<span class="sym">-</span><span class="num">8</span> s<span class="sym">))])</span>
      <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>put<span class="sym">!</span> t s <span class="sym">(</span>add1 <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>get t s <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span> <span class="num">0</span><span class="sym">))))))</span>

  <span class="sym">(</span>let <span class="sym">([</span>in <span class="sym">(</span>current<span class="sym">-</span>input<span class="sym">-</span>port<span class="sym">)])</span>
    <span class="sym">(</span>let loop <span class="sym">()</span>
      <span class="sym">(</span>let <span class="sym">([</span>m <span class="sym">(</span>regexp<span class="sym">-</span>match #rx#<span class="str">&quot;[a-zA-Z]+&quot;</span> in<span class="sym">)])</span>
	<span class="sym">(</span>when m
	  <span class="sym">(</span>register<span class="sym">-</span>word<span class="sym">! (</span><span class="kwa">car</span> m<span class="sym">))</span>
	  <span class="sym">(</span>loop<span class="sym">)))))</span>

  <span class="sym">(</span>for<span class="sym">-</span>each display
	    <span class="sym">(</span>sort <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>map
		   t
		   <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>word count<span class="sym">)</span>
		     <span class="sym">(</span>let <span class="sym">((</span>count <span class="sym">(</span>number<span class="sym">-&gt;</span>string count<span class="sym">)))</span>
		       <span class="sym">(</span>format<span class="str">&quot;~a~a ~a~%&quot;</span>
			      <span class="sym">(</span>make<span class="sym">-</span>string <span class="sym">(-</span> <span class="num">7</span> <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> count<span class="sym">))</span> #\space<span class="sym">)</span>
			      count
			      word<span class="sym">))))</span>
		  string<span class="sym">&gt;</span>?<span class="sym">)))</span>
