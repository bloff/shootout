<span class="line">    1 </span><span class="slc">// $Id: lists1-kaffe.code,v 1.4 2004-11-13 07:41:53 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span>
<span class="line">    4 </span><span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="line">    5 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>lang<span class="sym">.</span>reflect<span class="sym">.*;
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span><span class="kwa">public class</span> lists1 <span class="sym">{
</span><span class="line">   10 </span><span class="sym"></span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {
</span><span class="line">   11 </span><span class="sym"></span>        <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span>        <span class="slc">// create empty list B
</span><span class="line">   14 </span><span class="slc"></span>        <span class="kwc">LinkedList</span> B <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   15 </span><span class="sym">
</span><span class="line">   16 </span><span class="sym"></span>        <span class="slc">// create list (A) of integers from 1 through N
</span><span class="line">   17 </span><span class="slc"></span>        <span class="kwc">LinkedList</span> A <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   18 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span>n<span class="sym">;</span> i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">--) {
</span><span class="line">   19 </span><span class="sym"></span>            A<span class="sym">.</span>addFirst<span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span>i<span class="sym">));
</span><span class="line">   20 </span><span class="sym">        }
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span>        <span class="slc">// move each individual item from A to B, in a loop, reversing order
</span><span class="line">   23 </span><span class="slc"></span>        <span class="kwa">while</span> <span class="sym">(!</span> A<span class="sym">.</span>isEmpty<span class="sym">()) {
</span><span class="line">   24 </span><span class="sym"></span>            B<span class="sym">.</span>addFirst<span class="sym">(</span>A<span class="sym">.</span>removeFirst<span class="sym">());
</span><span class="line">   25 </span><span class="sym">        }
</span><span class="line">   26 </span><span class="sym">
</span><span class="line">   27 </span><span class="sym"></span>        <span class="slc">// print first 2 elements of B
</span><span class="line">   28 </span><span class="slc"></span>        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>B<span class="sym">.</span>get<span class="sym">(</span><span class="num">0</span><span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> B<span class="sym">.</span>get<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span><span class="line">   29 </span><span class="sym">
</span><span class="line">   30 </span><span class="sym"></span>        <span class="slc">// reverse B (can be done in place)
</span><span class="line">   31 </span><span class="slc"></span>        <span class="kwc">LinkedList</span> tmp <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   32 </span><span class="sym"></span>        <span class="kwa">while</span> <span class="sym">(!</span> B<span class="sym">.</span>isEmpty<span class="sym">()) {
</span><span class="line">   33 </span><span class="sym"></span>            tmp<span class="sym">.</span>addFirst<span class="sym">(</span>B<span class="sym">.</span>removeFirst<span class="sym">());
</span><span class="line">   34 </span><span class="sym">        }
</span><span class="line">   35 </span><span class="sym"></span>        B <span class="sym">=</span> tmp<span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>        <span class="slc">// java.util.Collections.reverse(B);
</span><span class="line">   37 </span><span class="slc"></span>
<span class="line">   38 </span>
<span class="line">   39 </span>        <span class="slc">// is 0 a member of B?
</span><span class="line">   40 </span><span class="slc"></span>        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">((</span>B<span class="sym">.</span>contains<span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">)))</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym"></span>        <span class="slc">// is N a member of B?
</span><span class="line">   43 </span><span class="slc"></span>        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">((</span>B<span class="sym">.</span>contains<span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span>n<span class="sym">)))</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);
</span><span class="line">   44 </span><span class="sym">
</span><span class="line">   45 </span><span class="sym"></span>        <span class="slc">// filter values from B to A that are less than N/2, preserving order
</span><span class="line">   46 </span><span class="slc"></span>        <span class="kwb">int</span> mid <span class="sym">=</span> n<span class="sym">/</span><span class="num">2</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">ListIterator</span> li <span class="sym">=</span> B<span class="sym">.</span>listIterator<span class="sym">();</span> li<span class="sym">.</span>hasNext<span class="sym">();) {
</span><span class="line">   48 </span><span class="sym"></span>            <span class="kwb">int</span> val <span class="sym">= ((</span><span class="kwc">Integer</span><span class="sym">)</span>li<span class="sym">.</span>next<span class="sym">()).</span>intValue<span class="sym">();
</span><span class="line">   49 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>val <span class="sym">&lt;</span> mid<span class="sym">)</span> A<span class="sym">.</span>addLast<span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span>val<span class="sym">));
</span><span class="line">   50 </span><span class="sym">        }
</span><span class="line">   51 </span><span class="sym">
</span><span class="line">   52 </span><span class="sym"></span>        <span class="slc">// print first ten items of A
</span><span class="line">   53 </span><span class="slc"></span>        <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   54 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">ListIterator</span> li <span class="sym">=</span> A<span class="sym">.</span>listIterator<span class="sym">();</span> i<span class="sym">&lt;</span><span class="num">10</span> <span class="sym">&amp;&amp;</span> li<span class="sym">.</span>hasNext<span class="sym">();</span> i<span class="sym">++) {
</span><span class="line">   55 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>print<span class="sym">(((</span><span class="kwc">Integer</span><span class="sym">)</span>li<span class="sym">.</span>next<span class="sym">()).</span>intValue<span class="sym">() + ((</span>i<span class="sym">&lt;</span><span class="num">9</span><span class="sym">)</span> ? <span class="str">&quot; &quot;</span> <span class="sym">:</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">));
</span><span class="line">   56 </span><span class="sym">        }
</span><span class="line">   57 </span><span class="sym">
</span><span class="line">   58 </span><span class="sym"></span>        <span class="slc">// print sum of items in A that are less than 1000
</span><span class="line">   59 </span><span class="slc"></span>        <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   60 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">ListIterator</span> li <span class="sym">=</span> A<span class="sym">.</span>listIterator<span class="sym">();</span> li<span class="sym">.</span>hasNext<span class="sym">();) {
</span><span class="line">   61 </span><span class="sym"></span>            <span class="kwb">int</span> val <span class="sym">= ((</span><span class="kwc">Integer</span><span class="sym">)</span>li<span class="sym">.</span>next<span class="sym">()).</span>intValue<span class="sym">();
</span><span class="line">   62 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>val <span class="sym">&lt;</span> <span class="num">1000</span><span class="sym">)</span> sum <span class="sym">+=</span> val<span class="sym">;
</span><span class="line">   63 </span><span class="sym">        }
</span><span class="line">   64 </span><span class="sym"></span>        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>sum<span class="sym">);
</span><span class="line">   65 </span><span class="sym">
</span><span class="line">   66 </span><span class="sym"></span>        <span class="slc">// append B to end of A
</span><span class="line">   67 </span><span class="slc"></span>        A<span class="sym">.</span>addAll<span class="sym">(</span>B<span class="sym">);
</span><span class="line">   68 </span><span class="sym">
</span><span class="line">   69 </span><span class="sym"></span>        <span class="slc">// print length and last element of A
</span><span class="line">   70 </span><span class="slc"></span>        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>A<span class="sym">.</span>size<span class="sym">() +</span> <span class="str">&quot; &quot;</span> <span class="sym">+ ((</span><span class="kwc">Integer</span><span class="sym">)</span>A<span class="sym">.</span>getLast<span class="sym">()).</span>intValue<span class="sym">());
</span><span class="line">   71 </span><span class="sym">    }
</span><span class="line">   72 </span><span class="sym">}</span>
