<span class="line">    1 </span><span class="slc">%%% -*- mode: erlang -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">%%% $Id: ringmsg-erlang.code,v 1.3 2004-11-11 07:14:18 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">%%% http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">-</span>module<span class="sym">(</span>ringmsg<span class="sym">)</span>.
<span class="line">    6 </span><span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.
<span class="line">    7 </span>
<span class="line">    8 </span><span class="sym">-</span>define<span class="sym">(</span> WORK_HARD<span class="sym">,</span> <span class="num">10</span><span class="sym">)</span>.
<span class="line">    9 </span><span class="sym">-</span>define<span class="sym">(</span> NUMBER_OF_PROCESSES<span class="sym">,</span> <span class="num">8192</span><span class="sym">)</span>.
<span class="line">   10 </span>
<span class="line">   11 </span>main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">'1'</span><span class="sym">])</span>.
<span class="line">   12 </span>main<span class="sym">([</span>Arg1<span class="sym">]) -&gt;
</span><span class="line">   13 </span><span class="sym"></span>        Number_of_Messages <span class="sym">=</span> atom_to_integer<span class="sym">(</span> Arg1 <span class="sym">),
</span><span class="line">   14 </span><span class="sym"></span>        Last_Message <span class="sym">=</span> ring<span class="sym">(</span> ?NUMBER_OF_PROCESSES<span class="sym">,</span> Number_of_Messages <span class="sym">),
</span><span class="line">   15 </span><span class="sym"></span>        io<span class="sym">:</span>fwrite<span class="sym">(</span> <span class="str">&quot;~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>Last_Message<span class="sym">] ),
</span><span class="line">   16 </span><span class="sym"></span>        erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">()</span>.
<span class="line">   17 </span>
<span class="line">   18 </span>
<span class="line">   19 </span>atom_to_integer<span class="sym">(</span> Atom <span class="sym">) -&gt;
</span><span class="line">   20 </span><span class="sym"></span>        erlang<span class="sym">:</span><span class="kwb">list_to_integer</span><span class="sym">(</span>erlang<span class="sym">:</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Atom<span class="sym">))</span>.
<span class="line">   21 </span>
<span class="line">   22 </span>
<span class="line">   23 </span>ring<span class="sym">(</span> N<span class="sym">,</span> Number_of_Messages <span class="sym">) -&gt;
</span><span class="line">   24 </span><span class="sym"></span>        First_Pid <span class="sym">=</span> erlang<span class="sym">:</span><span class="kwb">self</span><span class="sym">(),
</span><span class="line">   25 </span><span class="sym"></span>        Second_Pid <span class="sym">=</span> erlang<span class="sym">:</span><span class="kwb">spawn</span><span class="sym">(</span> <span class="kwa">fun</span><span class="sym">() -&gt;</span> init_process<span class="sym">(</span>N<span class="sym">,</span> First_Pid<span class="sym">,</span> First_Pid<span class="sym">)</span> <span class="kwa">end</span> <span class="sym">),
</span><span class="line">   26 </span><span class="sym"></span>        first_process_loop<span class="sym">(</span>Number_of_Messages<span class="sym">,</span> Second_Pid<span class="sym">,</span> the_ring<span class="sym">,</span> asd<span class="sym">,</span> ?WORK_HARD<span class="sym">)</span>.
<span class="line">   27 </span>
<span class="line">   28 </span>
<span class="line">   29 </span>init_process<span class="sym">(</span> <span class="num">0</span><span class="sym">,</span> Previous_Pid<span class="sym">,</span> First_Pid <span class="sym">) -&gt;
</span><span class="line">   30 </span><span class="sym"></span>        loop<span class="sym">(</span> Previous_Pid<span class="sym">,</span>  erlang<span class="sym">:</span><span class="kwb">self</span><span class="sym">(),</span> First_Pid<span class="sym">,</span> ?WORK_HARD <span class="sym">);
</span><span class="line">   31 </span><span class="sym"></span>init_process<span class="sym">(</span> N<span class="sym">,</span>  Previous_Pid<span class="sym">,</span> First_Pid <span class="sym">) -&gt;
</span><span class="line">   32 </span><span class="sym"></span>        My_Pid <span class="sym">=</span> erlang<span class="sym">:</span><span class="kwb">self</span><span class="sym">(),
</span><span class="line">   33 </span><span class="sym"></span>        Next_Pid <span class="sym">=</span> erlang<span class="sym">:</span><span class="kwb">spawn</span><span class="sym">(</span> <span class="kwa">fun</span><span class="sym">() -&gt;</span> init_process<span class="sym">(</span>N<span class="num">-1</span><span class="sym">,</span> My_Pid<span class="sym">,</span> First_Pid<span class="sym">)</span> <span class="kwa">end</span> <span class="sym">),
</span><span class="line">   34 </span><span class="sym"></span>        loop<span class="sym">(</span> Previous_Pid<span class="sym">,</span>  My_Pid<span class="sym">,</span> Next_Pid<span class="sym">,</span> ?WORK_HARD <span class="sym">)</span>.
<span class="line">   35 </span>
<span class="line">   36 </span>
<span class="line">   37 </span>loop<span class="sym">(</span> Previous_Pid<span class="sym">,</span> My_Pid<span class="sym">,</span> Next_Pid<span class="sym">,</span> <span class="num">0</span> <span class="sym">) -&gt;
</span><span class="line">   38 </span><span class="sym"></span>        <span class="kwa">receive
</span><span class="line">   39 </span><span class="kwa"></span>        low_priority_message <span class="sym">-&gt;
</span><span class="line">   40 </span><span class="sym"></span>                loop<span class="sym">(</span> Previous_Pid<span class="sym">,</span>  My_Pid<span class="sym">,</span> Next_Pid<span class="sym">,</span> <span class="num">0</span> <span class="sym">)
</span><span class="line">   41 </span><span class="sym"></span>        <span class="kwa">after</span> <span class="num">0</span> <span class="sym">-&gt;
</span><span class="line">   42 </span><span class="sym"></span>                loop<span class="sym">(</span> Previous_Pid<span class="sym">,</span>  My_Pid<span class="sym">,</span> Next_Pid<span class="sym">,</span> ?WORK_HARD <span class="sym">)
</span><span class="line">   43 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>loop<span class="sym">(</span> Previous_Pid<span class="sym">,</span> My_Pid<span class="sym">,</span> Next_Pid<span class="sym">,</span> Work <span class="sym">) -&gt;
</span><span class="line">   45 </span><span class="sym"></span>        <span class="kwa">receive
</span><span class="line">   46 </span><span class="kwa"></span>        <span class="sym">{</span>Previous_Pid<span class="sym">,</span> Message<span class="sym">} -&gt;
</span><span class="line">   47 </span><span class="sym"></span>                Next_Pid <span class="sym">! {</span>My_Pid<span class="sym">,</span> Message<span class="sym">},
</span><span class="line">   48 </span><span class="sym"></span>                Next_Pid <span class="sym">!</span> low_priority_message<span class="sym">,
</span><span class="line">   49 </span><span class="sym"></span>                loop<span class="sym">(</span> Previous_Pid<span class="sym">,</span>  My_Pid<span class="sym">,</span> Next_Pid<span class="sym">,</span> Work <span class="num">- 1</span> <span class="sym">)
</span><span class="line">   50 </span><span class="sym"></span>        <span class="kwa">end</span>.
<span class="line">   51 </span>
<span class="line">   52 </span>
<span class="line">   53 </span>first_process_loop<span class="sym">(</span> <span class="num">0</span><span class="sym">,</span> _First_Pid<span class="sym">,</span> _Send_Message<span class="sym">,</span> Receive_Message<span class="sym">,</span> _Work<span class="sym">) -&gt;
</span><span class="line">   54 </span><span class="sym"></span>        Receive_Message<span class="sym">;
</span><span class="line">   55 </span><span class="sym"></span>first_process_loop<span class="sym">(</span> N<span class="sym">,</span> First_Pid<span class="sym">,</span> Message<span class="sym">,</span> Previous_In<span class="sym">,</span> <span class="num">0</span><span class="sym">) -&gt;
</span><span class="line">   56 </span><span class="sym"></span>        <span class="kwa">receive
</span><span class="line">   57 </span><span class="kwa"></span>        low_priority_message <span class="sym">-&gt;
</span><span class="line">   58 </span><span class="sym"></span>                first_process_loop<span class="sym">(</span>N<span class="sym">,</span> First_Pid<span class="sym">,</span> Message<span class="sym">,</span> Previous_In<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   59 </span><span class="sym"></span>        <span class="kwa">after</span> <span class="num">0</span> <span class="sym">-&gt;
</span><span class="line">   60 </span><span class="sym"></span>                first_process_loop<span class="sym">(</span> N<span class="sym">,</span> First_Pid<span class="sym">,</span> Message<span class="sym">,</span> Previous_In<span class="sym">,</span> ?WORK_HARD <span class="sym">)
</span><span class="line">   61 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">   62 </span><span class="sym"></span>first_process_loop<span class="sym">(</span> N<span class="sym">,</span> First_Pid<span class="sym">,</span> Message<span class="sym">,</span> _Previous_In<span class="sym">,</span> Work<span class="sym">) -&gt;
</span><span class="line">   63 </span><span class="sym"></span>        First_Pid <span class="sym">! {</span>erlang<span class="sym">:</span><span class="kwb">self</span><span class="sym">(),</span> Message<span class="sym">},
</span><span class="line">   64 </span><span class="sym"></span>        First_Pid <span class="sym">!</span> low_priority_message<span class="sym">,
</span><span class="line">   65 </span><span class="sym"></span>        <span class="kwa">receive
</span><span class="line">   66 </span><span class="kwa"></span>        <span class="sym">{</span>_Last_Pid<span class="sym">,</span> Input<span class="sym">} -&gt;
</span><span class="line">   67 </span><span class="sym"></span>                first_process_loop<span class="sym">(</span> N<span class="num">-1</span><span class="sym">,</span> First_Pid<span class="sym">,</span> Message<span class="sym">,</span> Input<span class="sym">,</span> Work <span class="num">- 1</span><span class="sym">)
</span><span class="line">   68 </span><span class="sym"></span>        <span class="kwa">end</span>.
