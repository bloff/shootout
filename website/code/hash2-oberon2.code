<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">(* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy (Oberon-2 novice)
*)</FONT></I>

<B><FONT COLOR="#228B22">MODULE</FONT></B> Hash2;
<B><FONT COLOR="#5F9EA0">IMPORT</FONT></B> LangShootout, SimpleHash, Strings, IntStr, Out, S<B><FONT COLOR="#5F9EA0">:=</FONT></B>SYSTEM;

<B><FONT COLOR="#5F9EA0">CONST</FONT></B>
   maxLength <B><FONT COLOR="#5F9EA0">=</FONT></B> 11;

<B><FONT COLOR="#A020F0">VAR</FONT></B>
   buffer: <B><FONT COLOR="#228B22">ARRAY</FONT></B> maxLength <B><FONT COLOR="#A020F0">OF</FONT></B> <B><FONT COLOR="#228B22">CHAR</FONT></B>;
   n, i: <B><FONT COLOR="#228B22">LONGINT</FONT></B>;
   table1, table2: SimpleHash.Hashtable;
   item1, item2: SimpleHash.Item;
   key, key1, key9999: SimpleHash.ItemKey;   


<B><FONT COLOR="#A020F0">PROCEDURE </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">IntToItemKey</FONT></I></B></FONT></B>(n: <B><FONT COLOR="#228B22">LONGINT</FONT></B>): SimpleHash.ItemKey;
<B><FONT COLOR="#A020F0">VAR</FONT></B>
   digits: <B><FONT COLOR="#228B22">LONGINT</FONT></B>;
   key: SimpleHash.ItemKey;
<B><FONT COLOR="#A020F0">BEGIN</FONT></B>
   IntStr.IntToStr(n,buffer);
   digits <B><FONT COLOR="#5F9EA0">:=</FONT></B> Strings.Length(buffer);
   <B><FONT COLOR="#A020F0">NEW</FONT></B>(key, digits);
   S.MOVE(S.ADR(buffer[0]), S.VAL(<B><FONT COLOR="#228B22">LONGINT</FONT></B>,key), digits); 
   <B><FONT COLOR="#A020F0">RETURN</FONT></B> key;
<B><FONT COLOR="#A020F0">END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">IntToItemKey</FONT></I></B></FONT></B>;


<B><FONT COLOR="#A020F0">BEGIN</FONT></B>
   n <B><FONT COLOR="#5F9EA0">:=</FONT></B> LangShootout.Argi();
   table1 <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.New(10000);
   table2 <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.New(10000);

   <B><FONT COLOR="#A020F0">FOR</FONT></B> i <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0 <B><FONT COLOR="#A020F0">TO</FONT></B> 9999 <B><FONT COLOR="#A020F0">DO</FONT></B>
      key <B><FONT COLOR="#5F9EA0">:=</FONT></B> IntToItemKey(i);
      item1 <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.AddKey(table1, key);
      item1.value <B><FONT COLOR="#5F9EA0">:=</FONT></B> i;
   <B><FONT COLOR="#A020F0">END</FONT></B>;

   <B><FONT COLOR="#A020F0">FOR</FONT></B> i <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0 <B><FONT COLOR="#A020F0">TO</FONT></B> n<B><FONT COLOR="#5F9EA0">-</FONT></B>1 <B><FONT COLOR="#A020F0">DO</FONT></B>
      item1 <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.First(table1);
      <B><FONT COLOR="#A020F0">WHILE</FONT></B> item1 <B><FONT COLOR="#5F9EA0">#</FONT></B> <B><FONT COLOR="#228B22">NIL</FONT></B> <B><FONT COLOR="#A020F0">DO</FONT></B>
         item2 <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.AddKey(table2, item1.key);
	 <B><FONT COLOR="#A020F0">INC</FONT></B>(item2.value, item1.value);
	 item1 <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.Next(table1);
      <B><FONT COLOR="#A020F0">END</FONT></B>;
   <B><FONT COLOR="#A020F0">END</FONT></B>;

   key1 <B><FONT COLOR="#5F9EA0">:=</FONT></B> IntToItemKey(1);
   key9999 <B><FONT COLOR="#5F9EA0">:=</FONT></B> IntToItemKey(9999);

   item1 <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.Find(table1, key1);
   Out.Int(item1.value, 1); Out.Char(20X);
   item1 <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.Find(table1, key9999);
   Out.Int(item1.value, 0); Out.Char(20X);
   item2 <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.Find(table2, key1);
   Out.Int(item2.value, 0); Out.Char(20X);
   item2 <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.Find(table2, key9999);
   Out.Int(item2.value, 0); Out.Ln;
<B><FONT COLOR="#A020F0">END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Hash2</FONT></I></B></FONT></B>.</pre></td></tr></table>
