<span class="slc">#!/usr/bin/python
</span><span class="slc"># $Id: echo-python.code,v 1.5 2004-12-05 01:58:28 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="slc"># with help from Brad Knotwell
</span>
<span class="kwc">import</span> sys<span class="sym">,</span> os
<span class="kwc">from</span> socket <span class="kwc">import</span> <span class="sym">*

</span>DATA <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span>
bufferSize <span class="sym">=</span> <span class="kwa">len</span><span class="sym">(</span>DATA<span class="sym">)

</span><span class="kwb">def</span> server_sock<span class="sym">():
</span>    sock <span class="sym">=</span> socket<span class="sym">(</span>AF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">)
</span>    sock<span class="sym">.</span>setsockopt<span class="sym">(</span>SOL_SOCKET<span class="sym">,</span> SO_REUSEADDR<span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span>    sock<span class="sym">.</span>bind<span class="sym">((</span><span class="str">'127.0.0.1'</span><span class="sym">,</span> <span class="num">0</span><span class="sym">));
</span>    sock<span class="sym">.</span>listen<span class="sym">(</span><span class="num">2</span><span class="sym">)
</span>    <span class="kwb">return</span><span class="sym">(</span>sock<span class="sym">)

</span><span class="kwb">def</span> get_port<span class="sym">(</span>sock<span class="sym">):
</span>    host<span class="sym">,</span> port <span class="sym">=</span> sock<span class="sym">.</span>getsockname<span class="sym">()
</span>    <span class="kwb">return</span><span class="sym">(</span>port<span class="sym">)

</span><span class="kwb">def</span> client_sock<span class="sym">(</span>port<span class="sym">):
</span>    sock <span class="sym">=</span> socket<span class="sym">(</span>AF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">)
</span>    sock<span class="sym">.</span>connect<span class="sym">((</span><span class="str">'127.0.0.1'</span><span class="sym">,</span> port<span class="sym">))
</span>    <span class="kwb">return</span><span class="sym">(</span>sock<span class="sym">)

</span><span class="kwb">def</span> echo_client<span class="sym">(</span>n<span class="sym">,</span> port<span class="sym">):
</span>    sock <span class="sym">=</span> client_sock<span class="sym">(</span>port<span class="sym">)
</span>    sender<span class="sym">,</span>receiver <span class="sym">=</span> sock<span class="sym">.</span>send<span class="sym">,</span>sock<span class="sym">.</span>recv
    <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">range</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">):
</span>        sender<span class="sym">(</span>DATA<span class="sym">)
</span>        ans <span class="sym">=</span> receiver<span class="sym">(</span>bufferSize<span class="sym">)
</span>        <span class="kwb">while</span> ans<span class="sym">[-</span><span class="num">1</span><span class="sym">] !=</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">:
</span>            ans <span class="sym">+=</span> receiver<span class="sym">(</span>bufferSize <span class="sym">-</span> <span class="kwa">len</span><span class="sym">(</span>ans<span class="sym">))
</span>        <span class="kwb">if</span> ans <span class="sym">&lt;&gt;</span> DATA<span class="sym">:
</span>            <span class="kwb">raise</span><span class="sym">(</span><span class="str">&quot;client:</span> <span class="esc">\&quot;</span><span class="str">%s</span><span class="esc">\&quot; </span> <span class="str">ne</span> <span class="esc">\&quot;</span><span class="str">%s</span><span class="esc">\&quot;</span><span class="str">&quot;</span> <span class="sym">% (</span>DATA<span class="sym">,</span> ans<span class="sym">))
</span>    sock<span class="sym">.</span>close<span class="sym">()

</span><span class="kwb">def</span> echo_server<span class="sym">(</span>n<span class="sym">):
</span>    ssock <span class="sym">=</span> server_sock<span class="sym">()
</span>    <span class="kwb">if</span> os<span class="sym">.</span>fork<span class="sym">() &gt;</span> <span class="num">0</span><span class="sym">:
</span>        <span class="slc"># parent is server
</span>        csock<span class="sym">,</span> addr <span class="sym">=</span> ssock<span class="sym">.</span>accept<span class="sym">()
</span>        n <span class="sym">=</span> <span class="num">0
</span>        sender<span class="sym">,</span>receiver <span class="sym">=</span> csock<span class="sym">.</span>send<span class="sym">,</span>csock<span class="sym">.</span>recv
        <span class="kwb">while</span> <span class="num">1</span><span class="sym">:
</span>            dat <span class="sym">=</span> receiver<span class="sym">(</span>bufferSize<span class="sym">)
</span>            <span class="kwb">if not</span> dat<span class="sym">:</span> <span class="kwb">break
</span>            sender<span class="sym">(</span>dat<span class="sym">)
</span>            n <span class="sym">+=</span> <span class="kwa">len</span><span class="sym">(</span>dat<span class="sym">)
</span>        <span class="kwb">print</span> <span class="str">&quot;server processed %d bytes&quot;</span> <span class="sym">%</span> n
        os<span class="sym">.</span>wait<span class="sym">()
</span>    <span class="kwb">else</span><span class="sym">:
</span>        <span class="slc"># child is client
</span>        echo_client<span class="sym">(</span>n<span class="sym">,</span> get_port<span class="sym">(</span>ssock<span class="sym">))

</span><span class="kwb">def</span> main<span class="sym">():
</span>    n <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])
</span>    <span class="kwb">if</span> n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">:
</span>        n <span class="sym">=</span> <span class="num">1
</span>    echo_server<span class="sym">(</span>n<span class="sym">)

</span>main<span class="sym">()</span>
