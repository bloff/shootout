<span class="line">    1 </span><span class="com">(* The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="com">    http://shootout.alioth.debian.org
</span><span class="line">    3 </span><span class="com"> 
</span><span class="line">    4 </span><span class="com">    contributed by Isaac Gouy (Oberon-2 novice)
</span><span class="line">    5 </span><span class="com">    Line-by-line (more or less) translation of the C implemention.
</span><span class="line">    6 </span><span class="com"> *)</span>
<span class="line">    7 </span>
<span class="line">    8 </span>
<span class="line">    9 </span>   <span class="kwa">MODULE</span> Lists<span class="sym">;
</span><span class="line">   10 </span><span class="sym"> </span><span class="kwa">IMPORT</span> LangShootout<span class="sym">,</span> SYSTEM<span class="sym">,</span> Out<span class="sym">;
</span><span class="line">   11 </span><span class="sym"> 
</span><span class="line">   12 </span><span class="sym"> </span><span class="kwa">CONST</span> Size <span class="sym">=</span> <span class="num">10000</span><span class="sym">;
</span><span class="line">   13 </span><span class="sym"> 
</span><span class="line">   14 </span><span class="sym"> </span><span class="kwa">TYPE
</span><span class="line">   15 </span><span class="kwa"> </span>   List <span class="sym">=</span> <span class="kwb">POINTER</span> <span class="kwa">TO</span> ListRec<span class="sym">;
</span><span class="line">   16 </span><span class="sym"> </span>   ListRec <span class="sym">=</span> <span class="kwa">RECORD
</span><span class="line">   17 </span><span class="kwa"> </span>      val<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="line">   18 </span><span class="sym"> </span>      next<span class="sym">:</span> List<span class="sym">;
</span><span class="line">   19 </span><span class="sym"> </span>      prev<span class="sym">:</span> List<span class="sym">;
</span><span class="line">   20 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym"> 
</span><span class="line">   22 </span><span class="sym"> </span><span class="kwa">VAR
</span><span class="line">   23 </span><span class="kwa"> </span>   n<span class="sym">,</span> result<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="line">   24 </span><span class="sym"> </span>   l1<span class="sym">,</span> l2<span class="sym">,</span> l3<span class="sym">,</span> item<span class="sym">:</span> List<span class="sym">;
</span><span class="line">   25 </span><span class="sym"> 
</span><span class="line">   26 </span><span class="sym"> 
</span><span class="line">   27 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> Length <span class="sym">(</span>head<span class="sym">:</span> List<span class="sym">):</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="line">   28 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">   29 </span><span class="kwa">    RETURN</span> head<span class="sym">.</span>val<span class="sym">;
</span><span class="line">   30 </span><span class="sym"> </span><span class="kwa">END</span> Length<span class="sym">;
</span><span class="line">   31 </span><span class="sym"> 
</span><span class="line">   32 </span><span class="sym"> 
</span><span class="line">   33 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> Empty <span class="sym">(</span>head<span class="sym">:</span> List<span class="sym">):</span> <span class="kwb">BOOLEAN</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">   35 </span><span class="kwa">    RETURN</span> Length<span class="sym">(</span>head<span class="sym">) =</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym"> </span><span class="kwa">END</span> Empty<span class="sym">;
</span><span class="line">   37 </span><span class="sym"> 
</span><span class="line">   38 </span><span class="sym"> 
</span><span class="line">   39 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> First <span class="sym">(</span>head<span class="sym">:</span> List<span class="sym">):</span> List<span class="sym">;
</span><span class="line">   40 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">   41 </span><span class="kwa">    RETURN</span> head<span class="sym">.</span>next<span class="sym">;
</span><span class="line">   42 </span><span class="sym"> </span><span class="kwa">END</span> First<span class="sym">;
</span><span class="line">   43 </span><span class="sym"> 
</span><span class="line">   44 </span><span class="sym"> 
</span><span class="line">   45 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> Last <span class="sym">(</span>head<span class="sym">:</span> List<span class="sym">):</span> List<span class="sym">;
</span><span class="line">   46 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">   47 </span><span class="kwa">    RETURN</span> head<span class="sym">.</span>prev<span class="sym">;
</span><span class="line">   48 </span><span class="sym"> </span><span class="kwa">END</span> Last<span class="sym">;
</span><span class="line">   49 </span><span class="sym"> 
</span><span class="line">   50 </span><span class="sym"> 
</span><span class="line">   51 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> PushTail <span class="sym">(</span><span class="kwa">VAR</span> head<span class="sym">:</span> List<span class="sym">;</span> item<span class="sym">:</span> List<span class="sym">);
</span><span class="line">   52 </span><span class="sym"> </span><span class="kwa">VAR</span> tail<span class="sym">:</span> List<span class="sym">;
</span><span class="line">   53 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">   54 </span><span class="kwa"> </span>   tail <span class="sym">:=</span> head<span class="sym">.</span>prev<span class="sym">;
</span><span class="line">   55 </span><span class="sym"> </span>   tail<span class="sym">.</span>next <span class="sym">:=</span> item<span class="sym">;
</span><span class="line">   56 </span><span class="sym"> </span>   item<span class="sym">.</span>next <span class="sym">:=</span> head<span class="sym">;
</span><span class="line">   57 </span><span class="sym"> </span>   head<span class="sym">.</span>prev <span class="sym">:=</span> item<span class="sym">;
</span><span class="line">   58 </span><span class="sym"> </span>   item<span class="sym">.</span>prev <span class="sym">:=</span> tail<span class="sym">;
</span><span class="line">   59 </span><span class="sym"> </span>   <span class="kwa">INC</span><span class="sym">(</span>head<span class="sym">.</span>val<span class="sym">);
</span><span class="line">   60 </span><span class="sym"> </span><span class="kwa">END</span> PushTail<span class="sym">;
</span><span class="line">   61 </span><span class="sym"> 
</span><span class="line">   62 </span><span class="sym"> 
</span><span class="line">   63 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> PopTail <span class="sym">(</span><span class="kwa">VAR</span> head<span class="sym">:</span> List<span class="sym">):</span> List<span class="sym">;
</span><span class="line">   64 </span><span class="sym"> </span><span class="kwa">VAR</span> prev<span class="sym">,</span> tail<span class="sym">:</span> List<span class="sym">;
</span><span class="line">   65 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">   66 </span><span class="kwa">    IF</span> Empty<span class="sym">(</span>head<span class="sym">)</span> <span class="kwa">THEN RETURN NIL</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;
</span><span class="line">   67 </span><span class="sym"> </span>   tail <span class="sym">:=</span> head<span class="sym">.</span>prev<span class="sym">;
</span><span class="line">   68 </span><span class="sym"> </span>   prev <span class="sym">:=</span> tail<span class="sym">.</span>prev<span class="sym">;
</span><span class="line">   69 </span><span class="sym"> </span>   prev<span class="sym">.</span>next <span class="sym">:=</span> head<span class="sym">;
</span><span class="line">   70 </span><span class="sym"> </span>   head<span class="sym">.</span>prev <span class="sym">:=</span> prev<span class="sym">;
</span><span class="line">   71 </span><span class="sym"> </span>   <span class="kwa">DEC</span><span class="sym">(</span>head<span class="sym">.</span>val<span class="sym">);
</span><span class="line">   72 </span><span class="sym"> </span>   <span class="kwa">RETURN</span> tail<span class="sym">;
</span><span class="line">   73 </span><span class="sym"> </span><span class="kwa">END</span> PopTail<span class="sym">;
</span><span class="line">   74 </span><span class="sym"> 
</span><span class="line">   75 </span><span class="sym"> 
</span><span class="line">   76 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> PushHead <span class="sym">(</span><span class="kwa">VAR</span> head<span class="sym">,</span> item<span class="sym">:</span> List<span class="sym">);</span> <span class="com">(* never used *)</span>
<span class="line">   77 </span> <span class="kwa">VAR</span> next<span class="sym">:</span> List<span class="sym">;
</span><span class="line">   78 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">   79 </span><span class="kwa"> </span>   next <span class="sym">:=</span> head<span class="sym">.</span>next<span class="sym">;
</span><span class="line">   80 </span><span class="sym"> </span>   head<span class="sym">.</span>next <span class="sym">:=</span> item<span class="sym">;
</span><span class="line">   81 </span><span class="sym"> </span>   next<span class="sym">.</span>prev <span class="sym">:=</span> item<span class="sym">;
</span><span class="line">   82 </span><span class="sym"> </span>   item<span class="sym">.</span>next <span class="sym">:=</span> next<span class="sym">;
</span><span class="line">   83 </span><span class="sym"> </span>   item<span class="sym">.</span>prev <span class="sym">:=</span> head<span class="sym">;
</span><span class="line">   84 </span><span class="sym"> </span>   <span class="kwa">INC</span><span class="sym">(</span>head<span class="sym">.</span>val<span class="sym">);
</span><span class="line">   85 </span><span class="sym"> </span><span class="kwa">END</span> PushHead<span class="sym">;
</span><span class="line">   86 </span><span class="sym"> 
</span><span class="line">   87 </span><span class="sym"> 
</span><span class="line">   88 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> PopHead <span class="sym">(</span><span class="kwa">VAR</span> head<span class="sym">:</span> List<span class="sym">):</span> List<span class="sym">;
</span><span class="line">   89 </span><span class="sym"> </span><span class="kwa">VAR</span> next<span class="sym">:</span> List<span class="sym">;
</span><span class="line">   90 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">   91 </span><span class="kwa">    IF</span> Empty<span class="sym">(</span>head<span class="sym">)</span> <span class="kwa">THEN RETURN NIL</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;
</span><span class="line">   92 </span><span class="sym"> </span>   next <span class="sym">:=</span> head<span class="sym">.</span>next<span class="sym">;
</span><span class="line">   93 </span><span class="sym"> </span>   head<span class="sym">.</span>next <span class="sym">:=</span> next<span class="sym">.</span>next<span class="sym">;
</span><span class="line">   94 </span><span class="sym"> </span>   next<span class="sym">.</span>next<span class="sym">.</span>prev <span class="sym">:=</span> head<span class="sym">;
</span><span class="line">   95 </span><span class="sym"> </span>   <span class="kwa">DEC</span><span class="sym">(</span>head<span class="sym">.</span>val<span class="sym">);
</span><span class="line">   96 </span><span class="sym"> </span>   <span class="kwa">RETURN</span> next<span class="sym">;
</span><span class="line">   97 </span><span class="sym"> </span><span class="kwa">END</span> PopHead<span class="sym">;
</span><span class="line">   98 </span><span class="sym"> 
</span><span class="line">   99 </span><span class="sym"> 
</span><span class="line">  100 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> Equal <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">:</span> List<span class="sym">):</span> <span class="kwb">BOOLEAN</span><span class="sym">;
</span><span class="line">  101 </span><span class="sym"> </span><span class="kwa">VAR</span> xp<span class="sym">,</span> yp<span class="sym">:</span> List<span class="sym">;
</span><span class="line">  102 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">  103 </span><span class="kwa"> </span>   xp <span class="sym">:=</span> x<span class="sym">;
</span><span class="line">  104 </span><span class="sym"> </span>   yp <span class="sym">:=</span> y<span class="sym">;
</span><span class="line">  105 </span><span class="sym"> </span>   <span class="kwa">WHILE</span> xp<span class="sym">.</span>next # x <span class="kwa">DO
</span><span class="line">  106 </span><span class="kwa">       IF</span> xp<span class="sym">.</span>val # yp<span class="sym">.</span>val <span class="kwa">THEN RETURN</span> FALSE<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;
</span><span class="line">  107 </span><span class="sym"> </span>      xp <span class="sym">:=</span> xp<span class="sym">.</span>next<span class="sym">;
</span><span class="line">  108 </span><span class="sym"> </span>      yp <span class="sym">:=</span> yp<span class="sym">.</span>next<span class="sym">;
</span><span class="line">  109 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  110 </span><span class="sym"> </span>   <span class="kwa">IF</span> xp<span class="sym">.</span>val # yp<span class="sym">.</span>val <span class="kwa">THEN RETURN</span> FALSE<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;
</span><span class="line">  111 </span><span class="sym"> </span>   <span class="kwa">RETURN</span>  yp<span class="sym">.</span>next <span class="sym">=</span> y<span class="sym">;
</span><span class="line">  112 </span><span class="sym"> </span><span class="kwa">END</span> Equal<span class="sym">;
</span><span class="line">  113 </span><span class="sym"> 
</span><span class="line">  114 </span><span class="sym"> 
</span><span class="line">  115 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> Print <span class="sym">(</span>msg<span class="sym">:</span> <span class="kwa">ARRAY OF</span> <span class="kwb">CHAR</span><span class="sym">;</span> x<span class="sym">:</span> List<span class="sym">);</span> <span class="com">(* never used *)</span>
<span class="line">  116 </span> <span class="kwa">VAR
</span><span class="line">  117 </span><span class="kwa"> </span>   xp<span class="sym">,</span> first<span class="sym">:</span> List<span class="sym">;
</span><span class="line">  118 </span><span class="sym"> </span>   i<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="line">  119 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">  120 </span><span class="kwa"> </span>   first <span class="sym">:=</span> x<span class="sym">.</span>next<span class="sym">;
</span><span class="line">  121 </span><span class="sym"> </span>   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  122 </span><span class="sym"> </span>   xp <span class="sym">:=</span> x<span class="sym">.</span>next<span class="sym">;;
</span><span class="line">  123 </span><span class="sym"> </span>   <span class="kwa">WHILE</span> xp<span class="sym">.</span>next # first <span class="kwa">DO
</span><span class="line">  124 </span><span class="kwa"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span>msg<span class="sym">);
</span><span class="line">  125 </span><span class="sym"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;i:&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>i<span class="sym">,</span><span class="num">3</span><span class="sym">);
</span><span class="line">  126 </span><span class="sym"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;   v:&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>xp<span class="sym">.</span>val<span class="sym">,</span><span class="num">3</span><span class="sym">);
</span><span class="line">  127 </span><span class="sym"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;   n:&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>xp<span class="sym">.</span>next<span class="sym">.</span>val<span class="sym">,</span><span class="num">3</span><span class="sym">);
</span><span class="line">  128 </span><span class="sym"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;   p:&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>xp<span class="sym">.</span>prev<span class="sym">.</span>val<span class="sym">,</span><span class="num">3</span><span class="sym">);
</span><span class="line">  129 </span><span class="sym"> </span>      Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  130 </span><span class="sym"> </span>      <span class="kwa">INC</span><span class="sym">(</span>i<span class="sym">);
</span><span class="line">  131 </span><span class="sym"> </span>      xp <span class="sym">:=</span> xp<span class="sym">.</span>next<span class="sym">;
</span><span class="line">  132 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  133 </span><span class="sym"> </span>   Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;[last entry points to list head]&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  134 </span><span class="sym"> </span>   Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;[val of next of tail is: &quot;</span><span class="sym">);
</span><span class="line">  135 </span><span class="sym"> </span>   Out<span class="sym">.</span>Int<span class="sym">(</span>xp<span class="sym">.</span>next<span class="sym">.</span>val<span class="sym">,</span><span class="num">3</span><span class="sym">);</span> Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;]&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  136 </span><span class="sym"> </span><span class="kwa">END</span> Print<span class="sym">;
</span><span class="line">  137 </span><span class="sym"> 
</span><span class="line">  138 </span><span class="sym"> 
</span><span class="line">  139 </span><span class="sym"> 
</span><span class="line">  140 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> New <span class="sym">():</span> List<span class="sym">;
</span><span class="line">  141 </span><span class="sym"> </span><span class="kwa">VAR</span> l<span class="sym">:</span> List<span class="sym">;
</span><span class="line">  142 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">  143 </span><span class="kwa">    NEW</span><span class="sym">(</span>l<span class="sym">);
</span><span class="line">  144 </span><span class="sym"> </span>   l<span class="sym">.</span>next <span class="sym">:=</span> l<span class="sym">;
</span><span class="line">  145 </span><span class="sym"> </span>   l<span class="sym">.</span>prev <span class="sym">:=</span> l<span class="sym">;
</span><span class="line">  146 </span><span class="sym"> </span>   l<span class="sym">.</span>val <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  147 </span><span class="sym"> </span>   <span class="kwa">RETURN</span> l<span class="sym">;
</span><span class="line">  148 </span><span class="sym"> </span><span class="kwa">END</span> New<span class="sym">;
</span><span class="line">  149 </span><span class="sym"> 
</span><span class="line">  150 </span><span class="sym"> 
</span><span class="line">  151 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> Sequence <span class="sym">(</span>from<span class="sym">,</span> to<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> List<span class="sym">;
</span><span class="line">  152 </span><span class="sym"> </span><span class="kwa">VAR
</span><span class="line">  153 </span><span class="kwa"> </span>   size<span class="sym">,</span> tmp<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="line">  154 </span><span class="sym"> </span>   a<span class="sym">:</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY OF</span> ListRec<span class="sym">;
</span><span class="line">  155 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">  156 </span><span class="kwa">    IF</span> from <span class="sym">&gt;</span> to <span class="kwa">THEN
</span><span class="line">  157 </span><span class="kwa"> </span>      tmp <span class="sym">:=</span> from<span class="sym">;</span> from <span class="sym">:=</span> to<span class="sym">;</span> to <span class="sym">:=</span> tmp<span class="sym">;
</span><span class="line">  158 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  159 </span><span class="sym"> </span>   size <span class="sym">:=</span> to <span class="sym">-</span> from <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  160 </span><span class="sym"> 
</span><span class="line">  161 </span><span class="sym"> </span>   <span class="kwa">NEW</span><span class="sym">(</span>a<span class="sym">,</span> size<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span><span class="line">  162 </span><span class="sym"> </span>   <span class="kwa">DEC</span><span class="sym">(</span>from<span class="sym">);
</span><span class="line">  163 </span><span class="sym"> </span>   j <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  164 </span><span class="sym"> </span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> size<span class="num">-1</span> <span class="kwa">DO
</span><span class="line">  165 </span><span class="kwa"> </span>      a<span class="sym">[</span>i<span class="sym">].</span>next <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">] ));
</span><span class="line">  166 </span><span class="sym"> </span>      a<span class="sym">[</span>j<span class="sym">].</span>prev <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>j<span class="num">-1</span><span class="sym">] ));
</span><span class="line">  167 </span><span class="sym"> </span>      a<span class="sym">[</span>i<span class="sym">].</span>val <span class="sym">:=</span> from<span class="sym">;
</span><span class="line">  168 </span><span class="sym"> </span>      <span class="kwa">INC</span><span class="sym">(</span>from<span class="sym">);
</span><span class="line">  169 </span><span class="sym"> </span>      <span class="kwa">INC</span><span class="sym">(</span>j<span class="sym">);
</span><span class="line">  170 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  171 </span><span class="sym"> </span>   a<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>prev <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>size<span class="sym">] ));
</span><span class="line">  172 </span><span class="sym"> </span>   a<span class="sym">[</span>size<span class="sym">].</span>next <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">] ));
</span><span class="line">  173 </span><span class="sym"> </span>   a<span class="sym">[</span>size<span class="sym">].</span>prev <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>size<span class="num">-1</span><span class="sym">] ));
</span><span class="line">  174 </span><span class="sym"> </span>   a<span class="sym">[</span>size<span class="sym">].</span>val <span class="sym">:=</span> from<span class="sym">;
</span><span class="line">  175 </span><span class="sym"> </span>   a<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>val <span class="sym">:=</span> size<span class="sym">;
</span><span class="line">  176 </span><span class="sym"> </span>   <span class="kwa">RETURN</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">] ));
</span><span class="line">  177 </span><span class="sym"> </span><span class="kwa">END</span> Sequence<span class="sym">;
</span><span class="line">  178 </span><span class="sym"> 
</span><span class="line">  179 </span><span class="sym"> 
</span><span class="line">  180 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> Copy <span class="sym">(</span>x<span class="sym">:</span> List<span class="sym">):</span> List<span class="sym">;
</span><span class="line">  181 </span><span class="sym"> </span><span class="kwa">VAR
</span><span class="line">  182 </span><span class="kwa"> </span>   size<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="line">  183 </span><span class="sym"> </span>   xp<span class="sym">:</span> List<span class="sym">;
</span><span class="line">  184 </span><span class="sym"> </span>   a<span class="sym">:</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY OF</span> ListRec<span class="sym">;
</span><span class="line">  185 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">  186 </span><span class="kwa"> </span>   size <span class="sym">:=</span> Length<span class="sym">(</span>x<span class="sym">);
</span><span class="line">  187 </span><span class="sym"> </span>   <span class="kwa">NEW</span><span class="sym">(</span>a<span class="sym">,</span> size<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span><span class="line">  188 </span><span class="sym"> </span>   j <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  189 </span><span class="sym"> </span>   xp <span class="sym">:=</span> x<span class="sym">;
</span><span class="line">  190 </span><span class="sym"> </span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> size<span class="num">-1</span> <span class="kwa">DO
</span><span class="line">  191 </span><span class="kwa"> </span>      a<span class="sym">[</span>i<span class="sym">].</span>next <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>j<span class="sym">] ));
</span><span class="line">  192 </span><span class="sym"> </span>      a<span class="sym">[</span>j<span class="sym">].</span>prev <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>i<span class="sym">] ));
</span><span class="line">  193 </span><span class="sym"> </span>      a<span class="sym">[</span>i<span class="sym">].</span>val <span class="sym">:=</span> xp<span class="sym">.</span>val<span class="sym">;
</span><span class="line">  194 </span><span class="sym"> </span>      <span class="kwa">INC</span><span class="sym">(</span>j<span class="sym">);
</span><span class="line">  195 </span><span class="sym"> </span>      xp <span class="sym">:=</span> xp<span class="sym">.</span>next<span class="sym">;
</span><span class="line">  196 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  197 </span><span class="sym"> </span>   a<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>prev <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span>size<span class="sym">] ));
</span><span class="line">  198 </span><span class="sym"> </span>   a<span class="sym">[</span>size<span class="sym">].</span>next <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">] ));
</span><span class="line">  199 </span><span class="sym"> </span>   xp <span class="sym">:=</span> Last<span class="sym">(</span>x<span class="sym">);
</span><span class="line">  200 </span><span class="sym"> </span>   a<span class="sym">[</span>size<span class="sym">].</span>val <span class="sym">:=</span> xp<span class="sym">.</span>val<span class="sym">;
</span><span class="line">  201 </span><span class="sym"> </span>   <span class="kwa">RETURN</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>List<span class="sym">,</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span> a<span class="sym">[</span><span class="num">0</span><span class="sym">] ));
</span><span class="line">  202 </span><span class="sym"> </span><span class="kwa">END</span> Copy<span class="sym">;
</span><span class="line">  203 </span><span class="sym"> 
</span><span class="line">  204 </span><span class="sym"> 
</span><span class="line">  205 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> Reverse <span class="sym">(</span>head<span class="sym">:</span> List<span class="sym">);
</span><span class="line">  206 </span><span class="sym"> </span><span class="kwa">VAR</span> tmp<span class="sym">,</span> p<span class="sym">:</span> List<span class="sym">;
</span><span class="line">  207 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">  208 </span><span class="kwa"> </span>   p <span class="sym">:=</span> head<span class="sym">;
</span><span class="line">  209 </span><span class="sym"> </span>   <span class="kwa">REPEAT
</span><span class="line">  210 </span><span class="kwa"> </span>      tmp <span class="sym">:=</span> p<span class="sym">.</span>next<span class="sym">;
</span><span class="line">  211 </span><span class="sym"> </span>      p<span class="sym">.</span>next <span class="sym">:=</span> p<span class="sym">.</span>prev<span class="sym">;
</span><span class="line">  212 </span><span class="sym"> </span>      p<span class="sym">.</span>prev <span class="sym">:=</span> tmp<span class="sym">;
</span><span class="line">  213 </span><span class="sym"> </span>      p <span class="sym">:=</span> tmp<span class="sym">;
</span><span class="line">  214 </span><span class="sym"> </span>   <span class="kwa">UNTIL</span> p <span class="sym">=</span> head<span class="sym">;
</span><span class="line">  215 </span><span class="sym"> </span><span class="kwa">END</span> Reverse<span class="sym">;
</span><span class="line">  216 </span><span class="sym"> 
</span><span class="line">  217 </span><span class="sym"> 
</span><span class="line">  218 </span><span class="sym"> </span><span class="kwa">PROCEDURE</span> TestLists <span class="sym">():</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="line">  219 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">  220 </span><span class="kwa"> </span>   l1 <span class="sym">:=</span> Sequence<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>Size<span class="sym">);</span> <span class="com">(* Print(&quot;L1 &quot;, l1); *)</span>
<span class="line">  221 </span>    l2 <span class="sym">:=</span> Copy<span class="sym">(</span>l1<span class="sym">);</span>         <span class="com">(* Print(&quot;L2 &quot;, l2); *)</span>
<span class="line">  222 </span>    l3 <span class="sym">:=</span> New<span class="sym">();</span>            <span class="com">(* Print(&quot;L3 &quot;, l3); *)</span>
<span class="line">  223 </span>
<span class="line">  224 </span>     <span class="kwa">IF</span> ~Equal<span class="sym">(</span>l2<span class="sym">,</span> l1<span class="sym">)</span> <span class="kwa">THEN
</span><span class="line">  225 </span><span class="kwa"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;l2 and l1 are not equal&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  226 </span><span class="sym"> </span>      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  227 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  228 </span><span class="sym"> 
</span><span class="line">  229 </span><span class="sym"> </span>   <span class="kwa">WHILE</span> ~ Empty<span class="sym">(</span>l2<span class="sym">)</span> <span class="kwa">DO
</span><span class="line">  230 </span><span class="kwa"> </span>      PushTail<span class="sym">(</span>l3<span class="sym">,</span> PopHead<span class="sym">(</span>l2<span class="sym">));
</span><span class="line">  231 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  232 </span><span class="sym"> </span>                           <span class="com">(* Print(&quot;L2 &quot;, l2);
</span><span class="line">  233 </span><span class="com">                               Print(&quot;L3 &quot;, l3); *)</span>
<span class="line">  234 </span>    <span class="kwa">IF</span> ~Empty<span class="sym">(</span>l2<span class="sym">)</span> <span class="kwa">THEN
</span><span class="line">  235 </span><span class="kwa"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;l2 should be empty now&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  236 </span><span class="sym"> </span>      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  237 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  238 </span><span class="sym">                         
</span><span class="line">  239 </span><span class="sym">                                                                 </span>   <span class="kwa">WHILE</span> ~ Empty<span class="sym">(</span>l3<span class="sym">)</span> <span class="kwa">DO
</span><span class="line">  240 </span><span class="kwa"> </span>      PushTail<span class="sym">(</span>l2<span class="sym">,</span> PopTail<span class="sym">(</span>l3<span class="sym">));
</span><span class="line">  241 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  242 </span><span class="sym"> </span>                           <span class="com">(* Print(&quot;L2 &quot;, l2);
</span><span class="line">  243 </span><span class="com">                               Print(&quot;L3 &quot;, l3); *)</span>
<span class="line">  244 </span>    <span class="kwa">IF</span> ~Empty<span class="sym">(</span>l3<span class="sym">)</span> <span class="kwa">THEN
</span><span class="line">  245 </span><span class="kwa"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;l3 should be empty now&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  246 </span><span class="sym"> </span>      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  247 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  248 </span><span class="sym">         
</span><span class="line">  249 </span><span class="sym">                            </span>   Reverse<span class="sym">(</span>l1<span class="sym">);</span>            <span class="com">(* Print(&quot;L1 &quot;, l1); *)</span>
<span class="line">  250 </span>
<span class="line">  251 </span>     item <span class="sym">:=</span> First<span class="sym">(</span>l1<span class="sym">);
</span><span class="line">  252 </span><span class="sym"> </span>   <span class="kwa">IF</span> item<span class="sym">.</span>val # Size <span class="kwa">THEN
</span><span class="line">  253 </span><span class="kwa"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;L1 first value wrong, wanted &quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>Size<span class="sym">,</span><span class="num">1</span><span class="sym">);
</span><span class="line">  254 </span><span class="sym"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;, got &quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>item<span class="sym">.</span>val<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  255 </span><span class="sym"> </span>      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  256 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  257 </span><span class="sym"> 
</span><span class="line">  258 </span><span class="sym"> </span>   item <span class="sym">:=</span> Last<span class="sym">(</span>l1<span class="sym">);
</span><span class="line">  259 </span><span class="sym"> </span>   <span class="kwa">IF</span> item<span class="sym">.</span>val # <span class="num">1</span> <span class="kwa">THEN
</span><span class="line">  260 </span><span class="kwa"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;L1 last value wrong, wanted 1, got &quot;</span><span class="sym">);
</span><span class="line">  261 </span><span class="sym"> </span>      Out<span class="sym">.</span>Int<span class="sym">(</span>item<span class="sym">.</span>val<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  262 </span><span class="sym"> </span>      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  263 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  264 </span><span class="sym"> 
</span><span class="line">  265 </span><span class="sym"> </span>   item <span class="sym">:=</span> First<span class="sym">(</span>l2<span class="sym">);
</span><span class="line">  266 </span><span class="sym"> </span>   <span class="kwa">IF</span> item<span class="sym">.</span>val # Size <span class="kwa">THEN
</span><span class="line">  267 </span><span class="kwa"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;L2 first value wrong, wanted &quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>Size<span class="sym">,</span><span class="num">1</span><span class="sym">);
</span><span class="line">  268 </span><span class="sym"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;, got &quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>item<span class="sym">.</span>val<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  269 </span><span class="sym"> </span>      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  270 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  271 </span><span class="sym"> 
</span><span class="line">  272 </span><span class="sym"> </span>   item <span class="sym">:=</span> Last<span class="sym">(</span>l2<span class="sym">);
</span><span class="line">  273 </span><span class="sym"> </span>   <span class="kwa">IF</span> item<span class="sym">.</span>val # <span class="num">1</span> <span class="kwa">THEN
</span><span class="line">  274 </span><span class="kwa"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;L2 last value wrong, wanted 1, got &quot;</span><span class="sym">);
</span><span class="line">  275 </span><span class="sym"> </span>      Out<span class="sym">.</span>Int<span class="sym">(</span>item<span class="sym">.</span>val<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  276 </span><span class="sym"> </span>      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  277 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  278 </span><span class="sym"> 
</span><span class="line">  279 </span><span class="sym"> </span>   <span class="kwa">IF</span> Length<span class="sym">(</span>l1<span class="sym">)</span> # Size <span class="kwa">THEN
</span><span class="line">  280 </span><span class="kwa"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;L1 size wrong, wanted &quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>Size<span class="sym">,</span><span class="num">1</span><span class="sym">);
</span><span class="line">  281 </span><span class="sym"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;, got &quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>Length<span class="sym">(</span>l1<span class="sym">),</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  282 </span><span class="sym"> </span>      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  283 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  284 </span><span class="sym"> 
</span><span class="line">  285 </span><span class="sym"> </span>   <span class="kwa">IF</span> ~Equal<span class="sym">(</span>l1<span class="sym">,</span> l2<span class="sym">)</span> <span class="kwa">THEN
</span><span class="line">  286 </span><span class="kwa"> </span>      Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;l1 and l2 are not equal&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  287 </span><span class="sym"> </span>      <span class="kwa">HALT</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  288 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  289 </span><span class="sym"> 
</span><span class="line">  290 </span><span class="sym"> </span>   <span class="kwa">RETURN</span> Length<span class="sym">(</span>l1<span class="sym">);
</span><span class="line">  291 </span><span class="sym"> </span><span class="kwa">END</span> TestLists<span class="sym">;
</span><span class="line">  292 </span><span class="sym"> 
</span><span class="line">  293 </span><span class="sym"> 
</span><span class="line">  294 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">  295 </span><span class="kwa"> </span>   n <span class="sym">:=</span> LangShootout<span class="sym">.</span>Argi<span class="sym">();
</span><span class="line">  296 </span><span class="sym"> </span>   result <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  297 </span><span class="sym"> </span>   <span class="kwa">WHILE</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">DO
</span><span class="line">  298 </span><span class="kwa"> </span>      result <span class="sym">:=</span> TestLists<span class="sym">();
</span><span class="line">  299 </span><span class="sym"> </span>      <span class="kwa">DEC</span><span class="sym">(</span>n<span class="sym">);
</span><span class="line">  300 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">  301 </span><span class="sym"> </span>   Out<span class="sym">.</span>Int<span class="sym">(</span>result<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">  302 </span><span class="sym"> </span><span class="kwa">END</span> Lists<span class="sym">.</span> 
