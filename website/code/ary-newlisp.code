#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

# arrays benchmark
#
# this requires newLISP <span class="num">7.5.2</span> <span class="kwa">or</span> later to handle arrays
#
# Contributed by Lutz Mueller


<span class="sym">(</span>define <span class="sym">(</span>main<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))</span>
<span class="str">	(set '</span>x <span class="sym">(</span>array n <span class="sym">(</span>sequence <span class="num">1</span> n<span class="sym">)))</span>
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'y (array n '</span><span class="sym">(</span><span class="num">0</span><span class="sym">)))</span>
	<span class="sym">(</span>dotimes <span class="sym">(</span>k <span class="num">1000</span><span class="sym">)</span>
		<span class="sym">(</span>for <span class="sym">(</span>i <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)</span> <span class="num">0</span><span class="sym">)</span>
			<span class="sym">(</span><span class="kwa">nth</span><span class="sym">-</span><span class="kwa">set</span> i y <span class="sym">(+ (</span><span class="kwa">nth</span> i y<span class="sym">) (</span><span class="kwa">nth</span> i x<span class="sym">)) )))</span>

	<span class="sym">(</span>println <span class="sym">(</span><span class="kwa">nth</span> <span class="num">0</span> y<span class="sym">)</span> <span class="str">&quot; &quot;</span> <span class="sym">(</span><span class="kwa">nth</span> <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)</span> y<span class="sym">)))</span>

<span class="sym">(</span>main<span class="sym">)</span>
<span class="sym">(</span><span class="kwa">exit</span><span class="sym">)</span>





