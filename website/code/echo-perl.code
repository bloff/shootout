<span class="slc">#!/usr/bin/perl
</span><span class="slc"># $Id: echo-perl.code,v 1.5 2005-04-04 14:56:39 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span>
<span class="kwa">use</span> Socket<span class="sym">;

</span><span class="kwc">my</span> <span class="kwb">$DATA</span> <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;

</span><span class="kwa">sub</span> server_sock <span class="sym">{
</span>    <span class="kwc">local</span> <span class="sym">*</span>SS<span class="sym">;
</span>    socket<span class="sym">(</span>SS<span class="sym">,</span> PF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">or
</span>	die <span class="str">&quot;server/socket ($!)&quot;</span><span class="sym">;
</span>    setsockopt<span class="sym">(</span>SS<span class="sym">,</span> SOL_SOCKET<span class="sym">,</span> SO_REUSEADDR<span class="sym">,</span> pack<span class="sym">(</span><span class="str">&quot;l&quot;</span><span class="sym">,</span> <span class="num">1</span><span class="sym">))</span> <span class="kwa">or
</span>	die <span class="str">&quot;server/setsockopt ($!)&quot;</span><span class="sym">;
</span>    bind<span class="sym">(</span>SS<span class="sym">,</span> sockaddr_in<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> INADDR_LOOPBACK<span class="sym">))</span> <span class="kwa">or
</span>	die <span class="str">&quot;server/bind ($!)&quot;</span><span class="sym">;
</span>    listen<span class="sym">(</span>SS<span class="sym">,</span> <span class="num">2</span><span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(*</span>SS<span class="sym">);
}

</span><span class="kwa">sub</span> get_port <span class="sym">{
</span>    <span class="kwc">local</span> <span class="sym">*</span>SK <span class="sym">=</span> shift<span class="sym">;
    (</span>sockaddr_in<span class="sym">(</span>getsockname<span class="sym">(</span>SK<span class="sym">)))[</span><span class="num">0</span><span class="sym">];
}

</span><span class="kwa">sub</span> client_sock <span class="sym">{
</span>    <span class="kwc">my</span> <span class="kwb">$port</span> <span class="sym">=</span> shift<span class="sym">;
</span>    <span class="kwc">local</span> <span class="sym">*</span>CS<span class="sym">;
</span>    socket<span class="sym">(</span>CS<span class="sym">,</span> PF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> getprotobyname<span class="sym">(</span><span class="str">'tcp'</span><span class="sym">))</span> <span class="kwa">or
</span>	die <span class="str">&quot;client/socket ($!)&quot;</span><span class="sym">;
</span>    connect<span class="sym">(</span>CS<span class="sym">,</span> sockaddr_in<span class="sym">(</span><span class="kwb">$port</span><span class="sym">,</span> INADDR_LOOPBACK<span class="sym">))</span> <span class="kwa">or
</span>	die <span class="str">&quot;client/connect ($!)&quot;</span><span class="sym">;
</span>    <span class="kwa">return</span><span class="sym">(*</span>CS<span class="sym">);
}

</span><span class="kwa">sub</span> echo_client <span class="sym">{
</span>    <span class="kwc">my</span><span class="sym">(</span><span class="kwb">$N</span><span class="sym">,</span> <span class="kwb">$port</span><span class="sym">) =</span> &#64;_<span class="sym">;
</span>    <span class="kwc">local</span> <span class="sym">*</span>SOCK <span class="sym">=</span> client_sock<span class="sym">(</span><span class="kwb">$port</span><span class="sym">);
</span>    select<span class="sym">(</span>SOCK<span class="sym">);
</span>    <span class="kwb">$</span><span class="sym">| =</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> <span class="sym">(</span><span class="num">0</span>..<span class="sym">(</span><span class="kwb">$N</span><span class="num">-1</span><span class="sym">)) {
</span>	print <span class="kwb">$DATA</span><span class="sym">;
</span>	<span class="kwc">my</span> <span class="kwb">$ans</span> <span class="sym">= &lt;</span>SOCK<span class="sym">&gt;;
	(</span><span class="kwb">$ans</span> <span class="kwa">eq</span> <span class="kwb">$DATA</span><span class="sym">)</span> <span class="kwa">or</span> die qq<span class="sym">{</span>client<span class="sym">:</span> <span class="str">&quot;$DATA&quot;</span> <span class="kwa">ne</span> <span class="str">&quot;$ans&quot;</span><span class="sym">};
    }
</span>    close SOCK<span class="sym">;
}

</span><span class="kwa">sub</span> echo_server <span class="sym">{
</span>    <span class="kwc">my</span><span class="sym">(</span><span class="kwb">$N</span><span class="sym">) =</span> &#64;_<span class="sym">;
</span>    <span class="kwc">local</span> <span class="sym">*</span>SSOCK <span class="sym">=</span> server_sock<span class="sym">();
</span>    <span class="kwc">my</span> <span class="kwb">$port</span> <span class="sym">=</span> get_port<span class="sym">(*</span>SSOCK<span class="sym">);
</span>    <span class="kwc">my</span> <span class="kwb">$pid</span> <span class="sym">=</span> fork<span class="sym">;
</span>    defined <span class="kwb">$pid</span> <span class="kwa">or</span> die <span class="str">&quot;server/fork ($!)&quot;</span><span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$pid</span><span class="sym">) {
</span>	<span class="slc"># parent is server
</span>	<span class="kwc">local</span> <span class="sym">*</span>CSOCK<span class="sym">;
</span>	accept<span class="sym">(</span>CSOCK<span class="sym">,</span> SSOCK<span class="sym">)</span> <span class="kwa">or</span> die <span class="str">&quot;server/accept ($!)&quot;</span><span class="sym">;
</span>	select<span class="sym">(</span>CSOCK<span class="sym">);
</span>	<span class="kwb">$</span><span class="sym">| =</span> <span class="num">1</span><span class="sym">;
</span>	<span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwa">while</span> <span class="sym">(&lt;</span>CSOCK<span class="sym">&gt;) {
</span>	    print <span class="kwb">$_</span><span class="sym">;
</span>	    <span class="kwb">$n</span> <span class="sym">+=</span> length<span class="sym">(</span><span class="kwb">$_</span><span class="sym">);
	}
</span>	select<span class="sym">(</span>STDOUT<span class="sym">);
</span>	print <span class="str">&quot;server processed $n bytes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
    }</span> <span class="kwa">else</span> <span class="sym">{
</span>	<span class="slc"># child is client
</span>	echo_client<span class="sym">(</span><span class="kwb">$N</span><span class="sym">,</span> <span class="kwb">$port</span><span class="sym">);
    }
</span>    wait<span class="sym">();
}

</span><span class="kwa">sub</span> main <span class="sym">{
</span>    <span class="kwc">my</span> <span class="kwb">$N</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">1</span><span class="sym">;
</span>    echo_server<span class="sym">(</span><span class="kwb">$N</span><span class="sym">);
</span>    exit<span class="sym">(</span><span class="num">0</span><span class="sym">);
}

</span>main<span class="sym">();</span>
