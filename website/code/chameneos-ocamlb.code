<span class="com">(*</span>
<span class="com"> * The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Vladimir Silyaev</span>
<span class="com"> *)</span>

<span class="kwa">type</span> color <span class="sym">=</span> B <span class="sym">|</span> R <span class="sym">|</span> Y <span class="sym">|</span> Faded

<span class="kwa">let</span> compl c1 c2 <span class="sym">=</span> <span class="kwa">match</span> c1<span class="sym">,</span>c2 <span class="kwa">with</span>
  B<span class="sym">,</span>R <span class="sym">|</span> R<span class="sym">,</span>B <span class="sym">-&gt;</span> Y
  <span class="sym">|</span> Y<span class="sym">,</span>R <span class="sym">|</span> R<span class="sym">,</span>Y <span class="sym">-&gt;</span> B
<span class="sym">|</span> B<span class="sym">,</span>Y <span class="sym">|</span> Y<span class="sym">,</span>B <span class="sym">-&gt;</span> R
<span class="sym">|</span> c<span class="sym">,</span>_ <span class="sym">-&gt;</span> c

<span class="kwa">let</span> n <span class="sym">=</span> <span class="kwd">ref</span> <span class="sym">(</span><span class="kwa">try</span> <span class="kwd">int_of_string</span> <span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">10</span><span class="sym">)</span>

<span class="kwa">let</span> meet <span class="sym">=</span>
  <span class="kwa">let</span> first <span class="sym">=</span> ref None <span class="kwa">in</span>
    <span class="kwa">fun</span> creature cont <span class="sym">-&gt;</span>
      <span class="kwa">if</span> <span class="sym">!</span>n <span class="sym">&lt;=</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(</span>cont Faded<span class="sym">)</span>
      <span class="kwa">else match</span> <span class="sym">!</span>first <span class="kwa">with</span>
	  None <span class="sym">-&gt;</span>
	    first <span class="sym">:=</span> <span class="kwd">Some</span> <span class="sym">(</span>creature<span class="sym">,</span> cont<span class="sym">)</span>
	<span class="sym">|</span> <span class="kwd">Some</span> <span class="sym">(</span>creature<span class="str">',cont'</span><span class="sym">) -&gt;</span>
	    decr n<span class="sym">;</span>
	    first <span class="sym">:=</span> None<span class="sym">;</span>
	    cont creature<span class="str">';</span>
<span class="str">	    cont'</span> creature

<span class="kwa">let</span> wait<span class="sym">,</span>step <span class="sym">=</span>
  <span class="kwa">let</span> q <span class="sym">=</span> ref <span class="sym">[]</span> <span class="kwa">in</span>
  <span class="sym">(</span><span class="kwa">fun</span> cont <span class="sym">-&gt;</span> q <span class="sym">:=</span> cont <span class="sym">:: !</span>q<span class="sym">),</span>
  <span class="sym">(</span><span class="kwa">fun</span> _ <span class="sym">-&gt;</span> <span class="kwa">let</span> q<span class="str">' = !q in q := [] ;</span>
<span class="str">     match q'</span> <span class="kwa">with</span>
	 <span class="sym">[] -&gt;</span> <span class="kwa">false</span>
       <span class="sym">|</span> _ <span class="sym">-&gt;</span> List.<span class="kwd">iter</span> <span class="sym">(</span><span class="kwa">fun</span> c <span class="sym">-&gt;</span> <span class="kwd">c</span> <span class="sym">())</span> q<span class="str">';true)</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">let rec creature stop color =</span>
<span class="str">  let rec body n color =</span>
<span class="str">    meet color</span>
<span class="str">      (function Faded -&gt; stop n</span>
<span class="str">	 | color'</span> <span class="sym">-&gt;</span>
	     <span class="kwa">let</span> color <span class="sym">=</span> compl color color<span class="str">' in</span>
<span class="str">	       wait (fun _ -&gt; body (succ n) color)</span>
<span class="str">      )</span>
<span class="str">  in</span>
<span class="str">    body 0 color</span>
<span class="str"></span>
<span class="str">let _ =</span>
<span class="str">  let met = ref 0 in</span>
<span class="str">    List.iter (creature (fun n -&gt; met := !met + n))  [B;R;Y;B;];</span>
<span class="str">    while step () do () done;</span>
<span class="str">    Printf.printf &quot;%i</span><span class="esc">\n</span><span class="str">&quot; !met</span>
<span class="str"></span>
