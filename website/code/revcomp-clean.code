<span class="sym">//</span> The Great Computer Language Shootout
<span class="sym">//</span> http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/
//
//</span> contributed by Diederik van Arkel

<span class="kwa">module</span> revcomp

<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

Start world
	# <span class="sym">(</span>io<span class="sym">,</span>world<span class="sym">)	=</span> stdio world
	# io			<span class="sym">=</span> process io
	# <span class="sym">(</span>err<span class="sym">,</span>world<span class="sym">)	=</span> fclose io world
	<span class="sym">=</span> world

process <span class="sym">:: !*</span>File <span class="sym">-&gt; *</span>File
process io
	#<span class="sym">! (</span>line<span class="sym">,</span> io<span class="sym">) =</span> freadline io
	<span class="sym">|</span> size line <span class="sym">==</span> <span class="num">0
</span>		<span class="sym">=</span> io
	<span class="sym">|</span> line.<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span>
		# io		<span class="sym">=</span> io <span class="sym">&lt;&lt;&lt;</span> line
		<span class="sym">=</span> extract io <span class="sym">[]
	=</span> process io

extract <span class="sym">:: !*</span>File <span class="sym">![*</span>String<span class="sym">] -&gt; *</span>File
extract io ls
	#<span class="sym">! (</span>line<span class="sym">,</span> io<span class="sym">) =</span> freadline io
	<span class="sym">|</span> size line <span class="sym">&gt;</span> <span class="num">0
</span>		<span class="sym">|</span> line.<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span>
			# io		<span class="sym">=</span> write <span class="sym">(</span>revcomp ls<span class="sym">)</span> io
			# io		<span class="sym">=</span> io <span class="sym">&lt;&lt;&lt;</span> line
			<span class="sym">=</span> extract io <span class="sym">[]
		|</span> line.<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">';'</span>
			<span class="sym">=</span> extract io ls
		<span class="sym">=</span> extract io <span class="sym">[</span>line<span class="sym">:</span>ls<span class="sym">]
	=</span> write <span class="sym">(</span>revcomp ls<span class="sym">)</span> io

revcomp l
	# l <span class="sym">=</span> reverse l
	# s	<span class="sym">=</span> concat_strip l
	<span class="sym">=</span> build s

concat_strip <span class="sym">:: ![</span>String<span class="sym">] -&gt;</span> .String
concat_strip l
	# s <span class="sym">=</span> sizelist l
	# a <span class="sym">=</span> createArray s <span class="str">' '</span>
	<span class="sym">=</span> copylist l a <span class="num">0
</span><span class="kwa">where
</span>	sizelist <span class="sym">[] =</span> <span class="num">0
</span>	sizelist <span class="sym">[</span>h<span class="sym">:</span>t<span class="sym">] =</span> size h <span class="num">- 1</span> <span class="sym">+</span> sizelist t

	copylist <span class="sym">:: ![</span>String<span class="sym">] !*</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> .String
	copylist <span class="sym">[]</span> a i <span class="sym">=</span> a
	copylist <span class="sym">[</span>h<span class="sym">:</span>t<span class="sym">]</span> a i
		# <span class="sym">(</span>i<span class="sym">,</span>a<span class="sym">) =</span> scopy <span class="sym">(</span>size h <span class="num">- 1</span><span class="sym">)</span> i <span class="num">0</span> a h
		<span class="sym">=</span> copylist t a i

scopy <span class="sym">::
	!</span><span class="kwb">Int</span>		<span class="sym">//</span> end <span class="kwa">of</span> copy source index
	<span class="sym">!</span><span class="kwb">Int</span>		<span class="sym">//</span> current target index
	<span class="sym">!</span><span class="kwb">Int</span>		<span class="sym">//</span> current source index
	<span class="sym">!*</span>{#<span class="kwb">Char</span>}	<span class="sym">//</span> target string
	<span class="sym">!</span>{#<span class="kwb">Char</span>}	<span class="sym">//</span> source string
	<span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!</span>.{#<span class="kwb">Char</span>}<span class="sym">)
</span>scopy n i j s h
	<span class="sym">|</span> j <span class="sym">&gt;=</span> n <span class="sym">= (</span>i<span class="sym">,</span>s<span class="sym">)
</span>	#<span class="sym">!</span> s <span class="sym">=</span> {s <span class="sym">&amp; [</span>i<span class="sym">] =</span> h.<span class="sym">[</span>j<span class="sym">]</span>}
	<span class="sym">=</span> scopy n <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> s h


build <span class="sym">:: !*</span>String <span class="sym">-&gt;</span> .String
build iub
	#<span class="sym">!</span> e	<span class="sym">=</span> size iub <span class="num">- 1
</span>	<span class="sym">=</span> build iub <span class="num">0</span> e
<span class="kwa">where
</span>	build <span class="sym">:: !*</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> .String
	build iub b e
		<span class="sym">|</span> b <span class="sym">&gt;=</span> e
			<span class="sym">=</span> iub
		#<span class="sym">!</span> cb	<span class="sym">=</span> iub.<span class="sym">[</span>b<span class="sym">]
</span>		   ce	<span class="sym">=</span> iub.<span class="sym">[</span>e<span class="sym">]
</span>		   iub	<span class="sym">=</span> {iub <span class="sym">&amp; [</span>b<span class="sym">] =</span> complement ce}
		   iub	<span class="sym">=</span> {iub <span class="sym">&amp; [</span>e<span class="sym">] =</span> complement cb}
		<span class="sym">=</span> build iub <span class="sym">(</span>b<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>e<span class="num">-1</span><span class="sym">)

</span>complement <span class="sym">:: !</span><span class="kwb">Char</span> <span class="sym">-&gt;</span> <span class="kwb">Char
</span>complement c
	<span class="sym">=</span> complementArray.<span class="sym">[</span>toInt c<span class="sym">]

</span>complementArray <span class="sym">=:</span> buildComplement
<span class="kwa">where
</span>	buildComplement <span class="sym">::</span> String
	buildComplement
<span class="sym">//</span>		# a	<span class="sym">=</span> {c \\ c <span class="sym">&lt;- [</span><span class="str">'\x0'</span>..<span class="str">'\xFF'</span><span class="sym">]</span>}
		# a <span class="sym">=</span> {toChar i \\ i <span class="sym">&lt;- [</span><span class="num">0</span>.<span class="num">.255</span><span class="sym">]</span>}
		<span class="sym">=</span> build pairs a
	build <span class="sym">[]</span> a <span class="sym">=</span> a
	build <span class="sym">[(</span>f<span class="sym">,</span>t<span class="sym">):</span>ps<span class="sym">]</span> a
		# a <span class="sym">=</span> { a <span class="sym">&amp; [</span>toInt f<span class="sym">] =</span> t
				  <span class="sym">, [</span>toInt t<span class="sym">] =</span> f
				  <span class="sym">, [</span>toInt <span class="sym">(</span>toLower f<span class="sym">)] =</span> t
				  <span class="sym">, [</span>toInt <span class="sym">(</span>toLower t<span class="sym">)] =</span> f
			  }
		<span class="sym">=</span> build ps a
	pairs <span class="sym">= [(</span><span class="str">'A'</span><span class="sym">,</span><span class="str">'T'</span><span class="sym">)
			,(</span><span class="str">'C'</span><span class="sym">,</span><span class="str">'G'</span><span class="sym">)
			,(</span><span class="str">'B'</span><span class="sym">,</span><span class="str">'V'</span><span class="sym">)
			,(</span><span class="str">'D'</span><span class="sym">,</span><span class="str">'H'</span><span class="sym">)
			,(</span><span class="str">'K'</span><span class="sym">,</span><span class="str">'M'</span><span class="sym">)
			,(</span><span class="str">'R'</span><span class="sym">,</span><span class="str">'Y'</span><span class="sym">)
			]

</span>write s io
	<span class="sym">=</span> write s <span class="num">0</span> io
<span class="kwa">where
</span>	e	<span class="sym">=</span> size s

	write <span class="sym">:: !</span>String <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>File <span class="sym">-&gt; *</span>File
	write s b io
		<span class="sym">|</span> b <span class="sym">&gt;=</span> e
			<span class="sym">=</span> io
		#<span class="sym">!</span> io	<span class="sym">=</span> io <span class="sym">&lt;&lt;&lt; (</span>s<span class="sym">%(</span>b<span class="sym">,</span>b<span class="sym">+</span><span class="num">59</span><span class="sym">)) &lt;&lt;&lt;</span> <span class="str">'\n'</span>
<span class="sym">//</span>		#<span class="sym">!</span> io	<span class="sym">= (</span>fwritesubstring b <span class="sym">(</span>min <span class="sym">(</span>e<span class="sym">-</span>b<span class="sym">)</span> <span class="num">60</span><span class="sym">)</span> s io<span class="sym">) &lt;&lt;&lt;</span> <span class="str">'\n'</span>
		<span class="sym">=</span> write s <span class="sym">(</span>b<span class="sym">+</span><span class="num">60</span><span class="sym">)</span> io
