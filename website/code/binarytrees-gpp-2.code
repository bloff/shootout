<span class="com">/* binarytrees.cpp
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Jon Harrop
 * Modified by Alex Mizrahi
 */</span>

<span class="dir">#include &lt;iostream&gt;
</span>
<span class="kwb">struct</span> Node <span class="sym">{
</span>  Node <span class="sym">*</span>l<span class="sym">, *</span>r<span class="sym">;
</span>  <span class="kwb">int</span> i<span class="sym">;
</span>  Node<span class="sym">(</span><span class="kwb">int</span> i2<span class="sym">) :</span> l<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> r<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> i<span class="sym">(</span>i2<span class="sym">) {}
</span>  Node<span class="sym">(</span>Node <span class="sym">*</span>l2<span class="sym">,</span> <span class="kwb">int</span> i2<span class="sym">,</span> Node <span class="sym">*</span>r2<span class="sym">) :</span> l<span class="sym">(</span>l2<span class="sym">),</span> r<span class="sym">(</span>r2<span class="sym">),</span> i<span class="sym">(</span>i2<span class="sym">) {}
  ~</span>Node<span class="sym">() {</span> <span class="kwa">delete</span> l<span class="sym">;</span> <span class="kwa">delete</span> r<span class="sym">; }
</span>  <span class="kwb">int</span> check<span class="sym">()</span> <span class="kwb">const</span> <span class="sym">{
</span>	  <span class="kwa">if</span> <span class="sym">(</span>l<span class="sym">)
</span>		<span class="kwa">return</span> l<span class="sym">-&gt;</span>check<span class="sym">() +</span> i <span class="sym">-</span> r<span class="sym">-&gt;</span>check<span class="sym">();
</span>	  <span class="kwa">else return</span> i<span class="sym">;
  }
};

</span>Node <span class="sym">*</span>make<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> d<span class="sym">) {
</span>  <span class="kwa">if</span> <span class="sym">(</span>d <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return new</span> Node<span class="sym">(</span>i<span class="sym">);
</span>  <span class="kwa">return new</span> Node<span class="sym">(</span>make<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="num">-1</span><span class="sym">,</span> d<span class="num">-1</span><span class="sym">),</span> i<span class="sym">,</span> make<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">,</span> d<span class="num">-1</span><span class="sym">));
}

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>  <span class="kwb">int</span> min_depth <span class="sym">=</span> <span class="num">4</span><span class="sym">,
</span>    max_depth <span class="sym">=</span> std<span class="sym">::</span>max<span class="sym">(</span>min_depth<span class="sym">+</span><span class="num">2</span><span class="sym">,
			 (</span>argc <span class="sym">==</span> <span class="num">2</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">10</span><span class="sym">)),
</span>    stretch_depth <span class="sym">=</span> max_depth<span class="sym">+</span><span class="num">1</span><span class="sym">;

  {
</span>    Node <span class="sym">*</span>c <span class="sym">=</span> make<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretch_depth<span class="sym">);
</span>    std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;stretch tree of depth &quot;</span> <span class="sym">&lt;&lt;</span> stretch_depth <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t  </span>  <span class="str">&quot;</span>
      <span class="sym">&lt;&lt;</span> <span class="str">&quot;check: &quot;</span> <span class="sym">&lt;&lt;</span> c<span class="sym">-&gt;</span>check<span class="sym">() &lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;
</span>    <span class="kwa">delete</span> c<span class="sym">;
  }

</span>  Node <span class="sym">*</span>long_lived_tree<span class="sym">=</span>make<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> max_depth<span class="sym">);

</span>  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> d<span class="sym">=</span>min_depth<span class="sym">;</span> d<span class="sym">&lt;=</span>max_depth<span class="sym">;</span> d<span class="sym">+=</span><span class="num">2</span><span class="sym">) {
</span>    <span class="kwb">int</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>max_depth <span class="sym">-</span> d <span class="sym">+</span> min_depth<span class="sym">),</span> c<span class="sym">=</span><span class="num">0</span><span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>iterations<span class="sym">; ++</span>i<span class="sym">) {
</span>      Node <span class="sym">*</span>a <span class="sym">=</span> make<span class="sym">(</span>i<span class="sym">,</span> d<span class="sym">), *</span>b <span class="sym">=</span> make<span class="sym">(-</span>i<span class="sym">,</span> d<span class="sym">);
</span>      c <span class="sym">+=</span> a<span class="sym">-&gt;</span>check<span class="sym">() +</span> b<span class="sym">-&gt;</span>check<span class="sym">();
</span>      <span class="kwa">delete</span> a<span class="sym">;
</span>      <span class="kwa">delete</span> b<span class="sym">;
    }
</span>    std<span class="sym">::</span>cout <span class="sym">&lt;&lt; (</span><span class="num">2</span><span class="sym">*</span>iterations<span class="sym">) &lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t  </span>  <span class="str">trees of depth &quot;</span> <span class="sym">&lt;&lt;</span> d <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t  </span>  <span class="str">&quot;</span>
	      <span class="sym">&lt;&lt;</span> <span class="str">&quot;check: &quot;</span> <span class="sym">&lt;&lt;</span> c <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;
  }

</span>  std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;long lived tree of depth &quot;</span> <span class="sym">&lt;&lt;</span> max_depth <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\t  </span>  <span class="str">&quot;</span>
	    <span class="sym">&lt;&lt;</span> <span class="str">&quot;check: &quot;</span> <span class="sym">&lt;&lt; (</span>long_lived_tree<span class="sym">-&gt;</span>check<span class="sym">()) &lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;

</span>  <span class="kwa">delete</span> long_lived_tree<span class="sym">;

</span>  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}
</span>
