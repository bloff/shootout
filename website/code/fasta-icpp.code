<span class="com">/*</span>
<span class="com">	The Computer Language</span>
<span class="com">	Shootout Benchmarks</span>
<span class="com"></span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">	Contributed by Lester Vecsey</span>
<span class="com">*/</span>

<span class="dir">#include &lt;iostream&gt;</span>

<span class="dir">#include &lt;string&gt;</span>
<span class="dir">#include &lt;fstream&gt;</span>
<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwb">const int</span> line_length <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>

<span class="kwb">const long</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">,</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">,</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>

<span class="kwc">class</span> random <span class="sym">{</span>

	<span class="kwb">int</span> im<span class="sym">,</span> ia<span class="sym">,</span> ic<span class="sym">;</span>
	<span class="kwb">long</span> last<span class="sym">;</span>

	<span class="kwc">public</span><span class="sym">:</span>

	<span class="kwd">random</span><span class="sym">(</span><span class="kwb">int</span> m<span class="sym">,</span> <span class="kwb">int</span> a<span class="sym">,</span> <span class="kwb">int</span> c<span class="sym">) :</span> <span class="kwd">im</span><span class="sym">(</span>m<span class="sym">),</span> <span class="kwd">ia</span><span class="sym">(</span>a<span class="sym">),</span> <span class="kwd">ic</span><span class="sym">(</span>c<span class="sym">) {</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">; };</span>
	<span class="kwc">virtual</span> <span class="kwb">double</span> <span class="kwd">gen</span> <span class="sym">(</span><span class="kwb">double</span> max<span class="sym">) {</span> last<span class="sym">*=</span>ia<span class="sym">;</span> last<span class="sym">+=</span>ic<span class="sym">;</span> last<span class="sym">%=</span>im<span class="sym">;</span> <span class="kwa">return</span> max <span class="sym">*</span> last <span class="sym">/</span> im<span class="sym">; }</span>

	<span class="sym">};</span>

<span class="kwb">struct</span> aminoacids <span class="sym">{</span>

	<span class="kwb">char</span> c<span class="sym">;</span>
	<span class="kwb">double</span> p<span class="sym">;</span>

	<span class="sym">};</span>

<span class="kwb">enum</span> <span class="sym">{</span> REPEAT<span class="sym">,</span> RANDOM <span class="sym">};</span>

<span class="kwc">class</span> aacids <span class="sym">{</span>

	random <span class="sym">*</span>R<span class="sym">;</span>

	<span class="kwb">int</span> num_genes<span class="sym">;</span>

	<span class="kwb">struct</span> aminoacids <span class="sym">*</span>genelist<span class="sym">, *</span>pga<span class="sym">;</span>

	string pick<span class="sym">,</span> id<span class="sym">,</span> desc<span class="sym">,</span> a<span class="sym">;</span>

	<span class="kwc">public</span><span class="sym">:</span>

	<span class="kwd">aacids</span><span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>i<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>d<span class="sym">,</span> random <span class="sym">*</span>r<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">struct</span> aminoacids <span class="sym">*</span>g<span class="sym">) :</span>
		<span class="kwd">R</span><span class="sym">(</span>r<span class="sym">),</span> <span class="kwd">num_genes</span><span class="sym">(</span>n<span class="sym">),</span> <span class="kwd">genelist</span><span class="sym">(</span>g<span class="sym">) {</span>
			<span class="kwd">assign</span><span class="sym">(</span>i<span class="sym">,</span> d<span class="sym">);</span>
			pga <span class="sym">=</span> g <span class="sym">+</span> n<span class="sym">;</span> <span class="kwd">init</span><span class="sym">();</span>
			<span class="sym">}</span>

	<span class="kwd">aacids</span><span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>i<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>d<span class="sym">,</span> string a<span class="sym">) :</span> <span class="kwd">a</span><span class="sym">(</span>a<span class="sym">) {</span> <span class="kwd">assign</span><span class="sym">(</span>i<span class="sym">,</span> d<span class="sym">);</span> <span class="kwd">init</span><span class="sym">(); }</span>
	<span class="kwc">virtual</span> <span class="sym">~</span><span class="kwd">aacids</span><span class="sym">() { }</span>

	<span class="kwc">virtual</span> <span class="kwb">void</span> <span class="kwd">assign</span><span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>i<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>d<span class="sym">) {</span> id<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>i<span class="sym">);</span> desc<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>d<span class="sym">); }</span>
	<span class="kwc">virtual</span> <span class="kwb">void</span> aacids<span class="sym">::</span><span class="kwd">display</span><span class="sym">() {</span> cout <span class="sym">&lt;&lt;</span> <span class="str">'&gt;'</span> <span class="sym">&lt;&lt;</span> id <span class="sym">&lt;&lt;</span> <span class="str">' '</span> <span class="sym">&lt;&lt;</span> desc <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">; }</span>

	<span class="kwc">virtual</span> <span class="kwb">void</span> <span class="kwd">init</span><span class="sym">() {</span> pick<span class="sym">.</span><span class="kwd">resize</span><span class="sym">(</span>line_length<span class="sym">+</span><span class="num">1</span><span class="sym">);</span> <span class="kwd">makeCumulative</span><span class="sym">(); }</span>

	<span class="kwc">virtual</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">(</span><span class="kwb">int</span> f<span class="sym">,</span> <span class="kwb">int</span> todo<span class="sym">);</span>

	<span class="kwc">virtual</span> <span class="kwb">void</span> <span class="kwd">makeRepeatFasta</span> <span class="sym">(</span><span class="kwb">int</span> n<span class="sym">);</span>
	<span class="kwc">virtual</span> <span class="kwb">void</span> <span class="kwd">makeRandomFasta</span> <span class="sym">(</span><span class="kwb">int</span> todo<span class="sym">);</span>
	<span class="kwc">virtual</span> <span class="kwb">void</span> <span class="kwd">makeCumulative</span><span class="sym">();</span>
	<span class="kwc">virtual</span> <span class="kwb">char</span> <span class="kwd">selectRandom</span><span class="sym">();</span>

	<span class="sym">};</span>

<span class="kwb">void</span> aacids<span class="sym">::</span><span class="kwd">run</span><span class="sym">(</span><span class="kwb">int</span> f<span class="sym">,</span> <span class="kwb">int</span> todo<span class="sym">) {</span>

	<span class="kwd">display</span><span class="sym">();</span>

	<span class="kwa">switch</span> <span class="sym">(</span>f<span class="sym">) {</span>
		<span class="kwa">case</span> REPEAT<span class="sym">:</span> <span class="kwd">makeRepeatFasta</span><span class="sym">(</span>todo<span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
		<span class="kwa">case</span> RANDOM<span class="sym">:</span> <span class="kwd">makeRandomFasta</span><span class="sym">(</span>todo<span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
		<span class="sym">};</span>

	<span class="sym">}</span>

<span class="kwb">void</span> aacids<span class="sym">::</span><span class="kwd">makeCumulative</span><span class="sym">() {</span>

	<span class="kwb">struct</span> aminoacids <span class="sym">*</span>p <span class="sym">=</span> genelist<span class="sym">;</span>

	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">double</span> cp <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> p <span class="sym">&lt;</span> pga<span class="sym">;</span> p<span class="sym">++) {</span>
		p<span class="sym">-&gt;</span>p <span class="sym">=</span> cp <span class="sym">+=</span> p<span class="sym">-&gt;</span>p<span class="sym">;</span>
		<span class="sym">}</span>

	<span class="sym">}</span>

<span class="kwb">char</span> aacids<span class="sym">::</span><span class="kwd">selectRandom</span><span class="sym">() {</span>

	<span class="kwb">double</span> rnd <span class="sym">=</span> R<span class="sym">-&gt;</span><span class="kwd">gen</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span>

	aminoacids <span class="sym">*</span>cur<span class="sym">, *</span>hi<span class="sym">, *</span>lo <span class="sym">=</span> genelist<span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span>rnd <span class="sym">&lt;</span> lo<span class="sym">-&gt;</span>p<span class="sym">)</span> <span class="kwa">return</span> lo<span class="sym">-&gt;</span>c<span class="sym">;</span>

	<span class="kwa">for</span> <span class="sym">(</span>hi <span class="sym">=</span> pga <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span> hi <span class="sym">&gt;</span> lo<span class="sym">+</span><span class="num">1</span><span class="sym">; ) {</span>
		cur <span class="sym">=</span> lo <span class="sym">+ ((</span>hi <span class="sym">-</span> lo<span class="sym">) &gt;&gt;</span> <span class="num">1</span><span class="sym">);</span>
		<span class="kwa">if</span> <span class="sym">(</span>rnd <span class="sym">&lt;</span> cur<span class="sym">-&gt;</span>p<span class="sym">)</span> hi <span class="sym">=</span> cur<span class="sym">;</span> <span class="kwa">else</span> lo <span class="sym">=</span> cur<span class="sym">;</span>
		<span class="sym">}</span>

	<span class="kwa">return</span> hi<span class="sym">-&gt;</span>c<span class="sym">;</span>

	<span class="sym">}</span>

<span class="kwb">void</span> aacids<span class="sym">::</span><span class="kwd">makeRandomFasta</span> <span class="sym">(</span><span class="kwb">int</span> todo<span class="sym">) {</span>

	<span class="kwa">for</span> <span class="sym">( ;</span> todo <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">;</span> todo<span class="sym">-=</span>line_length<span class="sym">) {</span>

		<span class="kwb">int</span> cur_line_len <span class="sym">= (</span>todo <span class="sym">&lt;</span> line_length<span class="sym">)</span> ? todo <span class="sym">:</span> line_length<span class="sym">;</span>

		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> count <span class="sym">&lt;</span> cur_line_len<span class="sym">;</span> count<span class="sym">++)</span> pick<span class="sym">[</span>count<span class="sym">] =</span> <span class="kwd">selectRandom</span><span class="sym">();</span>

		cout <span class="sym">&lt;&lt;</span> pick<span class="sym">.</span><span class="kwd">substr</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> cur_line_len<span class="sym">) &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>

		<span class="sym">}</span>

	<span class="sym">}</span>

<span class="kwb">void</span> aacids<span class="sym">::</span><span class="kwd">makeRepeatFasta</span> <span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>

	<span class="kwb">int</span> m<span class="sym">,</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> finality_interval<span class="sym">,</span> a_len <span class="sym">=</span> a<span class="sym">.</span><span class="kwd">length</span><span class="sym">();</span>

	<span class="kwa">for</span><span class="sym">( ;</span> n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> n<span class="sym">-=</span>line_length<span class="sym">,</span> k <span class="sym">+=</span> m<span class="sym">) {</span>

		m <span class="sym">=</span> n <span class="sym">&gt;</span> line_length ? line_length <span class="sym">:</span> n<span class="sym">;</span>

		finality_interval <span class="sym">=</span> a_len <span class="sym">-</span> k<span class="sym">;</span>

		<span class="kwa">if</span> <span class="sym">(</span>m <span class="sym">&gt;</span> finality_interval<span class="sym">) {</span>
			cout <span class="sym">&lt;&lt;</span> a<span class="sym">.</span><span class="kwd">substr</span><span class="sym">(</span>k<span class="sym">,</span> finality_interval<span class="sym">);</span>
			m<span class="sym">-=</span>finality_interval<span class="sym">;</span>
			k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
			<span class="sym">}</span>

		cout <span class="sym">&lt;&lt;</span> a<span class="sym">.</span><span class="kwd">substr</span><span class="sym">(</span>k<span class="sym">,</span> m<span class="sym">) &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>

		<span class="sym">}</span>

	<span class="sym">}</span>

<span class="kwb">struct</span> aminoacids iub<span class="sym">[] = {</span>
    <span class="sym">{</span> <span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span> <span class="sym">},</span>

    <span class="sym">{</span> <span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">}</span>
<span class="sym">};</span>

<span class="kwb">const int</span> IUB_LEN <span class="sym">= (</span><span class="kwa">sizeof</span> <span class="sym">(</span>iub<span class="sym">) /</span> <span class="kwa">sizeof</span> <span class="sym">(</span><span class="kwb">struct</span> aminoacids<span class="sym">));</span>

<span class="kwb">struct</span> aminoacids homosapiens<span class="sym">[] = {</span>
    <span class="sym">{</span> <span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span> <span class="sym">},</span>
    <span class="sym">{</span> <span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span> <span class="sym">},</span>
<span class="sym">};</span>

<span class="kwb">const int</span> HOMOSAPIENS_LEN <span class="sym">= (</span><span class="kwa">sizeof</span> <span class="sym">(</span>homosapiens<span class="sym">) /</span> <span class="kwa">sizeof</span> <span class="sym">(</span><span class="kwb">struct</span> aminoacids<span class="sym">));</span>

string <span class="kwd">alu</span><span class="sym">(</span>
	<span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> \
	<span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> \
	<span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> \
	<span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> \
	<span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> \
	<span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> \
	<span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>
	<span class="sym">);</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>

	random <span class="kwd">r</span><span class="sym">(</span>IM<span class="sym">,</span> IA<span class="sym">,</span> IC<span class="sym">);</span>

	aacids <span class="kwd">rep</span><span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> alu<span class="sym">),</span>
		<span class="kwd">i</span><span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">, &amp;</span>r<span class="sym">,</span> IUB_LEN<span class="sym">,</span> iub<span class="sym">),</span>
		<span class="kwd">h</span><span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">, &amp;</span>r<span class="sym">,</span> HOMOSAPIENS_LEN<span class="sym">,</span> homosapiens<span class="sym">);</span>

	<span class="kwb">int</span> n <span class="sym">= (</span>argc<span class="sym">&gt;</span><span class="num">1</span><span class="sym">)</span> ? <span class="kwd">strtol</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">],</span> <span class="num">0</span><span class="sym">,</span> <span class="num">10</span><span class="sym">) :</span> <span class="num">1000</span><span class="sym">;</span>

	std<span class="sym">::</span>ios_base<span class="sym">::</span><span class="kwd">sync_with_stdio</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>

	rep<span class="sym">.</span><span class="kwd">run</span><span class="sym">(</span> REPEAT<span class="sym">, (</span>n<span class="sym">*</span><span class="num">2</span><span class="sym">));</span>
	i<span class="sym">.</span><span class="kwd">run</span><span class="sym">(</span> RANDOM<span class="sym">, (</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">));</span>
	h<span class="sym">.</span><span class="kwd">run</span><span class="sym">(</span> RANDOM<span class="sym">, (</span>n<span class="sym">*</span><span class="num">5</span><span class="sym">));</span>

	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>

	<span class="sym">}</span>
