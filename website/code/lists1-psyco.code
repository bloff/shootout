<span class="slc">#!/usr/bin/python
</span><span class="slc"># $Id: lists1-psyco.code,v 1.6 2005-02-10 06:14:55 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span>
<span class="kwc">import</span> sys<span class="sym">,</span> psyco
psyco<span class="sym">.</span>full<span class="sym">()

</span><span class="kwb">def</span> main<span class="sym">():
</span>    N <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])
</span>    <span class="kwb">if</span> N <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">:
</span>        N <span class="sym">=</span> <span class="num">1

</span>    <span class="slc"># create list (A) of integers from 1 through N
</span>    A <span class="sym">=</span> <span class="kwa">range</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">)

</span>    <span class="slc"># create empty list B
</span>    B <span class="sym">= []

</span>    <span class="slc"># move each individual item from head of A to head of B, in a loop
</span>    <span class="slc"># the result should be in reverse order
</span>    <span class="kwb">while</span> A<span class="sym">:
</span>        B<span class="sym">.</span>append<span class="sym">(</span>A<span class="sym">.</span>pop<span class="sym">())

</span>    <span class="slc"># print first 2 elements of B
</span>    <span class="kwb">print</span> B<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> B<span class="sym">[</span><span class="num">1</span><span class="sym">]

</span>    <span class="slc"># reverse B (can be done in place)
</span>    B<span class="sym">.</span>reverse<span class="sym">()

</span>    <span class="slc"># is 0 a member of B?
</span>    <span class="kwb">if</span> <span class="num">0</span> <span class="kwb">in</span> B<span class="sym">:
</span>        <span class="kwb">print</span> <span class="str">&quot;true&quot;</span>
    <span class="kwb">else</span><span class="sym">:
</span>        <span class="kwb">print</span> <span class="str">&quot;false&quot;</span>

    <span class="slc"># is N a member of B?
</span>    <span class="kwb">if</span> N <span class="kwb">in</span> B<span class="sym">:
</span>        <span class="kwb">print</span> <span class="str">&quot;true&quot;</span>
    <span class="kwb">else</span><span class="sym">:
</span>        <span class="kwb">print</span> <span class="str">&quot;false&quot;</span>

    <span class="slc"># filter values from B to A that are less than N/2, preserving order
</span>    mid <span class="sym">=</span> N<span class="sym">/</span><span class="num">2
</span>    <span class="slc">#A = filter(lambda item: item &lt; mid, B)
</span>    <span class="kwb">for</span> item <span class="kwb">in</span> B<span class="sym">:
</span>        <span class="kwb">if</span> item <span class="sym">&lt;</span> mid<span class="sym">:
</span>            A<span class="sym">.</span>append<span class="sym">(</span>item<span class="sym">)

</span>    <span class="slc"># print first ten items of A
</span>    <span class="kwb">print</span> <span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">).</span>join<span class="sym">(</span><span class="kwa">map</span><span class="sym">(</span><span class="kwa">lambda</span> x<span class="sym">:</span> <span class="str">&quot;%d&quot;</span> <span class="sym">%</span> x<span class="sym">,</span> A<span class="sym">[</span><span class="num">0</span><span class="sym">:</span><span class="num">10</span><span class="sym">]))

</span>    <span class="slc"># print sum of items in A that are less than 1000
</span>    <span class="kwb">print</span> <span class="kwa">reduce</span><span class="sym">(</span><span class="kwa">lambda</span> x<span class="sym">,</span> y<span class="sym">:</span> x <span class="sym">+</span> y<span class="sym">, (</span><span class="kwa">filter</span><span class="sym">(</span><span class="kwa">lambda</span> z<span class="sym">:</span> z <span class="sym">&lt;</span> <span class="num">1000</span><span class="sym">,</span> A<span class="sym">)))

</span>    <span class="slc"># append B to end of A
</span>    A <span class="sym">=</span> A <span class="sym">+</span> B

    <span class="slc"># print length and last element of A
</span>    <span class="kwb">print</span> <span class="kwa">len</span><span class="sym">(</span>A<span class="sym">),</span> A<span class="sym">[-</span><span class="num">1</span><span class="sym">]

</span>main<span class="sym">()</span>
