<span class="slc">% The Computer Language Benchmarks Game</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Fredrik Svahn</span>

<span class="sym">-</span><span class="kwa">module</span><span class="sym">(</span>recursive<span class="sym">).</span>
<span class="sym">-</span><span class="kwa">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">]).</span>

<span class="kwd">fibF</span><span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">when</span> <span class="kwd">is_float</span><span class="sym">(</span>N<span class="sym">),</span> N<span class="sym">&lt;</span><span class="num">2.0</span><span class="sym">-&gt;</span> <span class="num">1.0</span><span class="sym">;</span>
<span class="kwd">fibF</span><span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">when</span> <span class="kwd">is_float</span><span class="sym">(</span>N<span class="sym">)-&gt;</span> <span class="kwd">fibF</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">2.0</span><span class="sym">) +</span> <span class="kwd">fibF</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">1.0</span><span class="sym">).</span>
<span class="kwd">fibI</span><span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">when</span> <span class="kwd">is_integer</span><span class="sym">(</span>N<span class="sym">),</span> N<span class="sym">&lt;</span><span class="num">2</span><span class="sym">-&gt;</span> <span class="num">1</span><span class="sym">;</span>
<span class="kwd">fibI</span><span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">when</span> <span class="kwd">is_integer</span><span class="sym">(</span>N<span class="sym">)-&gt;</span> <span class="kwd">fibI</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">2</span><span class="sym">) +</span> <span class="kwd">fibI</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">).</span>

<span class="kwd">ack</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>Y<span class="sym">)</span> <span class="kwa">when</span> <span class="kwd">is_integer</span><span class="sym">(</span>Y<span class="sym">)-&gt;</span> Y<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>
<span class="kwd">ack</span><span class="sym">(</span>X<span class="sym">,</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">when</span> <span class="kwd">is_integer</span><span class="sym">(</span>X<span class="sym">)-&gt;</span> <span class="kwd">ack</span><span class="sym">(</span>X<span class="sym">-</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
<span class="kwd">ack</span><span class="sym">(</span>X<span class="sym">,</span>Y<span class="sym">)</span> <span class="kwa">when</span> <span class="kwd">is_integer</span><span class="sym">(</span>X<span class="sym">),</span> <span class="kwd">is_integer</span><span class="sym">(</span>Y<span class="sym">)-&gt;</span> <span class="kwd">ack</span><span class="sym">(</span>X<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">ack</span><span class="sym">(</span>X<span class="sym">,</span>Y<span class="sym">-</span><span class="num">1</span><span class="sym">)).</span>

<span class="slc">%Only used for small numbers -&gt; don't optimize for float!</span>
<span class="kwd">tak</span><span class="sym">(</span>X<span class="sym">,</span> Y<span class="sym">,</span> Z<span class="sym">)</span> <span class="kwa">when</span> Y <span class="sym">&lt;</span> X<span class="sym">-&gt;</span> <span class="kwd">tak</span><span class="sym">(</span><span class="kwd">tak</span><span class="sym">(</span>X<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>Y<span class="sym">,</span>Z<span class="sym">),</span> <span class="kwd">tak</span><span class="sym">(</span>Y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>Z<span class="sym">,</span>X<span class="sym">),</span> <span class="kwd">tak</span><span class="sym">(</span>Z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>X<span class="sym">,</span>Y<span class="sym">));</span>
<span class="kwd">tak</span><span class="sym">(</span>_<span class="sym">,</span> _<span class="sym">,</span> Z<span class="sym">) -&gt;</span> Z<span class="sym">.</span>

<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span> M<span class="sym">=</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>
    io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;Ack(3,~w): ~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>N<span class="sym">,</span> <span class="kwd">ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> N<span class="sym">)]),</span>
    io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;Fib(~.1f): ~.1f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span><span class="num">27.0</span><span class="sym">+</span>N<span class="sym">,</span> <span class="kwd">fibF</span><span class="sym">(</span><span class="num">27.0</span><span class="sym">+</span>N<span class="sym">)]),</span>
    io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;Tak(~w,~w,~w): ~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>M<span class="sym">*</span><span class="num">3</span><span class="sym">,</span>M<span class="sym">*</span><span class="num">2</span><span class="sym">,</span>M<span class="sym">,</span> <span class="kwd">tak</span><span class="sym">(</span>M<span class="sym">*</span><span class="num">3</span><span class="sym">,</span>M<span class="sym">*</span><span class="num">2</span><span class="sym">,</span>M<span class="sym">)]),</span>
    io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;Fib(3): ~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span><span class="kwd">fibI</span><span class="sym">(</span><span class="num">3</span><span class="sym">)]),</span>
    io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;Tak(3.0,2.0,1.0): ~.1f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span><span class="kwd">tak</span><span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span><span class="num">2.0</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">)]),</span>
    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">).</span>





