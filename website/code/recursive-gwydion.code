<span class="kwb">module</span><span class="sym">:</span> recursive
<span class="kwa">use</span><span class="sym">-</span>libraries<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> io
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> format<span class="sym">-</span>out

<span class="slc">// ---------------------------------------------------------------------</span>
<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Code based on / inspired by existing, relevant Shootout submissions</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Anthony Borla</span>
<span class="slc">// ---------------------------------------------------------------------</span>

<span class="kwa">define function</span> <span class="kwd">ack</span><span class="sym">(</span>x <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> y <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
    y <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">elseif</span> <span class="sym">(</span>y <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
    <span class="kwd">ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwa">else</span>
    <span class="kwd">ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="kwd">ack</span><span class="sym">(</span>x<span class="sym">,</span> y <span class="sym">-</span> <span class="num">1</span><span class="sym">));</span>
  <span class="kwa">end if</span><span class="sym">;</span>
<span class="kwa">end function</span> ack<span class="sym">;</span>

<span class="slc">// --------------</span>

<span class="kwa">define function</span> <span class="kwd">fib</span><span class="sym">(</span>n <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>n <span class="kwa">&lt;</span> <span class="num">2</span><span class="kwa">)</span>
    <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">else</span>
    <span class="kwd">fib</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">) +</span> <span class="kwd">fib</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwa">end if</span><span class="sym">;</span>
<span class="kwa">end function</span> fib<span class="sym">;</span>

<span class="kwa">define function</span> <span class="kwd">fibflt</span><span class="sym">(</span>n <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>n <span class="kwa">&lt;</span> <span class="num">2.0</span><span class="kwa">d0)</span>
    <span class="num">1.0</span>d0<span class="sym">;</span>
  <span class="kwa">else</span>
    <span class="kwd">fibflt</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2.0</span>d0<span class="sym">) +</span> <span class="kwd">fibflt</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1.0</span>d0<span class="sym">);</span>
  <span class="kwa">end if</span><span class="sym">;</span>
<span class="kwa">end function</span> fibflt<span class="sym">;</span>

<span class="slc">// --------------</span>

<span class="kwa">define function</span> <span class="kwd">tak</span><span class="sym">(</span>x <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> y <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> z <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>y <span class="kwa">&lt; x)</span>
    <span class="kwd">tak</span><span class="sym">(</span><span class="kwd">tak</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> <span class="kwd">tak</span><span class="sym">(</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> <span class="kwd">tak</span><span class="sym">(</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">));</span>
  <span class="kwa">else</span>
    z<span class="sym">;</span>
  <span class="kwa">end if</span><span class="sym">;</span>
<span class="kwa">end function</span> tak<span class="sym">;</span>

<span class="kwa">define function</span> <span class="kwd">takflt</span><span class="sym">(</span>x <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> y <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> z <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>y <span class="kwa">&lt; x)</span>
    <span class="kwd">takflt</span><span class="sym">(</span><span class="kwd">takflt</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1.0</span>d0<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> <span class="kwd">takflt</span><span class="sym">(</span>y <span class="sym">-</span> <span class="num">1.0</span>d0<span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> <span class="kwd">takflt</span><span class="sym">(</span>z <span class="sym">-</span> <span class="num">1.0</span>d0<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">));</span>
  <span class="kwa">else</span>
    z<span class="sym">;</span>
  <span class="kwa">end if</span><span class="sym">;</span>
<span class="kwa">end function</span> takflt<span class="sym">;</span>

<span class="slc">// --------------------------------</span>

<span class="kwa">begin</span>
  <span class="kwa">let</span> n <span class="sym">=</span> application<span class="sym">-</span><span class="kwd">arguments</span><span class="sym">()[</span><span class="num">0</span><span class="sym">]</span>.string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">;</span>

  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;Ack(3,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">));</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;Fib(%.1f): %.1f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="num">27.0</span>d0 <span class="sym">+</span> n<span class="sym">,</span> <span class="kwd">fibflt</span><span class="sym">(</span><span class="num">27.0</span>d0 <span class="sym">+</span> n<span class="sym">));</span>

  n <span class="sym">:=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;Tak(%d,%d,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> n <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">tak</span><span class="sym">(</span>n <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> n <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">));</span>

  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;Fib(3): %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">fib</span><span class="sym">(</span><span class="num">3</span><span class="sym">));</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;Tak(3.0,2.0,1.0): %.1f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">takflt</span><span class="sym">(</span><span class="num">3.0</span>d0<span class="sym">,</span> <span class="num">2.0</span>d0<span class="sym">,</span> <span class="num">1.0</span>d0<span class="sym">));</span>
<span class="kwa">end</span>

