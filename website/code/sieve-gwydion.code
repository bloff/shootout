<span class="line">    1 </span><span class="kwb">module</span><span class="sym">:</span>    sieve
<span class="line">    2 </span><span class="kwb">synopsis</span><span class="sym">:</span>  implementation of <span class="str">&quot;Sieve of Eratosthenes&quot;</span> benchmark
<span class="line">    3 </span><span class="kwb">author</span><span class="sym">:</span>    Eric Kidd <span class="kwa">&lt;eric.kidd&#64;pobox.com&gt;</span>
<span class="line">    4 </span><span class="kwb">copyright</span><span class="sym">:</span> public <span class="kwa">domain
</span><span class="line">    5 </span><span class="kwa">
</span><span class="line">    6 </span><span class="kwa">define function</span> sieve <span class="sym">(</span>limit <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">;
</span><span class="line">    7 </span><span class="sym"></span>  <span class="kwa">let</span> flags <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;byte-vector&gt;</span><span class="sym">,</span> size<span class="sym">:</span> limit <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> fill<span class="sym">:</span> <span class="num">1</span><span class="sym">);
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span>  <span class="slc">// We know 1 isn't prime.
</span><span class="line">   10 </span><span class="slc"></span>  flags<span class="sym">[</span><span class="num">0</span><span class="sym">] :=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span>  flags<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   12 </span><span class="sym"></span>  <span class="kwa">let</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span>  <span class="slc">// Sieve for the rest.
</span><span class="line">   15 </span><span class="slc"></span>  <span class="kwa">for</span> <span class="sym">(</span>flag keyed<span class="sym">-</span><span class="kwa">by</span> i <span class="kwa">in</span> flags<span class="sym">)
</span><span class="line">   16 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>flag &gt; <span class="num">0</span><span class="sym">)
</span><span class="line">   17 </span><span class="sym"></span>      <span class="kwa">for</span> <span class="sym">(</span>k <span class="kwa">from</span> <span class="sym">(</span>i <span class="sym">*</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">below</span> flags.size <span class="kwa">by</span> i<span class="sym">)
</span><span class="line">   18 </span><span class="sym"></span>        flags<span class="sym">[</span>k<span class="sym">] :=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>      <span class="kwa">end for</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>      count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>  <span class="kwa">end for</span><span class="sym">;
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span>  <span class="slc">// Return our findings.
</span><span class="line">   25 </span><span class="slc"></span>  count<span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span><span class="kwa">end function</span> sieve<span class="sym">;
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym">
</span><span class="line">   29 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   30 </span><span class="kwa">  let</span> arg <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">(</span>element<span class="sym">(</span>application<span class="sym">-</span>arguments<span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;1&quot;</span><span class="sym">));
</span><span class="line">   31 </span><span class="sym"></span>  <span class="kwa">let</span> prime<span class="sym">-</span>count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>  <span class="kwa">for</span> <span class="sym">(</span>num <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> arg<span class="sym">)
</span><span class="line">   33 </span><span class="sym"></span>    prime<span class="sym">-</span>count <span class="sym">:=</span> sieve<span class="sym">(</span><span class="num">8192</span><span class="sym">);
</span><span class="line">   34 </span><span class="sym"></span>  <span class="kwa">end for</span><span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;Count: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> prime<span class="sym">-</span>count<span class="sym">);
</span><span class="line">   36 </span><span class="sym"></span><span class="kwa">end</span>
