<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
module:    sieve
synopsis:  implementation of <B><FONT COLOR="#BC8F8F">&quot;Sieve of Eratosthenes&quot;</FONT></B> benchmark
author:    Eric Kidd &lt;eric.kidd@pobox.com&gt;
copyright: public <B><FONT COLOR="#5F9EA0">domain</FONT></B>

<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">sieve </FONT></I></B></FONT></B>(limit <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B>) <B><FONT COLOR="#A020F0">=&gt;</FONT></B> result <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B>;
  <B><FONT COLOR="#A020F0">let</FONT></B> flags = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">make</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;byte-vector&gt;</FONT></B>, <B><FONT COLOR="#5F9EA0">size:</FONT></B> limit + 1, <B><FONT COLOR="#5F9EA0">fill:</FONT></B> 1);

  <I><FONT COLOR="#B22222">// We know 1 isn't prime.
</FONT></I>  flags[0] <B><FONT COLOR="#5F9EA0">:</FONT></B>= 0;
  flags[1] <B><FONT COLOR="#5F9EA0">:</FONT></B>= 0;
  <B><FONT COLOR="#A020F0">let</FONT></B> count = 0;

  <I><FONT COLOR="#B22222">// Sieve for the rest.
</FONT></I>  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(flag keyed-by i <B><FONT COLOR="#A020F0">in</FONT></B> flags)
    <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">if </FONT></I></B></FONT></B>(flag &gt; 0)
      <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(k <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">from </FONT></I></B></FONT></B>(i * 2) <B><FONT COLOR="#A020F0">below</FONT></B> flags.size <B><FONT COLOR="#A020F0">by</FONT></B> i)
        flags[k] <B><FONT COLOR="#5F9EA0">:</FONT></B>= 0;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">for</FONT></B>;
      count <B><FONT COLOR="#5F9EA0">:</FONT></B>= count + 1;
    <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
  <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">for</FONT></B>;

  <I><FONT COLOR="#B22222">// Return our findings.
</FONT></I>  count;
<B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> sieve;


<B><FONT COLOR="#A020F0">begin</FONT></B>
  <B><FONT COLOR="#A020F0">let</FONT></B> arg = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">string-to-integer</FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">element</FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">application-arguments</FONT></I></B></FONT></B>(), 0, <B><FONT COLOR="#5F9EA0">default:</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B>));
  <B><FONT COLOR="#A020F0">let</FONT></B> prime-count = 0;
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(num <B><FONT COLOR="#A020F0">from</FONT></B> 1 <B><FONT COLOR="#A020F0">to</FONT></B> arg)
    prime-count <B><FONT COLOR="#5F9EA0">:</FONT></B>= <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">sieve</FONT></I></B></FONT></B>(8192);
  <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">for</FONT></B>;
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;Count: %d\n&quot;</FONT></B>, prime-count);
<B><FONT COLOR="#A020F0">end</FONT></B></pre></td></tr></table>
