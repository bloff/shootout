<span class="sym">!</span> Takfp function implementation
<span class="sym">!</span> Simon Geard<span class="sym">,</span> <span class="num">7</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">04
</span><span class="sym">!
!</span> Building info<span class="sym">.
! ==============
!
!</span> Linux  <span class="sym">-</span> <span class="kwa">using</span> the Intel Fortran90 compiler<span class="sym">:
!
!</span>          ifort takfp<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span><span class="kwb">static</span><span class="sym">-</span>libcxa <span class="sym">-</span>o takfp
<span class="sym">!
!</span> WinXP  <span class="sym">-</span> Compaq Visual Fortran <span class="num">6.6c
</span><span class="sym">!
!</span>          f90 takfp<span class="sym">.</span>f90 <span class="sym">/</span>link <span class="sym">/</span>libpath<span class="sym">:</span><span class="str">&quot;d:</span><span class="esc">\P</span><span class="str">rogram Files</span><span class="esc">\M</span><span class="str">icrosoft Visual Studio</span><span class="esc">\d</span><span class="str">f98</span><span class="esc">\l</span><span class="str">ib&quot;</span>
<span class="sym">!
!</span> Cygwin <span class="sym">-</span> g95 compiler
<span class="sym">!
!</span>          g95 takfp<span class="sym">.</span>f90 <span class="sym">-</span>o takfp<span class="sym">.</span>exe
<span class="sym">!
</span>program takfp
  implicit none
  real<span class="sym">*</span><span class="num">8</span>  n
  real<span class="sym">*</span><span class="num">8</span> result
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">2</span><span class="sym">)</span> argv

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,*)</span> n
  result <span class="sym">=</span> tak<span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span>n<span class="sym">)
</span>  write<span class="sym">(*,</span><span class="str">'(f0.1)'</span><span class="sym">)</span> result

contains

  <span class="sym">!</span> The Takfp function itself
  recursive real<span class="sym">*</span><span class="num">8</span> function tak<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">)</span> result<span class="sym">(</span>dtak<span class="sym">)
</span>    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> x<span class="sym">,</span> y<span class="sym">,</span> z
    <span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&gt;=</span> x<span class="sym">)</span> then
       dtak <span class="sym">=</span> z
    <span class="kwa">else
</span>       dtak <span class="sym">=</span> tak<span class="sym">(</span>tak<span class="sym">(</span>x<span class="num">-1.0d0</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span>tak<span class="sym">(</span>y<span class="num">-1.0d0</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span>tak<span class="sym">(</span>z<span class="num">-1.0d0</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">))
</span>    end <span class="kwa">if
</span>  end function tak

end program takfp

