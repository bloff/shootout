<span class="com">{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Ian Osgood
}</span>

<span class="kwa">program</span> spectralNorm<span class="sym">;
</span><span class="kwa">uses</span> SysUtils<span class="sym">;

</span><span class="kwa">var</span> n<span class="sym">,</span>i <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>    u<span class="sym">,</span>v<span class="sym">,</span>tmp <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">double</span><span class="sym">;
</span>    vBv<span class="sym">,</span>vv <span class="sym">:</span> <span class="kwb">double</span><span class="sym">;

</span><span class="kwa">function</span> A<span class="sym">(</span>i<span class="sym">,</span>j <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">):</span> <span class="kwb">double</span><span class="sym">;
</span><span class="kwa">begin
</span>  A <span class="sym">:=</span> <span class="num">1</span> <span class="sym">/ ((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">div</span> <span class="num">2</span> <span class="sym">+</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> mulAv<span class="sym">(</span><span class="kwa">var</span> v<span class="sym">,</span> Av <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">double</span><span class="sym">);
</span><span class="kwa">var</span> i<span class="sym">,</span>j <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">begin
  for</span> i <span class="sym">:=</span> low<span class="sym">(</span>Av<span class="sym">)</span> <span class="kwa">to</span> high<span class="sym">(</span>Av<span class="sym">)</span> <span class="kwa">do
  begin
</span>    Av<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwa">for</span> j <span class="sym">:=</span> low<span class="sym">(</span>v<span class="sym">)</span> <span class="kwa">to</span> high<span class="sym">(</span>v<span class="sym">)</span> <span class="kwa">do
</span>      Av<span class="sym">[</span>i<span class="sym">] :=</span> Av<span class="sym">[</span>i<span class="sym">] +</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) *</span> v<span class="sym">[</span>j<span class="sym">];
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> mulAtv<span class="sym">(</span><span class="kwa">var</span> v<span class="sym">,</span> Atv <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">double</span><span class="sym">);
</span><span class="kwa">var</span> i<span class="sym">,</span>j <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">begin
  for</span> i <span class="sym">:=</span> low<span class="sym">(</span>Atv<span class="sym">)</span> <span class="kwa">to</span> high<span class="sym">(</span>Atv<span class="sym">)</span> <span class="kwa">do
  begin
</span>    Atv<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwa">for</span> j <span class="sym">:=</span> low<span class="sym">(</span>v<span class="sym">)</span> <span class="kwa">to</span> high<span class="sym">(</span>v<span class="sym">)</span> <span class="kwa">do
</span>      Atv<span class="sym">[</span>i<span class="sym">] :=</span> Atv<span class="sym">[</span>i<span class="sym">] +</span> A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">) *</span> v<span class="sym">[</span>j<span class="sym">];
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> mulAtAv<span class="sym">(</span><span class="kwa">var</span> v<span class="sym">,</span> AtAv <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">double</span><span class="sym">);
</span><span class="kwa">begin
</span>  mulAv<span class="sym">(</span>v<span class="sym">,</span> tmp<span class="sym">);
</span>  mulAtv<span class="sym">(</span>tmp<span class="sym">,</span> AtAv<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">begin
</span>  n <span class="sym">:=</span> StrToInt<span class="sym">(</span>paramstr<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>  SetLength<span class="sym">(</span>u<span class="sym">,</span> n<span class="sym">);
</span>  SetLength<span class="sym">(</span>v<span class="sym">,</span> n<span class="sym">);
</span>  SetLength<span class="sym">(</span>tmp<span class="sym">,</span> n<span class="sym">);

</span>  <span class="kwa">for</span> i <span class="sym">:=</span> low<span class="sym">(</span>u<span class="sym">)</span> <span class="kwa">to</span> high<span class="sym">(</span>u<span class="sym">)</span> <span class="kwa">do</span> u<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">1.0</span><span class="sym">;

</span>  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> <span class="num">10</span> <span class="kwa">do begin</span> mulAtAv<span class="sym">(</span>u<span class="sym">,</span>v<span class="sym">);</span> mulAtAv<span class="sym">(</span>v<span class="sym">,</span>u<span class="sym">)</span> <span class="kwa">end</span><span class="sym">;

</span>  <span class="kwa">for</span> i <span class="sym">:=</span> low<span class="sym">(</span>u<span class="sym">)</span> <span class="kwa">to</span> high<span class="sym">(</span>u<span class="sym">)</span> <span class="kwa">do
  begin
</span>    vBv <span class="sym">:=</span> vBv <span class="sym">+</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
</span>    vv  <span class="sym">:=</span> vv  <span class="sym">+</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
</span>  <span class="kwa">end</span><span class="sym">;

</span>  writeln<span class="sym">(</span>sqrt<span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">):</span><span class="num">0</span><span class="sym">:</span><span class="num">9</span><span class="sym">);
</span><span class="kwa">end</span>.
