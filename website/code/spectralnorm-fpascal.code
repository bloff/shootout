<span class="com">{ The Computer Language Shootout</span>
<span class="com">  http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">  contributed by Ian Osgood</span>
<span class="com">  modified by Vincent Snijders</span>
<span class="com">}</span>

<span class="kwa">program</span> spectralNorm<span class="sym">;</span>


<span class="com">{$mode objfpc}</span><span class="com">{$inline on}</span>

<span class="kwa">var</span> n<span class="sym">,</span>i <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span>
    u<span class="sym">,</span>v<span class="sym">,</span>tmp <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">double</span><span class="sym">;</span>
    vBv<span class="sym">,</span>vv <span class="sym">:</span> <span class="kwb">double</span><span class="sym">;</span>

<span class="kwa">function</span> <span class="kwd">A</span><span class="sym">(</span>i<span class="sym">,</span>j <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">):</span> <span class="kwb">double</span><span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">begin</span>
  A <span class="sym">:=</span> <span class="num">1</span> <span class="sym">/ ((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">div</span> <span class="num">2</span> <span class="sym">+</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">procedure</span> <span class="kwd">mulAv</span><span class="sym">(</span><span class="kwa">var</span> v<span class="sym">,</span> Av <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">double</span><span class="sym">);</span>
<span class="kwa">var</span> i<span class="sym">,</span>j <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span>
<span class="kwa">begin</span>
  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="kwd">low</span><span class="sym">(</span>Av<span class="sym">)</span> <span class="kwa">to</span> <span class="kwd">high</span><span class="sym">(</span>Av<span class="sym">)</span> <span class="kwa">do</span>
  <span class="kwa">begin</span>
    Av<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">for</span> j <span class="sym">:=</span> <span class="kwd">low</span><span class="sym">(</span>v<span class="sym">)</span> <span class="kwa">to</span> <span class="kwd">high</span><span class="sym">(</span>v<span class="sym">)</span> <span class="kwa">do</span>
      Av<span class="sym">[</span>i<span class="sym">] :=</span> Av<span class="sym">[</span>i<span class="sym">] +</span> <span class="kwd">A</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) *</span> v<span class="sym">[</span>j<span class="sym">];</span>
  <span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">procedure</span> <span class="kwd">mulAtv</span><span class="sym">(</span><span class="kwa">var</span> v<span class="sym">,</span> Atv <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">double</span><span class="sym">);</span>
<span class="kwa">var</span> i<span class="sym">,</span>j <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span>
<span class="kwa">begin</span>
  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="kwd">low</span><span class="sym">(</span>Atv<span class="sym">)</span> <span class="kwa">to</span> <span class="kwd">high</span><span class="sym">(</span>Atv<span class="sym">)</span> <span class="kwa">do</span>
  <span class="kwa">begin</span>
    Atv<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwa">for</span> j <span class="sym">:=</span> <span class="kwd">low</span><span class="sym">(</span>v<span class="sym">)</span> <span class="kwa">to</span> <span class="kwd">high</span><span class="sym">(</span>v<span class="sym">)</span> <span class="kwa">do</span>
      Atv<span class="sym">[</span>i<span class="sym">] :=</span> Atv<span class="sym">[</span>i<span class="sym">] +</span> <span class="kwd">A</span><span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">) *</span> v<span class="sym">[</span>j<span class="sym">];</span>
  <span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">procedure</span> <span class="kwd">mulAtAv</span><span class="sym">(</span><span class="kwa">var</span> v<span class="sym">,</span> AtAv <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">double</span><span class="sym">);</span>
<span class="kwa">begin</span>
  <span class="kwd">mulAv</span><span class="sym">(</span>v<span class="sym">,</span> tmp<span class="sym">);</span>
  <span class="kwd">mulAtv</span><span class="sym">(</span>tmp<span class="sym">,</span> AtAv<span class="sym">);</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">begin</span>
  <span class="kwd">Val</span><span class="sym">(</span><span class="kwd">paramstr</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span> n<span class="sym">,</span> i<span class="sym">);</span>
  <span class="kwd">SetLength</span><span class="sym">(</span>u<span class="sym">,</span> n<span class="sym">);</span>
  <span class="kwd">SetLength</span><span class="sym">(</span>v<span class="sym">,</span> n<span class="sym">);</span>
  <span class="kwd">SetLength</span><span class="sym">(</span>tmp<span class="sym">,</span> n<span class="sym">);</span>

  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="kwd">low</span><span class="sym">(</span>u<span class="sym">)</span> <span class="kwa">to</span> <span class="kwd">high</span><span class="sym">(</span>u<span class="sym">)</span> <span class="kwa">do</span> u<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">1.0</span><span class="sym">;</span>

  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> <span class="num">10</span> <span class="kwa">do begin</span> <span class="kwd">mulAtAv</span><span class="sym">(</span>u<span class="sym">,</span>v<span class="sym">);</span> <span class="kwd">mulAtAv</span><span class="sym">(</span>v<span class="sym">,</span>u<span class="sym">)</span> <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="kwd">low</span><span class="sym">(</span>u<span class="sym">)</span> <span class="kwa">to</span> <span class="kwd">high</span><span class="sym">(</span>u<span class="sym">)</span> <span class="kwa">do</span>
  <span class="kwa">begin</span>
    vBv <span class="sym">:=</span> vBv <span class="sym">+</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];</span>
    vv  <span class="sym">:=</span> vv  <span class="sym">+</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];</span>
  <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwd">writeln</span><span class="sym">(</span><span class="kwd">sqrt</span><span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">):</span><span class="num">0</span><span class="sym">:</span><span class="num">9</span><span class="sym">);</span>
<span class="kwa">end</span>.
