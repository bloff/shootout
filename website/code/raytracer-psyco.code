<span class="slc">#!/usr/bin/python -OO</span>
<span class="slc"># The Computer Language Shootout Benchmarks</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by Kevin Carson</span>

<span class="kwc">import</span> sys<span class="sym">,</span> psyco
<span class="kwc">from</span> math <span class="kwc">import</span> sqrt

psyco<span class="sym">.</span><span class="kwd">full</span><span class="sym">()</span>


rn_coefficient <span class="sym">=</span> <span class="num">3.0</span> <span class="sym">/</span> <span class="kwd">sqrt</span><span class="sym">(</span><span class="num">12</span><span class="sym">)</span>
delta <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span><span class="num">2.220446e-16</span><span class="sym">)</span>
infinity <span class="sym">=</span> <span class="num">1.797693e+308</span>


<span class="kwa">class</span> Vector <span class="sym">:</span>
    <span class="kwb">def</span> <span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">) :</span>
        <span class="kwc">self</span><span class="sym">.</span>x <span class="sym">=</span> x
        <span class="kwc">self</span><span class="sym">.</span>y <span class="sym">=</span> y
        <span class="kwc">self</span><span class="sym">.</span>z <span class="sym">=</span> z

    <span class="kwb">def</span> <span class="kwd">__add__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> v<span class="sym">) :</span>
        <span class="kwb">return</span> <span class="kwd">Vector</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>x <span class="sym">+</span> v<span class="sym">.</span>x<span class="sym">,</span> <span class="kwc">self</span><span class="sym">.</span>y <span class="sym">+</span> v<span class="sym">.</span>y<span class="sym">,</span> <span class="kwc">self</span><span class="sym">.</span>z <span class="sym">+</span> v<span class="sym">.</span>z<span class="sym">)</span>

    <span class="kwb">def</span> <span class="kwd">__sub__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> v<span class="sym">) :</span>
        <span class="kwb">return</span> <span class="kwd">Vector</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>x <span class="sym">-</span> v<span class="sym">.</span>x<span class="sym">,</span> <span class="kwc">self</span><span class="sym">.</span>y <span class="sym">-</span> v<span class="sym">.</span>y<span class="sym">,</span> <span class="kwc">self</span><span class="sym">.</span>z <span class="sym">-</span> v<span class="sym">.</span>z<span class="sym">)</span>

    <span class="kwb">def</span> <span class="kwd">__rmul__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> n<span class="sym">) :</span>
        <span class="kwb">return</span> <span class="kwd">Vector</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>x <span class="sym">*</span> n<span class="sym">,</span> <span class="kwc">self</span><span class="sym">.</span>y <span class="sym">*</span> n<span class="sym">,</span> <span class="kwc">self</span><span class="sym">.</span>z <span class="sym">*</span> n<span class="sym">)</span>

    <span class="kwb">def</span> <span class="kwd">dot</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> v<span class="sym">) :</span>
        <span class="kwb">return</span> <span class="kwc">self</span><span class="sym">.</span>x <span class="sym">*</span> v<span class="sym">.</span>x <span class="sym">+</span> <span class="kwc">self</span><span class="sym">.</span>y <span class="sym">*</span> v<span class="sym">.</span>y <span class="sym">+</span> <span class="kwc">self</span><span class="sym">.</span>z <span class="sym">*</span> v<span class="sym">.</span>z

    <span class="kwb">def</span> <span class="kwd">unitise</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">) :</span>
        <span class="kwb">return</span> <span class="sym">(</span><span class="num">1</span> <span class="sym">/</span> <span class="kwd">sqrt</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span><span class="kwd">dot</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">))) *</span> <span class="kwc">self</span>


<span class="kwa">class</span> Ray <span class="sym">:</span>
    <span class="kwb">def</span> <span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> o<span class="sym">,</span> d<span class="sym">) :</span>
        <span class="kwc">self</span><span class="sym">.</span>origin <span class="sym">=</span> o
        <span class="kwc">self</span><span class="sym">.</span>direction <span class="sym">=</span> d


<span class="kwa">class</span> Scene <span class="sym">:</span>
    <span class="kwb">def</span> <span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">) :</span>
        <span class="kwb">pass</span>

    <span class="kwb">def</span> <span class="kwd">intersect</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> point<span class="sym">,</span> vector<span class="sym">,</span> ray<span class="sym">) :</span>
        <span class="kwb">return</span> <span class="num">0.0</span><span class="sym">,</span> vector

    <span class="kwb">def</span> <span class="kwd">delete</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">) :</span>
        <span class="kwb">if</span> <span class="kwa">type</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">) ==</span> Group <span class="sym">:</span>
            <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwc">self</span><span class="sym">.</span>obs <span class="sym">:</span>
                <span class="kwc">self</span><span class="sym">.</span>objs<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">delete</span><span class="sym">()</span>
                <span class="kwc">self</span><span class="sym">.</span>objs<span class="sym">[</span>i<span class="sym">] =</span> None
            <span class="kwc">self</span> <span class="sym">=</span> None


<span class="kwa">class</span> <span class="kwd">Sphere</span><span class="sym">(</span>Scene<span class="sym">) :</span>
    <span class="kwb">def</span> <span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> center<span class="sym">,</span> radius<span class="sym">) :</span>
        Scene<span class="sym">.</span><span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">)</span>
        <span class="kwc">self</span><span class="sym">.</span>center <span class="sym">=</span> center
        <span class="kwc">self</span><span class="sym">.</span>radius <span class="sym">=</span> radius

    <span class="kwb">def</span> <span class="kwd">ray_sphere</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> ray<span class="sym">) :</span>
        v <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>center <span class="sym">-</span> ray<span class="sym">.</span>origin
        b <span class="sym">=</span> v<span class="sym">.</span><span class="kwd">dot</span><span class="sym">(</span>ray<span class="sym">.</span>direction<span class="sym">)</span>
        disc <span class="sym">=</span> b <span class="sym">*</span> b <span class="sym">-</span> v<span class="sym">.</span><span class="kwd">dot</span><span class="sym">(</span>v<span class="sym">) +</span> <span class="kwc">self</span><span class="sym">.</span>radius <span class="sym">*</span> <span class="kwc">self</span><span class="sym">.</span>radius

        <span class="kwb">if</span> disc <span class="sym">&lt;</span> <span class="num">0.0</span> <span class="sym">:</span>
            <span class="kwb">return</span> infinity

        d <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span>disc<span class="sym">)</span>
        t2 <span class="sym">=</span> b <span class="sym">+</span> d

        <span class="kwb">if</span> t2 <span class="sym">&lt;</span> <span class="num">0.0</span> <span class="sym">:</span>
            <span class="kwb">return</span> infinity

        t1 <span class="sym">=</span> b <span class="sym">-</span> d

        <span class="kwb">if</span> t1 <span class="sym">&gt;</span> <span class="num">0.0</span> <span class="sym">:</span>
            <span class="kwb">return</span> t1

        <span class="kwb">else</span> <span class="sym">:</span>
            <span class="kwb">return</span> t2


    <span class="kwb">def</span> <span class="kwd">intersect</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> pt<span class="sym">,</span> normal<span class="sym">,</span> ray<span class="sym">) :</span>
        l <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span><span class="kwd">ray_sphere</span><span class="sym">(</span>ray<span class="sym">)</span>

        <span class="kwb">if</span> l <span class="sym">&gt;=</span> pt <span class="sym">:</span>
            <span class="kwb">return</span> pt<span class="sym">,</span> normal

        normal <span class="sym">= (</span>ray<span class="sym">.</span>origin <span class="sym">+</span> l <span class="sym">*</span> ray<span class="sym">.</span>direction <span class="sym">-</span> <span class="kwc">self</span><span class="sym">.</span>center<span class="sym">).</span><span class="kwd">unitise</span><span class="sym">()</span>
        <span class="kwb">return</span> l<span class="sym">,</span> normal


<span class="kwa">class</span> <span class="kwd">Group</span><span class="sym">(</span>Scene<span class="sym">) :</span>
    <span class="kwb">def</span> <span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> b<span class="sym">) :</span>
        Scene<span class="sym">.</span><span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">)</span>
        <span class="kwc">self</span><span class="sym">.</span>bound <span class="sym">=</span> b
        <span class="kwc">self</span><span class="sym">.</span>objs <span class="sym">= []</span>

    <span class="kwb">def</span> <span class="kwd">intersect</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> pt<span class="sym">,</span> normal<span class="sym">,</span> ray<span class="sym">) :</span>
        l <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>bound<span class="sym">.</span><span class="kwd">ray_sphere</span><span class="sym">(</span>ray<span class="sym">)</span>

        <span class="kwb">if</span> l <span class="sym">&gt;=</span> pt <span class="sym">:</span>
            <span class="kwb">return</span> pt<span class="sym">,</span> normal

        <span class="kwb">for</span> obj <span class="kwb">in</span> <span class="kwc">self</span><span class="sym">.</span>objs <span class="sym">:</span>
            pt<span class="sym">,</span> normal <span class="sym">=</span> obj<span class="sym">.</span><span class="kwd">intersect</span><span class="sym">(</span>pt<span class="sym">,</span> normal<span class="sym">,</span> ray<span class="sym">)</span>

        <span class="kwb">return</span> pt<span class="sym">,</span> normal


<span class="kwb">def</span> <span class="kwd">ray_trace</span><span class="sym">(</span>light<span class="sym">,</span> ray<span class="sym">,</span> scene<span class="sym">) :</span>
    l <span class="sym">=</span> infinity
    normal <span class="sym">=</span> <span class="kwd">Vector</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span>
    l<span class="sym">,</span> normal <span class="sym">=</span> scene<span class="sym">.</span><span class="kwd">intersect</span><span class="sym">(</span>l<span class="sym">,</span> normal<span class="sym">,</span> ray<span class="sym">)</span>

    <span class="kwb">if</span> l <span class="sym">==</span> infinity <span class="sym">:</span>
        <span class="kwb">return</span> <span class="num">0.0</span>

    o <span class="sym">=</span> ray<span class="sym">.</span>origin <span class="sym">+</span> l <span class="sym">*</span> ray<span class="sym">.</span>direction <span class="sym">+</span> delta <span class="sym">*</span> normal
    g <span class="sym">= -</span>normal<span class="sym">.</span><span class="kwd">dot</span><span class="sym">(</span>light<span class="sym">)</span>
    l <span class="sym">=</span> infinity

    <span class="kwb">if</span> g <span class="sym">&lt;=</span> <span class="num">0.0</span> <span class="sym">:</span>
        <span class="kwb">return</span> <span class="num">0.0</span>

    l<span class="sym">,</span> normal <span class="sym">=</span> scene<span class="sym">.</span><span class="kwd">intersect</span><span class="sym">(</span>
        l<span class="sym">,</span>
        normal<span class="sym">,</span>
        <span class="kwd">Ray</span><span class="sym">(</span>o<span class="sym">,</span> <span class="kwd">Vector</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">) -</span> light<span class="sym">)</span>
    <span class="sym">)</span>

    <span class="kwb">if</span> l <span class="sym">==</span> infinity <span class="sym">:</span>
        <span class="kwb">return</span> g

    <span class="kwb">else</span> <span class="sym">:</span>
        <span class="kwb">return</span> <span class="num">0.0</span>


<span class="kwb">def</span> <span class="kwd">create</span><span class="sym">(</span>level<span class="sym">,</span> r<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">) :</span>
    sphere <span class="sym">=</span> <span class="kwd">Sphere</span><span class="sym">(</span><span class="kwd">Vector</span><span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> r<span class="sym">)</span>

    <span class="kwb">if</span> level <span class="sym">==</span> <span class="num">1</span> <span class="sym">:</span>
        <span class="kwb">return</span> sphere

    group <span class="sym">=</span> <span class="kwd">Group</span><span class="sym">(</span><span class="kwd">Sphere</span><span class="sym">(</span><span class="kwd">Vector</span><span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> <span class="num">3.0</span> <span class="sym">*</span> r<span class="sym">))</span>
    group<span class="sym">.</span>objs<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>sphere<span class="sym">)</span>

    rn <span class="sym">=</span> rn_coefficient <span class="sym">*</span> r

    <span class="kwb">for</span> dz <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(-</span><span class="num">1</span><span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> <span class="num">2</span><span class="sym">) :</span>
        <span class="kwb">for</span> dx <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(-</span><span class="num">1</span><span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> <span class="num">2</span><span class="sym">) :</span>
            group<span class="sym">.</span>objs<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>
                <span class="kwd">create</span><span class="sym">(</span>level <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> r <span class="sym">/</span> <span class="num">2.0</span><span class="sym">,</span> x <span class="sym">-</span> dx <span class="sym">*</span> rn<span class="sym">,</span> y <span class="sym">+</span> rn<span class="sym">,</span> z <span class="sym">-</span> dz <span class="sym">*</span> rn<span class="sym">)</span>
            <span class="sym">)</span>

    <span class="kwb">return</span> group


<span class="kwb">def</span> <span class="kwd">main</span><span class="sym">() :</span>
    <span class="kwb">if</span> <span class="kwa">len</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">) ==</span> <span class="num">2</span> <span class="sym">:</span>
        n <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>

    <span class="kwb">else</span> <span class="sym">:</span>
        n <span class="sym">=</span> <span class="num">256</span>

    level <span class="sym">=</span> <span class="num">6</span>
    scene <span class="sym">=</span> <span class="kwd">create</span><span class="sym">(</span>level<span class="sym">,</span> <span class="num">1.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">, -</span><span class="num">1.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span>

    ss <span class="sym">=</span> <span class="num">4</span>
    ss2 <span class="sym">=</span> ss <span class="sym">*</span> ss

    cout <span class="sym">=</span> sys<span class="sym">.</span>stdout<span class="sym">.</span>write

    <span class="kwd">cout</span><span class="sym">(</span><span class="str">&quot;P5</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">255</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">% (</span>n<span class="sym">,</span> n<span class="sym">))</span>

    <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">, -</span><span class="num">1</span><span class="sym">, -</span><span class="num">1</span><span class="sym">) :</span>
        <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">) :</span>
            g <span class="sym">=</span> <span class="num">0.0</span>
            <span class="kwb">for</span> dx <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>ss<span class="sym">) :</span>
                <span class="kwb">for</span> dy <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>ss<span class="sym">) :</span>
                    g <span class="sym">+=</span> <span class="kwd">ray_trace</span><span class="sym">(</span>
                        <span class="kwd">Vector</span><span class="sym">(-</span><span class="num">1.0</span><span class="sym">, -</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">).</span><span class="kwd">unitise</span><span class="sym">(),</span>
                        <span class="kwd">Ray</span><span class="sym">(</span>
                            <span class="kwd">Vector</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">, -</span><span class="num">4.0</span><span class="sym">),</span>
                            <span class="kwd">Vector</span><span class="sym">(</span>
                                x <span class="sym">+</span> dx <span class="sym">/</span> <span class="kwa">float</span><span class="sym">(</span>ss<span class="sym">) -</span> n <span class="sym">/</span> <span class="num">2.0</span><span class="sym">,</span>
                                y <span class="sym">+</span> dy <span class="sym">/</span> <span class="kwa">float</span><span class="sym">(</span>ss<span class="sym">) -</span> n <span class="sym">/</span> <span class="num">2.0</span><span class="sym">,</span>
                                <span class="kwa">float</span><span class="sym">(</span>n<span class="sym">)</span>
                            <span class="sym">).</span><span class="kwd">unitise</span><span class="sym">()</span>
                        <span class="sym">),</span>
                        scene
                    <span class="sym">)</span>
            g <span class="sym">=</span> <span class="num">0.5</span> <span class="sym">+</span> <span class="num">255</span> <span class="sym">*</span> g <span class="sym">/</span> ss2
            <span class="kwd">cout</span><span class="sym">(</span><span class="kwa">chr</span><span class="sym">(</span><span class="kwa">int</span><span class="sym">(</span>g<span class="sym">)))</span>
    scene<span class="sym">.</span><span class="kwd">delete</span><span class="sym">()</span>


<span class="kwd">main</span><span class="sym">()</span>
