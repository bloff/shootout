<span class="slc">-- $Id: moments-nhc98.code,v 1.7 2005-04-06 14:49:58 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- from Brian Gregor
</span><span class="slc">-- with modifications by Max
</span><span class="slc">-- with further modifications by JP Bernardy
</span><span class="slc">-- replace stock &quot;read&quot; with faster version by Greg Buchholz
</span><span class="slc">-- compile with: ghc -O2 -o moments moments.hs
</span><span class="slc">-- for better performance run with increased stack and heap
</span><span class="slc">-- i.e. ./moments +RTS -K2M -H45M &lt; Input
</span>
<span class="kwa">import</span> Numeric
<span class="kwa">import</span> List<span class="sym">(</span>sort<span class="sym">)
</span><span class="kwa">import</span> <span class="kwb">Char</span><span class="sym">(</span> ord <span class="sym">)

</span>main <span class="sym">=</span> interact $ unlines . answers . map fast_read . lines

<span class="slc">-- compute out the answers
</span>answers <span class="sym">:: [</span><span class="kwb">Double</span><span class="sym">] -&gt; [</span>String<span class="sym">]
</span>answers nums <span class="sym">= [</span><span class="str">&quot;n:                  &quot;</span> <span class="sym">++</span> show <span class="sym">(</span>length nums<span class="sym">),
</span>                <span class="str">&quot;median:             &quot;</span> <span class="sym">++ (</span>showFFloat <span class="sym">(</span>Just <span class="num">6</span><span class="sym">) (</span>median nums n<span class="sym">)</span> <span class="str">&quot;&quot;</span><span class="sym">),
</span>                <span class="str">&quot;mean:               &quot;</span> <span class="sym">++ (</span>showFFloat <span class="sym">(</span>Just <span class="num">6</span><span class="sym">)</span> mean <span class="str">&quot;&quot;</span><span class="sym">),
</span>                <span class="str">&quot;average_deviation:  &quot;</span> <span class="sym">++ (</span>showFFloat <span class="sym">(</span>Just <span class="num">6</span><span class="sym">)</span> avg_dev <span class="str">&quot;&quot;</span><span class="sym">),
</span>                <span class="str">&quot;standard_deviation: &quot;</span> <span class="sym">++ (</span>showFFloat <span class="sym">(</span>Just <span class="num">6</span><span class="sym">)</span> std_dev <span class="str">&quot;&quot;</span><span class="sym">),
</span>                <span class="str">&quot;variance:           &quot;</span> <span class="sym">++ (</span>showFFloat <span class="sym">(</span>Just <span class="num">6</span><span class="sym">)</span> var <span class="str">&quot;&quot;</span><span class="sym">),
</span>                <span class="str">&quot;skew:               &quot;</span> <span class="sym">++ (</span>showFFloat <span class="sym">(</span>Just <span class="num">6</span><span class="sym">)</span> skew <span class="str">&quot;&quot;</span><span class="sym">),
</span>                <span class="str">&quot;kurtosis:           &quot;</span> <span class="sym">++ (</span>showFFloat <span class="sym">(</span>Just <span class="num">6</span><span class="sym">)</span> kurt <span class="str">&quot;&quot;</span><span class="sym">)]
</span>    <span class="kwa">where</span> n <span class="sym">=</span>  fromIntegral <span class="sym">(</span>length nums<span class="sym">)
</span>          mean <span class="sym">=</span> sum nums <span class="sym">/</span> n
          deviation <span class="sym">= [</span>x<span class="sym">-</span>mean <span class="sym">|</span> x <span class="sym">&lt;-</span> nums<span class="sym">]
</span>          avg_dev <span class="sym">=</span> sum <span class="sym">(</span>map abs deviation<span class="sym">) /</span> n
          var <span class="sym">=</span> sum <span class="sym">[</span>x<span class="sym">**</span><span class="num">2</span> <span class="sym">|</span> x <span class="sym">&lt;-</span> deviation<span class="sym">] / (</span>n<span class="num">-1</span><span class="sym">)
</span>          std_dev <span class="sym">=</span>  sqrt var
          skew <span class="sym">=</span> sum <span class="sym">[</span>x<span class="sym">**</span><span class="num">3</span> <span class="sym">|</span> x <span class="sym">&lt;-</span> deviation<span class="sym">] / (</span>n<span class="sym">*</span>var<span class="sym">*</span>std_dev<span class="sym">)
</span>          kurt <span class="sym">=</span> sum <span class="sym">[</span>x<span class="sym">**</span><span class="num">4</span> <span class="sym">|</span> x <span class="sym">&lt;-</span> deviation<span class="sym">] / (</span>n<span class="sym">*</span>var<span class="sym">*</span>var<span class="sym">) -</span> <span class="num">3.0

</span><span class="slc">-- calculate the median
</span>median nums n <span class="sym">=</span> mid <span class="sym">(</span>sort nums<span class="sym">)
</span>    <span class="kwa">where</span> mid x
              <span class="sym">|</span> odd <span class="sym">(</span>length x<span class="sym">) =</span> x<span class="sym">!!</span> midpt
              <span class="sym">|</span> otherwise       <span class="sym">= ((</span>x<span class="sym">!!(</span>midpt<span class="num">-1</span><span class="sym">)) + (</span>x<span class="sym">!!</span>midpt<span class="sym">)) /</span> <span class="num">2.0
</span>          midpt <span class="sym">=</span> floor <span class="sym">(</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">)

</span><span class="slc">--Faster &quot;read&quot; for doubles
</span>fast_read <span class="sym">(</span><span class="str">'-'</span><span class="sym">:</span>xs<span class="sym">) = -</span><span class="num">1</span> <span class="sym">*</span> fast_read<span class="sym">(</span>xs<span class="sym">)
</span>fast_read      xs  <span class="sym">=</span> ip <span class="sym">+</span> frac
                <span class="kwa">where
</span>                    <span class="sym">(</span>i<span class="sym">,</span>f<span class="sym">) =</span> break <span class="sym">(==</span> <span class="str">'.'</span><span class="sym">)</span> xs
                    ip    <span class="sym">=</span> foldl <span class="sym">(</span>mult_acc  <span class="num">10</span><span class="sym">)</span> <span class="num">0</span> i
                    frac  <span class="sym">=</span> foldl <span class="sym">(</span>mult_acc <span class="num">0.1</span><span class="sym">)</span> <span class="num">0</span> f
                    mult_acc val x y <span class="sym">=</span> x<span class="sym">*</span>val <span class="sym">+</span> fromIntegral<span class="sym">(</span>ord<span class="sym">(</span>y<span class="sym">)-</span>ord<span class="sym">(</span><span class="str">'0'</span><span class="sym">))</span>
