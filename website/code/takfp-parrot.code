#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>parrot <span class="sym">-</span>C
# by Joshua Isom
.<span class="kwa">sub</span> main <span class="sym">:</span>main
	.param pmc argv
	.<span class="kwa">local int</span> argc<span class="sym">,</span> n
	argc <span class="sym">=</span> argv
	n <span class="sym">=</span> <span class="num">1</span>
	unless argc <span class="sym">==</span> <span class="num">2</span> goto argsok
	$S0 <span class="sym">=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	n <span class="sym">=</span> $S0
argsok<span class="sym">:</span>
	.<span class="kwa">local</span> float f
	$N0 <span class="sym">=</span> n
	$N0 <span class="sym">*=</span> <span class="num">3</span>
	$N1 <span class="sym">=</span> n
	$N1 <span class="sym">*=</span> <span class="num">2</span>
	$N2 <span class="sym">=</span> n
	$N2 <span class="sym">*=</span> <span class="num">1</span>
	f <span class="sym">=</span> Tak<span class="sym">(</span>$N0<span class="sym">,</span> $N1<span class="sym">,</span> $N2<span class="sym">)</span>
	$P0 <span class="sym">=</span> new .FixedFloatArray
	$P0 <span class="sym">=</span> <span class="num">1</span>
	$P0<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> f
	$S0 <span class="sym">=</span> sprintf <span class="str">&quot;%.1f\n&quot;</span><span class="sym">,</span> $P0
	print $S0
.<span class="kwa">end</span>

.<span class="kwa">sub</span> Tak
	.param float x
	.param float y
	.param float z
	unless y <span class="sym">&gt;=</span> x goto endif
	.return<span class="sym">(</span>z<span class="sym">)</span>
endif<span class="sym">:</span>
	.<span class="kwa">local</span> float tmp
	tmp <span class="sym">=</span> x <span class="sym">-</span> <span class="num">1</span>
	$N0 <span class="sym">=</span> Tak<span class="sym">(</span>tmp<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">)</span>
	tmp <span class="sym">=</span> y <span class="sym">-</span> <span class="num">1</span>
	$N1 <span class="sym">=</span> Tak<span class="sym">(</span>tmp<span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">)</span>
	tmp <span class="sym">=</span> z <span class="sym">-</span> <span class="num">1</span>
	$N2 <span class="sym">=</span> Tak<span class="sym">(</span>tmp<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">)</span>
	.return Tak<span class="sym">(</span>$N0<span class="sym">,</span> $N1<span class="sym">,</span> $N2<span class="sym">)</span>
.<span class="kwa">end</span>

