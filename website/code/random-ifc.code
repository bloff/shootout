<span class="sym">!</span> Random access function implementation
<span class="sym">!</span> Simon Geard<span class="sym">,</span> <span class="num">1</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">04
</span><span class="sym">!
!</span> Building info<span class="sym">.
! ==============
!
!</span> Linux  <span class="sym">-</span> <span class="kwa">using</span> the Intel Fortran90 compiler<span class="sym">:
!
!</span>          ifort random<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span><span class="kwb">static</span><span class="sym">-</span>libcxa <span class="sym">-</span>o random
<span class="sym">!
!</span> WinXP  <span class="sym">-</span> Compaq Visual Fortran <span class="num">6.6c
</span><span class="sym">!
!</span>          f90 random<span class="sym">.</span>f90 <span class="sym">/</span>link <span class="sym">/</span>libpath<span class="sym">:</span><span class="str">&quot;d:</span><span class="esc">\P</span><span class="str">rogram Files</span><span class="esc">\M</span><span class="str">icrosoft Visual Studio</span><span class="esc">\d</span><span class="str">f98</span><span class="esc">\l</span><span class="str">ib&quot;</span>
<span class="sym">!
!</span> Cygwin <span class="sym">-</span> g95 compiler
<span class="sym">!
!</span>          g95 random<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span>o random<span class="sym">.</span>exe
<span class="sym">!

</span>program random
  implicit none
  integer<span class="sym">,</span> parameter <span class="sym">::</span> IM <span class="sym">=</span> <span class="num">139968
</span>  integer<span class="sym">,</span> parameter <span class="sym">::</span> IA <span class="sym">=</span> <span class="num">3877
</span>  integer<span class="sym">,</span> parameter <span class="sym">::</span> IC <span class="sym">=</span> <span class="num">29573
</span>  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> argv
  integer <span class="sym">::</span> num<span class="sym">,</span>  k
  real<span class="sym">*</span><span class="num">8</span>  <span class="sym">::</span> s

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,</span><span class="str">'(I6)'</span><span class="sym">)</span> num

  <span class="kwa">do</span> k<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>num
     s <span class="sym">=</span> getRandom<span class="sym">(</span><span class="num">100.0d0</span><span class="sym">)
</span>  end <span class="kwa">do

</span>  print <span class="sym">*,</span>s

contains
  real<span class="sym">*</span><span class="num">8</span> function getRandom <span class="sym">(</span>maxval<span class="sym">)
</span>    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> maxval
    integer<span class="sym">,</span> save <span class="sym">::</span> last <span class="sym">=</span> <span class="num">42

</span>    last <span class="sym">=</span> mod<span class="sym">(</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">,</span> IM<span class="sym">)
</span>    getRandom <span class="sym">=</span> maxval <span class="sym">*</span> last <span class="sym">/</span> IM

  end function getRandom
end program random
<span class="sym">!</span> vim<span class="sym">:</span> ts<span class="sym">=</span><span class="num">4</span> ft<span class="sym">=</span>fortran
