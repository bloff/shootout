<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: binarytrees-groovy.code,v 1.1 2005-09-21 05:17:34 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
	modified by

    Each program should

        * define a tree node class and methods, a tree node record and procedures, or an algebraic data type and functions, or?
        * allocate a binary tree to 'stretch' memory, check it exists, and deallocate it
        * allocate a long-lived binary tree which will live-on while other trees are allocated and deallocated
        * allocate, walk, and deallocate many bottom-up binary trees
            o allocate a tree
            o walk the tree nodes, checksum node items (and maybe deallocate the node)
            o deallocate the tree
        * check that the long-lived binary tree still exists

    (Note: the left subtrees are heads of the right subtrees, keeping a depth counter in the accessors to avoid duplication is cheating!)

    There are reference implementations in OCaml, C#, and PHP.

    Correct output N = 10 is:

    stretch tree of depth 11         check: -1
    2048     trees of depth 4        check: -2048
    512      trees of depth 6        check: -512
    128      trees of depth 8        check: -128
    32       trees of depth 10       check: -32
    long lived tree of depth 10      check: -1


    The binary-trees benchmark is a simplistic adaptation of Hans Boehm's GCBench, which in turn was adapted from a benchmark by John Ellis and Pete Kovac.

    Thanks to Christophe Troestler and Einar Karttunen for help with this benchmark.

	Iterations can also be computed using 2**(maxDepth - depth + minDepth)
*/</span>
<span class="kwc">class</span> TreeNode <span class="sym">{
</span>      <span class="kwc">private</span> left<span class="sym">,</span> right
      <span class="kwc">private</span> item

      TreeNode<span class="sym">(</span><span class="kwb">int</span> item<span class="sym">){
</span>         <span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item
      <span class="sym">}

</span>      <span class="kwc">private</span> <span class="kwb">static</span> TreeNode bottomUpTree<span class="sym">(</span><span class="kwb">int</span> item<span class="sym">,</span> <span class="kwb">int</span> depth<span class="sym">) {
</span>         <span class="kwa">if</span> <span class="sym">(</span>depth<span class="sym">&gt;</span><span class="num">0</span><span class="sym">) {
</span>            <span class="kwa">return new</span> TreeNode<span class="sym">(
</span>                 bottomUpTree<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="num">-1</span><span class="sym">,</span> depth<span class="num">-1</span><span class="sym">)
               ,</span> bottomUpTree<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span> depth<span class="num">-1</span><span class="sym">)
               ,</span> item
               <span class="sym">)
         }</span> <span class="kwa">else</span> <span class="sym">{
</span>            <span class="kwa">return new</span> TreeNode<span class="sym">(</span>item<span class="sym">)
         }
      }

</span>      TreeNode<span class="sym">(</span>TreeNode left<span class="sym">,</span> TreeNode right<span class="sym">,</span> <span class="kwb">int</span> item<span class="sym">){
</span>         <span class="kwa">this</span><span class="sym">.</span>left <span class="sym">=</span> left
         <span class="kwa">this</span><span class="sym">.</span>right <span class="sym">=</span> right
         <span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item
      <span class="sym">}

</span>      <span class="kwc">private</span> <span class="kwb">int</span> itemCheck<span class="sym">(){
</span>         <span class="slc">// if necessary deallocate here
</span>         <span class="kwa">if</span> <span class="sym">(</span>left<span class="sym">==</span>null<span class="sym">)</span> <span class="kwa">return</span> item
         <span class="kwa">else return</span> item <span class="sym">+</span> left<span class="sym">.</span>itemCheck<span class="sym">() -</span> right<span class="sym">.</span>itemCheck<span class="sym">()
      }
}

</span>def n <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ? <span class="num">10</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>toInteger<span class="sym">()
</span>def minDepth <span class="sym">=</span> <span class="num">4
</span>def maxDepth <span class="sym">= [</span> minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">].</span>max<span class="sym">()
</span>def stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1

</span>def check <span class="sym">= (</span>TreeNode<span class="sym">.</span>bottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>stretchDepth<span class="sym">)).</span>itemCheck<span class="sym">()
</span>println <span class="str">&quot;stretch tree of depth ${stretchDepth}</span><span class="esc">\t  </span>  <span class="str">check: ${check}&quot;</span>

def longLivedTree <span class="sym">=</span> TreeNode<span class="sym">.</span>bottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">)

</span>def depth<span class="sym">=</span>minDepth
<span class="kwa">while</span> <span class="sym">(</span>depth<span class="sym">&lt;=</span>maxDepth<span class="sym">) {
</span>	def iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">)

</span>	check <span class="sym">=</span> <span class="num">0
</span>    <span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">1</span><span class="sym">..</span>iterations<span class="sym">) {
</span>		check <span class="sym">+= (</span>TreeNode<span class="sym">.</span>bottomUpTree<span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">)).</span>itemCheck<span class="sym">()
</span>        check <span class="sym">+= (</span>TreeNode<span class="sym">.</span>bottomUpTree<span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">)).</span>itemCheck<span class="sym">()
    }

</span>    println <span class="str">&quot;${iterations*2}</span><span class="esc">\t  </span>  <span class="str">trees of depth ${depth}</span><span class="esc">\t  </span>  <span class="str">check: ${check}&quot;</span>

	depth<span class="sym">+=</span><span class="num">2
</span><span class="sym">}

</span>println <span class="str">&quot;long lived tree of depth ${maxDepth}</span><span class="esc">\t  </span>  <span class="str">check: ${longLivedTree.itemCheck()}&quot;</span>

<span class="slc">// EOF</span>
