<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: mandelbrot-groovy.code,v 1.1 2005-09-21 05:17:34 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
	modified by

	Each program should plot the Mandelbrot set [-1.5-i,0.5+i] on an N-by-N
	bitmap. Write output byte-by-byte in portable bitmap format.

	Correct output N = 200 is in this 5KB output file.

	For more information see Eric W. Weisstein, &quot;Mandelbrot Set.&quot; From
	MathWorld--A Wolfram Web Resource.
	http://mathworld.wolfram.com/MandelbrotSet.html

	Thanks to Greg Buchholz for this benchmark.
*/</span>

<span class="kwb">int</span> bit_num <span class="sym">=</span> byte_acc <span class="sym">=</span> <span class="num">0
</span><span class="kwb">int</span> iter <span class="sym">=</span> <span class="num">50
</span><span class="kwb">double</span> limit <span class="sym">=</span> <span class="num">2.0

</span><span class="kwb">int</span> h <span class="sym">=</span> w <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ? <span class="num">200</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>toInteger<span class="sym">()
</span>println <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">${w} ${h}&quot;</span>
<span class="kwa">for</span> <span class="sym">(</span>y in <span class="num">0</span><span class="sym">..&lt;</span>h<span class="sym">) {
</span>    <span class="kwa">for</span> <span class="sym">(</span>x in <span class="num">0</span><span class="sym">..&lt;</span>w<span class="sym">) {
</span>        <span class="kwb">double</span> Zr <span class="sym">=</span> Zi <span class="sym">=</span> <span class="num">0.0
</span>        <span class="kwb">double</span> Cr <span class="sym">= (</span><span class="num">2.0</span><span class="sym">*</span>x<span class="sym">/</span>w <span class="num">- 1.5</span><span class="sym">)
</span>        <span class="kwb">double</span> Ci<span class="sym">=(</span><span class="num">2.0</span><span class="sym">*</span>y<span class="sym">/</span>h <span class="num">- 1.0</span><span class="sym">)

</span>		def escape <span class="sym">=</span> <span class="kwa">false
		for</span> <span class="sym">(</span>i in <span class="num">1</span><span class="sym">..</span>iter<span class="sym">) {
</span>        	<span class="kwb">double</span> Tr <span class="sym">=</span> Zr<span class="sym">*</span>Zr <span class="sym">-</span> Zi<span class="sym">*</span>Zi <span class="sym">+</span> Cr
            <span class="kwb">double</span> Ti <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci
            Zr <span class="sym">=</span> Tr
			Zi <span class="sym">=</span> Ti
            <span class="kwa">if</span> <span class="sym">(</span>Zr<span class="sym">*</span>Zr<span class="sym">+</span>Zi<span class="sym">*</span>Zi <span class="sym">&gt;</span> limit<span class="sym">*</span>limit<span class="sym">) {
</span>				escape <span class="sym">=</span> <span class="kwa">true
				break
</span>			<span class="sym">}
        }

</span>        byte_acc <span class="sym">= (</span>byte_acc <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">) | (</span>escape ? <span class="num">0x00</span> <span class="sym">:</span> <span class="num">0x01</span><span class="sym">)
</span>        bit_num<span class="sym">++

</span>        <span class="kwa">if</span> <span class="sym">(</span>bit_num <span class="sym">==</span> <span class="num">8</span><span class="sym">) {
</span>            print<span class="sym">((</span><span class="kwb">char</span><span class="sym">)</span> byte_acc<span class="sym">)
</span>            byte_acc <span class="sym">=</span> <span class="num">0
</span>            bit_num <span class="sym">=</span> <span class="num">0
</span>        <span class="sym">}</span> <span class="kwa">else if</span> <span class="sym">(</span>x <span class="sym">==</span> w<span class="num">-1</span><span class="sym">) {
</span>            byte_acc <span class="sym">=</span> byte_acc <span class="sym">&lt;&lt; (</span><span class="num">8</span><span class="sym">-</span>w<span class="sym">%</span><span class="num">8</span><span class="sym">)
</span>            print<span class="sym">((</span><span class="kwb">char</span><span class="sym">)</span> byte_acc<span class="sym">)
</span>            byte_acc <span class="sym">=</span> <span class="num">0
</span>            bit_num <span class="sym">=</span> <span class="num">0
</span>        <span class="sym">}
    }
}

</span><span class="slc">// EOF
</span>
