<span class="dir">#!/usr/bin/env groovy
</span><span class="com">/*
	$Id: ackermann-groovy.code,v 1.2 2005-09-21 05:40:33 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
	modified by

	Ackermann

	Each program should calculate the Ackermann function using the same naïve recursive-algorithm

	A(x,y)
	  x = 0     = y+1
	  y = 0     = A(x-1,1)
 	  otherwise = A(x-1, A(x,y-1))


 	  Calculate A(3,N). Correct output N = 4 is:

 	  A(3,4): 125


 	  The Ackermann benchmark is described in Timing Trials, or, the Trials of Timing: Experiments with Scripting and User-Interface Languages.

 	  For more information see Eric W. Weisstein, &quot;Ackermann Function.&quot; From MathWorld--A Wolfram Web Resource.
 	  http://mathworld.wolfram.com/AckermannFunction.html
*/</span>

def A<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) {
</span>	<span class="slc">// TODO: return statement is stated optional, but does not work w/o
</span>	<span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> y<span class="sym">+</span><span class="num">1
</span>	<span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> A<span class="sym">(</span>x<span class="num">-1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span>	<span class="kwa">return</span> A<span class="sym">(</span>x<span class="num">-1</span><span class="sym">,</span> A<span class="sym">(</span>x<span class="sym">,</span> y<span class="num">-1</span><span class="sym">))
}

</span>def n <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>toInteger<span class="sym">()
</span>def result <span class="sym">=</span> A<span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">)
</span>println<span class="sym">(</span><span class="str">&quot;A(3, ${n}): ${result}&quot;</span><span class="sym">)
</span>
