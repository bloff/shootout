<span class="slc">#!/usr/bin/tclsh</span>
<span class="slc"># $Id: sieve-tcl.code,v 1.5 2005-11-06 23:11:40 bfulgham Exp $</span>
<span class="slc"># http://www.bagley.org/~doug/shootout/</span>
<span class="slc"># with help from: Kristoffer Lawson</span>

<span class="kwa">proc</span> sieve <span class="sym">{</span>num<span class="sym">} {</span>
    <span class="kwa">while</span> <span class="sym">{</span><span class="kwb">$num</span> <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">} {</span>
	<span class="kwa">incr</span> num <span class="sym">-</span><span class="num">1</span>
	<span class="kwa">set</span> count <span class="num">0</span>
	<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">2</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">} {</span><span class="kwa">incr</span> i <span class="num">1</span><span class="sym">} {</span>
	    <span class="kwa">set</span> flags<span class="sym">(</span><span class="kwb">$i</span><span class="sym">)</span> <span class="num">1</span>
	<span class="sym">}</span>
	<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">2</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">} {</span><span class="kwa">incr</span> i <span class="num">1</span><span class="sym">} {</span>
	    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$flags</span><span class="sym">(</span><span class="kwb">$i</span><span class="sym">) ==</span> <span class="num">1</span><span class="sym">} {</span>
		<span class="slc"># remove all multiples of prime: i</span>
		<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> k <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$i</span><span class="sym">+</span><span class="kwb">$i</span><span class="sym">}]} {</span><span class="kwb">$k</span> <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">} {</span><span class="kwa">incr</span> k <span class="kwb">$i</span><span class="sym">} {</span>
		    <span class="kwa">set</span> flags<span class="sym">(</span><span class="kwb">$k</span><span class="sym">)</span> <span class="num">0</span>
		<span class="sym">}</span>
		<span class="kwa">incr</span> count <span class="num">1</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="kwb">$count</span>
<span class="sym">}</span>

<span class="kwa">set</span> NUM <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]</span>
<span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$NUM</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">} {</span>
    <span class="kwa">set</span> NUM <span class="num">1</span>
<span class="sym">}</span>

<span class="kwa">set</span> count <span class="sym">[</span>sieve <span class="kwb">$NUM</span><span class="sym">]</span>
<span class="kwa">puts</span> <span class="str">&quot;Count: $count&quot;</span>
