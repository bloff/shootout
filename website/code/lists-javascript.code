<span class="slc">// The Great Computer Language Shootout
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">//
</span><span class="slc">// contributed by David Hedbor
</span><span class="slc">// modified by Isaac Gouy
</span>
<span class="kwa">var</span> SIZE <span class="sym">=</span> <span class="num">10000</span><span class="sym">;

</span><span class="kwa">function</span> test_lists<span class="sym">()
{
</span>  <span class="kwa">var</span> Li1<span class="sym">,</span> Li2<span class="sym">,</span> Li3<span class="sym">;
</span>  <span class="kwa">var</span> tmp<span class="sym">;
</span>  <span class="slc">// create a list of integers from 1 to SIZE.
</span>  Li1 <span class="sym">=</span> <span class="kwa">new</span> Array<span class="sym">();
</span>  <span class="kwa">for</span><span class="sym">(</span>tmp <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> tmp <span class="sym">&lt;=</span> SIZE<span class="sym">;</span> tmp<span class="sym">++)</span> Li1.push<span class="sym">(</span>tmp<span class="sym">);
</span>  <span class="slc">// copy the list to Li2.
</span>  Li2 <span class="sym">=</span> Li1.concat<span class="sym">();

</span>  <span class="slc">// remove each element from left side of Li2 and append to
</span>  <span class="slc">// the right side of Li3 (preserving order)
</span>  Li3 <span class="sym">=</span> <span class="kwa">new</span> Array<span class="sym">();

</span>  <span class="kwa">while</span><span class="sym">( (</span>tmp <span class="sym">=</span> Li2.shift<span class="sym">()) ) {
</span>    Li3.push<span class="sym">(</span>tmp<span class="sym">);
  }

</span>  <span class="slc">// Li2 is now empty.
</span>  <span class="slc">// Remove each element from right side of Li3 and append to right
</span>  <span class="slc">// side of Li2
</span>  <span class="kwa">while</span><span class="sym">( (</span>tmp <span class="sym">=</span> Li3.pop<span class="sym">()) ) {
</span>    Li2.push<span class="sym">(</span>tmp<span class="sym">);
  }

</span>  <span class="slc">// Li2 is now reversed, and Li3 empty.
</span>  <span class="slc">// Reverse Li1 in place.
</span>  Li1.reverse<span class="sym">();
</span>  <span class="kwa">if</span><span class="sym">(</span> Li1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> SIZE <span class="sym">)</span> <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span>  <span class="slc">// compare Li1 and Li2 for equality, and return the length of the list.
</span>  <span class="kwa">for</span><span class="sym">(</span>tmp <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> tmp <span class="sym">&lt;</span> SIZE<span class="sym">;</span> tmp<span class="sym">++)
</span>    <span class="kwa">if</span><span class="sym">(</span> Li1<span class="sym">[</span>tmp<span class="sym">] !=</span> Li2<span class="sym">[</span>tmp<span class="sym">] )</span> <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">return</span> Li1.length<span class="sym">;
}

</span><span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="kwa">var</span> resultl

<span class="kwa">while</span><span class="sym">(</span> n<span class="sym">-- )
</span>  result <span class="sym">=</span> test_lists<span class="sym">();

</span>print<span class="sym">(</span>result <span class="sym">);</span>
