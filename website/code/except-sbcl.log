BUILD COMMANDS FOR: except.sbcl

Fri Nov 26 17:28:32 PST 2004

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "except.sbcl_compile")'
### START except.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "except.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END except.sbcl_compile

; compiling file "/opt/shootout/shootout/bench/except/tmp/except.cmucl" (written 26 NOV 2004 05:28:32 PM):
; compiling top level form: 
; compiling top level form: 
; recognizing DEFUN SOME-FUN
; compiling DEFUN SOME-FUN: 
; compiling top level form: 
; recognizing DEFUN HI-FUN
; compiling DEFUN HI-FUN: 
; compiling top level form: 
; recognizing DEFUN LO-FUN
; compiling DEFUN LO-FUN: 
; compiling top level form: 
; recognizing DEFUN BLOW-UP
; compiling DEFUN BLOW-UP: 

; file: /opt/shootout/shootout/bench/except/tmp/except.cmucl
; in: DEFUN BLOW-UP
;     (1+ *HI*)
; ==>
;   (+ *HI* 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (1+ *LO*)
; ==>
;   (+ *LO* 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (EVENP N)
; --> ZEROP = 
; ==>
;   (LOGAND N 1)
; 
; note: forced to do static-fun Two-arg-and (cost 53)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (1+ *LO*)
; ==>
;   (+ *LO* 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (1+ *HI*)
; ==>
;   (+ *HI* 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling top level form: 
; recognizing DEFUN MAIN
; compiling DEFUN MAIN: 

; file: /opt/shootout/shootout/bench/except/tmp/except.cmucl
; in: DEFUN MAIN
;     (= I N)
; --> EQL IF EQL EQL IF 
; ==>
;   (EQL SB-C::Y SB-C::X)
; 
; note: forced to do GENERIC-EQL (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The second argument is a UNSIGNED-BYTE, not a FIXNUM.

;     (1+ I)
; ==>
;   (+ I 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1)
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1)
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling top level form: 
; compilation unit finished
;   printed 11 notes

; /opt/shootout/shootout/bench/except/tmp/except.fasl written
; compilation finished in 0:00:00
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/except/tmp/sbcl.core:
writing 18048904 bytes from the read-only space at 0x01000000
writing 5877120 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START except.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END except.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load except.sbcl_run %A


PROGRAM OUTPUT
==============
Exceptions: HI=125000 / LO=125000
