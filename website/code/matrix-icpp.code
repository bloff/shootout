<span class="slc">// -*- mode: c++ -*-
</span><span class="slc">// $Id: matrix-icpp.code,v 1.6 2005-10-07 05:43:38 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org/
</span>
<span class="dir">#include &lt;iostream&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span>
<span class="kwa">using namespace</span> std<span class="sym">;

</span><span class="dir">#define SIZE 30
</span><span class="kwc">typedef</span> <span class="kwb">int</span><span class="sym">*</span> int_ptr<span class="sym">;

</span><span class="kwb">int</span> <span class="sym">**</span>mkmatrix<span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">) {
</span>    <span class="kwb">int</span> j<span class="sym">,</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwb">int</span> <span class="sym">**</span>m <span class="sym">=</span> <span class="kwa">new</span> int_ptr <span class="sym">[</span>rows<span class="sym">];
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++) {
</span>	m<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span> cols <span class="sym">];
</span>	<span class="kwa">for</span> <span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++) {
</span>	    m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> count<span class="sym">++;
	}
    }
</span>    <span class="kwa">return</span><span class="sym">(</span>m<span class="sym">);
}

</span><span class="kwb">void</span> zeromatrix<span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m<span class="sym">) {
</span>    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++)
</span>	<span class="kwa">for</span> <span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++)
</span>	    m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
}

</span><span class="kwb">void</span> freematrix<span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m<span class="sym">) {
</span>    <span class="kwa">while</span> <span class="sym">(--</span>rows <span class="sym">&gt; -</span><span class="num">1</span><span class="sym">) {</span> <span class="kwa">delete</span><span class="sym">[]</span> m<span class="sym">[</span>rows<span class="sym">]; }
</span>    <span class="kwa">delete</span><span class="sym">[]</span> m<span class="sym">;
}

</span><span class="kwb">int</span> <span class="sym">**</span>mmult<span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m1<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m2<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m3<span class="sym">) {
</span>    <span class="kwb">int</span> j<span class="sym">,</span>k<span class="sym">,</span>val<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++) {
</span>	<span class="kwa">for</span> <span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++) {
</span>	    val <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	    <span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> k<span class="sym">&lt;</span>cols<span class="sym">;</span> k<span class="sym">++) {
</span>		val <span class="sym">+=</span> m1<span class="sym">[</span>i<span class="sym">][</span>k<span class="sym">] *</span> m2<span class="sym">[</span>k<span class="sym">][</span>j<span class="sym">];
	    }
</span>	    m3<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> val<span class="sym">;
	}
    }
</span>    <span class="kwa">return</span><span class="sym">(</span>m3<span class="sym">);
}

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);

</span>    <span class="kwb">int</span> <span class="sym">**</span>m1 <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);
</span>    <span class="kwb">int</span> <span class="sym">**</span>m2 <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);
</span>    <span class="kwb">int</span> <span class="sym">**</span>mm <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);

</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	mm <span class="sym">=</span> mmult<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);
    }
</span>    cout <span class="sym">&lt;&lt;</span> mm<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> mm<span class="sym">[</span><span class="num">2</span><span class="sym">][</span><span class="num">3</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> mm<span class="sym">[</span><span class="num">3</span><span class="sym">][</span><span class="num">2</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> mm<span class="sym">[</span><span class="num">4</span><span class="sym">][</span><span class="num">4</span><span class="sym">] &lt;&lt;</span> endl<span class="sym">;

</span>    freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> m1<span class="sym">);
</span>    freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> m2<span class="sym">);
</span>    freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> mm<span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}</span>
