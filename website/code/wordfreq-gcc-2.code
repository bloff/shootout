<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: wordfreq-gcc-2.code,v 1.10 2006-06-08 12:23:59 bfulgham Exp $</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * Changed by Adrian Merrill 2001/08/22</span>
<span class="com"> * Changed by Adrian Merrill 2001/09/21</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;ctype.h&gt;</span>
<span class="dir">#include &lt;malloc.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include</span> <span class="dstr">&quot;../../Include/simple_hash2.h&quot;</span><span class="dir"></span>
<span class="slc">//#include &quot;../../Include/simple_hash.h&quot;</span>

<span class="dir">#define QUICKIE_STRCMP(a, b)  (*(a) != *(b) ? *(a) - *(b) : strcmp((a), (b)))</span>

<span class="kwc">typedef</span> <span class="kwb">int</span> <span class="sym">(*</span>comparator<span class="sym">)(</span><span class="kwb">const void</span> <span class="sym">*,</span> <span class="kwb">const void</span> <span class="sym">*);</span>

<span class="kwb">static int</span> <span class="kwd">cmp_hash</span><span class="sym">(</span><span class="kwb">struct</span> ht_node <span class="sym">**</span>a<span class="sym">,</span> <span class="kwb">struct</span> ht_node <span class="sym">**</span>b<span class="sym">) {</span>
    <span class="kwb">int</span> val <span class="sym">= (*</span>b<span class="sym">)-&gt;</span>val <span class="sym">- (*</span>a<span class="sym">)-&gt;</span>val<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">((</span>val <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ? <span class="kwd">QUICKIE_STRCMP</span><span class="sym">((*</span>b<span class="sym">)-&gt;</span>key<span class="sym">, (*</span>a<span class="sym">)-&gt;</span>key<span class="sym">) :</span> val<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">() {</span>
    <span class="kwb">unsigned long</span>  hash_code<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> readbufsize <span class="sym">=</span> <span class="num">4096</span><span class="sym">;</span>
    <span class="kwb">int</span> wordbufsize<span class="sym">=</span><span class="num">16</span><span class="sym">;</span>
    <span class="kwb">char</span> <span class="sym">*</span>readbuf <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">*)</span><span class="kwd">malloc</span><span class="sym">(</span>readbufsize <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwb">char</span> <span class="sym">*</span>wordbuf <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">*)</span><span class="kwd">malloc</span><span class="sym">(</span>wordbufsize <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">struct</span> ht_ht <span class="sym">*</span>ht <span class="sym">=</span> <span class="kwd">ht_create</span><span class="sym">(</span><span class="num">2048</span><span class="sym">);</span>
    <span class="kwb">struct</span> ht_node <span class="sym">**</span>sort_array<span class="sym">, **</span>sort_tmp<span class="sym">, *</span>node<span class="sym">;</span>
    <span class="com">/*new code*/</span>
    <span class="kwb">int</span> nread <span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> wordlen<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    readbuf<span class="sym">[</span><span class="num">0</span><span class="sym">]=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>readbuf<span class="sym">[</span>i<span class="sym">] &gt;</span> <span class="num">0</span> <span class="sym">||</span>
	   <span class="sym">(</span>nread <span class="sym">=</span> <span class="kwd">fread</span><span class="sym">(</span>readbuf<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">),</span> readbufsize<span class="sym">,</span> stdin<span class="sym">),</span>
	    readbuf<span class="sym">[</span>nread<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>nread <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) ) {</span>
	<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">isalpha</span><span class="sym">(</span>readbuf<span class="sym">[</span>i<span class="sym">])){</span>
	    wordbuf<span class="sym">[</span>wordlen<span class="sym">] =</span> <span class="kwd">tolower</span><span class="sym">(</span>readbuf<span class="sym">[</span>i<span class="sym">]);</span>
	    <span class="com">/*calculate the hash code byte by byte, to prevent looping through the word twice */</span>
	    <span class="kwd">HASHCODE_BYTE</span><span class="sym">(</span>hash_code<span class="sym">,</span>wordbuf<span class="sym">[</span>wordlen<span class="sym">++]);</span>
	    <span class="kwa">if</span> <span class="sym">(</span>wordlen <span class="sym">==</span> wordbufsize<span class="sym">) {</span>
		wordbufsize <span class="sym">*=</span> <span class="num">2</span><span class="sym">;</span>
		wordbuf <span class="sym">=</span> <span class="kwd">realloc</span><span class="sym">(</span>wordbuf<span class="sym">,</span> wordbufsize <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
	<span class="kwa">else</span><span class="sym">{</span>
	    <span class="kwa">if</span> <span class="sym">(</span>wordlen <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
		wordbuf<span class="sym">[</span>wordlen<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;</span>
		hash_code<span class="sym">=</span><span class="kwd">HASHCODE_FINALIZE</span><span class="sym">(</span>hash_code<span class="sym">,</span>ht<span class="sym">);</span>
		<span class="sym">++(</span><span class="kwd">ht_find_new_prehashed</span><span class="sym">(</span>ht<span class="sym">,</span> wordbuf<span class="sym">,</span>hash_code<span class="sym">)-&gt;</span>val<span class="sym">);</span>
		wordlen <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		hash_code<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
	i<span class="sym">++;</span>
    <span class="sym">}</span>
    <span class="kwd">free</span><span class="sym">(</span>readbuf<span class="sym">);</span>
    <span class="kwd">free</span><span class="sym">(</span>wordbuf<span class="sym">);</span>
    sort_array <span class="sym">=</span> sort_tmp <span class="sym">=</span>
	<span class="kwd">malloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">struct</span> ht_node <span class="sym">*) *</span> <span class="kwd">ht_count</span><span class="sym">(</span>ht<span class="sym">));</span>

    <span class="kwa">for</span> <span class="sym">(</span>node<span class="sym">=</span><span class="kwd">ht_first</span><span class="sym">(</span>ht<span class="sym">); (*</span>sort_tmp<span class="sym">++ =</span> node<span class="sym">) !=</span> <span class="num">0</span><span class="sym">;</span> node<span class="sym">=</span><span class="kwd">ht_next</span><span class="sym">(</span>ht<span class="sym">)) ;</span>

    <span class="kwd">qsort</span><span class="sym">(</span>sort_array<span class="sym">,</span> <span class="kwd">ht_count</span><span class="sym">(</span>ht<span class="sym">),</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">struct</span> ht_node <span class="sym">*),</span>
	  <span class="sym">(</span>comparator<span class="sym">)</span>cmp_hash<span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="kwd">ht_count</span><span class="sym">(</span>ht<span class="sym">);</span> i<span class="sym">++)</span>
	<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%7d %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">ht_val</span><span class="sym">(</span>sort_array<span class="sym">[</span>i<span class="sym">]),</span> <span class="kwd">ht_key</span><span class="sym">(</span>sort_array<span class="sym">[</span>i<span class="sym">]));</span>

    <span class="kwd">ht_destroy</span><span class="sym">(</span>ht<span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
