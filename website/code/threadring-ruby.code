<span class="slc">#</span>
<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># contributed by Klaus Friedel</span>
<span class="slc">#</span>

require <span class="str">&quot;thread&quot;</span>

THREAD_COUNT = <span class="num">503</span>

<span class="kwa">class</span> Receiver
  &#64;<span class="kwa">next</span>
  &#64;mailbox

  <span class="kwa">def</span> <span class="kwd">initialize</span><span class="sym">(</span>name)
    &#64;name = name
    &#64;mailbox = Queue<span class="sym">.</span>new
  <span class="kwa">end</span>

  <span class="kwa">def next</span>=<span class="sym">(</span>n)
    &#64;<span class="kwa">next</span> = n
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">put</span><span class="sym">(</span>msg)
    &#64;mailbox<span class="sym">.</span><span class="kwd">push</span><span class="sym">(</span>msg)
  <span class="kwa">end</span>

  <span class="kwa">def</span> messageloop
    <span class="kwa">while true</span>
      hopsRemaining = &#64;mailbox<span class="sym">.</span>pop
      <span class="kwa">if</span><span class="sym">(</span>hopsRemaining == <span class="num">0</span>)
        print &#64;name<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">0</span>)
      <span class="kwa">end</span>
      &#64;<span class="kwa">next</span><span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span>hopsRemaining <span class="sym">-</span> <span class="num">1</span>)
    <span class="kwa">end</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">##########</span>
<span class="slc">#  Main  #</span>
<span class="slc">##########</span>
receivers = <span class="sym">[]</span>
<span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>THREAD_COUNT-1
  receivers<span class="sym">[</span>i<span class="sym">]</span> = Receiver<span class="sym">.</span><span class="kwd">new</span><span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span>)
  <span class="kwa">if</span><span class="sym">(</span>i <span class="sym">&gt;</span> <span class="num">0</span>)
    receivers<span class="sym">[</span>i-1<span class="sym">].</span><span class="kwa">next</span> = receivers<span class="sym">[</span>i<span class="sym">]</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>
<span class="slc">#close the ring</span>
receivers<span class="sym">[</span>THREAD_COUNT-1<span class="sym">].</span><span class="kwa">next</span> = receivers<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>

<span class="slc"># start the threads</span>
<span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>THREAD_COUNT-1
  Thread<span class="sym">.</span><span class="kwd">start</span><span class="sym">(</span>i)<span class="sym">{|</span>k<span class="sym">|</span> receivers<span class="sym">[</span>k<span class="sym">].</span>messageloop<span class="sym">}</span>
<span class="kwa">end</span>

receivers<span class="sym">[</span><span class="num">0</span><span class="sym">].</span><span class="kwd">put</span><span class="sym">(</span><span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">].</span>to_i)

sleep

