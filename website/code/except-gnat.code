<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: except-gnat.code,v 1.2 2004-11-08 08:15:13 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://dada.perl.it/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- Ada 95 code by C.C.
</FONT></I>
<B><FONT COLOR="#A020F0">with</FONT></B> Text_IO, Ada.Strings.Fixed, Ada.Command_Line;

<B><FONT COLOR="#A020F0">procedure</FONT></B> Except <B><FONT COLOR="#A020F0">is</FONT></B>
   High_Exception : <B><FONT COLOR="#A020F0">exception</FONT></B>;
   Low_Exception  : <B><FONT COLOR="#A020F0">exception</FONT></B>;
   Low            : Integer := 0;
   High           : Integer := 0;

   <B><FONT COLOR="#A020F0">procedure</FONT></B> Blowup (K : Integer) <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Inline (Blowup);
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      <B><FONT COLOR="#A020F0">case</FONT></B> 1 = (K <B><FONT COLOR="#A020F0">mod</FONT></B> 2) <B><FONT COLOR="#A020F0">is</FONT></B>
         <B><FONT COLOR="#A020F0">when</FONT></B> False =&gt; <B><FONT COLOR="#A020F0">raise</FONT></B> High_Exception;
         <B><FONT COLOR="#A020F0">when</FONT></B> True  =&gt; <B><FONT COLOR="#A020F0">raise</FONT></B> Low_Exception;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">case</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B> Blowup;

   <B><FONT COLOR="#A020F0">procedure</FONT></B> Low_Function (K : Integer) <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Inline (Low_Function);
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      Blowup (K);
   <B><FONT COLOR="#A020F0">exception</FONT></B>
      <B><FONT COLOR="#A020F0">when</FONT></B> Low_Exception =&gt; Low := Low + 1;
   <B><FONT COLOR="#A020F0">end</FONT></B> Low_Function;

   <B><FONT COLOR="#A020F0">procedure</FONT></B> High_Function (K : Integer) <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Inline (High_Function);
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      Low_Function (K);
   <B><FONT COLOR="#A020F0">exception</FONT></B>
      <B><FONT COLOR="#A020F0">when</FONT></B> High_Exception =&gt; High := High + 1;
   <B><FONT COLOR="#A020F0">end</FONT></B> High_Function;

   <B><FONT COLOR="#A020F0">procedure</FONT></B> Some_Function (K : Integer) <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">pragma</FONT></B> Inline (Some_Function);
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      High_Function (K);
   <B><FONT COLOR="#A020F0">exception</FONT></B>
      <B><FONT COLOR="#A020F0">when</FONT></B> <B><FONT COLOR="#A020F0">others</FONT></B> =&gt; Text_IO.Put_Line (<B><FONT COLOR="#BC8F8F">&quot;We shouldn't get here&quot;</FONT></B>);
   <B><FONT COLOR="#A020F0">end</FONT></B> Some_Function;

   <B><FONT COLOR="#A020F0">function</FONT></B> L_Trim (Source : String; Side : Ada.Strings.Trim_End :=
               Ada.Strings.Left) <B><FONT COLOR="#A020F0">return</FONT></B> String <B><FONT COLOR="#A020F0">renames</FONT></B> Ada.Strings.Fixed.Trim;
   N        : Natural := 0;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      N := Natural'Value (Ada.Command_Line.Argument (1));
   <B><FONT COLOR="#A020F0">exception</FONT></B>
      <B><FONT COLOR="#A020F0">when</FONT></B> Constraint_Error =&gt; <B><FONT COLOR="#A020F0">null</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B>;
   <B><FONT COLOR="#A020F0">for</FONT></B> K <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">reverse</FONT></B> 0 .. N - 1 <B><FONT COLOR="#A020F0">loop</FONT></B>
      Some_Function (K);
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   Text_IO.Put_Line (<B><FONT COLOR="#BC8F8F">&quot;Exceptions: HI=&quot;</FONT></B> &amp; L_Trim (Natural'Image (High)) &amp;
            <B><FONT COLOR="#BC8F8F">&quot; / LO=&quot;</FONT></B> &amp; L_Trim (Natural'Image (Low)));
<B><FONT COLOR="#A020F0">end</FONT></B> Except;</pre></td></tr></table>
