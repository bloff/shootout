<span class="slc">-- $Id: except-gnat.code,v 1.15 2006-09-30 16:39:14 bfulgham Exp $</span>
<span class="slc">-- http://dada.perl.it/shootout/</span>
<span class="slc">-- Ada 95 code by C.C.</span>

<span class="kwa">with</span> Text_IO<span class="sym">,</span> Ada.Strings.Fixed<span class="sym">,</span> Ada.Command_Line<span class="sym">;</span>

<span class="kwa">procedure</span> Except <span class="kwa">is</span>
   High_Exception <span class="sym">:</span> <span class="kwa">exception</span><span class="sym">;</span>
   Low_Exception  <span class="sym">:</span> <span class="kwa">exception</span><span class="sym">;</span>
   Low            <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   High           <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>

   <span class="kwa">procedure</span> Blowup <span class="sym">(</span>K <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Blowup<span class="sym">);</span>
   <span class="kwa">begin</span>
      <span class="kwa">case</span> <span class="num">1</span> <span class="sym">= (</span>K <span class="kwa">mod</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">is</span>
         <span class="kwa">when</span> False <span class="sym">=&gt;</span> <span class="kwa">raise</span> High_Exception<span class="sym">;</span>
         <span class="kwa">when</span> True  <span class="sym">=&gt;</span> <span class="kwa">raise</span> Low_Exception<span class="sym">;</span>
      <span class="kwa">end case</span><span class="sym">;</span>
   <span class="kwa">end</span> Blowup<span class="sym">;</span>

   <span class="kwa">procedure</span> Low_Function <span class="sym">(</span>K <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Low_Function<span class="sym">);</span>
   <span class="kwa">begin</span>
      Blowup <span class="sym">(</span>K<span class="sym">);</span>
   <span class="kwa">exception</span>
      <span class="kwa">when</span> Low_Exception <span class="sym">=&gt;</span> Low <span class="sym">:=</span> Low <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">end</span> Low_Function<span class="sym">;</span>

   <span class="kwa">procedure</span> High_Function <span class="sym">(</span>K <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>High_Function<span class="sym">);</span>
   <span class="kwa">begin</span>
      Low_Function <span class="sym">(</span>K<span class="sym">);</span>
   <span class="kwa">exception</span>
      <span class="kwa">when</span> High_Exception <span class="sym">=&gt;</span> High <span class="sym">:=</span> High <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">end</span> High_Function<span class="sym">;</span>

   <span class="kwa">procedure</span> Some_Function <span class="sym">(</span>K <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Some_Function<span class="sym">);</span>
   <span class="kwa">begin</span>
      High_Function <span class="sym">(</span>K<span class="sym">);</span>
   <span class="kwa">exception</span>
      <span class="kwa">when others</span> <span class="sym">=&gt;</span> Text_IO.Put_Line <span class="sym">(</span><span class="str">&quot;We shouldn't get here&quot;</span><span class="sym">);</span>
   <span class="kwa">end</span> Some_Function<span class="sym">;</span>

   <span class="kwa">function</span> L_Trim <span class="sym">(</span>Source <span class="sym">:</span> <span class="kwb">String</span><span class="sym">;</span> Side <span class="sym">:</span> Ada.Strings.Trim_End <span class="sym">:=</span>
               Ada.Strings.Left<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">String</span> <span class="kwa">renames</span> Ada.Strings.Fixed.Trim<span class="sym">;</span>
   N        <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">begin</span>
      N <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));</span>
   <span class="kwa">exception</span>
      <span class="kwa">when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;</span>
   <span class="kwa">end</span><span class="sym">;</span>
   <span class="kwa">for</span> K <span class="kwa">in reverse</span> <span class="num">0</span> .. N <span class="sym">-</span> <span class="num">1</span> <span class="kwa">loop</span>
      Some_Function <span class="sym">(</span>K<span class="sym">);</span>
   <span class="kwa">end loop</span><span class="sym">;</span>
   Text_IO.Put_Line <span class="sym">(</span><span class="str">&quot;Exceptions: HI=&quot;</span> <span class="sym">&amp;</span> L_Trim <span class="sym">(</span><span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>High<span class="sym">)) &amp;</span>
            <span class="str">&quot; / LO=&quot;</span> <span class="sym">&amp;</span> L_Trim <span class="sym">(</span><span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>Low<span class="sym">)));</span>
<span class="kwa">end</span> Except<span class="sym">;</span>
