<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp
<span class="line">    2 </span>
<span class="line">    3 </span># <span class="kwa">list</span> <span class="sym">-</span> benchmark
<span class="line">    4 </span>#
<span class="line">    5 </span># Contributed by Lutz Mueller
<span class="line">    6 </span>
<span class="line">    7 </span><span class="sym">(</span><span class="kwa">set</span> <span class="str">'SIZE 10000)
</span><span class="line">    8 </span><span class="str">
</span><span class="line">    9 </span><span class="str">(define (test-lists)
</span><span class="line">   10 </span><span class="str">        (set '</span>Li1  <span class="sym">(</span>sequence <span class="num">1</span> SIZE<span class="sym">))
</span><span class="line">   11 </span><span class="sym">        (</span><span class="kwa">set</span> <span class="str">'Li2 Li1)
</span><span class="line">   12 </span><span class="str">        (set '</span>Li3 <span class="str">'())
</span><span class="line">   13 </span><span class="str">
</span><span class="line">   14 </span><span class="str">        ; remove each item from left of Li2 and build list Li3
</span><span class="line">   15 </span><span class="str">        ; push and then rerverse the list becuase Li3 should preserve order
</span><span class="line">   16 </span><span class="str">
</span><span class="line">   17 </span><span class="str">        (while Li2 (push (pop Li2) Li3))
</span><span class="line">   18 </span><span class="str">        (reverse Li3)
</span><span class="line">   19 </span><span class="str">        (while Li3 (push (pop Li3) Li2))
</span><span class="line">   20 </span><span class="str">
</span><span class="line">   21 </span><span class="str">        (reverse Li1)
</span><span class="line">   22 </span><span class="str">        (if         (!= (first Li1) SIZE) 0
</span><span class="line">   23 </span><span class="str">                (= Li1 Li2) (length Li1)
</span><span class="line">   24 </span><span class="str">                0))
</span><span class="line">   25 </span><span class="str">
</span><span class="line">   26 </span><span class="str">(set '</span>n <span class="sym">(</span>integer <span class="sym">(</span><span class="kwa">nth</span> <span class="num">2</span> <span class="sym">(</span>main<span class="sym">-</span>args<span class="sym">))))
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym">(</span>dotimes <span class="sym">(</span>i n<span class="sym">)
</span><span class="line">   29 </span><span class="sym">        (</span><span class="kwa">set</span> <span class="str">'result (test-lists)))
</span><span class="line">   30 </span><span class="str">
</span><span class="line">   31 </span><span class="str">(println result)
</span><span class="line">   32 </span><span class="str">
</span><span class="line">   33 </span><span class="str">(exit)
</span><span class="line">   34 </span><span class="str">
</span><span class="line">   35 </span><span class="str">
</span><span class="line">   36 </span><span class="str">
</span><span class="line">   37 </span><span class="str"></span>
