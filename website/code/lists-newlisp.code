#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

# <span class="kwa">list</span> <span class="sym">-</span> benchmark <span class="sym">-</span> newLISP <span class="num">8.3.0</span> <span class="kwa">or</span> later
# now mimics Python<span class="str">'s way</span>
<span class="str">#</span>
<span class="str"># Contributed by Lutz Mueller</span>
<span class="str"></span>
<span class="str">(set '</span>SIZE <span class="num">10000</span><span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>test<span class="sym">-</span>lists<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'Li1  (sequence 1 SIZE))</span>
<span class="str">	(set '</span>Li2 Li1<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'Li3 '</span><span class="sym">())</span>

	<span class="slc">; remove each item from left of Li2 and append to Li3</span>

	<span class="sym">(</span><span class="kwa">reverse</span> Li2<span class="sym">)</span>

	<span class="sym">(</span><span class="kwa">while</span> Li2 <span class="sym">(</span>push <span class="sym">(</span>pop Li2<span class="sym">)</span> Li3 <span class="sym">-</span><span class="num">1</span><span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">while</span> Li3 <span class="sym">(</span>push <span class="sym">(</span>pop Li3<span class="sym">)</span> Li2 <span class="sym">-</span><span class="num">1</span><span class="sym">))</span>

	<span class="sym">(</span><span class="kwa">reverse</span> Li1<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">if</span> 	<span class="sym">(!= (</span>first Li1<span class="sym">)</span> SIZE<span class="sym">)</span> <span class="num">0</span>
		<span class="sym">(=</span> Li1 Li2<span class="sym">) (</span><span class="kwa">length</span> Li1<span class="sym">)</span>
		<span class="num">0</span><span class="sym">))</span>

<span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))</span>
<span class="str"></span>
<span class="str">(dotimes (i n)</span>
<span class="str">	(set '</span>result <span class="sym">(</span>test<span class="sym">-</span>lists<span class="sym">)))</span>

<span class="sym">(</span>println result<span class="sym">)</span>
<span class="sym">(</span><span class="kwa">exit</span><span class="sym">)</span>

