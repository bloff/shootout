<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; $Id: div2sum-sbcl.code,v 1.1 2004-12-17 07:53:50 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; Contributed by Brent Fulgham
</span><span class="slc">;;;
</span><span class="slc">;;; Based on &quot;Performance and Evaluation of Lisp Systems&quot;
</span><span class="slc">;;;   (Richard P. Gabriel), page 186.
</span>
<span class="sym">(</span>declaim
  <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">)</span> #<span class="sym">-</span>gcl <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))

</span><span class="slc">;;; DIV2 -- Benchmark that divides by 2 using lists of n NIL's.
</span><span class="sym">(</span><span class="kwa">defun</span> create<span class="sym">-</span>n <span class="sym">(</span>n<span class="sym">)
  (</span>do <span class="sym">((</span>n n <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">))
       (</span>a <span class="sym">() (</span>push <span class="sym">()</span> a<span class="sym">)))
    ((=</span> n <span class="num">0</span><span class="sym">)</span> a<span class="sym">)))

(</span><span class="kwa">defun</span> iterative<span class="sym">-</span>div2 <span class="sym">(</span>l<span class="sym">)
  (</span>do <span class="sym">((</span>l l <span class="sym">(</span><span class="kwa">cddr</span> l<span class="sym">))
       (</span>a <span class="sym">() (</span>push <span class="sym">(</span><span class="kwa">car</span> l<span class="sym">)</span> a<span class="sym">)))
    ((</span><span class="kwa">null</span> l<span class="sym">)</span> a<span class="sym">)))

(</span><span class="kwa">defun</span> recursive<span class="sym">-</span>div2 <span class="sym">(</span>l<span class="sym">)
  (</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">null</span> l<span class="sym">) ())
	(</span>t <span class="sym">(</span><span class="kwa">cons</span> <span class="sym">(</span><span class="kwa">car</span> l<span class="sym">) (</span>recursive<span class="sym">-</span>div2 <span class="sym">(</span><span class="kwa">cddr</span> l<span class="sym">))))))

(</span><span class="kwa">defun</span> div2 <span class="sym">(</span>n lst sum<span class="sym">)
  (</span><span class="kwa">cond</span> <span class="sym">((=</span> n <span class="num">0</span><span class="sym">)</span> sum<span class="sym">)
	(</span>t <span class="sym">(</span>div2 <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">) (</span><span class="kwa">cdr</span> lst<span class="sym">)
		 (+</span> sum
		    <span class="sym">(</span><span class="kwa">length</span> <span class="sym">(</span>iterative<span class="sym">-</span>div2 lst<span class="sym">))
		    (</span><span class="kwa">length</span> <span class="sym">(</span>recursive<span class="sym">-</span>div2 lst<span class="sym">)))))))

(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span>					 #<span class="sym">+</span>cmu extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*
</span>					 #<span class="sym">+</span>gcl si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">))))
    (</span>format t <span class="str">&quot;~d~%&quot;</span> <span class="sym">(</span>div2 n <span class="sym">(</span>create<span class="sym">-</span>n <span class="num">5000</span><span class="sym">)</span> <span class="num">0</span><span class="sym">))))
</span>
