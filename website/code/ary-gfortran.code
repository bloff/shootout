<span class="slc">! -*- mode: f90 -*-</span>
<span class="slc">!</span>
<span class="slc">! $Id: ary-gfortran.code,v 1.2 2006-06-08 12:21:53 bfulgham Exp $ ; $Name:  $</span>
<span class="slc">!</span>
<span class="slc">! Array access function implementation</span>
<span class="slc">! Simon Geard, 1/12/04</span>
<span class="slc">!</span>
<span class="slc">! Building info.</span>
<span class="slc">! ==============</span>
<span class="slc">!</span>
<span class="slc">! Linux  - using the Intel Fortran90 compiler:</span>
<span class="slc">!</span>
<span class="slc">!          ifort array.f90 -O3 -static-libcxa -o array</span>
<span class="slc">!</span>
program array
  implicit none
  integer result<span class="sym">,</span> num<span class="sym">,</span> i<span class="sym">,</span> k
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> argv
  integer<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> x<span class="sym">,</span> y

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)</span>
  read<span class="sym">(</span>argv<span class="sym">,</span><span class="str">'(I4)'</span><span class="sym">)</span> num

  allocate<span class="sym">(</span>x<span class="sym">(</span><span class="num">0</span><span class="sym">:</span>num<span class="sym">-</span><span class="num">1</span><span class="sym">))</span>
  allocate<span class="sym">(</span>y<span class="sym">(</span><span class="num">0</span><span class="sym">:</span>num<span class="sym">-</span><span class="num">1</span><span class="sym">))</span>

  x <span class="sym">= (/ (</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>num<span class="sym">-</span><span class="num">1</span><span class="sym">) /)</span>
  y <span class="sym">= (/ (</span><span class="num">0</span><span class="sym">,</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>num<span class="sym">-</span><span class="num">1</span><span class="sym">) /)</span>

  do k<span class="sym">=</span><span class="num">0</span><span class="sym">,</span><span class="num">999</span>
     do i<span class="sym">=</span>num<span class="sym">-</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,-</span><span class="num">1</span>
        y<span class="sym">(</span>i<span class="sym">) =</span> y<span class="sym">(</span>i<span class="sym">) +</span> x<span class="sym">(</span>i<span class="sym">)</span>
     end do
  end do

  write<span class="sym">(*,</span><span class="str">'(i4,a,i7)'</span><span class="sym">)</span> y<span class="sym">(</span><span class="num">0</span><span class="sym">),</span><span class="str">' '</span><span class="sym">,</span>y<span class="sym">(</span>num<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>

  deallocate<span class="sym">(</span>x<span class="sym">)</span>
  deallocate<span class="sym">(</span>y<span class="sym">)</span>

end program array
