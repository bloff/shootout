<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Dennis Decker Jensen</span>
<span class="com">*/</span>

arg n <span class="sym">. ;</span> <span class="kwa">if</span> n <span class="sym">=</span> <span class="str">''</span> <span class="sym">|</span> n <span class="sym">&lt;</span> <span class="num">1</span> then n <span class="sym">=</span> <span class="num">1</span>
size <span class="sym">=</span> <span class="num">30</span>
m1<span class="sym">.</span>0<span class="num">.0</span> <span class="sym">=</span> <span class="num">0</span>
m2<span class="sym">.</span>0<span class="num">.0</span> <span class="sym">=</span> <span class="num">0</span>
call mkmatrix <span class="str">'m1.'</span><span class="sym">,</span> size<span class="sym">,</span> size
call mkmatrix <span class="str">'m2.'</span><span class="sym">,</span> size<span class="sym">,</span> size
mm<span class="num">.0.0</span> <span class="sym">=</span> <span class="num">0</span>

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">for</span> n
	call mmult size<span class="sym">,</span> size<span class="sym">,</span> <span class="str">'m1.'</span><span class="sym">,</span> <span class="str">'m2.'</span><span class="sym">,</span> <span class="str">'mm.'</span>
end
say mm<span class="num">.0.0</span> mm<span class="num">.2.3</span> mm<span class="num">.3.2</span> mm<span class="num">.4.4</span>
exit

mkmatrix<span class="sym">:</span>
parse arg mx<span class="sym">,</span> rows<span class="sym">,</span> cols
procedure <span class="kwd">expose</span> <span class="sym">(</span>mx<span class="sym">)</span> rows cols
count <span class="sym">=</span> <span class="num">1</span>
<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">for</span> rows
	<span class="kwa">do</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">for</span> cols
		call value mx<span class="sym">||</span>i<span class="sym">||</span><span class="str">'.'</span><span class="sym">||</span>j<span class="sym">,</span> count
		count <span class="sym">=</span> count <span class="sym">+</span> <span class="num">1</span>
	end j
end i
<span class="kwa">return</span>

mmult<span class="sym">:</span>
parse arg rows<span class="sym">,</span> cols<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> m3
procedure <span class="kwd">expose</span> <span class="sym">(</span>m1<span class="sym">) (</span>m2<span class="sym">) (</span>m3<span class="sym">)</span> rows cols
<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">for</span> rows
	<span class="kwa">do</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">for</span> cols
		val <span class="sym">=</span> <span class="num">0</span>
		<span class="kwa">do</span> k <span class="sym">=</span> <span class="num">0</span> <span class="kwa">for</span> cols
			val <span class="sym">=</span> val <span class="sym">+</span> <span class="kwd">value</span><span class="sym">(</span>m1<span class="sym">||</span>i<span class="sym">||</span><span class="str">'.'</span><span class="sym">||</span>k<span class="sym">) ,</span>
					<span class="sym">*</span> <span class="kwd">value</span><span class="sym">(</span>m2<span class="sym">||</span>k<span class="sym">||</span><span class="str">'.'</span><span class="sym">||</span>j<span class="sym">)</span>
		end k
		call value m3<span class="sym">||</span>i<span class="sym">||</span><span class="str">'.'</span><span class="sym">||</span>j<span class="sym">,</span> val
	end j
end i
<span class="kwa">return</span>
