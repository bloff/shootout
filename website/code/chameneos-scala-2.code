<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Julien Gaugaz</span>
<span class="com">   inspired by the version contributed by Yura Taras and modified by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> scala<span class="sym">.</span>actors<span class="sym">.</span>Actor
<span class="kwa">import</span> scala<span class="sym">.</span>actors<span class="sym">.</span>Actor<span class="sym">.</span>_
<span class="kwa">import</span> scala<span class="sym">.</span>actors<span class="sym">.</span>Exit

<span class="kwa">object</span> chameneos <span class="sym">{</span>

  <span class="kwa">abstract class</span> Colour
  <span class="kwa">case object</span> RED <span class="kwa">extends</span> Colour
  <span class="kwa">case object</span> YELLOW <span class="kwa">extends</span> Colour
  <span class="kwa">case object</span> BLUE <span class="kwa">extends</span> Colour
  <span class="kwa">case object</span> FADED <span class="kwa">extends</span> Colour

  <span class="kwa">val</span> colours <span class="sym">=</span> <span class="kwc">Array</span><span class="sym">(</span>BLUE<span class="sym">,</span> RED<span class="sym">,</span> YELLOW<span class="sym">)</span>

  <span class="kwa">case class</span> Meet<span class="sym">(</span>colour<span class="sym">:</span>Colour<span class="sym">)</span>
  <span class="kwa">case class</span> Change<span class="sym">(</span>colour<span class="sym">:</span>Colour<span class="sym">)</span>
  <span class="kwa">case class</span> MeetingCount<span class="sym">(</span>count<span class="sym">:</span><span class="kwb">int</span><span class="sym">)</span>


  <span class="kwa">class</span> Mall<span class="sym">(</span><span class="kwa">var</span> n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> numChameneos<span class="sym">:</span> <span class="kwb">int</span><span class="sym">)</span> <span class="kwa">extends</span> Actor <span class="sym">{</span>
    <span class="kwa">var</span> waitingChameneo<span class="sym">:</span><span class="kwc">Option</span><span class="sym">[</span>Actor<span class="sym">] =</span> None
    startChameneos<span class="sym">()</span>
    start<span class="sym">()</span>

    <span class="kwa">def</span> startChameneos<span class="sym">():</span> Unit <span class="sym">= {</span>
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">while</span><span class="sym">(</span>i <span class="sym">&lt;</span> numChameneos<span class="sym">) {</span>
        Chameneo<span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> colours<span class="sym">(</span>i<span class="sym">%</span><span class="num">3</span><span class="sym">),</span> i<span class="sym">).</span>start<span class="sym">()</span>
        i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">def</span> act<span class="sym">() {</span>
      <span class="kwa">var</span> sumMeetings <span class="sym">=</span> <span class="num">0</span>
      <span class="kwa">var</span> numFaded <span class="sym">=</span> <span class="num">0</span>
      loop <span class="sym">{</span>
        react <span class="sym">{</span>

          <span class="kwa">case</span> MeetingCount<span class="sym">(</span>i<span class="sym">) =&gt; {</span>
            numFaded <span class="sym">=</span> numFaded <span class="sym">+</span> <span class="num">1</span>
            sumMeetings <span class="sym">=</span> sumMeetings <span class="sym">+</span> i
            <span class="kwa">if</span><span class="sym">(</span>numFaded <span class="sym">==</span> numChameneos<span class="sym">) {</span>
              println<span class="sym">(</span>sumMeetings<span class="sym">)</span>
              exit<span class="sym">()</span>
            <span class="sym">}</span>
          <span class="sym">}</span>

          <span class="kwa">case</span> msg&#64;Meet<span class="sym">(</span>c<span class="sym">) =&gt; {</span>
            <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
	      waitingChameneo match <span class="sym">{</span>
                <span class="kwa">case</span> Some<span class="sym">(</span>chameneo<span class="sym">) =&gt;</span>
                  n <span class="sym">=</span> n<span class="sym">-</span><span class="num">1</span>
                  chameneo<span class="sym">.</span>forward<span class="sym">(</span>msg<span class="sym">)</span>
                  waitingChameneo <span class="sym">=</span> None
                <span class="kwa">case</span> None <span class="sym">=&gt;</span>
                  waitingChameneo <span class="sym">=</span> Some<span class="sym">(</span>sender<span class="sym">)</span>
              <span class="sym">}</span>
            <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
              waitingChameneo match <span class="sym">{</span>
                <span class="kwa">case</span> Some<span class="sym">(</span>chameneo<span class="sym">) =&gt;</span>
                  chameneo<span class="sym">!</span>Exit<span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> <span class="str">&quot;normal&quot;</span><span class="sym">)</span>
                <span class="kwa">case</span> None <span class="sym">=&gt;</span>
              <span class="sym">}</span>
              sender<span class="sym">!</span>Exit<span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> <span class="str">&quot;normal&quot;</span><span class="sym">)</span>
            <span class="sym">}</span>
          <span class="sym">}</span>

        <span class="sym">}</span>
      <span class="sym">}</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">case class</span> Chameneo<span class="sym">(</span><span class="kwa">var</span> mall<span class="sym">:</span> Mall<span class="sym">,</span> <span class="kwa">var</span> colour<span class="sym">:</span> Colour<span class="sym">,</span> id<span class="sym">:</span><span class="kwb">int</span><span class="sym">)</span> <span class="kwa">extends</span> Actor <span class="sym">{</span>
    <span class="kwa">var</span> meetings <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">def</span> act<span class="sym">() {</span>
      loop <span class="sym">{</span>
        mall<span class="sym">!</span>Meet<span class="sym">(</span>colour<span class="sym">)</span>
        react <span class="sym">{</span>
          <span class="kwa">case</span> Meet<span class="sym">(</span>otherColour<span class="sym">) =&gt;</span>
            colour <span class="sym">=</span> complement<span class="sym">(</span>otherColour<span class="sym">)</span>
            meetings <span class="sym">=</span> meetings <span class="sym">+</span><span class="num">1</span>
            sender<span class="sym">!</span>Change<span class="sym">(</span>colour<span class="sym">)</span>
          <span class="kwa">case</span> Change<span class="sym">(</span>newColour<span class="sym">) =&gt;</span>
            colour <span class="sym">=</span> newColour
            meetings <span class="sym">=</span> meetings <span class="sym">+</span><span class="num">1</span>
          <span class="kwa">case</span> Exit<span class="sym">(</span>_<span class="sym">,</span>_<span class="sym">) =&gt;</span>
	    colour <span class="sym">=</span> FADED
            sender<span class="sym">!</span>MeetingCount<span class="sym">(</span>meetings<span class="sym">)</span>
            exit<span class="sym">()</span>
        <span class="sym">}</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">def</span> complement<span class="sym">(</span>otherColour<span class="sym">:</span>Colour<span class="sym">):</span> Colour <span class="sym">= {</span>
      colour match <span class="sym">{</span>
      <span class="kwa">case</span> RED <span class="sym">=&gt;</span> otherColour match <span class="sym">{</span>
        <span class="kwa">case</span> RED <span class="sym">=&gt;</span> RED
        <span class="kwa">case</span> YELLOW <span class="sym">=&gt;</span> BLUE
        <span class="kwa">case</span> BLUE <span class="sym">=&gt;</span> YELLOW
        <span class="kwa">case</span> FADED <span class="sym">=&gt;</span> FADED
      <span class="sym">}</span>
      <span class="kwa">case</span> YELLOW <span class="sym">=&gt;</span> otherColour match <span class="sym">{</span>
        <span class="kwa">case</span> RED <span class="sym">=&gt;</span> BLUE
        <span class="kwa">case</span> YELLOW <span class="sym">=&gt;</span> YELLOW
        <span class="kwa">case</span> BLUE <span class="sym">=&gt;</span> RED
        <span class="kwa">case</span> FADED <span class="sym">=&gt;</span> FADED
      <span class="sym">}</span>
      <span class="kwa">case</span> BLUE <span class="sym">=&gt;</span> otherColour match <span class="sym">{</span>
        <span class="kwa">case</span> RED <span class="sym">=&gt;</span> YELLOW
        <span class="kwa">case</span> YELLOW <span class="sym">=&gt;</span> RED
        <span class="kwa">case</span> BLUE <span class="sym">=&gt;</span> BLUE
        <span class="kwa">case</span> FADED <span class="sym">=&gt;</span> FADED
      <span class="sym">}</span>
      <span class="kwa">case</span> FADED <span class="sym">=&gt;</span> FADED
      <span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">override def</span> toString<span class="sym">() =</span> id<span class="sym">+</span><span class="str">&quot;(&quot;</span><span class="sym">+</span>colour<span class="sym">+</span><span class="str">&quot;)&quot;</span>
  <span class="sym">}</span>

  <span class="kwa">def</span> main<span class="sym">(</span>args <span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) :</span> Unit <span class="sym">= {</span>
    <span class="kwa">if</span><span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">throw new</span> <span class="kwc">IllegalArgumentException</span><span class="sym">(</span><span class="str">&quot;Syntax: scala chameneos N [numChameneos]&quot;</span><span class="sym">)</span>
    <span class="kwa">val</span> N <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">))</span>
    <span class="kwa">var</span> numChameneos <span class="sym">=</span> <span class="num">4</span>
    <span class="kwa">if</span><span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span>
      numChameneos <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">1</span><span class="sym">))</span>
    <span class="kwa">new</span> Mall<span class="sym">(</span>N<span class="sym">,</span> numChameneos<span class="sym">)</span>
  <span class="sym">}</span>
<span class="sym">}</span>
