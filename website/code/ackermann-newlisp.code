#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp <span class="sym">-</span>s1000000
<span class="slc">;;</span>
<span class="slc">;; Ackermann's Function</span>
<span class="slc">;;</span>
<span class="slc">;; By Brent Fulgham</span>
<span class="sym">(</span>define <span class="sym">(</span>ack m n<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((=</span> m <span class="num">0</span><span class="sym">) (+</span> n <span class="num">1</span><span class="sym">))</span>
          <span class="sym">((=</span> n <span class="num">0</span><span class="sym">) (</span>ack <span class="sym">(-</span> m <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
	  <span class="sym">(</span>true    <span class="sym">(</span>ack <span class="sym">(-</span> m <span class="num">1</span><span class="sym">) (</span>ack m <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>main<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">set</span> <span class="str">'N (integer (last (main-args))))</span>
<span class="str">    (println</span>
<span class="str">        (format &quot;Ack(3,%d): %d&quot; N (ack 3 N))))</span>
<span class="str"></span>
<span class="str">(main)</span>
<span class="str">(exit)</span>
<span class="str"></span>
<span class="str"></span>
