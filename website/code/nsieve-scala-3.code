<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>


<span class="kwa">object</span> nsieve <span class="sym">{</span>

   <span class="kwa">def</span> nsieve<span class="sym">(</span>m<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> isPrime<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">boolean</span><span class="sym">]) = {</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">2</span><span class="sym">,</span> m<span class="sym">))</span> isPrime<span class="sym">(</span>i<span class="sym">) =</span> true
      <span class="kwa">var</span> count <span class="sym">=</span> <span class="num">0</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">2</span><span class="sym">,</span> m<span class="sym">)){</span>
         <span class="kwa">if</span> <span class="sym">(</span>isPrime<span class="sym">(</span>i<span class="sym">)){</span>
            <span class="kwa">var</span> k <span class="sym">=</span> i<span class="sym">+</span>i
            <span class="kwa">while</span> <span class="sym">(</span>k <span class="sym">&lt;</span> m<span class="sym">){</span> isPrime<span class="sym">(</span>k<span class="sym">) =</span> false<span class="sym">;</span> k <span class="sym">=</span> k<span class="sym">+</span>i <span class="sym">}</span>
            count <span class="sym">=</span> count <span class="sym">+</span> <span class="num">1</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      count
   <span class="sym">}</span>


   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">))</span>
      <span class="kwa">val</span> m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">)*</span><span class="num">10000</span>
      <span class="kwa">val</span> flags <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwb">boolean</span><span class="sym">](</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

      <span class="kwa">def</span> printPrimes<span class="sym">(</span>m<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) = {</span>

         <span class="kwa">def</span> pad<span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> width<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) = {</span>
            <span class="kwa">val</span> s <span class="sym">=</span> i<span class="sym">.</span>toString
            <span class="kwc">List</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> width <span class="sym">-</span> s<span class="sym">.</span>length<span class="sym">)</span>
               <span class="sym">.</span>map<span class="sym">((</span>i<span class="sym">) =&gt;</span> <span class="str">&quot; &quot;</span><span class="sym">) .</span>foldLeft<span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">)((</span>a<span class="sym">,</span>b<span class="sym">) =&gt;</span> a<span class="sym">+</span>b<span class="sym">) +</span> s
         <span class="sym">}</span>

         Console<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span> <span class="sym">+</span>  pad<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">) +</span> pad<span class="sym">(</span>nsieve<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">),</span><span class="num">9</span><span class="sym">))</span>
      <span class="sym">}</span>


      printPrimes<span class="sym">(</span>m<span class="sym">)</span>
      printPrimes<span class="sym">( (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)*</span><span class="num">10000</span> <span class="sym">)</span>
      printPrimes<span class="sym">( (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)*</span><span class="num">10000</span> <span class="sym">)</span>
   <span class="sym">}</span>
<span class="sym">}</span>
