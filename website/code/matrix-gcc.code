<span class="line">    1 </span><span class="com">/* -*- mode: c -*-
</span><span class="line">    2 </span><span class="com"> * $Id: matrix-gcc.code,v 1.4 2004-11-13 07:41:55 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> */</span>
<span class="line">    5 </span>
<span class="line">    6 </span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="line">    9 </span><span class="dir"></span>
<span class="line">   10 </span><span class="dir">#define SIZE 30
</span><span class="line">   11 </span><span class="dir"></span>
<span class="line">   12 </span><span class="kwb">int</span> <span class="sym">**</span>mkmatrix<span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">) {
</span><span class="line">   13 </span><span class="sym"></span>    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">,</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym"></span>    <span class="kwb">int</span> <span class="sym">**</span>m <span class="sym">= (</span><span class="kwb">int</span> <span class="sym">**)</span> malloc<span class="sym">(</span>rows <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span> <span class="sym">*));
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   16 </span><span class="sym"></span>        m<span class="sym">[</span>i<span class="sym">] = (</span><span class="kwb">int</span> <span class="sym">*)</span> malloc<span class="sym">(</span>cols <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">));
</span><span class="line">   17 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++) {
</span><span class="line">   18 </span><span class="sym"></span>            m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> count<span class="sym">++;
</span><span class="line">   19 </span><span class="sym">        }
</span><span class="line">   20 </span><span class="sym">    }
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>m<span class="sym">);
</span><span class="line">   22 </span><span class="sym">}
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span><span class="kwb">void</span> zeromatrix<span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m<span class="sym">) {
</span><span class="line">   25 </span><span class="sym"></span>    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++)
</span><span class="line">   27 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++)
</span><span class="line">   28 </span><span class="sym"></span>            m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   29 </span><span class="sym">}
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym"></span><span class="kwb">void</span> freematrix<span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m<span class="sym">) {
</span><span class="line">   32 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(--</span>rows <span class="sym">&gt; -</span><span class="num">1</span><span class="sym">) {</span> free<span class="sym">(</span>m<span class="sym">[</span>rows<span class="sym">]); }
</span><span class="line">   33 </span><span class="sym"></span>    free<span class="sym">(</span>m<span class="sym">);
</span><span class="line">   34 </span><span class="sym">}
</span><span class="line">   35 </span><span class="sym">
</span><span class="line">   36 </span><span class="sym"></span><span class="kwb">int</span> <span class="sym">**</span>mmult<span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m1<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m2<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m3<span class="sym">) {
</span><span class="line">   37 </span><span class="sym"></span>    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> val<span class="sym">;
</span><span class="line">   38 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   39 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++) {
</span><span class="line">   40 </span><span class="sym"></span>            val <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span>            <span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> k<span class="sym">&lt;</span>cols<span class="sym">;</span> k<span class="sym">++) {
</span><span class="line">   42 </span><span class="sym"></span>                val <span class="sym">+=</span> m1<span class="sym">[</span>i<span class="sym">][</span>k<span class="sym">] *</span> m2<span class="sym">[</span>k<span class="sym">][</span>j<span class="sym">];
</span><span class="line">   43 </span><span class="sym">            }
</span><span class="line">   44 </span><span class="sym"></span>            m3<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> val<span class="sym">;
</span><span class="line">   45 </span><span class="sym">        }
</span><span class="line">   46 </span><span class="sym">    }
</span><span class="line">   47 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>m3<span class="sym">);
</span><span class="line">   48 </span><span class="sym">}
</span><span class="line">   49 </span><span class="sym">
</span><span class="line">   50 </span><span class="sym"></span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span><span class="line">   51 </span><span class="sym"></span>    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   52 </span><span class="sym">
</span><span class="line">   53 </span><span class="sym"></span>    <span class="kwb">int</span> <span class="sym">**</span>m1 <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);
</span><span class="line">   54 </span><span class="sym"></span>    <span class="kwb">int</span> <span class="sym">**</span>m2 <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);
</span><span class="line">   55 </span><span class="sym"></span>    <span class="kwb">int</span> <span class="sym">**</span>mm <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);
</span><span class="line">   56 </span><span class="sym">
</span><span class="line">   57 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   58 </span><span class="sym"></span>        mm <span class="sym">=</span> mmult<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);
</span><span class="line">   59 </span><span class="sym">    }
</span><span class="line">   60 </span><span class="sym"></span>    printf<span class="sym">(</span><span class="str">&quot;%d %d %d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> mm<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">2</span><span class="sym">][</span><span class="num">3</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">3</span><span class="sym">][</span><span class="num">2</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">4</span><span class="sym">][</span><span class="num">4</span><span class="sym">]);
</span><span class="line">   61 </span><span class="sym">
</span><span class="line">   62 </span><span class="sym"></span>    freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> m1<span class="sym">);
</span><span class="line">   63 </span><span class="sym"></span>    freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> m2<span class="sym">);
</span><span class="line">   64 </span><span class="sym"></span>    freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> mm<span class="sym">);
</span><span class="line">   65 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   66 </span><span class="sym">}</span>
