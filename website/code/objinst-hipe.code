<span class="slc">%%% -*- mode: erlang -*-</span>
<span class="slc">%%% $Id: objinst-hipe.code,v 1.11 2005-12-08 06:40:16 bfulgham Exp $</span>
<span class="slc">%%% http://shootout.alioth.debian.org/</span>
<span class="slc">%%%</span>
<span class="slc">%%% Provided by Bengt Kleberg (Erlang Guru!)</span>
<span class="slc">%%% Slightly modified by Brent Fulgham to match expected output.</span>
<span class="slc">%%% fixed by Isaac Gouy</span>

<span class="sym">-</span><span class="kwd">module</span><span class="sym">(</span>objinst<span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="sym">-</span><span class="kwb">record</span><span class="sym">(</span> toggle_base<span class="sym">, {</span>state<span class="sym">,</span> value <span class="sym">=</span> <span class="kwa">fun</span> value<span class="sym">/</span><span class="num">1</span><span class="sym">,</span> activate <span class="sym">=</span> <span class="kwa">fun</span> activate<span class="sym">/</span><span class="num">1</span><span class="sym">} )</span>.
<span class="sym">-</span><span class="kwb">record</span><span class="sym">(</span> toggle<span class="sym">, {</span>toggle_base<span class="sym">} )</span>.
<span class="sym">-</span><span class="kwb">record</span><span class="sym">(</span> nth_toggle<span class="sym">, {</span> toggle_base<span class="sym">,</span> counter <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> max_count <span class="sym">} )</span>.

<span class="kwd">main</span><span class="sym">() -&gt;</span> <span class="kwd">main</span><span class="sym">([</span><span class="str">&quot;1&quot;</span><span class="sym">])</span>.
<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
	Number_of_Times <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
	<span class="kwd">activate_toggle</span><span class="sym">(</span> <span class="num">5</span><span class="sym">,</span> <span class="kwd">toggle_new</span><span class="sym">(</span> true <span class="sym">) ),</span>
	<span class="kwd">create_toggle</span><span class="sym">(</span> Number_of_Times <span class="sym">),</span>
	io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span>
	<span class="kwd">activate_toggle</span><span class="sym">(</span> <span class="num">8</span><span class="sym">,</span> <span class="kwd">nth_toggle_new</span><span class="sym">(</span> true<span class="sym">,</span> <span class="num">3</span> <span class="sym">) ),</span>
	<span class="kwd">create_nth_toggle</span><span class="sym">(</span> Number_of_Times <span class="sym">),</span>
	erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">()</span>.

<span class="kwd">atom_to_integer</span><span class="sym">(</span> Atom <span class="sym">) -&gt;</span>
	erlang<span class="sym">:</span><span class="kwb">list_to_integer</span><span class="sym">(</span>erlang<span class="sym">:</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Atom<span class="sym">))</span>.

<span class="kwd">activate_toggle</span><span class="sym">(</span> <span class="num">0</span><span class="sym">,</span> _Toggle <span class="sym">) -&gt;</span> ok<span class="sym">;</span>
<span class="kwd">activate_toggle</span><span class="sym">(</span> N<span class="sym">,</span> Toggle <span class="sym">) -&gt;</span>
	Activated_Toggle <span class="sym">= ((</span>Toggle#toggle.toggle_base<span class="sym">)</span>#toggle_base.activate<span class="sym">)(</span>Toggle<span class="sym">),</span>
	Value <span class="sym">= ((</span>Activated_Toggle#toggle.toggle_base<span class="sym">)</span>#toggle_base.value<span class="sym">)(</span>Activated_Toggle<span class="sym">),</span>
	io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>Value<span class="sym">]),</span>
	<span class="kwd">activate_toggle</span><span class="sym">(</span> N <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> Activated_Toggle<span class="sym">)</span>.

<span class="kwd">create_toggle</span><span class="sym">(</span> <span class="num">0</span> <span class="sym">) -&gt;</span> ok<span class="sym">;</span>
<span class="kwd">create_toggle</span><span class="sym">(</span> N <span class="sym">) -&gt;</span>
	_Toggle <span class="sym">=</span> <span class="kwd">toggle_new</span><span class="sym">(</span> true <span class="sym">),</span>
	<span class="kwd">create_toggle</span><span class="sym">(</span> N<span class="sym">-</span><span class="num">1</span> <span class="sym">)</span>.

<span class="kwd">create_nth_toggle</span><span class="sym">(</span> <span class="num">0</span> <span class="sym">) -&gt;</span> ok<span class="sym">;</span>
<span class="kwd">create_nth_toggle</span><span class="sym">(</span> N <span class="sym">) -&gt;</span>
	_Toggle <span class="sym">=</span> <span class="kwd">nth_toggle_new</span><span class="sym">(</span> true<span class="sym">,</span> <span class="num">3</span> <span class="sym">),</span>
	<span class="kwd">create_nth_toggle</span><span class="sym">(</span> N<span class="sym">-</span><span class="num">1</span> <span class="sym">)</span>.

<span class="kwd">toggle_base_new</span><span class="sym">(</span> State <span class="sym">) -&gt;</span>
	#toggle_base<span class="sym">{</span>state <span class="sym">=</span> State<span class="sym">}</span>.

<span class="kwd">toggle_new</span><span class="sym">(</span> State <span class="sym">) -&gt;</span>
	Toggle <span class="sym">=</span> <span class="kwd">toggle_base_new</span><span class="sym">(</span> State <span class="sym">),</span>
	#toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> Toggle<span class="sym">}</span>.

<span class="kwd">nth_toggle_new</span><span class="sym">(</span> State<span class="sym">,</span> Max_Count <span class="sym">) -&gt;</span>
	Toggle <span class="sym">=</span> <span class="kwd">toggle_base_new</span><span class="sym">(</span> State <span class="sym">),</span>
	#nth_toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> Toggle<span class="sym">,</span> max_count <span class="sym">=</span> Max_Count <span class="sym">-</span> <span class="num">1</span><span class="sym">}</span>.


<span class="kwd">activate</span><span class="sym">(</span> #toggle_base<span class="sym">{</span>state <span class="sym">=</span> true<span class="sym">} =</span> Toggle_Base <span class="sym">) -&gt;</span>
	Toggle_Base#toggle_base<span class="sym">{</span>state <span class="sym">=</span> false<span class="sym">};</span>
<span class="kwd">activate</span><span class="sym">(</span> #toggle_base<span class="sym">{</span>state <span class="sym">=</span> false<span class="sym">} =</span> Toggle_Base <span class="sym">) -&gt;</span>
	Toggle_Base#toggle_base<span class="sym">{</span>state <span class="sym">=</span> true<span class="sym">};</span>
<span class="kwd">activate</span><span class="sym">(</span> #toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> Toggle_Base<span class="sym">} =</span> Toggle <span class="sym">) -&gt;</span>
	Toggle#toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> <span class="kwd">activate</span><span class="sym">(</span> Toggle_Base <span class="sym">)};</span>
<span class="kwd">activate</span><span class="sym">(</span> #nth_toggle<span class="sym">{</span>counter <span class="sym">=</span> Max_Count<span class="sym">,</span> max_count <span class="sym">=</span> Max_Count<span class="sym">,</span> toggle_base <span class="sym">=</span> Toggle_Base<span class="sym">} =</span> Nth_Toggle <span class="sym">) -&gt;</span>
	Nth_Toggle#nth_toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> <span class="kwd">activate</span><span class="sym">(</span> Toggle_Base <span class="sym">),</span> counter <span class="sym">=</span> <span class="num">0</span><span class="sym">};</span>
<span class="kwd">activate</span><span class="sym">(</span> #nth_toggle<span class="sym">{</span>counter <span class="sym">=</span> Count<span class="sym">} =</span> Nth_Toggle <span class="sym">) -&gt;</span>
	Nth_Toggle#nth_toggle<span class="sym">{</span>counter <span class="sym">=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">}</span>.

<span class="kwd">value</span><span class="sym">(</span> #toggle_base<span class="sym">{</span>state <span class="sym">=</span> State<span class="sym">} ) -&gt;</span>
	State<span class="sym">;</span>
<span class="kwd">value</span><span class="sym">(</span> #toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> Toggle_Base<span class="sym">} ) -&gt;</span>
	<span class="kwd">value</span><span class="sym">(</span> Toggle_Base <span class="sym">);</span>
<span class="kwd">value</span><span class="sym">(</span> #nth_toggle<span class="sym">{</span>toggle_base <span class="sym">=</span> Toggle_Base<span class="sym">} ) -&gt;</span>
	<span class="kwd">value</span><span class="sym">(</span> Toggle_Base <span class="sym">)</span>.
