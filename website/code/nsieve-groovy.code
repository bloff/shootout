<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: nsieve-groovy.code,v 1.4 2005-09-25 22:25:57 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen

        The NSieveBits sample is more groovy style than this fixed boolean array
*/</span>

def nsieve<span class="sym">(</span>isPrime<span class="sym">,</span> m<span class="sym">) {
</span>        isPrime<span class="sym">.</span>each<span class="sym">() {
</span>                it <span class="sym">=</span> <span class="kwa">true
</span>        <span class="sym">}
</span>        def count <span class="sym">=</span> <span class="num">0
</span>	<span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">2</span><span class="sym">..</span>m<span class="sym">) {
</span>		<span class="kwa">if</span> <span class="sym">(</span>isPrime<span class="sym">[</span>i<span class="sym">]) {
                        (</span>i<span class="sym">+</span>i<span class="sym">..</span>m<span class="sym">).</span>step<span class="sym">(</span>i<span class="sym">) {</span> j <span class="sym">-&gt;
</span>				isPrime<span class="sym">[</span>j<span class="sym">] =</span> <span class="kwa">false
</span>			<span class="sym">}

</span>                        count<span class="sym">++
		}
	}
</span>	count
<span class="sym">}

</span>def run<span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="sym">) {
</span>        def m <span class="sym">=</span> <span class="num">2</span><span class="sym">**</span>n<span class="sym">*</span><span class="num">10000
</span>	print<span class="sym">(</span><span class="str">&quot;Primes up to ${m.toString().padLeft(8)}&quot;</span><span class="sym">)
</span>	println<span class="sym">(</span>nsieve<span class="sym">(</span>isPrime<span class="sym">,</span> m<span class="sym">).</span>toString<span class="sym">().</span>padLeft<span class="sym">(</span><span class="num">8</span><span class="sym">))
}

</span>def n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span> ? <span class="num">2</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>toInteger<span class="sym">()
</span>n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span> Math<span class="sym">.</span>max<span class="sym">(</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">)

</span><span class="slc">// Allocate once for all runs
</span>def isPrime <span class="sym">= [</span> <span class="kwa">true</span> <span class="sym">] * (</span><span class="num">2</span><span class="sym">**</span>n<span class="sym">*</span><span class="num">10000</span><span class="sym">+</span><span class="num">1</span><span class="sym">)

</span>run<span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="sym">)
</span>run<span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="num">-1</span><span class="sym">)
</span>run<span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="num">-2</span><span class="sym">)

</span><span class="slc">// EOF
</span>
