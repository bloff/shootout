<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Pilho Kim</span>
<span class="com">*/</span>

def <span class="kwd">countSieve</span><span class="sym">(</span>m<span class="sym">,</span> primes<span class="sym">) {</span>
      def i<span class="sym">,</span> k
      def count <span class="sym">=</span> <span class="num">0</span>

      i <span class="sym">=</span> <span class="num">2</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;=</span> m<span class="sym">) {</span>
          primes<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">true</span>
          i<span class="sym">++</span>
      <span class="sym">}</span>

      i <span class="sym">=</span> <span class="num">2</span>
      <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;=</span> m<span class="sym">) {</span>
         <span class="kwa">if</span> <span class="sym">(</span>primes<span class="sym">[</span>i<span class="sym">]) {</span>
            k <span class="sym">=</span> i <span class="sym">+</span> i
            <span class="kwa">while</span> <span class="sym">(</span>k <span class="sym">&lt;=</span> m<span class="sym">) {</span>
                 primes<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">false</span>
                 k <span class="sym">+=</span> i
            <span class="sym">}</span>
            count<span class="sym">++</span>
         <span class="sym">}</span>
         i<span class="sym">++</span>
      <span class="sym">}</span>
      <span class="kwa">return</span> count
<span class="sym">}</span>

def <span class="kwd">padNumber</span><span class="sym">(</span>number<span class="sym">,</span> fieldLen<span class="sym">) {</span>
      def bareNumber <span class="sym">=</span> <span class="str">&quot;&quot;</span> <span class="sym">+</span> number
      def numSpaces <span class="sym">=</span> fieldLen <span class="sym">-</span> bareNumber<span class="sym">.</span><span class="kwd">length</span><span class="sym">()</span>
      def sb <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StringBuffer</span><span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">*</span>numSpaces<span class="sym">)</span>
      sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>bareNumber<span class="sym">)</span>
      <span class="kwa">return</span> sb<span class="sym">.</span><span class="kwd">toString</span><span class="sym">()</span>
<span class="sym">}</span>

def n <span class="sym">=</span> <span class="num">2</span>
<span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
    n <span class="sym">=</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span><span class="kwd">toInteger</span><span class="sym">()</span>
<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span>
    n <span class="sym">=</span> <span class="num">2</span>

def m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">)*</span><span class="num">10000</span>
def flags <span class="sym">=</span> <span class="kwa">new</span> boolean<span class="sym">[</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">]</span>

<span class="sym">[</span>n<span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">2</span><span class="sym">].</span>each <span class="sym">{</span>
    def k <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>it<span class="sym">)*</span><span class="num">10000</span>
    def s1 <span class="sym">=</span> <span class="kwd">padNumber</span><span class="sym">(</span>k<span class="sym">,</span> <span class="num">8</span><span class="sym">)</span>
    def s2 <span class="sym">=</span> <span class="kwd">padNumber</span><span class="sym">(</span><span class="kwd">countSieve</span><span class="sym">(</span>k<span class="sym">,</span>flags<span class="sym">),</span> <span class="num">9</span><span class="sym">)</span>
    <span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;Primes up to $s1$s2&quot;</span><span class="sym">)</span>
<span class="sym">}</span>
