BUILD COMMANDS FOR: except.cmucl

Thu Mar 30 00:13:36 PST 2006

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "except.cmucl_compile")'
### START except.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "except.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END except.cmucl_compile

; Loading #P"/opt/shootout/shootout/bench/except/tmp/except.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 30 MAR 06 12:13:36 am.
; Compiling: /opt/shootout/shootout/bench/except/tmp/except.cmucl 30 MAR 06 12:13:36 am

; Converted SOME-FUN.
; Converted HI-FUN.
; Converted LO-FUN.
; Converted BLOW-UP.
; Converted MAIN.
; Compiling DEFUN MAIN: 

; 
; 
; File: /opt/shootout/shootout/bench/except/tmp/except.cmucl

; In: DEFUN MAIN

;   (= I N)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to open code because:
;     Operands might not be the same type.
; 
;   (1+ I)
; ==>
;   (+ I 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN BLOW-UP

;   (1+ *HI*)
; ==>
;   (+ *HI* 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (1+ *LO*)
; ==>
;   (+ *LO* 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN MAIN

;   (1+ I)
; ==>
;   (+ I 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 

; In: DEFUN BLOW-UP

;   (EVENP N)
; --> ZEROP = 
; ==>
;   (LOGAND N 1)
; Note: Forced to do static-function Two-arg-and (cost 53).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     etc.
; 
;   (1+ *HI*)
; ==>
;   (+ *HI* 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
;   (1+ *LO*)
; ==>
;   (+ *LO* 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   17 notes


; except.x86f written.
; Compilation finished in 0:00:00.
### START except.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "except.x86f" :verbose nil :print nil)
(main) (quit)
### END except.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "except.cmucl_run" :verbose nil :print nil)' %A


PROGRAM OUTPUT
==============
Exceptions: HI=125000 / LO=125000
