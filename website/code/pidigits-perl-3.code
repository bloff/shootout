<span class="slc"># The Computer Language Shootout</span>
<span class="slc">#   http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#   contributed by Robert Bradshaw</span>
<span class="slc">#      modified by Ruud H.G.van Tol</span>

<span class="kwa">use</span> Math<span class="sym">::</span>BigInt lib <span class="sym">=&gt;</span> <span class="str">'GMP'</span><span class="sym">;</span>

<span class="kwb">$k</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwb">$z</span> <span class="sym">= [</span> Math<span class="sym">::</span>BigInt<span class="sym">-&gt;</span><span class="kwd">new</span><span class="sym">(</span><span class="str">'1'</span><span class="sym">)</span>
     <span class="sym">,</span> Math<span class="sym">::</span>BigInt<span class="sym">-&gt;</span><span class="kwd">new</span><span class="sym">(</span><span class="str">'0'</span><span class="sym">)</span>
     <span class="sym">,</span> Math<span class="sym">::</span>BigInt<span class="sym">-&gt;</span><span class="kwd">new</span><span class="sym">(</span><span class="str">'1'</span><span class="sym">) ];</span>

<span class="kwa">sub</span> next_digit <span class="sym">{</span>
  <span class="kwa">while</span> <span class="sym">(</span><span class="num">0</span>
       <span class="sym">|| (</span><span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">0</span><span class="sym">] &gt;</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">2</span><span class="sym">])</span>
       <span class="sym">|| ((</span><span class="kwb">$y</span> <span class="sym">=</span> <span class="kwd">extract_digit</span><span class="sym">(</span><span class="num">3</span><span class="sym">)) !=</span> <span class="kwd">extract_digit</span><span class="sym">(</span><span class="num">4</span><span class="sym">))</span>
        <span class="sym">) {</span> <span class="slc"># y not safe</span>
    <span class="sym">++</span><span class="kwb">$k</span><span class="sym">;</span>
    <span class="kwd">compose</span><span class="sym">([</span><span class="kwb">$k</span><span class="sym">,</span> <span class="num">4</span><span class="sym">*</span><span class="kwb">$k</span><span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span><span class="kwb">$k</span><span class="sym">+</span><span class="num">1</span><span class="sym">]);</span>
  <span class="sym">}</span>
  <span class="kwd">compose</span><span class="sym">([</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span> <span class="sym">*</span> <span class="kwb">$y</span><span class="sym">,</span> <span class="num">1</span><span class="sym">],</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwa">return</span> <span class="kwb">$y</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">sub</span> extract_digit <span class="sym">{</span>
  <span class="kwa">return</span> scalar <span class="kwd">int</span><span class="sym">( (</span><span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">0</span><span class="sym">] *</span> <span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">] +</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">]) /</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">2</span><span class="sym">] );</span>
<span class="sym">}</span>

<span class="kwa">sub</span> compose <span class="sym">{</span>
  <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">] =</span> <span class="kwd">defined</span><span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">1</span><span class="sym">])</span> ? <span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-&gt;[</span><span class="num">0</span><span class="sym">] *</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">] +</span> <span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-&gt;[</span><span class="num">1</span><span class="sym">] *</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">2</span><span class="sym">]</span>
                           <span class="sym">:</span> <span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-&gt;[</span><span class="num">1</span><span class="sym">] *</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">0</span><span class="sym">] +</span> <span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-&gt;[</span><span class="num">2</span><span class="sym">] *</span> <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">];</span>
  <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">0</span><span class="sym">]-&gt;</span><span class="kwd">bmul</span><span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-&gt;[</span><span class="num">0</span><span class="sym">]);</span>
  <span class="kwb">$z</span><span class="sym">-&gt;[</span><span class="num">2</span><span class="sym">]-&gt;</span><span class="kwd">bmul</span><span class="sym">(</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">]-&gt;[</span><span class="num">2</span><span class="sym">]);</span>
  <span class="kwa">return</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="slc"># main loop</span>

<span class="kwb">$n</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>

<span class="sym">{</span> <span class="kwc">local</span> <span class="sym">($,, $</span><span class="esc">\)</span> <span class="sym">= (</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span><span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

  <span class="kwa">for</span> <span class="kwb">$i</span> <span class="sym">(</span><span class="num">1</span>..<span class="kwb">$n</span><span class="sym">) {</span>
    <span class="kwb">$s</span> .<span class="sym">=</span> <span class="kwd">next_digit</span><span class="sym">();</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$i</span> % <span class="num">10</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>  print <span class="kwb">$s</span><span class="sym">,</span> <span class="str">&quot;:$i&quot;</span><span class="sym">;</span> <span class="kwd">undef</span><span class="sym">(</span><span class="kwb">$s</span><span class="sym">)}</span>
  <span class="sym">}</span>
  <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$i</span> <span class="sym">=</span> <span class="kwb">$n</span> % <span class="num">10</span><span class="sym">) {</span>
    <span class="kwb">$s</span> .<span class="sym">=</span> <span class="str">'.'</span><span class="kwd">x</span><span class="sym">(</span><span class="num">10</span><span class="sym">-</span><span class="kwb">$i</span><span class="sym">);</span>
  <span class="sym">}</span>
  print <span class="kwb">$s</span><span class="sym">,</span> <span class="str">&quot;:$n&quot;</span> <span class="kwa">if</span> <span class="kwb">$s</span><span class="sym">;</span>
<span class="sym">}</span>
