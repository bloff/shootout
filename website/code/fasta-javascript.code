<span class="slc">// The Great Computer Language Shootout
</span><span class="slc">//  http://shootout.alioth.debian.org
</span><span class="slc">//
</span><span class="slc">//  Contributed by Ian Osgood
</span>
<span class="kwa">var</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">,</span> A <span class="sym">=</span> <span class="num">3877</span><span class="sym">,</span> C <span class="sym">=</span> <span class="num">29573</span><span class="sym">,</span> M <span class="sym">=</span> <span class="num">139968</span><span class="sym">;

</span><span class="kwa">function</span> rand<span class="sym">(</span>max<span class="sym">) {
</span>  last <span class="sym">= (</span>last <span class="sym">*</span> A <span class="sym">+</span> C<span class="sym">) %</span> M<span class="sym">;
</span>  <span class="kwa">return</span> max <span class="sym">*</span> last <span class="sym">/</span> M<span class="sym">;
}

</span><span class="kwa">var</span> ALU <span class="sym">=
</span>  <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="sym">+
</span>  <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="sym">+
</span>  <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="sym">+
</span>  <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="sym">+
</span>  <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="sym">+
</span>  <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="sym">+
</span>  <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;

</span><span class="kwa">var</span> IUB <span class="sym">= {
</span>  a<span class="sym">:</span><span class="num">0.27</span><span class="sym">,</span> c<span class="sym">:</span><span class="num">0.12</span><span class="sym">,</span> g<span class="sym">:</span><span class="num">0.12</span><span class="sym">,</span> t<span class="sym">:</span><span class="num">0.27</span><span class="sym">,
</span>  B<span class="sym">:</span><span class="num">0.02</span><span class="sym">,</span> D<span class="sym">:</span><span class="num">0.02</span><span class="sym">,</span> H<span class="sym">:</span><span class="num">0.02</span><span class="sym">,</span> K<span class="sym">:</span><span class="num">0.02</span><span class="sym">,
</span>  M<span class="sym">:</span><span class="num">0.02</span><span class="sym">,</span> N<span class="sym">:</span><span class="num">0.02</span><span class="sym">,</span> R<span class="sym">:</span><span class="num">0.02</span><span class="sym">,</span> S<span class="sym">:</span><span class="num">0.02</span><span class="sym">,
</span>  V<span class="sym">:</span><span class="num">0.02</span><span class="sym">,</span> W<span class="sym">:</span><span class="num">0.02</span><span class="sym">,</span> Y<span class="sym">:</span><span class="num">0.02
</span><span class="sym">}

</span><span class="kwa">var</span> HomoSap <span class="sym">= {
</span>  a<span class="sym">:</span> <span class="num">0.3029549426680</span><span class="sym">,
</span>  c<span class="sym">:</span> <span class="num">0.1979883004921</span><span class="sym">,
</span>  g<span class="sym">:</span> <span class="num">0.1975473066391</span><span class="sym">,
</span>  t<span class="sym">:</span> <span class="num">0.3015094502008
</span><span class="sym">}

</span><span class="kwa">function</span> makeCumulative<span class="sym">(</span>table<span class="sym">) {
</span>  <span class="kwa">var</span> last <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;
</span>  <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> c <span class="kwa">in</span> table<span class="sym">) {
</span>    <span class="kwa">if</span> <span class="sym">(</span>last<span class="sym">)</span> table<span class="sym">[</span>c<span class="sym">] +=</span> table<span class="sym">[</span>last<span class="sym">];
</span>    last <span class="sym">=</span> c<span class="sym">;
  }
}

</span><span class="kwa">function</span> fastaRepeat<span class="sym">(</span>n<span class="sym">,</span> seq<span class="sym">) {
</span>  <span class="kwa">var</span> seqi <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> lenOut <span class="sym">=</span> <span class="num">60</span><span class="sym">;
</span>  <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">&gt;</span><span class="num">0</span><span class="sym">) {
</span>    <span class="kwa">if</span> <span class="sym">(</span>n<span class="sym">&lt;</span>lenOut<span class="sym">)</span> lenOut <span class="sym">=</span> n<span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span>seqi <span class="sym">+</span> lenOut <span class="sym">&lt;</span> seq.length<span class="sym">) {
</span>      print<span class="sym">(</span> seq.substring<span class="sym">(</span>seqi<span class="sym">,</span> seqi<span class="sym">+</span>lenOut<span class="sym">) );
</span>      seqi <span class="sym">+=</span> lenOut<span class="sym">;
    }</span> <span class="kwa">else</span> <span class="sym">{
</span>      <span class="kwa">var</span> s <span class="sym">=</span> seq.substring<span class="sym">(</span>seqi<span class="sym">);
</span>      seqi <span class="sym">=</span> lenOut <span class="sym">-</span> s.length<span class="sym">;
</span>      print<span class="sym">(</span> s <span class="sym">+</span> seq.substring<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> seqi<span class="sym">) );
    }
</span>    n <span class="sym">-=</span> lenOut<span class="sym">;
  }
}

</span><span class="kwa">function</span> fastaRandom<span class="sym">(</span>n<span class="sym">,</span> table<span class="sym">) {
</span>  <span class="kwa">var</span> line <span class="sym">=</span> <span class="kwa">new</span> Array<span class="sym">(</span><span class="num">60</span><span class="sym">);
</span>  makeCumulative<span class="sym">(</span>table<span class="sym">);
</span>  <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">&gt;</span><span class="num">0</span><span class="sym">) {
</span>    <span class="kwa">if</span> <span class="sym">(</span>n<span class="sym">&lt;</span>line.length<span class="sym">)</span> line <span class="sym">=</span> <span class="kwa">new</span> Array<span class="sym">(</span>n<span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>line.length<span class="sym">;</span> i<span class="sym">++) {
</span>      <span class="kwa">var</span> r <span class="sym">=</span> rand<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> c <span class="kwa">in</span> table<span class="sym">) {
</span>        <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&lt;</span> table<span class="sym">[</span>c<span class="sym">]) {
</span>          line<span class="sym">[</span>i<span class="sym">] =</span> c<span class="sym">;
</span>          <span class="kwa">break</span><span class="sym">;
        }
      }
    }
</span>    print<span class="sym">(</span> line.join<span class="sym">(</span><span class="str">''</span><span class="sym">) );
</span>    n <span class="sym">-=</span> line.length<span class="sym">;
  }
}

</span><span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">]

</span>print<span class="sym">(</span><span class="str">&quot;&gt;ONE Homo sapiens alu&quot;</span><span class="sym">)
</span>fastaRepeat<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span> ALU<span class="sym">)

</span>print<span class="sym">(</span><span class="str">&quot;&gt;TWO IUB ambiguity codes&quot;</span><span class="sym">)
</span>fastaRandom<span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span> IUB<span class="sym">)

</span>print<span class="sym">(</span><span class="str">&quot;&gt;THREE Homo sapiens frequency&quot;</span><span class="sym">)
</span>fastaRandom<span class="sym">(</span><span class="num">5</span><span class="sym">*</span>n<span class="sym">,</span> HomoSap<span class="sym">)</span>
