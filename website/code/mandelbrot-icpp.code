<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="dir">#include &lt;cstdlib&gt;</span>
<span class="dir">#include &lt;complex&gt;</span>

<span class="dir">#include &lt;functional&gt;</span>
<span class="dir">#include &lt;algorithm&gt;</span>

<span class="dir">#include &lt;iterator&gt;</span>
<span class="dir">#include &lt;sstream&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwc">typedef</span> <span class="kwb">complex</span><span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> Complex<span class="sym">;</span>
<span class="kwc">typedef</span> ostreambuf_iterator<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt;</span> StreamIterOut<span class="sym">;</span>

<span class="com">/* ----------------------------- */</span>

<span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> OutputIter_<span class="sym">,</span> <span class="kwc">class</span> Generator_<span class="sym">,</span> <span class="kwc">class</span> Predicate_<span class="sym">&gt;</span>
OutputIter_ <span class="kwd">generate_while</span><span class="sym">(</span>OutputIter_ first_<span class="sym">,</span> Generator_<span class="sym">&amp;</span> gen_<span class="sym">,</span> Predicate_ pred_<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwd">__typeof__</span><span class="sym">(</span><span class="kwd">gen_</span><span class="sym">())</span> <span class="kwd">value_</span><span class="sym">(</span><span class="kwd">gen_</span><span class="sym">());</span>

  <span class="kwa">for</span> <span class="sym">( ;</span> <span class="kwd">pred_</span><span class="sym">(</span>value_<span class="sym">); ++</span>first_<span class="sym">)</span>
  <span class="sym">{</span>
    <span class="sym">*</span>first_ <span class="sym">=</span> value_<span class="sym">;</span> value_ <span class="sym">=</span> <span class="kwd">gen_</span><span class="sym">();</span>
  <span class="sym">}</span>

  <span class="kwa">return</span> first_<span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* ----------------------------- */</span>

<span class="kwc">class</span> MandelbrotGenerator
<span class="sym">{</span>
<span class="kwc">public</span><span class="sym">:</span>
  <span class="kwb">enum</span> <span class="sym">{</span> EOS <span class="sym">= -</span><span class="num">1</span> <span class="sym">};</span>

<span class="kwc">public</span><span class="sym">:</span>
  <span class="kwd">MandelbrotGenerator</span><span class="sym">(</span><span class="kwb">int</span> height<span class="sym">,</span> <span class="kwb">int</span> width<span class="sym">);</span>

  <span class="kwb">bool</span> <span class="kwd">done</span><span class="sym">()</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> eos_<span class="sym">; }</span>

  <span class="kwb">char</span> <span class="kwd">next</span><span class="sym">();</span>
  <span class="kwb">void</span> <span class="kwd">reset</span><span class="sym">();</span>
  <span class="kwb">void</span> <span class="kwd">header</span><span class="sym">(</span>ostream<span class="sym">&amp;</span> out<span class="sym">)</span> <span class="kwb">const</span><span class="sym">;</span>

  <span class="kwc">operator</span> <span class="kwb">bool</span><span class="sym">()</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> <span class="sym">!</span><span class="kwd">done</span><span class="sym">(); }</span>
  <span class="kwb">char</span> <span class="kwc">operator</span><span class="sym">()() {</span> <span class="kwa">return</span> <span class="kwd">next</span><span class="sym">(); }</span>

<span class="kwc">public</span><span class="sym">:</span>
  <span class="kwb">struct</span> Done
  <span class="sym">{</span>
  <span class="kwc">public</span><span class="sym">:</span>
    <span class="kwd">Done</span><span class="sym">(</span>MandelbrotGenerator<span class="sym">&amp;</span> mref<span class="sym">) :</span> <span class="kwd">mref_</span><span class="sym">(</span>mref<span class="sym">) {</span> mref_<span class="sym">.</span><span class="kwd">reset</span><span class="sym">(); }</span>
    <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">char</span><span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> <span class="sym">!</span>mref_<span class="sym">.</span><span class="kwd">done</span><span class="sym">(); }</span>

  <span class="kwc">private</span><span class="sym">:</span>
    MandelbrotGenerator<span class="sym">&amp;</span> mref_<span class="sym">;</span>
  <span class="sym">};</span>

<span class="kwc">private</span><span class="sym">:</span>
  <span class="kwd">MandelbrotGenerator</span><span class="sym">(</span><span class="kwb">const</span> MandelbrotGenerator<span class="sym">&amp;);</span>
  MandelbrotGenerator<span class="sym">&amp;</span> <span class="kwc">operator</span><span class="sym">=(</span><span class="kwb">const</span> MandelbrotGenerator<span class="sym">&amp;);</span>

  <span class="kwb">static int</span> <span class="kwd">mandel</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">const</span> Complex<span class="sym">&amp;</span> z<span class="sym">,</span> <span class="kwb">const</span> Complex<span class="sym">&amp;</span> c<span class="sym">);</span>

<span class="kwc">private</span><span class="sym">:</span>
  <span class="kwb">int</span> x_<span class="sym">,</span> y_<span class="sym">,</span> height_<span class="sym">,</span> width_<span class="sym">;</span>
  <span class="kwb">bool</span> eos_<span class="sym">;</span>
<span class="sym">};</span>

<span class="com">/* ----------------------------- */</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[])</span>
<span class="sym">{</span>
  ios_base<span class="sym">::</span><span class="kwd">sync_with_stdio</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">);</span>

  <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">!=</span> <span class="num">2</span><span class="sym">) {</span> cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: &quot;</span> <span class="sym">&lt;&lt;</span> argv<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; height&quot;</span> <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span> <span class="kwa">return</span> EXIT_FAILURE<span class="sym">; }</span>
  <span class="kwb">int</span> n<span class="sym">;</span> <span class="kwa">if</span> <span class="sym">(!(</span><span class="kwd">istringstream</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) &gt;&gt;</span> n<span class="sym">) ||</span> n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">100</span><span class="sym">;</span>

  MandelbrotGenerator <span class="kwd">mandel</span><span class="sym">(</span>n<span class="sym">,</span> n<span class="sym">);</span> mandel<span class="sym">.</span><span class="kwd">header</span><span class="sym">(</span>cout<span class="sym">);</span>

  <span class="kwd">generate_while</span><span class="sym">(</span><span class="kwd">StreamIterOut</span><span class="sym">(</span>cout<span class="sym">),</span> mandel<span class="sym">,</span> MandelbrotGenerator<span class="sym">::</span><span class="kwd">Done</span><span class="sym">(</span>mandel<span class="sym">));</span>

  <span class="kwa">return</span> EXIT_SUCCESS<span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* ----------------------------- */</span>

MandelbrotGenerator<span class="sym">::</span><span class="kwd">MandelbrotGenerator</span><span class="sym">(</span><span class="kwb">int</span> height<span class="sym">,</span> <span class="kwb">int</span> width<span class="sym">)</span>
  <span class="sym">:</span> <span class="kwd">x_</span><span class="sym">(</span><span class="num">0</span><span class="sym">),</span> <span class="kwd">y_</span><span class="sym">(</span><span class="num">0</span><span class="sym">),</span> <span class="kwd">height_</span><span class="sym">(</span>height<span class="sym">),</span> <span class="kwd">width_</span><span class="sym">(</span>width<span class="sym">),</span> <span class="kwd">eos_</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">)</span>
<span class="sym">{</span>
<span class="sym">}</span>

<span class="com">/* ---------- */</span>

<span class="kwb">char</span> MandelbrotGenerator<span class="sym">::</span><span class="kwd">next</span><span class="sym">()</span>
<span class="sym">{</span>
  <span class="kwb">char</span> byte <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwb">int</span> bitNumber <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> limitMarker<span class="sym">;</span> <span class="kwb">bool</span> output <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>

  <span class="kwa">for</span> <span class="sym">( ;</span> y_ <span class="sym">&lt;</span> height_<span class="sym">; ++</span>y_<span class="sym">)</span>
  <span class="sym">{</span>
    <span class="kwa">for</span> <span class="sym">( ;</span> x_ <span class="sym">&lt;</span> width_<span class="sym">; ++</span>x_<span class="sym">)</span>
    <span class="sym">{</span>
      Complex z<span class="sym">,</span> <span class="kwd">c</span><span class="sym">(</span><span class="num">2.0</span> <span class="sym">*</span> x_ <span class="sym">/</span> width_ <span class="sym">-</span> <span class="num">1.5</span><span class="sym">,</span> <span class="num">2.0</span> <span class="sym">*</span> y_ <span class="sym">/</span> height_ <span class="sym">-</span> <span class="num">1.0</span><span class="sym">);</span>

      limitMarker <span class="sym">=</span> <span class="kwd">mandel</span><span class="sym">(</span><span class="num">50</span><span class="sym">,</span> z<span class="sym">,</span> c<span class="sym">);</span>

      output <span class="sym">= (++</span>bitNumber <span class="sym">==</span> <span class="num">8</span><span class="sym">) ||</span> output<span class="sym">;</span>
      byte <span class="sym">= (</span>byte <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">) |</span> limitMarker<span class="sym">;</span>
      output <span class="sym">= (</span>x_ <span class="sym">==</span> width_ <span class="sym">-</span> <span class="num">1</span> <span class="sym">&amp;&amp;</span> bitNumber <span class="sym">!=</span> <span class="num">8</span><span class="sym">)</span> ? <span class="sym">(</span>byte <span class="sym">&lt;&lt;= (</span><span class="num">8</span> <span class="sym">-</span> width_ <span class="sym">%</span> <span class="num">8</span><span class="sym">),</span> <span class="kwa">true</span><span class="sym">) :</span> output<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>output<span class="sym">) { ++</span>x_<span class="sym">;</span> <span class="kwa">return</span> byte<span class="sym">; }</span>
    <span class="sym">}</span>

    x_ <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="sym">}</span>

  eos_ <span class="sym">=</span> <span class="kwa">true</span> <span class="sym">;</span> <span class="kwa">return</span> EOS<span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* ----------- */</span>

<span class="kwb">void</span> MandelbrotGenerator<span class="sym">::</span><span class="kwd">reset</span><span class="sym">()</span>
<span class="sym">{</span>
  x_ <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y_ <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> eos_ <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* ----------- */</span>

<span class="kwb">void</span> MandelbrotGenerator<span class="sym">::</span><span class="kwd">header</span><span class="sym">(</span>ostream<span class="sym">&amp;</span> out<span class="sym">)</span> <span class="kwb">const</span>
<span class="sym">{</span>
  out <span class="sym">&lt;&lt;</span> <span class="str">&quot;P4&quot;</span> <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">&lt;&lt;</span> width_ <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> height_ <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* ----------- */</span>

<span class="kwb">int</span> MandelbrotGenerator<span class="sym">::</span><span class="kwd">mandel</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">const</span> Complex<span class="sym">&amp;</span> z<span class="sym">,</span> <span class="kwb">const</span> Complex<span class="sym">&amp;</span> c<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">real</span><span class="sym">(</span>z <span class="sym">*</span> <span class="kwd">conj</span><span class="sym">(</span>z<span class="sym">)) &gt;</span> <span class="num">4.0</span><span class="sym">)</span> <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">return</span> MandelbrotGenerator<span class="sym">::</span><span class="kwd">mandel</span><span class="sym">(--</span>n<span class="sym">,</span> z <span class="sym">*</span> z <span class="sym">+</span> c<span class="sym">,</span> c<span class="sym">);</span>
<span class="sym">}</span>

