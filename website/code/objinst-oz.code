<span class="slc">%%% $Id: objinst-oz.code,v 1.8 2006-10-02 01:08:42 bfulgham Exp $</span>
<span class="slc">%%% http://dada.perl.it/shootout/</span>
<span class="slc">%%%</span>
<span class="slc">%%% contributed by Isaac Gouy</span>

<span class="slc">%% Uses local variables within the Object Instantiation</span>
<span class="slc">%% loops. It might be quicker to create a Cell outside</span>
<span class="slc">%% of the loop and use {Assign T {New Toggle init(true)}}</span>
<span class="slc">%%</span>
<span class="slc">%%  Usage: start from command line with</span>
<span class="slc">%%     ozc -x objinst.oz -o objinst.oz.exe</span>
<span class="slc">%%     objinst.oz.exe 1000000</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> System Application

<span class="kwa">define</span>

<span class="kwa">class</span> Toggle
   <span class="kwa">attr</span> state<span class="sym">:</span> <span class="kwa">true</span>
   <span class="kwa">meth</span> state<span class="sym">(</span>V<span class="sym">)</span>
     V <span class="sym">= &#64;</span>state
   <span class="kwa">end</span>
   <span class="kwa">meth</span> activate
      state <span class="sym">&lt;- {</span>Not <span class="sym">&#64;</span>state<span class="sym">}</span>
   <span class="kwa">end</span>
   <span class="kwa">meth</span> init<span class="sym">(</span>State<span class="sym">)</span>
      state <span class="sym">&lt;-</span> State
   <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">class</span> NthToggle <span class="kwa">from</span> Toggle
   <span class="kwa">attr</span> trigger<span class="sym">:</span><span class="num">0</span> count<span class="sym">:</span><span class="num">0</span>
   <span class="kwa">meth</span> activate
      count <span class="sym">&lt;- &#64;</span>count <span class="sym">+</span> <span class="num">1</span>
      <span class="kwa">if</span> <span class="sym">&#64;</span>count <span class="sym">&gt;= &#64;</span>trigger <span class="kwa">then</span>
     state <span class="sym">&lt;- {</span>Not <span class="sym">&#64;</span>state<span class="sym">}</span>
     count <span class="sym">&lt;-</span> <span class="num">0</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>
   <span class="kwa">meth</span> init<span class="sym">(</span>State Trigger<span class="sym">)</span>
      Toggle<span class="sym">,</span>init<span class="sym">(</span>State<span class="sym">)</span>
      trigger <span class="sym">&lt;-</span> Trigger
      count <span class="sym">&lt;-</span> <span class="num">0</span>
   <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">in</span>
   <span class="kwa">local</span> Args N T1 T2 <span class="kwa">in</span>
      <span class="sym">[</span>Args<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
      N <span class="sym">= {</span>String<span class="sym">.</span>toInt Args<span class="sym">}</span>

      T1 <span class="sym">= {</span>New Toggle init<span class="sym">(</span><span class="kwa">true</span><span class="sym">)}</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">.</span><span class="num">.5</span> do
         <span class="kwa">local</span> V <span class="kwa">in</span> <span class="sym">{</span>T1 activate<span class="sym">}{</span>T1 state<span class="sym">(</span>V<span class="sym">)}{</span>System<span class="sym">.</span>show V<span class="sym">}</span> <span class="kwa">end</span>
      <span class="kwa">end</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;&quot;<span class="sym">}</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>N do
         <span class="kwa">local</span> T <span class="kwa">in</span> T <span class="sym">= {</span>New Toggle init<span class="sym">(</span><span class="kwa">true</span><span class="sym">)}</span> <span class="kwa">end</span>
      <span class="kwa">end</span>

      T2 <span class="sym">= {</span>New NthToggle init<span class="sym">(</span><span class="kwa">true</span> <span class="num">3</span><span class="sym">)}</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">.</span><span class="num">.8</span> do
         <span class="kwa">local</span> V <span class="kwa">in</span> <span class="sym">{</span>T2 activate<span class="sym">}{</span>T2 state<span class="sym">(</span>V<span class="sym">)}{</span>System<span class="sym">.</span>show V<span class="sym">}</span> <span class="kwa">end</span>
      <span class="kwa">end</span>

      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>N do
         <span class="kwa">local</span> T <span class="kwa">in</span> T <span class="sym">= {</span>New NthToggle init<span class="sym">(</span><span class="kwa">true</span> <span class="num">3</span><span class="sym">)}</span> <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
