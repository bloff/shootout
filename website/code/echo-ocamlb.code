<span class="com">(*</span>
<span class="com"> * $Id: echo-ocamlb.code,v 1.7 2006-09-20 05:51:09 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * with help from Markus Mottl</span>
<span class="com"> *)</span>

<span class="kwa">open</span> Unix

<span class="kwa">let</span> data <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span>

<span class="kwa">let rec</span> sock_write sock buf offset <span class="sym">=</span> <span class="kwa">function</span>
  <span class="sym">|</span> <span class="num">0</span> <span class="sym">-&gt; ()</span>
  <span class="sym">|</span> len <span class="sym">-&gt;</span>
      <span class="kwa">let</span> nwritten <span class="sym">=</span> write sock buf offset len <span class="kwa">in</span>
      sock_write sock <span class="kwd">buf</span> <span class="sym">(</span>offset <span class="sym">+</span> nwritten<span class="sym">) (</span>len <span class="sym">-</span> nwritten<span class="sym">)</span>

<span class="kwa">let</span> sock_readline buf sock <span class="sym">=</span>
  <span class="kwa">let</span> offset <span class="sym">=</span> <span class="kwd">ref</span> <span class="sym">(</span>read sock buf <span class="num">0 64</span><span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">while</span> buf.<span class="sym">[!</span>offset <span class="sym">-</span> <span class="num">1</span><span class="sym">] &lt;&gt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="kwa">do</span>
    offset <span class="sym">:= !</span>offset <span class="sym">+</span> read sock buf <span class="sym">!</span>offset <span class="num">64</span>
  <span class="kwa">done</span><span class="sym">;</span>
  <span class="sym">!</span>offset

<span class="kwa">let rec</span> buf_ok buf n <span class="sym">=</span> n <span class="sym">&lt;=</span> <span class="num">0</span> <span class="sym">||</span> buf.<span class="sym">[</span>n<span class="sym">] =</span> data.<span class="sym">[</span>n<span class="sym">] &amp;&amp;</span> buf_ok <span class="kwd">buf</span> <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>

<span class="kwa">let</span> echo_client n port <span class="sym">=</span>
  <span class="kwa">let</span> sock <span class="sym">=</span> socket PF_INET SOCK_STREAM <span class="num">0</span> <span class="kwa">in</span>
  connect <span class="kwd">sock</span> <span class="sym">(</span><span class="kwd">ADDR_INET</span> <span class="sym">(</span>inet_addr_of_string <span class="str">&quot;127.0.0.1&quot;</span><span class="sym">,</span> port<span class="sym">));</span>
  <span class="kwa">let</span> len <span class="sym">=</span> String.length data <span class="kwa">and</span> buf <span class="sym">=</span> String.create <span class="num">64</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span>
    sock_write sock data <span class="num">0</span> len<span class="sym">;</span>
    <span class="kwa">let</span> ans_len <span class="sym">=</span> sock_readline buf sock <span class="kwa">in</span>
    <span class="kwa">if</span> ans_len <span class="sym">&lt;&gt;</span> len <span class="sym">||</span> <span class="kwd">not</span> <span class="sym">(</span>buf_ok <span class="kwd">buf</span> <span class="sym">(</span>len <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span> <span class="kwa">then</span>
      <span class="kwd">failwith</span> <span class="sym">(</span><span class="str">&quot;client got bad data: &quot;</span> ^ String.sub buf <span class="num">0</span> ans_len<span class="sym">)</span>
  <span class="kwa">done</span><span class="sym">;</span>
  close sock

<span class="kwa">let</span> ssock <span class="sym">=</span>
  <span class="kwa">let</span> ssock <span class="sym">=</span> socket PF_INET SOCK_STREAM <span class="num">0</span>
  <span class="kwa">and</span> addr <span class="sym">=</span> inet_addr_of_string <span class="str">&quot;127.0.0.1&quot;</span> <span class="kwa">in</span>
  bind <span class="kwd">ssock</span> <span class="sym">(</span><span class="kwd">ADDR_INET</span> <span class="sym">(</span>addr<span class="sym">,</span> <span class="num">0</span><span class="sym">));</span>
  setsockopt ssock SO_REUSEADDR <span class="kwa">true</span><span class="sym">;</span>
  listen ssock <span class="num">2</span><span class="sym">;</span>
  ssock

<span class="kwa">let</span> get_port sock <span class="sym">=</span>
  <span class="kwa">match</span> getsockname sock <span class="kwa">with</span>
  <span class="sym">|</span> <span class="kwd">ADDR_INET</span> <span class="sym">(</span>_<span class="sym">,</span> port<span class="sym">) -&gt;</span> port
  <span class="sym">|</span> ADDR_UNIX _ <span class="sym">-&gt;</span> failwith <span class="str">&quot;getsockname&quot;</span>

<span class="kwa">let</span> echo_server n <span class="sym">=</span>
  <span class="kwa">let</span> port <span class="sym">=</span> get_port ssock <span class="kwa">and</span> pid <span class="sym">=</span> <span class="kwd">fork</span><span class="sym">()</span> <span class="kwa">in</span>
  <span class="kwa">if</span> pid <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then begin</span>
    <span class="kwa">let</span> csock<span class="sym">,</span> addr <span class="sym">=</span> accept ssock
    <span class="kwa">and</span> buf <span class="sym">=</span> String.create <span class="num">64</span> <span class="kwa">and</span> len <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">and</span> nread <span class="sym">=</span> ref <span class="num">1</span> <span class="kwa">in</span>
    <span class="kwa">while</span> <span class="sym">!</span>nread <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">do</span>
      nread <span class="sym">:=</span> read csock buf <span class="num">0 64</span><span class="sym">;</span>
      sock_write csock buf <span class="num">0</span> <span class="sym">!</span>nread<span class="sym">;</span>
      len <span class="sym">:= !</span>len <span class="sym">+ !</span>nread
    <span class="kwa">done</span><span class="sym">;</span>
    <span class="kwd">ignore</span> <span class="sym">(</span><span class="kwd">wait</span> <span class="sym">());</span>
    Printf.printf <span class="str">&quot;server processed %d bytes</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">!</span>len <span class="kwa">end</span>
  <span class="kwa">else</span> echo_client n port

<span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">if</span> Array.length Sys.argv <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;;</span>
echo_server n
