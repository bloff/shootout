<span class="line">    1 </span><span class="slc">;;; -*- mode: scheme -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: echo-bigloo.code,v 1.3 2004-11-11 07:13:56 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">(</span>module echo
<span class="line">    6 </span>        <span class="slc">;(option (set! *genericity* #f))
</span><span class="line">    7 </span><span class="slc"></span>        <span class="sym">(</span>extern <span class="sym">(</span>macro fork<span class="sym">::</span>int <span class="sym">()</span> <span class="str">&quot;fork&quot;</span><span class="sym">))
</span><span class="line">    8 </span><span class="sym">        (</span>extern <span class="sym">(</span>macro wait<span class="sym">::</span>int <span class="sym">()</span> <span class="str">&quot;wait&quot;</span><span class="sym">))
</span><span class="line">    9 </span><span class="sym">        (</span>main main<span class="sym">))
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span><span class="slc">;; we'll use bigloo functions that automatically add/remove newline
</span><span class="line">   12 </span><span class="slc"></span><span class="sym">(</span>define DATA <span class="str">&quot;Hello there sailor&quot;</span><span class="sym">)
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym">(</span>define <span class="sym">(</span>echo<span class="sym">-</span>client n port<span class="sym">)
</span><span class="line">   15 </span><span class="sym">  (</span>let<span class="sym">* ((</span>sock <span class="sym">(</span>make<span class="sym">-</span>client<span class="sym">-</span>socket <span class="str">&quot;localhost&quot;</span> port<span class="sym">))
</span><span class="line">   16 </span><span class="sym">         (</span>sk<span class="sym">-</span>out <span class="sym">(</span>socket<span class="sym">-</span>output sock<span class="sym">))
</span><span class="line">   17 </span><span class="sym">         (</span>sk<span class="sym">-</span>in <span class="sym">(</span>socket<span class="sym">-</span>input sock<span class="sym">)))
</span><span class="line">   18 </span><span class="sym">    (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
</span><span class="line">   19 </span><span class="sym">        ((=</span> i n<span class="sym">))
</span><span class="line">   20 </span><span class="sym">      (</span>fprint sk<span class="sym">-</span>out DATA<span class="sym">)
</span><span class="line">   21 </span><span class="sym">      (</span>flush<span class="sym">-</span>output<span class="sym">-</span>port sk<span class="sym">-</span>out<span class="sym">)
</span><span class="line">   22 </span><span class="sym">      (</span>let <span class="sym">((</span>ans <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> sk<span class="sym">-</span>in<span class="sym">)))
</span><span class="line">   23 </span><span class="sym">        (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>string<span class="sym">=</span>? DATA ans<span class="sym">))
</span><span class="line">   24 </span><span class="sym">            (</span>error <span class="str">&quot;echo-client&quot;</span> <span class="str">&quot;BAD reply&quot;</span> ans<span class="sym">))))))
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym">(</span>define <span class="sym">(</span>echo<span class="sym">-</span>server n<span class="sym">)
</span><span class="line">   27 </span><span class="sym">  (</span>let<span class="sym">* ((</span>ssock <span class="sym">(</span>make<span class="sym">-</span>server<span class="sym">-</span>socket<span class="sym">))
</span><span class="line">   28 </span><span class="sym">         (</span>port <span class="sym">(</span>socket<span class="sym">-</span>port<span class="sym">-</span>number ssock<span class="sym">))
</span><span class="line">   29 </span><span class="sym">         (</span>pid <span class="sym">(</span>fork<span class="sym">)))
</span><span class="line">   30 </span><span class="sym">    (</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> pid <span class="num">0</span><span class="sym">)</span>                        <span class="slc">;parent
</span><span class="line">   31 </span><span class="slc"></span>           <span class="sym">(</span>socket<span class="sym">-</span>accept<span class="sym">-</span>connection ssock<span class="sym">)
</span><span class="line">   32 </span><span class="sym">           (</span>let <span class="sym">((</span>sk<span class="sym">-</span>in <span class="sym">(</span>socket<span class="sym">-</span>input ssock<span class="sym">))
</span><span class="line">   33 </span><span class="sym">                 (</span>sk<span class="sym">-</span>out <span class="sym">(</span>socket<span class="sym">-</span>output ssock<span class="sym">))
</span><span class="line">   34 </span><span class="sym">                 (</span>bytes <span class="num">0</span><span class="sym">))
</span><span class="line">   35 </span><span class="sym">             (</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> sk<span class="sym">-</span>in<span class="sym">)))
</span><span class="line">   36 </span><span class="sym">               (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>eof<span class="sym">-</span>object? <span class="kwa">line</span><span class="sym">))
</span><span class="line">   37 </span><span class="sym">                   (</span>begin
<span class="line">   38 </span>                     <span class="sym">(</span>fprint sk<span class="sym">-</span>out <span class="kwa">line</span><span class="sym">)
</span><span class="line">   39 </span><span class="sym">                     (</span>flush<span class="sym">-</span>output<span class="sym">-</span>port sk<span class="sym">-</span>out<span class="sym">)
</span><span class="line">   40 </span><span class="sym">                     (</span><span class="kwa">set</span><span class="sym">!</span> bytes <span class="sym">(+</span> bytes <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length line</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   41 </span><span class="sym">                     (</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> sk<span class="sym">-</span>in<span class="sym">)))))
</span><span class="line">   42 </span><span class="sym">             (</span><span class="kwa">print</span> <span class="str">&quot;server processed &quot;</span> bytes <span class="str">&quot; bytes&quot;</span><span class="sym">))
</span><span class="line">   43 </span><span class="sym">           (</span>wait<span class="sym">))
</span><span class="line">   44 </span><span class="sym">          (</span>else                                <span class="slc">;child
</span><span class="line">   45 </span><span class="slc"></span>           <span class="sym">(</span>echo<span class="sym">-</span>client n port<span class="sym">)))))
</span><span class="line">   46 </span><span class="sym">
</span><span class="line">   47 </span><span class="sym">
</span><span class="line">   48 </span><span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
</span><span class="line">   49 </span><span class="sym">  (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))
</span><span class="line">   50 </span><span class="sym">    (</span>echo<span class="sym">-</span>server n<span class="sym">)))</span>
