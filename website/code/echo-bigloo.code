<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: scheme -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: echo-bigloo.code,v 1.1 2004-11-02 08:52:29 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I>
(module echo
	<I><FONT COLOR="#B22222">;(option (set! *genericity* #f))
</FONT></I>	(extern (macro fork::int () <B><FONT COLOR="#BC8F8F">&quot;fork&quot;</FONT></B>))
	(extern (macro wait::int () <B><FONT COLOR="#BC8F8F">&quot;wait&quot;</FONT></B>))
	(main main))

<I><FONT COLOR="#B22222">;; we'll use bigloo functions that automatically add/remove newline
</FONT></I>(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">DATA</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;Hello there sailor&quot;</FONT></B>)

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">echo-client</FONT></B> n port)
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((sock (make-client-socket <B><FONT COLOR="#BC8F8F">&quot;localhost&quot;</FONT></B> port))
	 (sk-out (socket-output sock))
	 (sk-in (socket-input sock)))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (+ i 1)))
	((= i n))
      (fprint sk-out DATA)
      (flush-output-port sk-out)
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((ans (read-line sk-in)))
	(<B><FONT COLOR="#A020F0">if</FONT></B> (not (string=? DATA ans))
	    (error <B><FONT COLOR="#BC8F8F">&quot;echo-client&quot;</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;BAD reply&quot;</FONT></B> ans))))))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">echo-server</FONT></B> n)
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((ssock (make-server-socket)) 
	 (port (socket-port-number ssock))
	 (pid (fork)))
    (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; pid 0)			<I><FONT COLOR="#B22222">;parent
</FONT></I>	   (socket-accept-connection ssock)
	   (<B><FONT COLOR="#A020F0">let</FONT></B> ((sk-in (socket-input ssock))
		 (sk-out (socket-output ssock))
		 (bytes 0))
	     (<B><FONT COLOR="#A020F0">let</FONT></B> loop ((line (read-line sk-in)))
	       (<B><FONT COLOR="#A020F0">if</FONT></B> (not (eof-object? line))
		   (<B><FONT COLOR="#A020F0">begin</FONT></B>
		     (fprint sk-out line)
		     (flush-output-port sk-out)
		     (<B><FONT COLOR="#A020F0">set!</FONT></B> bytes (+ bytes (string-length line) 1))
		     (loop (read-line sk-in)))))
	     (print <B><FONT COLOR="#BC8F8F">&quot;server processed &quot;</FONT></B> bytes <B><FONT COLOR="#BC8F8F">&quot; bytes&quot;</FONT></B>))
	   (wait))
	  (<B><FONT COLOR="#A020F0">else</FONT></B>				<I><FONT COLOR="#B22222">;child
</FONT></I>	   (echo-client n port)))))


(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (length args) 2) (string-&gt;number (cadr args))) 1)))
    (echo-server n)))</pre></td></tr></table>
