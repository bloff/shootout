<span class="line">    1 </span><span class="slc">;;; -*- mode: emacs-lisp -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: ackermann-xemacs.code,v 1.4 2004-11-13 07:40:56 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">(</span><span class="kwa">setq max</span><span class="sym">-</span>lisp<span class="sym">-</span><span class="kwa">eval</span><span class="sym">-</span>depth <span class="num">8000</span><span class="sym">)
</span><span class="line">    6 </span><span class="sym">(</span><span class="kwa">setq max</span><span class="sym">-</span>specpdl<span class="sym">-</span>size <span class="num">5000</span><span class="sym">)
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym">(</span><span class="kwa">defun</span> Ack <span class="sym">(</span>M N<span class="sym">)
</span><span class="line">    9 </span><span class="sym">  (</span><span class="kwa">cond</span> <span class="sym">((=</span> M <span class="num">0</span><span class="sym">) (+</span> N <span class="num">1</span><span class="sym">))
</span><span class="line">   10 </span><span class="sym">        ((=</span> N <span class="num">0</span><span class="sym">) (</span>Ack <span class="sym">(-</span> M <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   11 </span><span class="sym">        (</span>t <span class="sym">(</span>Ack <span class="sym">(-</span> M <span class="num">1</span><span class="sym">) (</span>Ack M <span class="sym">(-</span> N <span class="num">1</span><span class="sym">))))))
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()
</span><span class="line">   14 </span><span class="sym">  (</span>let<span class="sym">* ((</span>arg <span class="sym">(</span><span class="kwa">car command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>args<span class="sym">-</span>left<span class="sym">))
</span><span class="line">   15 </span><span class="sym">         (</span>num <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span>string<span class="sym">-</span>to<span class="sym">-</span>number arg<span class="sym">)</span> <span class="num">1</span><span class="sym">)))
</span><span class="line">   16 </span><span class="sym">    (</span><span class="kwa">princ</span> <span class="sym">(</span>format <span class="str">&quot;Ack(3,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span> num <span class="sym">(</span>Ack <span class="num">3</span> num<span class="sym">)))))</span>
