#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>php <span class="sym">-</span>f
<span class="sym">&lt;</span>?php
<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   php -q matrix.php 600</span>
<span class="com">*/</span>


<span class="kwa">set_time_limit</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>

<span class="kwb">$SIZE</span> <span class="sym">=</span> <span class="num">30</span><span class="sym">;</span>

<span class="kwa">function</span> mkMatrix <span class="sym">(</span><span class="kwb">$rows</span><span class="sym">,</span> <span class="kwb">$cols</span><span class="sym">) {</span>
    <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;</span><span class="kwb">$rows</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$j</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">&lt;</span><span class="kwb">$cols</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">++) {</span>
	    <span class="kwb">$m</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">][</span><span class="kwb">$j</span><span class="sym">] =</span> <span class="kwb">$count</span><span class="sym">++;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="kwb">$m</span><span class="sym">;</span>
<span class="sym">}</span>


<span class="kwa">function</span> mkZeroMatrix <span class="sym">(</span><span class="kwb">$rows</span><span class="sym">,</span> <span class="kwb">$cols</span><span class="sym">) {</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;</span><span class="kwb">$rows</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$j</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">&lt;</span><span class="kwb">$cols</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">++) {</span>
	    <span class="kwb">$m</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">][</span><span class="kwb">$j</span><span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="kwb">$m</span><span class="sym">;</span>
<span class="sym">}</span>


<span class="kwa">function</span> mmult <span class="sym">(</span><span class="kwb">$rows</span><span class="sym">,</span> <span class="kwb">$cols</span><span class="sym">, &amp;</span><span class="kwb">$m1</span><span class="sym">, &amp;</span><span class="kwb">$m2</span><span class="sym">, &amp;</span><span class="kwb">$mm</span><span class="sym">) {</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;</span><span class="kwb">$rows</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$j</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">&lt;</span><span class="kwb">$cols</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">++) {</span>
	    <span class="kwb">$x</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$k</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$k</span><span class="sym">&lt;</span><span class="kwb">$cols</span><span class="sym">;</span> <span class="kwb">$k</span><span class="sym">++) {</span>
		<span class="kwb">$x</span> <span class="sym">+=</span> <span class="kwb">$m1</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">][</span><span class="kwb">$k</span><span class="sym">] *</span> <span class="kwb">$m2</span><span class="sym">[</span><span class="kwb">$k</span><span class="sym">][</span><span class="kwb">$j</span><span class="sym">];</span>
	    <span class="sym">}</span>
	    <span class="kwb">$mm</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">][</span><span class="kwb">$j</span><span class="sym">] =</span> <span class="kwb">$x</span><span class="sym">;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="kwb">$mm</span><span class="sym">;</span>
<span class="sym">}</span>


<span class="kwb">$n</span> <span class="sym">= (</span><span class="kwb">$argc</span> <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwb">$argv</span><span class="sym">[</span><span class="num">1</span><span class="sym">] :</span> <span class="num">1</span><span class="sym">;</span>

<span class="kwb">$m1</span> <span class="sym">=</span> mkMatrix<span class="sym">(</span><span class="kwb">$SIZE</span><span class="sym">,</span> <span class="kwb">$SIZE</span><span class="sym">);</span>
<span class="kwb">$m2</span> <span class="sym">=</span> mkMatrix<span class="sym">(</span><span class="kwb">$SIZE</span><span class="sym">,</span> <span class="kwb">$SIZE</span><span class="sym">);</span>
<span class="kwb">$mm</span> <span class="sym">=</span> mkZeroMatrix<span class="sym">(</span><span class="kwb">$SIZE</span><span class="sym">,</span> <span class="kwb">$SIZE</span><span class="sym">);</span>

<span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$n</span><span class="sym">--)</span>
    mmult<span class="sym">(</span><span class="kwb">$SIZE</span><span class="sym">,</span> <span class="kwb">$SIZE</span><span class="sym">,</span> <span class="kwb">$m1</span><span class="sym">,</span> <span class="kwb">$m2</span><span class="sym">,</span> <span class="kwb">$mm</span><span class="sym">);</span>


<span class="kwa">print</span> <span class="str">&quot;{$mm[0][0]} {$mm[2][3]} {$mm[3][2]} {$mm[4][4]}</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>

?<span class="sym">&gt;</span>
