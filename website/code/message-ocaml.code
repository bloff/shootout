<span class="com">(* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by David Teller (D.O.Teller&#64;sussex.ac.uk)
*)</span>

<span class="kwa">let</span> adder_thread <span class="sym">(</span>incoming<span class="sym">,</span> outgoing<span class="sym">) =
</span>  <span class="kwa">while true do
</span>    Event.sync<span class="sym">(</span>Event.send outgoing <span class="sym">(</span>Event.sync<span class="sym">(</span>Event.receive incoming<span class="sym">) +</span> <span class="num">1</span><span class="sym">))
</span>  <span class="kwa">done

let rec</span> make_chain n cur <span class="sym">=
</span>  <span class="kwa">if</span> n <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> cur <span class="kwa">else
    let</span> next <span class="sym">=</span> Event.new_channel<span class="sym">()</span> <span class="kwa">in
    let</span> _ <span class="sym">=</span> Thread.create adder_thread <span class="sym">(</span>cur<span class="sym">,</span> next<span class="sym">)</span> <span class="kwa">in
</span>    make_chain <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)</span> next

<span class="kwa">let rec</span> sum chan0 chan1 total n <span class="sym">=
</span>  <span class="kwa">if</span> n <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> total <span class="kwa">else</span> <span class="sym">(
</span>    Event.sync<span class="sym">(</span>Event.send chan0 <span class="num">0</span><span class="sym">);
</span>    sum chan0 chan1 <span class="sym">(</span>total <span class="sym">+</span> Event.sync<span class="sym">(</span>Event.receive chan1<span class="sym">)) (</span>n<span class="num">-1</span><span class="sym">)
  )

</span><span class="kwa">let</span> <span class="sym">() =
</span>  <span class="kwa">let</span> n <span class="sym">=</span> int_of_string<span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)
</span>  <span class="kwa">and</span> first_channel <span class="sym">=</span> Event.new_channel<span class="sym">()</span> <span class="kwa">in
  let</span> last_channel  <span class="sym">=</span> make_chain <span class="num">3000</span> first_channel <span class="kwa">in
</span>  print_int<span class="sym">(</span>sum first_channel last_channel <span class="num">0</span> n<span class="sym">)</span>
