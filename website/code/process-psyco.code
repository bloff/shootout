<span class="slc">#!/usr/bin/python -OO
</span><span class="slc"># The Computer Language Shootout Benchmarks
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># contributed by Kevin Carson
</span>
<span class="kwc">from</span> threading <span class="kwc">import</span> Thread
<span class="kwc">from</span> Queue <span class="kwc">import</span> Queue
<span class="kwc">from</span> sys <span class="kwc">import</span> argv
<span class="kwc">import</span> psyco

psyco<span class="sym">.</span>full<span class="sym">()


</span><span class="kwa">class</span> link<span class="sym">(</span>Thread<span class="sym">) :
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> next<span class="sym">) :
</span>        Thread<span class="sym">.</span>__init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">)
</span>        <span class="kwc">self</span><span class="sym">.</span>next <span class="sym">=</span> next
        <span class="kwc">self</span><span class="sym">.</span>inq <span class="sym">=</span> Queue<span class="sym">(</span><span class="num">1</span><span class="sym">)

</span>    <span class="kwb">def</span> run<span class="sym">(</span><span class="kwc">self</span><span class="sym">) :
</span>        <span class="kwc">self</span><span class="sym">.</span>store <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>inq<span class="sym">.</span>get<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>next<span class="sym">.</span>inq<span class="sym">.</span>put<span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>store <span class="sym">+</span> <span class="num">1</span><span class="sym">)


</span><span class="kwa">class</span> terminus<span class="sym">(</span>Thread<span class="sym">) :
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">) :
</span>        Thread<span class="sym">.</span>__init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">)
</span>        <span class="kwc">self</span><span class="sym">.</span>inq <span class="sym">=</span> Queue<span class="sym">(</span><span class="num">1</span><span class="sym">)

</span>    <span class="kwb">def</span> run<span class="sym">(</span><span class="kwc">self</span><span class="sym">) :
</span>        <span class="kwc">self</span><span class="sym">.</span>sum <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>inq<span class="sym">.</span>get<span class="sym">()
</span>        <span class="kwb">print</span> <span class="str">&quot;%d&quot;</span> <span class="sym">%</span> <span class="kwc">self</span><span class="sym">.</span>sum


N <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])

</span><span class="slc"># Create the chain of threads then fire them up
</span>chain_length <span class="sym">=</span> N <span class="sym">+</span> <span class="num">1
</span>tasks <span class="sym">= [</span>None<span class="sym">] *</span> chain_length
tasks<span class="sym">[</span>N<span class="sym">] =</span> terminus<span class="sym">()
</span>tasks<span class="sym">[</span>N <span class="num">- 1</span><span class="sym">] =</span> link<span class="sym">(</span>tasks<span class="sym">[</span>N<span class="sym">])

</span><span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>N <span class="num">- 2</span><span class="sym">, -</span><span class="num">1</span><span class="sym">, -</span><span class="num">1</span><span class="sym">) :
</span>    tasks<span class="sym">[</span>i<span class="sym">] =</span> link<span class="sym">(</span>tasks<span class="sym">[</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">])

</span><span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>chain_length<span class="sym">) :
</span>    tasks<span class="sym">[</span>i<span class="sym">].</span>start<span class="sym">()

</span><span class="slc"># Feed the chain with an integer message
</span>tasks<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>inq<span class="sym">.</span>put<span class="sym">(</span><span class="num">0</span><span class="sym">)

</span><span class="slc"># Wait upon the terminus process
</span>tasks<span class="sym">[</span>N<span class="sym">].</span>join<span class="sym">()</span>
