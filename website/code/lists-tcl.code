<span class="line">    1 </span><span class="slc">#!/usr/bin/tclsh
</span><span class="line">    2 </span><span class="slc"></span><span class="slc"># $Id: lists-tcl.code,v 1.3 2004-11-11 07:13:59 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc"># from Kristoffer Lawson
</span><span class="line">    5 </span><span class="slc"></span><span class="slc"># Modified by Tom Wilkason
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="kwa">set</span> SIZE <span class="num">10000
</span><span class="line">    8 </span><span class="num">
</span><span class="line">    9 </span><span class="num"></span><span class="kwa">proc</span> K <span class="sym">{</span>a b<span class="sym">} {</span><span class="kwa">set</span> a<span class="sym">}
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span><span class="kwa">proc</span> ldelete <span class="sym">{</span>listName index<span class="sym">} {
</span><span class="line">   12 </span><span class="sym"></span>    <span class="kwa">upvar</span> <span class="kwb">$listName</span> <span class="kwa">list
</span><span class="line">   13 </span><span class="kwa"></span>    <span class="sym">;</span><span class="slc"># Replace a deletion with null, much faster
</span><span class="line">   14 </span><span class="slc"></span>    <span class="kwa">set list</span> <span class="sym">[</span><span class="kwa">lreplace</span> <span class="sym">[</span>K <span class="kwb">$list</span> <span class="sym">[</span><span class="kwa">set list</span> <span class="sym">{}]]</span> <span class="kwb">$index $index</span><span class="sym">]
</span><span class="line">   15 </span><span class="sym">}
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span><span class="kwa">proc</span> lreverse <span class="sym">{</span>_list<span class="sym">} {
</span><span class="line">   18 </span><span class="sym"></span>    <span class="kwa">upvar</span> <span class="kwb">$_list</span> List
<span class="line">   19 </span>    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{[</span><span class="kwa">llength</span> <span class="kwb">$List</span><span class="sym">] -</span> <span class="num">1</span><span class="sym">}]} {</span><span class="kwb">$i</span> <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">} {</span><span class="kwa">incr</span> i <span class="num">-1</span><span class="sym">} {
</span><span class="line">   20 </span><span class="sym"></span>        <span class="kwa">lappend</span> Li1r <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$List $i</span><span class="sym">]
</span><span class="line">   21 </span><span class="sym">    }
</span><span class="line">   22 </span><span class="sym"></span>    <span class="kwa">set</span> List <span class="kwb">$Li1r
</span><span class="line">   23 </span><span class="kwb"></span>    <span class="kwa">unset</span> Li1r
<span class="line">   24 </span><span class="sym">}
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span><span class="kwa">proc</span> test_lists <span class="sym">{</span>args<span class="sym">} {
</span><span class="line">   27 </span><span class="sym"></span>    <span class="slc"># create a list of integers (Li1) from 1 to SIZE
</span><span class="line">   28 </span><span class="slc"></span>    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">1</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="kwb">$</span><span class="sym">::</span>SIZE<span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span><span class="kwa">lappend</span> Li1 <span class="kwb">$i</span><span class="sym">}
</span><span class="line">   29 </span><span class="sym"></span>    <span class="slc"># copy the list to Li2 (not by individual items)
</span><span class="line">   30 </span><span class="slc"></span>    <span class="kwa">set</span> Li2 <span class="kwb">$Li1
</span><span class="line">   31 </span><span class="kwb"></span>    <span class="slc"># remove each individual item from left side of Li2 and
</span><span class="line">   32 </span><span class="slc"></span>    <span class="slc"># append to right side of Li3 (preserving order)
</span><span class="line">   33 </span><span class="slc"></span>    lreverse Li2
<span class="line">   34 </span>    <span class="kwa">foreach</span> <span class="sym">{</span>item<span class="sym">}</span> <span class="kwb">$Li2</span> <span class="sym">{
</span><span class="line">   35 </span><span class="sym"></span>        <span class="kwa">lappend</span> Li3 <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$Li2</span> end<span class="sym">]
</span><span class="line">   36 </span><span class="sym"></span>        ldelete Li2 end
<span class="line">   37 </span>    <span class="sym">}
</span><span class="line">   38 </span><span class="sym"></span>    <span class="slc"># Li2 must now be empty
</span><span class="line">   39 </span><span class="slc"></span>    <span class="slc"># remove each individual item from right side of Li3 and
</span><span class="line">   40 </span><span class="slc"></span>    <span class="slc"># append to right side of Li2 (reversing list)
</span><span class="line">   41 </span><span class="slc"></span>    <span class="kwa">foreach</span> <span class="sym">{</span>item<span class="sym">}</span> <span class="kwb">$Li3</span> <span class="sym">{
</span><span class="line">   42 </span><span class="sym"></span>        <span class="kwa">lappend</span> Li2 <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$Li3</span> end<span class="sym">]
</span><span class="line">   43 </span><span class="sym"></span>        ldelete Li3 end
<span class="line">   44 </span>    <span class="sym">}
</span><span class="line">   45 </span><span class="sym"></span>    <span class="slc"># Li3 must now be empty
</span><span class="line">   46 </span><span class="slc"></span>    <span class="slc"># reverse Li1 in place
</span><span class="line">   47 </span><span class="slc"></span>    lreverse Li1
<span class="line">   48 </span>    <span class="slc"># check that first item is now SIZE
</span><span class="line">   49 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">lindex</span> <span class="kwb">$Li1</span> <span class="num">0</span><span class="sym">] !=</span> <span class="kwb">$</span><span class="sym">::</span>SIZE<span class="sym">} {
</span><span class="line">   50 </span><span class="sym"></span>        <span class="kwa">return</span> <span class="str">&quot;fail size [lindex $Li1 0]&quot;</span>
<span class="line">   51 </span>    <span class="sym">}
</span><span class="line">   52 </span><span class="sym"></span>    <span class="slc"># compare Li1 and Li2 for equality
</span><span class="line">   53 </span><span class="slc"></span>    <span class="slc"># and return length of the list
</span><span class="line">   54 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$Li1</span> <span class="sym">==</span> <span class="kwb">$Li2</span><span class="sym">} {
</span><span class="line">   55 </span><span class="sym"></span>        <span class="kwa">return</span> <span class="sym">[</span><span class="kwa">llength</span> <span class="kwb">$Li1</span><span class="sym">]
</span><span class="line">   56 </span><span class="sym">    }</span> else <span class="sym">{
</span><span class="line">   57 </span><span class="sym"></span>        <span class="kwa">return</span> <span class="str">&quot;fail compare&quot;</span>
<span class="line">   58 </span>    <span class="sym">}
</span><span class="line">   59 </span><span class="sym">}
</span><span class="line">   60 </span><span class="sym">
</span><span class="line">   61 </span><span class="sym"></span><span class="kwa">proc</span> main <span class="sym">{</span>args<span class="sym">} {
</span><span class="line">   62 </span><span class="sym"></span>    <span class="kwa">global</span> argv
<span class="line">   63 </span>    <span class="kwa">set</span> NUM <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]
</span><span class="line">   64 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$NUM</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">} {
</span><span class="line">   65 </span><span class="sym"></span>        <span class="kwa">set</span> NUM <span class="num">1
</span><span class="line">   66 </span><span class="num"></span>    <span class="sym">}
</span><span class="line">   67 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">{</span><span class="kwb">$NUM</span> <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">} {
</span><span class="line">   68 </span><span class="sym"></span>        <span class="kwa">set</span> result <span class="sym">[</span>test_lists<span class="sym">]
</span><span class="line">   69 </span><span class="sym"></span>        <span class="kwa">incr</span> NUM <span class="num">-1
</span><span class="line">   70 </span><span class="num"></span>    <span class="sym">}
</span><span class="line">   71 </span><span class="sym"></span>    <span class="kwa">puts</span> <span class="kwb">$result
</span><span class="line">   72 </span><span class="kwb"></span><span class="sym">}
</span><span class="line">   73 </span><span class="sym">
</span><span class="line">   74 </span><span class="sym"></span>main
