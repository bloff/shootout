<span class="slc">#!/usr/bin/tclsh</span>
<span class="slc"># $Id: lists-tcl.code,v 1.5 2005-11-06 23:11:14 bfulgham Exp $</span>
<span class="slc"># http://www.bagley.org/~doug/shootout/</span>
<span class="slc"># from Kristoffer Lawson</span>
<span class="slc"># Modified by Tom Wilkason</span>

<span class="kwa">set</span> SIZE <span class="num">10000</span>

<span class="kwa">proc</span> K <span class="sym">{</span>a b<span class="sym">} {</span><span class="kwa">set</span> a<span class="sym">}</span>

<span class="kwa">proc</span> ldelete <span class="sym">{</span>listName index<span class="sym">} {</span>
    <span class="kwa">upvar</span> <span class="kwb">$listName</span> <span class="kwa">list</span>
    <span class="sym">;</span><span class="slc"># Replace a deletion with null, much faster</span>
    <span class="kwa">set list</span> <span class="sym">[</span><span class="kwa">lreplace</span> <span class="sym">[</span>K <span class="kwb">$list</span> <span class="sym">[</span><span class="kwa">set list</span> <span class="sym">{}]]</span> <span class="kwb">$index $index</span><span class="sym">]</span>
<span class="sym">}</span>

<span class="kwa">proc</span> lreverse <span class="sym">{</span>_list<span class="sym">} {</span>
    <span class="kwa">upvar</span> <span class="kwb">$_list</span> List
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{[</span><span class="kwa">llength</span> <span class="kwb">$List</span><span class="sym">] -</span> <span class="num">1</span><span class="sym">}]} {</span><span class="kwb">$i</span> <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">} {</span><span class="kwa">incr</span> i <span class="sym">-</span><span class="num">1</span><span class="sym">} {</span>
	<span class="kwa">lappend</span> Li1r <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$List $i</span><span class="sym">]</span>
    <span class="sym">}</span>
    <span class="kwa">set</span> List <span class="kwb">$Li1r</span>
    <span class="kwa">unset</span> Li1r
<span class="sym">}</span>

<span class="kwa">proc</span> test_lists <span class="sym">{</span>args<span class="sym">} {</span>
    <span class="slc"># create a list of integers (Li1) from 1 to SIZE</span>
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">1</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;=</span> $<span class="sym">::</span>SIZE<span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span><span class="kwa">lappend</span> Li1 <span class="kwb">$i</span><span class="sym">}</span>
    <span class="slc"># copy the list to Li2 (not by individual items)</span>
    <span class="kwa">set</span> Li2 <span class="kwb">$Li1</span>
    <span class="slc"># remove each individual item from left side of Li2 and</span>
    <span class="slc"># append to right side of Li3 (preserving order)</span>
    lreverse Li2
    <span class="kwa">foreach</span> <span class="sym">{</span>item<span class="sym">}</span> <span class="kwb">$Li2</span> <span class="sym">{</span>
	<span class="kwa">lappend</span> Li3 <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$Li2</span> end<span class="sym">]</span>
	ldelete Li2 end
    <span class="sym">}</span>
    <span class="slc"># Li2 must now be empty</span>
    <span class="slc"># remove each individual item from right side of Li3 and</span>
    <span class="slc"># append to right side of Li2 (reversing list)</span>
    <span class="kwa">foreach</span> <span class="sym">{</span>item<span class="sym">}</span> <span class="kwb">$Li3</span> <span class="sym">{</span>
	<span class="kwa">lappend</span> Li2 <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$Li3</span> end<span class="sym">]</span>
	ldelete Li3 end
    <span class="sym">}</span>
    <span class="slc"># Li3 must now be empty</span>
    <span class="slc"># reverse Li1 in place</span>
    lreverse Li1
    <span class="slc"># check that first item is now SIZE</span>
    <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">lindex</span> <span class="kwb">$Li1</span> <span class="num">0</span><span class="sym">] !=</span> $<span class="sym">::</span>SIZE<span class="sym">} {</span>
	<span class="kwa">return</span> <span class="str">&quot;fail size [lindex $Li1 0]&quot;</span>
    <span class="sym">}</span>
    <span class="slc"># compare Li1 and Li2 for equality</span>
    <span class="slc"># and return length of the list</span>
    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$Li1</span> <span class="sym">==</span> <span class="kwb">$Li2</span><span class="sym">} {</span>
	<span class="kwa">return</span> <span class="sym">[</span><span class="kwa">llength</span> <span class="kwb">$Li1</span><span class="sym">]</span>
    <span class="sym">}</span> else <span class="sym">{</span>
	<span class="kwa">return</span> <span class="str">&quot;fail compare&quot;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">proc</span> main <span class="sym">{</span>args<span class="sym">} {</span>
    <span class="kwa">global</span> argv
    <span class="kwa">set</span> NUM <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]</span>
    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$NUM</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">} {</span>
	<span class="kwa">set</span> NUM <span class="num">1</span>
    <span class="sym">}</span>
    <span class="kwa">while</span> <span class="sym">{</span><span class="kwb">$NUM</span> <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">} {</span>
	<span class="kwa">set</span> result <span class="sym">[</span>test_lists<span class="sym">]</span>
	<span class="kwa">incr</span> NUM <span class="sym">-</span><span class="num">1</span>
    <span class="sym">}</span>
    <span class="kwa">puts</span> <span class="kwb">$result</span>
<span class="sym">}</span>

main
