<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   http://www.bagley.org/~doug/shootout/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release sieve.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">char</span> flags<span class="sym">[</span><span class="num">8192</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">];</span>
    <span class="kwa">int</span>  count<span class="sym">;</span>

    <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--)</span>
    <span class="sym">{</span>
        count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        flags<span class="sym">[] =</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> flags<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>flags<span class="sym">[</span>i<span class="sym">])</span>
            <span class="sym">{</span>
                <span class="slc">// remove all multiples of prime: i</span>
                <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> j <span class="sym">=</span> i <span class="sym">+</span> i<span class="sym">;</span> j <span class="sym">&lt;</span> flags<span class="sym">.</span>length<span class="sym">;</span> j <span class="sym">+=</span> i<span class="sym">)</span> flags<span class="sym">[</span>j<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
                count<span class="sym">++;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;Count: &quot;</span><span class="sym">,</span>count<span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
