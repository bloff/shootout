<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   http://www.bagley.org/~doug/shootout/

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release sieve.d
*/</span>

import std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)
{
</span>    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;

</span>    <span class="kwb">char</span> flags<span class="sym">[</span><span class="num">8192</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">];
</span>    <span class="kwb">int</span>  count<span class="sym">;

</span>    <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--)
    {
</span>        count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>        flags<span class="sym">[] =</span> <span class="num">1</span><span class="sym">;
</span>        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> flags<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)
        {
</span>            <span class="kwa">if</span><span class="sym">(</span>flags<span class="sym">[</span>i<span class="sym">])
            {
</span>                <span class="slc">// remove all multiples of prime: i
</span>                <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> i <span class="sym">+</span> i<span class="sym">;</span> j <span class="sym">&lt;</span> flags<span class="sym">.</span>length<span class="sym">;</span> j <span class="sym">+=</span> i<span class="sym">)</span> flags<span class="sym">[</span>j<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
</span>                count<span class="sym">++;
            }
        }
    }

</span>    writefln<span class="sym">(</span><span class="str">&quot;Count: &quot;</span><span class="sym">,</span>count<span class="sym">);
}</span>
