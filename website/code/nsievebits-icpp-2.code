<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   written by Jon Harrop, 2005</span>
<span class="com">   modified by Paul Kitchin, 2006</span>
<span class="com">*/</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;limits&gt;</span>
<span class="dir">#include &lt;sstream&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>

<span class="kwb">int</span> <span class="kwd">nsieve</span><span class="sym">(</span><span class="kwb">int</span> max<span class="sym">)</span>
<span class="sym">{</span>
	std<span class="sym">::</span><span class="kwb">size_t const</span> bits <span class="sym">=</span> std<span class="sym">::</span>numeric_limits<span class="sym">&lt;</span> <span class="kwb">unsigned char</span> <span class="sym">&gt;::</span>digits<span class="sym">;</span>
	<span class="kwb">unsigned char</span> masks<span class="sym">[</span>bits<span class="sym">];</span>
	<span class="kwa">for</span> <span class="sym">(</span>std<span class="sym">::</span><span class="kwb">size_t</span> mask <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> mask <span class="sym">&lt;</span> bits<span class="sym">; ++</span>mask<span class="sym">)</span>
	<span class="sym">{</span>
		masks<span class="sym">[</span>mask<span class="sym">] =</span> <span class="num">1</span> <span class="sym">&lt;&lt;</span> mask<span class="sym">;</span>
	<span class="sym">}</span>
	std<span class="sym">::</span>vector<span class="sym">&lt;</span> <span class="kwb">unsigned char</span> <span class="sym">&gt;</span> <span class="kwd">sieve</span><span class="sym">((</span>max <span class="sym">/</span> bits<span class="sym">) +</span> <span class="num">1</span><span class="sym">);</span>
	<span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> value <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> value <span class="sym">&lt;=</span> max<span class="sym">; ++</span>value<span class="sym">)</span>
	<span class="sym">{</span>
		<span class="kwa">if</span> <span class="sym">(!(</span>sieve<span class="sym">[</span>value <span class="sym">/</span> bits<span class="sym">] &amp;</span> masks<span class="sym">[</span>value <span class="sym">%</span> bits<span class="sym">]))</span>
		<span class="sym">{</span>
			<span class="sym">++</span>count<span class="sym">;</span>
			<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> multiple <span class="sym">=</span> value <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span> multiple <span class="sym">&lt;=</span> max<span class="sym">;</span> multiple <span class="sym">+=</span> value<span class="sym">)</span>
			<span class="sym">{</span>
				sieve<span class="sym">[</span>multiple <span class="sym">/</span> bits<span class="sym">] |=</span> masks<span class="sym">[</span>multiple <span class="sym">%</span> bits<span class="sym">];</span>
			<span class="sym">}</span>
		<span class="sym">}</span>
	<span class="sym">}</span>
	<span class="kwa">return</span> count<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">test</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwb">int</span> m <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
	std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Primes up to &quot;</span> <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> m <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setw</span><span class="sym">(</span><span class="num">8</span><span class="sym">) &lt;&lt;</span> <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">) &lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">* *</span> argv<span class="sym">)</span>
<span class="sym">{</span>
	<span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">!=</span> <span class="num">2</span><span class="sym">)</span>
	<span class="sym">{</span>
		std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: nsieve &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
		<span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
	<span class="sym">}</span>
	std<span class="sym">::</span>istringstream <span class="kwd">convertor</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
	<span class="kwb">int</span> n<span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">(!(</span>convertor <span class="sym">&gt;&gt;</span> n<span class="sym">) || !</span>convertor<span class="sym">.</span><span class="kwd">eof</span><span class="sym">())</span>
	<span class="sym">{</span>
		std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: nsieve &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
		std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;   n must be an integer</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
		<span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwd">test</span><span class="sym">(</span>n<span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">)</span>
	<span class="sym">{</span>
		<span class="kwd">test</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">)</span>
	<span class="sym">{</span>
		<span class="kwd">test</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">);</span>
	<span class="sym">}</span>
<span class="sym">}</span>
