#<span class="sym">!/</span>bin<span class="sym">/</span>bash
# <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}</span>
<span class="sym">[</span> \! <span class="sym">-</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;</span>
    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0</span>
exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="sym">!</span>#

<span class="slc">;;; $Id: spellcheck-rep.code,v 1.6 2006-09-20 05:52:40 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()</span>
  <span class="sym">(</span><span class="kwa">open</span> rep
	rep.system
	rep.io.files
	rep.regexp
	rep.data.tables<span class="sym">)</span>

  <span class="sym">(</span>let<span class="sym">* ((</span>arg <span class="sym">(</span>get<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>option <span class="str">&quot;--num&quot;</span> t<span class="sym">))</span>
	 <span class="sym">(</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>from<span class="sym">-</span>string arg<span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
	 <span class="sym">(</span>dict <span class="sym">(</span>make<span class="sym">-</span>table string<span class="sym">-</span>hash <span class="kwa">eq</span><span class="sym">-</span>hash<span class="sym">))</span>
	 <span class="sym">(</span><span class="kwa">line</span> <span class="str">&quot;&quot;</span><span class="sym">))</span>
    <span class="sym">(</span>let <span class="sym">((</span>dictfile <span class="sym">(</span><span class="kwa">open</span><span class="sym">-</span>file <span class="str">&quot;Usr.Dict.Words&quot;</span> <span class="str">'read)))</span>
<span class="str">      (when dictfile</span>
<span class="str">	(unwind-protect</span>
<span class="str">	    (while (setq line (read-line dictfile))</span>
<span class="str">	      (when (string-match &quot;</span><span class="esc">\\</span><span class="str">S+&quot; line)</span>
<span class="str">		(table-set dict (substring line (match-start) (match-end)) #t)))</span>
<span class="str">	  (close-file dictfile))))</span>
<span class="str">    (while (setq line (read-line))</span>
<span class="str">      (when (string-match &quot;</span><span class="esc">\\</span><span class="str">S+&quot; line)</span>
<span class="str">	(let ((word (substring line (match-start) (match-end))))</span>
<span class="str">	  (when (not (table-ref dict word))</span>
<span class="str">	    (format standard-output &quot;%s</span><span class="esc">\n</span><span class="str">&quot; word)))))))</span>
