<span class="line">    1 </span><span class="slc">#!/usr/bin/perl
</span><span class="line">    2 </span><span class="slc"></span><span class="slc"># $Id: hash-perl.code,v 1.3 2004-11-11 07:13:57 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="slc"># this program is modified from:
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">#   http:#cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html
</span><span class="line">    7 </span><span class="slc"></span><span class="slc"># Timing Trials, or, the Trials of Timing: Experiments with Scripting
</span><span class="line">    8 </span><span class="slc"></span><span class="slc"># and User-Interface Languages&lt;/a&gt; by Brian W. Kernighan and
</span><span class="line">    9 </span><span class="slc"></span><span class="slc"># Christopher J. Van Wyk.
</span><span class="line">   10 </span><span class="slc"></span>
<span class="line">   11 </span><span class="kwa">use</span> strict<span class="sym">;
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span><span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym"></span><span class="kwc">my</span> %X <span class="sym">= ();
</span><span class="line">   15 </span><span class="sym"></span><span class="kwc">my</span> <span class="kwb">$c</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span><span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> <span class="sym">(</span><span class="num">1</span>..<span class="kwb">$n</span><span class="sym">) {
</span><span class="line">   18 </span><span class="sym"></span>    <span class="kwb">$X</span><span class="sym">{</span>sprintf<span class="sym">(</span><span class="str">'%x'</span><span class="sym">,</span> <span class="kwb">$i</span><span class="sym">)} =</span> <span class="kwb">$i</span><span class="sym">;
</span><span class="line">   19 </span><span class="sym">}
</span><span class="line">   20 </span><span class="sym"></span><span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> <span class="sym">(</span>reverse <span class="num">1</span>..<span class="kwb">$n</span><span class="sym">) {
</span><span class="line">   21 </span><span class="sym">    ++</span><span class="kwb">$c</span> <span class="kwa">if</span> exists <span class="kwb">$X</span><span class="sym">{</span><span class="kwb">$i</span><span class="sym">};
</span><span class="line">   22 </span><span class="sym">}
</span><span class="line">   23 </span><span class="sym"></span>print <span class="str">&quot;$c</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
