<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* % regina -v                                                        */</span>
<span class="com">/* REXX-Regina_3.3(MT) 5.00 25 Apr 2004                               */</span>
<span class="com">/* % uname -orvmp                                                     */</span>
<span class="com">/* 2.6.5-1.358 #1 Wed Oct 13 17:49:34 EST 2004 i686 i686 GNU/Linux    */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

numeric digits <span class="num">11

</span>N <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> <span class="kwa">if</span> DATATYPE<span class="sym">(</span>N<span class="sym">)</span> \<span class="sym">=</span> <span class="str">'NUM'</span> <span class="sym">|</span> N <span class="sym">&lt;</span> <span class="num">1</span> then <span class="sym">;</span> N <span class="sym">=</span> <span class="num">1

</span>call nsieveResults <span class="num">2</span> <span class="sym">**</span> N <span class="sym">*</span> <span class="num">10000
</span>call nsieveResults <span class="num">2</span> <span class="sym">** (</span>N <span class="num">- 1</span><span class="sym">) *</span> <span class="num">10000
</span>call nsieveResults <span class="num">2</span> <span class="sym">** (</span>N <span class="num">- 2</span><span class="sym">) *</span> <span class="num">10000

</span>exit <span class="num">0

</span><span class="com">/* ----------------------------- */</span>

nsieveResults <span class="sym">:</span> procedure
  N <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> TAB <span class="sym">=</span> COPIES<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">,</span> <span class="num">4</span><span class="sym">)
</span>  say <span class="str">&quot;Primes up to&quot;</span> <span class="sym">||</span> TAB <span class="sym">||</span> N <span class="sym">||</span> TAB <span class="sym">||</span> nsieve<span class="sym">(</span>N<span class="sym">)
</span>  <span class="kwa">return

</span><span class="com">/* ----------------------------- */</span>

nsieve <span class="sym">:</span> procedure
  M <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> count <span class="sym">= -</span><span class="num">1

</span>  <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">2</span> to M
    <span class="kwa">if</span> SYMBOL<span class="sym">(</span><span class="str">'A.i'</span><span class="sym">)</span> \<span class="sym">=</span> <span class="str">'VAR'</span> then <span class="kwa">do
      do</span> j <span class="sym">=</span> i <span class="sym">+</span> i by i <span class="kwa">while</span> j <span class="sym">&lt;</span> M <span class="sym">;</span> A<span class="sym">.</span>j <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> end
      A<span class="sym">.</span>i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> count <span class="sym">=</span> count <span class="sym">+</span> <span class="num">1
</span>    end
  end

  <span class="kwa">return</span> count
