<span class="line">    1 </span>#<span class="sym">!/</span>bin<span class="sym">/</span>bash
<span class="line">    2 </span># <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-
</span><span class="line">    3 </span><span class="sym"></span>PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}
</span><span class="line">    4 </span><span class="sym">[</span> \<span class="sym">! -</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;
</span><span class="line">    5 </span><span class="sym"></span>    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0
</span><span class="line">    6 </span><span class="num"></span>exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="line">    7 </span><span class="sym">!</span>#
<span class="line">    8 </span>
<span class="line">    9 </span><span class="slc">;;; $Id: methcall-rep.code,v 1.3 2004-11-13 08:28:18 bfulgham Exp $
</span><span class="line">   10 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">   11 </span><span class="slc"></span>
<span class="line">   12 </span><span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()
</span><span class="line">   13 </span><span class="sym">  (</span><span class="kwa">open</span> rep rep.system rep.data.objects<span class="sym">)
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym">  (</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool b<span class="sym">)
</span><span class="line">   16 </span><span class="sym">    (</span>format standard<span class="sym">-</span>output <span class="sym">(</span><span class="kwa">if</span> b <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)))
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym">  (</span>define toggle
<span class="line">   19 </span>    <span class="sym">(</span>object nil
<span class="line">   20 </span>            <span class="sym">((</span>new obj state<span class="sym">)
</span><span class="line">   21 </span><span class="sym">             (</span>put obj <span class="str">'state state)
</span><span class="line">   22 </span><span class="str">             obj)
</span><span class="line">   23 </span><span class="str">            ((value tog) (get tog '</span>state<span class="sym">))
</span><span class="line">   24 </span><span class="sym">            ((</span>activate tog<span class="sym">)
</span><span class="line">   25 </span><span class="sym">             (</span>put tog <span class="str">'state (not (get tog '</span>state<span class="sym">)))
</span><span class="line">   26 </span><span class="sym"></span>             tog<span class="sym">)))
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym">  (</span>define <span class="kwa">nth</span><span class="sym">-</span>toggle
<span class="line">   29 </span>    <span class="sym">(</span>object toggle
<span class="line">   30 </span>            <span class="sym">((</span>new obj state <span class="kwa">max</span><span class="sym">)
</span><span class="line">   31 </span><span class="sym">             (</span>toggle <span class="str">'new obj state)
</span><span class="line">   32 </span><span class="str">             (put obj '</span>count<span class="sym">-</span><span class="kwa">max max</span><span class="sym">)
</span><span class="line">   33 </span><span class="sym">             (</span>put obj <span class="str">'counter 0)
</span><span class="line">   34 </span><span class="str">             obj)
</span><span class="line">   35 </span><span class="str">            ((activate obj)
</span><span class="line">   36 </span><span class="str">             (let ((c (get obj '</span>counter<span class="sym">)))
</span><span class="line">   37 </span><span class="sym">               (</span><span class="kwa">if</span> <span class="sym">(= (+</span> c <span class="num">1</span><span class="sym">) (</span>get obj <span class="str">'count-max))
</span><span class="line">   38 </span><span class="str">                   (progn
</span><span class="line">   39 </span><span class="str">                     (put obj '</span>state <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>get obj <span class="str">'state)))
</span><span class="line">   40 </span><span class="str">                     (put obj '</span>counter <span class="num">0</span><span class="sym">))
</span><span class="line">   41 </span><span class="sym">                 (</span>put obj <span class="str">'counter (+ c 1)))
</span><span class="line">   42 </span><span class="str">               obj))))
</span><span class="line">   43 </span><span class="str">
</span><span class="line">   44 </span><span class="str">  (let* ((arg (get-command-line-option &quot;--num&quot; t))
</span><span class="line">   45 </span><span class="str">         (n (if arg (read-from-string arg) 1)))
</span><span class="line">   46 </span><span class="str">    (let ((tog (toggle '</span>new <span class="str">'my-tog '</span>t<span class="sym">))
</span><span class="line">   47 </span><span class="sym">          (</span>val <span class="str">'t))
</span><span class="line">   48 </span><span class="str">      (do ((i 0 (+ i 1)))
</span><span class="line">   49 </span><span class="str">          ((= i n))
</span><span class="line">   50 </span><span class="str">        (setq val (toggle '</span>value <span class="sym">(</span>toggle <span class="str">'activate tog))))
</span><span class="line">   51 </span><span class="str">      (print-bool val))
</span><span class="line">   52 </span><span class="str">
</span><span class="line">   53 </span><span class="str">    (let ((ntog (nth-toggle '</span>new <span class="str">'my-ntog '</span>t <span class="num">3</span><span class="sym">))
</span><span class="line">   54 </span><span class="sym">          (</span>val <span class="str">'t))
</span><span class="line">   55 </span><span class="str">      (do ((i 0 (+ i 1)))
</span><span class="line">   56 </span><span class="str">          ((= i n))
</span><span class="line">   57 </span><span class="str">        (setq val (nth-toggle '</span>value <span class="sym">(</span><span class="kwa">nth</span><span class="sym">-</span>toggle <span class="str">'activate ntog))))
</span><span class="line">   58 </span><span class="str">      (print-bool val))))
</span><span class="line">   59 </span><span class="str"></span>
