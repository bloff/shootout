<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: except-smlnj.code,v 1.3 2004-11-11 07:13:57 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * Translated from except.ocaml by Stephen Weeks
</span><span class="line">    5 </span><span class="com"> *)</span>
<span class="line">    6 </span>
<span class="line">    7 </span><span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
</span><span class="line">    8 </span><span class="kwa">    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="line">    9 </span><span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
</span><span class="line">   10 </span><span class="kwa">
</span><span class="line">   11 </span><span class="kwa">fun</span> incr r <span class="sym">=</span> r <span class="sym">:= !</span>r <span class="sym">+</span> <span class="num">1
</span><span class="line">   12 </span><span class="num"></span><span class="kwa">fun</span> print_endline s <span class="sym">= (</span>print s<span class="sym">;</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span><span class="line">   13 </span><span class="sym"></span><span class="kwa">fun</span> for <span class="sym">(</span>start<span class="sym">,</span> stop<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">   14 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   15 </span><span class="kwa">      fun</span> loop i <span class="sym">=
</span><span class="line">   16 </span><span class="sym"></span>         <span class="kwa">if</span> i <span class="sym">&gt;</span> stop
<span class="line">   17 </span>            <span class="kwa">then</span> <span class="sym">()
</span><span class="line">   18 </span><span class="sym"></span>         <span class="kwa">else</span> <span class="sym">(</span>f i<span class="sym">;</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   19 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">   20 </span><span class="kwa"></span>      loop start
<span class="line">   21 </span>   <span class="kwa">end
</span><span class="line">   22 </span><span class="kwa">
</span><span class="line">   23 </span><span class="kwa">exception</span> HiException <span class="kwa">of</span> <span class="kwb">int
</span><span class="line">   24 </span><span class="kwb"></span><span class="kwa">exception</span> LoException <span class="kwa">of</span> <span class="kwb">int
</span><span class="line">   25 </span><span class="kwb">
</span><span class="line">   26 </span><span class="kwb"></span><span class="kwa">val</span> hi <span class="sym">=</span> ref <span class="num">0
</span><span class="line">   27 </span><span class="num"></span><span class="kwa">val</span> lo <span class="sym">=</span> ref <span class="num">0
</span><span class="line">   28 </span><span class="num">
</span><span class="line">   29 </span><span class="num"></span><span class="kwa">fun</span> blowup n <span class="sym">=
</span><span class="line">   30 </span><span class="sym"></span>  <span class="kwa">if</span> n mod <span class="num">2</span> <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then raise</span> <span class="sym">(</span>LoException n<span class="sym">)
</span><span class="line">   31 </span><span class="sym"></span>  <span class="kwa">else raise</span> <span class="sym">(</span>HiException n<span class="sym">)
</span><span class="line">   32 </span><span class="sym">
</span><span class="line">   33 </span><span class="sym"></span><span class="kwa">fun</span> lo_fun n <span class="sym">=
</span><span class="line">   34 </span><span class="sym"></span>  blowup n
<span class="line">   35 </span>  <span class="kwa">handle</span> LoException ex <span class="sym">=&gt;</span> incr lo
<span class="line">   36 </span>
<span class="line">   37 </span><span class="kwa">fun</span> hi_fun n <span class="sym">=
</span><span class="line">   38 </span><span class="sym"></span>  lo_fun n
<span class="line">   39 </span>  <span class="kwa">handle</span> HiException ex <span class="sym">=&gt;</span> incr hi
<span class="line">   40 </span>
<span class="line">   41 </span><span class="kwa">fun</span> some_fun n <span class="sym">=
</span><span class="line">   42 </span><span class="sym"></span>  hi_fun n
<span class="line">   43 </span>  <span class="kwa">handle</span> x <span class="sym">=&gt;
</span><span class="line">   44 </span><span class="sym">     (</span>print_endline <span class="str">&quot;Should not get here.&quot;</span><span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span>      <span class="kwa">raise</span> x<span class="sym">)
</span><span class="line">   46 </span><span class="sym">
</span><span class="line">   47 </span><span class="sym"></span><span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span><span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">);
</span><span class="line">   49 </span><span class="sym">
</span><span class="line">   50 </span><span class="sym"></span><span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =
</span><span class="line">   51 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   52 </span><span class="kwa">      val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))
</span><span class="line">   53 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> some_fun<span class="sym">)
</span><span class="line">   54 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">   55 </span><span class="kwa"></span>      printl <span class="sym">[</span><span class="str">&quot;Exceptions: HI=&quot;</span><span class="sym">,
</span><span class="line">   56 </span><span class="sym"></span>              <span class="kwa">Int</span>.toString <span class="sym">(!</span>hi<span class="sym">),
</span><span class="line">   57 </span><span class="sym"></span>              <span class="str">&quot; / LO=&quot;</span><span class="sym">,
</span><span class="line">   58 </span><span class="sym"></span>              <span class="kwa">Int</span>.toString <span class="sym">(!</span>lo<span class="sym">)];
</span><span class="line">   59 </span><span class="sym"></span>      OS.Process.success
<span class="line">   60 </span>   <span class="kwa">end
</span><span class="line">   61 </span><span class="kwa">end
</span><span class="line">   62 </span><span class="kwa">
</span><span class="line">   63 </span><span class="kwa">val</span> _ <span class="sym">=</span> SMLofNJ.exportFn<span class="sym">(</span><span class="str">&quot;except&quot;</span><span class="sym">,</span> Test.main<span class="sym">);</span>
