<span class="com">(* except.sml
 *
 *   Timing exception handling.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume&#64;tti-c.org)
 *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
    open</span> FormatComb

    <span class="kwa">exception</span> HiExn <span class="kwa">and</span> LoExn
    <span class="kwa">val</span> <span class="sym">(</span>hi<span class="sym">,</span> lo<span class="sym">) = (</span>ref <span class="num">0</span><span class="sym">,</span> ref <span class="num">0</span><span class="sym">)

</span>    <span class="kwa">fun</span> blowup flag <span class="sym">=</span> <span class="kwa">raise</span> <span class="sym">(</span><span class="kwa">if</span> flag <span class="kwa">then</span> LoExn <span class="kwa">else</span> HiExn<span class="sym">)
</span>    <span class="kwa">fun</span> lo_fun flag <span class="sym">=</span> blowup flag <span class="kwa">handle</span> LoExn <span class="sym">=&gt;</span> lo <span class="sym">:= !</span>lo <span class="sym">+</span> <span class="num">1
</span>    <span class="kwa">fun</span> hi_fun flag <span class="sym">=</span> lo_fun flag <span class="kwa">handle</span> HiExn <span class="sym">=&gt;</span> hi <span class="sym">:= !</span>hi <span class="sym">+</span> <span class="num">1
</span>    <span class="kwa">fun</span> some_fun flag <span class="sym">=</span> hi_fun flag
	<span class="kwa">handle</span> e <span class="sym">=&gt; (</span>print <span class="str">&quot;Should not get here.</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span> <span class="kwa">raise</span> e<span class="sym">)

</span>    <span class="kwa">fun</span> loop <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> _<span class="sym">) =</span> print <span class="sym">(</span>format <span class="sym">(</span>text <span class="str">&quot;Exceptions: HI=&quot;</span> <span class="kwa">o</span> <span class="kwb">int</span> <span class="kwa">o
</span>				     text <span class="str">&quot; / LO=&quot;</span> <span class="kwa">o</span> <span class="kwb">int</span> <span class="kwa">o</span> nl<span class="sym">) (!</span>hi<span class="sym">) (!</span>lo<span class="sym">))
      |</span> loop <span class="sym">(</span>n<span class="sym">,</span> flag<span class="sym">) = (</span>some_fun flag<span class="sym">;</span> loop <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">,</span> not flag<span class="sym">))

</span>    <span class="kwa">fun</span> main' n <span class="sym">= (</span>loop <span class="sym">(</span>n<span class="sym">,</span> n mod <span class="num">2</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">);</span> OS.Process.success<span class="sym">)
</span>    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1
</span>      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))
</span><span class="kwa">end</span>
