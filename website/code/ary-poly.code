<span class="com">(* -*- mode: sml -*-
 * $Id: ary-poly.code,v 1.5 2005-05-12 02:35:49 bfulgham Exp $
 * http://shootout.alioth.debian.org/
 *)</span>

<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt; {}
</span><span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct

fun</span> index i <span class="sym">=</span> i<span class="sym">;

</span><span class="kwa">fun</span> ary n <span class="sym">=
</span>    <span class="kwa">let
	val</span> x <span class="sym">=</span> Array.array<span class="sym">(</span>n<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span>	<span class="kwa">val</span> y <span class="sym">=</span> Array.array<span class="sym">(</span>n<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span>	<span class="kwa">fun</span> xinit i <span class="sym">=
</span>	    <span class="kwa">if</span> i <span class="sym">=</span> n <span class="kwa">then</span> <span class="sym">()
</span>	    <span class="kwa">else</span> <span class="sym">(</span>Array.update<span class="sym">(</span>x<span class="sym">,</span> i<span class="sym">,</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">) ;</span> xinit <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span>	<span class="kwa">fun</span> xtoy i <span class="sym">=
</span>	    <span class="kwa">if</span> i <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">()
</span>	    <span class="kwa">else</span> <span class="sym">(</span>Array.update<span class="sym">(</span>y<span class="sym">,</span> i<span class="sym">,</span> Array.sub<span class="sym">(</span>x<span class="sym">,</span> i<span class="sym">) +</span> Array.sub<span class="sym">(</span>y<span class="sym">,</span> i<span class="sym">)) ;</span> xtoy <span class="sym">(</span>i <span class="num">- 1</span><span class="sym">))
</span>        <span class="kwa">fun</span> aryloop i <span class="sym">=
</span>	    <span class="kwa">if</span> i <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">()
</span>	    <span class="kwa">else</span> <span class="sym">(</span>xtoy<span class="sym">(</span>n<span class="num">-1</span><span class="sym">);</span> aryloop <span class="sym">(</span>i<span class="num">-1</span><span class="sym">))
</span>    <span class="kwa">in
</span>	xinit <span class="num">0</span><span class="sym">;
</span>	aryloop <span class="num">999</span><span class="sym">;
</span>	print <span class="sym">(</span><span class="kwa">Int</span>.toString <span class="sym">(</span>Array.sub<span class="sym">(</span>y<span class="sym">,</span> <span class="num">0</span><span class="sym">)));
</span>	print <span class="str">&quot; &quot;</span><span class="sym">;
</span>	print <span class="sym">(</span><span class="kwa">Int</span>.toString <span class="sym">(</span>Array.sub<span class="sym">(</span>y<span class="sym">, (</span>n<span class="num">-1</span><span class="sym">))));
</span>	print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
    <span class="kwa">end</span><span class="sym">;

</span><span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">;

</span><span class="kwa">fun</span> main<span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =
</span>    <span class="kwa">let
	val</span> arg <span class="sym">=</span> hd<span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">])
</span>	<span class="kwa">val</span> num <span class="sym">=</span> atoi arg
    <span class="kwa">in
</span>	ary num<span class="sym">;
</span>        PolyML.quit<span class="sym">()
</span>    <span class="kwa">end
end

val</span> _ <span class="sym">=</span> PolyML.print_depth <span class="num">0</span><span class="sym">;
</span><span class="kwa">val</span> _ <span class="sym">=</span> PolyML.error_depth <span class="num">0</span><span class="sym">;
</span><span class="kwa">val</span> _ <span class="sym">=</span> PolyML.onEntry<span class="sym">(</span><span class="kwa">fn</span><span class="sym">() =&gt;</span> Test.main<span class="sym">(</span><span class="str">&quot;ary&quot;</span><span class="sym">,</span> CommandLine.arguments<span class="sym">()));
</span><span class="kwa">val</span> _ <span class="sym">=</span> PolyML.commit<span class="sym">();</span>
