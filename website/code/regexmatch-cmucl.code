<span class="slc">;;; -*- mode: lisp -*-;
</span><span class="slc">;;; $Id: regexmatch-cmucl.code,v 1.4 2005-02-10 06:14:55 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; from Jochen Schmidt
</span><span class="slc">;;; Multi-lisp modifications by Brent Fulgham
</span><span class="slc">;;; Further modified (optimized &amp; cleaned up a little) by Markus Ziegler
</span>
<span class="sym">(</span>proclaim <span class="str">'(optimize (speed 3) (safety 0) (space 0) (debug 0) (compilation-speed 0)))
#+cmu (setf ext:*bytes-consed-between-gcs* 5000000)
(declaim (inline typep digit-charp non-digit-charp))

(use-package :meta)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun digit-charp (char)
    (declare (type base-char char))
    (char&lt;= #</span><span class="esc">\0 </span> <span class="str">char #</span><span class="esc">\9</span><span class="str">))

  (defun non-digit-charp (char)
    (declare (type base-char char))
    (not (or (char= char #</span><span class="esc">\(</span><span class="str">) (char= char #</span><span class="esc">\)</span><span class="str">) (digit-charp char))))

  (deftype digit () '</span><span class="sym">(</span>satisfies digit<span class="sym">-</span>charp<span class="sym">))
  (</span>deftype non<span class="sym">-</span>digit <span class="sym">()</span> <span class="str">'(satisfies non-digit-charp)))

(defvar area-code     (make-array 3 :element-type '</span>base<span class="sym">-</span>char<span class="sym">))
(</span>defvar exchange      <span class="sym">(</span>make<span class="sym">-</span>array <span class="num">3</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'base-char))
(defvar last-4-digits (make-array 4 :element-type '</span>base<span class="sym">-</span>char<span class="sym">))

(</span><span class="kwa">defun</span> parse<span class="sym">-</span>tel <span class="sym">(</span>input<span class="sym">)
  (</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string area<span class="sym">-</span>code exchange <span class="kwa">last</span><span class="num">-4</span><span class="sym">-</span>digits<span class="sym">))
  (</span>meta<span class="sym">:</span>with<span class="sym">-</span>string<span class="sym">-</span>meta <span class="sym">(</span>buffer input<span class="sym">)
    (</span>labels <span class="sym">((</span>skip<span class="sym">-</span>non<span class="sym">-</span>digits <span class="sym">()
	       (</span>meta<span class="sym">:</span>match <span class="sym">(:</span><span class="kwa">while</span> <span class="sym">(:</span><span class="kwa">type</span> non<span class="sym">-</span>digit<span class="sym">))))
	     (</span>digit<span class="sym">-</span>triplet <span class="sym">(</span>result<span class="sym">)
	       (</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string result<span class="sym">))
	       (</span>meta<span class="sym">:</span>match <span class="sym">(:</span><span class="kwa">and</span> <span class="sym">(:</span><span class="kwa">type</span> digit <span class="sym">(</span>schar result <span class="num">0</span><span class="sym">))
				 (:</span><span class="kwa">type</span> digit <span class="sym">(</span>schar result <span class="num">1</span><span class="sym">))
				 (:</span><span class="kwa">type</span> digit <span class="sym">(</span>schar result <span class="num">2</span><span class="sym">)))))
	     (</span>digit<span class="num">-4</span>tuple <span class="sym">(</span>result<span class="sym">)
	       (</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string result<span class="sym">))
	       (</span>meta<span class="sym">:</span>match <span class="sym">(:</span><span class="kwa">and</span> <span class="sym">(:</span><span class="kwa">type</span> digit <span class="sym">(</span>schar result <span class="num">0</span><span class="sym">))
				 (:</span><span class="kwa">type</span> digit <span class="sym">(</span>schar result <span class="num">1</span><span class="sym">))
				 (:</span><span class="kwa">type</span> digit <span class="sym">(</span>schar result <span class="num">2</span><span class="sym">))
				 (:</span><span class="kwa">type</span> digit <span class="sym">(</span>schar result <span class="num">3</span><span class="sym">)))))
	     (</span>telephone<span class="sym">-</span>nr <span class="sym">()
	       (</span>meta<span class="sym">:</span>match <span class="sym">(:</span><span class="kwa">and</span> <span class="sym">(</span>skip<span class="sym">-</span>non<span class="sym">-</span>digits<span class="sym">)
				 (:</span><span class="kwa">or</span> <span class="sym">(:</span><span class="kwa">and</span> #\<span class="sym">( (</span>digit<span class="sym">-</span>triplet area<span class="sym">-</span>code<span class="sym">)</span> #\<span class="sym">))
				      (</span>digit<span class="sym">-</span>triplet area<span class="sym">-</span>code<span class="sym">))
</span>				 #\space <span class="sym">(</span>digit<span class="sym">-</span>triplet exchange<span class="sym">) (:</span><span class="kwa">or</span> #\space #\<span class="sym">-)
				 (</span>digit<span class="num">-4</span>tuple <span class="kwa">last</span><span class="num">-4</span><span class="sym">-</span>digits<span class="sym">)
				 (:</span><span class="kwa">or</span> <span class="sym">(:</span><span class="kwa">type</span> non<span class="sym">-</span>digit<span class="sym">) (=</span> index end<span class="sym">))))))
      (</span>telephone<span class="sym">-</span>nr<span class="sym">))))

(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span>                                         #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">)))
        (</span>input <span class="sym">(</span>loop for <span class="kwa">line</span> <span class="sym">= (</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*</span> nil <span class="str">'eof)
		  until (eq line '</span>eof<span class="sym">)</span> collect <span class="kwa">line</span><span class="sym">)))
    (</span>loop for i of<span class="sym">-</span><span class="kwa">type</span> fixnum from <span class="num">1</span> below n do
	 <span class="sym">(</span>loop for <span class="kwa">line</span> of<span class="sym">-</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string in input
	    do <span class="sym">(</span>parse<span class="sym">-</span>tel <span class="kwa">line</span><span class="sym">)))
    (</span>loop with i of<span class="sym">-</span><span class="kwa">type</span> fixnum <span class="sym">=</span> <span class="num">0
</span>       for <span class="kwa">line</span> of<span class="sym">-</span><span class="kwa">type</span> string in input
       do <span class="sym">(</span>when <span class="sym">(</span>parse<span class="sym">-</span>tel <span class="kwa">line</span><span class="sym">)
	    (</span>format t <span class="str">&quot;~A: (~A) ~A-~A~%&quot;</span> <span class="sym">(</span>incf i<span class="sym">)</span> area<span class="sym">-</span>code exchange <span class="kwa">last</span><span class="num">-4</span><span class="sym">-</span>digits<span class="sym">)))))</span>
