<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: spellcheck-gcc.code,v 1.19 2006-06-08 12:23:51 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * with help from Brad Knotwell</span>
<span class="com"> */</span>

<span class="dir">#include &lt;ctype.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;unistd.h&gt;</span>
<span class="dir">#include</span> <span class="dstr">&quot;simple_hash.h&quot;</span><span class="dir"></span>

<span class="dir">#define MAXLINELEN 128</span>

<span class="kwb">struct</span> ht_ht <span class="sym">*</span>dict <span class="sym">=</span> NULL<span class="sym">;</span>

<span class="kwb">int</span> <span class="kwd">handleInput</span><span class="sym">(</span><span class="kwb">FILE</span> <span class="sym">*</span>input<span class="sym">,</span><span class="kwb">void</span> <span class="sym">(*</span>hashManipFn<span class="sym">)(</span><span class="kwb">char</span> <span class="sym">*))</span>
<span class="sym">{</span>
    <span class="kwb">int</span> wordbufsize <span class="sym">=</span> <span class="num">80</span><span class="sym">,</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">char</span> <span class="sym">*</span>cp<span class="sym">, *</span>wordbuf <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">*)</span><span class="kwd">malloc</span><span class="sym">(</span>wordbufsize <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwb">char</span> line<span class="sym">[</span>MAXLINELEN<span class="sym">];</span>

    <span class="kwa">if</span><span class="sym">((</span>wordbuf <span class="sym">=</span> <span class="kwd">malloc</span><span class="sym">(</span>wordbufsize<span class="sym">+</span><span class="num">1</span><span class="sym">)) ==</span> NULL<span class="sym">)</span>
        <span class="kwa">return</span><span class="sym">(</span><span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;malloc</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span><span class="num">0</span><span class="sym">);</span>

    <span class="kwa">while</span> <span class="sym">(</span><span class="kwd">fgets</span><span class="sym">(</span>line<span class="sym">,</span> MAXLINELEN<span class="sym">,</span> input<span class="sym">))</span>
	<span class="kwa">for</span> <span class="sym">(</span>cp<span class="sym">=</span>line<span class="sym">; *</span>cp <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> cp<span class="sym">++) {</span>
	    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">isspace</span><span class="sym">(*</span>cp<span class="sym">)) {</span>
		<span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">) {</span>
		    wordbuf<span class="sym">[</span>i<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;</span>
                    <span class="kwd">hashManipFn</span><span class="sym">(</span>wordbuf<span class="sym">);</span>
		    i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="sym">}</span>
	    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
		wordbuf<span class="sym">[</span>i<span class="sym">++] = *</span>cp<span class="sym">;</span>
		<span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> wordbufsize<span class="sym">) {</span>
		    wordbufsize <span class="sym">*=</span> <span class="num">2</span><span class="sym">;</span>
		    <span class="kwa">if</span><span class="sym">((</span>wordbuf <span class="sym">=</span> <span class="kwd">realloc</span><span class="sym">(</span>wordbuf<span class="sym">,</span> wordbufsize <span class="sym">+</span> <span class="num">1</span><span class="sym">)) ==</span> NULL<span class="sym">)</span>
                        <span class="kwa">return</span><span class="sym">(</span><span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;realloc</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">);</span>
		<span class="sym">}</span>
	    <span class="sym">}</span>
        <span class="sym">}</span>

    <span class="kwd">free</span><span class="sym">(</span>wordbuf<span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">spellCheck</span><span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>key<span class="sym">) {</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">ht_find_new</span><span class="sym">(</span>dict<span class="sym">,</span>key<span class="sym">)-&gt;</span>val <span class="sym">!=</span> <span class="num">1</span><span class="sym">)</span> <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>key<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">hashLoad</span><span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>key<span class="sym">) {</span> <span class="kwd">ht_find_new</span><span class="sym">(</span>dict<span class="sym">,</span>key<span class="sym">)-&gt;</span>val <span class="sym">=</span> <span class="num">1</span><span class="sym">; }</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">FILE</span> <span class="sym">*</span>fh<span class="sym">;</span>
    <span class="kwb">int</span> rc<span class="sym">;</span>

    <span class="com">/*</span>
<span class="com">        ht_create doesn't handle malloc and calloc failures</span>
<span class="com">        so this is superfluous</span>
<span class="com">    */</span>
    <span class="kwa">if</span><span class="sym">((</span>dict <span class="sym">=</span> <span class="kwd">ht_create</span><span class="sym">(</span><span class="num">40000</span><span class="sym">)) ==</span> NULL<span class="sym">)</span>
        <span class="kwa">return</span><span class="sym">(</span><span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;hash creation failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span>EXIT_FAILURE<span class="sym">);</span>

    <span class="kwa">if</span> <span class="sym">((</span>fh <span class="sym">=</span> <span class="kwd">fopen</span><span class="sym">(</span><span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">,</span> <span class="str">&quot;r&quot;</span><span class="sym">)) ==</span> NULL<span class="sym">)</span>
        <span class="kwa">return</span><span class="sym">(</span><span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;couldn't open dictionary</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span>EXIT_FAILURE<span class="sym">);</span>

    rc <span class="sym">= ((</span><span class="kwd">handleInput</span><span class="sym">(</span>fh<span class="sym">,</span>hashLoad<span class="sym">) &amp;&amp;</span> <span class="kwd">handleInput</span><span class="sym">(</span>stdin<span class="sym">,</span>spellCheck<span class="sym">))</span> ? EXIT_SUCCESS <span class="sym">:</span> EXIT_FAILURE<span class="sym">);</span>

    <span class="kwd">ht_destroy</span><span class="sym">(</span>dict<span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span>rc<span class="sym">);</span>
<span class="sym">}</span>
