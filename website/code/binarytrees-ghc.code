<span class="slc">-- binarytrees.ghc
</span><span class="slc">--
</span><span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- Modelled after the ocaml implementation
</span><span class="slc">-- by Einar Karttunen
</span>
<span class="kwa">import</span> System

<span class="kwa">data</span> Tree <span class="sym">=</span> Node Tree <span class="kwb">Int</span> Tree <span class="sym">|</span> Empty <span class="kwb">Int

</span>make item <span class="num">0</span> <span class="sym">=</span> Empty item
make item d <span class="sym">=</span> Node c item c <span class="kwa">where</span> c <span class="sym">=</span> make item <span class="sym">(</span>d<span class="num">-1</span><span class="sym">)

</span>tsum <span class="sym">(</span>Empty i<span class="sym">)    =</span> i
tsum <span class="sym">(</span>Node l i r<span class="sym">) =</span> i <span class="sym">+</span> tsum l <span class="sym">+</span> tsum r

diff <span class="sym">(</span>Empty i<span class="sym">)    =</span> i
diff <span class="sym">(</span>Node l i r<span class="sym">) =</span> i <span class="sym">+ (</span>diff l <span class="sym">-</span> diff r<span class="sym">)

</span>minDepth <span class="sym">=</span> <span class="num">4
</span>checkFactor <span class="sym">=</span> <span class="num">64

</span>min_depth <span class="sym">=</span> <span class="num">4
</span>check_factor <span class="sym">=</span> <span class="num">64

</span>main <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">[</span>num<span class="sym">]    &lt;-</span> getArgs
          <span class="kwa">let</span> maxDepth <span class="sym">=</span> max <span class="sym">(</span>read num<span class="sym">) (</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">)
</span>          <span class="kwa">let</span> scretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1
</span>          <span class="kwa">let</span> check <span class="sym">=</span> tsum <span class="sym">(</span>make <span class="sym">(-</span><span class="num">1</span><span class="sym">)</span> scretchDepth<span class="sym">)
</span>          putStrLn <span class="sym">(</span><span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">++</span>show scretchDepth<span class="sym">++</span><span class="str">&quot;\t check: &quot;</span><span class="sym">++</span>show check<span class="sym">)
</span>          <span class="kwa">let</span> longLivedTree <span class="sym">=</span> make <span class="sym">(-</span><span class="num">1</span><span class="sym">)</span> maxDepth
          loopDepths maxDepth minDepth
          putStrLn <span class="sym">(</span><span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">++</span>show maxDepth<span class="sym">++</span><span class="str">&quot;\t check: &quot;</span><span class="sym">++</span>show <span class="sym">(</span>tsum longLivedTree<span class="sym">))

</span>loopDepths <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">()
</span>loopDepths maxDepth d <span class="sym">=</span> if d <span class="sym">&gt;</span> maxDepth <span class="kwa">then</span> return <span class="sym">()</span> <span class="kwa">else</span> body
    <span class="kwa">where</span> body <span class="sym">=</span> <span class="kwa">do let</span> iterations <span class="sym">=</span> <span class="num">2</span> ^ <span class="sym">(</span>maxDepth <span class="sym">-</span> d <span class="sym">+</span> minDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span>                    <span class="kwa">let</span> loop <span class="num">1</span> c   <span class="sym">=</span> c
                        loop i c   <span class="sym">=</span> loop <span class="sym">(</span>i<span class="num">-1</span><span class="sym">)</span> $<span class="sym">!</span> c <span class="sym">+</span> diff <span class="sym">(</span>make i d<span class="sym">)</span> `div` checkFactor
                    putStrLn <span class="sym">(</span>show iterations<span class="sym">++</span><span class="str">&quot;\t trees of depth &quot;</span><span class="sym">++</span>show d<span class="sym">++</span><span class="str">&quot;\t check: &quot;</span><span class="sym">++</span>show <span class="sym">(</span>loop iterations <span class="num">0</span><span class="sym">))
</span>                    loopDepths maxDepth <span class="sym">(</span>d<span class="sym">+</span><span class="num">2</span><span class="sym">)</span>
