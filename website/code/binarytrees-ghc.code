<span class="kwa">import</span> System

<span class="kwa">data</span> Tree <span class="sym">=</span> Node  <span class="kwb">Int</span> Tree Tree <span class="sym">|</span> Nil

main <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">[</span>n<span class="sym">] &lt;-</span> getArgs
          <span class="kwa">let</span> max<span class="str">' = max (min'</span><span class="sym">+</span><span class="num">2</span><span class="sym">) (</span>read n<span class="sym">)
</span>          showItemCheck <span class="sym">(</span>max<span class="str">'+1) (make 0 (max'</span><span class="sym">+</span><span class="num">1</span><span class="sym">))</span> <span class="str">&quot;stretch tree of depth &quot;</span>
          <span class="kwa">let</span> longlived <span class="sym">=</span> make <span class="num">0</span> max<span class="str">'
          depthLoop min'</span> max<span class="str">'
          showItemCheck max'</span> longlived <span class="str">&quot;long lived tree of depth &quot;</span>

min<span class="str">' :: Int
min'</span> <span class="sym">=</span> <span class="num">4

</span>showItemCheck d a s <span class="sym">=</span> putStrLn <span class="sym">(</span>s<span class="sym">++</span>show d<span class="sym">++</span><span class="str">&quot;\t check: &quot;</span><span class="sym">++</span>show <span class="sym">(</span>itemCheck a<span class="sym">))

</span>showCheck i d check <span class="sym">=</span> putStrLn <span class="sym">(</span>show <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">)++</span><span class="str">&quot;\t trees of depth &quot;</span><span class="sym">++</span>show d<span class="sym">++</span><span class="str">&quot;\t check: &quot;</span><span class="sym">++</span>show check<span class="sym">)


</span>depthLoop d m <span class="sym">|</span> d <span class="sym">&gt;</span> m <span class="sym">=</span> return <span class="sym">()
</span>depthLoop d m         <span class="sym">=</span> showCheck n d <span class="sym">(</span>sumLoop n d <span class="num">0</span><span class="sym">) &gt;&gt;</span> depthLoop <span class="sym">(</span>d<span class="sym">+</span><span class="num">2</span><span class="sym">)</span> m
              <span class="kwa">where</span> n <span class="sym">=</span> <span class="num">2</span>^<span class="sym">(</span>m <span class="sym">-</span> d <span class="sym">+</span> min<span class="str">')


sumLoop :: Int -&gt; Int -&gt; Int -&gt; Int
sumLoop 0 d acc = acc
sumLoop k d acc = c `seq` sumLoop (k-1) d (acc + c + c'</span><span class="sym">)
</span>    <span class="kwa">where</span> c  <span class="sym">=</span> itemCheck <span class="sym">(</span>make k d<span class="sym">)
</span>          c<span class="str">' = itemCheck (make (-1*k) d)

make :: Int -&gt; Int -&gt; Tree
make i 0 = Nil
make i d = Node i (make ((2*i)-1) (d-1)) (make (2*i) (d-1))

itemCheck Nil = 0
itemCheck (Node x l r) = x + itemCheck l - itemCheck r
</span>
