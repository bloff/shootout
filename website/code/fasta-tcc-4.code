<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * Contributed by Joern Inge Vestgaarden</span>
<span class="com"> * Modified by Jorge Peixoto de Morais Neto</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;err.h&gt;</span>

<span class="dir">#define WIDTH 60</span>
<span class="dir">#define MIN(a,b) ((a) &lt;= (b) ? (a) : (b))</span>
<span class="dir">#define NELEMENTS(x) (sizeof (x) / sizeof ((x)[0]))</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> <span class="sym">{</span>
    <span class="kwb">float</span> p<span class="sym">;</span>
    <span class="kwb">char</span> c<span class="sym">;</span>
<span class="sym">}</span> aminoacid_t<span class="sym">;</span>

<span class="kwb">static</span> <span class="kwc">inline</span> <span class="kwb">float</span> <span class="kwd">myrandom</span> <span class="sym">(</span><span class="kwb">float</span> max<span class="sym">) {</span>
    <span class="kwb">unsigned long const</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>
    <span class="kwb">unsigned long const</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span>
    <span class="kwb">unsigned long const</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>
    <span class="kwb">static unsigned long</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>
    last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;</span>
    <span class="com">/*Integer to float conversions are faster if the integer is signed*/</span>
    <span class="kwa">return</span> max <span class="sym">* (</span><span class="kwb">long</span><span class="sym">)</span> last <span class="sym">/</span> IM<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">static</span> <span class="kwc">inline</span> <span class="kwb">void</span> <span class="kwd">accumulate_probabilities</span> <span class="sym">(</span>aminoacid_t <span class="sym">*</span>genelist<span class="sym">,</span> <span class="kwb">size_t</span> len<span class="sym">) {</span>
    <span class="kwb">float</span> cp <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
    <span class="kwb">size_t</span> i<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> len<span class="sym">;</span> i<span class="sym">++) {</span>
        cp <span class="sym">+=</span> genelist<span class="sym">[</span>i<span class="sym">].</span>p<span class="sym">;</span>
        genelist<span class="sym">[</span>i<span class="sym">].</span>p <span class="sym">=</span> cp<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="com">/* This function prints the characters of the string s. When it */</span>
<span class="com">/* reaches the end of the string, it goes back to the beginning */</span>
<span class="com">/* It stops when the total number of characters printed is count. */</span>
<span class="com">/* Between each WIDTH consecutive characters it prints a newline */</span>
<span class="com">/* This function assumes that WIDTH &lt;= strlen (s) + 1 */</span>
<span class="kwb">static void</span> <span class="kwd">repeat_fasta</span> <span class="sym">(</span><span class="kwb">char const</span> <span class="sym">*</span>s<span class="sym">,</span> <span class="kwb">size_t</span> count<span class="sym">) {</span>
    <span class="kwb">size_t</span> pos <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">size_t</span> len <span class="sym">=</span> <span class="kwd">strlen</span> <span class="sym">(</span>s<span class="sym">);</span>
    <span class="kwb">char</span> <span class="sym">*</span>s2 <span class="sym">=</span> <span class="kwd">malloc</span> <span class="sym">(</span>len <span class="sym">+</span> WIDTH<span class="sym">);</span>
    <span class="kwd">memcpy</span> <span class="sym">(</span>s2<span class="sym">,</span> s<span class="sym">,</span> len<span class="sym">);</span>
    <span class="kwd">memcpy</span> <span class="sym">(</span>s2 <span class="sym">+</span> len<span class="sym">,</span> s<span class="sym">,</span> WIDTH<span class="sym">);</span>
    <span class="kwa">do</span> <span class="sym">{</span>
     	<span class="kwb">size_t</span> line <span class="sym">=</span> <span class="kwd">MIN</span><span class="sym">(</span>WIDTH<span class="sym">,</span> count<span class="sym">);</span>
     	<span class="kwd">fwrite_unlocked</span> <span class="sym">(</span>s2 <span class="sym">+</span> pos<span class="sym">,</span><span class="num">1</span><span class="sym">,</span>line<span class="sym">,</span>stdout<span class="sym">);</span>
     	<span class="kwd">putchar_unlocked</span> <span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span>
     	pos <span class="sym">+=</span> line<span class="sym">;</span>
     	<span class="kwa">if</span> <span class="sym">(</span>pos <span class="sym">&gt;=</span> len<span class="sym">)</span> pos <span class="sym">-=</span> len<span class="sym">;</span>
     	count <span class="sym">-=</span> line<span class="sym">;</span>
    <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>count<span class="sym">);</span>
    <span class="kwd">free</span> <span class="sym">(</span>s2<span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/* This function takes a pointer to the first element of an array */</span>
<span class="com">/* Each element of the array is a struct with a character and */</span>
<span class="com">/* a float number p between 0 and 1. */</span>
<span class="com">/* The function generates a random float number r and */</span>
<span class="com">/* finds the first array element such that p &gt;= r. */</span>
<span class="com">/* This is a weighted random selection. */</span>
<span class="com">/* The function then prints the character of the array element. */</span>
<span class="com">/* This is done count times. */</span>
<span class="com">/* Between each WIDTH consecutive characters, the function prints a newline */</span>
<span class="kwb">static void</span> <span class="kwd">random_fasta</span> <span class="sym">(</span>aminoacid_t <span class="kwb">const</span> <span class="sym">*</span>genelist<span class="sym">,</span> <span class="kwb">size_t</span> count<span class="sym">) {</span>
    <span class="kwa">do</span> <span class="sym">{</span>
	<span class="kwb">size_t</span> line <span class="sym">=</span> <span class="kwd">MIN</span><span class="sym">(</span>WIDTH<span class="sym">,</span> count<span class="sym">);</span>
	<span class="kwb">size_t</span> pos <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwb">char</span> buf<span class="sym">[</span>WIDTH <span class="sym">+</span> <span class="num">1</span><span class="sym">];</span>
	<span class="kwa">do</span> <span class="sym">{</span>
	    <span class="kwb">float</span> r <span class="sym">=</span> <span class="kwd">myrandom</span> <span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span>
	    <span class="kwb">size_t</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	    <span class="kwa">while</span> <span class="sym">(</span>genelist<span class="sym">[</span>i<span class="sym">].</span>p <span class="sym">&lt;</span> r<span class="sym">)</span>
		<span class="sym">++</span>i<span class="sym">;</span> <span class="com">/* Linear search */</span>
	    buf<span class="sym">[</span>pos<span class="sym">++] =</span> genelist<span class="sym">[</span>i<span class="sym">].</span>c<span class="sym">;</span>
	<span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>pos <span class="sym">&lt;</span> line<span class="sym">);</span>
	buf<span class="sym">[</span>line<span class="sym">] =</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
	<span class="kwd">fwrite_unlocked</span> <span class="sym">(</span>buf<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> line <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> stdout<span class="sym">);</span>
	count <span class="sym">-=</span> line<span class="sym">;</span>
    <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>count<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">) {</span>
    <span class="kwb">size_t</span> n<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {</span>
	<span class="kwb">char const</span> <span class="sym">*</span>arg <span class="sym">=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
 	<span class="kwb">char</span> <span class="sym">*</span>tail<span class="sym">;</span>
 	n <span class="sym">=</span> <span class="kwd">strtoul</span> <span class="sym">(</span>arg<span class="sym">, &amp;</span>tail<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
 	<span class="kwa">if</span> <span class="sym">(</span>tail <span class="sym">==</span> arg<span class="sym">)</span>
	    <span class="kwd">errx</span> <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="str">&quot;Could not convert</span> <span class="esc">\&quot;</span><span class="str">%s</span><span class="esc">\&quot;</span> <span class="str">to an unsigned long integer&quot;</span><span class="sym">,</span> arg<span class="sym">);</span>
    <span class="sym">}</span> <span class="kwa">else</span> n <span class="sym">=</span> <span class="num">1000</span><span class="sym">;</span>

    <span class="kwb">static</span> aminoacid_t iub<span class="sym">[] = {</span>
	<span class="sym">{</span> <span class="num">0.27</span><span class="sym">,</span> <span class="str">'a'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.12</span><span class="sym">,</span> <span class="str">'c'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.12</span><span class="sym">,</span> <span class="str">'g'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.27</span><span class="sym">,</span> <span class="str">'t'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'B'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'D'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'H'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'K'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'M'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'N'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'R'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'S'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'V'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'W'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.02</span><span class="sym">,</span> <span class="str">'Y'</span> <span class="sym">}};</span>

    <span class="kwb">static</span> aminoacid_t homosapiens<span class="sym">[] = {</span>
	<span class="sym">{</span> <span class="num">0.3029549426680</span><span class="sym">,</span> <span class="str">'a'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.1979883004921</span><span class="sym">,</span> <span class="str">'c'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.1975473066391</span><span class="sym">,</span> <span class="str">'g'</span> <span class="sym">},</span>
	<span class="sym">{</span> <span class="num">0.3015094502008</span><span class="sym">,</span> <span class="str">'t'</span> <span class="sym">}};</span>

    <span class="kwd">accumulate_probabilities</span> <span class="sym">(</span>iub<span class="sym">,</span> <span class="kwd">NELEMENTS</span><span class="sym">(</span>iub<span class="sym">));</span>
    <span class="kwd">accumulate_probabilities</span> <span class="sym">(</span>homosapiens<span class="sym">,</span> <span class="kwd">NELEMENTS</span><span class="sym">(</span>homosapiens<span class="sym">));</span>

    <span class="kwb">static char const</span> <span class="sym">*</span><span class="kwb">const</span> alu <span class="sym">=</span><span class="str">&quot;</span><span class="esc">\</span>
<span class="str">GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG</span><span class="esc">\</span>
<span class="str">GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA</span><span class="esc">\</span>
<span class="str">CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT</span><span class="esc">\</span>
<span class="str">ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA</span><span class="esc">\</span>
<span class="str">GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG</span><span class="esc">\</span>
<span class="str">AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC</span><span class="esc">\</span>
<span class="str">AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;</span>

    <span class="kwd">fputs_unlocked</span> <span class="sym">(</span><span class="str">&quot;&gt;ONE Homo sapiens alu</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);</span>
    <span class="kwd">repeat_fasta</span> <span class="sym">(</span>alu<span class="sym">,</span> <span class="num">2</span> <span class="sym">*</span> n<span class="sym">);</span>
    <span class="kwd">fputs_unlocked</span> <span class="sym">(</span><span class="str">&quot;&gt;TWO IUB ambiguity codes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);</span>
    <span class="kwd">random_fasta</span> <span class="sym">(</span>iub<span class="sym">,</span> <span class="num">3</span> <span class="sym">*</span> n<span class="sym">);</span>
    <span class="kwd">fputs_unlocked</span> <span class="sym">(</span><span class="str">&quot;&gt;THREE Homo sapiens frequency</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);</span>
    <span class="kwd">random_fasta</span> <span class="sym">(</span>homosapiens<span class="sym">,</span> <span class="num">5</span> <span class="sym">*</span> n<span class="sym">);</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
