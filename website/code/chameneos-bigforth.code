\ The Great Computer Language Shootout
\  http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org</span>
\
\  Contributed by Ian Osgood

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop value NUM

require tasker<span class="sym">.</span>fs

\ <span class="num">0</span> is none
<span class="num">1</span> constant red
<span class="num">2</span> constant yellow
<span class="num">3</span> constant blue

variable first
variable second
variable meetings

<span class="sym">:</span> <span class="kwd">meet</span> <span class="sym">(</span> me <span class="sym">--</span> other <span class="sym">)</span>
  begin pause second &#64; <span class="num">0</span><span class="sym">=</span> until
  first &#64;
  <span class="kwa">if</span>   second <span class="sym">!</span> first &#64; first off
  <span class="kwa">else</span> NUM dup <span class="num">0</span><span class="sym">=</span> <span class="kwa">if</span> nip exit then <span class="num">1</span><span class="sym">-</span> to NUM
       first <span class="sym">!</span>
       begin pause second &#64; until
       second &#64; second off
  then <span class="sym">;</span>

create complement
\ none   red   yellow     blue
  <span class="num">0</span> <span class="sym">,</span>      <span class="num">0</span> <span class="sym">,</span>      <span class="num">0</span> <span class="sym">,</span>      <span class="num">0</span> <span class="sym">,</span>  \ none
  <span class="num">0</span> <span class="sym">,</span>    red <span class="sym">,</span>   blue <span class="sym">,</span> yellow <span class="sym">,</span>  \ red
  <span class="num">0</span> <span class="sym">,</span>   blue <span class="sym">,</span> yellow <span class="sym">,</span>    red <span class="sym">,</span>  \ yellow
  <span class="num">0</span> <span class="sym">,</span> yellow <span class="sym">,</span>    red <span class="sym">,</span>   blue <span class="sym">,</span>  \ blue
does<span class="sym">&gt; (</span> c1 c2 <span class="sym">--</span> c3 <span class="sym">) &gt;</span>r <span class="num">4</span> <span class="sym">* +</span> cells r<span class="sym">&gt; +</span> &#64; <span class="sym">;</span>

<span class="sym">:</span> <span class="kwd">creature</span> <span class="sym">(</span> color <span class="sym">-- )</span>
  <span class="num">64</span> NewTask <span class="num">1</span> swap pass
  <span class="sym">(</span> task<span class="sym">:</span>  color <span class="sym">-- )</span>
  <span class="num">0</span> <span class="kwd">swap</span> <span class="sym">(</span> <span class="dir">#met color )</span>
  begin  dup meet ?dup
  <span class="kwa">while</span>  complement swap  <span class="num">1</span><span class="sym">+</span> swap
  repeat
  drop  meetings <span class="sym">+! ;</span>

<span class="sym">:</span> main
  blue yellow red blue  <span class="num">4 0</span> <span class="kwa">do</span> creature loop
  begin pause single<span class="sym">-</span>tasking? until <span class="sym">;</span>

main  meetings &#64; <span class="num">1</span> u<span class="sym">.</span>r cr  bye  \ done<span class="sym">!</span>
