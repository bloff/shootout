<span class="slc">// $Id: echo-kaffe.code,v 1.9 2006-01-12 08:22:46 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>
<span class="slc">// author: Dirus&#64;programmer.net</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>net<span class="sym">.*;</span>

<span class="kwa">public class</span> echo <span class="sym">{</span>
    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">Exception</span> <span class="sym">{</span>
	<span class="kwb">int</span> iIterations <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
	<span class="kwa">try</span> <span class="sym">{</span>
	    iIterations <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
	<span class="sym">}</span> <span class="kwa">catch</span><span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) { }</span>

	EchoServer esServer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">EchoServer</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
	<span class="kwa">new</span> <span class="kwd">EchoClient</span><span class="sym">(</span><span class="kwc">InetAddress</span><span class="sym">.</span><span class="kwd">getLocalHost</span><span class="sym">(),</span> esServer<span class="sym">.</span><span class="kwd">getPort</span><span class="sym">(),</span> iIterations<span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> EchoClient <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{</span>
    <span class="kwa">private static final</span> <span class="kwc">String</span> GREETING <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
    <span class="kwa">private final</span> <span class="kwc">InetAddress</span> inetaServer<span class="sym">;</span>
    <span class="kwa">private final</span> <span class="kwb">int</span>         iPort<span class="sym">;</span>
    <span class="kwa">private final</span> <span class="kwb">int</span>         iIterations<span class="sym">;</span>

    <span class="kwa">public</span> <span class="kwd">EchoClient</span><span class="sym">(</span><span class="kwc">InetAddress</span> inetaServer<span class="sym">,</span> <span class="kwb">int</span> iPort<span class="sym">,</span> <span class="kwb">int</span> iIterations<span class="sym">) {</span>
	<span class="kwa">this</span><span class="sym">.</span>inetaServer <span class="sym">=</span> inetaServer<span class="sym">;</span>
	<span class="kwa">this</span><span class="sym">.</span>iPort <span class="sym">=</span> iPort<span class="sym">;</span>
	<span class="kwa">this</span><span class="sym">.</span>iIterations <span class="sym">=</span> iIterations<span class="sym">;</span>
	<span class="kwd">start</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
	<span class="kwc">Socket</span> socketFromServer <span class="sym">=</span> null<span class="sym">;</span>
	<span class="kwa">try</span> <span class="sym">{</span>
	    socketFromServer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Socket</span><span class="sym">(</span>inetaServer<span class="sym">,</span> iPort<span class="sym">);</span>
	    <span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span>socketFromServer<span class="sym">.</span><span class="kwd">getInputStream</span><span class="sym">()));</span>
	    <span class="kwc">OutputStream</span> out <span class="sym">=</span> socketFromServer<span class="sym">.</span><span class="kwd">getOutputStream</span><span class="sym">();</span>

	    <span class="kwb">byte</span><span class="sym">[]</span> bytesOut <span class="sym">=</span> GREETING<span class="sym">.</span><span class="kwd">getBytes</span><span class="sym">();</span>
	    <span class="kwc">String</span> strIn <span class="sym">=</span> GREETING<span class="sym">.</span><span class="kwd">trim</span><span class="sym">();</span>
	    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> iIterations<span class="sym">; ++</span>i<span class="sym">) {</span>
		out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>bytesOut<span class="sym">);</span>
		out<span class="sym">.</span><span class="kwd">flush</span><span class="sym">();</span>
		<span class="kwc">String</span> strRead <span class="sym">=</span> in<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">();</span>
		<span class="kwa">if</span><span class="sym">(!</span>strRead<span class="sym">.</span><span class="kwd">equals</span><span class="sym">(</span>strIn<span class="sym">))</span>
		    <span class="kwa">throw new</span> <span class="kwc">RuntimeException</span><span class="sym">(</span><span class="str">&quot;client: \&quot;</span><span class="str">&quot; + strIn + &quot;</span>\<span class="str">&quot; ne \&quot;</span><span class="str">&quot; + strRead + &quot;</span>\<span class="str">&quot;&quot;</span><span class="sym">);</span>
	    <span class="sym">}</span>
	<span class="sym">}</span> <span class="kwa">catch</span><span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {</span>
	    e<span class="sym">.</span><span class="kwd">printStackTrace</span><span class="sym">();</span>
	<span class="sym">}</span>

	<span class="kwa">try</span> <span class="sym">{</span>
	    socketFromServer<span class="sym">.</span><span class="kwd">close</span><span class="sym">();</span>
	<span class="sym">}</span> <span class="kwa">catch</span><span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) { }</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> EchoServer <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{</span>
    <span class="kwa">private static final</span> <span class="kwb">int</span>   BUFFER_SIZE <span class="sym">=</span> <span class="num">1024</span><span class="sym">;</span>
    <span class="kwa">private final</span> <span class="kwc">ServerSocket</span> ssAccepting<span class="sym">;</span>
    <span class="kwa">private final</span> <span class="kwb">int</span>          iPort<span class="sym">;</span>

    <span class="kwa">public</span> <span class="kwd">EchoServer</span><span class="sym">(</span><span class="kwb">int</span> iPort<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{</span>
	ssAccepting <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ServerSocket</span><span class="sym">(</span>iPort<span class="sym">);</span>
	<span class="kwa">this</span><span class="sym">.</span>iPort <span class="sym">=</span> ssAccepting<span class="sym">.</span><span class="kwd">getLocalPort</span><span class="sym">();</span>
	<span class="kwd">start</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">public final</span> <span class="kwb">int</span> <span class="kwd">getPort</span><span class="sym">() {</span>
	<span class="kwa">return</span> iPort<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
	<span class="kwb">byte</span> bytesIn<span class="sym">[] =</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFFER_SIZE<span class="sym">];</span>
	<span class="kwa">try</span> <span class="sym">{</span>
	    <span class="kwc">Socket</span> socketClient <span class="sym">=</span> ssAccepting<span class="sym">.</span><span class="kwd">accept</span><span class="sym">();</span>
	    <span class="kwc">InputStream</span> in <span class="sym">=</span> socketClient<span class="sym">.</span><span class="kwd">getInputStream</span><span class="sym">();</span>
	    <span class="kwc">OutputStream</span> out <span class="sym">=</span> socketClient<span class="sym">.</span><span class="kwd">getOutputStream</span><span class="sym">();</span>
	    <span class="kwb">int</span> iLength<span class="sym">,</span> iCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	    <span class="kwa">while</span> <span class="sym">((</span>iLength <span class="sym">=</span> in<span class="sym">.</span><span class="kwd">read</span><span class="sym">(</span>bytesIn<span class="sym">)) != -</span><span class="num">1</span><span class="sym">) {</span>
		out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>bytesIn<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> iLength<span class="sym">);</span>
		out<span class="sym">.</span><span class="kwd">flush</span><span class="sym">();</span>
		iCount <span class="sym">+=</span> iLength<span class="sym">;</span>
	    <span class="sym">}</span>
	    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;server processed &quot;</span> <span class="sym">+</span> iCount <span class="sym">+</span> <span class="str">&quot; bytes&quot;</span><span class="sym">);</span>
	<span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {</span>
	    e<span class="sym">.</span><span class="kwd">printStackTrace</span><span class="sym">();</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
