<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">   compile with</span>
<span class="com">     gcc -pipe -Wall -O3 -fomit-frame-pointer -funroll-loops -lobjc</span>
<span class="com"></span>
<span class="com">     (i.e., the same as C, but adding -lobjc and taking out -static)</span>
<span class="com">*/</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;objc/Object.h&gt;</span>

<span class="kwa">&#64;interface</span> Genepairlist <span class="sym">:</span> Object <span class="sym">{</span>
    <span class="kwa">&#64;public</span>
    <span class="kwb">char</span><span class="sym">*</span> genelist<span class="sym">;</span>
    <span class="kwb">double</span><span class="sym">*</span> iubprobs<span class="sym">;</span>
    <span class="kwb">int</span> mysize<span class="sym">;</span>
<span class="sym">}</span>
<span class="sym">-</span>init<span class="sym">: (</span><span class="kwb">char</span><span class="sym">*)</span> in_iub <span class="sym">: (</span><span class="kwb">double</span><span class="sym">*)</span> in_iubprobs<span class="sym">;</span>
<span class="sym">-</span>makeCumulative<span class="sym">;</span>
<span class="kwa">&#64;end</span>

<span class="kwa">&#64;interface</span> FastaWriter <span class="sym">:</span> Object <span class="sym">{</span>
    Genepairlist<span class="sym">*</span> iubpairs<span class="sym">;</span>
    <span class="kwb">char</span><span class="sym">*</span> alu<span class="sym">;</span>
    <span class="kwb">int</span> alulen<span class="sym">;</span>
    <span class="kwb">int</span> mark<span class="sym">;</span>
    <span class="kwb">char</span><span class="sym">*</span> dst<span class="sym">;</span>
    <span class="kwb">int</span> needed<span class="sym">;</span>
<span class="sym">}</span>
<span class="sym">-</span>writeFasta <span class="sym">: (</span><span class="kwa">SEL</span><span class="sym">)</span> generator <span class="sym">: (</span><span class="kwb">char</span><span class="sym">*)</span> header <span class="sym">: (</span><span class="kwb">long</span><span class="sym">)</span> n<span class="sym">;</span>
<span class="sym">-</span>randomFasta<span class="sym">;</span>
<span class="sym">-</span>repeatFasta<span class="sym">;</span>
<span class="sym">-</span>setAlu <span class="sym">: (</span><span class="kwb">char</span><span class="sym">*)</span> aluin<span class="sym">;</span>
<span class="sym">-</span>setGenePairlist <span class="sym">: (</span>Genepairlist<span class="sym">*)</span> gpin<span class="sym">;</span>
<span class="kwa">&#64;end</span>

<span class="kwa">&#64;implementation</span> Genepairlist
<span class="sym">-</span>init<span class="sym">: (</span><span class="kwb">char</span><span class="sym">*)</span> in_iub <span class="sym">: (</span><span class="kwb">double</span><span class="sym">*)</span> in_iubprobs <span class="sym">{</span>
    mysize <span class="sym">=</span> <span class="kwd">strlen</span><span class="sym">(</span>in_iub<span class="sym">);</span>
    genelist <span class="sym">=</span> in_iub<span class="sym">;</span>
    iubprobs <span class="sym">=</span> in_iubprobs<span class="sym">;</span>
    <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="sym">-</span>makeCumulative <span class="sym">{</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    <span class="kwb">double</span> cp <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> mysize<span class="sym">;</span> i<span class="sym">++) {</span>
        cp <span class="sym">+=</span> iubprobs<span class="sym">[</span>i<span class="sym">];</span>
        iubprobs<span class="sym">[</span>i<span class="sym">] =</span> cp<span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="kwa">&#64;end</span>

<span class="kwa">&#64;implementation</span> FastaWriter
<span class="sym">-</span>writeFasta <span class="sym">: (</span><span class="kwa">SEL</span><span class="sym">)</span> generator <span class="sym">: (</span><span class="kwb">char</span><span class="sym">*)</span> header <span class="sym">: (</span><span class="kwb">long</span><span class="sym">)</span> n <span class="sym">{</span>
   <span class="kwb">long</span> todo <span class="sym">=</span> n<span class="sym">;</span>
   <span class="kwb">char</span> pick<span class="sym">[</span><span class="num">61</span><span class="sym">];</span>
   dst <span class="sym">=</span> pick<span class="sym">;</span>
      <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;&gt;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> header<span class="sym">);</span>
   <span class="kwa">for</span> <span class="sym">(;</span> todo <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> todo <span class="sym">-=</span> <span class="num">60</span><span class="sym">) {</span>
       needed <span class="sym">= (</span>todo <span class="sym">&lt;</span> <span class="num">60</span><span class="sym">)</span> ? todo <span class="sym">:</span> <span class="num">60</span><span class="sym">;</span>
       <span class="sym">[</span><span class="kwa">self</span> perform<span class="sym">:</span> generator<span class="sym">];</span>
       pick<span class="sym">[</span>needed<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;</span>
       <span class="kwd">puts</span> <span class="sym">(</span>pick<span class="sym">);</span>
   <span class="sym">}</span>
   <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="sym">-</span>randomFasta <span class="sym">{</span>
    <span class="kwb">static long</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>
    <span class="kwb">int</span> ii<span class="sym">,</span> i<span class="sym">,</span> lo<span class="sym">,</span> hi<span class="sym">;</span>
    <span class="kwb">double</span> r<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>ii <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> ii <span class="sym">&lt;</span> needed<span class="sym">;</span> ii<span class="sym">++) {</span>
        r <span class="sym">= ((</span><span class="kwb">double</span><span class="sym">) (</span>last <span class="sym">= (</span>last <span class="sym">*</span> <span class="num">3877</span> <span class="sym">+</span> <span class="num">29573</span><span class="sym">) %</span> <span class="num">139968</span><span class="sym">)) /</span> <span class="num">139968</span><span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&gt;=</span> iubpairs<span class="sym">-&gt;</span>iubprobs<span class="sym">[</span><span class="num">0</span><span class="sym">]) {</span>
            lo <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            hi <span class="sym">=</span> iubpairs<span class="sym">-&gt;</span>mysize<span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
            <span class="kwa">while</span> <span class="sym">(</span>hi <span class="sym">&gt;</span> lo<span class="sym">+</span><span class="num">1</span><span class="sym">) {</span>
                i <span class="sym">= (</span>hi <span class="sym">+</span> lo<span class="sym">) /</span> <span class="num">2</span><span class="sym">;</span>
                <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&lt;</span> iubpairs<span class="sym">-&gt;</span>iubprobs<span class="sym">[</span>i<span class="sym">])</span> hi <span class="sym">=</span> i<span class="sym">;</span> <span class="kwa">else</span> lo <span class="sym">=</span> i<span class="sym">;</span>
            <span class="sym">}</span>
            dst<span class="sym">[</span>ii<span class="sym">] =</span> iubpairs<span class="sym">-&gt;</span>genelist<span class="sym">[</span>hi<span class="sym">];</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            dst<span class="sym">[</span>ii<span class="sym">] =</span> iubpairs<span class="sym">-&gt;</span>genelist<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="sym">-</span>repeatFasta <span class="sym">{</span>
    <span class="kwb">int</span> copylen<span class="sym">,</span> dstmark<span class="sym">;</span>
    dstmark <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>dstmark <span class="sym">&lt;</span> needed<span class="sym">) {</span>
        copylen <span class="sym">=</span> alulen <span class="sym">-</span> mark<span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span>copylen <span class="sym">&gt;</span> needed<span class="sym">)</span> copylen <span class="sym">=</span> needed<span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(!</span> mark <span class="sym">&amp;&amp; (</span>copylen <span class="sym">+</span> dstmark <span class="sym">&gt;</span> <span class="num">60</span><span class="sym">))</span> copylen <span class="sym">=</span> <span class="num">60</span> <span class="sym">-</span> dstmark<span class="sym">;</span>
        <span class="kwd">memcpy</span><span class="sym">(</span>dst <span class="sym">+</span> dstmark<span class="sym">,</span> alu <span class="sym">+</span> mark<span class="sym">,</span> copylen<span class="sym">);</span>
        mark <span class="sym">+=</span> copylen<span class="sym">;</span>
        dstmark <span class="sym">+=</span> copylen<span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span>mark <span class="sym">&gt;=</span> alulen<span class="sym">)</span> mark <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="sym">-</span>setAlu <span class="sym">: (</span><span class="kwb">char</span><span class="sym">*)</span> aluin <span class="sym">{</span>
    alu <span class="sym">=</span> aluin<span class="sym">;</span>
    alulen <span class="sym">=</span> <span class="kwd">strlen</span><span class="sym">(</span>alu<span class="sym">);</span>
    mark <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="sym">-</span>setGenePairlist <span class="sym">: (</span>Genepairlist<span class="sym">*)</span> gpin <span class="sym">{</span>
    iubpairs <span class="sym">=</span> gpin<span class="sym">;</span>
    <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="kwa">&#64;end</span>

<span class="kwb">int</span> <span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span> argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> n <span class="sym">= (</span>argc<span class="sym">&gt;</span><span class="num">1</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1000</span><span class="sym">;</span>
    <span class="kwb">char</span> <span class="sym">*</span> alu1 <span class="sym">=</span>
       <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCA&quot;</span> \
       <span class="str">&quot;CCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> \
       <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCA&quot;</span> \
       <span class="str">&quot;GGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> \
       <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;</span>
    <span class="kwb">double</span> a1<span class="sym">[] = {</span><span class="num">0.27</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span>
       <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">};</span>
    <span class="kwb">double</span> a2<span class="sym">[] = {</span><span class="num">0.3029549426680</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">,</span>
       <span class="num">0.3015094502008</span><span class="sym">};</span>

    Genepairlist<span class="sym">*</span> iub <span class="sym">= [[[</span>Genepairlist alloc<span class="sym">]</span> init <span class="sym">:</span> <span class="str">&quot;acgtBDHKMNRSVWY&quot;</span> <span class="sym">:</span> a1<span class="sym">]</span>
       makeCumulative<span class="sym">];</span>
    Genepairlist<span class="sym">*</span> homosapiens <span class="sym">= [[[</span>Genepairlist alloc<span class="sym">]</span> init <span class="sym">:</span> <span class="str">&quot;acgt&quot;</span> <span class="sym">:</span> a2<span class="sym">]</span>
       makeCumulative<span class="sym">];</span>

    <span class="sym">[[[</span>FastaWriter alloc<span class="sym">]</span> setAlu <span class="sym">:</span> alu1<span class="sym">]</span> writeFasta <span class="sym">:</span> <span class="kwa">&#64;selector</span><span class="sym">(</span>repeatFasta<span class="sym">) :</span>
       <span class="str">&quot;ONE Homo sapiens alu&quot;</span> <span class="sym">:</span> n <span class="sym">*</span> <span class="num">2</span><span class="sym">];</span>
    <span class="sym">[[[</span>FastaWriter alloc<span class="sym">]</span> setGenePairlist <span class="sym">:</span> iub<span class="sym">]</span> writeFasta <span class="sym">:</span>
       <span class="kwa">&#64;selector</span><span class="sym">(</span>randomFasta<span class="sym">) :</span> <span class="str">&quot;TWO IUB ambiguity codes&quot;</span> <span class="sym">:</span> n <span class="sym">*</span> <span class="num">3</span><span class="sym">];</span>
    <span class="sym">[[[</span>FastaWriter alloc<span class="sym">]</span> setGenePairlist <span class="sym">:</span> homosapiens<span class="sym">]</span> writeFasta <span class="sym">:</span>
       <span class="kwa">&#64;selector</span><span class="sym">(</span>randomFasta<span class="sym">) :</span> <span class="str">&quot;THREE Homo sapiens frequency&quot;</span> <span class="sym">:</span> n <span class="sym">*</span> <span class="num">5</span><span class="sym">];</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

