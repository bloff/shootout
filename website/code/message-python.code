<span class="slc">#!/usr/bin/python -OO</span>
<span class="slc"># The Computer Language Shootout Benchmarks</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by Kevin Carson</span>

<span class="kwc">from</span> threading <span class="kwc">import</span> Thread
<span class="kwc">from</span> Queue <span class="kwc">import</span> Queue
<span class="kwc">from</span> sys <span class="kwc">import</span> argv


<span class="kwa">class</span> <span class="kwd">link</span><span class="sym">(</span>Thread<span class="sym">) :</span>
    <span class="kwb">def</span> <span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> next<span class="sym">,</span> ticker<span class="sym">) :</span>
        Thread<span class="sym">.</span><span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">)</span>
        <span class="kwc">self</span><span class="sym">.</span>next <span class="sym">=</span> next
        <span class="kwc">self</span><span class="sym">.</span>store <span class="sym">=</span> <span class="num">0</span>
        <span class="kwc">self</span><span class="sym">.</span>inq <span class="sym">=</span> <span class="kwd">Queue</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
        <span class="kwc">self</span><span class="sym">.</span>ticker <span class="sym">=</span> ticker

    <span class="kwb">def</span> <span class="kwd">run</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">) :</span>
        pull <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>inq<span class="sym">.</span>get
        push <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>next<span class="sym">.</span>inq<span class="sym">.</span>put
        store <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>store
        countdown <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>ticker

        <span class="kwb">while</span> countdown <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">:</span>
            store <span class="sym">=</span> <span class="kwd">pull</span><span class="sym">()</span>
            <span class="kwd">push</span><span class="sym">(</span>store <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
            countdown <span class="sym">-=</span> <span class="num">1</span>


<span class="kwa">class</span> <span class="kwd">terminus</span><span class="sym">(</span>Thread<span class="sym">) :</span>
    <span class="kwb">def</span> <span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> ticker<span class="sym">) :</span>
        Thread<span class="sym">.</span><span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">)</span>
        <span class="kwc">self</span><span class="sym">.</span>sum <span class="sym">=</span> <span class="num">0</span>
        <span class="kwc">self</span><span class="sym">.</span>inq <span class="sym">=</span> <span class="kwd">Queue</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
        <span class="kwc">self</span><span class="sym">.</span>ticker <span class="sym">=</span> ticker

    <span class="kwb">def</span> <span class="kwd">run</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">) :</span>
        pull <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>inq<span class="sym">.</span>get
        sum <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>sum
        countdown <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>ticker

        <span class="kwb">while</span> countdown <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">:</span>
            sum <span class="sym">+=</span> <span class="kwd">pull</span><span class="sym">()</span>
            countdown <span class="sym">-=</span> <span class="num">1</span>

        <span class="kwb">print</span> <span class="str">&quot;%d&quot;</span> <span class="sym">%</span> sum

N <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>
terminus_idx <span class="sym">=</span> <span class="num">500</span>

chain_length <span class="sym">=</span> terminus_idx <span class="sym">+</span> <span class="num">1</span>

<span class="slc"># Create the chain of threads then fire them up</span>
tasks <span class="sym">= [</span>None<span class="sym">] *</span> chain_length
tasks<span class="sym">[</span>terminus_idx<span class="sym">] =</span> <span class="kwd">terminus</span><span class="sym">(</span>N<span class="sym">)</span>
tasks<span class="sym">[</span>terminus_idx <span class="sym">-</span> <span class="num">1</span><span class="sym">] =</span> <span class="kwd">link</span><span class="sym">(</span>tasks<span class="sym">[</span>terminus_idx<span class="sym">],</span> N<span class="sym">)</span>

<span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>terminus_idx <span class="sym">-</span> <span class="num">2</span><span class="sym">, -</span><span class="num">1</span><span class="sym">, -</span><span class="num">1</span><span class="sym">) :</span>
    tasks<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">link</span><span class="sym">(</span>tasks<span class="sym">[</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">],</span> N<span class="sym">)</span>

<span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>chain_length<span class="sym">) :</span>
    tasks<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">start</span><span class="sym">()</span>

<span class="slc"># Feed the chain with integer messages</span>
feed_chain <span class="sym">=</span> tasks<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>inq<span class="sym">.</span>put

<span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>N<span class="sym">) :</span>
    <span class="kwd">feed_chain</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>

<span class="slc"># Wait upon the terminus process</span>
tasks<span class="sym">[</span>terminus_idx<span class="sym">].</span><span class="kwd">join</span><span class="sym">()</span>
