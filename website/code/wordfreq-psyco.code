<span class="line">    1 </span><span class="slc">#!/usr/bin/python
</span><span class="line">    2 </span><span class="slc"></span><span class="slc"># $Id: wordfreq-psyco.code,v 1.3 2004-11-11 07:14:24 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">#
</span><span class="line">    5 </span><span class="slc"></span><span class="slc"># adapted from Bill Lear's original python word frequency counter
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">#
</span><span class="line">    7 </span><span class="slc"></span><span class="slc"># Joel Rosdahl suggested using translate table to speed up
</span><span class="line">    8 </span><span class="slc"></span><span class="slc"># word splitting.  That change alone sped this program up by
</span><span class="line">    9 </span><span class="slc"></span><span class="slc"># at least a factor of 3.
</span><span class="line">   10 </span><span class="slc"></span><span class="slc">#
</span><span class="line">   11 </span><span class="slc"></span><span class="slc"># with further speedups from Mark Baker
</span><span class="line">   12 </span><span class="slc"></span>
<span class="line">   13 </span><span class="kwc">import</span> sys<span class="sym">,</span> psyco
<span class="line">   14 </span>psyco<span class="sym">.</span>full<span class="sym">()
</span><span class="line">   15 </span><span class="sym">
</span><span class="line">   16 </span><span class="sym"></span><span class="kwb">def</span> main<span class="sym">():
</span><span class="line">   17 </span><span class="sym"></span>    count <span class="sym">= {}
</span><span class="line">   18 </span><span class="sym"></span>    i_r <span class="sym">=</span> <span class="kwa">map</span><span class="sym">(</span><span class="kwa">chr</span><span class="sym">,</span> <span class="kwa">range</span><span class="sym">(</span><span class="num">256</span><span class="sym">))
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym"></span>    trans <span class="sym">= [</span><span class="str">' '</span><span class="sym">] *</span> <span class="num">256
</span><span class="line">   21 </span><span class="num"></span>    o_a<span class="sym">,</span> o_z <span class="sym">=</span> <span class="kwa">ord</span><span class="sym">(</span><span class="str">'a'</span><span class="sym">), (</span><span class="kwa">ord</span><span class="sym">(</span><span class="str">'z'</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)
</span><span class="line">   22 </span><span class="sym"></span>    trans<span class="sym">[</span><span class="kwa">ord</span><span class="sym">(</span><span class="str">'A'</span><span class="sym">):(</span><span class="kwa">ord</span><span class="sym">(</span><span class="str">'Z'</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)] =</span> i_r<span class="sym">[</span>o_a<span class="sym">:</span>o_z<span class="sym">]
</span><span class="line">   23 </span><span class="sym"></span>    trans<span class="sym">[</span>o_a<span class="sym">:</span>o_z<span class="sym">] =</span> i_r<span class="sym">[</span>o_a<span class="sym">:</span>o_z<span class="sym">]
</span><span class="line">   24 </span><span class="sym"></span>    trans <span class="sym">=</span> <span class="str">''</span><span class="sym">.</span>join<span class="sym">(</span>trans<span class="sym">)
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span>    rl <span class="sym">=</span> sys<span class="sym">.</span>stdin<span class="sym">.</span>readlines
<span class="line">   27 </span>
<span class="line">   28 </span>    lines <span class="sym">=</span> rl<span class="sym">(</span><span class="num">4095</span><span class="sym">)
</span><span class="line">   29 </span><span class="sym"></span>    <span class="kwb">while</span> lines<span class="sym">:
</span><span class="line">   30 </span><span class="sym"></span>        <span class="kwb">for</span> line <span class="kwb">in</span> lines<span class="sym">:
</span><span class="line">   31 </span><span class="sym"></span>            <span class="kwb">for</span> word <span class="kwb">in</span> line<span class="sym">.</span>translate<span class="sym">(</span>trans<span class="sym">).</span>split<span class="sym">():
</span><span class="line">   32 </span><span class="sym"></span>                <span class="kwb">try</span><span class="sym">:
</span><span class="line">   33 </span><span class="sym"></span>                    count<span class="sym">[</span>word<span class="sym">] +=</span> <span class="num">1
</span><span class="line">   34 </span><span class="num"></span>                <span class="kwb">except</span> <span class="kwa">KeyError</span><span class="sym">:
</span><span class="line">   35 </span><span class="sym"></span>                    count<span class="sym">[</span>word<span class="sym">] =</span> <span class="num">1
</span><span class="line">   36 </span><span class="num"></span>        lines <span class="sym">=</span> rl<span class="sym">(</span><span class="num">4095</span><span class="sym">)
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym"></span>    l <span class="sym">=</span> zip<span class="sym">(</span>count<span class="sym">.</span>values<span class="sym">(),</span> count<span class="sym">.</span>keys<span class="sym">())
</span><span class="line">   39 </span><span class="sym"></span>    l<span class="sym">.</span>sort<span class="sym">()
</span><span class="line">   40 </span><span class="sym"></span>    l<span class="sym">.</span>reverse<span class="sym">()
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym"></span>    <span class="kwb">print</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">.</span>join<span class="sym">([</span><span class="str">&quot;%7s %s&quot;</span> <span class="sym">% (</span>count<span class="sym">,</span> word<span class="sym">)</span> <span class="kwb">for</span> <span class="sym">(</span>count<span class="sym">,</span> word<span class="sym">)</span> <span class="kwb">in</span> l<span class="sym">])
</span><span class="line">   43 </span><span class="sym">
</span><span class="line">   44 </span><span class="sym"></span>main<span class="sym">()</span>
