BUILD COMMANDS FOR: fasta.cmucl

Sat Sep  3 00:35:06 PDT 2005

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "fasta.cmucl_compile")'
### START fasta.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "fasta.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END fasta.cmucl_compile


; 
; 
; File: /opt/shootout/shootout/bench/fasta/tmp/fasta.cmucl

; In: DEFSTRUCT FREQ

;   (DEFSTRUCT (FREQ
;                #)
;     (C #\x :TYPE BASE-CHAR)
;     (P 0.0d0 :TYPE DOUBLE-FLOAT))
; Note: Deleting unused function
;   (SETF FREQ-C)
; 

; In: DEFUN MAIN

;   (LENGTH IUB)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a SEQUENCE, not a VECTOR.
; 
;   (LENGTH HOMOSAPIENS)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a SEQUENCE, not a VECTOR.
; 

; In: DEFUN MAKE-CUMULATIVE

;   (LENGTH FREQS)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a SEQUENCE, not a VECTOR.
; 

; In: DEFUN MAKE-REPEAT-FASTA

;   (LENGTH S)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a SEQUENCE, not a VECTOR.
; 
;   (<= CHARS-REMAINING 0)
; --> IF 
; ==>
;   (> CHARS-REMAINING 0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
;   (MIN CHARS-REMAINING LINE-LENGTH)
; --> LET LET IF <= IF 
; ==>
;   (> #:OO-208 #:OO-209)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
;   (+ W-START CURRENT-LINE-LENGTH)
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a REAL, not a FLOAT.
; 
;   (- CHARS-REMAINING CURRENT-LINE-LENGTH)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a RATIONAL.
;     The second argument is a REAL, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
;     The second argument is a REAL, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
; 

; In: DEFUN MAKE-CUMULATIVE

;   (AREF FREQS I)
; --> LET* 
; ==>
;   (KERNEL:DATA-VECTOR-REF ARRAY KERNEL:INDEX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a VECTOR, not a SIMPLE-ARRAY.
; ; [Last message occurs 2 times]


; In: DEFUN MAKE-REPEAT-FASTA

;   (<= CHARS-REMAINING 0)
; --> IF 
; ==>
;   (> CHARS-REMAINING 0)
; Note: Forced to do GENERIC-> (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
;   (MIN CHARS-REMAINING LINE-LENGTH)
; --> LET LET IF <= IF 
; ==>
;   (> #:OO-208 #:OO-209)
; Note: Forced to do GENERIC-> (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
;   (- CHARS-REMAINING CURRENT-LINE-LENGTH)
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
;     The result is a REAL, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
;     The result is a REAL, not a SINGLE-FLOAT.
;     etc.
; 

; In: DEFSTRUCT FREQ

;   (DEFSTRUCT (FREQ
;                #)
;     (C #\x :TYPE BASE-CHAR)
;     (P 0.0d0 :TYPE DOUBLE-FLOAT))
; --> BLOCK SETF LISP::%SETELT LISP::%ASET LET* 
; ==>
;   (KERNEL:DATA-VECTOR-SET ARRAY KERNEL:INDEX C::NEW-VALUE)
; Note: Doing float to pointer coercion (cost 13) from CP, for:
;     The second argument of DATA-VECTOR-SET/SIMPLE-VECTOR-C.
; 

; Compilation unit finished.
;   22 notes

### START fasta.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "fasta.x86f" :verbose nil :print nil)
(main) (quit)
### END fasta.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "fasta.cmucl_run" :verbose nil :print nil)' %A


PROGRAM OUTPUT
==============
>ONE Homo sapiens alu
GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGA
TCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACT
AAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAG
GCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCG
CCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGT
GGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCA
GGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAA
TTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAG
AATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCA
GCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGT
AATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACC
AGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTG
GTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACC
CGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAG
AGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTT
TGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACA
TGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCT
GTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGG
TTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGT
CTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGG
CGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCG
TCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTA
CTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCG
AGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCG
GGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACC
TGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAA
TACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGA
GGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACT
GCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTC
ACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGT
TCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGC
CGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCG
CTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTG
GGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCC
CAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCT
GGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGC
GCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGA
GGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGA
GACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGA
GGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTG
AAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAAT
CCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCA
GTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAA
AAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGC
GGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCT
ACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGG
GAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATC
GCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGC
GGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGG
===================================
!!! Note: Truncated to 50 lines !!!
===================================
