<span class="dir">#!/usr/bin/pike
</span><span class="slc">// -*- mode: pike -*-
</span><span class="slc">// $Id: matrix-pike.code,v 1.5 2005-05-17 05:20:32 bfulgham Exp $
</span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="slc">// from: Per Hedbor
</span>
<span class="kwb">int</span> size <span class="sym">=</span> <span class="num">30</span><span class="sym">;

</span><span class="kwb">array</span><span class="sym">(</span><span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">))
</span>mkmatrix<span class="sym">(</span><span class="kwb">int</span> <span class="kwa">rows</span><span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">) {
</span>    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">))</span> m <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span><span class="kwa">rows</span><span class="sym">);
</span>    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>    for <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="kwa">rows</span><span class="sym">;</span> i<span class="sym">++) {
</span>	<span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> row <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span>cols<span class="sym">);
</span>	for <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++) {
</span>	    row<span class="sym">[</span>j<span class="sym">] =</span> count<span class="sym">++;
	}
</span>	m<span class="sym">[</span>i<span class="sym">] =</span> row<span class="sym">;
    }
</span>    return<span class="sym">(</span>m<span class="sym">);
}

</span><span class="kwb">void
</span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">) {
</span>    <span class="kwb">int</span> n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">];
</span>    if <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)
</span>      n <span class="sym">=</span> <span class="num">1</span><span class="sym">;

</span>    Math.Matrix m1 <span class="sym">=</span> Math.Matrix<span class="sym">(</span>mkmatrix<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">));
</span>    Math.Matrix m2 <span class="sym">=</span> Math.Matrix<span class="sym">(</span>mkmatrix<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">));
</span>    Math.Matrix mm<span class="sym">;
</span>    for<span class="sym">(</span> <span class="kwb">int</span> i <span class="sym">=</span> n<span class="sym">;</span> i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">-- )
</span>      mm <span class="sym">=</span> m1 <span class="sym">*</span> m2<span class="sym">;
</span>    <span class="kwb">array</span> q <span class="sym">= (</span><span class="kwb">array</span><span class="sym">(</span><span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)))(</span><span class="kwb">array</span><span class="sym">)</span>mm<span class="sym">;
</span>    <span class="kwa">write</span><span class="sym">(</span> <span class="str">&quot;%d %d %d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> q<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">],</span> q<span class="sym">[</span><span class="num">2</span><span class="sym">][</span><span class="num">3</span><span class="sym">],</span> q<span class="sym">[</span><span class="num">3</span><span class="sym">][</span><span class="num">2</span><span class="sym">],</span> q<span class="sym">[</span><span class="num">4</span><span class="sym">][</span><span class="num">4</span><span class="sym">] );
}</span>
