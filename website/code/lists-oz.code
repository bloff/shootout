<span class="slc">%%  Always 10000's times faster to append to the head of</span>
<span class="slc">%%  the list (and then Reverse) rather than traversing</span>
<span class="slc">%%  the entire list in each append before adding to tail.</span>
<span class="slc">%%</span>
<span class="slc">%%  http://shootout.alioth.debian.org/</span>
<span class="slc">%%</span>
<span class="slc">%%  contributed by Isaac Gouy</span>
<span class="slc">%%</span>
<span class="slc">%%  Usage: start from command line with</span>
<span class="slc">%%     ozc -x lists.oz -o lists.oz.exe</span>
<span class="slc">%%     lists.oz.exe 16</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> System Application

<span class="kwa">define</span>
   L1 L2 L3

   <span class="kwa">fun</span> <span class="sym">{</span>MoveLeftRight Li2 Li3<span class="sym">}</span>
      <span class="slc">%% list|item requires list to be traversed to end</span>
      <span class="slc">%% before appending item. item|list always faster.</span>
      <span class="slc">%% {Reverse item|list} result same as list|item</span>
      <span class="kwa">local</span> H T <span class="kwa">in</span>
	 <span class="kwa">if</span> Li2 <span class="sym">==</span> nil <span class="kwa">then</span> Li2<span class="sym">|[{</span>Reverse Li3<span class="sym">}]</span>
	 <span class="kwa">else</span>
	    H<span class="sym">|</span>T <span class="sym">=</span> Li2               <span class="slc">%% take from left</span>
	    <span class="sym">{</span>MoveLeftRight T H<span class="sym">|</span>Li3<span class="sym">}</span> <span class="slc">%% append to left, reverse later</span>
	 <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>AssignL2L3 L<span class="sym">}</span>
      <span class="slc">%% Factor out the assignment to allow simple reuse</span>
      <span class="sym">{</span>Assign L2 <span class="sym">{</span>Nth L <span class="num">1</span><span class="sym">}}</span>
      <span class="sym">{</span>Assign L3 <span class="sym">{</span>List<span class="sym">.</span>last L<span class="sym">}}</span>
   <span class="kwa">end</span>

<span class="kwa">in</span>
   <span class="kwa">local</span> Args N Size <span class="kwa">in</span>
      <span class="sym">[</span>Args<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
      N <span class="sym">= {</span>String<span class="sym">.</span>toInt Args<span class="sym">}</span>
      Size <span class="sym">=</span> <span class="num">10000</span>
      <span class="sym">{</span>NewCell nil L1<span class="sym">}{</span>NewCell nil L2<span class="sym">}{</span>NewCell nil L3<span class="sym">}</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>N do
	    <span class="slc">%% Create L1</span>
	 <span class="sym">{</span>Assign L1 <span class="sym">{</span>List<span class="sym">.</span>number <span class="num">1</span> Size <span class="num">1</span><span class="sym">} }</span>
	    <span class="slc">%% Copy L1 to L2</span>
	 <span class="sym">{</span>Assign L2 <span class="sym">{</span>List<span class="sym">.</span>take <span class="sym">{</span>Access L1<span class="sym">}</span> Size<span class="sym">} }</span>
	 <span class="sym">{</span>Assign L3 nil<span class="sym">}</span>

	    <span class="slc">%% Move items from L2 to L3</span>
	 <span class="sym">{</span>AssignL2L3 <span class="sym">{</span>MoveLeftRight <span class="sym">{</span>Access L2<span class="sym">}{</span>Access L3<span class="sym">} }}</span>
	    <span class="slc">%% Move items from L3 to L2</span>
	 <span class="sym">{</span>AssignL2L3 <span class="sym">{</span>Reverse <span class="sym">{</span>MoveLeftRight <span class="sym">{</span>Reverse <span class="sym">{</span>Access L3<span class="sym">}}{</span>Access L2<span class="sym">}} }}</span>
	    <span class="slc">%% Reverse L1</span>
	 <span class="sym">{</span>Assign L1 <span class="sym">{</span>Reverse <span class="sym">{</span>Access L1<span class="sym">}}}</span>
         <span class="kwa">if</span> <span class="sym">{</span>Not <span class="sym">{</span>Nth <span class="sym">{</span>Access L1<span class="sym">}</span> <span class="num">1</span><span class="sym">} ==</span> Size <span class="kwa">andthen</span> <span class="sym">{</span>Access L1<span class="sym">} == {</span>Access L2<span class="sym">}}</span> <span class="kwa">then</span>
            <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="str">'L1 != L2'</span><span class="sym">}</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="sym">{</span>Length <span class="sym">{</span>Access L1<span class="sym">}}}</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
   <span class="kwa">end</span>
<span class="kwa">end</span>
