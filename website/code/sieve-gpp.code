<span class="slc">// -*- mode: c++ -*-
</span><span class="slc">// $Id: sieve-gpp.code,v 1.8 2005-06-08 07:55:54 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">// From Bill Lear
</span><span class="slc">// with help from Stephane Lajoie
</span>
<span class="dir">#include &lt;iostream&gt;
</span><span class="dir">#include &lt;algorithm&gt;
</span><span class="dir">#include &lt;vector&gt;
</span><span class="dir">#include &lt;cstdlib&gt;
</span>
<span class="kwa">using namespace</span> std<span class="sym">;

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">size_t</span> NUM <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span> ? <span class="sym">(</span>atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) &lt;</span> <span class="num">1</span> ? <span class="num">1</span> <span class="sym">:</span> atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])):</span> <span class="num">1</span><span class="sym">);

</span>    vector<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt;</span> primes<span class="sym">(</span><span class="num">8192</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span>    vector<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt;::</span>iterator pbegin <span class="sym">=</span> primes<span class="sym">.</span>begin<span class="sym">();
</span>    vector<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt;::</span>iterator begin <span class="sym">=</span> pbegin <span class="sym">+</span> <span class="num">2</span><span class="sym">;
</span>    vector<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt;::</span>iterator end <span class="sym">=</span> primes<span class="sym">.</span>end<span class="sym">();

</span>    <span class="kwa">while</span> <span class="sym">(</span>NUM<span class="sym">--) {
</span>        fill<span class="sym">(</span>begin<span class="sym">,</span> end<span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span>        <span class="kwa">for</span> <span class="sym">(</span>vector<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt;::</span>iterator i <span class="sym">=</span> begin<span class="sym">;</span> i <span class="sym">&lt;</span> end<span class="sym">; ++</span>i<span class="sym">) {
</span>            <span class="kwa">if</span> <span class="sym">(*</span>i<span class="sym">) {
</span>                <span class="kwb">const size_t</span> p <span class="sym">=</span> i <span class="sym">-</span> pbegin<span class="sym">;
</span>                <span class="kwa">for</span> <span class="sym">(</span>vector<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt;::</span>iterator k <span class="sym">=</span> i <span class="sym">+</span> p<span class="sym">;</span> k <span class="sym">&lt;</span> end<span class="sym">;</span> k <span class="sym">+=</span> p<span class="sym">) {
                    *</span>k <span class="sym">=</span> <span class="num">0</span><span class="sym">;
                }
            }
        }
    }

</span>    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Count: &quot;</span> <span class="sym">&lt;&lt;</span> count<span class="sym">(</span>begin<span class="sym">,</span> end<span class="sym">,</span> <span class="num">1</span><span class="sym">) &lt;&lt;</span> endl<span class="sym">;
}</span>
