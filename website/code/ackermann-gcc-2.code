<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: ackermann-gcc-2.code,v 1.11 2006-04-01 21:26:57 bfulgham Exp $</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Modified to use C inline and unroll of recursive functions</span>
<span class="com"> * by Paul Hsieh</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;limits.h&gt;</span>
<span class="dir">#if (defined(__linux) || defined(__unix) || defined(__GNUC__))</span>
<span class="dir">#include &lt;unistd.h&gt;</span>
<span class="dir">#elif (defined(WIN32) || defined(_WIN32) || defined(__WIN32) ||</span>
<span class="kwd">defined</span><span class="sym">(</span>_WINDOWS<span class="sym">) ||</span> <span class="kwd">defined</span><span class="sym">(</span>_WINDOWS_<span class="sym">))</span>
<span class="dir">#include &lt;windows.h&gt;</span>
<span class="dir">#endif</span>

<span class="dir">#define glueAckExpand(m) Ack##m</span>
<span class="dir">#define glueAck(m) glueAckExpand(m)</span>

<span class="dir">#define Ack0(N) ((N)+1)</span>

<span class="dir">#define AckDecl(M,M1)                                 \</span>
<span class="dir">static int glueAck(M) (int N) {                       \</span>
<span class="dir">    if (0 == N) return glueAck(M1) (1);               \</span>
<span class="dir">    if (1 == N) return glueAck(M1) (glueAck(M1) (1)); \</span>
<span class="dir">    return glueAck(M1) (glueAck(M) (N-1));            \</span>
<span class="dir">}</span>

<span class="kwd">AckDecl</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">)</span>
<span class="kwd">AckDecl</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="num">1</span><span class="sym">)</span>
<span class="kwd">AckDecl</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span><span class="num">2</span><span class="sym">)</span>
<span class="kwd">AckDecl</span><span class="sym">(</span><span class="num">4</span><span class="sym">,</span><span class="num">3</span><span class="sym">)</span>

<span class="com">/* Removes the overhead of passing around and M parameter,</span>
<span class="com">   when it is low (which is the only way this can actually</span>
<span class="com">   complete execution.) */</span>

<span class="kwb">int</span> <span class="kwd">Ack</span> <span class="sym">(</span><span class="kwb">int</span> M<span class="sym">,</span> <span class="kwb">int</span> N<span class="sym">) {</span>
    <span class="kwa">switch</span> <span class="sym">(</span>M<span class="sym">) {</span>
        <span class="kwa">case</span> <span class="num">0</span><span class="sym">:</span> <span class="kwa">return</span> <span class="kwd">Ack0</span> <span class="sym">(</span>N<span class="sym">);</span>
        <span class="kwa">case</span> <span class="num">1</span><span class="sym">:</span> <span class="kwa">return</span> <span class="kwd">Ack1</span> <span class="sym">(</span>N<span class="sym">);</span>
        <span class="kwa">case</span> <span class="num">2</span><span class="sym">:</span> <span class="kwa">return</span> <span class="kwd">Ack2</span> <span class="sym">(</span>N<span class="sym">);</span>
        <span class="kwa">case</span> <span class="num">3</span><span class="sym">:</span> <span class="kwa">return</span> <span class="kwd">Ack3</span> <span class="sym">(</span>N<span class="sym">);</span>
        <span class="kwa">case</span> <span class="num">4</span><span class="sym">:</span> <span class="kwa">return</span> <span class="kwd">Ack4</span> <span class="sym">(</span>N<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">if</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">==</span> N<span class="sym">)</span> <span class="kwa">return</span> <span class="kwd">Ack</span> <span class="sym">(</span>M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="num">1</span> <span class="sym">==</span> N<span class="sym">)</span> <span class="kwa">return</span> <span class="kwd">Ack</span> <span class="sym">(</span>M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span> <span class="sym">(</span>M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">));</span>
    <span class="kwa">return</span> <span class="kwd">Ack</span> <span class="sym">(</span>M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span> <span class="sym">(</span>M<span class="sym">,</span> N<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>
<span class="sym">}</span>

<span class="com">/* Not called.  Uses full mathematical simplfications when</span>
<span class="com">   its possible and unravells the recursion on the N</span>
<span class="com">   parameter into a for() loop (so the stack level never</span>
<span class="com">   goes deeper than O(M)). */</span>

<span class="kwb">int</span> <span class="kwd">AckCheat</span> <span class="sym">(</span><span class="kwb">int</span> M<span class="sym">,</span> <span class="kwb">int</span> N<span class="sym">) {</span>
    <span class="kwa">switch</span> <span class="sym">(</span>M<span class="sym">) {</span>
        <span class="kwa">case</span> <span class="num">0</span><span class="sym">:</span> <span class="kwa">return</span> <span class="kwd">Ack0</span> <span class="sym">(</span>N<span class="sym">);</span>
        <span class="kwa">case</span> <span class="num">1</span><span class="sym">:</span> <span class="kwa">return</span> N <span class="sym">+</span> <span class="num">2</span><span class="sym">;</span>
        <span class="kwa">case</span> <span class="num">2</span><span class="sym">:</span> <span class="kwa">return</span> <span class="num">2</span><span class="sym">*</span>N <span class="sym">+</span> <span class="num">3</span><span class="sym">;</span>
        <span class="kwa">case</span> <span class="num">3</span><span class="sym">:</span> <span class="kwa">if</span> <span class="sym">(</span>N <span class="sym">&lt; (</span>CHAR_BIT <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">) -</span> <span class="num">3</span><span class="sym">))</span>
                    <span class="kwa">return</span> <span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>N<span class="sym">+</span><span class="num">3</span><span class="sym">))-</span><span class="num">3</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">if</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">==</span> N<span class="sym">)</span> <span class="kwa">return</span> <span class="kwd">AckCheat</span> <span class="sym">(</span>M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="num">1</span> <span class="sym">==</span> N<span class="sym">)</span> <span class="kwa">return</span> <span class="kwd">AckCheat</span> <span class="sym">(</span>M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">AckCheat</span> <span class="sym">(</span>M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">));</span>

    <span class="sym">{</span>
        <span class="kwb">int</span> a <span class="sym">=</span> <span class="kwd">AckCheat</span> <span class="sym">(</span>M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
        <span class="kwa">for</span> <span class="sym">(;</span>N<span class="sym">;</span> N<span class="sym">--)</span> a <span class="sym">=</span> <span class="kwd">AckCheat</span> <span class="sym">(</span>M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> a<span class="sym">);</span>
        <span class="kwa">return</span> a<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> m <span class="sym">= ((</span>argc <span class="sym">&gt;=</span> <span class="num">3</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span>argc<span class="sym">-</span><span class="num">2</span><span class="sym">]) :</span> <span class="num">3</span><span class="sym">);</span>
    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span>argc<span class="sym">-</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>

    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Ack(%d,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">Ack</span> <span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">));</span>

    <span class="com">/* sleep long enough so we can measure memory usage */</span>
<span class="dir">#if (defined(__linux) || defined(__unix) || defined(__GNUC__))</span>
    <span class="kwd">sleep</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
<span class="dir">#elif (defined(WIN32) || defined(_WIN32) || defined(__WIN32) ||</span>
<span class="kwd">defined</span><span class="sym">(</span>_WINDOWS<span class="sym">) ||</span> <span class="kwd">defined</span><span class="sym">(</span>_WINDOWS_<span class="sym">))</span>
    <span class="kwd">Sleep</span><span class="sym">(</span><span class="num">1000</span><span class="sym">);</span>
<span class="dir">#endif</span>

    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
