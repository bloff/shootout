#<span class="sym">!</span>.<span class="sym">/</span>parrot <span class="sym">-</span>j
#
# nsieve<span class="sym">-</span>bits<span class="sym">-</span><span class="num">2</span> N  <span class="sym">(</span>N <span class="sym">=</span> <span class="num">9</span> for shootout<span class="sym">)</span>
# by Leopold Toetsch
# reset bits

.<span class="kwa">sub</span> primes_in_range
    .param <span class="kwa">int</span> M
    .<span class="kwa">local</span> pmc flags
    .<span class="kwa">local int</span> i<span class="sym">,</span> count
    flags <span class="sym">=</span> new FixedBooleanArray
    flags <span class="sym">=</span> M
    i <span class="sym">=</span> <span class="num">2</span>
lp0<span class="sym">:</span>
    flags<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">1</span>
    <span class="kwa">inc</span> i
    if i <span class="sym">&lt;</span> M goto lp0
    i <span class="sym">=</span> <span class="num">2</span>
    count <span class="sym">=</span> <span class="num">0</span>
lp1<span class="sym">:</span>
     $I0 <span class="sym">=</span> flags<span class="sym">[</span>i<span class="sym">]</span>
     unless $I0 goto not_p
     .<span class="kwa">local int</span> j
     j <span class="sym">=</span> i <span class="sym">+</span> i
     if j <span class="sym">&gt;=</span> M goto done
lp2<span class="sym">:</span>
     flags<span class="sym">[</span>j<span class="sym">] =</span> <span class="num">0</span>
     j <span class="sym">+=</span> i
     if j <span class="sym">&lt;</span> M goto lp2
done<span class="sym">:</span>
     <span class="kwa">inc</span> count
not_p<span class="sym">:</span>
     <span class="kwa">inc</span> i
     if i <span class="sym">&lt;</span> M goto lp1
    .return <span class="sym">(</span>count<span class="sym">)</span>
.<span class="kwa">end</span>
.<span class="kwa">sub</span> main <span class="sym">:</span>main
    .param pmc argv
    $S0 <span class="sym">=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
    .<span class="kwa">local int</span> i<span class="sym">,</span> j<span class="sym">,</span> N<span class="sym">,</span> M<span class="sym">,</span> count
    N <span class="sym">=</span> $S0
    null i
    null j
<span class="kwa">loop</span><span class="sym">:</span>
    $I0 <span class="sym">=</span> N <span class="sym">-</span> j
    <span class="kwa">inc</span> j
    $I1 <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt;</span> $I0
    M <span class="sym">=</span> $I1 <span class="sym">*</span> <span class="num">10000</span>
    count <span class="sym">=</span> primes_in_range<span class="sym">(</span>M<span class="sym">)</span>
    $P0 <span class="sym">=</span> new .FixedIntegerArray
    $P0 <span class="sym">=</span> <span class="num">2</span>
    $P0<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> M
    $P0<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> count
    $S0 <span class="sym">=</span> sprintf <span class="str">&quot;Primes up to %8u %8u\n&quot;</span><span class="sym">,</span> $P0
    print $S0
    <span class="kwa">inc</span> i
    if i <span class="sym">&lt;</span> <span class="num">3</span> goto <span class="kwa">loop</span>
.<span class="kwa">end</span>

