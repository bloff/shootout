<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">(* -*- mode: sml -*-
 * $Id: regexmatch-mlton.code,v 1.1 2004-11-02 08:52:40 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 * from Stephen Weeks
 *)</FONT></I>


<B><FONT COLOR="#A020F0">fun</FONT></B> <B><FONT COLOR="#5F9EA0">+</FONT></B><B><FONT COLOR="#5F9EA0">+</FONT></B> (r: <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B>): <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#A020F0">let</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 <B><FONT COLOR="#5F9EA0">+</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>r
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> r <B><FONT COLOR="#5F9EA0">:=</FONT></B> n
   <B><FONT COLOR="#A020F0">in</FONT></B> n
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Int <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">open</FONT></B> Int

      <B><FONT COLOR="#A020F0">type</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B>
	 
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">exists</FONT></I></B></FONT></B> (start: t, stop: t, f: t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">bool</FONT></B>): <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B> i &lt; stop <B><FONT COLOR="#A020F0">andalso</FONT></B> (f i <B><FONT COLOR="#A020F0">orelse</FONT></B> loop (i <B><FONT COLOR="#5F9EA0">+</FONT></B> 1))
	 <B><FONT COLOR="#A020F0">in</FONT></B>
	    loop start
	 <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">forall</FONT></I></B></FONT></B> (start, stop, f) <B><FONT COLOR="#5F9EA0">=</FONT></B> not (exists (start, stop, not <B><FONT COLOR="#A020F0">o</FONT></B> f))

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">fold</FONT></I></B></FONT></B> (start: t, stop: t, a: 'a, f: t <B><FONT COLOR="#5F9EA0">*</FONT></B> 'a <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 'a): 'a <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> (i: t, a: 'a) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">if</FONT></B> i <B><FONT COLOR="#5F9EA0">&gt;=</FONT></B> stop
		  <B><FONT COLOR="#A020F0">then</FONT></B> a
	       <B><FONT COLOR="#A020F0">else</FONT></B> loop (i <B><FONT COLOR="#5F9EA0">+</FONT></B> 1, f (i, a))
	 <B><FONT COLOR="#A020F0">in</FONT></B> loop (start, a)
	 <B><FONT COLOR="#A020F0">end</FONT></B>
	       
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for</FONT></I></B></FONT></B> (start: t, stop: t, f: t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>): <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">if</FONT></B> i <B><FONT COLOR="#5F9EA0">&gt;=</FONT></B> stop
		  <B><FONT COLOR="#A020F0">then</FONT></B> ()
	       <B><FONT COLOR="#A020F0">else</FONT></B> (f i; loop (i <B><FONT COLOR="#5F9EA0">+</FONT></B> 1))
	 <B><FONT COLOR="#A020F0">in</FONT></B>
	    loop start
	 <B><FONT COLOR="#A020F0">end</FONT></B>
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Array2 <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">open</FONT></B> Array2

      <B><FONT COLOR="#A020F0">type</FONT></B> 'a t <B><FONT COLOR="#5F9EA0">=</FONT></B> 'a <B><FONT COLOR="#228B22">array</FONT></B>

      <B><FONT COLOR="#A020F0">val</FONT></B> new <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">array</FONT></B>

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">tabulate</FONT></I></B></FONT></B> (r, c, f) <B><FONT COLOR="#5F9EA0">=</FONT></B> Array2.tabulate RowMajor (r, c, f)

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">foreachi</FONT></I></B></FONT></B> (a, f) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 appi RowMajor f {base <B><FONT COLOR="#5F9EA0">=</FONT></B> a, row <B><FONT COLOR="#5F9EA0">=</FONT></B> 0, col <B><FONT COLOR="#5F9EA0">=</FONT></B> 0,
			  nrows <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">NONE</FONT></B>, ncols <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">NONE</FONT></B>}
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Vector <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">open</FONT></B> Vector

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">exists</FONT></I></B></FONT></B> (v, f) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 Int.exists (0, length v, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> f (sub (v, i)))
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">foreach</FONT></I></B></FONT></B> (v, f) <B><FONT COLOR="#5F9EA0">=</FONT></B> app f v
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">foreachi</FONT></I></B></FONT></B> (v, f) <B><FONT COLOR="#5F9EA0">=</FONT></B> appi f v
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">new</FONT></I></B></FONT></B> (n, x) <B><FONT COLOR="#5F9EA0">=</FONT></B> tabulate (n, <B><FONT COLOR="#A020F0">fn</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> x)
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">new1</FONT></I></B></FONT></B> x <B><FONT COLOR="#5F9EA0">=</FONT></B> new (1, x)
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> List <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">open</FONT></B> List

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">foreach</FONT></I></B></FONT></B> (l, f) <B><FONT COLOR="#5F9EA0">=</FONT></B> app f l

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">fold</FONT></I></B></FONT></B> (l, b, f) <B><FONT COLOR="#5F9EA0">=</FONT></B> foldl f b l

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">appendRev</FONT></I></B></FONT></B> (l1, l2) <B><FONT COLOR="#5F9EA0">=</FONT></B> fold (l1, l2, <B><FONT COLOR="#A020F0">op</FONT></B> <B><FONT COLOR="#5F9EA0">::</FONT></B>)

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">push</FONT></I></B></FONT></B> (r, x) <B><FONT COLOR="#5F9EA0">=</FONT></B> r <B><FONT COLOR="#5F9EA0">:=</FONT></B> x <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>r

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">keepAll</FONT></I></B></FONT></B> (l, f) <B><FONT COLOR="#5F9EA0">=</FONT></B> filter f l

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">peek</FONT></I></B></FONT></B> (l, f) <B><FONT COLOR="#5F9EA0">=</FONT></B> find f l

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">insert</FONT></I></B></FONT></B> (l, x, <B><FONT COLOR="#A020F0">op</FONT></B> <B><FONT COLOR="#5F9EA0">&lt;=</FONT></B>) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> (l, ac) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">case</FONT></B> l <B><FONT COLOR="#A020F0">of</FONT></B>
		  [] <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> appendRev (ac, [x])
		<B><FONT COLOR="#5F9EA0">|</FONT></B> x' <B><FONT COLOR="#5F9EA0">::</FONT></B> l' <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		     <B><FONT COLOR="#A020F0">if</FONT></B> x <B><FONT COLOR="#5F9EA0">&lt;=</FONT></B> x'
			<B><FONT COLOR="#A020F0">then</FONT></B> appendRev (ac, x <B><FONT COLOR="#5F9EA0">::</FONT></B> l)
		     <B><FONT COLOR="#A020F0">else</FONT></B> loop (l', x' <B><FONT COLOR="#5F9EA0">::</FONT></B> ac)
	 <B><FONT COLOR="#A020F0">in</FONT></B> loop (l, [])
	 <B><FONT COLOR="#A020F0">end</FONT></B>
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Array <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">open</FONT></B> Array

      <B><FONT COLOR="#A020F0">val</FONT></B> new <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">array</FONT></B>

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">modify</FONT></I></B></FONT></B> (a, f) <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.modify f a

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">foreachi</FONT></I></B></FONT></B> (a, f) <B><FONT COLOR="#5F9EA0">=</FONT></B> appi f a
	 
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">indices</FONT></I></B></FONT></B> (a: <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#228B22">array</FONT></B>): <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#228B22">vector</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.length a
	    <B><FONT COLOR="#A020F0">val</FONT></B> numTrue <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">		  fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> (i, count) <B><FONT COLOR="#5F9EA0">=</FONT></B>
		     <B><FONT COLOR="#A020F0">if</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B> n
			<B><FONT COLOR="#A020F0">then</FONT></B> count
		     <B><FONT COLOR="#A020F0">else</FONT></B> loop (i <B><FONT COLOR="#5F9EA0">+</FONT></B> 1,
				<B><FONT COLOR="#A020F0">if</FONT></B> Array.sub (a, i)
				   <B><FONT COLOR="#A020F0">then</FONT></B> count <B><FONT COLOR="#5F9EA0">+</FONT></B> 1
				<B><FONT COLOR="#A020F0">else</FONT></B> count)
	       <B><FONT COLOR="#A020F0">in</FONT></B> loop (0, 0)
	       <B><FONT COLOR="#A020F0">end</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> next <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">if</FONT></B> Array.sub (a, i)
		  <B><FONT COLOR="#A020F0">then</FONT></B> (next <B><FONT COLOR="#5F9EA0">:=</FONT></B> i <B><FONT COLOR="#5F9EA0">+</FONT></B> 1; i)
	       <B><FONT COLOR="#A020F0">else</FONT></B> loop (i <B><FONT COLOR="#5F9EA0">+</FONT></B> 1)
	 <B><FONT COLOR="#A020F0">in</FONT></B> Vector.tabulate (numTrue, <B><FONT COLOR="#A020F0">fn</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> loop (<B><FONT COLOR="#5F9EA0">!</FONT></B>next))
	 <B><FONT COLOR="#A020F0">end</FONT></B>
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Char <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">open</FONT></B> Char
	 
      <B><FONT COLOR="#A020F0">val</FONT></B> fromInt <B><FONT COLOR="#5F9EA0">=</FONT></B> chr
      <B><FONT COLOR="#A020F0">val</FONT></B> toInt <B><FONT COLOR="#5F9EA0">=</FONT></B> ord
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> String <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">open</FONT></B> String

      <B><FONT COLOR="#A020F0">type</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">string</FONT></B>
	 
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">contains</FONT></I></B></FONT></B> (s: t, c: <B><FONT COLOR="#228B22">char</FONT></B>): <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 Int.exists (0, size s, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B> sub (s, i))
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">val</FONT></B> numChars: <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> 128

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Regexp <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">datatype</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 AnchorStart
       <B><FONT COLOR="#5F9EA0">|</FONT></B> CharSet <B><FONT COLOR="#A020F0">of</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">bool</FONT></B>
       <B><FONT COLOR="#5F9EA0">|</FONT></B> Or <B><FONT COLOR="#A020F0">of</FONT></B> t <B><FONT COLOR="#228B22">list</FONT></B>
       <B><FONT COLOR="#5F9EA0">|</FONT></B> Seq <B><FONT COLOR="#A020F0">of</FONT></B> t <B><FONT COLOR="#228B22">list</FONT></B>
       <B><FONT COLOR="#5F9EA0">|</FONT></B> Star <B><FONT COLOR="#A020F0">of</FONT></B> t
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Stack:
   <B><FONT COLOR="#5F9EA0">sig</FONT></B>
      <B><FONT COLOR="#A020F0">type</FONT></B> 'a t

      <B><FONT COLOR="#A020F0">val</FONT></B> clear: 'a t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> exists: 'a t <B><FONT COLOR="#5F9EA0">*</FONT></B> ('a <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">bool</FONT></B>) <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">bool</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> foreach: 'a t <B><FONT COLOR="#5F9EA0">*</FONT></B> ('a <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>) <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> new: <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#5F9EA0">*</FONT></B> 'a <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 'a t
      <B><FONT COLOR="#A020F0">val</FONT></B> push: 'a t <B><FONT COLOR="#5F9EA0">*</FONT></B> 'a <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">unit</FONT></B>
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">datatype</FONT></B> 'a t <B><FONT COLOR="#5F9EA0">=</FONT></B> T <B><FONT COLOR="#A020F0">of</FONT></B> {elts: 'a <B><FONT COLOR="#228B22">array</FONT></B>,
			    size: <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B>}

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">new</FONT></I></B></FONT></B> (size: <B><FONT COLOR="#228B22">int</FONT></B>, dummy: 'a): 'a t <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 T {elts <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.new (size, dummy),
	    size <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 0}

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">push</FONT></I></B></FONT></B> (T {elts, size}, x) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>size
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.update (elts, n, x)
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> size <B><FONT COLOR="#5F9EA0">:=</FONT></B> n <B><FONT COLOR="#5F9EA0">+</FONT></B> 1
	 <B><FONT COLOR="#A020F0">in</FONT></B> ()
	 <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">exists</FONT></I></B></FONT></B> (T {elts, size, ...}, f) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 Int.exists (0, <B><FONT COLOR="#5F9EA0">!</FONT></B>size, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> f (Array.sub (elts, i)))
	 
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">foreach</FONT></I></B></FONT></B> (T {elts, size}, f) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 Int.for (0, <B><FONT COLOR="#5F9EA0">!</FONT></B>size, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> f (Array.sub (elts, i)))

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">clear</FONT></I></B></FONT></B> (T {size, ...}) <B><FONT COLOR="#5F9EA0">=</FONT></B> size <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0
   <B><FONT COLOR="#A020F0">end</FONT></B>

<I><FONT COLOR="#B22222">(* Non-deterministic Finite Automaton. *)</FONT></I>
<B><FONT COLOR="#5F9EA0">structure</FONT></B> NFA:
   <B><FONT COLOR="#5F9EA0">sig</FONT></B>
      <I><FONT COLOR="#B22222">(* The states in an NFA are indexed from 0 to n-1, where n is the number
       * of states.
       *)</FONT></I>
      <B><FONT COLOR="#A020F0">type</FONT></B> state <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B>

      <I><FONT COLOR="#B22222">(* State i is final iff Array.sub (final, i).
       * The outgoing states from state i on input char c are given by
       * Array2.sub (next, i, Char.ord c).
       * anchorStarts is sorted in increasing order of state index.
       *)</FONT></I>
      <B><FONT COLOR="#A020F0">datatype</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B> T <B><FONT COLOR="#A020F0">of</FONT></B> {anchorStarts: state <B><FONT COLOR="#228B22">list</FONT></B>,
			 final: <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#228B22">array</FONT></B>,
			 seen: <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#228B22">array</FONT></B>, <I><FONT COLOR="#B22222">(* used for matching. *)</FONT></I>
			 stack1: <B><FONT COLOR="#228B22">int</FONT></B> Stack.t, <I><FONT COLOR="#B22222">(* used for matching. *)</FONT></I>
			 stack2: <B><FONT COLOR="#228B22">int</FONT></B> Stack.t, <I><FONT COLOR="#B22222">(* used for matching. *)</FONT></I>
			 start: state,
			 next: state <B><FONT COLOR="#228B22">vector</FONT></B> Array2.t}
	 
      <B><FONT COLOR="#A020F0">val</FONT></B> fromRegexp: Regexp.t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
      <B><FONT COLOR="#A020F0">val</FONT></B> match: {nfa: t,
		  <B><FONT COLOR="#228B22">string</FONT></B>: <B><FONT COLOR="#228B22">string</FONT></B>,
		  startPos: <B><FONT COLOR="#228B22">int</FONT></B>,
		  anchorStart: <B><FONT COLOR="#228B22">bool</FONT></B>} <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B> option
      <B><FONT COLOR="#A020F0">val</FONT></B> numStates: t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B>
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">type</FONT></B> state <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B>
      <B><FONT COLOR="#A020F0">datatype</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B> T <B><FONT COLOR="#A020F0">of</FONT></B> {anchorStarts: state <B><FONT COLOR="#228B22">list</FONT></B>,
			 final: <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#228B22">array</FONT></B>,
			 seen: <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#228B22">array</FONT></B>,
			 stack1: <B><FONT COLOR="#228B22">int</FONT></B> Stack.t,
			 stack2: <B><FONT COLOR="#228B22">int</FONT></B> Stack.t,
			 start: state,
			 next: state <B><FONT COLOR="#228B22">vector</FONT></B> Array2.t}

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">numStates</FONT></I></B></FONT></B> (T {next, ...}) <B><FONT COLOR="#5F9EA0">=</FONT></B> Array2.nRows next


      <I><FONT COLOR="#B22222">(* Simulating an NFA with two stacks and a bit vector, as in Algorithm 3.4
       * (page 126) of Compilers: Principles, Techniques, and Tools by Aho,
       * Sethi, and Ullman.
       *)</FONT></I>
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">match</FONT></I></B></FONT></B> {anchorStart: <B><FONT COLOR="#228B22">bool</FONT></B>,
		 nfa <B><FONT COLOR="#A020F0">as</FONT></B> T {anchorStarts, final, seen, stack1, stack2, start,
			   next},
		 startPos,
		 <B><FONT COLOR="#228B22">string</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> s}: <B><FONT COLOR="#228B22">int</FONT></B> option <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> numStates <B><FONT COLOR="#5F9EA0">=</FONT></B> numStates nfa
	    <B><FONT COLOR="#A020F0">val</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> String.size s
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.modify (seen, <B><FONT COLOR="#A020F0">fn</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> false)
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> (current: state Stack.t,
		      nextStates: state Stack.t,
		      i: <B><FONT COLOR="#228B22">int</FONT></B>,
		      last: <B><FONT COLOR="#228B22">int</FONT></B> option): <B><FONT COLOR="#228B22">int</FONT></B> option <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">let</FONT></B>
		  <B><FONT COLOR="#A020F0">val</FONT></B> last <B><FONT COLOR="#5F9EA0">=</FONT></B> 
		     <B><FONT COLOR="#A020F0">if</FONT></B> Stack.exists (current, <B><FONT COLOR="#A020F0">fn</FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> Array.sub (final, s))
			<B><FONT COLOR="#A020F0">then</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> i
		     <B><FONT COLOR="#A020F0">else</FONT></B> last
	       <B><FONT COLOR="#A020F0">in</FONT></B>
		  <B><FONT COLOR="#A020F0">if</FONT></B> numStates <B><FONT COLOR="#5F9EA0">=</FONT></B> 0 <B><FONT COLOR="#A020F0">orelse</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B> n
		     <B><FONT COLOR="#A020F0">then</FONT></B> (Stack.clear stack1
			   ; Stack.clear stack2
			   ; last)
		  <B><FONT COLOR="#A020F0">else</FONT></B>
		     <B><FONT COLOR="#A020F0">let</FONT></B>
			<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.modify (seen, <B><FONT COLOR="#A020F0">fn</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> false)
			<B><FONT COLOR="#A020F0">val</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B> Char.toInt (String.sub (s, i))
			<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
			   Stack.foreach (current, <B><FONT COLOR="#A020F0">fn</FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
					  Vector.foreach
					  (Array2.sub (next, s, c),
					   <B><FONT COLOR="#A020F0">fn</FONT></B> s' <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
					   <B><FONT COLOR="#A020F0">if</FONT></B> Array.sub (seen, s')
					      <B><FONT COLOR="#A020F0">then</FONT></B> ()
					   <B><FONT COLOR="#A020F0">else</FONT></B> (Array.update (seen, s', true)
						 ; Stack.push (nextStates, s'))))
			<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Stack.clear current
		     <B><FONT COLOR="#A020F0">in</FONT></B> loop (nextStates, current, i <B><FONT COLOR="#5F9EA0">+</FONT></B> 1, last)
		     <B><FONT COLOR="#A020F0">end</FONT></B>
	       <B><FONT COLOR="#A020F0">end</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Stack.push (stack1, start)
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">if</FONT></B> anchorStart
		  <B><FONT COLOR="#A020F0">then</FONT></B> List.foreach (anchorStarts, <B><FONT COLOR="#A020F0">fn</FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				     Stack.push (stack1, s))
	       <B><FONT COLOR="#A020F0">else</FONT></B> ()
	 <B><FONT COLOR="#A020F0">in</FONT></B>
	    loop (stack1, stack2, startPos, <B><FONT COLOR="#5F9EA0">NONE</FONT></B>)
	 <B><FONT COLOR="#A020F0">end</FONT></B>

      <I><FONT COLOR="#B22222">(* This conversion from a regular expression to an NFA is based on
       * Section 3.9 (pages 134 -- 140) of Compilers: Principles, Techniques,
       * and Tools by Aho, Sethi, and Ullman.
       *
       * It creates one NFA state for each CharSet (called a &quot;position&quot;) that is
       * in the regexp.  There is also one extra state for the start state.
       * It adds edges as in rules 1 and 2 (page 138) for the followpos function.
       *)</FONT></I>
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">fromRegexp</FONT></I></B></FONT></B> (r: Regexp.t): t <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> (r, ac) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">let</FONT></B> <B><FONT COLOR="#A020F0">open</FONT></B> Regexp
	       <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">case</FONT></B> r <B><FONT COLOR="#A020F0">of</FONT></B>
		  AnchorStart <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ac <B><FONT COLOR="#5F9EA0">+</FONT></B> 1
		<B><FONT COLOR="#5F9EA0">|</FONT></B> CharSet _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ac <B><FONT COLOR="#5F9EA0">+</FONT></B> 1
		<B><FONT COLOR="#5F9EA0">|</FONT></B> Or rs <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> List.fold (rs, ac, loop)
		<B><FONT COLOR="#5F9EA0">|</FONT></B> Seq rs <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> List.fold (rs, ac, loop)
		<B><FONT COLOR="#5F9EA0">|</FONT></B> Star r <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> loop (r, ac)
	       <B><FONT COLOR="#A020F0">end</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> numPos <B><FONT COLOR="#5F9EA0">=</FONT></B> loop (r, 0)
	    <B><FONT COLOR="#A020F0">val</FONT></B> numStates <B><FONT COLOR="#5F9EA0">=</FONT></B> numPos <B><FONT COLOR="#5F9EA0">+</FONT></B> 1
	    <B><FONT COLOR="#A020F0">val</FONT></B> start <B><FONT COLOR="#5F9EA0">=</FONT></B> numPos
	    <B><FONT COLOR="#A020F0">val</FONT></B> posCounter <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> ~1
	    <B><FONT COLOR="#A020F0">val</FONT></B> follow <B><FONT COLOR="#5F9EA0">=</FONT></B> Array2.new (numStates, numStates, false)
	    <B><FONT COLOR="#A020F0">val</FONT></B> posChars <B><FONT COLOR="#5F9EA0">=</FONT></B> Array2.tabulate (numPos, numChars, <B><FONT COLOR="#A020F0">fn</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> false)
	    <B><FONT COLOR="#A020F0">local</FONT></B>
	       <B><FONT COLOR="#A020F0">datatype</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B> T <B><FONT COLOR="#A020F0">of</FONT></B> <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#228B22">vector</FONT></B> <I><FONT COLOR="#B22222">(* of length numPos *)</FONT></I>
	    <B><FONT COLOR="#A020F0">in</FONT></B>
<B><FONT COLOR="#A020F0">	       fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">contains</FONT></I></B></FONT></B> (T v, s) <B><FONT COLOR="#5F9EA0">=</FONT></B> Vector.sub (v, s)
	       <B><FONT COLOR="#A020F0">val</FONT></B> empty: t <B><FONT COLOR="#5F9EA0">=</FONT></B> T (Vector.new (numPos, false))
<B><FONT COLOR="#A020F0">	       fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">union</FONT></I></B></FONT></B> (T v, T v'): t <B><FONT COLOR="#5F9EA0">=</FONT></B>
		  T (Vector.tabulate (numPos, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				      Vector.sub (v, i)
				      <B><FONT COLOR="#A020F0">orelse</FONT></B> Vector.sub (v', i)))
<B><FONT COLOR="#A020F0">	       fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">singleton</FONT></I></B></FONT></B> (i: <B><FONT COLOR="#228B22">int</FONT></B>): t <B><FONT COLOR="#5F9EA0">=</FONT></B>
		  T (Vector.tabulate (numPos, <B><FONT COLOR="#A020F0">fn</FONT></B> j <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B> j))
<B><FONT COLOR="#A020F0">	       fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">foreach</FONT></I></B></FONT></B> (T v, f) <B><FONT COLOR="#5F9EA0">=</FONT></B>
		  Vector.foreachi (v, <B><FONT COLOR="#A020F0">fn</FONT></B> (i, b) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> b <B><FONT COLOR="#A020F0">then</FONT></B> f i <B><FONT COLOR="#A020F0">else</FONT></B> ())
	    <B><FONT COLOR="#A020F0">end</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> anchorStarts <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> []
	    <I><FONT COLOR="#B22222">(* The following loop fills in follow and posChars. *)</FONT></I>
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> r <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">case</FONT></B> r <B><FONT COLOR="#A020F0">of</FONT></B>
		  Regexp.AnchorStart <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		     <B><FONT COLOR="#A020F0">let</FONT></B>
			<B><FONT COLOR="#A020F0">val</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">+</FONT></B><B><FONT COLOR="#5F9EA0">+</FONT></B> posCounter
			<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> List.push (anchorStarts, i)
			<B><FONT COLOR="#A020F0">val</FONT></B> first <B><FONT COLOR="#5F9EA0">=</FONT></B> singleton i
		     <B><FONT COLOR="#A020F0">in</FONT></B>
			{first <B><FONT COLOR="#5F9EA0">=</FONT></B> first,
			 last <B><FONT COLOR="#5F9EA0">=</FONT></B> first,
			 nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> false}
		     <B><FONT COLOR="#A020F0">end</FONT></B>
		<B><FONT COLOR="#5F9EA0">|</FONT></B> Regexp.CharSet f <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		     <B><FONT COLOR="#A020F0">let</FONT></B>
			<B><FONT COLOR="#A020F0">val</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">+</FONT></B><B><FONT COLOR="#5F9EA0">+</FONT></B> posCounter
			<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
			   Int.for (0, numChars, <B><FONT COLOR="#A020F0">fn</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				    <B><FONT COLOR="#A020F0">if</FONT></B> f (Char.chr c)
				       <B><FONT COLOR="#A020F0">then</FONT></B> Array2.update (posChars, i, c, true)
				    <B><FONT COLOR="#A020F0">else</FONT></B> ())
			<B><FONT COLOR="#A020F0">val</FONT></B> first <B><FONT COLOR="#5F9EA0">=</FONT></B> singleton i
		     <B><FONT COLOR="#A020F0">in</FONT></B> {first <B><FONT COLOR="#5F9EA0">=</FONT></B> first,
			 last <B><FONT COLOR="#5F9EA0">=</FONT></B> first,
			 nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> false}
		     <B><FONT COLOR="#A020F0">end</FONT></B>
		<B><FONT COLOR="#5F9EA0">|</FONT></B> Regexp.Or rs <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		     List.fold
		     (rs, {first <B><FONT COLOR="#5F9EA0">=</FONT></B> empty,
			   last <B><FONT COLOR="#5F9EA0">=</FONT></B> empty,
			   nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> false},
		      <B><FONT COLOR="#A020F0">fn</FONT></B> (r, {first <B><FONT COLOR="#5F9EA0">=</FONT></B> f, last <B><FONT COLOR="#5F9EA0">=</FONT></B> l, nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> n}) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		      <B><FONT COLOR="#A020F0">let</FONT></B>
			 <B><FONT COLOR="#A020F0">val</FONT></B> {first <B><FONT COLOR="#5F9EA0">=</FONT></B> f', last <B><FONT COLOR="#5F9EA0">=</FONT></B> l', nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> n'} <B><FONT COLOR="#5F9EA0">=</FONT></B>
			    loop r
		      <B><FONT COLOR="#A020F0">in</FONT></B>
			 {first <B><FONT COLOR="#5F9EA0">=</FONT></B> union (f, f'),
			  last <B><FONT COLOR="#5F9EA0">=</FONT></B> union (l, l'),
			  nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> n <B><FONT COLOR="#A020F0">orelse</FONT></B> n'}
		      <B><FONT COLOR="#A020F0">end</FONT></B>)
		<B><FONT COLOR="#5F9EA0">|</FONT></B> Regexp.Seq rs <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		     List.fold
		     (rs, {first <B><FONT COLOR="#5F9EA0">=</FONT></B> empty,
			   last <B><FONT COLOR="#5F9EA0">=</FONT></B> empty,
			   nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> true},
		      <B><FONT COLOR="#A020F0">fn</FONT></B> (r, {first <B><FONT COLOR="#5F9EA0">=</FONT></B> f, last <B><FONT COLOR="#5F9EA0">=</FONT></B> l, nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> n}) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		      <B><FONT COLOR="#A020F0">let</FONT></B>
			 <B><FONT COLOR="#A020F0">val</FONT></B> {first <B><FONT COLOR="#5F9EA0">=</FONT></B> f', last <B><FONT COLOR="#5F9EA0">=</FONT></B> l', nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> n'} <B><FONT COLOR="#5F9EA0">=</FONT></B>
			    loop r
			 <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
			    foreach
			    (l, <B><FONT COLOR="#A020F0">fn</FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
			     foreach
			     (f', <B><FONT COLOR="#A020F0">fn</FONT></B> s' <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> Array2.update (follow, s, s', true)))
		      <B><FONT COLOR="#A020F0">in</FONT></B>
			 {first <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> n <B><FONT COLOR="#A020F0">then</FONT></B> union (f, f') <B><FONT COLOR="#A020F0">else</FONT></B> f,
			  last <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> n' <B><FONT COLOR="#A020F0">then</FONT></B> union (l, l') <B><FONT COLOR="#A020F0">else</FONT></B> l',
			  nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> n <B><FONT COLOR="#A020F0">andalso</FONT></B> n'}
		      <B><FONT COLOR="#A020F0">end</FONT></B>)
		<B><FONT COLOR="#5F9EA0">|</FONT></B> Regexp.Star r <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		     <B><FONT COLOR="#A020F0">let</FONT></B>
			<B><FONT COLOR="#A020F0">val</FONT></B> {first <B><FONT COLOR="#5F9EA0">=</FONT></B> f, last <B><FONT COLOR="#5F9EA0">=</FONT></B> l, nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> n} <B><FONT COLOR="#5F9EA0">=</FONT></B> loop r
			<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
			   foreach
			   (l, <B><FONT COLOR="#A020F0">fn</FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
			    foreach
			    (f, <B><FONT COLOR="#A020F0">fn</FONT></B> s' <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> Array2.update (follow, s, s', true)))
		     <B><FONT COLOR="#A020F0">in</FONT></B>
			{first <B><FONT COLOR="#5F9EA0">=</FONT></B> f, last <B><FONT COLOR="#5F9EA0">=</FONT></B> l, nullable <B><FONT COLOR="#5F9EA0">=</FONT></B> true}
		     <B><FONT COLOR="#A020F0">end</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> {first, last, nullable} <B><FONT COLOR="#5F9EA0">=</FONT></B> loop r
	    <I><FONT COLOR="#B22222">(* Any anchor starts in first should be anchor starts.
	     * This also reverses anchorStarts so they are in order.
	     *)</FONT></I>
	    <B><FONT COLOR="#A020F0">val</FONT></B> anchorStarts <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       List.fold (<B><FONT COLOR="#5F9EA0">!</FONT></B>anchorStarts, [], <B><FONT COLOR="#A020F0">fn</FONT></B> (s, ac) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
			  <B><FONT COLOR="#A020F0">if</FONT></B> contains (first, s) <B><FONT COLOR="#A020F0">then</FONT></B> s <B><FONT COLOR="#5F9EA0">::</FONT></B> ac <B><FONT COLOR="#A020F0">else</FONT></B> ac)
	    <I><FONT COLOR="#B22222">(* The positions in first are all reachable from the start state. *)</FONT></I>
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> foreach (first, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
			     Array2.update (follow, start, i, true))
	    <I><FONT COLOR="#B22222">(* The positions in last are all final states. *)</FONT></I>
	    <B><FONT COLOR="#A020F0">val</FONT></B> final <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.<B><FONT COLOR="#228B22">array</FONT></B> (numStates, false)
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> foreach (last, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> Array.update (final, i, true))
	    <I><FONT COLOR="#B22222">(* The start state is final if the whole regexp is nullable. *)</FONT></I>
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> nullable <B><FONT COLOR="#A020F0">then</FONT></B> Array.update (final, start, true) <B><FONT COLOR="#A020F0">else</FONT></B> ()
	    <I><FONT COLOR="#B22222">(* Now c1ompute the transition table. *)</FONT></I>
	    <B><FONT COLOR="#A020F0">val</FONT></B> a <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.new (numStates, false)
	    <B><FONT COLOR="#A020F0">val</FONT></B> next <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       Array2.tabulate
	       (numStates, numChars, <B><FONT COLOR="#A020F0">fn</FONT></B> (i, c) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		<B><FONT COLOR="#A020F0">let</FONT></B>
		   <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
		      Int.for (0, numStates, <B><FONT COLOR="#A020F0">fn</FONT></B> j <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> Array.update (a, j, false))
		   <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
		      Int.for
		      (0, numPos, <B><FONT COLOR="#A020F0">fn</FONT></B> j <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		       <B><FONT COLOR="#A020F0">if</FONT></B> Array2.sub (follow, i, j)
			  <B><FONT COLOR="#A020F0">andalso</FONT></B> Array2.sub (posChars, j, c)
			  <B><FONT COLOR="#A020F0">then</FONT></B> Array.update (a, j, true)
		       <B><FONT COLOR="#A020F0">else</FONT></B> ())
		<B><FONT COLOR="#A020F0">in</FONT></B> Array.indices a
		<B><FONT COLOR="#A020F0">end</FONT></B>)
	 <B><FONT COLOR="#A020F0">in</FONT></B>
	    T {anchorStarts <B><FONT COLOR="#5F9EA0">=</FONT></B> anchorStarts,
	       final <B><FONT COLOR="#5F9EA0">=</FONT></B> final,
	       next <B><FONT COLOR="#5F9EA0">=</FONT></B> next,
	       seen <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.new (numStates, false),
	       stack1 <B><FONT COLOR="#5F9EA0">=</FONT></B> Stack.new (numStates, ~1),
	       stack2 <B><FONT COLOR="#5F9EA0">=</FONT></B> Stack.new (numStates, ~1),
	       start <B><FONT COLOR="#5F9EA0">=</FONT></B> start}
	 <B><FONT COLOR="#A020F0">end</FONT></B>
      
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> DFA:
   <B><FONT COLOR="#5F9EA0">sig</FONT></B>
      <B><FONT COLOR="#A020F0">type</FONT></B> t

      <B><FONT COLOR="#A020F0">val</FONT></B> fromNFA: NFA.t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
      <B><FONT COLOR="#A020F0">val</FONT></B> match: {dfa: t,
		  <B><FONT COLOR="#228B22">string</FONT></B>: <B><FONT COLOR="#228B22">string</FONT></B>,
		  startPos: <B><FONT COLOR="#228B22">int</FONT></B>,
		  anchorStart: <B><FONT COLOR="#228B22">bool</FONT></B>} <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B> option
      <B><FONT COLOR="#A020F0">val</FONT></B> minimize: t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <I><FONT COLOR="#B22222">(* The states in a DFA are indexed from 0 to n-1, where n is the number
       * of states.
       *)</FONT></I>
      <B><FONT COLOR="#A020F0">type</FONT></B> state <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B>
	 
      <I><FONT COLOR="#B22222">(* State i is final iff Array.sub (final, i).
       * The outgoing state from state i on input char c is
       * Array2.sub (next, i, Char.ord c).
       *)</FONT></I>
      <B><FONT COLOR="#A020F0">datatype</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B> T <B><FONT COLOR="#A020F0">of</FONT></B> {anchorStart: state,
			 dead: <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#228B22">array</FONT></B>,
			 final: <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#228B22">array</FONT></B>,
			 next: state Array2.t,
			 start: state}

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">numStates</FONT></I></B></FONT></B> (T {next, ...}): <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> Array2.nRows next


<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">match</FONT></I></B></FONT></B> {dfa <B><FONT COLOR="#A020F0">as</FONT></B> T {anchorStart <B><FONT COLOR="#5F9EA0">=</FONT></B> ancSt, dead, final, start, next},
		 <B><FONT COLOR="#228B22">string</FONT></B> <B><FONT COLOR="#A020F0">as</FONT></B> s,
		 startPos: <B><FONT COLOR="#228B22">int</FONT></B>,
		 anchorStart: <B><FONT COLOR="#228B22">bool</FONT></B>}: <B><FONT COLOR="#228B22">int</FONT></B> option <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> String.size s
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> (i: <B><FONT COLOR="#228B22">int</FONT></B>, state: <B><FONT COLOR="#228B22">int</FONT></B>, last: <B><FONT COLOR="#228B22">int</FONT></B> option): <B><FONT COLOR="#228B22">int</FONT></B> option <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">let</FONT></B>
		  <B><FONT COLOR="#A020F0">val</FONT></B> last <B><FONT COLOR="#5F9EA0">=</FONT></B>
		     <B><FONT COLOR="#A020F0">if</FONT></B> Array.sub (final, state)
			<B><FONT COLOR="#A020F0">then</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> i
		     <B><FONT COLOR="#A020F0">else</FONT></B> last
	       <B><FONT COLOR="#A020F0">in</FONT></B>
		  <B><FONT COLOR="#A020F0">if</FONT></B> Array.sub (dead, state) <B><FONT COLOR="#A020F0">orelse</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B> n
		     <B><FONT COLOR="#A020F0">then</FONT></B> last
		  <B><FONT COLOR="#A020F0">else</FONT></B> loop (i <B><FONT COLOR="#5F9EA0">+</FONT></B> 1,
			     Array2.sub (next, state,
					 Char.toInt (String.sub (s, i))),
			     last)
	       <B><FONT COLOR="#A020F0">end</FONT></B>
	 <B><FONT COLOR="#A020F0">in</FONT></B> loop (startPos,
		  <B><FONT COLOR="#A020F0">if</FONT></B> anchorStart <B><FONT COLOR="#A020F0">then</FONT></B> ancSt <B><FONT COLOR="#A020F0">else</FONT></B> start,
		     <B><FONT COLOR="#5F9EA0">NONE</FONT></B>)
	 <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">dead</FONT></I></B></FONT></B> (numStates, final, next) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 Array.tabulate
	 (numStates, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
	  not (Array.sub (final, i))
	  <B><FONT COLOR="#A020F0">andalso</FONT></B> Int.forall (0, numChars, <B><FONT COLOR="#A020F0">fn</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
			      i <B><FONT COLOR="#5F9EA0">=</FONT></B> Array2.sub (next, i, c)))
	 
      <I><FONT COLOR="#B22222">(* This DFA minimization algorithm is based on algorithm 3.6 (page 142)
       * of Compilers: Principles, Techniques, and Tools by Aho, Sethi, and
       * Ullman. 
       *
       * It maintains an array, r, that stores for each state s the
       * representative of the class to which s belongs.
       * It repeatedly refines an equivalence relation, represented by a list
       * of classes, where each class is a list of states (i.e. ints).
       *)</FONT></I>
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">minimize</FONT></I></B></FONT></B> (dfa <B><FONT COLOR="#A020F0">as</FONT></B> T {anchorStart, final, start, next, ...}): t <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> numStates <B><FONT COLOR="#5F9EA0">=</FONT></B> numStates dfa
	    <B><FONT COLOR="#A020F0">type</FONT></B> class <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#228B22">list</FONT></B>
	    <B><FONT COLOR="#A020F0">type</FONT></B> classes <B><FONT COLOR="#5F9EA0">=</FONT></B> class <B><FONT COLOR="#228B22">list</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> repCounter <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> ~1
	    <B><FONT COLOR="#A020F0">val</FONT></B> change <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> false
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">newRep</FONT></I></B></FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B> (change <B><FONT COLOR="#5F9EA0">:=</FONT></B> true; <B><FONT COLOR="#5F9EA0">+</FONT></B><B><FONT COLOR="#5F9EA0">+</FONT></B> repCounter)
	    <B><FONT COLOR="#A020F0">val</FONT></B> finRep <B><FONT COLOR="#5F9EA0">=</FONT></B> newRep ()
	    <B><FONT COLOR="#A020F0">val</FONT></B> nonfinRep <B><FONT COLOR="#5F9EA0">=</FONT></B> newRep ()
	    <B><FONT COLOR="#A020F0">val</FONT></B> r <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.tabulate (numStates, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				    <B><FONT COLOR="#A020F0">if</FONT></B> Array.sub (final, i)
				       <B><FONT COLOR="#A020F0">then</FONT></B> finRep
				    <B><FONT COLOR="#A020F0">else</FONT></B> nonfinRep)
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">rep</FONT></I></B></FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.sub (r, s)
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">trans</FONT></I></B></FONT></B> (s, c) <B><FONT COLOR="#5F9EA0">=</FONT></B> rep (Array2.sub (next, s, c))
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">refine</FONT></I></B></FONT></B> (class: class, ac: classes): classes <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">let</FONT></B>
		  <B><FONT COLOR="#A020F0">val</FONT></B> r <B><FONT COLOR="#5F9EA0">=</FONT></B>
		     List.fold
		     (class, [], <B><FONT COLOR="#A020F0">fn</FONT></B> (state, classes) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		      <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">			 fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> (classes, ac) <B><FONT COLOR="#5F9EA0">=</FONT></B>
			    <B><FONT COLOR="#A020F0">case</FONT></B> classes <B><FONT COLOR="#A020F0">of</FONT></B>
			       [] <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				  (<B><FONT COLOR="#A020F0">case</FONT></B> ac <B><FONT COLOR="#A020F0">of</FONT></B>
				      [] <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> [{class <B><FONT COLOR="#5F9EA0">=</FONT></B> [state],
					      old <B><FONT COLOR="#5F9EA0">=</FONT></B> state}]
				    <B><FONT COLOR="#5F9EA0">|</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 
					 <B><FONT COLOR="#A020F0">let</FONT></B>
					    <B><FONT COLOR="#A020F0">val</FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B> newRep ()
					    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.update (r, state, s)
					 <B><FONT COLOR="#A020F0">in</FONT></B> {class <B><FONT COLOR="#5F9EA0">=</FONT></B> [state],
					     old <B><FONT COLOR="#5F9EA0">=</FONT></B> state} <B><FONT COLOR="#5F9EA0">::</FONT></B> ac
					 <B><FONT COLOR="#A020F0">end</FONT></B>)
			     <B><FONT COLOR="#5F9EA0">|</FONT></B> (z <B><FONT COLOR="#A020F0">as</FONT></B> {class, old}) <B><FONT COLOR="#5F9EA0">::</FONT></B> classes <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				  <B><FONT COLOR="#A020F0">if</FONT></B> Int.forall
				     (0, numChars, <B><FONT COLOR="#A020F0">fn</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				      trans (old, c) <B><FONT COLOR="#5F9EA0">=</FONT></B> trans (state, c))
				     <B><FONT COLOR="#A020F0">then</FONT></B>
					(Array.update (r, state, rep old)
					 ; {class <B><FONT COLOR="#5F9EA0">=</FONT></B> state <B><FONT COLOR="#5F9EA0">::</FONT></B> class,
					    old <B><FONT COLOR="#5F9EA0">=</FONT></B> old} <B><FONT COLOR="#5F9EA0">::</FONT></B> (List.appendRev
							   (classes, ac)))
				  <B><FONT COLOR="#A020F0">else</FONT></B> loop (classes, z <B><FONT COLOR="#5F9EA0">::</FONT></B> ac)
		      <B><FONT COLOR="#A020F0">in</FONT></B> loop (classes, [])
		      <B><FONT COLOR="#A020F0">end</FONT></B>)
	       <B><FONT COLOR="#A020F0">in</FONT></B> List.fold (r, ac, <B><FONT COLOR="#A020F0">fn</FONT></B> ({class, ...}, ac) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
			     <B><FONT COLOR="#A020F0">case</FONT></B> class <B><FONT COLOR="#A020F0">of</FONT></B>
				[_] <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ac
			      <B><FONT COLOR="#5F9EA0">|</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> class <B><FONT COLOR="#5F9EA0">::</FONT></B> ac)
	       <B><FONT COLOR="#A020F0">end</FONT></B>
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">refineAll</FONT></I></B></FONT></B> (classes: classes): <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">case</FONT></B> classes <B><FONT COLOR="#A020F0">of</FONT></B>
		  [] <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ()
		<B><FONT COLOR="#5F9EA0">|</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		     <B><FONT COLOR="#A020F0">let</FONT></B>
			<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> change <B><FONT COLOR="#5F9EA0">:=</FONT></B> false
			<B><FONT COLOR="#A020F0">val</FONT></B> classes <B><FONT COLOR="#5F9EA0">=</FONT></B>
			   List.fold (classes, [], <B><FONT COLOR="#A020F0">fn</FONT></B> (class, ac) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				      <B><FONT COLOR="#A020F0">case</FONT></B> class <B><FONT COLOR="#A020F0">of</FONT></B>
					 [_] <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ac
				       <B><FONT COLOR="#5F9EA0">|</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> refine (class, ac))
		     <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>change
			   <B><FONT COLOR="#A020F0">then</FONT></B> refineAll classes
			<B><FONT COLOR="#A020F0">else</FONT></B> ()
		     <B><FONT COLOR="#A020F0">end</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> (fin, nonfin) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       Int.fold (0, numStates, ([], []), <B><FONT COLOR="#A020F0">fn</FONT></B> (i, (f, n)) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
			 <B><FONT COLOR="#A020F0">if</FONT></B> Array.sub (final, i)
			    <B><FONT COLOR="#A020F0">then</FONT></B> (i <B><FONT COLOR="#5F9EA0">::</FONT></B> f, n)
			 <B><FONT COLOR="#A020F0">else</FONT></B> (f, i <B><FONT COLOR="#5F9EA0">::</FONT></B> n))
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> refineAll [fin, nonfin]
	    <B><FONT COLOR="#A020F0">val</FONT></B> numStates' <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 <B><FONT COLOR="#5F9EA0">+</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>repCounter
	    <I><FONT COLOR="#B22222">(* Compute reachable states. *)</FONT></I>
	    <B><FONT COLOR="#A020F0">val</FONT></B> reached <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.new (numStates', false)
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">visit</FONT></I></B></FONT></B> (s: <B><FONT COLOR="#228B22">int</FONT></B> <I><FONT COLOR="#B22222">(* an old state *)</FONT></I>): <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">let</FONT></B>
		  <B><FONT COLOR="#A020F0">val</FONT></B> s' <B><FONT COLOR="#5F9EA0">=</FONT></B> rep s
	       <B><FONT COLOR="#A020F0">in</FONT></B>
		  <B><FONT COLOR="#A020F0">if</FONT></B> Array.sub (reached, s')
		     <B><FONT COLOR="#A020F0">then</FONT></B> ()
		  <B><FONT COLOR="#A020F0">else</FONT></B> (Array.update (reached, s', true)
			; Int.for (0, numChars, <B><FONT COLOR="#A020F0">fn</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				   visit (Array2.sub (next, s, c))))
	       <B><FONT COLOR="#A020F0">end</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> visit start
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> visit anchorStart
	    <I><FONT COLOR="#B22222">(* Compute new representatives. *)</FONT></I>
	    <B><FONT COLOR="#A020F0">val</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> ~1
	    <B><FONT COLOR="#A020F0">val</FONT></B> newR <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.tabulate (numStates', <B><FONT COLOR="#A020F0">fn</FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				       <B><FONT COLOR="#A020F0">if</FONT></B> Array.sub (reached, s)
					  <B><FONT COLOR="#A020F0">then</FONT></B> <B><FONT COLOR="#5F9EA0">+</FONT></B><B><FONT COLOR="#5F9EA0">+</FONT></B> c
				       <B><FONT COLOR="#A020F0">else</FONT></B> ~1)
	    <B><FONT COLOR="#A020F0">val</FONT></B> numStates' <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 <B><FONT COLOR="#5F9EA0">+</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>c
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.modify (r, <B><FONT COLOR="#A020F0">fn</FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> Array.sub (newR, s))
	    <B><FONT COLOR="#A020F0">val</FONT></B> next' <B><FONT COLOR="#5F9EA0">=</FONT></B> Array2.new (numStates', numChars, ~1)
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       Array2.foreachi
	       (next, <B><FONT COLOR="#A020F0">fn</FONT></B> (s, c, s') <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		Array2.update (next', rep s, c, rep s'))
	    <B><FONT COLOR="#A020F0">val</FONT></B> final' <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.<B><FONT COLOR="#228B22">array</FONT></B> (numStates', false)
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       Array.foreachi
	       (final, <B><FONT COLOR="#A020F0">fn</FONT></B> (i, b) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		<B><FONT COLOR="#A020F0">if</FONT></B> b <B><FONT COLOR="#A020F0">then</FONT></B> Array.update (final', rep i, true) <B><FONT COLOR="#A020F0">else</FONT></B> ())
	 <B><FONT COLOR="#A020F0">in</FONT></B> T {anchorStart <B><FONT COLOR="#5F9EA0">=</FONT></B> rep anchorStart,
	       dead <B><FONT COLOR="#5F9EA0">=</FONT></B> dead (numStates', final', next'),
	       final <B><FONT COLOR="#5F9EA0">=</FONT></B> final',
	       start <B><FONT COLOR="#5F9EA0">=</FONT></B> rep start,
	       next <B><FONT COLOR="#5F9EA0">=</FONT></B> next'}
	 <B><FONT COLOR="#A020F0">end</FONT></B>

      <I><FONT COLOR="#B22222">(* This is the usual &quot;subset construction&quot;, as in algorithm 3.2 (page 118)
       * of Compilers: Principles, Techniques, and Tools by Aho, Sethi, and
       * Ullman.
       *
       * It associates each (reachable) set of states in the nfa with a single
       * state in the DFA.
       *)</FONT></I>
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">fromNFA</FONT></I></B></FONT></B> (nfa <B><FONT COLOR="#A020F0">as</FONT></B> NFA.T {anchorStarts, final, start, next, ...}) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
	    <I><FONT COLOR="#B22222">(* Sets of states are represented as sorted vectors. *)</FONT></I>
	    <B><FONT COLOR="#A020F0">type</FONT></B> states <B><FONT COLOR="#5F9EA0">=</FONT></B> state <B><FONT COLOR="#228B22">vector</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> counter <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> ~1
	    <B><FONT COLOR="#A020F0">type</FONT></B> work <B><FONT COLOR="#5F9EA0">=</FONT></B> {states: states,
			 state: <B><FONT COLOR="#228B22">int</FONT></B>,
			 out: <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#228B22">vector</FONT></B> option <B><FONT COLOR="#A020F0">ref</FONT></B>}
	    <B><FONT COLOR="#A020F0">val</FONT></B> cache: work <B><FONT COLOR="#228B22">list</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> []
	    <B><FONT COLOR="#A020F0">val</FONT></B> todo: work <B><FONT COLOR="#228B22">list</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> []
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">statesToState</FONT></I></B></FONT></B> (ss: states): <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">case</FONT></B> List.peek (<B><FONT COLOR="#5F9EA0">!</FONT></B>cache, <B><FONT COLOR="#A020F0">fn</FONT></B> {states, ...} <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ss <B><FONT COLOR="#5F9EA0">=</FONT></B> states) <B><FONT COLOR="#A020F0">of</FONT></B>
		  <B><FONT COLOR="#5F9EA0">NONE</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		     <B><FONT COLOR="#A020F0">let</FONT></B>
			<B><FONT COLOR="#A020F0">val</FONT></B> state <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">+</FONT></B><B><FONT COLOR="#5F9EA0">+</FONT></B> counter
			<B><FONT COLOR="#A020F0">val</FONT></B> work <B><FONT COLOR="#5F9EA0">=</FONT></B> {out <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> <B><FONT COLOR="#5F9EA0">NONE</FONT></B>,
				    state <B><FONT COLOR="#5F9EA0">=</FONT></B> state,
				    states <B><FONT COLOR="#5F9EA0">=</FONT></B> ss}
			<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> List.push (cache, work)
			<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> List.push (todo, work)
		     <B><FONT COLOR="#A020F0">in</FONT></B>
			state
		     <B><FONT COLOR="#A020F0">end</FONT></B>
		<B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> {state, ...} <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> state
	    <B><FONT COLOR="#A020F0">local</FONT></B>
	       <B><FONT COLOR="#A020F0">val</FONT></B> seen <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.<B><FONT COLOR="#228B22">array</FONT></B> (NFA.numStates nfa, false)
	    <B><FONT COLOR="#A020F0">in</FONT></B>
<B><FONT COLOR="#A020F0">	       fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B>
		  <B><FONT COLOR="#A020F0">case</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>todo <B><FONT COLOR="#A020F0">of</FONT></B>
		     [] <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ()
		   <B><FONT COLOR="#5F9EA0">|</FONT></B> {states, out, ...} <B><FONT COLOR="#5F9EA0">::</FONT></B> rest <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
			(todo <B><FONT COLOR="#5F9EA0">:=</FONT></B> rest
			 ; out <B><FONT COLOR="#5F9EA0">:=</FONT></B> (<B><FONT COLOR="#5F9EA0">SOME</FONT></B>
				   (Vector.tabulate
				    (numChars, <B><FONT COLOR="#A020F0">fn</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				     <B><FONT COLOR="#A020F0">let</FONT></B>
					<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
					   Array.modify (seen, <B><FONT COLOR="#A020F0">fn</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> false)
					<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> 
					   Vector.foreach
					   (states, <B><FONT COLOR="#A020F0">fn</FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
					    Vector.foreach
					    (Array2.sub (next, s, c), <B><FONT COLOR="#A020F0">fn</FONT></B> s' <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
					     Array.update (seen, s', true)))
				     <B><FONT COLOR="#A020F0">in</FONT></B> statesToState (Array.indices seen)
				     <B><FONT COLOR="#A020F0">end</FONT></B>)))
			 ; loop ())
	    <B><FONT COLOR="#A020F0">end</FONT></B>
	    <I><FONT COLOR="#B22222">(* This call to statesToState initializes the worklist. *)</FONT></I>
	    <B><FONT COLOR="#A020F0">val</FONT></B> start' <B><FONT COLOR="#5F9EA0">=</FONT></B> statesToState (Vector.new1 start)
	    <B><FONT COLOR="#A020F0">val</FONT></B> anchorStart' <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       statesToState
	       (Vector.fromList (List.insert (anchorStarts, start, <B><FONT COLOR="#A020F0">op</FONT></B> <B><FONT COLOR="#5F9EA0">&lt;=</FONT></B>)))
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> loop ()
	    <B><FONT COLOR="#A020F0">val</FONT></B> numStates <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 <B><FONT COLOR="#5F9EA0">+</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>counter
	    <B><FONT COLOR="#A020F0">val</FONT></B> next' <B><FONT COLOR="#5F9EA0">=</FONT></B> Array2.new (numStates, numChars, ~1)
	    <B><FONT COLOR="#A020F0">val</FONT></B> final' <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.new (numStates, false)
	    <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       List.foreach
	       (<B><FONT COLOR="#5F9EA0">!</FONT></B>cache, <B><FONT COLOR="#A020F0">fn</FONT></B> {states, state <B><FONT COLOR="#5F9EA0">=</FONT></B> i, out, ...}: work <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		<B><FONT COLOR="#A020F0">let</FONT></B>
		   <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
		      Vector.foreachi
		      (valOf (<B><FONT COLOR="#5F9EA0">!</FONT></B> out), <B><FONT COLOR="#A020F0">fn</FONT></B> (c, j) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
		       Array2.update (next', i, c, j))
		   <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
		      <B><FONT COLOR="#A020F0">if</FONT></B> Vector.exists (states, <B><FONT COLOR="#A020F0">fn</FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> Array.sub (final, s))
			 <B><FONT COLOR="#A020F0">then</FONT></B> Array.update (final', i, true)
		      <B><FONT COLOR="#A020F0">else</FONT></B> ()
		<B><FONT COLOR="#A020F0">in</FONT></B> ()
		<B><FONT COLOR="#A020F0">end</FONT></B>)
	    <B><FONT COLOR="#A020F0">val</FONT></B> dead' <B><FONT COLOR="#5F9EA0">=</FONT></B> dead (numStates, final', next')
	 <B><FONT COLOR="#A020F0">in</FONT></B> T {anchorStart <B><FONT COLOR="#5F9EA0">=</FONT></B> anchorStart',
	       dead <B><FONT COLOR="#5F9EA0">=</FONT></B> dead',
	       final <B><FONT COLOR="#5F9EA0">=</FONT></B> final',
	       start <B><FONT COLOR="#5F9EA0">=</FONT></B> start',
	       next <B><FONT COLOR="#5F9EA0">=</FONT></B> next'}
	 <B><FONT COLOR="#A020F0">end</FONT></B>

   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#5F9EA0">structure</FONT></B> Regexp:
   <B><FONT COLOR="#5F9EA0">sig</FONT></B>
      <B><FONT COLOR="#5F9EA0">structure</FONT></B> Compiled:
	 <B><FONT COLOR="#5F9EA0">sig</FONT></B>
	    <B><FONT COLOR="#A020F0">type</FONT></B> t

	    <I><FONT COLOR="#B22222">(* find returns the longest of the leftmost matches. *)</FONT></I>
	    <B><FONT COLOR="#A020F0">val</FONT></B> find: t <B><FONT COLOR="#5F9EA0">*</FONT></B> <B><FONT COLOR="#228B22">string</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> {start: <B><FONT COLOR="#228B22">int</FONT></B>, length: <B><FONT COLOR="#228B22">int</FONT></B>} option
	 <B><FONT COLOR="#A020F0">end</FONT></B>

      <B><FONT COLOR="#A020F0">type</FONT></B> t

      <B><FONT COLOR="#A020F0">val</FONT></B> anchorStart: t
      <B><FONT COLOR="#A020F0">val</FONT></B> any: t
      <B><FONT COLOR="#A020F0">val</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>: <B><FONT COLOR="#228B22">char</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
      <B><FONT COLOR="#A020F0">val</FONT></B> compileDFA: t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> Compiled.t
      <B><FONT COLOR="#A020F0">val</FONT></B> compileNFA: t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> Compiled.t
      <B><FONT COLOR="#A020F0">val</FONT></B> digit: t
      <B><FONT COLOR="#A020F0">val</FONT></B> nonDigit: t
      <B><FONT COLOR="#A020F0">val</FONT></B> notOneOf: <B><FONT COLOR="#228B22">string</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
      <B><FONT COLOR="#A020F0">val</FONT></B> oneOf: <B><FONT COLOR="#228B22">string</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
      <B><FONT COLOR="#A020F0">val</FONT></B> or: t <B><FONT COLOR="#228B22">list</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
      <B><FONT COLOR="#A020F0">val</FONT></B> seq: t <B><FONT COLOR="#228B22">list</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
      <B><FONT COLOR="#A020F0">val</FONT></B> star: t <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> t
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#5F9EA0">struct</FONT></B>
      <B><FONT COLOR="#A020F0">open</FONT></B> Regexp

      <B><FONT COLOR="#A020F0">val</FONT></B> anchorStart <B><FONT COLOR="#5F9EA0">=</FONT></B> AnchorStart
      <B><FONT COLOR="#A020F0">val</FONT></B> isChar <B><FONT COLOR="#5F9EA0">=</FONT></B> CharSet
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">isNotChar</FONT></I></B></FONT></B> f <B><FONT COLOR="#5F9EA0">=</FONT></B> isChar (not <B><FONT COLOR="#A020F0">o</FONT></B> f)
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">char</FONT></I></B></FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B> isChar (<B><FONT COLOR="#A020F0">fn</FONT></B> c' <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B> c')
      <B><FONT COLOR="#A020F0">val</FONT></B> or <B><FONT COLOR="#5F9EA0">=</FONT></B> Or
      <B><FONT COLOR="#A020F0">val</FONT></B> seq <B><FONT COLOR="#5F9EA0">=</FONT></B> Seq
      <B><FONT COLOR="#A020F0">val</FONT></B> star <B><FONT COLOR="#5F9EA0">=</FONT></B> Star

      <B><FONT COLOR="#A020F0">val</FONT></B> any <B><FONT COLOR="#5F9EA0">=</FONT></B> isChar (<B><FONT COLOR="#A020F0">fn</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> true)

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">oneOf</FONT></I></B></FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B> isChar (<B><FONT COLOR="#A020F0">fn</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> String.contains (s, c))
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">notOneOf</FONT></I></B></FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B> isNotChar (<B><FONT COLOR="#A020F0">fn</FONT></B> c <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> String.contains (s, c))
      <B><FONT COLOR="#A020F0">val</FONT></B> digs <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;0123456789&quot;</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> digit <B><FONT COLOR="#5F9EA0">=</FONT></B> oneOf digs
      <B><FONT COLOR="#A020F0">val</FONT></B> nonDigit <B><FONT COLOR="#5F9EA0">=</FONT></B> notOneOf digs

      <B><FONT COLOR="#A020F0">val</FONT></B> empty <B><FONT COLOR="#5F9EA0">=</FONT></B> Or [] <I><FONT COLOR="#B22222">(* Empty Language. *)</FONT></I>
      <B><FONT COLOR="#A020F0">val</FONT></B> emptyString <B><FONT COLOR="#5F9EA0">=</FONT></B> Seq [] <I><FONT COLOR="#B22222">(* Language containing the empty string only. *)</FONT></I>

	 
      <B><FONT COLOR="#5F9EA0">structure</FONT></B> Compiled <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#5F9EA0">struct</FONT></B>
	    <B><FONT COLOR="#A020F0">datatype</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       DFA <B><FONT COLOR="#A020F0">of</FONT></B> DFA.t
	     <B><FONT COLOR="#5F9EA0">|</FONT></B> NFA <B><FONT COLOR="#A020F0">of</FONT></B> NFA.t

<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">find</FONT></I></B></FONT></B> (c: t, s: <B><FONT COLOR="#228B22">string</FONT></B>) <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">let</FONT></B>
		  <B><FONT COLOR="#A020F0">val</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> String.size s
<B><FONT COLOR="#A020F0">		  fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> (i: <B><FONT COLOR="#228B22">int</FONT></B>, anchorStart: <B><FONT COLOR="#228B22">bool</FONT></B>) <B><FONT COLOR="#5F9EA0">=</FONT></B>
		     <B><FONT COLOR="#A020F0">if</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B> n
			<B><FONT COLOR="#A020F0">then</FONT></B> <B><FONT COLOR="#5F9EA0">NONE</FONT></B>
		     <B><FONT COLOR="#A020F0">else</FONT></B>
			<B><FONT COLOR="#A020F0">let</FONT></B>
			   <B><FONT COLOR="#A020F0">val</FONT></B> res <B><FONT COLOR="#5F9EA0">=</FONT></B>
			      <B><FONT COLOR="#A020F0">case</FONT></B> c <B><FONT COLOR="#A020F0">of</FONT></B>
				 DFA dfa <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				    DFA.match {dfa <B><FONT COLOR="#5F9EA0">=</FONT></B> dfa,
					       <B><FONT COLOR="#228B22">string</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> s,
					       startPos <B><FONT COLOR="#5F9EA0">=</FONT></B> i,
					       anchorStart <B><FONT COLOR="#5F9EA0">=</FONT></B> anchorStart}
			       <B><FONT COLOR="#5F9EA0">|</FONT></B> NFA nfa <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
				    NFA.match {nfa <B><FONT COLOR="#5F9EA0">=</FONT></B> nfa,
					       <B><FONT COLOR="#228B22">string</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> s,
					       startPos <B><FONT COLOR="#5F9EA0">=</FONT></B> i,
					       anchorStart <B><FONT COLOR="#5F9EA0">=</FONT></B> anchorStart}
			<B><FONT COLOR="#A020F0">in</FONT></B>
			   <B><FONT COLOR="#A020F0">case</FONT></B> res <B><FONT COLOR="#A020F0">of</FONT></B>
			      <B><FONT COLOR="#5F9EA0">NONE</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> loop (i <B><FONT COLOR="#5F9EA0">+</FONT></B> 1, false)
			    <B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> finish <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> {start <B><FONT COLOR="#5F9EA0">=</FONT></B> i,
						   length <B><FONT COLOR="#5F9EA0">=</FONT></B> finish <B><FONT COLOR="#5F9EA0">-</FONT></B> i}
			<B><FONT COLOR="#A020F0">end</FONT></B>
	       <B><FONT COLOR="#A020F0">in</FONT></B> loop (0, true)
	       <B><FONT COLOR="#A020F0">end</FONT></B>
	 <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">compileDFA</FONT></I></B></FONT></B> r <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 Compiled.DFA (DFA.minimize (DFA.fromNFA (NFA.fromRegexp r)))
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">compileNFA</FONT></I></B></FONT></B> r <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 Compiled.NFA (NFA.fromRegexp r)
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">local</FONT></B>
   <B><FONT COLOR="#A020F0">open</FONT></B> Regexp
<B><FONT COLOR="#A020F0">in</FONT></B>
   <B><FONT COLOR="#A020F0">val</FONT></B> d <B><FONT COLOR="#5F9EA0">=</FONT></B> digit
   <B><FONT COLOR="#A020F0">val</FONT></B> eol <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B> #<B><FONT COLOR="#BC8F8F">&quot;#&quot;</FONT></B>
   <B><FONT COLOR="#A020F0">val</FONT></B> space <B><FONT COLOR="#5F9EA0">=</FONT></B> oneOf <B><FONT COLOR="#BC8F8F">&quot; \t&quot;</FONT></B>
   <B><FONT COLOR="#A020F0">val</FONT></B> r <B><FONT COLOR="#5F9EA0">=</FONT></B>
      seq [or [anchorStart, notOneOf <B><FONT COLOR="#BC8F8F">&quot;0123456789(&quot;</FONT></B>],
	   or [seq [<B><FONT COLOR="#228B22">char</FONT></B> #<B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B>, d, d, d, <B><FONT COLOR="#228B22">char</FONT></B> #<B><FONT COLOR="#BC8F8F">&quot;)&quot;</FONT></B>],
	       seq [d, d, d]],
	   <B><FONT COLOR="#228B22">char</FONT></B> #<B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>,
	   d, d, d,
	   oneOf <B><FONT COLOR="#BC8F8F">&quot; -&quot;</FONT></B>,
	   d, d, d, d,
	   or [eol, nonDigit]]
<I><FONT COLOR="#B22222">(*   val comp = Regexp.compileNFA r *)</FONT></I>
   <B><FONT COLOR="#A020F0">val</FONT></B> comp <B><FONT COLOR="#5F9EA0">=</FONT></B> Regexp.compileDFA r
<B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">incr</FONT></I></B></FONT></B> (r: <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B>) <B><FONT COLOR="#5F9EA0">=</FONT></B> r <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#5F9EA0">!</FONT></B>r <B><FONT COLOR="#5F9EA0">+</FONT></B> 1

<B><FONT COLOR="#A020F0">val</FONT></B> ins <B><FONT COLOR="#5F9EA0">=</FONT></B> TextIO.stdIn

<B><FONT COLOR="#A020F0">val</FONT></B> phones <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> lines <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">case</FONT></B> TextIO.inputLine ins <B><FONT COLOR="#A020F0">of</FONT></B>
	    <B><FONT COLOR="#5F9EA0">NONE</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> rev lines
	  <B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B>(str) <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
	    (<B><FONT COLOR="#A020F0">case</FONT></B> str <B><FONT COLOR="#A020F0">of</FONT></B>
	        <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> rev lines
	      <B><FONT COLOR="#5F9EA0">|</FONT></B> line <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> loop (line <B><FONT COLOR="#5F9EA0">::</FONT></B> lines))
   <B><FONT COLOR="#A020F0">in</FONT></B> loop []
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">printl</FONT></I></B></FONT></B> [] <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">print</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B> <B><FONT COLOR="#5F9EA0">|</FONT></B> printl(h<B><FONT COLOR="#5F9EA0">::</FONT></B>t) <B><FONT COLOR="#5F9EA0">=</FONT></B> ( <B><FONT COLOR="#A020F0">print</FONT></B> h ; printl t )

<I><FONT COLOR="#B22222">(* Based on regexmatch.ocaml. *)</FONT></I>
   
<B><FONT COLOR="#A020F0">local</FONT></B>
   <B><FONT COLOR="#A020F0">val</FONT></B> form <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;(...) ...-....&quot;</FONT></B>
   <B><FONT COLOR="#A020F0">val</FONT></B> a <B><FONT COLOR="#5F9EA0">=</FONT></B> CharArray.tabulate (String.size form, <B><FONT COLOR="#A020F0">fn</FONT></B> i <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
			       String.sub (form, i))
<B><FONT COLOR="#A020F0">in</FONT></B>
<B><FONT COLOR="#A020F0">   fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">checkPhone</FONT></I></B></FONT></B> (mustPrint: <B><FONT COLOR="#228B22">bool</FONT></B>, cnt: <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B>, line: <B><FONT COLOR="#228B22">string</FONT></B>) <B><FONT COLOR="#5F9EA0">=</FONT></B>
      <B><FONT COLOR="#A020F0">case</FONT></B> Regexp.Compiled.find (comp, line) <B><FONT COLOR="#A020F0">of</FONT></B>
	 <B><FONT COLOR="#5F9EA0">NONE</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> ()
       <B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> {start <B><FONT COLOR="#5F9EA0">=</FONT></B> pos, ...} <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B>
	    <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">	       fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">blit</FONT></I></B></FONT></B> (src, dst, length) <B><FONT COLOR="#5F9EA0">=</FONT></B>
		  <B><FONT COLOR="#A020F0">let</FONT></B>
		     <B><FONT COLOR="#A020F0">val</FONT></B> stop <B><FONT COLOR="#5F9EA0">=</FONT></B> src <B><FONT COLOR="#5F9EA0">+</FONT></B> length
<B><FONT COLOR="#A020F0">		     fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> (src, dst) <B><FONT COLOR="#5F9EA0">=</FONT></B>
			<B><FONT COLOR="#A020F0">if</FONT></B> src <B><FONT COLOR="#5F9EA0">=</FONT></B> stop
			   <B><FONT COLOR="#A020F0">then</FONT></B> ()
			<B><FONT COLOR="#A020F0">else</FONT></B> (CharArray.update (a, dst,
						String.sub (line, src))
			      ; loop (src <B><FONT COLOR="#5F9EA0">+</FONT></B> 1, dst <B><FONT COLOR="#5F9EA0">+</FONT></B> 1))
		  <B><FONT COLOR="#A020F0">in</FONT></B>
		     loop (src, dst)
		  <B><FONT COLOR="#A020F0">end</FONT></B>
	       <B><FONT COLOR="#A020F0">val</FONT></B> (o1, o2, o3) <B><FONT COLOR="#5F9EA0">=</FONT></B>
		  <B><FONT COLOR="#A020F0">if</FONT></B> #<B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> String.sub (line, pos)
		     <B><FONT COLOR="#A020F0">then</FONT></B> (1, 6, 10)
		  <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> #<B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> String.sub (line, pos <B><FONT COLOR="#5F9EA0">+</FONT></B> 1)
			  <B><FONT COLOR="#A020F0">then</FONT></B> (2, 7, 11)
		       <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> Char.isDigit (String.sub (line, pos))
			       <B><FONT COLOR="#A020F0">then</FONT></B> (0, 4, 8)
			    <B><FONT COLOR="#A020F0">else</FONT></B> (1, 5, 9)
	       <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> blit (pos <B><FONT COLOR="#5F9EA0">+</FONT></B> o1, 1, 3)
	       <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> blit (pos <B><FONT COLOR="#5F9EA0">+</FONT></B> o2, 6, 3)
	       <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> blit (pos <B><FONT COLOR="#5F9EA0">+</FONT></B> o3, 10, 4)
	       <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B>
		  <B><FONT COLOR="#A020F0">if</FONT></B> mustPrint
		     <B><FONT COLOR="#A020F0">then</FONT></B> printl [Int.toString (<B><FONT COLOR="#5F9EA0">!</FONT></B>cnt), <B><FONT COLOR="#BC8F8F">&quot;: &quot;</FONT></B>, CharArray.<B><FONT COLOR="#228B22">vector</FONT></B> a]
		  <B><FONT COLOR="#A020F0">else</FONT></B> ()
	       <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> incr cnt
	    <B><FONT COLOR="#A020F0">in</FONT></B>
	       ()
	    <B><FONT COLOR="#A020F0">end</FONT></B>
<B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">doit</FONT></I></B></FONT></B> (mustPrint: <B><FONT COLOR="#228B22">bool</FONT></B>): <B><FONT COLOR="#228B22">unit</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#A020F0">let</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> cnt <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">ref</FONT></B> 1
   <B><FONT COLOR="#A020F0">in</FONT></B>
      List.foreach (phones, <B><FONT COLOR="#A020F0">fn</FONT></B> line <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> checkPhone (mustPrint, cnt, line))
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">atoi</FONT></I></B></FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">case</FONT></B> Int.fromString s <B><FONT COLOR="#A020F0">of</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> num <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> num <B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#5F9EA0">NONE</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 0
   
<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main</FONT></I></B></FONT></B> (name, args) <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#A020F0">let</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">atoi</FONT></B> (<B><FONT COLOR="#5F9EA0">hd</FONT></B> (args <B><FONT COLOR="#5F9EA0">@</FONT></B> [<B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B>]))
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Int.for (1, n, <B><FONT COLOR="#A020F0">fn</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> doit false)
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> doit true
   <B><FONT COLOR="#A020F0">in</FONT></B> ()
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> main( CommandLine.name(), CommandLine.arguments() )</pre></td></tr></table>
