<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>net<span class="sym">.*;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>   <span class="kwa">let</span> server <span class="sym">=</span> <span class="kwa">new</span> EchoServer<span class="sym">(</span>port<span class="sym">:</span> <span class="num">0</span><span class="sym">);
</span>   <span class="kwa">let</span> client <span class="sym">=</span> <span class="kwa">new</span> EchoClient<span class="sym">(
</span>      address<span class="sym">:</span> <span class="kwc">InetAddress</span><span class="sym">.</span>getLocalHost<span class="sym">(),
</span>      port<span class="sym">:</span> server<span class="sym">.</span>getPort<span class="sym">,
</span>      repeat<span class="sym">:</span> n
   <span class="sym">);
</span>   client<span class="sym">.</span>start<span class="sym">;
}

</span><span class="kwa">let</span> <span class="kwb">int</span> BUFFER_SIZE <span class="sym">=</span> <span class="num">1024</span><span class="sym">;

</span><span class="kwa">class</span> EchoServer <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
</span>   ?<span class="kwc">ServerSocket</span> socket <span class="sym">=</span> null<span class="sym">;
</span>   <span class="kwb">int</span> port<span class="sym">;

   {</span>  <span class="slc">// initializer
</span>      socket <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ServerSocket</span><span class="sym">(</span>port<span class="sym">);
</span>      port <span class="sym">=</span> notNull<span class="sym">(</span>socket<span class="sym">).</span>getLocalPort<span class="sym">;
</span>      <span class="kwa">this</span><span class="sym">.</span>start<span class="sym">;
   }

</span>   <span class="kwb">int</span> getPort<span class="sym">();</span> getPort<span class="sym">() =</span> port<span class="sym">;

</span>   run<span class="sym">() {
</span>      <span class="kwa">let</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFFER_SIZE<span class="sym">];
</span>      <span class="kwa">try</span> <span class="sym">{
</span>         <span class="kwa">let</span> socketClient <span class="sym">=</span> notNull<span class="sym">(</span>socket<span class="sym">).</span>accept<span class="sym">;
</span>         <span class="kwa">let</span> in <span class="sym">=</span> socketClient<span class="sym">.</span>getInputStream<span class="sym">;
</span>         <span class="kwa">let</span> out <span class="sym">=</span> socketClient<span class="sym">.</span>getOutputStream<span class="sym">;

</span>         var count <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> length <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">while</span> <span class="sym">((</span>length <span class="sym">=</span> in<span class="sym">.</span>read<span class="sym">(</span>buffer<span class="sym">)) != -</span><span class="num">1</span><span class="sym">) {
</span>            out<span class="sym">.</span>write<span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> length<span class="sym">);
</span>            out<span class="sym">.</span>flush<span class="sym">;
</span>            count <span class="sym">+=</span> length<span class="sym">;
         }
</span>         println<span class="sym">(</span><span class="str">&quot;server processed &quot;</span> <span class="sym">+</span> count <span class="sym">+</span> <span class="str">&quot; bytes&quot;</span><span class="sym">);

      }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {
</span>         e<span class="sym">.</span>printStackTrace<span class="sym">;
      }
   }
}

</span><span class="kwa">let</span> <span class="kwc">String</span> GREETING <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;

</span><span class="kwa">class</span> EchoClient <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
</span>   <span class="kwc">InetAddress</span> address<span class="sym">;
</span>   <span class="kwb">int</span> port<span class="sym">;
</span>   <span class="kwb">int</span> repeat<span class="sym">;

</span>   run<span class="sym">() {
</span>      var ?<span class="kwc">Socket</span> serverSocket <span class="sym">=</span> null<span class="sym">;
</span>      <span class="kwa">try</span> <span class="sym">{
</span>         <span class="kwa">let</span> socket <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Socket</span><span class="sym">(</span>address<span class="sym">,</span> port<span class="sym">);
</span>         serverSocket <span class="sym">=</span> socket<span class="sym">;

</span>         <span class="kwa">let</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span>socket<span class="sym">.</span>getInputStream<span class="sym">));
</span>         <span class="kwa">let</span> out <span class="sym">=</span> socket<span class="sym">.</span>getOutputStream<span class="sym">;
</span>         <span class="kwa">let</span> greetingBytes <span class="sym">=</span> GREETING<span class="sym">.</span>getBytes<span class="sym">;
</span>            <span class="slc">// readLine will disgard '\n' so disgard it from the test string
</span>         <span class="kwa">let</span> greeting <span class="sym">=</span> GREETING<span class="sym">.</span>trim<span class="sym">;

</span>         var ?<span class="kwc">String</span> received<span class="sym">;
</span>         <span class="kwa">while</span> <span class="sym">(</span>repeat<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">) {
</span>            out<span class="sym">.</span>write<span class="sym">(</span>greetingBytes<span class="sym">);
</span>            out<span class="sym">.</span>flush<span class="sym">;
</span>            received <span class="sym">=</span> in<span class="sym">.</span>readLine<span class="sym">;

</span>            <span class="kwa">if</span> <span class="sym">(!</span> received<span class="sym">.</span>equals<span class="sym">(</span>greeting<span class="sym">))
</span>               <span class="kwa">throw new</span> <span class="kwc">RuntimeException</span><span class="sym">(
</span>                  <span class="str">&quot;client:</span> <span class="esc">\&quot;</span><span class="str">&quot;</span> <span class="sym">+</span> received <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\&quot; </span> <span class="str">!=</span> <span class="esc">\&quot;</span><span class="str">&quot;</span> <span class="sym">+</span> greeting  <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\&quot;</span><span class="str">&quot;</span><span class="sym">);
         }

      }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {
</span>         e<span class="sym">.</span>printStackTrace<span class="sym">;
      }</span> <span class="kwa">finally</span> <span class="sym">{
</span>         notNull<span class="sym">(</span>serverSocket<span class="sym">).</span>close<span class="sym">;
      }
   }
}</span>
