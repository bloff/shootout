<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

   Transliterated from the Java solution

To compile:   
   nicec --sourcepath=.. -d=. -a echo.jar echo

To run:
   java -jar echo.jar 100000
*/</FONT></I>


<B><FONT COLOR="#A020F0">import</FONT></B> java.io.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.net.*;

<B><FONT COLOR="#A020F0">import</FONT></B> ackermann; <I><FONT COLOR="#B22222">// reuse toSinglePositiveInt
</FONT></I>
<B><FONT COLOR="#A020F0">void</FONT></B> main(String[] args){
   let n = toSinglePositiveInt(args); 
   let server = <B><FONT COLOR="#A020F0">new</FONT></B> EchoServer(port: 0);
   let client = <B><FONT COLOR="#A020F0">new</FONT></B> EchoClient( 
      address: InetAddress.getLocalHost(),  
      port: server.getPort, 
      repeat: n
   );
   client.start;
}


let <B><FONT COLOR="#A020F0">int</FONT></B> BUFFER_SIZE = 1024;

<B><FONT COLOR="#A020F0">class</FONT></B> EchoServer <B><FONT COLOR="#A020F0">extends</FONT></B> Thread {
   ?ServerSocket socket = <B><FONT COLOR="#A020F0">null</FONT></B>;
   <B><FONT COLOR="#A020F0">int</FONT></B> port;
   
   {  <I><FONT COLOR="#B22222">// initializer
</FONT></I>      socket = <B><FONT COLOR="#A020F0">new</FONT></B> ServerSocket(port);
      port = notNull(socket).getLocalPort;
      <B><FONT COLOR="#A020F0">this</FONT></B>.start;
   }

   <B><FONT COLOR="#A020F0">int</FONT></B> getPort(); getPort() = port;

   run() {
      let buffer = <B><FONT COLOR="#A020F0">new</FONT></B> <B><FONT COLOR="#A020F0">byte</FONT></B>[BUFFER_SIZE];
      <B><FONT COLOR="#A020F0">try</FONT></B> {
         let socketClient = notNull(socket).accept;
         let in = socketClient.getInputStream;
         let out = socketClient.getOutputStream;

         var count = 0, length = 0;
         <B><FONT COLOR="#A020F0">while</FONT></B> ((length = in.read(buffer)) != -1) {
            out.write(buffer, 0, length);
            out.flush;
            count += length;
         }
         println(<B><FONT COLOR="#BC8F8F">&quot;server processed &quot;</FONT></B> + count + <B><FONT COLOR="#BC8F8F">&quot; bytes&quot;</FONT></B>);   
            
      } <B><FONT COLOR="#A020F0">catch</FONT></B> (Exception e) {
         e.printStackTrace;
      }
   }

}


let String GREETING = <B><FONT COLOR="#BC8F8F">&quot;Hello there sailor\n&quot;</FONT></B>;

<B><FONT COLOR="#A020F0">class</FONT></B> EchoClient <B><FONT COLOR="#A020F0">extends</FONT></B> Thread {
   InetAddress address;
   <B><FONT COLOR="#A020F0">int</FONT></B> port;
   <B><FONT COLOR="#A020F0">int</FONT></B> repeat;

   run() {
      var ?Socket serverSocket = <B><FONT COLOR="#A020F0">null</FONT></B>;
      <B><FONT COLOR="#A020F0">try</FONT></B> {
         let socket = <B><FONT COLOR="#A020F0">new</FONT></B> Socket(address, port);
         serverSocket = socket;
         
         let in = <B><FONT COLOR="#A020F0">new</FONT></B> BufferedReader(<B><FONT COLOR="#A020F0">new</FONT></B> InputStreamReader(socket.getInputStream));
         let out = socket.getOutputStream;
         let greetingBytes = GREETING.getBytes;
            <I><FONT COLOR="#B22222">// readLine will disgard '\n' so disgard it from the test string
</FONT></I>         let greeting = GREETING.trim; 
         
         var ?String received;
         <B><FONT COLOR="#A020F0">while</FONT></B> (repeat-- &gt; 0) {
            out.write(greetingBytes);
            out.flush;
            received = in.readLine;
            
            <B><FONT COLOR="#A020F0">if</FONT></B> (! received.equals(greeting))
               <B><FONT COLOR="#A020F0">throw</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> RuntimeException(
                  <B><FONT COLOR="#BC8F8F">&quot;client: \&quot;&quot;</FONT></B> + received + <B><FONT COLOR="#BC8F8F">&quot;\&quot; != \&quot;&quot;</FONT></B> + greeting  + <B><FONT COLOR="#BC8F8F">&quot;\&quot;&quot;</FONT></B>);
         }
                  
      } <B><FONT COLOR="#A020F0">catch</FONT></B> (Exception e) {
         e.printStackTrace;
      } <B><FONT COLOR="#A020F0">finally</FONT></B> {
         notNull(serverSocket).close;
      }
   }

}</pre></td></tr></table>
