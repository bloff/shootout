<span class="com">/* -*- mode: c -*-
 * $Id: except-icc.code,v 1.3 2005-03-18 03:44:13 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;setjmp.h&gt;
</span>
<span class="kwb">int</span> HI <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> LO <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span><span class="kwb">static jmp_buf</span> Hi_exception<span class="sym">;
</span><span class="kwb">static jmp_buf</span> Lo_exception<span class="sym">;

</span><span class="kwb">void</span> blowup <span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>    <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&amp;</span> <span class="num">1</span><span class="sym">) {
</span>	longjmp<span class="sym">(</span>Lo_exception<span class="sym">,</span> <span class="num">1</span><span class="sym">);
    }</span> <span class="kwa">else</span> <span class="sym">{
</span>	longjmp<span class="sym">(</span>Hi_exception<span class="sym">,</span> <span class="num">1</span><span class="sym">);
    }
}

</span><span class="kwb">void</span> lo_function <span class="sym">(</span><span class="kwc">volatile</span> <span class="kwb">int</span> n<span class="sym">) {
</span>    <span class="kwa">if</span> <span class="sym">(</span>setjmp<span class="sym">(</span>Lo_exception<span class="sym">) !=</span> <span class="num">0</span><span class="sym">) {
</span>	LO<span class="sym">++;
    }</span> <span class="kwa">else</span> <span class="sym">{
</span>	blowup<span class="sym">(</span>n<span class="sym">);
    }
}

</span><span class="kwb">void</span> hi_function <span class="sym">(</span><span class="kwc">volatile</span> <span class="kwb">int</span> n<span class="sym">) {
</span>    <span class="kwa">if</span> <span class="sym">(</span>setjmp<span class="sym">(</span>Hi_exception<span class="sym">) !=</span> <span class="num">0</span><span class="sym">) {
</span>	HI<span class="sym">++;
    }</span> <span class="kwa">else</span> <span class="sym">{
</span>	lo_function<span class="sym">(</span>n<span class="sym">);
    }
}

</span><span class="kwb">void</span> some_function <span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>    hi_function<span class="sym">(</span>n<span class="sym">);
}

</span><span class="kwb">int
</span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> <span class="kwc">volatile</span> N <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);

</span>    <span class="kwa">while</span> <span class="sym">(</span>N<span class="sym">) {
</span>	some_function<span class="sym">(</span>N<span class="sym">--);
    }
</span>    printf<span class="sym">(</span><span class="str">&quot;Exceptions: HI=%d / LO=%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> HI<span class="sym">,</span> LO<span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}</span>
