BUILD COMMANDS FOR: nsieve.cmucl-2.cmucl

Wed Nov  2 02:26:57 PST 2005

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "nsieve.cmucl-2.cmucl_compile")'
### START nsieve.cmucl-2.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "nsieve.cmucl-2.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END nsieve.cmucl-2.cmucl_compile

; Loading #P"/opt/shootout/shootout/bench/nsieve/tmp/nsieve.cmucl-2.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 02 NOV 05 02:26:57 am.
; Compiling: /opt/shootout/shootout/bench/nsieve/tmp/nsieve.cmucl-2.cmucl 02 NOV 05 02:26:57 am

; Converted NSIEVE.
; Converted MAIN.
; Compiling DEFUN MAIN: 

; 
; 
; File: /opt/shootout/shootout/bench/nsieve/tmp/nsieve.cmucl-2.cmucl

; In: DEFUN MAIN

;   (LOOP FOR K FROM N...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (< K #:G7)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ 
; --> SETQ 1- 
; ==>
;   (- K 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (< K #:G7)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
;   (* 10000 (EXPT 2 K))
; ==>
;   (* C::Y 10000)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a (OR (DOUBLE-FLOAT 0)
;                                 (RATIONAL 0)
;                                 (SINGLE-FLOAT 0.0)), not a FLOAT.
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The first argument is a (OR (DOUBLE-FLOAT 0)
;                                 (RATIONAL 0)
;                                 (SINGLE-FLOAT 0.0)), not a INTEGER.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a (OR (DOUBLE-FLOAT 0)
;                                 (RATIONAL 0)
;                                 (SINGLE-FLOAT 0.0)), not a FLOAT.
; 
; Note: Unable to convert x*2^k to shift due to type uncertainty:
;     The first argument is a (OR (DOUBLE-FLOAT 0)
;                                 (RATIONAL 0)
;                                 (SINGLE-FLOAT 0.0)), not a INTEGER.
; 
;   (- N 2)
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The result is a INTEGER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     The result is a INTEGER, not a FIXNUM.
;     etc.
; 
;   (LOOP FOR K FROM N...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (< K #:G7)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     The second argument is a INTEGER, not a FIXNUM.
; 
;   (* 10000 (EXPT 2 K))
; ==>
;   (* C::Y 10000)
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 3) because:
;     The first argument is a (OR (DOUBLE-FLOAT 0)
;                                 (RATIONAL 0)
;                                 (SINGLE-FLOAT 0.0)), not a FIXNUM.
;     The result is a (OR (MEMBER 0.0d0)
;                         (DOUBLE-FLOAT #)
;                         (SINGLE-FLOAT 0.0)
;                         (RATIONAL 0)), not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a (OR (DOUBLE-FLOAT 0)
;                                 (RATIONAL 0)
;                                 (SINGLE-FLOAT 0.0)), not a FIXNUM.
;     The result is a (OR (MEMBER 0.0d0)
;                         (DOUBLE-FLOAT #)
;                         (SINGLE-FLOAT 0.0)
;                         (RATIONAL 0)), not a FIXNUM.
;     etc.
; 
;   (LOOP FOR K FROM N...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ 
; --> SETQ 1- 
; ==>
;   (- K 1)
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (< K #:G7)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     The second argument is a INTEGER, not a FIXNUM.
; 
;   (* 10000 (EXPT 2 K))
; ==>
;   (* C::Y 10000)
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 3) because:
;     The first argument is a (OR (DOUBLE-FLOAT 0)
;                                 (RATIONAL 0)
;                                 (SINGLE-FLOAT 0.0)), not a FIXNUM.
;     The result is a (OR (MEMBER 0.0d0)
;                         (DOUBLE-FLOAT #)
;                         (SINGLE-FLOAT 0.0)
;                         (RATIONAL 0)), not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a (OR (DOUBLE-FLOAT 0)
;                                 (RATIONAL 0)
;                                 (SINGLE-FLOAT 0.0)), not a FIXNUM.
;     The result is a (OR (MEMBER 0.0d0)
;                         (DOUBLE-FLOAT #)
;                         (SINGLE-FLOAT 0.0)
;                         (RATIONAL 0)), not a FIXNUM.
;     etc.
; 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   15 notes


; nsieve.cmucl-2.x86f written.
; Compilation finished in 0:00:00.
### START nsieve.cmucl-2.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "nsieve.cmucl-2.x86f" :verbose nil :print nil)
(main) (quit)
### END nsieve.cmucl-2.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "nsieve.cmucl-2.cmucl_run" :verbose nil :print nil)' %A


PROGRAM OUTPUT
==============
Primes up to  5120000   356244
Primes up to  2560000   187134
Primes up to  1280000    98610
