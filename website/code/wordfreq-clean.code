<span class="kwa">module</span> wordfreq

<span class="kwa">import</span> StdEnv<span class="sym">,</span>StdStrictLists

Start <span class="sym">:: *</span>World <span class="sym">-&gt; (!</span><span class="kwb">Bool</span><span class="sym">,!*</span>World<span class="sym">)
</span>Start world
    # <span class="sym">(</span>console<span class="sym">,</span>world<span class="sym">) =</span> stdio world
    # ht <span class="sym">=</span> htNew <span class="num">2048
</span>    # <span class="sym">(</span>ht<span class="sym">,</span>console<span class="sym">) =</span> read_words_in_file0 console ht
    # items <span class="sym">=</span> sort <span class="sym">(</span>htToList ht<span class="sym">)
</span>    # console <span class="sym">=</span> write_items items console
    <span class="sym">=</span> fclose console world


read_words_in_file0 <span class="sym">:: *</span>File <span class="sym">!(</span>HashTable <span class="kwb">Int</span><span class="sym">) -&gt; (!</span>HashTable <span class="kwb">Int</span><span class="sym">,!*</span>File<span class="sym">)
</span>read_words_in_file0 f ht
    # <span class="sym">(</span>s<span class="sym">,</span>f<span class="sym">) =</span> freads f <span class="num">4096
</span>    <span class="sym">|</span> size s<span class="sym">==</span><span class="num">0
</span>        <span class="sym">= (</span>ht<span class="sym">,</span>f<span class="sym">)
</span>    # <span class="sym">(</span>ia<span class="sym">,</span>s<span class="sym">) =</span> skip_to_alpha_char <span class="num">0</span> s
    <span class="sym">=</span> read_words_in_string1 ia s f ht

read_words_in_string0 <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">*</span>{#<span class="kwb">Char</span>} <span class="sym">*</span>File <span class="sym">!(</span>HashTable <span class="kwb">Int</span><span class="sym">) -&gt; (!</span>HashTable <span class="kwb">Int</span><span class="sym">,!*</span>File<span class="sym">)
</span>read_words_in_string0 i s f ht
    # <span class="sym">(</span>ia<span class="sym">,</span>s<span class="sym">) =</span> skip_to_alpha_char i s
    <span class="sym">=</span> read_words_in_string1 ia s f ht

read_words_in_string1 <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">*</span>{#<span class="kwb">Char</span>} <span class="sym">*</span>File <span class="sym">!(</span>HashTable <span class="kwb">Int</span><span class="sym">) -&gt; (!</span>HashTable <span class="kwb">Int</span><span class="sym">,!*</span>File<span class="sym">)
</span>read_words_in_string1 ia s f ht
    # <span class="sym">(</span>ina<span class="sym">,</span>s<span class="sym">) =</span> skip_alpha_chars_and_convert_to_lower_case ia s
    <span class="sym">|</span> ia<span class="sym">==</span>ina
        <span class="sym">=</span> read_words_in_file0 f ht
    #<span class="sym">!</span> word <span class="sym">=</span> s <span class="sym">% (</span>ia<span class="sym">,</span>ina<span class="num">-1</span><span class="sym">)
    |</span> ina<span class="sym">&lt;</span><span class="num">4096
</span>        # ht <span class="sym">=</span> htUpdate <span class="sym">(</span>\ item<span class="sym">=:</span>{val} <span class="sym">=</span> {item <span class="sym">&amp;</span> val<span class="sym">=</span>val<span class="sym">+</span><span class="num">1</span>}<span class="sym">)</span> word <span class="num">0</span> ht
        <span class="sym">=</span> read_words_in_string0 ina s f ht
        <span class="sym">=</span> read_words_in_file1 word f ht

read_words_in_file1 <span class="sym">::</span> {#<span class="kwb">Char</span>} <span class="sym">*</span>File <span class="sym">!(</span>HashTable <span class="kwb">Int</span><span class="sym">) -&gt; (!</span>HashTable <span class="kwb">Int</span><span class="sym">,!*</span>File<span class="sym">)
</span>read_words_in_file1 word f ht
    # <span class="sym">(</span>s<span class="sym">,</span>f<span class="sym">) =</span> freads f <span class="num">4096
</span>    <span class="sym">|</span> size s<span class="sym">==</span><span class="num">0
</span>        <span class="sym">= (</span>htUpdate <span class="sym">(</span>\ item<span class="sym">=:</span>{val} <span class="sym">=</span> {item <span class="sym">&amp;</span> val<span class="sym">=</span>val<span class="sym">+</span><span class="num">1</span>}<span class="sym">)</span> word <span class="num">0</span> ht<span class="sym">,</span>f<span class="sym">)
</span>    # <span class="sym">(</span>ia<span class="sym">,</span>s<span class="sym">) =</span> skip_to_alpha_char <span class="num">0</span> s
    <span class="sym">|</span> ia<span class="sym">&lt;&gt;</span><span class="num">0
</span>        # ht <span class="sym">=</span> htUpdate <span class="sym">(</span>\ item<span class="sym">=:</span>{val} <span class="sym">=</span> {item <span class="sym">&amp;</span> val<span class="sym">=</span>val<span class="sym">+</span><span class="num">1</span>}<span class="sym">)</span> word <span class="num">0</span> ht
        <span class="sym">=</span> read_words_in_string1 ia s f ht
    # <span class="sym">(</span>ina<span class="sym">,</span>s<span class="sym">) =</span> skip_alpha_chars_and_convert_to_lower_case ia s
    <span class="sym">|</span> ina<span class="sym">&lt;</span><span class="num">4096
</span>        #<span class="sym">!</span> rest_of_word <span class="sym">=</span> s <span class="sym">% (</span><span class="num">0</span><span class="sym">,</span>ina<span class="num">-1</span><span class="sym">)
</span>        # ht <span class="sym">=</span> htUpdate <span class="sym">(</span>\ item<span class="sym">=:</span>{val} <span class="sym">=</span> {item <span class="sym">&amp;</span> val<span class="sym">=</span>val<span class="sym">+</span><span class="num">1</span>}<span class="sym">)(</span>word<span class="sym">+++</span>rest_of_word<span class="sym">)</span> <span class="num">0</span> ht
        <span class="sym">=</span> read_words_in_string0 ina s f ht
        <span class="sym">=</span> read_words_in_file1 <span class="sym">(</span>word<span class="sym">+++</span>s<span class="sym">)</span> f ht

skip_alpha_chars_and_convert_to_lower_case <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>{#<span class="kwb">Char</span>} <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>{#<span class="kwb">Char</span>}<span class="sym">)
</span>skip_alpha_chars_and_convert_to_lower_case i s
    <span class="sym">|</span> i<span class="sym">&lt;</span>size s
        #<span class="sym">!</span> c<span class="sym">=</span>s.<span class="sym">[</span>i<span class="sym">]
        |</span> c<span class="sym">&gt;=</span><span class="str">'a'</span> <span class="sym">&amp;&amp;</span> c<span class="sym">&lt;=</span><span class="str">'z'</span>
            <span class="sym">=</span> skip_alpha_chars_and_convert_to_lower_case <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> s
        <span class="sym">|</span> c<span class="sym">&gt;=</span><span class="str">'A'</span> <span class="sym">&amp;&amp;</span> c<span class="sym">&lt;=</span><span class="str">'Z'</span>
            <span class="sym">=</span> skip_alpha_chars_and_convert_to_lower_case <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> {s <span class="sym">&amp; [</span>i<span class="sym">]=</span>toChar <span class="sym">(</span>toInt c<span class="sym">+</span><span class="num">32</span><span class="sym">)</span>}
            <span class="sym">= (</span>i<span class="sym">,</span>s<span class="sym">)
        = (</span>i<span class="sym">,</span>s<span class="sym">)

</span>skip_to_alpha_char <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>{#<span class="kwb">Char</span>} <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>{#<span class="kwb">Char</span>}<span class="sym">)
</span>skip_to_alpha_char i s
    <span class="sym">|</span> i<span class="sym">&lt;</span>size s
        #<span class="sym">!</span> c<span class="sym">=</span>s.<span class="sym">[</span>i<span class="sym">]
        |</span> c<span class="sym">&lt;</span><span class="str">'A'</span> <span class="sym">||</span> c<span class="sym">&gt;</span><span class="str">'z'</span> <span class="sym">|| (</span> c<span class="sym">&gt;</span><span class="str">'Z'</span> <span class="sym">&amp;&amp;</span> c<span class="sym">&lt;</span><span class="str">'a'</span><span class="sym">)
            =</span> skip_to_alpha_char <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> s
            <span class="sym">= (</span>i<span class="sym">,</span>s<span class="sym">)
        = (</span>i<span class="sym">,</span>s<span class="sym">)

</span><span class="kwa">instance</span> <span class="sym">&lt; (</span>Item <span class="kwb">Int</span><span class="sym">)</span> <span class="kwa">where
</span>        <span class="sym">(&lt;)</span> {val<span class="sym">=</span>v1<span class="sym">,</span>key<span class="sym">=</span>k1} {val<span class="sym">=</span>v2<span class="sym">,</span>key<span class="sym">=</span>k2}
            <span class="sym">|</span> v1<span class="sym">&lt;&gt;</span>v2
                <span class="sym">=</span> v1<span class="sym">&gt;</span>v2
                <span class="sym">=</span> k1<span class="sym">&gt;</span>k2

write_items <span class="sym">[</span>{key<span class="sym">,</span>val}<span class="sym">:</span>items<span class="sym">]</span> fo
    # s <span class="sym">=</span> toString val
    # fo <span class="sym">=</span> if <span class="sym">(</span>size s<span class="sym">&lt;</span><span class="num">7</span><span class="sym">) (</span>fwrites <span class="sym">(</span>createArray <span class="sym">(</span><span class="num">7</span><span class="sym">-</span>size s<span class="sym">)</span> <span class="str">' '</span><span class="sym">)</span> fo<span class="sym">)</span> fo
    <span class="sym">=</span> write_items items <span class="sym">(</span>fo <span class="sym">&lt;&lt;&lt;</span> s <span class="sym">&lt;&lt;&lt;</span> <span class="str">' '</span> <span class="sym">&lt;&lt;&lt;</span> key <span class="sym">&lt;&lt;&lt;</span> <span class="str">'\n'</span><span class="sym">)
</span>write_items <span class="sym">[]</span> fo
    <span class="sym">=</span> fo


<span class="sym">//</span> SimpleHash implementation would normally be imported

  primes <span class="sym">=: [
</span>   <span class="num">53</span><span class="sym">,</span>         <span class="num">97</span><span class="sym">,</span>         <span class="num">193</span><span class="sym">,</span>       <span class="num">389</span><span class="sym">,</span>       <span class="num">769</span><span class="sym">,
</span>   <span class="num">1543</span><span class="sym">,</span>       <span class="num">3079</span><span class="sym">,</span>       <span class="num">6151</span><span class="sym">,</span>      <span class="num">12289</span><span class="sym">,</span>     <span class="num">24593</span><span class="sym">,
</span>   <span class="num">49157</span><span class="sym">,</span>      <span class="num">98317</span><span class="sym">,</span>      <span class="num">196613</span><span class="sym">,</span>    <span class="num">93241</span><span class="sym">,</span>     <span class="num">786433</span><span class="sym">,
</span>   <span class="num">1572869</span><span class="sym">,</span>    <span class="num">3145739</span><span class="sym">,</span>    <span class="num">6291469</span><span class="sym">,</span>   <span class="num">12582917</span><span class="sym">,</span>  <span class="num">25165843</span><span class="sym">,
</span>   <span class="num">50331653</span><span class="sym">,</span>   <span class="num">100663319</span><span class="sym">,</span>  <span class="num">201326611</span><span class="sym">,</span> <span class="num">402653189</span><span class="sym">,</span> <span class="num">805306457
</span>   <span class="sym">]

::</span> Item a <span class="sym">=</span> { key<span class="sym">::!</span>String
            <span class="sym">,</span> val<span class="sym">::!</span>a
            }

<span class="sym">::</span> SHashTable a <span class="sym">=</span> { nBuckets<span class="sym">::!</span><span class="kwb">Int
</span>                 <span class="sym">,</span> table<span class="sym">::!</span>.{<span class="sym">!</span>.<span class="sym">[!</span>Item a<span class="sym">!]</span>}
                 }

<span class="sym">:: *</span>HashTable a <span class="sym">:==</span> SHashTable a

hash <span class="sym">:: !</span>{#.<span class="kwb">Char</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int
</span>hash key nBuckets
   <span class="sym">= (</span>abs <span class="sym">(</span>loop key <span class="sym">(</span>size key <span class="num">- 1</span><span class="sym">)</span> <span class="num">0</span><span class="sym">))</span> rem nBuckets
     <span class="kwa">where
</span>   loop <span class="sym">:: !</span>{#<span class="kwb">Char</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int
</span>   loop k n h
      <span class="sym">|</span> n<span class="sym">&gt;=</span><span class="num">0
</span>          <span class="sym">=</span> loop k <span class="sym">(</span>n<span class="num">-1</span><span class="sym">) (</span><span class="num">5</span><span class="sym">*</span>h <span class="sym">+</span> toInt k.<span class="sym">[</span>n<span class="sym">])
                 =</span> h

htNew n <span class="sym">=</span> { nBuckets <span class="sym">=</span> nprime
        <span class="sym">,</span> table <span class="sym">=</span> {<span class="sym">[|]</span> \\ i <span class="sym">&lt;- [</span><span class="num">0</span>..nprime<span class="num">-1</span><span class="sym">]</span>}
        }
   <span class="kwa">where
   </span>   nprime <span class="sym">=</span> hd <span class="sym">(</span>dropWhile <span class="sym">(</span>\x <span class="sym">=</span> x <span class="sym">&lt;</span> n<span class="sym">)</span> primes<span class="sym">)
        
</span>htUpdate <span class="sym">:: ((</span>Item a<span class="sym">) -&gt;</span> Item a<span class="sym">) !</span>{#.<span class="kwb">Char</span>} <span class="sym">!</span>a <span class="sym">!*(</span>HashTable a<span class="sym">) -&gt; *</span>HashTable a
htUpdate f k v ht<span class="sym">=:</span>{table<span class="sym">,</span>nBuckets}
    #<span class="sym">!</span> i <span class="sym">=</span> hash k nBuckets
    #<span class="sym">! (</span>b<span class="sym">,</span>table<span class="sym">) =</span> replace table i <span class="sym">[|]
</span>    # b <span class="sym">=</span> updateItem b k v f
    <span class="sym">=</span> {ht <span class="sym">&amp;</span> table <span class="sym">=</span> {table <span class="sym">&amp; [</span>i<span class="sym">] =</span> b}}
<span class="kwa">where
</span>    updateItem <span class="sym">:: !*[!(</span>Item a<span class="sym">)!] !</span>{#.<span class="kwb">Char</span>} a <span class="sym">((</span>Item a<span class="sym">) -&gt;</span> Item a<span class="sym">) -&gt; *[!(</span>Item a<span class="sym">)!]
</span>    updateItem <span class="sym">[|</span>item<span class="sym">:</span>ls<span class="sym">]</span> k v f
       <span class="sym">|</span> item.key <span class="sym">&lt;&gt;</span> k
               <span class="sym">= [|</span>item <span class="sym">:</span> updateItem ls k v f<span class="sym">]
               = [|</span>f item<span class="sym">:</span>ls<span class="sym">]
</span>    updateItem <span class="sym">[|]</span> k v f
        <span class="sym">= [|</span>f {key<span class="sym">=</span>k<span class="sym">,</span>val<span class="sym">=</span>v}<span class="sym">]

</span>htToList <span class="sym">:: !(</span>HashTable a<span class="sym">) -&gt; [</span>Item a<span class="sym">]
</span>htToList ht<span class="sym">=:</span>{nBuckets<span class="sym">,</span>table}
    <span class="sym">=</span> ht_to_list <span class="num">0</span> nBuckets table <span class="sym">[]
</span>    <span class="kwa">where
</span>        ht_to_list i n table l
            <span class="sym">|</span> i<span class="sym">&lt;</span>n
                # <span class="sym">(</span>list<span class="sym">,</span>table<span class="sym">) =</span> table<span class="sym">![</span>i<span class="sym">]
</span>                #<span class="sym">!</span> l<span class="sym">=</span>ht_buckets_to_list list l
                <span class="sym">=</span> ht_to_list <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> n table l
                <span class="sym">=</span> l

        ht_buckets_to_list <span class="sym">:: *[!</span>Item a<span class="sym">!] [</span>Item a<span class="sym">] -&gt; [</span>Item a<span class="sym">]
</span>        ht_buckets_to_list <span class="sym">[|</span>i<span class="sym">:</span>is<span class="sym">]</span> l
            <span class="sym">=</span> ht_buckets_to_list is <span class="sym">[</span>i<span class="sym">:</span>l<span class="sym">]
</span>        ht_buckets_to_list <span class="sym">[|]</span> l
            <span class="sym">=</span> l
