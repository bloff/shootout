#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile<span class="sym">-</span>oops \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>oop goops<span class="sym">))

(</span>define<span class="sym">-</span>method <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>b <span class="sym">&lt;</span>boolean<span class="sym">&gt;))
  (</span>display <span class="sym">(</span><span class="kwa">if</span> b <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)))


(</span>define<span class="sym">-</span>class <span class="sym">&lt;</span>toggle<span class="sym">&gt; ()
  (</span>state #<span class="sym">:</span>getter value? #<span class="sym">:</span>init<span class="sym">-</span>keyword #<span class="sym">:</span>state<span class="sym">))

(</span>define<span class="sym">-</span>class <span class="sym">&lt;</span><span class="kwa">nth</span><span class="sym">-</span>toggle<span class="sym">&gt; (&lt;</span>toggle<span class="sym">&gt;)
  (</span>count<span class="sym">-</span><span class="kwa">max</span> #<span class="sym">:</span>init<span class="sym">-</span>keyword #<span class="sym">:</span>count<span class="sym">-</span><span class="kwa">max</span><span class="sym">)
  (</span>counter #<span class="sym">:</span>init<span class="sym">-</span>value <span class="num">0</span><span class="sym">))


(</span>define<span class="sym">-</span>method <span class="sym">(</span>value? <span class="sym">(</span>t <span class="sym">&lt;</span>toggle<span class="sym">&gt;)) (</span>slot<span class="sym">-</span>ref t <span class="str">'state))

(define-method (activate! (t &lt;toggle&gt;))
  (slot-set! t '</span>state <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>slot<span class="sym">-</span>ref t <span class="str">'state)))
  t)

(define-method (activate! (n-t &lt;nth-toggle&gt;))
  (let ((counter (+ 1 (slot-ref n-t '</span>counter<span class="sym">))))
    (</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="str">'counter counter)
    (if (&gt;= counter (slot-ref n-t '</span>count<span class="sym">-</span><span class="kwa">max</span><span class="sym">))
	(</span>begin <span class="sym">(</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="str">'state (not (slot-ref n-t '</span>state<span class="sym">)))
	       (</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="str">'counter 0)))
    n-t))


(define-method (main (args &lt;list&gt;))
  (let ((n (or (and (= (length args) 2) (string-&gt;number (cadr args))) 1)))
    (let ((tog (make &lt;toggle&gt; #:state #t)))
      (do ((i 0 (+ i 1))) ((= i 5))
	(print-bool (value? (activate! tog)))))
    (do ((i 0 (+ i 1))) ((= i n))
      (make &lt;toggle&gt; #:state #t))
    (newline)
    (let ((ntog (make &lt;nth-toggle&gt; #:state #t #:count-max 3)))
      (do ((i 0 (+ i 1))) ((= i 8))
	(print-bool (value? (activate! ntog)))))
    (do ((i 0 (+ i 1))) ((= i n))
      (make &lt;nth-toggle&gt; #:state #t #:count-max 3))))</span>
