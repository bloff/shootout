<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile<span class="sym">-</span>oops \
<span class="line">    2 </span><span class="sym">-</span>e main <span class="sym">-</span>s
<span class="line">    3 </span><span class="sym">!</span>#
<span class="line">    4 </span>
<span class="line">    5 </span><span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>oop goops<span class="sym">))
</span><span class="line">    6 </span><span class="sym">
</span><span class="line">    7 </span><span class="sym">(</span>define<span class="sym">-</span>method <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>b <span class="sym">&lt;</span>boolean<span class="sym">&gt;))
</span><span class="line">    8 </span><span class="sym">  (</span>display <span class="sym">(</span><span class="kwa">if</span> b <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)))
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym">(</span>define<span class="sym">-</span>class <span class="sym">&lt;</span>toggle<span class="sym">&gt; ()
</span><span class="line">   12 </span><span class="sym">  (</span>state #<span class="sym">:</span>getter value? #<span class="sym">:</span>init<span class="sym">-</span>keyword #<span class="sym">:</span>state<span class="sym">))
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym">(</span>define<span class="sym">-</span>class <span class="sym">&lt;</span><span class="kwa">nth</span><span class="sym">-</span>toggle<span class="sym">&gt; (&lt;</span>toggle<span class="sym">&gt;)
</span><span class="line">   15 </span><span class="sym">  (</span>count<span class="sym">-</span><span class="kwa">max</span> #<span class="sym">:</span>init<span class="sym">-</span>keyword #<span class="sym">:</span>count<span class="sym">-</span><span class="kwa">max</span><span class="sym">)
</span><span class="line">   16 </span><span class="sym">  (</span>counter #<span class="sym">:</span>init<span class="sym">-</span>value <span class="num">0</span><span class="sym">))
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym">
</span><span class="line">   19 </span><span class="sym">(</span>define<span class="sym">-</span>method <span class="sym">(</span>value? <span class="sym">(</span>t <span class="sym">&lt;</span>toggle<span class="sym">&gt;)) (</span>slot<span class="sym">-</span>ref t <span class="str">'state))
</span><span class="line">   20 </span><span class="str">
</span><span class="line">   21 </span><span class="str">(define-method (activate! (t &lt;toggle&gt;))
</span><span class="line">   22 </span><span class="str">  (slot-set! t '</span>state <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>slot<span class="sym">-</span>ref t <span class="str">'state)))
</span><span class="line">   23 </span><span class="str">  t)
</span><span class="line">   24 </span><span class="str">
</span><span class="line">   25 </span><span class="str">(define-method (activate! (n-t &lt;nth-toggle&gt;))
</span><span class="line">   26 </span><span class="str">  (let ((counter (+ 1 (slot-ref n-t '</span>counter<span class="sym">))))
</span><span class="line">   27 </span><span class="sym">    (</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="str">'counter counter)
</span><span class="line">   28 </span><span class="str">    (if (&gt;= counter (slot-ref n-t '</span>count<span class="sym">-</span><span class="kwa">max</span><span class="sym">))
</span><span class="line">   29 </span><span class="sym">        (</span>begin <span class="sym">(</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="str">'state (not (slot-ref n-t '</span>state<span class="sym">)))
</span><span class="line">   30 </span><span class="sym">               (</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="str">'counter 0)))
</span><span class="line">   31 </span><span class="str">    n-t))
</span><span class="line">   32 </span><span class="str">
</span><span class="line">   33 </span><span class="str">
</span><span class="line">   34 </span><span class="str">(define-method (main (args &lt;list&gt;))
</span><span class="line">   35 </span><span class="str">  (let ((n (or (and (= (length args) 2) (string-&gt;number (cadr args))) 1)))
</span><span class="line">   36 </span><span class="str">    (let ((tog (make &lt;toggle&gt; #:state #t)))
</span><span class="line">   37 </span><span class="str">      (do ((i 0 (+ i 1))) ((= i 5))
</span><span class="line">   38 </span><span class="str">        (print-bool (value? (activate! tog)))))
</span><span class="line">   39 </span><span class="str">    (do ((i 0 (+ i 1))) ((= i n))
</span><span class="line">   40 </span><span class="str">      (make &lt;toggle&gt; #:state #t))
</span><span class="line">   41 </span><span class="str">    (newline)
</span><span class="line">   42 </span><span class="str">    (let ((ntog (make &lt;nth-toggle&gt; #:state #t #:count-max 3)))
</span><span class="line">   43 </span><span class="str">      (do ((i 0 (+ i 1))) ((= i 8))
</span><span class="line">   44 </span><span class="str">        (print-bool (value? (activate! ntog)))))
</span><span class="line">   45 </span><span class="str">    (do ((i 0 (+ i 1))) ((= i n))
</span><span class="line">   46 </span><span class="str">      (make &lt;nth-toggle&gt; #:state #t #:count-max 3))))</span>
