<span class="str">&quot;* The Computer Language Shootout</span>
<span class="str"> http://shootout.alioth.debian.org/</span>
<span class="str"> contributed by Isaac Gouy</span>
<span class="str"> modified by Paolo Bonzini *&quot;</span>


<span class="sym">|</span> s size1 size2 <span class="sym">|</span>
s <span class="sym">:= (</span>FileStream stdin bufferSize<span class="sym">:</span> <span class="num">4096</span><span class="sym">)</span> contents.
size1 <span class="sym">:=</span> s size.

<span class="str">&quot;* remove FASTA sequence descriptions and new-lines *&quot;</span>
s <span class="sym">:=</span> s copyReplacingAllRegex<span class="sym">:</span> <span class="str">'&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">'</span> with<span class="sym">:</span> <span class="str">''</span>.
size2 <span class="sym">:=</span> s size.

<span class="str">&quot;* regex match *&quot;</span>
<span class="sym">(</span>OrderedCollection new
   add<span class="sym">:</span> <span class="str">'agggtaaa|tttaccct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'[cgt]gggtaaa|tttaccc[acg]'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'a[act]ggtaaa|tttacc[agt]t'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'ag[act]gtaaa|tttac[agt]ct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'agg[act]taaa|ttta[agt]cct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'aggg[acg]aaa|ttt[cgt]ccct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'agggt[cgt]aa|tt[acg]accct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'agggta[cgt]a|t[acg]taccct'</span><span class="sym">;</span>
   add<span class="sym">:</span> <span class="str">'agggtaa[cgt]|[acg]ttaccct'</span><span class="sym">;</span> yourself<span class="sym">)</span>

   <span class="kwa">do</span><span class="sym">: [:</span>each<span class="sym">| (</span>each<span class="sym">,</span> <span class="str">' '</span><span class="sym">, (</span>s occurrencesOfRegex<span class="sym">:</span> each<span class="sym">)</span> printString<span class="sym">)</span> displayNl<span class="sym">]</span>.


<span class="str">&quot;* regex substitution *&quot;</span>
<span class="sym">(</span>OrderedCollection new
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'B'</span> value<span class="sym">:</span> <span class="str">'(c|g|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'D'</span> value<span class="sym">:</span> <span class="str">'(a|g|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'H'</span> value<span class="sym">:</span> <span class="str">'(a|c|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'K'</span> value<span class="sym">:</span> <span class="str">'(g|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'M'</span> value<span class="sym">:</span> <span class="str">'(a|c)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'N'</span> value<span class="sym">:</span> <span class="str">'(a|c|g|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'R'</span> value<span class="sym">:</span> <span class="str">'(a|g)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'S'</span> value<span class="sym">:</span> <span class="str">'(c|g)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'V'</span> value<span class="sym">:</span> <span class="str">'(a|c|g)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'W'</span> value<span class="sym">:</span> <span class="str">'(a|t)'</span><span class="sym">);</span>
   add<span class="sym">: (</span>Association key<span class="sym">:</span> <span class="str">'Y'</span> value<span class="sym">:</span> <span class="str">'(c|t)'</span><span class="sym">);</span> yourself<span class="sym">)</span>

   <span class="kwa">do</span><span class="sym">: [:</span>each<span class="sym">|</span> s <span class="sym">:=</span> s copyReplacingAllRegex<span class="sym">:</span> each key with<span class="sym">:</span> each value<span class="sym">]</span>.


<span class="str">''</span> displayNl. size1 displayNl. size2 displayNl. s size displayNl <span class="sym">!</span>
