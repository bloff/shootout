<span class="slc">! The Great Computer Language Shootout
</span><span class="slc">! http://shootout.alioth.debian.org/
</span><span class="slc">!
</span><span class="slc">! contributed by Simon Geard, 27/02/2005
</span><span class="slc">!
</span><span class="slc">! ifort count-words.f90 -O3 -static-libcxa -o count-words
</span><span class="slc">!
</span><span class="slc">!
</span>program wc
  implicit none
  integer<span class="sym">,</span> parameter <span class="sym">::</span> rsize <span class="sym">=</span> <span class="num">64

</span>  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> argv
  character<span class="sym">(</span>len<span class="sym">=</span>rsize<span class="sym">),</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> line     <span class="slc">! A line of text
</span>  character<span class="sym">(</span>len<span class="sym">=</span>rsize<span class="sym">),</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> work
  character<span class="sym">(</span>len<span class="sym">=</span>rsize<span class="sym">)                            ::</span> str_blk  <span class="slc">! A block of chars read from the line
</span>  integer                                         <span class="sym">::</span> bline    <span class="slc">! The number of rsize blocks used in a line of chars
</span>
  integer <span class="sym">::</span> nlines <span class="sym">=</span> <span class="num">0</span> <span class="slc">! Line counter
</span>  integer <span class="sym">::</span> nwords <span class="sym">=</span> <span class="num">0</span> <span class="slc">! Word counter
</span>  integer <span class="sym">::</span> nchars <span class="sym">=</span> <span class="num">0</span> <span class="slc">! Char counter
</span>  integer <span class="sym">::</span> i<span class="sym">,</span> nread

  <span class="slc">! Read and count
</span>  allocate<span class="sym">(</span>line<span class="sym">(</span><span class="num">100</span><span class="sym">))</span> <span class="slc">! Allocates 100 x rsize characters for a line
</span>  readFile<span class="sym">:</span> do
     bline <span class="sym">=</span> <span class="num">0
</span>     readLine<span class="sym">:</span> do
        bline <span class="sym">=</span> bline<span class="sym">+</span><span class="num">1
</span>        read<span class="sym">(</span><span class="num">5</span><span class="sym">,</span>fmt<span class="sym">=</span><span class="str">'(a)'</span><span class="sym">,</span>end<span class="sym">=</span><span class="num">100</span><span class="sym">,</span>eor<span class="sym">=</span><span class="num">10</span><span class="sym">,</span>size<span class="sym">=</span>nread<span class="sym">,</span>advance<span class="sym">=</span><span class="str">'no'</span><span class="sym">)</span> str_blk
        call expandLine
        line<span class="sym">(</span>bline<span class="sym">) =</span> str_blk<span class="sym">(</span><span class="num">1</span><span class="sym">:</span>nread<span class="sym">)
</span>        nchars <span class="sym">=</span> nchars <span class="sym">+</span> nread
     end do readLine
<span class="num">10</span>   continue
     call expandLine
     if <span class="sym">(</span>nread <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> then
        bline <span class="sym">=</span> bline <span class="num">- 1
</span>     else
        line<span class="sym">(</span>bline<span class="sym">) =</span> str_blk<span class="sym">(</span><span class="num">1</span><span class="sym">:</span>nread<span class="sym">)
</span>     end if
     nchars <span class="sym">=</span> nchars <span class="sym">+</span> nread
     if <span class="sym">(</span>bline <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> then
        nwords <span class="sym">=</span> nwords <span class="sym">+</span> numWords<span class="sym">(</span>line<span class="sym">,</span>bline<span class="sym">)
</span>     end if
     nlines <span class="sym">=</span> nlines <span class="sym">+</span> <span class="num">1
</span>  end do readFile
<span class="num">100</span> continue
  nchars <span class="sym">=</span> nchars <span class="sym">+</span> nlines <span class="slc">! Have to add the number of nl characters
</span>  write<span class="sym">(*,</span><span class="str">'(2(i0,a),i0)'</span><span class="sym">)</span> nlines<span class="sym">,</span> <span class="str">' '</span><span class="sym">,</span> nwords<span class="sym">,</span> <span class="str">' '</span><span class="sym">,</span> nchars
  stop

contains
  subroutine expandLine
    if <span class="sym">(</span>bline <span class="sym">&gt;</span> size<span class="sym">(</span>line<span class="sym">))</span> then <span class="slc">! More space needed for line
</span>       <span class="slc">! Allocate more memory
</span>       allocate<span class="sym">(</span>work<span class="sym">(</span>size<span class="sym">(</span>line<span class="sym">)))
</span>       work <span class="sym">=</span> line
       deallocate<span class="sym">(</span>line<span class="sym">)
</span>       allocate<span class="sym">(</span>line<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>size<span class="sym">(</span>work<span class="sym">)))
</span>       line <span class="sym">=</span> work
       deallocate<span class="sym">(</span>work<span class="sym">)
</span>    end if
  end subroutine expandLine

  integer function numWords<span class="sym">(</span>l_line<span class="sym">,</span> bline<span class="sym">)
</span>    character<span class="sym">(</span>len<span class="sym">=*),</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> l_line
    integer<span class="sym">,</span> parameter <span class="sym">::</span> tab <span class="sym">=</span> <span class="num">9
</span>    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> bline
    integer i<span class="sym">,</span> j
    logical <span class="sym">::</span> ingap<span class="sym">,</span> started
    character<span class="sym">(</span>len<span class="sym">=</span>rsize<span class="sym">) ::</span> line
    integer <span class="sym">::</span> ng

    ingap <span class="sym">=</span> .false.
    ng <span class="sym">=</span> <span class="num">0
</span>    started <span class="sym">=</span> .false.

    <span class="slc">! Search in the 1st block
</span>    line <span class="sym">=</span> l_line<span class="sym">(</span><span class="num">1</span><span class="sym">)
</span>    do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>len<span class="sym">(</span>line<span class="sym">)
</span>       if <span class="sym">(</span>.not. started<span class="sym">)</span> then
          started <span class="sym">= (</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">) /=</span> <span class="str">' '</span><span class="sym">)

</span>       elseif <span class="sym">(</span> .not. ingap .and. <span class="sym">(</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)</span> .eq. <span class="str">' '</span> .or. line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)</span> .eq. achar<span class="sym">(</span>tab<span class="sym">)))</span> then
          ng <span class="sym">=</span> ng <span class="sym">+</span> <span class="num">1
</span>          ingap <span class="sym">=</span> .true.

       elseif <span class="sym">(</span>ingap .and. ischar<span class="sym">(</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)))</span> then
          ingap <span class="sym">=</span> .false.

       end if
    end do
    if <span class="sym">(</span>bline <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span> then
       if <span class="sym">(</span>ingap<span class="sym">)</span> ng <span class="sym">=</span> ng <span class="num">- 1
</span>       numWords <span class="sym">=</span> ng <span class="sym">+</span> <span class="num">1
</span>       return
    end if

    <span class="slc">! Do the next n-2 blocks
</span>    do j<span class="sym">=</span><span class="num">2</span><span class="sym">,</span>bline<span class="num">-1
</span>       line <span class="sym">=</span> l_line<span class="sym">(</span>j<span class="sym">)
</span>       do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>len<span class="sym">(</span>line<span class="sym">)
</span>          if <span class="sym">(</span>.not. started<span class="sym">)</span> then
             started <span class="sym">= (</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">) /=</span> <span class="str">' '</span><span class="sym">)

</span>          elseif <span class="sym">(</span>.not. ingap .and. <span class="sym">(</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)</span> .eq. <span class="str">' '</span> .or. line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)</span> .eq. achar<span class="sym">(</span>tab<span class="sym">)))</span> then
             ng <span class="sym">=</span> ng <span class="sym">+</span> <span class="num">1
</span>             ingap <span class="sym">=</span> .true.

          elseif <span class="sym">(</span>ingap .and. ischar<span class="sym">(</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)))</span> then
             ingap <span class="sym">=</span> .false.
          end if
       end do
    end do

    <span class="slc">! Do the last block
</span>    line <span class="sym">=</span> trim<span class="sym">(</span>l_line<span class="sym">(</span>bline<span class="sym">))</span> <span class="slc">! Ignore trailing wspace here
</span>    do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>len<span class="sym">(</span>trim<span class="sym">(</span>line<span class="sym">))
</span>       if <span class="sym">(</span>.not. started<span class="sym">)</span> then
          started <span class="sym">= (</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">) /=</span> <span class="str">' '</span><span class="sym">)

</span>       elseif <span class="sym">(</span>.not. ingap .and. <span class="sym">(</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)</span> .eq. <span class="str">' '</span> .or. line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)</span> .eq. achar<span class="sym">(</span>tab<span class="sym">)))</span> then
          ng <span class="sym">=</span> ng <span class="sym">+</span> <span class="num">1
</span>          ingap <span class="sym">=</span> .true.

       else if <span class="sym">(</span>ingap .and. ischar<span class="sym">(</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)))</span> then
          ingap <span class="sym">=</span> .false.
       end if
    end do
    numWords <span class="sym">=</span> ng <span class="sym">+</span> <span class="num">1
</span>  end function numWords

  logical function ischar<span class="sym">(</span>c<span class="sym">)
</span>    character<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> c
    ischar <span class="sym">= (</span>iachar<span class="sym">(</span>c<span class="sym">) &gt;</span> <span class="num">32</span> .and. iachar<span class="sym">(</span>c<span class="sym">) &lt;</span> <span class="num">127</span><span class="sym">)
</span>  end function ischar

end program wc
