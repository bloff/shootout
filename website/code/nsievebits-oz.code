<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> System Application

<span class="kwa">define</span>
   <span class="kwa">fun</span> <span class="sym">{</span>NSieve N <span class="sym">?</span>IsPrime<span class="sym">}</span>
      Count <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
   <span class="kwa">in</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">2</span><span class="sym">..</span>N do <span class="sym">{</span>BitArray<span class="sym">.</span>set IsPrime I<span class="sym">}</span> <span class="kwa">end</span>

      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">2</span><span class="sym">..</span>N do
         <span class="kwa">if</span> <span class="sym">{</span>BitArray<span class="sym">.</span>test IsPrime I<span class="sym">}</span> <span class="kwa">then</span>
            Count <span class="sym">:= &#64;</span>Count <span class="sym">+</span> <span class="num">1</span>
            <span class="kwa">for</span> K <span class="kwa">in</span> I<span class="sym">+</span>I<span class="sym">;</span> K<span class="sym">=&lt;</span>N<span class="sym">;</span> K<span class="sym">+</span>I do <span class="sym">{</span>BitArray<span class="sym">.</span>clear IsPrime K<span class="sym">}</span> <span class="kwa">end</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>
      <span class="sym">&#64;</span>Count   <span class="slc">% {BitArray.card IsPrime} would work when N == {BitArray.high IsPrime}</span>
   <span class="kwa">end</span>


   <span class="kwa">proc</span> <span class="sym">{</span>Line N A<span class="sym">}</span>
      S <span class="sym">=</span> &quot;Primes up to &quot; N1 <span class="sym">=</span> N<span class="sym">*</span><span class="num">10000</span> <span class="kwa">in</span>
         <span class="sym">{</span>System<span class="sym">.</span>showInfo S <span class="sym"># {</span>Pad N1 <span class="num">8</span><span class="sym">} #</span> &quot; &quot; <span class="sym"># {</span>Pad <span class="sym">{</span>NSieve N1 A<span class="sym">}</span> <span class="num">8</span><span class="sym">} }</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Pad I W<span class="sym">}</span>
      S <span class="sym">= {</span>NewCell <span class="sym">{</span>IntToString I<span class="sym">}}</span>
      L <span class="sym">=</span> W <span class="sym">- {</span>Length <span class="sym">&#64;</span>S<span class="sym">}</span>
   <span class="kwa">in</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span><span class="sym">..</span>L do S <span class="sym">:= {</span>Append &quot; &quot; <span class="sym">&#64;</span>S<span class="sym">}</span> <span class="kwa">end</span>
      <span class="sym">&#64;</span>S
   <span class="kwa">end</span>

   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String<span class="sym">.</span>toInt Arg<span class="sym">}</span>

   BooleanArray <span class="sym">= {</span>BitArray<span class="sym">.</span>new <span class="num">0</span> <span class="sym">({</span>Pow <span class="num">2</span> N  <span class="sym">}*</span><span class="num">10000</span><span class="sym">)+</span><span class="num">1</span><span class="sym">}</span>

<span class="kwa">in</span>
   <span class="sym">{</span>Line <span class="sym">{</span>Pow <span class="num">2</span> N  <span class="sym">}</span> BooleanArray<span class="sym">}</span>
   <span class="sym">{</span>Line <span class="sym">{</span>Pow <span class="num">2</span> N<span class="sym">-</span><span class="num">1</span><span class="sym">}</span> BooleanArray<span class="sym">}</span>
   <span class="sym">{</span>Line <span class="sym">{</span>Pow <span class="num">2</span> N<span class="sym">-</span><span class="num">2</span><span class="sym">}</span> BooleanArray<span class="sym">}</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
