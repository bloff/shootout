<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> System Application

<span class="kwb">define</span>
   <span class="kwb">fun</span> <span class="sym">{</span>NSieve N ?IsPrime<span class="sym">}</span>
      Count <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
   <span class="kwb">in</span>
      <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">2</span>..N <span class="kwb">do</span> <span class="sym">{</span>BitArray.set IsPrime I<span class="sym">}</span> <span class="kwb">end</span>

      <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">2</span>..N <span class="kwb">do</span>
         <span class="kwb">if</span> <span class="sym">{</span>BitArray.test IsPrime I<span class="sym">}</span> <span class="kwb">then</span>
            Count <span class="sym">:=</span> &#64;Count <span class="sym">+</span> <span class="num">1</span>
            <span class="kwb">for</span> K <span class="kwb">in</span> I<span class="sym">+</span>I<span class="sym">;</span> K<span class="sym">=&lt;</span>N<span class="sym">;</span> K<span class="sym">+</span>I <span class="kwb">do</span> <span class="sym">{</span>BitArray.clear IsPrime K<span class="sym">}</span> <span class="kwb">end</span>
         <span class="kwb">end</span>
      <span class="kwb">end</span>
      &#64;Count   <span class="slc">% {BitArray.card IsPrime} would work when N == {BitArray.high IsPrime}</span>
   <span class="kwb">end</span>


   <span class="kwb">proc</span> <span class="sym">{</span>Line N A<span class="sym">}</span>
      S <span class="sym">=</span> <span class="str">&quot;Primes up to &quot;</span> N1 <span class="sym">=</span> N<span class="sym">*</span><span class="num">10000</span> <span class="kwb">in</span>
         <span class="sym">{</span>System.showInfo S # <span class="sym">{</span>Pad N1 <span class="num">8</span><span class="sym">}</span> # <span class="str">&quot; &quot;</span> # <span class="sym">{</span>Pad <span class="sym">{</span>NSieve N1 A<span class="sym">}</span> <span class="num">8</span><span class="sym">} }</span>
   <span class="kwb">end</span>

   <span class="kwb">fun</span> <span class="sym">{</span>Pad I W<span class="sym">}</span>
      S <span class="sym">= {</span>NewCell <span class="sym">{</span>IntToString I<span class="sym">}}</span>
      L <span class="sym">=</span> W <span class="sym">- {</span>Length &#64;S<span class="sym">}</span>
   <span class="kwb">in</span>
      <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..L <span class="kwb">do</span> S <span class="sym">:= {</span>Append <span class="str">&quot; &quot;</span> &#64;S<span class="sym">}</span> <span class="kwb">end</span>
      &#64;S
   <span class="kwb">end</span>

   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String.toInt Arg<span class="sym">}</span>

   BooleanArray <span class="sym">= {</span>BitArray.new <span class="num">0</span> <span class="sym">({</span>Pow <span class="num">2</span> N  <span class="sym">}*</span><span class="num">10000</span><span class="sym">)+</span><span class="num">1</span><span class="sym">}</span>

<span class="kwb">in</span>
   <span class="sym">{</span>Line <span class="sym">{</span>Pow <span class="num">2</span> N  <span class="sym">}</span> BooleanArray<span class="sym">}</span>
   <span class="sym">{</span>Line <span class="sym">{</span>Pow <span class="num">2</span> N<span class="sym">-</span><span class="num">1</span><span class="sym">}</span> BooleanArray<span class="sym">}</span>
   <span class="sym">{</span>Line <span class="sym">{</span>Pow <span class="num">2</span> N<span class="sym">-</span><span class="num">2</span><span class="sym">}</span> BooleanArray<span class="sym">}</span>
   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
