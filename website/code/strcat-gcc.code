<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: strcat-gcc.code,v 1.17 2006-04-01 21:27:09 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;unistd.h&gt;</span>

<span class="dir">#define STUFF</span> <span class="dstr">&quot;hello</span><span class="esc">\n</span><span class="dstr">&quot;</span><span class="dir"></span>

<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwb">int</span> i<span class="sym">,</span> buflen <span class="sym">=</span> <span class="num">32</span><span class="sym">;</span>
    <span class="kwb">char</span> <span class="sym">*</span>strbuf <span class="sym">=</span> <span class="kwd">calloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">),</span> buflen<span class="sym">);</span>
    <span class="kwb">char</span> <span class="sym">*</span>strend <span class="sym">=</span> strbuf<span class="sym">;</span>
    <span class="kwb">int</span> stufflen <span class="sym">=</span> <span class="kwd">strlen</span><span class="sym">(</span>STUFF<span class="sym">);</span>

    <span class="kwa">if</span> <span class="sym">(!</span>strbuf<span class="sym">) {</span> <span class="kwd">perror</span><span class="sym">(</span><span class="str">&quot;calloc strbuf&quot;</span><span class="sym">);</span> <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">); }</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	<span class="kwa">if</span> <span class="sym">(((</span>strbuf<span class="sym">+</span>buflen<span class="sym">)-</span>strend<span class="sym">) &lt; (</span>stufflen<span class="sym">+</span><span class="num">1</span><span class="sym">)) {</span>
	    buflen <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>buflen<span class="sym">;</span>
	    strbuf <span class="sym">=</span> <span class="kwd">realloc</span><span class="sym">(</span>strbuf<span class="sym">,</span> buflen<span class="sym">);</span>
	    <span class="kwa">if</span> <span class="sym">(!</span>strbuf<span class="sym">) {</span> <span class="kwd">perror</span><span class="sym">(</span><span class="str">&quot;realloc strbuf&quot;</span><span class="sym">);</span> <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">); }</span>
	    strend <span class="sym">=</span> strbuf <span class="sym">+</span> <span class="kwd">strlen</span><span class="sym">(</span>strbuf<span class="sym">);</span>
	<span class="sym">}</span>
	<span class="com">/* much faster to strcat to strend than to strbuf */</span>
	<span class="kwd">strcat</span><span class="sym">(</span>strend<span class="sym">,</span> STUFF<span class="sym">);</span>
	strend <span class="sym">+=</span> stufflen<span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwd">fprintf</span><span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">strlen</span><span class="sym">(</span>strbuf<span class="sym">));</span>
    <span class="kwd">free</span><span class="sym">(</span>strbuf<span class="sym">);</span>

    <span class="kwd">sleep</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
