<span class="line">    1 </span><span class="com">/* -*- mode: c -*-
</span><span class="line">    2 </span><span class="com"> * $Id: strcat-gcc.code,v 1.3 2004-11-11 07:14:19 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> */</span>
<span class="line">    5 </span>
<span class="line">    6 </span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;string.h&gt;
</span><span class="line">    9 </span><span class="dir"></span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="line">   10 </span><span class="dir"></span>
<span class="line">   11 </span><span class="dir">#define STUFF</span> <span class="dstr">&quot;hello</span><span class="esc">\n</span><span class="dstr">&quot;</span><span class="dir">
</span><span class="line">   12 </span><span class="dir"></span>
<span class="line">   13 </span><span class="kwb">int
</span><span class="line">   14 </span><span class="kwb"></span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   16 </span><span class="sym"></span>    <span class="kwb">int</span> i<span class="sym">,</span> buflen <span class="sym">=</span> <span class="num">32</span><span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>    <span class="kwb">char</span> <span class="sym">*</span>strbuf <span class="sym">=</span> calloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">),</span> buflen<span class="sym">);
</span><span class="line">   18 </span><span class="sym"></span>    <span class="kwb">char</span> <span class="sym">*</span>strend <span class="sym">=</span> strbuf<span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>    <span class="kwb">int</span> stufflen <span class="sym">=</span> strlen<span class="sym">(</span>STUFF<span class="sym">);
</span><span class="line">   20 </span><span class="sym">
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(!</span>strbuf<span class="sym">) {</span> perror<span class="sym">(</span><span class="str">&quot;calloc strbuf&quot;</span><span class="sym">);</span> exit<span class="sym">(</span><span class="num">1</span><span class="sym">); }
</span><span class="line">   22 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   23 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(((</span>strbuf<span class="sym">+</span>buflen<span class="sym">)-</span>strend<span class="sym">) &lt; (</span>stufflen<span class="sym">+</span><span class="num">1</span><span class="sym">)) {
</span><span class="line">   24 </span><span class="sym"></span>            buflen <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>buflen<span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>            strbuf <span class="sym">=</span> realloc<span class="sym">(</span>strbuf<span class="sym">,</span> buflen<span class="sym">);
</span><span class="line">   26 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(!</span>strbuf<span class="sym">) {</span> perror<span class="sym">(</span><span class="str">&quot;realloc strbuf&quot;</span><span class="sym">);</span> exit<span class="sym">(</span><span class="num">1</span><span class="sym">); }
</span><span class="line">   27 </span><span class="sym"></span>            strend <span class="sym">=</span> strbuf <span class="sym">+</span> strlen<span class="sym">(</span>strbuf<span class="sym">);
</span><span class="line">   28 </span><span class="sym">        }
</span><span class="line">   29 </span><span class="sym"></span>        <span class="com">/* much faster to strcat to strend than to strbuf */</span>
<span class="line">   30 </span>        strcat<span class="sym">(</span>strend<span class="sym">,</span> STUFF<span class="sym">);
</span><span class="line">   31 </span><span class="sym"></span>        strend <span class="sym">+=</span> stufflen<span class="sym">;
</span><span class="line">   32 </span><span class="sym">    }
</span><span class="line">   33 </span><span class="sym"></span>    fprintf<span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> strlen<span class="sym">(</span>strbuf<span class="sym">));
</span><span class="line">   34 </span><span class="sym"></span>    free<span class="sym">(</span>strbuf<span class="sym">);
</span><span class="line">   35 </span><span class="sym">
</span><span class="line">   36 </span><span class="sym"></span>    sleep<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   37 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   38 </span><span class="sym">}</span>
