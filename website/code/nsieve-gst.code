<span class="str">&quot;  The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy

   To run: gst -QI /usr/local/share/smalltalk/gst.im nsieve.st -a 7
&quot;</span>


<span class="sym">!</span>Integer methodsFor<span class="sym">:</span> <span class="str">'shootout'</span><span class="sym">!

</span>nsieve<span class="sym">:</span> isPrime
   <span class="sym">|</span> count <span class="sym">|
</span>   count <span class="sym">:=</span> <span class="num">0</span>.

   <span class="num">2</span> to<span class="sym">:</span> self <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span> isPrime at<span class="sym">:</span> i put<span class="sym">:</span> true<span class="sym">]</span>.

   <span class="num">2</span> to<span class="sym">:</span> self <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|
      (</span>isPrime at<span class="sym">:</span> i<span class="sym">)</span> ifTrue<span class="sym">: [
</span>         i<span class="sym">+</span>i to<span class="sym">:</span> self by<span class="sym">:</span> i <span class="kwa">do</span><span class="sym">: [:</span>k<span class="sym">|</span> isPrime at<span class="sym">:</span> k put<span class="sym">:</span> false<span class="sym">]</span>.
         count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span>.
         <span class="sym">]</span>.
      <span class="sym">]</span>.

   ^count <span class="sym">!


</span>asPaddedString<span class="sym">:</span> anInteger
   <span class="sym">|</span> s <span class="sym">|
</span>   s <span class="sym">:=</span> self printString.
   ^<span class="sym">(</span>String new<span class="sym">: (</span>anInteger <span class="sym">-</span> s size<span class="sym">)</span> withAll<span class="sym">:</span> <span class="kwb">$</span> <span class="sym">),</span> s <span class="sym">! !



|</span> n flags m <span class="sym">|
</span>n <span class="sym">:=</span> Smalltalk arguments first asInteger.
<span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>n <span class="sym">:=</span> <span class="num">2</span><span class="sym">]</span>.

m <span class="sym">:= (</span><span class="num">2</span> raisedTo<span class="sym">:</span> n<span class="sym">) *</span> <span class="num">10000</span>.
flags <span class="sym">:=</span> Array new<span class="sym">:</span> m.

Transcript
   show<span class="sym">:</span> <span class="str">'Primes up to '</span><span class="sym">;</span> show<span class="sym">: (</span>m asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);
</span>   show<span class="sym">: ((</span>m nsieve<span class="sym">:</span> flags<span class="sym">)</span> asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);</span> nl.

m <span class="sym">:= (</span><span class="num">2</span> raisedTo<span class="sym">: (</span>n <span class="num">- 1</span><span class="sym">)) *</span> <span class="num">10000</span>.
Transcript
   show<span class="sym">:</span> <span class="str">'Primes up to '</span><span class="sym">;</span> show<span class="sym">: (</span>m asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);
</span>   show<span class="sym">: ((</span>m nsieve<span class="sym">:</span> flags<span class="sym">)</span> asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);</span> nl.

m <span class="sym">:= (</span><span class="num">2</span> raisedTo<span class="sym">: (</span>n <span class="num">- 2</span><span class="sym">)) *</span> <span class="num">10000</span>.
Transcript
   show<span class="sym">:</span> <span class="str">'Primes up to '</span><span class="sym">;</span> show<span class="sym">: (</span>m asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);
</span>   show<span class="sym">: ((</span>m nsieve<span class="sym">:</span> flags<span class="sym">)</span> asPaddedString<span class="sym">:</span> <span class="num">8</span><span class="sym">);</span> nl. <span class="sym">!

</span><span class="str">&quot;
  vim: ts=4 ft=st
&quot;</span>
