<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile <span class="sym">-</span>s
<span class="line">    2 </span><span class="sym">!</span>#
<span class="line">    3 </span>
<span class="line">    4 </span><span class="slc">;;; $Id: echo-guile.code,v 1.4 2004-11-13 07:41:30 bfulgham Exp $
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">;;; from Brad Knotwell
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="num">-9</span> format<span class="sym">))
</span><span class="line">    9 </span><span class="sym">(</span>define DATA <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span><span class="line">   10 </span><span class="sym">(</span>define bufferSize <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> DATA<span class="sym">))
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym">(</span>define <span class="sym">(</span>echo<span class="sym">-</span>client n port<span class="sym">-</span>number<span class="sym">)
</span><span class="line">   13 </span><span class="sym">  (</span>let <span class="sym">((</span>new<span class="sym">-</span>sock <span class="sym">(</span>socket AF_INET SOCK_STREAM <span class="num">0</span><span class="sym">))
</span><span class="line">   14 </span><span class="sym">        (</span>buf <span class="sym">(</span>make<span class="sym">-</span>string bufferSize<span class="sym">)))
</span><span class="line">   15 </span><span class="sym">    (</span>begin <span class="sym">(</span>connect new<span class="sym">-</span>sock
<span class="line">   16 </span>                    AF_INET
<span class="line">   17 </span>                    INADDR_LOOPBACK
<span class="line">   18 </span>                    port<span class="sym">-</span>number<span class="sym">)
</span><span class="line">   19 </span><span class="sym">           (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))
</span><span class="line">   20 </span><span class="sym">               ((=</span> i n<span class="sym">) (</span><span class="kwa">close</span> new<span class="sym">-</span>sock<span class="sym">))
</span><span class="line">   21 </span><span class="sym">             (</span>begin
<span class="line">   22 </span>                 <span class="sym">(</span>send new<span class="sym">-</span>sock DATA<span class="sym">)
</span><span class="line">   23 </span><span class="sym">                 (</span>recv<span class="sym">!</span> new<span class="sym">-</span>sock buf<span class="sym">)
</span><span class="line">   24 </span><span class="sym">                 (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>string<span class="sym">=</span>? buf DATA<span class="sym">)) (</span>throw <span class="str">'badData)))))))
</span><span class="line">   25 </span><span class="str">
</span><span class="line">   26 </span><span class="str">(define (echo-server n)
</span><span class="line">   27 </span><span class="str">  (let ((sock (socket AF_INET SOCK_STREAM 0)))
</span><span class="line">   28 </span><span class="str">    (begin (setsockopt sock SOL_SOCKET SO_REUSEADDR 1)
</span><span class="line">   29 </span><span class="str">           (bind sock AF_INET INADDR_LOOPBACK 0)
</span><span class="line">   30 </span><span class="str">           (listen sock 2)
</span><span class="line">   31 </span><span class="str">           (let ((pid (primitive-fork)))
</span><span class="line">   32 </span><span class="str">             (if (= pid 0)
</span><span class="line">   33 </span><span class="str">                 (echo-client n (array-ref (getsockname sock) 2))
</span><span class="line">   34 </span><span class="str">                 (let ((new-sock (car (accept sock)))
</span><span class="line">   35 </span><span class="str">                       (buf (make-string bufferSize))
</span><span class="line">   36 </span><span class="str">                       (num-read 0))
</span><span class="line">   37 </span><span class="str">                   (do ((i (recv! new-sock buf) (recv! new-sock buf)))
</span><span class="line">   38 </span><span class="str">                       ((= 0 i) (begin (waitpid pid WNOHANG)
</span><span class="line">   39 </span><span class="str">                                       (display (format &quot;server processed ~D bytes</span><span class="esc">\n</span><span class="str">&quot; num-read))))
</span><span class="line">   40 </span><span class="str">                     (send new-sock buf) (set! num-read (+ num-read i)))))))))
</span><span class="line">   41 </span><span class="str">
</span><span class="line">   42 </span><span class="str">(echo-server (or (and (= (length args) 2) (string-&gt;number (cadr args))) 1))
</span><span class="line">   43 </span><span class="str"></span>
