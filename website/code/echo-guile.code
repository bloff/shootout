#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: echo-guile.code,v 1.5 2005-03-31 10:40:13 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="slc">;;; from Brad Knotwell
</span>
<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="num">-9</span> format<span class="sym">))
(</span>define DATA <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
(</span>define bufferSize <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> DATA<span class="sym">))

(</span>define <span class="sym">(</span>echo<span class="sym">-</span>client n port<span class="sym">-</span>number<span class="sym">)
  (</span>let <span class="sym">((</span>new<span class="sym">-</span>sock <span class="sym">(</span>socket AF_INET SOCK_STREAM <span class="num">0</span><span class="sym">))
	(</span>buf <span class="sym">(</span>make<span class="sym">-</span>string bufferSize<span class="sym">)))
    (</span>begin <span class="sym">(</span>connect new<span class="sym">-</span>sock
		    AF_INET
		    INADDR_LOOPBACK
		    port<span class="sym">-</span>number<span class="sym">)
	   (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))
	       ((=</span> i n<span class="sym">) (</span><span class="kwa">close</span> new<span class="sym">-</span>sock<span class="sym">))
	     (</span>begin
                 <span class="sym">(</span>send new<span class="sym">-</span>sock DATA<span class="sym">)
		 (</span>recv<span class="sym">!</span> new<span class="sym">-</span>sock buf<span class="sym">)
                 (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>string<span class="sym">=</span>? buf DATA<span class="sym">)) (</span>throw <span class="str">'badData)))))))

(define (echo-server n)
  (let ((sock (socket AF_INET SOCK_STREAM 0)))
    (begin (setsockopt sock SOL_SOCKET SO_REUSEADDR 1)
	   (bind sock AF_INET INADDR_LOOPBACK 0)
	   (listen sock 2)
	   (let ((pid (primitive-fork)))
	     (if (= pid 0)
		 (echo-client n (array-ref (getsockname sock) 2))
		 (let ((new-sock (car (accept sock)))
		       (buf (make-string bufferSize))
		       (num-read 0))
		   (do ((i (recv! new-sock buf) (recv! new-sock buf)))
		       ((= 0 i) (begin (waitpid pid WNOHANG)
				       (display (format &quot;server processed ~D bytes</span><span class="esc">\n</span><span class="str">&quot; num-read))))
		     (send new-sock buf) (set! num-read (+ num-read i)))))))))

(echo-server (or (and (= (length args) 2) (string-&gt;number (cadr args))) 1))
</span>
