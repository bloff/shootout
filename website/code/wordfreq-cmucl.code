<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: lisp -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: wordfreq-cmucl.code,v 1.2 2004-11-08 08:15:54 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">;;; From Bulent Murtezaoglu, based on code from Andrew McDowell
</FONT></I><I><FONT COLOR="#B22222">;;; Enhanced by Juho Snellman
</FONT></I>
<I><FONT COLOR="#B22222">;;; The Block/Buffering I/O code is adapted from material posted to comp.lang.lisp
</FONT></I><I><FONT COLOR="#B22222">;;; by Thomas Kirk &lt;tk@research.att.com&gt;.
</FONT></I><I><FONT COLOR="#B22222">;;; Archived here: http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/lisp/code/io/fast_io/fast_io.txt
</FONT></I><I><FONT COLOR="#B22222">;;;
</FONT></I>
(declaim (optimize (speed 3) (debug 0) (safety 0) (space 0) (compilation-speed 0)))


(defun main ()
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((start 0)
	 (current 0)
	 (end 0)
	 (eof nil)
	 (inputbuffer (make-array 4096 <B><FONT COLOR="#5F9EA0">:element-type</FONT></B> '(unsigned-byte 8))))
    (declare (type (simple-array (unsigned-byte 8)) inputbuffer)
	     (fixnum start end)
	     (inline code-char)
	     (type (unsigned-byte 8) current))
    (labels 
	((get-char () <I><FONT COLOR="#B22222">;;don't do this at home works through side effect unless eof
</FONT></I>		   (when (= start end)
		     (setf start 0)
		     (setf end (read-sequence inputbuffer *standard-input*))
		     (when (zerop end)
		       (setf eof t)
		       (return-from get-char nil)))
		   (setf current (aref inputbuffer start))
		   (incf start))
	
 	 (word-constituent-p () <I><FONT COLOR="#B22222">;; side effects current rets t if word-constituent
</FONT></I>			     (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (&gt;= current 97) (&lt;= current 122)) 
				   (<B><FONT COLOR="#A020F0">and</FONT></B> (&gt;= current 65) (&lt;= current 90) 
					(incf current 32))))
	 (reader (buffer)
		 (declare (type simple-base-string buffer))
		 (<B><FONT COLOR="#A020F0">let*</FONT></B> ((size (length buffer))
			(fill-ptr 0))
		   (declare (type (integer 0 1000)  size fill-ptr))
		   (loop while (<B><FONT COLOR="#A020F0">and</FONT></B> (<B><FONT COLOR="#A020F0">or</FONT></B> (get-char) (return-from reader buffer))
				    (not (word-constituent-p))))
		   (loop
		     (when (= fill-ptr size)
		       (<B><FONT COLOR="#A020F0">let</FONT></B> ((new-buffer
			      (make-string (the fixnum 
					     (setf size (the fixnum (+ fill-ptr 5)))))))
			 (setf (subseq (the simple-base-string new-buffer) 0 fill-ptr)
			       buffer)
			 (setf buffer new-buffer)))
		     (setf (schar buffer fill-ptr) (code-char current))
		     (incf fill-ptr)
		     (<B><FONT COLOR="#A020F0">if</FONT></B> (get-char)
			 (<B><FONT COLOR="#A020F0">if</FONT></B> (not (word-constituent-p))
			     (return))
		       (return)))
		   #+cmucl(lisp::shrink-vector buffer fill-ptr)
		   #+sbcl(sb-kernel::shrink-vector buffer fill-ptr))))

      (<B><FONT COLOR="#A020F0">let*</FONT></B> ((h (make-hash-table <B><FONT COLOR="#5F9EA0">:test</FONT></B> 'equal <B><FONT COLOR="#5F9EA0">:size</FONT></B> 3380 <B><FONT COLOR="#5F9EA0">:rehash-threshold</FONT></B> 1.0))
	     (buffer (make-string 10)))
	(declare (inline gethash maphash))
	(declare (type simple-base-string buffer))
	(loop
	  (setf buffer (reader buffer))
	  (<B><FONT COLOR="#A020F0">if</FONT></B> (not eof)
	      (<B><FONT COLOR="#A020F0">if</FONT></B> (= 1 (the fixnum (incf (the fixnum (gethash buffer h 0)))))
		  (setf buffer (make-string 10)))<I><FONT COLOR="#B22222">;; only cons if used
</FONT></I>	    (return)))
	<I><FONT COLOR="#B22222">;; hast table =&gt; list
</FONT></I>	(<B><FONT COLOR="#A020F0">let</FONT></B> ((l '()))
	  (maphash #'(<B><FONT COLOR="#A020F0">lambda</FONT></B> (key val)
		       (push (cons key val) l))
		   h)
	  <I><FONT COLOR="#B22222">;; sort the list
</FONT></I>	  (setf l (sort l #'(<B><FONT COLOR="#A020F0">lambda</FONT></B> (v1 v2)
			      (<B><FONT COLOR="#A020F0">if</FONT></B> (&gt; (the fixnum (cdr v1)) (the fixnum (cdr v2)))
				  t
				(<B><FONT COLOR="#A020F0">if</FONT></B> (= (the fixnum (cdr v1)) (the fixnum (cdr v2)))
				    (string-lessp (car v2) (car v1))
				  nil)))))
	  
	  <I><FONT COLOR="#B22222">;; output the list of pairs 
</FONT></I>	  (mapcar #'(<B><FONT COLOR="#A020F0">lambda</FONT></B> (p)
		      (format t <B><FONT COLOR="#BC8F8F">&quot;~7D ~A~&amp;&quot;</FONT></B> (cdr p) (car p))) 
		  l))))))</pre></td></tr></table>
