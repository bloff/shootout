<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- contributed by David Sauvage 2005/04/07
</span>
<span class="kwa">with</span> Ada.Streams<span class="sym">,</span> Ada.Streams.Stream_IO<span class="sym">,</span> Ada.Text_IO<span class="sym">,</span> GNAT.Spitbol<span class="sym">;
</span><span class="kwa">use</span>  Ada.Streams<span class="sym">,</span> Ada.Streams.Stream_IO<span class="sym">;

</span><span class="kwa">package body</span> Dictionnary_Mgr <span class="kwa">is

</span>   Tmp_Word <span class="sym">:</span> <span class="kwb">String</span> <span class="sym">(</span><span class="num">1</span> .<span class="num">.128</span><span class="sym">);
</span>   Index    <span class="sym">:</span> <span class="kwb">Natural</span> <span class="kwa">range</span> <span class="num">0</span> .. Tmp_Word<span class="sym">'</span>Last <span class="sym">:=</span> <span class="num">0</span><span class="sym">;

</span>   Is_Separator <span class="sym">:</span> <span class="kwa">array</span> <span class="sym">(</span>Stream_Element<span class="sym">)</span> <span class="kwa">of</span> <span class="kwb">Boolean</span> <span class="sym">:=
     (</span><span class="kwb">Character</span><span class="sym">'</span>Pos <span class="sym">('</span>a<span class="sym">')</span> .. <span class="kwb">Character</span><span class="sym">'</span>Pos <span class="sym">('</span>z<span class="sym">') =&gt;</span> False<span class="sym">,</span> <span class="kwa">others</span> <span class="sym">=&gt;</span> True<span class="sym">);

</span>   <span class="slc">-- ------------------------------------------------
</span>   <span class="kwa">procedure</span> Load <span class="sym">(</span>File_Name <span class="sym">:</span> <span class="kwb">String</span><span class="sym">)</span> <span class="kwa">is
</span>      Dictionnary_File <span class="sym">:</span> File_Type<span class="sym">;
</span>      Buffer           <span class="sym">:</span> Stream_Element_Array <span class="sym">(</span><span class="num">1</span> .. <span class="num">4</span>_096<span class="sym">);
</span>      Last             <span class="sym">:</span> Stream_Element_Offset<span class="sym">;

</span>      <span class="slc">-- ------------------------------------------------
</span>      <span class="kwa">procedure</span> Process <span class="sym">(</span>Buffer <span class="sym">:</span> Stream_Element_Array<span class="sym">)</span> <span class="kwa">is
      begin
         for</span> I <span class="kwa">in</span> Buffer<span class="sym">'</span><span class="kwa">Range loop
            if</span> Is_Separator <span class="sym">(</span>Buffer <span class="sym">(</span>I<span class="sym">))</span> <span class="kwa">then
               if</span> Index <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then
</span>                  Dictionnary.Set <span class="sym">(</span>Map<span class="sym">,</span> Tmp_Word <span class="sym">(</span><span class="num">1</span> .. Index<span class="sym">),</span>True<span class="sym">);
</span>               <span class="kwa">end if</span><span class="sym">;
</span>               Index <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>            <span class="kwa">else
</span>               Index <span class="sym">:=</span> Index <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>               Tmp_Word<span class="sym">(</span>Index<span class="sym">) :=</span> <span class="kwb">Character</span><span class="sym">'</span>Val<span class="sym">(</span>Buffer <span class="sym">(</span>I<span class="sym">));
</span>            <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">end</span> Process<span class="sym">;

</span>   <span class="kwa">begin
</span>      Dictionnary.Clear <span class="sym">(</span>Map<span class="sym">);
</span>      Open <span class="sym">(</span>Dictionnary_File<span class="sym">,</span> In_File<span class="sym">,</span> File_Name<span class="sym">);

</span>      <span class="kwa">loop
</span>         Read <span class="sym">(</span>Dictionnary_File<span class="sym">,</span> Buffer<span class="sym">,</span> Last<span class="sym">);
</span>         Process <span class="sym">(</span>Buffer <span class="sym">(</span><span class="num">1</span> .. Last<span class="sym">));
</span>         <span class="kwa">exit when</span> Last <span class="sym">&lt;</span> Buffer<span class="sym">'</span>Length<span class="sym">;
</span>      <span class="kwa">end loop</span> <span class="sym">;

</span>      Close <span class="sym">(</span>Dictionnary_File<span class="sym">);
</span>   <span class="kwa">end</span> Load<span class="sym">;

</span>   <span class="slc">-- ------------------------------------------------
</span>   <span class="kwa">procedure</span> Word_analysis <span class="kwa">is
</span>      Word <span class="sym">:</span> <span class="kwb">String</span> <span class="sym">(</span><span class="num">1</span> .. <span class="num">128</span><span class="sym">);
</span>      Last <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;
</span>      <span class="kwa">use</span> Ada.Text_IO<span class="sym">;
</span>   <span class="kwa">begin

      loop
</span>         Get_Line <span class="sym">(</span>Word<span class="sym">,</span> Last<span class="sym">);

</span>         <span class="kwa">if not</span> Dictionnary.Present <span class="sym">(</span>Map<span class="sym">,</span> Word <span class="sym">(</span><span class="num">1</span> .. Last<span class="sym">))</span> <span class="kwa">then
</span>            Put_Line <span class="sym">(</span>Standard_Output<span class="sym">,</span> Word <span class="sym">(</span><span class="num">1</span> .. Last<span class="sym">));
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;

</span>   <span class="kwa">exception
      when</span> Ada.Text_IO.End_Error <span class="sym">=&gt;
</span>         <span class="kwa">null</span><span class="sym">;
</span>   <span class="kwa">end</span> Word_analysis<span class="sym">;

</span><span class="kwa">end</span> Dictionnary_Mgr<span class="sym">;
</span><span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- contributed by David Sauvage 2005/04/07
</span><span class="kwa">with</span> GNAT.Spitbol<span class="sym">;

</span><span class="kwa">package</span> Dictionnary_Mgr <span class="kwa">is

   package</span> Dictionnary <span class="kwa">is new</span> GNAT.Spitbol.Table <span class="sym">(</span><span class="kwb">Boolean</span><span class="sym">,</span> False<span class="sym">,</span> <span class="kwb">Boolean</span><span class="sym">'</span>Image<span class="sym">);

</span>   Map  <span class="sym">:</span> Dictionnary.Table <span class="sym">(</span><span class="num">40_000</span><span class="sym">);

</span>   <span class="slc">-- ------------------------------------------------
</span>   <span class="kwa">procedure</span> Load <span class="sym">(</span>File_Name <span class="sym">:</span> <span class="kwb">String</span><span class="sym">);

</span>   <span class="slc">-- ------------------------------------------------
</span>   <span class="kwa">procedure</span> Word_analysis<span class="sym">;

</span><span class="kwa">end</span> Dictionnary_Mgr<span class="sym">;






</span><span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- contributed by David Sauvage 2005/04/07
</span>
<span class="kwa">with</span> Dictionnary_Mgr<span class="sym">;

</span><span class="kwa">procedure</span> Spellcheck <span class="kwa">is
begin
</span>   Dictionnary_Mgr.Load <span class="sym">(</span><span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">);
</span>   Dictionnary_Mgr.Word_Analysis<span class="sym">;
</span><span class="kwa">end</span> Spellcheck<span class="sym">;</span>
