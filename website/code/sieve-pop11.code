<span class="sym">;;;</span> $Id<span class="sym">:</span> sieve<span class="sym">.</span>pop11<span class="sym">,</span>v <span class="num">1.2 2005</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">13 16</span><span class="sym">:</span><span class="num">24</span><span class="sym">:</span><span class="num">19</span> igouy<span class="sym">-</span>guest Exp $
<span class="sym">;;;</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org
</span>vars n<span class="sym">;

</span>define constant procedure get_args<span class="sym">();
</span>   <span class="kwa">if</span> null<span class="sym">(</span>poparglist<span class="sym">)</span> then <span class="num">1</span> <span class="kwa">else
</span>      strnumber<span class="sym">(</span> hd<span class="sym">(</span>poparglist<span class="sym">) )
</span>   endif
enddefine<span class="sym">;

</span>get_args<span class="sym">() -&gt;</span> n<span class="sym">;

</span>vars flags <span class="sym">=</span> initshortvec<span class="sym">(</span><span class="num">8192</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">);

</span>vars count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>vars i<span class="sym">,</span> j<span class="sym">;
</span>repeat n times
    <span class="num">0</span> <span class="sym">-&gt;</span> count<span class="sym">;
</span>    <span class="kwa">for</span> i from <span class="num">2</span> to <span class="num">8192</span> <span class="kwa">do
</span>        <span class="num">1</span> <span class="sym">-&gt;</span> subscrshortvec<span class="sym">(</span>i<span class="sym">,</span> flags<span class="sym">)
</span>    endfor<span class="sym">;
</span>    <span class="kwa">for</span> i from <span class="num">2</span> to <span class="num">8192</span> <span class="kwa">do
        if</span> subscrshortvec<span class="sym">(</span>i<span class="sym">,</span>flags<span class="sym">) ==</span> <span class="num">1</span> then
	    <span class="sym">;;;</span> remove all multiples of prime<span class="sym">:</span> i
	    <span class="kwa">for</span> j from <span class="sym">(</span>i <span class="sym">+</span> i<span class="sym">)</span> by i to <span class="num">8192</span> <span class="kwa">do
</span>	        <span class="num">0</span> <span class="sym">-&gt;</span> subscrshortvec<span class="sym">(</span>j<span class="sym">,</span> flags<span class="sym">);
</span>	    endfor<span class="sym">;
</span>	    count <span class="sym">+</span> <span class="num">1</span> <span class="sym">-&gt;</span> count<span class="sym">;
</span>        endif<span class="sym">;
</span>    endfor<span class="sym">;
</span>endrepeat<span class="sym">;

</span>format_print<span class="sym">(</span><span class="str">'Count: ~D</span><span class="esc">\n</span><span class="str">'</span><span class="sym">, [</span>^count<span class="sym">]);
</span>
