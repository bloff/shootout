<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// $Id: lists-csharp.code,v 1.2 2004-11-08 08:15:15 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">// contributed by Erik Saltwell
</FONT></I><I><FONT COLOR="#B22222">// Some cleanups by Brent Fulgham
</FONT></I><I><FONT COLOR="#B22222">// Note:  C# standard libraries don't provide a DeQueue class, so this
</FONT></I><I><FONT COLOR="#B22222">//  implementation includes one.
</FONT></I>using System;

class IntDeQueue : ICloneable
{
    private <B><FONT COLOR="#228B22">int</FONT></B>[] data = null;
    private <B><FONT COLOR="#228B22">int</FONT></B> start = 0;
    private <B><FONT COLOR="#228B22">int</FONT></B> end = 0;
    private <B><FONT COLOR="#228B22">int</FONT></B> size = 0;
    private <B><FONT COLOR="#228B22">int</FONT></B> temp = 0;

    public bool Empty {
        get {<B><FONT COLOR="#A020F0">return</FONT></B> start == end;}
    }

    public object Clone()
    {
        IntDeQueue temp = new IntDeQueue(size-1);
        temp.start = start;
        temp.end = end;
        data.CopyTo(temp.data, 0);
        <B><FONT COLOR="#A020F0">return</FONT></B> temp;
    }

    public bool Equals(IntDeQueue other)
    {
        <B><FONT COLOR="#A020F0">if</FONT></B> (Count != other.Count)
            <B><FONT COLOR="#A020F0">return</FONT></B> false;

        <B><FONT COLOR="#228B22">int</FONT></B> i = this.start;
        <B><FONT COLOR="#228B22">int</FONT></B> iOther = other.start;

        <B><FONT COLOR="#A020F0">while</FONT></B> (i != this.end)
        {
            <B><FONT COLOR="#A020F0">if</FONT></B>(data[i] != other.data[iOther])
                <B><FONT COLOR="#A020F0">return</FONT></B> false;

            Advance(ref i);
            other.Advance(ref iOther);
        }
        <B><FONT COLOR="#A020F0">return</FONT></B> true;
    }

    public <B><FONT COLOR="#228B22">int</FONT></B> Count
    {
        get
        {
            <B><FONT COLOR="#A020F0">if</FONT></B>(end &gt;= start) 
                <B><FONT COLOR="#A020F0">return</FONT></B> end - start;
            <B><FONT COLOR="#A020F0">else</FONT></B> 
                <B><FONT COLOR="#A020F0">return</FONT></B> size + end - start; 
        }
    }

    public <B><FONT COLOR="#228B22">void</FONT></B> Reverse()
    {
        <B><FONT COLOR="#A020F0">if</FONT></B> (Count &lt; 2)
            <B><FONT COLOR="#A020F0">return</FONT></B>;
        Array.Reverse(data);
        <B><FONT COLOR="#228B22">int</FONT></B> endEnd = size-1;
        <B><FONT COLOR="#228B22">int</FONT></B> startEnd = 0;
        <B><FONT COLOR="#A020F0">if</FONT></B> (end &lt; start)
        {
            endEnd = 0;
            startEnd = size-1;
        }
        <B><FONT COLOR="#228B22">int</FONT></B> temp = start;
        Regress(ref end);
        start = Math.Abs(startEnd - Math.Abs(end - endEnd));
        end = Math.Abs(endEnd - Math.Abs(temp - startEnd));
        Advance(ref end);
    }

    public <B><FONT COLOR="#228B22">void</FONT></B> PushFront(<B><FONT COLOR="#228B22">int</FONT></B> i)
    {
        temp = start;
        Regress(ref start);
        <B><FONT COLOR="#A020F0">if</FONT></B> (start == end)
        {
            start = temp;
            throw new System.Exception(<B><FONT COLOR="#BC8F8F">&quot;Invalid operation&quot;</FONT></B>);
        }
        data[start] = i;
    }

    public <B><FONT COLOR="#228B22">int</FONT></B> PopFront()
    {
        <B><FONT COLOR="#228B22">int</FONT></B> i = data[start];
        <B><FONT COLOR="#A020F0">if</FONT></B> (start != end)
            Advance(ref start);
        <B><FONT COLOR="#A020F0">else</FONT></B>
            throw new System.Exception(<B><FONT COLOR="#BC8F8F">&quot;Invalid operation&quot;</FONT></B>);
        <B><FONT COLOR="#A020F0">return</FONT></B> i;
    }

    public <B><FONT COLOR="#228B22">int</FONT></B> PeekFront() 
    {
        <B><FONT COLOR="#A020F0">if</FONT></B> (start==end)
            throw new System.Exception(<B><FONT COLOR="#BC8F8F">&quot;Invalid Operation&quot;</FONT></B>);
        <B><FONT COLOR="#A020F0">return</FONT></B> data[start];
    }

    public <B><FONT COLOR="#228B22">int</FONT></B> PeekBack() 
    {
        <B><FONT COLOR="#A020F0">if</FONT></B> (start == end)
            throw new System.Exception(<B><FONT COLOR="#BC8F8F">&quot;Invalid Operation&quot;</FONT></B>);
        <B><FONT COLOR="#228B22">int</FONT></B> temp = end;
        Regress(ref temp);
        <B><FONT COLOR="#A020F0">return</FONT></B> data[temp];
    }

    public <B><FONT COLOR="#228B22">void</FONT></B> PushBack(<B><FONT COLOR="#228B22">int</FONT></B> i)
    {
        temp = end;
        Advance(ref end);
        <B><FONT COLOR="#A020F0">if</FONT></B> (start == end)
        {
            end = temp;
            throw new System.Exception(<B><FONT COLOR="#BC8F8F">&quot;Invalid operation&quot;</FONT></B>);
        }
        data[temp] = i;
    }

    public <B><FONT COLOR="#228B22">int</FONT></B> PopBack()
    {
        <B><FONT COLOR="#A020F0">if</FONT></B> (start!=end)
            Regress(ref end);
        <B><FONT COLOR="#A020F0">else</FONT></B>
            throw new System.Exception(<B><FONT COLOR="#BC8F8F">&quot;Invalid operation&quot;</FONT></B>);
        <B><FONT COLOR="#A020F0">return</FONT></B> data[end];
    }

    public IntDeQueue (<B><FONT COLOR="#228B22">int</FONT></B> Size) {
        data = new <B><FONT COLOR="#228B22">int</FONT></B>[Size+1];
	this.size=Size+1;
    }
    
    private <B><FONT COLOR="#228B22">void</FONT></B> Advance(ref <B><FONT COLOR="#228B22">int</FONT></B> item)
    {
        <B><FONT COLOR="#A020F0">if</FONT></B> ((++item) == size)
            item=0;
    }

    private <B><FONT COLOR="#228B22">void</FONT></B> Regress (ref <B><FONT COLOR="#228B22">int</FONT></B> item)
    {
        <B><FONT COLOR="#A020F0">if</FONT></B> (item != 0)
            --item;
        <B><FONT COLOR="#A020F0">else</FONT></B>
            item = (size-1);
    }

    public <B><FONT COLOR="#228B22">void</FONT></B> Clear()
    {
        start = 0;
        end = 0;
    }
}

class lists
{
    public <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">int</FONT></B> SIZE=10000;
    [STAThread]
    <B><FONT COLOR="#228B22">static</FONT></B> <B><FONT COLOR="#228B22">void</FONT></B> Main(string[] args)
    {
        <B><FONT COLOR="#228B22">int</FONT></B> n = <B><FONT COLOR="#228B22">int</FONT></B>.Parse(args[0]);
        <B><FONT COLOR="#228B22">int</FONT></B> result = 0;
        <B><FONT COLOR="#A020F0">for</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> i = 0; i &lt; n; ++i)
            result = RunLists();
        Console.WriteLine(result);
    }

    <B><FONT COLOR="#228B22">static</FONT></B> public <B><FONT COLOR="#228B22">int</FONT></B> RunLists()
    {
        IntDeQueue q = new IntDeQueue(SIZE);
        <B><FONT COLOR="#A020F0">for</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> i=0;i&lt;SIZE;++i)
            q.PushBack(i+1);
        IntDeQueue q2 = (IntDeQueue)q.Clone();
        IntDeQueue q3=new IntDeQueue(SIZE);
        <B><FONT COLOR="#A020F0">while</FONT></B>(!q2.Empty)
            q3.PushBack(q2.PopFront());
        <B><FONT COLOR="#A020F0">while</FONT></B>(!q3.Empty)
            q2.PushBack(q3.PopBack());
        q.Reverse();
        <B><FONT COLOR="#A020F0">if</FONT></B>(q.PeekFront() != SIZE)
        {
            Console.WriteLine(<B><FONT COLOR="#BC8F8F">&quot;q.PeekFront()!=SIZE&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">return</FONT></B> 0;
        }
        <B><FONT COLOR="#A020F0">if</FONT></B>(!q.Equals(q2))
        {
            Console.WriteLine(<B><FONT COLOR="#BC8F8F">&quot;q!=q2&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">return</FONT></B> 0;
        }

        <B><FONT COLOR="#A020F0">return</FONT></B> q.Count;
    }
}
</pre></td></tr></table>
