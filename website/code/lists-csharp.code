<span class="line">    1 </span><span class="slc">// $Id: lists-csharp.code,v 1.4 2004-11-13 07:41:44 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// contributed by Erik Saltwell
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">// Some cleanups by Brent Fulgham
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">// Note:  C# standard libraries don't provide a DeQueue class, so this
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">//  implementation includes one.
</span><span class="line">    7 </span><span class="slc"></span><span class="kwa">using</span> System<span class="sym">;
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span><span class="kwc">class</span> IntDeQueue <span class="sym">:</span> ICloneable
<span class="line">   10 </span><span class="sym">{
</span><span class="line">   11 </span><span class="sym"></span>    <span class="kwc">private</span> <span class="kwb">int</span><span class="sym">[]</span> data <span class="sym">=</span> null<span class="sym">;
</span><span class="line">   12 </span><span class="sym"></span>    <span class="kwc">private</span> <span class="kwb">int</span> start <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   13 </span><span class="sym"></span>    <span class="kwc">private</span> <span class="kwb">int</span> end <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym"></span>    <span class="kwc">private</span> <span class="kwb">int</span> size <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwc">private</span> <span class="kwb">int</span> temp <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">bool</span> Empty <span class="sym">{
</span><span class="line">   18 </span><span class="sym"></span>        get <span class="sym">{</span><span class="kwa">return</span> start <span class="sym">==</span> end<span class="sym">;}
</span><span class="line">   19 </span><span class="sym">    }
</span><span class="line">   20 </span><span class="sym">
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwc">public</span> object Clone<span class="sym">()
</span><span class="line">   22 </span><span class="sym">    {
</span><span class="line">   23 </span><span class="sym"></span>        IntDeQueue temp <span class="sym">=</span> <span class="kwa">new</span> IntDeQueue<span class="sym">(</span>size<span class="num">-1</span><span class="sym">);
</span><span class="line">   24 </span><span class="sym"></span>        temp<span class="sym">.</span>start <span class="sym">=</span> start<span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>        temp<span class="sym">.</span>end <span class="sym">=</span> end<span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span>        data<span class="sym">.</span>CopyTo<span class="sym">(</span>temp<span class="sym">.</span>data<span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span><span class="line">   27 </span><span class="sym"></span>        <span class="kwa">return</span> temp<span class="sym">;
</span><span class="line">   28 </span><span class="sym">    }
</span><span class="line">   29 </span><span class="sym">
</span><span class="line">   30 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">bool</span> Equals<span class="sym">(</span>IntDeQueue other<span class="sym">)
</span><span class="line">   31 </span><span class="sym">    {
</span><span class="line">   32 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>Count <span class="sym">!=</span> other<span class="sym">.</span>Count<span class="sym">)
</span><span class="line">   33 </span><span class="sym"></span>            <span class="kwa">return false</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym">
</span><span class="line">   35 </span><span class="sym"></span>        <span class="kwb">int</span> i <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>start<span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>        <span class="kwb">int</span> iOther <span class="sym">=</span> other<span class="sym">.</span>start<span class="sym">;
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym"></span>        <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">!=</span> <span class="kwa">this</span><span class="sym">.</span>end<span class="sym">)
</span><span class="line">   39 </span><span class="sym">        {
</span><span class="line">   40 </span><span class="sym"></span>            <span class="kwa">if</span><span class="sym">(</span>data<span class="sym">[</span>i<span class="sym">] !=</span> other<span class="sym">.</span>data<span class="sym">[</span>iOther<span class="sym">])
</span><span class="line">   41 </span><span class="sym"></span>                <span class="kwa">return false</span><span class="sym">;
</span><span class="line">   42 </span><span class="sym">
</span><span class="line">   43 </span><span class="sym"></span>            Advance<span class="sym">(</span>ref i<span class="sym">);
</span><span class="line">   44 </span><span class="sym"></span>            other<span class="sym">.</span>Advance<span class="sym">(</span>ref iOther<span class="sym">);
</span><span class="line">   45 </span><span class="sym">        }
</span><span class="line">   46 </span><span class="sym"></span>        <span class="kwa">return true</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym">    }
</span><span class="line">   48 </span><span class="sym">
</span><span class="line">   49 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">int</span> Count
<span class="line">   50 </span>    <span class="sym">{
</span><span class="line">   51 </span><span class="sym"></span>        get
<span class="line">   52 </span>        <span class="sym">{
</span><span class="line">   53 </span><span class="sym"></span>            <span class="kwa">if</span><span class="sym">(</span>end <span class="sym">&gt;=</span> start<span class="sym">)
</span><span class="line">   54 </span><span class="sym"></span>                <span class="kwa">return</span> end <span class="sym">-</span> start<span class="sym">;
</span><span class="line">   55 </span><span class="sym"></span>            <span class="kwa">else
</span><span class="line">   56 </span><span class="kwa">                return</span> size <span class="sym">+</span> end <span class="sym">-</span> start<span class="sym">;
</span><span class="line">   57 </span><span class="sym">        }
</span><span class="line">   58 </span><span class="sym">    }
</span><span class="line">   59 </span><span class="sym">
</span><span class="line">   60 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">void</span> Reverse<span class="sym">()
</span><span class="line">   61 </span><span class="sym">    {
</span><span class="line">   62 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>Count <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)
</span><span class="line">   63 </span><span class="sym"></span>            <span class="kwa">return</span><span class="sym">;
</span><span class="line">   64 </span><span class="sym"></span>        Array<span class="sym">.</span>Reverse<span class="sym">(</span>data<span class="sym">);
</span><span class="line">   65 </span><span class="sym"></span>        <span class="kwb">int</span> endEnd <span class="sym">=</span> size<span class="num">-1</span><span class="sym">;
</span><span class="line">   66 </span><span class="sym"></span>        <span class="kwb">int</span> startEnd <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   67 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>end <span class="sym">&lt;</span> start<span class="sym">)
</span><span class="line">   68 </span><span class="sym">        {
</span><span class="line">   69 </span><span class="sym"></span>            endEnd <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   70 </span><span class="sym"></span>            startEnd <span class="sym">=</span> size<span class="num">-1</span><span class="sym">;
</span><span class="line">   71 </span><span class="sym">        }
</span><span class="line">   72 </span><span class="sym"></span>        <span class="kwb">int</span> temp <span class="sym">=</span> start<span class="sym">;
</span><span class="line">   73 </span><span class="sym"></span>        Regress<span class="sym">(</span>ref end<span class="sym">);
</span><span class="line">   74 </span><span class="sym"></span>        start <span class="sym">=</span> Math<span class="sym">.</span>Abs<span class="sym">(</span>startEnd <span class="sym">-</span> Math<span class="sym">.</span>Abs<span class="sym">(</span>end <span class="sym">-</span> endEnd<span class="sym">));
</span><span class="line">   75 </span><span class="sym"></span>        end <span class="sym">=</span> Math<span class="sym">.</span>Abs<span class="sym">(</span>endEnd <span class="sym">-</span> Math<span class="sym">.</span>Abs<span class="sym">(</span>temp <span class="sym">-</span> startEnd<span class="sym">));
</span><span class="line">   76 </span><span class="sym"></span>        Advance<span class="sym">(</span>ref end<span class="sym">);
</span><span class="line">   77 </span><span class="sym">    }
</span><span class="line">   78 </span><span class="sym">
</span><span class="line">   79 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">void</span> PushFront<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">)
</span><span class="line">   80 </span><span class="sym">    {
</span><span class="line">   81 </span><span class="sym"></span>        temp <span class="sym">=</span> start<span class="sym">;
</span><span class="line">   82 </span><span class="sym"></span>        Regress<span class="sym">(</span>ref start<span class="sym">);
</span><span class="line">   83 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>start <span class="sym">==</span> end<span class="sym">)
</span><span class="line">   84 </span><span class="sym">        {
</span><span class="line">   85 </span><span class="sym"></span>            start <span class="sym">=</span> temp<span class="sym">;
</span><span class="line">   86 </span><span class="sym"></span>            <span class="kwa">throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid operation&quot;</span><span class="sym">);
</span><span class="line">   87 </span><span class="sym">        }
</span><span class="line">   88 </span><span class="sym"></span>        data<span class="sym">[</span>start<span class="sym">] =</span> i<span class="sym">;
</span><span class="line">   89 </span><span class="sym">    }
</span><span class="line">   90 </span><span class="sym">
</span><span class="line">   91 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">int</span> PopFront<span class="sym">()
</span><span class="line">   92 </span><span class="sym">    {
</span><span class="line">   93 </span><span class="sym"></span>        <span class="kwb">int</span> i <span class="sym">=</span> data<span class="sym">[</span>start<span class="sym">];
</span><span class="line">   94 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>start <span class="sym">!=</span> end<span class="sym">)
</span><span class="line">   95 </span><span class="sym"></span>            Advance<span class="sym">(</span>ref start<span class="sym">);
</span><span class="line">   96 </span><span class="sym"></span>        <span class="kwa">else
</span><span class="line">   97 </span><span class="kwa">            throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid operation&quot;</span><span class="sym">);
</span><span class="line">   98 </span><span class="sym"></span>        <span class="kwa">return</span> i<span class="sym">;
</span><span class="line">   99 </span><span class="sym">    }
</span><span class="line">  100 </span><span class="sym">
</span><span class="line">  101 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">int</span> PeekFront<span class="sym">()
</span><span class="line">  102 </span><span class="sym">    {
</span><span class="line">  103 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>start<span class="sym">==</span>end<span class="sym">)
</span><span class="line">  104 </span><span class="sym"></span>            <span class="kwa">throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid Operation&quot;</span><span class="sym">);
</span><span class="line">  105 </span><span class="sym"></span>        <span class="kwa">return</span> data<span class="sym">[</span>start<span class="sym">];
</span><span class="line">  106 </span><span class="sym">    }
</span><span class="line">  107 </span><span class="sym">
</span><span class="line">  108 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">int</span> PeekBack<span class="sym">()
</span><span class="line">  109 </span><span class="sym">    {
</span><span class="line">  110 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>start <span class="sym">==</span> end<span class="sym">)
</span><span class="line">  111 </span><span class="sym"></span>            <span class="kwa">throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid Operation&quot;</span><span class="sym">);
</span><span class="line">  112 </span><span class="sym"></span>        <span class="kwb">int</span> temp <span class="sym">=</span> end<span class="sym">;
</span><span class="line">  113 </span><span class="sym"></span>        Regress<span class="sym">(</span>ref temp<span class="sym">);
</span><span class="line">  114 </span><span class="sym"></span>        <span class="kwa">return</span> data<span class="sym">[</span>temp<span class="sym">];
</span><span class="line">  115 </span><span class="sym">    }
</span><span class="line">  116 </span><span class="sym">
</span><span class="line">  117 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">void</span> PushBack<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">)
</span><span class="line">  118 </span><span class="sym">    {
</span><span class="line">  119 </span><span class="sym"></span>        temp <span class="sym">=</span> end<span class="sym">;
</span><span class="line">  120 </span><span class="sym"></span>        Advance<span class="sym">(</span>ref end<span class="sym">);
</span><span class="line">  121 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>start <span class="sym">==</span> end<span class="sym">)
</span><span class="line">  122 </span><span class="sym">        {
</span><span class="line">  123 </span><span class="sym"></span>            end <span class="sym">=</span> temp<span class="sym">;
</span><span class="line">  124 </span><span class="sym"></span>            <span class="kwa">throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid operation&quot;</span><span class="sym">);
</span><span class="line">  125 </span><span class="sym">        }
</span><span class="line">  126 </span><span class="sym"></span>        data<span class="sym">[</span>temp<span class="sym">] =</span> i<span class="sym">;
</span><span class="line">  127 </span><span class="sym">    }
</span><span class="line">  128 </span><span class="sym">
</span><span class="line">  129 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">int</span> PopBack<span class="sym">()
</span><span class="line">  130 </span><span class="sym">    {
</span><span class="line">  131 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>start<span class="sym">!=</span>end<span class="sym">)
</span><span class="line">  132 </span><span class="sym"></span>            Regress<span class="sym">(</span>ref end<span class="sym">);
</span><span class="line">  133 </span><span class="sym"></span>        <span class="kwa">else
</span><span class="line">  134 </span><span class="kwa">            throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid operation&quot;</span><span class="sym">);
</span><span class="line">  135 </span><span class="sym"></span>        <span class="kwa">return</span> data<span class="sym">[</span>end<span class="sym">];
</span><span class="line">  136 </span><span class="sym">    }
</span><span class="line">  137 </span><span class="sym">
</span><span class="line">  138 </span><span class="sym"></span>    <span class="kwc">public</span> IntDeQueue <span class="sym">(</span><span class="kwb">int</span> Size<span class="sym">) {
</span><span class="line">  139 </span><span class="sym"></span>        data <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>Size<span class="sym">+</span><span class="num">1</span><span class="sym">];
</span><span class="line">  140 </span><span class="sym"></span>        <span class="kwa">this</span><span class="sym">.</span>size<span class="sym">=</span>Size<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span><span class="line">  141 </span><span class="sym">    }
</span><span class="line">  142 </span><span class="sym">
</span><span class="line">  143 </span><span class="sym"></span>    <span class="kwc">private</span> <span class="kwb">void</span> Advance<span class="sym">(</span>ref <span class="kwb">int</span> item<span class="sym">)
</span><span class="line">  144 </span><span class="sym">    {
</span><span class="line">  145 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">((++</span>item<span class="sym">) ==</span> size<span class="sym">)
</span><span class="line">  146 </span><span class="sym"></span>            item<span class="sym">=</span><span class="num">0</span><span class="sym">;
</span><span class="line">  147 </span><span class="sym">    }
</span><span class="line">  148 </span><span class="sym">
</span><span class="line">  149 </span><span class="sym"></span>    <span class="kwc">private</span> <span class="kwb">void</span> Regress <span class="sym">(</span>ref <span class="kwb">int</span> item<span class="sym">)
</span><span class="line">  150 </span><span class="sym">    {
</span><span class="line">  151 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>item <span class="sym">!=</span> <span class="num">0</span><span class="sym">)
</span><span class="line">  152 </span><span class="sym">            --</span>item<span class="sym">;
</span><span class="line">  153 </span><span class="sym"></span>        <span class="kwa">else
</span><span class="line">  154 </span><span class="kwa"></span>            item <span class="sym">= (</span>size<span class="num">-1</span><span class="sym">);
</span><span class="line">  155 </span><span class="sym">    }
</span><span class="line">  156 </span><span class="sym">
</span><span class="line">  157 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">void</span> Clear<span class="sym">()
</span><span class="line">  158 </span><span class="sym">    {
</span><span class="line">  159 </span><span class="sym"></span>        start <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  160 </span><span class="sym"></span>        end <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  161 </span><span class="sym">    }
</span><span class="line">  162 </span><span class="sym">}
</span><span class="line">  163 </span><span class="sym">
</span><span class="line">  164 </span><span class="sym"></span><span class="kwc">class</span> lists
<span class="line">  165 </span><span class="sym">{
</span><span class="line">  166 </span><span class="sym"></span>    <span class="kwc">public</span> <span class="kwb">const int</span> SIZE<span class="sym">=</span><span class="num">10000</span><span class="sym">;
</span><span class="line">  167 </span><span class="sym">    [</span>STAThread<span class="sym">]
</span><span class="line">  168 </span><span class="sym"></span>    <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
</span><span class="line">  169 </span><span class="sym">    {
</span><span class="line">  170 </span><span class="sym"></span>        <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwb">int</span><span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">  171 </span><span class="sym"></span>        <span class="kwb">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  172 </span><span class="sym"></span>        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">; ++</span>i<span class="sym">)
</span><span class="line">  173 </span><span class="sym"></span>            result <span class="sym">=</span> RunLists<span class="sym">();
</span><span class="line">  174 </span><span class="sym"></span>        Console<span class="sym">.</span>WriteLine<span class="sym">(</span>result<span class="sym">);
</span><span class="line">  175 </span><span class="sym">    }
</span><span class="line">  176 </span><span class="sym">
</span><span class="line">  177 </span><span class="sym"></span>    <span class="kwb">static</span> <span class="kwc">public</span> <span class="kwb">int</span> RunLists<span class="sym">()
</span><span class="line">  178 </span><span class="sym">    {
</span><span class="line">  179 </span><span class="sym"></span>        IntDeQueue q <span class="sym">=</span> <span class="kwa">new</span> IntDeQueue<span class="sym">(</span>SIZE<span class="sym">);
</span><span class="line">  180 </span><span class="sym"></span>        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>SIZE<span class="sym">;++</span>i<span class="sym">)
</span><span class="line">  181 </span><span class="sym"></span>            q<span class="sym">.</span>PushBack<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span><span class="line">  182 </span><span class="sym"></span>        IntDeQueue q2 <span class="sym">= (</span>IntDeQueue<span class="sym">)</span>q<span class="sym">.</span>Clone<span class="sym">();
</span><span class="line">  183 </span><span class="sym"></span>        IntDeQueue q3<span class="sym">=</span><span class="kwa">new</span> IntDeQueue<span class="sym">(</span>SIZE<span class="sym">);
</span><span class="line">  184 </span><span class="sym"></span>        <span class="kwa">while</span><span class="sym">(!</span>q2<span class="sym">.</span>Empty<span class="sym">)
</span><span class="line">  185 </span><span class="sym"></span>            q3<span class="sym">.</span>PushBack<span class="sym">(</span>q2<span class="sym">.</span>PopFront<span class="sym">());
</span><span class="line">  186 </span><span class="sym"></span>        <span class="kwa">while</span><span class="sym">(!</span>q3<span class="sym">.</span>Empty<span class="sym">)
</span><span class="line">  187 </span><span class="sym"></span>            q2<span class="sym">.</span>PushBack<span class="sym">(</span>q3<span class="sym">.</span>PopBack<span class="sym">());
</span><span class="line">  188 </span><span class="sym"></span>        q<span class="sym">.</span>Reverse<span class="sym">();
</span><span class="line">  189 </span><span class="sym"></span>        <span class="kwa">if</span><span class="sym">(</span>q<span class="sym">.</span>PeekFront<span class="sym">() !=</span> SIZE<span class="sym">)
</span><span class="line">  190 </span><span class="sym">        {
</span><span class="line">  191 </span><span class="sym"></span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;q.PeekFront()!=SIZE&quot;</span><span class="sym">);
</span><span class="line">  192 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  193 </span><span class="sym">        }
</span><span class="line">  194 </span><span class="sym"></span>        <span class="kwa">if</span><span class="sym">(!</span>q<span class="sym">.</span>Equals<span class="sym">(</span>q2<span class="sym">))
</span><span class="line">  195 </span><span class="sym">        {
</span><span class="line">  196 </span><span class="sym"></span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;q!=q2&quot;</span><span class="sym">);
</span><span class="line">  197 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  198 </span><span class="sym">        }
</span><span class="line">  199 </span><span class="sym">
</span><span class="line">  200 </span><span class="sym"></span>        <span class="kwa">return</span> q<span class="sym">.</span>Count<span class="sym">;
</span><span class="line">  201 </span><span class="sym">    }
</span><span class="line">  202 </span><span class="sym">}
</span><span class="line">  203 </span><span class="sym"></span>
