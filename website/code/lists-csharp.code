<span class="slc">// $Id: lists-csharp.code,v 1.10 2005-09-20 04:14:20 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">// contributed by Erik Saltwell
</span><span class="slc">// Some cleanups by Brent Fulgham
</span><span class="slc">// Note:  C# standard libraries don't provide a DeQueue class, so this
</span><span class="slc">//  implementation includes one.
</span><span class="kwa">using</span> System<span class="sym">;

</span><span class="kwc">class</span> IntDeQueue <span class="sym">:</span> ICloneable
<span class="sym">{
</span>    <span class="kwc">private</span> <span class="kwb">int</span><span class="sym">[]</span> data <span class="sym">=</span> null<span class="sym">;
</span>    <span class="kwc">private</span> <span class="kwb">int</span> start <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwc">private</span> <span class="kwb">int</span> end <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwc">private</span> <span class="kwb">int</span> size <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwc">private</span> <span class="kwb">int</span> temp <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>    <span class="kwc">public</span> <span class="kwb">bool</span> Empty <span class="sym">{
</span>        get <span class="sym">{</span><span class="kwa">return</span> start <span class="sym">==</span> end<span class="sym">;}
    }

</span>    <span class="kwc">public</span> object Clone<span class="sym">()
    {
</span>        IntDeQueue temp <span class="sym">=</span> <span class="kwa">new</span> IntDeQueue<span class="sym">(</span>size<span class="num">-1</span><span class="sym">);
</span>        temp<span class="sym">.</span>start <span class="sym">=</span> start<span class="sym">;
</span>        temp<span class="sym">.</span>end <span class="sym">=</span> end<span class="sym">;
</span>        data<span class="sym">.</span>CopyTo<span class="sym">(</span>temp<span class="sym">.</span>data<span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>        <span class="kwa">return</span> temp<span class="sym">;
    }

</span>    <span class="kwc">public</span> <span class="kwb">bool</span> Equals<span class="sym">(</span>IntDeQueue other<span class="sym">)
    {
</span>        <span class="kwa">if</span> <span class="sym">(</span>Count <span class="sym">!=</span> other<span class="sym">.</span>Count<span class="sym">)
</span>            <span class="kwa">return false</span><span class="sym">;

</span>        <span class="kwb">int</span> i <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>start<span class="sym">;
</span>        <span class="kwb">int</span> iOther <span class="sym">=</span> other<span class="sym">.</span>start<span class="sym">;

</span>        <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">!=</span> <span class="kwa">this</span><span class="sym">.</span>end<span class="sym">)
        {
</span>            <span class="kwa">if</span><span class="sym">(</span>data<span class="sym">[</span>i<span class="sym">] !=</span> other<span class="sym">.</span>data<span class="sym">[</span>iOther<span class="sym">])
</span>                <span class="kwa">return false</span><span class="sym">;

</span>            Advance<span class="sym">(</span>ref i<span class="sym">);
</span>            other<span class="sym">.</span>Advance<span class="sym">(</span>ref iOther<span class="sym">);
        }
</span>        <span class="kwa">return true</span><span class="sym">;
    }

</span>    <span class="kwc">public</span> <span class="kwb">int</span> Count
    <span class="sym">{
</span>        get
        <span class="sym">{
</span>            <span class="kwa">if</span><span class="sym">(</span>end <span class="sym">&gt;=</span> start<span class="sym">)
</span>                <span class="kwa">return</span> end <span class="sym">-</span> start<span class="sym">;
</span>            <span class="kwa">else
                return</span> size <span class="sym">+</span> end <span class="sym">-</span> start<span class="sym">;
        }
    }

</span>    <span class="kwc">public</span> <span class="kwb">void</span> Reverse<span class="sym">()
    {
</span>        <span class="kwa">if</span> <span class="sym">(</span>Count <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)
</span>            <span class="kwa">return</span><span class="sym">;
</span>        Array<span class="sym">.</span>Reverse<span class="sym">(</span>data<span class="sym">);
</span>        <span class="kwb">int</span> endEnd <span class="sym">=</span> size<span class="num">-1</span><span class="sym">;
</span>        <span class="kwb">int</span> startEnd <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>        <span class="kwa">if</span> <span class="sym">(</span>end <span class="sym">&lt;</span> start<span class="sym">)
        {
</span>            endEnd <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>            startEnd <span class="sym">=</span> size<span class="num">-1</span><span class="sym">;
        }
</span>        <span class="kwb">int</span> temp <span class="sym">=</span> start<span class="sym">;
</span>        Regress<span class="sym">(</span>ref end<span class="sym">);
</span>        start <span class="sym">=</span> Math<span class="sym">.</span>Abs<span class="sym">(</span>startEnd <span class="sym">-</span> Math<span class="sym">.</span>Abs<span class="sym">(</span>end <span class="sym">-</span> endEnd<span class="sym">));
</span>        end <span class="sym">=</span> Math<span class="sym">.</span>Abs<span class="sym">(</span>endEnd <span class="sym">-</span> Math<span class="sym">.</span>Abs<span class="sym">(</span>temp <span class="sym">-</span> startEnd<span class="sym">));
</span>        Advance<span class="sym">(</span>ref end<span class="sym">);
    }

</span>    <span class="kwc">public</span> <span class="kwb">void</span> PushFront<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">)
    {
</span>        temp <span class="sym">=</span> start<span class="sym">;
</span>        Regress<span class="sym">(</span>ref start<span class="sym">);
</span>        <span class="kwa">if</span> <span class="sym">(</span>start <span class="sym">==</span> end<span class="sym">)
        {
</span>            start <span class="sym">=</span> temp<span class="sym">;
</span>            <span class="kwa">throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid operation&quot;</span><span class="sym">);
        }
</span>        data<span class="sym">[</span>start<span class="sym">] =</span> i<span class="sym">;
    }

</span>    <span class="kwc">public</span> <span class="kwb">int</span> PopFront<span class="sym">()
    {
</span>        <span class="kwb">int</span> i <span class="sym">=</span> data<span class="sym">[</span>start<span class="sym">];
</span>        <span class="kwa">if</span> <span class="sym">(</span>start <span class="sym">!=</span> end<span class="sym">)
</span>            Advance<span class="sym">(</span>ref start<span class="sym">);
</span>        <span class="kwa">else
            throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid operation&quot;</span><span class="sym">);
</span>        <span class="kwa">return</span> i<span class="sym">;
    }

</span>    <span class="kwc">public</span> <span class="kwb">int</span> PeekFront<span class="sym">()
    {
</span>        <span class="kwa">if</span> <span class="sym">(</span>start<span class="sym">==</span>end<span class="sym">)
</span>            <span class="kwa">throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid Operation&quot;</span><span class="sym">);
</span>        <span class="kwa">return</span> data<span class="sym">[</span>start<span class="sym">];
    }

</span>    <span class="kwc">public</span> <span class="kwb">int</span> PeekBack<span class="sym">()
    {
</span>        <span class="kwa">if</span> <span class="sym">(</span>start <span class="sym">==</span> end<span class="sym">)
</span>            <span class="kwa">throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid Operation&quot;</span><span class="sym">);
</span>        <span class="kwb">int</span> temp <span class="sym">=</span> end<span class="sym">;
</span>        Regress<span class="sym">(</span>ref temp<span class="sym">);
</span>        <span class="kwa">return</span> data<span class="sym">[</span>temp<span class="sym">];
    }

</span>    <span class="kwc">public</span> <span class="kwb">void</span> PushBack<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">)
    {
</span>        temp <span class="sym">=</span> end<span class="sym">;
</span>        Advance<span class="sym">(</span>ref end<span class="sym">);
</span>        <span class="kwa">if</span> <span class="sym">(</span>start <span class="sym">==</span> end<span class="sym">)
        {
</span>            end <span class="sym">=</span> temp<span class="sym">;
</span>            <span class="kwa">throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid operation&quot;</span><span class="sym">);
        }
</span>        data<span class="sym">[</span>temp<span class="sym">] =</span> i<span class="sym">;
    }

</span>    <span class="kwc">public</span> <span class="kwb">int</span> PopBack<span class="sym">()
    {
</span>        <span class="kwa">if</span> <span class="sym">(</span>start<span class="sym">!=</span>end<span class="sym">)
</span>            Regress<span class="sym">(</span>ref end<span class="sym">);
</span>        <span class="kwa">else
            throw new</span> System<span class="sym">.</span>Exception<span class="sym">(</span><span class="str">&quot;Invalid operation&quot;</span><span class="sym">);
</span>        <span class="kwa">return</span> data<span class="sym">[</span>end<span class="sym">];
    }

</span>    <span class="kwc">public</span> IntDeQueue <span class="sym">(</span><span class="kwb">int</span> Size<span class="sym">) {
</span>        data <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>Size<span class="sym">+</span><span class="num">1</span><span class="sym">];
</span>	<span class="kwa">this</span><span class="sym">.</span>size<span class="sym">=</span>Size<span class="sym">+</span><span class="num">1</span><span class="sym">;
    }

</span>    <span class="kwc">private</span> <span class="kwb">void</span> Advance<span class="sym">(</span>ref <span class="kwb">int</span> item<span class="sym">)
    {
</span>        <span class="kwa">if</span> <span class="sym">((++</span>item<span class="sym">) ==</span> size<span class="sym">)
</span>            item<span class="sym">=</span><span class="num">0</span><span class="sym">;
    }

</span>    <span class="kwc">private</span> <span class="kwb">void</span> Regress <span class="sym">(</span>ref <span class="kwb">int</span> item<span class="sym">)
    {
</span>        <span class="kwa">if</span> <span class="sym">(</span>item <span class="sym">!=</span> <span class="num">0</span><span class="sym">)
            --</span>item<span class="sym">;
</span>        <span class="kwa">else
</span>            item <span class="sym">= (</span>size<span class="num">-1</span><span class="sym">);
    }

</span>    <span class="kwc">public</span> <span class="kwb">void</span> Clear<span class="sym">()
    {
</span>        start <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>        end <span class="sym">=</span> <span class="num">0</span><span class="sym">;
    }
}

</span><span class="kwc">class</span> lists
<span class="sym">{
</span>    <span class="kwc">public</span> <span class="kwb">const int</span> SIZE<span class="sym">=</span><span class="num">10000</span><span class="sym">;
    [</span>STAThread<span class="sym">]
</span>    <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
    {
</span>        <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwb">int</span><span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>        <span class="kwb">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">; ++</span>i<span class="sym">)
</span>            result <span class="sym">=</span> RunLists<span class="sym">();
</span>        Console<span class="sym">.</span>WriteLine<span class="sym">(</span>result<span class="sym">);
    }

</span>    <span class="kwb">static</span> <span class="kwc">public</span> <span class="kwb">int</span> RunLists<span class="sym">()
    {
</span>        IntDeQueue q <span class="sym">=</span> <span class="kwa">new</span> IntDeQueue<span class="sym">(</span>SIZE<span class="sym">);
</span>        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>SIZE<span class="sym">;++</span>i<span class="sym">)
</span>            q<span class="sym">.</span>PushBack<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span>        IntDeQueue q2 <span class="sym">= (</span>IntDeQueue<span class="sym">)</span>q<span class="sym">.</span>Clone<span class="sym">();
</span>        IntDeQueue q3<span class="sym">=</span><span class="kwa">new</span> IntDeQueue<span class="sym">(</span>SIZE<span class="sym">);
</span>        <span class="kwa">while</span><span class="sym">(!</span>q2<span class="sym">.</span>Empty<span class="sym">)
</span>            q3<span class="sym">.</span>PushBack<span class="sym">(</span>q2<span class="sym">.</span>PopFront<span class="sym">());
</span>        <span class="kwa">while</span><span class="sym">(!</span>q3<span class="sym">.</span>Empty<span class="sym">)
</span>            q2<span class="sym">.</span>PushBack<span class="sym">(</span>q3<span class="sym">.</span>PopBack<span class="sym">());
</span>        q<span class="sym">.</span>Reverse<span class="sym">();
</span>        <span class="kwa">if</span><span class="sym">(</span>q<span class="sym">.</span>PeekFront<span class="sym">() !=</span> SIZE<span class="sym">)
        {
</span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;q.PeekFront()!=SIZE&quot;</span><span class="sym">);
</span>            <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
        }
</span>        <span class="kwa">if</span><span class="sym">(!</span>q<span class="sym">.</span>Equals<span class="sym">(</span>q2<span class="sym">))
        {
</span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;q!=q2&quot;</span><span class="sym">);
</span>            <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
        }

</span>        <span class="kwa">return</span> q<span class="sym">.</span>Count<span class="sym">;
    }
}</span>
