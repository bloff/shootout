<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; Michael Weber 2006-07-18</span>

<span class="sym">(</span>defconstant <span class="sym">+</span><span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">+</span> <span class="num">60</span><span class="sym">)</span>

<span class="sym">(</span>defconstant <span class="sym">+</span>lut<span class="sym">+</span>
  <span class="sym">(</span>let <span class="sym">((</span>lut <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">256</span> <span class="sym">:</span>initial<span class="sym">-</span>element #\*<span class="sym">)))</span>
    <span class="sym">(</span>loop for a across <span class="str">&quot;wsatugcyrkmbdhvnWSATUGCYRKMBDHVN&quot;</span>
          for b across <span class="str">&quot;WSTAACGRYMKVHDBNWSTAACGRYMKVHDBN&quot;</span>
          do <span class="sym">(</span>setf <span class="sym">(</span>char lut <span class="sym">(</span>char<span class="sym">-</span>code a<span class="sym">))</span> b<span class="sym">))</span>
    lut<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">)))</span>
  <span class="sym">(</span>with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span>file <span class="sym">(</span>in <span class="str">&quot;/dev/stdin&quot;</span> <span class="sym">:</span>external<span class="sym">-</span>format <span class="sym">:</span>latin<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
    <span class="sym">(</span>with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span>file <span class="sym">(</span>out <span class="str">&quot;/dev/stdout&quot;</span> <span class="sym">:</span>external<span class="sym">-</span>format <span class="sym">:</span>latin<span class="sym">-</span><span class="num">1</span> <span class="sym">:</span>direction <span class="sym">:</span>output <span class="sym">:</span><span class="kwa">if</span><span class="sym">-</span>exists <span class="sym">:</span><span class="kwa">append</span><span class="sym">)</span>
      <span class="sym">(</span>let <span class="sym">((</span>chunks <span class="str">'()))</span>
<span class="str">        (flet ((flush-chunks ()</span>
<span class="str">                 ;; reverse, complement, write lines of width +line-length+.  all in one go :(</span>
<span class="str">                 (loop with o-buf = (make-string +line-length+)</span>
<span class="str">                       with chunk of-type simple-string</span>
<span class="str">                       with idx of-type (unsigned-byte 29) = 0</span>
<span class="str">                       until (and (endp chunks) (zerop idx))</span>
<span class="str">                       do (loop for j from 0 below +line-length+</span>
<span class="str">                                if (zerop idx) do (setf chunk (or (pop chunks) (loop-finish))</span>
<span class="str">                                                        idx (length (the simple-string chunk)))</span>
<span class="str">                                do (setf (char o-buf j) (char +lut+ (char-code (char chunk (decf idx)))))</span>
<span class="str">                                finally (write-line o-buf out :end j))))</span>
<span class="str">               (chunk-headerp (line)</span>
<span class="str">                 (char= (char (the simple-string line) 0) #</span><span class="esc">\&gt;</span><span class="str">)))</span>
<span class="str">          (declare (inline chunk-headerp flush-chunks))</span>
<span class="str">          (loop for line = (read-line in nil nil) while line</span>
<span class="str">                if (chunk-headerp line)</span>
<span class="str">                do (flush-chunks) and do (write-line line out)</span>
<span class="str">                else do (push line chunks)</span>
<span class="str">                finally (flush-chunks)))))))</span>
