### START revcomp<span class="num">-2</span>.cmucl
<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; written by Patrick Frankenberger
</span><span class="slc">;;; modified by Ralph Richard Cook
</span>
<span class="sym">(</span>defparameter <span class="sym">*</span><span class="kwa">line</span><span class="sym">*</span> nil<span class="sym">)

(</span><span class="kwa">defun</span> complem <span class="sym">(</span>code<span class="sym">)
  (</span>declare <span class="sym">(</span><span class="kwa">type</span> base<span class="sym">-</span>char code<span class="sym">))
  (</span>let <span class="sym">((</span>upcode <span class="sym">(</span>char<span class="sym">-</span>upcase code<span class="sym">)))
    (</span><span class="kwa">cond</span> <span class="sym">((</span>char<span class="sym">=</span> upcode #\A<span class="sym">)</span> #\T<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\C<span class="sym">)</span> #\G<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\G<span class="sym">)</span> #\C<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\T<span class="sym">)</span> #\A<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\U<span class="sym">)</span> #\A<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\M<span class="sym">)</span> #\K<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\R<span class="sym">)</span> #\Y<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\Y<span class="sym">)</span> #\R<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\K<span class="sym">)</span> #\M<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\V<span class="sym">)</span> #\B<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\H<span class="sym">)</span> #\D<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\D<span class="sym">)</span> #\H<span class="sym">)
          ((</span>char<span class="sym">=</span> upcode #\B<span class="sym">)</span> #\V<span class="sym">)
          (</span>t upcode<span class="sym">))))


(</span><span class="kwa">defun</span> write<span class="sym">-</span><span class="kwa">fix</span><span class="sym">-</span>lines <span class="sym">(</span>data<span class="sym">)
  (</span>do <span class="sym">((</span>from <span class="num">0</span><span class="sym">)
       (</span>to <span class="sym">(</span><span class="num">1</span><span class="sym">- (</span><span class="kwa">length</span> data<span class="sym">))))
      ((&gt;</span> from to<span class="sym">)</span> nil<span class="sym">)
      (</span>declare <span class="sym">(</span>fixnum from to<span class="sym">))
    (</span>let <span class="sym">((</span>fromchar <span class="sym">(</span>aref data from<span class="sym">))
          (</span>tochar <span class="sym">(</span>aref data to<span class="sym">)))
      (</span>declare <span class="sym">(</span>base<span class="sym">-</span>char fromchar tochar<span class="sym">))
      (</span><span class="kwa">cond</span> <span class="sym">((</span>char<span class="sym">=</span> fromchar #\Newline<span class="sym">) (</span>incf from<span class="sym">))
            ((</span>char<span class="sym">=</span> tochar #\Newline<span class="sym">) (</span>decf to<span class="sym">))
            (</span>t <span class="sym">(</span><span class="kwa">progn
</span>                 <span class="sym">(</span>setf <span class="sym">(</span>aref data from<span class="sym">) (</span>complem tochar<span class="sym">))
                 (</span>setf <span class="sym">(</span>aref data to<span class="sym">) (</span>complem fromchar<span class="sym">))
                 (</span>incf from<span class="sym">)
                 (</span>decf to<span class="sym">))))))
  (</span>write<span class="sym">-</span>string data<span class="sym">))

(</span><span class="kwa">defun</span> write<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>complement <span class="sym">(</span>title data<span class="sym">)
  (</span>write<span class="sym">-</span><span class="kwa">line</span> title<span class="sym">)
  (</span>write<span class="sym">-</span><span class="kwa">fix</span><span class="sym">-</span>lines data<span class="sym">))

(</span><span class="kwa">defun read</span><span class="sym">-</span>pop <span class="sym">(</span>stream eof<span class="sym">-</span>errorp eof<span class="sym">-</span>value<span class="sym">)
  (</span><span class="kwa">if</span> <span class="sym">*</span><span class="kwa">line</span><span class="sym">* (</span>pop <span class="sym">*</span><span class="kwa">line</span><span class="sym">*)
      (</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> stream eof<span class="sym">-</span>errorp eof<span class="sym">-</span>value<span class="sym">)))

(</span><span class="kwa">defun</span> get<span class="sym">-</span>body <span class="sym">()
  (</span>with<span class="sym">-</span>output<span class="sym">-</span>to<span class="sym">-</span>string <span class="sym">(</span>s<span class="sym">)
      (</span>let <span class="sym">((</span><span class="kwa">line</span> <span class="str">&quot;&quot;</span><span class="sym">))
        (</span>loop
          <span class="sym">(</span>setf <span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>pop <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*</span> nil nil<span class="sym">))
          (</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">null line</span><span class="sym">) (</span>return<span class="sym">))
                ((</span>char<span class="sym">= (</span>aref <span class="kwa">line</span> <span class="num">0</span><span class="sym">)</span> #\<span class="sym">&gt;) (</span><span class="kwa">progn</span> <span class="sym">(</span>push <span class="kwa">line</span> <span class="sym">*</span><span class="kwa">line</span><span class="sym">*) (</span>return<span class="sym">)))
                (</span>t <span class="sym">(</span><span class="kwa">progn</span> <span class="sym">(</span>write<span class="sym">-</span>string <span class="kwa">line</span> s<span class="sym">) (</span>write<span class="sym">-</span>char #\Newline s<span class="sym">))))))))

(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>do <span class="sym">((</span>title <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>pop <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*</span> nil nil<span class="sym">)
              (</span><span class="kwa">read</span><span class="sym">-</span>pop <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*</span> nil nil<span class="sym">)))
      ((</span><span class="kwa">null</span> title<span class="sym">)</span> nil<span class="sym">)
    (</span>write<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>complement title <span class="sym">(</span>get<span class="sym">-</span>body<span class="sym">))))
</span>### END revcomp<span class="num">-2</span>.cmucl


BUILD COMMANDS FOR<span class="sym">:</span> revcomp<span class="num">-2</span>.cmucl

CMUCL built with<span class="sym">: /</span>usr<span class="sym">/</span>bin<span class="sym">/</span>lisp <span class="sym">-</span>noinit <span class="sym">-</span>batch <span class="sym">-</span><span class="kwa">eval</span> <span class="str">&quot;(load</span> <span class="esc">\&quot;</span><span class="str">revcomp-2.cmucl_compile</span><span class="esc">\&quot;</span><span class="str">)&quot;</span>
### START revcomp<span class="num">-2</span>.cmucl_compile
<span class="sym">(</span>proclaim <span class="str">'(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file &quot;revcomp-2.cmucl&quot; :block-compile t  :entry-points '</span><span class="sym">(</span>main<span class="sym">))
(</span><span class="kwa">quit</span><span class="sym">)
</span>### END revcomp<span class="num">-2</span>.cmucl_compile



### START revcomp<span class="num">-2</span>.cmucl_run
<span class="sym">(</span>proclaim <span class="str">'(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load &quot;revcomp-2.x86f&quot; :verbose nil :print nil)
(main) (quit)
### END revcomp-2.cmucl_run

COMMAND LINE

/usr/bin/lisp -noinit -batch -eval &quot;(load</span> <span class="esc">\&quot;</span><span class="str">revcomp-2.cmucl_run</span><span class="esc">\&quot; </span> <span class="str">:verbose nil :print nil)&quot;
</span>
