<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application System

<span class="kwb">define</span>
   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String.toInt Arg<span class="sym">}</span>

   Min_ <span class="sym">=</span> <span class="num">4</span>
   Max_ <span class="sym">= {</span>Max Min_<span class="sym">+</span><span class="num">2</span> N<span class="sym">}</span>
   StretchDepth <span class="sym">=</span> Max_ <span class="sym">+</span> <span class="num">1</span>
   LongLivedTree

   <span class="kwb">fun</span> <span class="sym">{</span>NewTree I D<span class="sym">}</span>
      <span class="kwb">if</span> D <span class="sym">==</span> <span class="num">0</span> <span class="kwb">then</span>
         tree<span class="sym">(</span>I <span class="kwa">nil nil</span><span class="sym">)</span>
      <span class="kwb">else</span>
         tree<span class="sym">(</span>I <span class="sym">{</span>NewTree <span class="num">2</span><span class="sym">*</span>I<span class="sym">-</span><span class="num">1</span> D<span class="sym">-</span><span class="num">1</span><span class="sym">} {</span>NewTree <span class="num">2</span><span class="sym">*</span>I D<span class="sym">-</span><span class="num">1</span><span class="sym">})</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>

   <span class="kwb">fun</span> <span class="sym">{</span>ItemCheck T<span class="sym">}</span>
      <span class="kwb">if</span> T <span class="sym">==</span> <span class="kwa">nil</span> <span class="kwb">then</span> <span class="num">0</span>
      <span class="kwb">else</span> tree<span class="sym">(</span>I L R<span class="sym">) =</span> T <span class="kwb">in</span> I <span class="sym">+ {</span>ItemCheck L<span class="sym">} - {</span>ItemCheck R<span class="sym">}</span> <span class="kwb">end</span>
   <span class="kwb">end</span>

   <span class="kwb">proc</span> <span class="sym">{</span>ShowItemCheck S D T<span class="sym">}</span>
      <span class="sym">{</span>System.showInfo S # D # <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> # <span class="sym">{</span>ItemCheck T<span class="sym">}}</span>
   <span class="kwb">end</span>

   <span class="kwb">proc</span> <span class="sym">{</span>ShowCheck I D Check<span class="sym">}</span>
      <span class="sym">{</span>System.showInfo <span class="num">2</span><span class="sym">*</span>I # <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span> # D # <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> # Check<span class="sym">}</span>
   <span class="kwb">end</span>

<span class="kwb">in</span>
   <span class="sym">{</span>ShowItemCheck <span class="str">&quot;stretch tree of depth &quot;</span> StretchDepth <span class="sym">{</span>NewTree <span class="num">0</span> StretchDepth<span class="sym">}}</span>
   LongLivedTree <span class="sym">= {</span>NewTree <span class="num">0</span> Max_<span class="sym">}</span>

   <span class="kwb">for</span> D <span class="kwb">in</span> Min_<span class="sym">;</span> D<span class="sym">=&lt;</span>Max_<span class="sym">;</span> D<span class="sym">+</span><span class="num">2</span> <span class="kwb">do</span>
      N <span class="sym">= {</span>Pow <span class="num">2</span> Max_<span class="sym">-</span>D<span class="sym">+</span>Min_<span class="sym">}</span>
      Check <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
   <span class="kwb">in</span>
      <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..N <span class="kwb">do</span>
         Check <span class="sym">:=</span> &#64;Check <span class="sym">+ {</span>ItemCheck <span class="sym">{</span>NewTree I D<span class="sym">}} + {</span>ItemCheck <span class="sym">{</span>NewTree ~I D<span class="sym">}}</span>
      <span class="kwb">end</span>
      <span class="sym">{</span>ShowCheck N D &#64;Check<span class="sym">}</span>
   <span class="kwb">end</span>

   <span class="sym">{</span>ShowItemCheck <span class="str">&quot;long lived tree of depth &quot;</span> Max_ LongLivedTree<span class="sym">}</span>
   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
