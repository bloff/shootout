<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo show<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span>

<span class="kwb">define</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>MakeTree Item Left Right<span class="sym">}</span>
    tree<span class="sym">(</span>item<span class="sym">:</span>Item left<span class="sym">:</span>Left right<span class="sym">:</span>Right<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>BottomUpTree Item Depth<span class="sym">}</span>
    <span class="kwb">if</span> Depth <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then</span>
      <span class="sym">{</span>MakeTree Item
        <span class="sym">{</span>BottomUpTree <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> Item <span class="sym">-</span> <span class="num">1</span><span class="sym">) (</span>Depth <span class="sym">-</span> <span class="num">1</span><span class="sym">)}</span>
        <span class="sym">{</span>BottomUpTree <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> Item<span class="sym">) (</span>Depth <span class="sym">-</span> <span class="num">1</span><span class="sym">)}}</span>
    <span class="kwb">else</span>
      <span class="sym">{</span>MakeTree Item <span class="kwa">nil nil</span><span class="sym">}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>CheckTree Tree<span class="sym">}</span>
    <span class="kwb">if</span> Tree.left <span class="sym">==</span> <span class="kwa">nil</span> <span class="kwb">then</span>
      Tree.item
    <span class="kwb">else</span>
      Tree.item <span class="sym">+ {</span>CheckTree Tree.left<span class="sym">} - {</span>CheckTree Tree.right<span class="sym">}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span>
    N Nt <span class="kwb">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String.toInt <span class="sym">{</span>Application.getArgs plain<span class="sym">}</span>.Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwb">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwb">then</span> Default <span class="kwb">else</span> Nt <span class="kwb">end</span>
    <span class="kwa">catch</span> error<span class="sym">(</span>...<span class="sym">)</span> <span class="kwb">then</span>
      N <span class="sym">=</span> Default
    <span class="kwb">end</span>
    N
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  MIN_DEPTH <span class="sym">=</span> <span class="num">4</span>  MAX_DEPTH  STRETCH_DEPTH  LONG_LIVED_TREE  N

  ITERATIONS <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>  CHECK <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>

<span class="slc">% ------------- %</span>

<span class="kwb">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1 10</span><span class="sym">}</span>

  MAX_DEPTH <span class="sym">=</span> <span class="kwb">if</span> MIN_DEPTH <span class="sym">+</span> <span class="num">2</span> <span class="sym">&gt;</span> N <span class="kwb">then</span> MIN_DEPTH <span class="sym">+</span> <span class="num">2</span> <span class="kwb">else</span> N <span class="kwb">end</span>
  STRETCH_DEPTH <span class="sym">=</span> MAX_DEPTH <span class="sym">+</span> <span class="num">1</span>

  <span class="sym">{</span>System.showInfo
    <span class="str">&quot;stretch tree of depth &quot;</span> # STRETCH_DEPTH #
    <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> # <span class="sym">{</span>CheckTree <span class="sym">{</span>BottomUpTree <span class="num">0</span> STRETCH_DEPTH<span class="sym">}}}</span>

  LONG_LIVED_TREE <span class="sym">= {</span>BottomUpTree <span class="num">0</span> MAX_DEPTH<span class="sym">}</span>

  <span class="kwb">for</span> Depth <span class="kwb">in</span> MIN_DEPTH<span class="sym">;(</span>Depth <span class="sym">=&lt;</span> MAX_DEPTH<span class="sym">);(</span>Depth <span class="sym">+</span> <span class="num">2</span><span class="sym">)</span> <span class="kwb">do</span>
    ITERATIONS <span class="sym">:= {</span>Number.pow <span class="num">2</span> <span class="sym">(</span>MAX_DEPTH <span class="sym">-</span> Depth <span class="sym">+</span> MIN_DEPTH<span class="sym">)}</span>

    CHECK <span class="sym">:=</span> <span class="num">0</span>
    <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span><span class="sym">;(</span>I <span class="sym">=&lt;</span> &#64;ITERATIONS<span class="sym">);(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="kwb">do</span>
      CHECK <span class="sym">:=</span> &#64;CHECK <span class="sym">+ {</span>CheckTree <span class="sym">{</span>BottomUpTree I Depth<span class="sym">}}</span>
      CHECK <span class="sym">:=</span> &#64;CHECK <span class="sym">+ {</span>CheckTree <span class="sym">{</span>BottomUpTree ~I Depth<span class="sym">}}</span>
    <span class="kwb">end</span>

    <span class="sym">{</span>System.showInfo
      <span class="sym">(</span>&#64;ITERATIONS <span class="sym">*</span> <span class="num">2</span><span class="sym">)</span> #
      <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span> # Depth #
      <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> # &#64;CHECK<span class="sym">}</span>
  <span class="kwb">end</span>

  <span class="sym">{</span>System.showInfo
    <span class="str">&quot;long lived tree of depth &quot;</span> # MAX_DEPTH #
    <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> # <span class="sym">{</span>CheckTree LONG_LIVED_TREE<span class="sym">}}</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

