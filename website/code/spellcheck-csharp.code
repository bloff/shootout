<span class="com">/* The Great Computer Language Shootout
    contributed by Isaac Gouy */</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;

</span><span class="kwc">class</span> spellcheck
<span class="sym">{
</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
   {
   </span>      <span class="kwb">const int</span> bufferSize <span class="sym">=</span> <span class="num">4096</span><span class="sym">;
</span>      Encoding code <span class="sym">=</span> Encoding<span class="sym">.</span>GetEncoding<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>      Stream s <span class="sym">=</span> Console<span class="sym">.</span>OpenStandardInput<span class="sym">(</span> bufferSize <span class="sym">);
</span>      StreamReader stdin <span class="sym">=</span> <span class="kwa">new</span> StreamReader<span class="sym">(</span>s<span class="sym">,</span> code<span class="sym">,</span> <span class="kwa">false</span><span class="sym">,</span> bufferSize<span class="sym">);

</span>      String word<span class="sym">;
</span>      Hashtable dictionary <span class="sym">=</span> <span class="kwa">new</span> Hashtable<span class="sym">();
 </span>      <span class="kwa">try</span> <span class="sym">{
</span>         StreamReader sr <span class="sym">=</span> <span class="kwa">new</span> StreamReader<span class="sym">(</span><span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">,</span> code<span class="sym">,</span> <span class="kwa">false</span><span class="sym">,</span> bufferSize<span class="sym">);
</span>         <span class="kwa">while</span> <span class="sym">( (</span>word <span class="sym">=</span> sr<span class="sym">.</span>ReadLine<span class="sym">()) !=</span> null <span class="sym">)</span> dictionary<span class="sym">.</span>Add<span class="sym">(</span>word<span class="sym">,</span> null<span class="sym">);
</span>         sr<span class="sym">.</span>Close<span class="sym">();
      }
</span>      <span class="kwa">catch</span> <span class="sym">(</span>FileNotFoundException e<span class="sym">) {
</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span>e<span class="sym">.</span>Message<span class="sym">);
      }

</span>      <span class="kwa">while</span> <span class="sym">( (</span>word <span class="sym">=</span> stdin<span class="sym">.</span>ReadLine<span class="sym">()) !=</span> null <span class="sym">)
 </span>         <span class="kwa">if</span> <span class="sym">(!</span>dictionary<span class="sym">.</span>ContainsKey<span class="sym">(</span>word<span class="sym">))</span> Console<span class="sym">.</span>WriteLine<span class="sym">(</span>word<span class="sym">);
   }
   }</span>
