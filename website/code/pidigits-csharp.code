<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Alp Toker &lt;alp&#64;atoker.com&gt;
*/</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> UBigInteger <span class="sym">=</span> Mono<span class="sym">.</span>Math<span class="sym">.</span>BigInteger<span class="sym">;
</span><span class="kwa">using</span> Sign <span class="sym">=</span> Mono<span class="sym">.</span>Math<span class="sym">.</span>BigInteger<span class="sym">.</span>Sign<span class="sym">;

</span><span class="kwc">public class</span> pidigits
<span class="sym">{
</span>	<span class="kwb">const int</span> L <span class="sym">=</span> <span class="num">10</span><span class="sym">;

</span>	<span class="kwc">public</span> <span class="kwb">static void</span> Main <span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
	{
</span>		<span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">!=</span> <span class="num">1</span><span class="sym">)
</span>			<span class="kwa">return</span><span class="sym">;

</span>		<span class="kwb">int</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse <span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>		<span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>		PiDigitSpigot digits <span class="sym">=</span> <span class="kwa">new</span> PiDigitSpigot <span class="sym">();

</span>		<span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>			<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> L<span class="sym">) {
</span>				<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> i <span class="sym">!=</span> L <span class="sym">;</span> i<span class="sym">++)
</span>					Console<span class="sym">.</span>Write <span class="sym">(</span>digits<span class="sym">.</span>Next <span class="sym">());
</span>				j <span class="sym">+=</span> L<span class="sym">;
			}</span> <span class="kwa">else</span> <span class="sym">{
</span>				<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> i <span class="sym">!=</span> n <span class="sym">;</span> i<span class="sym">++)
</span>					Console<span class="sym">.</span>Write <span class="sym">(</span>digits<span class="sym">.</span>Next <span class="sym">());
</span>				<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> n <span class="sym">;</span> i <span class="sym">!=</span> L <span class="sym">;</span> i<span class="sym">++)
</span>					Console<span class="sym">.</span>Write <span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);
</span>				j <span class="sym">+=</span> n<span class="sym">;
			}

</span>			Console<span class="sym">.</span>Write <span class="sym">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">);
</span>			Console<span class="sym">.</span>WriteLine <span class="sym">(</span>j<span class="sym">);
</span>			n <span class="sym">-=</span> L<span class="sym">;
		}
	}
}

</span><span class="kwc">class</span> PiDigitSpigot
<span class="sym">{
</span>	Transformation z <span class="sym">=</span> <span class="kwa">new</span> Transformation <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span>	Transformation x <span class="sym">=</span> <span class="kwa">new</span> Transformation <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>	Transformation inverse <span class="sym">=</span> <span class="kwa">new</span> Transformation <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);

</span>	<span class="kwc">public</span> <span class="kwb">int</span> Next <span class="sym">()
	{
</span>		<span class="kwb">int</span> y <span class="sym">=</span> Digit<span class="sym">;

</span>		<span class="kwa">if</span> <span class="sym">(</span>IsSafe <span class="sym">(</span>y<span class="sym">))
		{
</span>			z <span class="sym">=</span> Produce <span class="sym">(</span>y<span class="sym">);
</span>			<span class="kwa">return</span> y<span class="sym">;
		}
</span>		<span class="kwa">else</span> <span class="sym">{
</span>			z <span class="sym">=</span> Consume <span class="sym">(</span>x<span class="sym">.</span>Next <span class="sym">());
</span>			<span class="kwa">return</span> Next <span class="sym">();
		}
	}

</span>	<span class="kwc">public</span> <span class="kwb">int</span> Digit
	<span class="sym">{
</span>		get <span class="sym">{
</span>			<span class="kwa">return</span> z<span class="sym">.</span>Extract <span class="sym">(</span><span class="num">3</span><span class="sym">);
		}
	}

</span>	<span class="kwc">public</span> <span class="kwb">bool</span> IsSafe <span class="sym">(</span><span class="kwb">int</span> digit<span class="sym">)
	{
</span>		<span class="kwa">return</span> digit <span class="sym">==</span> z<span class="sym">.</span>Extract <span class="sym">(</span><span class="num">4</span><span class="sym">);
	}

</span>	<span class="kwc">public</span> Transformation Produce <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">)
	{
</span>		<span class="kwa">return</span> <span class="sym">(</span>inverse<span class="sym">.</span>qrst <span class="sym">(</span><span class="num">10</span><span class="sym">,-</span><span class="num">10</span><span class="sym">*</span>i<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">)).</span>Compose <span class="sym">(</span>z<span class="sym">);
	}

</span>	<span class="kwc">public</span> Transformation Consume <span class="sym">(</span>Transformation a<span class="sym">)
	{
</span>		<span class="kwa">return</span> z<span class="sym">.</span>Compose <span class="sym">(</span>a<span class="sym">);
	}
}

</span><span class="kwc">class</span> Transformation
<span class="sym">{
</span>	BigInteger q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">;
</span>	<span class="kwb">int</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>	<span class="kwc">public</span> Transformation <span class="sym">(</span><span class="kwb">int</span> q<span class="sym">,</span> <span class="kwb">int</span> r<span class="sym">,</span> <span class="kwb">int</span> s<span class="sym">,</span> <span class="kwb">int</span> t<span class="sym">)
	{
</span>		<span class="kwa">this</span><span class="sym">.</span>q <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span>q<span class="sym">);
</span>		<span class="kwa">this</span><span class="sym">.</span>r <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span>r<span class="sym">);
</span>		<span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span>s<span class="sym">);
</span>		<span class="kwa">this</span><span class="sym">.</span>t <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span>t<span class="sym">);
	}

</span>	<span class="kwc">public</span> Transformation <span class="sym">(</span>BigInteger q<span class="sym">,</span> BigInteger r<span class="sym">,</span> BigInteger s<span class="sym">,</span> BigInteger t<span class="sym">)
	{
</span>		<span class="kwa">this</span><span class="sym">.</span>q <span class="sym">=</span> q<span class="sym">;
</span>		<span class="kwa">this</span><span class="sym">.</span>r <span class="sym">=</span> r<span class="sym">;
</span>		<span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> s<span class="sym">;
</span>		<span class="kwa">this</span><span class="sym">.</span>t <span class="sym">=</span> t<span class="sym">;
	}

</span>	<span class="kwc">public</span> Transformation Next <span class="sym">()
	{
</span>		k<span class="sym">++;
</span>		q <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span>k<span class="sym">);
</span>		r <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span><span class="num">4</span><span class="sym">*</span>k <span class="sym">+</span> <span class="num">2</span><span class="sym">);
</span>		s <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>		t <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">);

</span>		<span class="kwa">return this</span><span class="sym">;
	}

</span>	<span class="kwc">public</span> <span class="kwb">int</span> Extract <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">)
	{
</span>		BigInteger J <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span>j<span class="sym">);
</span>		<span class="kwa">return</span> <span class="sym">((</span>q <span class="sym">*</span> J <span class="sym">+</span> r<span class="sym">) / (</span>s <span class="sym">*</span> J <span class="sym">+</span> t<span class="sym">)).</span>IntValue <span class="sym">();
	}

</span>	<span class="kwc">public</span> Transformation qrst <span class="sym">(</span><span class="kwb">int</span> q<span class="sym">,</span> <span class="kwb">int</span> r<span class="sym">,</span> <span class="kwb">int</span> s<span class="sym">,</span> <span class="kwb">int</span> t<span class="sym">)
	{
</span>		<span class="kwa">this</span><span class="sym">.</span>q <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span>q<span class="sym">);
</span>		<span class="kwa">this</span><span class="sym">.</span>r <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span>r<span class="sym">);
</span>		<span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span>s<span class="sym">);
</span>		<span class="kwa">this</span><span class="sym">.</span>t <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">(</span>t<span class="sym">);
</span>		k <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>		<span class="kwa">return this</span><span class="sym">;
	}

</span>	<span class="kwc">public</span> Transformation Compose <span class="sym">(</span>Transformation a<span class="sym">)
	{
</span>		<span class="kwa">return new</span> Transformation <span class="sym">(</span>q<span class="sym">*</span>a<span class="sym">.</span>q<span class="sym">,</span> q<span class="sym">*</span>a<span class="sym">.</span>r <span class="sym">+</span> r<span class="sym">*</span>a<span class="sym">.</span>t<span class="sym">,</span> s<span class="sym">*</span>a<span class="sym">.</span>q <span class="sym">+</span> t<span class="sym">*</span>a<span class="sym">.</span>s<span class="sym">,</span> s<span class="sym">*</span>a<span class="sym">.</span>r <span class="sym">+</span> t<span class="sym">*</span>a<span class="sym">.</span>t<span class="sym">);
	}
}

</span><span class="kwc">class</span> BigInteger
<span class="sym">{
</span>	<span class="kwc">protected</span> UBigInteger bi<span class="sym">;
</span>	<span class="kwc">protected</span> Sign sign<span class="sym">;

</span>	<span class="kwc">protected</span> BigInteger <span class="sym">() {}

</span>	<span class="kwc">public</span> BigInteger <span class="sym">(</span><span class="kwb">int</span> value<span class="sym">)
	{
</span>		<span class="kwa">if</span> <span class="sym">(</span>value <span class="sym">==</span> <span class="num">0</span><span class="sym">)
</span>			sign <span class="sym">=</span> Sign<span class="sym">.</span>Zero<span class="sym">;
</span>		<span class="kwa">else if</span> <span class="sym">(</span>value <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)
</span>			sign <span class="sym">=</span> Sign<span class="sym">.</span>Negative<span class="sym">;
</span>		<span class="kwa">else
</span>			sign <span class="sym">=</span> Sign<span class="sym">.</span>Positive<span class="sym">;

</span>		bi <span class="sym">=</span> <span class="kwa">new</span> UBigInteger <span class="sym">((</span><span class="kwb">int</span><span class="sym">)</span>sign<span class="sym">*</span>value<span class="sym">);
	}

</span>	<span class="kwc">public</span> <span class="kwb">int</span> IntValue <span class="sym">()
	{
</span>		<span class="kwa">return</span> <span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span>sign <span class="sym">* (</span><span class="kwb">int</span><span class="sym">)</span>bi<span class="sym">.</span>GetBytes <span class="sym">()[</span><span class="num">0</span><span class="sym">];
	}

</span>	<span class="kwc">public</span> override string ToString <span class="sym">()
	{
</span>		<span class="kwa">return</span> <span class="sym">(</span>sign <span class="sym">==</span> Sign<span class="sym">.</span>Negative ? <span class="str">&quot;-&quot;</span> <span class="sym">:</span> <span class="str">&quot;&quot;</span><span class="sym">) +</span> bi<span class="sym">.</span>ToString <span class="sym">();
	}

</span>	<span class="kwc">public</span> <span class="kwb">static</span> BigInteger <span class="kwc">operator</span> <span class="sym">* (</span>BigInteger bi1<span class="sym">,</span> BigInteger bi2<span class="sym">)
	{
</span>		BigInteger ret <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">();
</span>		ret<span class="sym">.</span>bi <span class="sym">=</span> bi1<span class="sym">.</span>bi <span class="sym">*</span> bi2<span class="sym">.</span>bi<span class="sym">;
</span>		ret<span class="sym">.</span>sign <span class="sym">= (</span>Sign<span class="sym">) ((</span><span class="kwb">int</span><span class="sym">)</span>bi1<span class="sym">.</span>sign <span class="sym">* (</span><span class="kwb">int</span><span class="sym">)</span>bi2<span class="sym">.</span>sign<span class="sym">);
</span>		<span class="kwa">return</span> ret<span class="sym">;
	}

</span>	<span class="kwc">public</span> <span class="kwb">static</span> BigInteger <span class="kwc">operator</span> <span class="sym">/ (</span>BigInteger bi1<span class="sym">,</span> BigInteger bi2<span class="sym">)
	{
</span>		BigInteger ret <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">();
</span>		ret<span class="sym">.</span>bi <span class="sym">=</span> bi1<span class="sym">.</span>bi <span class="sym">/</span> bi2<span class="sym">.</span>bi<span class="sym">;
</span>		ret<span class="sym">.</span>sign <span class="sym">= (</span>Sign<span class="sym">) ((</span><span class="kwb">int</span><span class="sym">)</span>bi1<span class="sym">.</span>sign <span class="sym">* (</span><span class="kwb">int</span><span class="sym">)</span>bi2<span class="sym">.</span>sign<span class="sym">);
</span>		<span class="kwa">return</span> ret<span class="sym">;
	}

</span>	<span class="kwc">public</span> <span class="kwb">static</span> BigInteger <span class="kwc">operator</span> <span class="sym">+ (</span>BigInteger bi1<span class="sym">,</span> BigInteger bi2<span class="sym">)
	{
</span>		BigInteger ret <span class="sym">=</span> <span class="kwa">new</span> BigInteger <span class="sym">();
</span>		<span class="kwa">if</span> <span class="sym">(</span>bi1<span class="sym">.</span>sign <span class="sym">==</span> Sign<span class="sym">.</span>Zero<span class="sym">)
</span>			<span class="kwa">return</span> bi2<span class="sym">;

</span>		<span class="kwa">if</span> <span class="sym">(</span>bi2<span class="sym">.</span>sign <span class="sym">==</span> Sign<span class="sym">.</span>Zero<span class="sym">)
</span>			<span class="kwa">return</span> bi1<span class="sym">;

</span>		<span class="kwa">if</span> <span class="sym">(</span>bi1<span class="sym">.</span>sign <span class="sym">==</span> bi2<span class="sym">.</span>sign<span class="sym">) {
</span>			ret<span class="sym">.</span>bi <span class="sym">=</span> bi1<span class="sym">.</span>bi <span class="sym">+</span> bi2<span class="sym">.</span>bi<span class="sym">;
</span>			ret<span class="sym">.</span>sign <span class="sym">=</span> bi1<span class="sym">.</span>sign<span class="sym">;
</span>			<span class="kwa">return</span> ret<span class="sym">;
		}

</span>		<span class="kwa">if</span> <span class="sym">(</span>bi1<span class="sym">.</span>bi <span class="sym">==</span> bi2<span class="sym">.</span>bi<span class="sym">) {
</span>			ret<span class="sym">.</span>bi <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>			ret<span class="sym">.</span>sign <span class="sym">=</span> Sign<span class="sym">.</span>Zero<span class="sym">;
</span>			<span class="kwa">return</span> ret<span class="sym">;
		}

</span>		<span class="kwa">if</span> <span class="sym">(</span>bi1<span class="sym">.</span>bi <span class="sym">&lt;</span> bi2<span class="sym">.</span>bi<span class="sym">) {
</span>			ret<span class="sym">.</span>bi <span class="sym">=</span> bi2<span class="sym">.</span>bi <span class="sym">-</span> bi1<span class="sym">.</span>bi<span class="sym">;
</span>			ret<span class="sym">.</span>sign <span class="sym">= (</span>Sign<span class="sym">)((</span><span class="kwb">int</span><span class="sym">)</span>Sign<span class="sym">.</span>Positive <span class="sym">* (</span><span class="kwb">int</span><span class="sym">)</span>bi2<span class="sym">.</span>sign<span class="sym">);
</span>			<span class="kwa">return</span> ret<span class="sym">;
		}</span> <span class="kwa">else</span> <span class="sym">{
</span>			ret<span class="sym">.</span>bi <span class="sym">=</span> bi1<span class="sym">.</span>bi <span class="sym">-</span> bi2<span class="sym">.</span>bi<span class="sym">;
</span>			ret<span class="sym">.</span>sign <span class="sym">= (</span>Sign<span class="sym">)((</span><span class="kwb">int</span><span class="sym">)</span>Sign<span class="sym">.</span>Negative <span class="sym">* (</span><span class="kwb">int</span><span class="sym">)</span>bi2<span class="sym">.</span>sign<span class="sym">);
</span>			<span class="kwa">return</span> ret<span class="sym">;
		}
	}
}
</span>
