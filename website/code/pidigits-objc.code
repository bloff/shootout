<span class="com">/* -*- mode: objc -*-</span>
<span class="com"> *</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Original C contributed by Mike Pall</span>
<span class="com"> * Conversion to Objective-C by Selman Ulug</span>
<span class="com"> */</span>

<span class="dir">#include &lt;objc/Object.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;gmp.h&gt;</span>

<span class="kwa">&#64;interface</span> Pidigits <span class="sym">:</span> Object
<span class="sym">{</span>
  mpz_t q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">;</span>     <span class="com">/* Transformation matrix components. */</span>
  mpz_t u<span class="sym">,</span> v<span class="sym">,</span> w<span class="sym">;</span>        <span class="com">/* Temporary numbers. */</span>
  <span class="kwb">int</span> d<span class="sym">,</span> i<span class="sym">,</span> n<span class="sym">;</span>          <span class="com">/* Counters. */</span>
  <span class="kwb">char</span> digits<span class="sym">[</span><span class="num">10</span><span class="sym">+</span><span class="num">1</span><span class="sym">];</span>    <span class="com">/* Accumulated digits for one line. */</span>
<span class="sym">}</span>
<span class="sym">-</span> init<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>c<span class="sym">;</span>
<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> compose_r<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bq <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>br <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bs <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bt<span class="sym">;</span>
<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> compose_l<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bq <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>br <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bs <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bt<span class="sym">;</span>
<span class="sym">- (</span><span class="kwb">int</span><span class="sym">)</span> extract<span class="sym">: (</span><span class="kwb">unsigned int</span><span class="sym">)</span>j<span class="sym">;</span>
<span class="sym">- (</span><span class="kwb">int</span><span class="sym">)</span> prdigit<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>y<span class="sym">;</span>
<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> generate<span class="sym">;</span>
<span class="kwa">&#64;end</span>

<span class="kwa">&#64;implementation</span> Pidigits
<span class="sym">-</span> init<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>c
<span class="sym">{</span>
  <span class="sym">[</span><span class="kwa">super</span> init<span class="sym">];</span>
  n <span class="sym">=</span> c<span class="sym">;</span>
  <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* Compose matrix with numbers on the right. */</span>
<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> compose_r<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bq <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>br <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bs <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bt<span class="sym">;</span>
<span class="sym">{</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>u<span class="sym">,</span> r<span class="sym">,</span> bs<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>r<span class="sym">,</span> r<span class="sym">,</span> bq<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>v<span class="sym">,</span> t<span class="sym">,</span> br<span class="sym">);</span>
  <span class="kwd">mpz_add</span><span class="sym">(</span>r<span class="sym">,</span> r<span class="sym">,</span> v<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>t<span class="sym">,</span> t<span class="sym">,</span> bt<span class="sym">);</span>
  <span class="kwd">mpz_add</span><span class="sym">(</span>t<span class="sym">,</span> t<span class="sym">,</span> u<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>s<span class="sym">,</span> s<span class="sym">,</span> bt<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>u<span class="sym">,</span> q<span class="sym">,</span> bs<span class="sym">);</span>
  <span class="kwd">mpz_add</span><span class="sym">(</span>s<span class="sym">,</span> s<span class="sym">,</span> u<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>q<span class="sym">,</span> q<span class="sym">,</span> bq<span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/* Compose matrix with numbers on the left. */</span>
<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> compose_l<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bq <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>br <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bs <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>bt<span class="sym">;</span>
<span class="sym">{</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>r<span class="sym">,</span> r<span class="sym">,</span> bt<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>u<span class="sym">,</span> q<span class="sym">,</span> br<span class="sym">);</span>
  <span class="kwd">mpz_add</span><span class="sym">(</span>r<span class="sym">,</span> r<span class="sym">,</span> u<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>u<span class="sym">,</span> t<span class="sym">,</span> bs<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>t<span class="sym">,</span> t<span class="sym">,</span> bt<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>v<span class="sym">,</span> s<span class="sym">,</span> br<span class="sym">);</span>
  <span class="kwd">mpz_add</span><span class="sym">(</span>t<span class="sym">,</span> t<span class="sym">,</span> v<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>s<span class="sym">,</span> s<span class="sym">,</span> bq<span class="sym">);</span>
  <span class="kwd">mpz_add</span><span class="sym">(</span>s<span class="sym">,</span> s<span class="sym">,</span> u<span class="sym">);</span>
  <span class="kwd">mpz_mul_si</span><span class="sym">(</span>q<span class="sym">,</span> q<span class="sym">,</span> bq<span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/* Extract one digit. */</span>
<span class="sym">- (</span><span class="kwb">int</span><span class="sym">)</span> extract<span class="sym">: (</span><span class="kwb">unsigned int</span><span class="sym">)</span>j<span class="sym">;</span>
<span class="sym">{</span>
  <span class="kwd">mpz_mul_ui</span><span class="sym">(</span>u<span class="sym">,</span> q<span class="sym">,</span> j<span class="sym">);</span>
  <span class="kwd">mpz_add</span><span class="sym">(</span>u<span class="sym">,</span> u<span class="sym">,</span> r<span class="sym">);</span>
  <span class="kwd">mpz_mul_ui</span><span class="sym">(</span>v<span class="sym">,</span> s<span class="sym">,</span> j<span class="sym">);</span>
  <span class="kwd">mpz_add</span><span class="sym">(</span>v<span class="sym">,</span> v<span class="sym">,</span> t<span class="sym">);</span>
  <span class="kwd">mpz_tdiv_q</span><span class="sym">(</span>w<span class="sym">,</span> u<span class="sym">,</span> v<span class="sym">);</span>
  <span class="kwa">return</span> <span class="kwd">mpz_get_ui</span><span class="sym">(</span>w<span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/* Print one digit. Returns 1 for the last digit. */</span>
<span class="sym">- (</span><span class="kwb">int</span><span class="sym">)</span> prdigit<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span>y<span class="sym">;</span>
<span class="sym">{</span>
  digits<span class="sym">[</span>d<span class="sym">++] =</span> <span class="str">'0'</span><span class="sym">+</span>y<span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(++</span>i <span class="sym">%</span> <span class="num">10</span> <span class="sym">==</span> <span class="num">0</span> <span class="sym">||</span> i <span class="sym">==</span> n<span class="sym">)</span>
    <span class="sym">{</span>
      digits<span class="sym">[</span>d<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;</span>
      <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%-10s</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> digits<span class="sym">,</span> i<span class="sym">);</span>
      d <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>
  <span class="kwa">return</span> i <span class="sym">==</span> n<span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* Generate successive digits of PI. */</span>
<span class="sym">- (</span><span class="kwb">void</span><span class="sym">)</span> generate<span class="sym">;</span>
<span class="sym">{</span>
  <span class="kwb">int</span> k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
  d <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwd">mpz_init_set_ui</span><span class="sym">(</span>q<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwd">mpz_init_set_ui</span><span class="sym">(</span>r<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwd">mpz_init_set_ui</span><span class="sym">(</span>s<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwd">mpz_init_set_ui</span><span class="sym">(</span>t<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwd">mpz_init</span><span class="sym">(</span>u<span class="sym">);</span>
  <span class="kwd">mpz_init</span><span class="sym">(</span>v<span class="sym">);</span>
  <span class="kwd">mpz_init</span><span class="sym">(</span>w<span class="sym">);</span>
  <span class="kwa">for</span> <span class="sym">(;;)</span>
    <span class="sym">{</span>
      <span class="kwb">int</span> y <span class="sym">= [</span><span class="kwa">self</span> extract<span class="sym">:</span> <span class="num">3</span><span class="sym">];</span>
      <span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">== [</span><span class="kwa">self</span> extract<span class="sym">:</span> <span class="num">4</span><span class="sym">])</span>
	<span class="sym">{</span>
	  <span class="kwa">if</span> <span class="sym">([</span><span class="kwa">self</span> prdigit<span class="sym">:</span> y<span class="sym">])</span> <span class="kwa">return</span><span class="sym">;</span>
	  <span class="sym">[</span><span class="kwa">self</span> compose_r<span class="sym">:</span> <span class="num">10</span> <span class="sym">: -</span><span class="num">10</span><span class="sym">*</span>y <span class="sym">:</span> <span class="num">0</span> <span class="sym">:</span> <span class="num">1</span><span class="sym">];</span>
	<span class="sym">}</span>
      <span class="kwa">else</span>
	<span class="sym">{</span>
	  <span class="sym">[</span><span class="kwa">self</span> compose_l<span class="sym">:</span> k <span class="sym">:</span> <span class="num">4</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span> <span class="sym">:</span> <span class="num">0</span> <span class="sym">:</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
	  k<span class="sym">++;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
<span class="kwa">&#64;end</span>

<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">int</span> n <span class="sym">=</span> argc <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span> <span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">27</span><span class="sym">;</span>
  Pidigits<span class="sym">*</span> pidigits <span class="sym">= [[</span>Pidigits alloc<span class="sym">]</span> init<span class="sym">:</span> n<span class="sym">];</span>
  <span class="sym">[</span>pidigits generate<span class="sym">];</span>
  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
