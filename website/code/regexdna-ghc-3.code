<span class="com">{-# OPTIONS -funbox-strict-fields #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- http://haskell.org/hawiki/ShootoutEntry</span>
<span class="slc">-- Contributed by Don Stewart, Chris Kuklewicz and Alson Kemp.</span>
<span class="slc">--</span>
<span class="slc">-- Compile with: -O2 -package parsec</span>
<span class="slc">--</span>
<span class="slc">-- An idiomatic Haskell entry using lazy regex combinators, described in the paper:</span>
<span class="slc">--</span>
<span class="slc">--  Manuel  M. T. Chakravarty, Lazy Lexing is Fast.</span>
<span class="slc">--  In A. Middeldorp and T. Sato, editors, Proceedings of Fourth Fuji</span>
<span class="slc">--  International Symposium on Functional and Logic Programming,</span>
<span class="slc">--  Springer-Verlag, LNCS 1722, 1999.</span>
<span class="slc">--</span>
<span class="slc">-- For more about higher-order combinator-based lexing and parsing in Haskell consult:</span>
<span class="slc">--</span>
<span class="slc">--  Graham Hutton. Higher-order functions for parsing. (1992)</span>
<span class="slc">--  Journal of Functional Programming 2: 232-343.</span>
<span class="slc">--</span>
<span class="slc">--  Jeroen Fokker. Functional Parsers. (1995)</span>
<span class="slc">--  Lecture Notes of the Baastad Spring school on Functional Programming.</span>
<span class="slc">--</span>
<span class="slc">--  Graham Hutton and Erik Meijer. Monadic Parser Combinators. (1996)</span>
<span class="slc">--  Technical report NOTTCS-TR-96-4. Department of Computer Science, University of Nottingham.</span>
<span class="slc">--</span>
<span class="slc">--  Steve Hill. Combinators for parsing expressions. (1996)</span>
<span class="slc">--  Journal of Functional Programming 6(3): 445-463.</span>
<span class="slc">--</span>
<span class="slc">--  Andrew Partridge and David Wright.</span>
<span class="slc">--  Predictive parser combinators need four values to report errors. (1996)</span>
<span class="slc">--  Journal of Functional Programming 6(2): 355-364.</span>
<span class="slc">--</span>
<span class="slc">--  Doaitse Swierstra and Luc Duponcheel.</span>
<span class="slc">--  Deterministic, Error-Correcting Combinator Parsers. (1996)</span>
<span class="slc">--  Advanced Functional Programming. LNCS 1129: 185-207.</span>
<span class="slc">--</span>
<span class="slc">--  Pieter Koopman and Rinus Plasmeijer. Efficient Combinator Parsers. (1999)</span>
<span class="slc">--  Implementation of Functional Languages. Springer Verlag, LNCS 1595: 122-138.</span>
<span class="slc">--</span>
<span class="slc">--  Doaitse Swierstra and Pablo Azero.</span>
<span class="slc">--  Fast, Error Correcting Parser Combinators: A Short Tutorial. (1999)</span>
<span class="slc">--  SOFSEM'99 Theory and Practice of Informatics. LNCS 1725: 111-129.</span>
<span class="slc">--</span>
<span class="slc">--  Arthur Baars, Andres Loh, and Doaitse Swierstra. Parsing Permutation Phrases. (2001)</span>
<span class="slc">--  Proceedings of the ACM SIGPLAN Haskell Workshop, 171?183.</span>
<span class="slc">--</span>
<span class="slc">-- And many other sources.</span>
<span class="slc">--</span>
<span class="kwa">import</span> List <span class="sym">(</span>sort<span class="sym">,</span>nub<span class="sym">,(</span>\\<span class="sym">))</span>
<span class="kwa">import</span> Data.Array <span class="sym">(</span>Array<span class="sym">, (!),</span> assocs<span class="sym">,</span> accumArray<span class="sym">)</span>
<span class="kwa">import</span> Control.Monad <span class="sym">(</span>liftM<span class="sym">)</span>
<span class="kwa">import qualified</span> Data.Map <span class="kwa">as</span> M
<span class="kwa">import qualified</span> Text.ParserCombinators.Parsec <span class="kwa">as</span> P
<span class="kwa">import</span> Text.ParserCombinators.Parsec <span class="sym">((&lt;|&gt;),(&lt;</span>?<span class="sym">&gt;),</span>pzero<span class="sym">)</span>

main <span class="sym">=</span> interact $ \stdin <span class="sym">-&gt;</span>
    <span class="kwa">let</span> l0     <span class="sym">=</span> show $ length stdin <span class="kwa">in</span> l0 `seq`
    <span class="kwa">let</span> clean  <span class="sym">=</span> fst $ run <span class="sym">(</span>reDelete <span class="str">&quot;\n|&gt;[^\n]+\n&quot;</span><span class="sym">)</span> stdin <span class="num">0</span>
        l1     <span class="sym">=</span> show $ length clean <span class="kwa">in</span> l1 `seq`
    <span class="kwa">let</span> counts <span class="sym">= [</span> stringRegex<span class="sym">++</span><span class="str">&quot; &quot;</span><span class="sym">++(</span>show . snd . snd $ <span class="sym">(</span>run <span class="sym">(</span>reCount stringRegex<span class="sym">)</span> clean <span class="num">0</span><span class="sym">)) |</span>
                   stringRegex <span class="sym">&lt;-</span> variants <span class="sym">]</span>  <span class="slc">-- Count the variants one at a time.</span>
        l2     <span class="sym">=</span> show $ length <span class="sym">(</span>iubsExpand clean<span class="sym">)</span>
    <span class="kwa">in</span> unlines $ counts <span class="sym">++ [[],</span>l0<span class="sym">,</span> l1<span class="sym">,</span> l2<span class="sym">]</span>

<span class="slc">-- Substitute certain chars for patterns. The replacements are running one at a time.</span>
iubsExpand <span class="sym">=</span> foldl1 <span class="sym">(</span>.<span class="sym">) (</span>map <span class="sym">(</span>\snew input <span class="sym">-&gt;</span> concat . fst $ run <span class="sym">(</span>reReplace snew<span class="sym">)</span> input <span class="num">0</span><span class="sym">)</span> iubs<span class="sym">)</span>

variants <span class="sym">= [</span>    <span class="str">&quot;agggtaaa|tttaccct&quot;</span>    <span class="sym">,</span><span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span><span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
           <span class="sym">,</span><span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span><span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span><span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
           <span class="sym">,</span><span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span><span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span><span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">]</span>

iubs <span class="sym">= [(</span><span class="str">&quot;B&quot;</span><span class="sym">,</span><span class="str">&quot;(c|g|t)&quot;</span><span class="sym">),(</span><span class="str">&quot;D&quot;</span><span class="sym">,</span><span class="str">&quot;(a|g|t)&quot;</span><span class="sym">),(</span><span class="str">&quot;H&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c|t)&quot;</span><span class="sym">),(</span><span class="str">&quot;K&quot;</span><span class="sym">,</span><span class="str">&quot;(g|t)&quot;</span><span class="sym">) ,(</span><span class="str">&quot;M&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c)&quot;</span><span class="sym">)</span>
 <span class="sym">,(</span><span class="str">&quot;N&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">),(</span><span class="str">&quot;R&quot;</span><span class="sym">,</span><span class="str">&quot;(a|g)&quot;</span><span class="sym">) ,(</span><span class="str">&quot;S&quot;</span><span class="sym">,</span><span class="str">&quot;(c|g)&quot;</span><span class="sym">),(</span><span class="str">&quot;V&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c|g)&quot;</span><span class="sym">),(</span><span class="str">&quot;W&quot;</span><span class="sym">,</span><span class="str">&quot;(a|t)&quot;</span><span class="sym">) ,(</span><span class="str">&quot;Y&quot;</span><span class="sym">,</span><span class="str">&quot;(c|t)&quot;</span><span class="sym">)]</span>

<span class="slc">----------------------------------------------------------------</span>
<span class="slc">-- Construct a regex combinator from a string regex (use Parsec)</span>
<span class="slc">-- Designed to follow &quot;man re_format&quot; (Mac OS X 10.4.4)</span>
<span class="slc">--</span>
<span class="slc">-- The regular expressions accepted by the program include those using</span>
<span class="slc">-- |, empty group (), grouping with ( and ), wildcard '.', backslach</span>
<span class="slc">-- escaped characters &quot;\.&quot;, greedy modifiers ? + and *, bracketed</span>
<span class="slc">-- alternatives including ranges such as [a-z0-9] and inverted</span>
<span class="slc">-- brackets such as [^]\n-].</span>

<span class="slc">-- regex is the only &quot;exported&quot; function from this section</span>
regex <span class="sym">= (</span>either <span class="sym">(</span>error.show<span class="sym">)</span> id<span class="sym">)</span> . <span class="sym">(</span>\x <span class="sym">-&gt;</span> P.parse p_regex x x<span class="sym">)</span>

p_regex <span class="sym">=</span> liftM <span class="sym">(</span>foldr1 <span class="sym">(&gt;|&lt;)) (</span>P.sepBy1 p_branch <span class="sym">(</span>P.char <span class="str">'|'</span><span class="sym">))</span>

p_branch <span class="sym">=</span> liftM <span class="sym">((</span>$ epsilon<span class="sym">)</span>.<span class="sym">(</span>foldr <span class="sym">(</span>.<span class="sym">)</span> id<span class="sym">)) (</span>P.many1 <span class="sym">(</span>p_atom <span class="sym">&gt;&gt;=</span> p_post_atom<span class="sym">))</span>

p_atom <span class="sym">=</span> P.try <span class="sym">(</span>P.string <span class="str">&quot;()&quot;</span> <span class="sym">&gt;&gt;</span> return epsilon<span class="sym">)</span>
     <span class="sym">&lt;|&gt;</span> P.between <span class="sym">(</span>P.char <span class="str">'('</span><span class="sym">) (</span>P.char <span class="str">')'</span><span class="sym">)</span> p_regex
     <span class="sym">&lt;|&gt;</span> p_bracket <span class="sym">&lt;|&gt;</span> p_dot <span class="sym">&lt;|&gt;</span> p_escaped_char <span class="sym">&lt;|&gt;</span> p_other_char
     <span class="sym">&lt;|&gt; (</span>pzero <span class="sym">&lt;</span>?<span class="sym">&gt;</span> <span class="str">&quot;cannot parse regexp atom&quot;</span><span class="sym">)</span>

p_post_atom atom <span class="sym">= (</span>P.char <span class="str">'?'</span> <span class="sym">&gt;&gt;</span> return <span class="sym">(</span>atom `quest`<span class="sym">))</span>
               <span class="sym">&lt;|&gt; (</span>P.char <span class="str">'+'</span> <span class="sym">&gt;&gt;</span> return <span class="sym">(</span>atom `plus`<span class="sym">))</span>
               <span class="sym">&lt;|&gt; (</span>P.char <span class="str">'*'</span> <span class="sym">&gt;&gt;</span> return <span class="sym">(</span>atom `star`<span class="sym">))</span>
               <span class="sym">&lt;|&gt; (</span>return <span class="sym">(</span>atom <span class="sym">+&gt;))</span>

p_bracket <span class="sym">= (</span>P.char <span class="str">'['</span><span class="sym">) &gt;&gt; ( (</span>P.char <span class="str">'^'</span> <span class="sym">&gt;&gt;</span> p_set <span class="kwa">True</span><span class="sym">) &lt;|&gt; (</span>p_set <span class="kwa">False</span><span class="sym">) )</span>

p_set invert <span class="sym">=</span> <span class="kwa">do</span> initial <span class="sym">&lt;- (</span>P.option <span class="str">&quot;&quot;</span> <span class="sym">((</span>P.char <span class="str">']'</span> <span class="sym">&gt;&gt;</span> return <span class="str">&quot;]&quot;</span><span class="sym">) &lt;|&gt; (</span>P.char <span class="str">'-'</span> <span class="sym">&gt;&gt;</span> return <span class="str">&quot;-&quot;</span><span class="sym">)))</span>
                  middle <span class="sym">&lt;-</span> P.manyTill P.anyChar <span class="sym">(</span>P.char <span class="str">']'</span><span class="sym">)</span>
                  <span class="kwa">let</span> expand <span class="sym">[] = []</span>
                      expand <span class="sym">(</span><span class="str">'-'</span><span class="sym">:[]) =</span> <span class="str">&quot;-&quot;</span>
                      expand <span class="sym">(</span>a<span class="sym">:</span><span class="str">'-'</span><span class="sym">:</span>b<span class="sym">:</span>rest<span class="sym">) |</span> a <span class="sym">/=</span> <span class="str">'-'</span> <span class="sym">= (</span>enumFromTo a b<span class="sym">)++(</span>expand rest<span class="sym">)</span>
                      expand <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) |</span> x <span class="sym">/=</span> <span class="str">'-'</span>  <span class="sym">=</span> x<span class="sym">:(</span>expand xs<span class="sym">)</span>
                                    <span class="sym">|</span> otherwise <span class="sym">=</span> error <span class="str">&quot;A dash is in the wrong place in a p_set&quot;</span>
                      characters <span class="sym">=</span> nub <span class="sym">(</span> sort <span class="sym">(</span>initial <span class="sym">++ (</span>expand middle<span class="sym">)) )</span>
                  return $ if invert <span class="kwa">then</span> alt <span class="sym">( [</span><span class="str">'\0'</span>..<span class="str">'\127'</span><span class="sym">]</span> \\ characters <span class="sym">)</span>
                                     <span class="kwa">else</span> alt characters

p_dot <span class="sym">=</span> P.char <span class="str">'.'</span> <span class="sym">&gt;&gt;</span> return <span class="sym">(</span>alt <span class="sym">[</span><span class="str">'\0'</span>..<span class="str">'\127'</span><span class="sym">])</span>

p_escaped_char <span class="sym">=</span> P.char <span class="str">'\\'</span> <span class="sym">&gt;&gt;</span> liftM char P.anyChar

p_other_char <span class="sym">=</span> liftM char <span class="sym">(</span>P.noneOf specials<span class="sym">)</span> <span class="kwa">where</span> specials <span class="sym">=</span> <span class="str">&quot;^.[$()|*+?\\&quot;</span>

<span class="slc">------------------------------------------------------------------------</span>
<span class="slc">--  And everything else is the CTK library.</span>
<span class="slc">--</span>
<span class="slc">--  Compiler Toolkit: Self-optimizing lexers</span>
<span class="slc">--</span>
<span class="slc">--  Author : Manuel M. T. Chakravarty</span>
<span class="slc">--  Created: 24 February 95, 2 March 99</span>
<span class="slc">--  Copyright (c) [1995..2000] Manuel M. T. Chakravarty</span>
<span class="slc">--  Copyright (c) 2004-6 Don Stewart</span>
<span class="slc">--</span>
<span class="slc">--  Self-optimizing lexer combinators.</span>
<span class="slc">--</span>
<span class="slc">--  For detailed information, see ``Lazy Lexing is Fast'', Manuel</span>
<span class="slc">--  M. T. Chakravarty, in A. Middeldorp and T. Sato, editors, Proceedings of</span>
<span class="slc">--  Fourth Fuji International Symposium on Functional and Logic Programming,</span>
<span class="slc">--  Springer-Verlag, LNCS 1722, 1999.  (See my Web page for details.)</span>
<span class="slc">--</span>
<span class="slc">--             http://www.cse.unsw.edu.au/~chak/papers/Cha99.html</span>
<span class="slc">--</span>
<span class="slc">--  Thanks to Simon L. Peyton Jones and Roman Leshchinskiy for their</span>
<span class="slc">--  helpful suggestions that improved the design of this library.</span>

<span class="slc">-- EXTERNAL INTERFACE</span>

<span class="kwa">infixr</span> <span class="num">4</span> `quest`<span class="sym">,</span> `star`<span class="sym">,</span> `plus`
<span class="kwa">infixl</span> <span class="num">3</span> <span class="sym">+&gt;,</span> `action`<span class="sym">,</span> `meta`
<span class="kwa">infixl</span> <span class="num">2</span> <span class="sym">&gt;|&lt;, &gt;||&lt;</span>

reDelete s <span class="sym">= (</span>regex <span class="str">&quot;.&quot;</span> `action` \<span class="sym">[</span>c<span class="sym">] -&gt;</span> Just c<span class="sym">) &gt;||&lt; (</span>regex s `action` const Nothing<span class="sym">)</span>
reCount s <span class="sym">=</span> regex s `meta1` \_ lexer m <span class="sym">-&gt;</span> R Nothing <span class="sym">(</span>succ m<span class="sym">)</span> lexer
reReplace <span class="sym">(</span>s<span class="sym">,</span>new<span class="sym">) = (</span>regex <span class="str">&quot;.&quot;</span> `action` Just<span class="sym">) &gt;||&lt; (</span>regex s `action` const <span class="sym">(</span>Just new<span class="sym">))</span>

<span class="slc">-- Empty lexeme (noop)</span>
epsilon <span class="sym">=</span> id <span class="sym">::</span> Regexp t

<span class="slc">-- One character regexp</span>
char c <span class="sym">= (</span>\l <span class="sym">-&gt;</span> Lexer NoAction <span class="sym">(</span>Sparse <span class="sym">(</span>B <span class="num">1</span> c c<span class="sym">) (</span>M.singleton c l<span class="sym">))) ::</span> Regexp t

<span class="slc">-- accepts a non-empty set of alternative characters</span>
<span class="slc">-- Equiv. to `(foldr1 (&gt;|&lt;) . map char) cs', but much faster</span>
alt cs  <span class="sym">=</span> \l <span class="sym">-&gt;</span> <span class="kwa">let</span> bnds <span class="sym">=</span> B <span class="sym">(</span>length cs<span class="sym">) (</span>minimum cs<span class="sym">) (</span>maximum cs<span class="sym">)</span>
                <span class="kwa">in</span> Lexer NoAction <span class="sym">(</span>aggregate bnds <span class="sym">[(</span>c<span class="sym">,</span> l<span class="sym">) |</span> c <span class="sym">&lt;-</span> cs<span class="sym">])</span>

<span class="slc">-- accept a character sequence</span>
string cs <span class="sym">= (</span>foldr1 <span class="sym">(+&gt;)</span> . map char<span class="sym">)</span> cs

<span class="slc">-- Concatenation of regexps is just concatenation of functions</span>
<span class="sym">(+&gt;)  = (</span>.<span class="sym">) ::</span> Regexp t <span class="sym">-&gt;</span> Regexp t <span class="sym">-&gt;</span> Regexp t

<span class="slc">-- disjunctive combination of two regexps, corresponding to x|y</span>
re1 <span class="sym">&gt;|&lt;</span> re2  <span class="sym">=</span> \l <span class="sym">-&gt;</span> re1 l <span class="sym">&gt;||&lt;</span> re2 l

<span class="slc">-- x `quest` y corresponds to the regular expression x?y</span>
quest re1 re2  <span class="sym">= (</span>re1 <span class="sym">+&gt;</span> re2<span class="sym">) &gt;|&lt;</span> re2

<span class="slc">-- x `plus` y corresponds to the regular expression x+y</span>
plus re1 re2  <span class="sym">=</span> re1 <span class="sym">+&gt; (</span>re1 `star` re2<span class="sym">)</span>

<span class="slc">-- x `star` y corresponds to the regular expression x*y</span>
<span class="slc">--</span>
<span class="slc">-- The definition used below can be obtained by equational reasoning from this</span>
<span class="slc">-- one (which is much easier to understand):</span>
<span class="slc">--</span>
<span class="slc">--   star re1 re2 = let self = (re1 +&gt; self &gt;|&lt; epsilon) in self +&gt; re2</span>
<span class="slc">--</span>
<span class="slc">-- However, in the above, `self' is of type `Regexp s t' (ie, a functional),</span>
<span class="slc">-- whereas below it is of type `Lexer s t'.  Thus, below we have a graphical</span>
<span class="slc">-- body (finite representation of an infinite structure), which doesn't grow</span>
<span class="slc">-- with the size of the accepted lexeme - in contrast to the definition using</span>
<span class="slc">-- the functional recursion.</span>
star re1 re2  <span class="sym">=</span> \l <span class="sym">-&gt;</span> <span class="kwa">let</span> self <span class="sym">=</span> re1 self <span class="sym">&gt;||&lt;</span> re2 l <span class="kwa">in</span> self

<span class="slc">-- Close a regular expression into a Lexer with an action that</span>
<span class="slc">-- converts the lexeme into a token.  action and meta advance by the</span>
<span class="slc">-- length of the lexeme while action1 and meta1 advance a single</span>
<span class="slc">-- character.</span>
action re a  <span class="sym">=</span> re `meta` a<span class="str">' where a'</span> lexeme lexer s <span class="sym">=</span> R <span class="sym">(</span>a lexeme<span class="sym">)</span> s lexer
<span class="com">{-# INLINE action #-}</span>
action1 re a  <span class="sym">=</span> re `meta1` a<span class="str">' where a'</span> lexeme lexer s <span class="sym">=</span> R <span class="sym">(</span>a lexeme<span class="sym">)</span> s lexer
<span class="com">{-# INLINE action1 #-}</span>
meta re a  <span class="sym">=</span> re <span class="sym">(</span>Lexer <span class="sym">(</span>Action a<span class="sym">)</span> Done<span class="sym">)</span>
<span class="com">{-# INLINE meta #-}</span>
meta1 re a  <span class="sym">=</span> re <span class="sym">(</span>Lexer <span class="sym">(</span>Action1 a<span class="sym">)</span> Done<span class="sym">)</span>
<span class="com">{-# INLINE meta1 #-}</span>

<span class="slc">-- disjunctive combination of two lexers (longest match, right biased)</span>
<span class="sym">(</span>Lexer a c<span class="sym">) &gt;||&lt; (</span>Lexer a<span class="str">' c'</span><span class="sym">)  =</span> Lexer <span class="sym">(</span>joinActions a a<span class="str">') (joinConts c c'</span><span class="sym">)</span>

<span class="slc">-- Take a Lexer, input string, and initial state</span>
<span class="slc">-- Returns ([token],(remaining input,final state))</span>
run _ <span class="sym">[]</span> state <span class="sym">= ([], ([],</span>state<span class="sym">))</span>
run l csIn state <span class="sym">=</span> <span class="kwa">case</span> lexOne l csIn state <span class="kwa">of</span>
  <span class="sym">(</span>Nothing <span class="sym">,</span> _ <span class="sym">,</span> cs<span class="str">', state'</span><span class="sym">) -&gt;</span> run l cs<span class="str">' state'</span>
  <span class="sym">(</span>Just t  <span class="sym">,</span> l<span class="str">', cs'</span><span class="sym">,</span> state<span class="str">') -&gt; let (ts, final) = run l'</span> cs<span class="str">' state'</span><span class="sym">;</span> ts<span class="str">' = (t:ts)</span>
<span class="str">                                 in ts'</span> `seq` <span class="sym">(</span>ts<span class="str">',final)</span>
<span class="str">  where</span>
<span class="str">    -- accept a single lexeme</span>
<span class="str">    lexOne l0 cs0 state0 = oneLexeme l0 cs0 state0 id lexErr</span>
<span class="str"></span>
<span class="str">      where</span>
<span class="str">        lexErr = (Just undefined, l, tail cs0, state0)</span>
<span class="str"></span>
<span class="str">        -- we implement the &quot;principle of the longest match&quot; by taking</span>
<span class="str">        -- a potential result quad down (in the last argument); the</span>
<span class="str">        -- potential result quad is updated whenever we pass by an</span>
<span class="str">        -- action (different from `NoAction'</span><span class="sym">);</span> initially it is lexErr
        oneLexeme <span class="sym">(</span>Lexer a cont<span class="sym">)</span> cs state csDL last <span class="sym">=</span>
          <span class="kwa">let</span> last<span class="str">' = case a of NoAction -&gt; last; _ -&gt; doaction a (csDL []) cs state last</span>
<span class="str">          in case cs of</span>
<span class="str">               []      -&gt; last'</span>    <span class="slc">-- at end, has to be this action</span>
               <span class="sym">(</span>c<span class="sym">:</span>cs<span class="str">') -&gt; last'</span> `seq` oneChar cont c cs<span class="str">' state csDL last'</span>   <span class="slc">-- keep looking</span>

        <span class="slc">-- There are more chars. Look at the next one. Now, if the</span>
        <span class="slc">-- next tbl is Done, then there is no next transition, so</span>
        <span class="slc">-- immediately execute the matching action.</span>
        oneChar tbl c cs state csDL last <span class="sym">=</span> <span class="kwa">case</span> peek tbl c <span class="kwa">of</span>
          <span class="sym">(</span>Lexer action Done<span class="sym">)   -&gt;</span> doaction action <span class="sym">(</span>csDL <span class="sym">[</span>c<span class="sym">])</span> cs state last
          l<span class="str">'                    -&gt; oneLexeme l'</span> cs state <span class="sym">(</span>csDL . <span class="sym">(</span>c<span class="sym">:))</span> last

        <span class="slc">-- Do the lookup of the current character in the DFA transition table.</span>
        peek <span class="sym">(</span>Dense bn arr<span class="sym">)</span>  c <span class="sym">|</span> c `inBounds` bn <span class="sym">=</span> arr <span class="sym">!</span> c
        peek <span class="sym">(</span>Sparse bn cls<span class="sym">)</span> c <span class="sym">|</span> c `inBounds` bn <span class="sym">=</span> M.findWithDefault <span class="sym">(</span>Lexer NoAction Done<span class="sym">)</span> c cls
        peek _ _ <span class="sym">= (</span>Lexer NoAction Done<span class="sym">)</span>

        <span class="slc">-- execute the action if present and finalise the current lexeme</span>
        doaction <span class="sym">(</span>Action f<span class="sym">)</span> csDL cs state _ <span class="sym">=</span>  <span class="kwa">case</span> f <span class="sym">(</span>csDL<span class="sym">)</span> l0 state <span class="kwa">of</span>
          <span class="sym">(</span>R Nothing s<span class="str">' l'</span><span class="sym">) |</span> not . null $ cs <span class="sym">-&gt;</span> s<span class="str">' `seq` lexOne l'</span> cs s<span class="str">'</span>
<span class="str">          (R res     s'</span> l<span class="str">')                   -&gt; s'</span> `seq` <span class="sym">(</span>res<span class="sym">,</span> l<span class="str">', cs, s'</span><span class="sym">)</span>
        doaction <span class="sym">(</span>Action1 f<span class="sym">)</span> csDL cs state _ <span class="sym">=</span> <span class="kwa">case</span> f <span class="sym">(</span>csDL<span class="sym">)</span> l0 state <span class="kwa">of</span>
          <span class="sym">(</span>R Nothing s<span class="str">' l'</span><span class="sym">) |</span> not . null $ cs <span class="sym">-&gt;</span> s<span class="str">' `seq` lexOne l'</span> <span class="sym">(</span>tail csIn<span class="sym">)</span> s<span class="str">'</span>
<span class="str">          (R res     s'</span> l<span class="str">')                   -&gt; s'</span> `seq` <span class="sym">(</span>res<span class="sym">,</span> l<span class="str">', (tail csIn), s'</span><span class="sym">)</span>
        doaction NoAction _ _ _ last <span class="sym">=</span> last

<span class="slc">-- INTERNAL IMPLEMENTATION</span>

<span class="slc">-- represents the number of (non-error) elements and the bounds of a</span>
<span class="slc">-- DFA transition table</span>
<span class="kwa">data</span> BoundsNum <span class="sym">=</span> B <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Char</span> <span class="sym">!</span><span class="kwb">Char</span>

<span class="slc">-- we use the dense representation if a table has at least the given</span>
<span class="slc">-- number of (non-error) elements</span>
denseMin  <span class="sym">=</span> <span class="num">20</span> <span class="sym">::</span> <span class="kwb">Int</span>

<span class="slc">-- combine two bounds</span>
addBoundsNum <span class="sym">(</span>B n lc hc<span class="sym">) (</span>B n<span class="str">' lc'</span> hc<span class="str">')  = B (n + n'</span><span class="sym">) (</span>min lc lc<span class="str">') (max hc hc'</span><span class="sym">)</span>

<span class="slc">-- check whether a character is in the bounds</span>
inBounds c <span class="sym">(</span>B _ lc hc<span class="sym">) =</span> c <span class="sym">&gt;=</span> lc <span class="sym">&amp;&amp;</span> c <span class="sym">&lt;=</span> hc

<span class="slc">-- Lexical actions take a lexeme with its position and may return a</span>
<span class="slc">-- token; in a variant, an error can be returned</span>
<span class="slc">--</span>
<span class="slc">-- * if there is no token returned, the current lexeme is discarded</span>
<span class="slc">--   lexing continues looking for a token</span>
<span class="kwa">type</span> Action t <span class="sym">=</span> String <span class="sym">-&gt;</span> Lexer t <span class="sym">-&gt;</span> Maybe t

<span class="slc">-- Meta actions transform the lexeme, the old lexer, and a</span>
<span class="slc">-- user-defined state; they may return the old or a new lexer, which</span>
<span class="slc">-- is then used for accepting the next token (this is important to</span>
<span class="slc">-- implement non-regular behaviour like nested comments)</span>
<span class="kwa">type</span> Meta t <span class="sym">=</span> String <span class="sym">-&gt;</span> Lexer t <span class="sym">-&gt;</span> S <span class="sym">-&gt;</span> Result t

<span class="kwa">data</span> Result t <span class="sym">=</span> R <span class="sym">(</span>Maybe t<span class="sym">) !</span>S <span class="sym">!(</span>Lexer t<span class="sym">)</span>

<span class="slc">-- threaded top-down during lexing (with current input)</span>
<span class="kwa">type</span> S <span class="sym">=</span> <span class="kwb">Int</span>

<span class="slc">-- tree structure used to represent the lexer table</span>
<span class="slc">--</span>
<span class="slc">-- * each node in the tree corresponds to a state of the lexer; the</span>
<span class="slc">--   associated actions are those that apply when the corresponding</span>
<span class="slc">--   state is reached</span>
<span class="kwa">data</span> Lexer t <span class="sym">=</span> Lexer <span class="sym">(</span>LexAction t<span class="sym">) (</span>Cont t<span class="sym">)</span>

<span class="slc">-- represent the continuation of a lexer</span>
            <span class="slc">-- on top of the tree, where entries are dense, we use arrays</span>
<span class="kwa">data</span> Cont t <span class="sym">=</span> Dense BoundsNum <span class="sym">(</span>Array <span class="kwb">Char</span> <span class="sym">(</span>Lexer t<span class="sym">))</span>
            <span class="slc">-- further down, where the valid entries are sparse, we</span>
            <span class="slc">-- use association lists, to save memory</span>
            <span class="sym">|</span> Sparse BoundsNum <span class="sym">(</span>M.Map <span class="kwb">Char</span> <span class="sym">(</span>Lexer t<span class="sym">))</span>
            <span class="slc">-- end of a automaton</span>
            <span class="sym">|</span> Done

<span class="slc">-- lexical action</span>
<span class="kwa">data</span> LexAction t <span class="sym">=</span> Action <span class="sym">!(</span>Meta t<span class="sym">) |</span> Action1 <span class="sym">!(</span>Meta t<span class="sym">) |</span> NoAction  <span class="slc">-- need new LexAction for advance by 1</span>

<span class="slc">-- a regular expression</span>
<span class="kwa">type</span> Regexp t <span class="sym">=</span> Lexer t <span class="sym">-&gt;</span> Lexer t

<span class="slc">-- combine two disjunctive continuations</span>
joinConts Done c<span class="str">'   = c'</span>
joinConts c    Done <span class="sym">=</span> c
joinConts c    c<span class="str">'   = let (bn , cls ) = listify c</span>
<span class="str">                          (bn'</span><span class="sym">,</span> cls<span class="str">') = listify c'</span>
                      <span class="slc">-- note: `addsBoundsNum' can, at this point, only</span>
                      <span class="slc">--       approx. the number of *non-overlapping* cases;</span>
                      <span class="slc">--       however, the bounds are correct</span>
                      <span class="kwa">in</span> aggregate <span class="sym">(</span>addBoundsNum bn bn<span class="str">') (cls ++ cls'</span><span class="sym">)</span>
  <span class="kwa">where</span> listify <span class="sym">(</span>Dense  n arr<span class="sym">) = (</span>n<span class="sym">,</span> assocs arr<span class="sym">)</span>
        listify <span class="sym">(</span>Sparse n cls<span class="sym">) = (</span>n<span class="sym">,</span> M.toList cls<span class="sym">)</span>

<span class="slc">-- combine two actions. Use the latter in case of overlap (right biased!)</span>
joinActions NoAction a<span class="str">'       = a'</span>
joinActions a        NoAction <span class="sym">=</span> a
joinActions _        a<span class="str">'       = a'</span> <span class="slc">-- error &quot;Lexers.&gt;||&lt;: Overlapping actions!&quot;</span>

<span class="slc">-- Note: `n' is only an upper bound of the number of non-overlapping cases</span>
aggregate bn&#64;<span class="sym">(</span>B n lc hc<span class="sym">)</span> cls
  <span class="sym">|</span> n <span class="sym">&gt;=</span> denseMin <span class="sym">=</span> Dense  bn <span class="sym">(</span>accumArray <span class="sym">(&gt;||&lt;) (</span>Lexer NoAction Done<span class="sym">) (</span>lc<span class="sym">,</span> hc<span class="sym">)</span> cls<span class="sym">)</span>
  <span class="sym">|</span> otherwise     <span class="sym">=</span> Sparse bn <span class="sym">(</span>M.fromList <span class="sym">(</span>accum <span class="sym">(&gt;||&lt;)</span> cls<span class="sym">))</span>

<span class="slc">-- combine the elements in the association list that have the same key</span>
accum _ <span class="sym">[]           = []</span>
accum f <span class="sym">((</span>c<span class="sym">,</span> el<span class="sym">):</span>ces<span class="sym">) =</span> <span class="kwa">let</span> <span class="sym">(</span>ce<span class="sym">,</span> ces<span class="str">') = gather c el ces in ce : accum f ces'</span>
  <span class="kwa">where</span> gather k e <span class="sym">[]                             = ((</span>k<span class="sym">,</span> e<span class="sym">), [])</span>
        gather k e <span class="sym">(</span>ke<span class="str">'&#64;(k'</span><span class="sym">,</span> e<span class="str">'):kes) | k == k'</span>   <span class="sym">=</span> gather k <span class="sym">(</span>f e e<span class="str">') kes</span>
<span class="str">                                      | otherwise = let (ke'</span><span class="str">', kes'</span><span class="sym">) =</span> gather k e kes
                                                    <span class="kwa">in</span> <span class="sym">(</span>ke<span class="str">''</span><span class="sym">,</span> ke<span class="str">':kes'</span><span class="sym">)</span>

