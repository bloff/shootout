<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>
<span class="slc">% based on Greg Buchholz's C program</span>

<span class="kwa">functor</span>
<span class="kwa">import</span>
   Application Open

<span class="kwb">define</span>

   <span class="kwa">class</span> MandelbrotWriter
      <span class="kwa">attr</span> side zr zi cr ci tr ti bits<span class="sym">:</span><span class="num">0</span> bitnum<span class="sym">:</span><span class="num">0</span>

      <span class="kwb">meth</span> init<span class="sym">(</span>X<span class="sym">)</span>
         side <span class="sym">:=</span> X
      <span class="kwb">end</span>

      <span class="kwb">meth</span> write<span class="sym">(</span>F<span class="sym">)</span>
         <span class="kwa">local</span>
            M <span class="sym">=</span> <span class="num">50</span>
            Limit2 <span class="sym">=</span> <span class="num">4.0</span>
            IYMax <span class="sym">=</span> &#64;side <span class="sym">-</span> <span class="num">1</span>
            IXMax <span class="sym">=</span> IYMax
            YMax <span class="sym">= {</span>IntToFloat &#64;side<span class="sym">}</span>
            XMax <span class="sym">=</span> YMax

         <span class="kwb">in</span>
            <span class="sym">{</span>F putS<span class="sym">(</span><span class="str">&quot;P4&quot;</span><span class="sym">)}</span>
            <span class="sym">{</span>F putS<span class="sym">({</span>IntToString &#64;side<span class="sym">}</span> # <span class="str">&quot; &quot;</span> # <span class="sym">{</span>IntToString &#64;side<span class="sym">})}</span>

            <span class="kwb">for</span> IY <span class="kwb">in</span> <span class="num">0</span>..IYMax <span class="kwb">do</span>
               <span class="kwa">local</span> Y <span class="sym">= {</span>IntToFloat IY<span class="sym">}</span> <span class="kwb">in</span>
                  <span class="kwb">for</span> IX <span class="kwb">in</span> <span class="num">0</span>..IXMax <span class="kwb">do</span>
                     <span class="kwa">local</span> X <span class="sym">= {</span>IntToFloat IX<span class="sym">}</span> <span class="kwb">in</span>

                        zr <span class="sym">:=</span> <span class="num">0.0</span>
                        zi <span class="sym">:=</span> <span class="num">0.0</span>
                        tr <span class="sym">:=</span> <span class="num">0.0</span>
                        ti <span class="sym">:=</span> <span class="num">0.0</span>
                        cr <span class="sym">:=</span> <span class="num">2.0</span><span class="sym">*</span>X <span class="sym">/</span> XMax <span class="sym">-</span> <span class="num">1.5</span>
                        ci <span class="sym">:=</span> <span class="num">2.0</span><span class="sym">*</span>Y <span class="sym">/</span> YMax <span class="sym">-</span> <span class="num">1.0</span>

                        <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">0</span><span class="sym">;</span> I<span class="sym">&lt;</span>M andthen &#64;tr <span class="sym">+</span> &#64;ti <span class="sym">=&lt;</span> Limit2<span class="sym">;</span> I<span class="sym">+</span><span class="num">1</span> <span class="kwb">do</span>
                           zi <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> &#64;zr <span class="sym">*</span> &#64;zi <span class="sym">+</span> &#64;ci
                           zr <span class="sym">:=</span> &#64;tr <span class="sym">-</span> &#64;ti <span class="sym">+</span> &#64;cr
                           tr <span class="sym">:=</span> &#64;zr<span class="sym">*</span>&#64;zr
                           ti <span class="sym">:=</span>  &#64;zi<span class="sym">*</span>&#64;zi
                        <span class="kwb">end</span>

                        bits <span class="sym">:=</span> &#64;bits <span class="sym">*</span> <span class="num">2</span>
                        <span class="kwb">if</span> &#64;tr <span class="sym">+</span> &#64;ti <span class="sym">=&lt;</span> Limit2 <span class="kwb">then</span> bits <span class="sym">:=</span> &#64;bits <span class="sym">+</span> <span class="num">1</span> <span class="kwb">end</span>

                        bitnum <span class="sym">:=</span> &#64;bitnum <span class="sym">+</span> <span class="num">1</span>

                        <span class="kwb">if</span> &#64;bitnum <span class="sym">==</span> <span class="num">8</span> <span class="kwb">then</span>
                           <span class="sym">{</span>F putC<span class="sym">(</span>&#64;bits<span class="sym">)}</span>
                           bits <span class="sym">:=</span> <span class="num">0</span> bitnum <span class="sym">:=</span> <span class="num">0</span>
                        <span class="kwb">elseif</span> IX <span class="sym">==</span> IXMax <span class="kwb">then</span>
                           bits <span class="sym">:=</span> &#64;bits <span class="sym">* {</span>Pow <span class="num">2</span> <span class="sym">(</span><span class="num">8</span> <span class="sym">- (</span>&#64;side mod <span class="num">8</span><span class="sym">))}</span>
                           <span class="sym">{</span>F putC<span class="sym">(</span>&#64;bits<span class="sym">)}</span>
                           bits <span class="sym">:=</span> <span class="num">0</span> bitnum <span class="sym">:=</span> <span class="num">0</span>
                        <span class="kwb">end</span>

                      <span class="kwb">end</span>
                   <span class="kwb">end</span>
               <span class="kwb">end</span>
            <span class="kwb">end</span>

         <span class="kwb">end</span>
      <span class="kwb">end</span>

   <span class="kwb">end</span>   <span class="slc">% MandelbrotWriter</span>

   <span class="kwa">class</span> TextFile <span class="kwb">from</span> Open.file Open.text <span class="kwb">end</span>


   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String.toInt Arg<span class="sym">}</span>

   Mandelbrot <span class="sym">= {</span>New MandelbrotWriter init<span class="sym">(</span>N<span class="sym">)}</span>
   StdOut <span class="sym">= {</span>New TextFile init<span class="sym">(</span>name<span class="sym">:</span>stdout<span class="sym">)}</span>

<span class="kwb">in</span>
   <span class="sym">{</span>Mandelbrot write<span class="sym">(</span>StdOut<span class="sym">)}</span>
   <span class="sym">{</span>StdOut close<span class="sym">}</span>
   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
