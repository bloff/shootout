<span class="line">    1 </span><span class="slc">-- $Id: echo-ghc.code,v 1.3 2004-11-11 07:13:56 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- Haskell echo/client server
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- written by Brian Gregor
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">-- simplified / updated by JP Bernardy
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">-- compile with:
</span><span class="line">    7 </span><span class="slc"></span><span class="slc">--      ghc -O2 -o echo echo.hs
</span><span class="line">    8 </span><span class="slc"></span>
<span class="line">    9 </span><span class="kwa">import</span> Control.Concurrent
<span class="line">   10 </span><span class="kwa">import</span> Control.Monad<span class="sym">(</span>when<span class="sym">)
</span><span class="line">   11 </span><span class="sym"></span><span class="kwa">import</span> Network
<span class="line">   12 </span><span class="kwa">import</span> System <span class="sym">(</span>getArgs<span class="sym">,</span>exitFailure<span class="sym">)
</span><span class="line">   13 </span><span class="sym"></span><span class="kwa">import</span> System.IO
<span class="line">   14 </span>
<span class="line">   15 </span>message            <span class="sym">=</span> <span class="str">&quot;Hello there sailor&quot;</span>
<span class="line">   16 </span>portnum     <span class="sym">=</span> <span class="num">7001
</span><span class="line">   17 </span><span class="num">
</span><span class="line">   18 </span><span class="num"></span>echo_server <span class="sym">=</span> <span class="kwa">do</span> sock <span class="sym">&lt;-</span> listenOn <span class="sym">(</span>PortNumber portnum<span class="sym">)
</span><span class="line">   19 </span><span class="sym">                 (</span>s<span class="sym">,</span> _<span class="sym">,</span> _<span class="sym">) &lt;-</span> accept sock
<span class="line">   20 </span>                 hSetBuffering s LineBuffering
<span class="line">   21 </span>                 proc <span class="sym">&lt;-</span> read_data s <span class="num">0
</span><span class="line">   22 </span><span class="num"></span>                 putStrLn <span class="sym">(</span><span class="str">&quot;server processed &quot;</span> <span class="sym">++</span> show proc <span class="sym">++</span> <span class="str">&quot; bytes&quot;</span><span class="sym">)
</span><span class="line">   23 </span><span class="sym"></span>                 hClose s
<span class="line">   24 </span>
<span class="line">   25 </span>read_data sock totalbytes <span class="sym">=
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwa">do</span> eof <span class="sym">&lt;-</span> hIsEOF sock
<span class="line">   27 </span>       if eof <span class="kwa">then</span> return totalbytes
<span class="line">   28 </span>              <span class="kwa">else do</span> str <span class="sym">&lt;-</span> hGetLine sock
<span class="line">   29 </span>                      hPutStrLn sock str
<span class="line">   30 </span>                      read_data sock <span class="sym">(</span>totalbytes <span class="sym">+</span> length str <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   31 </span><span class="sym">
</span><span class="line">   32 </span><span class="sym"></span>echo_client n <span class="sym">=</span> <span class="kwa">do</span> s <span class="sym">&lt;-</span> connectTo <span class="str">&quot;127.0.0.1&quot;</span> <span class="sym">(</span>PortNumber portnum<span class="sym">)
</span><span class="line">   33 </span><span class="sym"></span>                   hSetBuffering s LineBuffering
<span class="line">   34 </span>                   mapM_ <span class="sym">(</span>server_echo s<span class="sym">) [</span><span class="num">1</span>..n<span class="sym">]
</span><span class="line">   35 </span><span class="sym"></span>                   hClose s
<span class="line">   36 </span>
<span class="line">   37 </span>server_echo sock n <span class="sym">=</span> <span class="kwa">do</span> hPutStrLn sock message
<span class="line">   38 </span>                        str <span class="sym">&lt;-</span> hGetLine sock
<span class="line">   39 </span>                        when <span class="sym">(</span>str <span class="sym">/=</span> message<span class="sym">)</span> exitFailure
<span class="line">   40 </span>
<span class="line">   41 </span>main <span class="sym">=</span> withSocketsDo $ <span class="kwa">do</span> <span class="sym">[</span>n<span class="sym">] &lt;-</span> getArgs
<span class="line">   42 </span>                          forkIO <span class="sym">(</span>echo_client <span class="sym">(</span>read n<span class="sym">::</span><span class="kwb">Int</span><span class="sym">))
</span><span class="line">   43 </span><span class="sym"></span>                          echo_server
<span class="line">   44 </span>
<span class="line">   45 </span>
<span class="line">   46 </span>
<span class="line">   47 </span>
<span class="line">   48 </span>
