<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: echo-ghc.code,v 1.2 2004-11-08 08:15:12 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- Haskell echo/client server
</FONT></I><I><FONT COLOR="#B22222">-- written by Brian Gregor
</FONT></I><I><FONT COLOR="#B22222">-- simplified / updated by JP Bernardy
</FONT></I><I><FONT COLOR="#B22222">-- compile with:
</FONT></I><I><FONT COLOR="#B22222">--      ghc -O2 -o echo echo.hs
</FONT></I>
<B><FONT COLOR="#A020F0">import</FONT></B> Control.Concurrent
<B><FONT COLOR="#A020F0">import</FONT></B> Control.Monad(when)
<B><FONT COLOR="#A020F0">import</FONT></B> Network 
<B><FONT COLOR="#A020F0">import</FONT></B> System (getArgs,exitFailure)
<B><FONT COLOR="#A020F0">import</FONT></B> System.IO

message	    = <B><FONT COLOR="#BC8F8F">&quot;Hello there sailor&quot;</FONT></B>
portnum     = 7001

echo_server = do sock &lt;- listenOn (PortNumber portnum)
		 (s, <B><FONT COLOR="#A020F0">_, </FONT></B><B><FONT COLOR="#A020F0">_) </FONT></B>&lt;- accept sock
		 hSetBuffering s LineBuffering
		 proc &lt;- read_data s 0
		 putStrLn (<B><FONT COLOR="#BC8F8F">&quot;server processed &quot;</FONT></B> ++ show proc ++ <B><FONT COLOR="#BC8F8F">&quot; bytes&quot;</FONT></B>)
		 hClose s

read_data sock totalbytes = 
    do eof &lt;- hIsEOF sock
       <B><FONT COLOR="#A020F0">if</FONT></B> eof <B><FONT COLOR="#A020F0">then</FONT></B> return totalbytes 
	      <B><FONT COLOR="#A020F0">else</FONT></B> do str &lt;- hGetLine sock
	              hPutStrLn sock str
	              read_data sock (totalbytes + length str + 1)

echo_client n = do s &lt;- connectTo <B><FONT COLOR="#BC8F8F">&quot;127.0.0.1&quot;</FONT></B> (PortNumber portnum)
		   hSetBuffering s LineBuffering
		   mapM_ (server_echo s) [1..n]
		   hClose s

server_echo sock n = do hPutStrLn sock message
	                str &lt;- hGetLine sock 
		        when (str /= message) exitFailure

main = withSocketsDo $ do [n] &lt;- getArgs
			  forkIO (echo_client (read n<B><FONT COLOR="#228B22">::Int))
</FONT></B>			  echo_server




</pre></td></tr></table>
