<span class="slc"># The Computer Language Shootout Benchmarks</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># Adapted from Eiffel version by bearophile, Jan 9 2006</span>

<span class="kwc">import</span> psyco<span class="sym">,</span> sys

<span class="kwb">def</span> <span class="kwd">mandel</span><span class="sym">():</span>
    chrd <span class="sym">=</span> <span class="kwd">dict</span><span class="sym">((</span>i<span class="sym">,</span> <span class="kwa">chr</span><span class="sym">(</span>i<span class="sym">))</span> <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">256</span><span class="sym">))</span>
    size <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>
    <span class="kwb">print</span> <span class="str">&quot;P4&quot;</span>
    <span class="kwb">print</span> size<span class="sym">,</span> size

    limit <span class="sym">=</span> <span class="num">4.0</span>
    iter <span class="sym">=</span> <span class="num">50</span>
    bit <span class="sym">=</span> <span class="num">0x80</span>
    bit_accu <span class="sym">=</span> <span class="num">0</span>
    gone <span class="sym">=</span> False
    <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>size<span class="sym">):</span>
        ci <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> y <span class="sym">/</span> size <span class="sym">-</span> <span class="num">1.0</span>
        <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>size<span class="sym">):</span>
            cr <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> x <span class="sym">/</span> size <span class="sym">-</span> <span class="num">1.5</span>
            zr <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> zi <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> pr <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> pi <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">=</span> <span class="num">0</span>
            <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>iter<span class="sym">):</span>
                zi <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> zr <span class="sym">*</span> zi <span class="sym">+</span> ci
                zr <span class="sym">=</span> pr <span class="sym">-</span> pi <span class="sym">+</span> cr
                pi <span class="sym">=</span> zi <span class="sym">*</span> zi
                pr <span class="sym">=</span> zr <span class="sym">*</span> zr
                <span class="kwb">if</span> pi<span class="sym">+</span>pr <span class="sym">&gt;</span> limit<span class="sym">:</span>
                    gone <span class="sym">=</span> True
                    <span class="kwb">break</span>

            <span class="kwb">if</span> gone<span class="sym">:</span>
                gone <span class="sym">=</span> False
            <span class="kwb">else</span><span class="sym">:</span>
                bit_accu <span class="sym">|=</span> bit

            <span class="kwb">if</span> bit <span class="sym">==</span> <span class="num">1</span><span class="sym">:</span>
                sys<span class="sym">.</span>stdout<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>chrd<span class="sym">[</span>bit_accu<span class="sym">])</span>
                bit_accu <span class="sym">=</span> <span class="num">0</span>
                bit <span class="sym">=</span> <span class="num">0x80</span>
            <span class="kwb">else</span><span class="sym">:</span>
                bit <span class="sym">&gt;&gt;=</span> <span class="num">1</span>

        <span class="kwb">if</span> bit <span class="sym">!=</span> <span class="num">0x80</span><span class="sym">:</span>
            sys<span class="sym">.</span>stdout<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>chrd<span class="sym">[</span>bit_accu<span class="sym">])</span>
            bit_accu <span class="sym">=</span> <span class="num">0</span>
            bit <span class="sym">=</span> <span class="num">0x80</span>

psyco<span class="sym">.</span><span class="kwd">bind</span><span class="sym">(</span>mandel<span class="sym">)</span>
<span class="kwd">mandel</span><span class="sym">()</span>
