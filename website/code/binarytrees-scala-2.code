<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Kannan Goundan</span>
<span class="com">   modified by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">object</span> binarytrees <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> n <span class="sym">=</span> <span class="kwa">try</span> <span class="sym">{</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">)) }</span> <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> _ <span class="sym">=&gt;</span> <span class="num">1</span> <span class="sym">}</span>
      <span class="kwa">val</span> minDepth <span class="sym">=</span> <span class="num">4</span>
      <span class="kwa">val</span> maxDepth <span class="sym">=</span> <span class="kwc">Math</span><span class="sym">.</span>max<span class="sym">(</span>minDepth<span class="sym">+</span><span class="num">2</span><span class="sym">,</span>n<span class="sym">)</span>

      print<span class="sym">(</span><span class="str">&quot;stretch tree&quot;</span><span class="sym">,</span> maxDepth<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> <span class="kwa">new</span> Tree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">+</span><span class="num">1</span><span class="sym">).</span>isum<span class="sym">)</span>

      <span class="kwa">val</span> longLivedTree <span class="sym">=</span> <span class="kwa">new</span> Tree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">)</span>

      <span class="kwa">var</span> depth <span class="sym">=</span> minDepth
      <span class="kwa">while</span> <span class="sym">(</span>depth <span class="sym">&lt;=</span> maxDepth<span class="sym">) {</span>
         <span class="kwa">val</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">)</span>

         <span class="kwa">var</span> sum <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>iterations<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
            sum <span class="sym">=</span> sum <span class="sym">+</span> <span class="kwa">new</span> Tree<span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">).</span>isum <span class="sym">+</span> <span class="kwa">new</span> Tree<span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">).</span>isum

         print<span class="sym">(</span>iterations<span class="sym">*</span><span class="num">2</span> <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees&quot;</span><span class="sym">,</span> depth<span class="sym">,</span> sum<span class="sym">)</span>
         depth <span class="sym">=</span> depth <span class="sym">+</span> <span class="num">2</span>
      <span class="sym">}</span>
      print<span class="sym">(</span><span class="str">&quot;long lived tree&quot;</span><span class="sym">,</span> maxDepth<span class="sym">,</span> longLivedTree<span class="sym">.</span>isum<span class="sym">)</span>
   <span class="sym">}</span>

   <span class="kwa">def</span> print<span class="sym">(</span>name<span class="sym">:</span> <span class="kwc">String</span><span class="sym">,</span> depth<span class="sym">:</span> Int<span class="sym">,</span> check<span class="sym">:</span> Int<span class="sym">) =</span>
      Console<span class="sym">.</span>println<span class="sym">(</span>name <span class="sym">+</span> <span class="str">&quot; of depth &quot;</span> <span class="sym">+</span> depth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> <span class="sym">+</span> check<span class="sym">)</span>
<span class="sym">}</span>


<span class="kwa">final class</span> Tree<span class="sym">(</span>_i<span class="sym">:</span> Int<span class="sym">,</span> depth<span class="sym">:</span> Int<span class="sym">) {</span>
    <span class="kwa">private val</span> i <span class="sym">=</span> _i
    <span class="kwa">private val</span> left <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>depth <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> null <span class="kwa">else new</span> Tree<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i <span class="sym">-</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
    <span class="kwa">private val</span> right <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>depth <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> null <span class="kwa">else new</span> Tree<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>

    <span class="kwa">def</span> isum <span class="sym">:</span> Int <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span>left <span class="sym">==</span> null<span class="sym">)</span> i <span class="kwa">else</span> i <span class="sym">+</span> left<span class="sym">.</span>isum <span class="sym">-</span> right<span class="sym">.</span>isum
<span class="sym">}</span>
