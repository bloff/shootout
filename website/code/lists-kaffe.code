<span class="slc">// $Id: lists-kaffe.code,v 1.5 2004-11-22 07:08:57 bfulgham Exp $
</span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span>
<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;

</span><span class="kwa">public class</span> lists <span class="sym">{
</span>    <span class="kwa">static</span> <span class="kwb">int</span> SIZE <span class="sym">=</span> <span class="num">10000</span><span class="sym">;

</span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {
</span>	<span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>	<span class="kwb">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {
</span>	    result <span class="sym">=</span> test_lists<span class="sym">();
	}
</span>	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>result<span class="sym">);
    }
</span>    <span class="kwa">public static</span> <span class="kwb">int</span> test_lists<span class="sym">() {
</span>	<span class="kwb">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="slc">// create a list of integers (Li1) from 1 to SIZE
</span>	<span class="kwc">LinkedList</span> Li1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span>	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> SIZE<span class="sym">+</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">++) {
</span>	    Li1<span class="sym">.</span>addLast<span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span>i<span class="sym">));
	}
</span>	<span class="slc">// copy the list to Li2 (not by individual items)
</span>	<span class="kwc">LinkedList</span> Li2 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">(</span>Li1<span class="sym">);
</span>	<span class="kwc">LinkedList</span> Li3 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span>	<span class="slc">// remove each individual item from left side of Li2 and
</span>	<span class="slc">// append to right side of Li3 (preserving order)
</span>	<span class="kwa">while</span> <span class="sym">(!</span> Li2<span class="sym">.</span>isEmpty<span class="sym">()) {
</span>	    Li3<span class="sym">.</span>addLast<span class="sym">(</span>Li2<span class="sym">.</span>removeFirst<span class="sym">());
	}
</span>	<span class="slc">// Li2 must now be empty
</span>	<span class="slc">// remove each individual item from right side of Li3 and
</span>	<span class="slc">// append to right side of Li2 (reversing list)
</span>	<span class="kwa">while</span> <span class="sym">(!</span> Li3<span class="sym">.</span>isEmpty<span class="sym">()) {
</span>	    Li2<span class="sym">.</span>addLast<span class="sym">(</span>Li3<span class="sym">.</span>removeLast<span class="sym">());
	}
</span>	<span class="slc">// Li3 must now be empty
</span>	<span class="slc">// reverse Li1
</span>	<span class="kwc">LinkedList</span> tmp <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span>	<span class="kwa">while</span> <span class="sym">(!</span> Li1<span class="sym">.</span>isEmpty<span class="sym">()) {
</span>	    tmp<span class="sym">.</span>addFirst<span class="sym">(</span>Li1<span class="sym">.</span>removeFirst<span class="sym">());
	}
</span>	Li1 <span class="sym">=</span> tmp<span class="sym">;
</span>	<span class="slc">// check that first item is now SIZE
</span>	<span class="kwa">if</span> <span class="sym">(((</span><span class="kwc">Integer</span><span class="sym">)</span>Li1<span class="sym">.</span>getFirst<span class="sym">()).</span>intValue<span class="sym">() !=</span> SIZE<span class="sym">) {
</span>	    <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;first item of Li1 != SIZE&quot;</span><span class="sym">);
</span>	    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
	}
</span>	<span class="slc">// compare Li1 and Li2 for equality
</span>	<span class="kwa">if</span> <span class="sym">(!</span> Li1<span class="sym">.</span>equals<span class="sym">(</span>Li2<span class="sym">)) {
</span>	    <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Li1 and Li2 differ&quot;</span><span class="sym">);
</span>	    <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Li1:&quot;</span> <span class="sym">+</span> Li1<span class="sym">);
</span>	    <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Li2:&quot;</span> <span class="sym">+</span> Li2<span class="sym">);
</span>	    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
	}
</span>	<span class="slc">// return the length of the list
</span>	<span class="kwa">return</span><span class="sym">(</span>Li1<span class="sym">.</span>size<span class="sym">());
    }
}</span>
