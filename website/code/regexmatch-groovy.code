<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: regexmatch-groovy.code,v 1.2 2005-09-24 22:16:48 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
*/</span>

def	pattern <span class="sym">=</span> <span class="str">&quot;(^|^</span><span class="esc">\\</span><span class="str">D*[^</span><span class="esc">\\</span><span class="str">(</span><span class="esc">\\</span><span class="str">d])&quot;</span>				<span class="sym">+</span> <span class="slc">// must be preceeded by non-digit
</span>            <span class="str">&quot;((</span><span class="esc">\\</span><span class="str">(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">))|(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d))&quot;</span>	<span class="sym">+</span> <span class="slc">// match 2: Area Code inner match 3: area with perens,
</span>            									  <span class="slc">// inner match 4: without perens
</span>            <span class="str">&quot;[ ]&quot;</span>								<span class="sym">+</span> <span class="slc">// area code followed by one space
</span>            <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>						<span class="sym">+</span> <span class="slc">//match 5: prefix of 3 digits
</span>            <span class="str">&quot;[ -]&quot;</span>								<span class="sym">+</span> <span class="slc">// prefix followed by space or dash
</span>            <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>					<span class="sym">+</span> <span class="slc">// match 6: last 4 digits
</span>            <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">D.*|</span><span class="esc">\$</span><span class="str">)&quot;</span>						  <span class="slc">// followed by non numeric chars
</span>
def N <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span> ? <span class="num">10</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>toInteger<span class="sym">())
</span>def lines <span class="sym">=</span> System<span class="sym">.</span>in<span class="sym">.</span>readLines<span class="sym">()

</span><span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">1</span><span class="sym">..</span>N<span class="sym">) {
</span>	def count <span class="sym">=</span> <span class="num">0
</span>	lines<span class="sym">.</span>each<span class="sym">() {
</span>		def matcher <span class="sym">=</span> it <span class="sym">=~</span> pattern
		<span class="kwa">if</span> <span class="sym">(</span>matcher<span class="sym">.</span>matches<span class="sym">() &amp;&amp; (</span>i <span class="sym">==</span> <span class="num">1</span><span class="sym">)) {
</span>			<span class="kwa">if</span> <span class="sym">(</span>matcher<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">) ==</span> null<span class="sym">) {
</span>				println <span class="str">&quot;${++count}: (${matcher.group(4)}) ${matcher.group(5)}-${matcher.group(6)}&quot;</span>
			<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{
</span>				println <span class="str">&quot;${++count}: ${matcher.group(3)} ${matcher.group(5)}-${matcher.group(6)}&quot;</span>
			<span class="sym">}
		}
	}
}

</span><span class="slc">// EOF
</span>
