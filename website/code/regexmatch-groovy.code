<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: regexmatch-groovy.code,v 1.1 2005-09-21 05:17:34 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
	modified by
    Each program should be implemented the same way - the same way as this Perl program.

    The regex benchmark measures regular expression pattern matching, extracting telephone numbers from a text.

    Each program should:

        * read text file
        * match the pattern against the file contents N times
        * print the text matches

    Correct output for this 1KB input file is:

    1: (111) 111-1111
    2: (111) 222-2222
    3: (111) 333-3333
    4: (111) 444-4444
    5: (111) 555-5555
    6: (111) 666-6666
    7: (111) 777-7777
    8: (111) 888-8888
    9: (111) 999-9999
    10: (111) 000-0000
    11: (111) 232-1111
    12: (111) 242-1111


    The telephone number pattern:

        * there may be zero or one telephone numbers per line of input
        * a telephone number may start at the beginning of the line or be preceeded by a non-digit, (which may be preceeded by anything)
        * it begins with a 3-digit area code that looks like this (DDD) or DDD (where D is [0-9])
        * the area code is followed by one space
        * which is followed by the 3 digits of the exchange: DDD
        * the exchange is followed by a space or hyphen [ -]
        * which is followed by the last 4 digits: DDDD
        * which can be followed by end of line or a non-digit (which may be followed by anything).

*/</span>

def	pattern <span class="sym">=</span> <span class="str">&quot;(^|^</span><span class="esc">\\</span><span class="str">D*[^</span><span class="esc">\\</span><span class="str">(</span><span class="esc">\\</span><span class="str">d])&quot;</span>				<span class="sym">+</span> <span class="slc">// must be preceeded by non-digit
</span>            <span class="str">&quot;((</span><span class="esc">\\</span><span class="str">(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">))|(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d))&quot;</span>	<span class="sym">+</span> <span class="slc">// match 2: Area Code inner match 3: area with perens,
</span>            									  <span class="slc">// inner match 4: without perens
</span>            <span class="str">&quot;[ ]&quot;</span>								<span class="sym">+</span> <span class="slc">// area code followed by one space
</span>            <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>						<span class="sym">+</span> <span class="slc">//match 5: prefix of 3 digits
</span>            <span class="str">&quot;[ -]&quot;</span>								<span class="sym">+</span> <span class="slc">// prefix followed by space or dash
</span>            <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>					<span class="sym">+</span> <span class="slc">// match 6: last 4 digits
</span>            <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">D.*|</span><span class="esc">\$</span><span class="str">)&quot;</span>						  <span class="slc">// followed by non numeric chars
</span>
def N <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span> ? <span class="num">10</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>toInteger<span class="sym">())
</span>def lines <span class="sym">=</span> System<span class="sym">.</span>in<span class="sym">.</span>readLines<span class="sym">()

</span><span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">1</span><span class="sym">..</span>N<span class="sym">) {
</span>	def count <span class="sym">=</span> <span class="num">0
</span>	lines<span class="sym">.</span>each<span class="sym">() {
</span>		def matcher <span class="sym">=</span> it <span class="sym">=~</span> pattern
		<span class="kwa">if</span> <span class="sym">(</span>matcher<span class="sym">.</span>matches<span class="sym">() &amp;&amp; (</span>i <span class="sym">==</span> <span class="num">1</span><span class="sym">)) {
</span>			<span class="kwa">if</span> <span class="sym">(</span>matcher<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">) ==</span> null<span class="sym">) {
</span>				println <span class="str">&quot;${++count}: (${matcher.group(4)}) ${matcher.group(5)}-${matcher.group(6)}&quot;</span>
			<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{
</span>				println <span class="str">&quot;${++count}: ${matcher.group(3)} ${matcher.group(5)}-${matcher.group(6)}&quot;</span>
			<span class="sym">}
		}
	}
}

</span><span class="slc">// EOF
</span>
