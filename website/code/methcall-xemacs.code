<span class="line">    1 </span><span class="slc">;;; -*- mode: emacs-lisp -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: methcall-xemacs.code,v 1.3 2004-11-11 07:14:00 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">(</span>require <span class="str">'eieio)
</span><span class="line">    6 </span><span class="str">
</span><span class="line">    7 </span><span class="str">(defun print-bool (b)
</span><span class="line">    8 </span><span class="str">  (if b (princ &quot;true</span><span class="esc">\n</span><span class="str">&quot;) (princ &quot;false</span><span class="esc">\n</span><span class="str">&quot;)))
</span><span class="line">    9 </span><span class="str">
</span><span class="line">   10 </span><span class="str">(defclass toggle ()
</span><span class="line">   11 </span><span class="str">  ((state :initarg state
</span><span class="line">   12 </span><span class="str">          :initform t)))
</span><span class="line">   13 </span><span class="str">
</span><span class="line">   14 </span><span class="str">(defmethod toggle-value ((this toggle))
</span><span class="line">   15 </span><span class="str">  (oref this state))
</span><span class="line">   16 </span><span class="str">
</span><span class="line">   17 </span><span class="str">(defmethod activate ((this toggle))
</span><span class="line">   18 </span><span class="str">  (oset this state (not (oref this state)))
</span><span class="line">   19 </span><span class="str">  this)
</span><span class="line">   20 </span><span class="str">
</span><span class="line">   21 </span><span class="str">(defclass nth-toggle (toggle)
</span><span class="line">   22 </span><span class="str">    ((count-max :initarg :max-counter
</span><span class="line">   23 </span><span class="str">                :initform 1)
</span><span class="line">   24 </span><span class="str">     (counter :initform 0)))
</span><span class="line">   25 </span><span class="str">
</span><span class="line">   26 </span><span class="str">(defmethod activate ((this nth-toggle))
</span><span class="line">   27 </span><span class="str">  (oset this counter (+ 1 (oref this counter)))
</span><span class="line">   28 </span><span class="str">  (cond ((&gt;= (oref this counter)
</span><span class="line">   29 </span><span class="str">             (oref this count-max))
</span><span class="line">   30 </span><span class="str">         (oset this state (not (oref this state)))
</span><span class="line">   31 </span><span class="str">         (oset this counter 0)))
</span><span class="line">   32 </span><span class="str">  this)
</span><span class="line">   33 </span><span class="str">
</span><span class="line">   34 </span><span class="str">(defun main ()
</span><span class="line">   35 </span><span class="str">  (let* ((arg (car command-line-args-left))
</span><span class="line">   36 </span><span class="str">         (n (if arg (string-to-number arg) 1)))
</span><span class="line">   37 </span><span class="str">    (let ((tog (toggle &quot;foo&quot;))
</span><span class="line">   38 </span><span class="str">          (val t))
</span><span class="line">   39 </span><span class="str">      (dotimes (i n)
</span><span class="line">   40 </span><span class="str">        (setq val (toggle-value (activate tog))))
</span><span class="line">   41 </span><span class="str">      (print-bool val)
</span><span class="line">   42 </span><span class="str">
</span><span class="line">   43 </span><span class="str">    (let ((ntog (nth-toggle &quot;bar&quot; :max-counter 3))
</span><span class="line">   44 </span><span class="str">          (val t))
</span><span class="line">   45 </span><span class="str">      (dotimes (i n)
</span><span class="line">   46 </span><span class="str">        (setq val (toggle-value (activate ntog))))
</span><span class="line">   47 </span><span class="str">      (print-bool val)))))
</span><span class="line">   48 </span><span class="str"></span>
