<span class="slc">#!/usr/bin/perl</span>
<span class="slc"># $Id: lists-perl.code,v 1.7 2006-09-20 05:51:46 bfulgham Exp $</span>
<span class="kwa">use</span> strict<span class="sym">;</span>

<span class="kwc">my</span> <span class="kwb">$SIZE</span> <span class="sym">=</span> <span class="num">10000</span><span class="sym">;</span>

<span class="kwc">my</span> <span class="kwb">$ITER</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwb">$ITER</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$ITER</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">);</span>

<span class="kwc">my</span> <span class="kwb">$result</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$ITER</span><span class="sym">--) {</span>
    <span class="kwb">$result</span> <span class="sym">= &amp;</span><span class="kwd">test_lists</span><span class="sym">();</span>
<span class="sym">}</span>
print <span class="str">&quot;$result</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>

<span class="kwa">sub</span> test_lists <span class="sym">{</span>
    <span class="slc"># create a list of integers (Li1) from 1 to SIZE</span>
    <span class="kwc">my</span> <span class="kwb">&#64;Li1</span> <span class="sym">= (</span><span class="num">1</span>..<span class="kwb">$SIZE</span><span class="sym">);</span>
    <span class="slc"># copy the list to Li2 (not by individual items)</span>
    <span class="kwc">my</span> <span class="kwb">&#64;Li2</span> <span class="sym">=</span> <span class="kwb">&#64;Li1</span><span class="sym">;</span>
    <span class="kwc">my</span> <span class="kwb">&#64;Li3</span> <span class="sym">= ();</span>
    <span class="slc"># remove each individual item from left side of Li2 and</span>
    <span class="slc"># append to right side of Li3 (preserving order)</span>
    <span class="kwd">push</span><span class="sym">(</span><span class="kwb">&#64;Li3</span><span class="sym">,</span> shift <span class="kwb">&#64;Li2</span><span class="sym">)</span> <span class="kwa">while</span> <span class="sym">(</span><span class="kwb">&#64;Li2</span><span class="sym">);</span>
    <span class="slc"># Li2 must now be empty</span>
    <span class="slc"># remove each individual item from right side of Li3 and</span>
    <span class="slc"># append to right side of Li2 (reversing list)</span>
    <span class="kwd">push</span><span class="sym">(</span><span class="kwb">&#64;Li2</span><span class="sym">,</span> pop <span class="kwb">&#64;Li3</span><span class="sym">)</span> <span class="kwa">while</span> <span class="sym">(</span><span class="kwb">&#64;Li3</span><span class="sym">);</span>
    <span class="slc"># Li3 must now be empty</span>
    <span class="slc"># reverse Li1 in place</span>
    <span class="kwb">&#64;Li1</span> <span class="sym">=</span> reverse <span class="kwb">&#64;Li1</span><span class="sym">;</span>
    <span class="slc"># check that first item is now SIZE</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">if</span> <span class="kwb">$Li1</span><span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="kwb">$SIZE</span><span class="sym">;</span>
    <span class="slc"># compare Li1 and Li2 for equality</span>
    <span class="kwc">my</span> <span class="kwb">$len1</span> <span class="sym">=</span> <span class="kwd">scalar</span><span class="sym">(</span><span class="kwb">&#64;Li1</span><span class="sym">);</span>
    <span class="kwc">my</span> <span class="kwb">$len2</span> <span class="sym">=</span> <span class="kwd">scalar</span><span class="sym">(</span><span class="kwb">&#64;Li2</span><span class="sym">);</span>
    <span class="kwc">my</span> <span class="kwb">$lists_equal</span> <span class="sym">= (</span><span class="kwb">$len1</span> <span class="sym">==</span> <span class="kwb">$len2</span><span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">if not</span> <span class="kwb">$lists_equal</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> <span class="sym">(</span><span class="num">0</span>..<span class="sym">(</span><span class="kwb">$len1</span><span class="sym">-</span><span class="num">1</span><span class="sym">)) {</span>
	<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$Li1</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">] !=</span> <span class="kwb">$Li2</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">]) {</span>
	    <span class="kwb">$lists_equal</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	    <span class="kwa">last</span><span class="sym">;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">if not</span> <span class="kwb">$lists_equal</span><span class="sym">;</span>
    <span class="slc"># return the length of the list</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="kwb">$len1</span><span class="sym">);</span>
<span class="sym">}</span>
