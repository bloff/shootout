<span class="slc">#!/usr/bin/perl
</span><span class="slc"># $Id: lists-perl.code,v 1.5 2005-04-04 14:56:47 bfulgham Exp $
</span><span class="kwa">use</span> strict<span class="sym">;

</span><span class="kwc">my</span> <span class="kwb">$SIZE</span> <span class="sym">=</span> <span class="num">10000</span><span class="sym">;

</span><span class="kwc">my</span> <span class="kwb">$ITER</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="kwb">$ITER</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$ITER</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">);

</span><span class="kwc">my</span> <span class="kwb">$result</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$ITER</span><span class="sym">--) {
</span>    <span class="kwb">$result</span> <span class="sym">= &amp;</span>test_lists<span class="sym">();
}
</span>print <span class="str">&quot;$result</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;

</span><span class="kwa">sub</span> test_lists <span class="sym">{
</span>    <span class="slc"># create a list of integers (Li1) from 1 to SIZE
</span>    <span class="kwc">my</span> &#64;Li1 <span class="sym">= (</span><span class="num">1</span>..<span class="kwb">$SIZE</span><span class="sym">);
</span>    <span class="slc"># copy the list to Li2 (not by individual items)
</span>    <span class="kwc">my</span> &#64;Li2 <span class="sym">=</span> &#64;Li1<span class="sym">;
</span>    <span class="kwc">my</span> &#64;Li3 <span class="sym">= ();
</span>    <span class="slc"># remove each individual item from left side of Li2 and
</span>    <span class="slc"># append to right side of Li3 (preserving order)
</span>    push<span class="sym">(</span>&#64;Li3<span class="sym">,</span> shift &#64;Li2<span class="sym">)</span> <span class="kwa">while</span> <span class="sym">(</span>&#64;Li2<span class="sym">);
</span>    <span class="slc"># Li2 must now be empty
</span>    <span class="slc"># remove each individual item from right side of Li3 and
</span>    <span class="slc"># append to right side of Li2 (reversing list)
</span>    push<span class="sym">(</span>&#64;Li2<span class="sym">,</span> pop &#64;Li3<span class="sym">)</span> <span class="kwa">while</span> <span class="sym">(</span>&#64;Li3<span class="sym">);
</span>    <span class="slc"># Li3 must now be empty
</span>    <span class="slc"># reverse Li1 in place
</span>    &#64;Li1 <span class="sym">=</span> reverse &#64;Li1<span class="sym">;
</span>    <span class="slc"># check that first item is now SIZE
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">if</span> <span class="kwb">$Li1</span><span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="kwb">$SIZE</span><span class="sym">;
</span>    <span class="slc"># compare Li1 and Li2 for equality
</span>    <span class="kwc">my</span> <span class="kwb">$len1</span> <span class="sym">=</span> scalar<span class="sym">(</span>&#64;Li1<span class="sym">);
</span>    <span class="kwc">my</span> <span class="kwb">$len2</span> <span class="sym">=</span> scalar<span class="sym">(</span>&#64;Li2<span class="sym">);
</span>    <span class="kwc">my</span> <span class="kwb">$lists_equal</span> <span class="sym">= (</span><span class="kwb">$len1</span> <span class="sym">==</span> <span class="kwb">$len2</span><span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">if not</span> <span class="kwb">$lists_equal</span><span class="sym">;
</span>    <span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> <span class="sym">(</span><span class="num">0</span>..<span class="sym">(</span><span class="kwb">$len1</span><span class="num">-1</span><span class="sym">)) {
</span>	<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$Li1</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">] !=</span> <span class="kwb">$Li2</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">]) {
</span>	    <span class="kwb">$lists_equal</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	    <span class="kwa">last</span><span class="sym">;
	}
    }
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">if not</span> <span class="kwb">$lists_equal</span><span class="sym">;
</span>    <span class="slc"># return the length of the list
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwb">$len1</span><span class="sym">);
}</span>
