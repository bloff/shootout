<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Tomasz bla Fortuna *)</span>

<span class="kwa">let</span> size <span class="sym">=</span> <span class="num">503</span>
<span class="kwa">and</span> n <span class="sym">=</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>

<span class="kwa">type</span> channel <span class="sym">= {</span> m <span class="sym">:</span> Mutex.t<span class="sym">;</span> d <span class="sym">:</span> <span class="kwb">int</span> ref <span class="sym">}</span>
<span class="kwa">let</span> <span class="kwd">channel</span> <span class="sym">() =</span>
  <span class="kwa">let</span> mx <span class="sym">=</span> Mutex.<span class="kwd">create</span> <span class="sym">()</span> <span class="kwa">in</span> Mutex.lock mx<span class="sym">;</span>
  <span class="sym">{</span> m <span class="sym">=</span> mx<span class="sym">;</span> d <span class="sym">=</span> ref <span class="num">0</span><span class="sym">}</span>

<span class="kwa">let rec</span> spawn id i o <span class="kwd">loop</span> <span class="sym">() =</span>
  <span class="kwa">let rec</span> <span class="kwd">thread</span> <span class="sym">() =</span>
    Mutex.lock i.m<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">!(</span>i.d<span class="sym">) =</span> n <span class="kwa">then</span> <span class="sym">(</span>
      <span class="kwd">print_int</span> <span class="sym">(</span>size<span class="sym">-</span>id<span class="sym">+</span><span class="num">1</span><span class="sym">);</span> <span class="kwd">print_newline</span> <span class="sym">();</span> exit <span class="num">0</span><span class="sym">;</span>
    <span class="sym">);</span>
    o.d <span class="sym">:= !(</span>i.d<span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>  <span class="com">(* Forward token *)</span>
    Mutex.unlock o.m<span class="sym">;</span>
    <span class="kwd">thread</span> <span class="sym">()</span>
  <span class="kwa">in</span>
  <span class="kwa">if</span> id <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span> <span class="sym">(</span>
    <span class="kwa">let</span> new_o <span class="sym">=</span> <span class="kwa">if</span> id <span class="sym">=</span> <span class="num">2</span> <span class="kwa">then</span> loop <span class="kwa">else</span> <span class="kwd">channel</span> <span class="sym">()</span> <span class="kwa">in</span>
    <span class="kwa">let</span> f <span class="sym">=</span> <span class="kwd">spawn</span> <span class="sym">(</span>id<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> o new_o loop <span class="kwa">in</span>
    <span class="kwd">ignore</span> <span class="sym">(</span>Thread.create <span class="kwd">f</span> <span class="sym">())</span>
  <span class="sym">);</span>
  <span class="kwd">thread</span> <span class="sym">()</span>

<span class="kwa">let</span> _ <span class="sym">=</span>
  <span class="kwa">let</span> loop<span class="sym">,</span> o <span class="sym">=</span> <span class="kwd">channel</span> <span class="sym">(),</span> <span class="kwd">channel</span> <span class="sym">()</span> <span class="kwa">in</span>
  Mutex.unlock loop.m<span class="sym">;</span>
  Thread.<span class="kwd">join</span> <span class="sym">(</span>Thread.<span class="kwd">create</span> <span class="sym">(</span>spawn size loop o loop<span class="sym">) ())</span>
