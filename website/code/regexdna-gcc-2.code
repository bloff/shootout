<span class="com">/*</span>
<span class="com">** The Computer Language Shootout</span>
<span class="com">** http://shootout.alioth.debian.org/</span>
<span class="com">** contributed by Mike Pall</span>
<span class="com">**</span>
<span class="com">** regex-dna benchmark using PCRE</span>
<span class="com">**</span>
<span class="com">** compile with:</span>
<span class="com">**   gcc -O3 -fomit-frame-pointer -o regexdna regexdna.c -lpcre</span>
<span class="com">*/</span>

<span class="dir">#define __USE_STRING_INLINES</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;pcre.h&gt;</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> fbuf <span class="sym">{</span>
  <span class="kwb">char</span> <span class="sym">*</span>buf<span class="sym">;</span>
  <span class="kwb">size_t</span> size<span class="sym">,</span> len<span class="sym">;</span>
<span class="sym">}</span> fbuf_t<span class="sym">;</span>

<span class="kwb">static void</span> <span class="kwd">fb_init</span><span class="sym">(</span>fbuf_t <span class="sym">*</span>b<span class="sym">)</span>
<span class="sym">{</span>
  b<span class="sym">-&gt;</span>buf <span class="sym">=</span> NULL<span class="sym">;</span>
  b<span class="sym">-&gt;</span>len <span class="sym">=</span> b<span class="sym">-&gt;</span>size <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">static char</span> <span class="sym">*</span><span class="kwd">fb_need</span><span class="sym">(</span>fbuf_t <span class="sym">*</span>b<span class="sym">,</span> <span class="kwb">size_t</span> need<span class="sym">)</span>
<span class="sym">{</span>
  need <span class="sym">+=</span> b<span class="sym">-&gt;</span>len<span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>need <span class="sym">&gt;</span> b<span class="sym">-&gt;</span>size<span class="sym">) {</span>
    <span class="kwa">if</span> <span class="sym">(</span>b<span class="sym">-&gt;</span>size <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> b<span class="sym">-&gt;</span>size <span class="sym">=</span> need<span class="sym">;</span>
    <span class="kwa">else while</span> <span class="sym">(</span>need <span class="sym">&gt;</span> b<span class="sym">-&gt;</span>size<span class="sym">)</span> b<span class="sym">-&gt;</span>size <span class="sym">+=</span> b<span class="sym">-&gt;</span>size<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(!(</span>b<span class="sym">-&gt;</span>buf <span class="sym">=</span> <span class="kwd">realloc</span><span class="sym">(</span>b<span class="sym">-&gt;</span>buf<span class="sym">,</span> b<span class="sym">-&gt;</span>size<span class="sym">)))</span> <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
  <span class="sym">}</span>
  <span class="kwa">return</span> b<span class="sym">-&gt;</span>buf<span class="sym">+</span>b<span class="sym">-&gt;</span>len<span class="sym">;</span>
<span class="sym">}</span>

<span class="dir">#define FB_MINREAD	(3&lt;&lt;16)</span>

<span class="com">/* Read all of a stdio stream into dst buffer. */</span>
<span class="kwb">static size_t</span> <span class="kwd">fb_readall</span><span class="sym">(</span>fbuf_t <span class="sym">*</span>dst<span class="sym">,</span> <span class="kwb">FILE</span> <span class="sym">*</span>fp<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">char</span> <span class="sym">*</span>dp<span class="sym">;</span>
  <span class="kwb">int</span> n<span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>dp <span class="sym">=</span> <span class="kwd">fb_need</span><span class="sym">(</span>dst<span class="sym">,</span> FB_MINREAD<span class="sym">);</span>
       <span class="sym">(</span>n <span class="sym">=</span> <span class="kwd">fread</span><span class="sym">(</span>dp<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> dst<span class="sym">-&gt;</span>size<span class="sym">-</span>dst<span class="sym">-&gt;</span>len<span class="sym">,</span> fp<span class="sym">)) &gt;</span> <span class="num">0</span><span class="sym">;</span>
       dp <span class="sym">=</span> <span class="kwd">fb_need</span><span class="sym">(</span>dst<span class="sym">,</span> FB_MINREAD<span class="sym">))</span> dst<span class="sym">-&gt;</span>len <span class="sym">+=</span> n<span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">ferror</span><span class="sym">(</span>fp<span class="sym">))</span> <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
  <span class="kwa">return</span> dst<span class="sym">-&gt;</span>len<span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* Substitute pattern p with replacement r, copying from src to dst buffer. */</span>
<span class="kwb">static size_t</span> <span class="kwd">fb_subst</span><span class="sym">(</span>fbuf_t <span class="sym">*</span>dst<span class="sym">,</span> fbuf_t <span class="sym">*</span>src<span class="sym">,</span> <span class="kwb">const char</span> <span class="sym">*</span>p<span class="sym">,</span> <span class="kwb">const char</span> <span class="sym">*</span>r<span class="sym">)</span>
<span class="sym">{</span>
  pcre <span class="sym">*</span>re<span class="sym">;</span>
  pcre_extra <span class="sym">*</span>re_ex<span class="sym">;</span>
  <span class="kwb">const char</span> <span class="sym">*</span>re_e<span class="sym">;</span>
  <span class="kwb">char</span> <span class="sym">*</span>dp<span class="sym">;</span>
  <span class="kwb">int</span> re_eo<span class="sym">,</span> m<span class="sym">[</span><span class="num">3</span><span class="sym">],</span> pos<span class="sym">,</span> rlen<span class="sym">,</span> clen<span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(!(</span>re <span class="sym">=</span> <span class="kwd">pcre_compile</span><span class="sym">(</span>p<span class="sym">,</span> PCRE_CASELESS<span class="sym">, &amp;</span>re_e<span class="sym">, &amp;</span>re_eo<span class="sym">,</span> NULL<span class="sym">)))</span> <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
  re_ex <span class="sym">=</span> <span class="kwd">pcre_study</span><span class="sym">(</span>re<span class="sym">,</span> <span class="num">0</span><span class="sym">, &amp;</span>re_e<span class="sym">);</span>
  <span class="kwa">for</span> <span class="sym">(</span>dst<span class="sym">-&gt;</span>len <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> rlen <span class="sym">=</span> <span class="kwd">strlen</span><span class="sym">(</span>r<span class="sym">),</span> pos <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
       <span class="kwd">pcre_exec</span><span class="sym">(</span>re<span class="sym">,</span> re_ex<span class="sym">,</span> src<span class="sym">-&gt;</span>buf<span class="sym">,</span> src<span class="sym">-&gt;</span>len<span class="sym">,</span> pos<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> m<span class="sym">,</span> <span class="num">3</span><span class="sym">) &gt;=</span> <span class="num">0</span><span class="sym">;</span>
       pos <span class="sym">=</span> m<span class="sym">[</span><span class="num">1</span><span class="sym">]) {</span>
    clen <span class="sym">=</span> m<span class="sym">[</span><span class="num">0</span><span class="sym">]-</span>pos<span class="sym">;</span>
    dp <span class="sym">=</span> <span class="kwd">fb_need</span><span class="sym">(</span>dst<span class="sym">,</span> clen<span class="sym">+</span>rlen<span class="sym">);</span>
    dst<span class="sym">-&gt;</span>len <span class="sym">+=</span> clen<span class="sym">+</span>rlen<span class="sym">;</span>
    <span class="kwd">memcpy</span><span class="sym">(</span>dp<span class="sym">,</span> src<span class="sym">-&gt;</span>buf<span class="sym">+</span>pos<span class="sym">,</span> clen<span class="sym">);</span>
    <span class="kwd">memcpy</span><span class="sym">(</span>dp<span class="sym">+</span>clen<span class="sym">,</span> r<span class="sym">,</span> rlen<span class="sym">);</span>
  <span class="sym">}</span>
  clen <span class="sym">=</span> src<span class="sym">-&gt;</span>len<span class="sym">-</span>pos<span class="sym">;</span>
  dp <span class="sym">=</span> <span class="kwd">fb_need</span><span class="sym">(</span>dst<span class="sym">,</span> clen<span class="sym">);</span>
  dst<span class="sym">-&gt;</span>len <span class="sym">+=</span> clen<span class="sym">;</span>
  <span class="kwd">memcpy</span><span class="sym">(</span>dp<span class="sym">,</span> src<span class="sym">-&gt;</span>buf<span class="sym">+</span>pos<span class="sym">,</span> clen<span class="sym">);</span>
  <span class="kwa">return</span> dst<span class="sym">-&gt;</span>len<span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* Count all matches with pattern p in src buffer. */</span>
<span class="kwb">static int</span> <span class="kwd">fb_countmatches</span><span class="sym">(</span>fbuf_t <span class="sym">*</span>src<span class="sym">,</span> <span class="kwb">const char</span> <span class="sym">*</span>p<span class="sym">)</span>
<span class="sym">{</span>
  pcre <span class="sym">*</span>re<span class="sym">;</span>
  pcre_extra <span class="sym">*</span>re_ex<span class="sym">;</span>
  <span class="kwb">const char</span> <span class="sym">*</span>re_e<span class="sym">;</span>
  <span class="kwb">int</span> re_eo<span class="sym">,</span> m<span class="sym">[</span><span class="num">3</span><span class="sym">],</span> pos<span class="sym">,</span> count<span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(!(</span>re <span class="sym">=</span> <span class="kwd">pcre_compile</span><span class="sym">(</span>p<span class="sym">,</span> PCRE_CASELESS<span class="sym">, &amp;</span>re_e<span class="sym">, &amp;</span>re_eo<span class="sym">,</span> NULL<span class="sym">)))</span> <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
  re_ex <span class="sym">=</span> <span class="kwd">pcre_study</span><span class="sym">(</span>re<span class="sym">,</span> <span class="num">0</span><span class="sym">, &amp;</span>re_e<span class="sym">);</span>
  <span class="kwa">for</span> <span class="sym">(</span>count <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> pos <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
       <span class="kwd">pcre_exec</span><span class="sym">(</span>re<span class="sym">,</span> re_ex<span class="sym">,</span> src<span class="sym">-&gt;</span>buf<span class="sym">,</span> src<span class="sym">-&gt;</span>len<span class="sym">,</span> pos<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> m<span class="sym">,</span> <span class="num">3</span><span class="sym">) &gt;=</span> <span class="num">0</span><span class="sym">;</span>
       pos <span class="sym">=</span> m<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> count<span class="sym">++;</span>
  <span class="kwa">return</span> count<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">static const char</span> <span class="sym">*</span>variants<span class="sym">[] = {</span>
  <span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">,</span>         <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span>
  <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span> <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span>
  <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span> <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span>
  <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span>
  <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">,</span> NULL
<span class="sym">};</span>

<span class="kwb">static const char</span> <span class="sym">*</span>subst<span class="sym">[] = {</span>
  <span class="str">&quot;B&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|g|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;D&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|g|t)&quot;</span><span class="sym">,</span>   <span class="str">&quot;H&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;K&quot;</span><span class="sym">,</span> <span class="str">&quot;(g|t)&quot;</span><span class="sym">,</span>
  <span class="str">&quot;M&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c)&quot;</span><span class="sym">,</span>   <span class="str">&quot;N&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;R&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|g)&quot;</span><span class="sym">,</span>   <span class="str">&quot;S&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|g)&quot;</span><span class="sym">,</span>
  <span class="str">&quot;V&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|g)&quot;</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|t)&quot;</span><span class="sym">,</span>     <span class="str">&quot;Y&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|t)&quot;</span><span class="sym">,</span>   NULL
<span class="sym">};</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">)</span>
<span class="sym">{</span>
  fbuf_t seq<span class="sym">[</span><span class="num">2</span><span class="sym">];</span>
  <span class="kwb">const char</span> <span class="sym">**</span>pp<span class="sym">;</span>
  <span class="kwb">size_t</span> ilen<span class="sym">,</span> clen<span class="sym">,</span> slen<span class="sym">;</span>
  <span class="kwb">int</span> flip<span class="sym">;</span>
  <span class="kwd">fb_init</span><span class="sym">(&amp;</span>seq<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
  <span class="kwd">fb_init</span><span class="sym">(&amp;</span>seq<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
  ilen <span class="sym">=</span> <span class="kwd">fb_readall</span><span class="sym">(&amp;</span>seq<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> stdin<span class="sym">);</span>
  clen <span class="sym">=</span> <span class="kwd">fb_subst</span><span class="sym">(&amp;</span>seq<span class="sym">[</span><span class="num">1</span><span class="sym">], &amp;</span>seq<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="str">&quot;&gt;.*|</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">);</span>
  <span class="kwa">for</span> <span class="sym">(</span>pp <span class="sym">=</span> variants<span class="sym">; *</span>pp<span class="sym">;</span> pp<span class="sym">++)</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%s %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, *</span>pp<span class="sym">,</span> <span class="kwd">fb_countmatches</span><span class="sym">(&amp;</span>seq<span class="sym">[</span><span class="num">1</span><span class="sym">], *</span>pp<span class="sym">));</span>
  <span class="kwa">for</span> <span class="sym">(</span>slen <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> flip <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> pp <span class="sym">=</span> subst<span class="sym">; *</span>pp<span class="sym">;</span> pp <span class="sym">+=</span> <span class="num">2</span><span class="sym">,</span> flip <span class="sym">=</span> <span class="num">1</span><span class="sym">-</span>flip<span class="sym">)</span>
    slen <span class="sym">=</span> <span class="kwd">fb_subst</span><span class="sym">(&amp;</span>seq<span class="sym">[</span><span class="num">1</span><span class="sym">-</span>flip<span class="sym">], &amp;</span>seq<span class="sym">[</span>flip<span class="sym">], *</span>pp<span class="sym">,</span> pp<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
  <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">%zu</span><span class="esc">\n</span><span class="str">%zu</span><span class="esc">\n</span><span class="str">%zu</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> ilen<span class="sym">,</span> clen<span class="sym">,</span> slen<span class="sym">);</span>
  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

