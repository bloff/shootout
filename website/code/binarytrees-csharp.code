<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   unoptimised reference implementation

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;

</span><span class="kwc">class</span> BinaryTrees
<span class="sym">{
</span>   <span class="kwb">const int</span> minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;
</span>   <span class="kwb">const int</span> checkFactor <span class="sym">=</span> <span class="num">64</span><span class="sym">;</span> <span class="slc">// keep check in int range
</span>
   <span class="kwc">public</span> <span class="kwb">static void</span> Main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">)
   {
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>      <span class="kwb">int</span> maxDepth <span class="sym">=</span> Math<span class="sym">.</span>Max<span class="sym">(</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">);
</span>      <span class="kwb">int</span> stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;

</span>      <span class="kwb">int</span> check <span class="sym">= (</span>TreeNode<span class="sym">.</span>bottomUpTree<span class="sym">(-</span><span class="num">1</span><span class="sym">,</span>stretchDepth<span class="sym">)).</span>nodeItemSum<span class="sym">();
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;stretch tree of depth {0}</span><span class="esc">\t </span> <span class="str">check: {1}&quot;</span><span class="sym">,</span> stretchDepth<span class="sym">,</span> check<span class="sym">);

</span>      TreeNode longLivedTree <span class="sym">=</span> TreeNode<span class="sym">.</span>bottomUpTree<span class="sym">(-</span><span class="num">1</span><span class="sym">,</span>maxDepth<span class="sym">);

</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> depth<span class="sym">=</span>minDepth<span class="sym">;</span> depth<span class="sym">&lt;=</span>maxDepth<span class="sym">;</span> depth<span class="sym">+=</span><span class="num">2</span><span class="sym">){
</span>         <span class="kwb">int</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">);

</span>         check <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>iterations<span class="sym">;</span> i<span class="sym">++)
</span>            check <span class="sym">+= (</span>TreeNode<span class="sym">.</span>bottomUpTree<span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">)).</span>nodeItem<span class="sym">()/</span>checkFactor<span class="sym">;

</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0}</span><span class="esc">\t </span> <span class="str">trees of depth {1}</span><span class="esc">\t </span> <span class="str">check: {2}&quot;</span><span class="sym">,
</span>            iterations<span class="sym">,</span> depth<span class="sym">,</span> check<span class="sym">);
      }

</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;long lived tree of depth {0}</span><span class="esc">\t </span> <span class="str">check: {1}&quot;</span><span class="sym">,
</span>         maxDepth<span class="sym">,</span> longLivedTree<span class="sym">.</span>nodeItemSum<span class="sym">());
   }


</span>   <span class="kwc">class</span> TreeNode
   <span class="sym">{
</span>      <span class="kwc">private</span> TreeNode left<span class="sym">,</span> right<span class="sym">;
</span>      <span class="kwc">private</span> <span class="kwb">int</span> item<span class="sym">;

</span>      TreeNode<span class="sym">(</span><span class="kwb">int</span> item<span class="sym">){
</span>         <span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item<span class="sym">;
      }

</span>      internal <span class="kwb">static</span> TreeNode bottomUpTree<span class="sym">(</span><span class="kwb">int</span> item<span class="sym">,</span> <span class="kwb">int</span> depth<span class="sym">){
</span>         <span class="kwa">if</span> <span class="sym">(</span>depth<span class="sym">&gt;</span><span class="num">0</span><span class="sym">){
</span>            <span class="kwa">return new</span> TreeNode<span class="sym">(
</span>                 bottomUpTree<span class="sym">(</span>item<span class="sym">,</span> depth<span class="num">-1</span><span class="sym">)
               ,</span> bottomUpTree<span class="sym">(</span>item<span class="sym">,</span> depth<span class="num">-1</span><span class="sym">)
               ,</span> item
               <span class="sym">);
         }
</span>         <span class="kwa">else</span> <span class="sym">{
</span>            <span class="kwa">return new</span> TreeNode<span class="sym">(</span>item<span class="sym">);
         }
      }

</span>      TreeNode<span class="sym">(</span>TreeNode left<span class="sym">,</span> TreeNode right<span class="sym">,</span> <span class="kwb">int</span> item<span class="sym">){
</span>         <span class="kwa">this</span><span class="sym">.</span>left <span class="sym">=</span> left<span class="sym">;
</span>         <span class="kwa">this</span><span class="sym">.</span>right <span class="sym">=</span> right<span class="sym">;
</span>         <span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item<span class="sym">;
      }

</span>      internal <span class="kwb">int</span> nodeItem<span class="sym">(){
</span>         <span class="slc">// if necessary deallocate here
</span>         <span class="kwa">if</span> <span class="sym">(</span>left<span class="sym">==</span>null<span class="sym">)</span> <span class="kwa">return</span> item<span class="sym">;
</span>         <span class="kwa">else return</span> item <span class="sym">+ (</span>left<span class="sym">.</span>nodeItem<span class="sym">() -</span> right<span class="sym">.</span>nodeItem<span class="sym">());
      }

</span>      internal <span class="kwb">int</span> nodeItemSum<span class="sym">(){
</span>         <span class="slc">// if necessary deallocate here
</span>         <span class="kwa">if</span> <span class="sym">(</span>left<span class="sym">==</span>null<span class="sym">)</span> <span class="kwa">return</span> item<span class="sym">;
</span>         <span class="kwa">else return</span> item <span class="sym">+ (</span>left<span class="sym">.</span>nodeItemSum<span class="sym">() +</span> right<span class="sym">.</span>nodeItemSum<span class="sym">());
      }
   }
}</span>
