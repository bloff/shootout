<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: objinst-icc.code,v 1.11 2005-12-02 08:06:04 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>


<span class="kwb">enum</span> <span class="sym">{</span><span class="kwa">false</span><span class="sym">,</span> <span class="kwa">true</span><span class="sym">};</span>

<span class="dir">#define TOGGLE \</span>
<span class="dir">    char state; \</span>
<span class="dir">    char (*value)(struct Toggle *); \</span>
<span class="dir">    struct Toggle *(*activate)(struct Toggle *)</span>

<span class="dir">#define DESTROY  free</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> Toggle <span class="sym">{</span>
    TOGGLE<span class="sym">;</span>
<span class="sym">}</span> Toggle<span class="sym">;</span>

<span class="kwb">char</span> <span class="kwd">toggle_value</span><span class="sym">(</span>Toggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">) {</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">-&gt;</span>state<span class="sym">);</span>
<span class="sym">}</span>
Toggle <span class="sym">*</span><span class="kwd">toggle_activate</span><span class="sym">(</span>Toggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">) {</span>
    <span class="kwa">this</span><span class="sym">-&gt;</span>state <span class="sym">= !</span><span class="kwa">this</span><span class="sym">-&gt;</span>state<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
<span class="sym">}</span>
Toggle <span class="sym">*</span><span class="kwd">init_Toggle</span><span class="sym">(</span>Toggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">,</span> <span class="kwb">char</span> start_state<span class="sym">) {</span>
    <span class="kwa">this</span><span class="sym">-&gt;</span>state <span class="sym">=</span> start_state<span class="sym">;</span>
    <span class="kwa">this</span><span class="sym">-&gt;</span>value <span class="sym">=</span> toggle_value<span class="sym">;</span>
    <span class="kwa">this</span><span class="sym">-&gt;</span>activate <span class="sym">=</span> toggle_activate<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
<span class="sym">}</span>
Toggle <span class="sym">*</span><span class="kwd">new_Toggle</span><span class="sym">(</span><span class="kwb">char</span> start_state<span class="sym">) {</span>
    Toggle <span class="sym">*</span><span class="kwa">this</span> <span class="sym">= (</span>Toggle <span class="sym">*)</span><span class="kwd">malloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>Toggle<span class="sym">));</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="kwd">init_Toggle</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> start_state<span class="sym">));</span>
<span class="sym">}</span>


<span class="kwc">typedef</span> <span class="kwb">struct</span> NthToggle <span class="sym">{</span>
    TOGGLE<span class="sym">;</span>
    <span class="kwb">int</span> count_max<span class="sym">;</span>
    <span class="kwb">int</span> counter<span class="sym">;</span>
<span class="sym">}</span> NthToggle<span class="sym">;</span>

NthToggle <span class="sym">*</span><span class="kwd">nth_toggle_activate</span><span class="sym">(</span>NthToggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">) {</span>
    <span class="kwa">if</span> <span class="sym">(++</span><span class="kwa">this</span><span class="sym">-&gt;</span>counter <span class="sym">&gt;=</span> <span class="kwa">this</span><span class="sym">-&gt;</span>count_max<span class="sym">) {</span>
	<span class="kwa">this</span><span class="sym">-&gt;</span>state <span class="sym">= !</span><span class="kwa">this</span><span class="sym">-&gt;</span>state<span class="sym">;</span>
	<span class="kwa">this</span><span class="sym">-&gt;</span>counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
<span class="sym">}</span>
NthToggle <span class="sym">*</span><span class="kwd">init_NthToggle</span><span class="sym">(</span>NthToggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">,</span> <span class="kwb">int</span> max_count<span class="sym">) {</span>
    <span class="kwa">this</span><span class="sym">-&gt;</span>count_max <span class="sym">=</span> max_count<span class="sym">;</span>
    <span class="kwa">this</span><span class="sym">-&gt;</span>counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">this</span><span class="sym">-&gt;</span>activate <span class="sym">= (</span>Toggle <span class="sym">*(*)(</span>Toggle <span class="sym">*))</span>nth_toggle_activate<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
<span class="sym">}</span>
NthToggle <span class="sym">*</span><span class="kwd">new_NthToggle</span><span class="sym">(</span><span class="kwb">char</span> start_state<span class="sym">,</span> <span class="kwb">int</span> max_count<span class="sym">) {</span>
    NthToggle <span class="sym">*</span><span class="kwa">this</span> <span class="sym">= (</span>NthToggle <span class="sym">*)</span><span class="kwd">malloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>NthToggle<span class="sym">));</span>
    <span class="kwa">this</span> <span class="sym">= (</span>NthToggle <span class="sym">*)</span><span class="kwd">init_Toggle</span><span class="sym">((</span>Toggle <span class="sym">*)</span><span class="kwa">this</span><span class="sym">,</span> start_state<span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="kwd">init_NthToggle</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> max_count<span class="sym">));</span>
<span class="sym">}</span>


<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>
    Toggle <span class="sym">*</span>tog<span class="sym">;</span>
    NthToggle <span class="sym">*</span>ntog<span class="sym">;</span>

    tog <span class="sym">=</span> <span class="kwd">new_Toggle</span><span class="sym">(</span><span class="kwa">true</span><span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">5</span><span class="sym">;</span> i<span class="sym">++) {</span>
	<span class="kwd">fputs</span><span class="sym">((</span>tog<span class="sym">-&gt;</span><span class="kwd">activate</span><span class="sym">(</span>tog<span class="sym">)-&gt;</span><span class="kwd">value</span><span class="sym">(</span>tog<span class="sym">))</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwd">DESTROY</span><span class="sym">(</span>tog<span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	tog <span class="sym">=</span> <span class="kwd">new_Toggle</span><span class="sym">(</span><span class="kwa">true</span><span class="sym">);</span>
	<span class="kwd">DESTROY</span><span class="sym">(</span>tog<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwd">fputs</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);</span>

    ntog <span class="sym">=</span> <span class="kwd">new_NthToggle</span><span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">8</span><span class="sym">;</span> i<span class="sym">++) {</span>
	<span class="kwd">fputs</span><span class="sym">((</span>ntog<span class="sym">-&gt;</span><span class="kwd">activate</span><span class="sym">(</span>ntog<span class="sym">)-&gt;</span><span class="kwd">value</span><span class="sym">(</span>ntog<span class="sym">))</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwd">DESTROY</span><span class="sym">(</span>ntog<span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	ntog <span class="sym">=</span> <span class="kwd">new_NthToggle</span><span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
	<span class="kwd">DESTROY</span><span class="sym">(</span>ntog<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
