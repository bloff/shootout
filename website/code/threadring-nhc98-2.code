<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- Contributed by Jed Brown with improvements by Spencer Janssen and Don Stewart</span>

<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> Control.Concurrent
<span class="kwa">import</span> System.Environment

ring <span class="sym">=</span> <span class="num">503</span>

new l i <span class="sym">=</span> <span class="kwa">do</span>
  r <span class="sym">&lt;-</span> newEmptyMVar
  forkIO <span class="sym">(</span>thread i l r<span class="sym">)</span>
  return r

thread <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> MVar <span class="kwb">Int</span> <span class="sym">-&gt;</span> MVar <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">()</span>
thread i l r <span class="sym">=</span> go
  <span class="kwa">where</span> go <span class="sym">=</span> <span class="kwa">do</span>
          m <span class="sym">&lt;-</span> takeMVar l
          when <span class="sym">(</span>m <span class="sym">==</span> <span class="num">1</span><span class="sym">) (</span>print i<span class="sym">)</span>
          putMVar r $<span class="sym">!</span> m <span class="sym">-</span> <span class="num">1</span>
          when <span class="sym">(</span>m <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> go

main <span class="sym">=</span> <span class="kwa">do</span>
  a <span class="sym">&lt;-</span> newMVar . read . head <span class="sym">=&lt;&lt;</span> getArgs
  z <span class="sym">&lt;-</span> foldM new a <span class="sym">[</span><span class="num">2</span>..ring<span class="sym">]</span>
  thread <span class="num">1</span> z a
