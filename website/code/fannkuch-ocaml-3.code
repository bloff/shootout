<span class="com">(* fannkuch.ml</span>
<span class="com"></span>
<span class="com">   The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Troestler Christophe</span>
<span class="com">*)</span>

<span class="com">(* Monomorphic version for speed *)</span>
<span class="kwa">let</span> max <span class="sym">(</span>x <span class="sym">:</span> <span class="kwb">int</span><span class="sym">)</span> y <span class="sym">=</span> <span class="kwa">if</span> x <span class="sym">&lt;</span> y <span class="kwa">then</span> y <span class="kwa">else</span> x

<span class="kwa">let rec</span> count_flips c perm <span class="sym">=</span>
  <span class="kwa">let</span> k <span class="sym">=</span> perm.<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">if</span> k <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> c <span class="kwa">else</span> <span class="sym">(</span>
    <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> k <span class="sym">/</span> <span class="num">2</span> <span class="kwa">do</span>
      <span class="kwa">let</span> k_i <span class="sym">=</span> k <span class="sym">-</span> i <span class="kwa">and</span> perm_i <span class="sym">=</span> perm.<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">in</span>
      perm.<span class="sym">(</span>i<span class="sym">) &lt;-</span> perm.<span class="sym">(</span>k_i<span class="sym">);</span>  perm.<span class="sym">(</span>k_i<span class="sym">) &lt;-</span> perm_i
    <span class="kwa">done</span><span class="sym">;</span>
    count_flips <span class="sym">(</span>c <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> perm
  <span class="sym">)</span>

<span class="kwa">let</span> count_flips <span class="sym">=</span> count_flips <span class="num">0</span>


<span class="kwa">let</span> pfannkuchen n <span class="sym">=</span>
  <span class="kwa">let</span> perm <span class="sym">=</span> Array.init n <span class="sym">(</span><span class="kwa">fun</span> i <span class="sym">-&gt;</span> i<span class="sym">)</span>
  <span class="kwa">and</span> perm' <span class="sym">=</span> Array.make n <span class="num">0</span>
  <span class="kwa">and</span> count <span class="sym">=</span> Array.init n <span class="sym">(</span><span class="kwa">fun</span> i <span class="sym">-&gt;</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">in</span>

  <span class="kwa">let</span> m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span> <span class="kwa">in</span>
  <span class="kwa">let rec</span> loop_perm maxflips r <span class="sym">=</span>
    <span class="kwa">if</span> r <span class="sym">=</span> n <span class="kwa">then</span> maxflips <span class="kwa">else</span> <span class="sym">(</span>
      <span class="com">(* Rotate perm.(0 .. r-1) *)</span>
      <span class="kwa">let</span> perm0 <span class="sym">=</span> perm.<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">in</span>
      <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> r <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span> perm.<span class="sym">(</span>i<span class="sym">) &lt;-</span> perm.<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
      perm.<span class="sym">(</span>r<span class="sym">) &lt;-</span> perm0<span class="sym">;</span>

      count.<span class="sym">(</span>r<span class="sym">) &lt;-</span> count.<span class="sym">(</span>r<span class="sym">) -</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">if</span> count.<span class="sym">(</span>r<span class="sym">) &gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(</span>
	<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> r <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span> count.<span class="sym">(</span>i<span class="sym">) &lt;-</span> i <span class="sym">+</span> <span class="num">1</span> <span class="kwa">done</span><span class="sym">;</span>
	<span class="kwa">if</span> perm.<span class="sym">(</span><span class="num">0</span><span class="sym">) &lt;&gt;</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> perm.<span class="sym">(</span>m<span class="sym">) &lt;&gt;</span> m <span class="kwa">then</span> <span class="sym">(</span>
	  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> m <span class="kwa">do</span> perm'.<span class="sym">(</span>i<span class="sym">) &lt;-</span> perm.<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
	  loop_perm <span class="sym">(</span>max <span class="sym">(</span>count_flips perm'<span class="sym">)</span> maxflips<span class="sym">)</span> <span class="num">1</span>
	<span class="sym">)</span>
	<span class="kwa">else</span> loop_perm maxflips <span class="num">1</span>
      <span class="sym">)</span>
      <span class="kwa">else</span> loop_perm maxflips <span class="sym">(</span>r<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
    <span class="sym">)</span> <span class="kwa">in</span>
  loop_perm <span class="num">0 1</span>


<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">1</span> <span class="kwa">in</span>
  Printf.printf <span class="str">&quot;Pfannkuchen(%i) = %i</span><span class="esc">\n</span><span class="str">&quot;</span> n <span class="sym">(</span>pfannkuchen n<span class="sym">)</span>
