<span class="com">(* fannkuch.ml

   The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Troestler Christophe
*)</span>

<span class="com">(* Monomorphic version for speed *)</span>
<span class="kwa">let</span> max <span class="sym">(</span>x <span class="sym">:</span> <span class="kwb">int</span><span class="sym">)</span> y <span class="sym">=</span> <span class="kwa">if</span> x <span class="sym">&lt;</span> y <span class="kwa">then</span> y <span class="kwa">else</span> x

<span class="kwa">let rec</span> count_flips c perm <span class="sym">=
</span>  <span class="kwa">let</span> k <span class="sym">=</span> perm.<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">in
  if</span> k <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> c <span class="kwa">else</span> <span class="sym">(
</span>    <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> k <span class="sym">/</span> <span class="num">2</span> <span class="kwa">do
      let</span> k_i <span class="sym">=</span> k <span class="sym">-</span> i <span class="kwa">and</span> perm_i <span class="sym">=</span> perm.<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">in
</span>      perm.<span class="sym">(</span>i<span class="sym">) &lt;-</span> perm.<span class="sym">(</span>k_i<span class="sym">);</span>  perm.<span class="sym">(</span>k_i<span class="sym">) &lt;-</span> perm_i
    <span class="kwa">done</span><span class="sym">;
</span>    count_flips <span class="sym">(</span>c <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> perm
  <span class="sym">)

</span><span class="kwa">let</span> count_flips <span class="sym">=</span> count_flips <span class="num">0


</span><span class="kwa">let</span> pfannkuchen n <span class="sym">=
</span>  <span class="kwa">let</span> perm <span class="sym">=</span> Array.init n <span class="sym">(</span><span class="kwa">fun</span> i <span class="sym">-&gt;</span> i<span class="sym">)
</span>  <span class="kwa">and</span> perm<span class="str">' = Array.make n 0
  and count = Array.init n (fun i -&gt; i + 1) in

  let m = n - 1 in
  let rec loop_perm maxflips r =
    if r = n then maxflips else (
      (* Rotate perm.(0 .. r-1) *)
      let perm0 = perm.(0) in
      for i = 0 to r - 1 do perm.(i) &lt;- perm.(i+1) done;
      perm.(r) &lt;- perm0;

      count.(r) &lt;- count.(r) - 1;
      if count.(r) &gt; 0 then (
	for i = 1 to r - 1 do count.(i) &lt;- i + 1 done;
	if perm.(0) &lt;&gt; 0 &amp;&amp; perm.(m) &lt;&gt; m then (
	  for i = 0 to m do perm'</span>.<span class="sym">(</span>i<span class="sym">) &lt;-</span> perm.<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">done</span><span class="sym">;
</span>	  loop_perm <span class="sym">(</span>max <span class="sym">(</span>count_flips perm<span class="str">') maxflips) 1
	)
	else loop_perm maxflips 1
      )
      else loop_perm maxflips (r+1)
    ) in
  loop_perm 0 1


let () =
  let n = try int_of_string Sys.argv.(1) with _ -&gt; 1 in
  Printf.printf &quot;Pfannkuchen(%i) = %i</span><span class="esc">\n</span><span class="str">&quot; n (pfannkuchen n)</span>
