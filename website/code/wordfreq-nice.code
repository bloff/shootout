<span class="line">    1 </span><span class="com">/* The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="com">     http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="com">    contributed by Isaac Gouy
</span><span class="line">    4 </span><span class="com"> 
</span><span class="line">    5 </span><span class="com"> To compile:
</span><span class="line">    6 </span><span class="com">            nicec --sourcepath=.. -d=. -a wordfreq.jar wordfreq
</span><span class="line">    7 </span><span class="com"> 
</span><span class="line">    8 </span><span class="com"> To run:
</span><span class="line">    9 </span><span class="com">    java -jar wordfreq.jar &lt; input.txt &gt; out.txt
</span><span class="line">   10 </span><span class="com"> */</span>
<span class="line">   11 </span>
<span class="line">   12 </span>
<span class="line">   13 </span>   <span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="line">   14 </span><span class="sym"> 
</span><span class="line">   15 </span><span class="sym"> </span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span><span class="line">   16 </span><span class="sym"> </span>   <span class="kwa">let</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">(</span><span class="num">32</span><span class="sym">);
</span><span class="line">   17 </span><span class="sym"> </span>   <span class="kwa">let</span> <span class="kwc">HashMap</span><span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">,</span>Cell<span class="sym">&gt;</span> wordCounts <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();
</span><span class="line">   18 </span><span class="sym"> 
</span><span class="line">   19 </span><span class="sym"> </span><span class="slc">// local method 
</span><span class="line">   20 </span><span class="slc"></span>   <span class="kwb">void</span> flushWordBuffer<span class="sym">(){
</span><span class="line">   21 </span><span class="sym"> </span>      ?Cell count<span class="sym">;
</span><span class="line">   22 </span><span class="sym"> </span>      <span class="kwa">if</span> <span class="sym">(</span>buffer<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span><span class="line">   23 </span><span class="sym">  </span>         var word <span class="sym">=</span> buffer<span class="sym">.</span>toString<span class="sym">;
</span><span class="line">   24 </span><span class="sym"> </span>         <span class="kwa">if</span> <span class="sym">((</span>count <span class="sym">=</span> wordCounts<span class="sym">[</span>word<span class="sym">]) ==</span> null<span class="sym">)
</span><span class="line">   25 </span><span class="sym">  </span>            wordCounts<span class="sym">[</span>word<span class="sym">] =</span> <span class="kwa">new</span> Cell<span class="sym">(</span>value<span class="sym">:</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   26 </span><span class="sym"> </span>         <span class="kwa">else
</span><span class="line">   27 </span><span class="kwa">  </span>            count<span class="sym">.</span>value<span class="sym">++;
</span><span class="line">   28 </span><span class="sym"> </span>         buffer<span class="sym">.</span>setLength<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   29 </span><span class="sym">       }
</span><span class="line">   30 </span><span class="sym">    }
</span><span class="line">   31 </span><span class="sym"> 
</span><span class="line">   32 </span><span class="sym"> 
</span><span class="line">   33 </span><span class="sym"> </span>   <span class="kwa">try
</span><span class="line">   34 </span><span class="kwa">  </span>   <span class="sym">{
</span><span class="line">   35 </span><span class="sym"> </span>      <span class="kwa">let</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span><span class="line">   36 </span><span class="sym"> </span>      <span class="kwb">int</span> v<span class="sym">;
</span><span class="line">   37 </span><span class="sym">  </span>      <span class="kwa">while</span> <span class="sym">((</span>v <span class="sym">=</span> r<span class="sym">.</span>read<span class="sym">) != -</span><span class="num">1</span><span class="sym">) {
</span><span class="line">   38 </span><span class="sym"> </span>         <span class="kwa">let</span> c <span class="sym">=</span> <span class="kwb">char</span><span class="sym">(</span>v<span class="sym">);
</span><span class="line">   39 </span><span class="sym"> </span>         <span class="kwa">if</span> <span class="sym">(</span><span class="kwc">Character</span><span class="sym">.</span>isLetter<span class="sym">(</span>c<span class="sym">))
</span><span class="line">   40 </span><span class="sym">  </span>            buffer<span class="sym">.</span>append<span class="sym">(</span><span class="kwc">Character</span><span class="sym">.</span>toLowerCase<span class="sym">(</span>c<span class="sym">));
</span><span class="line">   41 </span><span class="sym"> </span>         <span class="kwa">else
</span><span class="line">   42 </span><span class="kwa">  </span>            flushWordBuffer<span class="sym">();
</span><span class="line">   43 </span><span class="sym">       }
</span><span class="line">   44 </span><span class="sym"> </span>      flushWordBuffer<span class="sym">();
</span><span class="line">   45 </span><span class="sym">    }
</span><span class="line">   46 </span><span class="sym">  </span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span><span class="line">   47 </span><span class="sym">  </span>      <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">); }
</span><span class="line">   48 </span><span class="sym"> 
</span><span class="line">   49 </span><span class="sym"> </span>   <span class="kwc">ArrayList</span><span class="sym">&lt;</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">,</span> Cell<span class="sym">&gt;&gt;</span> entries <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">(</span>wordCounts<span class="sym">.</span>entrySet<span class="sym">);
</span><span class="line">   50 </span><span class="sym"> 
</span><span class="line">   51 </span><span class="sym"> </span><span class="slc">// Use an anonymous function to define the sort, no type casts needed 
</span><span class="line">   52 </span><span class="slc"></span>   sort<span class="sym">(</span> entries<span class="sym">,
</span><span class="line">   53 </span><span class="sym">        (</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">,</span> Cell<span class="sym">&gt;</span> e1<span class="sym">,</span> <span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">,</span> Cell<span class="sym">&gt;</span> e2<span class="sym">) =&gt; {
</span><span class="line">   54 </span><span class="sym"> </span>         <span class="kwa">let</span> i <span class="sym">=</span> e2<span class="sym">.</span>getValue<span class="sym">.</span>value <span class="sym">-</span> e1<span class="sym">.</span>getValue<span class="sym">.</span>value<span class="sym">;</span> <span class="slc">// sort by frequency 
</span><span class="line">   55 </span><span class="slc"></span>         <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">!=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> i<span class="sym">;
</span><span class="line">   56 </span><span class="sym"> </span>         <span class="kwa">else return</span> e2<span class="sym">.</span>getKey<span class="sym">.</span>compareTo<span class="sym">(</span> e1<span class="sym">.</span>getKey <span class="sym">);</span>  <span class="slc">// sort by word 
</span><span class="line">   57 </span><span class="slc"></span>         <span class="sym">}
</span><span class="line">   58 </span><span class="sym">       );
</span><span class="line">   59 </span><span class="sym"> 
</span><span class="line">   60 </span><span class="sym"> </span>   <span class="kwa">for</span> <span class="sym">(</span>each <span class="sym">:</span> entries<span class="sym">) {
</span><span class="line">   61 </span><span class="sym"> </span>      buffer<span class="sym">.</span>setLength<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   62 </span><span class="sym"> </span>      <span class="kwa">let</span> count <span class="sym">=</span> each<span class="sym">.</span>getValue<span class="sym">.</span>value<span class="sym">.</span>toString<span class="sym">;
</span><span class="line">   63 </span><span class="sym"> </span>      var pad <span class="sym">=</span> <span class="num">7</span> <span class="sym">-</span> count<span class="sym">.</span>length<span class="sym">;
</span><span class="line">   64 </span><span class="sym"> </span>      <span class="kwa">while</span> <span class="sym">(</span>pad<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)</span> buffer<span class="sym">.</span>append<span class="sym">(</span><span class="str">' '</span><span class="sym">);
</span><span class="line">   65 </span><span class="sym"> 
</span><span class="line">   66 </span><span class="sym"> </span>      buffer<span class="sym">.</span>append<span class="sym">(</span>count<span class="sym">);
</span><span class="line">   67 </span><span class="sym"> </span>      buffer<span class="sym">.</span>append<span class="sym">(</span><span class="str">' '</span><span class="sym">);
</span><span class="line">   68 </span><span class="sym"> </span>      buffer<span class="sym">.</span>append<span class="sym">(</span>each<span class="sym">.</span>getKey<span class="sym">);
</span><span class="line">   69 </span><span class="sym"> </span>      println<span class="sym">(</span>buffer<span class="sym">);
</span><span class="line">   70 </span><span class="sym">    }
</span><span class="line">   71 </span><span class="sym"> }
</span><span class="line">   72 </span><span class="sym"> 
</span><span class="line">   73 </span><span class="sym"> 
</span><span class="line">   74 </span><span class="sym"> </span><span class="kwa">class</span> Cell <span class="sym">{</span> <span class="kwb">int</span> value<span class="sym">; }</span> 
