<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

To compile:	
   nicec --sourcepath=.. -d=. -a wordfreq.jar wordfreq

To run:
   java -jar wordfreq.jar &lt; input.txt &gt; out.txt
*/</FONT></I>


<B><FONT COLOR="#A020F0">import</FONT></B> java.io.*;

<B><FONT COLOR="#A020F0">void</FONT></B> main(String[] args){
   let buffer = <B><FONT COLOR="#A020F0">new</FONT></B> StringBuffer(32);
   let HashMap&lt;String,Cell&gt; wordCounts = <B><FONT COLOR="#A020F0">new</FONT></B> HashMap();

<I><FONT COLOR="#B22222">// local method
</FONT></I>   <B><FONT COLOR="#A020F0">void</FONT></B> flushWordBuffer(){
      ?Cell count;
      <B><FONT COLOR="#A020F0">if</FONT></B> (buffer.length &gt; 0) { 
         var word = buffer.toString;
         <B><FONT COLOR="#A020F0">if</FONT></B> ((count = wordCounts[word]) == <B><FONT COLOR="#A020F0">null</FONT></B>) 
            wordCounts[word] = <B><FONT COLOR="#A020F0">new</FONT></B> Cell(value: 1);
         <B><FONT COLOR="#A020F0">else</FONT></B> 
            count.value++;
         buffer.setLength(0);
      }
   }


   <B><FONT COLOR="#A020F0">try</FONT></B> 
   {
      let r = <B><FONT COLOR="#A020F0">new</FONT></B> BufferedReader(<B><FONT COLOR="#A020F0">new</FONT></B> InputStreamReader(System.in));
      <B><FONT COLOR="#A020F0">int</FONT></B> v; 
      <B><FONT COLOR="#A020F0">while</FONT></B> ((v = r.read) != -1) {
         let c = <B><FONT COLOR="#A020F0">char</FONT></B>(v);
         <B><FONT COLOR="#A020F0">if</FONT></B> (Character.isLetter(c)) 
            buffer.append(Character.toLowerCase(c));
         <B><FONT COLOR="#A020F0">else</FONT></B> 
            flushWordBuffer();
      }
      flushWordBuffer();
   } 
   <B><FONT COLOR="#A020F0">catch</FONT></B> (IOException e) { 
      System.err.println(e); }

   ArrayList&lt;Map.Entry&lt;String, Cell&gt;&gt; entries = <B><FONT COLOR="#A020F0">new</FONT></B> ArrayList(wordCounts.entrySet);

<I><FONT COLOR="#B22222">// Use an anonymous function to define the sort, no type casts needed
</FONT></I>   sort( entries, 
      (Map.Entry&lt;String, Cell&gt; e1, Map.Entry&lt;String, Cell&gt; e2) =&gt; {
         let i = e2.getValue.value - e1.getValue.value; <I><FONT COLOR="#B22222">// sort by frequency
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> (i != 0) <B><FONT COLOR="#A020F0">return</FONT></B> i;
         <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">return</FONT></B> e2.getKey.compareTo( e1.getKey );  <I><FONT COLOR="#B22222">// sort by word
</FONT></I>         }
      );

   <B><FONT COLOR="#A020F0">for</FONT></B> (each : entries) {
      buffer.setLength(0);
      let count = each.getValue.value.toString;
      var pad = 7 - count.length;
      <B><FONT COLOR="#A020F0">while</FONT></B> (pad-- &gt; 0) buffer.append(<B><FONT COLOR="#BC8F8F">' '</FONT></B>);

      buffer.append(count);
      buffer.append(<B><FONT COLOR="#BC8F8F">' '</FONT></B>);
      buffer.append(each.getKey);
      println(buffer);
   }
}


<B><FONT COLOR="#A020F0">class</FONT></B> Cell { <B><FONT COLOR="#A020F0">int</FONT></B> value; }</pre></td></tr></table>
