<span class="com">/* The Great Computer Language Shootout
    http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

To compile:
	   nicec --sourcepath=.. -d=. -a wordfreq.jar wordfreq

To run:
   java -jar wordfreq.jar &lt; input.txt &gt; out.txt
*/</span>


<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   <span class="kwa">let</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">(</span><span class="num">32</span><span class="sym">);
</span>   <span class="kwa">let</span> <span class="kwc">HashMap</span><span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">,</span>Cell<span class="sym">&gt;</span> wordCounts <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();

</span><span class="slc">// local method
</span>   <span class="kwb">void</span> flushWordBuffer<span class="sym">(){
</span>      ?Cell count<span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>buffer<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
 </span>         var word <span class="sym">=</span> buffer<span class="sym">.</span>toString<span class="sym">;
</span>         <span class="kwa">if</span> <span class="sym">((</span>count <span class="sym">=</span> wordCounts<span class="sym">[</span>word<span class="sym">]) ==</span> null<span class="sym">)
 </span>            wordCounts<span class="sym">[</span>word<span class="sym">] =</span> <span class="kwa">new</span> Cell<span class="sym">(</span>value<span class="sym">:</span> <span class="num">1</span><span class="sym">);
</span>         <span class="kwa">else
 </span>            count<span class="sym">.</span>value<span class="sym">++;
</span>         buffer<span class="sym">.</span>setLength<span class="sym">(</span><span class="num">0</span><span class="sym">);
      }
   }


</span>   <span class="kwa">try
 </span>   <span class="sym">{
</span>      <span class="kwa">let</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span>      <span class="kwb">int</span> v<span class="sym">;
 </span>      <span class="kwa">while</span> <span class="sym">((</span>v <span class="sym">=</span> r<span class="sym">.</span>read<span class="sym">) != -</span><span class="num">1</span><span class="sym">) {
</span>         <span class="kwa">let</span> c <span class="sym">=</span> <span class="kwb">char</span><span class="sym">(</span>v<span class="sym">);
</span>         <span class="kwa">if</span> <span class="sym">(</span><span class="kwc">Character</span><span class="sym">.</span>isLetter<span class="sym">(</span>c<span class="sym">))
 </span>            buffer<span class="sym">.</span>append<span class="sym">(</span><span class="kwc">Character</span><span class="sym">.</span>toLowerCase<span class="sym">(</span>c<span class="sym">));
</span>         <span class="kwa">else
 </span>            flushWordBuffer<span class="sym">();
      }
</span>      flushWordBuffer<span class="sym">();
   }
 </span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
 </span>      <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">); }

</span>   <span class="kwc">ArrayList</span><span class="sym">&lt;</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">,</span> Cell<span class="sym">&gt;&gt;</span> entries <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">(</span>wordCounts<span class="sym">.</span>entrySet<span class="sym">);

</span><span class="slc">// Use an anonymous function to define the sort, no type casts needed
</span>   sort<span class="sym">(</span> entries<span class="sym">,
       (</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">,</span> Cell<span class="sym">&gt;</span> e1<span class="sym">,</span> <span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">,</span> Cell<span class="sym">&gt;</span> e2<span class="sym">) =&gt; {
</span>         <span class="kwa">let</span> i <span class="sym">=</span> e2<span class="sym">.</span>getValue<span class="sym">.</span>value <span class="sym">-</span> e1<span class="sym">.</span>getValue<span class="sym">.</span>value<span class="sym">;</span> <span class="slc">// sort by frequency
</span>         <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">!=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> i<span class="sym">;
</span>         <span class="kwa">else return</span> e2<span class="sym">.</span>getKey<span class="sym">.</span>compareTo<span class="sym">(</span> e1<span class="sym">.</span>getKey <span class="sym">);</span>  <span class="slc">// sort by word
</span>         <span class="sym">}
      );

</span>   <span class="kwa">for</span> <span class="sym">(</span>each <span class="sym">:</span> entries<span class="sym">) {
</span>      buffer<span class="sym">.</span>setLength<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>      <span class="kwa">let</span> count <span class="sym">=</span> each<span class="sym">.</span>getValue<span class="sym">.</span>value<span class="sym">.</span>toString<span class="sym">;
</span>      var pad <span class="sym">=</span> <span class="num">7</span> <span class="sym">-</span> count<span class="sym">.</span>length<span class="sym">;
</span>      <span class="kwa">while</span> <span class="sym">(</span>pad<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)</span> buffer<span class="sym">.</span>append<span class="sym">(</span><span class="str">' '</span><span class="sym">);

</span>      buffer<span class="sym">.</span>append<span class="sym">(</span>count<span class="sym">);
</span>      buffer<span class="sym">.</span>append<span class="sym">(</span><span class="str">' '</span><span class="sym">);
</span>      buffer<span class="sym">.</span>append<span class="sym">(</span>each<span class="sym">.</span>getKey<span class="sym">);
</span>      println<span class="sym">(</span>buffer<span class="sym">);
   }
}


</span><span class="kwa">class</span> Cell <span class="sym">{</span> <span class="kwb">int</span> value<span class="sym">; }</span>
