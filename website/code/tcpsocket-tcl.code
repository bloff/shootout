<span class="slc">#!/usr/bin/tclsh</span>
<span class="slc">##</span>
<span class="slc">## The Computer Lannguage Shootout</span>
<span class="slc">## http://shootout.alioth.debian.org/</span>
<span class="slc">## Contributed by Heiner Marxen</span>
<span class="slc">##</span>
<span class="slc">## &quot;tcpsocket&quot;	for Tcl</span>
<span class="slc">## Call:	stage /path/to/tcpsocket.tcl N</span>
<span class="slc">##</span>
<span class="slc">## $Id: tcpsocket-tcl.code,v 1.1 2005-12-19 03:11:57 bfulgham Exp $</span>

<span class="kwa">set</span> PORT	<span class="num">11000</span>
<span class="kwa">set</span> BUFSIZ	<span class="num">1024</span>
<span class="kwa">set</span> REQSIZ	<span class="num">64</span>

<span class="kwa">set</span> repCSlist	<span class="sym">[</span><span class="kwa">list</span> <span class="num">2 64  7 4096  1 409600</span><span class="sym">]	;</span><span class="slc"># pairs of Count and Size</span>

<span class="kwa">proc</span> fdConfig <span class="sym">{</span>fd<span class="sym">} {</span>
    <span class="kwa">fconfigure</span> <span class="kwb">$fd</span> <span class="sym">-</span>buffersize $<span class="sym">::</span>BUFSIZ <span class="sym">-</span><span class="kwa">encoding binary</span> <span class="sym">-</span>translation <span class="kwa">binary</span>
<span class="sym">}</span>

<span class="kwa">proc</span> doClient <span class="sym">{</span>n<span class="sym">} {</span>
    <span class="kwa">set</span> fd <span class="sym">{}</span>
    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="num">3</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	<span class="kwa">if</span> <span class="sym">{![</span><span class="kwa">catch</span> <span class="sym">{</span><span class="kwa">set</span> fd <span class="sym">[</span><span class="kwa">socket</span> localhost $<span class="sym">::</span>PORT<span class="sym">]}]}</span> <span class="kwa">break</span>
	<span class="kwa">puts</span> stderr <span class="str">&quot;&gt;&gt;Client: retry...&quot;</span>
	<span class="kwa">after</span> <span class="num">100</span>
    <span class="sym">}</span>
    fdConfig <span class="kwb">$fd</span>

    <span class="kwa">set</span> request <span class="sym">[</span><span class="kwa">string</span> repeat x $<span class="sym">::</span>REQSIZ<span class="sym">]</span>
    <span class="kwa">set</span> replies <span class="num">0</span>
    <span class="kwa">set</span> bytes   <span class="num">0.0</span>		<span class="sym">;</span><span class="slc"># shall be summed as FP value</span>

    <span class="kwa">foreach</span> <span class="sym">{</span>cnt siz<span class="sym">}</span> $<span class="sym">::</span>repCSlist <span class="sym">{</span>
	<span class="kwa">set</span> requests <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$n</span> <span class="sym">*</span> <span class="kwb">$cnt</span><span class="sym">}]</span>
	<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$requests</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	    <span class="kwa">puts</span> <span class="sym">-</span>nonewline <span class="kwb">$fd $request</span> <span class="sym">;</span> <span class="kwa">flush</span> <span class="kwb">$fd</span>
	    <span class="kwa">set</span> got <span class="sym">[</span><span class="kwa">string</span> length <span class="sym">[</span><span class="kwa">read</span> <span class="kwb">$fd $siz</span><span class="sym">]]</span>
	    <span class="kwa">incr</span> replies
	    <span class="kwa">set</span>  bytes   <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$bytes</span> <span class="sym">+</span> <span class="kwb">$got</span><span class="sym">}]</span>
	<span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">puts</span> <span class="str">&quot;replies: $replies</span><span class="esc">\t</span><span class="str">bytes: [format {%.0f} $bytes]&quot;</span>
<span class="sym">}</span>

<span class="kwa">proc</span> Server <span class="sym">{</span>fd clientaddr clientport<span class="sym">} {</span>
    fdConfig <span class="kwb">$fd</span>

    <span class="kwa">foreach</span> <span class="sym">{</span>cnt siz<span class="sym">}</span> $<span class="sym">::</span>repCSlist <span class="sym">{</span>
	<span class="kwa">set</span> requests <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span>$<span class="sym">::</span>N <span class="sym">*</span> <span class="kwb">$cnt</span><span class="sym">}]</span>
	<span class="kwa">set</span> reply    <span class="sym">[</span><span class="kwa">string</span> repeat y <span class="kwb">$siz</span><span class="sym">]</span>

	<span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$requests</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>
	    <span class="kwa">set</span> got <span class="sym">[</span><span class="kwa">string</span> length <span class="sym">[</span><span class="kwa">read</span> <span class="kwb">$fd</span> $<span class="sym">::</span>REQSIZ<span class="sym">]]</span>
	    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$got</span> <span class="sym">&lt;</span> $<span class="sym">::</span>REQSIZ<span class="sym">} {</span>
		<span class="kwa">puts</span> stderr <span class="str">&quot;&gt;&gt;Server: short request: $got &lt; $::REQSIZ&quot;</span>
		<span class="kwa">break</span>
	    <span class="sym">}</span>
	    <span class="kwa">puts</span> <span class="sym">-</span>nonewline <span class="kwb">$fd $reply</span> <span class="sym">;</span> <span class="kwa">flush</span> <span class="kwb">$fd</span>
	<span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">set</span> <span class="sym">::</span>ready <span class="num">1</span>
<span class="sym">}</span>

<span class="kwa">proc</span> doServer <span class="sym">{</span>n<span class="sym">} {</span>
    <span class="kwa">set</span> <span class="sym">::</span>N <span class="kwb">$n</span>				<span class="sym">;</span><span class="slc"># tell &quot;Server&quot; via global var</span>
    <span class="kwa">socket</span> <span class="sym">-</span>server Server $<span class="sym">::</span>PORT
    <span class="kwa">vwait</span> <span class="sym">::</span>ready
<span class="sym">}</span>

<span class="kwa">proc</span> main <span class="sym">{</span>argv<span class="sym">} {</span>
    <span class="kwa">set</span> n <span class="num">10</span>
    <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">llength</span> <span class="kwb">$argv</span><span class="sym">]} {</span><span class="kwa">set</span> n <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]}</span>

    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$n</span> <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">} {</span>
	doClient <span class="kwb">$n</span>
    <span class="sym">}</span> else <span class="sym">{</span>
	doServer <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span>abs<span class="sym">(</span><span class="kwb">$n</span><span class="sym">)}]</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> <span class="num">0</span>
<span class="sym">}</span>

main <span class="kwb">$argv</span>
