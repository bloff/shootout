<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">//
</FONT></I><I><FONT COLOR="#B22222">// Contributed by John Skaller
</FONT></I><I><FONT COLOR="#B22222">//
</FONT></I>include <B><FONT COLOR="#BC8F8F">&quot;std&quot;</FONT></B>;
n := atoi(System::argv 1);
<I><FONT COLOR="#B22222">// Felix uses explicitly passed closures to handle errors
</FONT></I><I><FONT COLOR="#B22222">// and therefore guarrantees exceptions get caught statically
</FONT></I>
<B><FONT COLOR="#228B22">typedef</FONT></B> err = <B><FONT COLOR="#228B22">int</FONT></B> -&gt; <B><FONT COLOR="#228B22">void</FONT></B>;

var hi = 0;
var lo = 0;

proc <B><FONT COLOR="#0000FF">blowup</FONT></B> (n:<B><FONT COLOR="#228B22">int</FONT></B>, hie:err, loe:err) {
  <B><FONT COLOR="#A020F0">if</FONT></B> n % 2 == 0 <B><FONT COLOR="#A020F0">do</FONT></B> loe n; <B><FONT COLOR="#A020F0">else</FONT></B> hie n; done;
}

proc <B><FONT COLOR="#0000FF">lo_fun</FONT></B> (n:<B><FONT COLOR="#228B22">int</FONT></B>, hie:err) {
  blowup (n,hie,loe of (<B><FONT COLOR="#228B22">int</FONT></B>));
  proc loe(n:<B><FONT COLOR="#228B22">int</FONT></B>) { ++lo; <B><FONT COLOR="#A020F0">goto</FONT></B> <B><FONT COLOR="#5F9EA0">fin</FONT></B>; }
<B><FONT COLOR="#5F9EA0">fin</FONT></B>:&gt;
}

proc <B><FONT COLOR="#0000FF">hi_fun</FONT></B> (n:<B><FONT COLOR="#228B22">int</FONT></B>) {
  lo_fun (n,hie of (<B><FONT COLOR="#228B22">int</FONT></B>));
  proc hie(n:<B><FONT COLOR="#228B22">int</FONT></B>) { ++hi; <B><FONT COLOR="#A020F0">goto</FONT></B> <B><FONT COLOR="#5F9EA0">fin</FONT></B>; }
<B><FONT COLOR="#5F9EA0">fin</FONT></B>:&gt;
}

proc <B><FONT COLOR="#0000FF">some_fun</FONT></B> (n:<B><FONT COLOR="#228B22">int</FONT></B>) { hi_fun n; }

var i = n - 1;
until i &lt; 0 <B><FONT COLOR="#A020F0">do</FONT></B> some_fun i; --i; done;
print <B><FONT COLOR="#BC8F8F">&quot;Exceptions: HI=&quot;</FONT></B>; print hi; print <B><FONT COLOR="#BC8F8F">&quot; / LO=&quot;</FONT></B>; print lo; endl;

</pre></td></tr></table>
