<span class="line">    1 </span><span class="slc">//
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// Contributed by John Skaller
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">//
</span><span class="line">    4 </span><span class="slc"></span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span><span class="line">    5 </span><span class="sym"></span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);
</span><span class="line">    6 </span><span class="sym"></span><span class="slc">// Felix uses explicitly passed closures to handle errors
</span><span class="line">    7 </span><span class="slc"></span><span class="slc">// and therefore guarrantees exceptions get caught statically
</span><span class="line">    8 </span><span class="slc"></span>
<span class="line">    9 </span><span class="kwa">typedef</span> err <span class="sym">=</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">void</span><span class="sym">;
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span><span class="kwa">var</span> hi <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   12 </span><span class="sym"></span><span class="kwa">var</span> lo <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span><span class="kwa">proc</span> blowup <span class="sym">(</span>n<span class="sym">:</span><span class="kwb">int</span><span class="sym">,</span> hie<span class="sym">:</span>err<span class="sym">,</span> loe<span class="sym">:</span>err<span class="sym">) {
</span><span class="line">   15 </span><span class="sym"></span>  <span class="kwa">if</span> n <span class="sym">%</span> <span class="num">2</span> <span class="sym">==</span> <span class="num">0</span> do loe n<span class="sym">;</span> <span class="kwa">else</span> hie n<span class="sym">;</span> done<span class="sym">;
</span><span class="line">   16 </span><span class="sym">}
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span><span class="kwa">proc</span> lo_fun <span class="sym">(</span>n<span class="sym">:</span><span class="kwb">int</span><span class="sym">,</span> hie<span class="sym">:</span>err<span class="sym">) {
</span><span class="line">   19 </span><span class="sym"></span>  blowup <span class="sym">(</span>n<span class="sym">,</span>hie<span class="sym">,</span>loe <span class="kwa">of</span> <span class="sym">(</span><span class="kwb">int</span><span class="sym">));
</span><span class="line">   20 </span><span class="sym"></span>  <span class="kwa">proc</span> loe<span class="sym">(</span>n<span class="sym">:</span><span class="kwb">int</span><span class="sym">) { ++</span>lo<span class="sym">;</span> <span class="kwa">goto</span> fin<span class="sym">; }
</span><span class="line">   21 </span><span class="sym"></span>fin<span class="sym">:&gt;
</span><span class="line">   22 </span><span class="sym">}
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span><span class="kwa">proc</span> hi_fun <span class="sym">(</span>n<span class="sym">:</span><span class="kwb">int</span><span class="sym">) {
</span><span class="line">   25 </span><span class="sym"></span>  lo_fun <span class="sym">(</span>n<span class="sym">,</span>hie <span class="kwa">of</span> <span class="sym">(</span><span class="kwb">int</span><span class="sym">));
</span><span class="line">   26 </span><span class="sym"></span>  <span class="kwa">proc</span> hie<span class="sym">(</span>n<span class="sym">:</span><span class="kwb">int</span><span class="sym">) { ++</span>hi<span class="sym">;</span> <span class="kwa">goto</span> fin<span class="sym">; }
</span><span class="line">   27 </span><span class="sym"></span>fin<span class="sym">:&gt;
</span><span class="line">   28 </span><span class="sym">}
</span><span class="line">   29 </span><span class="sym">
</span><span class="line">   30 </span><span class="sym"></span><span class="kwa">proc</span> some_fun <span class="sym">(</span>n<span class="sym">:</span><span class="kwb">int</span><span class="sym">) {</span> hi_fun n<span class="sym">; }
</span><span class="line">   31 </span><span class="sym">
</span><span class="line">   32 </span><span class="sym"></span><span class="kwa">var</span> i <span class="sym">=</span> n <span class="num">- 1</span><span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>until i <span class="sym">&lt;</span> <span class="num">0</span> do some_fun i<span class="sym">; --</span>i<span class="sym">;</span> done<span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span><span class="kwa">print</span> <span class="str">&quot;Exceptions: HI=&quot;</span><span class="sym">;</span> <span class="kwa">print</span> hi<span class="sym">;</span> <span class="kwa">print</span> <span class="str">&quot; / LO=&quot;</span><span class="sym">;</span> <span class="kwa">print</span> lo<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">   35 </span><span class="sym">
</span><span class="line">   36 </span><span class="sym"></span>
