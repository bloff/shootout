<span class="slc">-- $Id: regexmatch-gnat.code,v 1.1 2005-04-04 14:56:57 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- Contributed by Pascal Obry on 2005/04/01
</span>
<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span>      <span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span><span class="kwa">with</span> Ada.Integer_Text_IO<span class="sym">;</span>   <span class="kwa">use</span> Ada.Integer_Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Text_IO<span class="sym">;</span>           <span class="kwa">use</span> Ada.Text_IO<span class="sym">;
</span><span class="kwa">with</span> GNAT.Spitbol.Patterns<span class="sym">;</span> <span class="kwa">use</span> GNAT.Spitbol.Patterns<span class="sym">;</span> <span class="kwa">use</span> GNAT.Spitbol<span class="sym">;

</span><span class="kwa">procedure</span> Regexmatch <span class="kwa">is

</span>   N            <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value <span class="sym">(</span>Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));

</span>   Max_Line     <span class="sym">:</span> <span class="kwa">constant</span> <span class="sym">:=</span> <span class="num">100</span><span class="sym">;

</span>   Dig_Str      <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">String</span> <span class="sym">:=</span> <span class="str">&quot;0123456789&quot;</span><span class="sym">;
</span>   Dig          <span class="sym">:</span> <span class="kwa">constant</span> Pattern <span class="sym">:=</span> Any <span class="sym">(</span>Dig_Str<span class="sym">);
</span>   Not_Dig      <span class="sym">:</span> <span class="kwa">constant</span> Pattern <span class="sym">:=</span> NotAny <span class="sym">(</span>Dig_Str<span class="sym">);
</span>   Sep1         <span class="sym">:</span> <span class="kwa">constant</span> Pattern <span class="sym">:=</span> Any <span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);
</span>   Sep2         <span class="sym">:</span> <span class="kwa">constant</span> Pattern <span class="sym">:=</span> Any <span class="sym">(</span><span class="str">&quot; -&quot;</span><span class="sym">);
</span>   Start        <span class="sym">:</span> <span class="kwa">constant</span> Pattern <span class="sym">:=</span> Pos <span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">or</span> <span class="sym">(</span>Not_Dig <span class="sym">&amp;</span> NotAny <span class="sym">(</span><span class="str">&quot;(&quot;</span><span class="sym">));
</span>   Ending       <span class="sym">:</span> <span class="kwa">constant</span> Pattern <span class="sym">:=</span> RPos <span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>   Digs3        <span class="sym">:</span> <span class="kwa">constant</span> Pattern <span class="sym">:=</span> Dig <span class="sym">&amp;</span> Dig <span class="sym">&amp;</span> Dig<span class="sym">;
</span>   Digs4        <span class="sym">:</span> <span class="kwa">constant</span> Pattern <span class="sym">:=</span> Dig <span class="sym">&amp;</span> Dig <span class="sym">&amp;</span> Dig <span class="sym">&amp;</span> Dig<span class="sym">;

</span>   <span class="kwa">type</span> String_Access <span class="kwa">is access</span> <span class="kwb">String</span><span class="sym">;

</span>   Lines   <span class="sym">:</span> <span class="kwa">array</span> <span class="sym">(</span><span class="num">1</span> .. Max_Line<span class="sym">)</span> <span class="kwa">of</span> String_Access<span class="sym">;
</span>   L       <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;

</span>   Buffer  <span class="sym">:</span> <span class="kwb">String</span> <span class="sym">(</span><span class="num">1</span> .. <span class="num">1</span>_024<span class="sym">);
</span>   Last    <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;

</span>   Result  <span class="sym">:</span> <span class="kwb">String</span> <span class="sym">:=</span> <span class="str">&quot;: (...) ...-....&quot;</span><span class="sym">;
</span>   Count   <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;

</span>   <span class="kwa">subtype</span> Area_Code <span class="kwa">is</span> <span class="kwb">Positive</span> <span class="kwa">range</span> <span class="num">4</span> .. <span class="num">6</span><span class="sym">;
</span>   <span class="kwa">subtype</span> Prefix <span class="kwa">is</span> <span class="kwb">Positive</span> <span class="kwa">range</span> <span class="num">9</span> .. <span class="num">11</span><span class="sym">;
</span>   <span class="kwa">subtype</span> Number <span class="kwa">is</span> <span class="kwb">Positive</span> <span class="kwa">range</span> <span class="num">13</span> .. <span class="num">16</span><span class="sym">;

</span>   S_Area   <span class="sym">:</span> <span class="kwa">aliased</span> VString<span class="sym">;
</span>   S_Prefix <span class="sym">:</span> <span class="kwa">aliased</span> VString<span class="sym">;
</span>   S_Number <span class="sym">:</span> <span class="kwa">aliased</span> VString<span class="sym">;

</span>   Matcher  <span class="sym">:</span> <span class="kwa">constant</span> Pattern <span class="sym">:=
</span>                Start <span class="sym">&amp; (</span><span class="str">&quot;(&quot;</span> <span class="sym">&amp;</span> Digs3 <span class="sym">**</span> S_Area <span class="sym">&amp;</span> <span class="str">&quot;)&quot;</span> <span class="kwa">or</span> Digs3 <span class="sym">**</span> S_Area<span class="sym">)
                &amp;</span> Sep1 <span class="sym">&amp;</span> Digs3 <span class="sym">**</span> S_Prefix
                <span class="sym">&amp;</span> Sep2 <span class="sym">&amp;</span> Digs4 <span class="sym">**</span> S_Number <span class="sym">&amp; (</span>Not_Dig <span class="kwa">or</span> Ending<span class="sym">);

</span><span class="kwa">begin
   begin
      loop
</span>         Get_Line <span class="sym">(</span>Buffer<span class="sym">,</span> Last<span class="sym">);
</span>         L <span class="sym">:=</span> L <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         Lines <span class="sym">(</span>L<span class="sym">) :=</span> <span class="kwa">new</span> <span class="kwb">String</span><span class="sym">'(</span>Buffer <span class="sym">(</span><span class="num">1</span> .. Last<span class="sym">));
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">exception
      when others</span> <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span>   <span class="kwa">end</span><span class="sym">;

</span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop
      for</span> K <span class="kwa">in</span> <span class="num">1</span> .. L <span class="kwa">loop
         if</span> Match <span class="sym">(</span>Lines <span class="sym">(</span>K<span class="sym">)</span>.<span class="kwa">all</span><span class="sym">,</span> Matcher<span class="sym">)</span> <span class="kwa">and then</span> Iter <span class="sym">=</span> N <span class="kwa">then
</span>            Result <span class="sym">(</span>Area_Code<span class="sym">) :=</span> S <span class="sym">(</span>S_Area<span class="sym">);
</span>            Result <span class="sym">(</span>Prefix<span class="sym">)    :=</span> S <span class="sym">(</span>S_Prefix<span class="sym">);
</span>            Result <span class="sym">(</span>Number<span class="sym">)    :=</span> S <span class="sym">(</span>S_Number<span class="sym">);
</span>            Count <span class="sym">:=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>            Put <span class="sym">(</span>Count<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>            Put_Line <span class="sym">(</span>Result<span class="sym">);
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="kwa">end</span> Regexmatch<span class="sym">;</span>
