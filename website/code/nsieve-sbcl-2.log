BUILD COMMANDS FOR: nsieve.sbcl-2.sbcl

Thu Jan 11 21:26:51 PST 2007

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "nsieve.sbcl-2.sbcl_compile")'
### START nsieve.sbcl-2.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(asdf:operate 'asdf:load-op 'cl-ppcre)
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "nsieve.sbcl-2.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END nsieve.sbcl-2.sbcl_compile

; loading system definition from /usr/share/common-lisp/systems/cl-ppcre.asd
; into #<PACKAGE "ASDF0">
; registering #<SYSTEM #:CL-PPCRE {A8E91D1}> as CL-PPCRE
; compiling file "/opt/shootout/shootout/bench/nsieve/tmp/nsieve.sbcl-2.sbcl" (written 11 JAN 2007 09:26:51 PM):
; compiling (DEFUN NSIEVE ...)
; compiling (DEFUN MAIN ...)
; file: /opt/shootout/shootout/bench/nsieve/tmp/nsieve.sbcl-2.sbcl
; in: DEFUN MAIN
;     (* 10000 (EXPT 2 K))
; ==>
;   (* SB-C::Y 10000)
; 
; note: unable to
;   convert x*2^k to shift
; due to type uncertainty:
;   The first argument is a (RATIONAL 0), not a INTEGER.
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a (RATIONAL 0), not a (UNSIGNED-BYTE 32).
;   The result is a (VALUES (RATIONAL 0) &OPTIONAL), not a (VALUES
;                                                           (UNSIGNED-BYTE 32)
;                                                           &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a (RATIONAL 0), not a FIXNUM.
;   The result is a (VALUES (RATIONAL 0) &OPTIONAL), not a (VALUES FIXNUM &REST
;                                                                  T).

;     (- N 2)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (LOOP FOR K FROM N DOWNTO (- N 2) FOR M = (* 10000 (EXPT 2 K)) DO ...)
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (< K #:LOOP-LIMIT-102)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The second argument is a INTEGER, not a FIXNUM.

;     (* 10000 (EXPT 2 K))
; ==>
;   (* SB-C::Y 10000)
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 3) because:
;       The first argument is a (RATIONAL 0), not a FIXNUM.
;       The result is a (VALUES (RATIONAL 0) &OPTIONAL), not a (VALUES FIXNUM
;                                                                      &REST T).
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a (RATIONAL 0), not a FIXNUM.
;       The result is a (VALUES (RATIONAL 0) &OPTIONAL), not a (VALUES FIXNUM
;                                                                      &REST T).
;       etc.

;     (LOOP FOR K FROM N DOWNTO (- N 2) FOR M = (* 10000 (EXPT 2 K)) DO ...)
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ 
; --> THE 1- 
; ==>
;   (- K 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.
; 
; compilation unit finished
;   printed 7 notes


; /opt/shootout/shootout/bench/nsieve/tmp/nsieve.sbcl-2.fasl written
; compilation finished in 0:00:00
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/nsieve/tmp/sbcl.core:
writing 21563840 bytes from the read-only space at 0x01000000
writing 5618208 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START nsieve.sbcl-2.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END nsieve.sbcl-2.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load nsieve.sbcl-2.sbcl_run %A


PROGRAM OUTPUT
==============
Primes up to  5120000   356244
Primes up to  2560000   187134
Primes up to  1280000    98610
