<span class="slc">-- $Id: ary-nhc98.code,v 1.3 2005-04-04 14:56:38 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org
</span><span class="slc">-- By Simon Marlow, modified by Einar Karttunen
</span>
<span class="kwa">import</span> System
<span class="kwa">import</span> Control.Monad.ST
<span class="kwa">import</span> Data.Array.Base
<span class="kwa">import</span> Data.Array.ST

add_array <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> STUArray s <span class="kwb">Int Int</span> <span class="sym">-&gt;</span> STUArray s <span class="kwb">Int Int</span> <span class="sym">-&gt;</span> ST s <span class="sym">()
</span>add_array len a b <span class="sym">=</span> sequence_ <span class="sym">[</span> add i <span class="sym">|</span> i <span class="sym">&lt;- [</span><span class="num">0</span>..len<span class="sym">] ]
</span>  <span class="kwa">where</span> add i <span class="sym">=</span> <span class="kwa">do</span> ai <span class="sym">&lt;-</span> unsafeRead a i
		   bi <span class="sym">&lt;-</span> unsafeRead b i
	  	   unsafeWrite b i <span class="sym">(</span>ai<span class="sym">+</span>bi<span class="sym">)

</span>ary <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> ST s <span class="sym">(</span><span class="kwb">Int</span><span class="sym">,</span><span class="kwb">Int</span><span class="sym">)
</span>ary len <span class="sym">=</span> <span class="kwa">do
</span>  a <span class="sym">&lt;-</span> newListArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>len<span class="sym">) [</span><span class="num">1</span>..len<span class="sym">+</span><span class="num">1</span><span class="sym">]
</span>  b <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>len<span class="sym">)</span> <span class="num">0
</span>  sequence_ <span class="sym">(</span>take <span class="num">1000</span> <span class="sym">(</span>repeat <span class="sym">(</span>add_array len a b<span class="sym">)))
</span>  y1 <span class="sym">&lt;-</span> unsafeRead b <span class="num">0
</span>  yn <span class="sym">&lt;-</span> unsafeRead b len
  return <span class="sym">(</span>y1<span class="sym">,</span>yn<span class="sym">)

</span>main <span class="sym">=</span> <span class="kwa">do
</span>  ~<span class="sym">[</span>n<span class="sym">] &lt;-</span> getArgs
  <span class="kwa">let</span> <span class="sym">(</span>y1<span class="sym">,</span>yn<span class="sym">) =</span> runST <span class="sym">(</span>ary <span class="sym">((</span>read n<span class="sym">)-</span><span class="num">1</span><span class="sym">))
</span>  putStr <span class="sym">(</span>show y1<span class="sym">);</span> putStr <span class="str">&quot; &quot;</span> <span class="sym">;</span> putStrLn <span class="sym">(</span>show yn<span class="sym">)

</span>
