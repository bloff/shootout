<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Anthony Borla */</span>

ack <span class="sym">:=</span> <span class="kwa">method</span><span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span>
  <span class="kwa">if</span><span class="sym">(</span>x <span class="sym">==</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">return</span> y <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
  <span class="kwa">if</span><span class="sym">(</span>y <span class="sym">==</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">return</span> <span class="kwd">ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
  <span class="kwa">return</span> <span class="kwd">ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="kwd">ack</span><span class="sym">(</span>x<span class="sym">,</span> y <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
<span class="sym">)</span>


fib <span class="sym">:=</span> <span class="kwa">method</span><span class="sym">(</span>n<span class="sym">,</span>
  <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">,</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">)</span>
  <span class="kwa">return</span> <span class="kwd">fib</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">) +</span> <span class="kwd">fib</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">)</span>
<span class="sym">)</span>


tak <span class="sym">:=</span> <span class="kwa">method</span><span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">,</span>
  <span class="kwa">if</span><span class="sym">(</span>y <span class="sym">&lt;</span> x<span class="sym">,</span> <span class="kwa">return</span> <span class="kwd">tak</span><span class="sym">(</span><span class="kwd">tak</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> <span class="kwd">tak</span><span class="sym">(</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> <span class="kwd">tak</span><span class="sym">(</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">)))</span>
  <span class="kwa">return</span> z
<span class="sym">)</span>


n <span class="sym">:=</span> System args <span class="kwd">at</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span> asNumber

<span class="slc">// Use interpolation for complex string expressions</span>
<span class="str">&quot;Ack(3,#{n}): #{ack(3, n)}&quot;</span> interpolate println
<span class="str">&quot;Fib(#{(27.0 + n) asString(0,1)}): #{fib(27.0 + n) asString(0,1)}&quot;</span> interpolate println

n <span class="sym">:=</span> n <span class="sym">-</span> <span class="num">1</span>
<span class="str">&quot;Tak(#{n * 3},#{n * 2},#{n}): #{tak(n * 3, n * 2, n * 1)}&quot;</span> interpolate println

<span class="slc">// Use concatenation for simpler ones</span>
<span class="sym">(</span><span class="str">&quot;Fib(3): &quot;</span> <span class="sym">..</span> <span class="kwd">fib</span><span class="sym">(</span><span class="num">3</span><span class="sym">))</span> println
<span class="sym">(</span><span class="str">&quot;Tak(3.0,2.0,1.0): &quot;</span> <span class="sym">.. (</span><span class="kwd">tak</span><span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">)</span> <span class="kwd">asString</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">)))</span> println

