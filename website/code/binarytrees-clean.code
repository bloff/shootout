<span class="sym">/*</span> The Great Computer Language Shootout
   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/

</span>   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)
*/

</span><span class="kwa">module</span> binarytrees
<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

Start world
	# max`          <span class="sym">=</span> max <span class="sym">(</span>min`<span class="sym">+</span><span class="num">2</span><span class="sym">)</span> argi
	# stretch`      <span class="sym">=</span> max` <span class="sym">+</span> <span class="num">1
</span>	# <span class="sym">(</span>io<span class="sym">,</span>world<span class="sym">)    =</span> stdio world
	#<span class="sym">!</span> io           <span class="sym">=</span> showItemCheck stretch` <span class="sym">(</span>bottomup <span class="num">0</span> stretch`<span class="sym">)</span> <span class="str">&quot;stretch tree of depth &quot;</span> io
	#<span class="sym">!</span> longLived    <span class="sym">=</span> bottomup <span class="num">0</span> max`
	#<span class="sym">!</span> io           <span class="sym">=</span> depthloop min` max` io
	#<span class="sym">!</span> io           <span class="sym">=</span> showItemCheck max` longLived <span class="str">&quot;long lived tree of depth &quot;</span> io
	# <span class="sym">(</span>error<span class="sym">,</span>world<span class="sym">) =</span> fclose io world
	<span class="sym">=</span> world

min` <span class="sym">=</span> <span class="num">4

</span>showItemCheck d a s io
	<span class="sym">=</span> io <span class="sym">&lt;&lt;&lt;</span> s <span class="sym">&lt;&lt;&lt;</span> toString <span class="sym">(</span>d<span class="sym">) &lt;&lt;&lt;
</span>		<span class="str">&quot;\t check: &quot;</span> <span class="sym">&lt;&lt;&lt;</span> toString <span class="sym">(</span>itemcheck a<span class="sym">) &lt;&lt;&lt;</span> <span class="str">&quot;\n&quot;</span>

showCheck i d check io
	<span class="sym">=</span> io <span class="sym">&lt;&lt;&lt;</span> toString <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">) &lt;&lt;&lt;</span> <span class="str">&quot;\t trees of depth &quot;</span> <span class="sym">&lt;&lt;&lt;
</span>		toString <span class="sym">(</span>d<span class="sym">) &lt;&lt;&lt;</span> <span class="str">&quot;\t check: &quot;</span> <span class="sym">&lt;&lt;&lt;</span> toString <span class="sym">(</span>check<span class="sym">) &lt;&lt;&lt;</span> <span class="str">&quot;\n&quot;</span>

depthloop d m io
	<span class="sym">|</span> d <span class="sym">&gt;</span> m  <span class="sym">=</span> io
            <span class="sym">=</span> depthloop <span class="sym">(</span>d<span class="sym">+</span><span class="num">2</span><span class="sym">)</span> m <span class="sym">(</span>showCheck n d check io<span class="sym">)
</span>	<span class="kwa">where
</span>		n <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>m <span class="sym">-</span> d <span class="sym">+</span> min`<span class="sym">)
</span>		check <span class="sym">=</span> sumloop n d <span class="num">0

</span>sumloop <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int
</span>sumloop n d sum
	<span class="sym">|</span> n <span class="sym">&gt;</span> <span class="num">0</span>	<span class="sym">=</span> sumloop <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)</span> d <span class="sym">(</span>sum <span class="sym">+</span> check <span class="sym">+</span> check`<span class="sym">)
	=</span> sum
	<span class="kwa">where
</span>	   check <span class="sym">=</span> itemcheck <span class="sym">(</span>bottomup n d<span class="sym">)
</span>	   check` <span class="sym">=</span> itemcheck <span class="sym">(</span>bottomup <span class="sym">(-</span><span class="num">1</span><span class="sym">*</span>n<span class="sym">)</span> d<span class="sym">)


::</span> Tree a <span class="sym">=</span> TreeNode a <span class="sym">(</span>Tree a<span class="sym">) (</span>Tree a<span class="sym">) |</span> Nil

bottomup <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> .<span class="sym">(</span>Tree <span class="kwb">Int</span><span class="sym">)
</span>bottomup i d
	<span class="sym">|</span> d <span class="sym">&lt;</span> <span class="num">0</span> <span class="sym">=</span> Nil
			<span class="sym">=</span> TreeNode i <span class="sym">(</span>bottomup <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="num">-1</span><span class="sym">)(</span>d<span class="num">-1</span><span class="sym">)) (</span>bottomup <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">)(</span>d<span class="num">-1</span><span class="sym">))

</span>itemcheck Nil <span class="sym">=</span> <span class="num">0
</span>itemcheck <span class="sym">(</span>TreeNode a left right<span class="sym">) =</span> a <span class="sym">+</span> itemcheck<span class="sym">(</span>left<span class="sym">) -</span> itemcheck<span class="sym">(</span>right<span class="sym">)</span>
