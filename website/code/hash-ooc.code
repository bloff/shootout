<span class="com">(* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   SimpleHash is a line-by-line transliteration</span>
<span class="com">   of the C implementation.</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy (Oberon-2 novice)</span>
<span class="com">*)</span>

<span class="kwa">MODULE</span> hash<span class="sym">;</span>
<span class="kwa">IMPORT</span> Shootout<span class="sym">,</span> SimpleHash<span class="sym">,</span> Strings<span class="sym">,</span> IntStr<span class="sym">,</span> Out<span class="sym">,</span> S<span class="sym">:=</span>SYSTEM<span class="sym">;</span>

<span class="kwa">CONST</span>
   maxLength <span class="sym">=</span> <span class="num">11</span><span class="sym">;</span>

<span class="kwa">VAR</span>
   buffer<span class="sym">:</span> <span class="kwa">ARRAY</span> maxLength <span class="kwa">OF</span> <span class="kwb">CHAR</span><span class="sym">;</span>
   n<span class="sym">,</span> i<span class="sym">,</span> count<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   table<span class="sym">:</span> SimpleHash<span class="sym">.</span>Hashtable<span class="sym">;</span>
   item<span class="sym">:</span> SimpleHash<span class="sym">.</span>Item<span class="sym">;</span>
   key<span class="sym">:</span> SimpleHash<span class="sym">.</span>ItemKey<span class="sym">;</span>

<span class="kwa">PROCEDURE</span> <span class="kwd">HexToItemKey</span><span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> SimpleHash<span class="sym">.</span>ItemKey<span class="sym">;</span>
<span class="kwa">VAR</span>
   i<span class="sym">,</span> m<span class="sym">,</span> digits<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   key<span class="sym">:</span> SimpleHash<span class="sym">.</span>ItemKey<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   i <span class="sym">:=</span> maxLength <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">WHILE</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">DO</span>
      m <span class="sym">:=</span> S<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span><span class="kwb">LONGINT</span><span class="sym">,</span> S<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span><span class="kwb">SET</span><span class="sym">,</span> n<span class="sym">) * {</span><span class="num">0</span><span class="sym">.</span><span class="num">.3</span><span class="sym">});</span>
      <span class="kwa">CASE</span> m <span class="kwa">OF</span>
         <span class="sym">|</span> <span class="num">0</span><span class="sym">.</span><span class="num">.9</span> <span class="sym">:</span> buffer<span class="sym">[</span>i<span class="sym">] :=</span> <span class="kwa">CHR</span><span class="sym">(</span><span class="kwa">ORD</span><span class="sym">(</span><span class="str">&quot;0&quot;</span><span class="sym">) +</span> m<span class="sym">);</span>
      <span class="kwa">ELSE</span>
                  buffer<span class="sym">[</span>i<span class="sym">] :=</span> <span class="kwa">CHR</span><span class="sym">(</span><span class="kwa">ORD</span><span class="sym">(</span><span class="str">&quot;A&quot;</span><span class="sym">) -</span> <span class="num">10</span> <span class="sym">+</span> m<span class="sym">);</span>
      <span class="kwa">END</span><span class="sym">;</span>
      n <span class="sym">:=</span> <span class="kwa">ASH</span><span class="sym">(</span>n<span class="sym">,-</span><span class="num">4</span><span class="sym">);</span> <span class="kwa">DEC</span><span class="sym">(</span>i<span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   <span class="kwa">INC</span><span class="sym">(</span>i<span class="sym">);</span> digits <span class="sym">:=</span> maxLength <span class="sym">-</span> i<span class="sym">;</span>
   <span class="kwa">NEW</span><span class="sym">(</span>key<span class="sym">,</span> digits<span class="sym">);</span>
   S<span class="sym">.</span><span class="kwa">MOVE</span><span class="sym">(</span>S<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span>i<span class="sym">]),</span> S<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span><span class="kwb">LONGINT</span><span class="sym">,</span>key<span class="sym">),</span> digits<span class="sym">);</span>
   <span class="kwa">RETURN</span> key<span class="sym">;</span>
<span class="kwa">END</span> HexToItemKey<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">IntToItemKey</span><span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> SimpleHash<span class="sym">.</span>ItemKey<span class="sym">;</span>
<span class="kwa">VAR</span>
   digits<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   key<span class="sym">:</span> SimpleHash<span class="sym">.</span>ItemKey<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   IntStr<span class="sym">.</span><span class="kwd">IntToStr</span><span class="sym">(</span>n<span class="sym">,</span>buffer<span class="sym">);</span>
   digits <span class="sym">:=</span> Strings<span class="sym">.</span><span class="kwd">Length</span><span class="sym">(</span>buffer<span class="sym">);</span>
   <span class="kwa">NEW</span><span class="sym">(</span>key<span class="sym">,</span> digits<span class="sym">);</span>
   S<span class="sym">.</span><span class="kwa">MOVE</span><span class="sym">(</span>S<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span><span class="sym">]),</span> S<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span><span class="kwb">LONGINT</span><span class="sym">,</span>key<span class="sym">),</span> digits<span class="sym">);</span>
   <span class="kwa">RETURN</span> key<span class="sym">;</span>
<span class="kwa">END</span> IntToItemKey<span class="sym">;</span>


<span class="kwa">BEGIN</span>
   n <span class="sym">:=</span> Shootout<span class="sym">.</span><span class="kwd">Argi</span><span class="sym">();</span>
   table <span class="sym">:=</span> SimpleHash<span class="sym">.</span><span class="kwd">New</span><span class="sym">(</span>n<span class="sym">);</span>

   FOR i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">TO</span> n <span class="kwa">DO</span>
      key <span class="sym">:=</span> <span class="kwd">HexToItemKey</span><span class="sym">(</span>i<span class="sym">);</span>
      item <span class="sym">:=</span> SimpleHash<span class="sym">.</span><span class="kwd">AddKey</span><span class="sym">(</span>table<span class="sym">,</span> key<span class="sym">);</span>
      item<span class="sym">.</span>value <span class="sym">:=</span> i<span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>

   count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   FOR i <span class="sym">:=</span> n <span class="kwa">TO</span> <span class="num">1</span> BY <span class="sym">-</span><span class="num">1</span> <span class="kwa">DO</span>
      key <span class="sym">:=</span> <span class="kwd">IntToItemKey</span><span class="sym">(</span>i<span class="sym">);</span>
      <span class="kwa">IF</span> SimpleHash<span class="sym">.</span><span class="kwd">Find</span><span class="sym">(</span>table<span class="sym">,</span> key<span class="sym">)</span> # <span class="kwa">NIL THEN INC</span><span class="sym">(</span>count<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>count<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
<span class="kwa">END</span> hash<span class="sym">.</span>
