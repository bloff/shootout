<span class="slc">#!/usr/bin/perl</span>
<span class="slc"># $Id: regexmatch-perl.code,v 1.7 2006-09-20 05:52:30 bfulgham Exp $</span>
<span class="slc"># http://www.bagley.org/~doug/shootout/</span>

<span class="kwa">use</span> strict<span class="sym">;</span>

<span class="kwc">my</span> <span class="kwb">$re</span> <span class="sym">=</span> qr<span class="sym">{</span>
    <span class="sym">(</span>?<span class="sym">:</span> ^ <span class="sym">| [</span>^<span class="esc">\d\(</span><span class="sym">])</span>		<span class="slc"># must be preceeded by non-digit</span>
    <span class="sym">(</span> <span class="esc">\(</span> <span class="sym">)</span>?			<span class="slc"># match 1: possible initial left paren</span>
    <span class="sym">(</span><span class="esc">\d\d\d</span><span class="sym">)</span>			<span class="slc"># match 2: area code is 3 digits</span>
    <span class="sym">(</span>?<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="esc">\)</span> <span class="sym">)</span>			<span class="slc"># if match1 then match right paren</span>
    <span class="sym">[ ]</span>				<span class="slc"># area code followed by one space</span>
    <span class="sym">(</span><span class="esc">\d\d\d</span><span class="sym">)</span>			<span class="slc"># match 3: prefix of 3 digits</span>
    <span class="sym">[ -]</span>			<span class="slc"># separator is either space or dash</span>
    <span class="sym">(</span><span class="esc">\d\d\d\d</span><span class="sym">)</span>			<span class="slc"># match 4: last 4 digits</span>
    <span class="esc">\D</span>				<span class="slc"># must be followed by a non-digit</span>
<span class="sym">}</span>x<span class="sym">;</span>

<span class="kwc">my</span> <span class="kwb">$NUM</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwb">$NUM</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$NUM</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">);</span>

<span class="kwc">my</span> <span class="kwb">&#64;phones</span> <span class="sym">= &lt;</span>STDIN<span class="sym">&gt;;</span>
<span class="kwc">my</span> <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwc">my</span> <span class="kwb">$num</span><span class="sym">;</span>
<span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$NUM</span><span class="sym">--) {</span>
    <span class="kwa">foreach</span> <span class="sym">(</span><span class="kwb">&#64;phones</span><span class="sym">) {</span>
	<span class="kwa">if</span> <span class="sym">(/</span><span class="kwb">$re</span><span class="sym">/</span>o<span class="sym">) {</span>
	    <span class="kwb">$num</span> <span class="sym">=</span> <span class="str">&quot;($2) $3-$4&quot;</span><span class="sym">;</span>
	    <span class="kwa">if</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">==</span> <span class="kwb">$NUM</span><span class="sym">) {</span>
		<span class="kwb">$count</span><span class="sym">++;</span>
		print <span class="str">&quot;$count: $num</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
