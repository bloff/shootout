<span class="com">(*</span>
<span class="com"> * $Id: moments-ocamlb.code,v 1.7 2006-09-20 05:52:00 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * from Markus Mottl</span>
<span class="com"> *)</span>

<span class="kwa">let</span> cutoff <span class="sym">=</span> <span class="num">5</span>

<span class="com">(* Unscrupulously stolen from Array.stable_sort (OCaml standard distribution) *)</span>
<span class="kwa">let</span> sort_floats <span class="kwd">len</span> <span class="sym">(</span>ar <span class="sym">:</span> <span class="kwb">float</span> array<span class="sym">) =</span>
  <span class="kwa">let</span> merge src1ofs src1len src2 src2ofs src2len dst dstofs <span class="sym">=</span>
    <span class="kwa">let</span> src1r <span class="sym">=</span> src1ofs <span class="sym">+</span> src1len <span class="kwa">and</span> src2r <span class="sym">=</span> src2ofs <span class="sym">+</span> src2len <span class="kwa">in</span>
    <span class="kwa">let rec</span> loop i1 s1 i2 s2 d <span class="sym">=</span>
      <span class="kwa">if</span> s1 <span class="sym">&lt;=</span> s2 <span class="kwa">then begin</span>
        dst.<span class="sym">(</span>d<span class="sym">) &lt;-</span> s1<span class="sym">;</span>
        <span class="kwa">let</span> i1 <span class="sym">=</span> i1 <span class="sym">+</span> <span class="num">1</span> <span class="kwa">in</span>
        <span class="kwa">if</span> i1 <span class="sym">&lt;</span> src1r <span class="kwa">then</span> loop i1 ar.<span class="sym">(</span>i1<span class="sym">)</span> i2 <span class="kwd">s2</span> <span class="sym">(</span>d <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
        <span class="kwa">else</span> Array.blit src2 i2 <span class="kwd">dst</span> <span class="sym">(</span>d <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span>src2r <span class="sym">-</span> i2<span class="sym">)</span>
      <span class="kwa">end else begin</span>
        dst.<span class="sym">(</span>d<span class="sym">) &lt;-</span> s2<span class="sym">;</span>
        <span class="kwa">let</span> i2 <span class="sym">=</span> i2 <span class="sym">+</span> <span class="num">1</span> <span class="kwa">in</span>
        <span class="kwa">if</span> i2 <span class="sym">&lt;</span> src2r <span class="kwa">then</span> loop i1 s1 i2 src2.<span class="sym">(</span>i2<span class="sym">) (</span>d <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
        <span class="kwa">else</span> Array.blit ar i1 <span class="kwd">dst</span> <span class="sym">(</span>d <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span>src1r <span class="sym">-</span> i1<span class="sym">)</span>
      <span class="kwa">end in</span>
    loop src1ofs ar.<span class="sym">(</span>src1ofs<span class="sym">)</span> src2ofs src2.<span class="sym">(</span>src2ofs<span class="sym">)</span> dstofs <span class="kwa">in</span>
  <span class="kwa">let</span> isortto srcofs dst dstofs len <span class="sym">=</span>
    <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> len <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
      <span class="kwa">let</span> e <span class="sym">=</span> ar.<span class="sym">(</span>srcofs <span class="sym">+</span> i<span class="sym">)</span> <span class="kwa">and</span> j <span class="sym">=</span> <span class="kwd">ref</span> <span class="sym">(</span>dstofs <span class="sym">+</span> i <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">in</span>
      <span class="kwa">while</span> <span class="sym">!</span>j <span class="sym">&gt;=</span> dstofs <span class="sym">&amp;&amp;</span> e <span class="sym">&lt;=</span> dst.<span class="sym">(!</span>j<span class="sym">)</span> <span class="kwa">do</span>
        dst.<span class="sym">(!</span>j <span class="sym">+</span> <span class="num">1</span><span class="sym">) &lt;-</span> dst.<span class="sym">(!</span>j<span class="sym">);</span>
        decr j<span class="sym">;</span>
      <span class="kwa">done</span><span class="sym">;</span>
      dst.<span class="sym">(!</span>j <span class="sym">+</span> <span class="num">1</span><span class="sym">) &lt;-</span> e
    <span class="kwa">done in</span>
  <span class="kwa">let rec</span> sortto srcofs dst dstofs len <span class="sym">=</span>
    <span class="kwa">if</span> len <span class="sym">&lt;=</span> cutoff <span class="kwa">then</span> isortto srcofs dst dstofs len <span class="kwa">else begin</span>
      <span class="kwa">let</span> l1 <span class="sym">=</span> len <span class="sym">/</span> <span class="num">2</span> <span class="kwa">in</span>
      <span class="kwa">let</span> l2 <span class="sym">=</span> len <span class="sym">-</span> l1 <span class="kwa">in</span>
      <span class="kwd">sortto</span> <span class="sym">(</span>srcofs <span class="sym">+</span> l1<span class="sym">)</span> <span class="kwd">dst</span> <span class="sym">(</span>dstofs <span class="sym">+</span> l1<span class="sym">)</span> l2<span class="sym">;</span>
      sortto srcofs <span class="kwd">ar</span> <span class="sym">(</span>srcofs <span class="sym">+</span> l2<span class="sym">)</span> l1<span class="sym">;</span>
      <span class="kwd">merge</span> <span class="sym">(</span>srcofs <span class="sym">+</span> l2<span class="sym">)</span> l1 <span class="kwd">dst</span> <span class="sym">(</span>dstofs <span class="sym">+</span> l1<span class="sym">)</span> l2 dst dstofs
    <span class="kwa">end in</span>
  <span class="kwa">if</span> len <span class="sym">&lt;=</span> cutoff <span class="kwa">then</span> isortto <span class="num">0</span> ar <span class="num">0</span> len <span class="kwa">else begin</span>
    <span class="kwa">let</span> l1 <span class="sym">=</span> len <span class="sym">/</span> <span class="num">2</span> <span class="kwa">in</span>
    <span class="kwa">let</span> l2 <span class="sym">=</span> len <span class="sym">-</span> l1 <span class="kwa">in</span>
    <span class="kwa">let</span> t <span class="sym">=</span> Array.make l2 ar.<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">in</span>
    sortto l1 t <span class="num">0</span> l2<span class="sym">;</span>
    sortto <span class="num">0</span> ar l2 l1<span class="sym">;</span>
    merge l2 l1 t <span class="num">0</span> l2 ar <span class="num">0</span>
  <span class="kwa">end</span>

<span class="kwa">let</span> n_ref <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">and</span> sum_ref <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">and</span> size_ref <span class="sym">=</span> ref <span class="num">4096</span>
<span class="kwa">let</span> nums_ref <span class="sym">=</span> <span class="kwd">ref</span> <span class="sym">(</span>Array.create <span class="sym">!</span>size_ref <span class="num">0.0</span><span class="sym">);;</span>

<span class="kwa">try</span>
  <span class="kwa">while true do</span>
    <span class="kwa">let</span> num <span class="sym">=</span> <span class="kwd">float_of_string</span> <span class="sym">(</span>input_line stdin<span class="sym">)</span> <span class="kwa">in</span>
    <span class="sym">!</span>nums_ref.<span class="sym">(!</span>n_ref<span class="sym">) &lt;-</span> num<span class="sym">;</span>
    sum_ref <span class="sym">:= !</span>sum_ref <span class="sym">+</span>. num<span class="sym">;</span>
    incr n_ref<span class="sym">;</span>
    <span class="kwa">let</span> size <span class="sym">= !</span>size_ref <span class="kwa">in</span>
    <span class="kwa">if</span> <span class="sym">!</span>n_ref <span class="sym">=</span> size <span class="kwa">then begin</span>
      <span class="kwa">let</span> new_size <span class="sym">=</span> size <span class="kwa">lsl</span> <span class="num">2</span> <span class="kwa">in</span>
      size_ref <span class="sym">:=</span> new_size<span class="sym">;</span>
      <span class="kwa">let</span> new_ar <span class="sym">=</span> Array.create new_size <span class="num">0.0</span> <span class="kwa">in</span>
      Array.blit <span class="sym">!</span>nums_ref <span class="num">0</span> new_ar <span class="num">0</span> size<span class="sym">;</span>
      nums_ref <span class="sym">:=</span> new_ar
    <span class="kwa">end</span>
  <span class="kwa">done</span>
<span class="kwa">with</span> End_of_file <span class="sym">-&gt; ();</span>

<span class="kwa">let</span> n <span class="sym">= !</span>n_ref <span class="kwa">and</span> nums <span class="sym">= !</span>nums_ref <span class="kwa">in</span>
<span class="kwa">let</span> n_float <span class="sym">=</span> <span class="kwb">float</span> n <span class="kwa">in</span>
<span class="kwa">let</span> mean <span class="sym">= !</span>sum_ref <span class="sym">/</span>. n_float
<span class="kwa">and</span> avg_dev_ref <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">and</span> std_dev_ref <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">and</span> var_ref <span class="sym">=</span> ref <span class="num">0.0</span>
<span class="kwa">and</span> skew_ref <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">and</span> kurt_ref <span class="sym">=</span> ref <span class="num">0.0</span> <span class="kwa">in</span>

<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> n <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
  <span class="kwa">let</span> dev <span class="sym">=</span> nums.<span class="sym">(</span>i<span class="sym">) -</span>. mean <span class="kwa">in</span>
  avg_dev_ref <span class="sym">:= !</span>avg_dev_ref <span class="sym">+</span>. abs_float dev<span class="sym">;</span>
  <span class="kwa">let</span> dev2 <span class="sym">=</span> dev <span class="sym">*</span>. dev <span class="kwa">in</span>
  var_ref <span class="sym">:= !</span>var_ref <span class="sym">+</span>. dev2<span class="sym">;</span>
  <span class="kwa">let</span> dev3 <span class="sym">=</span> dev2 <span class="sym">*</span>. dev <span class="kwa">in</span>
  skew_ref <span class="sym">:= !</span>skew_ref <span class="sym">+</span>. dev3<span class="sym">;</span>
  kurt_ref <span class="sym">:= !</span>kurt_ref <span class="sym">+</span>. dev3 <span class="sym">*</span>. dev
<span class="kwa">done</span><span class="sym">;</span>

<span class="kwa">let</span> avg_dev <span class="sym">= !</span>avg_dev_ref <span class="sym">/</span>. n_float <span class="kwa">and</span> var <span class="sym">= !</span>var_ref <span class="sym">/</span>. <span class="kwb">float</span> <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">in</span>
<span class="kwa">let</span> std_dev <span class="sym">=</span> sqrt var <span class="kwa">in</span>

<span class="kwa">if</span> var <span class="sym">&gt;</span> <span class="num">0.0</span> <span class="kwa">then begin</span>
  skew_ref <span class="sym">:= !</span>skew_ref <span class="sym">/</span>. n_float <span class="sym">/</span>. var <span class="sym">/</span>. std_dev<span class="sym">;</span>
  kurt_ref <span class="sym">:= !</span>kurt_ref <span class="sym">/</span>. n_float <span class="sym">/</span>. var <span class="sym">/</span>. var <span class="sym">-</span>. <span class="num">3.0</span>
<span class="kwa">end</span><span class="sym">;</span>

sort_floats n nums<span class="sym">;</span>

<span class="kwa">let</span> median <span class="sym">=</span>
  <span class="kwa">let</span> mid <span class="sym">=</span> n <span class="kwa">lsr</span> <span class="num">1</span> <span class="kwa">in</span>
  <span class="kwa">if</span> n <span class="kwa">mod</span> <span class="num">2</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span> nums.<span class="sym">(</span>mid<span class="sym">)</span>
  <span class="kwa">else</span> <span class="sym">(</span>nums.<span class="sym">(</span>mid<span class="sym">) +</span>. nums.<span class="sym">(</span>mid <span class="sym">-</span> <span class="num">1</span><span class="sym">)) /</span>. <span class="num">2.0</span> <span class="kwa">in</span>

Printf.printf <span class="str">&quot;n:                  %d</span><span class="esc">\n</span><span class="str">&quot;</span> n<span class="sym">;</span>
Printf.printf <span class="str">&quot;median:             %f</span><span class="esc">\n</span><span class="str">&quot;</span> median<span class="sym">;</span>
Printf.printf <span class="str">&quot;mean:               %f</span><span class="esc">\n</span><span class="str">&quot;</span> mean<span class="sym">;</span>
Printf.printf <span class="str">&quot;average_deviation:  %f</span><span class="esc">\n</span><span class="str">&quot;</span> avg_dev<span class="sym">;</span>
Printf.printf <span class="str">&quot;standard_deviation: %f</span><span class="esc">\n</span><span class="str">&quot;</span> std_dev<span class="sym">;</span>
Printf.printf <span class="str">&quot;variance:           %f</span><span class="esc">\n</span><span class="str">&quot;</span> var<span class="sym">;</span>
Printf.printf <span class="str">&quot;skew:               %f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">!</span>skew_ref<span class="sym">;</span>
Printf.printf <span class="str">&quot;kurtosis:           %f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">!</span>kurt_ref
