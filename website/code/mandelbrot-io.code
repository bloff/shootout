<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com">   contributed by Ian Osgood, Steve Dekorte */</span>

MandelbrotSet <span class="sym">:=</span> <span class="kwb">Object</span> <span class="kwa">clone do</span><span class="sym">(</span>
    max_iterations <span class="sym">:=</span> <span class="num">50</span>
    limit          <span class="sym">:=</span> <span class="num">2</span> squared
    dim            <span class="sym">:=</span> <span class="num">200</span>
    org_r <span class="sym">:= -</span><span class="num">1.5</span>
    org_i <span class="sym">:= -</span><span class="num">1</span>
    ext_r <span class="sym">:=</span>  <span class="num">2</span>
    ext_i <span class="sym">:=</span>  <span class="num">2</span>

    calc <span class="sym">:=</span> <span class="kwa">method</span><span class="sym">(</span>
        cr <span class="sym">:=</span> Vector <span class="kwa">clone</span> <span class="kwd">setSize</span><span class="sym">(</span>dim squared<span class="sym">)</span>
        ci <span class="sym">:=</span> Vector <span class="kwa">clone</span> <span class="kwd">setSize</span><span class="sym">(</span>dim squared<span class="sym">)</span>

        size <span class="sym">:=</span> <span class="num">0</span>
        <span class="kwa">for</span><span class="sym">(</span>y<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> dim<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>
            Ci <span class="sym">:= ((</span>y <span class="sym">*</span> ext_i <span class="sym">/</span> dim<span class="sym">) +</span> org_i<span class="sym">)</span>
            <span class="kwa">for</span><span class="sym">(</span>x<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> dim<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>
                Cr <span class="sym">:= ((</span>x <span class="sym">*</span> ext_r <span class="sym">/</span> dim<span class="sym">) +</span> org_r<span class="sym">)</span>
                cr <span class="kwd">atPut</span><span class="sym">(</span>size<span class="sym">,</span> Cr<span class="sym">)</span>
                ci <span class="kwd">atPut</span><span class="sym">(</span>size<span class="sym">,</span> Ci<span class="sym">)</span>
                size <span class="sym">=</span> size <span class="sym">+</span> <span class="num">1</span>
            <span class="sym">)</span>
        <span class="sym">)</span>

        zr <span class="sym">:=</span> cr <span class="kwa">clone</span>
        zi <span class="sym">:=</span> ci <span class="kwa">clone</span>
        zr2 <span class="sym">:=</span> Vector <span class="kwa">clone</span> <span class="kwd">setSize</span><span class="sym">(</span>size<span class="sym">)</span>
        zi2 <span class="sym">:=</span> Vector <span class="kwa">clone</span> <span class="kwd">setSize</span><span class="sym">(</span>size<span class="sym">)</span>
        temp <span class="sym">:=</span> Vector <span class="kwa">clone</span> <span class="kwd">setSize</span><span class="sym">(</span>size<span class="sym">)</span>

        max_iterations <span class="kwd">repeat</span><span class="sym">(</span>
            temp <span class="kwd">copy</span><span class="sym">(</span>zr<span class="sym">) *=</span> zi

            zr2 <span class="kwd">copy</span><span class="sym">(</span>zr<span class="sym">)</span> square
            zi2 <span class="kwd">copy</span><span class="sym">(</span>zi<span class="sym">)</span> square

            zr <span class="kwd">copy</span><span class="sym">(</span>zr2<span class="sym">) -=</span> zi2 <span class="sym">+=</span> cr
            zi <span class="kwd">copy</span><span class="sym">(</span>temp<span class="sym">) *=</span> <span class="num">2</span>  <span class="sym">+=</span> ci
        <span class="sym">)</span>

        <span class="kwa">self</span> result <span class="sym">:=</span> zi2 <span class="sym">+</span> zr2
    <span class="sym">)</span>

    printSet <span class="sym">:=</span> <span class="kwa">method</span><span class="sym">(</span>
        <span class="kwd">writeln</span><span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> dim<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> dim<span class="sym">)</span>
        out <span class="sym">:=</span> <span class="kwb">File</span> standardOutput
        i <span class="sym">:=</span> <span class="num">0</span>
        dim <span class="kwd">repeat</span><span class="sym">(</span>
            <span class="sym">(</span>dim <span class="sym">/</span> <span class="num">8</span><span class="sym">)</span> <span class="kwd">repeat</span><span class="sym">(</span>
                pixel <span class="sym">:=</span> <span class="num">0</span>
                <span class="num">8</span> <span class="kwd">repeat</span><span class="sym">(</span>
                    pixel <span class="sym">=</span> pixel <span class="kwd">shiftLeft</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
                    <span class="kwa">if</span> <span class="sym">(</span>limit <span class="sym">&gt;</span> result <span class="kwd">at</span><span class="sym">(</span>i<span class="sym">),</span> pixel <span class="sym">=</span> pixel <span class="sym">|</span> <span class="num">1</span><span class="sym">)</span>
                    i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
                <span class="sym">)</span>
                out <span class="kwa">write</span><span class="sym">(</span>pixel asCharacter<span class="sym">)</span>
            <span class="sym">)</span>
            <span class="com">/* if (dim%8!=0, ) */</span>
        <span class="sym">)</span>
    <span class="sym">)</span>
<span class="sym">)</span>

MandelbrotSet dim <span class="sym">:=</span> System args <span class="kwd">at</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span> asNumber
MandelbrotSet <span class="kwa">do</span><span class="sym">(</span> calc<span class="sym">;</span> printSet <span class="sym">)</span>
