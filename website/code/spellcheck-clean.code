<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by John van Groningen (Clean Guru!)

*/

<B><FONT COLOR="#A020F0">module</FONT></B> spellcheck
<B><FONT COLOR="#A020F0">import</FONT></B> StdEnv, StdStrictLists
  
Start world 
	# dictionary = htNew 40000
	# (dictionary,world) = readUsrDictWords world dictionary
	= checkInputWords world dictionary 

readUsrDictWords world ht
	# (openok, file, world) = fopen <B><FONT COLOR="#BC8F8F">&quot;Usr.Dict.Words&quot;</FONT></B> FReadText world
	| not openok = abort (<B><FONT COLOR="#BC8F8F">&quot;Cannot open Usr.Dict.Words\n&quot;</FONT></B>)
	# ht = readWords file ht
	= (ht,world)
	
	<B><FONT COLOR="#A020F0">where</FONT></B>
    readWords f ht
		# (line, f) = freadline f
        | size line == 0
			= ht
			= readWords f (htAdd line 1 ht)	

checkInputWords world ht 
   # (console, world) = stdio world
	= missingWords console ht []	

missingWords f ht missing	
	#! (line,f) = freadline f
	# n = size line
    | n == 0
		= map withNewline missing
		| (htHasKey line ht) 
			= missingWords f ht missing
			= missingWords f ht [line:missing]	
	<B><FONT COLOR="#A020F0">where</FONT></B>
	withNewline s
		= <B><FONT COLOR="#A020F0">if</FONT></B> (s.[size s - 1] == '\n') s (s+++<B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>)
		
		
primes =: [
   53,         97,         193,       389,       769,
   1543,       3079,       6151,      12289,     24593,
   49157,      98317,      196613,    93241,     786433,
   1572869,    3145739,    6291469,   12582917,  25165843,
   50331653,   100663319,  201326611, 402653189, 805306457
   ]

<B><FONT COLOR="#228B22">:: Item a = { key::!String
</FONT></B>            , val<B><FONT COLOR="#228B22">::!a
</FONT></B>            }

<B><FONT COLOR="#228B22">:: HashTable a = { nBuckets::!Int
</FONT></B>                 , table<B><FONT COLOR="#228B22">::!.{!.[!Item a!]}
</FONT></B>                 }

hash <B><FONT COLOR="#228B22">:: !{#.Char} !Int -&gt; Int
</FONT></B>hash key nBuckets
   = (abs (loop key (size key - 1) 0)) rem nBuckets  
   <B><FONT COLOR="#A020F0">where</FONT></B>
   loop k n h
      | n&gt;=0
          = loop k (n-1) (5*h + toInt k.[n])        
          = h

htNew n = { nBuckets = nprime
        , table = {[|] \\ i &lt;- [0..nprime-1]}
        }
   <B><FONT COLOR="#A020F0">where</FONT></B>   
   nprime = hd (dropWhile (\x = x &lt; n) primes)        

htHasKey <B><FONT COLOR="#228B22">:: !{#.Char} !.(HashTable a) -&gt; .Bool
</FONT></B>htHasKey k ht=:{table,nBuckets}= findIn k table.[hash k nBuckets]
<B><FONT COLOR="#A020F0">where</FONT></B>
    findIn k [|item:ls] = item.key == k || findIn k ls
    findIn k [|] = False

htAdd <B><FONT COLOR="#228B22">:: !{#.Char} !a !*(HashTable a) -&gt; *HashTable a
</FONT></B>htAdd k v ht=:{table,nBuckets}
    #! i = hash k nBuckets
    #! (b,table) = replace table i [|]
    # b = addItem k v b
    = {ht &amp; table = {table &amp; [i] = b}}
<B><FONT COLOR="#A020F0">where</FONT></B>
    addItem <B><FONT COLOR="#228B22">:: !{#.Char} .a !*[!u:(Item .a)!] -&gt; *[!v:(Item .a)!],[u&lt;=v]
</FONT></B>    addItem k v [|item:ls]
       | item.key &lt;&gt; k
               = [|item : addItem k v ls]
               = [|{item &amp; val=v}:ls]
    addItem k v [|]
        = [|{key=k,val=v}]		
		</pre></td></tr></table>
