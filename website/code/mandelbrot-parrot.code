<span class="sym">=</span>head1 <span class="kwa">NAME</span>

examples<span class="sym">/</span>shootout<span class="sym">/</span>mandelbrot.pir <span class="sym">-</span> Print the Mandelbrot set

<span class="sym">=</span>head1 SYNOPSIS

    <span class="sym">%</span> .<span class="sym">/</span>parrot examples<span class="sym">/</span>shootout<span class="sym">/</span>mandelbrot.pir <span class="sym">-</span>j <span class="num">600</span> <span class="sym">&gt;</span> <span class="kwa">out</span>.pbm

<span class="sym">=</span>head1 DESCRIPTION

<span class="kwa">This</span> outputs a pbm file of the Mandelbrot set. Defaults to <span class="num">200</span>x200.

Translated from C code by Greg Buchholz <span class="kwa">into</span> PIR
by Peter Baylies <span class="sym">&lt;</span>pbaylies&#64;gmail.com<span class="sym">&gt;</span>.

The C code is at<span class="sym">:</span>
   The Great Computer Language Shootout
   http<span class="sym">://</span>shootout.alioth.debian.<span class="kwa">org</span><span class="sym">/</span>

<span class="sym">=</span>cut

.<span class="kwa">sub</span> <span class="str">'main'</span> <span class="sym">:</span>main
	.param pmc argv
#    <span class="kwa">int</span> w<span class="sym">,</span> h<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> bit_num <span class="sym">=</span> <span class="num">0</span><span class="slc">;</span>
#    char byte_acc <span class="sym">=</span> <span class="num">0</span><span class="slc">;</span>
#    <span class="kwa">int</span> i<span class="sym">,</span> iter <span class="sym">=</span> <span class="num">50</span><span class="slc">;</span>
#    double limit <span class="sym">=</span> <span class="num">2.0</span><span class="slc">;</span>
#    double Zr<span class="sym">,</span> Zi<span class="sym">,</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> Tr<span class="sym">,</span> Ti<span class="slc">;</span>
	.<span class="kwa">local int</span>    w<span class="sym">,</span> h<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> bit_num<span class="sym">,</span> byte_acc<span class="sym">,</span> i<span class="sym">,</span> iter
	.<span class="kwa">local</span> num    limit<span class="sym">,</span> Zr<span class="sym">,</span> Zi<span class="sym">,</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> Tr<span class="sym">,</span> Ti
	.sym <span class="kwa">int</span> argc
	bit_num <span class="sym">=</span> <span class="num">0</span>
	byte_acc <span class="sym">=</span> <span class="num">0</span>
	iter <span class="sym">=</span> <span class="num">50</span>
	limit <span class="sym">=</span> <span class="num">2.0</span>
#	slight optimization here <span class="sym">--</span> nothing a decent C compiler wouldn<span class="str">'t already do :)</span>
<span class="str">	limit = limit * limit</span>
<span class="str">	argc = argv</span>
<span class="str">	w = 200</span>
<span class="str">	if argc &lt;= 1 goto noarg</span>
<span class="str">#	w = atoi(argv[1]);</span>
<span class="str">	$S0 = argv[1]</span>
<span class="str">	w = $S0</span>
<span class="str">#	h = w</span>
<span class="str">noarg:	h = w</span>
<span class="str">#	printf(&quot;P4\n%d %d\n&quot;,w,h);</span>
<span class="str">	print &quot;P4\n&quot;</span>
<span class="str">	print w</span>
<span class="str">	print &quot; &quot;</span>
<span class="str">	print h</span>
<span class="str">	print &quot;\n&quot;</span>
<span class="str">	y = 0</span>
<span class="str">YREDO:</span>
<span class="str">        x = 0</span>
<span class="str">XREDO:</span>
<span class="str">#       Zr = 0.0; Zi = 0.0;</span>
<span class="str">	Zr = 0.0</span>
<span class="str">	Zi = 0.0</span>
<span class="str">#       Cr = (2*(double)x/w - 1.5);</span>
<span class="str">	Cr = x</span>
<span class="str">	Cr /= w</span>
<span class="str">	Cr *= 2</span>
<span class="str">	Cr -= 1.5</span>
<span class="str">#	Ci=(2*(double)y/h - 1);</span>
<span class="str">	Ci = y</span>
<span class="str">	Ci /= h</span>
<span class="str">	Ci *= 2</span>
<span class="str">	Ci -= 1</span>
<span class="str"></span>
<span class="str">	i = 0</span>
<span class="str">IREDO:</span>
<span class="str">#	Tr = Zr*Zr - Zi*Zi + Cr;</span>
<span class="str">        $N1 = Zr * Zr</span>
<span class="str">        $N2 = Zi * Zi</span>
<span class="str">        Tr = $N1 - $N2</span>
<span class="str">        Tr += Cr</span>
<span class="str">#       Ti = 2*Zr*Zi + Ci;</span>
<span class="str">        Ti = 2</span>
<span class="str">	Ti *= Zr</span>
<span class="str">        Ti *= Zi</span>
<span class="str">        Ti += Ci</span>
<span class="str">#	Zr = Tr; Zi = Ti;</span>
<span class="str">	Zr = Tr</span>
<span class="str">	Zi = Ti</span>
<span class="str">#	if (Zr*Zr+Zi*Zi &gt; limit*limit) break;</span>
<span class="str">#	$N1 = Zr * Zr</span>
<span class="str">#	$N2 = Zi * Zi</span>
<span class="str">        $N1 += $N2</span>
<span class="str">        if $N1 &gt; limit goto IBRK</span>
<span class="str">	inc i</span>
<span class="str">        if i &lt; iter goto IREDO</span>
<span class="str">IBRK:</span>
<span class="str">	byte_acc &lt;&lt;= 1</span>
<span class="str">        if $N1 &lt;= limit goto SLA</span>
<span class="str">	byte_acc |= 0</span>
<span class="str">	goto SLE</span>
<span class="str">SLA:	byte_acc |= 1</span>
<span class="str">SLE:	inc bit_num</span>
<span class="str">	if bit_num != 8 goto NTST1</span>
<span class="str">PRINT:	chr $S1, byte_acc</span>
<span class="str">	print $S1</span>
<span class="str">	byte_acc = 0</span>
<span class="str">	bit_num = 0</span>
<span class="str">	goto NTSTE</span>
<span class="str">NTST1:	$I1 = w</span>
<span class="str">	dec $I1</span>
<span class="str">	goto NTSTE</span>
<span class="str">	if x != $I1 goto NTSTE</span>
<span class="str">	$I1 = w</span>
<span class="str">	$I1 %= 8</span>
<span class="str">	$I1 = 8 - $I1</span>
<span class="str">	byte_acc &lt;&lt;= $I1</span>
<span class="str">	goto PRINT</span>
<span class="str">NTSTE:</span>
<span class="str">	inc x</span>
<span class="str">        if x &lt; w goto XREDO</span>
<span class="str"></span>
<span class="str">        inc y</span>
<span class="str">        if y &lt; h goto YREDO</span>
<span class="str">	end</span>
<span class="str">.end</span>
