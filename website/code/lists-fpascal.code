<span class="line">    1 </span><span class="kwa">Program</span> lists<span class="sym">;
</span><span class="line">    2 </span><span class="sym"></span><span class="kwa">uses</span> SysUtils<span class="sym">,</span> classes<span class="sym">;
</span><span class="line">    3 </span><span class="sym">
</span><span class="line">    4 </span><span class="sym"></span><span class="kwa">const</span> SIZE <span class="sym">:</span> <span class="kwb">longint</span> <span class="sym">=</span> <span class="num">10000</span><span class="sym">;
</span><span class="line">    5 </span><span class="sym">
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">Function</span> test_lists <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">var
</span><span class="line">    8 </span><span class="kwa"></span>        i<span class="sym">,</span> len1<span class="sym">,</span> len2 <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="line">    9 </span><span class="sym"></span>        Li1<span class="sym">,</span> Li2<span class="sym">,</span> Li3 <span class="sym">:</span> TList<span class="sym">;
</span><span class="line">   10 </span><span class="sym"></span>        lists_equal <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   12 </span><span class="kwa"></span>    <span class="com">{ create a list of integers (Li1) from 1 to SIZE }</span>
<span class="line">   13 </span>        Li1 <span class="sym">:=</span> TList.Create<span class="sym">;
</span><span class="line">   14 </span><span class="sym"></span>        Li1.Capacity <span class="sym">:=</span> SIZE<span class="sym">;
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> SIZE <span class="kwa">Do
</span><span class="line">   16 </span><span class="kwa"></span>            Li1.Add<span class="sym">(</span><span class="kwb">Pointer</span><span class="sym">(</span>i<span class="sym">));
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span>    <span class="com">{ copy the list to Li2 (not by individual items) }</span>
<span class="line">   19 </span>        <span class="com">{ [dada] this can't be done }</span>
<span class="line">   20 </span>        Li2 <span class="sym">:=</span> TList.Create<span class="sym">;
</span><span class="line">   21 </span><span class="sym"></span>        Li2.Capacity <span class="sym">:=</span> SIZE<span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>    <span class="kwa">For</span> i<span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> SIZE <span class="kwa">Do
</span><span class="line">   23 </span><span class="kwa"></span>            Li2.Add<span class="sym">(</span>Li1.Items<span class="sym">[</span>i<span class="sym">]);
</span><span class="line">   24 </span><span class="sym">
</span><span class="line">   25 </span><span class="sym"></span>    <span class="com">{ remove each individual item from left side of Li2 and
</span><span class="line">   26 </span><span class="com">      append to right side of Li3 (preserving order) }</span>
<span class="line">   27 </span>    Li3 <span class="sym">:=</span> TList.Create<span class="sym">;
</span><span class="line">   28 </span><span class="sym"></span>    Li3.Capacity <span class="sym">:=</span> SIZE<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>    <span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> SIZE <span class="kwa">Do
</span><span class="line">   30 </span><span class="kwa">    begin
</span><span class="line">   31 </span><span class="kwa"></span>            Li3.Add<span class="sym">(</span> Li2.First <span class="sym">);
</span><span class="line">   32 </span><span class="sym"></span>            Li2.Remove<span class="sym">(</span> Li2.First <span class="sym">);
</span><span class="line">   33 </span><span class="sym"></span>    <span class="kwa">end</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>    <span class="com">{ Li2 must now be empty }</span>
<span class="line">   35 </span>
<span class="line">   36 </span>    <span class="com">{ remove each individual item from right side of Li3 and
</span><span class="line">   37 </span><span class="com">      append to right side of Li2 (reversing list) }</span>
<span class="line">   38 </span>    <span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> SIZE <span class="kwa">Do
</span><span class="line">   39 </span><span class="kwa">    begin
</span><span class="line">   40 </span><span class="kwa"></span>            Li2.Add<span class="sym">(</span> Li3.Last <span class="sym">);
</span><span class="line">   41 </span><span class="sym"></span>            Li3.Count <span class="sym">-=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>    <span class="kwa">end</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym">
</span><span class="line">   44 </span><span class="sym"></span>    <span class="com">{ Li3 must now be empty }</span>
<span class="line">   45 </span>
<span class="line">   46 </span>    <span class="com">{ reverse Li1 in place }</span>
<span class="line">   47 </span>        <span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> <span class="sym">(</span>SIZE <span class="kwa">div</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">Do
</span><span class="line">   48 </span><span class="kwa">        begin
</span><span class="line">   49 </span><span class="kwa"></span>                Li1.Exchange<span class="sym">(</span> i<span class="sym">,</span> SIZE<span class="sym">-</span>i <span class="sym">);
</span><span class="line">   50 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">   51 </span><span class="sym">
</span><span class="line">   52 </span><span class="sym"></span>    <span class="com">{ check that first item is now SIZE }</span>
<span class="line">   53 </span>    <span class="kwa">If</span> <span class="kwb">longint</span><span class="sym">(</span>Li1.first<span class="sym">) &lt;&gt;</span> SIZE <span class="kwa">Then
</span><span class="line">   54 </span><span class="kwa">    begin
</span><span class="line">   55 </span><span class="kwa">
</span><span class="line">   56 </span><span class="kwa"></span>            test_lists <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>            exit<span class="sym">;
</span><span class="line">   58 </span><span class="sym"></span>    <span class="kwa">end</span><span class="sym">;
</span><span class="line">   59 </span><span class="sym">
</span><span class="line">   60 </span><span class="sym"></span>    <span class="com">{ compare Li1 and Li2 for equality }</span>
<span class="line">   61 </span>    len1 <span class="sym">:=</span> Li1.Count <span class="num">- 1</span><span class="sym">;
</span><span class="line">   62 </span><span class="sym"></span>    len2 <span class="sym">:=</span> Li2.Count <span class="num">- 1</span><span class="sym">;
</span><span class="line">   63 </span><span class="sym"></span>    <span class="kwa">If</span>  len1 <span class="sym">&lt;&gt;</span> len2 <span class="kwa">Then
</span><span class="line">   64 </span><span class="kwa">    begin
</span><span class="line">   65 </span><span class="kwa"></span>            test_lists <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   66 </span><span class="sym"></span>            exit<span class="sym">;
</span><span class="line">   67 </span><span class="sym"></span>    <span class="kwa">end</span><span class="sym">;
</span><span class="line">   68 </span><span class="sym">
</span><span class="line">   69 </span><span class="sym"></span>        lists_equal <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   70 </span><span class="sym"></span>        <span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> len1 <span class="kwa">Do
</span><span class="line">   71 </span><span class="kwa">        begin
</span><span class="line">   72 </span><span class="kwa">                If</span> <span class="kwb">longint</span><span class="sym">(</span>Li1.items<span class="sym">[</span>i<span class="sym">]) &lt;&gt;</span> <span class="kwb">longint</span><span class="sym">(</span>Li2.items<span class="sym">[</span>i<span class="sym">])</span> <span class="kwa">Then
</span><span class="line">   73 </span><span class="kwa">                begin
</span><span class="line">   74 </span><span class="kwa"></span>                        lists_equal <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   75 </span><span class="sym"></span>                        break<span class="sym">;
</span><span class="line">   76 </span><span class="sym"></span>                <span class="kwa">end</span><span class="sym">;
</span><span class="line">   77 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">   78 </span><span class="sym">
</span><span class="line">   79 </span><span class="sym"></span>        <span class="kwa">If</span> lists_equal <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then
</span><span class="line">   80 </span><span class="kwa">        begin
</span><span class="line">   81 </span><span class="kwa"></span>                test_lists <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   82 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">   83 </span><span class="kwa">        else
</span><span class="line">   84 </span><span class="kwa"></span>                test_lists <span class="sym">:=</span> len1<span class="sym">;
</span><span class="line">   85 </span><span class="sym"></span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   86 </span><span class="sym">
</span><span class="line">   87 </span><span class="sym"></span><span class="kwa">var
</span><span class="line">   88 </span><span class="kwa"></span>        ITER<span class="sym">,</span> i<span class="sym">,</span> result<span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="line">   89 </span><span class="sym">
</span><span class="line">   90 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   91 </span><span class="kwa">        if</span> ParamCount <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then
</span><span class="line">   92 </span><span class="kwa"></span>                ITER <span class="sym">:=</span> <span class="num">1
</span><span class="line">   93 </span><span class="num"></span>        <span class="kwa">else
</span><span class="line">   94 </span><span class="kwa"></span>                ITER <span class="sym">:=</span> StrToInt<span class="sym">(</span>ParamStr<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span><span class="line">   95 </span><span class="sym">
</span><span class="line">   96 </span><span class="sym"></span>        <span class="kwa">if</span> ITER <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> ITER <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   97 </span><span class="sym">
</span><span class="line">   98 </span><span class="sym"></span>        <span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">To</span> ITER <span class="kwa">Do</span> result <span class="sym">:=</span> test_lists<span class="sym">();
</span><span class="line">   99 </span><span class="sym"></span>        Writeln <span class="sym">(</span>IntToStr<span class="sym">(</span>result<span class="sym">));
</span><span class="line">  100 </span><span class="sym">
</span><span class="line">  101 </span><span class="sym"></span><span class="kwa">end</span>.
