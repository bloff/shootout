<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<B><FONT COLOR="#A020F0">Program</FONT></B> lists;
<B><FONT COLOR="#A020F0">uses</FONT></B> SysUtils, classes;

<B><FONT COLOR="#A020F0">const</FONT></B> SIZE : longint = 10000;

<B><FONT COLOR="#A020F0">Function</FONT></B> test_lists : integer;
<B><FONT COLOR="#A020F0">var</FONT></B> 
	i, len1, len2 : longint;
	Li1, Li2, Li3 : TList;
	lists_equal : Integer;
<B><FONT COLOR="#A020F0">begin</FONT></B>
    <I><FONT COLOR="#B22222">{ create a list of integers (Li1) from 1 to SIZE }</FONT></I>    
	Li1 := TList.Create;
	Li1.Capacity := SIZE;
    <B><FONT COLOR="#A020F0">For</FONT></B> i := 0 <B><FONT COLOR="#A020F0">to</FONT></B> SIZE <B><FONT COLOR="#A020F0">Do</FONT></B>
    	Li1.Add(Pointer(i));
    
    <I><FONT COLOR="#B22222">{ copy the list to Li2 (not by individual items) }</FONT></I>
	<I><FONT COLOR="#B22222">{ [dada] this can't be done }</FONT></I>
	Li2 := TList.Create;
	Li2.Capacity := SIZE;
    <B><FONT COLOR="#A020F0">For</FONT></B> i:= 0 <B><FONT COLOR="#A020F0">to</FONT></B> SIZE <B><FONT COLOR="#A020F0">Do</FONT></B>
    	Li2.Add(Li1.Items[i]);
    
    <I><FONT COLOR="#B22222">{ remove each individual item from left side of Li2 and
      append to right side of Li3 (preserving order) }</FONT></I>
    Li3 := TList.Create;
    Li3.Capacity := SIZE;
    <B><FONT COLOR="#A020F0">For</FONT></B> i := 0 <B><FONT COLOR="#A020F0">to</FONT></B> SIZE <B><FONT COLOR="#A020F0">Do</FONT></B>
    <B><FONT COLOR="#A020F0">begin</FONT></B>
    	Li3.Add( Li2.First );
    	Li2.Remove( Li2.First );
    <B><FONT COLOR="#A020F0">end</FONT></B>;
    <I><FONT COLOR="#B22222">{ Li2 must now be empty }</FONT></I>
    
    <I><FONT COLOR="#B22222">{ remove each individual item from right side of Li3 and
      append to right side of Li2 (reversing list) }</FONT></I>
    <B><FONT COLOR="#A020F0">For</FONT></B> i := 0 <B><FONT COLOR="#A020F0">To</FONT></B> SIZE <B><FONT COLOR="#A020F0">Do</FONT></B>
    <B><FONT COLOR="#A020F0">begin</FONT></B>
    	Li2.Add( Li3.Last );
    	Li3.Count -= 1;   	
    <B><FONT COLOR="#A020F0">end</FONT></B>;

    <I><FONT COLOR="#B22222">{ Li3 must now be empty }</FONT></I>

    <I><FONT COLOR="#B22222">{ reverse Li1 in place }</FONT></I>
	<B><FONT COLOR="#A020F0">For</FONT></B> i := 0 <B><FONT COLOR="#A020F0">To</FONT></B> (SIZE <B><FONT COLOR="#A020F0">div</FONT></B> 2) <B><FONT COLOR="#A020F0">Do</FONT></B>
	<B><FONT COLOR="#A020F0">begin</FONT></B>
		Li1.Exchange( i, SIZE-i );
	<B><FONT COLOR="#A020F0">end</FONT></B>;
	
    <I><FONT COLOR="#B22222">{ check that first item is now SIZE }</FONT></I>
    <B><FONT COLOR="#A020F0">If</FONT></B> longint(Li1.first) &lt;&gt; SIZE <B><FONT COLOR="#A020F0">Then</FONT></B>
    <B><FONT COLOR="#A020F0">begin</FONT></B>
    	
    	test_lists := 0;
    	exit;
    <B><FONT COLOR="#A020F0">end</FONT></B>;

    <I><FONT COLOR="#B22222">{ compare Li1 and Li2 for equality }</FONT></I>   
    len1 := Li1.Count - 1;
    len2 := Li2.Count - 1;
    <B><FONT COLOR="#A020F0">If</FONT></B>  len1 &lt;&gt; len2 <B><FONT COLOR="#A020F0">Then</FONT></B>
    <B><FONT COLOR="#A020F0">begin</FONT></B>
    	test_lists := 0;
    	exit;
    <B><FONT COLOR="#A020F0">end</FONT></B>;

	lists_equal := 1;    
	<B><FONT COLOR="#A020F0">For</FONT></B> i := 0 <B><FONT COLOR="#A020F0">To</FONT></B> len1 <B><FONT COLOR="#A020F0">Do</FONT></B>
	<B><FONT COLOR="#A020F0">begin</FONT></B>
		<B><FONT COLOR="#A020F0">If</FONT></B> longint(Li1.items[i]) &lt;&gt; longint(Li2.items[i]) <B><FONT COLOR="#A020F0">Then</FONT></B>
		<B><FONT COLOR="#A020F0">begin</FONT></B>
			lists_equal := 0;			
			break;
		<B><FONT COLOR="#A020F0">end</FONT></B>;
	<B><FONT COLOR="#A020F0">end</FONT></B>;
	
	<B><FONT COLOR="#A020F0">If</FONT></B> lists_equal = 0 <B><FONT COLOR="#A020F0">Then</FONT></B>
	<B><FONT COLOR="#A020F0">begin</FONT></B>
		test_lists := 0;
	<B><FONT COLOR="#A020F0">end</FONT></B>
	<B><FONT COLOR="#A020F0">else</FONT></B>
		test_lists := len1;
<B><FONT COLOR="#A020F0">end</FONT></B>;

<B><FONT COLOR="#A020F0">var</FONT></B>
	ITER, i, result: integer;

<B><FONT COLOR="#A020F0">begin</FONT></B>
	<B><FONT COLOR="#A020F0">if</FONT></B> ParamCount = 0 <B><FONT COLOR="#A020F0">then</FONT></B>
		ITER := 1
	<B><FONT COLOR="#A020F0">else</FONT></B>
		ITER := StrToInt(ParamStr(1));
		
	<B><FONT COLOR="#A020F0">if</FONT></B> ITER &lt; 1 <B><FONT COLOR="#A020F0">then</FONT></B> ITER := 1;
	
	<B><FONT COLOR="#A020F0">For</FONT></B> i := 1 <B><FONT COLOR="#A020F0">To</FONT></B> ITER <B><FONT COLOR="#A020F0">Do</FONT></B> result := test_lists();
	Writeln (IntToStr(result));

<B><FONT COLOR="#A020F0">end</FONT></B>.</pre></td></tr></table>
