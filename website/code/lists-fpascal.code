<span class="kwa">Program</span> lists<span class="sym">;
</span><span class="kwa">uses</span> SysUtils<span class="sym">,</span> classes<span class="sym">;

</span><span class="kwa">const</span> SIZE <span class="sym">:</span> <span class="kwb">longint</span> <span class="sym">=</span> <span class="num">10000</span><span class="sym">;

</span><span class="kwa">Function</span> test_lists <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">var
</span>	i<span class="sym">,</span> len1<span class="sym">,</span> len2 <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span>	Li1<span class="sym">,</span> Li2<span class="sym">,</span> Li3 <span class="sym">:</span> TList<span class="sym">;
</span>	lists_equal <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="kwa">begin
</span>    <span class="com">{ create a list of integers (Li1) from 1 to SIZE }</span>
	Li1 <span class="sym">:=</span> TList.Create<span class="sym">;
</span>	Li1.Capacity <span class="sym">:=</span> SIZE<span class="sym">;
</span>    <span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> SIZE <span class="kwa">Do
</span>    	Li1.Add<span class="sym">(</span><span class="kwb">Pointer</span><span class="sym">(</span>i<span class="sym">));

</span>    <span class="com">{ copy the list to Li2 (not by individual items) }</span>
	<span class="com">{ [dada] this can't be done }</span>
	Li2 <span class="sym">:=</span> TList.Create<span class="sym">;
</span>	Li2.Capacity <span class="sym">:=</span> SIZE<span class="sym">;
</span>    <span class="kwa">For</span> i<span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> SIZE <span class="kwa">Do
</span>    	Li2.Add<span class="sym">(</span>Li1.Items<span class="sym">[</span>i<span class="sym">]);

</span>    <span class="com">{ remove each individual item from left side of Li2 and
      append to right side of Li3 (preserving order) }</span>
    Li3 <span class="sym">:=</span> TList.Create<span class="sym">;
</span>    Li3.Capacity <span class="sym">:=</span> SIZE<span class="sym">;
</span>    <span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> SIZE <span class="kwa">Do
    begin
</span>    	Li3.Add<span class="sym">(</span> Li2.First <span class="sym">);
</span>    	Li2.Remove<span class="sym">(</span> Li2.First <span class="sym">);
</span>    <span class="kwa">end</span><span class="sym">;
</span>    <span class="com">{ Li2 must now be empty }</span>

    <span class="com">{ remove each individual item from right side of Li3 and
      append to right side of Li2 (reversing list) }</span>
    <span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> SIZE <span class="kwa">Do
    begin
</span>    	Li2.Add<span class="sym">(</span> Li3.Last <span class="sym">);
</span>    	Li3.Count <span class="sym">-=</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;

</span>    <span class="com">{ Li3 must now be empty }</span>

    <span class="com">{ reverse Li1 in place }</span>
	<span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> <span class="sym">(</span>SIZE <span class="kwa">div</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">Do
	begin
</span>		Li1.Exchange<span class="sym">(</span> i<span class="sym">,</span> SIZE<span class="sym">-</span>i <span class="sym">);
</span>	<span class="kwa">end</span><span class="sym">;

</span>    <span class="com">{ check that first item is now SIZE }</span>
    <span class="kwa">If</span> <span class="kwb">longint</span><span class="sym">(</span>Li1.first<span class="sym">) &lt;&gt;</span> SIZE <span class="kwa">Then
    begin

</span>    	test_lists <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>    	exit<span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;

</span>    <span class="com">{ compare Li1 and Li2 for equality }</span>
    len1 <span class="sym">:=</span> Li1.Count <span class="num">- 1</span><span class="sym">;
</span>    len2 <span class="sym">:=</span> Li2.Count <span class="num">- 1</span><span class="sym">;
</span>    <span class="kwa">If</span>  len1 <span class="sym">&lt;&gt;</span> len2 <span class="kwa">Then
    begin
</span>    	test_lists <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>    	exit<span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;

</span>	lists_equal <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>	<span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">To</span> len1 <span class="kwa">Do
	begin
		If</span> <span class="kwb">longint</span><span class="sym">(</span>Li1.items<span class="sym">[</span>i<span class="sym">]) &lt;&gt;</span> <span class="kwb">longint</span><span class="sym">(</span>Li2.items<span class="sym">[</span>i<span class="sym">])</span> <span class="kwa">Then
		begin
</span>			lists_equal <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>			break<span class="sym">;
</span>		<span class="kwa">end</span><span class="sym">;
</span>	<span class="kwa">end</span><span class="sym">;

</span>	<span class="kwa">If</span> lists_equal <span class="sym">=</span> <span class="num">0</span> <span class="kwa">Then
	begin
</span>		test_lists <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwa">end
	else
</span>		test_lists <span class="sym">:=</span> len1<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">var
</span>	ITER<span class="sym">,</span> i<span class="sym">,</span> result<span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;

</span><span class="kwa">begin
	if</span> ParamCount <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then
</span>		ITER <span class="sym">:=</span> <span class="num">1
</span>	<span class="kwa">else
</span>		ITER <span class="sym">:=</span> StrToInt<span class="sym">(</span>ParamStr<span class="sym">(</span><span class="num">1</span><span class="sym">));

</span>	<span class="kwa">if</span> ITER <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> ITER <span class="sym">:=</span> <span class="num">1</span><span class="sym">;

</span>	<span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">To</span> ITER <span class="kwa">Do</span> result <span class="sym">:=</span> test_lists<span class="sym">();
</span>	Writeln <span class="sym">(</span>IntToStr<span class="sym">(</span>result<span class="sym">));

</span><span class="kwa">end</span>.
