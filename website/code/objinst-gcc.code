<span class="com">/* -*- mode: c -*-
 * $Id: objinst-gcc.code,v 1.7 2005-03-15 06:18:01 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span>

<span class="kwb">enum</span> <span class="sym">{</span><span class="kwa">false</span><span class="sym">,</span> <span class="kwa">true</span><span class="sym">};

</span><span class="dir">#define TOGGLE \
    char state; \
    char (*value)(struct Toggle *); \
    struct Toggle *(*activate)(struct Toggle *)
</span>
<span class="dir">#define DESTROY  free
</span>
<span class="kwc">typedef</span> <span class="kwb">struct</span> Toggle <span class="sym">{
</span>    TOGGLE<span class="sym">;
}</span> Toggle<span class="sym">;

</span><span class="kwb">char</span> toggle_value<span class="sym">(</span>Toggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">) {
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">-&gt;</span>state<span class="sym">);
}
</span>Toggle <span class="sym">*</span>toggle_activate<span class="sym">(</span>Toggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">) {
</span>    <span class="kwa">this</span><span class="sym">-&gt;</span>state <span class="sym">= !</span><span class="kwa">this</span><span class="sym">-&gt;</span>state<span class="sym">;
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);
}
</span>Toggle <span class="sym">*</span>init_Toggle<span class="sym">(</span>Toggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">,</span> <span class="kwb">char</span> start_state<span class="sym">) {
</span>    <span class="kwa">this</span><span class="sym">-&gt;</span>state <span class="sym">=</span> start_state<span class="sym">;
</span>    <span class="kwa">this</span><span class="sym">-&gt;</span>value <span class="sym">=</span> toggle_value<span class="sym">;
</span>    <span class="kwa">this</span><span class="sym">-&gt;</span>activate <span class="sym">=</span> toggle_activate<span class="sym">;
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);
}
</span>Toggle <span class="sym">*</span>new_Toggle<span class="sym">(</span><span class="kwb">char</span> start_state<span class="sym">) {
</span>    Toggle <span class="sym">*</span><span class="kwa">this</span> <span class="sym">= (</span>Toggle <span class="sym">*)</span>malloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>Toggle<span class="sym">));
</span>    <span class="kwa">return</span><span class="sym">(</span>init_Toggle<span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> start_state<span class="sym">));
}


</span><span class="kwc">typedef</span> <span class="kwb">struct</span> NthToggle <span class="sym">{
</span>    TOGGLE<span class="sym">;
</span>    <span class="kwb">int</span> count_max<span class="sym">;
</span>    <span class="kwb">int</span> counter<span class="sym">;
}</span> NthToggle<span class="sym">;

</span>NthToggle <span class="sym">*</span>nth_toggle_activate<span class="sym">(</span>NthToggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">) {
</span>    <span class="kwa">if</span> <span class="sym">(++</span><span class="kwa">this</span><span class="sym">-&gt;</span>counter <span class="sym">&gt;=</span> <span class="kwa">this</span><span class="sym">-&gt;</span>count_max<span class="sym">) {
</span>	<span class="kwa">this</span><span class="sym">-&gt;</span>state <span class="sym">= !</span><span class="kwa">this</span><span class="sym">-&gt;</span>state<span class="sym">;
</span>	<span class="kwa">this</span><span class="sym">-&gt;</span>counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;
    }
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);
}
</span>NthToggle <span class="sym">*</span>init_NthToggle<span class="sym">(</span>NthToggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">,</span> <span class="kwb">int</span> max_count<span class="sym">) {
</span>    <span class="kwa">this</span><span class="sym">-&gt;</span>count_max <span class="sym">=</span> max_count<span class="sym">;
</span>    <span class="kwa">this</span><span class="sym">-&gt;</span>counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwa">this</span><span class="sym">-&gt;</span>activate <span class="sym">= (</span>Toggle <span class="sym">*(*)(</span>Toggle <span class="sym">*))</span>nth_toggle_activate<span class="sym">;
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);
}
</span>NthToggle <span class="sym">*</span>new_NthToggle<span class="sym">(</span><span class="kwb">char</span> start_state<span class="sym">,</span> <span class="kwb">int</span> max_count<span class="sym">) {
</span>    NthToggle <span class="sym">*</span><span class="kwa">this</span> <span class="sym">= (</span>NthToggle <span class="sym">*)</span>malloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>NthToggle<span class="sym">));
</span>    <span class="kwa">this</span> <span class="sym">= (</span>NthToggle <span class="sym">*)</span>init_Toggle<span class="sym">((</span>Toggle <span class="sym">*)</span><span class="kwa">this</span><span class="sym">,</span> start_state<span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span>init_NthToggle<span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> max_count<span class="sym">));
}


</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    Toggle <span class="sym">*</span>tog<span class="sym">;
</span>    NthToggle <span class="sym">*</span>ntog<span class="sym">;

</span>    tog <span class="sym">=</span> new_Toggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">5</span><span class="sym">;</span> i<span class="sym">++) {
</span>	fputs<span class="sym">((</span>tog<span class="sym">-&gt;</span>activate<span class="sym">(</span>tog<span class="sym">)-&gt;</span>value<span class="sym">(</span>tog<span class="sym">))</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);
    }
</span>    DESTROY<span class="sym">(</span>tog<span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	tog <span class="sym">=</span> new_Toggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">);
</span>	DESTROY<span class="sym">(</span>tog<span class="sym">);
    }

</span>    fputs<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);

</span>    ntog <span class="sym">=</span> new_NthToggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">8</span><span class="sym">;</span> i<span class="sym">++) {
</span>	fputs<span class="sym">((</span>ntog<span class="sym">-&gt;</span>activate<span class="sym">(</span>ntog<span class="sym">)-&gt;</span>value<span class="sym">(</span>ntog<span class="sym">))</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);
    }
</span>    DESTROY<span class="sym">(</span>ntog<span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	ntog <span class="sym">=</span> new_NthToggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span>	DESTROY<span class="sym">(</span>ntog<span class="sym">);
    }
</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span>
