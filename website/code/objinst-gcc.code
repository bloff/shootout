<span class="line">    1 </span><span class="com">/* -*- mode: c -*-
</span><span class="line">    2 </span><span class="com"> * $Id: objinst-gcc.code,v 1.4 2004-11-13 07:42:23 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> */</span>
<span class="line">    5 </span>
<span class="line">    6 </span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="line">    8 </span><span class="dir"></span>
<span class="line">    9 </span>
<span class="line">   10 </span><span class="kwb">enum</span> <span class="sym">{</span><span class="kwa">false</span><span class="sym">,</span> <span class="kwa">true</span><span class="sym">};
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym"></span><span class="dir">#define TOGGLE \
</span><span class="line">   13 </span><span class="dir">    char state; \
</span><span class="line">   14 </span><span class="dir">    char (*value)(struct Toggle *); \
</span><span class="line">   15 </span><span class="dir">    struct Toggle *(*activate)(struct Toggle *)
</span><span class="line">   16 </span><span class="dir"></span>
<span class="line">   17 </span><span class="dir">#define DESTROY  free
</span><span class="line">   18 </span><span class="dir"></span>
<span class="line">   19 </span><span class="kwc">typedef</span> <span class="kwb">struct</span> Toggle <span class="sym">{
</span><span class="line">   20 </span><span class="sym"></span>    TOGGLE<span class="sym">;
</span><span class="line">   21 </span><span class="sym">}</span> Toggle<span class="sym">;
</span><span class="line">   22 </span><span class="sym">
</span><span class="line">   23 </span><span class="sym"></span><span class="kwb">char</span> toggle_value<span class="sym">(</span>Toggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">) {
</span><span class="line">   24 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">-&gt;</span>state<span class="sym">);
</span><span class="line">   25 </span><span class="sym">}
</span><span class="line">   26 </span><span class="sym"></span>Toggle <span class="sym">*</span>toggle_activate<span class="sym">(</span>Toggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">) {
</span><span class="line">   27 </span><span class="sym"></span>    <span class="kwa">this</span><span class="sym">-&gt;</span>state <span class="sym">= !</span><span class="kwa">this</span><span class="sym">-&gt;</span>state<span class="sym">;
</span><span class="line">   28 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span><span class="line">   29 </span><span class="sym">}
</span><span class="line">   30 </span><span class="sym"></span>Toggle <span class="sym">*</span>init_Toggle<span class="sym">(</span>Toggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">,</span> <span class="kwb">char</span> start_state<span class="sym">) {
</span><span class="line">   31 </span><span class="sym"></span>    <span class="kwa">this</span><span class="sym">-&gt;</span>state <span class="sym">=</span> start_state<span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>    <span class="kwa">this</span><span class="sym">-&gt;</span>value <span class="sym">=</span> toggle_value<span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>    <span class="kwa">this</span><span class="sym">-&gt;</span>activate <span class="sym">=</span> toggle_activate<span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span><span class="line">   35 </span><span class="sym">}
</span><span class="line">   36 </span><span class="sym"></span>Toggle <span class="sym">*</span>new_Toggle<span class="sym">(</span><span class="kwb">char</span> start_state<span class="sym">) {
</span><span class="line">   37 </span><span class="sym"></span>    Toggle <span class="sym">*</span><span class="kwa">this</span> <span class="sym">= (</span>Toggle <span class="sym">*)</span>malloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>Toggle<span class="sym">));
</span><span class="line">   38 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>init_Toggle<span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> start_state<span class="sym">));
</span><span class="line">   39 </span><span class="sym">}
</span><span class="line">   40 </span><span class="sym">
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym"></span><span class="kwc">typedef</span> <span class="kwb">struct</span> NthToggle <span class="sym">{
</span><span class="line">   43 </span><span class="sym"></span>    TOGGLE<span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>    <span class="kwb">int</span> count_max<span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span>    <span class="kwb">int</span> counter<span class="sym">;
</span><span class="line">   46 </span><span class="sym">}</span> NthToggle<span class="sym">;
</span><span class="line">   47 </span><span class="sym">
</span><span class="line">   48 </span><span class="sym"></span>NthToggle <span class="sym">*</span>nth_toggle_activate<span class="sym">(</span>NthToggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">) {
</span><span class="line">   49 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(++</span><span class="kwa">this</span><span class="sym">-&gt;</span>counter <span class="sym">&gt;=</span> <span class="kwa">this</span><span class="sym">-&gt;</span>count_max<span class="sym">) {
</span><span class="line">   50 </span><span class="sym"></span>        <span class="kwa">this</span><span class="sym">-&gt;</span>state <span class="sym">= !</span><span class="kwa">this</span><span class="sym">-&gt;</span>state<span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>        <span class="kwa">this</span><span class="sym">-&gt;</span>counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym">    }
</span><span class="line">   53 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span><span class="line">   54 </span><span class="sym">}
</span><span class="line">   55 </span><span class="sym"></span>NthToggle <span class="sym">*</span>init_NthToggle<span class="sym">(</span>NthToggle <span class="sym">*</span><span class="kwa">this</span><span class="sym">,</span> <span class="kwb">int</span> max_count<span class="sym">) {
</span><span class="line">   56 </span><span class="sym"></span>    <span class="kwa">this</span><span class="sym">-&gt;</span>count_max <span class="sym">=</span> max_count<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>    <span class="kwa">this</span><span class="sym">-&gt;</span>counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   58 </span><span class="sym"></span>    <span class="kwa">this</span><span class="sym">-&gt;</span>activate <span class="sym">= (</span>Toggle <span class="sym">*(*)(</span>Toggle <span class="sym">*))</span>nth_toggle_activate<span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span><span class="line">   60 </span><span class="sym">}
</span><span class="line">   61 </span><span class="sym"></span>NthToggle <span class="sym">*</span>new_NthToggle<span class="sym">(</span><span class="kwb">char</span> start_state<span class="sym">,</span> <span class="kwb">int</span> max_count<span class="sym">) {
</span><span class="line">   62 </span><span class="sym"></span>    NthToggle <span class="sym">*</span><span class="kwa">this</span> <span class="sym">= (</span>NthToggle <span class="sym">*)</span>malloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>NthToggle<span class="sym">));
</span><span class="line">   63 </span><span class="sym"></span>    <span class="kwa">this</span> <span class="sym">= (</span>NthToggle <span class="sym">*)</span>init_Toggle<span class="sym">((</span>Toggle <span class="sym">*)</span><span class="kwa">this</span><span class="sym">,</span> start_state<span class="sym">);
</span><span class="line">   64 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>init_NthToggle<span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> max_count<span class="sym">));
</span><span class="line">   65 </span><span class="sym">}
</span><span class="line">   66 </span><span class="sym">
</span><span class="line">   67 </span><span class="sym">
</span><span class="line">   68 </span><span class="sym"></span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span><span class="line">   69 </span><span class="sym"></span>    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   70 </span><span class="sym"></span>    Toggle <span class="sym">*</span>tog<span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span>    NthToggle <span class="sym">*</span>ntog<span class="sym">;
</span><span class="line">   72 </span><span class="sym">
</span><span class="line">   73 </span><span class="sym"></span>    tog <span class="sym">=</span> new_Toggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">);
</span><span class="line">   74 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">5</span><span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   75 </span><span class="sym"></span>        fputs<span class="sym">((</span>tog<span class="sym">-&gt;</span>activate<span class="sym">(</span>tog<span class="sym">)-&gt;</span>value<span class="sym">(</span>tog<span class="sym">))</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);
</span><span class="line">   76 </span><span class="sym">    }
</span><span class="line">   77 </span><span class="sym"></span>    DESTROY<span class="sym">(</span>tog<span class="sym">);
</span><span class="line">   78 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   79 </span><span class="sym"></span>        tog <span class="sym">=</span> new_Toggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">);
</span><span class="line">   80 </span><span class="sym"></span>        DESTROY<span class="sym">(</span>tog<span class="sym">);
</span><span class="line">   81 </span><span class="sym">    }
</span><span class="line">   82 </span><span class="sym">
</span><span class="line">   83 </span><span class="sym"></span>    fputs<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);
</span><span class="line">   84 </span><span class="sym">
</span><span class="line">   85 </span><span class="sym"></span>    ntog <span class="sym">=</span> new_NthToggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span><span class="line">   86 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">8</span><span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   87 </span><span class="sym"></span>        fputs<span class="sym">((</span>ntog<span class="sym">-&gt;</span>activate<span class="sym">(</span>ntog<span class="sym">)-&gt;</span>value<span class="sym">(</span>ntog<span class="sym">))</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stdout<span class="sym">);
</span><span class="line">   88 </span><span class="sym">    }
</span><span class="line">   89 </span><span class="sym"></span>    DESTROY<span class="sym">(</span>ntog<span class="sym">);
</span><span class="line">   90 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   91 </span><span class="sym"></span>        ntog <span class="sym">=</span> new_NthToggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span><span class="line">   92 </span><span class="sym"></span>        DESTROY<span class="sym">(</span>ntog<span class="sym">);
</span><span class="line">   93 </span><span class="sym">    }
</span><span class="line">   94 </span><span class="sym"></span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   95 </span><span class="sym">}</span>
