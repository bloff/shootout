<span class="slc">#!/usr/bin/python -OO
</span><span class="slc"># The Computer Language Shootout Benchmarks
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># contributed by Kevin Carson
</span>
<span class="kwc">from</span> math <span class="kwc">import</span> sqrt
<span class="kwc">import</span> sys


<span class="kwa">class</span> mandelbrot <span class="sym">:
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> w<span class="sym">,</span> h<span class="sym">,</span> max_iterations<span class="sym">,</span> abs_limit<span class="sym">) :
</span>        <span class="kwc">self</span><span class="sym">.</span>w <span class="sym">=</span> w
        <span class="kwc">self</span><span class="sym">.</span>h <span class="sym">=</span> h
        <span class="kwc">self</span><span class="sym">.</span>max_iterations <span class="sym">=</span> max_iterations
        <span class="kwc">self</span><span class="sym">.</span>abs_limit <span class="sym">=</span> abs_limit

    <span class="kwb">def</span> calc_byte<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> bits<span class="sym">,</span> x<span class="sym">,</span> fy<span class="sym">) :
</span>        bit_accumulator <span class="sym">=</span> <span class="num">0
</span>        w <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>w
        abs_limit_sqrt <span class="sym">=</span> sqrt<span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>abs_limit<span class="sym">)
</span>        max_iterations <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>max_iterations

        <span class="kwb">for</span> k <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>x<span class="sym">,</span> x <span class="sym">+</span> bits<span class="sym">) :
</span>            z <span class="sym">=</span> <span class="num">0j
</span>            c <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> k <span class="sym">/</span> w <span class="num">- 1.5</span>  <span class="sym">+</span> fy

            bit_accumulator <span class="sym">&lt;&lt;=</span> <span class="num">1

</span>            <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>max_iterations<span class="sym">) :
</span>                z <span class="sym">=</span> z <span class="sym">*</span> z <span class="sym">+</span> c

                <span class="slc"># Python can natively handle complex numbers.  As such this
</span>                <span class="slc"># would be more reasonably written as &quot;abs(z) &gt;= abs_limit&quot; but
</span>                <span class="slc"># here it is implemented &quot;same way&quot;.
</span>                <span class="kwb">if</span> <span class="kwc">abs</span><span class="sym">(</span>z<span class="sym">) &gt;=</span> abs_limit_sqrt <span class="sym">:
</span>                    <span class="kwb">break
            else</span> <span class="sym">:
</span>                bit_accumulator <span class="sym">|=</span> <span class="num">1
</span>        <span class="kwb">return</span> bit_accumulator


w <span class="sym">=</span> h <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])

</span>fractal <span class="sym">=</span> mandelbrot<span class="sym">(</span>w<span class="sym">,</span> h<span class="sym">,</span> <span class="num">50</span><span class="sym">,</span> <span class="num">4.0</span><span class="sym">)

</span>wtail <span class="sym">=</span> w <span class="sym">%</span> <span class="num">8
</span>calc_byte <span class="sym">=</span> fractal<span class="sym">.</span>calc_byte
cout <span class="sym">=</span> sys<span class="sym">.</span>stdout<span class="sym">.</span>write

cout<span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">% (</span>w<span class="sym">,</span> h<span class="sym">))

</span><span class="kwb">if</span> wtail <span class="sym">!=</span> <span class="num">0</span> <span class="sym">:
</span>    wtail_offset <span class="sym">= (</span>w <span class="sym">//</span> <span class="num">8</span><span class="sym">) *</span> <span class="num">8
</span>    wtail_shift <span class="sym">=</span> <span class="num">8</span> <span class="sym">-</span> wtail

    <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>h<span class="sym">):
</span>        fy <span class="sym">=</span> <span class="num">2</span>j <span class="sym">*</span> y <span class="sym">/</span> h <span class="num">- 1</span>j

        <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> wtail_offset<span class="sym">,</span> <span class="num">8</span><span class="sym">):
</span>            cout<span class="sym">(</span><span class="kwa">chr</span><span class="sym">(</span>calc_byte<span class="sym">(</span><span class="num">8</span><span class="sym">,</span> x<span class="sym">,</span> fy<span class="sym">)))

</span>        cout<span class="sym">(</span><span class="kwa">chr</span><span class="sym">(</span>calc_byte<span class="sym">(</span>wtail<span class="sym">,</span> wtail_offset<span class="sym">,</span> fy<span class="sym">) &lt;&lt;</span> wtail_shift<span class="sym">))

</span><span class="kwb">else</span> <span class="sym">:
</span>    <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>h<span class="sym">):
</span>        fy <span class="sym">=</span> <span class="num">2</span>j <span class="sym">*</span> y <span class="sym">/</span> h <span class="num">- 1</span>j

        <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> w<span class="sym">,</span> <span class="num">8</span><span class="sym">):
</span>            cout<span class="sym">(</span><span class="kwa">chr</span><span class="sym">(</span>calc_byte<span class="sym">(</span><span class="num">8</span><span class="sym">,</span> x<span class="sym">,</span> fy<span class="sym">)))</span>
