<span class="str">&quot;* The Computer Language Benchmarks Game</span>
<span class="str">    http://shootout.alioth.debian.org/</span>
<span class="str">    adapted from a program by Paolo Bonzini</span>
<span class="str">    contributed by Isaac Gouy *&quot;</span><span class="sym">!</span>

Object subclass<span class="sym">:</span> <span class="slc">#Thread   instanceVariableNames: 'name nextThread token semaphore done'   classVariableNames: ''   poolDictionaries: ''   category: 'BenchmarksGame' !</span>

<span class="sym">!</span>Thread methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>
name<span class="sym">:</span> anInteger   name <span class="sym">:=</span> anInteger <span class="sym">! !</span>

<span class="sym">!</span>Thread methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>
nextThread<span class="sym">:</span> aThread   nextThread <span class="sym">:=</span> aThread <span class="sym">! !</span>

<span class="sym">!</span>Thread methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>tokenNotDone   semaphore wait.   ^token <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">! !</span>

<span class="sym">!</span>Thread methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>semaphore<span class="sym">:</span> aSemaphore   semaphore <span class="sym">:=</span> aSemaphore <span class="sym">! !</span>

<span class="sym">!</span>Thread methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>done<span class="sym">:</span> aSemaphore   done <span class="sym">:=</span> aSemaphore <span class="sym">! !</span>

<span class="sym">!</span>Thread methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>
fork   <span class="sym">[</span> self run <span class="sym">]</span> fork <span class="sym">! !</span>

<span class="sym">!</span>Thread methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>
run
   <span class="sym">[</span> self tokenNotDone <span class="sym">]</span> whileTrue<span class="sym">: [</span> nextThread takeToken<span class="sym">:</span> token <span class="sym">-</span> <span class="num">1</span> <span class="sym">]</span>.
   Tests stdout print<span class="sym">:</span> name<span class="sym">;</span> nl.
   done signal <span class="sym">! !</span>

<span class="sym">!</span>Thread methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>takeToken<span class="sym">:</span> x   token <span class="sym">:=</span> x.   semaphore signal <span class="sym">! !</span>


<span class="sym">!</span>Thread class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>new
   ^self basicNew semaphore<span class="sym">:</span> Semaphore new <span class="sym">! !</span>

<span class="sym">!</span>Thread class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>named<span class="sym">:</span> anInteger <span class="kwa">next</span><span class="sym">:</span> aThread done<span class="sym">:</span> aSemaphore   ^self new name<span class="sym">:</span> anInteger<span class="sym">;</span> nextThread<span class="sym">:</span> aThread<span class="sym">;</span> done<span class="sym">:</span> aSemaphore<span class="sym">;</span> fork <span class="sym">! !</span>


<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>threadRing<span class="sym">:</span> aSemaphore   <span class="sym">|</span> first <span class="kwa">last</span> <span class="sym">|</span>
   <span class="num">503</span> to<span class="sym">:</span> <span class="num">1</span> by<span class="sym">: -</span><span class="num">1</span> <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|</span>
      first <span class="sym">:=</span> Thread named<span class="sym">:</span> i <span class="kwa">next</span><span class="sym">:</span> first done<span class="sym">:</span> aSemaphore.
      <span class="kwa">last</span> isNil ifTrue<span class="sym">: [</span> <span class="kwa">last</span> <span class="sym">:=</span> first <span class="sym">]</span>.
   <span class="sym">]</span>.
   <span class="kwa">last</span> nextThread<span class="sym">:</span> first.   ^first <span class="sym">! !</span>

<span class="sym">!</span>Tests class methodsFor<span class="sym">:</span> <span class="str">'benchmarking'</span><span class="sym">!</span>threadring
   <span class="sym">|</span> done <span class="sym">|   (</span>self threadRing<span class="sym">: (</span>done <span class="sym">:=</span> Semaphore new<span class="sym">))</span> takeToken<span class="sym">:</span> self arg.
   done wait.   ^<span class="str">''</span><span class="sym">! !</span>



Tests threadring<span class="sym">!</span>
