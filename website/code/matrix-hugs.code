<span class="slc">-- $Id: matrix-hugs.code,v 1.6 2005-03-19 07:50:19 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- originally from Julian Assange, but
</span><span class="slc">-- rewritten by Malcolm Wallace
</span>
<span class="kwa">module</span> Main<span class="sym">(</span>main<span class="sym">)</span> <span class="kwa">where
import</span> System<span class="sym">(</span>getArgs<span class="sym">,</span> exitWith<span class="sym">,</span> ExitCode<span class="sym">(</span>..<span class="sym">))
</span><span class="kwa">import</span> Numeric<span class="sym">(</span>readDec<span class="sym">)
</span><span class="kwa">import</span> List<span class="sym">(</span>transpose<span class="sym">)

</span>main <span class="sym">=</span> <span class="kwa">do
</span>       arg <span class="sym">&lt;-</span> getArgs
       <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">case</span> arg <span class="kwa">of</span> <span class="sym">[</span>n<span class="sym">] -&gt; (</span>fst.head.readDec<span class="sym">)</span> n<span class="sym">;</span> _ <span class="sym">-&gt;</span> <span class="num">1
</span>           m1 <span class="sym">=</span> mkmat size
           m2 <span class="sym">=</span> m1
           mm <span class="sym">=</span> strictlast <span class="sym">(</span>zipWith mmult <span class="sym">(</span>replicate n m1<span class="sym">) (</span>replicate n m2<span class="sym">))
</span>       putStrLn <span class="sym">(</span>disp mm <span class="num">0 0</span> <span class="sym">++</span> <span class="str">&quot; &quot;</span> <span class="sym">++
</span>		  disp mm <span class="num">3 2</span> <span class="sym">++</span> <span class="str">&quot; &quot;</span> <span class="sym">++
</span>		  disp mm <span class="num">2 3</span> <span class="sym">++</span> <span class="str">&quot; &quot;</span> <span class="sym">++
</span>		  disp mm <span class="num">4 4</span><span class="sym">)
</span>    <span class="kwa">where
</span>	  disp m row col  <span class="sym">=</span> show <span class="sym">(</span>m<span class="sym">!!</span>row<span class="sym">!!</span>col<span class="sym">)

</span>strictlast <span class="sym">[</span>x<span class="sym">] =</span> x
strictlast <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) |</span> force x <span class="sym">=</span> strictlast xs
force <span class="sym">[] =</span> <span class="kwa">True
</span>force <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) |</span> inner x <span class="sym">=</span> force xs
inner <span class="sym">[] =</span> <span class="kwa">True
</span>inner <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) =</span> x `seq` inner xs

size <span class="sym">=</span> <span class="num">30
</span>mkmat x    <span class="sym">= [[(</span>y<span class="num">-1</span><span class="sym">)*</span>x<span class="sym">+</span><span class="num">1</span>..y<span class="sym">*</span>x<span class="sym">]|</span> y <span class="sym">&lt;- [</span><span class="num">1</span>..x<span class="sym">]]
</span>mmult a b  <span class="sym">= [[</span>dot row col <span class="num">0</span> <span class="sym">|</span> col <span class="sym">&lt;-</span> a<span class="sym">]|</span> row <span class="sym">&lt;-</span> transpose b<span class="sym">]
</span>       <span class="kwa">where
</span>	       dot <span class="sym">:: [</span><span class="kwb">Int</span><span class="sym">] -&gt; [</span><span class="kwb">Int</span><span class="sym">] -&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int
</span>	       dot <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) (</span>y<span class="sym">:</span>ys<span class="sym">)</span> z <span class="sym">=</span> dot xs ys <span class="sym">(</span>z <span class="sym">+</span> x<span class="sym">*</span>y<span class="sym">)
</span>	       dot  _      _     z <span class="sym">=</span> z

<span class="slc">-- slightly slower transposing mmult in one line:
</span><span class="slc">--  mmult a b  = [[sum$zipWith (*) row col 0 | col &lt;- transpose a]| row &lt;-b]
</span>
