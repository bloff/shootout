<span class="slc">-- -*- mode: eiffel -*-</span>
<span class="slc">-- $Id: lists-se.code,v 1.10 2005-12-08 06:38:41 bfulgham Exp $</span>
<span class="slc">-- http://www.bagley.org/~doug/shootout/</span>
<span class="slc">-- from Friedrich Dominicus</span>

<span class="kwa">class</span> LISTS

insert
	ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
    make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>
    exc<span class="sym">:</span> EXCEPTIONS<span class="sym">;</span>
    args<span class="sym">:</span> ARGUMENTS<span class="sym">;</span>
    l1<span class="sym">,</span> l2<span class="sym">,</span> l3<span class="sym">:</span> DOUBLY_LINKED_LIST<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">];</span>
    size <span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">10000</span><span class="sym">;</span>
    run_n <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>

    preamble <span class="kwa">is</span>
        <span class="kwa">do</span>
            <span class="kwa">create</span> exc<span class="sym">;</span>
            <span class="kwa">create</span> args
            <span class="kwa">if</span> args.argument_count <span class="sym">/=</span> <span class="num">1</span> <span class="kwa">then</span>
                io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;exception_test &lt;integer&gt;%N&quot;</span><span class="sym">);</span>
                exc.<span class="kwd">die</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
            <span class="kwa">end</span><span class="sym">;</span>
            <span class="kwa">if</span> args.<span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer <span class="kwa">then</span>
                run_n <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer<span class="sym">;</span>
            <span class="kwa">else</span>
                io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;Argument wasn't an integer, giving up%N&quot;</span><span class="sym">);</span>
                exc.<span class="kwd">die</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
            <span class="kwa">end</span><span class="sym">;</span>
        <span class="kwa">end</span>



    make <span class="kwa">is</span>
        <span class="kwa">local</span>
          i <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>
	  length <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>
        <span class="kwa">do</span>
            preamble<span class="sym">;</span>
            <span class="kwa">from</span> i <span class="sym">:=</span> <span class="num">1</span>
            until i <span class="sym">&gt;</span> run_n
            <span class="kwa">loop</span>
                length <span class="sym">:=</span> run_it
                i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>

            <span class="slc">-- io.put_string (&quot;l1 length = &quot;);</span>
            io.<span class="kwd">put_integer</span> <span class="sym">(</span>length<span class="sym">);</span>
            io.put_new_line<span class="sym">;</span>
        <span class="kwa">end</span><span class="sym">;</span>

    run_it <span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span>
        <span class="kwa">local</span>
            length <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>
        <span class="kwa">do</span>
            <span class="kwa">create</span> l1.make<span class="sym">;</span>
            fill_l1<span class="sym">;</span>
            <span class="slc">-- copy L1 to L2 (can use any builtin list copy function, if</span>
            <span class="slc">-- available)</span>
            l2 <span class="sym">:=</span> <span class="kwd">clone</span><span class="sym">(</span>l1<span class="sym">);</span>
            move_from_front_to_end<span class="sym">;</span>

            l3 <span class="sym">:=</span> l1.<span class="kwd">clone</span> <span class="sym">(</span>l1<span class="sym">);</span>
            move_from_end_to_end<span class="sym">;</span>
            <span class="slc">-- reversing using the &quot;official interface of the</span>
            <span class="slc">-- SmallEiffel datastructures&quot;</span>
            <span class="slc">--reverse_in_place_naive (l1);</span>
            <span class="slc">-- hand crafted version see doubly_linked_list for details</span>
            l1.revert_in_place<span class="sym">;</span>
            <span class="slc">-- check that first item of L1 is now == SIZE.%</span>
            <span class="slc">-- in Eiffel we could write</span>
            <span class="slc">-- check l1.fist = size end;</span>
            <span class="slc">-- if that does not hold and exception is raised. Well</span>
            <span class="slc">-- just for the record ;-)</span>
            <span class="kwa">if</span> l1.first <span class="sym">=</span> size <span class="kwa">then</span>
                <span class="slc">-- io.put_string(&quot;seems to work%N&quot;);</span>
            <span class="kwa">else</span>
                io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;should not happen%N&quot;</span><span class="sym">);</span>
            <span class="kwa">end</span><span class="sym">;</span>
            <span class="slc">-- compare L1 and L2 for equality and return length of L1</span>
            <span class="slc">-- which should be equal to SIZE</span>
            length <span class="sym">:=</span> <span class="kwd">compare_lists</span> <span class="sym">(</span>l1<span class="sym">,</span> l2<span class="sym">);</span>
            <span class="kwa">Result</span> <span class="sym">:=</span> length<span class="sym">;</span>
        <span class="kwa">end</span><span class="sym">;</span>

    fill_l1 <span class="kwa">is</span>
            <span class="slc">-- first create a list (L1) of integers from 1 through SIZE</span>
            <span class="slc">-- (SIZE is currently defined as 10000).</span>
        <span class="kwa">local</span>
            i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>
        <span class="kwa">do</span>
            <span class="kwa">from</span> i <span class="sym">:=</span> <span class="num">1</span>
            until i <span class="sym">&gt;</span> size
            <span class="kwa">loop</span>
                l1.<span class="kwd">add_last</span><span class="sym">(</span>i<span class="sym">);</span>
                i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
        <span class="kwa">end</span><span class="sym">;</span>

    move_from_front_to_end <span class="kwa">is</span>
            <span class="slc">-- remove each individual item from left side (head) of L2 and</span>
            <span class="slc">-- append to right side (tail) of L3 (preserving order). (L2 should</span>
            <span class="slc">-- be emptied by one item at a time as that item is appended</span>
            <span class="slc">-- to L3).</span>
            <span class="slc">-- REMARK: built-in functionality is used which is not</span>
            <span class="slc">-- optimized for speed, e.g the add_last method creates a</span>
            <span class="slc">-- new node each time, this could be optimized by</span>
            <span class="slc">-- handcrafted code (in fact the shootout encourages the</span>
            <span class="slc">-- &quot;implement yourself approach&quot;, which makes it biased</span>
            <span class="slc">-- towards hand-tailored implementations.</span>
        <span class="kwa">do</span>
            <span class="kwa">from</span> <span class="sym">!!</span>l3.make
            until l2.is_empty
            <span class="kwa">loop</span>
                l3.<span class="kwd">add_last</span><span class="sym">(</span>l2.first<span class="sym">);</span>
                l2.remove_first<span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
            <span class="kwa">check</span>
                l3_adjusted<span class="sym">:</span> l3.first <span class="sym">=</span> <span class="num">1</span> <span class="kwa">and</span> l3.last <span class="sym">=</span> size<span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span> <span class="slc">-- check</span>
            <span class="kwa">debug</span>
                io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;l3 is now %N&quot;</span><span class="sym">);</span>
                <span class="kwd">print</span> <span class="sym">(</span>l3<span class="sym">);</span>
                io.newline<span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
        <span class="kwa">end</span>

    move_from_end_to_end <span class="kwa">is</span>
            <span class="slc">-- remove each individual item from right side (tail) of L3</span>
            <span class="slc">-- and append to right side (tail) of L2 (reversing list).</span>
            <span class="slc">-- (L3  should be emptied by one item at a time as that item</span>
            <span class="slc">--  is appended to L2).</span>
            <span class="slc">-- REMARKS: see move_from_font_to_end</span>
        <span class="kwa">do</span>
            <span class="kwa">from</span> <span class="sym">!!</span>l2.make
            until l3.is_empty
            <span class="kwa">loop</span>
                l2.<span class="kwd">add_last</span><span class="sym">(</span>l3.last<span class="sym">);</span>
                l3.remove_last<span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
            <span class="kwa">check</span>
                l2_built_properly<span class="sym">:</span> l2.first <span class="sym">=</span> size <span class="kwa">and</span> l2.last <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
            <span class="kwa">debug</span>
                io.<span class="kwd">put_string</span> <span class="sym">(</span><span class="str">&quot;l2 is now: %N&quot;</span><span class="sym">);</span>
                <span class="kwd">print</span> <span class="sym">(</span>l2<span class="sym">);</span>
                io.put_new_line<span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
        <span class="kwa">end</span><span class="sym">;</span>




    <span class="kwd">reverse_in_place_naive</span> <span class="sym">(</span>dlist<span class="sym">:</span> TWO_WAY_LINKED_LIST <span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">])</span> <span class="kwa">is</span>
            <span class="slc">-- first try should make quite a difference in run-time</span>
            <span class="slc">-- reverse L1 (preferably in place) (can use any builtin</span>
            <span class="slc">-- function for this, if available.</span>
        <span class="kwa">local</span>
            i <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>
            done <span class="sym">:</span> <span class="kwb">BOOLEAN</span><span class="sym">;</span>
            <span class="slc">-- fl_clone : TWO_WAY_LINKED_LIST[INTEGER];</span>
        <span class="kwa">do</span>
            <span class="slc">-- fl_clone := clone(first_link);</span>
            <span class="kwa">from</span> i <span class="sym">:=</span> <span class="num">1</span>
            until
                i <span class="sym">&gt;</span> size
            <span class="kwa">loop</span>
                dlist.<span class="kwd">add</span><span class="sym">(</span>dlist.last<span class="sym">,</span> i<span class="sym">);</span>
                <span class="slc">-- inefficient. the problem is that remove_lasts moves</span>
                <span class="slc">-- the cursoer and there for one has to run through</span>
                <span class="slc">-- the list over and over again. Well one can that</span>
                <span class="slc">-- just find out by reading the sources ...;-)</span>

                dlist.remove_last<span class="sym">;</span>
                i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
            <span class="kwa">if</span> dlist.first <span class="sym">=</span> size <span class="kwa">then</span>
                io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;first element = size%N&quot;</span><span class="sym">);</span>
            <span class="kwa">else</span>
                io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;first element != size %N&quot;</span><span class="sym">);</span>
            <span class="kwa">end</span><span class="sym">;</span>
            <span class="kwa">debug</span>
                io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;dlist is now %N&quot;</span><span class="sym">);</span>
                <span class="kwd">print</span> <span class="sym">(</span>dlist<span class="sym">);</span>
                io.newline<span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
        <span class="kwa">end</span><span class="sym">;</span>

    <span class="kwd">compare_lists</span> <span class="sym">(</span>al1<span class="sym">,</span> al2 <span class="sym">:</span> DOUBLY_LINKED_LIST<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">]):</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span>
        <span class="kwa">do</span>
            <span class="kwa">if</span> al1.<span class="kwd">is_equal</span><span class="sym">(</span>al2<span class="sym">)</span> <span class="kwa">then</span>
                <span class="slc">-- io.put_string(&quot;lists are equal%N&quot;);</span>
            <span class="kwa">else</span>
                io.<span class="kwd">put_string</span> <span class="sym">(</span><span class="str">&quot;lists are not equal %N&quot;</span><span class="sym">);</span>
            <span class="kwa">end</span><span class="sym">;</span>
            <span class="kwa">Result</span> <span class="sym">:=</span> al1.count<span class="sym">;</span>
        <span class="kwa">end</span><span class="sym">;</span>




<span class="kwa">end</span> <span class="slc">-- class LISTS</span>
