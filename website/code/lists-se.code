<span class="line">    1 </span><span class="slc">-- -*- mode: eiffel -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- $Id: lists-se.code,v 1.3 2004-11-11 07:13:59 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- from Friedrich Dominicus
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="kwa">class</span> LISTS
<span class="line">    7 </span>
<span class="line">    8 </span>
<span class="line">    9 </span>creation
<span class="line">   10 </span>    make
<span class="line">   11 </span>
<span class="line">   12 </span>
<span class="line">   13 </span>
<span class="line">   14 </span><span class="kwa">feature
</span><span class="line">   15 </span><span class="kwa">
</span><span class="line">   16 </span><span class="kwa"></span>    exc<span class="sym">:</span> EXCEPTIONS<span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>    args<span class="sym">:</span> ARGUMENTS<span class="sym">;
</span><span class="line">   18 </span><span class="sym"></span>    l1<span class="sym">,</span> l2<span class="sym">,</span> l3<span class="sym">:</span> DOUBLY_LINKED_LIST<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">];
</span><span class="line">   19 </span><span class="sym"></span>    size <span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">10000</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>    run_n <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span>    preamble <span class="kwa">is
</span><span class="line">   23 </span><span class="kwa">        do
</span><span class="line">   24 </span><span class="kwa">            create</span> exc<span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>            <span class="kwa">create</span> args
<span class="line">   26 </span>            <span class="kwa">if</span> args.argument_count <span class="sym">/=</span> <span class="num">1</span> <span class="kwa">then
</span><span class="line">   27 </span><span class="kwa"></span>                io.put_string<span class="sym">(</span><span class="str">&quot;exception_test &lt;integer&gt;%N&quot;</span><span class="sym">);
</span><span class="line">   28 </span><span class="sym"></span>                exc.die<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   29 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>            <span class="kwa">if</span> args.argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer <span class="kwa">then
</span><span class="line">   31 </span><span class="kwa"></span>                run_n <span class="sym">:=</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer<span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>            <span class="kwa">else
</span><span class="line">   33 </span><span class="kwa"></span>                io.put_string<span class="sym">(</span><span class="str">&quot;Argument wasn't an integer, giving up%N&quot;</span><span class="sym">);
</span><span class="line">   34 </span><span class="sym"></span>                exc.die<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   35 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">   37 </span><span class="kwa">
</span><span class="line">   38 </span><span class="kwa">
</span><span class="line">   39 </span><span class="kwa">
</span><span class="line">   40 </span><span class="kwa"></span>    make <span class="kwa">is
</span><span class="line">   41 </span><span class="kwa">        local
</span><span class="line">   42 </span><span class="kwa"></span>          i <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>          length <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>        <span class="kwa">do
</span><span class="line">   45 </span><span class="kwa"></span>            preamble<span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span>            <span class="kwa">from</span> i <span class="sym">:=</span> <span class="num">1
</span><span class="line">   47 </span><span class="num"></span>            until i <span class="sym">&gt;</span> run_n
<span class="line">   48 </span>            <span class="kwa">loop
</span><span class="line">   49 </span><span class="kwa"></span>                length <span class="sym">:=</span> run_it
<span class="line">   50 </span>                i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym">
</span><span class="line">   53 </span><span class="sym"></span>            <span class="slc">-- io.put_string (&quot;l1 length = &quot;);
</span><span class="line">   54 </span><span class="slc"></span>            io.put_integer <span class="sym">(</span>length<span class="sym">);
</span><span class="line">   55 </span><span class="sym"></span>            io.put_new_line<span class="sym">;
</span><span class="line">   56 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">   57 </span><span class="sym">
</span><span class="line">   58 </span><span class="sym"></span>    run_it <span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is
</span><span class="line">   59 </span><span class="kwa">        local
</span><span class="line">   60 </span><span class="kwa"></span>            length <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;
</span><span class="line">   61 </span><span class="sym"></span>        <span class="kwa">do
</span><span class="line">   62 </span><span class="kwa">            create</span> l1.make<span class="sym">;
</span><span class="line">   63 </span><span class="sym"></span>            fill_l1<span class="sym">;
</span><span class="line">   64 </span><span class="sym"></span>            <span class="slc">-- copy L1 to L2 (can use any builtin list copy function, if
</span><span class="line">   65 </span><span class="slc"></span>            <span class="slc">-- available)
</span><span class="line">   66 </span><span class="slc"></span>            l2 <span class="sym">:=</span> clone<span class="sym">(</span>l1<span class="sym">);
</span><span class="line">   67 </span><span class="sym"></span>            move_from_front_to_end<span class="sym">;
</span><span class="line">   68 </span><span class="sym">
</span><span class="line">   69 </span><span class="sym"></span>            l3 <span class="sym">:=</span> l1.clone <span class="sym">(</span>l1<span class="sym">);
</span><span class="line">   70 </span><span class="sym"></span>            move_from_end_to_end<span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span>            <span class="slc">-- reversing using the &quot;official interface of the
</span><span class="line">   72 </span><span class="slc"></span>            <span class="slc">-- SmallEiffel datastructures&quot;
</span><span class="line">   73 </span><span class="slc"></span>            <span class="slc">--reverse_in_place_naive (l1);
</span><span class="line">   74 </span><span class="slc"></span>            <span class="slc">-- hand crafted version see doubly_linked_list for details
</span><span class="line">   75 </span><span class="slc"></span>            l1.revert_in_place<span class="sym">;
</span><span class="line">   76 </span><span class="sym"></span>            <span class="slc">-- check that first item of L1 is now == SIZE.%
</span><span class="line">   77 </span><span class="slc"></span>            <span class="slc">-- in Eiffel we could write
</span><span class="line">   78 </span><span class="slc"></span>            <span class="slc">-- check l1.fist = size end;
</span><span class="line">   79 </span><span class="slc"></span>            <span class="slc">-- if that does not hold and exception is raised. Well
</span><span class="line">   80 </span><span class="slc"></span>            <span class="slc">-- just for the record ;-)
</span><span class="line">   81 </span><span class="slc"></span>            <span class="kwa">if</span> l1.first <span class="sym">=</span> size <span class="kwa">then
</span><span class="line">   82 </span><span class="kwa"></span>                <span class="slc">-- io.put_string(&quot;seems to work%N&quot;);
</span><span class="line">   83 </span><span class="slc"></span>            <span class="kwa">else
</span><span class="line">   84 </span><span class="kwa"></span>                io.put_string<span class="sym">(</span><span class="str">&quot;should not happen%N&quot;</span><span class="sym">);
</span><span class="line">   85 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">   86 </span><span class="sym"></span>            <span class="slc">-- compare L1 and L2 for equality and return length of L1
</span><span class="line">   87 </span><span class="slc"></span>            <span class="slc">-- which should be equal to SIZE
</span><span class="line">   88 </span><span class="slc"></span>            length <span class="sym">:=</span> compare_lists <span class="sym">(</span>l1<span class="sym">,</span> l2<span class="sym">);
</span><span class="line">   89 </span><span class="sym"></span>            <span class="kwa">Result</span> <span class="sym">:=</span> length<span class="sym">;
</span><span class="line">   90 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">   91 </span><span class="sym">
</span><span class="line">   92 </span><span class="sym"></span>    fill_l1 <span class="kwa">is
</span><span class="line">   93 </span><span class="kwa"></span>            <span class="slc">-- first create a list (L1) of integers from 1 through SIZE
</span><span class="line">   94 </span><span class="slc"></span>            <span class="slc">-- (SIZE is currently defined as 10000).
</span><span class="line">   95 </span><span class="slc"></span>        <span class="kwa">local
</span><span class="line">   96 </span><span class="kwa"></span>            i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;
</span><span class="line">   97 </span><span class="sym"></span>        <span class="kwa">do
</span><span class="line">   98 </span><span class="kwa">            from</span> i <span class="sym">:=</span> <span class="num">1
</span><span class="line">   99 </span><span class="num"></span>            until i <span class="sym">&gt;</span> size
<span class="line">  100 </span>            <span class="kwa">loop
</span><span class="line">  101 </span><span class="kwa"></span>                l1.add_last<span class="sym">(</span>i<span class="sym">);
</span><span class="line">  102 </span><span class="sym"></span>                i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  103 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">  104 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">  105 </span><span class="sym">
</span><span class="line">  106 </span><span class="sym"></span>    move_from_front_to_end <span class="kwa">is
</span><span class="line">  107 </span><span class="kwa"></span>            <span class="slc">-- remove each individual item from left side (head) of L2 and
</span><span class="line">  108 </span><span class="slc"></span>            <span class="slc">-- append to right side (tail) of L3 (preserving order). (L2 should
</span><span class="line">  109 </span><span class="slc"></span>            <span class="slc">-- be emptied by one item at a time as that item is appended
</span><span class="line">  110 </span><span class="slc"></span>            <span class="slc">-- to L3).
</span><span class="line">  111 </span><span class="slc"></span>            <span class="slc">-- REMARK: built-in functionality is used which is not
</span><span class="line">  112 </span><span class="slc"></span>            <span class="slc">-- optimized for speed, e.g the add_last method creates a
</span><span class="line">  113 </span><span class="slc"></span>            <span class="slc">-- new node each time, this could be optimized by
</span><span class="line">  114 </span><span class="slc"></span>            <span class="slc">-- handcrafted code (in fact the shootout encourages the
</span><span class="line">  115 </span><span class="slc"></span>            <span class="slc">-- &quot;implement yourself approach&quot;, which makes it biased
</span><span class="line">  116 </span><span class="slc"></span>            <span class="slc">-- towards hand-tailored implementations.
</span><span class="line">  117 </span><span class="slc"></span>        <span class="kwa">do
</span><span class="line">  118 </span><span class="kwa">            from</span> <span class="sym">!!</span>l3.make
<span class="line">  119 </span>            until l2.is_empty
<span class="line">  120 </span>            <span class="kwa">loop
</span><span class="line">  121 </span><span class="kwa"></span>                l3.add_last<span class="sym">(</span>l2.first<span class="sym">);
</span><span class="line">  122 </span><span class="sym"></span>                l2.remove_first<span class="sym">;
</span><span class="line">  123 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">  124 </span><span class="sym"></span>            <span class="kwa">check
</span><span class="line">  125 </span><span class="kwa"></span>                l3_adjusted<span class="sym">:</span> l3.first <span class="sym">=</span> <span class="num">1</span> <span class="kwa">and</span> l3.last <span class="sym">=</span> size<span class="sym">;
</span><span class="line">  126 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;</span> <span class="slc">-- check
</span><span class="line">  127 </span><span class="slc"></span>            <span class="kwa">debug
</span><span class="line">  128 </span><span class="kwa"></span>                io.put_string<span class="sym">(</span><span class="str">&quot;l3 is now %N&quot;</span><span class="sym">);
</span><span class="line">  129 </span><span class="sym"></span>                print <span class="sym">(</span>l3<span class="sym">);
</span><span class="line">  130 </span><span class="sym"></span>                io.newline<span class="sym">;
</span><span class="line">  131 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">  132 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">  133 </span><span class="kwa">
</span><span class="line">  134 </span><span class="kwa"></span>    move_from_end_to_end <span class="kwa">is
</span><span class="line">  135 </span><span class="kwa"></span>            <span class="slc">-- remove each individual item from right side (tail) of L3
</span><span class="line">  136 </span><span class="slc"></span>            <span class="slc">-- and append to right side (tail) of L2 (reversing list).
</span><span class="line">  137 </span><span class="slc"></span>            <span class="slc">-- (L3  should be emptied by one item at a time as that item
</span><span class="line">  138 </span><span class="slc"></span>            <span class="slc">--  is appended to L2).
</span><span class="line">  139 </span><span class="slc"></span>            <span class="slc">-- REMARKS: see move_from_font_to_end
</span><span class="line">  140 </span><span class="slc"></span>        <span class="kwa">do
</span><span class="line">  141 </span><span class="kwa">            from</span> <span class="sym">!!</span>l2.make
<span class="line">  142 </span>            until l3.is_empty
<span class="line">  143 </span>            <span class="kwa">loop
</span><span class="line">  144 </span><span class="kwa"></span>                l2.add_last<span class="sym">(</span>l3.last<span class="sym">);
</span><span class="line">  145 </span><span class="sym"></span>                l3.remove_last<span class="sym">;
</span><span class="line">  146 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">  147 </span><span class="sym"></span>            <span class="kwa">check
</span><span class="line">  148 </span><span class="kwa"></span>                l2_built_properly<span class="sym">:</span> l2.first <span class="sym">=</span> size <span class="kwa">and</span> l2.last <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  149 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">  150 </span><span class="sym"></span>            <span class="kwa">debug
</span><span class="line">  151 </span><span class="kwa"></span>                io.put_string <span class="sym">(</span><span class="str">&quot;l2 is now: %N&quot;</span><span class="sym">);
</span><span class="line">  152 </span><span class="sym"></span>                print <span class="sym">(</span>l2<span class="sym">);
</span><span class="line">  153 </span><span class="sym"></span>                io.put_new_line<span class="sym">;
</span><span class="line">  154 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">  155 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">  156 </span><span class="sym">
</span><span class="line">  157 </span><span class="sym">
</span><span class="line">  158 </span><span class="sym">
</span><span class="line">  159 </span><span class="sym">
</span><span class="line">  160 </span><span class="sym"></span>    reverse_in_place_naive <span class="sym">(</span>dlist<span class="sym">:</span> TWO_WAY_LINKED_LIST <span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">])</span> <span class="kwa">is
</span><span class="line">  161 </span><span class="kwa"></span>            <span class="slc">-- first try should make quite a difference in run-time
</span><span class="line">  162 </span><span class="slc"></span>            <span class="slc">-- reverse L1 (preferably in place) (can use any builtin
</span><span class="line">  163 </span><span class="slc"></span>            <span class="slc">-- function for this, if available.
</span><span class="line">  164 </span><span class="slc"></span>        <span class="kwa">local
</span><span class="line">  165 </span><span class="kwa"></span>            i <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;
</span><span class="line">  166 </span><span class="sym"></span>            done <span class="sym">:</span> <span class="kwb">BOOLEAN</span><span class="sym">;
</span><span class="line">  167 </span><span class="sym"></span>            <span class="slc">-- fl_clone : TWO_WAY_LINKED_LIST[INTEGER];
</span><span class="line">  168 </span><span class="slc"></span>        <span class="kwa">do
</span><span class="line">  169 </span><span class="kwa"></span>            <span class="slc">-- fl_clone := clone(first_link);
</span><span class="line">  170 </span><span class="slc"></span>            <span class="kwa">from</span> i <span class="sym">:=</span> <span class="num">1
</span><span class="line">  171 </span><span class="num"></span>            until
<span class="line">  172 </span>                i <span class="sym">&gt;</span> size
<span class="line">  173 </span>            <span class="kwa">loop
</span><span class="line">  174 </span><span class="kwa"></span>                dlist.add<span class="sym">(</span>dlist.last<span class="sym">,</span> i<span class="sym">);
</span><span class="line">  175 </span><span class="sym"></span>                <span class="slc">-- inefficient. the problem is that remove_lasts moves
</span><span class="line">  176 </span><span class="slc"></span>                <span class="slc">-- the cursoer and there for one has to run through
</span><span class="line">  177 </span><span class="slc"></span>                <span class="slc">-- the list over and over again. Well one can that
</span><span class="line">  178 </span><span class="slc"></span>                <span class="slc">-- just find out by reading the sources ...;-)
</span><span class="line">  179 </span><span class="slc"></span>
<span class="line">  180 </span>                dlist.remove_last<span class="sym">;
</span><span class="line">  181 </span><span class="sym"></span>                i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  182 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">  183 </span><span class="sym"></span>            <span class="kwa">if</span> dlist.first <span class="sym">=</span> size <span class="kwa">then
</span><span class="line">  184 </span><span class="kwa"></span>                io.put_string<span class="sym">(</span><span class="str">&quot;first element = size%N&quot;</span><span class="sym">);
</span><span class="line">  185 </span><span class="sym"></span>            <span class="kwa">else
</span><span class="line">  186 </span><span class="kwa"></span>                io.put_string<span class="sym">(</span><span class="str">&quot;first element != size %N&quot;</span><span class="sym">);
</span><span class="line">  187 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">  188 </span><span class="sym"></span>            <span class="kwa">debug
</span><span class="line">  189 </span><span class="kwa"></span>                io.put_string<span class="sym">(</span><span class="str">&quot;dlist is now %N&quot;</span><span class="sym">);
</span><span class="line">  190 </span><span class="sym"></span>                print <span class="sym">(</span>dlist<span class="sym">);
</span><span class="line">  191 </span><span class="sym"></span>                io.newline<span class="sym">;
</span><span class="line">  192 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">  193 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">  194 </span><span class="sym">
</span><span class="line">  195 </span><span class="sym"></span>    compare_lists <span class="sym">(</span>al1<span class="sym">,</span> al2 <span class="sym">:</span> DOUBLY_LINKED_LIST<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">]):</span> <span class="kwb">INTEGER</span> <span class="kwa">is
</span><span class="line">  196 </span><span class="kwa">        do
</span><span class="line">  197 </span><span class="kwa">            if</span> al1.is_equal<span class="sym">(</span>al2<span class="sym">)</span> <span class="kwa">then
</span><span class="line">  198 </span><span class="kwa"></span>                <span class="slc">-- io.put_string(&quot;lists are equal%N&quot;);
</span><span class="line">  199 </span><span class="slc"></span>            <span class="kwa">else
</span><span class="line">  200 </span><span class="kwa"></span>                io.put_string <span class="sym">(</span><span class="str">&quot;lists are not equal %N&quot;</span><span class="sym">);
</span><span class="line">  201 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">  202 </span><span class="sym"></span>            <span class="kwa">Result</span> <span class="sym">:=</span> al1.count<span class="sym">;
</span><span class="line">  203 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">  204 </span><span class="sym">
</span><span class="line">  205 </span><span class="sym">
</span><span class="line">  206 </span><span class="sym">
</span><span class="line">  207 </span><span class="sym">
</span><span class="line">  208 </span><span class="sym"></span><span class="kwa">end</span> <span class="slc">-- class LISTS</span>
