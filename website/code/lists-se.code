<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- -*- mode: eiffel -*-
</FONT></I><I><FONT COLOR="#B22222">-- $Id: lists-se.code,v 1.2 2004-11-08 08:15:15 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- from Friedrich Dominicus
</FONT></I>
<B><FONT COLOR="#A020F0">class</FONT></B> LISTS
   
   
<B><FONT COLOR="#A020F0">creation</FONT></B>
    make
    


<B><FONT COLOR="#A020F0">feature</FONT></B>

<B><FONT COLOR="#5F9EA0">    exc: </FONT></B><B><FONT COLOR="#228B22">EXCEPTIONS</FONT></B>;
<B><FONT COLOR="#5F9EA0">    args: </FONT></B><B><FONT COLOR="#228B22">ARGUMENTS</FONT></B>;
<B><FONT COLOR="#5F9EA0">    l1, l2, l3: </FONT></B>DOUBLY_LINKED_LIST[<B><FONT COLOR="#228B22">INTEGER</FONT></B>];
<B><FONT COLOR="#5F9EA0">    size : </FONT></B><B><FONT COLOR="#228B22">INTEGER</FONT></B> <B><FONT COLOR="#A020F0">is</FONT></B> 10000;
<B><FONT COLOR="#5F9EA0">    run_n : </FONT></B><B><FONT COLOR="#228B22">INTEGER</FONT></B>;

<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">    preamble</FONT></I></B></FONT></B> <B><FONT COLOR="#A020F0">is</FONT></B>
        <B><FONT COLOR="#A020F0">do</FONT></B>
            <B><FONT COLOR="#A020F0">create</FONT></B> exc;
            <B><FONT COLOR="#A020F0">create</FONT></B> args
            <B><FONT COLOR="#A020F0">if</FONT></B> args.argument_count <B><FONT COLOR="#5F9EA0">/=</FONT></B> 1 <B><FONT COLOR="#A020F0">then</FONT></B>
                io.put_string(<B><FONT COLOR="#BC8F8F">&quot;exception_test &lt;integer&gt;%N&quot;</FONT></B>);
                exc.die(1);
            <B><FONT COLOR="#A020F0">end</FONT></B>;
            <B><FONT COLOR="#A020F0">if</FONT></B> args.argument(1).is_integer <B><FONT COLOR="#A020F0">then</FONT></B>
                run_n <B><FONT COLOR="#5F9EA0">:=</FONT></B> argument(1).to_integer;
            <B><FONT COLOR="#A020F0">else</FONT></B>
                io.put_string(<B><FONT COLOR="#BC8F8F">&quot;Argument wasn't an integer, giving up%N&quot;</FONT></B>);
                exc.die(1);
            <B><FONT COLOR="#A020F0">end</FONT></B>;
        <B><FONT COLOR="#A020F0">end</FONT></B>

    

<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">    make</FONT></I></B></FONT></B> <B><FONT COLOR="#A020F0">is</FONT></B>
        <B><FONT COLOR="#A020F0">local</FONT></B>
<B><FONT COLOR="#5F9EA0">          i : </FONT></B><B><FONT COLOR="#228B22">INTEGER</FONT></B>;
<B><FONT COLOR="#5F9EA0">	  length : </FONT></B><B><FONT COLOR="#228B22">INTEGER</FONT></B>;
        <B><FONT COLOR="#A020F0">do</FONT></B>
            preamble;
            <B><FONT COLOR="#A020F0">from</FONT></B> i <B><FONT COLOR="#5F9EA0">:=</FONT></B> 1
            <B><FONT COLOR="#A020F0">until</FONT></B> i &gt; run_n
            <B><FONT COLOR="#A020F0">loop</FONT></B>
                length <B><FONT COLOR="#5F9EA0">:=</FONT></B> run_it
                i <B><FONT COLOR="#5F9EA0">:=</FONT></B> i + 1;
            <B><FONT COLOR="#A020F0">end</FONT></B>;
            
            <I><FONT COLOR="#B22222">-- io.put_string (&quot;l1 length = &quot;);
</FONT></I>            io.put_integer (length);
            io.put_new_line;
        <B><FONT COLOR="#A020F0">end</FONT></B>;

<B><FONT COLOR="#5F9EA0">    run_it : </FONT></B><B><FONT COLOR="#228B22">INTEGER</FONT></B> <B><FONT COLOR="#A020F0">is</FONT></B>
        <B><FONT COLOR="#A020F0">local</FONT></B>
<B><FONT COLOR="#5F9EA0">            length : </FONT></B><B><FONT COLOR="#228B22">INTEGER</FONT></B>;
        <B><FONT COLOR="#A020F0">do</FONT></B>
            <B><FONT COLOR="#A020F0">create</FONT></B> l1.make;
            fill_l1;
            <I><FONT COLOR="#B22222">-- copy L1 to L2 (can use any builtin list copy function, if 
</FONT></I>            <I><FONT COLOR="#B22222">-- available) 
</FONT></I>            l2 <B><FONT COLOR="#5F9EA0">:=</FONT></B> clone(l1);
            move_from_front_to_end;
            
            l3 <B><FONT COLOR="#5F9EA0">:=</FONT></B> l1.clone (l1);
            move_from_end_to_end;
            <I><FONT COLOR="#B22222">-- reversing using the &quot;official interface of the 
</FONT></I>            <I><FONT COLOR="#B22222">-- SmallEiffel datastructures&quot;
</FONT></I>            <I><FONT COLOR="#B22222">--reverse_in_place_naive (l1);
</FONT></I>            <I><FONT COLOR="#B22222">-- hand crafted version see doubly_linked_list for details
</FONT></I>            l1.revert_in_place;
            <I><FONT COLOR="#B22222">-- check that first item of L1 is now == SIZE.%
</FONT></I>            <I><FONT COLOR="#B22222">-- in Eiffel we could write
</FONT></I>            <I><FONT COLOR="#B22222">-- check l1.fist = size end;
</FONT></I>            <I><FONT COLOR="#B22222">-- if that does not hold and exception is raised. Well 
</FONT></I>            <I><FONT COLOR="#B22222">-- just for the record ;-)
</FONT></I>            <B><FONT COLOR="#A020F0">if</FONT></B> l1.first <B><FONT COLOR="#5F9EA0">=</FONT></B> size <B><FONT COLOR="#A020F0">then</FONT></B>
                <I><FONT COLOR="#B22222">-- io.put_string(&quot;seems to work%N&quot;);
</FONT></I>            <B><FONT COLOR="#A020F0">else</FONT></B>
                io.put_string(<B><FONT COLOR="#BC8F8F">&quot;should not happen%N&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">end</FONT></B>;
            <I><FONT COLOR="#B22222">-- compare L1 and L2 for equality and return length of L1 
</FONT></I>            <I><FONT COLOR="#B22222">-- which should be equal to SIZE
</FONT></I>            length <B><FONT COLOR="#5F9EA0">:=</FONT></B> compare_lists (l1, l2);
            <B><FONT COLOR="#A020F0">Result</FONT></B> <B><FONT COLOR="#5F9EA0">:=</FONT></B> length;
        <B><FONT COLOR="#A020F0">end</FONT></B>;

<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">    fill_l1</FONT></I></B></FONT></B> <B><FONT COLOR="#A020F0">is</FONT></B>
            <I><FONT COLOR="#B22222">-- first create a list (L1) of integers from 1 through SIZE
</FONT></I>            <I><FONT COLOR="#B22222">-- (SIZE is currently defined as 10000).
</FONT></I>        <B><FONT COLOR="#A020F0">local</FONT></B>
<B><FONT COLOR="#5F9EA0">            i: </FONT></B><B><FONT COLOR="#228B22">INTEGER</FONT></B>;
        <B><FONT COLOR="#A020F0">do</FONT></B>
            <B><FONT COLOR="#A020F0">from</FONT></B> i <B><FONT COLOR="#5F9EA0">:=</FONT></B> 1
            <B><FONT COLOR="#A020F0">until</FONT></B> i &gt; size
            <B><FONT COLOR="#A020F0">loop</FONT></B>
                l1.add_last(i);
                i <B><FONT COLOR="#5F9EA0">:=</FONT></B> i + 1;
            <B><FONT COLOR="#A020F0">end</FONT></B>;
        <B><FONT COLOR="#A020F0">end</FONT></B>;

<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">    move_from_front_to_end</FONT></I></B></FONT></B> <B><FONT COLOR="#A020F0">is</FONT></B>
            <I><FONT COLOR="#B22222">-- remove each individual item from left side (head) of L2 and 
</FONT></I>            <I><FONT COLOR="#B22222">-- append to right side (tail) of L3 (preserving order). (L2 should 
</FONT></I>            <I><FONT COLOR="#B22222">-- be emptied by one item at a time as that item is appended 
</FONT></I>            <I><FONT COLOR="#B22222">-- to L3).
</FONT></I>            <I><FONT COLOR="#B22222">-- REMARK: built-in functionality is used which is not 
</FONT></I>            <I><FONT COLOR="#B22222">-- optimized for speed, e.g the add_last method creates a 
</FONT></I>            <I><FONT COLOR="#B22222">-- new node each time, this could be optimized by 
</FONT></I>            <I><FONT COLOR="#B22222">-- handcrafted code (in fact the shootout encourages the 
</FONT></I>            <I><FONT COLOR="#B22222">-- &quot;implement yourself approach&quot;, which makes it biased 
</FONT></I>            <I><FONT COLOR="#B22222">-- towards hand-tailored implementations.
</FONT></I>        <B><FONT COLOR="#A020F0">do</FONT></B>
            <B><FONT COLOR="#A020F0">from</FONT></B> <B><FONT COLOR="#5F9EA0">!!</FONT></B>l3.make
            <B><FONT COLOR="#A020F0">until</FONT></B> l2.is_empty
            <B><FONT COLOR="#A020F0">loop</FONT></B>
                l3.add_last(l2.first);
                l2.remove_first;
            <B><FONT COLOR="#A020F0">end</FONT></B>;
            <B><FONT COLOR="#A020F0">check</FONT></B>
<B><FONT COLOR="#5F9EA0">                l3_adjusted: </FONT></B>l3.first <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 <B><FONT COLOR="#A020F0">and</FONT></B> l3.last <B><FONT COLOR="#5F9EA0">=</FONT></B> size;
            <B><FONT COLOR="#A020F0">end</FONT></B>; <I><FONT COLOR="#B22222">-- check
</FONT></I>            <B><FONT COLOR="#A020F0">debug</FONT></B>
                io.put_string(<B><FONT COLOR="#BC8F8F">&quot;l3 is now %N&quot;</FONT></B>);
                print (l3);
                io.newline;
            <B><FONT COLOR="#A020F0">end</FONT></B>;
        <B><FONT COLOR="#A020F0">end</FONT></B>
            
<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">    move_from_end_to_end</FONT></I></B></FONT></B> <B><FONT COLOR="#A020F0">is</FONT></B>
            <I><FONT COLOR="#B22222">-- remove each individual item from right side (tail) of L3 
</FONT></I>            <I><FONT COLOR="#B22222">-- and append to right side (tail) of L2 (reversing list). 
</FONT></I>            <I><FONT COLOR="#B22222">-- (L3  should be emptied by one item at a time as that item 
</FONT></I>            <I><FONT COLOR="#B22222">--  is appended to L2).
</FONT></I>            <I><FONT COLOR="#B22222">-- REMARKS: see move_from_font_to_end
</FONT></I>        <B><FONT COLOR="#A020F0">do</FONT></B>
            <B><FONT COLOR="#A020F0">from</FONT></B> <B><FONT COLOR="#5F9EA0">!!</FONT></B>l2.make
            <B><FONT COLOR="#A020F0">until</FONT></B> l3.is_empty
            <B><FONT COLOR="#A020F0">loop</FONT></B>
                l2.add_last(l3.last);
                l3.remove_last;
            <B><FONT COLOR="#A020F0">end</FONT></B>;
            <B><FONT COLOR="#A020F0">check</FONT></B>
<B><FONT COLOR="#5F9EA0">                l2_built_properly: </FONT></B>l2.first <B><FONT COLOR="#5F9EA0">=</FONT></B> size <B><FONT COLOR="#A020F0">and</FONT></B> l2.last <B><FONT COLOR="#5F9EA0">=</FONT></B> 1;
            <B><FONT COLOR="#A020F0">end</FONT></B>;
            <B><FONT COLOR="#A020F0">debug</FONT></B>
                io.put_string (<B><FONT COLOR="#BC8F8F">&quot;l2 is now: %N&quot;</FONT></B>);
                print (l2);
                io.put_new_line;
            <B><FONT COLOR="#A020F0">end</FONT></B>;
        <B><FONT COLOR="#A020F0">end</FONT></B>;


    
    
<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">    reverse_in_place_naive </FONT></I></B></FONT></B>(dlist<B><FONT COLOR="#228B22">: TWO_WAY_LINKED_LIST [INTEGER]</FONT></B>)<B><FONT COLOR="#228B22"></FONT></B><B><FONT COLOR="#A020F0"> is</FONT></B>
            <I><FONT COLOR="#B22222">-- first try should make quite a difference in run-time
</FONT></I>            <I><FONT COLOR="#B22222">-- reverse L1 (preferably in place) (can use any builtin 
</FONT></I>            <I><FONT COLOR="#B22222">-- function for this, if available.
</FONT></I>        <B><FONT COLOR="#A020F0">local</FONT></B>
<B><FONT COLOR="#5F9EA0">            i : </FONT></B><B><FONT COLOR="#228B22">INTEGER</FONT></B>;
<B><FONT COLOR="#5F9EA0">            done : </FONT></B><B><FONT COLOR="#228B22">BOOLEAN</FONT></B>;
            <I><FONT COLOR="#B22222">-- fl_clone : TWO_WAY_LINKED_LIST[INTEGER];
</FONT></I>        <B><FONT COLOR="#A020F0">do</FONT></B>
            <I><FONT COLOR="#B22222">-- fl_clone := clone(first_link);
</FONT></I>            <B><FONT COLOR="#A020F0">from</FONT></B> i <B><FONT COLOR="#5F9EA0">:=</FONT></B> 1
            <B><FONT COLOR="#A020F0">until</FONT></B>
                i &gt; size
            <B><FONT COLOR="#A020F0">loop</FONT></B>
                dlist.add(dlist.last, i);
                <I><FONT COLOR="#B22222">-- inefficient. the problem is that remove_lasts moves
</FONT></I>                <I><FONT COLOR="#B22222">-- the cursoer and there for one has to run through 
</FONT></I>                <I><FONT COLOR="#B22222">-- the list over and over again. Well one can that 
</FONT></I>                <I><FONT COLOR="#B22222">-- just find out by reading the sources ...;-)
</FONT></I>                
                dlist.remove_last;
                i <B><FONT COLOR="#5F9EA0">:=</FONT></B> i + 1;
            <B><FONT COLOR="#A020F0">end</FONT></B>;
            <B><FONT COLOR="#A020F0">if</FONT></B> dlist.first <B><FONT COLOR="#5F9EA0">=</FONT></B> size <B><FONT COLOR="#A020F0">then</FONT></B>
                io.put_string(<B><FONT COLOR="#BC8F8F">&quot;first element = size%N&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">else</FONT></B>
                io.put_string(<B><FONT COLOR="#BC8F8F">&quot;first element != size %N&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">end</FONT></B>;
            <B><FONT COLOR="#A020F0">debug</FONT></B>
                io.put_string(<B><FONT COLOR="#BC8F8F">&quot;dlist is now %N&quot;</FONT></B>);
                print (dlist);
                io.newline;
            <B><FONT COLOR="#A020F0">end</FONT></B>;
        <B><FONT COLOR="#A020F0">end</FONT></B>;
    
<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">    compare_lists </FONT></I></B></FONT></B>(al1, al2 <B><FONT COLOR="#228B22">: DOUBLY_LINKED_LIST[INTEGER]</FONT></B>)<B><FONT COLOR="#228B22">: INTEGER</FONT></B><B><FONT COLOR="#A020F0"> is</FONT></B>
        <B><FONT COLOR="#A020F0">do</FONT></B>
            <B><FONT COLOR="#A020F0">if</FONT></B> al1.is_equal(al2) <B><FONT COLOR="#A020F0">then</FONT></B>
                <I><FONT COLOR="#B22222">-- io.put_string(&quot;lists are equal%N&quot;);
</FONT></I>            <B><FONT COLOR="#A020F0">else</FONT></B>
                io.put_string (<B><FONT COLOR="#BC8F8F">&quot;lists are not equal %N&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">end</FONT></B>;
            <B><FONT COLOR="#A020F0">Result</FONT></B> <B><FONT COLOR="#5F9EA0">:=</FONT></B> al1.count;
        <B><FONT COLOR="#A020F0">end</FONT></B>;
           
       

    
<B><FONT COLOR="#A020F0">end</FONT></B> <I><FONT COLOR="#B22222">-- class LISTS
</FONT></I></pre></td></tr></table>
