<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release wordfreq.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stream<span class="sym">,</span> std<span class="sym">.</span>stdio<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwa">const char</span><span class="sym">[</span><span class="num">4096</span><span class="sym">]</span>    buffer<span class="sym">;</span>
    <span class="kwa">int</span><span class="sym">[</span><span class="kwa">char</span><span class="sym">[]]</span>         words<span class="sym">;</span>
    <span class="kwa">char</span><span class="sym">[]</span>              word <span class="sym">=</span> <span class="kwa">new char</span><span class="sym">[</span><span class="num">16</span><span class="sym">];</span>
    <span class="kwa">int</span>                 nread<span class="sym">,</span> chrpos<span class="sym">;</span>

    <span class="kwa">while</span><span class="sym">((</span>nread <span class="sym">=</span> std<span class="sym">.</span>stream<span class="sym">.</span>stdin<span class="sym">.</span><span class="kwd">readBlock</span><span class="sym">(</span>buffer<span class="sym">,</span> buffer<span class="sym">.</span>length<span class="sym">)) &gt;</span> <span class="num">0</span><span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> idx <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> idx <span class="sym">&lt;</span> nread<span class="sym">;</span> idx<span class="sym">++)</span>
        <span class="sym">{</span>
            <span class="kwa">char</span> chr <span class="sym">=</span> buffer<span class="sym">[</span>idx<span class="sym">];</span>
            <span class="kwa">if</span><span class="sym">((</span>chr <span class="sym">&gt;=</span> <span class="str">'a'</span> <span class="sym">&amp;&amp;</span> chr <span class="sym">&lt;=</span> <span class="str">'z'</span><span class="sym">) || (</span>chr <span class="sym">&gt;=</span> <span class="str">'A'</span> <span class="sym">&amp;&amp;</span> chr <span class="sym">&lt;=</span> <span class="str">'Z'</span><span class="sym">))</span>
            <span class="sym">{</span>
                <span class="kwa">if</span><span class="sym">(</span>word<span class="sym">.</span>length <span class="sym">&lt;=</span> chrpos<span class="sym">)</span> word<span class="sym">.</span>length <span class="sym">=</span> chrpos <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span>
                word<span class="sym">[</span>chrpos<span class="sym">++] =</span> chr <span class="sym">&lt;</span> <span class="str">'a'</span> ? chr <span class="sym">+ (</span><span class="str">'a'</span> <span class="sym">-</span> <span class="str">'A'</span><span class="sym">) :</span> chr<span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">else if</span><span class="sym">(</span>chrpos<span class="sym">)</span>
            <span class="sym">{</span>
                <span class="kwa">int</span><span class="sym">*</span> pVal <span class="sym">= (</span>word<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>chrpos<span class="sym">]</span> <span class="kwa">in</span> words<span class="sym">);</span>
                <span class="kwa">if</span><span class="sym">(</span>pVal<span class="sym">) (*</span>pVal<span class="sym">)++;</span>
                <span class="kwa">else</span> words<span class="sym">[</span>word<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>chrpos<span class="sym">].</span>dup<span class="sym">] =</span> <span class="num">1</span><span class="sym">;</span>
                chrpos <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">int</span><span class="sym">[</span><span class="kwa">char</span><span class="sym">[]]</span> data<span class="sym">;</span>
    <span class="kwa">char</span><span class="sym">[]</span> <span class="kwc">str</span> <span class="sym">=</span> <span class="kwa">new char</span><span class="sym">[</span>word<span class="sym">.</span>length <span class="sym">+</span> <span class="num">16</span><span class="sym">];</span>
    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> word<span class="sym">,</span> <span class="kwa">int</span> val<span class="sym">;</span> words<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">int</span> len <span class="sym">=</span> <span class="kwd">sprintf</span><span class="sym">(</span><span class="kwc">str</span><span class="sym">,</span><span class="str">&quot;%7d %.*s&quot;</span><span class="sym">,</span> val<span class="sym">,</span> word<span class="sym">);</span>
        data<span class="sym">[</span><span class="kwc">str</span><span class="sym">[</span><span class="num">0</span><span class="sym">..</span>len<span class="sym">].</span>dup<span class="sym">] =</span> val<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">char</span><span class="sym">[][]</span> keys <span class="sym">=</span> data<span class="sym">.</span>keys<span class="sym">;</span>
    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> key<span class="sym">;</span> keys<span class="sym">.</span>sort<span class="sym">.</span>reverse<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">writefln</span><span class="sym">(</span>key<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
