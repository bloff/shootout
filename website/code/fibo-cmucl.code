<span class="line">    1 </span><span class="slc">;;; -*- mode: lisp -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: fibo-cmucl.code,v 1.3 2004-11-13 08:28:17 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">;;; from Bulent Murtezaogl
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">;;; Multi-lisp modifications by Brent Fulgham
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">))
</span><span class="line">    8 </span><span class="sym">         (</span>ftype <span class="sym">(</span>function <span class="sym">(</span>fixnum<span class="sym">)</span> fixnum<span class="sym">)</span> fib<span class="sym">))
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym">(</span><span class="kwa">defun</span> fib <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   11 </span><span class="sym">  (</span>declare <span class="sym">(</span>values fixnum<span class="sym">))
</span><span class="line">   12 </span><span class="sym">  (</span><span class="kwa">if</span> <span class="sym">(&lt;</span> n <span class="num">2</span><span class="sym">)</span> <span class="num">1</span> <span class="sym">(+ (</span>fib <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)) (</span>fib <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)))))
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()
</span><span class="line">   15 </span><span class="sym">  (</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span><span class="line">   16 </span><span class="sym"></span>                                         #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">))))
</span><span class="line">   17 </span><span class="sym">    (</span>format t <span class="str">&quot;~d~%&quot;</span> <span class="sym">(</span>fib n<span class="sym">))))</span>
