<span class="com">(* reversefile.sml
 *
 *   Output lines in reverse order.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume&#64;tti-c.org)
 *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct

    structure</span> AS <span class="sym">=</span> Word8ArraySlice
    <span class="kwa">structure</span> IO <span class="sym">=</span> Posix.IO

    <span class="kwa">fun</span> x <span class="sym">+</span> y <span class="sym">=</span> <span class="kwa">Word</span>.toIntX <span class="sym">(</span><span class="kwa">Word</span>.<span class="sym">+ (</span><span class="kwa">Word</span>.fromInt x<span class="sym">,</span> <span class="kwa">Word</span>.fromInt y<span class="sym">))
</span>    <span class="kwa">fun</span> x <span class="sym">-</span> y <span class="sym">=</span> <span class="kwa">Word</span>.toIntX <span class="sym">(</span><span class="kwa">Word</span>.<span class="sym">- (</span><span class="kwa">Word</span>.fromInt x<span class="sym">,</span> <span class="kwa">Word</span>.fromInt y<span class="sym">))

</span>    <span class="kwa">val</span> sz <span class="sym">=</span> <span class="num">4096

</span>    <span class="kwa">fun</span> newarr <span class="sym">() =</span> Unsafe.Word8Array.create sz
    <span class="kwa">val</span> sub <span class="sym">=</span> Byte.byteToChar <span class="kwa">o</span> Unsafe.Word8Array.sub

    <span class="kwa">val</span> <span class="sym">(</span>buf<span class="sym">,</span> top<span class="sym">) = (</span>newarr <span class="sym">(),</span> ref <span class="num">0</span><span class="sym">)
</span>    <span class="kwa">fun</span> write <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> len<span class="sym">) =
</span>	ignore <span class="sym">(</span>IO.writeArr <span class="sym">(</span>Posix.FileSys.stdout<span class="sym">,</span> AS.slice <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> SOME len<span class="sym">)))
</span>    <span class="kwa">fun</span> out <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> len<span class="sym">) =
</span>	<span class="kwa">let val</span> cur <span class="sym">= !</span>top
	    <span class="kwa">val</span> new <span class="sym">=</span> cur <span class="sym">+</span> len
	<span class="kwa">in if</span> new <span class="sym">&gt;</span> sz <span class="kwa">then</span> <span class="sym">(</span>write <span class="sym">(</span>buf<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> cur<span class="sym">);
</span>			     AS.copy <span class="sym">{</span> dst <span class="sym">=</span> buf<span class="sym">,</span> di <span class="sym">=</span> <span class="num">0</span><span class="sym">,
</span>				       src <span class="sym">=</span> AS.slice <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> SOME len<span class="sym">) };
</span>			     top <span class="sym">:=</span> len<span class="sym">)
</span>	   <span class="kwa">else</span> <span class="sym">(</span>AS.copy <span class="sym">{</span> dst <span class="sym">=</span> buf<span class="sym">,</span> di <span class="sym">=</span> cur<span class="sym">,
</span>			   src <span class="sym">=</span> AS.slice <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> SOME len<span class="sym">) };
</span>		 <span class="kwa">if</span> new <span class="sym">=</span> sz <span class="kwa">then</span> <span class="sym">(</span>write <span class="sym">(</span>buf<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> sz<span class="sym">);</span> top <span class="sym">:=</span> <span class="num">0</span><span class="sym">)
</span>		 <span class="kwa">else</span> top <span class="sym">:=</span> new<span class="sym">)
</span>	<span class="kwa">end
    fun</span> flush <span class="sym">() =</span> <span class="kwa">case</span> <span class="sym">!</span>top <span class="kwa">of</span> <span class="num">0</span> <span class="sym">=&gt; () |</span> c <span class="sym">=&gt;</span> write <span class="sym">(</span>buf<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> c<span class="sym">)

</span>    <span class="kwa">fun</span> gobble <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> stack<span class="sym">) =
</span>	<span class="kwa">if</span> i <span class="sym">&lt;</span> sz <span class="kwa">then
	    let val</span> n <span class="sym">=</span> IO.readArr <span class="sym">(</span>Posix.FileSys.stdin<span class="sym">,</span> AS.slice <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> NONE<span class="sym">))
</span>	    <span class="kwa">in if</span> n <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> stack<span class="sym">)</span> <span class="kwa">else</span> gobble <span class="sym">(</span>a<span class="sym">,</span> i <span class="sym">+</span> n<span class="sym">,</span> stack<span class="sym">)
</span>	    <span class="kwa">end
	else</span> gobble <span class="sym">(</span>newarr <span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> a <span class="sym">::</span> stack<span class="sym">)

</span>    <span class="kwa">fun</span> dopend <span class="sym">(</span>l<span class="sym">, (</span>p<span class="sym">,</span> pi<span class="sym">)) = (</span>app <span class="sym">(</span><span class="kwa">fn</span> a <span class="sym">=&gt;</span> out <span class="sym">(</span>a<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> sz<span class="sym">))</span> l<span class="sym">;</span> out <span class="sym">(</span>p<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> pi<span class="sym">))

</span>    <span class="kwa">fun</span> nostraddle <span class="sym">(</span>_<span class="sym">,</span> <span class="num">0</span><span class="sym">, []) = ()
      |</span> nostraddle <span class="sym">(</span>_<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> a <span class="sym">::</span> more<span class="sym">) =</span> nostraddle <span class="sym">(</span>a<span class="sym">,</span> sz<span class="sym">,</span> more<span class="sym">)
      |</span> nostraddle <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> stack<span class="sym">) =
</span>	<span class="kwa">let fun</span> look j <span class="sym">=
</span>		<span class="kwa">let val</span> j' <span class="sym">=</span> j <span class="num">- 1
</span>		<span class="kwa">in if</span> j' <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">then
		       case</span> stack <span class="kwa">of</span> b <span class="sym">::</span> bs <span class="sym">=&gt;</span> straddle <span class="sym">(</span>b<span class="sym">,</span> bs<span class="sym">, [], (</span>a<span class="sym">,</span> i<span class="sym">))
				   | [] =&gt;</span> out <span class="sym">(</span>a<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> i<span class="sym">)
</span>		   <span class="kwa">else if</span> sub <span class="sym">(</span>a<span class="sym">,</span> j'<span class="sym">) =</span> #<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwa">then
</span>		       <span class="sym">(</span>out <span class="sym">(</span>a<span class="sym">,</span> j<span class="sym">,</span> i <span class="sym">-</span> j<span class="sym">);</span> nostraddle <span class="sym">(</span>a<span class="sym">,</span> j<span class="sym">,</span> stack<span class="sym">))
</span>		   <span class="kwa">else</span> look j'
		<span class="kwa">end
	in</span> look <span class="sym">(</span>i <span class="num">- 1</span><span class="sym">)
</span>	<span class="kwa">end

    and</span> straddle <span class="sym">(</span>a<span class="sym">,</span> stack<span class="sym">,</span> pl<span class="sym">,</span> last<span class="sym">) =
</span>	<span class="kwa">let fun</span> look j <span class="sym">=
</span>		<span class="kwa">let val</span> j' <span class="sym">=</span> j <span class="num">- 1
</span>		<span class="kwa">in if</span> j' <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">then
		       case</span> stack <span class="kwa">of</span> b <span class="sym">::</span> bs <span class="sym">=&gt;</span> straddle <span class="sym">(</span>b<span class="sym">,</span> bs<span class="sym">,</span> a <span class="sym">::</span> pl<span class="sym">,</span> last<span class="sym">)
				   | [] =&gt;</span> dopend <span class="sym">(</span>a <span class="sym">::</span> pl<span class="sym">,</span> last<span class="sym">)
</span>		   <span class="kwa">else if</span> sub <span class="sym">(</span>a<span class="sym">,</span> j'<span class="sym">) =</span> #<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwa">then</span> <span class="sym">(</span>out <span class="sym">(</span>a<span class="sym">,</span> j<span class="sym">,</span> sz <span class="sym">-</span> j<span class="sym">);
</span>						     dopend <span class="sym">(</span>pl<span class="sym">,</span> last<span class="sym">);
</span>						     nostraddle <span class="sym">(</span>a<span class="sym">,</span> j<span class="sym">,</span> stack<span class="sym">))
</span>		   <span class="kwa">else</span> look j'
		<span class="kwa">end
	in</span> look sz
	<span class="kwa">end

    fun</span> main _ <span class="sym">=
	(</span>nostraddle <span class="sym">(</span>gobble <span class="sym">(</span>newarr <span class="sym">(),</span> <span class="num">0</span><span class="sym">, []));</span> flush <span class="sym">();</span> OS.Process.success<span class="sym">)
</span><span class="kwa">end</span>
