<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Another GMP-based implementation. This one, however, is considerably</span>
<span class="slc">;; faster than the previous submission:</span>
<span class="slc">;;</span>
<span class="slc">;; * Attempt to create a general-purpose, high-level interface to GMP</span>
<span class="slc">;;   was scrapped, thus removing most of the interface overhead, and</span>
<span class="slc">;;   making for a much simplified design. Note some of the routines</span>
<span class="slc">;;   comprising this interface have been retained, in modified form,</span>
<span class="slc">;;   as helper routines</span>
<span class="slc">;;</span>
<span class="slc">;; * Implemented as a closure [i.e. similar to an OOP-style object but</span>
<span class="slc">;;   without the overhead]. This approach eliminated need to create/use/</span>
<span class="slc">;;   free many GMP objects. Instead, a small number of GMP objects were</span>
<span class="slc">;;   encapsulated within the closure, and reused as necessary [note:</span>
<span class="slc">;;   presently these are hardcoded (to keep design simple); a larger</span>
<span class="slc">;;   application would use some sort of object pooling strategy]</span>
<span class="slc">;;</span>
<span class="slc">;; * A possible [future] improvement would be to avoid use of strings</span>
<span class="slc">;;   [via 'mpz_set_str'] to initialise/update GMP objects, instead</span>
<span class="slc">;;   converting fixnums to C-types and using those values directly. This</span>
<span class="slc">;;   is, obviously, only possible only for 'smaller', hardware-mappable</span>
<span class="slc">;;   numeric values</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>require<span class="sym">-</span>extension gmp<span class="sym">)</span>

<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span><span class="kwa">lambda</span><span class="sym">-</span>lift<span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object #<span class="sym">!</span>optional <span class="sym">(</span>value<span class="sym">-</span>as<span class="sym">-</span>string <span class="str">&quot;0&quot;</span><span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>mpz<span class="sym">-</span>object <span class="sym">(</span>make<span class="sym">-</span>mpz_t<span class="sym">)))</span>
    <span class="sym">(</span>mpz_init_set_str mpz<span class="sym">-</span>object value<span class="sym">-</span>as<span class="sym">-</span>string <span class="num">10</span><span class="sym">)</span>
    mpz<span class="sym">-</span>object<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>free<span class="sym">-</span>mpz<span class="sym">-</span>object mpz<span class="sym">-</span>object<span class="sym">)</span>
  <span class="sym">(</span>mpz_clear mpz<span class="sym">-</span>object<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>mpz<span class="sym">-</span>vector #<span class="sym">!</span>rest <span class="kwa">list</span><span class="sym">-</span>of<span class="sym">-</span>string<span class="sym">-</span>values<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>object <span class="sym">(</span>make<span class="sym">-</span>vector <span class="sym">(</span><span class="kwa">length list</span><span class="sym">-</span>of<span class="sym">-</span>string<span class="sym">-</span>values<span class="sym">))))</span>
    <span class="sym">(</span>let loop <span class="sym">((</span>lovas <span class="kwa">list</span><span class="sym">-</span>of<span class="sym">-</span>string<span class="sym">-</span>values<span class="sym">) (</span>i <span class="num">0</span><span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? lovas<span class="sym">)</span> mpz<span class="sym">-</span>vector<span class="sym">-</span>object
      <span class="slc">; else</span>
      <span class="sym">(</span>begin
        <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> mpz<span class="sym">-</span>vector<span class="sym">-</span>object i <span class="sym">(</span>make<span class="sym">-</span>mpz<span class="sym">-</span>object <span class="sym">(</span><span class="kwa">car</span> lovas<span class="sym">)))</span>
        <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">cdr</span> lovas<span class="sym">) (</span>add1 i<span class="sym">)) ))) ))</span>

<span class="sym">(</span>define <span class="sym">(</span>mpz<span class="sym">-</span>vector<span class="sym">-</span>update<span class="sym">!</span> mpz<span class="sym">-</span>vector<span class="sym">-</span>target #<span class="sym">!</span>rest <span class="kwa">list</span><span class="sym">-</span>of<span class="sym">-</span>string<span class="sym">-</span>values<span class="sym">)</span>
  <span class="sym">(</span>let loop <span class="sym">((</span>lovas <span class="kwa">list</span><span class="sym">-</span>of<span class="sym">-</span>string<span class="sym">-</span>values<span class="sym">) (</span>i <span class="num">0</span><span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? lovas<span class="sym">)</span> <span class="str">'()</span>
<span class="str">    ; else</span>
<span class="str">    (begin</span>
<span class="str">      (mpz_set_str (vector-ref mpz-vector-target i) (car lovas) 10)</span>
<span class="str">      (loop (cdr lovas) (add1 i)) ))) )</span>
<span class="str"></span>
<span class="str">(define (mpz-vector-copy! mpz-vector-target mpz-vector-source)</span>
<span class="str">  (let ((mpz-vector-source-length (vector-length mpz-vector-source)))</span>
<span class="str">    (do ((i 0 (add1 i)))</span>
<span class="str">        ((= mpz-vector-source-length i))</span>
<span class="str">      (mpz_set (vector-ref mpz-vector-target i) (vector-ref mpz-vector-source i) )) ))</span>
<span class="str"></span>
<span class="str">(define (make-mpz-vector size #!optional (initial-value-as-string &quot;0&quot;))</span>
<span class="str">  (let ((mpz-vector-object (make-vector size)))</span>
<span class="str">    (do ((i 0 (add1 i)))</span>
<span class="str">        ((= size i))</span>
<span class="str">      (vector-set! mpz-vector-object i (make-mpz-object initial-value-as-string)))</span>
<span class="str">  mpz-vector-object))</span>
<span class="str"></span>
<span class="str">(define (free-mpz-vector mpz-vector-object)</span>
<span class="str">  (let ((mpz-vector-object-length (vector-length mpz-vector-object)))</span>
<span class="str">    (do ((i 0 (add1 i)))</span>
<span class="str">        ((= mpz-vector-object-length i))</span>
<span class="str">      (free-mpz-object (vector-ref mpz-vector-object i)) )))</span>
<span class="str"></span>
<span class="str">; -------------------------------</span>
<span class="str"></span>
<span class="str">(define (make-pidigits)</span>
<span class="str">  (let*</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    ((+ten+ (make-mpz-object &quot;10&quot;)) (k_ 0) (y_ (make-mpz-object)) (j_ (make-mpz-object))</span>
<span class="str">     (target_ (make-mpz-vector 4)) (t_ (make-mpz-vector 4)) (z_ (mpz-vector &quot;1&quot; &quot;0&quot; &quot;0&quot; &quot;1&quot;))</span>
<span class="str">     (left_ (make-mpz-object)) (right_ (make-mpz-object)) (result_ (make-mpz-object))</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    (compose</span>
<span class="str">      (lambda (a b)</span>
<span class="str">        (mpz_mul (vector-ref target_ 0) (vector-ref a 0) (vector-ref b 0))</span>
<span class="str">        (mpz_mul left_ (vector-ref a 0) (vector-ref b 1))</span>
<span class="str">        (mpz_mul right_ (vector-ref a 1) (vector-ref b 3))</span>
<span class="str">        (mpz_add (vector-ref target_ 1) left_ right_)</span>
<span class="str">        (mpz_mul left_ (vector-ref a 2) (vector-ref b 0))</span>
<span class="str">        (mpz_mul right_ (vector-ref a 3) (vector-ref b 2))</span>
<span class="str">        (mpz_add (vector-ref target_ 2) left_ right_)</span>
<span class="str">        (mpz_mul left_ (vector-ref a 2) (vector-ref b 1))</span>
<span class="str">        (mpz_mul right_ (vector-ref a 3) (vector-ref b 3))</span>
<span class="str">        (mpz_add (vector-ref target_ 3) left_ right_)</span>
<span class="str">        target_))</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    (extract</span>
<span class="str">      (lambda (a j)</span>
<span class="str">        (mpz_set_str j_ (number-&gt;string j) 10)</span>
<span class="str">        (mpz_mul left_ (vector-ref a 0) j_)</span>
<span class="str">        (mpz_mul right_ (vector-ref a 2) j_)</span>
<span class="str">        (mpz_add left_ (vector-ref a 1) left_)</span>
<span class="str">        (mpz_add right_ (vector-ref a 3) right_)</span>
<span class="str">        (mpz_tdiv_q result_ left_ right_)</span>
<span class="str">        (mpz_get_str #f 10 result_)))</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    (pi-clear</span>
<span class="str">      (lambda ()</span>
<span class="str">        (free-mpz-object j_) (free-mpz-object left_) (free-mpz-object right_)</span>
<span class="str">        (free-mpz-object result_)</span>
<span class="str">        (free-mpz-vector t_) (free-mpz-vector z_)</span>
<span class="str">        (set! k_ 0) (set! y_ 0)</span>
<span class="str">        (set! j_ (make-mpz-object)) (set! left_ (make-mpz-object)) (set! right_ (make-mpz-object))</span>
<span class="str">        (set! result_ (make-mpz-object))</span>
<span class="str">        (set! t_ (make-mpz-vector 4)) (set! z_ (mpz-vector &quot;1&quot; &quot;0&quot; &quot;0&quot; &quot;1&quot;))</span>
<span class="str">        #t))</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    (pi-run</span>
<span class="str">      (lambda (c)</span>
<span class="str">        (let loop-o ((i 0) (r (make-string 0)))</span>
<span class="str">          (cond</span>
<span class="str">            ((&lt; i c)</span>
<span class="str">              (let loop-i ((ys (extract z_ 3)))</span>
<span class="str">                (cond</span>
<span class="str">                  ((string=? ys (extract z_ 4))</span>
<span class="str">                    (mpz_set_str y_ ys 10)</span>
<span class="str">                    (mpz_neg y_ y_)</span>
<span class="str">                    (mpz_mul y_ +ten+ y_)</span>
<span class="str">                    (mpz-vector-update! t_ &quot;10&quot; (mpz_get_str #f 10 y_) &quot;0&quot; &quot;1&quot;)</span>
<span class="str">                    (mpz-vector-copy! z_ (compose t_ z_))</span>
<span class="str">                    (set! r (string-append r ys)) )</span>
<span class="str">                  (else</span>
<span class="str">                    (set! k_ (add1 k_))</span>
<span class="str">                    (mpz-vector-update! t_</span>
<span class="str">                      (number-&gt;string k_)</span>
<span class="str">                      (number-&gt;string (+ (* 4 k_) 2))</span>
<span class="str">                      (number-&gt;string 0)</span>
<span class="str">                      (number-&gt;string (+ 1 (* 2 k_))))</span>
<span class="str">                    (mpz-vector-copy! z_ (compose z_ t_))</span>
<span class="str">                    (loop-i (extract z_ 3)))))</span>
<span class="str">              (loop-o (add1 i) r))</span>
<span class="str">            (else r))))) )</span>
<span class="str"></span>
<span class="str">    ; -------------</span>
<span class="str"></span>
<span class="str">    (lambda (op)</span>
<span class="str">      (cond</span>
<span class="str">        ((eq? op '</span>clear<span class="sym">)</span> pi<span class="sym">-</span>clear<span class="sym">)</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="str">'run) pi-run)</span>
<span class="str">        (else (lambda () (display &quot;*** make-pidigits:invalid operation ***</span><span class="esc">\n</span><span class="str">&quot;))))) ))</span>
<span class="str"></span>
<span class="str">; -------------------------------</span>
<span class="str"></span>
<span class="str">(define (pidigits pi-object c)</span>
<span class="str">  (apply (pi-object '</span>run<span class="sym">) (</span><span class="kwa">list</span> c<span class="sym">)))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? args<span class="sym">)</span>
               <span class="num">1</span>
               <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">))))</span>

    <span class="sym">(</span>pi<span class="sym">-</span>object <span class="sym">(</span>make<span class="sym">-</span>pidigits<span class="sym">)))</span>

    <span class="sym">(</span>let loop <span class="sym">((</span>i <span class="num">10</span><span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">cond</span>
         <span class="sym">((&lt;=</span> i n<span class="sym">)</span>
           <span class="sym">(</span><span class="kwa">print</span> <span class="sym">(</span>pidigits pi<span class="sym">-</span>object <span class="num">10</span><span class="sym">)</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span> i<span class="sym">)</span>
           <span class="sym">(</span>loop <span class="sym">(+</span> i <span class="num">10</span><span class="sym">)))</span>
         <span class="sym">(</span>else
           <span class="sym">(</span>let <span class="sym">((</span>t <span class="sym">(-</span> i <span class="num">10</span><span class="sym">)))</span>
             <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> t n<span class="sym">) (</span><span class="kwa">print</span> <span class="sym">(</span>pidigits pi<span class="sym">-</span>object <span class="sym">(-</span> n t<span class="sym">))</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span> n<span class="sym">)))))) ))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>

