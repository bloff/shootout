<span class="com">{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Ian Osgood
}</span>
<span class="com">{$mode objfpc}</span>

<span class="kwa">program</span> fasta<span class="sym">;
</span><span class="kwa">uses</span> SysUtils<span class="sym">,</span> Math<span class="sym">;

</span><span class="kwa">const</span> ALU <span class="sym">:</span> AnsiString <span class="sym">=
</span>  <span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span> <span class="sym">+
</span>  <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span> <span class="sym">+
</span>  <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span> <span class="sym">+
</span>  <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span> <span class="sym">+
</span>  <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span> <span class="sym">+
</span>  <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span> <span class="sym">+
</span>  <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span><span class="sym">;

</span><span class="kwa">const</span> codes <span class="sym">=</span> <span class="str">'acgtBDHKMNRSVWY'</span><span class="sym">;

</span><span class="kwa">const</span> IUB <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>.<span class="num">.14</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">double</span> <span class="sym">= (</span> <span class="num">0.27</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">,
</span>  <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">);

</span><span class="kwa">const</span> HomoSap <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>.<span class="num">.3</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">double</span> <span class="sym">= (
</span>  <span class="num">0.3029549426680</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">,</span>  <span class="num">0.3015094502008</span> <span class="sym">);

</span><span class="kwa">const</span> LineLen <span class="sym">=</span> <span class="num">60</span><span class="sym">;

</span><span class="kwa">var</span> n <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;

</span><span class="kwa">procedure</span> fastaRepeat<span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">);
</span><span class="kwa">var</span> line <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;
</span>    posALU<span class="sym">,</span> lenOut <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">begin
</span>  posALU <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>  <span class="kwa">repeat
</span>    lenOut <span class="sym">:=</span> min<span class="sym">(</span>n<span class="sym">,</span> LineLen<span class="sym">);
</span>    line <span class="sym">:=</span> Copy<span class="sym">(</span>ALU<span class="sym">,</span> posALU<span class="sym">,</span> lenOut<span class="sym">);
</span>    <span class="kwa">if</span> length<span class="sym">(</span>line<span class="sym">) =</span> lenOut <span class="kwa">then</span> posALU <span class="sym">:=</span> posALU <span class="sym">+</span> lenOut <span class="kwa">else
    begin
</span>      posALU <span class="sym">:=</span> lenOut <span class="sym">-</span> length<span class="sym">(</span>line<span class="sym">) +</span> <span class="num">1</span><span class="sym">;
</span>      line <span class="sym">:=</span> line <span class="sym">+</span> Copy<span class="sym">(</span>ALU<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> posALU<span class="num">-1</span><span class="sym">);
</span>    <span class="kwa">end</span><span class="sym">;
</span>    writeln<span class="sym">(</span>line<span class="sym">);
</span>    n <span class="sym">:=</span> n <span class="sym">-</span> lenOut<span class="sym">;
</span>  <span class="kwa">until</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> fastaRandom<span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span> probs<span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">double</span><span class="sym">);
</span><span class="kwa">var</span> line <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;
</span>    i <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;

</span>  <span class="kwa">function</span> genRandom<span class="sym">(</span>limit <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">):</span> <span class="kwb">double</span><span class="sym">;
</span>  <span class="kwa">const</span> seed <span class="sym">:</span> <span class="kwb">longint</span> <span class="sym">=</span> <span class="num">42</span><span class="sym">;
</span>  <span class="kwa">begin
</span>    seed <span class="sym">:= (</span>seed <span class="sym">*</span> <span class="num">3877</span> <span class="sym">+</span> <span class="num">29573</span><span class="sym">)</span> <span class="kwa">mod</span> <span class="num">139968</span><span class="sym">;
</span>    genRandom <span class="sym">:=</span> limit <span class="sym">*</span> seed <span class="sym">/</span> <span class="num">139968</span><span class="sym">;
</span>  <span class="kwa">end</span><span class="sym">;

</span>  <span class="kwa">function</span> chooseCode <span class="sym">:</span> <span class="kwb">char</span><span class="sym">;
</span>  <span class="kwa">var</span> r <span class="sym">:</span> <span class="kwb">double</span><span class="sym">;
</span>      i <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>  <span class="kwa">begin
</span>    r <span class="sym">:=</span> genRandom<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span>    <span class="kwa">for</span> i <span class="sym">:=</span> low<span class="sym">(</span>probs<span class="sym">)</span> <span class="kwa">to</span> high<span class="sym">(</span>probs<span class="sym">)</span> <span class="kwa">do
      if</span> r <span class="sym">&lt;</span> probs<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">then</span> break<span class="sym">;
</span>    chooseCode <span class="sym">:=</span> codes<span class="sym">[</span>i<span class="sym">-</span>low<span class="sym">(</span>probs<span class="sym">)+</span><span class="num">1</span><span class="sym">];
</span>  <span class="kwa">end</span><span class="sym">;

</span><span class="kwa">begin
</span>  <span class="com">{ make cumulative }</span>
  <span class="kwa">for</span> i <span class="sym">:=</span> low<span class="sym">(</span>probs<span class="sym">)+</span><span class="num">1</span> <span class="kwa">to</span> high<span class="sym">(</span>probs<span class="sym">)</span> <span class="kwa">do
</span>    probs<span class="sym">[</span>i<span class="sym">] :=</span> probs<span class="sym">[</span>i<span class="sym">] +</span> probs<span class="sym">[</span>i<span class="num">-1</span><span class="sym">];

</span>  SetLength<span class="sym">(</span>line<span class="sym">,</span>lineLen<span class="sym">);
</span>  <span class="kwa">while</span> n <span class="sym">&gt;</span> lineLen <span class="kwa">do
  begin
    for</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> lineLen <span class="kwa">do
</span>      line<span class="sym">[</span>i<span class="sym">] :=</span> chooseCode<span class="sym">;
</span>    writeln<span class="sym">(</span>line<span class="sym">);
</span>    n <span class="sym">:=</span> n <span class="sym">-</span> lineLen<span class="sym">;
</span>  <span class="kwa">end</span><span class="sym">;

</span>  SetLength<span class="sym">(</span>line<span class="sym">,</span>n<span class="sym">);
</span>  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do
</span>    line<span class="sym">[</span>i<span class="sym">] :=</span> chooseCode<span class="sym">;
</span>  writeln<span class="sym">(</span>line<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;


</span><span class="kwa">begin
</span>  n <span class="sym">:=</span> StrToInt<span class="sym">(</span>paramstr<span class="sym">(</span><span class="num">1</span><span class="sym">));

</span>  writeln<span class="sym">(</span><span class="str">'&gt;ONE Homo sapiens alu'</span><span class="sym">);
</span>  fastaRepeat<span class="sym">(</span>n<span class="sym">*</span><span class="num">2</span><span class="sym">);

</span>  writeln<span class="sym">(</span><span class="str">'&gt;TWO IUB ambiguity codes'</span><span class="sym">);
</span>  fastaRandom<span class="sym">(</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">,</span> IUB<span class="sym">);

</span>  writeln<span class="sym">(</span><span class="str">'&gt;THREE Homo sapiens frequency'</span><span class="sym">);
</span>  fastaRandom<span class="sym">(</span>n<span class="sym">*</span><span class="num">5</span><span class="sym">,</span> HomoSap<span class="sym">);
</span><span class="kwa">end</span>.
