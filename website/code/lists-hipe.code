<span class="line">    1 </span><span class="slc">%% The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">%% http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">%% contributed by Alexey Shchepin &lt;alexey&#64;sevcom.net&gt;
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="slc">% module &quot;lists&quot; already exists in stdlib
</span><span class="line">    6 </span><span class="slc"></span><span class="sym">-</span>module<span class="sym">(</span>lists_test<span class="sym">)</span>.
<span class="line">    7 </span><span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.
<span class="line">    8 </span>
<span class="line">    9 </span><span class="sym">-</span>define<span class="sym">(</span>SIZE<span class="sym">,</span> <span class="num">10000</span><span class="sym">)</span>.
<span class="line">   10 </span>
<span class="line">   11 </span>main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">'1'</span><span class="sym">])</span>.
<span class="line">   12 </span>main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span><span class="line">   13 </span><span class="sym"></span>    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Arg<span class="sym">)),
</span><span class="line">   14 </span><span class="sym"></span>    test_lists_n<span class="sym">(</span>N<span class="sym">),
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.
<span class="line">   16 </span>
<span class="line">   17 </span>test_lists_n<span class="sym">(</span><span class="num">1</span><span class="sym">) -&gt;
</span><span class="line">   18 </span><span class="sym"></span>    io<span class="sym">:</span>format<span class="sym">(</span><span class="str">&quot;~p~n&quot;</span><span class="sym">, [</span>test_lists<span class="sym">()]);
</span><span class="line">   19 </span><span class="sym"></span>test_lists_n<span class="sym">(</span>N<span class="sym">) -&gt;
</span><span class="line">   20 </span><span class="sym"></span>    test_lists<span class="sym">(),
</span><span class="line">   21 </span><span class="sym"></span>    test_lists_n<span class="sym">(</span>N<span class="num">-1</span><span class="sym">)</span>.
<span class="line">   22 </span>
<span class="line">   23 </span>test_lists<span class="sym">() -&gt;
</span><span class="line">   24 </span><span class="sym"></span>    <span class="kwb">erase</span><span class="sym">(),
</span><span class="line">   25 </span><span class="sym"></span>    L1 <span class="sym">=</span> create_seq<span class="sym">(),
</span><span class="line">   26 </span><span class="sym"></span>    L2 <span class="sym">=</span> copy<span class="sym">(</span>L1<span class="sym">),
</span><span class="line">   27 </span><span class="sym">    {</span>L22<span class="sym">,</span> L3<span class="sym">} =</span> move1<span class="sym">(</span>L2<span class="sym">,</span> new<span class="sym">()),
</span><span class="line">   28 </span><span class="sym">    {</span>L33<span class="sym">,</span> L222<span class="sym">} =</span> move2<span class="sym">(</span>L3<span class="sym">,</span> L22<span class="sym">),
</span><span class="line">   29 </span><span class="sym"></span>    L11 <span class="sym">=</span> reverse<span class="sym">(</span>L1<span class="sym">),
</span><span class="line">   30 </span><span class="sym"></span>    ?SIZE <span class="sym">=</span> head<span class="sym">(</span>L11<span class="sym">),
</span><span class="line">   31 </span><span class="sym"></span>    test_eq<span class="sym">(</span>L11<span class="sym">,</span> L222<span class="sym">),
</span><span class="line">   32 </span><span class="sym"></span>    len<span class="sym">(</span>L11<span class="sym">)</span>.
<span class="line">   33 </span>
<span class="line">   34 </span>move1<span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">) -&gt;
</span><span class="line">   35 </span><span class="sym"></span>    <span class="kwa">case</span> move_from_begin_to_end<span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">)</span> <span class="kwa">of
</span><span class="line">   36 </span><span class="kwa"></span>        <span class="sym">{</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">} -&gt;
</span><span class="line">   37 </span><span class="sym"></span>            move1<span class="sym">(</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">);
</span><span class="line">   38 </span><span class="sym"></span>        nil <span class="sym">-&gt;
</span><span class="line">   39 </span><span class="sym">            {</span>From<span class="sym">,</span> To<span class="sym">}
</span><span class="line">   40 </span><span class="sym"></span>    <span class="kwa">end</span>.
<span class="line">   41 </span>
<span class="line">   42 </span>move2<span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">) -&gt;
</span><span class="line">   43 </span><span class="sym"></span>    <span class="kwa">case</span> move_from_end_to_end<span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">)</span> <span class="kwa">of
</span><span class="line">   44 </span><span class="kwa"></span>        <span class="sym">{</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">} -&gt;
</span><span class="line">   45 </span><span class="sym"></span>            move2<span class="sym">(</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">);
</span><span class="line">   46 </span><span class="sym"></span>        nil <span class="sym">-&gt;
</span><span class="line">   47 </span><span class="sym">            {</span>From<span class="sym">,</span> To<span class="sym">}
</span><span class="line">   48 </span><span class="sym"></span>    <span class="kwa">end</span>.
<span class="line">   49 </span>
<span class="line">   50 </span><span class="slc">% Implementation of doubly-linked lists
</span><span class="line">   51 </span><span class="slc"></span>
<span class="line">   52 </span>new<span class="sym">() -&gt;
</span><span class="line">   53 </span><span class="sym">    {</span>nil<span class="sym">,</span> nil<span class="sym">}</span>.
<span class="line">   54 </span>
<span class="line">   55 </span>new_el<span class="sym">(</span>Data<span class="sym">) -&gt;
</span><span class="line">   56 </span><span class="sym"></span>    Ref <span class="sym">=</span> <span class="kwb">make_ref</span><span class="sym">(),
</span><span class="line">   57 </span><span class="sym"></span>    <span class="kwb">put</span><span class="sym">(</span>Ref<span class="sym">,</span> Data<span class="sym">),
</span><span class="line">   58 </span><span class="sym"></span>    Ref.
<span class="line">   59 </span>
<span class="line">   60 </span>push_end<span class="sym">({</span>nil<span class="sym">,</span> nil<span class="sym">},</span> Val<span class="sym">) -&gt;
</span><span class="line">   61 </span><span class="sym"></span>    Data <span class="sym">= {</span>Val<span class="sym">,</span> nil<span class="sym">,</span> nil<span class="sym">},
</span><span class="line">   62 </span><span class="sym"></span>    NewEl <span class="sym">=</span> new_el<span class="sym">(</span>Data<span class="sym">),
</span><span class="line">   63 </span><span class="sym">    {</span>NewEl<span class="sym">,</span> NewEl<span class="sym">};
</span><span class="line">   64 </span><span class="sym"></span>push_end<span class="sym">({</span>First<span class="sym">,</span> Last<span class="sym">},</span> Val<span class="sym">) -&gt;
</span><span class="line">   65 </span><span class="sym"></span>    Data <span class="sym">= {</span>Val<span class="sym">,</span> Last<span class="sym">,</span> nil<span class="sym">},
</span><span class="line">   66 </span><span class="sym"></span>    NewEl <span class="sym">=</span> new_el<span class="sym">(</span>Data<span class="sym">),
</span><span class="line">   67 </span><span class="sym"></span>    <span class="kwb">put</span><span class="sym">(</span>Last<span class="sym">,</span> <span class="kwb">setelement</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>Last<span class="sym">),</span> NewEl<span class="sym">)),
</span><span class="line">   68 </span><span class="sym">    {</span>First<span class="sym">,</span> NewEl<span class="sym">}</span>.
<span class="line">   69 </span>
<span class="line">   70 </span>head<span class="sym">({</span>First<span class="sym">,</span> _Last<span class="sym">}) -&gt;
</span><span class="line">   71 </span><span class="sym"></span>    <span class="kwb">element</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>First<span class="sym">))</span>.
<span class="line">   72 </span>
<span class="line">   73 </span>create_seq<span class="sym">() -&gt;
</span><span class="line">   74 </span><span class="sym"></span>    create_seq<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> new<span class="sym">())</span>.
<span class="line">   75 </span>create_seq<span class="sym">(</span>N<span class="sym">,</span> List<span class="sym">) -&gt;
</span><span class="line">   76 </span><span class="sym"></span>    <span class="kwa">if
</span><span class="line">   77 </span><span class="kwa"></span>        N <span class="sym">=&lt;</span> ?SIZE <span class="sym">-&gt;
</span><span class="line">   78 </span><span class="sym"></span>            create_seq<span class="sym">(</span>N<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> push_end<span class="sym">(</span>List<span class="sym">,</span> N<span class="sym">));
</span><span class="line">   79 </span><span class="sym"></span>        true <span class="sym">-&gt;
</span><span class="line">   80 </span><span class="sym"></span>            List
<span class="line">   81 </span>    <span class="kwa">end</span>.
<span class="line">   82 </span>
<span class="line">   83 </span>copy<span class="sym">({</span>First<span class="sym">,</span> _Last<span class="sym">}) -&gt;
</span><span class="line">   84 </span><span class="sym"></span>    copy1<span class="sym">(</span>First<span class="sym">,</span> new<span class="sym">())</span>.
<span class="line">   85 </span>
<span class="line">   86 </span>copy1<span class="sym">(</span>nil<span class="sym">,</span> List<span class="sym">) -&gt;
</span><span class="line">   87 </span><span class="sym"></span>    List<span class="sym">;
</span><span class="line">   88 </span><span class="sym"></span>copy1<span class="sym">(</span>El<span class="sym">,</span> List<span class="sym">) -&gt;
</span><span class="line">   89 </span><span class="sym">    {</span>Val<span class="sym">,</span> _Prev<span class="sym">,</span> Next<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El<span class="sym">),
</span><span class="line">   90 </span><span class="sym"></span>    copy1<span class="sym">(</span>Next<span class="sym">,</span> push_end<span class="sym">(</span>List<span class="sym">,</span> Val<span class="sym">))</span>.
<span class="line">   91 </span>
<span class="line">   92 </span>reverse<span class="sym">({</span>First<span class="sym">,</span> Last<span class="sym">}) -&gt;
</span><span class="line">   93 </span><span class="sym"></span>    reverse_els<span class="sym">(</span>First<span class="sym">),
</span><span class="line">   94 </span><span class="sym">    {</span>Last<span class="sym">,</span> First<span class="sym">}</span>.
<span class="line">   95 </span>
<span class="line">   96 </span>reverse_els<span class="sym">(</span>nil<span class="sym">) -&gt;
</span><span class="line">   97 </span><span class="sym"></span>    ok<span class="sym">;
</span><span class="line">   98 </span><span class="sym"></span>reverse_els<span class="sym">(</span>El<span class="sym">) -&gt;
</span><span class="line">   99 </span><span class="sym">    {</span>Val<span class="sym">,</span> Prev<span class="sym">,</span> Next<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El<span class="sym">),
</span><span class="line">  100 </span><span class="sym"></span>    <span class="kwb">put</span><span class="sym">(</span>El<span class="sym">, {</span>Val<span class="sym">,</span> Next<span class="sym">,</span> Prev<span class="sym">}),
</span><span class="line">  101 </span><span class="sym"></span>    reverse_els<span class="sym">(</span>Next<span class="sym">)</span>.
<span class="line">  102 </span>
<span class="line">  103 </span>move_from_begin_to_end<span class="sym">({</span>First1<span class="sym">,</span> Last1<span class="sym">}, {</span>First2<span class="sym">,</span> Last2<span class="sym">}) -&gt;
</span><span class="line">  104 </span><span class="sym"></span>    <span class="kwa">if
</span><span class="line">  105 </span><span class="kwa"></span>        First1 <span class="sym">==</span> nil <span class="sym">-&gt;
</span><span class="line">  106 </span><span class="sym"></span>            nil<span class="sym">;
</span><span class="line">  107 </span><span class="sym"></span>        true <span class="sym">-&gt;
</span><span class="line">  108 </span><span class="sym">            {</span>Val<span class="sym">,</span> _Prev1<span class="sym">,</span> Next1<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>First1<span class="sym">),
</span><span class="line">  109 </span><span class="sym"></span>            NewList1 <span class="sym">=</span> <span class="kwa">if
</span><span class="line">  110 </span><span class="kwa"></span>                           Next1 <span class="sym">==</span> nil <span class="sym">-&gt;
</span><span class="line">  111 </span><span class="sym">                               {</span>nil<span class="sym">,</span> nil<span class="sym">};
</span><span class="line">  112 </span><span class="sym"></span>                           true <span class="sym">-&gt;
</span><span class="line">  113 </span><span class="sym">                               {</span>Next1<span class="sym">,</span> Last1<span class="sym">}
</span><span class="line">  114 </span><span class="sym"></span>                       <span class="kwa">end</span><span class="sym">,
</span><span class="line">  115 </span><span class="sym"></span>            NewList2 <span class="sym">=</span> <span class="kwa">if
</span><span class="line">  116 </span><span class="kwa"></span>                           First2 <span class="sym">==</span> nil <span class="sym">-&gt;
</span><span class="line">  117 </span><span class="sym"></span>                               Data <span class="sym">= {</span>Val<span class="sym">,</span> nil<span class="sym">,</span> nil<span class="sym">},
</span><span class="line">  118 </span><span class="sym"></span>                               <span class="kwb">put</span><span class="sym">(</span>First1<span class="sym">,</span> Data<span class="sym">),
</span><span class="line">  119 </span><span class="sym">                               {</span>First1<span class="sym">,</span> First1<span class="sym">};
</span><span class="line">  120 </span><span class="sym"></span>                           true <span class="sym">-&gt;
</span><span class="line">  121 </span><span class="sym"></span>                               Data <span class="sym">= {</span>Val<span class="sym">,</span> Last2<span class="sym">,</span> nil<span class="sym">},
</span><span class="line">  122 </span><span class="sym"></span>                               <span class="kwb">put</span><span class="sym">(</span>First1<span class="sym">,</span> Data<span class="sym">),
</span><span class="line">  123 </span><span class="sym"></span>                               <span class="kwb">put</span><span class="sym">(</span>Last2<span class="sym">,</span> <span class="kwb">setelement</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>Last2<span class="sym">),</span> First1<span class="sym">)),
</span><span class="line">  124 </span><span class="sym">                               {</span>First2<span class="sym">,</span> First1<span class="sym">}
</span><span class="line">  125 </span><span class="sym"></span>                       <span class="kwa">end</span><span class="sym">,
</span><span class="line">  126 </span><span class="sym">            {</span>NewList1<span class="sym">,</span> NewList2<span class="sym">}
</span><span class="line">  127 </span><span class="sym"></span>    <span class="kwa">end</span>.
<span class="line">  128 </span>
<span class="line">  129 </span>move_from_end_to_end<span class="sym">({</span>First1<span class="sym">,</span> Last1<span class="sym">}, {</span>First2<span class="sym">,</span> Last2<span class="sym">}) -&gt;
</span><span class="line">  130 </span><span class="sym"></span>    <span class="kwa">if
</span><span class="line">  131 </span><span class="kwa"></span>        First1 <span class="sym">==</span> nil <span class="sym">-&gt;
</span><span class="line">  132 </span><span class="sym"></span>            nil<span class="sym">;
</span><span class="line">  133 </span><span class="sym"></span>        true <span class="sym">-&gt;
</span><span class="line">  134 </span><span class="sym">            {</span>Val<span class="sym">,</span> Prev1<span class="sym">,</span> _Next1<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>Last1<span class="sym">),
</span><span class="line">  135 </span><span class="sym"></span>            NewList1 <span class="sym">=</span> <span class="kwa">if
</span><span class="line">  136 </span><span class="kwa"></span>                           Prev1 <span class="sym">==</span> nil <span class="sym">-&gt;
</span><span class="line">  137 </span><span class="sym">                               {</span>nil<span class="sym">,</span> nil<span class="sym">};
</span><span class="line">  138 </span><span class="sym"></span>                           true <span class="sym">-&gt;
</span><span class="line">  139 </span><span class="sym">                               {</span>First1<span class="sym">,</span> Prev1<span class="sym">}
</span><span class="line">  140 </span><span class="sym"></span>                       <span class="kwa">end</span><span class="sym">,
</span><span class="line">  141 </span><span class="sym"></span>            NewList2 <span class="sym">=</span> <span class="kwa">if
</span><span class="line">  142 </span><span class="kwa"></span>                           First2 <span class="sym">==</span> nil <span class="sym">-&gt;
</span><span class="line">  143 </span><span class="sym"></span>                               Data <span class="sym">= {</span>Val<span class="sym">,</span> nil<span class="sym">,</span> nil<span class="sym">},
</span><span class="line">  144 </span><span class="sym"></span>                               <span class="kwb">put</span><span class="sym">(</span>Last1<span class="sym">,</span> Data<span class="sym">),
</span><span class="line">  145 </span><span class="sym">                               {</span>Last1<span class="sym">,</span> Last1<span class="sym">};
</span><span class="line">  146 </span><span class="sym"></span>                           true <span class="sym">-&gt;
</span><span class="line">  147 </span><span class="sym"></span>                               Data <span class="sym">= {</span>Val<span class="sym">,</span> Last2<span class="sym">,</span> nil<span class="sym">},
</span><span class="line">  148 </span><span class="sym"></span>                               <span class="kwb">put</span><span class="sym">(</span>Last1<span class="sym">,</span> Data<span class="sym">),
</span><span class="line">  149 </span><span class="sym"></span>                               <span class="kwb">put</span><span class="sym">(</span>Last2<span class="sym">,</span> <span class="kwb">setelement</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>Last2<span class="sym">),</span> Last1<span class="sym">)),
</span><span class="line">  150 </span><span class="sym">                               {</span>First2<span class="sym">,</span> Last1<span class="sym">}
</span><span class="line">  151 </span><span class="sym"></span>                       <span class="kwa">end</span><span class="sym">,
</span><span class="line">  152 </span><span class="sym">            {</span>NewList1<span class="sym">,</span> NewList2<span class="sym">}
</span><span class="line">  153 </span><span class="sym"></span>    <span class="kwa">end</span>.
<span class="line">  154 </span>
<span class="line">  155 </span>test_eq<span class="sym">({</span>First1<span class="sym">,</span> Last1<span class="sym">}, {</span>First2<span class="sym">,</span> Last2<span class="sym">}) -&gt;
</span><span class="line">  156 </span><span class="sym"></span>    test_eq1<span class="sym">(</span>First1<span class="sym">,</span> First2<span class="sym">)</span>.
<span class="line">  157 </span>
<span class="line">  158 </span>test_eq1<span class="sym">(</span>nil<span class="sym">,</span> nil<span class="sym">) -&gt;
</span><span class="line">  159 </span><span class="sym"></span>    ok<span class="sym">;
</span><span class="line">  160 </span><span class="sym"></span>test_eq1<span class="sym">(</span>El1<span class="sym">,</span> El2<span class="sym">) -&gt;
</span><span class="line">  161 </span><span class="sym">    {</span>Val<span class="sym">,</span> _Prev1<span class="sym">,</span> Next1<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El1<span class="sym">),
</span><span class="line">  162 </span><span class="sym">    {</span>Val<span class="sym">,</span> _Prev2<span class="sym">,</span> Next2<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El2<span class="sym">),
</span><span class="line">  163 </span><span class="sym"></span>    test_eq1<span class="sym">(</span>Next1<span class="sym">,</span> Next2<span class="sym">)</span>.
<span class="line">  164 </span>
<span class="line">  165 </span>len<span class="sym">({</span>First<span class="sym">,</span> _Last<span class="sym">}) -&gt;
</span><span class="line">  166 </span><span class="sym"></span>    len<span class="sym">(</span>First<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>.
<span class="line">  167 </span>
<span class="line">  168 </span>len<span class="sym">(</span>nil<span class="sym">,</span> N<span class="sym">) -&gt;
</span><span class="line">  169 </span><span class="sym"></span>    N<span class="sym">;
</span><span class="line">  170 </span><span class="sym"></span>len<span class="sym">(</span>El<span class="sym">,</span> N<span class="sym">) -&gt;
</span><span class="line">  171 </span><span class="sym"></span>    len<span class="sym">(</span><span class="kwb">element</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>El<span class="sym">)),</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>.
<span class="line">  172 </span>
