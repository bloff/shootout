<span class="line">    1 </span>#<span class="sym">!/</span>bin<span class="sym">/</span>bash
<span class="line">    2 </span># <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-
</span><span class="line">    3 </span><span class="sym"></span>PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}
</span><span class="line">    4 </span><span class="sym">[</span> \<span class="sym">! -</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;
</span><span class="line">    5 </span><span class="sym"></span>    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0
</span><span class="line">    6 </span><span class="num"></span>exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="line">    7 </span><span class="sym">!</span>#
<span class="line">    8 </span>
<span class="line">    9 </span><span class="slc">;;; $Id: except-rep.code,v 1.3 2004-11-13 08:28:17 bfulgham Exp $
</span><span class="line">   10 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">   11 </span><span class="slc"></span>
<span class="line">   12 </span><span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()
</span><span class="line">   13 </span><span class="sym">  (</span><span class="kwa">open</span> rep rep.system<span class="sym">)
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym">  (</span>defvar HI <span class="num">0</span><span class="sym">)
</span><span class="line">   16 </span><span class="sym">  (</span>defvar LO <span class="num">0</span><span class="sym">)
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym">  (</span>define <span class="sym">(</span>hi_ex val<span class="sym">)
</span><span class="line">   19 </span><span class="sym">    (</span><span class="kwa">cons</span> <span class="str">'hi_ex val))
</span><span class="line">   20 </span><span class="str">
</span><span class="line">   21 </span><span class="str">  (define (lo_ex val)
</span><span class="line">   22 </span><span class="str">    (cons '</span>lo_ex val<span class="sym">))
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym">  (</span>define <span class="sym">(</span>some_fun num<span class="sym">)
</span><span class="line">   25 </span><span class="sym">    (</span>catch #t
<span class="line">   26 </span>      <span class="sym">(</span>hi_fun num<span class="sym">)))
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym">  (</span>define <span class="sym">(</span>hi_fun num<span class="sym">)
</span><span class="line">   29 </span><span class="sym">    (</span>let <span class="sym">((</span>val <span class="sym">(</span>catch <span class="str">'Hi_Exception (lo_fun num))))
</span><span class="line">   30 </span><span class="str">      (if (and (consp val)
</span><span class="line">   31 </span><span class="str">               (eq (car val) '</span>hi_ex<span class="sym">))
</span><span class="line">   32 </span><span class="sym">          (</span><span class="kwa">setq</span> HI <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> HI<span class="sym">)))))
</span><span class="line">   33 </span><span class="sym">
</span><span class="line">   34 </span><span class="sym">  (</span>define <span class="sym">(</span>lo_fun num<span class="sym">)
</span><span class="line">   35 </span><span class="sym">    (</span>let <span class="sym">((</span>val <span class="sym">(</span>catch <span class="str">'Lo_Exception (blowup num))))
</span><span class="line">   36 </span><span class="str">      (if (and (consp val)
</span><span class="line">   37 </span><span class="str">               (eq (car val) '</span>lo_ex<span class="sym">))
</span><span class="line">   38 </span><span class="sym">          (</span><span class="kwa">setq</span> LO <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> LO<span class="sym">)))))
</span><span class="line">   39 </span><span class="sym">
</span><span class="line">   40 </span><span class="sym">  (</span>define <span class="sym">(</span>blowup num<span class="sym">)
</span><span class="line">   41 </span><span class="sym">    (</span><span class="kwa">if</span> <span class="sym">(=</span> <span class="num">0</span> <span class="sym">(</span>mod num <span class="num">2</span><span class="sym">))
</span><span class="line">   42 </span><span class="sym">        (</span>throw <span class="str">'Hi_Exception (hi_ex num))
</span><span class="line">   43 </span><span class="str">      (throw '</span>Lo_Exception <span class="sym">(</span>lo_ex num<span class="sym">))))
</span><span class="line">   44 </span><span class="sym">
</span><span class="line">   45 </span><span class="sym">  (</span>let<span class="sym">* ((</span>arg <span class="sym">(</span>get<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>option <span class="str">&quot;--num&quot;</span> t<span class="sym">))
</span><span class="line">   46 </span><span class="sym">         (</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>from<span class="sym">-</span>string arg<span class="sym">)</span> <span class="num">1</span><span class="sym">)))
</span><span class="line">   47 </span><span class="sym">    (</span><span class="kwa">while</span> <span class="sym">(&gt;</span> n <span class="num">0</span><span class="sym">)
</span><span class="line">   48 </span><span class="sym">      (</span><span class="kwa">setq</span> n <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">))
</span><span class="line">   49 </span><span class="sym">      (</span>some_fun n<span class="sym">)))
</span><span class="line">   50 </span><span class="sym">  (</span>format standard<span class="sym">-</span>output <span class="str">&quot;Exceptions: HI=%d / LO=%d</span><span class="esc">\n</span><span class="str">&quot;</span> HI LO<span class="sym">))</span>
