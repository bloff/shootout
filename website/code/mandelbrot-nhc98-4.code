<span class="com">{-# OPTIONS -O2 -optc-O2 #-}</span>
<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- Based on the SML version, written by Matthias Blume.</span>
<span class="slc">-- Implemented in Haskell by Don Stewart</span>

<span class="kwa">import</span> System
<span class="kwa">import</span> Data.Bits
<span class="kwa">import</span> Data.Word
<span class="kwa">import</span> GHC.Base

main <span class="sym">=</span> <span class="kwa">do</span> w <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> return . read . head
          putStrLn $ <span class="str">&quot;P4\n&quot;</span> <span class="sym">++</span> show w <span class="sym">++</span> <span class="str">&quot; &quot;</span> <span class="sym">++</span> show w
          yl <span class="num">0</span> w w

yl y h w <span class="sym">=</span> if y <span class="sym">&lt;</span> h <span class="kwa">then</span> xl <span class="num">0</span> y <span class="num">0 8</span> h w <span class="kwa">else</span> return <span class="sym">()</span>

xl x y b n h w
    <span class="sym">|</span> x <span class="sym">==</span> w    <span class="sym">=</span> putChar <span class="sym">(</span>unsafeChr $ b `shiftL` n<span class="sym">) &gt;&gt;</span> yl <span class="sym">(</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> h w
    <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span>
        <span class="sym">(</span>b<span class="str">',n'</span><span class="sym">) &lt;-</span> if n <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> putChar <span class="sym">(</span>chr b<span class="sym">) &gt;&gt;</span> return <span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">8</span><span class="sym">)</span> <span class="kwa">else</span> return <span class="sym">(</span>b<span class="sym">,</span>n<span class="sym">)</span>
        xl <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> y <span class="sym">(</span>b<span class="str">'+b'</span><span class="sym">+</span> fromEnum <span class="sym">(</span>p x y w h<span class="sym">)) (</span>n<span class="str">'-1) h w</span>
<span class="str"></span>
<span class="str">p :: Word32 -&gt; Word32 -&gt; Word32 -&gt; Word32 -&gt; Word32</span>
<span class="str">p x y w h = lp 0.0 0.0 50 (f x * 2.0 / f w - 1.5) (f y * 2.0 / f h - 1.0)</span>
<span class="str">    where f = fromIntegral</span>
<span class="str"></span>
<span class="str">lp r i k cr ci | r2 + i2 &gt; (4.0 :: Double) = 0 :: Word32</span>
<span class="str">               | k == (0 :: Word32)        = 1</span>
<span class="str">               | otherwise                 = lp (r2-i2+cr) ((r+r)*i+ci) (k-1) cr ci</span>
<span class="str">    where (r2,i2) = (r*r, i*i)</span>
