<span class="slc">--</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Don Stewart</span>
<span class="slc">--</span>
<span class="slc">-- Very inefficient until we use packed string regex</span>
<span class="slc">--</span>

<span class="kwa">import</span> Text.Regex

main <span class="sym">=</span> getContents <span class="sym">&gt;&gt;=</span> putStr . output

output s <span class="sym">=</span> unlines $ countMatches <span class="sym">++ [[]] ++</span> map show <span class="sym">[</span>length s<span class="sym">,</span> length s<span class="str">', finalLen]</span>
<span class="str">  where s'</span>           <span class="sym">=</span> replace <span class="str">&quot;&gt;.*\n|\n&quot;</span> <span class="str">&quot;&quot;</span> s
        finalLen     <span class="sym">=</span> length $ replaceIubs s<span class="str">'</span>
<span class="str">        countMatches = map (\v -&gt; v ++ '</span> <span class="str">': show (numHits v s'</span><span class="sym">))</span> variants

replaceIubs <span class="sym">=</span> foldl1 <span class="sym">(</span>.<span class="sym">) (</span>map <span class="sym">(</span>uncurry replace<span class="sym">)</span> pairs<span class="sym">)</span>

numHits <span class="sym">=</span> gmatch $ \m _ loop <span class="sym">-&gt;</span> maybe <span class="num">0</span> <span class="sym">(</span>\<span class="sym">(</span>_<span class="sym">,</span>_<span class="sym">,</span>t<span class="sym">,</span>_<span class="sym">) -&gt;</span> <span class="num">1</span> <span class="sym">+</span> loop t<span class="sym">)</span> m

replace pat r <span class="sym">=</span> gmatch <span class="sym">(</span>\m s loop <span class="sym">-&gt;</span> maybe s <span class="sym">(</span>\<span class="sym">(</span>a<span class="sym">,</span>_<span class="sym">,</span>b<span class="sym">,</span>_<span class="sym">) -&gt;</span> a <span class="sym">++</span> r <span class="sym">++</span> loop b<span class="sym">)</span> m<span class="sym">)</span> pat

gmatch fn pat buf <span class="sym">=</span> loop buf
  <span class="kwa">where</span> regex  <span class="sym">=</span> mkRegexWithOpts pat <span class="kwa">True True</span>
        loop s <span class="sym">=</span> fn <span class="sym">(</span>matchRegexAll regex s<span class="sym">)</span> s loop

variants <span class="sym">=</span>
  <span class="sym">[</span><span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">,</span><span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span><span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
  <span class="sym">,</span><span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span><span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span><span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
  <span class="sym">,</span><span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span><span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span><span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">]</span>

pairs <span class="sym">=</span>
  <span class="sym">[(</span><span class="str">&quot;B&quot;</span><span class="sym">,</span><span class="str">&quot;(c|g|t)&quot;</span><span class="sym">),(</span><span class="str">&quot;D&quot;</span><span class="sym">,</span><span class="str">&quot;(a|g|t)&quot;</span><span class="sym">),(</span><span class="str">&quot;H&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c|t)&quot;</span><span class="sym">),(</span><span class="str">&quot;K&quot;</span><span class="sym">,</span><span class="str">&quot;(g|t)&quot;</span><span class="sym">),(</span><span class="str">&quot;M&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c)&quot;</span><span class="sym">)</span>
  <span class="sym">,(</span><span class="str">&quot;N&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">),(</span><span class="str">&quot;R&quot;</span><span class="sym">,</span><span class="str">&quot;(a|g)&quot;</span><span class="sym">),(</span><span class="str">&quot;S&quot;</span><span class="sym">,</span><span class="str">&quot;(c|g)&quot;</span><span class="sym">),(</span><span class="str">&quot;V&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c|g)&quot;</span><span class="sym">),(</span><span class="str">&quot;W&quot;</span><span class="sym">,</span><span class="str">&quot;(a|t)&quot;</span><span class="sym">)</span>
  <span class="sym">,(</span><span class="str">&quot;Y&quot;</span><span class="sym">,</span><span class="str">&quot;(c|t)&quot;</span><span class="sym">) ]</span>
