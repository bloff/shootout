<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   http://www.bagley.org/~doug/shootout/

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release echo.d
*/</span>

import std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">,</span> std<span class="sym">.</span>socket<span class="sym">,</span> std<span class="sym">.</span>thread<span class="sym">;

</span>uint port<span class="sym">;

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)
{
</span>    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;

</span>    Thread server <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">(&amp;</span>echoServer<span class="sym">,</span>cast<span class="sym">(</span><span class="kwb">void</span><span class="sym">*)</span>n<span class="sym">);
</span>    Thread client <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">(&amp;</span>echoClient<span class="sym">,</span>cast<span class="sym">(</span><span class="kwb">void</span><span class="sym">*)</span>n<span class="sym">);

</span>    server<span class="sym">.</span>start<span class="sym">();
</span>    client<span class="sym">.</span>start<span class="sym">();

</span>    server<span class="sym">.</span>wait<span class="sym">();
</span>    client<span class="sym">.</span>wait<span class="sym">();

</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}

</span><span class="kwb">int</span> echoServer<span class="sym">(</span><span class="kwb">void</span><span class="sym">*</span> arg<span class="sym">)
{
</span>    <span class="kwb">int</span> n <span class="sym">=</span> cast<span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span>arg<span class="sym">;

</span>    Socket sock<span class="sym">;

</span>    <span class="kwa">try
</span>    <span class="sym">{
</span>        sock <span class="sym">=</span> serverSock<span class="sym">.</span>accept<span class="sym">();
    }
</span>    <span class="kwa">catch</span><span class="sym">(</span>SocketAcceptException sae<span class="sym">)
    {
</span>        fwritefln<span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;server/accept&quot;</span><span class="sym">);
</span>        <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
    }

</span>    <span class="kwb">int</span> len<span class="sym">,</span> total<span class="sym">;
</span>    <span class="kwb">char</span><span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span><span class="num">4096</span><span class="sym">];
</span>    <span class="kwa">while</span><span class="sym">((</span>len <span class="sym">=</span> sock<span class="sym">.</span>receive<span class="sym">(</span>buffer<span class="sym">)) &gt;</span> <span class="num">0</span><span class="sym">)
    {
</span>        total <span class="sym">+=</span> len<span class="sym">;
</span>        <span class="kwa">if</span><span class="sym">(</span>sock<span class="sym">.</span>send<span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>len<span class="sym">]) ==</span> Socket<span class="sym">.</span>ERROR<span class="sym">)
        {
</span>            fwritefln<span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;server/write&quot;</span><span class="sym">);
</span>            <span class="kwa">break</span><span class="sym">;
        }
    }

</span>    <span class="kwa">if</span><span class="sym">(</span>len <span class="sym">==</span> Socket<span class="sym">.</span>ERROR<span class="sym">)</span> fwritefln<span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;server/read&quot;</span><span class="sym">);
</span>    sock<span class="sym">.</span>close<span class="sym">();

</span>    writefln<span class="sym">(</span><span class="str">&quot;server processed &quot;</span><span class="sym">,</span>total<span class="sym">,</span><span class="str">&quot; bytes&quot;</span><span class="sym">);

</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}

</span><span class="kwb">int</span> echoClient<span class="sym">(</span><span class="kwb">void</span><span class="sym">*</span> arg<span class="sym">)
{
</span>    <span class="kwb">int</span> n <span class="sym">=</span> cast<span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span>arg<span class="sym">;

</span>    Socket sock <span class="sym">=</span> clientSock<span class="sym">();

</span>    <span class="kwb">char</span><span class="sym">[]</span> input<span class="sym">,</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span><span class="num">4096</span><span class="sym">],</span> output <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)
    {
</span>        <span class="kwb">int</span> len<span class="sym">,</span> total<span class="sym">,</span> start<span class="sym">;
</span>        <span class="kwa">if</span><span class="sym">((</span>len <span class="sym">=</span> sock<span class="sym">.</span>send<span class="sym">(</span>output<span class="sym">)) ==</span> Socket<span class="sym">.</span>ERROR<span class="sym">)
        {
</span>            fwritefln<span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;client/write&quot;</span><span class="sym">);
</span>            <span class="kwa">break</span><span class="sym">;
        }
</span>        <span class="kwa">while</span><span class="sym">((</span>len <span class="sym">=</span> sock<span class="sym">.</span>receive<span class="sym">(</span>buffer<span class="sym">)) &gt;</span> <span class="num">0</span><span class="sym">)
        {
</span>            total <span class="sym">+=</span> len<span class="sym">;
</span>            input<span class="sym">.</span>length <span class="sym">=</span> total<span class="sym">;
</span>            input<span class="sym">[</span>start<span class="sym">..</span>total<span class="sym">] =</span> buffer<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>len<span class="sym">];
</span>            <span class="kwa">if</span><span class="sym">(</span>input<span class="sym">[</span>total <span class="num">- 1</span><span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;
</span>            start <span class="sym">=</span> total<span class="sym">;
        }
</span>        <span class="kwa">if</span><span class="sym">(</span>input <span class="sym">!=</span> output <span class="sym">||</span> len <span class="sym">==</span> Socket<span class="sym">.</span>ERROR<span class="sym">)
        {
</span>            fwritefln<span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;client/read: &quot;</span><span class="sym">,</span>input<span class="sym">,</span><span class="str">&quot; ne</span> <span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>output<span class="sym">);
</span>            <span class="kwa">break</span><span class="sym">;
        }
    }

</span>    sock<span class="sym">.</span>close<span class="sym">();

</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}

</span>Socket serverSock<span class="sym">()
{
</span>    Socket sock <span class="sym">=</span> <span class="kwa">new</span> TcpSocket<span class="sym">();
</span>    sock<span class="sym">.</span>bind<span class="sym">(</span><span class="kwa">new</span> InternetAddress<span class="sym">(</span>InternetAddress<span class="sym">.</span>PORT_ANY<span class="sym">));
</span>    port <span class="sym">= (</span>cast<span class="sym">(</span>InternetAddress<span class="sym">)</span>sock<span class="sym">.</span>localAddress<span class="sym">()).</span>port<span class="sym">;
</span>    sock<span class="sym">.</span>listen<span class="sym">(</span><span class="num">10</span><span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span>sock<span class="sym">);
}

</span>Socket clientSock<span class="sym">()
{
</span>    Socket sock <span class="sym">=</span> <span class="kwa">new</span> TcpSocket<span class="sym">();
</span>    sock<span class="sym">.</span>connect<span class="sym">(</span><span class="kwa">new</span> InternetAddress<span class="sym">(</span>port<span class="sym">));
</span>    <span class="kwa">return</span><span class="sym">(</span>sock<span class="sym">);
}</span>
