<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">(* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy (Oberon-2 novice)
*)</FONT></I>


<B><FONT COLOR="#228B22">MODULE</FONT></B> Wordfreq;
<B><FONT COLOR="#5F9EA0">IMPORT</FONT></B> IO, IO:StdChannels, S<B><FONT COLOR="#5F9EA0">:=</FONT></B>SYSTEM, SimpleHash, Out;
		
<B><FONT COLOR="#5F9EA0">CONST</FONT></B>
   readSize <B><FONT COLOR="#5F9EA0">=</FONT></B> 4096;		
		
<B><FONT COLOR="#A020F0">TYPE</FONT></B>
   FixedBuffer <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">ARRAY</FONT></B> readSize <B><FONT COLOR="#A020F0">OF</FONT></B> <B><FONT COLOR="#228B22">CHAR</FONT></B>;
   FixedBufferProc <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">PROCEDURE</FONT></B> (<B><FONT COLOR="#A020F0">VAR</FONT></B> b: FixedBuffer; <B><FONT COLOR="#A020F0">VAR</FONT></B> pos: <B><FONT COLOR="#228B22">LONGINT</FONT></B>);   		
		
<B><FONT COLOR="#A020F0">VAR</FONT></B>
   buffer: FixedBuffer; 
   wordCounts: SimpleHash.Hashtable;   

   i, size: <B><FONT COLOR="#228B22">LONGINT</FONT></B>; 
   item: SimpleHash.Item;
   items: SimpleHash.Table;


<I><FONT COLOR="#B22222">(* Separate special processing in procedure Process so we can use
   FillAndProcess in other Shootout tests *)</FONT></I>
<B><FONT COLOR="#A020F0">PROCEDURE </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">FillAndProcess</FONT></I></B></FONT></B> (<B><FONT COLOR="#A020F0">VAR</FONT></B> buffer: FixedBuffer; Process: FixedBufferProc);
<B><FONT COLOR="#A020F0">VAR</FONT></B>
   channel: IO.ByteChannel;
   partialFill: <B><FONT COLOR="#228B22">BOOLEAN</FONT></B>;
   size, pos, count: <B><FONT COLOR="#228B22">LONGINT</FONT></B>;
<B><FONT COLOR="#A020F0">BEGIN</FONT></B>
   channel <B><FONT COLOR="#5F9EA0">:=</FONT></B> StdChannels.stdin;
   pos <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0;
   size <B><FONT COLOR="#5F9EA0">:=</FONT></B> readSize;
   <B><FONT COLOR="#A020F0">LOOP</FONT></B>
      TRY
         count <B><FONT COLOR="#5F9EA0">:=</FONT></B> channel.Read(buffer, pos, size <B><FONT COLOR="#5F9EA0">*</FONT></B> <B><FONT COLOR="#A020F0">SIZE</FONT></B>(<B><FONT COLOR="#228B22">CHAR</FONT></B>)); 
         partialFill <B><FONT COLOR="#5F9EA0">:=</FONT></B> count &lt; size; 
         <B><FONT COLOR="#A020F0">IF</FONT></B> partialFill <B><FONT COLOR="#A020F0">THEN</FONT></B> size <B><FONT COLOR="#5F9EA0">:=</FONT></B> pos <B><FONT COLOR="#5F9EA0">+</FONT></B> count; <B><FONT COLOR="#A020F0">ELSE</FONT></B> size <B><FONT COLOR="#5F9EA0">:=</FONT></B> readSize; <B><FONT COLOR="#A020F0">END</FONT></B>;               
         pos <B><FONT COLOR="#5F9EA0">:=</FONT></B> size;	

         Process(buffer,pos);

         <B><FONT COLOR="#A020F0">IF</FONT></B> partialFill <B><FONT COLOR="#A020F0">THEN</FONT></B> <B><FONT COLOR="#A020F0">EXIT</FONT></B>; <B><FONT COLOR="#A020F0">END</FONT></B>;  
         
         <B><FONT COLOR="#A020F0">IF</FONT></B> pos <B><FONT COLOR="#5F9EA0">=</FONT></B> size <B><FONT COLOR="#A020F0">THEN</FONT></B> 
            pos <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0;
            size <B><FONT COLOR="#5F9EA0">:=</FONT></B> readSize;
         <B><FONT COLOR="#A020F0">ELSE</FONT></B>
            S.MOVE(S.ADR(buffer[pos]), S.ADR(buffer[0]), (size<B><FONT COLOR="#5F9EA0">-</FONT></B>pos)<B><FONT COLOR="#5F9EA0">*</FONT></B><B><FONT COLOR="#A020F0">SIZE</FONT></B>(<B><FONT COLOR="#228B22">CHAR</FONT></B>));
            pos <B><FONT COLOR="#5F9EA0">:=</FONT></B> size <B><FONT COLOR="#5F9EA0">-</FONT></B> pos;
            size <B><FONT COLOR="#5F9EA0">:=</FONT></B> readSize <B><FONT COLOR="#5F9EA0">-</FONT></B> pos;
         <B><FONT COLOR="#A020F0">END</FONT></B>;   
                      
      CATCH IO.Error:
         <B><FONT COLOR="#A020F0">EXIT</FONT></B>;
      <B><FONT COLOR="#A020F0">END</FONT></B>;               
   <B><FONT COLOR="#A020F0">END</FONT></B>;
<B><FONT COLOR="#A020F0">END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">FillAndProcess</FONT></I></B></FONT></B>;


<B><FONT COLOR="#A020F0">PROCEDURE </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">CountWords</FONT></I></B></FONT></B>(<B><FONT COLOR="#A020F0">VAR</FONT></B> buffer: FixedBuffer; <B><FONT COLOR="#A020F0">VAR</FONT></B> pos: <B><FONT COLOR="#228B22">LONGINT</FONT></B>);
<B><FONT COLOR="#5F9EA0">CONST</FONT></B>
   maxWordSize <B><FONT COLOR="#5F9EA0">=</FONT></B> 32;
<B><FONT COLOR="#A020F0">TYPE</FONT></B>
   String <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#228B22">POINTER</FONT></B> <B><FONT COLOR="#A020F0">TO</FONT></B> <B><FONT COLOR="#228B22">ARRAY</FONT></B> maxWordSize <B><FONT COLOR="#A020F0">OF</FONT></B> <B><FONT COLOR="#228B22">CHAR</FONT></B>;
<B><FONT COLOR="#A020F0">VAR</FONT></B>
   i, j: <B><FONT COLOR="#228B22">LONGINT</FONT></B>;
   key: SimpleHash.ItemKey;
   word: String;
   c: <B><FONT COLOR="#228B22">CHAR</FONT></B>;     
<B><FONT COLOR="#A020F0">BEGIN</FONT></B>
   i <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0; j <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0; <B><FONT COLOR="#A020F0">NEW</FONT></B>(key, maxWordSize);
   <B><FONT COLOR="#A020F0">WHILE</FONT></B> j &lt; pos <B><FONT COLOR="#A020F0">DO</FONT></B>
      c <B><FONT COLOR="#5F9EA0">:=</FONT></B> buffer[j];
      <B><FONT COLOR="#A020F0">CASE</FONT></B> c <B><FONT COLOR="#A020F0">OF</FONT></B>
         <B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;A&quot;</FONT></B>..<B><FONT COLOR="#BC8F8F">&quot;Z&quot;</FONT></B> : buffer[j] <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#A020F0">CHR</FONT></B>(<B><FONT COLOR="#A020F0">ORD</FONT></B>(c)<B><FONT COLOR="#5F9EA0">+</FONT></B>32); <B><FONT COLOR="#A020F0">INC</FONT></B>(j);      
         <B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;a&quot;</FONT></B>..<B><FONT COLOR="#BC8F8F">&quot;z&quot;</FONT></B> : <B><FONT COLOR="#A020F0">INC</FONT></B>(j);
      <B><FONT COLOR="#A020F0">ELSE</FONT></B>
         <B><FONT COLOR="#A020F0">IF</FONT></B> j <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> i <B><FONT COLOR="#A020F0">THEN</FONT></B>                        
            buffer[j] <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0X;	
            word <B><FONT COLOR="#5F9EA0">:=</FONT></B> S.VAL(String, S.ADR(buffer[i]));		    		
            COPY(word<B><FONT COLOR="#5F9EA0">^</FONT></B>, key<B><FONT COLOR="#5F9EA0">^</FONT></B>);         
         
            item <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.AddKey(wordCounts, key);
            <B><FONT COLOR="#A020F0">INC</FONT></B>(item.value, 1);         
                 
            <B><FONT COLOR="#A020F0">IF</FONT></B> item.value <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 <B><FONT COLOR="#A020F0">THEN</FONT></B> <B><FONT COLOR="#A020F0">NEW</FONT></B>(key, maxWordSize); <B><FONT COLOR="#A020F0">END</FONT></B>;		
         <B><FONT COLOR="#A020F0">END</FONT></B>;
         <B><FONT COLOR="#A020F0">INC</FONT></B>(j); i <B><FONT COLOR="#5F9EA0">:=</FONT></B> j;	                          
      <B><FONT COLOR="#A020F0">END</FONT></B>;   
   <B><FONT COLOR="#A020F0">END</FONT></B>;   
   <B><FONT COLOR="#A020F0">IF</FONT></B> j <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> i <B><FONT COLOR="#A020F0">THEN</FONT></B> pos <B><FONT COLOR="#5F9EA0">:=</FONT></B> i; <B><FONT COLOR="#A020F0">END</FONT></B>; <I><FONT COLOR="#B22222">(* indicate buffer position *)</FONT></I>
<B><FONT COLOR="#A020F0">END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">CountWords</FONT></I></B></FONT></B>;   
   

<B><FONT COLOR="#A020F0">PROCEDURE </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">QuicksortItems</FONT></I></B></FONT></B> (n: <B><FONT COLOR="#228B22">LONGINT</FONT></B>; <B><FONT COLOR="#A020F0">VAR</FONT></B> a: <B><FONT COLOR="#228B22">ARRAY</FONT></B> <B><FONT COLOR="#A020F0">OF</FONT></B> SimpleHash.Item);

<B><FONT COLOR="#A020F0">   PROCEDURE </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Swap</FONT></I></B></FONT></B>(i, j: <B><FONT COLOR="#228B22">LONGINT</FONT></B>);
   <B><FONT COLOR="#A020F0">VAR</FONT></B> t: SimpleHash.Item;
   <B><FONT COLOR="#A020F0">BEGIN</FONT></B>
      t <B><FONT COLOR="#5F9EA0">:=</FONT></B> a[i]; a[i] <B><FONT COLOR="#5F9EA0">:=</FONT></B> a[j]; a[j] <B><FONT COLOR="#5F9EA0">:=</FONT></B> t;
<B><FONT COLOR="#A020F0">   END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Swap</FONT></I></B></FONT></B>;

<B><FONT COLOR="#A020F0">   PROCEDURE </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Sort</FONT></I></B></FONT></B>(l, r: <B><FONT COLOR="#228B22">LONGINT</FONT></B>);
   <B><FONT COLOR="#A020F0">VAR</FONT></B>
      i, j: <B><FONT COLOR="#228B22">LONGINT</FONT></B>;
      pivot: SimpleHash.Item;
   <B><FONT COLOR="#A020F0">BEGIN</FONT></B>
      i <B><FONT COLOR="#5F9EA0">:=</FONT></B> l;
      j <B><FONT COLOR="#5F9EA0">:=</FONT></B> r;
      pivot <B><FONT COLOR="#5F9EA0">:=</FONT></B> a[(l<B><FONT COLOR="#5F9EA0">+</FONT></B>r) <B><FONT COLOR="#A020F0">DIV</FONT></B> 2];
      <B><FONT COLOR="#A020F0">REPEAT</FONT></B>          
         <B><FONT COLOR="#A020F0">WHILE</FONT></B> (a[i].value <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> pivot.value) <B><FONT COLOR="#A020F0">OR</FONT></B>
            ((a[i].value <B><FONT COLOR="#5F9EA0">=</FONT></B> pivot.value) &amp;
	      (a[i].key<B><FONT COLOR="#5F9EA0">^</FONT></B> <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> pivot.key<B><FONT COLOR="#5F9EA0">^</FONT></B>)) <B><FONT COLOR="#A020F0">DO</FONT></B> <B><FONT COLOR="#A020F0">INC</FONT></B>(i); <B><FONT COLOR="#A020F0">END</FONT></B>;
         <B><FONT COLOR="#A020F0">WHILE</FONT></B> (pivot.value <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> a[j].value) <B><FONT COLOR="#A020F0">OR</FONT></B>
            ((pivot.value <B><FONT COLOR="#5F9EA0">=</FONT></B> a[j].value) &amp;
	      (pivot.key<B><FONT COLOR="#5F9EA0">^</FONT></B> <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> a[j].key<B><FONT COLOR="#5F9EA0">^</FONT></B>)) <B><FONT COLOR="#A020F0">DO</FONT></B> <B><FONT COLOR="#A020F0">DEC</FONT></B>(j); <B><FONT COLOR="#A020F0">END</FONT></B>;   
   	
         <B><FONT COLOR="#A020F0">IF</FONT></B> i <B><FONT COLOR="#5F9EA0">&lt;=</FONT></B> j <B><FONT COLOR="#A020F0">THEN</FONT></B> Swap(i, j); <B><FONT COLOR="#A020F0">INC</FONT></B>(i); <B><FONT COLOR="#A020F0">DEC</FONT></B>(j); <B><FONT COLOR="#A020F0">END</FONT></B>;
      <B><FONT COLOR="#A020F0">UNTIL</FONT></B> i <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> j;
      <B><FONT COLOR="#A020F0">IF</FONT></B> l &lt; j <B><FONT COLOR="#A020F0">THEN</FONT></B> Sort(l, j); <B><FONT COLOR="#A020F0">END</FONT></B>;
      <B><FONT COLOR="#A020F0">IF</FONT></B> r <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> i <B><FONT COLOR="#A020F0">THEN</FONT></B> Sort(i, r); <B><FONT COLOR="#A020F0">END</FONT></B>;
<B><FONT COLOR="#A020F0">   END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Sort</FONT></I></B></FONT></B>;
   
<B><FONT COLOR="#A020F0">BEGIN</FONT></B>
   Sort(0, n<B><FONT COLOR="#5F9EA0">-</FONT></B>1);
<B><FONT COLOR="#A020F0">END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">QuicksortItems</FONT></I></B></FONT></B>;


<B><FONT COLOR="#A020F0">BEGIN</FONT></B>  
   wordCounts <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.New(4000);
   FillAndProcess(buffer, CountWords);    
      
   size <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.Count(wordCounts);
   <B><FONT COLOR="#A020F0">NEW</FONT></B>(items, size);
   item <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.First(wordCounts);
   i <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0;
   <B><FONT COLOR="#A020F0">WHILE</FONT></B> item <B><FONT COLOR="#5F9EA0">#</FONT></B> <B><FONT COLOR="#228B22">NIL</FONT></B> <B><FONT COLOR="#A020F0">DO</FONT></B>
      items[i] <B><FONT COLOR="#5F9EA0">:=</FONT></B> item;
      item <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.Next(wordCounts);
      <B><FONT COLOR="#A020F0">INC</FONT></B>(i);
   <B><FONT COLOR="#A020F0">END</FONT></B>;

   QuicksortItems(size, items<B><FONT COLOR="#5F9EA0">^</FONT></B>);

   <B><FONT COLOR="#A020F0">FOR</FONT></B> i <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0 <B><FONT COLOR="#A020F0">TO</FONT></B> size <B><FONT COLOR="#5F9EA0">-</FONT></B> 1 <B><FONT COLOR="#A020F0">DO</FONT></B>
      Out.Int(items[i].value,7); Out.Char(<B><FONT COLOR="#BC8F8F">' '</FONT></B>);
      Out.String(items[i].key<B><FONT COLOR="#5F9EA0">^</FONT></B>); Out.Ln;
   <B><FONT COLOR="#A020F0">END</FONT></B>;
<B><FONT COLOR="#A020F0">END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Wordfreq</FONT></I></B></FONT></B>.</pre></td></tr></table>
