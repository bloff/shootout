<span class="com">(* The Great Computer Language Shootout
    http://shootout.alioth.debian.org
 
    contributed by Isaac Gouy (Oberon-2 novice)
 *)</span>


   <span class="kwa">MODULE</span> Wordfreq<span class="sym">;
 </span><span class="kwa">IMPORT</span> IO<span class="sym">,</span> IO<span class="sym">:</span>StdChannels<span class="sym">,</span> S<span class="sym">:=</span>SYSTEM<span class="sym">,</span> SimpleHash<span class="sym">,</span> Out<span class="sym">;
 
		 </span><span class="kwa">CONST
 </span>   readSize <span class="sym">=</span> <span class="num">4096</span><span class="sym">;
		 
		 </span><span class="kwa">TYPE
 </span>   FixedBuffer <span class="sym">=</span> <span class="kwa">ARRAY</span> readSize <span class="kwa">OF</span> <span class="kwb">CHAR</span><span class="sym">;
 </span>   FixedBufferProc <span class="sym">=</span> <span class="kwa">PROCEDURE</span> <span class="sym">(</span><span class="kwa">VAR</span> b<span class="sym">:</span> FixedBuffer<span class="sym">;</span> <span class="kwa">VAR</span> pos<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">);
   		 
		 </span><span class="kwa">VAR
 </span>   buffer<span class="sym">:</span> FixedBuffer<span class="sym">;
  </span>   wordCounts<span class="sym">:</span> SimpleHash<span class="sym">.</span>Hashtable<span class="sym">;
    
 </span>   i<span class="sym">,</span> size<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
  </span>   item<span class="sym">:</span> SimpleHash<span class="sym">.</span>Item<span class="sym">;
 </span>   items<span class="sym">:</span> SimpleHash<span class="sym">.</span>Table<span class="sym">;
 
 
 </span><span class="com">(* Separate special processing in procedure Process so we can use
    FillAndProcess in other Shootout tests *)</span>
 <span class="kwa">PROCEDURE</span> FillAndProcess <span class="sym">(</span><span class="kwa">VAR</span> buffer<span class="sym">:</span> FixedBuffer<span class="sym">;</span> Process<span class="sym">:</span> FixedBufferProc<span class="sym">);
 </span><span class="kwa">VAR
 </span>   channel<span class="sym">:</span> IO<span class="sym">.</span>ByteChannel<span class="sym">;
 </span>   partialFill<span class="sym">:</span> <span class="kwb">BOOLEAN</span><span class="sym">;
 </span>   size<span class="sym">,</span> pos<span class="sym">,</span> count<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
 </span><span class="kwa">BEGIN
 </span>   channel <span class="sym">:=</span> StdChannels<span class="sym">.</span>stdin<span class="sym">;
 </span>   pos <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
 </span>   size <span class="sym">:=</span> readSize<span class="sym">;
 </span>   <span class="kwa">LOOP
 </span>      TRY
          count <span class="sym">:=</span> channel<span class="sym">.</span>Read<span class="sym">(</span>buffer<span class="sym">,</span> pos<span class="sym">,</span> size <span class="sym">*</span> <span class="kwa">SIZE</span><span class="sym">(</span><span class="kwb">CHAR</span><span class="sym">));
  </span>         partialFill <span class="sym">:=</span> count <span class="sym">&lt;</span> size<span class="sym">;
  </span>         <span class="kwa">IF</span> partialFill <span class="kwa">THEN</span> size <span class="sym">:=</span> pos <span class="sym">+</span> count<span class="sym">;</span> <span class="kwa">ELSE</span> size <span class="sym">:=</span> readSize<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;
                </span>         pos <span class="sym">:=</span> size<span class="sym">;
	 
 </span>         Process<span class="sym">(</span>buffer<span class="sym">,</span>pos<span class="sym">);
 
 </span>         <span class="kwa">IF</span> partialFill <span class="kwa">THEN EXIT</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;
   
          </span>         <span class="kwa">IF</span> pos <span class="sym">=</span> size <span class="kwa">THEN
  </span>            pos <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
 </span>            size <span class="sym">:=</span> readSize<span class="sym">;
 </span>         <span class="kwa">ELSE
 </span>            S<span class="sym">.</span><span class="kwa">MOVE</span><span class="sym">(</span>S<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span>pos<span class="sym">]),</span> S<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span><span class="sym">]), (</span>size<span class="sym">-</span>pos<span class="sym">)*</span><span class="kwa">SIZE</span><span class="sym">(</span><span class="kwb">CHAR</span><span class="sym">));
 </span>            pos <span class="sym">:=</span> size <span class="sym">-</span> pos<span class="sym">;
 </span>            size <span class="sym">:=</span> readSize <span class="sym">-</span> pos<span class="sym">;
 </span>         <span class="kwa">END</span><span class="sym">;
    
                       </span>      CATCH IO<span class="sym">.</span>Error<span class="sym">:
 </span>         <span class="kwa">EXIT</span><span class="sym">;
 </span>      <span class="kwa">END</span><span class="sym">;
                </span>   <span class="kwa">END</span><span class="sym">;
 </span><span class="kwa">END</span> FillAndProcess<span class="sym">;
 
 
 </span><span class="kwa">PROCEDURE</span> CountWords<span class="sym">(</span><span class="kwa">VAR</span> buffer<span class="sym">:</span> FixedBuffer<span class="sym">;</span> <span class="kwa">VAR</span> pos<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">);
 </span><span class="kwa">CONST
 </span>   maxWordSize <span class="sym">=</span> <span class="num">32</span><span class="sym">;
 </span><span class="kwa">TYPE
 </span>   String <span class="sym">=</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY</span> maxWordSize <span class="kwa">OF</span> <span class="kwb">CHAR</span><span class="sym">;
 </span><span class="kwa">VAR
 </span>   i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
 </span>   key<span class="sym">:</span> SimpleHash<span class="sym">.</span>ItemKey<span class="sym">;
 </span>   word<span class="sym">:</span> String<span class="sym">;
 </span>   c<span class="sym">:</span> <span class="kwb">CHAR</span><span class="sym">;
      </span><span class="kwa">BEGIN
 </span>   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwa">NEW</span><span class="sym">(</span>key<span class="sym">,</span> maxWordSize<span class="sym">);
 </span>   <span class="kwa">WHILE</span> j <span class="sym">&lt;</span> pos <span class="kwa">DO
 </span>      c <span class="sym">:=</span> buffer<span class="sym">[</span>j<span class="sym">];
 </span>      <span class="kwa">CASE</span> c <span class="kwa">OF
 </span>         <span class="sym">|</span> <span class="str">&quot;A&quot;</span><span class="sym">..</span><span class="str">&quot;Z&quot;</span> <span class="sym">:</span> buffer<span class="sym">[</span>j<span class="sym">] :=</span> <span class="kwa">CHR</span><span class="sym">(</span><span class="kwa">ORD</span><span class="sym">(</span>c<span class="sym">)+</span><span class="num">32</span><span class="sym">);</span> <span class="kwa">INC</span><span class="sym">(</span>j<span class="sym">);
                |</span> <span class="str">&quot;a&quot;</span><span class="sym">..</span><span class="str">&quot;z&quot;</span> <span class="sym">:</span> <span class="kwa">INC</span><span class="sym">(</span>j<span class="sym">);
 </span>      <span class="kwa">ELSE
          IF</span> j <span class="sym">&gt;</span> i <span class="kwa">THEN
                         </span>            buffer<span class="sym">[</span>j<span class="sym">] :=</span> <span class="num">0X</span><span class="sym">;
	 </span>            word <span class="sym">:=</span> S<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>String<span class="sym">,</span> S<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span>i<span class="sym">]));
		    		 </span>            <span class="kwa">COPY</span><span class="sym">(</span>word^<span class="sym">,</span> key^<span class="sym">);
          
          </span>            item <span class="sym">:=</span> SimpleHash<span class="sym">.</span>AddKey<span class="sym">(</span>wordCounts<span class="sym">,</span> key<span class="sym">);
 </span>            <span class="kwa">INC</span><span class="sym">(</span>item<span class="sym">.</span>value<span class="sym">,</span> <span class="num">1</span><span class="sym">);
          
                  </span>            <span class="kwa">IF</span> item<span class="sym">.</span>value <span class="sym">=</span> <span class="num">1</span> <span class="kwa">THEN NEW</span><span class="sym">(</span>key<span class="sym">,</span> maxWordSize<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
		 </span>         <span class="kwa">END</span><span class="sym">;
 </span>         <span class="kwa">INC</span><span class="sym">(</span>j<span class="sym">);</span> i <span class="sym">:=</span> j<span class="sym">;
	                           </span>      <span class="kwa">END</span><span class="sym">;
    </span>   <span class="kwa">END</span><span class="sym">;
    </span>   <span class="kwa">IF</span> j <span class="sym">&gt;</span> i <span class="kwa">THEN</span> pos <span class="sym">:=</span> i<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span> <span class="com">(* indicate buffer position *)</span>
 <span class="kwa">END</span> CountWords<span class="sym">;
    
    
 </span><span class="kwa">PROCEDURE</span> QuicksortItems <span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span> <span class="kwa">VAR</span> a<span class="sym">:</span> <span class="kwa">ARRAY OF</span> SimpleHash<span class="sym">.</span>Item<span class="sym">);
 
 </span>   <span class="kwa">PROCEDURE</span> Swap<span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">);
 </span>   <span class="kwa">VAR</span> t<span class="sym">:</span> SimpleHash<span class="sym">.</span>Item<span class="sym">;
 </span>   <span class="kwa">BEGIN
 </span>      t <span class="sym">:=</span> a<span class="sym">[</span>i<span class="sym">];</span> a<span class="sym">[</span>i<span class="sym">] :=</span> a<span class="sym">[</span>j<span class="sym">];</span> a<span class="sym">[</span>j<span class="sym">] :=</span> t<span class="sym">;
 </span>   <span class="kwa">END</span> Swap<span class="sym">;
 
 </span>   <span class="kwa">PROCEDURE</span> Sort<span class="sym">(</span>l<span class="sym">,</span> r<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">);
 </span>   <span class="kwa">VAR
 </span>      i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
 </span>      pivot<span class="sym">:</span> SimpleHash<span class="sym">.</span>Item<span class="sym">;
 </span>   <span class="kwa">BEGIN
 </span>      i <span class="sym">:=</span> l<span class="sym">;
 </span>      j <span class="sym">:=</span> r<span class="sym">;
 </span>      pivot <span class="sym">:=</span> a<span class="sym">[(</span>l<span class="sym">+</span>r<span class="sym">)</span> <span class="kwa">DIV</span> <span class="num">2</span><span class="sym">];
 </span>      <span class="kwa">REPEAT
                    WHILE</span> <span class="sym">(</span>a<span class="sym">[</span>i<span class="sym">].</span>value <span class="sym">&gt;</span> pivot<span class="sym">.</span>value<span class="sym">)</span> <span class="kwa">OR
 </span>            <span class="sym">((</span>a<span class="sym">[</span>i<span class="sym">].</span>value <span class="sym">=</span> pivot<span class="sym">.</span>value<span class="sym">) &amp;
 	      (</span>a<span class="sym">[</span>i<span class="sym">].</span>key^ <span class="sym">&gt;</span> pivot<span class="sym">.</span>key^<span class="sym">))</span> <span class="kwa">DO INC</span><span class="sym">(</span>i<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
 </span>         <span class="kwa">WHILE</span> <span class="sym">(</span>pivot<span class="sym">.</span>value <span class="sym">&gt;</span> a<span class="sym">[</span>j<span class="sym">].</span>value<span class="sym">)</span> <span class="kwa">OR
 </span>            <span class="sym">((</span>pivot<span class="sym">.</span>value <span class="sym">=</span> a<span class="sym">[</span>j<span class="sym">].</span>value<span class="sym">) &amp;
 	      (</span>pivot<span class="sym">.</span>key^ <span class="sym">&gt;</span> a<span class="sym">[</span>j<span class="sym">].</span>key^<span class="sym">))</span> <span class="kwa">DO DEC</span><span class="sym">(</span>j<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
    
   	 </span>         <span class="kwa">IF</span> i <span class="sym">&lt;=</span> j <span class="kwa">THEN</span> Swap<span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">);</span> <span class="kwa">INC</span><span class="sym">(</span>i<span class="sym">);</span> <span class="kwa">DEC</span><span class="sym">(</span>j<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
 </span>      <span class="kwa">UNTIL</span> i <span class="sym">&gt;</span> j<span class="sym">;
 </span>      <span class="kwa">IF</span> l <span class="sym">&lt;</span> j <span class="kwa">THEN</span> Sort<span class="sym">(</span>l<span class="sym">,</span> j<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
 </span>      <span class="kwa">IF</span> r <span class="sym">&gt;</span> i <span class="kwa">THEN</span> Sort<span class="sym">(</span>i<span class="sym">,</span> r<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
 </span>   <span class="kwa">END</span> Sort<span class="sym">;
 
    </span><span class="kwa">BEGIN
 </span>   Sort<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="num">-1</span><span class="sym">);
 </span><span class="kwa">END</span> QuicksortItems<span class="sym">;
 
 
 </span><span class="kwa">BEGIN
   </span>   wordCounts <span class="sym">:=</span> SimpleHash<span class="sym">.</span>New<span class="sym">(</span><span class="num">4000</span><span class="sym">);
 </span>   FillAndProcess<span class="sym">(</span>buffer<span class="sym">,</span> CountWords<span class="sym">);
     
       </span>   size <span class="sym">:=</span> SimpleHash<span class="sym">.</span>Count<span class="sym">(</span>wordCounts<span class="sym">);
 </span>   <span class="kwa">NEW</span><span class="sym">(</span>items<span class="sym">,</span> size<span class="sym">);
 </span>   item <span class="sym">:=</span> SimpleHash<span class="sym">.</span>First<span class="sym">(</span>wordCounts<span class="sym">);
 </span>   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
 </span>   <span class="kwa">WHILE</span> item # <span class="kwa">NIL DO
 </span>      items<span class="sym">[</span>i<span class="sym">] :=</span> item<span class="sym">;
 </span>      item <span class="sym">:=</span> SimpleHash<span class="sym">.</span>Next<span class="sym">(</span>wordCounts<span class="sym">);
 </span>      <span class="kwa">INC</span><span class="sym">(</span>i<span class="sym">);
 </span>   <span class="kwa">END</span><span class="sym">;
 
 </span>   QuicksortItems<span class="sym">(</span>size<span class="sym">,</span> items^<span class="sym">);
 
 </span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> size <span class="num">- 1</span> <span class="kwa">DO
 </span>      Out<span class="sym">.</span>Int<span class="sym">(</span>items<span class="sym">[</span>i<span class="sym">].</span>value<span class="sym">,</span><span class="num">7</span><span class="sym">);</span> Out<span class="sym">.</span>Char<span class="sym">(</span>' '<span class="sym">);
 </span>      Out<span class="sym">.</span>String<span class="sym">(</span>items<span class="sym">[</span>i<span class="sym">].</span>key^<span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
 </span>   <span class="kwa">END</span><span class="sym">;
 </span><span class="kwa">END</span> Wordfreq<span class="sym">.</span> 
