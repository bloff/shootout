<span class="slc">;;; $Id: regexmatch-chicken.code,v 1.4 2005-04-13 15:29:21 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>uses srfi<span class="num">-1</span> regex<span class="sym">))

(</span>define rx
  <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append
</span>   <span class="str">&quot;(^|[^0-9</span><span class="esc">\\</span><span class="str">(])&quot;</span>			<span class="slc">; (1) preceeding non-digit or bol
</span>   <span class="str">&quot;(&quot;</span>					<span class="slc">; (2) area code
</span>   <span class="str">&quot;</span><span class="esc">\\</span><span class="str">(([0-9][0-9][0-9])</span><span class="esc">\\</span><span class="str">)&quot;</span>		<span class="slc">; (3) is either 3 digits in parens
</span>   <span class="str">&quot;|&quot;</span>					<span class="slc">; or
</span>   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>			<span class="slc">; (4) just 3 digits
</span>   <span class="str">&quot;)&quot;</span>					<span class="slc">; end of area code
</span>   <span class="str">&quot; &quot;</span>					<span class="slc">; area code is followed by one space
</span>   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>			<span class="slc">; (5) exchange is 3 digits
</span>   <span class="str">&quot;[ -]&quot;</span>				<span class="slc">; separator is either space or dash
</span>   <span class="str">&quot;([0-9][0-9][0-9][0-9])&quot;</span>		<span class="slc">; (6) last 4 digits
</span>   <span class="str">&quot;([^0-9]|$)&quot;</span>				<span class="slc">; must be followed by a non-digit
</span>   <span class="sym">))

(</span>define <span class="sym">(</span>main #<span class="sym">!</span>optional <span class="sym">(</span>n <span class="str">&quot;1&quot;</span><span class="sym">))
  (</span>let <span class="sym">((</span>phonelines <span class="str">'())
	(rx (regexp rx))
	(count 0))
    (let loop ((line (read-line)))
      (cond ((eof-object? line) #f)
	    (else
	     (set! phonelines (cons line phonelines))
	     (loop (read-line)))))
    (set! phonelines (reverse! phonelines))
    (do ([n (string-&gt;number n) (sub1 n)])
	((negative? n))
      (let loop ((phones phonelines)
		 (count 0))
	(if (null? phones)
	    count
	    (begin
	      (match (string-match rx (car phones))
		[(_ _ a1 a2 a3 exch numb _)
		 (let ((area (and a1 (or a2 a3))))
		   (when area
		     (let ((num (string-append &quot;(&quot; area &quot;) &quot; exch &quot;-&quot; numb)))
		       (set! count (add1 count))
		       (when (zero? n) (print count &quot;: &quot; num))) ) ) ]
		[_ #f] )
	      (loop (cdr phones) count) ) ) ) ) ) )

(apply main (command-line-arguments))</span>
