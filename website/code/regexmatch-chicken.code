<span class="line">    1 </span><span class="slc">;;; $Id: regexmatch-chicken.code,v 1.3 2004-11-13 08:28:18 bfulgham Exp $ 
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/ 
</span><span class="line">    3 </span><span class="slc"></span>
<span class="line">    4 </span> <span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>uses srfi<span class="num">-1</span> regex<span class="sym">))
</span><span class="line">    5 </span><span class="sym"> 
</span><span class="line">    6 </span><span class="sym"> (</span>define rx
<span class="line">    7 </span>   <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append
</span><span class="line">    8 </span><span class="kwa"> </span>   <span class="str">&quot;(^|[^0-9</span><span class="esc">\\</span><span class="str">(])&quot;</span>                        <span class="slc">; (1) preceeding non-digit or bol 
</span><span class="line">    9 </span><span class="slc"></span>   <span class="str">&quot;(&quot;</span>                                        <span class="slc">; (2) area code 
</span><span class="line">   10 </span><span class="slc"></span>   <span class="str">&quot;</span><span class="esc">\\</span><span class="str">(([0-9][0-9][0-9])</span><span class="esc">\\</span><span class="str">)&quot;</span>                <span class="slc">; (3) is either 3 digits in parens 
</span><span class="line">   11 </span><span class="slc"></span>   <span class="str">&quot;|&quot;</span>                                        <span class="slc">; or 
</span><span class="line">   12 </span><span class="slc"></span>   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>                        <span class="slc">; (4) just 3 digits 
</span><span class="line">   13 </span><span class="slc"></span>   <span class="str">&quot;)&quot;</span>                                        <span class="slc">; end of area code 
</span><span class="line">   14 </span><span class="slc"></span>   <span class="str">&quot; &quot;</span>                                        <span class="slc">; area code is followed by one space 
</span><span class="line">   15 </span><span class="slc"></span>   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>                        <span class="slc">; (5) exchange is 3 digits 
</span><span class="line">   16 </span><span class="slc"></span>   <span class="str">&quot;[ -]&quot;</span>                                <span class="slc">; separator is either space or dash 
</span><span class="line">   17 </span><span class="slc"></span>   <span class="str">&quot;([0-9][0-9][0-9][0-9])&quot;</span>                <span class="slc">; (6) last 4 digits 
</span><span class="line">   18 </span><span class="slc"></span>   <span class="str">&quot;([^0-9]|$)&quot;</span>                                <span class="slc">; must be followed by a non-digit 
</span><span class="line">   19 </span><span class="slc"></span>   <span class="sym">))
</span><span class="line">   20 </span><span class="sym"> 
</span><span class="line">   21 </span><span class="sym"> (</span>define <span class="sym">(</span>main #<span class="sym">!</span>optional <span class="sym">(</span>n <span class="str">&quot;1&quot;</span><span class="sym">))
</span><span class="line">   22 </span><span class="sym">   (</span>let <span class="sym">((</span>phonelines <span class="str">'())
</span><span class="line">   23 </span><span class="str">         (rx (regexp rx))
</span><span class="line">   24 </span><span class="str">         (count 0))
</span><span class="line">   25 </span><span class="str">     (let loop ((line (read-line)))
</span><span class="line">   26 </span><span class="str">       (cond ((eof-object? line) #f)
</span><span class="line">   27 </span><span class="str">             (else
</span><span class="line">   28 </span><span class="str">              (set! phonelines (cons line phonelines))
</span><span class="line">   29 </span><span class="str">              (loop (read-line)))))
</span><span class="line">   30 </span><span class="str">     (set! phonelines (reverse! phonelines))
</span><span class="line">   31 </span><span class="str">     (do ([n (string-&gt;number n) (sub1 n)])
</span><span class="line">   32 </span><span class="str">         ((negative? n))
</span><span class="line">   33 </span><span class="str">       (let loop ((phones phonelines)
</span><span class="line">   34 </span><span class="str">                  (count 0))
</span><span class="line">   35 </span><span class="str">         (if (null? phones)
</span><span class="line">   36 </span><span class="str">             count
</span><span class="line">   37 </span><span class="str">             (begin
</span><span class="line">   38 </span><span class="str">               (match (string-match rx (car phones))
</span><span class="line">   39 </span><span class="str">                 [(_ _ a1 a2 a3 exch numb _)
</span><span class="line">   40 </span><span class="str">                  (let ((area (and a1 (or a2 a3))))
</span><span class="line">   41 </span><span class="str">                    (when area
</span><span class="line">   42 </span><span class="str">                      (let ((num (string-append &quot;(&quot; area &quot;) &quot; exch &quot;-&quot; numb)))
</span><span class="line">   43 </span><span class="str">                        (set! count (add1 count))
</span><span class="line">   44 </span><span class="str">                        (when (zero? n) (print count &quot;: &quot; num))) ) ) ]
</span><span class="line">   45 </span><span class="str">                 [_ #f] )
</span><span class="line">   46 </span><span class="str">               (loop (cdr phones) count) ) ) ) ) ) )
</span><span class="line">   47 </span><span class="str"> 
</span><span class="line">   48 </span><span class="str"> (apply main (command-line-arguments))</span> 
