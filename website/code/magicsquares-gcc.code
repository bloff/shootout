<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed contributed by Charlie Brej</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>

<span class="kwb">int</span> n<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
<span class="kwb">int</span> mn<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> FfmCache <span class="sym">{</span>
    <span class="kwb">int</span> x<span class="sym">;</span>
    <span class="kwb">int</span> y<span class="sym">;</span>
    <span class="kwb">int</span> pm_count<span class="sym">;</span>
    <span class="kwb">int</span> pm<span class="sym">[];</span>
    <span class="sym">}</span>FfmCache<span class="sym">, *</span>PtrFfmCache<span class="sym">;</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> Square <span class="sym">{</span>
    <span class="kwb">struct</span> Square<span class="sym">*</span> next<span class="sym">;</span>
    PtrFfmCache ffm<span class="sym">;</span>
    <span class="kwb">int</span> priority<span class="sym">;</span>
    <span class="kwb">int</span> <span class="sym">*</span>grid<span class="sym">;</span>
    <span class="kwb">int</span> <span class="sym">*</span>unused<span class="sym">;</span>
    <span class="sym">}</span>Square<span class="sym">, *</span>PtrSquare<span class="sym">;</span>



<span class="kwb">void</span> <span class="kwd">SquarePrint</span><span class="sym">(</span>PtrSquare square<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> x<span class="sym">;</span>
    <span class="kwb">int</span> y<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>y<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> y<span class="sym">&lt;</span>n<span class="sym">;</span> y<span class="sym">++){</span>
        <span class="kwa">for</span> <span class="sym">(</span>x<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> x<span class="sym">&lt;</span>n<span class="sym">;</span> x<span class="sym">++){</span>
            <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%d &quot;</span><span class="sym">,</span> square<span class="sym">-&gt;</span>grid<span class="sym">[</span>x<span class="sym">+</span>y<span class="sym">*</span>n<span class="sym">]);</span>
            <span class="sym">}</span>
        <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
        <span class="sym">}</span>
    <span class="kwa">return</span><span class="sym">;</span>
<span class="sym">}</span>



PtrSquare <span class="kwd">SquareNew</span><span class="sym">(</span><span class="kwb">void</span><span class="sym">)</span>
<span class="sym">{</span>
    PtrSquare new_square <span class="sym">=</span> <span class="kwd">malloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>Square<span class="sym">));</span>
    new_square<span class="sym">-&gt;</span>grid <span class="sym">=</span> <span class="kwd">malloc</span><span class="sym">(</span>n <span class="sym">*</span> n <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">));</span>
    new_square<span class="sym">-&gt;</span>unused <span class="sym">=</span> <span class="kwd">malloc</span><span class="sym">(</span>n <span class="sym">*</span> n <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">));</span>
    new_square<span class="sym">-&gt;</span>next<span class="sym">=</span>NULL<span class="sym">;</span>
    new_square<span class="sym">-&gt;</span>ffm<span class="sym">=</span>NULL<span class="sym">;</span>
    new_square<span class="sym">-&gt;</span>priority<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwa">return</span> new_square<span class="sym">;</span>
<span class="sym">}</span>

PtrSquare <span class="kwd">SquareNewEmpty</span><span class="sym">(</span><span class="kwb">void</span><span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    PtrSquare new_square <span class="sym">=</span> <span class="kwd">SquareNew</span><span class="sym">();</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">*</span>n<span class="sym">;</span> i<span class="sym">++){</span>
        new_square<span class="sym">-&gt;</span>grid<span class="sym">[</span>i<span class="sym">]=</span><span class="num">0</span><span class="sym">;</span>
        new_square<span class="sym">-&gt;</span>unused<span class="sym">[</span>i<span class="sym">]=</span><span class="num">1</span><span class="sym">;</span>
        <span class="sym">}</span>
    <span class="kwa">return</span> new_square<span class="sym">;</span>
<span class="sym">}</span>


PtrSquare <span class="kwd">SquareNewCopy</span><span class="sym">(</span>PtrSquare old_square<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    PtrSquare new_square <span class="sym">=</span> <span class="kwd">SquareNew</span><span class="sym">();</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">*</span>n<span class="sym">;</span> i<span class="sym">++){</span>
        new_square<span class="sym">-&gt;</span>grid<span class="sym">[</span>i<span class="sym">]=</span>old_square<span class="sym">-&gt;</span>grid<span class="sym">[</span>i<span class="sym">];</span>
        new_square<span class="sym">-&gt;</span>unused<span class="sym">[</span>i<span class="sym">]=</span>old_square<span class="sym">-&gt;</span>unused<span class="sym">[</span>i<span class="sym">];</span>
        <span class="sym">}</span>
    <span class="kwa">return</span> new_square<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">SquareFree</span><span class="sym">(</span>PtrSquare square<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwd">free</span><span class="sym">(</span>square<span class="sym">-&gt;</span>ffm<span class="sym">);</span>
    <span class="kwd">free</span><span class="sym">(</span>square<span class="sym">-&gt;</span>unused<span class="sym">);</span>
    <span class="kwd">free</span><span class="sym">(</span>square<span class="sym">);</span>
    <span class="kwa">return</span> <span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">SquareGetRow</span><span class="sym">(</span>PtrSquare square<span class="sym">,</span> <span class="kwb">int</span> row<span class="sym">,</span> <span class="kwb">int</span><span class="sym">*</span> out_array<span class="sym">)</span>
<span class="sym">{</span>
 <span class="kwb">int</span> i<span class="sym">;</span>
 <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){</span>
    out_array<span class="sym">[</span>i<span class="sym">] =</span> square<span class="sym">-&gt;</span>grid<span class="sym">[</span>row<span class="sym">*</span>n<span class="sym">+</span>i<span class="sym">];</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">SquareGetColumn</span><span class="sym">(</span>PtrSquare square<span class="sym">,</span> <span class="kwb">int</span> column<span class="sym">,</span> <span class="kwb">int</span><span class="sym">*</span> out_array<span class="sym">)</span>
<span class="sym">{</span>
 <span class="kwb">int</span> i<span class="sym">;</span>
 <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){</span>
    out_array<span class="sym">[</span>i<span class="sym">] =</span> square<span class="sym">-&gt;</span>grid<span class="sym">[</span>n<span class="sym">*</span>i<span class="sym">+</span>column<span class="sym">];</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">IntArraySum</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">*</span> data<span class="sym">)</span>
<span class="sym">{</span>
 <span class="kwb">int</span> i<span class="sym">;</span>
 <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
 <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){</span>
    sum <span class="sym">+=</span> data<span class="sym">[</span>i<span class="sym">];</span>
    <span class="sym">}</span>
 <span class="kwa">return</span> sum<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">IntArrayCount0s</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">*</span> data<span class="sym">)</span>
<span class="sym">{</span>
 <span class="kwb">int</span> i<span class="sym">;</span>
 <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
 <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="kwa">if</span><span class="sym">(</span>data<span class="sym">[</span>i<span class="sym">]==</span><span class="num">0</span><span class="sym">)</span>
        count<span class="sym">++;</span>
 <span class="kwa">return</span> count<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">SquareNumberPresent</span><span class="sym">(</span>PtrSquare square<span class="sym">,</span> <span class="kwb">int</span> number<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">*</span>n<span class="sym">;</span> i<span class="sym">++){</span>
        <span class="kwa">if</span> <span class="sym">(</span>square<span class="sym">-&gt;</span>grid<span class="sym">[</span>i<span class="sym">] ==</span> number<span class="sym">)</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
        <span class="sym">}</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">SquareEmptyCount</span><span class="sym">(</span>PtrSquare square<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    <span class="kwb">int</span> count<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">*</span>n<span class="sym">;</span> i<span class="sym">++){</span>
        <span class="kwa">if</span> <span class="sym">(</span>square<span class="sym">-&gt;</span>grid<span class="sym">[</span>i<span class="sym">] ==</span> <span class="num">0</span><span class="sym">)</span> count<span class="sym">++;</span>
        <span class="sym">}</span>
    <span class="kwa">return</span> count<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">SquareGetPossibleMoves</span><span class="sym">(</span>PtrSquare square<span class="sym">,</span> <span class="kwb">int</span> x<span class="sym">,</span> <span class="kwb">int</span> y<span class="sym">,</span> <span class="kwb">int</span><span class="sym">*</span> ret_pm<span class="sym">,</span> <span class="kwb">int</span><span class="sym">*</span> ret_pm_count<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> cell_groups<span class="sym">[</span><span class="num">4</span><span class="sym">][</span>n<span class="sym">];</span>
    <span class="kwb">int</span> cell_group_count<span class="sym">=</span><span class="num">2</span><span class="sym">;</span>
    <span class="kwb">int</span> group<span class="sym">;</span>
    <span class="kwb">int</span> i<span class="sym">,</span> i2<span class="sym">;</span>
    <span class="kwb">int</span> cur_acc<span class="sym">;</span>
    <span class="kwb">int</span> highest_candidate <span class="sym">=</span> n<span class="sym">*</span>n<span class="sym">;</span>
    <span class="kwb">int</span> lowest_candidate <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwb">int</span> one_possible <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>


    <span class="kwd">SquareGetRow</span><span class="sym">(</span>square<span class="sym">,</span> y<span class="sym">,</span> cell_groups<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
    <span class="kwd">SquareGetColumn</span><span class="sym">(</span>square<span class="sym">,</span> x<span class="sym">,</span> cell_groups<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>

    <span class="sym">*</span>ret_pm_count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>x<span class="sym">==</span>y<span class="sym">) {</span>
        <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span>
            cell_groups<span class="sym">[</span>cell_group_count<span class="sym">][</span>i<span class="sym">] =</span> square<span class="sym">-&gt;</span>grid<span class="sym">[</span>n<span class="sym">*</span>i<span class="sym">+</span>i<span class="sym">];</span>
        cell_group_count<span class="sym">++;</span>
        <span class="sym">}</span>
    <span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">+</span> y <span class="sym">==</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">) {</span>
        <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span>
            cell_groups<span class="sym">[</span>cell_group_count<span class="sym">][</span>i<span class="sym">] =</span> square<span class="sym">-&gt;</span>grid<span class="sym">[</span>i <span class="sym">+ (</span>n <span class="sym">-</span> <span class="num">1</span> <span class="sym">-</span> i<span class="sym">) *</span> n<span class="sym">];</span>
        cell_group_count<span class="sym">++;</span>
        <span class="sym">}</span>

    <span class="kwa">for</span> <span class="sym">(</span>group<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> group<span class="sym">&lt;</span>cell_group_count<span class="sym">;</span> group<span class="sym">++){</span>
        <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){</span>
            <span class="kwa">if</span> <span class="sym">(</span>cell_groups<span class="sym">[</span>group<span class="sym">][</span>i<span class="sym">] ==</span> <span class="num">0</span><span class="sym">){</span>
                <span class="kwa">if</span> <span class="sym">(</span>count<span class="sym">++)</span> <span class="kwa">break</span><span class="sym">;</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
        <span class="kwa">if</span> <span class="sym">(</span>count<span class="sym">==</span><span class="num">1</span><span class="sym">){</span>
            <span class="kwb">int</span> new_one_possible <span class="sym">=</span> mn <span class="sym">-</span> <span class="kwd">IntArraySum</span><span class="sym">(</span>cell_groups<span class="sym">[</span>group<span class="sym">]);</span>
            <span class="kwa">if</span> <span class="sym">(</span>one_possible<span class="sym">==</span><span class="num">0</span><span class="sym">){</span>
                one_possible <span class="sym">=</span> new_one_possible<span class="sym">;</span>
                <span class="kwa">if</span> <span class="sym">(</span>one_possible<span class="sym">&lt;</span><span class="num">1</span> <span class="sym">||</span> one_possible<span class="sym">&gt;</span>n<span class="sym">*</span>n <span class="sym">||</span> <span class="kwd">SquareNumberPresent</span><span class="sym">(</span>square<span class="sym">,</span> one_possible<span class="sym">))</span> <span class="kwa">return</span><span class="sym">;</span>
                <span class="sym">}</span>
            <span class="kwa">if</span> <span class="sym">(</span>one_possible <span class="sym">!=</span> new_one_possible<span class="sym">)</span> <span class="kwa">return</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="kwa">if</span> <span class="sym">(</span>one_possible<span class="sym">){</span>
        ret_pm<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> one_possible<span class="sym">;</span>
        <span class="sym">*</span>ret_pm_count <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">return</span><span class="sym">;</span>
        <span class="sym">}</span>


    <span class="kwb">int</span> local_pm_count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> zeros<span class="sym">[</span>cell_group_count<span class="sym">];</span>
    <span class="kwb">int</span> highest_zero_count<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>cell_group_count<span class="sym">;</span> i<span class="sym">++){</span>
        <span class="kwb">int</span> zero_count <span class="sym">=</span> <span class="kwd">IntArrayCount0s</span><span class="sym">(</span>cell_groups<span class="sym">[</span>i<span class="sym">])-</span><span class="num">1</span><span class="sym">;</span>
        zeros<span class="sym">[</span>i<span class="sym">] =</span> zero_count<span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span>highest_zero_count <span class="sym">&lt;</span> zero_count<span class="sym">)</span> highest_zero_count <span class="sym">=</span> zero_count<span class="sym">;</span>
        <span class="sym">}</span>

    <span class="kwb">int</span> lows<span class="sym">[</span>highest_zero_count<span class="sym">];</span>
    <span class="kwb">int</span> higs<span class="sym">[</span>highest_zero_count<span class="sym">];</span>

    i2<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    cur_acc<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i2<span class="sym">&lt;</span>highest_zero_count<span class="sym">;</span> i<span class="sym">++){</span>
        <span class="kwa">if</span><span class="sym">(</span>square<span class="sym">-&gt;</span>unused<span class="sym">[</span>i<span class="sym">]){</span>
            cur_acc<span class="sym">+=(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
            lows<span class="sym">[</span>i2<span class="sym">]=</span>cur_acc<span class="sym">;</span>
            i2<span class="sym">++;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>

    i2<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    cur_acc<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span>n<span class="sym">*</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i2<span class="sym">&lt;</span>highest_zero_count<span class="sym">;</span> i<span class="sym">--){</span>
        <span class="kwa">if</span><span class="sym">(</span>square<span class="sym">-&gt;</span>unused<span class="sym">[</span>i<span class="sym">]){</span>
            cur_acc<span class="sym">+=(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
            higs<span class="sym">[</span>i2<span class="sym">]=</span>cur_acc<span class="sym">;</span>
            i2<span class="sym">++;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>

    <span class="kwa">for</span> <span class="sym">(</span>group<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> group<span class="sym">&lt;</span>cell_group_count<span class="sym">;</span> group<span class="sym">++){</span>
        <span class="kwb">int</span> lft <span class="sym">=</span> mn <span class="sym">-</span> <span class="kwd">IntArraySum</span><span class="sym">(</span>cell_groups<span class="sym">[</span>group<span class="sym">]);</span>
        <span class="kwb">int</span> k <span class="sym">=</span> zeros<span class="sym">[</span>group<span class="sym">];</span>
        <span class="kwb">int</span> temp_highest_candidate <span class="sym">=</span> lft <span class="sym">-</span> lows<span class="sym">[</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
        <span class="kwb">int</span> temp_lowest_candidate <span class="sym">=</span> lft <span class="sym">-</span> higs<span class="sym">[</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
        <span class="kwa">if</span> <span class="sym">(</span>temp_highest_candidate<span class="sym">&lt;</span>highest_candidate<span class="sym">)</span> highest_candidate <span class="sym">=</span> temp_highest_candidate<span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span>temp_lowest_candidate<span class="sym">&gt;</span>lowest_candidate<span class="sym">)</span>   lowest_candidate <span class="sym">=</span>  temp_lowest_candidate<span class="sym">;</span>
        <span class="sym">}</span>

    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span>lowest_candidate<span class="sym">;</span> i<span class="sym">&lt;=</span>highest_candidate<span class="sym">;</span> i<span class="sym">++){</span>
        <span class="kwa">if</span><span class="sym">(</span>square<span class="sym">-&gt;</span>unused<span class="sym">[</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">]){</span>
            ret_pm<span class="sym">[</span>local_pm_count<span class="sym">++]=</span>i<span class="sym">;</span>

            <span class="sym">}</span>

        <span class="sym">}</span>


    <span class="sym">*</span>ret_pm_count <span class="sym">=</span> local_pm_count<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">;</span>


<span class="sym">}</span>


PtrFfmCache <span class="kwd">SquareGetFewestMoves</span><span class="sym">(</span>PtrSquare square<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> x<span class="sym">,</span>y<span class="sym">;</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>square<span class="sym">-&gt;</span>ffm<span class="sym">){</span>
        <span class="kwa">return</span> square<span class="sym">-&gt;</span>ffm<span class="sym">;</span>
        <span class="sym">}</span>
    square<span class="sym">-&gt;</span>ffm <span class="sym">=</span> <span class="kwd">malloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>FfmCache<span class="sym">)+</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)*</span>n<span class="sym">*</span>n<span class="sym">);</span>
    square<span class="sym">-&gt;</span>ffm<span class="sym">-&gt;</span>pm_count<span class="sym">=</span>n<span class="sym">*</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>

    <span class="kwa">for</span> <span class="sym">(</span>y<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> y<span class="sym">&lt;</span>n<span class="sym">;</span> y<span class="sym">++)</span>
        <span class="kwa">for</span> <span class="sym">(</span>x<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> x<span class="sym">&lt;</span>n<span class="sym">;</span> x<span class="sym">++){</span>
            <span class="kwb">int</span> index <span class="sym">=</span> x <span class="sym">+</span> y <span class="sym">*</span> n<span class="sym">;</span>
            <span class="kwa">if</span> <span class="sym">(</span>square<span class="sym">-&gt;</span>grid<span class="sym">[</span>index<span class="sym">] ==</span> <span class="num">0</span><span class="sym">){</span>
                <span class="kwb">int</span> temp_list<span class="sym">[</span>n<span class="sym">*</span>n<span class="sym">];</span>
                <span class="kwb">int</span> temp_list_count<span class="sym">;</span>
                <span class="kwd">SquareGetPossibleMoves</span><span class="sym">(</span>square<span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">,</span>temp_list<span class="sym">,&amp;</span>temp_list_count<span class="sym">);</span>
                <span class="kwa">if</span> <span class="sym">(</span>temp_list_count<span class="sym">&lt;</span>square<span class="sym">-&gt;</span>ffm<span class="sym">-&gt;</span>pm_count<span class="sym">){</span>
                    square<span class="sym">-&gt;</span>ffm<span class="sym">-&gt;</span>pm_count <span class="sym">=</span> temp_list_count<span class="sym">;</span>
                    square<span class="sym">-&gt;</span>ffm<span class="sym">-&gt;</span>x <span class="sym">=</span> x<span class="sym">;</span>
                    square<span class="sym">-&gt;</span>ffm<span class="sym">-&gt;</span>y <span class="sym">=</span> y<span class="sym">;</span>
                    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>square<span class="sym">-&gt;</span>ffm<span class="sym">-&gt;</span>pm_count<span class="sym">;</span> i<span class="sym">++)</span> square<span class="sym">-&gt;</span>ffm<span class="sym">-&gt;</span>pm<span class="sym">[</span>i<span class="sym">] =</span> temp_list<span class="sym">[</span>i<span class="sym">];</span>
                    <span class="sym">}</span>
                <span class="sym">}</span>
            <span class="sym">}</span>


    <span class="kwa">if</span> <span class="sym">(</span>square<span class="sym">-&gt;</span>ffm<span class="sym">-&gt;</span>pm_count<span class="sym">&gt;</span>n<span class="sym">*</span>n<span class="sym">)</span> square<span class="sym">-&gt;</span>ffm<span class="sym">-&gt;</span>pm_count<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
    <span class="kwa">return</span> square<span class="sym">-&gt;</span>ffm<span class="sym">;</span>


<span class="sym">}</span>


<span class="kwb">int</span> <span class="kwd">SquareGetPriority</span><span class="sym">(</span>PtrSquare square<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> priority<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>square<span class="sym">-&gt;</span>priority<span class="sym">)</span> <span class="kwa">return</span> square<span class="sym">-&gt;</span>priority<span class="sym">;</span>
    PtrFfmCache ffm <span class="sym">=</span> <span class="kwd">SquareGetFewestMoves</span><span class="sym">(</span>square<span class="sym">);</span>
    priority <span class="sym">=</span> ffm<span class="sym">-&gt;</span>pm_count <span class="sym">+</span> <span class="kwd">SquareEmptyCount</span><span class="sym">(</span>square<span class="sym">);</span>
    square<span class="sym">-&gt;</span>priority <span class="sym">=</span> priority<span class="sym">;</span>
    <span class="kwa">return</span> priority<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">SquareCompare</span><span class="sym">(</span>PtrSquare square1<span class="sym">,</span> PtrSquare square2<span class="sym">)</span>
<span class="sym">{</span>
 <span class="kwb">int</span> c <span class="sym">=</span> <span class="kwd">SquareGetPriority</span><span class="sym">(</span>square1<span class="sym">) -</span> <span class="kwd">SquareGetPriority</span><span class="sym">(</span>square2<span class="sym">);</span>
 <span class="kwa">if</span> <span class="sym">(</span>c<span class="sym">==</span><span class="num">0</span><span class="sym">){</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> c<span class="sym">==</span><span class="num">0</span> <span class="sym">&amp;&amp;</span> i<span class="sym">&lt;</span>n<span class="sym">*</span>n<span class="sym">;</span> i<span class="sym">++){</span>
        c <span class="sym">=</span> square1<span class="sym">-&gt;</span>grid<span class="sym">[</span>i<span class="sym">] -</span> square2<span class="sym">-&gt;</span>grid<span class="sym">[</span>i<span class="sym">];</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
 <span class="kwa">return</span> c<span class="sym">;</span>
<span class="sym">}</span>

PtrSquare <span class="kwd">SquareQueueMerge</span><span class="sym">(</span>PtrSquare queue1<span class="sym">,</span> PtrSquare queue2<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">if</span> <span class="sym">(!</span>queue1<span class="sym">)</span> <span class="kwa">return</span> queue2<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(!</span>queue2<span class="sym">)</span> <span class="kwa">return</span> queue1<span class="sym">;</span>

    PtrSquare new_queue <span class="sym">=</span> NULL<span class="sym">;</span>
    PtrSquare<span class="sym">*</span> cur_ptr <span class="sym">= &amp;</span>new_queue<span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">){</span>
        <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">SquareCompare</span><span class="sym">(</span>queue1<span class="sym">,</span> queue2<span class="sym">)&lt;</span><span class="num">0</span><span class="sym">){</span>
            <span class="sym">*</span>cur_ptr <span class="sym">=</span> queue1<span class="sym">;</span>
            cur_ptr <span class="sym">= &amp;</span>queue1<span class="sym">-&gt;</span>next<span class="sym">;</span>
            queue1 <span class="sym">=</span> queue1<span class="sym">-&gt;</span>next<span class="sym">;</span>
            <span class="kwa">if</span> <span class="sym">(!</span>queue1<span class="sym">){</span>
                <span class="sym">*</span>cur_ptr <span class="sym">=</span> queue2<span class="sym">;</span>
                <span class="kwa">return</span> new_queue<span class="sym">;</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
        <span class="kwa">else</span> <span class="sym">{</span>
            <span class="sym">*</span>cur_ptr <span class="sym">=</span> queue2<span class="sym">;</span>
            cur_ptr <span class="sym">= &amp;</span>queue2<span class="sym">-&gt;</span>next<span class="sym">;</span>
            queue2 <span class="sym">=</span> queue2<span class="sym">-&gt;</span>next<span class="sym">;</span>
            <span class="kwa">if</span> <span class="sym">(!</span>queue2<span class="sym">){</span>
                <span class="sym">*</span>cur_ptr <span class="sym">=</span> queue1<span class="sym">;</span>
                <span class="kwa">return</span> new_queue<span class="sym">;</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
<span class="sym">}</span>

PtrSquare <span class="kwd">SquareGetSuccessorNodes</span><span class="sym">(</span>PtrSquare square<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    PtrSquare square_queue <span class="sym">=</span> NULL<span class="sym">;</span>
    PtrFfmCache ffm <span class="sym">=</span> <span class="kwd">SquareGetFewestMoves</span><span class="sym">(</span>square<span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>ffm<span class="sym">-&gt;</span>pm_count<span class="sym">;</span> i<span class="sym">++){</span>
        PtrSquare new_square <span class="sym">=</span> <span class="kwd">SquareNewCopy</span><span class="sym">(</span>square<span class="sym">);</span>
        new_square<span class="sym">-&gt;</span>grid<span class="sym">[</span>ffm<span class="sym">-&gt;</span>x<span class="sym">+</span>ffm<span class="sym">-&gt;</span>y<span class="sym">*</span>n<span class="sym">] =</span> ffm<span class="sym">-&gt;</span>pm<span class="sym">[</span>i<span class="sym">];</span>
        new_square<span class="sym">-&gt;</span>unused<span class="sym">[</span>ffm<span class="sym">-&gt;</span>pm<span class="sym">[</span>i<span class="sym">]-</span><span class="num">1</span><span class="sym">]=</span><span class="num">0</span><span class="sym">;</span>
        square_queue <span class="sym">=</span> <span class="kwd">SquareQueueMerge</span><span class="sym">(</span>square_queue<span class="sym">,</span> new_square<span class="sym">);</span>
        <span class="sym">}</span>
    <span class="kwa">return</span> square_queue<span class="sym">;</span>
<span class="sym">}</span>



<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">)</span>
<span class="sym">{</span>

    <span class="kwa">if</span> <span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> n <span class="sym">=</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
    <span class="kwa">else</span>         n <span class="sym">=</span> <span class="num">5</span><span class="sym">;</span>
    mn <span class="sym">=</span> n <span class="sym">* (</span><span class="num">1</span> <span class="sym">+</span> n <span class="sym">*</span> n<span class="sym">) /</span> <span class="num">2</span><span class="sym">;</span>

    PtrSquare queue <span class="sym">=</span> <span class="kwd">SquareNewEmpty</span><span class="sym">();</span>
    PtrSquare cur_square<span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>queue<span class="sym">){</span>
        cur_square <span class="sym">=</span> queue<span class="sym">;</span>
        queue <span class="sym">=</span> queue<span class="sym">-&gt;</span>next<span class="sym">;</span>

        <span class="kwb">int</span> priority <span class="sym">=</span> <span class="kwd">SquareGetPriority</span><span class="sym">(</span>cur_square<span class="sym">);</span>
        <span class="kwa">if</span> <span class="sym">(!</span>priority<span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>


        PtrSquare successor_nodes <span class="sym">=</span> <span class="kwd">SquareGetSuccessorNodes</span><span class="sym">(</span>cur_square<span class="sym">);</span>
        queue <span class="sym">=</span> <span class="kwd">SquareQueueMerge</span><span class="sym">(</span>queue<span class="sym">,</span> successor_nodes<span class="sym">);</span>
        <span class="kwd">SquareFree</span><span class="sym">(</span>cur_square<span class="sym">);</span>
        <span class="sym">}</span>

    <span class="kwd">SquarePrint</span><span class="sym">(</span>cur_square<span class="sym">);</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
