<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// $Id: lists1-gij.code,v 1.2 2004-11-08 08:15:15 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://www.bagley.org/~doug/shootout/
</FONT></I>
<B><FONT COLOR="#A020F0">import</FONT></B> java.io.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.util.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.text.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.lang.reflect.*;

<B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">class</FONT></B> lists1 {
    <B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">static</FONT></B> <B><FONT COLOR="#A020F0">void</FONT></B> main(String args[]) {
	<B><FONT COLOR="#A020F0">int</FONT></B> n = Integer.parseInt(args[0]);

	<I><FONT COLOR="#B22222">// create empty list B
</FONT></I>	LinkedList B = <B><FONT COLOR="#A020F0">new</FONT></B> LinkedList();

	<I><FONT COLOR="#B22222">// create list (A) of integers from 1 through N
</FONT></I>	LinkedList A = <B><FONT COLOR="#A020F0">new</FONT></B> LinkedList();
	<B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#A020F0">int</FONT></B> i=n; i&gt;0; i--) {
	    A.addFirst(<B><FONT COLOR="#A020F0">new</FONT></B> Integer(i));
	}

	<I><FONT COLOR="#B22222">// move each individual item from A to B, in a loop, reversing order
</FONT></I>	<B><FONT COLOR="#A020F0">while</FONT></B> (! A.isEmpty()) {
	    B.addFirst(A.removeFirst());
	}

	<I><FONT COLOR="#B22222">// print first 2 elements of B
</FONT></I>	System.out.println(B.get(0) + <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> + B.get(1));

	<I><FONT COLOR="#B22222">// reverse B (can be done in place)
</FONT></I>	LinkedList tmp = <B><FONT COLOR="#A020F0">new</FONT></B> LinkedList();
	<B><FONT COLOR="#A020F0">while</FONT></B> (! B.isEmpty()) {
	    tmp.addFirst(B.removeFirst());
	}
	B = tmp;
	<I><FONT COLOR="#B22222">// java.util.Collections.reverse(B);
</FONT></I>

	<I><FONT COLOR="#B22222">// is 0 a member of B?
</FONT></I>	System.out.println((B.contains(<B><FONT COLOR="#A020F0">new</FONT></B> Integer(0))) ? <B><FONT COLOR="#BC8F8F">&quot;true&quot;</FONT></B> : <B><FONT COLOR="#BC8F8F">&quot;false&quot;</FONT></B>);

	<I><FONT COLOR="#B22222">// is N a member of B?
</FONT></I>	System.out.println((B.contains(<B><FONT COLOR="#A020F0">new</FONT></B> Integer(n))) ? <B><FONT COLOR="#BC8F8F">&quot;true&quot;</FONT></B> : <B><FONT COLOR="#BC8F8F">&quot;false&quot;</FONT></B>);

	<I><FONT COLOR="#B22222">// filter values from B to A that are less than N/2, preserving order
</FONT></I>	<B><FONT COLOR="#A020F0">int</FONT></B> mid = n/2;
	<B><FONT COLOR="#A020F0">for</FONT></B> (ListIterator li = B.listIterator(); li.hasNext();) {
	    <B><FONT COLOR="#A020F0">int</FONT></B> val = ((Integer)li.next()).intValue();
	    <B><FONT COLOR="#A020F0">if</FONT></B> (val &lt; mid) A.addLast(<B><FONT COLOR="#A020F0">new</FONT></B> Integer(val));
	}

	<I><FONT COLOR="#B22222">// print first ten items of A
</FONT></I>	<B><FONT COLOR="#A020F0">int</FONT></B> i = 0;
	<B><FONT COLOR="#A020F0">for</FONT></B> (ListIterator li = A.listIterator(); i&lt;10 &amp;&amp; li.hasNext(); i++) {
	    System.out.print(((Integer)li.next()).intValue() + ((i&lt;9) ? <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> : <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>));
	}

	<I><FONT COLOR="#B22222">// print sum of items in A that are less than 1000
</FONT></I>	<B><FONT COLOR="#A020F0">int</FONT></B> sum = 0;
	<B><FONT COLOR="#A020F0">for</FONT></B> (ListIterator li = A.listIterator(); li.hasNext();) {
	    <B><FONT COLOR="#A020F0">int</FONT></B> val = ((Integer)li.next()).intValue();
	    <B><FONT COLOR="#A020F0">if</FONT></B> (val &lt; 1000) sum += val;
	}
	System.out.println(sum);

	<I><FONT COLOR="#B22222">// append B to end of A
</FONT></I>	A.addAll(B);

	<I><FONT COLOR="#B22222">// print length and last element of A
</FONT></I>	System.out.println(A.size() + <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> + ((Integer)A.getLast()).intValue());
    }
}</pre></td></tr></table>
