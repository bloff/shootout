<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># converted to D by Dave Fladebo</span>
<span class="slc"># Adapted for the max speed to Python+Psyco from D by bearophile</span>

<span class="kwc">import</span> sys<span class="sym">,</span> array

<span class="kwb">def</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">):</span>
    perm <span class="sym">=</span> array<span class="sym">.</span><span class="kwd">array</span><span class="sym">(</span><span class="str">'l'</span><span class="sym">, [</span><span class="num">0</span><span class="sym">] *</span> n<span class="sym">)</span>
    perm1 <span class="sym">=</span> array<span class="sym">.</span><span class="kwd">array</span><span class="sym">(</span><span class="str">'l'</span><span class="sym">,</span> <span class="kwa">range</span><span class="sym">(</span>n<span class="sym">))</span>
    count <span class="sym">=</span> array<span class="sym">.</span><span class="kwd">array</span><span class="sym">(</span><span class="str">'l'</span><span class="sym">, [</span><span class="num">0</span><span class="sym">] *</span> n<span class="sym">)</span>
    m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span>
    r <span class="sym">=</span> n
    maxFlipsCount <span class="sym">=</span> <span class="num">0</span>
    didpr <span class="sym">=</span> <span class="num">0</span>

    <span class="kwb">while</span> True<span class="sym">:</span>
        <span class="kwb">if</span> didpr <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">:</span>
            <span class="kwb">print</span> <span class="str">&quot;&quot;</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span><span class="kwa">str</span><span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwb">for</span> i <span class="kwb">in</span> perm1<span class="sym">)</span>
            didpr <span class="sym">+=</span> <span class="num">1</span>

        <span class="kwb">while</span> r <span class="sym">!=</span> <span class="num">1</span><span class="sym">:</span>
            count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r
            r <span class="sym">-=</span> <span class="num">1</span>

        <span class="kwb">if</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]</span> <span class="kwb">and</span> perm1<span class="sym">[</span>m<span class="sym">] !=</span> m<span class="sym">:</span>
            <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">):</span>
                perm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">]</span> <span class="slc"># To avoid memory trashing</span>

            i <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
            flips <span class="sym">=</span> <span class="num">0</span>
            <span class="kwb">while</span> i<span class="sym">:</span>
                temp <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">]</span>
                perm<span class="sym">[</span>i<span class="sym">] =</span> i
                i <span class="sym">=</span> temp

                j <span class="sym">=</span> <span class="num">1</span>
                k <span class="sym">=</span> i <span class="sym">-</span> <span class="num">1</span>
                <span class="kwb">while</span> j <span class="sym">&lt;</span> k<span class="sym">:</span>
                    temp <span class="sym">=</span> perm<span class="sym">[</span>j<span class="sym">]</span>
                    perm<span class="sym">[</span>j<span class="sym">] =</span> perm<span class="sym">[</span>k<span class="sym">]</span>
                    perm<span class="sym">[</span>k<span class="sym">] =</span> temp
                    j <span class="sym">+=</span> <span class="num">1</span>
                    k <span class="sym">-=</span> <span class="num">1</span>
                flips <span class="sym">+=</span> <span class="num">1</span>

            <span class="kwb">if</span> flips <span class="sym">&gt;</span> maxFlipsCount<span class="sym">:</span>
                maxFlipsCount <span class="sym">=</span> flips

        <span class="kwb">while</span> True<span class="sym">:</span>
            <span class="kwb">if</span> r <span class="sym">==</span> n<span class="sym">:</span>
                <span class="kwb">return</span> maxFlipsCount
            temp <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
            i <span class="sym">=</span> <span class="num">0</span>
            <span class="kwb">while</span> i <span class="sym">&lt;</span> r<span class="sym">:</span>
                j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
                perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>j<span class="sym">]</span>
                i <span class="sym">=</span> j
            perm1<span class="sym">[</span>r<span class="sym">] =</span> temp

            count<span class="sym">[</span>r<span class="sym">] -=</span> <span class="num">1</span>
            <span class="kwb">if</span> count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">:</span>
                <span class="kwb">break</span>
            r <span class="sym">+=</span> <span class="num">1</span>


<span class="kwc">import</span> psyco<span class="sym">;</span> psyco<span class="sym">.</span><span class="kwd">bind</span><span class="sym">(</span>fannkuch<span class="sym">)</span>
n <span class="sym">=</span> <span class="kwa">int</span><span class="sym">( (</span>sys<span class="sym">.</span>argv<span class="sym">+[</span><span class="num">1</span><span class="sym">])[</span><span class="num">1</span><span class="sym">] )</span>
r <span class="sym">=</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">)</span>
<span class="kwb">print</span> <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">+</span> <span class="kwa">str</span><span class="sym">(</span>n<span class="sym">) +</span> <span class="str">&quot;) =&quot;</span><span class="sym">,</span> r

