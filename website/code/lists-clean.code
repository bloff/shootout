<span class="line">    1 </span><span class="sym">/*</span> The Great Computer Language Shootout
<span class="line">    2 </span>     http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/
</span><span class="line">    3 </span><span class="sym"> 
</span><span class="line">    4 </span><span class="sym"> </span>   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)
</span><span class="line">    5 </span><span class="sym"> </span>   and optimized by John van Groningen
<span class="line">    6 </span>
<span class="line">    7 </span>  To compile<span class="sym">:
</span><span class="line">    8 </span><span class="sym">         </span>   cleanIDE.exe <span class="slc">--batch-force-build &quot;e:\shoot\contrib\clean\lists.prj&quot; 
</span><span class="line">    9 </span><span class="slc"></span>
<span class="line">   10 </span> To run<span class="sym">:
</span><span class="line">   11 </span><span class="sym"> </span>   lists.exe <span class="sym">-</span>con <span class="num">16
</span><span class="line">   12 </span><span class="num"> </span><span class="sym">*/
</span><span class="line">   13 </span><span class="sym"> 
</span><span class="line">   14 </span><span class="sym"> 
</span><span class="line">   15 </span><span class="sym"> </span><span class="kwa">module</span> lists
<span class="line">   16 </span> <span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout
<span class="line">   17 </span>
<span class="line">   18 </span>  Start <span class="sym">=</span> toString <span class="sym">(</span>iter argi listOps <span class="num">10000</span><span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span>
<span class="line">   19 </span> listOps size
<span class="line">   20 </span>     # d1 <span class="sym">=</span> iota size
<span class="line">   21 </span>     # <span class="sym">(</span>d2<span class="sym">,</span>d1<span class="sym">) =</span> copy d1
<span class="line">   22 </span>     # d3 <span class="sym">=</span> empty size
<span class="line">   23 </span>     # <span class="sym">(</span>d2<span class="sym">,</span>d3<span class="sym">) =</span> headToTailLoop d2 d3
<span class="line">   24 </span>     # <span class="sym">(</span>d3<span class="sym">,</span>d2<span class="sym">) =</span> tailToTailLoop d3 d2
<span class="line">   25 </span>     # d1 <span class="sym">=</span> reverseDq d1
<span class="line">   26 </span>     <span class="sym">|</span> firstDq d1<span class="sym">==</span>size <span class="sym">&amp;&amp;</span> equal d1 d2
<span class="line">   27 </span>         <span class="sym">=</span> lengthDq d1
<span class="line">   28 </span>         <span class="sym">=</span> abort <span class="str">&quot;Test Failed!&quot;</span>
<span class="line">   29 </span>   <span class="kwa">where
</span><span class="line">   30 </span><span class="kwa"> </span>    headToTailLoop <span class="sym">:: !*(</span>Deque a<span class="sym">) !*(</span>Deque a<span class="sym">) -&gt; (!*</span>Deque a<span class="sym">,!*</span>Deque a<span class="sym">)
</span><span class="line">   31 </span><span class="sym"> </span>    headToTailLoop x y
<span class="line">   32 </span>         <span class="sym">|</span> emptyDq x   <span class="sym">= (</span>x<span class="sym">,</span>y<span class="sym">)
</span><span class="line">   33 </span><span class="sym"> </span>                      # <span class="sym">(</span>z<span class="sym">,</span>x<span class="sym">) =</span> popFirst x
<span class="line">   34 </span>                       # y <span class="sym">=</span> addLast z y
<span class="line">   35 </span>                       <span class="sym">=</span> headToTailLoop x y
<span class="line">   36 </span>
<span class="line">   37 </span>      tailToTailLoop <span class="sym">:: !*(</span>Deque a<span class="sym">) !*(</span>Deque a<span class="sym">) -&gt; (!*</span>Deque a<span class="sym">,!*</span>Deque a<span class="sym">)
</span><span class="line">   38 </span><span class="sym"> </span>    tailToTailLoop x y
<span class="line">   39 </span>         <span class="sym">|</span> emptyDq x <span class="sym">= (</span>x<span class="sym">,</span>y<span class="sym">)
</span><span class="line">   40 </span><span class="sym"> </span>                    # <span class="sym">(</span>z<span class="sym">,</span>x<span class="sym">) =</span> popLast x
<span class="line">   41 </span>                     # y <span class="sym">=</span> addLast z y
<span class="line">   42 </span>                     <span class="sym">=</span> tailToTailLoop x y
<span class="line">   43 </span>
<span class="line">   44 </span>  <span class="sym">::</span> Deque a <span class="sym">=</span> { first <span class="sym">::!</span><span class="kwb">Int</span><span class="sym">,</span> last <span class="sym">::!</span><span class="kwb">Int</span><span class="sym">,</span> size <span class="sym">:: !</span><span class="kwb">Int</span><span class="sym">,</span> a <span class="sym">:: !</span>.{<span class="sym">!</span>a} }
<span class="line">   45 </span>
<span class="line">   46 </span>  empty <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span>Deque <span class="kwb">Int
</span><span class="line">   47 </span><span class="kwb"> </span>empty n
<span class="line">   48 </span>     # n<span class="sym">=</span>inc n
<span class="line">   49 </span>     <span class="sym">=</span> { first<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> last<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> size<span class="sym">=</span>n<span class="sym">,</span>a <span class="sym">=</span> createArray n <span class="num">0</span> }
<span class="line">   50 </span>
<span class="line">   51 </span>  iota <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span>Deque <span class="kwb">Int
</span><span class="line">   52 </span><span class="kwb"> </span>iota n
<span class="line">   53 </span>     #<span class="sym">!</span> size<span class="sym">=</span>inc n
<span class="line">   54 </span>     <span class="sym">=</span> { first<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> last<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> size<span class="sym">=</span>size<span class="sym">,</span> a <span class="sym">=</span> {i \\ i<span class="sym">&lt;-[</span><span class="num">0</span>..n<span class="sym">]</span>} }
<span class="line">   55 </span>
<span class="line">   56 </span>  emptyDq <span class="sym">:: !(</span>Deque a<span class="sym">) -&gt;</span> <span class="kwb">Bool
</span><span class="line">   57 </span><span class="kwb"> </span>emptyDq {first<span class="sym">,</span>last<span class="sym">,</span>size} <span class="sym">=</span> first<span class="sym">==</span>last
<span class="line">   58 </span>
<span class="line">   59 </span>  lengthDq <span class="sym">:: !(</span>Deque a<span class="sym">) -&gt;</span> <span class="kwb">Int
</span><span class="line">   60 </span><span class="kwb"> </span>lengthDq {first<span class="sym">,</span>last<span class="sym">,</span>size} <span class="sym">=</span> up <span class="sym">(</span>last<span class="sym">-</span>first<span class="sym">)</span> size
<span class="line">   61 </span>
<span class="line">   62 </span>  up n s <span class="sym">:==</span> n<span class="sym">+((</span>n<span class="sym">&gt;&gt;</span><span class="num">31</span><span class="sym">)</span> bitand s<span class="sym">) //</span> if <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">) (</span>n <span class="sym">+</span> s<span class="sym">)</span> n
<span class="line">   63 </span>
<span class="line">   64 </span>  popFirst <span class="sym">:: !*(</span>Deque a<span class="sym">) -&gt; (!</span>a<span class="sym">,!*</span>Deque a<span class="sym">)
</span><span class="line">   65 </span><span class="sym"> </span>popFirst {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
<span class="line">   66 </span>     <span class="sym">|</span> first <span class="sym">&lt;&gt;</span> last
<span class="line">   67 </span>         #<span class="sym">!</span> e <span class="sym">=</span> a.<span class="sym">[</span>first<span class="sym">]
</span><span class="line">   68 </span><span class="sym"> </span>        # first<span class="sym">=</span>first<span class="sym">+</span><span class="num">1
</span><span class="line">   69 </span><span class="num"> </span>        <span class="sym">|</span> first<span class="sym">&lt;&gt;</span>size
<span class="line">   70 </span>             <span class="sym">= (</span>e<span class="sym">,</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}<span class="sym">)
</span><span class="line">   71 </span><span class="sym">             = (</span>e<span class="sym">,</span>{first<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}<span class="sym">)
</span><span class="line">   72 </span><span class="sym">         =</span> abort <span class="str">&quot;popFirst: empty&quot;</span>
<span class="line">   73 </span>
<span class="line">   74 </span>  popLast <span class="sym">:: !*(</span>Deque a<span class="sym">) -&gt; (!</span>a<span class="sym">,!*</span>Deque a<span class="sym">)
</span><span class="line">   75 </span><span class="sym"> </span>popLast {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
<span class="line">   76 </span>     <span class="sym">|</span> first <span class="sym">&lt;&gt;</span> last
<span class="line">   77 </span>         <span class="sym">|</span> last<span class="sym">&gt;</span><span class="num">0
</span><span class="line">   78 </span><span class="num"> </span>            # last <span class="sym">=</span> last<span class="num">-1
</span><span class="line">   79 </span><span class="num"> </span>            #<span class="sym">!</span> e <span class="sym">=</span> a.<span class="sym">[</span>last<span class="sym">]
</span><span class="line">   80 </span><span class="sym">             = (</span>e<span class="sym">,</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}<span class="sym">)
</span><span class="line">   81 </span><span class="sym"> </span>            # last <span class="sym">=</span> size<span class="num">-1
</span><span class="line">   82 </span><span class="num"> </span>            #<span class="sym">!</span> e <span class="sym">=</span> a.<span class="sym">[</span>last<span class="sym">]
</span><span class="line">   83 </span><span class="sym">             = (</span>e<span class="sym">,</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}<span class="sym">)
</span><span class="line">   84 </span><span class="sym">         =</span> abort <span class="str">&quot;popLast: empty&quot;</span>
<span class="line">   85 </span>
<span class="line">   86 </span>  addLast <span class="sym">:: !</span>a <span class="sym">!*(</span>Deque a<span class="sym">) -&gt; *</span>Deque a
<span class="line">   87 </span> addLast elem {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
<span class="line">   88 </span>     # last`<span class="sym">=</span>last<span class="sym">+</span><span class="num">1
</span><span class="line">   89 </span><span class="num"> </span>    <span class="sym">|</span> last` <span class="sym">&lt;&gt;</span> size
<span class="line">   90 </span>         <span class="sym">|</span> last` <span class="sym">&lt;&gt;</span> first
<span class="line">   91 </span>                 <span class="sym">=</span> {first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last`<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>{a <span class="sym">&amp; [</span>last<span class="sym">]=</span>elem}}
<span class="line">   92 </span>                 <span class="sym">=</span> abort <span class="str">&quot;addLast : Full&quot;</span>
<span class="line">   93 </span>         <span class="sym">|</span> <span class="num">0</span> <span class="sym">&lt;&gt;</span> first
<span class="line">   94 </span>                 <span class="sym">=</span> {first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>{a <span class="sym">&amp; [</span>last<span class="sym">]=</span>elem}}
<span class="line">   95 </span>                 <span class="sym">=</span> abort <span class="str">&quot;addLast : Full&quot;</span>
<span class="line">   96 </span>
<span class="line">   97 </span>  firstDq <span class="sym">:: !(</span>Deque a<span class="sym">) -&gt;</span> a
<span class="line">   98 </span> firstDq {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
<span class="line">   99 </span>     <span class="sym">|</span> first <span class="sym">&lt;&gt;</span> last
<span class="line">  100 </span>         <span class="sym">=</span> a.<span class="sym">[</span>first<span class="sym">]
</span><span class="line">  101 </span><span class="sym">         =</span> abort <span class="str">&quot;popFirst: empty&quot;</span>
<span class="line">  102 </span>
<span class="line">  103 </span>  copy <span class="sym">:: *(</span>Deque a<span class="sym">) -&gt; (!*</span>Deque a<span class="sym">,!*</span>Deque a<span class="sym">)
</span><span class="line">  104 </span><span class="sym"> </span>copy {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
<span class="line">  105 </span>     <span class="sym">|</span> size<span class="sym">==</span><span class="num">0
</span><span class="line">  106 </span><span class="num"> </span>        <span class="sym">= (</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>{}}<span class="sym">,</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}<span class="sym">)
</span><span class="line">  107 </span><span class="sym"> </span>    #<span class="sym">!</span> e<span class="sym">=</span>a.<span class="sym">[</span><span class="num">0</span><span class="sym">]
</span><span class="line">  108 </span><span class="sym"> </span>    # <span class="sym">(</span>a1<span class="sym">,</span>a2<span class="sym">) =</span> copy_array <span class="num">0</span> size <span class="sym">(</span>createArray size e<span class="sym">)</span> a
<span class="line">  109 </span>     <span class="sym">= (</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a1}<span class="sym">,</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a2}<span class="sym">)
</span><span class="line">  110 </span><span class="sym"> </span>  <span class="kwa">where
</span><span class="line">  111 </span><span class="kwa"> </span>    copy_array <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!*</span>{<span class="sym">!</span>a} <span class="sym">!</span>u<span class="sym">:</span>{<span class="sym">!</span>a} <span class="sym">-&gt; (!</span>.{<span class="sym">!</span>a}<span class="sym">,!</span>v<span class="sym">:</span>{<span class="sym">!</span>a}<span class="sym">), [</span>u <span class="sym">&lt;=</span> v<span class="sym">]
</span><span class="line">  112 </span><span class="sym"> </span>    copy_array i s a1 a2
<span class="line">  113 </span>         <span class="sym">|</span> i<span class="sym">&lt;</span>s
<span class="line">  114 </span>             #<span class="sym">!</span> e<span class="sym">=</span>a2.<span class="sym">[</span>i<span class="sym">]
</span><span class="line">  115 </span><span class="sym">             =</span> copy_array <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> s {a1 <span class="sym">&amp; [</span>i<span class="sym">]=</span>e} a2
<span class="line">  116 </span>             <span class="sym">= (</span>a1<span class="sym">,</span>a2<span class="sym">)
</span><span class="line">  117 </span><span class="sym"> 
</span><span class="line">  118 </span><span class="sym"> </span>reverseDq <span class="sym">:: *(</span>Deque a<span class="sym">) -&gt; *</span>Deque a
<span class="line">  119 </span> reverseDq {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
<span class="line">  120 </span>     #<span class="sym">!</span> w<span class="sym">=</span>up <span class="sym">(</span>last<span class="sym">-</span>first<span class="sym">)</span> size <span class="sym">//</span> length
<span class="line">  121 </span>     # a <span class="sym">=</span> reverse_a <span class="sym">((</span>w<span class="sym">&gt;&gt;</span><span class="num">1</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> first <span class="sym">(</span>up <span class="sym">(</span>last<span class="num">-1</span><span class="sym">)</span> size<span class="sym">)</span> size a
<span class="line">  122 </span>     <span class="sym">=</span> {first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}
<span class="line">  123 </span>     <span class="kwa">where
</span><span class="line">  124 </span><span class="kwa"> </span>        reverse_a <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{<span class="sym">!</span>a} <span class="sym">-&gt; *</span>{<span class="sym">!</span>a}
<span class="line">  125 </span>         reverse_a n i1 i2 size a
<span class="line">  126 </span>             <span class="sym">|</span> n<span class="sym">==</span><span class="num">0
</span><span class="line">  127 </span><span class="num"> </span>                <span class="sym">=</span> a
<span class="line">  128 </span>             #<span class="sym">!</span> m<span class="sym">=</span>min <span class="sym">(</span>size<span class="sym">-</span>i1<span class="sym">)</span> n
<span class="line">  129 </span>             #<span class="sym">!</span> m<span class="sym">=</span>min <span class="sym">(</span>i2<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> m
<span class="line">  130 </span>             # a <span class="sym">=</span> reverse_a2 i1 i2 m a
<span class="line">  131 </span>               i1<span class="sym">=</span>i1<span class="sym">+</span>m
<span class="line">  132 </span>               i2<span class="sym">=</span>i2<span class="sym">-</span>m
<span class="line">  133 </span>               i1<span class="sym">=</span>if <span class="sym">(</span>i1<span class="sym">&gt;=</span>size<span class="sym">) (</span>i1<span class="sym">-</span>size<span class="sym">)</span> i1
<span class="line">  134 </span>               i2<span class="sym">=</span>if <span class="sym">(</span>i2<span class="sym">&lt;</span><span class="num">0</span><span class="sym">) (</span>i2<span class="sym">+</span>size<span class="sym">)</span> i2
<span class="line">  135 </span>             <span class="sym">=</span> reverse_a <span class="sym">(</span>n<span class="sym">-</span>m<span class="sym">)</span> i1 i2 size a
<span class="line">  136 </span>
<span class="line">  137 </span>          reverse_a2 <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{<span class="sym">!</span>a} <span class="sym">-&gt; *</span>{<span class="sym">!</span>a}
<span class="line">  138 </span>         reverse_a2 i1 i2 e1 a
<span class="line">  139 </span>             <span class="sym">|</span> i1<span class="sym">&lt;</span>e1
<span class="line">  140 </span>                 # <span class="sym">(</span>v1<span class="sym">,</span>a<span class="sym">) =</span> a<span class="sym">![</span>i1<span class="sym">]
</span><span class="line">  141 </span><span class="sym"> </span>                # <span class="sym">(</span>v2<span class="sym">,</span>a<span class="sym">) =</span> a<span class="sym">![</span>i2<span class="sym">]
</span><span class="line">  142 </span><span class="sym">                 =</span> reverse_a2 <span class="sym">(</span>i1<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>i2<span class="num">-1</span><span class="sym">)</span> e1 {a <span class="sym">&amp; [</span>i1<span class="sym">]=</span>v2<span class="sym">,[</span>i2<span class="sym">]=</span>v1}
<span class="line">  143 </span>                 <span class="sym">=</span> a
<span class="line">  144 </span>
<span class="line">  145 </span>  equal <span class="sym">:: !</span>.<span class="sym">(</span>Deque a<span class="sym">) !</span>.<span class="sym">(</span>Deque a<span class="sym">) -&gt;</span> .<span class="kwb">Bool</span> <span class="sym">| ==</span> a
<span class="line">  146 </span> equal {first<span class="sym">=</span>first1<span class="sym">,</span>last<span class="sym">=</span>last1<span class="sym">,</span>size<span class="sym">=</span>size1<span class="sym">,</span>a<span class="sym">=</span>a1} {first<span class="sym">=</span>first2<span class="sym">,</span>last<span class="sym">=</span>last2<span class="sym">,</span>size<span class="sym">=</span>size2<span class="sym">,</span>a<span class="sym">=</span>a2}
<span class="line">  147 </span>     #<span class="sym">!</span> len1<span class="sym">=</span>up <span class="sym">(</span>last1<span class="sym">-</span>first1<span class="sym">)</span> size1 <span class="sym">//</span> length
<span class="line">  148 </span>     #<span class="sym">!</span> len2<span class="sym">=</span>up <span class="sym">(</span>last2<span class="sym">-</span>first2<span class="sym">)</span> size2 <span class="sym">//</span> length
<span class="line">  149 </span>     <span class="sym">=</span> len1<span class="sym">==</span>len2 <span class="sym">&amp;&amp;</span> equal_a len1 first1 first2 size1 size2 a1 a2
<span class="line">  150 </span> <span class="kwa">where
</span><span class="line">  151 </span><span class="kwa"> </span>    equal_a <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.{<span class="sym">!</span>a} <span class="sym">!</span>.{<span class="sym">!</span>a} <span class="sym">-&gt;</span> .<span class="kwb">Bool</span> <span class="sym">| ==</span> a
<span class="line">  152 </span>     equal_a n i1 i2 s1 s2 a1 a2
<span class="line">  153 </span>         <span class="sym">|</span> n<span class="sym">==</span><span class="num">0
</span><span class="line">  154 </span><span class="num"> </span>            <span class="sym">=</span> <span class="kwa">True
</span><span class="line">  155 </span><span class="kwa"> </span>        #<span class="sym">!</span> m<span class="sym">=</span>min <span class="sym">(</span>s1<span class="sym">-</span>i1<span class="sym">)</span> n
<span class="line">  156 </span>         #<span class="sym">!</span> m<span class="sym">=</span>min <span class="sym">(</span>s2<span class="sym">-</span>i2<span class="sym">)</span> m
<span class="line">  157 </span>         <span class="sym">|</span> equal_a2 i1 i2 <span class="sym">(</span>i1<span class="sym">+</span>m<span class="sym">)</span> a1 a2
<span class="line">  158 </span>             # i1<span class="sym">=</span>i1<span class="sym">+</span>m
<span class="line">  159 </span>               i2<span class="sym">=</span>i2<span class="sym">+</span>m
<span class="line">  160 </span>               i1<span class="sym">=</span>if <span class="sym">(</span>i1<span class="sym">&gt;=</span>s1<span class="sym">) (</span>i1<span class="sym">-</span>s1<span class="sym">)</span> i1
<span class="line">  161 </span>               i2<span class="sym">=</span>if <span class="sym">(</span>i2<span class="sym">&gt;=</span>s2<span class="sym">) (</span>i2<span class="sym">-</span>s2<span class="sym">)</span> i2
<span class="line">  162 </span>             <span class="sym">=</span> equal_a <span class="sym">(</span>n<span class="sym">-</span>m<span class="sym">)</span> i1 i2 s1 s2 a1 a2
<span class="line">  163 </span>             <span class="sym">=</span> <span class="kwa">False
</span><span class="line">  164 </span><span class="kwa"> 
</span><span class="line">  165 </span><span class="kwa"> </span>    equal_a2 <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.{<span class="sym">!</span>a} <span class="sym">!</span>.{<span class="sym">!</span>a} <span class="sym">-&gt;</span> .<span class="kwb">Bool</span> <span class="sym">| ==</span> a
<span class="line">  166 </span>     equal_a2 i1 i2 e1 a1 a2
<span class="line">  167 </span>         <span class="sym">|</span> i1<span class="sym">&lt;</span>e1
<span class="line">  168 </span>             <span class="sym">=</span> a1.<span class="sym">[</span>i1<span class="sym">]==</span>a2.<span class="sym">[</span>i2<span class="sym">] &amp;&amp;</span> equal_a2 <span class="sym">(</span>i1<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>i2<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> e1 a1 a2
<span class="line">  169 </span>             <span class="sym">=</span> <span class="kwa">True</span> 
