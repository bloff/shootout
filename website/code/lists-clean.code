<span class="sym">/*</span> The Great Computer Language Shootout
   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>

   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)</span>
   and optimized by John van Groningen
<span class="sym">*/</span>

<span class="kwa">module</span> lists
<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

Start <span class="sym">=</span> toString <span class="sym">(</span>iter argi listOps <span class="num">10000</span><span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span>
listOps size
    # d1 <span class="sym">=</span> iota size
    # <span class="sym">(</span>d2<span class="sym">,</span>d1<span class="sym">) =</span> copy d1
    # d3 <span class="sym">=</span> empty size
    # <span class="sym">(</span>d2<span class="sym">,</span>d3<span class="sym">) =</span> headToTailLoop d2 d3
    # <span class="sym">(</span>d3<span class="sym">,</span>d2<span class="sym">) =</span> tailToTailLoop d3 d2
    # d1 <span class="sym">=</span> reverseDq d1
    <span class="sym">|</span> firstDq d1<span class="sym">==</span>size <span class="sym">&amp;&amp;</span> equal d1 d2
        <span class="sym">=</span> lengthDq d1
        <span class="sym">=</span> abort <span class="str">&quot;Test Failed!&quot;</span>
  <span class="kwa">where</span>
    headToTailLoop <span class="sym">:: !*(</span>Deque a<span class="sym">) !*(</span>Deque a<span class="sym">) -&gt; (!*</span>Deque a<span class="sym">,!*</span>Deque a<span class="sym">)</span>
    headToTailLoop x y
        <span class="sym">|</span> emptyDq x   <span class="sym">= (</span>x<span class="sym">,</span>y<span class="sym">)</span>
                      # <span class="sym">(</span>z<span class="sym">,</span>x<span class="sym">) =</span> popFirst x
                      # y <span class="sym">=</span> addLast z y
                      <span class="sym">=</span> headToTailLoop x y

    tailToTailLoop <span class="sym">:: !*(</span>Deque a<span class="sym">) !*(</span>Deque a<span class="sym">) -&gt; (!*</span>Deque a<span class="sym">,!*</span>Deque a<span class="sym">)</span>
    tailToTailLoop x y
        <span class="sym">|</span> emptyDq x <span class="sym">= (</span>x<span class="sym">,</span>y<span class="sym">)</span>
                    # <span class="sym">(</span>z<span class="sym">,</span>x<span class="sym">) =</span> popLast x
                    # y <span class="sym">=</span> addLast z y
                    <span class="sym">=</span> tailToTailLoop x y

<span class="sym">::</span> Deque a <span class="sym">=</span> { first <span class="sym">::!</span><span class="kwb">Int</span><span class="sym">,</span> last <span class="sym">::!</span><span class="kwb">Int</span><span class="sym">,</span> size <span class="sym">:: !</span><span class="kwb">Int</span><span class="sym">,</span> a <span class="sym">:: !</span>.{<span class="sym">!</span>a} }

empty <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span>Deque <span class="kwb">Int</span>
empty n
    # n<span class="sym">=</span>inc n
    <span class="sym">=</span> { first<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> last<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> size<span class="sym">=</span>n<span class="sym">,</span>a <span class="sym">=</span> createArray n <span class="num">0</span> }

iota <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">-&gt; *</span>Deque <span class="kwb">Int</span>
iota n
    #<span class="sym">!</span> size<span class="sym">=</span>inc n
    <span class="sym">=</span> { first<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> last<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> size<span class="sym">=</span>size<span class="sym">,</span> a <span class="sym">=</span> {i \\ i<span class="sym">&lt;-[</span><span class="num">0</span>..n<span class="sym">]</span>} }

emptyDq <span class="sym">:: !(</span>Deque a<span class="sym">) -&gt;</span> <span class="kwb">Bool</span>
emptyDq {first<span class="sym">,</span>last<span class="sym">,</span>size} <span class="sym">=</span> first<span class="sym">==</span>last

lengthDq <span class="sym">:: !(</span>Deque a<span class="sym">) -&gt;</span> <span class="kwb">Int</span>
lengthDq {first<span class="sym">,</span>last<span class="sym">,</span>size} <span class="sym">=</span> up <span class="sym">(</span>last<span class="sym">-</span>first<span class="sym">)</span> size

up n s <span class="sym">:==</span> n<span class="sym">+((</span>n<span class="sym">&gt;&gt;</span><span class="num">31</span><span class="sym">)</span> bitand s<span class="sym">) //</span> if <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">) (</span>n <span class="sym">+</span> s<span class="sym">)</span> n

popFirst <span class="sym">:: !*(</span>Deque a<span class="sym">) -&gt; (!</span>a<span class="sym">,!*</span>Deque a<span class="sym">)</span>
popFirst {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
    <span class="sym">|</span> first <span class="sym">&lt;&gt;</span> last
        #<span class="sym">!</span> e <span class="sym">=</span> a.<span class="sym">[</span>first<span class="sym">]</span>
        # first<span class="sym">=</span>first<span class="sym">+</span><span class="num">1</span>
        <span class="sym">|</span> first<span class="sym">&lt;&gt;</span>size
            <span class="sym">= (</span>e<span class="sym">,</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}<span class="sym">)</span>
            <span class="sym">= (</span>e<span class="sym">,</span>{first<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}<span class="sym">)</span>
        <span class="sym">=</span> abort <span class="str">&quot;popFirst: empty&quot;</span>

popLast <span class="sym">:: !*(</span>Deque a<span class="sym">) -&gt; (!</span>a<span class="sym">,!*</span>Deque a<span class="sym">)</span>
popLast {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
    <span class="sym">|</span> first <span class="sym">&lt;&gt;</span> last
        <span class="sym">|</span> last<span class="sym">&gt;</span><span class="num">0</span>
            # last <span class="sym">=</span> last<span class="sym">-</span><span class="num">1</span>
            #<span class="sym">!</span> e <span class="sym">=</span> a.<span class="sym">[</span>last<span class="sym">]</span>
            <span class="sym">= (</span>e<span class="sym">,</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}<span class="sym">)</span>
            # last <span class="sym">=</span> size<span class="sym">-</span><span class="num">1</span>
            #<span class="sym">!</span> e <span class="sym">=</span> a.<span class="sym">[</span>last<span class="sym">]</span>
            <span class="sym">= (</span>e<span class="sym">,</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}<span class="sym">)</span>
        <span class="sym">=</span> abort <span class="str">&quot;popLast: empty&quot;</span>

addLast <span class="sym">:: !</span>a <span class="sym">!*(</span>Deque a<span class="sym">) -&gt; *</span>Deque a
addLast elem {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
    # last`<span class="sym">=</span>last<span class="sym">+</span><span class="num">1</span>
    <span class="sym">|</span> last` <span class="sym">&lt;&gt;</span> size
        <span class="sym">|</span> last` <span class="sym">&lt;&gt;</span> first
                <span class="sym">=</span> {first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last`<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>{a <span class="sym">&amp; [</span>last<span class="sym">]=</span>elem}}
                <span class="sym">=</span> abort <span class="str">&quot;addLast : Full&quot;</span>
        <span class="sym">|</span> <span class="num">0</span> <span class="sym">&lt;&gt;</span> first
                <span class="sym">=</span> {first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>{a <span class="sym">&amp; [</span>last<span class="sym">]=</span>elem}}
                <span class="sym">=</span> abort <span class="str">&quot;addLast : Full&quot;</span>

firstDq <span class="sym">:: !(</span>Deque a<span class="sym">) -&gt;</span> a
firstDq {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
    <span class="sym">|</span> first <span class="sym">&lt;&gt;</span> last
        <span class="sym">=</span> a.<span class="sym">[</span>first<span class="sym">]</span>
        <span class="sym">=</span> abort <span class="str">&quot;popFirst: empty&quot;</span>

copy <span class="sym">:: *(</span>Deque a<span class="sym">) -&gt; (!*</span>Deque a<span class="sym">,!*</span>Deque a<span class="sym">)</span>
copy {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
    <span class="sym">|</span> size<span class="sym">==</span><span class="num">0</span>
        <span class="sym">= (</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>{}}<span class="sym">,</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}<span class="sym">)</span>
    #<span class="sym">!</span> e<span class="sym">=</span>a.<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
    # <span class="sym">(</span>a1<span class="sym">,</span>a2<span class="sym">) =</span> copy_array <span class="num">0</span> size <span class="sym">(</span>createArray size e<span class="sym">)</span> a
    <span class="sym">= (</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a1}<span class="sym">,</span>{first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a2}<span class="sym">)</span>
  <span class="kwa">where</span>
    copy_array <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!*</span>{<span class="sym">!</span>a} <span class="sym">!</span>u<span class="sym">:</span>{<span class="sym">!</span>a} <span class="sym">-&gt; (!</span>.{<span class="sym">!</span>a}<span class="sym">,!</span>v<span class="sym">:</span>{<span class="sym">!</span>a}<span class="sym">), [</span>u <span class="sym">&lt;=</span> v<span class="sym">]</span>
    copy_array i s a1 a2
        <span class="sym">|</span> i<span class="sym">&lt;</span>s
            #<span class="sym">!</span> e<span class="sym">=</span>a2.<span class="sym">[</span>i<span class="sym">]</span>
            <span class="sym">=</span> copy_array <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> s {a1 <span class="sym">&amp; [</span>i<span class="sym">]=</span>e} a2
            <span class="sym">= (</span>a1<span class="sym">,</span>a2<span class="sym">)</span>

reverseDq <span class="sym">:: *(</span>Deque a<span class="sym">) -&gt; *</span>Deque a
reverseDq {first<span class="sym">,</span>last<span class="sym">,</span>size<span class="sym">,</span>a}
    #<span class="sym">!</span> w<span class="sym">=</span>up <span class="sym">(</span>last<span class="sym">-</span>first<span class="sym">)</span> size <span class="sym">//</span> length
    # a <span class="sym">=</span> reverse_a <span class="sym">((</span>w<span class="sym">&gt;&gt;</span><span class="num">1</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> first <span class="sym">(</span>up <span class="sym">(</span>last<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> size<span class="sym">)</span> size a
    <span class="sym">=</span> {first<span class="sym">=</span>first<span class="sym">,</span>last<span class="sym">=</span>last<span class="sym">,</span>size<span class="sym">=</span>size<span class="sym">,</span>a<span class="sym">=</span>a}
    <span class="kwa">where</span>
        reverse_a <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{<span class="sym">!</span>a} <span class="sym">-&gt; *</span>{<span class="sym">!</span>a}
        reverse_a n i1 i2 size a
            <span class="sym">|</span> n<span class="sym">==</span><span class="num">0</span>
                <span class="sym">=</span> a
            #<span class="sym">!</span> m<span class="sym">=</span>min <span class="sym">(</span>size<span class="sym">-</span>i1<span class="sym">)</span> n
            #<span class="sym">!</span> m<span class="sym">=</span>min <span class="sym">(</span>i2<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> m
            # a <span class="sym">=</span> reverse_a2 i1 i2 m a
              i1<span class="sym">=</span>i1<span class="sym">+</span>m
              i2<span class="sym">=</span>i2<span class="sym">-</span>m
              i1<span class="sym">=</span>if <span class="sym">(</span>i1<span class="sym">&gt;=</span>size<span class="sym">) (</span>i1<span class="sym">-</span>size<span class="sym">)</span> i1
              i2<span class="sym">=</span>if <span class="sym">(</span>i2<span class="sym">&lt;</span><span class="num">0</span><span class="sym">) (</span>i2<span class="sym">+</span>size<span class="sym">)</span> i2
            <span class="sym">=</span> reverse_a <span class="sym">(</span>n<span class="sym">-</span>m<span class="sym">)</span> i1 i2 size a

        reverse_a2 <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{<span class="sym">!</span>a} <span class="sym">-&gt; *</span>{<span class="sym">!</span>a}
        reverse_a2 i1 i2 e1 a
            <span class="sym">|</span> i1<span class="sym">&lt;</span>e1
                # <span class="sym">(</span>v1<span class="sym">,</span>a<span class="sym">) =</span> a<span class="sym">![</span>i1<span class="sym">]</span>
                # <span class="sym">(</span>v2<span class="sym">,</span>a<span class="sym">) =</span> a<span class="sym">![</span>i2<span class="sym">]</span>
                <span class="sym">=</span> reverse_a2 <span class="sym">(</span>i1<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>i2<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> e1 {a <span class="sym">&amp; [</span>i1<span class="sym">]=</span>v2<span class="sym">,[</span>i2<span class="sym">]=</span>v1}
                <span class="sym">=</span> a

equal <span class="sym">:: !</span>.<span class="sym">(</span>Deque a<span class="sym">) !</span>.<span class="sym">(</span>Deque a<span class="sym">) -&gt;</span> .<span class="kwb">Bool</span> <span class="sym">| ==</span> a
equal {first<span class="sym">=</span>first1<span class="sym">,</span>last<span class="sym">=</span>last1<span class="sym">,</span>size<span class="sym">=</span>size1<span class="sym">,</span>a<span class="sym">=</span>a1} {first<span class="sym">=</span>first2<span class="sym">,</span>last<span class="sym">=</span>last2<span class="sym">,</span>size<span class="sym">=</span>size2<span class="sym">,</span>a<span class="sym">=</span>a2}
    #<span class="sym">!</span> len1<span class="sym">=</span>up <span class="sym">(</span>last1<span class="sym">-</span>first1<span class="sym">)</span> size1 <span class="sym">//</span> length
    #<span class="sym">!</span> len2<span class="sym">=</span>up <span class="sym">(</span>last2<span class="sym">-</span>first2<span class="sym">)</span> size2 <span class="sym">//</span> length
    <span class="sym">=</span> len1<span class="sym">==</span>len2 <span class="sym">&amp;&amp;</span> equal_a len1 first1 first2 size1 size2 a1 a2
<span class="kwa">where</span>
    equal_a <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.{<span class="sym">!</span>a} <span class="sym">!</span>.{<span class="sym">!</span>a} <span class="sym">-&gt;</span> .<span class="kwb">Bool</span> <span class="sym">| ==</span> a
    equal_a n i1 i2 s1 s2 a1 a2
        <span class="sym">|</span> n<span class="sym">==</span><span class="num">0</span>
            <span class="sym">=</span> <span class="kwa">True</span>
        #<span class="sym">!</span> m<span class="sym">=</span>min <span class="sym">(</span>s1<span class="sym">-</span>i1<span class="sym">)</span> n
        #<span class="sym">!</span> m<span class="sym">=</span>min <span class="sym">(</span>s2<span class="sym">-</span>i2<span class="sym">)</span> m
        <span class="sym">|</span> equal_a2 i1 i2 <span class="sym">(</span>i1<span class="sym">+</span>m<span class="sym">)</span> a1 a2
            # i1<span class="sym">=</span>i1<span class="sym">+</span>m
              i2<span class="sym">=</span>i2<span class="sym">+</span>m
              i1<span class="sym">=</span>if <span class="sym">(</span>i1<span class="sym">&gt;=</span>s1<span class="sym">) (</span>i1<span class="sym">-</span>s1<span class="sym">)</span> i1
              i2<span class="sym">=</span>if <span class="sym">(</span>i2<span class="sym">&gt;=</span>s2<span class="sym">) (</span>i2<span class="sym">-</span>s2<span class="sym">)</span> i2
            <span class="sym">=</span> equal_a <span class="sym">(</span>n<span class="sym">-</span>m<span class="sym">)</span> i1 i2 s1 s2 a1 a2
            <span class="sym">=</span> <span class="kwa">False</span>

    equal_a2 <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.{<span class="sym">!</span>a} <span class="sym">!</span>.{<span class="sym">!</span>a} <span class="sym">-&gt;</span> .<span class="kwb">Bool</span> <span class="sym">| ==</span> a
    equal_a2 i1 i2 e1 a1 a2
        <span class="sym">|</span> i1<span class="sym">&lt;</span>e1
            <span class="sym">=</span> a1.<span class="sym">[</span>i1<span class="sym">]==</span>a2.<span class="sym">[</span>i2<span class="sym">] &amp;&amp;</span> equal_a2 <span class="sym">(</span>i1<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>i2<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> e1 a1 a2
            <span class="sym">=</span> <span class="kwa">True</span>
