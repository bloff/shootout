<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy (Clean novice)
   and optimized by John van Groningen

To compile:	
   cleanIDE.exe <I><FONT COLOR="#B22222">--batch-force-build &quot;e:\shoot\contrib\clean\lists.prj&quot;
</FONT></I>
To run:
   lists.exe -con 16
*/


<B><FONT COLOR="#A020F0">module</FONT></B> lists
<B><FONT COLOR="#A020F0">import</FONT></B> StdEnv, LanguageShootout

Start = toString (iter argi listOps 10000) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>
listOps size
    # d1 = iota size
    # (d2,d1) = copy d1
    # d3 = empty size
    # (d2,d3) = headToTailLoop d2 d3
    # (d3,d2) = tailToTailLoop d3 d2
    # d1 = reverseDq d1
    | firstDq d1==size &amp;&amp; equal d1 d2
        = lengthDq d1
        = abort <B><FONT COLOR="#BC8F8F">&quot;Test Failed!&quot;</FONT></B>
  <B><FONT COLOR="#A020F0">where</FONT></B>
    headToTailLoop <B><FONT COLOR="#228B22">:: !*(Deque a) !*(Deque a) -&gt; (!*Deque a,!*Deque a)
</FONT></B>    headToTailLoop x y
        | emptyDq x   = (x,y)
                      # (z,x) = popFirst x
                      # y = addLast z y
                      = headToTailLoop x y

    tailToTailLoop <B><FONT COLOR="#228B22">:: !*(Deque a) !*(Deque a) -&gt; (!*Deque a,!*Deque a)
</FONT></B>    tailToTailLoop x y
        | emptyDq x = (x,y)
                    # (z,x) = popLast x
                    # y = addLast z y
                    = tailToTailLoop x y

<B><FONT COLOR="#228B22">:: Deque a = { first ::!Int, last ::!Int, size :: !Int, a :: !.{!a} }
</FONT></B>
empty <B><FONT COLOR="#228B22">:: !Int -&gt; *Deque Int
</FONT></B>empty n
    # n=inc n
    = { first=0, last=0, size=n,a = createArray n 0 }

iota <B><FONT COLOR="#228B22">:: !Int -&gt; *Deque Int
</FONT></B>iota n
    #! size=inc n
    = { first=1, last=0, size=size, a = {i \\ i&lt;-[0..n]} }

emptyDq <B><FONT COLOR="#228B22">:: !(Deque a) -&gt; Bool
</FONT></B>emptyDq {first,last,size} = first==last

lengthDq <B><FONT COLOR="#228B22">:: !(Deque a) -&gt; Int
</FONT></B>lengthDq {first,last,size} = up (last-first) size

up n s :== n+((n&gt;&gt;31) bitand s) // <B><FONT COLOR="#A020F0">if</FONT></B> (n &lt; 0) (n + s) n

popFirst <B><FONT COLOR="#228B22">:: !*(Deque a) -&gt; (!a,!*Deque a)
</FONT></B>popFirst {first,last,size,a}
    | first &lt;&gt; last
        #! e = a.[first]
        # first=first+1
        | first&lt;&gt;size
            = (e,{first=first,last=last,size=size,a=a})
            = (e,{first=0,last=last,size=size,a=a})
        = abort <B><FONT COLOR="#BC8F8F">&quot;popFirst: empty&quot;</FONT></B>

popLast <B><FONT COLOR="#228B22">:: !*(Deque a) -&gt; (!a,!*Deque a)
</FONT></B>popLast {first,last,size,a}
    | first &lt;&gt; last
        | last&gt;0
            # last = last-1
            #! e = a.[last]
            = (e,{first=first,last=last,size=size,a=a})
            # last = size-1
            #! e = a.[last]
            = (e,{first=first,last=last,size=size,a=a})
        = abort <B><FONT COLOR="#BC8F8F">&quot;popLast: empty&quot;</FONT></B>

addLast <B><FONT COLOR="#228B22">:: !a !*(Deque a) -&gt; *Deque a
</FONT></B>addLast elem {first,last,size,a}
    # last`=last+1
    | last` &lt;&gt; size
        | last` &lt;&gt; first
                = {first=first,last=last`,size=size,a={a &amp; [last]=elem}}
                = abort <B><FONT COLOR="#BC8F8F">&quot;addLast : Full&quot;</FONT></B>
        | 0 &lt;&gt; first
                = {first=first,last=0,size=size,a={a &amp; [last]=elem}}
                = abort <B><FONT COLOR="#BC8F8F">&quot;addLast : Full&quot;</FONT></B>

firstDq <B><FONT COLOR="#228B22">:: !(Deque a) -&gt; a
</FONT></B>firstDq {first,last,size,a}
    | first &lt;&gt; last
        = a.[first]
        = abort <B><FONT COLOR="#BC8F8F">&quot;popFirst: empty&quot;</FONT></B>

copy <B><FONT COLOR="#228B22">:: *(Deque a) -&gt; (!*Deque a,!*Deque a)
</FONT></B>copy {first,last,size,a}
    | size==0
        = ({first=first,last=last,size=size,a={}},{first=first,last=last,size=size,a=a})
    #! e=a.[0]
    # (a1,a2) = copy_array 0 size (createArray size e) a
    = ({first=first,last=last,size=size,a=a1},{first=first,last=last,size=size,a=a2})
  <B><FONT COLOR="#A020F0">where</FONT></B>
    copy_array <B><FONT COLOR="#228B22">:: !Int !.Int !*{!a} !u:{!a} -&gt; (!.{!a},!v:{!a}), [u &lt;= v]
</FONT></B>    copy_array i s a1 a2
        | i&lt;s
            #! e=a2.[i]
            = copy_array (i+1) s {a1 &amp; [i]=e} a2
            = (a1,a2)

reverseDq <B><FONT COLOR="#228B22">:: *(Deque a) -&gt; *Deque a
</FONT></B>reverseDq {first,last,size,a}
    #! w=up (last-first) size // length
    # a = reverse_a ((w&gt;&gt;1)+1) first (up (last-1) size) size a
    = {first=first,last=last,size=size,a=a}
    <B><FONT COLOR="#A020F0">where</FONT></B>
        reverse_a <B><FONT COLOR="#228B22">:: !Int !Int !Int !Int !*{!a} -&gt; *{!a}
</FONT></B>        reverse_a n i1 i2 size a
            | n==0
                = a
            #! m=min (size-i1) n
            #! m=min (i2+1) m
            # a = reverse_a2 i1 i2 m a
              i1=i1+m
              i2=i2-m
              i1=<B><FONT COLOR="#A020F0">if</FONT></B> (i1&gt;=size) (i1-size) i1
              i2=<B><FONT COLOR="#A020F0">if</FONT></B> (i2&lt;0) (i2+size) i2
            = reverse_a (n-m) i1 i2 size a

        reverse_a2 <B><FONT COLOR="#228B22">:: !Int !Int !Int !*{!a} -&gt; *{!a}
</FONT></B>        reverse_a2 i1 i2 e1 a
            | i1&lt;e1
                # (v1,a) = a![i1]
                # (v2,a) = a![i2]
                = reverse_a2 (i1+1) (i2-1) e1 {a &amp; [i1]=v2,[i2]=v1}
                = a

equal <B><FONT COLOR="#228B22">:: !.(Deque a) !.(Deque a) -&gt; .Bool | == a
</FONT></B>equal {first=first1,last=last1,size=size1,a=a1} {first=first2,last=last2,size=size2,a=a2}
    #! len1=up (last1-first1) size1 // length
    #! len2=up (last2-first2) size2 // length
    = len1==len2 &amp;&amp; equal_a len1 first1 first2 size1 size2 a1 a2
<B><FONT COLOR="#A020F0">where</FONT></B>
    equal_a <B><FONT COLOR="#228B22">:: !Int !Int !Int !Int !Int !.{!a} !.{!a} -&gt; .Bool | == a
</FONT></B>    equal_a n i1 i2 s1 s2 a1 a2
        | n==0
            = True
        #! m=min (s1-i1) n
        #! m=min (s2-i2) m
        | equal_a2 i1 i2 (i1+m) a1 a2
            # i1=i1+m
              i2=i2+m
              i1=<B><FONT COLOR="#A020F0">if</FONT></B> (i1&gt;=s1) (i1-s1) i1
              i2=<B><FONT COLOR="#A020F0">if</FONT></B> (i2&gt;=s2) (i2-s2) i2
            = equal_a (n-m) i1 i2 s1 s2 a1 a2
            = False

    equal_a2 <B><FONT COLOR="#228B22">:: !Int !Int !Int !.{!a} !.{!a} -&gt; .Bool | == a
</FONT></B>    equal_a2 i1 i2 e1 a1 a2
        | i1&lt;e1
            = a1.[i1]==a2.[i2] &amp;&amp; equal_a2 (i1+1) (i2+1) e1 a1 a2
            = True</pre></td></tr></table>
