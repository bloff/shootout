<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy (Scala novice)</span>
<span class="com">*/</span>

<span class="kwa">import</span> collection<span class="sym">.</span>mutable<span class="sym">.</span>ListBuffer<span class="sym">;</span>

<span class="kwa">object</span> lists <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">var</span> n <span class="sym">=</span> toPositiveInt<span class="sym">(</span>args<span class="sym">);</span>
      <span class="kwa">val</span> nSize <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
      <span class="kwa">var</span> L1Count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
         <span class="kwa">var</span> L1 <span class="sym">=</span> <span class="kwa">new</span> ListBuffer<span class="sym">[</span>Int<span class="sym">]();</span>
         i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> nSize<span class="sym">){</span> L1 <span class="sym">+</span> i<span class="sym">;</span> i<span class="sym">=</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">; }</span>
         <span class="kwa">var</span> L2 <span class="sym">=</span> L1<span class="sym">.</span>clone<span class="sym">().</span>asInstanceOf<span class="sym">[</span>ListBuffer<span class="sym">[</span>Int<span class="sym">]];</span>
         <span class="kwa">var</span> L3 <span class="sym">=</span> <span class="kwa">new</span> ListBuffer<span class="sym">[</span>Int<span class="sym">]();</span>
         <span class="kwa">while</span> <span class="sym">(</span>L2<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> L3 <span class="sym">+</span> L2<span class="sym">.</span>remove<span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
         i <span class="sym">=</span> L3<span class="sym">.</span>length<span class="sym">;</span>
         <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span> i<span class="sym">=</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> L2 <span class="sym">+</span> L3<span class="sym">.</span>remove<span class="sym">(</span>i<span class="sym">); }</span>

         Console println<span class="sym">(</span>L2 length<span class="sym">);</span>
         n <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">private def</span> toPositiveInt<span class="sym">(</span>s<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> i <span class="sym">=</span>
         <span class="kwa">try</span> <span class="sym">{</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">(</span><span class="num">0</span><span class="sym">)); }</span>
         <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> _ <span class="sym">=&gt;</span> <span class="num">1</span> <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> i<span class="sym">;</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>
