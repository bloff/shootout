#<span class="sym">!/</span>bin<span class="sym">/</span>bash
# <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}</span>
<span class="sym">[</span> \! <span class="sym">-</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;</span>
    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0</span>
exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="sym">!</span>#

<span class="slc">;;; $Id: wc-rep.code,v 1.6 2006-09-20 05:52:47 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()</span>
  <span class="sym">(</span><span class="kwa">open</span> rep rep.system rep.regexp<span class="sym">)</span>

  <span class="sym">(</span><span class="kwa">defun</span> my<span class="sym">-</span>string<span class="sym">-</span>split <span class="sym">(</span>regexp string<span class="sym">)</span>
    <span class="str">&quot;Return a list of substrings of STRING, each delimited by REGEXP.</span>
<span class="str">null-strings are removed.&quot;</span>
    <span class="sym">(</span>let loop <span class="sym">((</span>point <span class="num">0</span><span class="sym">)</span>
	       <span class="sym">(</span>parts <span class="str">'()))</span>
<span class="str">	 (if (string-match regexp string point)</span>
<span class="str">	     (loop (match-end)</span>
<span class="str">	       (if (&lt; point (match-start))</span>
<span class="str">		   (cons (substring string point (match-start)) parts)</span>
<span class="str">		 parts))</span>
<span class="str">	   (let ((part (substring string point)))</span>
<span class="str">	     (if (&gt; (length part) 0)</span>
<span class="str">		 (cons part parts)</span>
<span class="str">	       parts)))))</span>
<span class="str"></span>
<span class="str">  ;; eat the unused command line arg</span>
<span class="str">  (get-command-line-option &quot;--num&quot; t)</span>
<span class="str">  (let ((nl 0)</span>
<span class="str">	(nw 0)</span>
<span class="str">	(nc 0)</span>
<span class="str">	(line))</span>
<span class="str">    (while (setq line (read-line))</span>
<span class="str">      (setq nl (+ nl 1))</span>
<span class="str">      (setq nw (+ nw (length (my-string-split &quot;[</span> <span class="esc">\t\n</span><span class="str">]+&quot; line))))</span>
<span class="str">      (setq nc (+ nc (length line))))</span>
<span class="str">    (format standard-output &quot;%d %d %d</span><span class="esc">\n</span><span class="str">&quot; nl nw nc)))</span>
<span class="str"></span>
<span class="str"></span>
