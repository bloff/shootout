<span class="kwa">program</span> fannkuch<span class="sym">;</span>
<span class="com">{ The Computer Language Benchmarks Game</span>
<span class="com">  http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">  contributed by Florian Klaempfl</span>
<span class="com">  modified by Micha Nelissen</span>
<span class="com">  modified by Vincent Snijders</span>
<span class="com">  modified by Steve Fisher</span>
<span class="com"></span>
<span class="com">  Compile with</span>
<span class="com">  fpc -O3 fannkuch.pp</span>
<span class="com">}</span>

<span class="com">{$INLINE ON}</span>
<span class="com">{$OVERFLOWCHECKS OFF}</span>
<span class="com">{$RANGECHECKS OFF}</span>

<span class="kwa">type</span>
    TIntegerArray <span class="sym">=</span> <span class="kwa">Array</span><span class="sym">[</span><span class="num">0</span>.<span class="num">.99</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">longint</span><span class="sym">;</span>

<span class="kwa">var</span>
   permu<span class="sym">,</span> permu_copy<span class="sym">,</span> count<span class="sym">:</span> TIntegerArray<span class="sym">;</span>
   r<span class="sym">,</span> n<span class="sym">,</span> answer<span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>

<span class="kwa">procedure</span> <span class="kwd">swap</span><span class="sym">(</span><span class="kwa">var</span> a<span class="sym">,</span> b<span class="sym">:</span> <span class="kwb">longint</span><span class="sym">);</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">var</span>  tmp<span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">begin</span>  tmp <span class="sym">:=</span> a<span class="sym">;</span>  a <span class="sym">:=</span> b<span class="sym">;</span>  b <span class="sym">:=</span> tmp   <span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">procedure</span> <span class="kwd">reverse</span><span class="sym">(</span> k<span class="sym">:</span> <span class="kwb">longint</span><span class="sym">);</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">var</span>
  pi<span class="sym">,</span> pj <span class="sym">:</span> pLongint<span class="sym">;</span>
<span class="kwa">begin</span>
  pi <span class="sym">:= &#64;</span>permu_copy<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
  pj <span class="sym">:= &#64;</span>permu_copy<span class="sym">[</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
  <span class="kwa">while</span> pi<span class="sym">&lt;</span>pj <span class="kwa">do</span>
  <span class="kwa">begin</span>
    <span class="kwd">swap</span><span class="sym">(</span>pi^<span class="sym">,</span> pj^<span class="sym">);</span>
    <span class="kwd">inc</span><span class="sym">(</span>pi<span class="sym">);</span>
    <span class="kwd">dec</span><span class="sym">(</span>pj<span class="sym">);</span>
  <span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">function</span> countflips<span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">var</span>
  last<span class="sym">:</span> <span class="kwb">LongInt</span><span class="sym">;</span>
  tmp<span class="sym">:</span> <span class="kwb">LongInt</span><span class="sym">;</span>
<span class="kwa">begin</span>
  countflips <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
  last <span class="sym">:=</span> permu_copy<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
  <span class="kwa">repeat</span>
    <span class="slc">// Reverse part of the array.</span>
    <span class="kwd">reverse</span><span class="sym">(</span>last<span class="sym">);</span>

    tmp <span class="sym">:=</span> permu_copy<span class="sym">[</span>last<span class="sym">];</span>
    permu_copy<span class="sym">[</span>last<span class="sym">] :=</span> last<span class="sym">;</span>
    last <span class="sym">:=</span> tmp<span class="sym">;</span>
    <span class="kwd">inc</span><span class="sym">(</span>countflips<span class="sym">);</span>
  <span class="kwa">until</span> last <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">function</span> NextPermutation<span class="sym">:</span> <span class="kwb">boolean</span><span class="sym">;</span>
<span class="kwa">var</span>
  tmp<span class="sym">:</span> <span class="kwb">LongInt</span><span class="sym">;</span>
  i <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
  NextPermutation <span class="sym">:=</span> <span class="kwb">true</span><span class="sym">;</span>
  <span class="kwa">repeat</span>
    <span class="kwa">if</span> r <span class="sym">=</span> n <span class="kwa">then</span>
    <span class="kwa">begin</span>
      NextPermutation <span class="sym">:=</span> <span class="kwb">false</span><span class="sym">;</span>
      break<span class="sym">;</span>
    <span class="kwa">end</span><span class="sym">;</span>
    tmp <span class="sym">:=</span> permu<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
    <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> r <span class="kwa">do</span>
      permu<span class="sym">[</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">] :=</span> permu<span class="sym">[</span>i<span class="sym">];</span>
    permu<span class="sym">[</span>r<span class="sym">] :=</span> tmp<span class="sym">;</span>

    <span class="kwd">dec</span><span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">]);</span>
    <span class="kwa">if</span> count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span> <span class="kwa">then</span>
      break<span class="sym">;</span>
    <span class="kwd">inc</span><span class="sym">(</span>r<span class="sym">);</span>
  <span class="kwa">until</span> <span class="kwb">false</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">function</span> fannkuch<span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">var</span>
  print30<span class="sym">,</span> m<span class="sym">,</span> i<span class="sym">,</span> flips<span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
  print30 <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
  fannkuch <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
  m <span class="sym">:=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>

  <span class="slc">// Initial permutation.</span>
  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> m <span class="kwa">do</span>   permu<span class="sym">[</span>i<span class="sym">] :=</span> i<span class="sym">;</span>

  r <span class="sym">:=</span> n<span class="sym">;</span>
  <span class="kwa">repeat</span>
    <span class="kwa">if</span> print30 <span class="sym">&lt;</span> <span class="num">30</span> <span class="kwa">then</span>
    <span class="kwa">begin</span>
      <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> m <span class="kwa">do</span>
        <span class="kwd">write</span><span class="sym">(</span>permu<span class="sym">[</span>i<span class="sym">] +</span> <span class="num">1</span><span class="sym">);</span>
      writeln<span class="sym">;</span>
      <span class="kwd">inc</span><span class="sym">(</span>print30<span class="sym">);</span>
    <span class="kwa">end</span><span class="sym">;</span>
    <span class="kwa">while</span> r <span class="sym">&lt;&gt;</span> <span class="num">1</span> <span class="kwa">do</span>
    <span class="kwa">begin</span>
      count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] :=</span> r<span class="sym">;</span>
      <span class="kwd">dec</span><span class="sym">(</span>r<span class="sym">);</span>
    <span class="kwa">end</span><span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>permu<span class="sym">[</span><span class="num">0</span><span class="sym">]&lt;&gt;</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>permu<span class="sym">[</span>m<span class="sym">]&lt;&gt;</span>m<span class="sym">)</span> <span class="kwa">then</span>
    <span class="kwa">begin</span>
      <span class="kwd">move</span><span class="sym">(</span>permu<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> permu_copy<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> <span class="kwd">sizeof</span><span class="sym">(</span><span class="kwb">longint</span><span class="sym">)*</span>n<span class="sym">);</span>
      flips <span class="sym">:=</span> countflips<span class="sym">;</span>
      <span class="kwa">if</span> flips <span class="sym">&gt;</span> fannkuch <span class="kwa">then</span>
        fannkuch <span class="sym">:=</span> flips<span class="sym">;</span>
    <span class="kwa">end</span><span class="sym">;</span>
  <span class="kwa">until not</span> NextPermutation<span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">begin</span>
  n <span class="sym">:=</span> <span class="num">7</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="kwd">paramCount</span><span class="sym">() =</span> <span class="num">1</span> <span class="kwa">then</span>
    <span class="kwd">Val</span><span class="sym">(</span><span class="kwd">ParamStr</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span> n<span class="sym">);</span>
  answer <span class="sym">:=</span> fannkuch<span class="sym">;</span>
  <span class="kwd">writeln</span><span class="sym">(</span><span class="str">'Pfannkuchen('</span><span class="sym">,</span> n<span class="sym">,</span> <span class="str">') = '</span><span class="sym">,</span> answer<span class="sym">);</span>
<span class="kwa">end</span>.
