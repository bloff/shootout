<span class="com">{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Ian Osgood
}</span>

<span class="kwa">program</span> fannkuch<span class="sym">;
</span><span class="kwa">uses</span> Math<span class="sym">,</span> SysUtils<span class="sym">;

</span><span class="kwa">var</span> maxFlips <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;

</span><span class="kwa">procedure</span> exch<span class="sym">(</span><span class="kwa">var</span> a<span class="sym">,</span>b <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">);</span> <span class="kwa">inline</span><span class="sym">;
</span><span class="kwa">var</span> tmp <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">begin
</span>  tmp <span class="sym">:=</span> a<span class="sym">;</span> a <span class="sym">:=</span> b<span class="sym">;</span> b <span class="sym">:=</span> tmp<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> flop<span class="sym">(</span>p <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">integer</span><span class="sym">);
</span><span class="kwa">var</span> flips<span class="sym">,</span>k<span class="sym">,</span>i <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">begin
</span>  flips <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">while</span> p<span class="sym">[</span><span class="num">0</span><span class="sym">] &gt;</span> <span class="num">1</span> <span class="kwa">do
  begin
</span>    k <span class="sym">:=</span> p<span class="sym">[</span><span class="num">0</span><span class="sym">]-</span><span class="num">1</span><span class="sym">;
</span>    <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="sym">(</span>k<span class="num">-1</span><span class="sym">)</span> <span class="kwa">div</span> <span class="num">2</span> <span class="kwa">do
</span>      exch<span class="sym">(</span>p<span class="sym">[</span>i<span class="sym">],</span> p<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">]);
</span>    flips <span class="sym">:=</span> flips <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>  <span class="kwa">end</span><span class="sym">;
</span>  maxFlips <span class="sym">:=</span> max<span class="sym">(</span>flips<span class="sym">,</span> maxFlips<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">var</span> n<span class="sym">,</span>i<span class="sym">,</span>x <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>    a<span class="sym">,</span>s <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">begin
</span>  n <span class="sym">:=</span> StrToInt<span class="sym">(</span>paramstr<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>  SetLength<span class="sym">(</span>a<span class="sym">,</span>n<span class="sym">);
</span>  SetLength<span class="sym">(</span>s<span class="sym">,</span>n<span class="sym">);
</span>  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> n<span class="num">-1</span> <span class="kwa">do</span> a<span class="sym">[</span>i<span class="sym">] :=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span>  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> n<span class="num">-1</span> <span class="kwa">do</span> s<span class="sym">[</span>i<span class="sym">] :=</span> <span class="num">0</span><span class="sym">;
</span>  maxFlips <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>  x <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>  <span class="kwa">repeat
    if</span> s<span class="sym">[</span>x<span class="sym">] &lt;</span> x <span class="kwa">then
    begin
      if</span> odd<span class="sym">(</span>x<span class="sym">)</span> <span class="kwa">then</span> exch<span class="sym">(</span>a<span class="sym">[</span>x<span class="sym">],</span>a<span class="sym">[</span>s<span class="sym">[</span>x<span class="sym">]])</span> <span class="kwa">else</span> exch<span class="sym">(</span>a<span class="sym">[</span>x<span class="sym">],</span>a<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>      flop<span class="sym">(</span>a<span class="sym">);
</span>      s<span class="sym">[</span>x<span class="sym">] :=</span> s<span class="sym">[</span>x<span class="sym">] +</span> <span class="num">1</span><span class="sym">;
</span>      x <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">end
    else
    begin
</span>      s<span class="sym">[</span>x<span class="sym">] :=</span> <span class="num">0</span><span class="sym">;
</span>      x <span class="sym">:=</span> x <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;
</span>  <span class="kwa">until</span> x <span class="sym">=</span> n<span class="sym">;
</span>  writeln<span class="sym">(</span><span class="str">'Pfannkuchen('</span><span class="sym">,</span>n<span class="sym">,</span><span class="str">') = '</span><span class="sym">,</span>maxFlips<span class="sym">);
</span><span class="kwa">end</span>.

