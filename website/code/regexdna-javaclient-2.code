<span class="com">/*</span>
<span class="com">  The Computer Language Benchmarks Game</span>
<span class="com">  http://shootout.alioth.debian.org/</span>
<span class="com">  Modifications to Josh Goldfoot version by Byron Foster</span>
<span class="com">  which was modified originally from the Nice entry by Isaac Guoy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>lang<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>regex<span class="sym">.*;</span>

<span class="kwa">public class</span> regexdna
<span class="sym">{</span>

  <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span>
    <span class="kwa">throws</span> <span class="kwc">IOException</span>
  <span class="sym">{</span>
    <span class="kwc">BufferedReader</span> br <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span> <span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));</span>
    <span class="kwc">StringBuilder</span> sb <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuilder</span><span class="sym">();</span>
    <span class="kwb">int</span> initialLength <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">String</span> line <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span> line <span class="sym">!=</span> null<span class="sym">;</span> line <span class="sym">=</span> br<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">())</span>
    <span class="sym">{</span>
      initialLength <span class="sym">+=</span> line<span class="sym">.</span><span class="kwd">length</span><span class="sym">() +</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">.</span><span class="kwd">startsWith</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">))</span> <span class="kwa">continue</span><span class="sym">;</span>
      sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>line<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwc">String</span> sequence <span class="sym">=</span> sb<span class="sym">.</span><span class="kwd">toString</span><span class="sym">();</span>
    <span class="kwb">int</span> codeLength <span class="sym">=</span> sequence<span class="sym">.</span><span class="kwd">length</span><span class="sym">();</span>

    <span class="kwc">String</span><span class="sym">[]</span> variants <span class="sym">=</span>
      <span class="sym">{</span>
        <span class="str">&quot;agggtaaa|tttaccct&quot;</span> <span class="sym">,</span><span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span> <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span>
        <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span> <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span> <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span>
        <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
      <span class="sym">};</span>


    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> variants<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
      <span class="kwc">String</span> split<span class="sym">[] =</span> variants<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">split</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\\</span><span class="str">|&quot;</span><span class="sym">);</span>
      <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwc">Matcher</span> m <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span>split<span class="sym">[</span><span class="num">0</span><span class="sym">]).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">);</span>
      <span class="kwa">while</span> <span class="sym">(</span>m<span class="sym">.</span><span class="kwd">find</span><span class="sym">())</span>
        count<span class="sym">++;</span>
      m <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span>split<span class="sym">[</span><span class="num">1</span><span class="sym">]).</span><span class="kwd">matcher</span><span class="sym">(</span>sequence<span class="sym">);</span>
      <span class="kwa">while</span> <span class="sym">(</span>m<span class="sym">.</span><span class="kwd">find</span><span class="sym">())</span>
        count<span class="sym">++;</span>
      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>variants<span class="sym">[</span>i<span class="sym">] +</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> count<span class="sym">);</span>
    <span class="sym">}</span>

    sb <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuilder</span><span class="sym">();</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>sequence<span class="sym">.</span><span class="kwd">length</span><span class="sym">();</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
      <span class="kwb">char</span> c <span class="sym">=</span> sequence<span class="sym">.</span><span class="kwd">charAt</span><span class="sym">(</span>i<span class="sym">);</span>
      <span class="kwa">switch</span> <span class="sym">(</span>c<span class="sym">)</span>
      <span class="sym">{</span>
      <span class="kwa">case</span> <span class="str">'B'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(c|g|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'D'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(a|g|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'H'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(a|c|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'K'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(g|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'M'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(a|c)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'N'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'R'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(a|g)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'S'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(c|g)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'V'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(a|c|g)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'W'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(a|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">case</span> <span class="str">'Y'</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="str">&quot;(c|t)&quot;</span><span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="kwa">default</span><span class="sym">:</span> sb<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>c<span class="sym">);</span> <span class="kwa">break</span><span class="sym">;</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">();</span>
    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>initialLength<span class="sym">-</span><span class="num">1</span><span class="sym">);</span> <span class="slc">// Assume file does not end</span>
                                         <span class="slc">// with \n</span>
    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>codeLength<span class="sym">);</span>
    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>sb<span class="sym">.</span><span class="kwd">length</span><span class="sym">());</span>
  <span class="sym">}</span>
<span class="sym">}</span>


