<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

To compile:	
   nicec --sourcepath=.. -d=. -a moments.jar moments

To run:
   java -jar moments.jar &lt; input.txt &gt; out.txt
*/</FONT></I>


<B><FONT COLOR="#A020F0">import</FONT></B> java.io.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.text.*;

<B><FONT COLOR="#A020F0">void</FONT></B> main(String[] args){
   var num = 0.0, sum = 0.0d;
   let numbers = <B><FONT COLOR="#A020F0">new</FONT></B> ArrayList();
   <B><FONT COLOR="#A020F0">try</FONT></B> {
      let r = <B><FONT COLOR="#A020F0">new</FONT></B> BufferedReader(<B><FONT COLOR="#A020F0">new</FONT></B> InputStreamReader(System.in));
      ?String line;
      <B><FONT COLOR="#A020F0">while</FONT></B> ((line = r.readLine) != <B><FONT COLOR="#A020F0">null</FONT></B>){
         num = Double.parseDouble(line);
         sum += num; 
         numbers.add(num);
      }
   } 
   <B><FONT COLOR="#A020F0">catch</FONT></B> (IOException e) { 
      System.err.println(e);
      <B><FONT COLOR="#A020F0">return</FONT></B>; 
   }

   let n = numbers.size; <B><FONT COLOR="#A020F0">if</FONT></B> (n&lt;1) <B><FONT COLOR="#A020F0">return</FONT></B>;
   let mean = sum/n;
   var median = 0.0;
   var average_deviation = 0.0;
   var standard_deviation = 0.0;
   var variance = 0.0;
   var skew = 0.0;
   var kurtosis = 0.0;
   var deviation = 0.0;

   <B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#A020F0">double</FONT></B> each : numbers) {
      deviation = each - mean;
      average_deviation += Math.abs(deviation);
      variance += deviation ** 2;
      skew += deviation ** 3;
      kurtosis += deviation ** 4;
   } 

   average_deviation /= n;
   variance /= (n - 1);
   standard_deviation = Math.sqrt(variance);
   <B><FONT COLOR="#A020F0">if</FONT></B> (variance != 0.0) {
      skew /= (n * variance * standard_deviation);
      kurtosis = kurtosis/(n * variance * variance) - 3.0;
   }

   Collections.sort(numbers);

   let mid = n/2; 
   <B><FONT COLOR="#A020F0">if</FONT></B> (n &gt; 0) {
      median = (n % 2 != 0) ?
         numbers[mid] : (numbers[mid] + numbers[mid-1])/2;
   }

   let f = floatFormat(6);
   print(<B><FONT COLOR="#BC8F8F">&quot;n:                  &quot;</FONT></B>); println(n);
   println(<B><FONT COLOR="#BC8F8F">&quot;median:             &quot;</FONT></B> + f.format(median));
   println(<B><FONT COLOR="#BC8F8F">&quot;mean:               &quot;</FONT></B> + f.format(mean));
   println(<B><FONT COLOR="#BC8F8F">&quot;average_deviation:  &quot;</FONT></B> + f.format(average_deviation));
   println(<B><FONT COLOR="#BC8F8F">&quot;standard_deviation: &quot;</FONT></B> + f.format(standard_deviation));
   println(<B><FONT COLOR="#BC8F8F">&quot;variance:           &quot;</FONT></B> + f.format(variance));
   println(<B><FONT COLOR="#BC8F8F">&quot;skew:               &quot;</FONT></B> + f.format(skew));
   println(<B><FONT COLOR="#BC8F8F">&quot;kurtosis:           &quot;</FONT></B> + f.format(kurtosis));
}


NumberFormat floatFormat(<B><FONT COLOR="#A020F0">int</FONT></B> digits){
   let f = NumberFormat.getInstance();
   f.setGroupingUsed(<B><FONT COLOR="#A020F0">false</FONT></B>);
   f.setMaximumFractionDigits(digits);
   f.setMinimumFractionDigits(digits);
   <B><FONT COLOR="#A020F0">return</FONT></B> f;
} 
</pre></td></tr></table>
