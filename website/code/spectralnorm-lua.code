<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- contributed by Isaac Gouy, tuned by Mike Pall
</span>
<span class="kwa">local function</span> A<span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">)
</span>  <span class="kwa">local</span> ij <span class="sym">=</span> i<span class="sym">+</span>j
  <span class="kwa">return</span> <span class="num">1.0</span> <span class="sym">/ (</span>ij <span class="sym">* (</span>ij<span class="sym">+</span><span class="num">1</span><span class="sym">) *</span> <span class="num">0.5</span> <span class="sym">+</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">)
</span><span class="kwa">end

local function</span> Av<span class="sym">(</span>n<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">)
</span>  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span>n<span class="num">-1</span> <span class="kwa">do
    local</span> a <span class="sym">=</span> <span class="num">0
</span>    <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span>n<span class="num">-1</span> <span class="kwa">do</span> a <span class="sym">=</span> a <span class="sym">+</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) *</span> x<span class="sym">[</span>j<span class="sym">]</span> <span class="kwa">end
</span>    y<span class="sym">[</span>i<span class="sym">] =</span> a
  <span class="kwa">end
end

local function</span> Atv<span class="sym">(</span>n<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">)
</span>  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span>n<span class="num">-1</span> <span class="kwa">do
    local</span> a <span class="sym">=</span> <span class="num">0
</span>    <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span>n<span class="num">-1</span> <span class="kwa">do</span> a <span class="sym">=</span> a <span class="sym">+</span> A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">) *</span> x<span class="sym">[</span>j<span class="sym">]</span> <span class="kwa">end
</span>    y<span class="sym">[</span>i<span class="sym">] =</span> a
  <span class="kwa">end
end

local function</span> AtAv<span class="sym">(</span>n<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> t<span class="sym">)
</span>  Av<span class="sym">(</span>n<span class="sym">,</span> x<span class="sym">,</span> t<span class="sym">)
</span>  Atv<span class="sym">(</span>n<span class="sym">,</span> t<span class="sym">,</span> y<span class="sym">)
</span><span class="kwa">end


local</span> n <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">100
</span><span class="kwa">local</span> u<span class="sym">,</span> v<span class="sym">,</span> t <span class="sym">= {}, {}, {}
</span><span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span>n<span class="num">-1</span> <span class="kwa">do</span> u<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">1</span> <span class="kwa">end

for</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span><span class="num">10</span> <span class="kwa">do</span> AtAv<span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> v<span class="sym">,</span> t<span class="sym">)</span> AtAv<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> u<span class="sym">,</span> t<span class="sym">)</span> <span class="kwa">end

local</span> vBv<span class="sym">,</span> vv <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0
</span><span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span>n<span class="num">-1</span> <span class="kwa">do
  local</span> ui<span class="sym">,</span> vi <span class="sym">=</span> u<span class="sym">[</span>i<span class="sym">],</span> v<span class="sym">[</span>i<span class="sym">]
</span>  vBv <span class="sym">=</span> vBv <span class="sym">+</span> ui<span class="sym">*</span>vi
  vv <span class="sym">=</span> vv <span class="sym">+</span> vi<span class="sym">*</span>vi
<span class="kwa">end

</span>io.<span class="kwa">write</span><span class="sym">(</span><span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;%0.9f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> math.<span class="kwa">sqrt</span><span class="sym">(</span>vBv <span class="sym">/</span> vv<span class="sym">)))</span>
