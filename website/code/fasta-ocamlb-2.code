<span class="com">(* http://shootout.alioth.debian.org/benchmark.php?test=fasta&amp;lang=all *)</span>
<span class="com">(* This version is only marginally faster (2%) -- but less elegant --
   than the HOF one. *)</span>

<span class="com">(* Random number generator (Shootout version) *)</span>
<span class="kwa">let rec</span> gen_random <span class="sym">=
</span>  <span class="kwa">let</span> im <span class="sym">=</span> <span class="num">139968
</span>  <span class="kwa">and</span> ia <span class="sym">=</span> <span class="num">3877
</span>  <span class="kwa">and</span> ic <span class="sym">=</span> <span class="num">29573</span> <span class="kwa">in
  let</span> last <span class="sym">=</span> ref <span class="num">42
</span>  <span class="kwa">and</span> inv_im <span class="sym">=</span> <span class="num">1</span>. <span class="sym">/</span>. <span class="kwb">float</span> im <span class="kwa">in
  fun</span> max <span class="sym">-&gt;
</span>    last <span class="sym">:= (!</span>last <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> <span class="kwa">mod</span> im<span class="sym">;
</span>    max <span class="sym">*</span>. <span class="kwb">float</span> <span class="sym">!</span>last <span class="sym">*</span>. inv_im


<span class="kwa">let</span> make_cumulative <span class="sym">=
</span>  <span class="kwa">let rec</span> cumul prob <span class="sym">=</span> <span class="kwa">function
</span>    <span class="sym">| [] -&gt; []
    | (</span>c<span class="sym">,</span> p<span class="sym">) ::</span> tl <span class="sym">-&gt;</span> <span class="kwa">let</span> prob <span class="sym">=</span> prob <span class="sym">+</span>. p <span class="kwa">in</span> <span class="sym">(</span>c<span class="sym">,</span> prob<span class="sym">) ::</span> cumul prob tl  <span class="kwa">in
  fun</span> table <span class="sym">-&gt;</span> cumul <span class="num">0</span>. table

<span class="kwa">let rec</span> rand_char <span class="sym">(</span>prob <span class="sym">:</span> <span class="kwb">float</span><span class="sym">) =</span> <span class="kwa">function
</span>  <span class="sym">| [] -&gt;</span> failwith <span class="str">&quot;rand_c&quot;</span>
  <span class="sym">| (</span>c<span class="sym">,</span> p<span class="sym">) ::</span> tl <span class="sym">-&gt;</span> <span class="kwa">if</span> prob <span class="sym">&lt;=</span> p <span class="kwa">then</span> c <span class="kwa">else</span> rand_char prob tl

<span class="kwa">let</span> width <span class="sym">=</span> <span class="num">60

</span><span class="com">(* [write s i0 l w] outputs [w] chars of [s.[0 .. l]] starting with
   [s.[i0]] and considering the substring [s.[0 .. l]] as a &quot;circle&quot;.
   One assumes [0 &lt;= i0 &lt;= l &lt;= String.length s].
   &#64;return [i0] needed for subsequent writes.  *)</span>
<span class="kwa">let rec</span> write s i0 l w <span class="sym">=
</span>  <span class="kwa">let</span> len <span class="sym">=</span> l <span class="sym">-</span> i0 <span class="kwa">in
  if</span> w <span class="sym">&lt;=</span> len <span class="kwa">then</span> <span class="sym">(</span>output stdout s i0 w<span class="sym">;</span> i0 <span class="sym">+</span> w<span class="sym">)
</span>  <span class="kwa">else</span> <span class="sym">(</span>output stdout s i0 len<span class="sym">;</span> write s <span class="num">0</span> l <span class="sym">(</span>w <span class="sym">-</span> len<span class="sym">))

</span><span class="kwa">let</span> make_repeat_fasta id desc src n <span class="sym">=
</span>  Printf.printf <span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span> id desc<span class="sym">;
</span>  <span class="kwa">let</span> i0 <span class="sym">=</span> ref <span class="num">0
</span>  <span class="kwa">and</span> l <span class="sym">=</span> String.length src <span class="kwa">in
  for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="sym">/</span> width <span class="kwa">do
</span>    i0 <span class="sym">:=</span> write src <span class="sym">!</span>i0 l width<span class="sym">;
</span>    print_char <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;
</span>  <span class="kwa">done</span><span class="sym">;
</span>  i0 <span class="sym">:=</span> write src <span class="sym">!</span>i0 l <span class="sym">(</span>n <span class="kwa">mod</span> width<span class="sym">);
</span>  print_char <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>

<span class="kwa">let</span> make_random_fasta id desc table n <span class="sym">=
</span>  Printf.printf <span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span> id desc<span class="sym">;
</span>  <span class="kwa">let</span> table <span class="sym">=</span> make_cumulative table <span class="kwa">in
  for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="sym">/</span> width <span class="kwa">do
    for</span> j <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> width <span class="kwa">do</span> print_char<span class="sym">(</span>rand_char <span class="sym">(</span>gen_random <span class="num">1</span>.<span class="sym">)</span> table<span class="sym">);</span> <span class="kwa">done</span><span class="sym">;
</span>    print_char <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;
</span>  <span class="kwa">done</span><span class="sym">;
</span>  <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">mod</span> width <span class="kwa">do
</span>    print_char<span class="sym">(</span>rand_char <span class="sym">(</span>gen_random <span class="num">1</span>.<span class="sym">)</span> table<span class="sym">);
</span>  <span class="kwa">done</span><span class="sym">;
</span>  print_char <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>



<span class="kwa">let</span> alu <span class="sym">=</span> <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG</span><span class="esc">\
</span><span class="str">GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA</span><span class="esc">\
</span><span class="str">CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT</span><span class="esc">\
</span><span class="str">ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA</span><span class="esc">\
</span><span class="str">GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG</span><span class="esc">\
</span><span class="str">AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC</span><span class="esc">\
</span><span class="str">AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="kwa">let</span> iub <span class="sym">= [
  (</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.270</span><span class="sym">);	(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.125</span><span class="sym">);	(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.125</span><span class="sym">);	(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.270</span><span class="sym">);

  (</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);	(</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);	(</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);	(</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
  (</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);	(</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);	(</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);	(</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
  (</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);	(</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);	(</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">);
]

</span><span class="kwa">let</span> homosapiens <span class="sym">= [
    (</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">);    (</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">);
    (</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">);    (</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">);
]

</span><span class="kwa">let</span> <span class="sym">() =
</span>  <span class="kwa">let</span> n <span class="sym">=</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">in
</span>  make_repeat_fasta <span class="str">&quot;ONE&quot;</span> <span class="str">&quot;Homo sapiens alu&quot;</span> alu <span class="sym">(</span>n<span class="sym">*</span><span class="num">2</span><span class="sym">);
</span>  make_random_fasta <span class="str">&quot;TWO&quot;</span> <span class="str">&quot;IUB ambiguity codes&quot;</span> iub <span class="sym">(</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">);
</span>  make_random_fasta <span class="str">&quot;THREE&quot;</span> <span class="str">&quot;Homo sapiens frequency&quot;</span> homosapiens <span class="sym">(</span>n<span class="sym">*</span><span class="num">5</span><span class="sym">)</span>
