<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System Application

<span class="kwb">define</span> Start <span class="sym">=</span> <span class="num">2</span> N

  <span class="kwb">proc</span> <span class="sym">{</span>CalcAndShowSieve Start Stop<span class="sym">}</span>
    <span class="kwa">local</span> Entries Count Output SPACE <span class="sym">=</span> <span class="num">32</span> <span class="kwb">in</span>

      Entries <span class="sym">= {</span>Array.new Start Stop true<span class="sym">}</span>
      Count <span class="sym">= {</span>Sieve <span class="num">1</span> Start Start Stop <span class="num">0</span> Entries<span class="sym">}</span>

      Output <span class="sym">=</span>
        <span class="str">&quot;Primes up to&quot;</span>#
        <span class="sym">{</span>JustifyRight <span class="sym">{</span>Int.toString Stop<span class="sym">}</span> SPACE <span class="num">9</span><span class="sym">}</span>#
        <span class="sym">{</span>JustifyRight <span class="sym">{</span>Int.toString Count<span class="sym">}</span> SPACE <span class="num">9</span><span class="sym">}</span>#
        <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>

      <span class="sym">{</span>System.printInfo Output<span class="sym">}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>Sieve I J Start Stop Count Entries<span class="sym">}</span>
    <span class="kwb">if</span> I <span class="sym">&gt;</span> N <span class="kwb">then</span>
      Count
    <span class="kwb">else</span>
      <span class="kwb">if</span> J <span class="sym">&gt;</span> Stop <span class="kwb">then</span>
        <span class="sym">{</span>Sieve <span class="sym">(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> Start Start Stop Count Entries<span class="sym">}</span>
      <span class="kwb">else</span>
        <span class="kwb">if</span> <span class="sym">{</span>Array.get Entries J<span class="sym">}</span> <span class="kwb">then</span>
          <span class="sym">{</span>Array.put Entries J false<span class="sym">} {</span>ClearMultiples <span class="sym">(</span>J <span class="sym">+</span> J<span class="sym">)</span> J Stop Entries<span class="sym">}</span>
          <span class="sym">{</span>Sieve I <span class="sym">(</span>J <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> Start Stop <span class="sym">(</span>Count <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> Entries<span class="sym">}</span>
        <span class="kwb">else</span>
          <span class="sym">{</span>Sieve I <span class="sym">(</span>J <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> Start Stop Count Entries<span class="sym">}</span>
        <span class="kwb">end</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">proc</span> <span class="sym">{</span>ClearMultiples K J Stop Entries<span class="sym">}</span>
    <span class="kwb">if</span> K <span class="sym">=&lt;</span> Stop <span class="kwb">then</span> <span class="sym">{</span>Array.put Entries K false<span class="sym">} {</span>ClearMultiples <span class="sym">(</span>K <span class="sym">+</span> J<span class="sym">)</span> J Stop Entries<span class="sym">}</span> <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span>
    <span class="kwa">local</span> Nt N <span class="kwb">in</span>
      <span class="kwa">try</span>
        Nt <span class="sym">= {</span>String.toInt <span class="sym">{</span>Application.getArgs plain<span class="sym">}</span>.Nth<span class="sym">}</span>
        N <span class="sym">=</span> <span class="kwb">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwb">then</span> Default <span class="kwb">else</span> Nt <span class="kwb">end</span>
      <span class="kwa">catch</span> error<span class="sym">(</span>...<span class="sym">)</span> <span class="kwb">then</span>
        N <span class="sym">=</span> Default
      <span class="kwb">end</span>
      N
    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FillList S C<span class="sym">}</span>
    <span class="kwb">for</span> I <span class="kwb">in</span> S <span class="kwb">do</span> I <span class="sym">=</span> C <span class="kwb">end</span>
    S
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>JustifyRight S C N<span class="sym">}</span>
    <span class="sym">{</span>Append <span class="sym">{</span>FillList <span class="sym">{</span>MakeList <span class="sym">(</span>N <span class="sym">- {</span>Length S<span class="sym">})}</span> C<span class="sym">}</span> S<span class="sym">}</span>
  <span class="kwb">end</span>

<span class="kwb">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1</span> Start<span class="sym">}</span>

  <span class="sym">{</span>CalcAndShowSieve Start <span class="sym">({</span>Number.pow <span class="num">2</span> N<span class="sym">} *</span> <span class="num">10000</span><span class="sym">)}</span>
  <span class="sym">{</span>CalcAndShowSieve Start <span class="sym">({</span>Number.pow <span class="num">2</span> <span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)} *</span> <span class="num">10000</span><span class="sym">)}</span>
  <span class="sym">{</span>CalcAndShowSieve Start <span class="sym">({</span>Number.pow <span class="num">2</span> <span class="sym">(</span>N <span class="sym">-</span> <span class="num">2</span><span class="sym">)} *</span> <span class="num">10000</span><span class="sym">)}</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
