<span class="slc">%%% -*- mode: erlang -*-
</span><span class="slc">%%% $Id: spellcheck-erlang.code,v 1.7 2005-05-03 07:19:25 bfulgham Exp $
</span><span class="slc">%%% http://shootout.alioth.debian.org/
</span><span class="slc">%%%
</span><span class="slc">%%% New (speedy) implementation by Bengt Kleberg.
</span>
<span class="sym">-</span>module<span class="sym">(</span>spellcheck<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">'1'</span><span class="sym">])</span>.
main<span class="sym">(</span>_Args<span class="sym">) -&gt;
</span>	Dict <span class="sym">=</span> load_dict<span class="sym">(),
</span>	spell<span class="sym">(</span> io<span class="sym">:</span>fread<span class="sym">(</span><span class="str">''</span><span class="sym">,</span> <span class="str">&quot;~s&quot;</span><span class="sym">),</span> Dict <span class="sym">),
</span>	<span class="kwb">halt</span><span class="sym">()</span>.

load_dict<span class="sym">() -&gt;
</span>	Dict <span class="sym">=</span> ets<span class="sym">:</span>new<span class="sym">(</span>i_am_a_carrot<span class="sym">, [</span>set<span class="sym">]),
	{</span>ok<span class="sym">,</span> Binary<span class="sym">} =</span> file<span class="sym">:</span>read_file<span class="sym">(</span><span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">),
</span>	Fun <span class="sym">=</span> <span class="kwa">fun</span><span class="sym">(</span> Word <span class="sym">) -&gt;
</span>		ets<span class="sym">:</span>insert<span class="sym">(</span>Dict<span class="sym">, {</span>Word<span class="sym">,</span> <span class="num">1</span><span class="sym">})
</span>	<span class="kwa">end</span><span class="sym">,
</span>	lists<span class="sym">:</span>foreach<span class="sym">(</span> Fun<span class="sym">,</span> string<span class="sym">:</span>tokens<span class="sym">(</span>erlang<span class="sym">:</span><span class="kwb">binary_to_list</span><span class="sym">(</span> Binary <span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">) ),
</span>	Dict.

spell<span class="sym">(</span>eof<span class="sym">,</span> _Dict<span class="sym">) -&gt;
</span>	ok<span class="sym">;
</span>spell<span class="sym">({</span>ok<span class="sym">, [</span>Word<span class="sym">]},</span> Dict<span class="sym">) -&gt;
</span>	<span class="kwa">case</span> ets<span class="sym">:</span>lookup<span class="sym">(</span>Dict<span class="sym">,</span> Word<span class="sym">)</span> <span class="kwa">of
</span>		<span class="sym">[] -&gt;</span> io<span class="sym">:</span>format<span class="sym">(</span><span class="str">&quot;~s~n&quot;</span><span class="sym">,[</span>Word<span class="sym">]);
</span>		_Entry  <span class="sym">-&gt;</span> ok
	<span class="kwa">end</span><span class="sym">,
</span>	spell<span class="sym">(</span> io<span class="sym">:</span>fread<span class="sym">(</span><span class="str">''</span><span class="sym">,</span> <span class="str">&quot;~s&quot;</span><span class="sym">),</span> Dict <span class="sym">)</span>.

