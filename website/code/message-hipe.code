<span class="slc">%  The Great Computer Language Shootout 
</span><span class="slc">%   http://shootout.alioth.debian.org/ 
</span><span class="slc">%   
</span><span class="slc">%   contributed by Mark Scandariato 
</span><span class="slc">% 
</span><span class="slc">% To run with a ring larger than 32K processes, use: 
</span><span class="slc">%   erl -noshell -noinput +P LIMIT -run message main N M 
</span><span class="slc">% where LIMIT is an integer greater than N. So: 
</span><span class="slc">%   erl -noshell -noinput +P 500000 -run message main 400000 100 
</span><span class="slc">% 
</span><span class="slc">% Note that this will send M+1 messages around the ring  
</span><span class="slc">% (the final message terminates the ring). 
</span><span class="slc">% 
</span><span class="slc">% Note too that this doesn't wait for the ring to be completed  
</span><span class="slc">% before it starts sending messages. 
</span>

  <span class="sym">-</span>module<span class="sym">(</span>message<span class="sym">)</span>.
 <span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">,</span> ring<span class="sym">/</span><span class="num">2</span><span class="sym">])</span>.

  main<span class="sym">([</span>A1<span class="sym">]) -&gt;
 </span>    N <span class="sym">=</span> <span class="num">3000</span><span class="sym">,</span> <span class="slc">%%% list_to_integer(A1), 
</span>    M <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>A1<span class="sym">),
 </span>    io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~p~n&quot;</span><span class="sym">, [</span>ring<span class="sym">(</span>N<span class="sym">,</span> M<span class="sym">)]),
 </span>    erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.

      ring<span class="sym">(</span>N<span class="sym">,</span> M<span class="sym">)</span> <span class="kwa">when</span> M <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">,</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">-&gt;
 </span>    First <span class="sym">=</span> <span class="kwb">spawn</span><span class="sym">(</span><span class="kwa">fun</span><span class="sym">() -&gt;</span> proc<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">end</span><span class="sym">),
 </span>    inject<span class="sym">(</span>First<span class="sym">,</span> M<span class="sym">),
 </span>    First <span class="sym">!</span> <span class="kwb">self</span><span class="sym">(),
 </span>    <span class="kwa">receive
 </span>        <span class="sym">{</span>done<span class="sym">,</span> A<span class="sym">} -&gt;</span> A
     <span class="kwa">end</span>.

  inject<span class="sym">(</span>_<span class="sym">,</span> <span class="num">0</span><span class="sym">) -&gt;</span> ok<span class="sym">;
 </span>inject<span class="sym">(</span>Pid<span class="sym">,</span> M<span class="sym">) -&gt;
 </span>    Pid <span class="sym">!</span> <span class="num">0</span><span class="sym">,
 </span>    inject<span class="sym">(</span>Pid<span class="sym">,</span> M<span class="num">-1</span><span class="sym">)</span>.


   proc<span class="sym">(</span><span class="num">0</span><span class="sym">) -&gt;
  </span>    acc<span class="sym">(</span><span class="num">0</span><span class="sym">);
 </span>proc<span class="sym">(</span>N<span class="sym">) -&gt;
 </span>    Next <span class="sym">=</span> <span class="kwb">spawn</span><span class="sym">(</span><span class="kwa">fun</span><span class="sym">() -&gt;</span> proc<span class="sym">(</span>N<span class="num">-1</span><span class="sym">)</span> <span class="kwa">end</span><span class="sym">),
 </span>    fwd<span class="sym">(</span>Next<span class="sym">)</span>.

  fwd<span class="sym">(</span>Next<span class="sym">) -&gt;
 </span>    <span class="kwa">receive
 </span>        M <span class="kwa">when</span> is_integer<span class="sym">(</span>M<span class="sym">) -&gt;
  </span>            Next <span class="sym">!</span> M<span class="sym">+</span><span class="num">1</span><span class="sym">,
 </span>            fwd<span class="sym">(</span>Next<span class="sym">);
 </span>        Pid <span class="kwa">when</span> is_pid<span class="sym">(</span>Pid<span class="sym">) -&gt;</span> Next <span class="sym">!</span> Pid
     <span class="kwa">end</span>.

  acc<span class="sym">(</span>A<span class="sym">) -&gt;
 </span>    <span class="kwa">receive
 </span>        M <span class="kwa">when</span> is_integer<span class="sym">(</span>M<span class="sym">) -&gt;</span> acc<span class="sym">(</span>A<span class="sym">+</span>M<span class="sym">);
 </span>        Pid <span class="kwa">when</span> is_pid<span class="sym">(</span>Pid<span class="sym">) -&gt;</span> Pid <span class="sym">! {</span>done<span class="sym">,</span> A<span class="sym">}
 </span>    <span class="kwa">end</span>. 
