<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Lester Vecsey */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>

<span class="kwb">int</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="kwb">int</span> x<span class="sym">,</span> <span class="kwb">int</span> y<span class="sym">) {</span>

	<span class="kwa">return</span> <span class="sym">!</span>x ? y <span class="sym">+</span> <span class="num">1</span> <span class="sym">: (!</span>y ? <span class="kwd">Ack</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">) :</span> <span class="kwd">Ack</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">)));</span>

	<span class="sym">}</span>

<span class="dir">#define Fib_core(f,n) (n&lt;2 ? 1 : f(n-2) + f(n-1))</span>
<span class="dir">#define Tak_core(f,x,y,z) (y&lt;x ? f(f(x-1.0,y,z), f(y-1.0,z,x), f(z-1.0,x,y)) : z)</span>

<span class="kwb">int</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span> <span class="kwa">return</span> <span class="kwd">Fib_core</span><span class="sym">(</span>Fib<span class="sym">,</span>n<span class="sym">); }</span>
<span class="kwb">double</span> <span class="kwd">Fib_double</span><span class="sym">(</span><span class="kwb">double</span> n<span class="sym">) {</span> <span class="kwa">return</span> <span class="kwd">Fib_core</span><span class="sym">(</span>Fib_double<span class="sym">,</span>n<span class="sym">); }</span>

<span class="kwb">int</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="kwb">int</span> x<span class="sym">,</span> <span class="kwb">int</span> y<span class="sym">,</span> <span class="kwb">int</span> z<span class="sym">) {</span> <span class="kwa">return</span> <span class="kwd">Tak_core</span><span class="sym">(</span>Tak<span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">); }</span>
<span class="kwb">double</span> <span class="kwd">Tak_double</span><span class="sym">(</span><span class="kwb">double</span> x<span class="sym">,</span> <span class="kwb">double</span> y<span class="sym">,</span> <span class="kwb">double</span> z<span class="sym">) {</span> <span class="kwa">return</span> <span class="kwd">Tak_core</span><span class="sym">(</span>Tak_double<span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">); }</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>

	<span class="kwb">int</span> n <span class="sym">=</span> argc<span class="sym">&gt;</span><span class="num">1</span> ? <span class="kwd">strtol</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">],</span>NULL<span class="sym">,</span><span class="num">10</span><span class="sym">) :</span> <span class="num">3</span><span class="sym">;</span>

	<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Ack(%d,%d): %d</span><span class="esc">\n</span><span class="str">Fib(%.1f): %.1f</span><span class="esc">\n</span><span class="str">Tak(%d,%d,%d): %d</span><span class="esc">\n</span><span class="str">Fib(%d): %d</span><span class="esc">\n</span><span class="str">Tak(%.1f,%.1f,%.1f): %.1f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
		n<span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span>n<span class="sym">,</span>n<span class="sym">), (</span><span class="kwb">float</span><span class="sym">)</span> n<span class="sym">*</span><span class="num">10</span><span class="sym">,</span> <span class="kwd">Fib_double</span><span class="sym">(</span>n<span class="sym">*</span><span class="num">10</span><span class="sym">),</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">Tak</span><span class="sym">(</span>n<span class="sym">*</span><span class="num">2</span><span class="sym">,</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">),</span> n<span class="sym">,</span> <span class="kwd">Fib</span><span class="sym">(</span>n<span class="sym">),</span>
		<span class="sym">(</span><span class="kwb">float</span><span class="sym">)</span>n<span class="sym">, (</span><span class="kwb">float</span><span class="sym">)</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">, (</span><span class="kwb">float</span><span class="sym">)</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">,</span> <span class="kwd">Tak_double</span><span class="sym">(</span>n<span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">));</span>

	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>

	<span class="sym">}</span>

