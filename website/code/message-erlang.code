<span class="slc">%  The Great Computer Language Shootout
</span><span class="slc">%   http://shootout.alioth.debian.org/
</span><span class="slc">%
</span><span class="slc">%   contributed by Mark Scandariato
</span><span class="slc">%
</span><span class="slc">%   erl -noshell -noinput -run message main N
</span>

<span class="sym">-</span>module<span class="sym">(</span>message<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">,</span> ring<span class="sym">/</span><span class="num">2</span><span class="sym">])</span>.

main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span>    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),
</span>    io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~p~n&quot;</span><span class="sym">, [</span>ring<span class="sym">(</span><span class="num">500</span><span class="sym">,</span> N<span class="sym">)]),
</span>    erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.

ring<span class="sym">(</span>L<span class="sym">,</span> N<span class="sym">)</span> <span class="kwa">when</span> N <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">,</span> L <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">-&gt;
</span>    Pid <span class="sym">=</span> <span class="kwb">self</span><span class="sym">(),
</span>    First <span class="sym">=</span> <span class="kwb">spawn</span><span class="sym">(</span><span class="kwa">fun</span><span class="sym">() -&gt;</span> proc<span class="sym">(</span>L<span class="sym">,</span> Pid<span class="sym">)</span> <span class="kwa">end</span><span class="sym">),
</span>    <span class="kwa">receive</span> ready <span class="sym">-&gt;</span> ok <span class="kwa">end</span><span class="sym">,
</span>    inject<span class="sym">(</span>First<span class="sym">,</span> N<span class="sym">),
</span>    First <span class="sym">!</span> Pid<span class="sym">,
</span>    <span class="kwa">receive</span> <span class="sym">{</span>done<span class="sym">,</span> A<span class="sym">} -&gt;</span> A <span class="kwa">end</span>.

inject<span class="sym">(</span>_<span class="sym">,</span> <span class="num">0</span><span class="sym">) -&gt;</span> ok<span class="sym">;
</span>inject<span class="sym">(</span>Pid<span class="sym">,</span> N<span class="sym">) -&gt;
</span>    Pid <span class="sym">!</span> <span class="num">0</span><span class="sym">,
</span>    inject<span class="sym">(</span>Pid<span class="sym">,</span> N<span class="num">-1</span><span class="sym">)</span>.


proc<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> Start<span class="sym">) -&gt;
</span>    Start <span class="sym">!</span> ready<span class="sym">,
</span>    acc<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>proc<span class="sym">(</span>L<span class="sym">,</span> Start<span class="sym">) -&gt;
</span>    Next <span class="sym">=</span> <span class="kwb">spawn</span><span class="sym">(</span><span class="kwa">fun</span><span class="sym">() -&gt;</span> proc<span class="sym">(</span>L<span class="num">-1</span><span class="sym">,</span> Start<span class="sym">)</span> <span class="kwa">end</span><span class="sym">),
</span>    fwd<span class="sym">(</span>Next<span class="sym">)</span>.

fwd<span class="sym">(</span>Next<span class="sym">) -&gt;
</span>    <span class="kwa">receive
</span>        N <span class="kwa">when</span> is_integer<span class="sym">(</span>N<span class="sym">) -&gt;
</span>            Next <span class="sym">!</span> N<span class="sym">+</span><span class="num">1</span><span class="sym">,
</span>            fwd<span class="sym">(</span>Next<span class="sym">);
</span>        Pid <span class="kwa">when</span> is_pid<span class="sym">(</span>Pid<span class="sym">) -&gt;
</span>            Next <span class="sym">!</span> Pid
    <span class="kwa">end</span>.

acc<span class="sym">(</span>A<span class="sym">) -&gt;
</span>    <span class="kwa">receive
</span>        N <span class="kwa">when</span> is_integer<span class="sym">(</span>N<span class="sym">) -&gt;</span> acc<span class="sym">(</span>A<span class="sym">+</span>N<span class="sym">);
</span>        Pid <span class="kwa">when</span> is_pid<span class="sym">(</span>Pid<span class="sym">) -&gt;</span> Pid <span class="sym">! {</span>done<span class="sym">,</span> A<span class="sym">}
</span>    <span class="kwa">end</span>.
