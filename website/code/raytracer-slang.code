<span class="dir">#!/usr/bin/env slsh
</span>
<span class="dir">#ifnexists DOUBLE_EPSILON
</span>variable DOUBLE_EPSILON <span class="sym">=</span> <span class="num">2.22045e</span><span class="sym">-</span><span class="num">16</span><span class="sym">;
</span><span class="dir">#endif
</span><span class="kwc">private</span> variable delta <span class="sym">=</span> sqrt <span class="sym">(</span>DOUBLE_EPSILON<span class="sym">);
</span><span class="dir">#ifnexists _Inf
</span>variable _Inf <span class="sym">= -</span>log<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="dir">#endif
</span><span class="kwc">private</span> variable INFINITY <span class="sym">=</span> _Inf<span class="sym">;

</span><span class="kwc">typedef</span> <span class="kwb">struct</span> <span class="sym">{</span> x<span class="sym">,</span>y<span class="sym">,</span>z <span class="sym">}</span> Vec<span class="sym">;
</span><span class="kwc">private</span> define vector <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">) {</span> variable v<span class="sym">=</span>&#64;Vec<span class="sym">;</span> v<span class="sym">.</span>x<span class="sym">=</span>x<span class="sym">;</span> v<span class="sym">.</span>y<span class="sym">=</span>y<span class="sym">;</span> v<span class="sym">.</span>z<span class="sym">=</span>z<span class="sym">;</span> <span class="kwa">return</span> v<span class="sym">;}
</span><span class="kwc">private</span> define dot <span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) {</span> <span class="kwa">return</span> a<span class="sym">.</span>x<span class="sym">*</span>b<span class="sym">.</span>x <span class="sym">+</span> a<span class="sym">.</span>y<span class="sym">*</span>b<span class="sym">.</span>y <span class="sym">+</span> a<span class="sym">.</span>z<span class="sym">*</span>b<span class="sym">.</span>z<span class="sym">; }
</span><span class="kwc">private</span> define add <span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) {</span> <span class="kwa">return</span> vector <span class="sym">(</span>a<span class="sym">.</span>x<span class="sym">+</span>b<span class="sym">.</span>x<span class="sym">,</span> a<span class="sym">.</span>y<span class="sym">+</span>b<span class="sym">.</span>y<span class="sym">,</span> a<span class="sym">.</span>z<span class="sym">+</span>b<span class="sym">.</span>z<span class="sym">);}
</span><span class="kwc">private</span> define sub <span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">) {</span> <span class="kwa">return</span> vector <span class="sym">(</span>a<span class="sym">.</span>x<span class="sym">-</span>b<span class="sym">.</span>x<span class="sym">,</span> a<span class="sym">.</span>y<span class="sym">-</span>b<span class="sym">.</span>y<span class="sym">,</span> a<span class="sym">.</span>z<span class="sym">-</span>b<span class="sym">.</span>z<span class="sym">);}
</span><span class="kwc">private</span> define scale <span class="sym">(</span>a<span class="sym">,</span>v<span class="sym">) {</span> <span class="kwa">return</span> vector <span class="sym">(</span>a<span class="sym">*</span>v<span class="sym">.</span>x<span class="sym">,</span> a<span class="sym">*</span>v<span class="sym">.</span>y<span class="sym">,</span> a<span class="sym">*</span>v<span class="sym">.</span>z<span class="sym">); }
</span><span class="kwc">private</span> define unitise <span class="sym">(</span>a<span class="sym">) {</span> <span class="kwa">return</span> scale<span class="sym">(</span><span class="num">1.0</span> <span class="sym">/</span> sqrt<span class="sym">(</span>dot<span class="sym">(</span>a<span class="sym">,</span> a<span class="sym">)),</span> a<span class="sym">); }
</span><span class="kwc">private</span> define filter_vector <span class="sym">(</span>v<span class="sym">,</span> i<span class="sym">) {</span> <span class="kwa">return</span> vector <span class="sym">(</span>v<span class="sym">.</span>x<span class="sym">[</span>i<span class="sym">],</span> v<span class="sym">.</span>y<span class="sym">[</span>i<span class="sym">],</span> v<span class="sym">.</span>z<span class="sym">[</span>i<span class="sym">]); }
</span><span class="kwc">private</span> define replicate_vector <span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">)
{
</span>   <span class="kwa">return</span> vector <span class="sym">(</span>Double_Type<span class="sym">[</span>n<span class="sym">]+</span>v<span class="sym">.</span>x<span class="sym">,</span>Double_Type<span class="sym">[</span>n<span class="sym">]+</span>v<span class="sym">.</span>y<span class="sym">,</span>Double_Type<span class="sym">[</span>n<span class="sym">]+</span>v<span class="sym">.</span>z<span class="sym">);
}

</span><span class="kwc">typedef</span> <span class="kwb">struct</span> <span class="sym">{</span>orig<span class="sym">,</span> dir<span class="sym">}</span> Ray_Type<span class="sym">;
</span><span class="kwc">private</span> define ray <span class="sym">(</span>o<span class="sym">,</span> d<span class="sym">)
{
</span>   variable r <span class="sym">=</span> &#64;Ray_Type<span class="sym">;</span> r<span class="sym">.</span>orig <span class="sym">=</span> o<span class="sym">;</span> r<span class="sym">.</span>dir <span class="sym">=</span> d<span class="sym">;</span> <span class="kwa">return</span> r<span class="sym">;
}
</span><span class="kwc">private</span> define filter_rays <span class="sym">(</span>r<span class="sym">,</span> i<span class="sym">)
{
</span>   <span class="kwa">return</span> ray <span class="sym">(</span>filter_vector <span class="sym">(</span>r<span class="sym">.</span>orig<span class="sym">,</span> i<span class="sym">),</span> filter_vector <span class="sym">(</span>r<span class="sym">.</span>dir<span class="sym">,</span> i<span class="sym">));
}

</span><span class="kwc">private</span> variable SphereTag <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="kwc">private</span> variable GroupTag <span class="sym">=</span> <span class="num">2</span><span class="sym">;
</span><span class="kwc">typedef</span> <span class="kwb">struct</span> <span class="sym">{</span> center<span class="sym">,</span> radius <span class="sym">}</span> Sphere_Type<span class="sym">;
</span><span class="kwc">private</span> define sphere <span class="sym">(</span>c<span class="sym">,</span> r<span class="sym">)
{
</span>   variable s <span class="sym">=</span> &#64;Sphere_Type<span class="sym">;</span>s<span class="sym">.</span>center <span class="sym">=</span> c<span class="sym">;</span> s<span class="sym">.</span>radius <span class="sym">=</span> r<span class="sym">;</span> <span class="kwa">return</span> s<span class="sym">;
}

</span><span class="kwc">typedef</span> <span class="kwb">struct</span> <span class="sym">{</span> bound<span class="sym">,</span> child <span class="sym">}</span> Group_Type<span class="sym">;
</span><span class="kwc">typedef</span> <span class="kwb">struct</span> <span class="sym">{</span> tag<span class="sym">,</span> data <span class="sym">}</span> Scene_Type<span class="sym">;

</span><span class="kwc">private</span> define ray_sphere <span class="sym">(</span>r<span class="sym">,</span> s<span class="sym">)
{
</span>   variable v <span class="sym">=</span> sub<span class="sym">(</span>s<span class="sym">.</span>center<span class="sym">,</span> r<span class="sym">.</span>orig<span class="sym">);
</span>   variable b <span class="sym">=</span> dot <span class="sym">(</span>v<span class="sym">,</span> r<span class="sym">.</span>dir<span class="sym">);
</span>   variable disc <span class="sym">=</span> b<span class="sym">*</span>b <span class="sym">-</span> dot <span class="sym">(</span>v<span class="sym">,</span>v<span class="sym">) +</span> s<span class="sym">.</span>radius<span class="sym">*</span>s<span class="sym">.</span>radius<span class="sym">;

</span>   variable d <span class="sym">=</span> sqrt <span class="sym">(</span>disc<span class="sym">);
</span>   variable t2 <span class="sym">=</span> b <span class="sym">+</span> d<span class="sym">;
</span>   variable t1 <span class="sym">=</span> b <span class="sym">-</span> d<span class="sym">;
</span>   variable i <span class="sym">=</span> where <span class="sym">(</span>t1<span class="sym">&gt;</span><span class="num">0.0</span><span class="sym">);
</span>   t2<span class="sym">[</span>i<span class="sym">] =</span> t1<span class="sym">[</span>i<span class="sym">];
</span>   t2<span class="sym">[</span>where <span class="sym">((</span>disc <span class="sym">&lt;</span> <span class="num">0.0</span><span class="sym">)</span> <span class="kwa">or</span> <span class="sym">(</span>t2 <span class="sym">&lt;</span> <span class="num">0.0</span><span class="sym">))] =</span> INFINITY<span class="sym">;
</span>   <span class="kwa">return</span> t2<span class="sym">;
}

</span><span class="kwc">private</span> define intersect <span class="sym">();
</span><span class="kwc">private</span> define intersect <span class="sym">(</span>lambda<span class="sym">,</span> normal<span class="sym">,</span> r<span class="sym">,</span> scene<span class="sym">)
{
</span>   variable l<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">,</span> n<span class="sym">;
</span>   EXIT_BLOCK
     <span class="sym">{
</span>	lambda<span class="sym">[</span>j<span class="sym">] =</span> l<span class="sym">;
</span>	normal<span class="sym">.</span>x<span class="sym">[</span>j<span class="sym">] =</span> n<span class="sym">.</span>x<span class="sym">;</span> normal<span class="sym">.</span>y<span class="sym">[</span>j<span class="sym">] =</span> n<span class="sym">.</span>y<span class="sym">;</span> normal<span class="sym">.</span>z<span class="sym">[</span>j<span class="sym">] =</span> n<span class="sym">.</span>z<span class="sym">;
     }

</span>   <span class="kwa">if</span> <span class="sym">(</span>scene<span class="sym">.</span>tag <span class="sym">==</span> SphereTag<span class="sym">)
     {
</span>	variable s <span class="sym">=</span> scene<span class="sym">.</span>data<span class="sym">;
</span>	l <span class="sym">=</span> ray_sphere <span class="sym">(</span>r<span class="sym">,</span> s<span class="sym">);
</span>	j <span class="sym">=</span> where <span class="sym">(</span>l <span class="sym">&lt;</span> lambda<span class="sym">);</span>	r <span class="sym">=</span> filter_rays <span class="sym">(</span>r<span class="sym">,</span> j<span class="sym">);</span>	l <span class="sym">=</span> l<span class="sym">[</span>j<span class="sym">];
</span>	n <span class="sym">=</span> unitise <span class="sym">(</span>add<span class="sym">(</span>r<span class="sym">.</span>orig<span class="sym">,</span> sub <span class="sym">(</span>scale <span class="sym">(</span>l<span class="sym">,</span>r<span class="sym">.</span>dir<span class="sym">),</span> s<span class="sym">.</span>center<span class="sym">)));
</span>	<span class="kwa">return</span><span class="sym">;
     }

</span>   variable g <span class="sym">=</span> scene<span class="sym">.</span>data<span class="sym">;
</span>   l <span class="sym">=</span> ray_sphere <span class="sym">(</span>r<span class="sym">,</span> g<span class="sym">.</span>bound<span class="sym">);
</span>   j <span class="sym">=</span> where <span class="sym">(</span>l <span class="sym">&lt;</span> lambda<span class="sym">);
</span>   r <span class="sym">=</span> filter_rays<span class="sym">(</span>r<span class="sym">,</span> j<span class="sym">);</span> n <span class="sym">=</span> filter_vector <span class="sym">(</span>normal<span class="sym">,</span>j<span class="sym">);</span> l <span class="sym">=</span> lambda<span class="sym">[</span>j<span class="sym">];
</span>   foreach <span class="sym">(</span>g<span class="sym">.</span>child<span class="sym">) {</span>g<span class="sym">=();</span> intersect <span class="sym">(</span>l<span class="sym">,</span> n<span class="sym">,</span> r<span class="sym">,</span> g<span class="sym">);}
}

</span><span class="kwc">private</span> define ray_trace <span class="sym">(</span>n<span class="sym">,</span> light<span class="sym">,</span> r<span class="sym">,</span> scene<span class="sym">)
{
</span>   variable lambda <span class="sym">=</span> Double_Type<span class="sym">[</span>n<span class="sym">];</span> lambda<span class="sym">[*] =</span> INFINITY<span class="sym">;
</span>   variable normal <span class="sym">=</span> vector<span class="sym">(</span>Double_Type<span class="sym">[</span>n<span class="sym">],</span>Double_Type<span class="sym">[</span>n<span class="sym">],</span>Double_Type<span class="sym">[</span>n<span class="sym">]);
</span>   intersect <span class="sym">(</span>lambda<span class="sym">,</span> normal<span class="sym">,</span> r<span class="sym">,</span> scene<span class="sym">);
</span>   variable g <span class="sym">=</span> Double_Type<span class="sym">[</span>n<span class="sym">],</span> g1 <span class="sym">=</span> dot <span class="sym">(</span>normal<span class="sym">,</span> light<span class="sym">);
</span>   variable i <span class="sym">=</span> where <span class="sym">((</span>lambda <span class="sym">!=</span> INFINITY<span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>g1 <span class="sym">&gt;</span> <span class="num">0.0</span><span class="sym">));
</span>   g<span class="sym">[</span>i<span class="sym">] =</span> g1<span class="sym">[</span>i<span class="sym">];</span>  normal <span class="sym">=</span> filter_vector <span class="sym">(</span>normal<span class="sym">,</span> i<span class="sym">);</span> lambda <span class="sym">=</span> lambda<span class="sym">[</span>i<span class="sym">];
</span>   r <span class="sym">=</span> filter_rays <span class="sym">(</span>r<span class="sym">,</span> i<span class="sym">);

</span>   variable r2 <span class="sym">=</span> ray <span class="sym">(</span>add<span class="sym">(</span>r<span class="sym">.</span>orig<span class="sym">,</span>scale<span class="sym">(</span>lambda<span class="sym">,</span>add<span class="sym">(</span>r<span class="sym">.</span>dir<span class="sym">,</span>scale<span class="sym">(</span>delta<span class="sym">,</span>normal<span class="sym">)))),
</span>		      replicate_vector<span class="sym">(</span>length<span class="sym">(</span>i<span class="sym">),</span>light<span class="sym">));
</span>   lambda<span class="sym">[*] =</span> INFINITY<span class="sym">;
</span>   intersect<span class="sym">(</span>lambda<span class="sym">,</span> normal<span class="sym">,</span> r2<span class="sym">,</span> scene<span class="sym">);
</span>   g<span class="sym">[</span>i<span class="sym">[</span>where <span class="sym">(</span>lambda <span class="sym">!=</span> INFINITY<span class="sym">)]] =</span> <span class="num">0</span><span class="sym">;
</span>   <span class="kwa">return</span> g<span class="sym">;
}

</span><span class="kwc">private</span> define create <span class="sym">();
</span><span class="kwc">private</span> define create <span class="sym">(</span>level<span class="sym">,</span> r<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">)
{
</span>   variable scene <span class="sym">=</span> &#64;Scene_Type<span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>level <span class="sym">==</span> <span class="num">1</span><span class="sym">)
     {
</span>	scene<span class="sym">.</span>tag <span class="sym">=</span> SphereTag<span class="sym">;
</span>	scene<span class="sym">.</span>data <span class="sym">=</span> sphere<span class="sym">(</span>vector<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> r<span class="sym">);
</span>	<span class="kwa">return</span> scene<span class="sym">;
     }

</span>   variable g <span class="sym">=</span> &#64;Group_Type<span class="sym">;
</span>   scene<span class="sym">.</span>tag <span class="sym">=</span> GroupTag<span class="sym">;
</span>   scene<span class="sym">.</span>data <span class="sym">=</span> g<span class="sym">;
</span>   g<span class="sym">.</span>bound <span class="sym">=</span> sphere<span class="sym">(</span>vector<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> <span class="num">3</span><span class="sym">*</span>r<span class="sym">);
</span>   variable n <span class="sym">=</span> <span class="num">5</span><span class="sym">;
</span>   variable cs <span class="sym">=</span> Scene_Type<span class="sym">[</span>n<span class="sym">];
</span>   g<span class="sym">.</span>child <span class="sym">=</span> cs<span class="sym">;
</span>   variable  rn <span class="sym">=</span> <span class="num">3</span><span class="sym">*</span>r<span class="sym">/</span>sqrt<span class="sym">(</span><span class="num">12.0</span><span class="sym">);
</span>   _for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="num">-2</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)
     {
</span>	variable i <span class="sym">= ();
</span>	cs<span class="sym">[</span>i<span class="sym">] =</span> create <span class="sym">(</span>level<span class="num">-1</span><span class="sym">,</span> r<span class="sym">/</span><span class="num">2.0</span><span class="sym">,
</span>			x <span class="sym">- ((</span>i<span class="sym">&amp;</span><span class="num">1</span><span class="sym">)*</span><span class="num">2</span><span class="sym">-</span><span class="num">1</span><span class="sym">)*</span>rn<span class="sym">,</span> y <span class="sym">+</span> rn<span class="sym">,</span> z <span class="sym">- ((</span>i<span class="sym">/</span><span class="num">2</span><span class="sym">)*</span><span class="num">2</span><span class="sym">-</span><span class="num">1</span><span class="sym">)*</span>rn<span class="sym">);
     }
</span>    cs<span class="sym">[</span>n<span class="num">-1</span><span class="sym">] =</span> create<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> r<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">);
</span>   <span class="kwa">return</span> scene<span class="sym">;
}

</span>define slsh_main <span class="sym">()
{
</span>   variable n <span class="sym">=</span> <span class="num">256</span><span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span>   variable level <span class="sym">=</span> <span class="num">6</span><span class="sym">,</span> ss<span class="sym">=</span><span class="num">4</span><span class="sym">,</span> n2 <span class="sym">=</span> n<span class="sym">*</span>n<span class="sym">,</span> i<span class="sym">;
</span>   variable light <span class="sym">=</span> sub<span class="sym">(</span>vector<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span><span class="num">0.0</span><span class="sym">,</span><span class="num">0.0</span><span class="sym">),</span>unitise<span class="sym">(</span>vector<span class="sym">(-</span><span class="num">1.0</span><span class="sym">, -</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">)));
</span>   variable scene <span class="sym">=</span> create<span class="sym">(</span>level<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">, -</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>   variable x0 <span class="sym">=</span> Double_Type<span class="sym">[</span>n<span class="sym">,</span>n<span class="sym">],</span> y0 <span class="sym">=</span> Double_Type<span class="sym">[</span>n<span class="sym">,</span>n<span class="sym">],</span> z0 <span class="sym">=</span> Double_Type<span class="sym">[</span>n<span class="sym">,</span>n<span class="sym">];
</span>   _for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="num">-1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">) {</span> i<span class="sym">=();</span> x0<span class="sym">[</span>i<span class="sym">,*] = [</span><span class="num">0</span><span class="sym">:</span>n<span class="num">-1</span><span class="sym">];</span> y0<span class="sym">[*,</span>i<span class="sym">] = [</span>n<span class="num">-1</span><span class="sym">:</span><span class="num">0</span><span class="sym">:-</span><span class="num">1</span><span class="sym">]; }
</span>   reshape <span class="sym">(</span>x0<span class="sym">, [</span>n2<span class="sym">]);</span> reshape <span class="sym">(</span>y0<span class="sym">, [</span>n2<span class="sym">]);</span> reshape <span class="sym">(</span>z0<span class="sym">, [</span>n2<span class="sym">]);
</span>   z0<span class="sym">[*] =</span> n<span class="sym">;

</span>   variable g <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> dx<span class="sym">,</span> dy<span class="sym">;
</span>   variable orig <span class="sym">=</span> replicate_vector <span class="sym">(</span>n2<span class="sym">,</span>vector<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span><span class="num">0.0</span><span class="sym">,-</span><span class="num">4.0</span><span class="sym">));
</span>   <span class="kwa">for</span> <span class="sym">(</span>dx<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> dx<span class="sym">&lt;</span>ss<span class="sym">; ++</span>dx<span class="sym">)
     {
</span>        <span class="kwa">for</span> <span class="sym">(</span>dy<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> dy<span class="sym">&lt;</span>ss<span class="sym">; ++</span>dy<span class="sym">)
	  {
</span>	     variable d <span class="sym">=</span> vector <span class="sym">(</span>x0 <span class="sym">+ (</span>dx<span class="sym">/</span><span class="kwb">double</span><span class="sym">(</span>ss<span class="sym">)-</span><span class="num">0.5</span><span class="sym">*</span>n<span class="sym">),
</span>				  y0 <span class="sym">+ (</span>dy<span class="sym">/</span><span class="kwb">double</span><span class="sym">(</span>ss<span class="sym">)-</span><span class="num">0.5</span><span class="sym">*</span>n<span class="sym">),</span> z0<span class="sym">);
</span>	     g <span class="sym">+=</span> ray_trace <span class="sym">(</span>n2<span class="sym">,</span> light<span class="sym">,</span> ray<span class="sym">(</span>orig<span class="sym">,</span> unitise<span class="sym">(</span>d<span class="sym">)),</span> scene<span class="sym">);
	  }
    }
</span>   reshape <span class="sym">(</span>g<span class="sym">, [</span>n<span class="sym">,</span>n<span class="sym">]);
   ()=</span>printf<span class="sym">(</span><span class="str">&quot;P5</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">255</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">,</span> n<span class="sym">);
   () =</span> fwrite <span class="sym">(</span>typecast <span class="sym">(</span><span class="num">0.5</span> <span class="sym">+ (</span><span class="num">255.0</span><span class="sym">/(</span>ss<span class="sym">*</span>ss<span class="sym">))*</span>g<span class="sym">,</span> UChar_Type<span class="sym">),</span> stdout<span class="sym">);
}</span>
