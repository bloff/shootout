<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Dennis Decker Jensen                                */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Modified by Anthony Borla. Changes include:                        */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* * Iterative version of 'qsort' replacing slower recursive version  */</span>
<span class="com">/* * Use of C library sqrt', replacing native code implementation     */</span>
<span class="com">/* * Altered code style to conform with my other REXX contributions   */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

numeric digits <span class="num">11</span>

<span class="com">/* ----------------------------- */</span>

call initSqrt

<span class="com">/* ----------------------------- */</span>

sum <span class="sym">=</span> <span class="num">0</span>

<span class="kwa">do</span> n <span class="sym">=</span> <span class="num">1</span> by <span class="num">1</span> <span class="kwa">while</span> <span class="kwd">LINES</span><span class="sym">() &gt;</span> <span class="num">0</span>
  line <span class="sym">=</span> <span class="kwd">LINEIN</span><span class="sym">() ;</span> <span class="kwa">if</span> line <span class="sym">==</span> <span class="str">&quot;&quot;</span> then <span class="sym">;</span> leave
  sum <span class="sym">=</span> sum <span class="sym">+</span> line
  nums<span class="sym">.</span>n <span class="sym">=</span> line
end

n <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span> <span class="sym">;</span> nums<span class="num">.0</span> <span class="sym">=</span> n <span class="sym">;</span> mean <span class="sym">=</span> sum <span class="sym">/</span> n

parse value <span class="num">0 0 0 0</span> with average_deviation variance skew kurtosis

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> n
  deviation <span class="sym">=</span> nums<span class="sym">.</span>i <span class="sym">-</span> mean
  average_deviation <span class="sym">=</span> average_deviation <span class="sym">+</span> <span class="kwd">abs</span><span class="sym">(</span>deviation<span class="sym">)</span>
  variance <span class="sym">=</span> variance <span class="sym">+</span> deviation <span class="sym">**</span> <span class="num">2</span>
  skew <span class="sym">=</span> skew <span class="sym">+</span> deviation <span class="sym">**</span> <span class="num">3</span>
  kurtosis <span class="sym">=</span> kurtosis <span class="sym">+</span> deviation <span class="sym">**</span> <span class="num">4</span>
end

average_deviation <span class="sym">=</span> average_deviation <span class="sym">/</span> n
variance <span class="sym">=</span> variance <span class="sym">/ (</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
standard_deviation <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span>variance<span class="sym">)</span>

<span class="kwa">if</span> variance <span class="sym">&gt;</span> <span class="num">0</span> then <span class="kwa">do</span>
  skew <span class="sym">=</span> skew <span class="sym">/ (</span>n <span class="sym">*</span> variance <span class="sym">*</span> standard_deviation<span class="sym">)</span>
  kurtosis <span class="sym">=</span> kurtosis <span class="sym">/ (</span>n <span class="sym">*</span> variance <span class="sym">*</span> variance<span class="sym">) -</span> <span class="num">3.0</span>
end

call qsort <span class="num">1</span><span class="sym">,</span> nums<span class="num">.0</span>
mid <span class="sym">=</span> <span class="kwd">TRUNC</span><span class="sym">(</span>n <span class="sym">/</span> <span class="num">2</span><span class="sym">) ;</span> k <span class="sym">=</span> mid <span class="sym">+</span> <span class="num">1</span>

<span class="kwa">if</span> n <span class="slc">// 2 = 1 then</span>
  median <span class="sym">=</span> nums<span class="sym">.</span>k
<span class="kwa">else</span>
  median <span class="sym">= (</span>nums<span class="sym">.</span>mid <span class="sym">+</span> nums<span class="sym">.</span>k<span class="sym">) /</span> <span class="num">2</span>

say <span class="str">&quot;n:                 &quot;</span> n
say <span class="str">&quot;median:            &quot;</span> <span class="kwd">FORMAT</span><span class="sym">(</span>median<span class="sym">,,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;mean:              &quot;</span> <span class="kwd">FORMAT</span><span class="sym">(</span>mean<span class="sym">,,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;average_deviation: &quot;</span> <span class="kwd">FORMAT</span><span class="sym">(</span>average_deviation<span class="sym">,,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;standard_deviation:&quot;</span> <span class="kwd">FORMAT</span><span class="sym">(</span>standard_deviation<span class="sym">,,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;variance:          &quot;</span> <span class="kwd">FORMAT</span><span class="sym">(</span>variance<span class="sym">,,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;skew:              &quot;</span> <span class="kwd">FORMAT</span><span class="sym">(</span>skew<span class="sym">,,</span> <span class="num">6</span><span class="sym">)</span>
say <span class="str">&quot;kurtosis:          &quot;</span> <span class="kwd">FORMAT</span><span class="sym">(</span>kurtosis<span class="sym">,,</span> <span class="num">6</span><span class="sym">)</span>

exit <span class="num">0</span>

<span class="com">/* ----------------------------- */</span>

initSqrt <span class="sym">:</span> procedure
  sqrt<span class="sym">.</span>calltype <span class="sym">=</span> <span class="str">'cdecl as function with parameters'</span>
  sqrt<span class="sym">.</span><span class="kwa">return</span><span class="sym">.</span>type <span class="sym">=</span> <span class="str">'float64'</span>
  sqrt<span class="sym">.</span><span class="kwa">return</span><span class="sym">.</span>name <span class="sym">=</span> <span class="str">'return value'</span>

  sqrt<span class="num">.0</span> <span class="sym">=</span> <span class="num">1</span>

  sqrt<span class="num">.1</span><span class="sym">.</span>type <span class="sym">=</span> <span class="str">'float64'</span>
  sqrt<span class="num">.1</span><span class="sym">.</span>name <span class="sym">=</span> <span class="str">'number'</span>

  err <span class="sym">=</span> <span class="kwd">rxFuncDefine</span><span class="sym">(</span><span class="str">'sqrt'</span><span class="sym">,</span> <span class="str">'libm.so.6'</span><span class="sym">,</span> <span class="str">'sqrt'</span><span class="sym">,</span> <span class="str">'sqrt.'</span><span class="sym">)</span>

  <span class="kwa">if</span> err \= <span class="num">0</span> then
    say <span class="str">&quot;Error registering function 'sqrt'&quot;</span>

  <span class="kwa">return</span>

<span class="com">/* ----------------------------- */</span>

qsort <span class="sym">:</span> procedure expose nums<span class="sym">.</span>
  push <span class="kwd">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwd">ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">)</span>

  <span class="kwa">do while</span> <span class="kwd">QUEUED</span><span class="sym">() &gt;</span> <span class="num">0</span>
    parse pull l r

    <span class="kwa">if</span> l <span class="sym">&lt;</span> r then <span class="kwa">do</span>

      i <span class="sym">=</span> <span class="kwd">RANDOM</span><span class="sym">(</span>l<span class="sym">,</span> r<span class="sym">)</span>
      parse value nums<span class="sym">.</span>l nums<span class="sym">.</span>i with nums<span class="sym">.</span>i nums<span class="sym">.</span>l
      last <span class="sym">=</span> l
      <span class="kwa">do</span> i <span class="sym">=</span> l <span class="sym">+</span> <span class="num">1</span> to r
        <span class="kwa">if</span> nums<span class="sym">.</span>i <span class="sym">&lt;</span> nums<span class="sym">.</span>l then <span class="kwa">do</span>
          last <span class="sym">=</span> last <span class="sym">+</span> <span class="num">1</span>
          parse value nums<span class="sym">.</span>last nums<span class="sym">.</span>i with nums<span class="sym">.</span>i nums<span class="sym">.</span>last
        end
      end
      parse value nums<span class="sym">.</span>l nums<span class="sym">.</span>last with nums<span class="sym">.</span>last nums<span class="sym">.</span>l

      push l last <span class="sym">;</span> <span class="kwd">push</span> <span class="sym">(</span>last <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> r
    end
  end

  <span class="kwa">return</span>
