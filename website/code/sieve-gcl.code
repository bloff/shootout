<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: sieve-gcl.code,v 1.12 2006-09-20 05:52:36 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; from Paul Foley</span>
<span class="slc">;;; Multi-lisp modifications by Brent Fulgham</span>

<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)</span> #<span class="sym">-</span>gcl <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))</span>
<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
                                         #<span class="sym">+</span>cmu  ext<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
					 #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">)))</span>
        <span class="sym">(</span>flags <span class="sym">(</span>make<span class="sym">-</span>array <span class="num">8193</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'fixnum :initial-element 1)))</span>
<span class="str">    (loop repeat n for count of-type fixnum = 0 then 0 do</span>
<span class="str">       (loop for i fixnum from 2 upto 8192 do</span>
<span class="str">          (unless (zerop (aref flags i))</span>
<span class="str">            (loop for k fixnum from (* 2 i) upto 8192 by i do</span>
<span class="str">                  (setf (aref flags k) 0))</span>
<span class="str">            (incf count)))</span>
<span class="str">       finally (format t &quot;Count: ~D~%&quot; count))))</span>
