<span class="com">(* k-nucleotide.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 *)</span>

<span class="kwa">open</span> Printf

<span class="kwa">let</span> count <span class="sym">=</span> Hashtbl.create <span class="num">100000
</span><span class="kwa">let</span> counts k dna <span class="sym">=
</span>  Hashtbl.clear count<span class="sym">;
</span>  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> String.length dna <span class="sym">-</span> k <span class="kwa">do
    let</span> key <span class="sym">=</span> String.sub dna i k <span class="kwa">in
    try let</span> c <span class="sym">=</span> Hashtbl.find count key <span class="kwa">in</span> Hashtbl.replace count key <span class="sym">(</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">)
</span>    <span class="kwa">with</span> Not_found <span class="sym">-&gt;</span> Hashtbl.add count key <span class="num">1
</span>  <span class="kwa">done</span><span class="sym">;
</span>  count

<span class="kwa">let</span> compare_freq <span class="sym">((</span>k<span class="sym">:</span><span class="kwb">string</span><span class="sym">),(</span>f<span class="sym">:</span><span class="kwb">float</span><span class="sym">)) (</span>k<span class="str">', f'</span><span class="sym">) =
</span>  <span class="kwa">if</span> f <span class="sym">&gt;</span> f<span class="str">' then -1 else if f &lt; f'</span> <span class="kwa">then</span> <span class="num">1</span> <span class="kwa">else</span> compare k k<span class="str">'

let write_frequencies k dna =
  let cnt = counts k dna in
  let tot = float(Hashtbl.fold (fun _ n t -&gt; n + t) cnt 0) in
  let frq = Hashtbl.fold
    (fun k n l -&gt; (k, (100. *.(float n)/. tot)) :: l) cnt [] in
  let frq = List.sort compare_freq frq in
  List.iter (fun (k,f) -&gt; printf &quot;%s %.2f</span><span class="esc">\n</span><span class="str">&quot; k f) frq;
  print_string &quot;</span><span class="esc">\n</span><span class="str">&quot;

let write_count seq dna =
  let cnt = counts (String.length seq) dna in
  printf &quot;%d</span><span class="esc">\t</span><span class="str">%s</span><span class="esc">\n</span><span class="str">&quot; (try Hashtbl.find cnt seq with Not_found -&gt; 0) seq


let dna_three =
  let is_three s = try String.sub s 0 6 = &quot;&gt;THREE&quot; with _ -&gt; false in
  while not(is_three(input_line stdin)) do () done;
  let buf = Buffer.create 1000 in
  (* Skip possible comment and read the protein/DNA sequence *)
  (try while true do
       let line = input_line stdin in
       if line.[0] = '</span><span class="sym">&gt;</span><span class="str">' then raise End_of_file;
       if line.[0] &lt;&gt; '</span><span class="sym">;</span><span class="str">' then Buffer.add_string buf (String.uppercase line)
   done with End_of_file -&gt; ());
  Buffer.contents buf

let () =
  write_frequencies 1 dna_three;
  write_frequencies 2 dna_three;
  List.iter (fun k -&gt; write_count k dna_three)
    [&quot;GGT&quot;; &quot;GGTA&quot;; &quot;GGTATT&quot;; &quot;GGTATTTTAATT&quot;; &quot;GGTATTTTAATTTATAGT&quot;]
</span>
