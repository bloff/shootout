<span class="com">(* knucleotide.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 *)</span>

<span class="kwa">open</span> Printf
<span class="kwa">module</span> H <span class="sym">=</span> Hashtbl

<span class="com">(* [counts k dna] updates and return the hashtable [count] of
   k-nucleotide keys and count values for a particular reading-frame
   of length [k] of the string [dna]. *)</span>
<span class="kwa">let</span> count <span class="sym">=</span> H.create <span class="sym">(</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="num">18</span><span class="sym">)
</span><span class="kwa">let</span> counts k dna <span class="sym">=
</span>  H.clear count<span class="sym">;
</span>  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> String.length dna <span class="sym">-</span> k <span class="kwa">do
    let</span> key <span class="sym">=</span> String.sub dna i k <span class="kwa">in
    try let</span> c <span class="sym">=</span> H.find count key <span class="kwa">in</span> H.replace count key <span class="sym">(</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">)
</span>    <span class="kwa">with</span> Not_found <span class="sym">-&gt;</span> H.add count key <span class="num">1
</span>  <span class="kwa">done</span><span class="sym">;
</span>  count

<span class="com">(* [write_frequencies k dna] writes the frequencies for a
   reading-frame of length [k] sorted by descending frequency and then
   ascending k-nucleotide key. *)</span>
<span class="kwa">let</span> compare_freq <span class="sym">((</span>k1<span class="sym">:</span><span class="kwb">string</span><span class="sym">),(</span>f1<span class="sym">:</span><span class="kwb">float</span><span class="sym">)) (</span>k2<span class="sym">,</span> f2<span class="sym">) =
</span>  <span class="kwa">if</span> f1 <span class="sym">&gt;</span> f2 <span class="kwa">then</span> <span class="num">-1</span> <span class="kwa">else if</span> f1 <span class="sym">&lt;</span> f2 <span class="kwa">then</span> <span class="num">1</span> <span class="kwa">else</span> compare k1 k2

<span class="kwa">let</span> write_frequencies k dna <span class="sym">=
</span>  <span class="kwa">let</span> cnt <span class="sym">=</span> counts k dna <span class="kwa">in
  let</span> tot <span class="sym">=</span> <span class="kwb">float</span><span class="sym">(</span>H.fold <span class="sym">(</span><span class="kwa">fun</span> _ n t <span class="sym">-&gt;</span> n <span class="sym">+</span> t<span class="sym">)</span> cnt <span class="num">0</span><span class="sym">)</span> <span class="kwa">in
  let</span> frq <span class="sym">=</span> H.fold <span class="sym">(</span><span class="kwa">fun</span> k n l <span class="sym">-&gt; (</span>k<span class="sym">, (</span><span class="num">100</span>. <span class="sym">*</span>.<span class="sym">(</span><span class="kwb">float</span> n<span class="sym">)/</span>. tot<span class="sym">)) ::</span> l<span class="sym">)</span> cnt <span class="sym">[]</span> <span class="kwa">in
  let</span> frq <span class="sym">=</span> List.sort compare_freq frq <span class="kwa">in
</span>  List.iter <span class="sym">(</span><span class="kwa">fun</span> <span class="sym">(</span>k<span class="sym">,</span>f<span class="sym">) -&gt;</span> printf <span class="str">&quot;%s %.3f</span><span class="esc">\n</span><span class="str">&quot;</span> k f<span class="sym">)</span> frq<span class="sym">;
</span>  print_string <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>

<span class="kwa">let</span> write_count seq dna <span class="sym">=
</span>  <span class="kwa">let</span> cnt <span class="sym">=</span> counts <span class="sym">(</span>String.length seq<span class="sym">)</span> dna <span class="kwa">in
</span>  printf <span class="str">&quot;%d</span><span class="esc">\t</span><span class="str">%s</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span><span class="kwa">try</span> H.find cnt seq <span class="kwa">with</span> Not_found <span class="sym">-&gt;</span> <span class="num">0</span><span class="sym">)</span> seq

<span class="com">(* Extract DNA sequence &quot;THREE&quot; from stdin *)</span>
<span class="kwa">let</span> dna_three <span class="sym">=
</span>  <span class="kwa">let</span> is_not_three s <span class="sym">=</span> <span class="kwa">try</span> String.sub s <span class="num">0 6</span> <span class="sym">&lt;&gt;</span> <span class="str">&quot;&gt;THREE&quot;</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="kwa">true in
  while</span> is_not_three<span class="sym">(</span>input_line stdin<span class="sym">)</span> <span class="kwa">do</span> <span class="sym">()</span> <span class="kwa">done</span><span class="sym">;
</span>  <span class="kwa">let</span> buf <span class="sym">=</span> Buffer.create <span class="num">1000</span> <span class="kwa">in
</span>  <span class="com">(* Skip possible comment *)</span>
  <span class="sym">(</span><span class="kwa">try while true do
     let</span> line <span class="sym">=</span> input_line stdin <span class="kwa">in
     if</span> line.<span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;&gt;</span> <span class="str">';'</span> <span class="kwa">then
</span>       <span class="sym">(</span>Buffer.add_string buf <span class="sym">(</span>String.uppercase line<span class="sym">);</span> raise Exit<span class="sym">)
</span>   <span class="kwa">done with</span> _ <span class="sym">-&gt; ());
</span>  <span class="com">(* Read the DNA sequence *)</span>
  <span class="sym">(</span><span class="kwa">try while true do
       let</span> line <span class="sym">=</span> input_line stdin <span class="kwa">in
       if</span> line.<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="str">'&gt;'</span> <span class="kwa">then</span> raise End_of_file<span class="sym">;
</span>       Buffer.add_string buf <span class="sym">(</span>String.uppercase line<span class="sym">)
</span>   <span class="kwa">done with</span> End_of_file <span class="sym">-&gt; ());
</span>  Buffer.contents buf

<span class="kwa">let</span> <span class="sym">() =</span> Gc.set <span class="sym">{ (</span>Gc.get<span class="sym">())</span> <span class="kwa">with</span> Gc.minor_heap_size <span class="sym">=</span> <span class="num">1024</span> <span class="sym">*</span> <span class="num">1024</span> <span class="sym">*</span> <span class="num">4</span><span class="sym">;
</span>		    space_overhead <span class="sym">=</span> <span class="num">90</span><span class="sym">;</span>  max_overhead <span class="sym">=</span> <span class="num">1000</span> <span class="sym">}

</span><span class="kwa">let</span> <span class="sym">() =
</span>  write_frequencies <span class="num">1</span> dna_three<span class="sym">;
</span>  write_frequencies <span class="num">2</span> dna_three<span class="sym">;
</span>  List.iter <span class="sym">(</span><span class="kwa">fun</span> k <span class="sym">-&gt;</span> write_count k dna_three<span class="sym">)
    [</span><span class="str">&quot;GGT&quot;</span><span class="sym">;</span> <span class="str">&quot;GGTA&quot;</span><span class="sym">;</span> <span class="str">&quot;GGTATT&quot;</span><span class="sym">;</span> <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">;</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">]</span>
