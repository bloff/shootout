<span class="slc">#########################################</span>
<span class="slc">#     The Computer Language Shootout    #</span>
<span class="slc">#   http://shootout.alioth.debian.org/  #</span>
<span class="slc">#                                       #</span>
<span class="slc">#      Contributed by Jesse Millikan    #</span>
<span class="slc">#    Based on version by Gordon Innes   #</span>
<span class="slc">#########################################</span>

require <span class="str">'thread'</span>

creature_meetings = Queue<span class="sym">.</span>new
meeting_point = Mutex<span class="sym">.</span>new
wait_signal = ConditionVariable<span class="sym">.</span>new
meetings_left = <span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">].</span>to_i
waiting_colour<span class="sym">,</span> incoming_colour = <span class="kwa">nil</span><span class="sym">,</span> <span class="kwa">nil</span>

<span class="slc"># Each chameneo is represented here by a thread</span>
<span class="slc"># and its colour variable, rather than explicitly</span>
<span class="slc"># by an object</span>
<span class="slc">#</span>
<span class="slc"># This is all packed into one place for speed and</span>
<span class="slc"># clarity (It's clear to *me* :)</span>
<span class="sym">[:</span>blue<span class="sym">, :</span>red<span class="sym">, :</span>yellow<span class="sym">, :</span>blue<span class="sym">].</span>each <span class="sym">{ |</span>colour<span class="sym">|</span>
  Thread<span class="sym">.</span>new <span class="sym">{</span>
    met = <span class="num">0</span>
    <span class="kwa">while true</span>
      <span class="slc"># The form meeting_point.synchronize { } is slow</span>
      meeting_point<span class="sym">.</span>lock

      <span class="kwa">if</span> meetings_left <span class="sym">&lt;</span>= <span class="num">0</span>
        meeting_point<span class="sym">.</span>unlock
	<span class="slc"># colour = :faded</span>
	<span class="kwa">break</span>
      <span class="kwa">end</span>

      <span class="slc"># Both threads emerge with variable other_colour set</span>
      <span class="kwa">if</span> waiting_colour
        other_colour = waiting_colour
        incoming_colour = colour
        wait_signal<span class="sym">.</span>signal
        meetings_left-=<span class="num">1</span>
        waiting_colour = <span class="kwa">nil</span>
      <span class="kwa">else</span>
        waiting_colour = colour
        wait_signal<span class="sym">.</span><span class="kwd">wait</span><span class="sym">(</span>meeting_point)
        other_colour = incoming_colour
      <span class="kwa">end</span>
      meeting_point<span class="sym">.</span>unlock

      met <span class="sym">+</span>= <span class="num">1</span>

      <span class="slc"># Take the complement colour</span>
      colour =
        <span class="kwa">case</span> other_colour
          <span class="kwa">when</span> <span class="sym">:</span>blue
           colour == <span class="sym">:</span>red ? <span class="sym">:</span>yellow <span class="sym">: :</span>red
          <span class="kwa">when</span> <span class="sym">:</span>red
           colour == <span class="sym">:</span>blue ? <span class="sym">:</span>yellow <span class="sym">: :</span>blue
          <span class="kwa">when</span> <span class="sym">:</span>yellow
           colour == <span class="sym">:</span>blue ? <span class="sym">:</span>red <span class="sym">: :</span>blue
        <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="slc"># Leave the total on the queue for the main thread</span>
    creature_meetings<span class="sym">.</span><span class="kwd">push</span><span class="sym">(</span>met)
  <span class="sym">}</span>
<span class="sym">}</span>

total = <span class="num">0</span>
<span class="num">4</span><span class="sym">.</span>times <span class="sym">{</span> total <span class="sym">+</span>= creature_meetings<span class="sym">.</span>pop <span class="sym">}</span>
puts total
