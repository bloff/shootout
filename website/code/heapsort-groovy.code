<span class="com">/*</span>
<span class="com">	The Computer Language Shootout</span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">	contributed by Jochen Hinrichsen</span>
<span class="com">*/</span>
    <span class="kwc">public</span> <span class="kwb">static</span> final <span class="kwb">long</span> IM <span class="sym">=</span> <span class="num">139968</span>
    <span class="kwc">public</span> <span class="kwb">static</span> final <span class="kwb">long</span> IA <span class="sym">=</span>   <span class="num">3877</span>
    <span class="kwc">public</span> <span class="kwb">static</span> final <span class="kwb">long</span> IC <span class="sym">=</span>  <span class="num">29573</span>

    <span class="kwc">public</span> <span class="kwb">static long</span> last <span class="sym">=</span> <span class="num">42</span>
    def <span class="kwd">gen_random</span><span class="sym">(</span><span class="kwb">double</span> max<span class="sym">) {</span>
		max <span class="sym">* (</span>last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) /</span> IM
    <span class="sym">}</span>

    def <span class="kwd">heapsort</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> ra<span class="sym">) {</span>
		<span class="kwb">int</span> l<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> i
		<span class="kwb">double</span> rra

		l <span class="sym">= (</span>n <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span>
		ir <span class="sym">=</span> n
		<span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {</span>
		    <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {</span>
				rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">]</span>
		    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
				rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">]</span>
				ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
				<span class="kwa">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">) {</span>
				    ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra
				    <span class="kwa">return</span>
				<span class="sym">}</span>
		    <span class="sym">}</span>
		    i <span class="sym">=</span> l
		    j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span>
		    <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">) {</span>
				<span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j <span class="sym">}</span>
				<span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]) {</span>
				    ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">]</span>
				    j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">)</span>
				<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
				    j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span>
				<span class="sym">}</span>
		    <span class="sym">}</span>
		    ra<span class="sym">[</span>i<span class="sym">] =</span> rra
		<span class="sym">}</span>
    <span class="sym">}</span>

def N <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ? <span class="num">1000</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span><span class="kwd">toInteger</span><span class="sym">()</span>
def nf <span class="sym">=</span> java<span class="sym">.</span>text<span class="sym">.</span>NumberFormat<span class="sym">.</span><span class="kwd">getInstance</span><span class="sym">()</span>
nf<span class="sym">.</span><span class="kwd">setMaximumFractionDigits</span><span class="sym">(</span><span class="num">10</span><span class="sym">)</span>
nf<span class="sym">.</span><span class="kwd">setMinimumFractionDigits</span><span class="sym">(</span><span class="num">10</span><span class="sym">)</span>
nf<span class="sym">.</span><span class="kwd">setGroupingUsed</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">)</span>
<span class="kwb">double</span> <span class="sym">[]</span>ary <span class="sym">= (</span><span class="kwb">double</span><span class="sym">[])</span> java<span class="sym">.</span>lang<span class="sym">.</span>reflect<span class="sym">.</span>Array<span class="sym">.</span><span class="kwd">newInstance</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">.</span><span class="kwc">class</span><span class="sym">,</span> N<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
<span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>N<span class="sym">) {</span>
    ary<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
<span class="sym">}</span>
<span class="kwd">heapsort</span><span class="sym">(</span>N<span class="sym">,</span> ary<span class="sym">)</span>
println nf<span class="sym">.</span><span class="kwd">format</span><span class="sym">(</span>ary<span class="sym">[</span>N<span class="sym">])</span>

<span class="slc">// EOF</span>

