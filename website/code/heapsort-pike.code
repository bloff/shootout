<span class="dir">#!/usr/bin/pike</span>
<span class="slc">// -*- mode: pike -*-</span>
<span class="slc">// $Id: heapsort-pike.code,v 1.8 2005-12-31 16:45:36 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>
<span class="slc">// from: Fredrik Noring</span>

<span class="dir">#define IM 139968</span>
<span class="dir">#define IA   3877</span>
<span class="dir">#define IC  29573</span>

<span class="kwb">int</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>

<span class="kwb">float</span>
<span class="kwd">gen_random</span><span class="sym">(</span><span class="kwb">float</span> <span class="kwa">max</span><span class="sym">) {</span> <span class="kwd">return</span><span class="sym">(</span><span class="kwa">max</span> <span class="sym">* (</span>last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) /</span> IM<span class="sym">); }</span>

<span class="kwb">void</span> <span class="kwd">heapsort</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">float</span><span class="sym">)</span> ra<span class="sym">) {</span>
    <span class="kwb">int</span> l<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> i<span class="sym">;</span>
    <span class="kwb">float</span> rra<span class="sym">;</span>

    l <span class="sym">= (</span>n <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>
    ir <span class="sym">=</span> n<span class="sym">;</span>
    <span class="kwd">for</span> <span class="sym">(;;) {</span>
        <span class="kwd">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {</span>
            rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];</span>
        <span class="sym">}</span> else <span class="sym">{</span>
            rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];</span>
            ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
            <span class="kwd">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">) {</span>
                ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;</span>
                return<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        i <span class="sym">=</span> l<span class="sym">;</span>
        j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwd">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">) {</span>
            <span class="kwd">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j<span class="sym">; }</span>
            <span class="kwd">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]) {</span>
                ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];</span>
                j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">);</span>
            <span class="sym">}</span> else <span class="sym">{</span>
                j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">) {</span>
    <span class="kwb">int</span> N <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">] ||</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">float</span><span class="sym">)</span> ary<span class="sym">;</span>
    <span class="kwb">int</span> i<span class="sym">;</span>

    <span class="slc">// create an array of N random floats</span>
    ary <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span>N<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
    <span class="kwd">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>N<span class="sym">;</span> i<span class="sym">++) {</span>
        ary<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwd">heapsort</span><span class="sym">(</span>N<span class="sym">,</span> ary<span class="sym">);</span>

    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%.10f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> ary<span class="sym">[</span>N<span class="sym">]);</span>
<span class="sym">}</span>
