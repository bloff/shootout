<span class="dir">#!/usr/bin/pike
</span><span class="slc">// -*- mode: pike -*-
</span><span class="slc">// $Id: heapsort-pike.code,v 1.5 2005-04-05 07:42:28 bfulgham Exp $
</span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="slc">// from: Fredrik Noring
</span>
<span class="dir">#define IM 139968
</span><span class="dir">#define IA   3877
</span><span class="dir">#define IC  29573
</span>
<span class="kwb">int</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;

</span><span class="kwb">float
</span>gen_random<span class="sym">(</span><span class="kwb">float</span> <span class="kwa">max</span><span class="sym">) {</span> return<span class="sym">(</span><span class="kwa">max</span> <span class="sym">* (</span>last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) /</span> IM<span class="sym">); }

</span><span class="kwb">void</span> heapsort<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">float</span><span class="sym">)</span> ra<span class="sym">) {
</span>    <span class="kwb">int</span> l<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> i<span class="sym">;
</span>    <span class="kwb">float</span> rra<span class="sym">;

</span>    l <span class="sym">= (</span>n <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;
</span>    ir <span class="sym">=</span> n<span class="sym">;
</span>    for <span class="sym">(;;) {
</span>        if <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {
</span>            rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];
        }</span> else <span class="sym">{
</span>            rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];
</span>            ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];
</span>            if <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">) {
</span>                ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;
</span>                return<span class="sym">;
            }
        }
</span>        i <span class="sym">=</span> l<span class="sym">;
</span>        j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;
</span>        while <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">) {
</span>            if <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j<span class="sym">; }
</span>            if <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]) {
</span>                ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];
</span>                j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">);
            }</span> else <span class="sym">{
</span>                j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;
            }
        }
</span>        ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;
    }
}

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">) {
</span>    <span class="kwb">int</span> N <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">] ||</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">float</span><span class="sym">)</span> ary<span class="sym">;
</span>    <span class="kwb">int</span> i<span class="sym">;

</span>    <span class="slc">// create an array of N random floats
</span>    ary <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span>N<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span>    for <span class="sym">(</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>N<span class="sym">;</span> i<span class="sym">++) {
</span>        ary<span class="sym">[</span>i<span class="sym">] =</span> gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">);
    }

</span>    heapsort<span class="sym">(</span>N<span class="sym">,</span> ary<span class="sym">);

</span>    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%.10f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> ary<span class="sym">[</span>N<span class="sym">]);
}</span>
