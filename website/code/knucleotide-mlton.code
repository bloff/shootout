<span class="com">(* knucleotide.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 * translated to MLton/SML by sweeks&#64;sweeks.com.
 *)</span>

<span class="kwa">structure</span> H <span class="sym">=</span> HashTable
<span class="com">(* [counts k dna] fills and return the hashtable [count] of
 * k-nucleotide keys and count values for a particular reading-frame
 * of length [k] of the string [dna].
 *)</span>
<span class="kwa">fun</span> counts <span class="sym">(</span>k<span class="sym">,</span> dna<span class="sym">) =
</span>   <span class="kwa">let
      val</span> count <span class="sym">=</span> H.new <span class="sym">{</span>equals <span class="sym">=</span> <span class="kwa">op</span> <span class="sym">=,</span> hash <span class="sym">=</span> <span class="kwa">String</span>.hash<span class="sym">,</span> size <span class="sym">=</span> <span class="num">0x40000</span><span class="sym">}
</span>      <span class="kwa">val</span> n <span class="sym">=</span> size dna <span class="sym">+</span> <span class="num">1</span> <span class="sym">-</span> k
      <span class="kwa">val</span> <span class="sym">() =
</span>	 for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span>	      <span class="kwa">Int</span>.inc
	      <span class="sym">(</span>H.lookupOrInsert <span class="sym">(</span>count<span class="sym">,</span> <span class="kwa">String</span>.substring <span class="sym">(</span>dna<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">),
</span>				 <span class="kwa">fn</span> <span class="sym">() =&gt;</span> ref <span class="num">0</span><span class="sym">)))
</span>   <span class="kwa">in
</span>      <span class="sym">(</span>n<span class="sym">,</span> count<span class="sym">)
</span>   <span class="kwa">end

</span><span class="com">(* [write_frequencies k dna] writes the frequencies for a
 * reading-frame of length [k] sorted by descending frequency and then
 * ascending k-nucleotide key.
 *)</span>
<span class="kwa">fun</span> compareFreq <span class="sym">((</span>k1<span class="sym">:</span><span class="kwb">string</span><span class="sym">,</span> f1<span class="sym">:</span><span class="kwb">real</span><span class="sym">), (</span>k2<span class="sym">,</span> f2<span class="sym">)) =
</span>   f1 <span class="sym">&gt;</span> f2 <span class="kwa">orelse</span> <span class="sym">(</span><span class="kwa">Real</span>.<span class="sym">== (</span>f1<span class="sym">,</span> f2<span class="sym">)</span> <span class="kwa">andalso String</span>.<span class="sym">&lt;= (</span>k1<span class="sym">,</span> k2<span class="sym">))

</span><span class="kwa">fun</span> writeFrequencies <span class="sym">(</span>k<span class="sym">,</span> dna<span class="sym">) =
</span>  <span class="kwa">let
     val</span> <span class="sym">(</span>n<span class="sym">,</span> cnt<span class="sym">) =</span> counts <span class="sym">(</span>k<span class="sym">,</span> dna<span class="sym">)
</span>     <span class="kwa">val</span> tot <span class="sym">=</span> <span class="kwa">Real</span>.fromInt n
     <span class="kwa">val</span> frq <span class="sym">=
</span>	Array.fromList <span class="sym">(</span>H.fold <span class="sym">(</span>cnt<span class="sym">, [],</span> <span class="kwa">fn</span> <span class="sym">(</span>k<span class="sym">,</span> r<span class="sym">,</span> l<span class="sym">) =&gt;
				(</span>k<span class="sym">,</span> <span class="num">100.0</span> <span class="sym">*</span> <span class="kwa">Real</span>.fromInt <span class="sym">(!</span>r<span class="sym">) /</span> tot<span class="sym">) ::</span> l<span class="sym">))
</span>     <span class="kwa">val</span> _ <span class="sym">=</span> QuickSort.sortArray <span class="sym">(</span>frq<span class="sym">,</span> compareFreq<span class="sym">)
</span>     <span class="kwa">val</span> <span class="sym">() =
</span>	Array.foreach <span class="sym">(</span>frq<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>k<span class="sym">,</span> f<span class="sym">) =&gt;
</span>		       print <span class="sym">(</span>concat <span class="sym">[</span>k<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,
</span>				      <span class="kwa">Real</span>.fmt <span class="sym">(</span><span class="kwa">StringCvt</span>.FIX <span class="sym">(</span>SOME <span class="num">3</span><span class="sym">))</span> f<span class="sym">,
</span>				      <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">]))
</span>  <span class="kwa">in
</span>     print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
  <span class="kwa">end

fun</span> writeCount <span class="sym">(</span>seq<span class="sym">,</span> dna<span class="sym">) =
</span>  <span class="kwa">let
     val</span> <span class="sym">(</span>_<span class="sym">,</span> cnt<span class="sym">) =</span> counts <span class="sym">(</span>size seq<span class="sym">,</span> dna<span class="sym">)
</span>  <span class="kwa">in
</span>     print <span class="sym">(</span>concat <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(</span><span class="kwa">case</span> H.peek <span class="sym">(</span>cnt<span class="sym">,</span> seq<span class="sym">)</span> <span class="kwa">of
</span>				     NONE <span class="sym">=&gt;</span> <span class="num">0
</span>				   <span class="sym">|</span> SOME r <span class="sym">=&gt; !</span>r<span class="sym">),
</span>		    <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span><span class="sym">,</span> seq<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])
</span>  <span class="kwa">end

structure</span> Buffer<span class="sym">:
</span>   <span class="kwa">sig
      type</span> t

      <span class="kwa">val</span> addLine<span class="sym">:</span> t <span class="sym">*</span> <span class="kwb">string</span> <span class="sym">-&gt;</span> t
      <span class="kwa">val</span> contents<span class="sym">:</span> t <span class="sym">-&gt;</span> char array
      <span class="kwa">val</span> empty<span class="sym">:</span> t
   <span class="kwa">end</span> <span class="sym">=
</span>   <span class="kwa">struct
      datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="kwb">string</span> list

      <span class="kwa">val</span> empty<span class="sym">:</span> t <span class="sym">=</span> T <span class="sym">[]

</span>      <span class="kwa">fun</span> addLine <span class="sym">(</span>T xs<span class="sym">,</span> x<span class="sym">) =</span> T <span class="sym">(</span>x <span class="sym">::</span> xs<span class="sym">)

</span>      <span class="kwa">fun</span> contents <span class="sym">(</span>T lines<span class="sym">) =
</span>	 <span class="kwa">let
	    val</span> n <span class="sym">=</span> foldl <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">(</span>s<span class="sym">,</span> n<span class="sym">) =&gt;</span> n <span class="sym">+</span> size s <span class="num">- 1</span><span class="sym">)</span> <span class="num">0</span> lines
	    <span class="kwa">val</span> a <span class="sym">=</span> Array.array <span class="sym">(</span>n<span class="sym">,</span> #<span class="str">&quot;</span><span class="esc">\000</span><span class="str">&quot;</span><span class="sym">)
</span>	    <span class="kwa">val</span> _ <span class="sym">=
</span>	       foldl <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">) =&gt;
</span>		      <span class="kwa">let
			 fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">)  =
</span>			    <span class="kwa">if</span> j <span class="sym">&lt;</span> <span class="num">0
</span>			       <span class="kwa">then</span> i
			    <span class="kwa">else</span> <span class="sym">(</span>Array.update <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> <span class="kwa">String</span>.sub <span class="sym">(</span>s<span class="sym">,</span> j<span class="sym">))
				  ;</span> loop <span class="sym">(</span>i <span class="num">- 1</span><span class="sym">,</span> j <span class="num">- 1</span><span class="sym">))
</span>		      <span class="kwa">in
</span>			 loop <span class="sym">(</span>i<span class="sym">,</span> <span class="kwa">String</span>.size s <span class="num">- 2</span><span class="sym">)
</span>		      <span class="kwa">end</span><span class="sym">)
	       (</span>n <span class="num">- 1</span><span class="sym">)</span> lines
	 <span class="kwa">in
</span>	    a
	 <span class="kwa">end
   end

</span><span class="com">(* Extract DNA sequence &quot;THREE&quot; from stdin *)</span>
<span class="kwa">val</span> dnaThree <span class="sym">=
</span>  <span class="kwa">let
     fun</span> line <span class="sym">() =</span> <span class="kwa">TextIO</span>.inputLine <span class="kwa">TextIO</span>.stdIn
     <span class="kwa">fun</span> isThree s <span class="sym">=</span> <span class="kwa">String</span>.substring <span class="sym">(</span>s<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">6</span><span class="sym">) =</span> <span class="str">&quot;&gt;THREE&quot;</span>
     <span class="kwa">val</span> <span class="sym">() =</span> <span class="kwa">while</span> not <span class="sym">(</span>isThree <span class="sym">(</span>valOf <span class="sym">(</span>line <span class="sym">())))</span> <span class="kwa">do</span> <span class="sym">()
</span>     <span class="kwa">fun</span> loop <span class="sym">() =
</span>	<span class="kwa">let
	   val</span> l <span class="sym">=</span> valOf <span class="sym">(</span>line <span class="sym">())
</span>	<span class="kwa">in
	   if</span> #<span class="str">&quot;;&quot;</span> <span class="sym">=</span> <span class="kwa">String</span>.sub <span class="sym">(</span>l<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>  <span class="com">(* Skip possible comment *)</span>
	      <span class="kwa">then</span> loop <span class="sym">()
</span>	   <span class="kwa">else
	      let
		 fun</span> loop <span class="sym">(</span>b<span class="sym">,</span> l<span class="sym">) =
</span>		    <span class="kwa">let
		       val</span> b <span class="sym">=</span> Buffer.addLine <span class="sym">(</span>b<span class="sym">,</span> l<span class="sym">)
</span>		    <span class="kwa">in
		       case</span> line <span class="sym">()</span> <span class="kwa">of
</span>			  NONE <span class="sym">=&gt;</span> b
			<span class="sym">|</span> SOME l <span class="sym">=&gt;
</span>			     <span class="kwa">if</span> #<span class="str">&quot;&lt;&quot;</span> <span class="sym">=</span> <span class="kwa">String</span>.sub <span class="sym">(</span>l<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span>				<span class="kwa">then</span> b
			     <span class="kwa">else</span> loop <span class="sym">(</span>b<span class="sym">,</span> l<span class="sym">)
</span>		    <span class="kwa">end
	      in
</span>		 loop <span class="sym">(</span>Buffer.empty<span class="sym">,</span> l<span class="sym">)
</span>	      <span class="kwa">end
	end
     val</span> a <span class="sym">=</span> Buffer.contents <span class="sym">(</span>loop <span class="sym">())
</span>  <span class="kwa">in
     String</span>.toUpper
     <span class="sym">(</span><span class="kwa">String</span>.tabulate <span class="sym">(</span>Array.length a<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> Array.sub <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">)))
</span>  <span class="kwa">end

val</span> <span class="sym">() =</span> writeFrequencies <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> dnaThree<span class="sym">)
</span><span class="kwa">val</span> <span class="sym">() =</span> writeFrequencies <span class="sym">(</span><span class="num">2</span><span class="sym">,</span> dnaThree<span class="sym">)
</span><span class="kwa">val</span> <span class="sym">() =
</span>   <span class="kwa">List</span>.foreach
   <span class="sym">([</span><span class="str">&quot;GGT&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTA&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTATT&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">,</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">],
</span>    <span class="kwa">fn</span> k <span class="sym">=&gt;</span> writeCount <span class="sym">(</span>k<span class="sym">,</span> dnaThree<span class="sym">))

</span>
