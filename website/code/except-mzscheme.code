#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu

<span class="sym">(</span>module except mzscheme
  <span class="sym">(</span>define HI <span class="num">0</span><span class="sym">)</span>
  <span class="sym">(</span>define LO <span class="num">0</span><span class="sym">)</span>

  <span class="sym">(</span>define <span class="sym">(</span>hi<span class="sym">-</span>excp? x<span class="sym">) (</span><span class="kwa">eq</span>? x <span class="sym">'</span>Hi_Exception<span class="sym">))</span>
  <span class="sym">(</span>define <span class="sym">(</span>lo<span class="sym">-</span>excp? x<span class="sym">) (</span><span class="kwa">eq</span>? x <span class="sym">'</span>Lo_Exception<span class="sym">))</span>
  <span class="sym">(</span>define <span class="sym">(</span>true? x<span class="sym">) (</span><span class="kwa">if</span> <span class="sym">(</span>boolean? x<span class="sym">)</span> x #t<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>some_fun n<span class="sym">)</span>
    <span class="sym">(</span>with<span class="sym">-</span>handlers
	<span class="sym">([</span>true? <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>exn<span class="sym">)</span> #f<span class="sym">)])</span>
      <span class="sym">(</span>hi_fun n<span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">(</span>hi_fun n<span class="sym">)</span>
    <span class="sym">(</span>with<span class="sym">-</span>handlers
	<span class="sym">([</span>hi<span class="sym">-</span>excp? <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>exn<span class="sym">) (</span><span class="kwa">set</span><span class="sym">!</span> HI <span class="sym">(+</span> HI <span class="num">1</span><span class="sym">))) ])</span>
      <span class="sym">(</span>lo_fun n<span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">(</span>lo_fun n<span class="sym">)</span>
    <span class="sym">(</span>with<span class="sym">-</span>handlers
	<span class="sym">([</span>lo<span class="sym">-</span>excp? <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>exn<span class="sym">) (</span><span class="kwa">set</span><span class="sym">!</span> LO <span class="sym">(+</span> LO <span class="num">1</span><span class="sym">))) ])</span>
      <span class="sym">(</span>blowup n<span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">(</span>blowup n<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> <span class="num">0</span> <span class="sym">(</span>modulo n <span class="num">2</span><span class="sym">))</span>
	<span class="sym">(</span>raise <span class="sym">'</span>Hi_Exception<span class="sym">)</span>
	<span class="sym">(</span>raise <span class="sym">'</span>Lo_Exception<span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">1</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">))</span> <span class="num">1</span><span class="sym">)))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	  <span class="sym">((=</span> i n<span class="sym">))</span>
	<span class="sym">(</span>some_fun i<span class="sym">)))</span>
    <span class="sym">(</span>printf <span class="str">&quot;Exceptions: HI=~a / LO=~a~n&quot;</span> HI LO<span class="sym">))</span>

  <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
