<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Threading<span class="sym">;

</span><span class="kwc">class</span> MeetingPlace
<span class="sym">{
</span>   <span class="kwc">private</span> Colour first<span class="sym">,</span> second<span class="sym">;
</span>   <span class="kwc">private</span> <span class="kwb">bool</span> firstCall <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;
</span>   <span class="kwc">private</span> <span class="kwb">bool</span> mustWait <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span>   <span class="kwc">private</span> <span class="kwb">int</span> n<span class="sym">;

</span>   <span class="kwc">public</span> MeetingPlace<span class="sym">(</span><span class="kwb">int</span> maxMeetings<span class="sym">){
</span>      n <span class="sym">=</span> maxMeetings<span class="sym">;
   }

</span>   <span class="kwc">public</span> Colour OtherCreaturesColour<span class="sym">(</span>Colour me<span class="sym">){
</span>      lock<span class="sym">(</span><span class="kwa">this</span><span class="sym">){
</span>         Colour other<span class="sym">;

</span>         <span class="kwa">while</span> <span class="sym">(</span>mustWait<span class="sym">){
</span>            Monitor<span class="sym">.</span>Wait<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
         }

</span>         <span class="kwa">if</span> <span class="sym">(</span>firstCall<span class="sym">){
</span>            <span class="kwa">if</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
</span>               first <span class="sym">=</span> me<span class="sym">;
</span>               firstCall <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;

</span>               <span class="kwa">while</span> <span class="sym">(!</span>firstCall<span class="sym">){
</span>                  Monitor<span class="sym">.</span>Wait<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
               }
</span>               mustWait <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span>               other <span class="sym">=</span> second<span class="sym">;
            }
</span>            <span class="kwa">else</span> <span class="sym">{
</span>               other <span class="sym">=</span> Colour<span class="sym">.</span>faded<span class="sym">;
            }
         }

</span>         <span class="kwa">else</span> <span class="sym">{
</span>            second <span class="sym">=</span> me<span class="sym">;
</span>            other <span class="sym">=</span> first<span class="sym">;
</span>            firstCall <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;
</span>            mustWait <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;
         }

</span>         Monitor<span class="sym">.</span>PulseAll<span class="sym">(</span><span class="kwa">this</span><span class="sym">);
</span>         <span class="kwa">return</span> other<span class="sym">;
      }
   }
}


</span><span class="kwc">class</span> Creature
<span class="sym">{
</span>   <span class="kwc">private</span> MeetingPlace m<span class="sym">;
</span>   internal <span class="kwb">int</span> creaturesMet <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>   internal Colour me<span class="sym">;

</span>   <span class="kwc">public</span> Creature<span class="sym">(</span>MeetingPlace m<span class="sym">,</span> Colour c<span class="sym">){
</span>      <span class="kwa">this</span><span class="sym">.</span>m <span class="sym">=</span> m<span class="sym">;</span> <span class="kwa">this</span><span class="sym">.</span>me <span class="sym">=</span> c<span class="sym">;
   }

</span>   <span class="kwc">public</span> <span class="kwb">void</span> Be<span class="sym">(){
</span>      <span class="kwa">while</span><span class="sym">(</span>me <span class="sym">!=</span> Colour<span class="sym">.</span>faded<span class="sym">){</span> MeetOtherCreature<span class="sym">(); }
   }

</span>   <span class="kwc">private</span> <span class="kwb">void</span> MeetOtherCreature<span class="sym">(){
</span>      Colour other <span class="sym">=</span> m<span class="sym">.</span>OtherCreaturesColour<span class="sym">(</span>me<span class="sym">);
</span>      <span class="kwa">if</span> <span class="sym">(</span>other <span class="sym">==</span> Colour<span class="sym">.</span>faded<span class="sym">){
</span>         me <span class="sym">=</span> other<span class="sym">;
      }
</span>      <span class="kwa">else</span> <span class="sym">{
</span>         creaturesMet<span class="sym">++;
</span>         me <span class="sym">=</span> Complement<span class="sym">(</span>other<span class="sym">);
      }
   }

</span>   <span class="slc">// don't use arithmetic
</span>   <span class="slc">// use if-else or switch/case or pattern-match
</span>   Colour Complement<span class="sym">(</span>Colour other<span class="sym">){
</span>      <span class="kwa">if</span> <span class="sym">(</span>me <span class="sym">==</span> other<span class="sym">)</span> <span class="kwa">return</span> me<span class="sym">;
</span>      <span class="kwa">switch</span><span class="sym">(</span>me<span class="sym">){
</span>         <span class="kwa">case</span> Colour<span class="sym">.</span>blue<span class="sym">:
</span>            <span class="kwa">return</span> other <span class="sym">==</span> Colour<span class="sym">.</span>red ? Colour<span class="sym">.</span>yellow <span class="sym">:</span> Colour<span class="sym">.</span>red<span class="sym">;
</span>         <span class="kwa">case</span> Colour<span class="sym">.</span>red<span class="sym">:
</span>            <span class="kwa">return</span> other <span class="sym">==</span> Colour<span class="sym">.</span>blue ? Colour<span class="sym">.</span>yellow <span class="sym">:</span> Colour<span class="sym">.</span>blue<span class="sym">;
</span>         <span class="kwa">case</span> Colour<span class="sym">.</span>yellow<span class="sym">:
</span>            <span class="kwa">return</span> other <span class="sym">==</span> Colour<span class="sym">.</span>blue ? Colour<span class="sym">.</span>red <span class="sym">:</span> Colour<span class="sym">.</span>blue<span class="sym">;
</span>         <span class="kwa">default</span><span class="sym">:</span> <span class="kwa">return</span> me<span class="sym">;
      }
   }
}


</span><span class="kwb">enum</span> Colour <span class="sym">{</span> blue<span class="sym">,</span> red<span class="sym">,</span> yellow<span class="sym">,</span> faded <span class="sym">}

</span><span class="kwc">class</span> chameneos
<span class="sym">{
</span>   <span class="kwb">static</span> Colour<span class="sym">[]</span> colours <span class="sym">= {</span> Colour<span class="sym">.</span>blue<span class="sym">,</span> Colour<span class="sym">.</span>red<span class="sym">,</span> Colour<span class="sym">.</span>yellow <span class="sym">};
</span>   <span class="kwb">static</span> Creature<span class="sym">[]</span> creatures <span class="sym">=</span> <span class="kwa">new</span> Creature<span class="sym">[</span>colours<span class="sym">.</span>Length<span class="sym">];
</span>   <span class="kwb">static</span> Thread<span class="sym">[]</span> threads <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">[</span>colours<span class="sym">.</span>Length<span class="sym">];

</span>   <span class="kwc">public</span> <span class="kwb">static void</span> Main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">) {
</span>      <span class="kwb">int</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>      MeetingPlace m <span class="sym">=</span> <span class="kwa">new</span> MeetingPlace<span class="sym">(</span>n<span class="sym">);

</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>colours<span class="sym">.</span>Length<span class="sym">;</span> i<span class="sym">++){
</span>         creatures<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> Creature<span class="sym">(</span>m<span class="sym">,</span>colours<span class="sym">[</span>i<span class="sym">]);
</span>         threads<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> Thread<span class="sym">(</span><span class="kwa">new</span> ThreadStart<span class="sym">(</span>creatures<span class="sym">[</span>i<span class="sym">].</span>Be<span class="sym">));
      }
</span>      foreach <span class="sym">(</span>Thread t in threads<span class="sym">)</span> t<span class="sym">.</span>Start<span class="sym">();
</span>      foreach <span class="sym">(</span>Thread t in threads<span class="sym">)</span> t<span class="sym">.</span>Join<span class="sym">();

</span>      <span class="kwb">int</span> meetings <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      foreach <span class="sym">(</span>Creature c in creatures<span class="sym">)</span> meetings <span class="sym">+=</span> c<span class="sym">.</span>creaturesMet<span class="sym">;
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0}&quot;</span><span class="sym">,</span>meetings<span class="sym">);
   }
}
</span>
