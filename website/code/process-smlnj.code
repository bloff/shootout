<span class="com">(* process.sml
 *
 *   Build chain of N threads that relay an int value.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume&#64;tti-c.org)
 *)</span>
<span class="kwa">structure</span> Test<span class="sym">:</span><span class="kwa">sig val</span> main<span class="sym">:</span><span class="kwb">string</span><span class="sym">*</span><span class="kwb">string</span> list<span class="sym">-&gt;</span>OS.Process.status <span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct

</span>    <span class="com">(* build the chain *)</span>
    <span class="kwa">fun</span> build <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> c<span class="sym">) =</span> c
      <span class="sym">|</span> build <span class="sym">(</span>n<span class="sym">,</span> s<span class="sym">) =</span> <span class="kwa">let val</span> p <span class="sym">=</span> CML.channel <span class="sym">()
</span>			   <span class="kwa">fun</span> sp <span class="sym">() = (</span>CML.send <span class="sym">(</span>s<span class="sym">,</span> CML.recv p <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span> sp <span class="sym">())
</span>		       <span class="kwa">in</span> ignore <span class="sym">(</span>CML.spawn sp<span class="sym">);</span> build <span class="sym">(</span>n<span class="num">-1</span><span class="sym">,</span> p<span class="sym">)</span> <span class="kwa">end

</span>    <span class="com">(* Last thread, this is really the N+1st thread -- contrary to
     * the prose of the problem description, but in accordance with the
     * supposedly correct output: *)</span>
    <span class="kwa">fun</span> mklast <span class="sym">() =
</span>	<span class="kwa">let fun</span> out s <span class="sym">=</span> <span class="kwa">TextIO</span>.output <span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,</span> s<span class="sym">)
</span>	    <span class="kwa">val</span> p <span class="sym">=</span> CML.channel <span class="sym">()
</span>	    <span class="kwa">fun</span> sp <span class="sym">() = (</span>out <span class="sym">(</span><span class="kwa">Int</span>.toString <span class="sym">(</span>CML.recv p<span class="sym">)</span> ^ <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span> sp <span class="sym">())
</span>	<span class="kwa">in</span> ignore <span class="sym">(</span>CML.spawn sp<span class="sym">);</span> p <span class="kwa">end

</span>    <span class="com">(* the driver *)</span>
    <span class="kwa">fun</span> doit n <span class="sym">() =</span> CML.send <span class="sym">(</span>build <span class="sym">(</span>n<span class="sym">,</span> mklast <span class="sym">()),</span> <span class="num">0</span><span class="sym">)
</span>    <span class="kwa">fun</span> main' n <span class="sym">= (</span>RunCML.doit <span class="sym">(</span>doit n<span class="sym">,</span> NONE<span class="sym">);</span> OS.Process.success<span class="sym">)
</span>    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1
</span>      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))
</span><span class="kwa">end</span>
