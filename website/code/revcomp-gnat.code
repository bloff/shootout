<span class="slc">-- $Id: revcomp-gnat.code,v 1.5 2005-09-20 05:16:25 bfulgham Exp $
</span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="slc">-- Contributed by Pascal Obry on 2005/03/19
</span><span class="slc">-- Optimized by Bill Findlay on 2005/04/04
</span>
<span class="kwa">with</span> Ada.Text_IO<span class="sym">;</span>                <span class="kwa">use</span> Ada.Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Unchecked_Deallocation<span class="sym">;

</span><span class="kwa">procedure</span> Revcomp <span class="kwa">is

</span>   Complement <span class="sym">:</span> <span class="kwa">constant array</span> <span class="sym">(</span><span class="kwb">Character</span><span class="sym">)</span> <span class="kwa">of</span> <span class="kwb">Character</span> <span class="sym">:=
                  ('</span>A<span class="sym">' =&gt; '</span>T<span class="sym">', '</span>C<span class="sym">' =&gt; '</span>G<span class="sym">', '</span>G<span class="sym">' =&gt; '</span>C<span class="sym">', '</span>T<span class="sym">' =&gt; '</span>A<span class="sym">', '</span>U<span class="sym">' =&gt; '</span>A<span class="sym">',
                   '</span>M<span class="sym">' =&gt; '</span>K<span class="sym">', '</span>R<span class="sym">' =&gt; '</span>Y<span class="sym">', '</span>W<span class="sym">' =&gt; '</span>W<span class="sym">', '</span>S<span class="sym">' =&gt; '</span>S<span class="sym">', '</span>Y<span class="sym">' =&gt; '</span>R<span class="sym">',
                   '</span>K<span class="sym">' =&gt; '</span>M<span class="sym">', '</span>V<span class="sym">' =&gt; '</span>B<span class="sym">', '</span>H<span class="sym">' =&gt; '</span>D<span class="sym">', '</span>D<span class="sym">' =&gt; '</span>H<span class="sym">', '</span>B<span class="sym">' =&gt; '</span>V<span class="sym">',
                   '</span>N<span class="sym">' =&gt; '</span>N<span class="sym">',
                   '</span>a<span class="sym">' =&gt; '</span>T<span class="sym">', '</span>c<span class="sym">' =&gt; '</span>G<span class="sym">', '</span>g<span class="sym">' =&gt; '</span>C<span class="sym">', '</span>t<span class="sym">' =&gt; '</span>A<span class="sym">', '</span>u<span class="sym">' =&gt; '</span>A<span class="sym">',
                   '</span>m<span class="sym">' =&gt; '</span>K<span class="sym">', '</span>r<span class="sym">' =&gt; '</span>Y<span class="sym">', '</span>w<span class="sym">' =&gt; '</span>W<span class="sym">', '</span>s<span class="sym">' =&gt; '</span>S<span class="sym">', '</span>y<span class="sym">' =&gt; '</span>R<span class="sym">',
                   '</span>k<span class="sym">' =&gt; '</span>M<span class="sym">', '</span>v<span class="sym">' =&gt; '</span>B<span class="sym">', '</span>h<span class="sym">' =&gt; '</span>D<span class="sym">', '</span>d<span class="sym">' =&gt; '</span>H<span class="sym">', '</span>b<span class="sym">' =&gt; '</span>V<span class="sym">',
                   '</span>n<span class="sym">' =&gt; '</span>N<span class="sym">',
</span>                   <span class="kwa">others</span> <span class="sym">=&gt; '</span>?<span class="sym">');

</span>   Max_Length <span class="sym">:</span> <span class="kwa">constant</span> <span class="sym">:=</span> <span class="num">60</span><span class="sym">;

</span>   <span class="kwa">type</span> String_Access <span class="kwa">is access</span> <span class="kwb">String</span><span class="sym">;

</span>   <span class="kwa">procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation <span class="sym">(</span><span class="kwb">String</span><span class="sym">,</span> String_Access<span class="sym">);

</span>   <span class="kwa">procedure</span> Get_Fasta <span class="sym">(</span>Seq <span class="sym">:</span> <span class="kwa">in out</span> String_Access<span class="sym">;</span> Length <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">is
</span>      Ptr  <span class="sym">:</span> String_Access<span class="sym">;
</span>      J<span class="sym">,</span> K <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      C    <span class="sym">:</span> <span class="kwb">Character</span><span class="sym">;
</span>      EOL  <span class="sym">:</span> <span class="kwb">Boolean</span><span class="sym">;
</span>   <span class="kwa">begin
</span>      Length <span class="sym">:=</span> <span class="num">0</span><span class="sym">;

</span>      <span class="kwa">loop
</span>         Look_Ahead <span class="sym">(</span>C<span class="sym">,</span> EOL<span class="sym">);
</span>         <span class="kwa">exit when</span> C <span class="sym">/= '&gt;'</span> <span class="kwa">and</span> C <span class="sym">/= ';' ;
</span>         Get_Line <span class="sym">(</span>Seq <span class="sym">(</span><span class="num">1</span> .. Seq<span class="sym">'</span>Length<span class="sym">),</span> J<span class="sym">);
</span>         <span class="kwa">if</span> Seq <span class="sym">(</span><span class="num">1</span><span class="sym">) = '&gt;'</span> <span class="kwa">then
</span>            Put_Line <span class="sym">(</span>Seq <span class="sym">(</span><span class="num">1</span> .. J<span class="sym">));
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;

</span>      <span class="kwa">loop
         if</span> Length <span class="sym">+</span> Max_Length <span class="sym">&gt;</span> Seq<span class="sym">'</span>Length <span class="kwa">then
</span>            Ptr <span class="sym">:=</span> Seq<span class="sym">;
</span>            Seq <span class="sym">:=</span> <span class="kwa">new</span> <span class="kwb">String</span> <span class="sym">(</span><span class="num">1</span> .. <span class="num">2</span> <span class="sym">*</span> Seq<span class="sym">'</span>Length<span class="sym">);
</span>            Seq <span class="sym">(</span><span class="num">1</span> .. Length<span class="sym">) :=</span> Ptr <span class="sym">(</span><span class="num">1</span> .. Length<span class="sym">);
</span>            Free <span class="sym">(</span>Ptr<span class="sym">);
</span>         <span class="kwa">end if</span><span class="sym">;

</span>         Get_Line <span class="sym">(</span>Seq <span class="sym">(</span>Length <span class="sym">+</span> <span class="num">1</span> .. Length <span class="sym">+</span> Max_Length<span class="sym">),</span> J<span class="sym">);
</span>         K <span class="sym">:=</span> J <span class="sym">-</span> Length<span class="sym">;
</span>         Length <span class="sym">:=</span> J<span class="sym">;

</span>         <span class="kwa">if</span> K <span class="sym">=</span> Max_Length <span class="kwa">then
</span>            Skip_Line<span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;

</span>         Look_Ahead <span class="sym">(</span>C<span class="sym">,</span> EOL<span class="sym">);

</span>         <span class="kwa">if</span> K <span class="sym">&lt;</span> Max_Length <span class="kwa">or else</span> C <span class="sym">= '&gt;'</span> <span class="kwa">or else</span> C <span class="sym">= ';'</span> <span class="kwa">then
            return</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">exception
      when</span> End_Error <span class="sym">=&gt;
</span>         <span class="kwa">return</span><span class="sym">;
</span>   <span class="kwa">end</span> Get_Fasta<span class="sym">;

</span>   <span class="kwa">procedure</span> Reverse_Fasta <span class="sym">(</span>Fasta <span class="sym">:</span> <span class="kwa">in out</span> <span class="kwb">String</span><span class="sym">)</span> <span class="kwa">is
</span>      C    <span class="sym">:</span> <span class="kwb">Character</span><span class="sym">;
</span>      L<span class="sym">,</span> R <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;
</span>   <span class="kwa">begin
      for</span> I <span class="kwa">in</span> <span class="num">0</span> .. Fasta<span class="sym">'</span>Length <span class="kwa">loop
</span>         L <span class="sym">:=</span> Fasta<span class="sym">'</span>First <span class="sym">+</span> I<span class="sym">;
</span>         R <span class="sym">:=</span> Fasta<span class="sym">'</span>Last <span class="sym">-</span> I<span class="sym">;
</span>         <span class="kwa">exit when</span> L <span class="sym">&gt;</span> R<span class="sym">;
</span>         C <span class="sym">:=</span> Fasta <span class="sym">(</span>L<span class="sym">);
</span>         Fasta <span class="sym">(</span>L<span class="sym">) :=</span> Complement <span class="sym">(</span>Fasta <span class="sym">(</span>R<span class="sym">));
</span>         Fasta <span class="sym">(</span>R<span class="sym">) :=</span> Complement <span class="sym">(</span>C<span class="sym">);
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">end</span> Reverse_Fasta<span class="sym">;

</span>   <span class="kwa">procedure</span> Put_Reversed_Fasta <span class="sym">(</span>Fasta <span class="sym">:</span> <span class="kwa">in out</span> <span class="kwb">String</span><span class="sym">)</span> <span class="kwa">is
</span>      L <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> Fasta<span class="sym">'</span>Last<span class="sym">;
</span>   <span class="kwa">begin
      while</span> L <span class="sym">&gt;=</span> Max_Length <span class="kwa">loop
</span>         Reverse_Fasta <span class="sym">(</span>Fasta <span class="sym">(</span>L <span class="sym">-</span> Max_Length <span class="sym">+</span> <span class="num">1</span> .. L<span class="sym">));
</span>         Put_Line <span class="sym">(</span>Fasta <span class="sym">(</span>L <span class="sym">-</span> Max_Length <span class="sym">+</span> <span class="num">1</span> .. L<span class="sym">));
</span>         L <span class="sym">:=</span> L <span class="sym">-</span> Max_Length<span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">if</span> L <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then
</span>         Reverse_Fasta <span class="sym">(</span>Fasta <span class="sym">(</span><span class="num">1</span> .. L<span class="sym">));
</span>         Put_Line <span class="sym">(</span>Fasta <span class="sym">(</span><span class="num">1</span> .. L<span class="sym">));
</span>      <span class="kwa">end if</span><span class="sym">;
</span>   <span class="kwa">end</span> Put_Reversed_Fasta<span class="sym">;

</span>   Seq    <span class="sym">:</span> String_Access <span class="sym">:=</span> <span class="kwa">new</span> <span class="kwb">String</span> <span class="sym">(</span><span class="num">1</span> .. <span class="num">1</span>_024<span class="sym">);
</span>   Length <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;

</span><span class="kwa">begin
   loop
</span>      Get_Fasta <span class="sym">(</span>Seq<span class="sym">,</span> Length<span class="sym">);
</span>      <span class="kwa">exit when</span> Length <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      Put_Reversed_Fasta <span class="sym">(</span>Seq <span class="sym">(</span><span class="num">1</span> .. Length<span class="sym">));
</span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="kwa">end</span> Revcomp<span class="sym">;</span>
