<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; $Id: prodcons-cmucl.code,v 1.5 2005-02-19 17:05:42 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; From Jochen Schmidt
</span><span class="slc">;;; Multi-lisp modifications by Brent Fulgham
</span>
<span class="sym">(</span>defparameter <span class="sym">*</span>counter<span class="sym">*</span> <span class="num">0</span><span class="sym">)
(</span>defparameter <span class="sym">*</span>produced<span class="sym">*</span> <span class="num">0</span><span class="sym">)
(</span>defparameter <span class="sym">*</span>consumed<span class="sym">*</span> <span class="num">0</span><span class="sym">)
(</span>defparameter <span class="sym">*</span>data<span class="sym">*</span> <span class="num">0</span><span class="sym">)
(</span>defparameter <span class="sym">*</span>mutex<span class="sym">* (</span>mp<span class="sym">:</span>make<span class="sym">-</span>lock <span class="str">&quot;Big Lock&quot;</span><span class="sym">))

(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span>                                         #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">))))
    (</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">))
	     (</span>fixnum n<span class="sym">))
    (</span>setf <span class="sym">*</span>counter<span class="sym">*</span> <span class="num">0
</span>	  <span class="sym">*</span>produced<span class="sym">*</span> <span class="num">0
</span>	  <span class="sym">*</span>consumed<span class="sym">*</span> <span class="num">0
</span>	  <span class="sym">*</span>data<span class="sym">*</span> <span class="num">0</span><span class="sym">)
    (</span>let <span class="sym">((</span>producer <span class="sym">(</span>mp<span class="sym">:</span>make<span class="sym">-</span>process #<span class="str">'(lambda () (funcall #'</span>producer n<span class="sym">)) :</span>name <span class="str">&quot;Producer&quot;</span><span class="sym">))
	  (</span>consumer <span class="sym">(</span>mp<span class="sym">:</span>make<span class="sym">-</span>process #<span class="str">'(lambda () (funcall #'</span>consumer n<span class="sym">)) :</span>name <span class="str">&quot;Consumer&quot;</span><span class="sym">)))
      (</span>mp<span class="sym">:</span>process<span class="sym">-</span>wait <span class="str">&quot;Wait on Producer&quot;</span> #<span class="str">'(lambda () (eq (mp:process-state producer) :killed)))
      (mp:process-wait &quot;Wait on Consumer&quot; #'</span><span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span><span class="kwa">eq</span> <span class="sym">(</span>mp<span class="sym">:</span>process<span class="sym">-</span>state consumer<span class="sym">) :</span>killed<span class="sym">)))
      (</span>format t <span class="str">&quot;~A ~A~%&quot;</span> <span class="sym">*</span>produced<span class="sym">* *</span>consumed<span class="sym">*))))

(</span><span class="kwa">defun</span> producer <span class="sym">(</span>n<span class="sym">)
  (</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">))
           (</span>fixnum n<span class="sym">))
  (</span>loop <span class="sym">:</span>for i <span class="sym">:</span>of<span class="sym">-</span><span class="kwa">type</span> fixnum <span class="sym">:</span>from <span class="num">1</span> <span class="sym">:</span>to n
        <span class="sym">:</span>do
        <span class="sym">(</span>mp<span class="sym">:</span>process<span class="sym">-</span>wait <span class="str">&quot;Producer is waiting on Consumer&quot;</span> #<span class="str">'(lambda () (= *counter* 0)))
        (mp:with-lock-held (*mutex*)
          (setf *data* i
                    *counter* 1))
        (incf *produced*)))

(defun consumer (n)
  (declare (optimize (speed 3) (safety 0))
           (fixnum n))
  (let ((i 0))
    (declare (fixnum i))
    (loop
     (mp:process-wait &quot;Consumer is waiting on Producer&quot; #'</span><span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (= *</span>counter<span class="sym">*</span> <span class="num">1</span><span class="sym">)))
     (</span>mp<span class="sym">:</span>with<span class="sym">-</span>lock<span class="sym">-</span>held <span class="sym">(*</span>mutex<span class="sym">*)
       (</span>setf i <span class="sym">*</span>data<span class="sym">*
             *</span>counter<span class="sym">*</span> <span class="num">0</span><span class="sym">))
     (</span>incf <span class="sym">*</span>consumed<span class="sym">*)
     (</span>when <span class="sym">(=</span> i n<span class="sym">)
       (</span>return<span class="sym">)))))</span>
