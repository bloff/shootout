<span class="slc">% ---------------------------------------------------------------------------- %
</span><span class="slc">% random.m
</span><span class="slc">% Ralph Becket &lt;rbeck&#64;microsoft.com&gt;
</span><span class="slc">% Tue Jan  9 14:18:19 GMT 2001
</span><span class="slc">% vim: ts=4 sw=4 et tw=0 wm=0 ff=unix
</span><span class="slc">% ---------------------------------------------------------------------------- %
</span>
<span class="sym">:-</span> module mytest.

<span class="sym">:-</span> interface.

<span class="sym">:-</span> import_module io.



<span class="sym">:-</span> pred main<span class="sym">(</span>io__state<span class="sym">,</span> io__state<span class="sym">)</span>.
<span class="sym">:-</span> mode main<span class="sym">(</span>di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det.



<span class="sym">:-</span> implementation.



<span class="sym">:-</span> import_module <span class="kwb">float</span><span class="sym">,</span> int<span class="sym">,</span> list<span class="sym">,</span> string<span class="sym">,</span> require.


main <span class="sym">--&gt;
</span>    io__command_line_arguments<span class="sym">(</span>ArgV<span class="sym">),
    (   {</span> ArgV <span class="sym">= [],</span>        N <span class="sym">=</span> <span class="num">1</span> <span class="sym">}
    ;   {</span> ArgV <span class="sym">= [</span>Arg<span class="sym">],</span>     N <span class="sym">=</span> string__det_to_int<span class="sym">(</span>Arg<span class="sym">) }
    ;   {</span> ArgV <span class="sym">= [</span>_<span class="sym">,</span>_<span class="sym">|</span>_<span class="sym">],</span>   error<span class="sym">(</span><span class="str">&quot;usage: random [N]&quot;</span><span class="sym">) }
    ),
</span>    io__format<span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>f<span class="sym">(</span>nth_random_no<span class="sym">(</span>N<span class="sym">,</span> seed<span class="sym">))])</span>.


<span class="sym">:-</span> func nth_random_no<span class="sym">(</span>int<span class="sym">,</span> int<span class="sym">) =</span> <span class="kwb">float</span>.

nth_random_no<span class="sym">(</span>I<span class="sym">,</span> S0<span class="sym">) = (</span> if I <span class="sym">&gt;</span> <span class="num">1</span> then nth_random_no<span class="sym">(</span>I <span class="num">- 1</span><span class="sym">,</span> S<span class="sym">)</span> else R <span class="sym">) :-
</span>    gen_random<span class="sym">(</span><span class="num">100.0</span><span class="sym">,</span> R<span class="sym">,</span> S0<span class="sym">,</span> S<span class="sym">)</span>.



<span class="sym">:-</span> pred gen_random<span class="sym">(</span><span class="kwb">float</span><span class="sym">,</span> <span class="kwb">float</span><span class="sym">,</span> int<span class="sym">,</span> int<span class="sym">)</span>.
<span class="sym">:-</span> mode gen_random<span class="sym">(</span>in<span class="sym">,</span> out<span class="sym">,</span> in<span class="sym">,</span> out<span class="sym">)</span> <span class="kwa">is</span> det.

gen_random<span class="sym">(</span>Max<span class="sym">,</span> R<span class="sym">,</span> S0<span class="sym">,</span> S<span class="sym">) :-
</span>    S <span class="sym">= (</span>S0 <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> `<span class="kwa">rem</span>` im<span class="sym">,
</span>    R <span class="sym">=</span> Max <span class="sym">*</span> <span class="kwb">float</span><span class="sym">(</span>S<span class="sym">) /</span> <span class="kwb">float</span><span class="sym">(</span>im<span class="sym">)</span>.

<span class="sym">:-</span> func im <span class="sym">=</span> int.   im <span class="sym">=</span> <span class="num">139968</span>.
<span class="sym">:-</span> func ia <span class="sym">=</span> int.   ia <span class="sym">=</span>   <span class="num">3877</span>.
<span class="sym">:-</span> func ic <span class="sym">=</span> int.   ic <span class="sym">=</span>  <span class="num">29573</span>.
<span class="sym">:-</span> func seed <span class="sym">=</span> int. seed <span class="sym">=</span>   <span class="num">42</span>.
