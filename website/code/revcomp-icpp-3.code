<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// Contributed by Paul Kitchin</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;iterator&gt;</span>
<span class="dir">#include &lt;vector&gt;</span>

std<span class="sym">::</span><span class="kwb">size_t</span> line_length <span class="sym">=</span> <span class="num">60</span><span class="sym">;</span>

<span class="kwb">char</span> <span class="kwd">complement</span><span class="sym">(</span><span class="kwb">char</span> character<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">static char const</span> complement_map<span class="sym">[] =</span>
   <span class="sym">{</span>
      <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'T'</span><span class="sym">,</span> <span class="str">'V'</span><span class="sym">,</span> <span class="str">'G'</span><span class="sym">,</span> <span class="str">'H'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'C'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'M'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'K'</span><span class="sym">,</span> <span class="str">'N'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">,</span> <span class="str">'A'</span><span class="sym">,</span> <span class="str">'A'</span><span class="sym">,</span> <span class="str">'B'</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">,</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span> <span class="str">'R'</span>
   <span class="sym">};</span>
   <span class="kwa">return</span> complement_map<span class="sym">[</span>character <span class="sym">&amp;</span> <span class="num">0x1f</span><span class="sym">];</span>
<span class="sym">}</span>

<span class="kwb">struct</span> chunk
<span class="sym">{</span>
   <span class="kwd">chunk</span><span class="sym">()</span>
      <span class="sym">:</span>
      <span class="kwd">previous</span><span class="sym">(</span><span class="num">0</span><span class="sym">),</span>
      <span class="kwd">next</span><span class="sym">(</span><span class="num">0</span><span class="sym">),</span>
      <span class="kwd">length</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
   <span class="sym">{</span>
   <span class="sym">}</span>
   <span class="kwd">chunk</span><span class="sym">(</span>chunk <span class="sym">*</span> previous<span class="sym">)</span>
      <span class="sym">:</span>
      <span class="kwd">previous</span><span class="sym">(</span>previous<span class="sym">),</span>
      <span class="kwd">next</span><span class="sym">(</span><span class="num">0</span><span class="sym">),</span>
      <span class="kwd">length</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
   <span class="sym">{</span>
      previous<span class="sym">-&gt;</span>next <span class="sym">=</span> <span class="kwa">this</span><span class="sym">;</span>
   <span class="sym">}</span>
   chunk <span class="sym">*</span> previous<span class="sym">;</span>
   chunk <span class="sym">*</span> next<span class="sym">;</span>
   <span class="kwb">unsigned short</span> length<span class="sym">;</span>
   <span class="kwb">char</span> data<span class="sym">[</span><span class="num">65526</span><span class="sym">];</span>
<span class="sym">};</span>

<span class="kwb">void</span> <span class="kwd">write_reverse_complement</span><span class="sym">(</span>chunk <span class="sym">*</span> begin<span class="sym">,</span> chunk <span class="sym">*</span> end<span class="sym">)</span>
<span class="sym">{</span>
   chunk <span class="sym">*</span> start <span class="sym">=</span> begin<span class="sym">;</span>
   <span class="kwb">char</span> <span class="sym">*</span> begin_char <span class="sym">=</span> begin<span class="sym">-&gt;</span>data<span class="sym">;</span>
   <span class="kwb">char</span> <span class="sym">*</span> end_char <span class="sym">=</span> end<span class="sym">-&gt;</span>data <span class="sym">+</span> end<span class="sym">-&gt;</span>length <span class="sym">-</span> <span class="num">2</span><span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span>begin <span class="sym">!=</span> end <span class="sym">||</span> begin_char <span class="sym">&lt;</span> end_char<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">char</span> temp <span class="sym">=</span> <span class="kwd">complement</span><span class="sym">(*</span>begin_char<span class="sym">);</span>
      <span class="sym">*</span>begin_char<span class="sym">++ =</span> <span class="kwd">complement</span><span class="sym">(*</span>end_char<span class="sym">);</span>
      <span class="sym">*</span>end_char<span class="sym">-- =</span> temp<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(*</span>begin_char <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span>
      <span class="sym">{</span>
         <span class="sym">++</span>begin_char<span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(*</span>end_char <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span>
      <span class="sym">{</span>
         <span class="sym">--</span>end_char<span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>begin_char <span class="sym">==</span> begin<span class="sym">-&gt;</span>data <span class="sym">+</span> begin<span class="sym">-&gt;</span>length<span class="sym">)</span>
      <span class="sym">{</span>
         begin <span class="sym">=</span> begin<span class="sym">-&gt;</span>next<span class="sym">;</span>
         begin_char <span class="sym">=</span> begin<span class="sym">-&gt;</span>data<span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>end_char <span class="sym">==</span> end<span class="sym">-&gt;</span>data <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
      <span class="sym">{</span>
         end <span class="sym">=</span> end<span class="sym">-&gt;</span>previous<span class="sym">;</span>
         end_char <span class="sym">=</span> end<span class="sym">-&gt;</span>data <span class="sym">+</span> end<span class="sym">-&gt;</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   <span class="kwa">while</span> <span class="sym">(</span>start<span class="sym">)</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>cout<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>start<span class="sym">-&gt;</span>data<span class="sym">,</span> start<span class="sym">-&gt;</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
      chunk <span class="sym">*</span> last <span class="sym">=</span> start<span class="sym">;</span>
      start <span class="sym">=</span> start<span class="sym">-&gt;</span>next<span class="sym">;</span>
      <span class="kwa">delete</span> last<span class="sym">;</span>
   <span class="sym">}</span>
   std<span class="sym">::</span>cout<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
   std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">sync_with_stdio</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">);</span>
   std<span class="sym">::</span>cout<span class="sym">.</span><span class="kwd">sync_with_stdio</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">);</span>
   <span class="kwa">while</span> <span class="sym">(!</span>std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">eof</span><span class="sym">())</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>string header<span class="sym">;</span>
      std<span class="sym">::</span><span class="kwd">getline</span><span class="sym">(</span>std<span class="sym">::</span>cin<span class="sym">,</span> header<span class="sym">);</span>
      std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> header <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
      chunk <span class="sym">*</span> start <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">chunk</span><span class="sym">();</span>
      chunk <span class="sym">*</span> end <span class="sym">=</span> start<span class="sym">;</span>
      <span class="kwa">while</span> <span class="sym">(!</span>std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">eof</span><span class="sym">() &amp;&amp;</span> std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">peek</span><span class="sym">() !=</span> <span class="str">'&gt;'</span><span class="sym">)</span>
      <span class="sym">{</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> line <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> line <span class="sym">&lt;</span> <span class="num">1074</span> <span class="sym">&amp;&amp; !</span>std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">eof</span><span class="sym">() &amp;&amp;</span> std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">peek</span><span class="sym">() !=</span> <span class="str">'&gt;'</span><span class="sym">; ++</span>line<span class="sym">)</span>
         <span class="sym">{</span>
            std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">getline</span><span class="sym">(</span>end<span class="sym">-&gt;</span>data <span class="sym">+</span> end<span class="sym">-&gt;</span>length<span class="sym">,</span> line_length <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
            end<span class="sym">-&gt;</span>length <span class="sym">+=</span> std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">gcount</span><span class="sym">();</span>
            <span class="sym">*(</span>end<span class="sym">-&gt;</span>data <span class="sym">+</span> end<span class="sym">-&gt;</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">) =</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
         <span class="sym">}</span>
         <span class="sym">*(</span>end<span class="sym">-&gt;</span>data <span class="sym">+</span> end<span class="sym">-&gt;</span>length<span class="sym">) =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;</span>
         <span class="kwa">if</span> <span class="sym">(!</span>std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">eof</span><span class="sym">() &amp;&amp;</span> std<span class="sym">::</span>cin<span class="sym">.</span><span class="kwd">peek</span><span class="sym">() !=</span> <span class="str">'&gt;'</span><span class="sym">)</span>
         <span class="sym">{</span>
            end <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">chunk</span><span class="sym">(</span>end<span class="sym">);</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      <span class="kwd">write_reverse_complement</span><span class="sym">(</span>start<span class="sym">,</span> end<span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>
