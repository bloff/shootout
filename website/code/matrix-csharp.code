<span class="com">/* The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * contributed by Isaac Gouy
 */</span>

<span class="kwa">using</span> System<span class="sym">;

</span><span class="kwc">class</span> Matrix
<span class="sym">{
</span>   <span class="kwb">const int</span> mSize <span class="sym">=</span> <span class="num">30</span><span class="sym">;

</span>   <span class="kwb">static int</span><span class="sym">[][]</span> MkMatrix<span class="sym">() {
</span>      <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwb">int</span><span class="sym">[][]</span> m <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>mSize<span class="sym">][];
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> mSize<span class="sym">;</span> i<span class="sym">++){
</span>         m<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>mSize<span class="sym">];
</span>         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> mSize<span class="sym">;</span> j<span class="sym">++)</span> m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> count<span class="sym">++;
         }
</span>      <span class="kwa">return</span> m<span class="sym">;
   }

</span>   <span class="kwb">static void</span> MMult<span class="sym">(</span><span class="kwb">int</span><span class="sym">[][]</span> m1<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[][]</span> m2<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[][]</span> m3<span class="sym">) {
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> mSize<span class="sym">;</span> i<span class="sym">++)
</span>         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> mSize<span class="sym">;</span> j<span class="sym">++) {
</span>            <span class="kwb">int</span> val <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> k <span class="sym">&lt;</span> mSize<span class="sym">;</span> k<span class="sym">++)</span> val <span class="sym">+=</span> m1<span class="sym">[</span>i<span class="sym">][</span>k<span class="sym">] *</span> m2<span class="sym">[</span>k<span class="sym">][</span>j<span class="sym">];
</span>            m3<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> val<span class="sym">;
         }
   }

</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">) {
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>      <span class="kwb">int</span><span class="sym">[][]</span> m1 <span class="sym">=</span> MkMatrix<span class="sym">();
</span>      <span class="kwb">int</span><span class="sym">[][]</span> m2 <span class="sym">=</span> MkMatrix<span class="sym">();
</span>      <span class="kwb">int</span><span class="sym">[][]</span> mm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>mSize<span class="sym">][];
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> mSize<span class="sym">;</span> i<span class="sym">++)</span> mm<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>mSize<span class="sym">];

</span>      <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)</span> MMult<span class="sym">(</span>m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);

</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0} {1} {2} {3}&quot;</span><span class="sym">,
</span>         mm<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">2</span><span class="sym">][</span><span class="num">3</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">3</span><span class="sym">][</span><span class="num">2</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">4</span><span class="sym">][</span><span class="num">4</span><span class="sym">]);
   }
}</span>
