<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   converted to C++ from D by Rafal Rusin</span>
<span class="com">   compile: g++ -o fannkuch fannkuch.cpp</span>
<span class="com">*/</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;string&gt;</span>
<span class="dir">#include &lt;memory&gt;</span>
<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwc">template</span> <span class="sym">&lt;</span>typename T<span class="sym">&gt;</span>
<span class="kwc">class</span> auto_array <span class="sym">{</span>
    <span class="kwc">private</span><span class="sym">:</span>
    T <span class="sym">*</span> array<span class="sym">;</span>
    <span class="kwc">public</span><span class="sym">:</span>
    <span class="kwd">auto_array</span><span class="sym">(</span>T <span class="sym">*</span>array<span class="sym">):</span> <span class="kwd">array</span><span class="sym">(</span>array<span class="sym">) {}</span>
    <span class="kwc">inline</span> T <span class="sym">&amp;</span><span class="kwc">operator</span><span class="sym">[](</span><span class="kwb">int</span> i<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span>
	<span class="kwa">return</span> array<span class="sym">[</span>i<span class="sym">];</span>
    <span class="sym">}</span>
    <span class="sym">~</span><span class="kwd">auto_array</span><span class="sym">() {</span>
	<span class="kwa">delete</span><span class="sym">[]</span> array<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">};</span>

<span class="kwb">int</span> <span class="kwd">fannkuch</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">);</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
    <span class="kwb">int</span> n <span class="sym">=</span> argc <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>
    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">&lt;&lt;</span> n <span class="sym">&lt;&lt;</span> <span class="str">&quot;) = &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">);</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">fannkuch</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)</span>
<span class="sym">{</span>
    auto_array<span class="sym">&lt;</span><span class="kwb">int</span><span class="sym">&gt;</span> <span class="kwd">perm</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">]),</span> <span class="kwd">perm1</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">]),</span> <span class="kwd">count</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">]);</span>
    <span class="kwb">int</span> gi<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> temp<span class="sym">,</span> flips<span class="sym">,</span> m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> r <span class="sym">=</span> n<span class="sym">,</span> maxFlipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> perm1<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(;;)</span>
    <span class="sym">{</span>
       <span class="kwa">if</span> <span class="sym">(</span>check <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">)</span>
       <span class="sym">{</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> cout <span class="sym">&lt;&lt;</span> perm1<span class="sym">[</span>i<span class="sym">]+</span><span class="num">1</span><span class="sym">;</span>
	    cout <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
            check<span class="sym">++;</span>
        <span class="sym">}</span>

        <span class="kwa">while</span><span class="sym">(</span>r <span class="sym">!=</span> <span class="num">1</span><span class="sym">) {</span> count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span> r<span class="sym">--; }</span>
        <span class="kwa">if</span><span class="sym">(!(</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="num">0</span> <span class="sym">||</span> perm1<span class="sym">[</span>m<span class="sym">] ==</span> m<span class="sym">))</span>
        <span class="sym">{</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];</span>

            gi <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            flips <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">while</span><span class="sym">(</span>gi<span class="sym">)</span>
            <span class="sym">{</span>
                temp <span class="sym">=</span> perm<span class="sym">[</span>gi<span class="sym">];</span>
                perm<span class="sym">[</span>gi<span class="sym">] =</span> gi<span class="sym">;</span>
                gi <span class="sym">=</span> temp<span class="sym">;</span>
                <span class="kwa">for</span><span class="sym">(</span>j <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> k <span class="sym">=</span> gi <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;</span> k<span class="sym">;</span> j<span class="sym">++,</span> k<span class="sym">--)</span>
                <span class="sym">{</span>
                    temp <span class="sym">=</span> perm<span class="sym">[</span>j<span class="sym">];</span>
                    perm<span class="sym">[</span>j<span class="sym">] =</span> perm<span class="sym">[</span>k<span class="sym">];</span>
                    perm<span class="sym">[</span>k<span class="sym">] =</span> temp<span class="sym">;</span>
                <span class="sym">}</span>
                flips<span class="sym">++;</span>
            <span class="sym">}</span>

            <span class="kwa">if</span><span class="sym">(</span>flips <span class="sym">&gt;</span> maxFlipsCount<span class="sym">)</span> maxFlipsCount <span class="sym">=</span> flips<span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwa">for</span><span class="sym">(;;)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span>maxFlipsCount<span class="sym">);</span>
            temp <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            <span class="kwa">for</span><span class="sym">(</span>gi <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> gi <span class="sym">&lt;</span> r<span class="sym">;)</span>
            <span class="sym">{</span>
                j <span class="sym">=</span> gi <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
                perm1<span class="sym">[</span>gi<span class="sym">] =</span> perm1<span class="sym">[</span>j<span class="sym">];</span>
                gi <span class="sym">=</span> j<span class="sym">;</span>
            <span class="sym">}</span>
            perm1<span class="sym">[</span>r<span class="sym">] =</span> temp<span class="sym">;</span>

            count<span class="sym">[</span>r<span class="sym">]--;</span>
            <span class="kwa">if</span><span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
            r<span class="sym">++;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
