<span class="slc">! -*- mode: f90 -*-</span>
<span class="slc">!</span>
<span class="slc">! $Id: heapsort-gfortran.code,v 1.4 2006-09-20 05:51:32 bfulgham Exp $ ; $Name:  $</span>
<span class="slc">!</span>
<span class="slc">! heapsort function implementation</span>
<span class="slc">! Simon Geard, 3/12/04</span>
<span class="slc">!</span>
<span class="slc">! Building info.</span>
<span class="slc">! ==============</span>
<span class="slc">!</span>
<span class="slc">! Linux  - using the Intel Fortran90 compiler:</span>
<span class="slc">!</span>
<span class="slc">!          ifort matrix.f90 -O3 -static-libcxa -o matrix</span>
<span class="slc">!</span>
program heapSort
  implicit none
  integer<span class="sym">,</span> parameter <span class="sym">::</span> IM <span class="sym">=</span> <span class="num">139968</span>
  integer<span class="sym">,</span> parameter <span class="sym">::</span> IA <span class="sym">=</span> <span class="num">3877</span>
  integer<span class="sym">,</span> parameter <span class="sym">::</span> IC <span class="sym">=</span> <span class="num">29573</span>
  integer<span class="sym">,</span> parameter <span class="sym">::</span> msize <span class="sym">=</span> <span class="num">30</span>
  real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> ary
  integer <span class="sym">::</span> i<span class="sym">,</span> k<span class="sym">,</span> num
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> argv
  intrinsic matmul

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)</span>
  read<span class="sym">(</span>argv<span class="sym">,*)</span> num
  if <span class="sym">(</span>num <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> num <span class="sym">=</span> <span class="num">1</span>


  <span class="slc">! create an array of N random doubles</span>
  allocate<span class="sym">(</span>ary<span class="sym">(</span>num<span class="sym">))</span>
  ary <span class="sym">= (/(</span>getRandom<span class="sym">(</span><span class="num">1.0</span>d0<span class="sym">),</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>num<span class="sym">)/)</span>

  <span class="slc">! heap sort</span>
  call hsort<span class="sym">(</span>num<span class="sym">,</span> ary<span class="sym">)</span>

  write<span class="sym">(*,</span><span class="str">'(f12.10)'</span><span class="sym">)</span> ary<span class="sym">(</span>num<span class="sym">)</span>

  deallocate<span class="sym">(</span>ary<span class="sym">)</span>

contains
  real<span class="sym">*</span><span class="num">8</span> function getRandom<span class="sym">(</span>mval<span class="sym">)</span>
    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> mval
    integer<span class="sym">,</span> save <span class="sym">::</span> last <span class="sym">=</span> <span class="num">42</span>
    last <span class="sym">=</span> mod<span class="sym">(</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC <span class="sym">,</span> IM<span class="sym">)</span>
    getRandom <span class="sym">=</span> mval <span class="sym">*</span> last <span class="sym">/</span> IM
  end function getRandom

  subroutine hsort<span class="sym">(</span>n<span class="sym">,</span> ra<span class="sym">)</span>
    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> n
    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>inout<span class="sym">) ::</span> ra
    integer <span class="sym">::</span> i<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> l
    real<span class="sym">*</span><span class="num">8</span> rra
    intrinsic ishft

    l <span class="sym">=</span> ishft<span class="sym">(</span>n<span class="sym">,-</span><span class="num">1</span><span class="sym">)</span>
    ir <span class="sym">=</span> n
    do
       if <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> then
          l <span class="sym">=</span> l<span class="sym">-</span><span class="num">1</span>
          rra <span class="sym">=</span> ra<span class="sym">(</span>l<span class="sym">)</span>
       else
          rra <span class="sym">=</span> ra<span class="sym">(</span>ir<span class="sym">)</span>
          ra<span class="sym">(</span>ir<span class="sym">) =</span> ra<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
          ir <span class="sym">=</span> ir<span class="sym">-</span><span class="num">1</span>
          if <span class="sym">(</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span> then
             ra<span class="sym">(</span><span class="num">1</span><span class="sym">) =</span> rra
             return
          end if
       end if
       i <span class="sym">=</span> l
       j <span class="sym">=</span> ishft<span class="sym">(</span>l<span class="sym">,</span><span class="num">1</span><span class="sym">)</span>
       do
          if <span class="sym">(</span>j <span class="sym">&gt;</span> ir<span class="sym">)</span> exit
          if <span class="sym">(</span>j <span class="sym">&lt;</span> ir .and. ra<span class="sym">(</span>j<span class="sym">) &lt;</span> ra<span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">))</span> then
             j <span class="sym">=</span> j<span class="sym">+</span><span class="num">1</span>
          end if
          if <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">(</span>j<span class="sym">))</span> then
             ra<span class="sym">(</span>i<span class="sym">) =</span> ra<span class="sym">(</span>j<span class="sym">)</span>
             i <span class="sym">=</span> j
             j <span class="sym">=</span> j<span class="sym">+</span>i
          else
             j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span>
          end if
       end do
       ra<span class="sym">(</span>i<span class="sym">) =</span> rra
 end do

end subroutine hsort

end program heapSort
