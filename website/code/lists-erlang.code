<span class="slc">%% The Great Computer Language Shootout
</span><span class="slc">%% http://shootout.alioth.debian.org/
</span>
<span class="slc">%% contributed by Alexey Shchepin &lt;alexey&#64;sevcom.net&gt;
</span><span class="slc">%% modified by Isaac Gouy
</span>
<span class="slc">% module &quot;lists&quot; already exists in stdlib
</span><span class="sym">-</span>module<span class="sym">(</span>lists_test<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="sym">-</span>define<span class="sym">(</span>SIZE<span class="sym">,</span> <span class="num">10000</span><span class="sym">)</span>.

main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">&quot;1&quot;</span><span class="sym">])</span>.
main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span>   N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),
</span>   test_lists_n<span class="sym">(</span>N<span class="sym">),
</span>   <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.

test_lists_n<span class="sym">(</span><span class="num">1</span><span class="sym">) -&gt;
</span>   io<span class="sym">:</span>format<span class="sym">(</span><span class="str">&quot;~p~n&quot;</span><span class="sym">, [</span>test_lists<span class="sym">()]);
</span>test_lists_n<span class="sym">(</span>N<span class="sym">) -&gt;
</span>   test_lists<span class="sym">(),
</span>   test_lists_n<span class="sym">(</span>N<span class="num">-1</span><span class="sym">)</span>.

test_lists<span class="sym">() -&gt;
</span>   <span class="kwb">erase</span><span class="sym">(),
</span>   L1 <span class="sym">=</span> create_seq<span class="sym">(),
</span>   L2 <span class="sym">=</span> copy<span class="sym">(</span>L1<span class="sym">),
   {</span>L22<span class="sym">,</span> L3<span class="sym">} =</span> move1<span class="sym">(</span>L2<span class="sym">,</span> new<span class="sym">()),
   {</span>L33<span class="sym">,</span> L222<span class="sym">} =</span> move2<span class="sym">(</span>L3<span class="sym">,</span> L22<span class="sym">),
</span>   L11 <span class="sym">=</span> reverse<span class="sym">(</span>L1<span class="sym">),
</span>   ?SIZE <span class="sym">=</span> head<span class="sym">(</span>L11<span class="sym">),
</span>   test_eq<span class="sym">(</span>L11<span class="sym">,</span> L222<span class="sym">),
</span>   len<span class="sym">(</span>L11<span class="sym">)</span>.

move1<span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">) -&gt;
</span>   <span class="kwa">case</span> move_from_begin_to_end<span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">)</span> <span class="kwa">of
</span>      <span class="sym">{</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">} -&gt;
</span>         move1<span class="sym">(</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">);
</span>      nil <span class="sym">-&gt;
         {</span>From<span class="sym">,</span> To<span class="sym">}
</span>   <span class="kwa">end</span>.

move2<span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">) -&gt;
</span>   <span class="kwa">case</span> move_from_end_to_end<span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">)</span> <span class="kwa">of
</span>      <span class="sym">{</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">} -&gt;
</span>         move2<span class="sym">(</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">);
</span>      nil <span class="sym">-&gt;
         {</span>From<span class="sym">,</span> To<span class="sym">}
</span>   <span class="kwa">end</span>.

<span class="slc">% Implementation of doubly-linked lists
</span>
new<span class="sym">() -&gt;
   {</span>nil<span class="sym">,</span> nil<span class="sym">}</span>.

new_el<span class="sym">(</span>Data<span class="sym">) -&gt;
</span>   Ref <span class="sym">=</span> <span class="kwb">make_ref</span><span class="sym">(),
</span>   <span class="kwb">put</span><span class="sym">(</span>Ref<span class="sym">,</span> Data<span class="sym">),
</span>   Ref.

push_end<span class="sym">({</span>nil<span class="sym">,</span> nil<span class="sym">},</span> Val<span class="sym">) -&gt;
</span>   Data <span class="sym">= {</span>Val<span class="sym">,</span> nil<span class="sym">,</span> nil<span class="sym">},
</span>   NewEl <span class="sym">=</span> new_el<span class="sym">(</span>Data<span class="sym">),
   {</span>NewEl<span class="sym">,</span> NewEl<span class="sym">};
</span>push_end<span class="sym">({</span>First<span class="sym">,</span> Last<span class="sym">},</span> Val<span class="sym">) -&gt;
</span>   Data <span class="sym">= {</span>Val<span class="sym">,</span> Last<span class="sym">,</span> nil<span class="sym">},
</span>   NewEl <span class="sym">=</span> new_el<span class="sym">(</span>Data<span class="sym">),
</span>   <span class="kwb">put</span><span class="sym">(</span>Last<span class="sym">,</span> <span class="kwb">setelement</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>Last<span class="sym">),</span> NewEl<span class="sym">)),
   {</span>First<span class="sym">,</span> NewEl<span class="sym">}</span>.

head<span class="sym">({</span>First<span class="sym">,</span> _Last<span class="sym">}) -&gt;
</span>   <span class="kwb">element</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>First<span class="sym">))</span>.

create_seq<span class="sym">() -&gt;
</span>   create_seq<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> new<span class="sym">())</span>.
create_seq<span class="sym">(</span>N<span class="sym">,</span> List<span class="sym">) -&gt;
</span>   <span class="kwa">if
</span>      N <span class="sym">=&lt;</span> ?SIZE <span class="sym">-&gt;
</span>         create_seq<span class="sym">(</span>N<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> push_end<span class="sym">(</span>List<span class="sym">,</span> N<span class="sym">));
</span>      true <span class="sym">-&gt;
</span>         List
   <span class="kwa">end</span>.

copy<span class="sym">({</span>First<span class="sym">,</span> _Last<span class="sym">}) -&gt;
</span>   copy1<span class="sym">(</span>First<span class="sym">,</span> new<span class="sym">())</span>.

copy1<span class="sym">(</span>nil<span class="sym">,</span> List<span class="sym">) -&gt;
</span>   List<span class="sym">;
</span>copy1<span class="sym">(</span>El<span class="sym">,</span> List<span class="sym">) -&gt;
   {</span>Val<span class="sym">,</span> _Prev<span class="sym">,</span> Next<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El<span class="sym">),
</span>   copy1<span class="sym">(</span>Next<span class="sym">,</span> push_end<span class="sym">(</span>List<span class="sym">,</span> Val<span class="sym">))</span>.

reverse<span class="sym">({</span>First<span class="sym">,</span> Last<span class="sym">}) -&gt;
</span>   reverse_els<span class="sym">(</span>First<span class="sym">),
   {</span>Last<span class="sym">,</span> First<span class="sym">}</span>.

reverse_els<span class="sym">(</span>nil<span class="sym">) -&gt;
</span>   ok<span class="sym">;
</span>reverse_els<span class="sym">(</span>El<span class="sym">) -&gt;
   {</span>Val<span class="sym">,</span> Prev<span class="sym">,</span> Next<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El<span class="sym">),
</span>   <span class="kwb">put</span><span class="sym">(</span>El<span class="sym">, {</span>Val<span class="sym">,</span> Next<span class="sym">,</span> Prev<span class="sym">}),
</span>   reverse_els<span class="sym">(</span>Next<span class="sym">)</span>.

move_from_begin_to_end<span class="sym">({</span>First1<span class="sym">,</span> Last1<span class="sym">}, {</span>First2<span class="sym">,</span> Last2<span class="sym">}) -&gt;
</span>   <span class="kwa">if
</span>      First1 <span class="sym">==</span> nil <span class="sym">-&gt;
</span>         nil<span class="sym">;
</span>      true <span class="sym">-&gt;
         {</span>Val<span class="sym">,</span> _Prev1<span class="sym">,</span> Next1<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>First1<span class="sym">),
</span>         NewList1 <span class="sym">=</span> <span class="kwa">if
</span>            Next1 <span class="sym">==</span> nil <span class="sym">-&gt;
               {</span>nil<span class="sym">,</span> nil<span class="sym">};
</span>            true <span class="sym">-&gt;
               {</span>Next1<span class="sym">,</span> Last1<span class="sym">}
</span>         <span class="kwa">end</span><span class="sym">,
</span>         NewList2 <span class="sym">=</span> <span class="kwa">if
</span>            First2 <span class="sym">==</span> nil <span class="sym">-&gt;
</span>               Data <span class="sym">= {</span>Val<span class="sym">,</span> nil<span class="sym">,</span> nil<span class="sym">},
</span>               <span class="kwb">put</span><span class="sym">(</span>First1<span class="sym">,</span> Data<span class="sym">),
               {</span>First1<span class="sym">,</span> First1<span class="sym">};
</span>            true <span class="sym">-&gt;
</span>               Data <span class="sym">= {</span>Val<span class="sym">,</span> Last2<span class="sym">,</span> nil<span class="sym">},
</span>               <span class="kwb">put</span><span class="sym">(</span>First1<span class="sym">,</span> Data<span class="sym">),
</span>               <span class="kwb">put</span><span class="sym">(</span>Last2<span class="sym">,</span> <span class="kwb">setelement</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>Last2<span class="sym">),</span> First1<span class="sym">)),
               {</span>First2<span class="sym">,</span> First1<span class="sym">}
</span>         <span class="kwa">end</span><span class="sym">,
      {</span>NewList1<span class="sym">,</span> NewList2<span class="sym">}
</span>   <span class="kwa">end</span>.

move_from_end_to_end<span class="sym">({</span>First1<span class="sym">,</span> Last1<span class="sym">}, {</span>First2<span class="sym">,</span> Last2<span class="sym">}) -&gt;
</span>   <span class="kwa">if
</span>      First1 <span class="sym">==</span> nil <span class="sym">-&gt;
</span>         nil<span class="sym">;
</span>      true <span class="sym">-&gt;
         {</span>Val<span class="sym">,</span> Prev1<span class="sym">,</span> _Next1<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>Last1<span class="sym">),
</span>         NewList1 <span class="sym">=</span> <span class="kwa">if
</span>            Prev1 <span class="sym">==</span> nil <span class="sym">-&gt;
               {</span>nil<span class="sym">,</span> nil<span class="sym">};
</span>            true <span class="sym">-&gt;
               {</span>First1<span class="sym">,</span> Prev1<span class="sym">}
</span>         <span class="kwa">end</span><span class="sym">,
</span>         NewList2 <span class="sym">=</span> <span class="kwa">if
</span>            First2 <span class="sym">==</span> nil <span class="sym">-&gt;
</span>               Data <span class="sym">= {</span>Val<span class="sym">,</span> nil<span class="sym">,</span> nil<span class="sym">},
</span>               <span class="kwb">put</span><span class="sym">(</span>Last1<span class="sym">,</span> Data<span class="sym">),
               {</span>Last1<span class="sym">,</span> Last1<span class="sym">};
</span>            true <span class="sym">-&gt;
</span>               Data <span class="sym">= {</span>Val<span class="sym">,</span> Last2<span class="sym">,</span> nil<span class="sym">},
</span>               <span class="kwb">put</span><span class="sym">(</span>Last1<span class="sym">,</span> Data<span class="sym">),
</span>               <span class="kwb">put</span><span class="sym">(</span>Last2<span class="sym">,</span> <span class="kwb">setelement</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>Last2<span class="sym">),</span> Last1<span class="sym">)),
               {</span>First2<span class="sym">,</span> Last1<span class="sym">}
</span>         <span class="kwa">end</span><span class="sym">,
      {</span>NewList1<span class="sym">,</span> NewList2<span class="sym">}
</span>   <span class="kwa">end</span>.

test_eq<span class="sym">({</span>First1<span class="sym">,</span> Last1<span class="sym">}, {</span>First2<span class="sym">,</span> Last2<span class="sym">}) -&gt;
</span>   test_eq1<span class="sym">(</span>First1<span class="sym">,</span> First2<span class="sym">)</span>.

test_eq1<span class="sym">(</span>nil<span class="sym">,</span> nil<span class="sym">) -&gt;
</span>   ok<span class="sym">;
</span>test_eq1<span class="sym">(</span>El1<span class="sym">,</span> El2<span class="sym">) -&gt;
   {</span>Val<span class="sym">,</span> _Prev1<span class="sym">,</span> Next1<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El1<span class="sym">),
   {</span>Val<span class="sym">,</span> _Prev2<span class="sym">,</span> Next2<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El2<span class="sym">),
</span>   test_eq1<span class="sym">(</span>Next1<span class="sym">,</span> Next2<span class="sym">)</span>.

len<span class="sym">({</span>First<span class="sym">,</span> _Last<span class="sym">}) -&gt;
</span>   len<span class="sym">(</span>First<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>.

len<span class="sym">(</span>nil<span class="sym">,</span> N<span class="sym">) -&gt;
</span>   N<span class="sym">;
</span>len<span class="sym">(</span>El<span class="sym">,</span> N<span class="sym">) -&gt;
</span>   len<span class="sym">(</span><span class="kwb">element</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>El<span class="sym">)),</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>.

