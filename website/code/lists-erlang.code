<span class="slc">%% The Great Computer Language Shootout</span>
<span class="slc">%% http://shootout.alioth.debian.org/</span>

<span class="slc">%% contributed by Alexey Shchepin &lt;alexey&#64;sevcom.net&gt;</span>
<span class="slc">%% modified by Isaac Gouy</span>

<span class="slc">% module &quot;lists&quot; already exists in stdlib</span>
<span class="sym">-</span><span class="kwd">module</span><span class="sym">(</span>lists_test<span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="sym">-</span><span class="kwd">define</span><span class="sym">(</span>SIZE<span class="sym">,</span> <span class="num">10000</span><span class="sym">)</span>.

<span class="kwd">main</span><span class="sym">() -&gt;</span> <span class="kwd">main</span><span class="sym">([</span><span class="str">&quot;1&quot;</span><span class="sym">])</span>.
<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
   N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
   <span class="kwd">test_lists_n</span><span class="sym">(</span>N<span class="sym">),</span>
   <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.

<span class="kwd">test_lists_n</span><span class="sym">(</span><span class="num">1</span><span class="sym">) -&gt;</span>
   io<span class="sym">:</span><span class="kwd">format</span><span class="sym">(</span><span class="str">&quot;~p~n&quot;</span><span class="sym">, [</span><span class="kwd">test_lists</span><span class="sym">()]);</span>
<span class="kwd">test_lists_n</span><span class="sym">(</span>N<span class="sym">) -&gt;</span>
   <span class="kwd">test_lists</span><span class="sym">(),</span>
   <span class="kwd">test_lists_n</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>.

<span class="kwd">test_lists</span><span class="sym">() -&gt;</span>
   <span class="kwb">erase</span><span class="sym">(),</span>
   L1 <span class="sym">=</span> <span class="kwd">create_seq</span><span class="sym">(),</span>
   L2 <span class="sym">=</span> <span class="kwd">copy</span><span class="sym">(</span>L1<span class="sym">),</span>
   <span class="sym">{</span>L22<span class="sym">,</span> L3<span class="sym">} =</span> <span class="kwd">move1</span><span class="sym">(</span>L2<span class="sym">,</span> <span class="kwd">new</span><span class="sym">()),</span>
   <span class="sym">{</span>L33<span class="sym">,</span> L222<span class="sym">} =</span> <span class="kwd">move2</span><span class="sym">(</span>L3<span class="sym">,</span> L22<span class="sym">),</span>
   L11 <span class="sym">=</span> <span class="kwd">reverse</span><span class="sym">(</span>L1<span class="sym">),</span>
   ?SIZE <span class="sym">=</span> <span class="kwd">head</span><span class="sym">(</span>L11<span class="sym">),</span>
   <span class="kwd">test_eq</span><span class="sym">(</span>L11<span class="sym">,</span> L222<span class="sym">),</span>
   <span class="kwd">len</span><span class="sym">(</span>L11<span class="sym">)</span>.

<span class="kwd">move1</span><span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">) -&gt;</span>
   <span class="kwa">case</span> <span class="kwd">move_from_begin_to_end</span><span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">)</span> <span class="kwa">of</span>
      <span class="sym">{</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">} -&gt;</span>
         <span class="kwd">move1</span><span class="sym">(</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">);</span>
      nil <span class="sym">-&gt;</span>
         <span class="sym">{</span>From<span class="sym">,</span> To<span class="sym">}</span>
   <span class="kwa">end</span>.

<span class="kwd">move2</span><span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">) -&gt;</span>
   <span class="kwa">case</span> <span class="kwd">move_from_end_to_end</span><span class="sym">(</span>From<span class="sym">,</span> To<span class="sym">)</span> <span class="kwa">of</span>
      <span class="sym">{</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">} -&gt;</span>
         <span class="kwd">move2</span><span class="sym">(</span>NewFrom<span class="sym">,</span> NewTo<span class="sym">);</span>
      nil <span class="sym">-&gt;</span>
         <span class="sym">{</span>From<span class="sym">,</span> To<span class="sym">}</span>
   <span class="kwa">end</span>.

<span class="slc">% Implementation of doubly-linked lists</span>

<span class="kwd">new</span><span class="sym">() -&gt;</span>
   <span class="sym">{</span>nil<span class="sym">,</span> nil<span class="sym">}</span>.

<span class="kwd">new_el</span><span class="sym">(</span>Data<span class="sym">) -&gt;</span>
   Ref <span class="sym">=</span> <span class="kwb">make_ref</span><span class="sym">(),</span>
   <span class="kwb">put</span><span class="sym">(</span>Ref<span class="sym">,</span> Data<span class="sym">),</span>
   Ref.

<span class="kwd">push_end</span><span class="sym">({</span>nil<span class="sym">,</span> nil<span class="sym">},</span> Val<span class="sym">) -&gt;</span>
   Data <span class="sym">= {</span>Val<span class="sym">,</span> nil<span class="sym">,</span> nil<span class="sym">},</span>
   NewEl <span class="sym">=</span> <span class="kwd">new_el</span><span class="sym">(</span>Data<span class="sym">),</span>
   <span class="sym">{</span>NewEl<span class="sym">,</span> NewEl<span class="sym">};</span>
<span class="kwd">push_end</span><span class="sym">({</span>First<span class="sym">,</span> Last<span class="sym">},</span> Val<span class="sym">) -&gt;</span>
   Data <span class="sym">= {</span>Val<span class="sym">,</span> Last<span class="sym">,</span> nil<span class="sym">},</span>
   NewEl <span class="sym">=</span> <span class="kwd">new_el</span><span class="sym">(</span>Data<span class="sym">),</span>
   <span class="kwb">put</span><span class="sym">(</span>Last<span class="sym">,</span> <span class="kwb">setelement</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>Last<span class="sym">),</span> NewEl<span class="sym">)),</span>
   <span class="sym">{</span>First<span class="sym">,</span> NewEl<span class="sym">}</span>.

<span class="kwd">head</span><span class="sym">({</span>First<span class="sym">,</span> _Last<span class="sym">}) -&gt;</span>
   <span class="kwb">element</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>First<span class="sym">))</span>.

<span class="kwd">create_seq</span><span class="sym">() -&gt;</span>
   <span class="kwd">create_seq</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">new</span><span class="sym">())</span>.
<span class="kwd">create_seq</span><span class="sym">(</span>N<span class="sym">,</span> List<span class="sym">) -&gt;</span>
   <span class="kwa">if</span>
      N <span class="sym">=&lt;</span> ?SIZE <span class="sym">-&gt;</span>
         <span class="kwd">create_seq</span><span class="sym">(</span>N<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">push_end</span><span class="sym">(</span>List<span class="sym">,</span> N<span class="sym">));</span>
      true <span class="sym">-&gt;</span>
         List
   <span class="kwa">end</span>.

<span class="kwd">copy</span><span class="sym">({</span>First<span class="sym">,</span> _Last<span class="sym">}) -&gt;</span>
   <span class="kwd">copy1</span><span class="sym">(</span>First<span class="sym">,</span> <span class="kwd">new</span><span class="sym">())</span>.

<span class="kwd">copy1</span><span class="sym">(</span>nil<span class="sym">,</span> List<span class="sym">) -&gt;</span>
   List<span class="sym">;</span>
<span class="kwd">copy1</span><span class="sym">(</span>El<span class="sym">,</span> List<span class="sym">) -&gt;</span>
   <span class="sym">{</span>Val<span class="sym">,</span> _Prev<span class="sym">,</span> Next<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El<span class="sym">),</span>
   <span class="kwd">copy1</span><span class="sym">(</span>Next<span class="sym">,</span> <span class="kwd">push_end</span><span class="sym">(</span>List<span class="sym">,</span> Val<span class="sym">))</span>.

<span class="kwd">reverse</span><span class="sym">({</span>First<span class="sym">,</span> Last<span class="sym">}) -&gt;</span>
   <span class="kwd">reverse_els</span><span class="sym">(</span>First<span class="sym">),</span>
   <span class="sym">{</span>Last<span class="sym">,</span> First<span class="sym">}</span>.

<span class="kwd">reverse_els</span><span class="sym">(</span>nil<span class="sym">) -&gt;</span>
   ok<span class="sym">;</span>
<span class="kwd">reverse_els</span><span class="sym">(</span>El<span class="sym">) -&gt;</span>
   <span class="sym">{</span>Val<span class="sym">,</span> Prev<span class="sym">,</span> Next<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El<span class="sym">),</span>
   <span class="kwb">put</span><span class="sym">(</span>El<span class="sym">, {</span>Val<span class="sym">,</span> Next<span class="sym">,</span> Prev<span class="sym">}),</span>
   <span class="kwd">reverse_els</span><span class="sym">(</span>Next<span class="sym">)</span>.

<span class="kwd">move_from_begin_to_end</span><span class="sym">({</span>First1<span class="sym">,</span> Last1<span class="sym">}, {</span>First2<span class="sym">,</span> Last2<span class="sym">}) -&gt;</span>
   <span class="kwa">if</span>
      First1 <span class="sym">==</span> nil <span class="sym">-&gt;</span>
         nil<span class="sym">;</span>
      true <span class="sym">-&gt;</span>
         <span class="sym">{</span>Val<span class="sym">,</span> _Prev1<span class="sym">,</span> Next1<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>First1<span class="sym">),</span>
         NewList1 <span class="sym">=</span> <span class="kwa">if</span>
            Next1 <span class="sym">==</span> nil <span class="sym">-&gt;</span>
               <span class="sym">{</span>nil<span class="sym">,</span> nil<span class="sym">};</span>
            true <span class="sym">-&gt;</span>
               <span class="sym">{</span>Next1<span class="sym">,</span> Last1<span class="sym">}</span>
         <span class="kwa">end</span><span class="sym">,</span>
         NewList2 <span class="sym">=</span> <span class="kwa">if</span>
            First2 <span class="sym">==</span> nil <span class="sym">-&gt;</span>
               Data <span class="sym">= {</span>Val<span class="sym">,</span> nil<span class="sym">,</span> nil<span class="sym">},</span>
               <span class="kwb">put</span><span class="sym">(</span>First1<span class="sym">,</span> Data<span class="sym">),</span>
               <span class="sym">{</span>First1<span class="sym">,</span> First1<span class="sym">};</span>
            true <span class="sym">-&gt;</span>
               Data <span class="sym">= {</span>Val<span class="sym">,</span> Last2<span class="sym">,</span> nil<span class="sym">},</span>
               <span class="kwb">put</span><span class="sym">(</span>First1<span class="sym">,</span> Data<span class="sym">),</span>
               <span class="kwb">put</span><span class="sym">(</span>Last2<span class="sym">,</span> <span class="kwb">setelement</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>Last2<span class="sym">),</span> First1<span class="sym">)),</span>
               <span class="sym">{</span>First2<span class="sym">,</span> First1<span class="sym">}</span>
         <span class="kwa">end</span><span class="sym">,</span>
      <span class="sym">{</span>NewList1<span class="sym">,</span> NewList2<span class="sym">}</span>
   <span class="kwa">end</span>.

<span class="kwd">move_from_end_to_end</span><span class="sym">({</span>First1<span class="sym">,</span> Last1<span class="sym">}, {</span>First2<span class="sym">,</span> Last2<span class="sym">}) -&gt;</span>
   <span class="kwa">if</span>
      First1 <span class="sym">==</span> nil <span class="sym">-&gt;</span>
         nil<span class="sym">;</span>
      true <span class="sym">-&gt;</span>
         <span class="sym">{</span>Val<span class="sym">,</span> Prev1<span class="sym">,</span> _Next1<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>Last1<span class="sym">),</span>
         NewList1 <span class="sym">=</span> <span class="kwa">if</span>
            Prev1 <span class="sym">==</span> nil <span class="sym">-&gt;</span>
               <span class="sym">{</span>nil<span class="sym">,</span> nil<span class="sym">};</span>
            true <span class="sym">-&gt;</span>
               <span class="sym">{</span>First1<span class="sym">,</span> Prev1<span class="sym">}</span>
         <span class="kwa">end</span><span class="sym">,</span>
         NewList2 <span class="sym">=</span> <span class="kwa">if</span>
            First2 <span class="sym">==</span> nil <span class="sym">-&gt;</span>
               Data <span class="sym">= {</span>Val<span class="sym">,</span> nil<span class="sym">,</span> nil<span class="sym">},</span>
               <span class="kwb">put</span><span class="sym">(</span>Last1<span class="sym">,</span> Data<span class="sym">),</span>
               <span class="sym">{</span>Last1<span class="sym">,</span> Last1<span class="sym">};</span>
            true <span class="sym">-&gt;</span>
               Data <span class="sym">= {</span>Val<span class="sym">,</span> Last2<span class="sym">,</span> nil<span class="sym">},</span>
               <span class="kwb">put</span><span class="sym">(</span>Last1<span class="sym">,</span> Data<span class="sym">),</span>
               <span class="kwb">put</span><span class="sym">(</span>Last2<span class="sym">,</span> <span class="kwb">setelement</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>Last2<span class="sym">),</span> Last1<span class="sym">)),</span>
               <span class="sym">{</span>First2<span class="sym">,</span> Last1<span class="sym">}</span>
         <span class="kwa">end</span><span class="sym">,</span>
      <span class="sym">{</span>NewList1<span class="sym">,</span> NewList2<span class="sym">}</span>
   <span class="kwa">end</span>.

<span class="kwd">test_eq</span><span class="sym">({</span>First1<span class="sym">,</span> Last1<span class="sym">}, {</span>First2<span class="sym">,</span> Last2<span class="sym">}) -&gt;</span>
   <span class="kwd">test_eq1</span><span class="sym">(</span>First1<span class="sym">,</span> First2<span class="sym">)</span>.

<span class="kwd">test_eq1</span><span class="sym">(</span>nil<span class="sym">,</span> nil<span class="sym">) -&gt;</span>
   ok<span class="sym">;</span>
<span class="kwd">test_eq1</span><span class="sym">(</span>El1<span class="sym">,</span> El2<span class="sym">) -&gt;</span>
   <span class="sym">{</span>Val<span class="sym">,</span> _Prev1<span class="sym">,</span> Next1<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El1<span class="sym">),</span>
   <span class="sym">{</span>Val<span class="sym">,</span> _Prev2<span class="sym">,</span> Next2<span class="sym">} =</span> <span class="kwb">get</span><span class="sym">(</span>El2<span class="sym">),</span>
   <span class="kwd">test_eq1</span><span class="sym">(</span>Next1<span class="sym">,</span> Next2<span class="sym">)</span>.

<span class="kwd">len</span><span class="sym">({</span>First<span class="sym">,</span> _Last<span class="sym">}) -&gt;</span>
   <span class="kwd">len</span><span class="sym">(</span>First<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>.

<span class="kwd">len</span><span class="sym">(</span>nil<span class="sym">,</span> N<span class="sym">) -&gt;</span>
   N<span class="sym">;</span>
<span class="kwd">len</span><span class="sym">(</span>El<span class="sym">,</span> N<span class="sym">) -&gt;</span>
   <span class="kwd">len</span><span class="sym">(</span><span class="kwb">element</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>El<span class="sym">)),</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>.

