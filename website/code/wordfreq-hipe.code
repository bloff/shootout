<span class="slc">%%% -*- mode: erlang -*-
</span><span class="slc">%%% $Id: wordfreq-hipe.code,v 1.9 2005-06-08 07:55:58 bfulgham Exp $
</span><span class="slc">%%% http://shootout.alioth.debian.org/
</span><span class="slc">%%%
</span><span class="slc">%%% Contributed by Bengt Kleberg (Erlang Guru!)
</span><span class="slc">%%% Updated by Alexey Shchepin &lt;alexey&#64;sevcom.net&gt;
</span>
<span class="sym">-</span>module<span class="sym">(</span>wordfreq<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="sym">-</span>define<span class="sym">(</span>BUFSIZE<span class="sym">,</span> <span class="num">4096</span><span class="sym">)</span>.

<span class="slc">%% ignore program argument
</span>main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">'1'</span><span class="sym">])</span>.
main<span class="sym">(</span>_Args<span class="sym">) -&gt;
</span>    ets<span class="sym">:</span>new<span class="sym">(</span>freqtab<span class="sym">, [</span>set<span class="sym">,</span> named_table<span class="sym">]),
</span>    ok <span class="sym">=</span> io<span class="sym">:</span>setopts<span class="sym">([</span><span class="kwb">binary</span><span class="sym">]),
</span>    insert_input<span class="sym">(</span>io<span class="sym">:</span>get_chars<span class="sym">(</span><span class="str">''</span><span class="sym">,</span> ?BUFSIZE<span class="sym">),</span> <span class="str">&quot;&quot;</span><span class="sym">),
</span>    List <span class="sym">=</span> sort<span class="sym">(),
</span>    print<span class="sym">(</span>List<span class="sym">),
</span>    <span class="kwb">halt</span><span class="sym">()</span>.


insert_input<span class="sym">(</span>eof<span class="sym">,</span> _Prev<span class="sym">) -&gt;</span> ok<span class="sym">;
</span>insert_input<span class="sym">(</span>Buf<span class="sym">,</span> Prev<span class="sym">) -&gt;
</span>    Suffix <span class="sym">=</span> words1<span class="sym">(</span>Prev <span class="sym">++</span> <span class="kwb">binary_to_list</span><span class="sym">(</span>Buf<span class="sym">)),
</span>    insert_input<span class="sym">(</span>io<span class="sym">:</span>get_chars<span class="sym">(</span><span class="str">''</span><span class="sym">,</span> ?BUFSIZE<span class="sym">),</span> Suffix<span class="sym">)</span>.


words1<span class="sym">([</span>C <span class="sym">|</span> S<span class="sym">]) -&gt;
</span>    <span class="kwa">if
</span>	<span class="sym">(</span>C <span class="sym">&gt;=</span> $a<span class="sym">)</span> and <span class="sym">(</span>C <span class="sym">=&lt;</span> $z<span class="sym">) -&gt;</span> words2<span class="sym">(</span>S<span class="sym">, [</span>C<span class="sym">]);
	(</span>C <span class="sym">&gt;=</span> $A<span class="sym">)</span> and <span class="sym">(</span>C <span class="sym">=&lt;</span> $Z<span class="sym">) -&gt;</span> words2<span class="sym">(</span>S<span class="sym">, [</span>C <span class="sym">+</span> <span class="num">32</span><span class="sym">]);
</span>	true <span class="sym">-&gt;</span> words1<span class="sym">(</span>S<span class="sym">)
</span>    <span class="kwa">end</span><span class="sym">;
</span>words1<span class="sym">([]) -&gt;
</span>    <span class="str">&quot;&quot;</span>.

words2<span class="sym">([</span>C <span class="sym">|</span> S<span class="sym">],</span> Cs<span class="sym">) -&gt;
</span>    <span class="kwa">if
</span>	<span class="sym">(</span>C <span class="sym">&gt;=</span> $a<span class="sym">)</span> and <span class="sym">(</span>C <span class="sym">=&lt;</span> $z<span class="sym">) -&gt;</span> words2<span class="sym">(</span>S<span class="sym">, [</span>C <span class="sym">|</span> Cs<span class="sym">]);
	(</span>C <span class="sym">&gt;=</span> $A<span class="sym">)</span> and <span class="sym">(</span>C <span class="sym">=&lt;</span> $Z<span class="sym">) -&gt;</span> words2<span class="sym">(</span>S<span class="sym">, [</span>C <span class="sym">+</span> <span class="num">32</span> <span class="sym">|</span> Cs<span class="sym">]);
</span>	true <span class="sym">-&gt;
</span>	    update_count<span class="sym">(</span>Cs<span class="sym">),
</span>	    words1<span class="sym">(</span>S<span class="sym">)
</span>    <span class="kwa">end</span><span class="sym">;
</span>words2<span class="sym">([],</span> Cs<span class="sym">) -&gt;
</span>    lists<span class="sym">:</span>reverse<span class="sym">(</span>Cs<span class="sym">)</span>.


update_count<span class="sym">(</span>Word<span class="sym">) -&gt;
</span>    <span class="kwa">case</span> <span class="sym">(</span><span class="kwa">catch</span> ets<span class="sym">:</span>update_counter<span class="sym">(</span>freqtab<span class="sym">,</span> Word<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span> <span class="kwa">of
</span>        <span class="sym">{</span><span class="str">'EXIT'</span><span class="sym">, {</span>badarg<span class="sym">,</span> _<span class="sym">}} -&gt;
</span>	    true <span class="sym">=</span> ets<span class="sym">:</span>insert<span class="sym">(</span>freqtab<span class="sym">, {</span>Word<span class="sym">,</span> <span class="num">1</span><span class="sym">});
</span>	_Integer <span class="sym">-&gt;
</span>	    ok
    <span class="kwa">end</span>.

sort<span class="sym">() -&gt;
</span>    Rev <span class="sym">= [{</span>C<span class="sym">,</span> lists<span class="sym">:</span>reverse<span class="sym">(</span>W<span class="sym">)} || {</span>W<span class="sym">,</span> C<span class="sym">} &lt;-</span> ets<span class="sym">:</span>tab2list<span class="sym">(</span>freqtab<span class="sym">)],
</span>    lists<span class="sym">:</span>reverse<span class="sym">(</span>lists<span class="sym">:</span>sort<span class="sym">(</span>Rev<span class="sym">))</span>.

print<span class="sym">(</span>List<span class="sym">) -&gt;
</span>    Fun <span class="sym">=</span> <span class="kwa">fun</span><span class="sym">({</span>Count<span class="sym">,</span> Word<span class="sym">}) -&gt;
</span>		  io<span class="sym">:</span>format<span class="sym">(</span><span class="str">&quot;~7w ~s~n&quot;</span><span class="sym">, [</span>Count<span class="sym">,</span> Word<span class="sym">])
</span>	  <span class="kwa">end</span><span class="sym">,
</span>    lists<span class="sym">:</span>foreach<span class="sym">(</span>Fun<span class="sym">,</span> List<span class="sym">)</span>.

