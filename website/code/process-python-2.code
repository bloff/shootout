<span class="slc">#!/usr/bin/python -OO
</span><span class="slc"># The Computer Language Shootout Benchmarks
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># contributed by Antoine Pitrou
</span>
<span class="kwc">import</span> sys

<span class="slc">#
</span><span class="slc"># A very simple cooperative threads package using generators,
</span><span class="slc">#
</span>
<span class="kwb">def</span> singleton<span class="sym">(</span>cls<span class="sym">):
</span>    instance <span class="sym">= []
</span>    <span class="kwb">def</span> wrapper<span class="sym">(*</span>args<span class="sym">, **</span>kargs<span class="sym">):
</span>        <span class="kwb">if not</span> instance<span class="sym">:
</span>            instance<span class="sym">.</span>append<span class="sym">(</span>cls<span class="sym">(*</span>args<span class="sym">, **</span>kargs<span class="sym">))
</span>        <span class="kwb">return</span> instance<span class="sym">[</span><span class="num">0</span><span class="sym">]
</span>    <span class="kwb">return</span> wrapper

<span class="kwa">class</span> WaitObject<span class="sym">(</span>object<span class="sym">):
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> switcher<span class="sym">=</span>None<span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>switcher <span class="sym">=</span> switcher <span class="kwb">or</span> global_switcher<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>waiters <span class="sym">= []

</span>    <span class="kwb">def</span> get_waiter<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwb">try</span><span class="sym">:
</span>            <span class="kwb">return</span> <span class="kwc">self</span><span class="sym">.</span>waiters<span class="sym">.</span>pop<span class="sym">()
</span>        <span class="kwb">except</span> <span class="kwa">IndexError</span><span class="sym">:
</span>            <span class="kwb">return</span> None

    <span class="kwb">def</span> add_waiter<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> waiter<span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>waiters<span class="sym">.</span>append<span class="sym">(</span>waiter<span class="sym">)

</span>    <span class="kwb">def</span> set_ready<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> ready<span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>switcher<span class="sym">.</span>set_ready<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> ready<span class="sym">)

</span><span class="kwa">class</span> Queue<span class="sym">(</span>WaitObject<span class="sym">):
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        WaitObject<span class="sym">.</span>__init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">)
</span>        <span class="kwc">self</span><span class="sym">.</span>data <span class="sym">= []

</span>    <span class="kwb">def</span> put<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> value<span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>data<span class="sym">.</span>append<span class="sym">(</span>value<span class="sym">)
</span>        <span class="kwc">self</span><span class="sym">.</span>set_ready<span class="sym">(</span>True<span class="sym">)

</span>    <span class="kwb">def</span> get<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>set_ready<span class="sym">(</span><span class="kwa">len</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>data<span class="sym">) &gt;</span> <span class="num">1</span><span class="sym">)
</span>        <span class="kwb">return</span> <span class="kwc">self</span><span class="sym">.</span>data<span class="sym">.</span>pop<span class="sym">(</span><span class="num">0</span><span class="sym">)

</span><span class="kwa">class</span> _Ready<span class="sym">(</span>WaitObject<span class="sym">):
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        WaitObject<span class="sym">.</span>__init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">)
</span>        <span class="kwc">self</span><span class="sym">.</span>set_ready<span class="sym">(</span>True<span class="sym">)

</span><span class="slc"># Special-casing Ready as a singleton is important for scalability
</span>Ready <span class="sym">=</span> singleton<span class="sym">(</span>_Ready<span class="sym">)

</span><span class="kwa">class</span> Thread<span class="sym">(</span>object<span class="sym">):
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> switcher<span class="sym">=</span>None<span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>switcher <span class="sym">=</span> switcher <span class="kwb">or</span> global_switcher<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>switcher<span class="sym">.</span>add_thread<span class="sym">(</span><span class="kwc">self</span><span class="sym">)

</span><span class="kwa">class</span> Switcher<span class="sym">(</span>object<span class="sym">):
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>threads <span class="sym">=</span> set<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>ready_objects <span class="sym">=</span> set<span class="sym">()

</span>    <span class="kwb">def</span> add_thread<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> thread<span class="sym">):
</span>        Ready<span class="sym">().</span>add_waiter<span class="sym">(</span>thread<span class="sym">)
</span>        thread<span class="sym">.</span>runner <span class="sym">=</span> thread<span class="sym">.</span>run<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>threads<span class="sym">.</span>add<span class="sym">(</span>thread<span class="sym">)

</span>    <span class="kwb">def</span> set_ready<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> wait_object<span class="sym">,</span> ready<span class="sym">):
</span>        <span class="kwb">if</span> ready<span class="sym">:
</span>            <span class="kwc">self</span><span class="sym">.</span>ready_objects<span class="sym">.</span>add<span class="sym">(</span>wait_object<span class="sym">)
</span>        <span class="kwb">else</span><span class="sym">:
</span>            <span class="kwc">self</span><span class="sym">.</span>ready_objects<span class="sym">.</span>discard<span class="sym">(</span>wait_object<span class="sym">)

</span>    <span class="kwb">def</span> run<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwb">while</span> <span class="kwa">len</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>threads<span class="sym">):
</span>            <span class="kwb">for</span> r <span class="kwb">in</span> <span class="kwc">self</span><span class="sym">.</span>ready_objects<span class="sym">:
</span>                thread <span class="sym">=</span> r<span class="sym">.</span>get_waiter<span class="sym">()
</span>                <span class="kwb">if not</span> thread <span class="kwb">or not</span> thread<span class="sym">.</span>runner<span class="sym">:
</span>                    <span class="kwb">continue
                try</span><span class="sym">:
</span>                    wait_object <span class="sym">=</span> thread<span class="sym">.</span>runner<span class="sym">.</span>next<span class="sym">()
</span>                <span class="kwb">except</span> StopIteration<span class="sym">:
</span>                    thread<span class="sym">.</span>runner <span class="sym">=</span> None
                    <span class="kwc">self</span><span class="sym">.</span>threads<span class="sym">.</span>remove<span class="sym">(</span>thread<span class="sym">)
</span>                <span class="kwb">else</span><span class="sym">:
</span>                    wait_object<span class="sym">.</span>add_waiter<span class="sym">(</span>thread<span class="sym">)
</span>                <span class="kwb">break

</span>global_switcher <span class="sym">=</span> singleton<span class="sym">(</span>Switcher<span class="sym">)

</span><span class="slc">#
</span><span class="slc"># Here the problem-specific definitions
</span><span class="slc">#
</span>
<span class="kwa">class</span> Link<span class="sym">(</span>Thread<span class="sym">):
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> next<span class="sym">):
</span>        Thread<span class="sym">.</span>__init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">)
</span>        <span class="kwc">self</span><span class="sym">.</span>next <span class="sym">=</span> next
        <span class="kwc">self</span><span class="sym">.</span>incoming <span class="sym">=</span> Queue<span class="sym">()

</span>    <span class="kwb">def</span> run<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        yield <span class="kwc">self</span><span class="sym">.</span>incoming
        <span class="kwc">self</span><span class="sym">.</span>store <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>incoming<span class="sym">.</span>get<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>next<span class="sym">.</span>incoming<span class="sym">.</span>put<span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>store <span class="sym">+</span> <span class="num">1</span><span class="sym">)

</span><span class="kwa">class</span> Terminus<span class="sym">(</span>Thread<span class="sym">):
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        Thread<span class="sym">.</span>__init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">)
</span>        <span class="kwc">self</span><span class="sym">.</span>incoming <span class="sym">=</span> Queue<span class="sym">()

</span>    <span class="kwb">def</span> run<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        yield <span class="kwc">self</span><span class="sym">.</span>incoming
        <span class="kwc">self</span><span class="sym">.</span>sum <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>incoming<span class="sym">.</span>get<span class="sym">()
</span>        <span class="kwb">print</span> <span class="str">&quot;%d&quot;</span> <span class="sym">%</span> <span class="kwc">self</span><span class="sym">.</span>sum

<span class="kwb">def</span> main<span class="sym">():
</span>    N <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])

</span>    <span class="slc"># Create the chain of threads then run them all
</span>    task <span class="sym">=</span> Terminus<span class="sym">()
</span>    <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>N<span class="sym">):
</span>        task <span class="sym">=</span> Link<span class="sym">(</span>task<span class="sym">)
</span>    task<span class="sym">.</span>incoming<span class="sym">.</span>put<span class="sym">(</span><span class="num">0</span><span class="sym">)

</span>    global_switcher<span class="sym">().</span>run<span class="sym">()

</span>main<span class="sym">()</span>
