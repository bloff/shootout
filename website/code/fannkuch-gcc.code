<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: fannkuch-gcc.code,v 1.11 2005-12-02 08:05:57 bfulgham Exp $</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Paul Hsieh</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>

<span class="kwb">unsigned long</span> <span class="kwd">fannkuch</span> <span class="sym">(</span><span class="kwb">unsigned char</span> n<span class="sym">) {</span>
<span class="kwb">unsigned char</span> <span class="sym">*</span> p <span class="sym">= (</span><span class="kwb">unsigned char</span> <span class="sym">*)</span> <span class="kwd">malloc</span> <span class="sym">(</span>n<span class="sym">);</span>
<span class="kwb">unsigned char</span> <span class="sym">*</span> q <span class="sym">= (</span><span class="kwb">unsigned char</span> <span class="sym">*)</span> <span class="kwd">malloc</span> <span class="sym">(</span>n<span class="sym">);</span>
<span class="kwb">unsigned char</span> tmp<span class="sym">;</span>
<span class="kwb">unsigned int</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">;</span>
<span class="kwb">unsigned long</span> maxflips <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> flips<span class="sym">;</span>

    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span> p<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">1</span> <span class="sym">+</span> i<span class="sym">;</span>

    <span class="kwa">for</span> <span class="sym">(;;) {</span>
    	<span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="num">1</span><span class="sym">) {</span>
    	    <span class="kwd">memcpy</span> <span class="sym">(</span>q<span class="sym">,</span> p<span class="sym">,</span> n<span class="sym">);</span>

    	    <span class="kwa">for</span> <span class="sym">(</span>flips <span class="sym">=</span> <span class="num">0</span><span class="sym">; (</span>k <span class="sym">=</span> q<span class="sym">[</span><span class="num">0</span><span class="sym">]) !=</span> <span class="num">1</span><span class="sym">;</span> flips<span class="sym">++) {</span>
    	    	<span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">--,</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> k<span class="sym">;</span> i<span class="sym">++,</span> k<span class="sym">--) {</span>
    	    	    tmp <span class="sym">=</span> q<span class="sym">[</span>i<span class="sym">];</span>
    	    	    q<span class="sym">[</span>i<span class="sym">] =</span> q<span class="sym">[</span>k<span class="sym">];</span>
    	    	    q<span class="sym">[</span>k<span class="sym">] =</span> tmp<span class="sym">;</span>
    	    	<span class="sym">}</span>
    	    <span class="sym">}</span>

    	    <span class="kwa">if</span> <span class="sym">(</span>flips <span class="sym">&gt;</span> maxflips<span class="sym">)</span> maxflips <span class="sym">=</span> flips<span class="sym">;</span>
    	<span class="sym">}</span>

    	k <span class="sym">=</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {</span>
    	    <span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">[</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">] &lt;</span> p<span class="sym">[</span>i<span class="sym">])</span> j <span class="sym">=</span> i<span class="sym">;</span>
    	    <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&amp;&amp;</span> p<span class="sym">[</span>i<span class="sym">] &gt;</span> p<span class="sym">[</span>j<span class="sym">-</span><span class="num">1</span><span class="sym">])</span> k <span class="sym">=</span> i<span class="sym">;</span>
    	<span class="sym">}</span>
    	<span class="kwa">if</span> <span class="sym">(!</span>j<span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>

    	tmp <span class="sym">=</span> p<span class="sym">[</span>j<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
    	p<span class="sym">[</span>j<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> p<span class="sym">[</span>k<span class="sym">];</span>
    	p<span class="sym">[</span>k<span class="sym">] =</span> tmp<span class="sym">;</span>

    	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span>j<span class="sym">,</span>j<span class="sym">=</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;</span> j<span class="sym">;</span> i<span class="sym">++,</span> j<span class="sym">--) {</span>
    	    tmp <span class="sym">=</span> p<span class="sym">[</span>j<span class="sym">];</span>
    	    p<span class="sym">[</span>j<span class="sym">] =</span> p<span class="sym">[</span>i<span class="sym">];</span>
    	    p<span class="sym">[</span>i<span class="sym">] =</span> tmp<span class="sym">;</span>
    	<span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwd">free</span> <span class="sym">(</span>p<span class="sym">);</span>
    <span class="kwd">free</span> <span class="sym">(</span>q<span class="sym">);</span>

    <span class="kwa">return</span> maxflips<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">unsigned char</span> <span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span> argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> n <span class="sym">=</span> argc <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;Pfannkuchen(%d) = %ld</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">fannkuch</span> <span class="sym">(</span>n<span class="sym">));</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
