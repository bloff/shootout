<span class="com">{ The Computer Language Benchmarks Game</span>
<span class="com">  http://shootout.alioth.debian.org</span>
<span class="com">  contributed by Marc Weustink</span>
<span class="com">  modified by Peter Vreman</span>
<span class="com">}</span>
<span class="kwa">program</span> chameneos<span class="sym">;</span>
<span class="com">{$mode objfpc}</span><span class="com">{$h-}</span>
<span class="kwa">uses</span>
  PThreads<span class="sym">;</span>

<span class="kwa">type</span>
  TColor <span class="sym">= (</span>Blue<span class="sym">,</span> Red<span class="sym">,</span> Yellow<span class="sym">,</span> Faded<span class="sym">);</span>

<span class="kwa">var</span>
  waitfirst<span class="sym">,</span>
  waitsecond   <span class="sym">:</span> TSemaphore<span class="sym">;</span>
  first<span class="sym">,</span>second <span class="sym">:</span> TColor<span class="sym">;</span>
  MeetingsLeft <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;</span>
  ThreadInfo   <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>.<span class="num">.3</span><span class="sym">]</span> <span class="kwa">of record</span>
    Id<span class="sym">:</span> TThreadId<span class="sym">;</span>
    StartColor<span class="sym">:</span> TColor<span class="sym">;</span>
    Count<span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;</span>
  <span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">const</span>
  COMPL<span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span>Blue..Yellow<span class="sym">,</span> Blue..Yellow<span class="sym">]</span> <span class="kwa">of</span> TColor <span class="sym">= (</span>
    <span class="sym">(</span>Blue<span class="sym">,</span> Yellow<span class="sym">,</span> Red<span class="sym">),(</span>Yellow<span class="sym">,</span> Red<span class="sym">,</span> Blue<span class="sym">), (</span>Red<span class="sym">,</span> Blue<span class="sym">,</span> Yellow<span class="sym">));</span>

<span class="kwa">function</span> <span class="kwd">OtherCreaturesColor</span><span class="sym">(</span>me<span class="sym">:</span>TColor<span class="sym">):</span>TColor<span class="sym">;</span>
<span class="kwa">const</span>
  firstcall <span class="sym">:</span> <span class="kwb">boolean</span> <span class="sym">=</span> <span class="kwb">true</span><span class="sym">;</span>
<span class="kwa">begin</span>
  result<span class="sym">:=</span>Faded<span class="sym">;</span>
  <span class="kwd">sem_wait</span><span class="sym">(</span>waitfirst<span class="sym">);</span>

  <span class="kwa">if</span> firstCall <span class="kwa">then</span>
    <span class="kwa">begin</span>
      <span class="kwa">if</span> MeetingsLeft<span class="sym">&gt;</span><span class="num">0</span> <span class="kwa">then</span>
        <span class="kwa">begin</span>
          first<span class="sym">:=</span>me<span class="sym">;</span>
          firstcall<span class="sym">:=</span><span class="kwb">false</span><span class="sym">;</span>
          <span class="kwd">sem_post</span><span class="sym">(</span>waitfirst<span class="sym">);</span>
          <span class="kwd">sem_wait</span><span class="sym">(</span>waitsecond<span class="sym">);</span>
          result<span class="sym">:=</span>second<span class="sym">;</span>
          <span class="kwd">dec</span><span class="sym">(</span>MeetingsLeft<span class="sym">);</span>
        <span class="kwa">end</span><span class="sym">;</span>
      <span class="kwd">sem_post</span><span class="sym">(</span>waitfirst<span class="sym">);</span>
    <span class="kwa">end</span>
  <span class="kwa">else</span>
    <span class="kwa">begin</span>
      firstcall<span class="sym">:=</span><span class="kwb">true</span><span class="sym">;</span>
      second<span class="sym">:=</span>me<span class="sym">;</span>
      result<span class="sym">:=</span>first<span class="sym">;</span>
      <span class="kwd">sem_post</span><span class="sym">(</span>waitsecond<span class="sym">);</span>
    <span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">function</span> <span class="kwd">ThreadFunc</span><span class="sym">(</span>AIndex<span class="sym">:</span> PtrInt<span class="sym">):</span> <span class="kwb">Pointer</span><span class="sym">;</span> <span class="kwa">cdecl</span><span class="sym">;</span>
<span class="kwa">var</span>
  Meetings <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;</span>
  me<span class="sym">,</span>other <span class="sym">:</span> TColor<span class="sym">;</span>
<span class="kwa">begin</span>
  me <span class="sym">:=</span> ThreadInfo<span class="sym">[</span>AIndex<span class="sym">]</span>.StartColor<span class="sym">;</span>
  Meetings <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>

  <span class="kwa">while</span> <span class="sym">(</span>me<span class="sym">&lt;&gt;</span>Faded<span class="sym">)</span> <span class="kwa">do</span>
    <span class="kwa">begin</span>
      other<span class="sym">:=</span><span class="kwd">OtherCreaturesColor</span><span class="sym">(</span>me<span class="sym">);</span>
      <span class="kwa">if</span> other<span class="sym">=</span>Faded <span class="kwa">then</span>
        break<span class="sym">;</span>
      <span class="kwd">inc</span><span class="sym">(</span>Meetings<span class="sym">);</span>
      me<span class="sym">:=</span>COMPL<span class="sym">[</span>me<span class="sym">,</span>other<span class="sym">];</span>
    <span class="kwa">end</span><span class="sym">;</span>

  ThreadInfo<span class="sym">[</span>AIndex<span class="sym">]</span>.Count <span class="sym">:=</span> Meetings<span class="sym">;</span>
  result<span class="sym">:=</span><span class="kwa">nil</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">const</span>
  COLOR<span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>.<span class="num">.3</span><span class="sym">]</span> <span class="kwa">of</span> TColor <span class="sym">= (</span>Blue<span class="sym">,</span> Red<span class="sym">,</span> Yellow<span class="sym">,</span> Blue<span class="sym">);</span>

<span class="kwa">var</span>
  n<span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;</span>
  Attr<span class="sym">:</span> TThreadAttr<span class="sym">;</span>
  p<span class="sym">:</span> <span class="kwb">Pointer</span><span class="sym">;</span>
<span class="kwa">begin</span>
  <span class="kwd">Val</span><span class="sym">(</span><span class="kwd">paramstr</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span> MeetingsLeft<span class="sym">,</span> n<span class="sym">);</span>
  <span class="kwa">if</span> n <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then</span> exit<span class="sym">;</span>

  <span class="kwd">sem_init</span><span class="sym">(</span>waitfirst<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
  <span class="kwd">sem_init</span><span class="sym">(</span>waitsecond<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">);</span>

  <span class="kwd">pthread_attr_init</span><span class="sym">(</span>Attr<span class="sym">);</span>
  <span class="kwd">pthread_attr_setdetachstate</span><span class="sym">(</span>Attr<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwd">pthread_attr_setstacksize</span><span class="sym">(</span>Attr<span class="sym">,</span> <span class="num">1024</span> <span class="sym">*</span> <span class="num">16</span><span class="sym">);</span>

  <span class="kwa">for</span> n <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="num">3</span> <span class="kwa">do begin</span>
    ThreadInfo<span class="sym">[</span>n<span class="sym">]</span>.Count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
    ThreadInfo<span class="sym">[</span>n<span class="sym">]</span>.StartColor <span class="sym">:=</span> COLOR<span class="sym">[</span>n<span class="sym">];</span>
    <span class="kwd">pthread_create</span><span class="sym">(</span>ThreadInfo<span class="sym">[</span>n<span class="sym">]</span>.Id<span class="sym">,</span> Attr<span class="sym">,</span> <span class="kwd">TStartRoutine</span><span class="sym">(&#64;</span>ThreadFunc<span class="sym">),</span> <span class="kwb">Pointer</span><span class="sym">(</span>n<span class="sym">));</span>
  <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwa">for</span> n <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="num">3</span> <span class="kwa">do</span>
    <span class="kwd">pthread_join</span><span class="sym">(</span>ThreadInfo<span class="sym">[</span>n<span class="sym">]</span>.Id<span class="sym">,</span> p<span class="sym">);</span>

  <span class="kwd">WriteLN</span><span class="sym">(</span>ThreadInfo<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>.Count <span class="sym">+</span> ThreadInfo<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>.Count <span class="sym">+</span> ThreadInfo<span class="sym">[</span><span class="num">2</span><span class="sym">]</span>.Count <span class="sym">+</span> ThreadInfo<span class="sym">[</span><span class="num">3</span><span class="sym">]</span>.Count<span class="sym">);</span>
<span class="kwa">end</span>.
