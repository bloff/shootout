<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// contributed by Jon Harrop, 2005</span>
<span class="slc">// Compile: g++ -Wall -O3 -ffast-math ray.cpp -o ray</span>

<span class="dir">#include &lt;vector&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;limits&gt;</span>
<span class="dir">#include &lt;cmath&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

numeric_limits<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> dbl<span class="sym">;</span>
<span class="kwb">double</span> delta <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span>dbl<span class="sym">.</span><span class="kwd">epsilon</span><span class="sym">()),</span> infinity <span class="sym">=</span> dbl<span class="sym">.</span><span class="kwd">infinity</span><span class="sym">(),</span> pi <span class="sym">=</span> M_PI<span class="sym">;</span>

<span class="kwb">struct</span> Vec <span class="sym">{</span> <span class="slc">// 3D vector</span>
  <span class="kwb">double</span> x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">;</span>
  <span class="kwd">Vec</span><span class="sym">(</span><span class="kwb">double</span> x2<span class="sym">,</span> <span class="kwb">double</span> y2<span class="sym">,</span> <span class="kwb">double</span> z2<span class="sym">) :</span> <span class="kwd">x</span><span class="sym">(</span>x2<span class="sym">),</span> <span class="kwd">y</span><span class="sym">(</span>y2<span class="sym">),</span> <span class="kwd">z</span><span class="sym">(</span>z2<span class="sym">) {}</span>
<span class="sym">};</span>
Vec <span class="kwc">operator</span><span class="sym">+(</span><span class="kwb">const</span> Vec <span class="sym">&amp;</span>a<span class="sym">,</span> <span class="kwb">const</span> Vec <span class="sym">&amp;</span>b<span class="sym">)</span>
<span class="sym">{</span> <span class="kwa">return</span> <span class="kwd">Vec</span><span class="sym">(</span>a<span class="sym">.</span>x <span class="sym">+</span> b<span class="sym">.</span>x<span class="sym">,</span> a<span class="sym">.</span>y <span class="sym">+</span> b<span class="sym">.</span>y<span class="sym">,</span> a<span class="sym">.</span>z <span class="sym">+</span> b<span class="sym">.</span>z<span class="sym">); }</span>
Vec <span class="kwc">operator</span><span class="sym">-(</span><span class="kwb">const</span> Vec <span class="sym">&amp;</span>a<span class="sym">,</span> <span class="kwb">const</span> Vec <span class="sym">&amp;</span>b<span class="sym">)</span>
<span class="sym">{</span> <span class="kwa">return</span> <span class="kwd">Vec</span><span class="sym">(</span>a<span class="sym">.</span>x <span class="sym">-</span> b<span class="sym">.</span>x<span class="sym">,</span> a<span class="sym">.</span>y <span class="sym">-</span> b<span class="sym">.</span>y<span class="sym">,</span> a<span class="sym">.</span>z <span class="sym">-</span> b<span class="sym">.</span>z<span class="sym">); }</span>
Vec <span class="kwc">operator</span><span class="sym">*(</span><span class="kwb">double</span> a<span class="sym">,</span> <span class="kwb">const</span> Vec <span class="sym">&amp;</span>b<span class="sym">) {</span> <span class="kwa">return</span> <span class="kwd">Vec</span><span class="sym">(</span>a <span class="sym">*</span> b<span class="sym">.</span>x<span class="sym">,</span> a <span class="sym">*</span> b<span class="sym">.</span>y<span class="sym">,</span> a <span class="sym">*</span> b<span class="sym">.</span>z<span class="sym">); }</span>
<span class="kwb">double</span> <span class="kwd">dot</span><span class="sym">(</span><span class="kwb">const</span> Vec <span class="sym">&amp;</span>a<span class="sym">,</span> <span class="kwb">const</span> Vec <span class="sym">&amp;</span>b<span class="sym">) {</span> <span class="kwa">return</span> a<span class="sym">.</span>x<span class="sym">*</span>b<span class="sym">.</span>x <span class="sym">+</span> a<span class="sym">.</span>y<span class="sym">*</span>b<span class="sym">.</span>y <span class="sym">+</span> a<span class="sym">.</span>z<span class="sym">*</span>b<span class="sym">.</span>z<span class="sym">; }</span>
Vec <span class="kwd">unitise</span><span class="sym">(</span><span class="kwb">const</span> Vec <span class="sym">&amp;</span>a<span class="sym">) {</span> <span class="kwa">return</span> <span class="sym">(</span><span class="num">1</span> <span class="sym">/</span> <span class="kwd">sqrt</span><span class="sym">(</span><span class="kwd">dot</span><span class="sym">(</span>a<span class="sym">,</span> a<span class="sym">))) *</span> a<span class="sym">; }</span>

<span class="kwb">struct</span> Ray <span class="sym">{</span> Vec orig<span class="sym">,</span> dir<span class="sym">;</span> <span class="kwd">Ray</span><span class="sym">(</span>Vec o<span class="sym">,</span> Vec d<span class="sym">) :</span> <span class="kwd">orig</span><span class="sym">(</span>o<span class="sym">),</span> <span class="kwd">dir</span><span class="sym">(</span>d<span class="sym">) {} };</span>

<span class="kwb">struct</span> Scene <span class="sym">{</span> <span class="slc">// Abstract base class representing a scene</span>
  <span class="kwc">virtual</span> <span class="kwb">void</span> <span class="kwd">intersect</span><span class="sym">(</span><span class="kwb">double</span> <span class="sym">&amp;,</span> Vec <span class="sym">&amp;,</span> <span class="kwb">const</span> Ray <span class="sym">&amp;)</span> <span class="kwb">const</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwc">virtual</span> <span class="kwb">void</span> <span class="kwd">del</span><span class="sym">() {};</span>
<span class="sym">};</span>

<span class="kwb">struct</span> Sphere <span class="sym">:</span> <span class="kwc">public</span> Scene <span class="sym">{</span> <span class="slc">// Derived class representing a sphere</span>
  Vec center<span class="sym">;</span>
  <span class="kwb">double</span> radius<span class="sym">;</span>

  <span class="kwd">Sphere</span><span class="sym">(</span>Vec c<span class="sym">,</span> <span class="kwb">double</span> r<span class="sym">) :</span> <span class="kwd">center</span><span class="sym">(</span>c<span class="sym">),</span> <span class="kwd">radius</span><span class="sym">(</span>r<span class="sym">) {}</span>

  <span class="kwb">double</span> <span class="kwd">ray_sphere</span><span class="sym">(</span><span class="kwb">const</span> Ray <span class="sym">&amp;</span>ray<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span>
    Vec v <span class="sym">=</span> center <span class="sym">-</span> ray<span class="sym">.</span>orig<span class="sym">;</span>
    <span class="kwb">double</span> b <span class="sym">=</span> <span class="kwd">dot</span><span class="sym">(</span>v<span class="sym">,</span> ray<span class="sym">.</span>dir<span class="sym">),</span> disc <span class="sym">=</span> b<span class="sym">*</span>b <span class="sym">-</span> <span class="kwd">dot</span><span class="sym">(</span>v<span class="sym">,</span> v<span class="sym">) +</span> radius <span class="sym">*</span> radius<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>disc <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> infinity<span class="sym">;</span>
    <span class="kwb">double</span> d <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span>disc<span class="sym">),</span> t2 <span class="sym">=</span> b <span class="sym">+</span> d<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>t2 <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> infinity<span class="sym">;</span>
    <span class="kwb">double</span> t1 <span class="sym">=</span> b <span class="sym">-</span> d<span class="sym">;</span>
    <span class="kwa">return</span> <span class="sym">(</span>t1 <span class="sym">&gt;</span> <span class="num">0</span> ? t1 <span class="sym">:</span> t2<span class="sym">);</span>
  <span class="sym">}</span>

  <span class="kwb">void</span> <span class="kwd">intersect</span><span class="sym">(</span><span class="kwb">double</span> <span class="sym">&amp;</span>lambda<span class="sym">,</span> Vec <span class="sym">&amp;</span>normal<span class="sym">,</span> <span class="kwb">const</span> Ray <span class="sym">&amp;</span>ray<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span>
    <span class="kwb">double</span> l <span class="sym">=</span> <span class="kwd">ray_sphere</span><span class="sym">(</span>ray<span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;=</span> lambda<span class="sym">)</span> <span class="kwa">return</span><span class="sym">;</span>
    lambda <span class="sym">=</span> l<span class="sym">;</span>
    normal <span class="sym">=</span> <span class="kwd">unitise</span><span class="sym">(</span>ray<span class="sym">.</span>orig <span class="sym">+</span> l <span class="sym">*</span> ray<span class="sym">.</span>dir <span class="sym">-</span> center<span class="sym">);</span>
  <span class="sym">}</span>
<span class="sym">};</span>

<span class="kwb">struct</span> Group <span class="sym">:</span> <span class="kwc">public</span> Scene <span class="sym">{</span> <span class="slc">// Derived class representing a group of scenes</span>
  Sphere bound<span class="sym">;</span>
  vector<span class="sym">&lt;</span>Scene <span class="sym">*&gt;</span> objs<span class="sym">;</span>

  <span class="kwd">Group</span><span class="sym">(</span>Sphere b<span class="sym">) :</span> <span class="kwd">bound</span><span class="sym">(</span>b<span class="sym">),</span> <span class="kwd">objs</span><span class="sym">(</span><span class="num">0</span><span class="sym">) {}</span>
  <span class="kwc">virtual</span> <span class="sym">~</span><span class="kwd">Group</span><span class="sym">() {}</span>

  <span class="kwb">void</span> <span class="kwd">del</span><span class="sym">() {</span>
    <span class="kwa">for</span> <span class="sym">(</span>vector<span class="sym">&lt;</span>Scene <span class="sym">*&gt;::</span>iterator it<span class="sym">=</span>objs<span class="sym">.</span><span class="kwd">begin</span><span class="sym">();</span> it<span class="sym">!=</span>objs<span class="sym">.</span><span class="kwd">end</span><span class="sym">(); ++</span>it<span class="sym">)</span>
      <span class="kwa">delete</span> <span class="sym">*</span>it<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwb">void</span> <span class="kwd">intersect</span><span class="sym">(</span><span class="kwb">double</span> <span class="sym">&amp;</span>lambda<span class="sym">,</span> Vec <span class="sym">&amp;</span>normal<span class="sym">,</span> <span class="kwb">const</span> Ray <span class="sym">&amp;</span>ray<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span>
    <span class="kwb">double</span> l <span class="sym">=</span> bound<span class="sym">.</span><span class="kwd">ray_sphere</span><span class="sym">(</span>ray<span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;=</span> lambda<span class="sym">)</span> <span class="kwa">return</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>vector<span class="sym">&lt;</span>Scene <span class="sym">*&gt;::</span>const_iterator it<span class="sym">=</span>objs<span class="sym">.</span><span class="kwd">begin</span><span class="sym">();</span> it<span class="sym">!=</span>objs<span class="sym">.</span><span class="kwd">end</span><span class="sym">(); ++</span>it<span class="sym">)</span>
      <span class="sym">(*</span>it<span class="sym">)-&gt;</span><span class="kwd">intersect</span><span class="sym">(</span>lambda<span class="sym">,</span> normal<span class="sym">,</span> ray<span class="sym">);</span>
  <span class="sym">}</span>
<span class="sym">};</span>

<span class="kwb">double</span> <span class="kwd">ray_trace</span><span class="sym">(</span>Vec light<span class="sym">,</span> <span class="kwb">const</span> Ray <span class="sym">&amp;</span>ray<span class="sym">,</span> <span class="kwb">const</span> Scene <span class="sym">*</span>scene<span class="sym">) {</span>
  <span class="kwb">double</span> lambda <span class="sym">=</span> infinity<span class="sym">;</span>
  Vec <span class="kwd">normal</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
  scene<span class="sym">-&gt;</span><span class="kwd">intersect</span><span class="sym">(</span>lambda<span class="sym">,</span> normal<span class="sym">,</span> ray<span class="sym">);</span>
  <span class="kwa">if</span> <span class="sym">(</span>lambda <span class="sym">==</span> infinity<span class="sym">)</span> <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
  Vec o <span class="sym">=</span> ray<span class="sym">.</span>orig <span class="sym">+</span> lambda <span class="sym">*</span> ray<span class="sym">.</span>dir <span class="sym">+</span> delta <span class="sym">*</span> normal<span class="sym">;</span>
  <span class="kwb">double</span> g <span class="sym">= -</span><span class="kwd">dot</span><span class="sym">(</span>normal<span class="sym">,</span> light<span class="sym">),</span> l <span class="sym">=</span> infinity<span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span>g <span class="sym">&lt;=</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> <span class="num">0</span><span class="sym">.;</span>
  scene<span class="sym">-&gt;</span><span class="kwd">intersect</span><span class="sym">(</span>l<span class="sym">,</span> normal<span class="sym">,</span> <span class="kwd">Ray</span><span class="sym">(</span>o<span class="sym">,</span> <span class="kwd">Vec</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">) -</span> light<span class="sym">));</span>
  <span class="kwa">return</span> <span class="sym">(</span>l <span class="sym">==</span> infinity ? g <span class="sym">:</span> <span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>

Scene <span class="sym">*</span><span class="kwd">create</span><span class="sym">(</span><span class="kwb">int</span> level<span class="sym">,</span> <span class="kwb">double</span> r<span class="sym">,</span> <span class="kwb">double</span> x<span class="sym">,</span> <span class="kwb">double</span> y<span class="sym">,</span> <span class="kwb">double</span> z<span class="sym">) {</span>
  Sphere <span class="sym">*</span>sphere <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Sphere</span><span class="sym">(</span><span class="kwd">Vec</span><span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> r<span class="sym">);</span>
  <span class="kwa">if</span> <span class="sym">(</span>level <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> sphere<span class="sym">;</span>
  Group group <span class="sym">=</span> <span class="kwd">Group</span><span class="sym">(</span><span class="kwd">Sphere</span><span class="sym">(</span><span class="kwd">Vec</span><span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> <span class="num">3</span><span class="sym">*</span>r<span class="sym">));</span>
  group<span class="sym">.</span>objs<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span>sphere<span class="sym">);</span>
  <span class="kwb">double</span> rn <span class="sym">=</span> <span class="num">3</span><span class="sym">*</span>r<span class="sym">/</span><span class="kwd">sqrt</span><span class="sym">(</span><span class="num">12</span><span class="sym">.);</span>
  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> dz<span class="sym">=-</span><span class="num">1</span><span class="sym">;</span> dz<span class="sym">&lt;=</span><span class="num">1</span><span class="sym">;</span> dz<span class="sym">+=</span><span class="num">2</span><span class="sym">)</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> dx<span class="sym">=-</span><span class="num">1</span><span class="sym">;</span> dx<span class="sym">&lt;=</span><span class="num">1</span><span class="sym">;</span> dx<span class="sym">+=</span><span class="num">2</span><span class="sym">)</span>
      group<span class="sym">.</span>objs<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">create</span><span class="sym">(</span>level<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> r<span class="sym">/</span><span class="num">2</span><span class="sym">,</span> x <span class="sym">-</span> dx<span class="sym">*</span>rn<span class="sym">,</span> y <span class="sym">+</span> rn<span class="sym">,</span> z <span class="sym">-</span> dz<span class="sym">*</span>rn<span class="sym">));</span>
  <span class="kwa">return</span> <span class="sym">(</span><span class="kwa">new</span> <span class="kwd">Group</span><span class="sym">(</span>group<span class="sym">));</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
  <span class="kwb">int</span> level <span class="sym">=</span> <span class="num">6</span><span class="sym">,</span> n <span class="sym">= (</span>argc<span class="sym">==</span><span class="num">2</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">256</span><span class="sym">),</span> ss <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
  Scene <span class="sym">*</span>scene<span class="sym">=</span><span class="kwd">create</span><span class="sym">(</span>level<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">, -</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);</span> <span class="slc">// Build the scene</span>

  cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;P5</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">&lt;&lt;</span> n <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> n <span class="sym">&lt;&lt;</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">255</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> y<span class="sym">=</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> y<span class="sym">&gt;=</span><span class="num">0</span><span class="sym">; --</span>y<span class="sym">)</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> x<span class="sym">&lt;</span>n<span class="sym">; ++</span>x<span class="sym">) {</span>
      <span class="kwb">double</span> g<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> dx<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> dx<span class="sym">&lt;</span>ss<span class="sym">; ++</span>dx<span class="sym">)</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> dy<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> dy<span class="sym">&lt;</span>ss<span class="sym">; ++</span>dy<span class="sym">) {</span>
	  Vec <span class="kwd">d</span><span class="sym">(</span>x<span class="sym">+</span><span class="kwb">double</span><span class="sym">(</span>dx<span class="sym">)/</span>ss<span class="sym">-</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">.,</span> y<span class="sym">+</span><span class="kwb">double</span><span class="sym">(</span>dy<span class="sym">)/</span>ss<span class="sym">-</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">.,</span> n<span class="sym">);</span>
	  g <span class="sym">+=</span> <span class="kwd">ray_trace</span><span class="sym">(</span><span class="kwd">unitise</span><span class="sym">(</span><span class="kwd">Vec</span><span class="sym">(-</span><span class="num">1</span><span class="sym">, -</span><span class="num">3</span><span class="sym">,</span> <span class="num">2</span><span class="sym">)),</span> <span class="kwd">Ray</span><span class="sym">(</span><span class="kwd">Vec</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">, -</span><span class="num">4</span><span class="sym">),</span>
						      <span class="kwd">unitise</span><span class="sym">(</span>d<span class="sym">)),</span> scene<span class="sym">);</span>
	<span class="sym">}</span>
      cout <span class="sym">&lt;&lt;</span> <span class="kwb">char</span><span class="sym">(</span><span class="num">.5</span><span class="sym">+</span><span class="num">255</span><span class="sym">*</span>g<span class="sym">/(</span>ss<span class="sym">*</span>ss<span class="sym">));</span>
    <span class="sym">}</span>

  scene<span class="sym">-&gt;</span><span class="kwd">del</span><span class="sym">();</span> <span class="slc">// Deallocate the scene</span>

  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
