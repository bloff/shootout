<span class="line">    1 </span><span class="slc">;;; -*- mode: lisp -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: matrix-poplisp.code,v 1.3 2004-11-11 07:14:00 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">(</span>proclaim <span class="str">'(optimize (speed 3) (space 0) (compilation-speed 0) (debug 0) (safety 0)))
</span><span class="line">    6 </span><span class="str">
</span><span class="line">    7 </span><span class="str">(defun matmul (a b c n m k)
</span><span class="line">    8 </span><span class="str">  (declare (optimize (speed 3) (safety 0) (debug 0))
</span><span class="line">    9 </span><span class="str">           (type (simple-array (unsigned-byte 32) (*)) a b c)
</span><span class="line">   10 </span><span class="str">           (fixnum n m k))
</span><span class="line">   11 </span><span class="str">  (let ((sum 0)
</span><span class="line">   12 </span><span class="str">        (i1 (- m))
</span><span class="line">   13 </span><span class="str">        (k2 0))
</span><span class="line">   14 </span><span class="str">    (declare (type (unsigned-byte 32) sum) (type fixnum i1 k2))
</span><span class="line">   15 </span><span class="str">    (dotimes (i n c)
</span><span class="line">   16 </span><span class="str">      (declare (fixnum i))
</span><span class="line">   17 </span><span class="str">      (setf i1 (+ i1 m)) ;; i1=i*m
</span><span class="line">   18 </span><span class="str">      (dotimes (j k)
</span><span class="line">   19 </span><span class="str">        (declare (fixnum j))
</span><span class="line">   20 </span><span class="str">        (setf sum 0)
</span><span class="line">   21 </span><span class="str">        (setf k2 (- k))
</span><span class="line">   22 </span><span class="str">        (dotimes (l m)
</span><span class="line">   23 </span><span class="str">          (declare (fixnum l))
</span><span class="line">   24 </span><span class="str">          (setf k2 (+ k2 k)) ;; k2= l*k
</span><span class="line">   25 </span><span class="str">          (setf sum (the (unsigned-byte 32) (+ (the (unsigned-byte 32) sum)
</span><span class="line">   26 </span><span class="str">                                               (the (unsigned-byte 32) (* (aref a (+ i1 l))
</span><span class="line">   27 </span><span class="str">                                                                          (aref b (+ k2 j))))))))
</span><span class="line">   28 </span><span class="str">        (setf (aref c (+ i1 j)) sum)))))
</span><span class="line">   29 </span><span class="str">
</span><span class="line">   30 </span><span class="str">(defun make-matrix (rows cols)
</span><span class="line">   31 </span><span class="str">  (declare (type (unsigned-byte 32) rows cols)
</span><span class="line">   32 </span><span class="str">           (optimize (speed 3) (safety 0))); (hcl:fixnum-safety 0)))
</span><span class="line">   33 </span><span class="str">  (let* ((space (* rows cols))
</span><span class="line">   34 </span><span class="str">         (matrix (make-array space
</span><span class="line">   35 </span><span class="str">                             :element-type '</span><span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">))))
</span><span class="line">   36 </span><span class="sym">    (</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">) (*))</span> matrix<span class="sym">)
</span><span class="line">   37 </span><span class="sym">             (</span>fixnum space<span class="sym">))
</span><span class="line">   38 </span><span class="sym">    (</span>loop <span class="sym">:</span>for i <span class="sym">:</span>of<span class="sym">-</span><span class="kwa">type</span> fixnum <span class="sym">:</span>from <span class="num">0</span> <span class="sym">:</span>below space
<span class="line">   39 </span>          <span class="sym">:</span>do <span class="sym">(</span>setf <span class="sym">(</span>aref matrix i<span class="sym">) (</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))
</span><span class="line">   40 </span><span class="sym"></span>    matrix<span class="sym">))
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> pop11<span class="sym">::</span>poparglist<span class="sym">)</span> <span class="str">&quot;1&quot;</span><span class="sym">))))
</span><span class="line">   43 </span><span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">)
</span><span class="line">   44 </span><span class="sym">         (</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))
</span><span class="line">   45 </span><span class="sym">(</span>let<span class="sym">* ((</span>m1 <span class="sym">(</span>make<span class="sym">-</span>matrix <span class="num">30 30</span><span class="sym">))
</span><span class="line">   46 </span><span class="sym">   (</span>m2 <span class="sym">(</span>make<span class="sym">-</span>matrix <span class="num">30 30</span><span class="sym">))
</span><span class="line">   47 </span><span class="sym">   (</span>m3 <span class="sym">(</span>make<span class="sym">-</span>matrix <span class="num">30 30</span><span class="sym">))
</span><span class="line">   48 </span><span class="sym">   (</span>mm <span class="sym">(</span>make<span class="sym">-</span>array <span class="str">'(30 30) :element-type '</span><span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">) :</span>displaced<span class="sym">-</span>to m3<span class="sym">)))
</span><span class="line">   49 </span><span class="sym">  (</span>loop <span class="kwa">repeat</span> n do <span class="sym">(</span>matmul m1 m2 m3 <span class="num">30 30 30</span><span class="sym">))
</span><span class="line">   50 </span><span class="sym">  (</span>format t <span class="str">&quot;~A ~A ~A ~A~%&quot;</span>
<span class="line">   51 </span>          <span class="sym">(</span>aref mm <span class="num">0 0</span><span class="sym">) (</span>aref mm <span class="num">2 3</span><span class="sym">) (</span>aref mm <span class="num">3 2</span><span class="sym">) (</span>aref mm <span class="num">4 4</span><span class="sym">))))
</span><span class="line">   52 </span><span class="sym"></span>
