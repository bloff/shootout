<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; $Id: matrix-poplisp.code,v 1.5 2005-05-15 05:34:02 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span>
<span class="sym">(</span>proclaim <span class="str">'(optimize (speed 3) (space 0) (compilation-speed 0) (debug 0) (safety 0)))

(defun matmul (a b c n m k)
  (declare (optimize (speed 3) (safety 0) (debug 0))
           (type (simple-array (unsigned-byte 32) (*)) a b c)
           (fixnum n m k))
  (let ((sum 0)
        (i1 (- m))
        (k2 0))
    (declare (type (unsigned-byte 32) sum) (type fixnum i1 k2))
    (dotimes (i n c)
      (declare (fixnum i))
      (setf i1 (+ i1 m)) ;; i1=i*m
      (dotimes (j k)
        (declare (fixnum j))
        (setf sum 0)
        (setf k2 (- k))
        (dotimes (l m)
          (declare (fixnum l))
          (setf k2 (+ k2 k)) ;; k2= l*k
          (setf sum (the (unsigned-byte 32) (+ (the (unsigned-byte 32) sum)
                                               (the (unsigned-byte 32) (* (aref a (+ i1 l))
                                                                          (aref b (+ k2 j))))))))
        (setf (aref c (+ i1 j)) sum)))))

(defun make-matrix (rows cols)
  (declare (type (unsigned-byte 32) rows cols)
           (optimize (speed 3) (safety 0))); (hcl:fixnum-safety 0)))
  (let* ((space (* rows cols))
         (matrix (make-array space
                             :element-type '</span><span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">))))
    (</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">) (*))</span> matrix<span class="sym">)
             (</span>fixnum space<span class="sym">))
    (</span>loop <span class="sym">:</span>for i <span class="sym">:</span>of<span class="sym">-</span><span class="kwa">type</span> fixnum <span class="sym">:</span>from <span class="num">0</span> <span class="sym">:</span>below space
          <span class="sym">:</span>do <span class="sym">(</span>setf <span class="sym">(</span>aref matrix i<span class="sym">) (</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))
</span>    matrix<span class="sym">))

(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> pop11<span class="sym">::</span>poparglist<span class="sym">)</span> <span class="str">&quot;1&quot;</span><span class="sym">))))
(</span>declare <span class="sym">(</span>fixnum n<span class="sym">)
	 (</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))
(</span>let<span class="sym">* ((</span>m1 <span class="sym">(</span>make<span class="sym">-</span>matrix <span class="num">30 30</span><span class="sym">))
   (</span>m2 <span class="sym">(</span>make<span class="sym">-</span>matrix <span class="num">30 30</span><span class="sym">))
   (</span>m3 <span class="sym">(</span>make<span class="sym">-</span>matrix <span class="num">30 30</span><span class="sym">))
   (</span>mm <span class="sym">(</span>make<span class="sym">-</span>array <span class="str">'(30 30) :element-type '</span><span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">) :</span>displaced<span class="sym">-</span>to m3<span class="sym">)))
  (</span>loop <span class="kwa">repeat</span> n do <span class="sym">(</span>matmul m1 m2 m3 <span class="num">30 30 30</span><span class="sym">))
  (</span>format t <span class="str">&quot;~A ~A ~A ~A~%&quot;</span>
	  <span class="sym">(</span>aref mm <span class="num">0 0</span><span class="sym">) (</span>aref mm <span class="num">2 3</span><span class="sym">) (</span>aref mm <span class="num">3 2</span><span class="sym">) (</span>aref mm <span class="num">4 4</span><span class="sym">))))
</span>
