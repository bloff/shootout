<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com"> contributed by Luzius Meisser</span>
<span class="com"> based on a contribution by Keenan Tims</span>
<span class="com"> that was modified by Michael Barker</span>
<span class="com"> */</span>

<span class="kwa">public class</span> chameneos <span class="sym">{</span>

    <span class="kwa">public</span> enum Colour <span class="sym">{</span>
        RED<span class="sym">,</span> BLUE<span class="sym">,</span> YELLOW<span class="sym">,</span> FADED<span class="sym">;</span>

        <span class="kwa">public</span> Colour <span class="kwd">complement</span><span class="sym">(</span>Colour other<span class="sym">) {</span>
            <span class="kwa">if</span> <span class="sym">(</span><span class="kwa">this</span> <span class="sym">==</span> other<span class="sym">) {</span>
                <span class="kwa">return this</span><span class="sym">;</span>
            <span class="sym">}</span> <span class="kwa">else if</span> <span class="sym">(</span><span class="kwa">this</span> <span class="sym">==</span> Colour<span class="sym">.</span>BLUE<span class="sym">) {</span>
                <span class="kwa">return</span> other <span class="sym">==</span> Colour<span class="sym">.</span>RED ? Colour<span class="sym">.</span>YELLOW <span class="sym">:</span> Colour<span class="sym">.</span>RED<span class="sym">;</span>
            <span class="sym">}</span> <span class="kwa">else if</span> <span class="sym">(</span><span class="kwa">this</span> <span class="sym">==</span> Colour<span class="sym">.</span>YELLOW<span class="sym">) {</span>
                <span class="kwa">return</span> other <span class="sym">==</span> Colour<span class="sym">.</span>BLUE ? Colour<span class="sym">.</span>RED <span class="sym">:</span> Colour<span class="sym">.</span>BLUE<span class="sym">;</span>
            <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                <span class="kwa">return</span> other <span class="sym">==</span> Colour<span class="sym">.</span>YELLOW ? Colour<span class="sym">.</span>BLUE <span class="sym">:</span> Colour<span class="sym">.</span>YELLOW<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public class</span> <span class="kwc">Future</span><span class="sym">&lt;</span>T<span class="sym">&gt; {</span>

        <span class="kwa">private volatile</span> T t<span class="sym">;</span>

        <span class="kwa">public</span> T <span class="kwd">getItem</span><span class="sym">() {</span>
            <span class="kwa">while</span> <span class="sym">(</span>t <span class="sym">==</span> null<span class="sym">) {</span>
                <span class="kwc">Thread</span><span class="sym">.</span><span class="kwd">yield</span><span class="sym">();</span>
            <span class="sym">}</span>
            <span class="kwa">return</span> t<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="slc">// no synchronization necessary as assignment is atomic</span>
        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">setItem</span><span class="sym">(</span>T t<span class="sym">) {</span>
            <span class="kwa">this</span><span class="sym">.</span>t <span class="sym">=</span> t<span class="sym">;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">class</span> Creature <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{</span>

        <span class="kwa">private</span> MeetingPlace mp<span class="sym">;</span>
        <span class="kwa">private</span> Colour colour<span class="sym">;</span>
        <span class="kwa">private</span> <span class="kwb">int</span> met<span class="sym">;</span>

        <span class="kwa">public</span> <span class="kwd">Creature</span><span class="sym">(</span>Colour initialColour<span class="sym">,</span> MeetingPlace mp<span class="sym">) {</span>
            <span class="kwa">this</span><span class="sym">.</span>colour <span class="sym">=</span> initialColour<span class="sym">;</span>
            <span class="kwa">this</span><span class="sym">.</span>mp <span class="sym">=</span> mp<span class="sym">;</span>
            <span class="kwa">this</span><span class="sym">.</span>met <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
            <span class="kwa">try</span> <span class="sym">{</span>
                <span class="kwa">while</span> <span class="sym">(</span>true<span class="sym">) {</span>
                    colour <span class="sym">=</span> mp<span class="sym">.</span><span class="kwd">meet</span><span class="sym">(</span>colour<span class="sym">);</span>
                    met<span class="sym">++;</span>
                <span class="sym">}</span>
            <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) {</span>
                colour <span class="sym">=</span> Colour<span class="sym">.</span>FADED<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">getCreaturesMet</span><span class="sym">() {</span>
            <span class="kwa">return</span> met<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> Colour <span class="kwd">getColour</span><span class="sym">() {</span>
            <span class="kwa">return</span> colour<span class="sym">;</span>
        <span class="sym">}</span>

    <span class="sym">}</span>

    <span class="kwa">public class</span> MeetingPlace <span class="sym">{</span>

        <span class="kwa">private</span> <span class="kwb">int</span> meetingsLeft<span class="sym">;</span>
        <span class="kwa">private</span> Colour first <span class="sym">=</span> null<span class="sym">;</span>
        <span class="kwa">private</span> <span class="kwc">Future</span><span class="sym">&lt;</span>Colour<span class="sym">&gt;</span> current<span class="sym">;</span>

        <span class="kwa">public</span> <span class="kwd">MeetingPlace</span><span class="sym">(</span><span class="kwb">int</span> meetings<span class="sym">) {</span>
            <span class="kwa">this</span><span class="sym">.</span>meetingsLeft <span class="sym">=</span> meetings<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">public</span> Colour <span class="kwd">meet</span><span class="sym">(</span>Colour myColor<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">InterruptedException</span> <span class="sym">{</span>
            <span class="kwc">Future</span><span class="sym">&lt;</span>Colour<span class="sym">&gt;</span> newColor<span class="sym">;</span>
            <span class="kwa">synchronized</span> <span class="sym">(</span><span class="kwa">this</span><span class="sym">) {</span>
                <span class="kwa">if</span> <span class="sym">(</span>meetingsLeft <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
                    <span class="kwa">throw new</span> <span class="kwc">InterruptedException</span><span class="sym">();</span>
                <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                    <span class="kwa">if</span> <span class="sym">(</span>first <span class="sym">==</span> null<span class="sym">) {</span>
                        first <span class="sym">=</span> myColor<span class="sym">;</span>
                        current <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Future</span><span class="sym">&lt;</span>Colour<span class="sym">&gt;();</span>
                    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                        current<span class="sym">.</span><span class="kwd">setItem</span><span class="sym">(</span>myColor<span class="sym">.</span><span class="kwd">complement</span><span class="sym">(</span>first<span class="sym">));</span>
                        first <span class="sym">=</span> null<span class="sym">;</span>
                        meetingsLeft<span class="sym">--;</span>
                    <span class="sym">}</span>
                    newColor <span class="sym">=</span> current<span class="sym">;</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
            <span class="kwa">return</span> newColor<span class="sym">.</span><span class="kwd">getItem</span><span class="sym">();</span>
        <span class="sym">}</span>

    <span class="sym">}</span>

    <span class="kwa">public static final</span> Colour<span class="sym">[]</span> COLOURS <span class="sym">= {</span> Colour<span class="sym">.</span>BLUE<span class="sym">,</span> Colour<span class="sym">.</span>RED<span class="sym">,</span> Colour<span class="sym">.</span>YELLOW<span class="sym">,</span> Colour<span class="sym">.</span>BLUE <span class="sym">};</span>

    <span class="kwa">private</span> MeetingPlace mp<span class="sym">;</span>
    <span class="kwa">private</span> Creature<span class="sym">[]</span> creatures<span class="sym">;</span>

    <span class="kwa">public</span> <span class="kwd">chameneos</span><span class="sym">(</span><span class="kwb">int</span> meetings<span class="sym">) {</span>
        <span class="kwa">this</span><span class="sym">.</span>mp <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">MeetingPlace</span><span class="sym">(</span>meetings<span class="sym">);</span>
        <span class="kwa">this</span><span class="sym">.</span>creatures <span class="sym">=</span> <span class="kwa">new</span> Creature<span class="sym">[</span>COLOURS<span class="sym">.</span>length<span class="sym">];</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">()</span> <span class="kwa">throws</span> <span class="kwc">InterruptedException</span> <span class="sym">{</span>
        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> COLOURS<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++) {</span>
            creatures<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">Creature</span><span class="sym">(</span>COLOURS<span class="sym">[</span>i<span class="sym">],</span> mp<span class="sym">);</span>
            creatures<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">start</span><span class="sym">();</span>
        <span class="sym">}</span>

        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> COLOURS<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++) {</span>
            creatures<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">join</span><span class="sym">();</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">printResult</span><span class="sym">() {</span>
        <span class="kwb">int</span> meetings <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> COLOURS<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++) {</span>
            meetings <span class="sym">+=</span> creatures<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">getCreaturesMet</span><span class="sym">();</span>
            <span class="slc">// System.out.println(creatures[i].getCreaturesMet() + &quot;, &quot; +</span>
            <span class="slc">// creatures[i].getColour());</span>
        <span class="sym">}</span>
        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>meetings<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">Exception</span> <span class="sym">{</span>
        <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">) {</span>
            <span class="kwa">throw new</span> <span class="kwc">IllegalArgumentException</span><span class="sym">();</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
<span class="slc">//            long t0 = System.nanoTime();</span>
            chameneos cham <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">chameneos</span><span class="sym">(</span><span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]));</span>
            cham<span class="sym">.</span><span class="kwd">run</span><span class="sym">();</span>
            cham<span class="sym">.</span><span class="kwd">printResult</span><span class="sym">();</span>
<span class="slc">//            long t1 = System.nanoTime();</span>
<span class="slc">//            System.out.println((t1 - t0) / 1000000);</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
