\ $Id<span class="sym">:</span> heapsort<span class="sym">.</span>gforth<span class="sym">,</span>v <span class="num">1.1 2004</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">25 03</span><span class="sym">:</span><span class="num">06</span><span class="sym">:</span><span class="num">29</span> bfulgham Exp $
\ http<span class="sym">:</span><span class="slc">//www.bagley.org/~doug/shootout/</span>
\ from Anton Ertl

<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

<span class="num">139968</span> constant IM
  <span class="num">3877</span> constant IA
 <span class="num">29573</span> constant IC

variable SEED
<span class="num">42</span> SEED <span class="sym">!</span>

<span class="sym">:</span> <span class="kwd">gen_random</span> <span class="sym">(</span> r <span class="sym">--</span> r <span class="sym">)</span>
  IA SEED &#64; <span class="sym">*</span> IC <span class="sym">+</span> IM mod dup SEED <span class="sym">!</span> s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f
  f<span class="sym">* [</span> IM s<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>f <span class="sym">]</span> fliteral f<span class="sym">/ ;</span>

<span class="sym">:</span> heap<span class="sym">-</span><span class="kwd">sort</span> <span class="sym">(</span> ra n <span class="sym">-- )</span>
    swap <span class="sym">{</span> ra <span class="sym">}</span>
    dup <span class="num">2</span><span class="sym">/</span> <span class="num">1</span><span class="sym">+</span> <span class="kwd">begin</span> <span class="sym">(</span> ir l <span class="sym">)</span>
	dup <span class="num">1</span> <span class="sym">&gt;</span> <span class="kwa">if</span>  <span class="sym">(</span> ir l <span class="sym">)</span>
	    <span class="num">1</span><span class="sym">-</span> dup floats ra <span class="sym">+</span> f&#64; <span class="sym">(</span> ir l rra <span class="sym">)</span>
	<span class="kwa">else</span>
	    over floats ra <span class="sym">+</span> dup <span class="sym">&gt;</span>r f&#64; <span class="sym">(</span> ir l rra R<span class="sym">:</span> ra<span class="sym">+</span>ir <span class="sym">)</span>
	    <span class="num">1</span> floats ra <span class="sym">+</span> f&#64; r<span class="sym">&gt;</span> f<span class="sym">! (</span> ir l rra <span class="sym">)</span>
	    swap <span class="num">1</span><span class="sym">-</span> dup <span class="num">1</span> <span class="sym">=</span> <span class="kwa">if</span> <span class="sym">(</span> l ir rra <span class="sym">)</span>
		<span class="num">1</span> floats ra <span class="sym">+</span> f<span class="sym">!</span>
		<span class="num">2</span>drop exit
	    endif
	    swap <span class="kwd">endif</span> <span class="sym">(</span> ir l rra <span class="sym">)</span>
	<span class="sym">{</span> ir l <span class="sym">} (</span> rra <span class="sym">)</span>
	l l <span class="num">2</span><span class="sym">*</span> <span class="kwd">begin</span> <span class="sym">(</span> i j rra <span class="sym">)</span>
	    dup ir <span class="sym">&lt;=</span>
	<span class="kwa">while</span> <span class="sym">(</span> i j rra <span class="sym">)</span>
	    dup ir <span class="sym">&lt;</span> <span class="kwa">if</span>
		dup floats ra <span class="sym">+</span> dup f&#64; <span class="kwb">float</span><span class="sym">+</span> f&#64; f<span class="sym">&lt;</span> <span class="kwa">if</span>
		    <span class="num">1</span><span class="sym">+</span>
		endif
	    endif
	    dup floats ra <span class="sym">+</span> f&#64; fover fover f<span class="sym">&lt;</span> <span class="kwa">if</span> <span class="sym">(</span> i j rra ra<span class="sym">[</span>j<span class="sym">] )</span>
		over floats ra <span class="sym">+</span> f<span class="sym">!</span>
		nip dup <span class="num">2</span><span class="sym">*</span>
	    <span class="kwa">else</span>
		fdrop drop ir <span class="num">1</span><span class="sym">+</span>
	    endif
	repeat
	drop floats ra <span class="sym">+</span> f<span class="sym">!</span>
	ir l
    again <span class="sym">;</span>

<span class="sym">:</span> my<span class="sym">-</span>f<span class="sym">. (</span> r <span class="sym">-- )</span>
    \ prints r <span class="kwa">for</span> <span class="num">0.1</span><span class="sym">&lt;=</span>r<span class="sym">&lt;</span><span class="num">1</span>
    <span class="sym">.</span><span class="str">&quot; 0.&quot;</span> pad <span class="num">10 2</span>dup represent <span class="num">2</span>drop drop type <span class="sym">;</span>

<span class="sym">:</span> <span class="kwd">main</span> <span class="sym">( -- )</span>
    NUM <span class="num">1</span><span class="sym">+</span> floats allocate <span class="kwa">throw</span> <span class="sym">(</span> ra <span class="sym">)</span>
    dup NUM floats bounds ?<span class="kwa">do</span>
	<span class="num">1</span>e gen_random i f<span class="sym">!</span>
	<span class="num">1</span> floats <span class="sym">+</span>loop
    <span class="sym">(</span> ra <span class="sym">)</span> dup NUM heap<span class="sym">-</span>sort
    NUM floats <span class="sym">+</span> f&#64; my<span class="sym">-</span>f<span class="sym">.</span> cr <span class="sym">;</span>

main bye
