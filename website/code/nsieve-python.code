<span class="slc"># nsieve benchmark for The Computer Language Shootout</span>
<span class="slc"># Written by Dima Dorfman, 2004</span>

<span class="kwc">from</span> itertools <span class="kwc">import</span> count<span class="sym">,</span> islice<span class="sym">,</span> izip

<span class="kwb">def</span> <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">):</span>
    a <span class="sym">= [</span><span class="num">1</span><span class="sym">] *</span> m
    n <span class="sym">=</span> <span class="num">0</span>
    <span class="kwb">for</span> i<span class="sym">,</span> x <span class="kwb">in</span> <span class="kwd">izip</span><span class="sym">(</span><span class="kwd">count</span><span class="sym">(</span><span class="num">2</span><span class="sym">),</span> <span class="kwd">islice</span><span class="sym">(</span>a<span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> None<span class="sym">)):</span>
        <span class="kwb">if</span> x<span class="sym">:</span>
            a<span class="sym">[</span>i <span class="sym">+</span> i<span class="sym">::</span>i<span class="sym">] = (</span><span class="num">0</span><span class="sym">,) * (</span>m <span class="sym">//</span> i <span class="sym">-</span> <span class="num">2</span> <span class="sym">+ (</span><span class="kwb">not not</span> m <span class="sym">%</span> i<span class="sym">))</span>
            n <span class="sym">+=</span> <span class="num">1</span>
    <span class="kwb">return</span> n

<span class="kwb">def</span> <span class="kwd">test</span><span class="sym">(</span>n<span class="sym">):</span>
    m <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) *</span> <span class="num">10000</span>
    count <span class="sym">=</span> <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">)</span>
    <span class="kwb">print</span> <span class="str">'Primes up to %8d %8d'</span> <span class="sym">% (</span>m<span class="sym">,</span> count<span class="sym">)</span>

<span class="kwb">def</span> <span class="kwd">main</span><span class="sym">(</span>n<span class="sym">):</span>
    <span class="kwb">if</span> n <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">:</span>
        <span class="kwd">test</span><span class="sym">(</span>n<span class="sym">)</span>
    <span class="kwb">if</span> n <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">:</span>
        <span class="kwd">test</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwb">if</span> n <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">:</span>
        <span class="kwd">test</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">)</span>

<span class="kwb">if</span> __name__ <span class="sym">==</span> <span class="str">'__main__'</span><span class="sym">:</span>
    <span class="kwc">import</span> sys
    <span class="kwd">main</span><span class="sym">(</span><span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]))</span>
