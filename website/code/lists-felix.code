<span class="slc">//</span>
<span class="slc">// Contributed by John Skaller</span>
<span class="slc">//</span>
<span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;</span>
n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);</span>
<span class="slc">// Adapted from C solution</span>

<span class="kwa">header</span> <span class="str">&quot;&quot;&quot;</span>
<span class="str">// a simple Double Linked List</span>
<span class="str">// the head node is special, it's val is length of list</span>
<span class="str">struct DLL {</span>
<span class="str">    int val;</span>
<span class="str">    struct DLL *next;        /* points to next or head (if at tail) */</span>
<span class="str">    struct DLL *prev;        /* points to prev or tail (if at head) */</span>
<span class="str">};</span>
<span class="str">&quot;&quot;&quot;</span><span class="sym">;</span>

<span class="kwa">body</span> <span class="str">&quot;&quot;&quot;</span>
<span class="str">inline int len(DLL *head) { return(head-&gt;val); }</span>
<span class="str">inline int empty(DLL *head) { return(len(head) == 0); }</span>
<span class="str">inline DLL *first(DLL *head) { return(head-&gt;next); }</span>
<span class="str">inline DLL *last(DLL *head) { return(head-&gt;prev); }</span>
<span class="str"></span>
<span class="str">void push_tail(DLL *head, DLL *item) {</span>
<span class="str">    DLL *tail = head-&gt;prev;</span>
<span class="str">    tail-&gt;next = item;</span>
<span class="str">    item-&gt;next = head;</span>
<span class="str">    head-&gt;prev = item;</span>
<span class="str">    item-&gt;prev = tail;</span>
<span class="str">    head-&gt;val++;</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">DLL *pop_tail(DLL *head) {</span>
<span class="str">    DLL *prev, *tail;</span>
<span class="str">    if (empty(head)) return(NULL);</span>
<span class="str">    tail = head-&gt;prev;</span>
<span class="str">    prev = tail-&gt;prev;</span>
<span class="str">    prev-&gt;next = head;</span>
<span class="str">    head-&gt;prev = prev;</span>
<span class="str">    head-&gt;val--;</span>
<span class="str">    return(tail);</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">void push_head(DLL *head, DLL *item) {</span>
<span class="str">    DLL *next = head-&gt;next;</span>
<span class="str">    head-&gt;next = item;</span>
<span class="str">    next-&gt;prev = item;</span>
<span class="str">    item-&gt;next = next;</span>
<span class="str">    item-&gt;prev = head;</span>
<span class="str">    head-&gt;val++;</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">DLL *pop_head(DLL *head) {</span>
<span class="str">    DLL *next;</span>
<span class="str">    if (empty(head)) return(NULL);</span>
<span class="str">    next = head-&gt;next;</span>
<span class="str">    head-&gt;next = next-&gt;next;</span>
<span class="str">    next-&gt;next-&gt;prev = head;</span>
<span class="str">    head-&gt;val--;</span>
<span class="str">    return(next);</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">int list_equal(DLL *x, DLL *y) {</span>
<span class="str">    DLL *xp, *yp;</span>
<span class="str">    // first val's checked will be list lengths</span>
<span class="str">    for (xp=x, yp=y; xp-&gt;next != x; xp=xp-&gt;next, yp=yp-&gt;next) {</span>
<span class="str">        if (xp-&gt;val != yp-&gt;val) return(0);</span>
<span class="str">    }</span>
<span class="str">    if (xp-&gt;val != yp-&gt;val) return(0);</span>
<span class="str">    return(yp-&gt;next == y);</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">DLL *list_new() {</span>
<span class="str">    DLL *l = (DLL *)malloc(sizeof(DLL));</span>
<span class="str">    l-&gt;next = l;</span>
<span class="str">    l-&gt;prev = l;</span>
<span class="str">    l-&gt;val = 0;</span>
<span class="str">    return(l);</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">/* inclusive sequence 'from' &lt;-&gt; 'to' */</span>
<span class="str">DLL *list_sequence(int from, int to) {</span>
<span class="str">    int size, tmp, i, j;</span>
<span class="str">    DLL *l;</span>
<span class="str">    if (from &gt; to) {</span>
<span class="str">        tmp = from; from = to; to = tmp;</span>
<span class="str">    }</span>
<span class="str">    size = to - from + 1;</span>
<span class="str">    l = (DLL *)malloc((size+1) * sizeof(DLL));</span>
<span class="str">    from--;</span>
<span class="str">    for (i=0, j=1; i&lt;size; ++i, ++j) {</span>
<span class="str">        l[i].next = &amp;l[i+1];</span>
<span class="str">        l[j].prev = &amp;l[j-1];</span>
<span class="str">        l[i].val = from++;</span>
<span class="str">    }</span>
<span class="str">    l[0].prev = &amp;l[size];</span>
<span class="str">    l[size].next = &amp;l[0];</span>
<span class="str">    l[size].prev = &amp;l[size-1];</span>
<span class="str">    l[size].val = from;</span>
<span class="str">    l[0].val = size;</span>
<span class="str">    return(l);</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">DLL *copy(DLL *x) {</span>
<span class="str">    int i, j, size = len(x);</span>
<span class="str">    DLL *xp, *l = (DLL *)malloc((size+1) * sizeof(DLL));</span>
<span class="str">    for (i=0, j=1, xp=x; i&lt;size; i++, j++, xp=xp-&gt;next) {</span>
<span class="str">        l[i].next = &amp;l[j];</span>
<span class="str">        l[j].prev = &amp;l[i];</span>
<span class="str">        l[i].val = xp-&gt;val;</span>
<span class="str">    }</span>
<span class="str">    l[0].prev = &amp;l[size];</span>
<span class="str">    l[size].next = &amp;l[0];</span>
<span class="str">    l[size].val = last(x)-&gt;val;</span>
<span class="str">    return(l);</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">void rev (DLL *head) {</span>
<span class="str">    DLL *tmp, *p = head;</span>
<span class="str">    do {</span>
<span class="str">        tmp = p-&gt;next;</span>
<span class="str">        p-&gt;next = p-&gt;prev;</span>
<span class="str">        p-&gt;prev = tmp;</span>
<span class="str">        p = tmp;</span>
<span class="str">    } while (p != head);</span>
<span class="str">}</span>
<span class="str">&quot;&quot;&quot;</span><span class="sym">;</span>

<span class="kwa">type</span> DLL_head <span class="sym">=</span> <span class="str">&quot;DLL*&quot;</span><span class="sym">;</span>
<span class="kwa">type</span> DLL_item <span class="sym">=</span> <span class="str">&quot;DLL*&quot;</span><span class="sym">;</span>

<span class="kwa">fun</span> get<span class="sym">:</span> DLL_item <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="str">&quot;$1-&gt;val&quot;</span><span class="sym">;</span>

<span class="kwa">fun</span> len<span class="sym">:</span> DLL_head <span class="sym">-&gt;</span> <span class="kwb">int</span><span class="sym">;</span>
<span class="kwa">fun</span> empty<span class="sym">:</span> DLL_head <span class="sym">-&gt;</span> <span class="kwb">bool</span><span class="sym">;</span>

<span class="kwa">fun</span> non_empty<span class="sym">(</span>x<span class="sym">:</span>DLL_head<span class="sym">)=&gt;</span> <span class="kwa">not</span> <span class="sym">(</span>empty x<span class="sym">);</span>

<span class="kwa">fun</span> first<span class="sym">:</span> DLL_head <span class="sym">-&gt;</span> DLL_item<span class="sym">;</span>
<span class="kwa">fun</span> last<span class="sym">:</span> DLL_head <span class="sym">-&gt;</span> DLL_item<span class="sym">;</span>

<span class="kwa">proc</span> push_tail<span class="sym">:</span> DLL_head <span class="sym">*</span> DLL_item<span class="sym">;</span>
<span class="kwa">fun</span> pop_tail<span class="sym">:</span> DLL_head <span class="sym">-&gt;</span> DLL_item<span class="sym">;</span>
<span class="kwa">proc</span> push_head<span class="sym">:</span> DLL_head <span class="sym">*</span> DLL_item<span class="sym">;</span>

<span class="kwa">fun</span> pop_head<span class="sym">:</span> DLL_head <span class="sym">-&gt;</span> DLL_item<span class="sym">;</span>
<span class="kwa">fun</span> eq<span class="sym">:</span> DLL_head <span class="sym">*</span> DLL_head <span class="sym">-&gt;</span> <span class="kwb">bool</span> <span class="sym">=</span> <span class="str">&quot;list_equal($1,$2)&quot;</span><span class="sym">;</span>
<span class="kwa">fun</span> ne <span class="sym">(</span>x<span class="sym">:</span>DLL_head<span class="sym">,</span>y<span class="sym">:</span>DLL_head<span class="sym">) =&gt;</span> <span class="kwa">not</span> <span class="sym">(</span>x <span class="sym">==</span> y<span class="sym">);</span>

<span class="kwa">fun</span> list_new<span class="sym">:</span> <span class="kwb">unit</span> <span class="sym">-&gt;</span> DLL_head<span class="sym">;</span>

<span class="com">/* inclusive sequence 'from' &lt;-&gt; 'to' */</span>
<span class="kwa">fun</span> list_sequence<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> DLL_head<span class="sym">;</span>
<span class="kwa">fun</span> copy<span class="sym">:</span> DLL_head <span class="sym">-&gt;</span> DLL_head<span class="sym">;</span>

<span class="kwa">proc</span> rev<span class="sym">:</span> DLL_head<span class="sym">;</span>
<span class="kwa">proc</span> free<span class="sym">:</span> DLL_head <span class="sym">=</span> <span class="str">&quot;std::free($1);&quot;</span><span class="sym">;</span>

<span class="kwa">proc</span> check<span class="sym">(</span>cond<span class="sym">:</span><span class="kwb">bool</span><span class="sym">) (</span>msg<span class="sym">:</span><span class="kwb">string</span><span class="sym">) {</span>
  <span class="kwa">open</span> System<span class="sym">;</span>
  <span class="kwa">open</span> Text_file<span class="sym">;</span>
  <span class="kwa">if</span> cond <span class="kwa">goto</span> endoff<span class="sym">;</span>
  writeln <span class="sym">(</span>stderr<span class="sym">,</span>msg<span class="sym">);</span>
  exit <span class="num">1</span><span class="sym">;</span>
endoff<span class="sym">:&gt;</span>
<span class="sym">}</span>

SIZE<span class="sym">:=</span><span class="num">10000</span><span class="sym">;</span>


<span class="kwa">var</span> result<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span>
<span class="kwa">proc</span> test_lists<span class="sym">() {</span>
    <span class="kwa">var</span> li1 <span class="sym">=</span> list_sequence<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SIZE<span class="sym">);</span>
    <span class="kwa">var</span> li2 <span class="sym">=</span> copy<span class="sym">(</span>li1<span class="sym">);</span>
    <span class="kwa">var</span> x <span class="sym">:</span> DLL_item<span class="sym">;</span>
    check <span class="sym">(</span>li2 <span class="sym">==</span> li1<span class="sym">)</span> <span class="str">&quot;li2 and li1 are not equal&quot;</span><span class="sym">;</span>

    <span class="slc">// remove each individual item from left side of li2 and</span>
    <span class="slc">// append to right side of li3 (preserving order)</span>
    <span class="kwa">var</span> li3 <span class="sym">=</span> list_new<span class="sym">();</span>
    whilst non_empty li2 do
        x <span class="sym">=</span> pop_head li2<span class="sym">;</span>
        push_tail<span class="sym">(</span>li3<span class="sym">,</span> x<span class="sym">);</span>
    done<span class="sym">;</span>

    check <span class="sym">(</span>empty li2<span class="sym">)</span> <span class="str">&quot;li2 should be empty now&quot;</span><span class="sym">;</span>

    <span class="slc">// remove each individual item from right side of li3 and</span>
    <span class="slc">// append to right side of li2 (reversing list)</span>
    whilst non_empty li3 do
        x <span class="sym">=</span> pop_tail li3<span class="sym">;</span>
        push_tail<span class="sym">(</span>li2<span class="sym">,</span> x<span class="sym">);</span>
    done<span class="sym">;</span>

    check <span class="sym">(</span>empty li3<span class="sym">)</span> <span class="str">&quot;li3 should be empty now&quot;</span><span class="sym">;</span>

    <span class="slc">// reverse li1 in place</span>
    rev li1<span class="sym">;</span>

    check <span class="sym">(</span>get <span class="sym">(</span>first li1<span class="sym">) ==</span> SIZE<span class="sym">)</span> <span class="str">&quot;li1 first value wrong&quot;</span><span class="sym">;</span>
    check <span class="sym">(</span>get <span class="sym">(</span>last li1<span class="sym">) ==</span> <span class="num">1</span><span class="sym">)</span> <span class="str">&quot;last value wrong&quot;</span><span class="sym">;</span>

    check <span class="sym">(</span>get <span class="sym">(</span>first li2<span class="sym">) ==</span> SIZE<span class="sym">)</span> <span class="str">&quot;li2 first value wrong&quot;</span><span class="sym">;</span>
    check <span class="sym">(</span>get <span class="sym">(</span>last li2<span class="sym">) ==</span> <span class="num">1</span><span class="sym">)</span> <span class="str">&quot;li2 last value wrong&quot;</span><span class="sym">;</span>
    check <span class="sym">(</span>len li1 <span class="sym">==</span> SIZE<span class="sym">)</span> <span class="str">&quot;li1 size wrong&quot;</span><span class="sym">;</span>

    <span class="slc">// compare li1 and li2 for equality</span>
    check <span class="sym">(</span>li1 <span class="sym">==</span> li2<span class="sym">)</span> <span class="str">&quot;li1 and li2 are not equal&quot;</span><span class="sym">;</span>

    result <span class="sym">=</span> len li1<span class="sym">;</span>
    free li1<span class="sym">;</span>
    free li2<span class="sym">;</span>
    free li3<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;</span>
until i <span class="sym">==</span> <span class="num">0</span> do test_lists<span class="sym">; --</span>i<span class="sym">;</span> done<span class="sym">;</span>
<span class="kwa">print</span> result<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;</span>

