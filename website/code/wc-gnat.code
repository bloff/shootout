<span class="slc">-- $Id: wc-gnat.code,v 1.8 2005-03-19 07:50:34 bfulgham Exp $
</span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="slc">-- Ada 95 code by C.C.
</span>
<span class="slc">-- Annotated Ada Reference Manual ISO/IEC 8652:1995: http://www.ada-auth.org/
</span>
<span class="kwa">with</span> Interfaces.C<span class="sym">,</span> System<span class="sym">,</span> Ada.Strings.Fixed<span class="sym">,</span> Ada.Text_IO<span class="sym">;

</span><span class="kwa">procedure</span> Wc <span class="kwa">is
   package</span> IC <span class="kwa">renames</span> Interfaces.C<span class="sym">;
</span>   <span class="kwa">function</span> L_Trim <span class="sym">(</span>Source <span class="sym">:</span> <span class="kwb">String</span><span class="sym">;</span> Side <span class="sym">:</span> Ada.Strings.Trim_End <span class="sym">:=
</span>               Ada.Strings.Left<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">String</span> <span class="kwa">renames</span> Ada.Strings.Fixed.Trim<span class="sym">;

</span>   <span class="kwa">package</span> Io <span class="kwa">is
      type</span> File_Descriptor <span class="kwa">is new</span> IC.int<span class="sym">;</span>       <span class="slc">--  STDIN=0, STDOUT=1, STDERR=2
</span>      <span class="kwa">type</span> Setmode_Flag <span class="kwa">is new</span> IC.int<span class="sym">;
</span>      STDIN       <span class="sym">:</span> <span class="kwa">constant</span> File_Descriptor <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      O_BINARY    <span class="sym">:</span> <span class="kwa">constant</span> Setmode_Flag <span class="sym">:=</span> <span class="num">16</span>#<span class="num">8000</span>#<span class="sym">;

</span>      <span class="kwa">function</span> C_Setmode <span class="sym">(
</span>               FD       <span class="sym">:</span> File_Descriptor<span class="sym">;
</span>               Mode     <span class="sym">:</span> Setmode_Flag<span class="sym">)
</span>            <span class="kwa">return</span> IC.int<span class="sym">;

</span>      <span class="kwa">function</span> C_Sysread <span class="sym">(
</span>               FD       <span class="sym">:</span> File_Descriptor<span class="sym">;
</span>               Buf      <span class="sym">:</span> System.Address<span class="sym">;
</span>               NByte    <span class="sym">:</span> IC.int<span class="sym">)
</span>            <span class="kwa">return</span> IC.int<span class="sym">;
</span><span class="slc">--   private
</span><span class="slc">--      pragma Import (C, C_Setmode, &quot;_setmode&quot;);          --  Microsoft Windows
</span><span class="slc">--      pragma Import (C, C_Sysread, &quot;_read&quot;);
</span>   <span class="kwa">end</span> Io<span class="sym">;

</span>   Buffer      <span class="sym">:</span> <span class="kwb">String</span> <span class="sym">(</span><span class="num">1</span> .. <span class="num">4</span> <span class="sym">*</span> <span class="num">1024</span><span class="sym">);
</span>   NL<span class="sym">,</span> NW<span class="sym">,</span> NC  <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>   Inside_Word <span class="sym">:</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> False<span class="sym">;
</span>   C           <span class="sym">:</span> <span class="kwb">Character</span><span class="sym">;
</span>   Last<span class="sym">,</span> R     <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="kwa">begin
</span>   R <span class="sym">:=</span> <span class="kwb">Integer</span> <span class="sym">(</span>Io.C_Setmode <span class="sym">(</span>Io.STDIN<span class="sym">,</span> Io.O_BINARY<span class="sym">));</span>  <span class="slc">--  Read CR,LF right
</span>   <span class="kwa">loop
</span>      Last <span class="sym">:=</span> <span class="kwb">Integer</span> <span class="sym">(</span>Io.C_Sysread <span class="sym">(</span>FD <span class="sym">=&gt;</span> Io.STDIN<span class="sym">,
</span>                  Buf <span class="sym">=&gt;</span> Buffer <span class="sym">(</span><span class="num">1</span><span class="sym">)'</span>Address<span class="sym">,</span> NByte <span class="sym">=&gt;</span> Buffer<span class="sym">'</span>Length<span class="sym">));
</span>      <span class="kwa">exit when</span> Last <span class="sym">&lt;=</span> <span class="num">0</span><span class="sym">;
</span>      NC <span class="sym">:=</span> NC <span class="sym">+</span> Last<span class="sym">;
</span>      <span class="kwa">for</span> K <span class="kwa">in</span> Buffer<span class="sym">'</span>First .. Last <span class="kwa">loop
</span>         C <span class="sym">:=</span> Buffer <span class="sym">(</span>K<span class="sym">);
</span>         <span class="kwa">if</span> C <span class="sym">=</span> ASCII.LF <span class="kwa">then
</span>            NL <span class="sym">:=</span> NL <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">if</span> C <span class="sym">= ' '</span> <span class="kwa">or</span> C <span class="sym">=</span> ASCII.CR <span class="kwa">or</span> C <span class="sym">=</span> ASCII.LF <span class="kwa">or</span> C <span class="sym">=</span> ASCII.HT <span class="kwa">then
</span>            Inside_Word <span class="sym">:=</span> False<span class="sym">;
</span>         <span class="kwa">elsif not</span> Inside_Word <span class="kwa">then
</span>            Inside_Word <span class="sym">:=</span> True<span class="sym">;
</span>            NW <span class="sym">:=</span> NW <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   Ada.Text_IO.Put_Line <span class="sym">(</span>L_Trim <span class="sym">(</span><span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>NL<span class="sym">)) &amp;</span> <span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>NW<span class="sym">) &amp;
</span>            <span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>NC<span class="sym">));
</span><span class="kwa">end</span> Wc<span class="sym">;
</span>   <span class="slc">--  The &quot;Ada.Streams.Stream_IO.Read (File, Item, Last)&quot; procedure can't
</span>   <span class="slc">--  read from STDIN: can't associate Standard Input with File parameter.
</span>   <span class="slc">--  GNAT's Interfaces.C_Streams.fread function isn't from ISO/IEC 8652:1995.</span>
