<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Unoptimised reference implementation</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;</span>

<span class="kwa">class</span> health
<span class="sym">{</span>
   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">) {</span>
      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">100</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

      HealthcareRegion healthcareSystem <span class="sym">=</span> HealthcareRegion<span class="sym">.</span><span class="kwd">Create</span><span class="sym">();</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span>
         healthcareSystem<span class="sym">.</span><span class="kwd">TransferPatients</span><span class="sym">();</span>

      Totals t <span class="sym">=</span> healthcareSystem<span class="sym">.</span><span class="kwd">AccumulateTotals</span><span class="sym">();</span>

      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;Patients: {0}&quot;</span><span class="sym">,</span> t<span class="sym">.</span>patients <span class="sym">);</span>
      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;Time:     {0}&quot;</span><span class="sym">,</span> t<span class="sym">.</span>hospitalTime <span class="sym">);</span>
      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;Visits:   {0}&quot;</span><span class="sym">,</span> t<span class="sym">.</span>hospitalVisits <span class="sym">);</span>

      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">Treatment Queue - Remaining Treatment Time&quot;</span><span class="sym">);</span>
      <span class="kwa">foreach</span> <span class="sym">(</span>Patient p in healthcareSystem<span class="sym">.</span><span class="kwd">TreatmentQueue</span><span class="sym">()){</span>
         Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0}</span><span class="esc">\t</span><span class="str">anonymous patient&quot;</span><span class="sym">,</span> p<span class="sym">.</span>remainingTime <span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">class</span> HealthcareRegion
<span class="sym">{</span>
   <span class="kwa">private</span> <span class="kwb">const int</span> LEVELS <span class="sym">=</span> <span class="num">5</span><span class="sym">;</span>
   <span class="kwa">private</span> <span class="kwb">const int</span> DISTRICTS <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>

   <span class="kwa">private</span> HealthcareRegion<span class="sym">[]</span> districts<span class="sym">;</span>
   <span class="kwa">private</span> Hospital localHospital<span class="sym">;</span>


   <span class="kwa">static public</span> HealthcareRegion <span class="kwd">Create</span><span class="sym">() {</span>
      <span class="kwa">return</span> HealthcareRegion<span class="sym">.</span><span class="kwd">Create</span><span class="sym">(</span>LEVELS<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">42</span><span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwa">static</span> HealthcareRegion <span class="kwd">Create</span><span class="sym">(</span><span class="kwb">int</span> level<span class="sym">,</span> <span class="kwb">int</span> seed1<span class="sym">,</span> <span class="kwb">int</span> seed2<span class="sym">) {</span>
      HealthcareRegion r <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>

      <span class="kwa">if</span> <span class="sym">(</span>level <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
         r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">HealthcareRegion</span><span class="sym">(</span>level<span class="sym">,</span> seed1<span class="sym">*</span>seed2<span class="sym">);</span>

         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> r<span class="sym">.</span>districts<span class="sym">.</span>Length<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span>
            r<span class="sym">.</span>districts<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">Create</span><span class="sym">(</span>level<span class="sym">-</span><span class="num">1</span><span class="sym">, (</span>seed1<span class="sym">*</span><span class="num">4</span><span class="sym">)+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> seed2<span class="sym">);</span>
      <span class="sym">}</span>
      <span class="kwa">return</span> r<span class="sym">;</span>
   <span class="sym">}</span>


   <span class="kwa">public</span> <span class="kwd">HealthcareRegion</span><span class="sym">(</span><span class="kwb">int</span> level<span class="sym">,</span> <span class="kwb">int</span> s<span class="sym">) {</span>
      districts <span class="sym">=</span> <span class="kwa">new</span> HealthcareRegion<span class="sym">[</span>DISTRICTS<span class="sym">];</span>
      localHospital <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Hospital</span><span class="sym">(</span>level<span class="sym">==</span>LEVELS<span class="sym">,</span> level<span class="sym">,</span> s<span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwa">internal</span> SimpleList <span class="kwd">TransferPatients</span><span class="sym">() {</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> districts<span class="sym">.</span>Length<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span>
         <span class="kwa">if</span> <span class="sym">(</span>districts<span class="sym">[</span>i<span class="sym">] !=</span> <span class="kwa">null</span><span class="sym">)</span>
            <span class="kwa">foreach</span> <span class="sym">(</span>Patient p in districts<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">TransferPatients</span><span class="sym">())</span>
               localHospital<span class="sym">.</span><span class="kwd">NewArrival</span><span class="sym">(</span>p<span class="sym">);</span>

      localHospital<span class="sym">.</span><span class="kwd">TriageExaminationTreatment</span><span class="sym">();</span>

      <span class="kwa">return</span> localHospital<span class="sym">.</span><span class="kwd">RegionalTransferPatients</span><span class="sym">();</span>
   <span class="sym">}</span>


   <span class="kwa">internal</span> Totals <span class="kwd">AccumulateTotals</span><span class="sym">() {</span>
      Totals t <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Totals</span><span class="sym">();</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> districts<span class="sym">.</span>Length<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span>
         <span class="kwa">if</span> <span class="sym">(</span>districts<span class="sym">[</span>i<span class="sym">] !=</span> <span class="kwa">null</span><span class="sym">)</span>
            t <span class="sym">+=</span> districts<span class="sym">[</span>i<span class="sym">].</span><span class="kwd">AccumulateTotals</span><span class="sym">();</span>

      localHospital<span class="sym">.</span><span class="kwd">AccumulateTotals</span><span class="sym">(</span>ref t<span class="sym">);</span>
      <span class="kwa">return</span> t<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">internal</span> SimpleList <span class="kwd">TreatmentQueue</span><span class="sym">() {</span>
      <span class="kwa">return</span> localHospital<span class="sym">.</span><span class="kwd">TreatmentQueue</span><span class="sym">();</span>
   <span class="sym">}</span>
<span class="sym">}</span>



<span class="kwa">class</span> Hospital
<span class="sym">{</span>
   <span class="kwa">private</span> SimpleList triage <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">SimpleList</span><span class="sym">();</span>
   <span class="kwa">private</span> SimpleList examination <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">SimpleList</span><span class="sym">();</span>
   <span class="kwa">private</span> SimpleList treatment <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">SimpleList</span><span class="sym">();</span>
   <span class="kwa">private</span> Totals discharged <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Totals</span><span class="sym">();</span>

   <span class="kwa">private</span> <span class="kwb">int</span> availableStaff<span class="sym">;</span>
   <span class="kwa">private</span> <span class="kwb">int</span> seed<span class="sym">;</span>
   <span class="kwa">private</span> <span class="kwb">bool</span> hasNoRegionalHospital<span class="sym">;</span>
   <span class="kwa">private</span> SimpleList transfers <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">SimpleList</span><span class="sym">();</span>


   <span class="kwa">public</span> <span class="kwd">Hospital</span><span class="sym">(</span><span class="kwb">bool</span> hasNoRegionalHospital<span class="sym">,</span> <span class="kwb">int</span> level<span class="sym">,</span> <span class="kwb">int</span> seed<span class="sym">) {</span>
      <span class="kwa">this</span><span class="sym">.</span>hasNoRegionalHospital <span class="sym">=</span> hasNoRegionalHospital<span class="sym">;</span>
      availableStaff <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>level <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
      <span class="kwa">this</span><span class="sym">.</span>seed <span class="sym">=</span> seed<span class="sym">;</span>
   <span class="sym">}</span>


   <span class="kwa">internal</span> <span class="kwb">void</span> <span class="kwd">TriageExaminationTreatment</span><span class="sym">() {</span>
      <span class="kwd">DischargePatients</span><span class="sym">();</span>
      <span class="kwd">TreatOrTransferPatients</span><span class="sym">();</span>
      <span class="kwd">TriagePatients</span><span class="sym">();</span>

      <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">Random</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">) &gt;</span> <span class="num">0.7</span><span class="sym">)</span> <span class="kwd">NewArrival</span><span class="sym">(</span> <span class="kwa">new</span> <span class="kwd">Patient</span><span class="sym">() );</span>
   <span class="sym">}</span>


   <span class="kwa">internal</span> SimpleList <span class="kwd">RegionalTransferPatients</span><span class="sym">() {</span>
      <span class="kwa">return</span> transfers<span class="sym">;</span>
   <span class="sym">}</span>


   <span class="kwa">internal</span> <span class="kwb">void</span> <span class="kwd">AccumulateTotals</span><span class="sym">(</span>ref Totals  t<span class="sym">) {</span>
      <span class="kwa">foreach</span> <span class="sym">(</span>Patient p in triage<span class="sym">)</span> t<span class="sym">.</span><span class="kwd">Plus</span><span class="sym">(</span>p<span class="sym">);</span>
      <span class="kwa">foreach</span> <span class="sym">(</span>Patient p in examination<span class="sym">)</span> t<span class="sym">.</span><span class="kwd">Plus</span><span class="sym">(</span>p<span class="sym">);</span>
      <span class="kwa">foreach</span> <span class="sym">(</span>Patient p in treatment<span class="sym">)</span> t<span class="sym">.</span><span class="kwd">Plus</span><span class="sym">(</span>p<span class="sym">);</span>
      t <span class="sym">+=</span> discharged<span class="sym">;</span>
   <span class="sym">}</span>


   <span class="kwa">internal</span> <span class="kwb">void</span> <span class="kwd">NewArrival</span><span class="sym">(</span>Patient p<span class="sym">) {</span>
      p<span class="sym">.</span>hospitalVisits<span class="sym">++;</span>
      <span class="kwa">if</span> <span class="sym">(</span>availableStaff <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
         availableStaff<span class="sym">--;</span>
         examination<span class="sym">.</span><span class="kwd">Add</span><span class="sym">(</span>p<span class="sym">);</span>
         p<span class="sym">.</span>remainingTime <span class="sym">=</span> <span class="num">3</span><span class="sym">;</span>
         p<span class="sym">.</span>hospitalTime <span class="sym">+=</span> <span class="num">3</span><span class="sym">;</span>
      <span class="sym">}</span>
      <span class="kwa">else</span> <span class="sym">{</span>
         triage<span class="sym">.</span><span class="kwd">Add</span><span class="sym">(</span>p<span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwb">void</span> <span class="kwd">DischargePatients</span><span class="sym">() {</span>
      <span class="kwa">foreach</span> <span class="sym">(</span>Patient p in treatment<span class="sym">){</span>
         p<span class="sym">.</span>remainingTime <span class="sym">-=</span> <span class="num">1</span><span class="sym">;</span>

         <span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">.</span>remainingTime <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
            availableStaff<span class="sym">++;</span>
            treatment<span class="sym">.</span><span class="kwd">Remove</span><span class="sym">(</span>p<span class="sym">);</span>

            discharged<span class="sym">.</span><span class="kwd">Plus</span><span class="sym">(</span>p<span class="sym">);</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwb">void</span> <span class="kwd">TreatOrTransferPatients</span><span class="sym">() {</span>
      transfers<span class="sym">.</span><span class="kwd">Clear</span><span class="sym">();</span>

      <span class="kwa">foreach</span> <span class="sym">(</span>Patient p in examination<span class="sym">){</span>
         p<span class="sym">.</span>remainingTime <span class="sym">-=</span> <span class="num">1</span><span class="sym">;</span>

         <span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">.</span>remainingTime <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
            <span class="slc">// no transfer</span>
            <span class="kwa">if</span> <span class="sym">((</span><span class="kwd">Random</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">) &gt;</span> <span class="num">0.1</span><span class="sym">) ||</span> hasNoRegionalHospital<span class="sym">) {</span>
               examination<span class="sym">.</span><span class="kwd">Remove</span><span class="sym">(</span>p<span class="sym">);</span>
               treatment<span class="sym">.</span><span class="kwd">Add</span><span class="sym">(</span>p<span class="sym">);</span>
               p<span class="sym">.</span>remainingTime <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
               p<span class="sym">.</span>hospitalTime <span class="sym">+=</span> <span class="num">10</span><span class="sym">;</span>
            <span class="sym">}</span>
            <span class="slc">// transfer</span>
            <span class="kwa">else</span> <span class="sym">{</span>
               availableStaff<span class="sym">++;</span>
               examination<span class="sym">.</span><span class="kwd">Remove</span><span class="sym">(</span>p<span class="sym">);</span>
               transfers<span class="sym">.</span><span class="kwd">Add</span><span class="sym">(</span>p<span class="sym">);</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwb">void</span> <span class="kwd">TriagePatients</span><span class="sym">() {</span>
      <span class="kwa">foreach</span> <span class="sym">(</span>Patient p in triage<span class="sym">){</span>
         <span class="kwa">if</span> <span class="sym">(</span>availableStaff <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
            availableStaff<span class="sym">--;</span>
            p<span class="sym">.</span>remainingTime <span class="sym">=</span> <span class="num">3</span><span class="sym">;</span>
            p<span class="sym">.</span>hospitalTime <span class="sym">+=</span> <span class="num">3</span><span class="sym">;</span>
            triage<span class="sym">.</span><span class="kwd">Remove</span><span class="sym">(</span>p<span class="sym">);</span>
            examination<span class="sym">.</span><span class="kwd">Add</span><span class="sym">(</span>p<span class="sym">);</span>
         <span class="sym">}</span>
         <span class="kwa">else</span> <span class="sym">{</span>
            p<span class="sym">.</span>hospitalTime<span class="sym">++;</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwa">internal</span> SimpleList <span class="kwd">TreatmentQueue</span><span class="sym">() {</span>
      <span class="kwa">return</span> treatment<span class="sym">;</span>
   <span class="sym">}</span>


   <span class="slc">// Normally we'd use a Poisson distribution, but this will do.</span>
   <span class="slc">// The usual pseudo-random number generator</span>

   <span class="kwa">private</span> <span class="kwb">const int</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>
   <span class="kwa">private</span> <span class="kwb">const int</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span>
   <span class="kwa">private</span> <span class="kwb">const int</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>

   <span class="kwa">private</span> <span class="kwb">double</span> <span class="kwd">Random</span><span class="sym">(</span><span class="kwb">double</span> max<span class="sym">) {</span>
      seed <span class="sym">= (</span>seed <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;</span>
      <span class="kwa">return</span><span class="sym">(</span> max <span class="sym">*</span> seed <span class="sym">/</span> IM <span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">class</span> Patient
<span class="sym">{</span>
   <span class="kwa">internal</span> <span class="kwb">int</span> remainingTime<span class="sym">;</span>
   <span class="kwa">internal</span> <span class="kwb">int</span> hospitalTime<span class="sym">;</span>
   <span class="kwa">internal</span> <span class="kwb">int</span> hospitalVisits<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">struct</span> Totals
<span class="sym">{</span>
   <span class="kwa">internal</span> <span class="kwb">long</span> patients<span class="sym">;</span>
   <span class="kwa">internal</span> <span class="kwb">long</span> hospitalTime<span class="sym">;</span>
   <span class="kwa">internal</span> <span class="kwb">long</span> hospitalVisits<span class="sym">;</span>

   <span class="kwa">internal</span> <span class="kwb">void</span> <span class="kwd">Plus</span><span class="sym">(</span>Patient p<span class="sym">){</span>
      patients<span class="sym">++;</span>
      hospitalTime <span class="sym">+=</span> p<span class="sym">.</span>hospitalTime<span class="sym">;</span>
      hospitalVisits <span class="sym">+=</span> p<span class="sym">.</span>hospitalVisits<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">public static</span> Totals <span class="kwa">operator</span> <span class="sym">+(</span>Totals a<span class="sym">,</span> Totals b<span class="sym">){</span>
      Totals answer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Totals</span><span class="sym">();</span>
      answer<span class="sym">.</span>patients <span class="sym">=</span> a<span class="sym">.</span>patients <span class="sym">+</span> b<span class="sym">.</span>patients<span class="sym">;</span>
      answer<span class="sym">.</span>hospitalTime <span class="sym">=</span> a<span class="sym">.</span>hospitalTime <span class="sym">+</span> b<span class="sym">.</span>hospitalTime<span class="sym">;</span>
      answer<span class="sym">.</span>hospitalVisits <span class="sym">=</span> a<span class="sym">.</span>hospitalVisits <span class="sym">+</span> b<span class="sym">.</span>hospitalVisits<span class="sym">;</span>
      <span class="kwa">return</span> answer<span class="sym">;</span>
   <span class="sym">}</span>

<span class="sym">}</span>


<span class="kwa">class</span> SimpleList
<span class="sym">{</span>
   <span class="kwa">private</span> SimpleNode first<span class="sym">,</span> last<span class="sym">;</span>

   <span class="kwa">internal</span> <span class="kwb">void</span> <span class="kwd">Add</span><span class="sym">(</span><span class="kwb">object</span> o<span class="sym">){</span>
      SimpleNode a <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">SimpleNode</span><span class="sym">();</span>
      a<span class="sym">.</span>item <span class="sym">=</span> o<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>first<span class="sym">==</span><span class="kwa">null</span><span class="sym">){</span> first <span class="sym">=</span> a<span class="sym">; }</span>
      <span class="kwa">else</span> <span class="sym">{</span> last<span class="sym">.</span>next <span class="sym">=</span> a<span class="sym">; }</span>
      last <span class="sym">=</span> a<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">internal</span> <span class="kwb">void</span> <span class="kwd">Remove</span><span class="sym">(</span><span class="kwb">object</span> o<span class="sym">){</span>
      <span class="kwa">if</span> <span class="sym">(</span>first<span class="sym">!=</span><span class="kwa">null</span><span class="sym">)</span>
      <span class="sym">{</span>
         SimpleNode t <span class="sym">=</span> first<span class="sym">.</span>next<span class="sym">;</span>
         <span class="kwa">if</span> <span class="sym">(</span>first<span class="sym">.</span>item<span class="sym">==</span>o<span class="sym">)</span>
         <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>last<span class="sym">==</span>first<span class="sym">){</span> last <span class="sym">=</span> <span class="kwa">null</span><span class="sym">; }</span>
            first<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
            first <span class="sym">=</span> t<span class="sym">;</span>
         <span class="sym">}</span>
         <span class="kwa">else</span>
         <span class="sym">{</span>
            SimpleNode p <span class="sym">=</span> first<span class="sym">;</span>
            <span class="kwa">while</span> <span class="sym">(</span>t<span class="sym">!=</span><span class="kwa">null</span> <span class="sym">&amp;&amp;</span> t<span class="sym">.</span>item<span class="sym">!=</span>o<span class="sym">){</span> p <span class="sym">=</span> t<span class="sym">;</span> t <span class="sym">=</span> t<span class="sym">.</span>next<span class="sym">; }</span>
            <span class="kwa">if</span> <span class="sym">(</span>t<span class="sym">!=</span><span class="kwa">null</span> <span class="sym">&amp;&amp;</span> t<span class="sym">.</span>item<span class="sym">==</span>o<span class="sym">)</span>
            <span class="sym">{</span>
               p<span class="sym">.</span>next <span class="sym">=</span> t<span class="sym">.</span>next<span class="sym">;</span>
               t<span class="sym">.</span>next <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
               <span class="kwa">if</span> <span class="sym">(</span>last<span class="sym">==</span>t<span class="sym">){</span> last <span class="sym">=</span> p<span class="sym">; }</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">internal</span> <span class="kwb">void</span> <span class="kwd">Clear</span><span class="sym">(){</span>
      first <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
      last <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> Enumerator <span class="kwd">GetEnumerator</span><span class="sym">(){</span>
      <span class="kwa">return new</span> SimpleList<span class="sym">.</span><span class="kwd">Enumerator</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwa">class</span> SimpleNode
   <span class="sym">{</span>
      <span class="kwa">internal</span> <span class="kwb">object</span> item<span class="sym">;</span>
      <span class="kwa">internal</span> SimpleNode next<span class="sym">;</span>
   <span class="sym">}</span>


   <span class="kwa">public class</span> Enumerator
   <span class="sym">{</span>
      <span class="kwa">private</span> SimpleList list<span class="sym">;</span>
      <span class="kwa">private</span> SimpleNode node<span class="sym">;</span>

      <span class="kwa">internal</span> <span class="kwd">Enumerator</span><span class="sym">(</span>SimpleList list<span class="sym">){</span>
         <span class="kwa">this</span><span class="sym">.</span>list <span class="sym">=</span> list<span class="sym">;</span>
         <span class="kwa">this</span><span class="sym">.</span>node <span class="sym">=</span> list<span class="sym">.</span>first<span class="sym">;</span>
      <span class="sym">}</span>

      <span class="kwa">public</span> <span class="kwb">object</span> Current
      <span class="sym">{</span>
         <span class="kwa">get</span> <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>node<span class="sym">==</span><span class="kwa">null</span><span class="sym">){</span> <span class="kwa">throw new</span> <span class="kwd">InvalidOperationException</span><span class="sym">(); }</span>
            <span class="kwb">object</span> o <span class="sym">=</span> node<span class="sym">.</span>item<span class="sym">;</span>
            node<span class="sym">=</span>node<span class="sym">.</span>next<span class="sym">;</span>
            <span class="kwa">return</span> o<span class="sym">;</span>
         <span class="sym">}</span>
      <span class="sym">}</span>

      <span class="kwa">public</span> <span class="kwb">bool</span> <span class="kwd">MoveNext</span><span class="sym">(){</span>
         <span class="kwa">return</span> node<span class="sym">!=</span><span class="kwa">null</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>
