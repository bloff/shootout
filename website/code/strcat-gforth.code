\ <span class="sym">-*-</span> mode<span class="sym">:</span> forth <span class="sym">-*-</span>
\ $Id<span class="sym">:</span> strcat<span class="sym">.</span>gforth<span class="sym">,</span>v <span class="num">1.1 2004</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">25 03</span><span class="sym">:</span><span class="num">37</span><span class="sym">:</span><span class="num">12</span> bfulgham Exp $
\ http<span class="sym">:</span><span class="slc">//www.bagley.org/~doug/shootout/</span>

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

variable hsiz    <span class="num">32</span>                       hsiz <span class="sym">!</span>  \ buffer can hold <span class="kwa">this</span> much
variable hbuf    hsiz &#64; allocate <span class="kwa">throw</span>    hbuf <span class="sym">!</span>  \ start of buffer
variable hoff    <span class="num">0</span>                        hoff <span class="sym">!</span>  \ current offset in buffer

<span class="sym">:</span> STUFF s<span class="str">&quot; hello.&quot;</span> <span class="sym">;</span>

<span class="sym">:</span> <span class="kwd">strcat</span> <span class="sym">(</span> straddr strlen <span class="sym">-- )</span>
    dup                              \ dup strlen on stack
    hsiz &#64; hoff &#64; <span class="sym">- &gt;</span>                \ <span class="kwa">if</span> strlen <span class="sym">&gt;</span> remaining space
    <span class="kwa">if</span>                               \ reallocate buffer
	hsiz &#64; <span class="num">2</span><span class="sym">*</span> hsiz <span class="sym">!</span>             \ <span class="kwb">double</span> size
	hbuf &#64; hsiz &#64; resize <span class="kwa">throw</span>   \ reallocate buffer
	hbuf <span class="sym">!</span>                       \ <span class="kwd">store</span> <span class="sym">(</span>possibly <span class="kwa">new</span><span class="sym">)</span> buffer start
    then
    swap over                        \ stack<span class="sym">:</span> strlen straddr strlen
    hbuf &#64; hoff &#64; <span class="sym">+</span>
    swap cmove<span class="sym">&gt;</span>                      \ append from straddr to hbuf<span class="sym">+</span>hoff
    hoff &#64; <span class="sym">+</span> hoff <span class="sym">!</span>                  \ update hoff
    <span class="sym">;</span>

<span class="sym">:</span> <span class="kwd">main</span> <span class="sym">( -- )</span>
    NUM <span class="num">0</span>
    <span class="kwa">do</span>
	STUFF strcat
    loop
    \ as a final result push the resultant string on the stack as <span class="kwa">if</span> we
    \ were going to use it <span class="kwa">for</span> something<span class="sym">.</span>
    hbuf &#64; hoff &#64;
    \ <span class="kwa">and</span> print out the length
    <span class="num">1</span> u<span class="sym">.</span>r cr drop <span class="sym">;</span>

main

bye \ th<span class="sym">-</span>th<span class="sym">-</span>that<span class="str">'s all folks!</span>
