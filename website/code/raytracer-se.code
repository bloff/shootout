<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- contributed by Jose
</span><span class="slc">-- Compiling with g++: compile -boost -no_split -clean -o ray ray -O3 -ffast-math -fomit-frame-pointer
</span>

<span class="slc">-- SPLITFILE=ray_tracer.e
</span>
<span class="kwa">class</span> RAY_TRACER

creation <span class="sym">{</span>ANY<span class="sym">}
</span>	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	default_size<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">160

</span>	fractal_level<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">6

</span>	subdivision<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">is</span> <span class="num">4

</span>	initial_radius<span class="sym">:</span> REAL_64 <span class="kwa">is</span> <span class="num">1.0

</span>	initial_center<span class="sym">:</span> VECTOR <span class="kwa">is
		once
			create Result</span>.make<span class="sym">(</span><span class="num">0.0</span><span class="sym">, -</span><span class="num">1.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)
</span>		<span class="kwa">end

</span>	light<span class="sym">:</span> VECTOR <span class="kwa">is
		once
			create Result</span>.make<span class="sym">(-</span><span class="num">1</span><span class="sym">, -</span><span class="num">3</span><span class="sym">,</span> <span class="num">2</span><span class="sym">)
</span>			<span class="kwa">Result</span>.normalize
		<span class="kwa">end

</span>	color_factor<span class="sym">:</span> REAL_64 <span class="kwa">is
		once
			Result</span> <span class="sym">:=</span> <span class="num">255.0</span> <span class="sym">/ (</span>subdivision <span class="sym">*</span> subdivision<span class="sym">)
</span>		<span class="kwa">end

</span>	vue_point<span class="sym">:</span> VECTOR <span class="kwa">is
		once
			create Result</span>.make<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">, -</span><span class="num">4.0</span><span class="sym">)
</span>		<span class="kwa">end

</span>	tracer<span class="sym">:</span> TRACER <span class="kwa">is
		once
			create Result</span>.make
		<span class="kwa">end

</span>	make <span class="kwa">is
		local
</span>			n<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> dx<span class="sym">,</span> dy<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> direction<span class="sym">:</span> VECTOR
		<span class="kwa">do
</span>			<span class="slc">-- get the size of the image (number of pixel)
</span>			<span class="kwa">if</span> argument_count <span class="sym">&gt;=</span> <span class="num">1</span> <span class="kwa">and then</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer <span class="kwa">then
</span>				n <span class="sym">:=</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
				<span class="kwa">if</span> n <span class="sym">&lt;=</span> <span class="num">0</span> <span class="kwa">then
</span>					n <span class="sym">:=</span> default_size
				<span class="kwa">end
			else
</span>				n <span class="sym">:=</span> default_size
			<span class="kwa">end
</span>			<span class="slc">-- create the scene
</span>			tracer.put_origin<span class="sym">(</span>vue_point<span class="sym">)
</span>			tracer.put_light<span class="sym">(</span>light<span class="sym">)
</span>			tracer.put_scene<span class="sym">(</span>create_scene<span class="sym">(</span>fractal_level<span class="sym">,</span> initial_radius<span class="sym">,</span> initial_center<span class="sym">))
</span>			<span class="kwa">create</span> direction.zero
			tracer.put_direction<span class="sym">(</span>direction<span class="sym">)
</span>			<span class="slc">-- compute the scene
</span>			io.put_string<span class="sym">(</span><span class="kwa">once</span> <span class="str">&quot;P5&quot;</span><span class="sym">)
</span>			io.put_new_line
			io.put_integer<span class="sym">(</span>n<span class="sym">)
</span>			io.put_character<span class="sym">(</span><span class="str">' '</span><span class="sym">)
</span>			io.put_integer<span class="sym">(</span>n<span class="sym">)
</span>			io.put_new_line
			io.put_string<span class="sym">(</span><span class="kwa">once</span> <span class="str">&quot;255&quot;</span><span class="sym">)
</span>			io.put_new_line
			<span class="kwa">from
</span>				y <span class="sym">:=</span> n
			until
				y <span class="sym">=</span> <span class="num">0
</span>			<span class="kwa">loop
</span>				y <span class="sym">:=</span> y <span class="num">- 1
</span>				<span class="kwa">from
</span>					x <span class="sym">:=</span> <span class="num">0
</span>				until
					x <span class="sym">&gt;=</span> n
				<span class="kwa">loop
</span>					tracer.reset_material
					<span class="kwa">from
</span>						dx <span class="sym">:=</span> <span class="num">0
</span>					until
						dx <span class="sym">=</span> subdivision
					<span class="kwa">loop
						from
</span>							dy <span class="sym">:=</span> <span class="num">0
</span>						until
							dy <span class="sym">=</span> subdivision
						<span class="kwa">loop
</span>							direction.make<span class="sym">(</span>x <span class="sym">+</span> dx <span class="sym">/</span> subdivision <span class="sym">-</span> n <span class="sym">/</span> <span class="num">2</span><span class="sym">,</span> y <span class="sym">+</span> dy <span class="sym">/</span> subdivision <span class="sym">-</span> n <span class="sym">/</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">)
</span>							direction.normalize
							tracer.compute
							dy <span class="sym">:=</span> dy <span class="sym">+</span> <span class="num">1
</span>						<span class="kwa">end
</span>						dx <span class="sym">:=</span> dx <span class="sym">+</span> <span class="num">1
</span>					<span class="kwa">end
</span>					io.put_character<span class="sym">((</span><span class="num">0.5</span> <span class="sym">+</span> tracer.material <span class="sym">*</span> color_factor<span class="sym">)</span>.force_to_integer_32.to_character<span class="sym">)
</span>					x <span class="sym">:=</span> x <span class="sym">+</span> <span class="num">1
</span>				<span class="kwa">end
			end
		end

</span>	radius_factor<span class="sym">:</span> REAL_64 <span class="kwa">is
		once
			Result</span> <span class="sym">:=</span> <span class="num">3.0</span> <span class="sym">/ (</span><span class="num">12.0</span><span class="sym">)</span>.sqrt
		<span class="kwa">end

</span>	create_scene <span class="sym">(</span>level<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> r<span class="sym">:</span> REAL_64<span class="sym">;</span> v<span class="sym">:</span> VECTOR<span class="sym">):</span> TRACEABLE <span class="kwa">is
		local
</span>			rn<span class="sym">:</span> REAL_64<span class="sym">;</span> w<span class="sym">:</span> VECTOR<span class="sym">;</span> dz<span class="sym">,</span> dx<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> group<span class="sym">:</span> GROUP
		<span class="kwa">do
			if</span> level <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then
				Result</span> <span class="sym">:=</span> <span class="kwa">create</span> <span class="sym">{</span>SPHERE<span class="sym">}</span>.make<span class="sym">(</span>v<span class="sym">,</span> r<span class="sym">)
</span>			<span class="kwa">else
</span>				group <span class="sym">:=</span> <span class="kwa">create</span> <span class="sym">{</span>GROUP<span class="sym">}</span>.make<span class="sym">(</span>v<span class="sym">,</span> <span class="num">3.0</span> <span class="sym">*</span> r<span class="sym">)
</span>				group.add<span class="sym">(</span><span class="kwa">create</span> <span class="sym">{</span>SPHERE<span class="sym">}</span>.make<span class="sym">(</span>v<span class="sym">,</span> r<span class="sym">))
</span>				rn <span class="sym">:=</span> r <span class="sym">*</span> radius_factor
				<span class="kwa">from
</span>					dz <span class="sym">:= -</span><span class="num">1
</span>				until
					dz <span class="sym">&gt;</span> <span class="num">1
</span>				<span class="kwa">loop
					from
</span>						dx <span class="sym">:= -</span><span class="num">1
</span>					until
						dx <span class="sym">&gt;</span> <span class="num">1
</span>					<span class="kwa">loop
						create</span> w.make<span class="sym">(</span>v.x <span class="sym">-</span> dx <span class="sym">*</span> rn<span class="sym">,</span> v.y <span class="sym">+</span> rn<span class="sym">,</span> v.z <span class="sym">-</span> dz <span class="sym">*</span> rn<span class="sym">)
</span>						group.add<span class="sym">(</span>create_scene<span class="sym">(</span>level <span class="num">- 1</span><span class="sym">,</span> <span class="num">0.5</span> <span class="sym">*</span> r<span class="sym">,</span> w<span class="sym">))
</span>						dx <span class="sym">:=</span> dx <span class="sym">+</span> <span class="num">2
</span>					<span class="kwa">end
</span>					dz <span class="sym">:=</span> dz <span class="sym">+</span> <span class="num">2
</span>				<span class="kwa">end
				Result</span> <span class="sym">:=</span> group
			<span class="kwa">end
		end

end</span> <span class="slc">-- class RAY
</span>

<span class="slc">-- SPLITFILE=tracer.e
</span>
<span class="kwa">class</span> TRACER

insert
	CONSTANTS

creation <span class="sym">{</span>ANY<span class="sym">}
</span>	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	scene<span class="sym">:</span> TRACEABLE

	direct_ray<span class="sym">:</span> TRACESTATE

	reflected_ray<span class="sym">:</span> SHADOWSTATE
<span class="slc">--	reflected_ray: TRACESTATE
</span>
	light<span class="sym">:</span> VECTOR

	material<span class="sym">:</span> REAL_64

	make <span class="kwa">is
		do
			create</span> direct_ray
			<span class="kwa">create</span> reflected_ray
		<span class="kwa">end

</span>	is_ready<span class="sym">:</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> direct_ray.is_ready <span class="kwa">and then</span> light <span class="sym">/=</span> Void <span class="kwa">and then</span> scene <span class="sym">/=</span> Void
		<span class="kwa">end

</span>	put_origin <span class="sym">(</span>value<span class="sym">:</span> VECTOR<span class="sym">)</span> <span class="kwa">is
		do
</span>			direct_ray.put_origin<span class="sym">(</span>value<span class="sym">)
</span>		<span class="kwa">end

</span>	origin<span class="sym">:</span> VECTOR <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> direct_ray.origin
		<span class="kwa">end

</span>	put_direction <span class="sym">(</span>value<span class="sym">:</span> VECTOR<span class="sym">)</span> <span class="kwa">is
		do
</span>			direct_ray.put_direction<span class="sym">(</span>value<span class="sym">)
</span>		<span class="kwa">end

</span>	direction<span class="sym">:</span> VECTOR <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> direct_ray.direction
		<span class="kwa">end

</span>	put_light <span class="sym">(</span>value<span class="sym">:</span> VECTOR<span class="sym">)</span> <span class="kwa">is
		do
</span>			light <span class="sym">:= -</span> value
			reflected_ray.put_direction<span class="sym">(</span>light<span class="sym">)
</span>		<span class="kwa">end

</span>	put_scene <span class="sym">(</span>value<span class="sym">:</span> TRACEABLE<span class="sym">)</span> <span class="kwa">is
		do
</span>			scene <span class="sym">:=</span> value
		<span class="kwa">end

</span>	reset_material <span class="kwa">is
		do
</span>			material <span class="sym">:=</span> <span class="num">0
</span>		<span class="kwa">end

</span>	compute <span class="kwa">is
		require
</span>			is_ready
		<span class="kwa">local
</span>			normal<span class="sym">:</span> VECTOR<span class="sym">;</span> mat<span class="sym">:</span> REAL_64
		<span class="kwa">do
</span>			direct_ray.reset
			direct_ray.compute_distance<span class="sym">(</span>scene<span class="sym">)
</span>			<span class="kwa">if</span> direct_ray.intersected <span class="kwa">then
</span>				normal <span class="sym">:=</span> direct_ray.normal
				mat <span class="sym">:= (</span>normal <span class="sym">|</span> light<span class="sym">)
</span>				<span class="kwa">if</span> mat <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then
</span>					reflected_ray.put_origin<span class="sym">(</span>direct_ray.intersection <span class="sym">+</span> normal <span class="sym">*</span> delta<span class="sym">)
</span>					reflected_ray.reset
					reflected_ray.compute_distance<span class="sym">(</span>scene<span class="sym">)
</span>					<span class="kwa">if not</span> reflected_ray.intersected <span class="kwa">then
</span>						material <span class="sym">:=</span> material <span class="sym">+</span> mat
					<span class="kwa">end
				end
			end
		end

end</span> <span class="slc">-- class TRACER
</span>

<span class="slc">-- SPLITFILE=tracestate.e
</span>
<span class="kwa">class</span> TRACESTATE

insert
	CONSTANTS

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	origin<span class="sym">:</span> VECTOR

	direction<span class="sym">:</span> VECTOR

	item<span class="sym">:</span> NORMALIZABLE

	distance<span class="sym">:</span> REAL_64

	put_origin <span class="sym">(</span>org<span class="sym">:</span> VECTOR<span class="sym">)</span> <span class="kwa">is
		do
</span>			origin <span class="sym">:=</span> org
		<span class="kwa">end

</span>	put_direction <span class="sym">(</span>dir<span class="sym">:</span> VECTOR<span class="sym">)</span> <span class="kwa">is
		do
</span>			direction <span class="sym">:=</span> dir
		<span class="kwa">end

</span>	intersect <span class="sym">(</span>dist<span class="sym">:</span> REAL_64<span class="sym">;</span> obj<span class="sym">:</span> NORMALIZABLE<span class="sym">)</span> <span class="kwa">is
		require
</span>			obj <span class="sym">/=</span> Void
			dist <span class="sym">&gt;=</span> <span class="num">0
</span>		<span class="kwa">do
			if</span> distance <span class="sym">&gt;</span> dist <span class="kwa">then
</span>				distance <span class="sym">:=</span> dist
				item <span class="sym">:=</span> obj
			<span class="kwa">end
		ensure
</span>			intersected <span class="kwa">or else</span> dist <span class="sym">=</span> infinity
		<span class="kwa">end

</span>	reset <span class="kwa">is
		do
</span>			item <span class="sym">:=</span> Void
			distance <span class="sym">:=</span> infinity
		<span class="kwa">ensure
			not</span> intersected
		<span class="kwa">end

</span>	intersected<span class="sym">:</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> item <span class="sym">/=</span> Void
		<span class="kwa">ensure
			Result</span> <span class="sym">= (</span>distance <span class="sym">/=</span> infinity<span class="sym">)
</span>		<span class="kwa">end

</span>	intersection<span class="sym">:</span> VECTOR <span class="kwa">is
		require
</span>			intersected
		<span class="kwa">do
			Result</span> <span class="sym">:=</span> origin <span class="sym">+</span> direction <span class="sym">*</span> distance
		<span class="kwa">end

</span>	compute_distance <span class="sym">(</span>scene<span class="sym">:</span> TRACEABLE<span class="sym">)</span> <span class="kwa">is
		require
</span>			is_ready
		<span class="kwa">do
</span>			scene.compute_distance<span class="sym">(</span><span class="kwa">Current</span><span class="sym">)
</span>		<span class="kwa">end

</span>	normal<span class="sym">:</span> VECTOR <span class="kwa">is
		require
</span>			intersected
		<span class="kwa">do
			Result</span> <span class="sym">:=</span> item.compute_normal<span class="sym">(</span><span class="kwa">Current</span><span class="sym">)
</span>		<span class="kwa">ensure
			Result</span>.is_normalized
		<span class="kwa">end

</span>	is_ready<span class="sym">:</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> origin <span class="sym">/=</span> Void <span class="kwa">and then</span> direction <span class="sym">/=</span> Void
		<span class="kwa">end

invariant
</span>	distance <span class="sym">&gt;=</span> <span class="num">0

</span><span class="kwa">end</span> <span class="slc">-- class TRACESTATE
</span>

<span class="slc">-- SPLITFILE=shadowstate.e
</span>
<span class="kwa">class</span> SHADOWSTATE

<span class="kwa">inherit
</span>	TRACESTATE
		<span class="kwa">redefine</span> compute_distance <span class="kwa">end

feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	compute_distance <span class="sym">(</span>scene<span class="sym">:</span> TRACEABLE<span class="sym">)</span> <span class="kwa">is
		do
			if not</span> intersected <span class="kwa">then
</span>				scene.compute_distance<span class="sym">(</span><span class="kwa">Current</span><span class="sym">)
</span>			<span class="kwa">end
		end

end

</span><span class="slc">-- SPLITFILE=traceable.e
</span>
<span class="kwa">deferred class</span> TRACEABLE

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	compute_distance <span class="sym">(</span>state<span class="sym">:</span> TRACESTATE<span class="sym">)</span> <span class="kwa">is
		deferred
		end

end</span> <span class="slc">-- class TRACEABLE
</span>

<span class="slc">-- SPLITFILE=normalizable.e
</span>
<span class="kwa">deferred class</span> NORMALIZABLE

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	compute_normal <span class="sym">(</span>state<span class="sym">:</span> TRACESTATE<span class="sym">):</span> VECTOR <span class="kwa">is
		require
</span>			state.item <span class="sym">=</span> <span class="kwa">Current
		deferred
		ensure
			Result</span>.is_normalized
		<span class="kwa">end

end</span> <span class="slc">-- class NORMALIZABLE
</span>

<span class="slc">-- SPLITFILE=group.e
</span>
<span class="kwa">class</span> GROUP

<span class="kwa">inherit
</span>	TRACEABLE

creation <span class="sym">{</span>ANY<span class="sym">}
</span>	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	bound<span class="sym">:</span> SPHERE

	group<span class="sym">:</span> LINKED_LIST<span class="sym">[</span>TRACEABLE<span class="sym">]

</span>	iterator<span class="sym">:</span> ITERATOR<span class="sym">[</span>TRACEABLE<span class="sym">]

</span>	make <span class="sym">(</span>c<span class="sym">:</span> VECTOR<span class="sym">;</span> r<span class="sym">:</span> REAL_64<span class="sym">)</span> <span class="kwa">is
		do
			create</span> bound.make<span class="sym">(</span>c<span class="sym">,</span> r<span class="sym">)
</span>			<span class="kwa">create</span> group.make
			iterator <span class="sym">:=</span> group.get_new_iterator
		<span class="kwa">end

</span>	add <span class="sym">(</span>some<span class="sym">:</span> TRACEABLE<span class="sym">)</span> <span class="kwa">is
		do
</span>			group.add_last<span class="sym">(</span>some<span class="sym">)
</span>		<span class="kwa">end

</span>	compute_distance <span class="sym">(</span>state<span class="sym">:</span> TRACESTATE<span class="sym">)</span> <span class="kwa">is
		do
			if</span> bound.distance<span class="sym">(</span>state<span class="sym">) &lt;</span> state.distance <span class="kwa">then
				from
</span>					iterator.start
				until
					iterator.is_off
				<span class="kwa">loop
</span>					state.compute_distance<span class="sym">(</span>iterator.item<span class="sym">)
</span>					iterator.next
				<span class="kwa">end
			end
		end

end</span> <span class="slc">-- class GROUP
</span>

<span class="slc">-- SPLITFILE=sphere.e
</span>
<span class="kwa">class</span> SPHERE

<span class="kwa">inherit
</span>	TRACEABLE
	NORMALIZABLE

insert
	CONSTANTS

creation <span class="sym">{</span>ANY<span class="sym">}
</span>	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	center<span class="sym">:</span> VECTOR

	square_radius<span class="sym">:</span> REAL_64

	radius<span class="sym">:</span> REAL_64

	make <span class="sym">(</span>c<span class="sym">:</span> VECTOR<span class="sym">;</span> r<span class="sym">:</span> REAL_64<span class="sym">)</span> <span class="kwa">is
		do
</span>			center <span class="sym">:=</span> c
			square_radius <span class="sym">:=</span> r <span class="sym">*</span> r
			radius <span class="sym">:=</span> r
		<span class="kwa">end

</span>	distance <span class="sym">(</span>state<span class="sym">:</span> TRACESTATE<span class="sym">):</span> REAL_64 <span class="kwa">is
		local
</span>			v<span class="sym">:</span> VECTOR<span class="sym">;</span> b<span class="sym">,</span> disc<span class="sym">,</span> d<span class="sym">:</span> REAL_64
		<span class="kwa">do
			Result</span> <span class="sym">:=</span> infinity
			v <span class="sym">:=</span> center <span class="sym">-</span> state.origin
			b <span class="sym">:= (</span>v <span class="sym">|</span> state.direction<span class="sym">)
</span>			disc <span class="sym">:=</span> b <span class="sym">*</span> b <span class="sym">-</span> v.square_length <span class="sym">+</span> square_radius
			<span class="kwa">if</span> disc <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then
</span>				disc <span class="sym">:=</span> disc.sqrt
				d <span class="sym">:=</span> b <span class="sym">-</span> disc
				<span class="kwa">if</span> d <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then
					Result</span> <span class="sym">:=</span> d
				<span class="kwa">elseif</span> b<span class="sym">+</span>disc <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then
					Result</span> <span class="sym">:=</span> <span class="num">0
</span>				<span class="kwa">end
			end
		end

</span><span class="slc">--	compute_distance (state: TRACESTATE) is
</span><span class="slc">--		do
</span><span class="slc">--			state.intersect(distance(state), Current)
</span><span class="slc">--		end
</span>
	compute_distance <span class="sym">(</span>state<span class="sym">:</span> TRACESTATE<span class="sym">)</span> <span class="kwa">is
		local
</span>			v<span class="sym">:</span> VECTOR<span class="sym">;</span> b<span class="sym">,</span> disc<span class="sym">,</span> d<span class="sym">:</span> REAL_64
		<span class="kwa">do
</span>			v <span class="sym">:=</span> center <span class="sym">-</span> state.origin
			b <span class="sym">:= (</span>v <span class="sym">|</span> state.direction<span class="sym">)
</span>			disc <span class="sym">:=</span> b <span class="sym">*</span> b <span class="sym">-</span> v.square_length <span class="sym">+</span> square_radius
			<span class="kwa">if</span> disc <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then
</span>				disc <span class="sym">:=</span> disc.sqrt
				d <span class="sym">:=</span> b <span class="sym">-</span> disc
				<span class="kwa">if</span> d <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then
</span>					state.intersect<span class="sym">(</span>d<span class="sym">,</span><span class="kwa">Current</span><span class="sym">)
</span>				<span class="kwa">end
			end
		end

</span>	compute_normal <span class="sym">(</span>state<span class="sym">:</span> TRACESTATE<span class="sym">):</span> VECTOR <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> state.intersection <span class="sym">-</span> center
			<span class="kwa">Result</span>.normalize
		<span class="kwa">end

end</span> <span class="slc">-- class SPHERE
</span>

<span class="slc">-- SPLITFILE=vector.e
</span>
<span class="kwa">class</span> VECTOR

insert
	CONSTANTS

creation <span class="sym">{</span>ANY<span class="sym">}
</span>	zero<span class="sym">,</span> make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">:</span> REAL_64

	zero <span class="kwa">is
		do
</span>			make<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)
</span>		<span class="kwa">end

</span>	make <span class="sym">(</span>a<span class="sym">,</span> b<span class="sym">,</span> c<span class="sym">:</span> REAL_64<span class="sym">)</span> <span class="kwa">is
		do
</span>			x <span class="sym">:=</span> a
			y <span class="sym">:=</span> b
			z <span class="sym">:=</span> c
		<span class="kwa">end

	infix</span> <span class="str">&quot;*&quot;</span> <span class="sym">(</span>c<span class="sym">:</span> REAL_64<span class="sym">):</span> VECTOR <span class="kwa">is
		do
			create Result</span>.make<span class="sym">(</span>c <span class="sym">*</span> x<span class="sym">,</span> c <span class="sym">*</span> y<span class="sym">,</span> c <span class="sym">*</span> z<span class="sym">)
</span>		<span class="kwa">end

	infix</span> <span class="str">&quot;+&quot;</span> <span class="sym">(</span>v<span class="sym">:</span> VECTOR<span class="sym">):</span> VECTOR <span class="kwa">is
		do
			create Result</span>.make<span class="sym">(</span>x <span class="sym">+</span> v.x<span class="sym">,</span> y <span class="sym">+</span> v.y<span class="sym">,</span> z <span class="sym">+</span> v.z<span class="sym">)
</span>		<span class="kwa">end

	infix</span> <span class="str">&quot;-&quot;</span> <span class="sym">(</span>v<span class="sym">:</span> VECTOR<span class="sym">):</span> VECTOR <span class="kwa">is
		do
			create Result</span>.make<span class="sym">(</span>x <span class="sym">-</span> v.x<span class="sym">,</span> y <span class="sym">-</span> v.y<span class="sym">,</span> z <span class="sym">-</span> v.z<span class="sym">)
</span>		<span class="kwa">end

	prefix</span> <span class="str">&quot;-&quot;</span><span class="sym">:</span> VECTOR <span class="kwa">is
		do
			create Result</span>.make<span class="sym">(-</span> x<span class="sym">, -</span> y<span class="sym">, -</span> z<span class="sym">)
</span>		<span class="kwa">end

	infix</span> <span class="str">&quot;|&quot;</span> <span class="sym">(</span>v<span class="sym">:</span> VECTOR<span class="sym">):</span> REAL_64 <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> x <span class="sym">*</span> v.x <span class="sym">+</span> y <span class="sym">*</span> v.y <span class="sym">+</span> z <span class="sym">*</span> v.z
		<span class="kwa">end

</span>	square_length<span class="sym">:</span> REAL_64 <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> x <span class="sym">*</span> x <span class="sym">+</span> y <span class="sym">*</span> y <span class="sym">+</span> z <span class="sym">*</span> z
		<span class="kwa">end

</span>	length<span class="sym">:</span> REAL_64 <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> square_length.sqrt
		<span class="kwa">end

</span>	normalize <span class="kwa">is
		require
			not</span> is_zero_length
		<span class="kwa">local
</span>			l<span class="sym">:</span> REAL_64
		<span class="kwa">do
</span>			l <span class="sym">:=</span> <span class="num">1.0</span> <span class="sym">/</span> length
			x <span class="sym">:=</span> x <span class="sym">*</span> l
			y <span class="sym">:=</span> y <span class="sym">*</span> l
			z <span class="sym">:=</span> z <span class="sym">*</span> l
		<span class="kwa">ensure
</span>			is_normalized
		<span class="kwa">end

</span>	normed<span class="sym">:</span> VECTOR <span class="kwa">is
		require
			not</span> is_zero_length
		<span class="kwa">do
			Result</span> <span class="sym">:=</span> <span class="kwa">Current</span> <span class="sym">* (</span><span class="num">1.0</span> <span class="sym">/</span> length<span class="sym">)
</span>		<span class="kwa">ensure
			Result</span>.is_normalized
		<span class="kwa">end

</span>	is_zero_length<span class="sym">:</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> square_length <span class="sym">=</span> <span class="num">0
</span>		<span class="kwa">end

</span>	is_zero<span class="sym">:</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is
		do
			Result</span> <span class="sym">:=</span> x <span class="sym">=</span> <span class="num">0</span> <span class="kwa">and then</span> y <span class="sym">=</span> <span class="num">0</span> <span class="kwa">and then</span> z <span class="sym">=</span> <span class="num">0
</span>		<span class="kwa">end

</span>	is_normalized<span class="sym">:</span> <span class="kwb">BOOLEAN</span> <span class="kwa">is
		do
			Result</span> <span class="sym">:= (</span>square_length <span class="num">- 1.0</span><span class="sym">)</span>.abs <span class="sym">&lt;</span> compare_delta
		<span class="kwa">end

end</span> <span class="slc">-- class VECTOR
</span>

<span class="slc">-- SPLITFILE=constants.e
</span>
<span class="kwa">class</span> CONSTANTS

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}
</span>	epsilon<span class="sym">:</span> REAL_64 <span class="kwa">is</span> <span class="num">2.2204460492503131e</span><span class="sym">-</span><span class="num">16

</span>	delta<span class="sym">:</span> REAL_64 <span class="kwa">is
		once
			Result</span> <span class="sym">:=</span> epsilon.sqrt
		<span class="kwa">end

</span>	compare_delta<span class="sym">:</span> REAL_64 <span class="kwa">is</span> <span class="num">1e</span><span class="sym">-</span><span class="num">9

</span>	infinity<span class="sym">:</span> REAL_64 <span class="kwa">is
		once
			Result</span> <span class="sym">:=</span> Maximum_real_64
<span class="slc">--			Result := 99999
</span>		<span class="kwa">end

end</span> <span class="slc">-- class CONSTANTS
</span>
