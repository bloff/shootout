<span class="line">    1 </span><span class="com">/* The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="com">     http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="com">    contributed by Isaac Gouy
</span><span class="line">    4 </span><span class="com"> 
</span><span class="line">    5 </span><span class="com"> To compile:
</span><span class="line">    6 </span><span class="com">            nicec --sourcepath=.. -d=. -a lists.jar lists
</span><span class="line">    7 </span><span class="com"> 
</span><span class="line">    8 </span><span class="com"> To run:
</span><span class="line">    9 </span><span class="com">    java -ea -jar lists.jar 16
</span><span class="line">   10 </span><span class="com"> */</span>
<span class="line">   11 </span>
<span class="line">   12 </span>
<span class="line">   13 </span>   <span class="kwa">import</span> ackermann<span class="sym">;</span> <span class="slc">// reuse toSinglePositiveInt 
</span><span class="line">   14 </span><span class="slc"></span>
<span class="line">   15 </span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span><span class="line">   16 </span><span class="sym"> </span>   var n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);
</span><span class="line">   17 </span><span class="sym"> 
</span><span class="line">   18 </span><span class="sym"> </span>   <span class="kwa">let</span> nSize <span class="sym">=</span> <span class="num">10000</span><span class="sym">;
</span><span class="line">   19 </span><span class="sym"> </span>   var L1Count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym"> </span>   <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
</span><span class="line">   21 </span><span class="sym"> 
</span><span class="line">   22 </span><span class="sym"> </span>      <span class="slc">// initialize L1 
</span><span class="line">   23 </span><span class="slc"></span>      <span class="kwa">let</span> L1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   24 </span><span class="sym"> </span>      <span class="kwa">for</span> <span class="sym">(</span>var j <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;=</span> nSize<span class="sym">;</span> j<span class="sym">++)</span> L1<span class="sym">.</span>add<span class="sym">(</span>j<span class="sym">);
</span><span class="line">   25 </span><span class="sym"> 
</span><span class="line">   26 </span><span class="sym"> </span>      <span class="slc">// copy L1 to L2 
</span><span class="line">   27 </span><span class="slc"></span>      <span class="kwa">let</span> L2 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">(</span>L1<span class="sym">);
</span><span class="line">   28 </span><span class="sym"> 
</span><span class="line">   29 </span><span class="sym"> </span>      <span class="slc">// remove from left of L2 add to right of L3 
</span><span class="line">   30 </span><span class="slc"></span>      <span class="kwa">let</span> L3 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   31 </span><span class="sym"> </span>      <span class="kwa">while</span> <span class="sym">(!</span>L2<span class="sym">.</span>isEmpty<span class="sym">)
</span><span class="line">   32 </span><span class="sym">  </span>         L3<span class="sym">.</span>add<span class="sym">(</span> L2<span class="sym">.</span>removeFirst <span class="sym">);
</span><span class="line">   33 </span><span class="sym">  
</span><span class="line">   34 </span><span class="sym"> </span>      <span class="slc">// remove from right of L3 add to right of L2 
</span><span class="line">   35 </span><span class="slc"></span>      <span class="kwa">while</span> <span class="sym">(!</span>L3<span class="sym">.</span>isEmpty<span class="sym">)
</span><span class="line">   36 </span><span class="sym">  </span>         L2<span class="sym">.</span>add<span class="sym">(</span> L3<span class="sym">.</span>removeLast <span class="sym">);
</span><span class="line">   37 </span><span class="sym"> 
</span><span class="line">   38 </span><span class="sym"> </span>      <span class="slc">// reverse L1 
</span><span class="line">   39 </span><span class="slc"></span>      <span class="kwc">Collections</span><span class="sym">.</span>reverse<span class="sym">(</span>L1<span class="sym">);
</span><span class="line">   40 </span><span class="sym"> 
</span><span class="line">   41 </span><span class="sym"> </span>      <span class="slc">// check that first item is now SIZE 
</span><span class="line">   42 </span><span class="slc"></span>      <span class="slc">// NOTE: no Object to int type cast needed 
</span><span class="line">   43 </span><span class="slc"></span>      <span class="kwa">if</span> <span class="sym">(</span>L1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> nSize<span class="sym">)</span> println<span class="sym">(</span><span class="str">&quot;First item of L1 != SIZE&quot;</span><span class="sym">);
</span><span class="line">   44 </span><span class="sym"> 
</span><span class="line">   45 </span><span class="sym"> </span>      <span class="slc">// check that L1 == L2 
</span><span class="line">   46 </span><span class="slc"></span>      <span class="kwa">if</span> <span class="sym">( !</span>L1<span class="sym">.</span>equals<span class="sym">(</span>L2<span class="sym">) )</span> println<span class="sym">(</span><span class="str">&quot;L1 != L2&quot;</span><span class="sym">);
</span><span class="line">   47 </span><span class="sym"> </span>      L1Count <span class="sym">=</span> L1<span class="sym">.</span>size<span class="sym">;
</span><span class="line">   48 </span><span class="sym">       }
</span><span class="line">   49 </span><span class="sym"> 
</span><span class="line">   50 </span><span class="sym"> </span>   println<span class="sym">(</span>L1Count<span class="sym">);
</span><span class="line">   51 </span><span class="sym"> }</span> 
