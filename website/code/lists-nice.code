<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

To compile:
   nicec --sourcepath=.. -d=. -a lists.jar lists

To run:
   java -ea -jar lists.jar 16
*/</span>

<span class="kwa">import</span> ackermann<span class="sym">;</span> <span class="slc">// reuse toSinglePositiveInt
</span>
<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   var n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);

</span>   <span class="kwa">let</span> nSize <span class="sym">=</span> <span class="num">10000</span><span class="sym">;
</span>   var L1Count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>   <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
</span>      <span class="slc">// initialize L1
</span>      <span class="kwa">let</span> L1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span>      <span class="kwa">for</span> <span class="sym">(</span>var j <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;=</span> nSize<span class="sym">;</span> j<span class="sym">++)</span> L1<span class="sym">.</span>add<span class="sym">(</span>j<span class="sym">);

</span>      <span class="slc">// copy L1 to L2
</span>      <span class="kwa">let</span> L2 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">(</span>L1<span class="sym">);

</span>      <span class="slc">// remove from left of L2 add to right of L3
</span>      <span class="kwa">let</span> L3 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span>      <span class="kwa">while</span> <span class="sym">(!</span>L2<span class="sym">.</span>isEmpty<span class="sym">)
</span>         L3<span class="sym">.</span>add<span class="sym">(</span> L2<span class="sym">.</span>removeFirst <span class="sym">);

</span>      <span class="slc">// remove from right of L3 add to right of L2
</span>      <span class="kwa">while</span> <span class="sym">(!</span>L3<span class="sym">.</span>isEmpty<span class="sym">)
</span>         L2<span class="sym">.</span>add<span class="sym">(</span> L3<span class="sym">.</span>removeLast <span class="sym">);

</span>      <span class="slc">// reverse L1
</span>      <span class="kwc">Collections</span><span class="sym">.</span>reverse<span class="sym">(</span>L1<span class="sym">);

</span>      <span class="slc">// check that first item is now SIZE
</span>      <span class="slc">// NOTE: no Object to int type cast needed
</span>      <span class="kwa">if</span> <span class="sym">(</span>L1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> nSize<span class="sym">)</span> println<span class="sym">(</span><span class="str">&quot;First item of L1 != SIZE&quot;</span><span class="sym">);

</span>      <span class="slc">// check that L1 == L2
</span>      <span class="kwa">if</span> <span class="sym">( !</span>L1<span class="sym">.</span>equals<span class="sym">(</span>L2<span class="sym">) )</span> println<span class="sym">(</span><span class="str">&quot;L1 != L2&quot;</span><span class="sym">);
</span>      L1Count <span class="sym">=</span> L1<span class="sym">.</span>size<span class="sym">;
      }

</span>   println<span class="sym">(</span>L1Count<span class="sym">);
}</span>
