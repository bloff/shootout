<span class="com">{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Joost van der Sluis
}</span>

<span class="kwa">program</span> nsieve<span class="sym">;
</span><span class="kwa">uses</span> SysUtils<span class="sym">;

</span><span class="kwa">var</span> n <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;

</span><span class="slc">//procedure primes(n : integer);
</span><span class="kwa">procedure</span> primes<span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">);</span> <span class="kwa">inline</span><span class="sym">;
</span><span class="kwa">var</span> flags <span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">boolean</span><span class="sym">;
</span>    size<span class="sym">,</span>i<span class="sym">,</span>j<span class="sym">,</span>count <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="kwa">begin
</span>  size <span class="sym">:=</span> <span class="num">10000</span> <span class="kwa">shl</span> n<span class="sym">;
</span>  SetLength<span class="sym">(</span>flags<span class="sym">,</span> size<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span><span class="slc">//for i := 2 to size do flags[i] := true;
</span>  fillchar<span class="sym">(</span>flags<span class="sym">[</span><span class="num">0</span><span class="sym">],</span>length<span class="sym">(</span>flags<span class="sym">),</span>ord<span class="sym">(</span><span class="kwb">true</span><span class="sym">));
</span>  count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">2</span> <span class="kwa">to</span> size <span class="kwa">do
    if</span> flags<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">then
    begin
</span>      count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>      j <span class="sym">:=</span> i <span class="sym">+</span> i<span class="sym">;
</span>      <span class="kwa">while</span> j <span class="sym">&lt;=</span> size <span class="kwa">do begin
</span><span class="slc">//      flags[j] := false;
</span>        <span class="kwa">if</span> flags<span class="sym">[</span>j<span class="sym">]</span> <span class="kwa">then</span> flags<span class="sym">[</span>j<span class="sym">] :=</span> <span class="kwb">false</span><span class="sym">;
</span>        j <span class="sym">:=</span> j <span class="sym">+</span> i<span class="sym">;
</span>      <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;
</span>  writeln<span class="sym">(</span><span class="str">'Primes up to'</span><span class="sym">,</span> size<span class="sym">:</span><span class="num">9</span><span class="sym">,</span> count<span class="sym">:</span><span class="num">9</span><span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">begin
</span>  n <span class="sym">:=</span> StrToInt<span class="sym">(</span>paramstr<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>  primes<span class="sym">(</span>n<span class="sym">);
</span>  primes<span class="sym">(</span>n<span class="num">-1</span><span class="sym">);
</span>  primes<span class="sym">(</span>n<span class="num">-2</span><span class="sym">);
</span><span class="kwa">end</span>.
