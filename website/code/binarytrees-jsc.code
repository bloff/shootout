<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy */</span>

<span class="kwa">function</span> <span class="kwd">TreeNode</span><span class="sym">(</span>left<span class="sym">,</span>right<span class="sym">,</span>item<span class="sym">){</span>
   <span class="kwa">this</span><span class="sym">.</span>left <span class="sym">=</span> left<span class="sym">;</span>
   <span class="kwa">this</span><span class="sym">.</span>right <span class="sym">=</span> right<span class="sym">;</span>
   <span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item<span class="sym">;</span>
<span class="sym">}</span>

TreeNode<span class="sym">.</span><span class="kwa">prototype</span><span class="sym">.</span>itemCheck <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(){</span>
   <span class="kwa">if</span> <span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span>left<span class="sym">==</span><span class="kwa">null</span><span class="sym">)</span> <span class="kwa">return this</span><span class="sym">.</span>item<span class="sym">;</span>
   <span class="kwa">else return this</span><span class="sym">.</span>item <span class="sym">+</span> <span class="kwa">this</span><span class="sym">.</span>left<span class="sym">.</span><span class="kwd">itemCheck</span><span class="sym">() -</span> <span class="kwa">this</span><span class="sym">.</span>right<span class="sym">.</span><span class="kwd">itemCheck</span><span class="sym">();</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">bottomUpTree</span><span class="sym">(</span>item<span class="sym">,</span>depth<span class="sym">){</span>
   <span class="kwa">if</span> <span class="sym">(</span>depth<span class="sym">&gt;</span><span class="num">0</span><span class="sym">){</span>
      <span class="kwa">return new</span> <span class="kwd">TreeNode</span><span class="sym">(</span>
          <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
         <span class="sym">,</span><span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
         <span class="sym">,</span>item
      <span class="sym">);</span>
   <span class="sym">}</span>
   <span class="kwa">else</span> <span class="sym">{</span>
      <span class="kwa">return new</span> <span class="kwd">TreeNode</span><span class="sym">(</span><span class="kwa">null</span><span class="sym">,</span><span class="kwa">null</span><span class="sym">,</span>item<span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">var</span> minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
<span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwa">var</span> maxDepth <span class="sym">=</span> <span class="kwc">Math</span><span class="sym">.</span><span class="kwc">max</span><span class="sym">(</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">);</span>
<span class="kwa">var</span> stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

<span class="kwa">var</span> check <span class="sym">=</span> <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>stretchDepth<span class="sym">).</span><span class="kwd">itemCheck</span><span class="sym">();</span>
<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth &quot;</span> <span class="sym">+</span> stretchDepth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> <span class="sym">+</span> check<span class="sym">);</span>

<span class="kwa">var</span> longLivedTree <span class="sym">=</span> <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">);</span>
<span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> depth<span class="sym">=</span>minDepth<span class="sym">;</span> depth<span class="sym">&lt;=</span>maxDepth<span class="sym">;</span> depth<span class="sym">+=</span><span class="num">2</span><span class="sym">){</span>
   <span class="kwa">var</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);</span>

   check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>iterations<span class="sym">;</span> i<span class="sym">++){</span>
      check <span class="sym">+=</span> <span class="kwd">bottomUpTree</span><span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">).</span><span class="kwd">itemCheck</span><span class="sym">();</span>
      check <span class="sym">+=</span> <span class="kwd">bottomUpTree</span><span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">).</span><span class="kwd">itemCheck</span><span class="sym">();</span>
   <span class="sym">}</span>
   <span class="kwc">print</span><span class="sym">(</span>iterations<span class="sym">*</span><span class="num">2</span> <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span> <span class="sym">+</span> depth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> <span class="sym">+</span> check<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth &quot;</span> <span class="sym">+</span> maxDepth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span>
   <span class="sym">+</span> longLivedTree<span class="sym">.</span><span class="kwd">itemCheck</span><span class="sym">());</span>
