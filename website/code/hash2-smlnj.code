<span class="com">(* hash2.sml</span>
<span class="com"> *</span>
<span class="com"> *   Repeated hashtable updates.</span>
<span class="com"> *</span>
<span class="com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="com"> *</span>
<span class="com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="com"> *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
    <span class="kwa">val</span> main <span class="sym">:</span> <span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list <span class="sym">-&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>
    <span class="kwa">open</span> FormatComb
    <span class="kwa">structure</span> T <span class="sym">=</span> AtomTable
    <span class="kwa">val</span> N <span class="sym">=</span> <span class="num">10000</span>

    <span class="kwa">fun</span> mkTable <span class="sym">() =</span> T.mkTable <span class="sym">(</span>N<span class="sym">,</span> Fail <span class="str">&quot;notfound&quot;</span><span class="sym">)</span>

    <span class="kwa">fun</span> main' n <span class="sym">=</span>
	<span class="kwa">let val</span> <span class="sym">(</span>h1<span class="sym">,</span> h2<span class="sym">) = (</span>mkTable <span class="sym">(),</span> mkTable <span class="sym">())</span>
	    <span class="kwa">fun</span> foo i <span class="sym">=</span> Atom.atom <span class="sym">(</span><span class="str">&quot;foo_&quot;</span> ^ <span class="kwa">Int</span>.toString i<span class="sym">)</span>
	    <span class="kwa">val</span> <span class="sym">(</span>f1<span class="sym">,</span> f9999<span class="sym">) = (</span>foo <span class="num">1</span><span class="sym">,</span> foo <span class="num">9999</span><span class="sym">)</span>
	    <span class="kwa">fun</span> init i <span class="sym">=</span>
		<span class="kwa">if</span> i <span class="sym">&gt;=</span> N <span class="kwa">then</span> <span class="sym">()</span> <span class="kwa">else</span> <span class="sym">(</span>T.insert h1 <span class="sym">(</span>foo i<span class="sym">,</span> i<span class="sym">);</span> init <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
	    <span class="kwa">fun</span> optadd <span class="sym">(</span>NONE<span class="sym">,</span> k<span class="sym">,</span> v<span class="sym">) =</span> T.insert h2 <span class="sym">(</span>k<span class="sym">,</span> ref v<span class="sym">)</span>
	      <span class="sym">|</span> optadd <span class="sym">(</span>SOME r<span class="sym">,</span> _<span class="sym">,</span> v<span class="sym">) =</span> r <span class="sym">:=</span> v <span class="sym">+ !</span>r
	    <span class="kwa">fun</span> addall <span class="sym">() =</span> T.appi <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">(</span>k<span class="sym">,</span> v<span class="sym">) =&gt;</span> optadd <span class="sym">(</span>T.find h2 k<span class="sym">,</span> k<span class="sym">,</span> v<span class="sym">))</span> h1
	    <span class="kwa">fun</span> iter k <span class="sym">=</span> <span class="kwa">if</span> k <span class="sym">&gt;=</span> n <span class="kwa">then</span> <span class="sym">()</span> <span class="kwa">else</span> <span class="sym">(</span>addall <span class="sym">();</span> iter <span class="sym">(</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
	<span class="kwa">in</span> init <span class="num">0</span><span class="sym">;</span> iter <span class="num">0</span><span class="sym">;</span>
	   print <span class="sym">(</span>format <span class="sym">(</span><span class="kwb">int</span> <span class="kwa">o</span> sp <span class="num">1</span> <span class="kwa">o</span> <span class="kwb">int</span> <span class="kwa">o</span> sp <span class="num">1</span> <span class="kwa">o</span> <span class="kwb">int</span> <span class="kwa">o</span> sp <span class="num">1</span> <span class="kwa">o</span> <span class="kwb">int</span> <span class="kwa">o</span> nl<span class="sym">)</span>
			 <span class="sym">(</span>T.lookup h1 f1<span class="sym">) (</span>T.lookup h1 f9999<span class="sym">)</span>
			 <span class="sym">(!(</span>T.lookup h2 f1<span class="sym">)) (!(</span>T.lookup h2 f9999<span class="sym">)));</span>
	   OS.Process.success
	<span class="kwa">end</span>

    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1</span>
      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
<span class="kwa">end</span>
