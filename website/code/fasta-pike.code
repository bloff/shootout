<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Lance Dillon</span>
<span class="com">*/</span>

class Frequency <span class="sym">{</span>
  <span class="kwb">string</span> code<span class="sym">;</span>
  <span class="kwb">float</span> percent<span class="sym">;</span>

  <span class="kwb">void</span> <span class="kwd">create</span><span class="sym">(</span><span class="kwb">string</span> c<span class="sym">,</span> <span class="kwb">float</span> p<span class="sym">) {</span>
    code<span class="sym">=</span>c<span class="sym">;</span>
    percent<span class="sym">=</span>p<span class="sym">;</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span> argv<span class="sym">) {</span>
  <span class="kwb">string</span> ALU<span class="sym">=</span><span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
      <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
      <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
      <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
      <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
      <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
      <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;</span>

  <span class="kwb">array</span><span class="sym">(</span>Frequency<span class="sym">)</span> IUB<span class="sym">=({</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;a&quot;</span><span class="sym">,</span><span class="num">0.27</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;c&quot;</span><span class="sym">,</span><span class="num">0.12</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;g&quot;</span><span class="sym">,</span><span class="num">0.12</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;t&quot;</span><span class="sym">,</span><span class="num">0.27</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;B&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;D&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;H&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;K&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;M&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;N&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;R&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;S&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;V&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;W&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>
	       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;Y&quot;</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">)</span>
  <span class="sym">});</span>

  <span class="kwb">array</span><span class="sym">(</span>Frequency<span class="sym">)</span> HomoSapiens<span class="sym">=({</span> <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;a&quot;</span><span class="sym">,</span><span class="num">0.3029549426680</span><span class="sym">),</span>
		       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;c&quot;</span><span class="sym">,</span><span class="num">0.1979883004921</span><span class="sym">),</span>
		       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;g&quot;</span><span class="sym">,</span><span class="num">0.1975473066391</span><span class="sym">),</span>
		       <span class="kwd">Frequency</span><span class="sym">(</span><span class="str">&quot;t&quot;</span><span class="sym">,</span><span class="num">0.3015094502008</span><span class="sym">)</span>
  <span class="sym">});</span>

  <span class="kwd">makeCumulative</span><span class="sym">(</span>HomoSapiens<span class="sym">);</span>
  <span class="kwd">makeCumulative</span><span class="sym">(</span>IUB<span class="sym">);</span>

  <span class="kwb">int</span> n<span class="sym">=(</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
  <span class="kwd">makeRepeatFasta</span><span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span><span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span>ALU<span class="sym">,</span>n<span class="sym">*</span><span class="num">2</span><span class="sym">);</span>
  <span class="kwd">makeRandomFasta</span><span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span><span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span>IUB<span class="sym">,</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">);</span>
  <span class="kwd">makeRandomFasta</span><span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span><span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span>HomoSapiens<span class="sym">,</span>n<span class="sym">*</span><span class="num">5</span><span class="sym">);</span>

<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">makeCumulative</span><span class="sym">(</span><span class="kwb">array</span><span class="sym">(</span>Frequency<span class="sym">)</span> a<span class="sym">) {</span>
  <span class="kwb">float</span> cp<span class="sym">=</span><span class="num">0.0</span><span class="sym">;</span>
  <span class="kwd">foreach</span> <span class="sym">(</span>a<span class="sym">;</span> <span class="kwb">int</span> ind<span class="sym">;</span> Frequency f<span class="sym">) {</span>
    cp<span class="sym">+=</span>f<span class="sym">-&gt;</span>percent<span class="sym">;</span>
    f<span class="sym">-&gt;</span>percent<span class="sym">=</span>cp<span class="sym">;</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">string</span> <span class="kwd">selectRandom</span><span class="sym">(</span><span class="kwb">array</span><span class="sym">(</span>Frequency<span class="sym">)</span> a<span class="sym">) {</span>
  <span class="kwb">float</span> r<span class="sym">=</span><span class="kwd">myrandom</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span>
  <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="kwa">sizeof</span><span class="sym">(</span>a<span class="sym">);</span> i<span class="sym">++)</span>
    <span class="kwd">if</span> <span class="sym">(</span>r<span class="sym">&lt;</span>a<span class="sym">[</span>i<span class="sym">]-&gt;</span>percent<span class="sym">)</span>
      return a<span class="sym">[</span>i<span class="sym">]-&gt;</span>code<span class="sym">;</span>
  return a<span class="sym">[-</span><span class="num">1</span><span class="sym">]-&gt;</span>code<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> LineLength<span class="sym">=</span><span class="num">60</span><span class="sym">;</span>

<span class="kwb">void</span> <span class="kwd">makeRandomFasta</span><span class="sym">(</span><span class="kwb">string</span> id<span class="sym">,</span> <span class="kwb">string</span> desc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span>Frequency<span class="sym">)</span> a<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {</span>
  <span class="kwb">int</span> m<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
  <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">+</span>id<span class="sym">+</span><span class="str">&quot; &quot;</span><span class="sym">+</span>desc<span class="sym">+</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

  <span class="kwd">while</span> <span class="sym">(</span>n<span class="sym">&gt;</span><span class="num">0</span><span class="sym">) {</span>
    <span class="kwd">if</span> <span class="sym">(</span>n<span class="sym">&lt;</span>LineLength<span class="sym">)</span>
      m<span class="sym">=</span>n<span class="sym">;</span>
    else
      m<span class="sym">=</span>LineLength<span class="sym">;</span>
    <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>m<span class="sym">;</span> i<span class="sym">++)</span>
      <span class="kwa">write</span><span class="sym">(</span><span class="kwd">selectRandom</span><span class="sym">(</span>a<span class="sym">));</span>
    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
    n<span class="sym">-=</span>LineLength<span class="sym">;</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">makeRepeatFasta</span><span class="sym">(</span><span class="kwb">string</span> id<span class="sym">,</span> <span class="kwb">string</span> desc<span class="sym">,</span> <span class="kwb">string</span> alu<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {</span>
  <span class="kwb">int</span> m<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
  <span class="kwb">int</span> k<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
  <span class="kwb">int</span> kn<span class="sym">=</span><span class="kwa">sizeof</span><span class="sym">(</span>alu<span class="sym">);</span>

  <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">+</span>id<span class="sym">+</span><span class="str">&quot; &quot;</span><span class="sym">+</span>desc<span class="sym">+</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

  <span class="kwd">while</span> <span class="sym">(</span>n<span class="sym">&gt;</span><span class="num">0</span><span class="sym">) {</span>
    <span class="kwd">if</span> <span class="sym">(</span>n<span class="sym">&lt;</span>LineLength<span class="sym">)</span>
      m<span class="sym">=</span>n<span class="sym">;</span>
    else
      m<span class="sym">=</span>LineLength<span class="sym">;</span>
    <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>m<span class="sym">;</span> i<span class="sym">++) {</span>
      <span class="kwd">if</span> <span class="sym">(</span>k<span class="sym">==</span>kn<span class="sym">)</span>
	k<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
      <span class="kwa">write</span><span class="sym">(</span><span class="kwa">sprintf</span><span class="sym">(</span><span class="str">&quot;%c&quot;</span><span class="sym">,</span>alu<span class="sym">[</span>k<span class="sym">]));</span>
      k<span class="sym">++;</span>
    <span class="sym">}</span>
    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
    n<span class="sym">-=</span>LineLength<span class="sym">;</span>
  <span class="sym">}</span>
<span class="sym">}</span>
<span class="kwb">constant</span> IM<span class="sym">=</span><span class="num">139968</span><span class="sym">;</span>
<span class="kwb">constant</span> IA<span class="sym">=</span><span class="num">3877</span><span class="sym">;</span>
<span class="kwb">constant</span> IC<span class="sym">=</span><span class="num">29573</span><span class="sym">;</span>
<span class="kwb">int</span> seed<span class="sym">=</span><span class="num">42</span><span class="sym">;</span>

<span class="kwb">float</span> <span class="kwd">myrandom</span><span class="sym">(</span><span class="kwb">float</span> <span class="kwa">max</span><span class="sym">) {</span>
  seed<span class="sym">=(</span>seed<span class="sym">*</span>IA<span class="sym">+</span>IC<span class="sym">)%</span>IM<span class="sym">;</span>
  <span class="kwd">return</span> <span class="sym">(</span><span class="kwa">max</span><span class="sym">*</span>seed<span class="sym">/</span>IM<span class="sym">);</span>
<span class="sym">}</span>
