#<span class="sym">!</span>.<span class="sym">/</span>parrot <span class="sym">-</span>C
# Contributed by Shane Calimlim<span class="sym">,</span> Leopold Toetsch<span class="sym">,</span> <span class="kwa">and</span>
# others from the Perl<span class="sym">-</span>internals mailing list.
#
.<span class="kwa">sub</span> main <span class="sym">:</span>main
    .param pmc argv
    .<span class="kwa">local int</span> argc
    argc <span class="sym">=</span> elements argv
    .<span class="kwa">local int</span> x<span class="sym">,</span> y<span class="sym">,</span> r
    x <span class="sym">=</span> <span class="num">3</span>
    y <span class="sym">=</span> <span class="num">9</span>
    if argc <span class="sym">==</span> <span class="num">1</span> goto go
    $S0 <span class="sym">=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
    if argc <span class="sym">==</span> <span class="num">2</span> goto xdefault
    x <span class="sym">=</span> $S0
    $S0 <span class="sym">=</span> argv<span class="sym">[</span><span class="num">2</span><span class="sym">]</span>
    y <span class="sym">=</span> $S0
    goto go
xdefault<span class="sym">:</span>
    y <span class="sym">=</span> $S0
go<span class="sym">:</span>
    $P0 <span class="sym">=</span> getinterp
    $P0.<span class="str">'recursion_limit'</span><span class="sym">(</span><span class="num">1000000</span><span class="sym">)</span>
    r <span class="sym">=</span> ack<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">)</span>
    .<span class="kwa">local</span> pmc args
    args <span class="sym">=</span> new .ResizableIntegerArray
    <span class="kwa">push</span> args<span class="sym">,</span> x
    <span class="kwa">push</span> args<span class="sym">,</span> y
    <span class="kwa">push</span> args<span class="sym">,</span> r
    $S0 <span class="sym">=</span> sprintf <span class="str">&quot;Ack(%d, %d) = %d\n&quot;</span><span class="sym">,</span> args
    print $S0
.<span class="kwa">end</span>

.<span class="kwa">sub</span> ack
    .param <span class="kwa">int</span> x
    .param <span class="kwa">int</span> y
    if x goto a1
	$I0 <span class="sym">=</span> y <span class="sym">+</span> <span class="num">1</span>
	.return <span class="sym">(</span>$I0<span class="sym">)</span>
a1<span class="sym">:</span>
    if y goto a2
	$I0 <span class="sym">=</span> x <span class="sym">-</span> <span class="num">1</span>
	$I1 <span class="sym">=</span> <span class="num">1</span>
	.return ack<span class="sym">(</span>$I0<span class="sym">,</span> $I1<span class="sym">)</span>
a2<span class="sym">:</span>
    $I2 <span class="sym">=</span> y <span class="sym">-</span> <span class="num">1</span>
    $I3 <span class="sym">=</span> ack<span class="sym">(</span>x<span class="sym">,</span> $I2<span class="sym">)</span>
    $I4 <span class="sym">=</span> x <span class="sym">-</span> <span class="num">1</span>
    .return ack<span class="sym">(</span>$I4<span class="sym">,</span> $I3<span class="sym">)</span>
.<span class="kwa">end</span>

