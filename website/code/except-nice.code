<span class="com">/* The Great Computer Language Shootout
    contributed by Isaac Gouy

To compile:
	   nicec --sourcepath=.. -d=. -a except.jar except

To run:
   java -ea -jar except.jar 20000
*/</span>

<span class="kwb">int</span> toSinglePositiveInt<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> s<span class="sym">)
 </span>   <span class="kwa">ensures</span> result <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> <span class="slc">// postcondition
</span>
toSinglePositiveInt<span class="sym">(</span>s<span class="sym">){
</span>   <span class="kwa">try</span> <span class="sym">{
 </span>      <span class="kwb">int</span> i <span class="sym">=</span>  <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> i<span class="sym">;</span> <span class="kwa">else return</span> <span class="num">1</span><span class="sym">;
    }
</span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">){</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">; }
}

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   <span class="kwa">let</span> n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);

</span>   <span class="kwa">for</span><span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> some_function<span class="sym">(</span>i<span class="sym">);

</span>   print<span class="sym">(</span><span class="str">&quot;Exceptions: HI=&quot;</span><span class="sym">);</span> print<span class="sym">(</span>Hi<span class="sym">);
 </span>   print<span class="sym">(</span><span class="str">&quot; / LO=&quot;</span><span class="sym">);</span> println<span class="sym">(</span>Lo<span class="sym">);
}

</span><span class="kwa">class</span> Lo_Exception <span class="kwa">extends</span> <span class="kwc">Exception</span> <span class="sym">{}
</span><span class="kwa">class</span> Hi_Exception <span class="kwa">extends</span> <span class="kwc">Exception</span> <span class="sym">{}

</span>var <span class="kwb">int</span> Lo <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>var <span class="kwb">int</span> Hi <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>var Lo_Exception loEx <span class="sym">=</span> <span class="kwa">new</span> Lo_Exception<span class="sym">(</span><span class="str">&quot;Lo_Exception&quot;</span><span class="sym">);
</span>var Hi_Exception hiEx <span class="sym">=</span> <span class="kwa">new</span> Hi_Exception<span class="sym">(</span><span class="str">&quot;Hi_Exception&quot;</span><span class="sym">);

</span><span class="kwb">void</span> blowup<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>   <span class="kwa">if</span> <span class="sym">((</span>n <span class="sym">%</span> <span class="num">2</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">throw</span> loEx<span class="sym">;</span> <span class="kwa">else throw</span> hiEx<span class="sym">;
}

</span><span class="kwb">void</span> lo_function<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>   <span class="kwa">try</span> <span class="sym">{</span> blowup<span class="sym">(</span>n<span class="sym">); }
 </span>   <span class="kwa">catch</span> <span class="sym">(</span>Lo_Exception e<span class="sym">) {</span> Lo<span class="sym">++; }
}

</span><span class="kwb">void</span> hi_function<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>   <span class="kwa">try</span> <span class="sym">{</span> lo_function<span class="sym">(</span>n<span class="sym">); }
 </span>   <span class="kwa">catch</span> <span class="sym">(</span>Hi_Exception e<span class="sym">) {</span> Hi<span class="sym">++; }
}


</span><span class="kwb">void</span> some_function<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
</span>   <span class="kwa">try</span> <span class="sym">{</span> hi_function<span class="sym">(</span>n<span class="sym">); }
 </span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">)
       {</span> println<span class="sym">(</span><span class="str">&quot;We shouldn't get here: &quot;</span> <span class="sym">+</span> e<span class="sym">.</span>toString<span class="sym">()); }
}</span>
