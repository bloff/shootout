<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* The Great Computer Language Shootout 
   contributed by Isaac Gouy

To compile:	
   nicec --sourcepath=.. -d=. -a except.jar except

To run:
   java -ea -jar except.jar 20000
*/</FONT></I>

<B><FONT COLOR="#A020F0">int</FONT></B> toSinglePositiveInt(String[] s) 
   ensures result &gt; 0; <I><FONT COLOR="#B22222">// postcondition
</FONT></I>
toSinglePositiveInt(s){
   <B><FONT COLOR="#A020F0">try</FONT></B> { 
      <B><FONT COLOR="#A020F0">int</FONT></B> i =  Integer.parseInt(s[0]);
      <B><FONT COLOR="#A020F0">if</FONT></B> (i&gt;0) <B><FONT COLOR="#A020F0">return</FONT></B> i; <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">return</FONT></B> 1;
    }
   <B><FONT COLOR="#A020F0">catch</FONT></B> (Exception e){ <B><FONT COLOR="#A020F0">return</FONT></B> 1; }
}

<B><FONT COLOR="#A020F0">void</FONT></B> main(String[] args){
   let n = toSinglePositiveInt(args);

   <B><FONT COLOR="#A020F0">for</FONT></B>(var i=0; i&lt;n; i++) some_function(i);

   print(<B><FONT COLOR="#BC8F8F">&quot;Exceptions: HI=&quot;</FONT></B>); print(Hi); 
   print(<B><FONT COLOR="#BC8F8F">&quot; / LO=&quot;</FONT></B>); println(Lo);
}

<B><FONT COLOR="#A020F0">class</FONT></B> Lo_Exception <B><FONT COLOR="#A020F0">extends</FONT></B> Exception {}
<B><FONT COLOR="#A020F0">class</FONT></B> Hi_Exception <B><FONT COLOR="#A020F0">extends</FONT></B> Exception {}

var <B><FONT COLOR="#A020F0">int</FONT></B> Lo = 0;
var <B><FONT COLOR="#A020F0">int</FONT></B> Hi = 0;
var Lo_Exception loEx = <B><FONT COLOR="#A020F0">new</FONT></B> Lo_Exception(<B><FONT COLOR="#BC8F8F">&quot;Lo_Exception&quot;</FONT></B>);
var Hi_Exception hiEx = <B><FONT COLOR="#A020F0">new</FONT></B> Hi_Exception(<B><FONT COLOR="#BC8F8F">&quot;Hi_Exception&quot;</FONT></B>);

<B><FONT COLOR="#A020F0">void</FONT></B> blowup(<B><FONT COLOR="#A020F0">int</FONT></B> n) {
   <B><FONT COLOR="#A020F0">if</FONT></B> ((n % 2) == 0) <B><FONT COLOR="#A020F0">throw</FONT></B> loEx; <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">throw</FONT></B> hiEx;
}

<B><FONT COLOR="#A020F0">void</FONT></B> lo_function(<B><FONT COLOR="#A020F0">int</FONT></B> n) {
   <B><FONT COLOR="#A020F0">try</FONT></B> { blowup(n); } 
   <B><FONT COLOR="#A020F0">catch</FONT></B> (Lo_Exception e) { Lo++; }
}

<B><FONT COLOR="#A020F0">void</FONT></B> hi_function(<B><FONT COLOR="#A020F0">int</FONT></B> n) {
   <B><FONT COLOR="#A020F0">try</FONT></B> { lo_function(n); } 
   <B><FONT COLOR="#A020F0">catch</FONT></B> (Hi_Exception e) { Hi++; }
}


<B><FONT COLOR="#A020F0">void</FONT></B> some_function(<B><FONT COLOR="#A020F0">int</FONT></B> n) {
   <B><FONT COLOR="#A020F0">try</FONT></B> { hi_function(n); } 
   <B><FONT COLOR="#A020F0">catch</FONT></B> (Exception e) 
      { println(<B><FONT COLOR="#BC8F8F">&quot;We shouldn't get here: &quot;</FONT></B> + e.toString()); }
}</pre></td></tr></table>
