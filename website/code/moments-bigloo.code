<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: moments-bigloo.code,v 1.7 2006-09-20 05:51:57 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org</span>
<span class="slc">;;;</span>
<span class="slc">;;; Improved version by Sven Hartrumpf</span>

<span class="sym">(</span>module moments
        <span class="sym">(</span>extern <span class="sym">(</span>macro printf<span class="sym">::</span>int <span class="sym">(</span>string double<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">))</span>
        <span class="sym">(</span>main main<span class="sym">))</span>

<span class="sym">(</span>define vector<span class="sym">-</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>pred v<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))</span>
       <span class="sym">(</span>v<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> v<span class="sym">)))</span>
      <span class="sym">((&gt;=</span> i v<span class="sym">-</span><span class="kwa">length</span><span class="sym">))</span>
    <span class="sym">(</span>pred <span class="sym">(</span>vector<span class="sym">-</span>ref v i<span class="sym">)))))</span>


<span class="slc">; algorithm from C.A.R. Hoare:</span>

<span class="sym">(</span>define vector<span class="sym">-</span>kmedian<span class="sym">! (</span><span class="kwa">lambda</span> <span class="sym">(</span>a n k<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>a<span class="sym">-</span>offset <span class="num">0</span><span class="sym">))</span>
    <span class="sym">(</span>define <span class="sym">(</span>a<span class="sym">-</span>ref i<span class="sym">)</span>
      <span class="sym">(</span>vector<span class="sym">-</span>ref a <span class="sym">(+</span> i a<span class="sym">-</span>offset<span class="sym">)))</span>
    <span class="sym">(</span>define <span class="sym">(</span>a<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> i value<span class="sym">)</span>
      <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a <span class="sym">(+</span> i a<span class="sym">-</span>offset<span class="sym">)</span> value<span class="sym">))</span>
    <span class="sym">(</span>let loop <span class="sym">()</span>
      <span class="sym">(</span>let <span class="sym">((</span>b <span class="sym">(</span>a<span class="sym">-</span>ref <span class="sym">(</span>random n<span class="sym">)))</span>
            <span class="sym">(</span>i <span class="num">0</span><span class="sym">)</span>
            <span class="sym">(</span>j <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)))</span>
        <span class="sym">(</span>let loop<span class="sym">-</span>for<span class="sym">-</span>swap <span class="sym">()</span>
          <span class="sym">(</span>let iter <span class="sym">() (</span><span class="kwa">cond</span> <span class="sym">((&lt; (</span>a<span class="sym">-</span>ref i<span class="sym">)</span> b<span class="sym">)</span>
                              <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> i <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))</span>
                              <span class="sym">(</span>iter<span class="sym">))))</span>
          <span class="sym">(</span>let iter <span class="sym">() (</span><span class="kwa">cond</span> <span class="sym">((&gt; (</span>a<span class="sym">-</span>ref j<span class="sym">)</span> b<span class="sym">)</span>
                              <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(-</span> j <span class="num">1</span><span class="sym">))</span>
                              <span class="sym">(</span>iter<span class="sym">))))</span>
          <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> i j<span class="sym">)</span>
                 <span class="sym">(</span>let <span class="sym">((</span>tmp <span class="sym">(</span>a<span class="sym">-</span>ref i<span class="sym">)))</span>
                   <span class="sym">(</span>a<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> i <span class="sym">(</span>a<span class="sym">-</span>ref j<span class="sym">))</span>
                   <span class="sym">(</span>a<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> j tmp<span class="sym">)</span>
                   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> i <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))</span>
                   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(-</span> j <span class="num">1</span><span class="sym">))</span>
                   <span class="sym">(</span>loop<span class="sym">-</span>for<span class="sym">-</span>swap<span class="sym">)))</span>
                <span class="sym">(</span>else
                  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt; (</span>a<span class="sym">-</span>ref j<span class="sym">)</span> b<span class="sym">)</span>
                         <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))</span>
                  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt; (</span>a<span class="sym">-</span>ref i<span class="sym">)</span> b<span class="sym">)</span>
                         <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> i <span class="sym">(-</span> i <span class="num">1</span><span class="sym">)))))))</span>
        <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> i k<span class="sym">)</span>
               <span class="sym">(</span>let <span class="sym">((</span>i1 <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
                 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> k <span class="sym">(-</span> k i1<span class="sym">))</span>
                 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> n <span class="sym">(-</span> n i1<span class="sym">))</span>
                 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> a<span class="sym">-</span>offset <span class="sym">(+</span> a<span class="sym">-</span>offset i1<span class="sym">))</span>
                 <span class="sym">(</span>loop<span class="sym">)))</span>
              <span class="sym">((&gt;</span> j k<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> n j<span class="sym">)</span>
               <span class="sym">(</span>loop<span class="sym">))))))))</span>


<span class="slc">;</span>

<span class="sym">(</span>define vector<span class="sym">-</span><span class="kwa">max</span> <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>v start end<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>m <span class="sym">(</span>vector<span class="sym">-</span>ref v start<span class="sym">)))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="sym">(+</span> start <span class="num">1</span><span class="sym">) (+</span> i <span class="num">1</span><span class="sym">)))</span>
      <span class="sym">((&gt;=</span> i end<span class="sym">)</span> m<span class="sym">)</span>
      <span class="sym">(</span>let <span class="sym">((</span>x <span class="sym">(</span>vector<span class="sym">-</span>ref v i<span class="sym">)))</span>
        <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> x m<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> m x<span class="sym">))))))))</span>


<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>sum <span class="num">0.0</span><span class="sym">)</span>
         <span class="sym">(</span>nums <span class="sym">(</span><span class="kwa">list</span><span class="sym">-&gt;</span>vector
                 <span class="sym">(</span>let loop <span class="sym">((</span>num <span class="sym">(</span><span class="kwa">read</span><span class="sym">))</span>
                            <span class="sym">(</span>l <span class="str">'()))</span>
<span class="str">                   (cond ((eof-object? num)</span>
<span class="str">                          l)</span>
<span class="str">                         (else</span>
<span class="str">                           (set! sum (+ sum num))</span>
<span class="str">                           (loop (read) (cons num l)))))))</span>
<span class="str">         (n (vector-length nums))</span>
<span class="str">         (mean (/ sum n))</span>
<span class="str">         (average_deviation 0.0)</span>
<span class="str">         (standard_deviation 0.0)</span>
<span class="str">         (variance 0.0)</span>
<span class="str">         (skew 0.0)</span>
<span class="str">         (kurtosis 0.0)</span>
<span class="str">         (median 0.0))</span>
<span class="str">        (vector-for-each</span>
<span class="str">          (lambda (num)</span>
<span class="str">            (let* ((deviation (- num mean))</span>
<span class="str">                   (deviation2 (* deviation deviation)))</span>
<span class="str">              (set! average_deviation (+ average_deviation (abs deviation)))</span>
<span class="str">              (set! variance (+ variance deviation2))</span>
<span class="str">              (set! deviation2 (* deviation2 deviation))</span>
<span class="str">              (set! skew (+ skew deviation2))</span>
<span class="str">              (set! kurtosis (+ kurtosis (* deviation2 deviation)))))</span>
<span class="str">          nums)</span>
<span class="str"></span>
<span class="str">        (set! average_deviation (/ average_deviation n))</span>
<span class="str">        (set! variance (/ variance (- n 1)))</span>
<span class="str">        (set! standard_deviation (sqrt variance))</span>
<span class="str"></span>
<span class="str">        (cond ((&gt; variance 0.0)</span>
<span class="str">               (set! skew (/ skew (* n variance standard_deviation)))</span>
<span class="str">               (set! kurtosis (- (/ kurtosis (* n variance variance))</span>
<span class="str">                                 3.0))))</span>
<span class="str"></span>
<span class="str">        (let ((mid (quotient n 2)))</span>
<span class="str">          (vector-kmedian! nums n mid)</span>
<span class="str">          (set! median (if (zero? (modulo n 2))</span>
<span class="str">                         (/ (+ (vector-ref nums mid) (vector-max nums 0 mid))</span>
<span class="str">                            2.0)</span>
<span class="str">                         (vector-ref nums mid))))</span>
<span class="str"></span>
<span class="str">        (print &quot;n:                  &quot; n)</span>
<span class="str">        (printf #&quot;median:             %f</span><span class="esc">\n</span><span class="str">&quot; median)</span>
<span class="str">        (printf #&quot;mean:               %f</span><span class="esc">\n</span><span class="str">&quot; mean)</span>
<span class="str">        (printf #&quot;average_deviation:  %f</span><span class="esc">\n</span><span class="str">&quot; average_deviation)</span>
<span class="str">        (printf #&quot;standard_deviation: %f</span><span class="esc">\n</span><span class="str">&quot; standard_deviation)</span>
<span class="str">        (printf #&quot;variance:           %f</span><span class="esc">\n</span><span class="str">&quot; variance)</span>
<span class="str">        (printf #&quot;skew:               %f</span><span class="esc">\n</span><span class="str">&quot; skew)</span>
<span class="str">        (printf #&quot;kurtosis:           %f</span><span class="esc">\n</span><span class="str">&quot; kurtosis)))</span>
<span class="str"></span>
