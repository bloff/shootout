<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: scheme -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: moments-bigloo.code,v 1.2 2004-11-08 08:15:17 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org
</FONT></I><I><FONT COLOR="#B22222">;;;
</FONT></I><I><FONT COLOR="#B22222">;;; Improved version by Sven Hartrumpf
</FONT></I>
(module moments
        (extern (macro printf::int (string double) <B><FONT COLOR="#BC8F8F">&quot;printf&quot;</FONT></B>))
        (main main))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">vector-for-each</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (pred v)
  (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (+ i 1))
       (v-length (vector-length v)))
      ((&gt;= i v-length))
    (pred (vector-ref v i)))))


<I><FONT COLOR="#B22222">; algorithm from C.A.R. Hoare:
</FONT></I>
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">vector-kmedian!</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (a n k)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((a-offset 0))
    (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">a-ref</FONT></B> i)
      (vector-ref a (+ i a-offset)))
    (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">a-set!</FONT></B> i value)
      (vector-set! a (+ i a-offset) value))
    (<B><FONT COLOR="#A020F0">let</FONT></B> loop ()
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((b (a-ref (random n)))
            (i 0)
            (j (- n 1)))
        (<B><FONT COLOR="#A020F0">let</FONT></B> loop-for-swap ()
          (<B><FONT COLOR="#A020F0">let</FONT></B> iter () (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&lt; (a-ref i) b)
                              (<B><FONT COLOR="#A020F0">set!</FONT></B> i (+ i 1))
                              (iter))))
          (<B><FONT COLOR="#A020F0">let</FONT></B> iter () (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; (a-ref j) b)
                              (<B><FONT COLOR="#A020F0">set!</FONT></B> j (- j 1))
                              (iter))))
          (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&lt; i j)
                 (<B><FONT COLOR="#A020F0">let</FONT></B> ((tmp (a-ref i)))
                   (a-set! i (a-ref j))
                   (a-set! j tmp)
                   (<B><FONT COLOR="#A020F0">set!</FONT></B> i (+ i 1))
                   (<B><FONT COLOR="#A020F0">set!</FONT></B> j (- j 1))
                   (loop-for-swap)))
                (<B><FONT COLOR="#A020F0">else</FONT></B>
                  (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&lt; (a-ref j) b)
                         (<B><FONT COLOR="#A020F0">set!</FONT></B> j (+ j 1))))
                  (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; (a-ref i) b)
                         (<B><FONT COLOR="#A020F0">set!</FONT></B> i (- i 1)))))))
        (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&lt; i k)
               (<B><FONT COLOR="#A020F0">let</FONT></B> ((i1 (+ i 1)))
                 (<B><FONT COLOR="#A020F0">set!</FONT></B> k (- k i1))
                 (<B><FONT COLOR="#A020F0">set!</FONT></B> n (- n i1))
                 (<B><FONT COLOR="#A020F0">set!</FONT></B> a-offset (+ a-offset i1))
                 (loop)))
              ((&gt; j k)
               (<B><FONT COLOR="#A020F0">set!</FONT></B> n j)
               (loop))))))))


<I><FONT COLOR="#B22222">;
</FONT></I>
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">vector-max</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (v start end)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((m (vector-ref v start)))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i (+ start 1) (+ i 1)))
      ((&gt;= i end) m)
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((x (vector-ref v i)))
        (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; x m)
               (<B><FONT COLOR="#A020F0">set!</FONT></B> m x))))))))


(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((sum 0.0)
         (nums (list-&gt;vector
                 (<B><FONT COLOR="#A020F0">let</FONT></B> loop ((num (read))
                            (l '()))
                   (<B><FONT COLOR="#A020F0">cond</FONT></B> ((eof-object? num)
                          l)
                         (<B><FONT COLOR="#A020F0">else</FONT></B>
                           (<B><FONT COLOR="#A020F0">set!</FONT></B> sum (+ sum num))
                           (loop (read) (cons num l)))))))
         (n (vector-length nums))
         (mean (/ sum n))
         (average_deviation 0.0)
         (standard_deviation 0.0)
         (variance 0.0)
         (skew 0.0)
         (kurtosis 0.0)
         (median 0.0))
        (vector-for-each
          (<B><FONT COLOR="#A020F0">lambda</FONT></B> (num)
            (<B><FONT COLOR="#A020F0">let*</FONT></B> ((deviation (- num mean))
                   (deviation2 (* deviation deviation)))
              (<B><FONT COLOR="#A020F0">set!</FONT></B> average_deviation (+ average_deviation (abs deviation)))
              (<B><FONT COLOR="#A020F0">set!</FONT></B> variance (+ variance deviation2))
              (<B><FONT COLOR="#A020F0">set!</FONT></B> deviation2 (* deviation2 deviation))
              (<B><FONT COLOR="#A020F0">set!</FONT></B> skew (+ skew deviation2))
              (<B><FONT COLOR="#A020F0">set!</FONT></B> kurtosis (+ kurtosis (* deviation2 deviation)))))
          nums)

        (<B><FONT COLOR="#A020F0">set!</FONT></B> average_deviation (/ average_deviation n))
        (<B><FONT COLOR="#A020F0">set!</FONT></B> variance (/ variance (- n 1)))
        (<B><FONT COLOR="#A020F0">set!</FONT></B> standard_deviation (sqrt variance))

        (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; variance 0.0)
               (<B><FONT COLOR="#A020F0">set!</FONT></B> skew (/ skew (* n variance standard_deviation)))
               (<B><FONT COLOR="#A020F0">set!</FONT></B> kurtosis (- (/ kurtosis (* n variance variance))
                                 3.0))))

        (<B><FONT COLOR="#A020F0">let</FONT></B> ((mid (quotient n 2)))
          (vector-kmedian! nums n mid)
          (<B><FONT COLOR="#A020F0">set!</FONT></B> median (<B><FONT COLOR="#A020F0">if</FONT></B> (zero? (modulo n 2))
                         (/ (+ (vector-ref nums mid) (vector-max nums 0 mid))
                            2.0)
                         (vector-ref nums mid))))

        (print <B><FONT COLOR="#BC8F8F">&quot;n:                  &quot;</FONT></B> n)
        (printf #<B><FONT COLOR="#BC8F8F">&quot;median:             %f\n&quot;</FONT></B> median)
        (printf #<B><FONT COLOR="#BC8F8F">&quot;mean:               %f\n&quot;</FONT></B> mean)
        (printf #<B><FONT COLOR="#BC8F8F">&quot;average_deviation:  %f\n&quot;</FONT></B> average_deviation)
        (printf #<B><FONT COLOR="#BC8F8F">&quot;standard_deviation: %f\n&quot;</FONT></B> standard_deviation)
        (printf #<B><FONT COLOR="#BC8F8F">&quot;variance:           %f\n&quot;</FONT></B> variance)
        (printf #<B><FONT COLOR="#BC8F8F">&quot;skew:               %f\n&quot;</FONT></B> skew)
        (printf #<B><FONT COLOR="#BC8F8F">&quot;kurtosis:           %f\n&quot;</FONT></B> kurtosis)))
</pre></td></tr></table>
