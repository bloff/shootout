<span class="line">    1 </span><span class="slc">;;; -*- mode: scheme -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: moments-bigloo.code,v 1.4 2004-11-13 07:42:18 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">;;;
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">;;; Improved version by Sven Hartrumpf
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="sym">(</span>module moments
<span class="line">    8 </span>        <span class="sym">(</span>extern <span class="sym">(</span>macro printf<span class="sym">::</span>int <span class="sym">(</span>string double<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">))
</span><span class="line">    9 </span><span class="sym">        (</span>main main<span class="sym">))
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym">(</span>define vector<span class="sym">-</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>pred v<span class="sym">)
</span><span class="line">   12 </span><span class="sym">  (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))
</span><span class="line">   13 </span><span class="sym">       (</span>v<span class="sym">-</span><span class="kwa">length</span> <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> v<span class="sym">)))
</span><span class="line">   14 </span><span class="sym">      ((&gt;=</span> i v<span class="sym">-</span><span class="kwa">length</span><span class="sym">))
</span><span class="line">   15 </span><span class="sym">    (</span>pred <span class="sym">(</span>vector<span class="sym">-</span>ref v i<span class="sym">)))))
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span><span class="slc">; algorithm from C.A.R. Hoare:
</span><span class="line">   19 </span><span class="slc"></span>
<span class="line">   20 </span><span class="sym">(</span>define vector<span class="sym">-</span>kmedian<span class="sym">! (</span><span class="kwa">lambda</span> <span class="sym">(</span>a n k<span class="sym">)
</span><span class="line">   21 </span><span class="sym">  (</span>let <span class="sym">((</span>a<span class="sym">-</span>offset <span class="num">0</span><span class="sym">))
</span><span class="line">   22 </span><span class="sym">    (</span>define <span class="sym">(</span>a<span class="sym">-</span>ref i<span class="sym">)
</span><span class="line">   23 </span><span class="sym">      (</span>vector<span class="sym">-</span>ref a <span class="sym">(+</span> i a<span class="sym">-</span>offset<span class="sym">)))
</span><span class="line">   24 </span><span class="sym">    (</span>define <span class="sym">(</span>a<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> i value<span class="sym">)
</span><span class="line">   25 </span><span class="sym">      (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a <span class="sym">(+</span> i a<span class="sym">-</span>offset<span class="sym">)</span> value<span class="sym">))
</span><span class="line">   26 </span><span class="sym">    (</span>let loop <span class="sym">()
</span><span class="line">   27 </span><span class="sym">      (</span>let <span class="sym">((</span>b <span class="sym">(</span>a<span class="sym">-</span>ref <span class="sym">(</span>random n<span class="sym">)))
</span><span class="line">   28 </span><span class="sym">            (</span>i <span class="num">0</span><span class="sym">)
</span><span class="line">   29 </span><span class="sym">            (</span>j <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)))
</span><span class="line">   30 </span><span class="sym">        (</span>let loop<span class="sym">-</span>for<span class="sym">-</span>swap <span class="sym">()
</span><span class="line">   31 </span><span class="sym">          (</span>let iter <span class="sym">() (</span><span class="kwa">cond</span> <span class="sym">((&lt; (</span>a<span class="sym">-</span>ref i<span class="sym">)</span> b<span class="sym">)
</span><span class="line">   32 </span><span class="sym">                              (</span><span class="kwa">set</span><span class="sym">!</span> i <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))
</span><span class="line">   33 </span><span class="sym">                              (</span>iter<span class="sym">))))
</span><span class="line">   34 </span><span class="sym">          (</span>let iter <span class="sym">() (</span><span class="kwa">cond</span> <span class="sym">((&gt; (</span>a<span class="sym">-</span>ref j<span class="sym">)</span> b<span class="sym">)
</span><span class="line">   35 </span><span class="sym">                              (</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(-</span> j <span class="num">1</span><span class="sym">))
</span><span class="line">   36 </span><span class="sym">                              (</span>iter<span class="sym">))))
</span><span class="line">   37 </span><span class="sym">          (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> i j<span class="sym">)
</span><span class="line">   38 </span><span class="sym">                 (</span>let <span class="sym">((</span>tmp <span class="sym">(</span>a<span class="sym">-</span>ref i<span class="sym">)))
</span><span class="line">   39 </span><span class="sym">                   (</span>a<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> i <span class="sym">(</span>a<span class="sym">-</span>ref j<span class="sym">))
</span><span class="line">   40 </span><span class="sym">                   (</span>a<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> j tmp<span class="sym">)
</span><span class="line">   41 </span><span class="sym">                   (</span><span class="kwa">set</span><span class="sym">!</span> i <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))
</span><span class="line">   42 </span><span class="sym">                   (</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(-</span> j <span class="num">1</span><span class="sym">))
</span><span class="line">   43 </span><span class="sym">                   (</span>loop<span class="sym">-</span>for<span class="sym">-</span>swap<span class="sym">)))
</span><span class="line">   44 </span><span class="sym">                (</span>else
<span class="line">   45 </span>                  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt; (</span>a<span class="sym">-</span>ref j<span class="sym">)</span> b<span class="sym">)
</span><span class="line">   46 </span><span class="sym">                         (</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))
</span><span class="line">   47 </span><span class="sym">                  (</span><span class="kwa">cond</span> <span class="sym">((&gt; (</span>a<span class="sym">-</span>ref i<span class="sym">)</span> b<span class="sym">)
</span><span class="line">   48 </span><span class="sym">                         (</span><span class="kwa">set</span><span class="sym">!</span> i <span class="sym">(-</span> i <span class="num">1</span><span class="sym">)))))))
</span><span class="line">   49 </span><span class="sym">        (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> i k<span class="sym">)
</span><span class="line">   50 </span><span class="sym">               (</span>let <span class="sym">((</span>i1 <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
</span><span class="line">   51 </span><span class="sym">                 (</span><span class="kwa">set</span><span class="sym">!</span> k <span class="sym">(-</span> k i1<span class="sym">))
</span><span class="line">   52 </span><span class="sym">                 (</span><span class="kwa">set</span><span class="sym">!</span> n <span class="sym">(-</span> n i1<span class="sym">))
</span><span class="line">   53 </span><span class="sym">                 (</span><span class="kwa">set</span><span class="sym">!</span> a<span class="sym">-</span>offset <span class="sym">(+</span> a<span class="sym">-</span>offset i1<span class="sym">))
</span><span class="line">   54 </span><span class="sym">                 (</span>loop<span class="sym">)))
</span><span class="line">   55 </span><span class="sym">              ((&gt;</span> j k<span class="sym">)
</span><span class="line">   56 </span><span class="sym">               (</span><span class="kwa">set</span><span class="sym">!</span> n j<span class="sym">)
</span><span class="line">   57 </span><span class="sym">               (</span>loop<span class="sym">))))))))
</span><span class="line">   58 </span><span class="sym">
</span><span class="line">   59 </span><span class="sym">
</span><span class="line">   60 </span><span class="sym"></span><span class="slc">;
</span><span class="line">   61 </span><span class="slc"></span>
<span class="line">   62 </span><span class="sym">(</span>define vector<span class="sym">-</span><span class="kwa">max</span> <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>v start end<span class="sym">)
</span><span class="line">   63 </span><span class="sym">  (</span>let <span class="sym">((</span>m <span class="sym">(</span>vector<span class="sym">-</span>ref v start<span class="sym">)))
</span><span class="line">   64 </span><span class="sym">    (</span>do <span class="sym">((</span>i <span class="sym">(+</span> start <span class="num">1</span><span class="sym">) (+</span> i <span class="num">1</span><span class="sym">)))
</span><span class="line">   65 </span><span class="sym">      ((&gt;=</span> i end<span class="sym">)</span> m<span class="sym">)
</span><span class="line">   66 </span><span class="sym">      (</span>let <span class="sym">((</span>x <span class="sym">(</span>vector<span class="sym">-</span>ref v i<span class="sym">)))
</span><span class="line">   67 </span><span class="sym">        (</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> x m<span class="sym">)
</span><span class="line">   68 </span><span class="sym">               (</span><span class="kwa">set</span><span class="sym">!</span> m x<span class="sym">))))))))
</span><span class="line">   69 </span><span class="sym">
</span><span class="line">   70 </span><span class="sym">
</span><span class="line">   71 </span><span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
</span><span class="line">   72 </span><span class="sym">  (</span>let<span class="sym">* ((</span>sum <span class="num">0.0</span><span class="sym">)
</span><span class="line">   73 </span><span class="sym">         (</span>nums <span class="sym">(</span><span class="kwa">list</span><span class="sym">-&gt;</span>vector
<span class="line">   74 </span>                 <span class="sym">(</span>let loop <span class="sym">((</span>num <span class="sym">(</span><span class="kwa">read</span><span class="sym">))
</span><span class="line">   75 </span><span class="sym">                            (</span>l <span class="str">'()))
</span><span class="line">   76 </span><span class="str">                   (cond ((eof-object? num)
</span><span class="line">   77 </span><span class="str">                          l)
</span><span class="line">   78 </span><span class="str">                         (else
</span><span class="line">   79 </span><span class="str">                           (set! sum (+ sum num))
</span><span class="line">   80 </span><span class="str">                           (loop (read) (cons num l)))))))
</span><span class="line">   81 </span><span class="str">         (n (vector-length nums))
</span><span class="line">   82 </span><span class="str">         (mean (/ sum n))
</span><span class="line">   83 </span><span class="str">         (average_deviation 0.0)
</span><span class="line">   84 </span><span class="str">         (standard_deviation 0.0)
</span><span class="line">   85 </span><span class="str">         (variance 0.0)
</span><span class="line">   86 </span><span class="str">         (skew 0.0)
</span><span class="line">   87 </span><span class="str">         (kurtosis 0.0)
</span><span class="line">   88 </span><span class="str">         (median 0.0))
</span><span class="line">   89 </span><span class="str">        (vector-for-each
</span><span class="line">   90 </span><span class="str">          (lambda (num)
</span><span class="line">   91 </span><span class="str">            (let* ((deviation (- num mean))
</span><span class="line">   92 </span><span class="str">                   (deviation2 (* deviation deviation)))
</span><span class="line">   93 </span><span class="str">              (set! average_deviation (+ average_deviation (abs deviation)))
</span><span class="line">   94 </span><span class="str">              (set! variance (+ variance deviation2))
</span><span class="line">   95 </span><span class="str">              (set! deviation2 (* deviation2 deviation))
</span><span class="line">   96 </span><span class="str">              (set! skew (+ skew deviation2))
</span><span class="line">   97 </span><span class="str">              (set! kurtosis (+ kurtosis (* deviation2 deviation)))))
</span><span class="line">   98 </span><span class="str">          nums)
</span><span class="line">   99 </span><span class="str">
</span><span class="line">  100 </span><span class="str">        (set! average_deviation (/ average_deviation n))
</span><span class="line">  101 </span><span class="str">        (set! variance (/ variance (- n 1)))
</span><span class="line">  102 </span><span class="str">        (set! standard_deviation (sqrt variance))
</span><span class="line">  103 </span><span class="str">
</span><span class="line">  104 </span><span class="str">        (cond ((&gt; variance 0.0)
</span><span class="line">  105 </span><span class="str">               (set! skew (/ skew (* n variance standard_deviation)))
</span><span class="line">  106 </span><span class="str">               (set! kurtosis (- (/ kurtosis (* n variance variance))
</span><span class="line">  107 </span><span class="str">                                 3.0))))
</span><span class="line">  108 </span><span class="str">
</span><span class="line">  109 </span><span class="str">        (let ((mid (quotient n 2)))
</span><span class="line">  110 </span><span class="str">          (vector-kmedian! nums n mid)
</span><span class="line">  111 </span><span class="str">          (set! median (if (zero? (modulo n 2))
</span><span class="line">  112 </span><span class="str">                         (/ (+ (vector-ref nums mid) (vector-max nums 0 mid))
</span><span class="line">  113 </span><span class="str">                            2.0)
</span><span class="line">  114 </span><span class="str">                         (vector-ref nums mid))))
</span><span class="line">  115 </span><span class="str">
</span><span class="line">  116 </span><span class="str">        (print &quot;n:                  &quot; n)
</span><span class="line">  117 </span><span class="str">        (printf #&quot;median:             %f</span><span class="esc">\n</span><span class="str">&quot; median)
</span><span class="line">  118 </span><span class="str">        (printf #&quot;mean:               %f</span><span class="esc">\n</span><span class="str">&quot; mean)
</span><span class="line">  119 </span><span class="str">        (printf #&quot;average_deviation:  %f</span><span class="esc">\n</span><span class="str">&quot; average_deviation)
</span><span class="line">  120 </span><span class="str">        (printf #&quot;standard_deviation: %f</span><span class="esc">\n</span><span class="str">&quot; standard_deviation)
</span><span class="line">  121 </span><span class="str">        (printf #&quot;variance:           %f</span><span class="esc">\n</span><span class="str">&quot; variance)
</span><span class="line">  122 </span><span class="str">        (printf #&quot;skew:               %f</span><span class="esc">\n</span><span class="str">&quot; skew)
</span><span class="line">  123 </span><span class="str">        (printf #&quot;kurtosis:           %f</span><span class="esc">\n</span><span class="str">&quot; kurtosis)))
</span><span class="line">  124 </span><span class="str"></span>
