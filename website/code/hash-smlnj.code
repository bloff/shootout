<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: hash-smlnj.code,v 1.8 2006-09-22 02:38:38 bfulgham Exp $</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Updated by Brent Fulgham</span>
<span class="com"> *)</span>

<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
    <span class="kwa">val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>

<span class="kwa">open</span> HashTable<span class="sym">;</span>

<span class="kwa">fun</span> hashtest n <span class="sym">=</span>
    <span class="kwa">let</span>
	<span class="kwa">val</span> hx <span class="sym">=</span> mkTable <span class="sym">(</span>HashString.hashString<span class="sym">,</span> <span class="kwa">op</span> <span class="sym">=) (</span>n<span class="sym">, (</span>Fail <span class="str">&quot;not found&quot;</span><span class="sym">))</span>
	<span class="kwa">fun</span> doinserts i n <span class="sym">=</span>
	    <span class="kwa">if</span> i <span class="sym">&lt;</span> n <span class="kwa">then</span> <span class="sym">(</span>
		insert hx <span class="sym">((</span><span class="kwa">Int</span>.fmt <span class="kwa">StringCvt</span>.HEX i<span class="sym">),</span> i<span class="sym">);</span>
		doinserts <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> n
	    <span class="sym">)</span> <span class="kwa">else</span> <span class="sym">()</span>
	<span class="kwa">fun</span> dolookups i c <span class="sym">=</span>
	    <span class="kwa">if</span> i <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
		<span class="kwa">case</span> find hx <span class="sym">(</span><span class="kwa">Int</span>.toString i<span class="sym">)</span> <span class="kwa">of</span>
		    SOME key <span class="sym">=&gt;</span> dolookups <span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
		  <span class="sym">|</span> _ <span class="sym">=&gt;</span> dolookups <span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> c
	    <span class="kwa">else</span> c
    <span class="kwa">in</span> <span class="sym">(</span>
	doinserts <span class="num">0</span> <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
	dolookups <span class="sym">(</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="num">0</span>
    <span class="sym">)</span> <span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">;</span>

<span class="kwa">fun</span> main<span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>
    <span class="kwa">let</span>
	<span class="kwa">val</span> arg <span class="sym">=</span> hd<span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">])</span>
	<span class="kwa">val</span> num <span class="sym">=</span> atoi arg
	<span class="kwa">val</span> result <span class="sym">=</span> hashtest num
    <span class="kwa">in</span>
	print <span class="sym">(</span><span class="kwa">Int</span>.toString result<span class="sym">) ;</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">;</span>
	OS.Process.success
    <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> SMLofNJ.exportFn<span class="sym">(</span><span class="str">&quot;hash&quot;</span><span class="sym">,</span> Test.main<span class="sym">);</span>
