<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: echo-mlton.code,v 1.4 2004-11-13 07:41:30 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * based on Daniel Wang's version for SML/NJ.
</span><span class="line">    5 </span><span class="com"> * Heavily modified by Stephen Weeks.
</span><span class="line">    6 </span><span class="com"> *)</span>
<span class="line">    7 </span><span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
</span><span class="line">    8 </span><span class="kwa">                    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="line">    9 </span>                 <span class="kwa">end</span> <span class="sym">=
</span><span class="line">   10 </span><span class="sym"></span><span class="kwa">struct
</span><span class="line">   11 </span><span class="kwa">
</span><span class="line">   12 </span><span class="kwa">exception</span> Error <span class="kwa">of</span> <span class="kwb">string
</span><span class="line">   13 </span><span class="kwb">
</span><span class="line">   14 </span><span class="kwb"></span><span class="kwa">val</span> data <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   15 </span><span class="kwa">val</span> dataSize <span class="sym">=</span> <span class="kwa">String</span>.size data
<span class="line">   16 </span>
<span class="line">   17 </span><span class="kwa">fun</span> mkSocks <span class="sym">() =
</span><span class="line">   18 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   19 </span><span class="kwa">      val</span> server <span class="sym">=</span> INetSock.TCP.socket <span class="sym">()
</span><span class="line">   20 </span><span class="sym"></span>      <span class="kwa">val</span> client <span class="sym">=</span> INetSock.TCP.socket <span class="sym">()
</span><span class="line">   21 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> Socket.bind <span class="sym">(</span>server<span class="sym">,</span> INetSock.any <span class="num">0</span><span class="sym">)
</span><span class="line">   22 </span><span class="sym"></span>      <span class="kwa">val</span> saddr <span class="sym">=</span> INetSock.fromAddr <span class="sym">(</span>Socket.Ctl.getSockName server<span class="sym">)
</span><span class="line">   23 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> Socket.listen <span class="sym">(</span>server<span class="sym">,</span> <span class="num">2</span><span class="sym">)
</span><span class="line">   24 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> Socket.connect <span class="sym">(</span>client<span class="sym">,</span> INetSock.toAddr saddr<span class="sym">)
</span><span class="line">   25 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> INetSock.TCP.setNODELAY <span class="sym">(</span>server<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)
</span><span class="line">   26 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> INetSock.TCP.setNODELAY <span class="sym">(</span>client<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)
</span><span class="line">   27 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">   28 </span><span class="kwa"></span>      <span class="sym">{</span>client <span class="sym">=</span> client<span class="sym">,
</span><span class="line">   29 </span><span class="sym"></span>       server <span class="sym">=</span> server<span class="sym">}
</span><span class="line">   30 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">   31 </span><span class="kwa">
</span><span class="line">   32 </span><span class="kwa">fun</span> recvBytes <span class="sym">(</span>sock<span class="sym">,</span> buf<span class="sym">:</span> Word8Array.array<span class="sym">,</span> bytesToRecv<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> <span class="kwb">int</span> <span class="sym">=
</span><span class="line">   33 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   34 </span><span class="kwa">      fun</span> loop offset <span class="sym">=
</span><span class="line">   35 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">   36 </span><span class="kwa">            val</span> r <span class="sym">=
</span><span class="line">   37 </span><span class="sym"></span>               Socket.recvArr <span class="sym">(</span>sock<span class="sym">,</span> Word8ArraySlice.slice <span class="sym">(</span>buf<span class="sym">,</span> offset<span class="sym">,</span> NONE<span class="sym">))
</span><span class="line">   38 </span><span class="sym"></span>         <span class="kwa">in
</span><span class="line">   39 </span><span class="kwa">            if</span> <span class="num">0</span> <span class="sym">=</span> r
<span class="line">   40 </span>               <span class="kwa">then</span> offset
<span class="line">   41 </span>            <span class="kwa">else
</span><span class="line">   42 </span><span class="kwa">               let
</span><span class="line">   43 </span><span class="kwa">                  val</span> offset <span class="sym">=</span> r <span class="sym">+</span> offset
<span class="line">   44 </span>               <span class="kwa">in
</span><span class="line">   45 </span><span class="kwa">                  if</span> offset <span class="sym">=</span> bytesToRecv
<span class="line">   46 </span>                     <span class="kwa">then</span> offset
<span class="line">   47 </span>                  <span class="kwa">else</span> loop offset
<span class="line">   48 </span>               <span class="kwa">end
</span><span class="line">   49 </span><span class="kwa">         end
</span><span class="line">   50 </span><span class="kwa">   in
</span><span class="line">   51 </span><span class="kwa"></span>      loop <span class="num">0
</span><span class="line">   52 </span><span class="num"></span>   <span class="kwa">end
</span><span class="line">   53 </span><span class="kwa">
</span><span class="line">   54 </span><span class="kwa">fun</span> closeSock s <span class="sym">=
</span><span class="line">   55 </span><span class="sym">   (</span>Socket.shutdown <span class="sym">(</span>s<span class="sym">,</span> Socket.NO_RECVS_OR_SENDS<span class="sym">)
</span><span class="line">   56 </span><span class="sym">    ;</span> Socket.close s<span class="sym">)
</span><span class="line">   57 </span><span class="sym">
</span><span class="line">   58 </span><span class="sym"></span><span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">,</span> args<span class="sym">) =
</span><span class="line">   59 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   60 </span><span class="kwa">      val</span> num <span class="sym">=
</span><span class="line">   61 </span><span class="sym"></span>         <span class="kwa">case</span> args <span class="kwa">of
</span><span class="line">   62 </span><span class="kwa"></span>            nil <span class="sym">=&gt;</span> <span class="num">1
</span><span class="line">   63 </span><span class="num"></span>          <span class="sym">|</span> n<span class="sym">::</span>_ <span class="sym">=&gt;</span> valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString n<span class="sym">)
</span><span class="line">   64 </span><span class="sym"></span>      <span class="kwa">val</span> <span class="sym">{</span>client <span class="sym">=</span> client_sock<span class="sym">,</span> server <span class="sym">=</span> server_sock<span class="sym">} =</span> mkSocks <span class="sym">()
</span><span class="line">   65 </span><span class="sym"></span>      <span class="kwa">fun</span> server <span class="sym">() =
</span><span class="line">   66 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">   67 </span><span class="kwa">            val</span> <span class="sym">(</span>sock<span class="sym">,</span> _<span class="sym">) =</span> Socket.accept server_sock
<span class="line">   68 </span>            <span class="kwa">val</span> bufSize <span class="sym">=</span> dataSize
<span class="line">   69 </span>            <span class="kwa">val</span> buf <span class="sym">=</span> Word8Array.array <span class="sym">(</span>bufSize<span class="sym">,</span> <span class="num">0w0</span><span class="sym">)
</span><span class="line">   70 </span><span class="sym"></span>            <span class="kwa">fun</span> loop numBytes <span class="sym">=
</span><span class="line">   71 </span><span class="sym"></span>               <span class="kwa">let
</span><span class="line">   72 </span><span class="kwa">                  val</span> n <span class="sym">=</span> recvBytes <span class="sym">(</span>sock<span class="sym">,</span> buf<span class="sym">,</span> bufSize<span class="sym">)
</span><span class="line">   73 </span><span class="sym"></span>               <span class="kwa">in
</span><span class="line">   74 </span><span class="kwa">                  if</span> n <span class="sym">=</span> <span class="num">0
</span><span class="line">   75 </span><span class="num"></span>                     <span class="kwa">then
</span><span class="line">   76 </span><span class="kwa"></span>                        <span class="sym">(</span>Posix.Process.wait <span class="sym">()
</span><span class="line">   77 </span><span class="sym">                         ;</span> <span class="kwa">TextIO</span>.output <span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,
</span><span class="line">   78 </span><span class="sym"></span>                                          concat <span class="sym">[</span><span class="str">&quot;server processed &quot;</span><span class="sym">,
</span><span class="line">   79 </span><span class="sym"></span>                                                  <span class="kwa">Int</span>.toString numBytes<span class="sym">,
</span><span class="line">   80 </span><span class="sym"></span>                                                  <span class="str">&quot; bytes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">]))
</span><span class="line">   81 </span><span class="sym"></span>                  <span class="kwa">else
</span><span class="line">   82 </span><span class="kwa"></span>                     <span class="sym">(</span>Socket.sendArr <span class="sym">(</span>sock<span class="sym">,</span> Word8ArraySlice.full buf<span class="sym">)
</span><span class="line">   83 </span><span class="sym">                      ;</span> loop <span class="sym">(</span>numBytes <span class="sym">+</span> n<span class="sym">))
</span><span class="line">   84 </span><span class="sym"></span>               <span class="kwa">end
</span><span class="line">   85 </span><span class="kwa">         in
</span><span class="line">   86 </span><span class="kwa"></span>            loop <span class="num">0
</span><span class="line">   87 </span><span class="num"></span>         <span class="kwa">end
</span><span class="line">   88 </span><span class="kwa">      fun</span> client <span class="sym">() =
</span><span class="line">   89 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">   90 </span><span class="kwa">            val</span> dataSlice <span class="sym">=</span> Word8VectorSlice.full <span class="sym">(</span>Byte.stringToBytes data<span class="sym">)
</span><span class="line">   91 </span><span class="sym"></span>            <span class="kwa">val</span> bufSize <span class="sym">=</span> dataSize
<span class="line">   92 </span>            <span class="kwa">val</span> buf <span class="sym">=</span> Word8Array.array <span class="sym">(</span>bufSize<span class="sym">,</span> <span class="num">0w0</span><span class="sym">)
</span><span class="line">   93 </span><span class="sym"></span>            <span class="kwa">fun</span> loop n <span class="sym">=
</span><span class="line">   94 </span><span class="sym"></span>               <span class="kwa">if</span> <span class="num">0</span> <span class="sym">=</span> n
<span class="line">   95 </span>                  <span class="kwa">then</span> closeSock client_sock
<span class="line">   96 </span>               <span class="kwa">else
</span><span class="line">   97 </span><span class="kwa">                  let
</span><span class="line">   98 </span><span class="kwa">                     val</span> _ <span class="sym">=</span> Socket.sendVec <span class="sym">(</span>client_sock<span class="sym">,</span> dataSlice<span class="sym">)
</span><span class="line">   99 </span><span class="sym"></span>                     <span class="kwa">val</span> reply <span class="sym">=</span> recvBytes <span class="sym">(</span>client_sock<span class="sym">,</span> buf<span class="sym">,</span> bufSize<span class="sym">)
</span><span class="line">  100 </span><span class="sym"></span>                  <span class="kwa">in
</span><span class="line">  101 </span><span class="kwa">                     if</span> data <span class="sym">=</span> Byte.unpackString <span class="sym">(</span>Word8ArraySlice.full buf<span class="sym">)
</span><span class="line">  102 </span><span class="sym"></span>                        <span class="kwa">then</span> loop <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">)
</span><span class="line">  103 </span><span class="sym"></span>                     <span class="kwa">else raise</span> Error <span class="str">&quot;Didn't receive the same data&quot;</span>
<span class="line">  104 </span>                  <span class="kwa">end
</span><span class="line">  105 </span><span class="kwa">         in
</span><span class="line">  106 </span><span class="kwa"></span>            loop num
<span class="line">  107 </span>         <span class="kwa">end
</span><span class="line">  108 </span><span class="kwa">      val</span> <span class="sym">() =
</span><span class="line">  109 </span><span class="sym"></span>         <span class="kwa">case</span> Posix.Process.fork <span class="sym">()</span> <span class="kwa">of
</span><span class="line">  110 </span><span class="kwa"></span>            NONE <span class="sym">=&gt;</span> client <span class="sym">()
</span><span class="line">  111 </span><span class="sym">          |</span> SOME pid <span class="sym">=&gt;</span> server <span class="sym">()
</span><span class="line">  112 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">  113 </span><span class="kwa"></span>      OS.Process.success
<span class="line">  114 </span>   <span class="kwa">end
</span><span class="line">  115 </span><span class="kwa">
</span><span class="line">  116 </span><span class="kwa">end
</span><span class="line">  117 </span><span class="kwa">
</span><span class="line">  118 </span><span class="kwa">val</span> _ <span class="sym">=</span> Test.main <span class="sym">(</span>CommandLine.name <span class="sym">(),</span> CommandLine.arguments <span class="sym">())</span>
