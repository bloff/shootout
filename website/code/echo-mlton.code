<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: echo-mlton.code,v 1.12 2007-12-20 06:02:12 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * based on Daniel Wang's version for SML/NJ.</span>
<span class="com"> * Heavily modified by Stephen Weeks.</span>
<span class="com"> *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
		    <span class="kwa">val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
		 <span class="kwa">end</span> <span class="sym">=</span>
<span class="kwa">struct</span>

<span class="kwa">exception</span> Error <span class="kwa">of</span> <span class="kwb">string</span>

<span class="kwa">val</span> data <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="kwa">val</span> dataSize <span class="sym">=</span> <span class="kwa">String</span>.size data

<span class="kwa">fun</span> mkSocks <span class="sym">() =</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> server <span class="sym">=</span> INetSock.TCP.socket <span class="sym">()</span>
      <span class="kwa">val</span> client <span class="sym">=</span> INetSock.TCP.socket <span class="sym">()</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> Socket.bind <span class="sym">(</span>server<span class="sym">,</span> INetSock.any <span class="num">0</span><span class="sym">)</span>
      <span class="kwa">val</span> saddr <span class="sym">=</span> INetSock.fromAddr <span class="sym">(</span>Socket.Ctl.getSockName server<span class="sym">)</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> Socket.listen <span class="sym">(</span>server<span class="sym">,</span> <span class="num">2</span><span class="sym">)</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> Socket.connect <span class="sym">(</span>client<span class="sym">,</span> INetSock.toAddr saddr<span class="sym">)</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> INetSock.TCP.setNODELAY <span class="sym">(</span>server<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> INetSock.TCP.setNODELAY <span class="sym">(</span>client<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)</span>
   <span class="kwa">in</span>
      <span class="sym">{</span>client <span class="sym">=</span> client<span class="sym">,</span>
       server <span class="sym">=</span> server<span class="sym">}</span>
   <span class="kwa">end</span>

<span class="kwa">fun</span> recvBytes <span class="sym">(</span>sock<span class="sym">,</span> buf<span class="sym">:</span> Word8Array.array<span class="sym">,</span> bytesToRecv<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> <span class="kwb">int</span> <span class="sym">=</span>
   <span class="kwa">let</span>
      <span class="kwa">fun</span> loop offset <span class="sym">=</span>
	 <span class="kwa">let</span>
	    <span class="kwa">val</span> r <span class="sym">=</span>
	       Socket.recvArr <span class="sym">(</span>sock<span class="sym">,</span> Word8ArraySlice.slice <span class="sym">(</span>buf<span class="sym">,</span> offset<span class="sym">,</span> NONE<span class="sym">))</span>
	 <span class="kwa">in</span>
	    <span class="kwa">if</span> <span class="num">0</span> <span class="sym">=</span> r
	       <span class="kwa">then</span> offset
	    <span class="kwa">else</span>
	       <span class="kwa">let</span>
		  <span class="kwa">val</span> offset <span class="sym">=</span> r <span class="sym">+</span> offset
	       <span class="kwa">in</span>
		  <span class="kwa">if</span> offset <span class="sym">=</span> bytesToRecv
		     <span class="kwa">then</span> offset
		  <span class="kwa">else</span> loop offset
	       <span class="kwa">end</span>
	 <span class="kwa">end</span>
   <span class="kwa">in</span>
      loop <span class="num">0</span>
   <span class="kwa">end</span>

<span class="kwa">fun</span> closeSock s <span class="sym">=</span>
   <span class="sym">(</span>Socket.shutdown <span class="sym">(</span>s<span class="sym">,</span> Socket.NO_RECVS_OR_SENDS<span class="sym">)</span>
    <span class="sym">;</span> Socket.close s<span class="sym">)</span>

<span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">,</span> args<span class="sym">) =</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> num <span class="sym">=</span>
	 <span class="kwa">case</span> args <span class="kwa">of</span>
	    nil <span class="sym">=&gt;</span> <span class="num">1</span>
	  <span class="sym">|</span> n<span class="sym">::</span>_ <span class="sym">=&gt;</span> valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString n<span class="sym">)</span>
      <span class="kwa">val</span> <span class="sym">{</span>client <span class="sym">=</span> client_sock<span class="sym">,</span> server <span class="sym">=</span> server_sock<span class="sym">} =</span> mkSocks <span class="sym">()</span>
      <span class="kwa">fun</span> server <span class="sym">() =</span>
	 <span class="kwa">let</span>
	    <span class="kwa">val</span> <span class="sym">(</span>sock<span class="sym">,</span> _<span class="sym">) =</span> Socket.accept server_sock
	    <span class="kwa">val</span> bufSize <span class="sym">=</span> dataSize
	    <span class="kwa">val</span> buf <span class="sym">=</span> Word8Array.array <span class="sym">(</span>bufSize<span class="sym">,</span> <span class="num">0</span>w0<span class="sym">)</span>
	    <span class="kwa">fun</span> loop numBytes <span class="sym">=</span>
	       <span class="kwa">let</span>
		  <span class="kwa">val</span> n <span class="sym">=</span> recvBytes <span class="sym">(</span>sock<span class="sym">,</span> buf<span class="sym">,</span> bufSize<span class="sym">)</span>
	       <span class="kwa">in</span>
		  <span class="kwa">if</span> n <span class="sym">=</span> <span class="num">0</span>
		     <span class="kwa">then</span>
			<span class="sym">(</span>Posix.Process.wait <span class="sym">()</span>
			 <span class="sym">;</span> <span class="kwa">TextIO</span>.output <span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,</span>
					  concat <span class="sym">[</span><span class="str">&quot;server processed &quot;</span><span class="sym">,</span>
						  <span class="kwa">Int</span>.toString numBytes<span class="sym">,</span>
						  <span class="str">&quot; bytes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">]))</span>
		  <span class="kwa">else</span>
		     <span class="sym">(</span>Socket.sendArr <span class="sym">(</span>sock<span class="sym">,</span> Word8ArraySlice.full buf<span class="sym">)</span>
		      <span class="sym">;</span> loop <span class="sym">(</span>numBytes <span class="sym">+</span> n<span class="sym">))</span>
	       <span class="kwa">end</span>
	 <span class="kwa">in</span>
	    loop <span class="num">0</span>
	 <span class="kwa">end</span>
      <span class="kwa">fun</span> client <span class="sym">() =</span>
	 <span class="kwa">let</span>
	    <span class="kwa">val</span> dataSlice <span class="sym">=</span> Word8VectorSlice.full <span class="sym">(</span>Byte.stringToBytes data<span class="sym">)</span>
	    <span class="kwa">val</span> bufSize <span class="sym">=</span> dataSize
	    <span class="kwa">val</span> buf <span class="sym">=</span> Word8Array.array <span class="sym">(</span>bufSize<span class="sym">,</span> <span class="num">0</span>w0<span class="sym">)</span>
	    <span class="kwa">fun</span> loop n <span class="sym">=</span>
	       <span class="kwa">if</span> <span class="num">0</span> <span class="sym">=</span> n
		  <span class="kwa">then</span> closeSock client_sock
	       <span class="kwa">else</span>
		  <span class="kwa">let</span>
		     <span class="kwa">val</span> _ <span class="sym">=</span> Socket.sendVec <span class="sym">(</span>client_sock<span class="sym">,</span> dataSlice<span class="sym">)</span>
		     <span class="kwa">val</span> reply <span class="sym">=</span> recvBytes <span class="sym">(</span>client_sock<span class="sym">,</span> buf<span class="sym">,</span> bufSize<span class="sym">)</span>
		  <span class="kwa">in</span>
		     <span class="kwa">if</span> data <span class="sym">=</span> Byte.unpackString <span class="sym">(</span>Word8ArraySlice.full buf<span class="sym">)</span>
			<span class="kwa">then</span> loop <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
		     <span class="kwa">else raise</span> Error <span class="str">&quot;Didn't receive the same data&quot;</span>
		  <span class="kwa">end</span>
	 <span class="kwa">in</span>
	    loop num
	 <span class="kwa">end</span>
      <span class="kwa">val</span> <span class="sym">() =</span>
	 <span class="kwa">case</span> Posix.Process.fork <span class="sym">()</span> <span class="kwa">of</span>
	    NONE <span class="sym">=&gt;</span> client <span class="sym">()</span>
	  <span class="sym">|</span> SOME pid <span class="sym">=&gt;</span> server <span class="sym">()</span>
   <span class="kwa">in</span>
      OS.Process.success
   <span class="kwa">end</span>

<span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> Test.main <span class="sym">(</span>CommandLine.name <span class="sym">(),</span> CommandLine.arguments <span class="sym">())</span>
