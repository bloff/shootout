<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">(* -*- mode: sml -*-
 * $Id: echo-mlton.code,v 1.2 2004-11-08 08:15:12 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 * based on Daniel Wang's version for SML/NJ.
 * Heavily modified by Stephen Weeks.
 *)</FONT></I>
<B><FONT COLOR="#5F9EA0">structure</FONT></B> Test : <B><FONT COLOR="#5F9EA0">sig</FONT></B>
		    <B><FONT COLOR="#A020F0">val</FONT></B> main : (<B><FONT COLOR="#228B22">string</FONT></B> <B><FONT COLOR="#5F9EA0">*</FONT></B> <B><FONT COLOR="#228B22">string</FONT></B> <B><FONT COLOR="#228B22">list</FONT></B>) <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> OS.Process.status
		 <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B> 	
<B><FONT COLOR="#5F9EA0">struct</FONT></B>		

<B><FONT COLOR="#A020F0">exception</FONT></B> Error <B><FONT COLOR="#A020F0">of</FONT></B> <B><FONT COLOR="#228B22">string</FONT></B>
    
<B><FONT COLOR="#A020F0">val</FONT></B> data <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;Hello there sailor\n&quot;</FONT></B>
<B><FONT COLOR="#A020F0">val</FONT></B> dataSize <B><FONT COLOR="#5F9EA0">=</FONT></B> String.size data

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">mkSocks</FONT></I></B></FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#A020F0">let</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> server <B><FONT COLOR="#5F9EA0">=</FONT></B> INetSock.TCP.socket ()
      <B><FONT COLOR="#A020F0">val</FONT></B> client <B><FONT COLOR="#5F9EA0">=</FONT></B> INetSock.TCP.socket ()
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Socket.bind (server, INetSock.any 0)
      <B><FONT COLOR="#A020F0">val</FONT></B> saddr <B><FONT COLOR="#5F9EA0">=</FONT></B> INetSock.fromAddr (Socket.Ctl.getSockName server)
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Socket.listen (server, 2)
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Socket.connect (client, INetSock.toAddr saddr)
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> INetSock.TCP.setNODELAY (server, true)
      <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> INetSock.TCP.setNODELAY (client, true)
   <B><FONT COLOR="#A020F0">in</FONT></B>
      {client <B><FONT COLOR="#5F9EA0">=</FONT></B> client,
       server <B><FONT COLOR="#5F9EA0">=</FONT></B> server}
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">recvBytes</FONT></I></B></FONT></B> (sock, buf: Word8Array.<B><FONT COLOR="#228B22">array</FONT></B>, bytesToRecv: <B><FONT COLOR="#228B22">int</FONT></B>): <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#A020F0">let</FONT></B>
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> offset <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> r <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       Socket.recvArr (sock, Word8ArraySlice.slice (buf, offset, <B><FONT COLOR="#5F9EA0">NONE</FONT></B>))
	 <B><FONT COLOR="#A020F0">in</FONT></B>
	    <B><FONT COLOR="#A020F0">if</FONT></B> 0 <B><FONT COLOR="#5F9EA0">=</FONT></B> r
	       <B><FONT COLOR="#A020F0">then</FONT></B> offset
	    <B><FONT COLOR="#A020F0">else</FONT></B>
	       <B><FONT COLOR="#A020F0">let</FONT></B>
		  <B><FONT COLOR="#A020F0">val</FONT></B> offset <B><FONT COLOR="#5F9EA0">=</FONT></B> r <B><FONT COLOR="#5F9EA0">+</FONT></B> offset
	       <B><FONT COLOR="#A020F0">in</FONT></B>
		  <B><FONT COLOR="#A020F0">if</FONT></B> offset <B><FONT COLOR="#5F9EA0">=</FONT></B> bytesToRecv
		     <B><FONT COLOR="#A020F0">then</FONT></B> offset
		  <B><FONT COLOR="#A020F0">else</FONT></B> loop offset
	       <B><FONT COLOR="#A020F0">end</FONT></B>
	 <B><FONT COLOR="#A020F0">end</FONT></B>
   <B><FONT COLOR="#A020F0">in</FONT></B>
      loop 0
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">closeSock</FONT></I></B></FONT></B> s <B><FONT COLOR="#5F9EA0">=</FONT></B>
   (Socket.shutdown (s, Socket.NO_RECVS_OR_SENDS)
    ; Socket.close s)

<B><FONT COLOR="#A020F0">fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main</FONT></I></B></FONT></B> (_, args) <B><FONT COLOR="#5F9EA0">=</FONT></B>
   <B><FONT COLOR="#A020F0">let</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> num <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">case</FONT></B> args <B><FONT COLOR="#A020F0">of</FONT></B>
	    nil <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 1
	  <B><FONT COLOR="#5F9EA0">|</FONT></B> n<B><FONT COLOR="#5F9EA0">::</FONT></B>_ <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> valOf (Int.fromString n)
      <B><FONT COLOR="#A020F0">val</FONT></B> {client <B><FONT COLOR="#5F9EA0">=</FONT></B> client_sock, server <B><FONT COLOR="#5F9EA0">=</FONT></B> server_sock} <B><FONT COLOR="#5F9EA0">=</FONT></B> mkSocks ()
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">server</FONT></I></B></FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> (sock, _) <B><FONT COLOR="#5F9EA0">=</FONT></B> Socket.accept server_sock
	    <B><FONT COLOR="#A020F0">val</FONT></B> bufSize <B><FONT COLOR="#5F9EA0">=</FONT></B> dataSize
	    <B><FONT COLOR="#A020F0">val</FONT></B> buf <B><FONT COLOR="#5F9EA0">=</FONT></B> Word8Array.<B><FONT COLOR="#228B22">array</FONT></B> (bufSize, 0w0)
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> numBytes <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">let</FONT></B>
		  <B><FONT COLOR="#A020F0">val</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> recvBytes (sock, buf, bufSize)
	       <B><FONT COLOR="#A020F0">in</FONT></B>
		  <B><FONT COLOR="#A020F0">if</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> 0
		     <B><FONT COLOR="#A020F0">then</FONT></B>
			(Posix.Process.wait ()
			 ; TextIO.output (TextIO.stdOut,
					  <B><FONT COLOR="#A020F0">concat</FONT></B> [<B><FONT COLOR="#BC8F8F">&quot;server processed &quot;</FONT></B>,
						  Int.toString numBytes,
						  <B><FONT COLOR="#BC8F8F">&quot; bytes\n&quot;</FONT></B>]))
		  <B><FONT COLOR="#A020F0">else</FONT></B>
		     (Socket.sendArr (sock, Word8ArraySlice.full buf)
		      ; loop (numBytes <B><FONT COLOR="#5F9EA0">+</FONT></B> n))
	       <B><FONT COLOR="#A020F0">end</FONT></B>
	 <B><FONT COLOR="#A020F0">in</FONT></B>
	    loop 0
	 <B><FONT COLOR="#A020F0">end</FONT></B>
<B><FONT COLOR="#A020F0">      fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">client</FONT></I></B></FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">let</FONT></B>
	    <B><FONT COLOR="#A020F0">val</FONT></B> dataSlice <B><FONT COLOR="#5F9EA0">=</FONT></B> Word8VectorSlice.full (Byte.stringToBytes data)
	    <B><FONT COLOR="#A020F0">val</FONT></B> bufSize <B><FONT COLOR="#5F9EA0">=</FONT></B> dataSize
	    <B><FONT COLOR="#A020F0">val</FONT></B> buf <B><FONT COLOR="#5F9EA0">=</FONT></B> Word8Array.<B><FONT COLOR="#228B22">array</FONT></B> (bufSize, 0w0)
<B><FONT COLOR="#A020F0">	    fun </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">loop</FONT></I></B></FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B>
	       <B><FONT COLOR="#A020F0">if</FONT></B> 0 <B><FONT COLOR="#5F9EA0">=</FONT></B> n
		  <B><FONT COLOR="#A020F0">then</FONT></B> closeSock client_sock
	       <B><FONT COLOR="#A020F0">else</FONT></B>
		  <B><FONT COLOR="#A020F0">let</FONT></B>
		     <B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Socket.sendVec (client_sock, dataSlice)
		     <B><FONT COLOR="#A020F0">val</FONT></B> reply <B><FONT COLOR="#5F9EA0">=</FONT></B> recvBytes (client_sock, buf, bufSize)
		  <B><FONT COLOR="#A020F0">in</FONT></B>
		     <B><FONT COLOR="#A020F0">if</FONT></B> data <B><FONT COLOR="#5F9EA0">=</FONT></B> Byte.unpackString (Word8ArraySlice.full buf)
			<B><FONT COLOR="#A020F0">then</FONT></B> loop (n <B><FONT COLOR="#5F9EA0">-</FONT></B> 1)
		     <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">raise</FONT></B> Error <B><FONT COLOR="#BC8F8F">&quot;Didn't receive the same data&quot;</FONT></B>
		  <B><FONT COLOR="#A020F0">end</FONT></B>
	 <B><FONT COLOR="#A020F0">in</FONT></B>
	    loop num
	 <B><FONT COLOR="#A020F0">end</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> () <B><FONT COLOR="#5F9EA0">=</FONT></B>
	 <B><FONT COLOR="#A020F0">case</FONT></B> Posix.Process.fork () <B><FONT COLOR="#A020F0">of</FONT></B>
	    <B><FONT COLOR="#5F9EA0">NONE</FONT></B> <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> client ()
	  <B><FONT COLOR="#5F9EA0">|</FONT></B> <B><FONT COLOR="#5F9EA0">SOME</FONT></B> pid <B><FONT COLOR="#5F9EA0">=</FONT></B><B><FONT COLOR="#5F9EA0">&gt;</FONT></B> server ()
   <B><FONT COLOR="#A020F0">in</FONT></B>
      OS.Process.success
   <B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">val</FONT></B> _ <B><FONT COLOR="#5F9EA0">=</FONT></B> Test.main (CommandLine.name (), CommandLine.arguments ())</pre></td></tr></table>
