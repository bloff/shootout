<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   by John van Groningen

*/

<B><FONT COLOR="#A020F0">module</FONT></B> hash2

<B><FONT COLOR="#A020F0">import</FONT></B> StdEnv, LanguageShootout
<B><FONT COLOR="#A020F0">import</FONT></B> StdOverloadedList

Start = hashOps argi

hashOps n
   # hashtable1 = htNew 10000
   # hashtable2 = htNew 10000
   # hashtable1 = addKeys 0 hashtable1
   # (hashtable1,hashtable2) = repeat_inserts n hashtable1 hashtable2
   # (foo_1_1,hashtable1) = htFind <B><FONT COLOR="#BC8F8F">&quot;foo_1&quot;</FONT></B> hashtable1
   # (foo_9999_1,hashtable1) = htFind <B><FONT COLOR="#BC8F8F">&quot;foo_9999&quot;</FONT></B> hashtable1
   # (foo_1_2,hashtable2) = htFind <B><FONT COLOR="#BC8F8F">&quot;foo_1&quot;</FONT></B> hashtable2
   # (foo_9999_2,hashtable2) = htFind <B><FONT COLOR="#BC8F8F">&quot;foo_9999&quot;</FONT></B> hashtable2
   =    toString foo_1_1.val+++<B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>+++
        toString foo_9999_1.val+++<B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>+++
        toString foo_1_2.val+++<B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>+++
        toString foo_9999_2.val+++<B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>
  <B><FONT COLOR="#A020F0">where</FONT></B>
    addKeys i ht
         | i&gt;9999
             = ht
             = addKeys (i+1) (htAdd (<B><FONT COLOR="#BC8F8F">&quot;foo_&quot;</FONT></B>+++toString i) i ht)

    repeat_inserts <B><FONT COLOR="#228B22">:: !Int (HashTable Int) (HashTable Int) -&gt; (HashTable Int,!HashTable Int)
</FONT></B>    repeat_inserts n hashtable1 hashtable2
        | n&gt;0
            # (hashtable1,hashtable2) = htFold add_val hashtable1 hashtable2
            = repeat_inserts (n-1) hashtable1 hashtable2
            = (hashtable1,hashtable2)

    add_val {key,val=val1} hashtable2
        = htUpdate (\ item=:{val} = {item &amp; val=val+val1}) key 0 hashtable2

// SimpleHash implementation would normally be imported
  
primes =: [
   53,         97,         193,       389,       769,
   1543,       3079,       6151,      12289,     24593,
   49157,      98317,      196613,    93241,     786433,
   1572869,    3145739,    6291469,   12582917,  25165843,
   50331653,   100663319,  201326611, 402653189, 805306457
   ]

<B><FONT COLOR="#228B22">:: Item a = { key::!String
</FONT></B>            , val<B><FONT COLOR="#228B22">::!a
</FONT></B>            }

<B><FONT COLOR="#228B22">:: SHashTable a = { nBuckets::!Int
</FONT></B>                 , table<B><FONT COLOR="#228B22">::!.{!.[!Item a!]}
</FONT></B>                 }

<B><FONT COLOR="#228B22">:: *HashTable a :== SHashTable a
</FONT></B>
hash <B><FONT COLOR="#228B22">:: !{#.Char} !Int -&gt; Int
</FONT></B>hash key nBuckets
   = (abs (loop key (size key - 1) 0)) rem nBuckets  
   <B><FONT COLOR="#A020F0">where</FONT></B>
   loop <B><FONT COLOR="#228B22">:: !{#Char} !Int !Int -&gt; Int
</FONT></B>   loop k n h
      | n&gt;=0
          = loop k (n-1) (11*h + toInt k.[n])       
          = h

htNew n = { nBuckets = nprime
        , table = {[|] \\ i &lt;- [0..nprime-1]}
        }
   <B><FONT COLOR="#A020F0">where</FONT></B>   
   nprime = hd (dropWhile (\x = x &lt; n) primes)        

htFind <B><FONT COLOR="#228B22">:: !{#.Char} !(HashTable a) -&gt; (!Item a,HashTable a)              
</FONT></B>htFind k ht=:{table,nBuckets}
    # (list,table) = table![hash k nBuckets]
    = (find k list,{ht &amp; table=table})
    <B><FONT COLOR="#A020F0">where</FONT></B>
        find k [|item:ls]
            | item.key == k
                   = item
                   = find k ls

htUpdate <B><FONT COLOR="#228B22">:: ((Item a) -&gt; Item a) !{#.Char} a !*(HashTable a) -&gt; *HashTable a
</FONT></B>htUpdate f k v ht=:{table,nBuckets}
    #! i = hash k nBuckets
    #! (b,table) = replace table i [|]
    # b = updateItem k v b f
    = {ht &amp; table = {table &amp; [i] = b}}
<B><FONT COLOR="#A020F0">where</FONT></B>
    updateItem <B><FONT COLOR="#228B22">:: !{#.Char} a !*[!(Item a)!] ((Item a) -&gt; Item a) -&gt; *[!(Item a)!]
</FONT></B>    updateItem k v [|item:ls] f
       | item.key &lt;&gt; k
               = [|item : updateItem k v ls f]
               = [|f item:ls]
    updateItem k v [|] f
        = [|f {key=k,val=v}]

htAdd <B><FONT COLOR="#228B22">:: !{#.Char} !a !*(HashTable a) -&gt; *HashTable a
</FONT></B>htAdd k v ht=:{table,nBuckets}
    #! i = hash k nBuckets
    #! (b,table) = replace table i [|]
    # b = addItem k v b
    = {ht &amp; table = {table &amp; [i] = b}}
<B><FONT COLOR="#A020F0">where</FONT></B>
    addItem <B><FONT COLOR="#228B22">:: !{#.Char} .a !*[!u:(Item .a)!] -&gt; *[!v:(Item .a)!], [u&lt;=v]
</FONT></B>    addItem k v [|item:ls]
       | item.key &lt;&gt; k
               = [|item : addItem k v ls]
               = [|{item &amp; val=v}:ls]
    addItem k v [|]
        = [|{key=k,val=v}]

htFold <B><FONT COLOR="#228B22">:: ((Item a) -&gt; .(.b -&gt; .b)) !(HashTable a) .b -&gt; (!HashTable a,!.b)
</FONT></B>htFold f ht=:{nBuckets,table} s
    # (table,s) = ht_fold 0 nBuckets table s
    = ({ht &amp; table=table},s)
    <B><FONT COLOR="#A020F0">where</FONT></B>
        ht_fold i n table s
            | i&lt;n
                # (list,table) = table![i]
                #! s=ht_fold_list list s
                = ht_fold (i+1) n table s
                = (table,s)

        ht_fold_list [|e:l] s
            #! s = f e s
            = ht_fold_list l s
        ht_fold_list [|] s
            = s

</pre></td></tr></table>
