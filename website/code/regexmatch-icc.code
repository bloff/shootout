<span class="com">/* -*- mode: c -*-
 * $Id: regexmatch-icc.code,v 1.10 2005-09-26 00:23:11 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</span>

<span class="dir">#include &lt;sys/types.h&gt;
</span><span class="dir">#include &lt;sys/stat.h&gt;
</span><span class="dir">#include &lt;fcntl.h&gt;
</span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;pcre.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span>
<span class="dir">#define MAXLINES   100
</span><span class="dir">#define MAXLINELEN 132
</span>
<span class="kwb">char</span> <span class="sym">*</span>pattern <span class="sym">=
</span><span class="str">&quot;(?:^|[^</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">(])&quot;</span>		<span class="com">/* must be preceeded by non-digit */</span>
<span class="str">&quot;(</span><span class="esc">\\</span><span class="str">()?&quot;</span>			<span class="com">/* match 1: possible initial left paren */</span>
<span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>			<span class="com">/* match 2: area code is 3 digits */</span>
<span class="str">&quot;(?(1)</span><span class="esc">\\</span><span class="str">))&quot;</span>			<span class="com">/* if match1 then match right paren */</span>
<span class="str">&quot;[ ]&quot;</span>				<span class="com">/* area code followed by one space */</span>
<span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>			<span class="com">/* match 3: prefix of 3 digits */</span>
<span class="str">&quot;[ -]&quot;</span>				<span class="com">/* separator is either space or dash */</span>
<span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>		<span class="com">/* match 4: last 4 digits */</span>
<span class="str">&quot;</span><span class="esc">\\</span><span class="str">D&quot;</span>				<span class="com">/* must be followed by a non-digit */</span>
<span class="sym">;


</span><span class="kwb">int
</span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> NUM <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwb">int</span> count<span class="sym">;
</span>    <span class="kwb">char</span> <span class="sym">*</span>cptr <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;
</span>    <span class="kwb">char</span> <span class="sym">**</span>phones<span class="sym">;
</span>    pcre <span class="sym">*</span>re<span class="sym">;
</span>    <span class="kwb">int</span> erroffset<span class="sym">;
</span>    <span class="kwb">const char</span> <span class="sym">*</span>errptr<span class="sym">;
</span>    <span class="kwb">int</span> n<span class="sym">,</span> lines <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwb">char</span> num<span class="sym">[</span><span class="num">256</span><span class="sym">];
</span>    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> matchlen<span class="sym">;
</span>    <span class="kwb">char</span> <span class="sym">*</span>matchoffset<span class="sym">;
</span>    <span class="kwb">int</span> nmatches<span class="sym">;
</span>    <span class="kwb">int</span> <span class="sym">*</span>ovec<span class="sym">,</span> ovecsize<span class="sym">;
</span>    pcre_extra <span class="sym">*</span>study<span class="sym">;

</span>    phones <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">**)</span>malloc<span class="sym">(</span>MAXLINES <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">char</span> <span class="sym">*));
</span>    <span class="kwa">if</span> <span class="sym">(!</span>phones<span class="sym">) {
</span>	fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;malloc for phones array failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>	exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
    }
</span>    lines <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwa">while</span> <span class="sym">(</span>cptr<span class="sym">) {
</span>	phones<span class="sym">[</span>lines<span class="sym">] = (</span><span class="kwb">char</span> <span class="sym">*)</span>malloc<span class="sym">(</span>MAXLINELEN<span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(!</span>phones<span class="sym">[</span>lines<span class="sym">]) {
</span>	    fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;malloc to hold line #%d failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> lines<span class="sym">);
</span>	    exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
	}
</span>	cptr <span class="sym">=</span> fgets<span class="sym">(</span>phones<span class="sym">[</span>lines<span class="sym">],</span> MAXLINELEN<span class="sym">,</span> stdin<span class="sym">);
</span>	lines<span class="sym">++;
</span>	<span class="kwa">if</span> <span class="sym">(</span>lines <span class="sym">&gt;</span> MAXLINES<span class="sym">) {
</span>	    fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;MAXLINES is too small</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>	    exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
	}
    }

</span>    re <span class="sym">=</span> pcre_compile<span class="sym">(</span>pattern<span class="sym">,</span> <span class="num">0</span><span class="sym">, &amp;</span>errptr<span class="sym">, &amp;</span>erroffset<span class="sym">,</span> NULL<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(!</span>re<span class="sym">) {
</span>	fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;can't open compile regexp</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>	exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
    }

</span>    study <span class="sym">=</span> pcre_study<span class="sym">(</span>re<span class="sym">,</span> <span class="num">0</span><span class="sym">, &amp;</span>errptr<span class="sym">);

</span>    <span class="kwa">if</span> <span class="sym">(</span>pcre_fullinfo<span class="sym">(</span>re<span class="sym">,</span> NULL<span class="sym">,</span> PCRE_INFO_CAPTURECOUNT<span class="sym">, &amp;</span>nmatches<span class="sym">) !=</span> <span class="num">0</span><span class="sym">) {
</span>	fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;pcre_fullinfo failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>	exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
    }
</span>    nmatches<span class="sym">++;</span>			<span class="com">/* add match of entire pattern */</span>

    ovecsize <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">) *</span> nmatches <span class="sym">*</span> <span class="num">3</span><span class="sym">;
</span>    ovec <span class="sym">= (</span><span class="kwb">int</span> <span class="sym">*)</span>malloc<span class="sym">(</span>ovecsize<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(!</span>ovec<span class="sym">) {
</span>	fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;malloc for ovec array failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>	exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
    }

</span>    count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwa">while</span> <span class="sym">(</span>NUM<span class="sym">--) {
</span>	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>lines<span class="sym">;</span> i<span class="sym">++) {
</span>	    n <span class="sym">=</span> pcre_exec<span class="sym">(</span>re<span class="sym">,</span> study<span class="sym">,
</span>			  phones<span class="sym">[</span>i<span class="sym">],</span> strlen<span class="sym">(</span>phones<span class="sym">[</span>i<span class="sym">]),</span> <span class="num">0</span><span class="sym">,
</span>			  <span class="num">0</span><span class="sym">,</span> ovec<span class="sym">,</span> ovecsize<span class="sym">);
</span>	    <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> nmatches<span class="sym">) {
</span>		<span class="com">/* stuff the match into the buffer &quot;num&quot; */</span>
		k <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span><span class="num">2</span><span class="sym">;</span>	<span class="com">/* initial offset into ovec */</span>
		<span class="com">/* areacode */</span>
		j <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>		num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">'('</span><span class="sym">;
</span>		matchoffset <span class="sym">=</span> phones<span class="sym">[</span>i<span class="sym">] +</span> ovec<span class="sym">[</span>k<span class="sym">];
</span>		matchlen <span class="sym">=</span> ovec<span class="sym">[</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] -</span> ovec<span class="sym">[</span>k<span class="sym">];
</span>		strncpy<span class="sym">(</span>num<span class="sym">+</span>j<span class="sym">,</span> matchoffset<span class="sym">,</span> matchlen<span class="sym">);
</span>		j <span class="sym">+=</span> matchlen<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">;
</span>		num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">')'</span><span class="sym">;
</span>		<span class="com">/* space separator */</span>
		num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">' '</span><span class="sym">;
</span>		<span class="com">/* exchange */</span>
		matchoffset <span class="sym">=</span> phones<span class="sym">[</span>i<span class="sym">] +</span> ovec<span class="sym">[</span>k<span class="sym">];
</span>		matchlen <span class="sym">=</span> ovec<span class="sym">[</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] -</span> ovec<span class="sym">[</span>k<span class="sym">];
</span>		strncpy<span class="sym">(</span>num<span class="sym">+</span>j<span class="sym">,</span> matchoffset<span class="sym">,</span> matchlen<span class="sym">);
</span>		j <span class="sym">+=</span> matchlen<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">;
</span>		<span class="com">/* dash */</span>
		num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">'-'</span><span class="sym">;
</span>		<span class="com">/* last 4 digits */</span>
		matchoffset <span class="sym">=</span> phones<span class="sym">[</span>i<span class="sym">] +</span> ovec<span class="sym">[</span>k<span class="sym">];
</span>		matchlen <span class="sym">=</span> ovec<span class="sym">[</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] -</span> ovec<span class="sym">[</span>k<span class="sym">];
</span>		strncpy<span class="sym">(</span>num<span class="sym">+</span>j<span class="sym">,</span> matchoffset<span class="sym">,</span> matchlen<span class="sym">);
</span>		j <span class="sym">+=</span> matchlen<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">;
</span>		<span class="com">/* with a cherry on top */</span>
		num<span class="sym">[</span>j<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
</span>		<span class="kwa">if</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">==</span> NUM<span class="sym">) {
</span>		    count<span class="sym">++;
</span>		    printf<span class="sym">(</span><span class="str">&quot;%d: %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> count<span class="sym">,</span> num<span class="sym">);
		}
	    }
	}
    }

</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>MAXLINES<span class="sym">;</span> i<span class="sym">++) {
</span>	free<span class="sym">(</span>phones<span class="sym">[</span>i<span class="sym">]);
    }
</span>    free<span class="sym">(</span>phones<span class="sym">);
</span>    free<span class="sym">(</span>ovec<span class="sym">);

</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}
</span>
