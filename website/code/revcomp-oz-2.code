<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application Open

<span class="kwb">define</span>
   <span class="kwb">fun</span> <span class="sym">{</span>NextHeader F<span class="sym">}</span>
      <span class="kwb">case</span> <span class="sym">{</span>F getS<span class="sym">(</span>$<span class="sym">)}</span>
      <span class="kwb">of</span> false <span class="kwb">then</span> false
      <span class="kwb">elseof</span> <span class="sym">&amp;&gt;|</span>_ <span class="sym">=</span> Header <span class="kwb">then</span> Header
      <span class="kwb">else</span> <span class="sym">{</span>NextHeader F<span class="sym">}</span> <span class="kwb">end</span>
   <span class="kwb">end</span>

   <span class="kwb">fun</span> <span class="sym">{</span>ReversedLines F L<span class="sym">}</span>
      <span class="kwb">case</span> <span class="sym">{</span>F getS<span class="sym">(</span>$<span class="sym">)}</span>
      <span class="kwb">of</span> false <span class="kwb">then</span> L # false
      <span class="kwb">elseof</span> <span class="sym">&amp;&gt;|</span>_ <span class="sym">=</span> Header <span class="kwb">then</span> L # Header
      <span class="kwb">elseof</span> <span class="sym">&amp;;|</span>_ <span class="kwb">then</span> <span class="sym">{</span>ReversedLines F L<span class="sym">}</span>
      <span class="kwb">elseof</span> Line <span class="kwb">then</span> <span class="sym">{</span>ReversedLines F Line<span class="sym">|</span>L<span class="sym">}</span> <span class="kwb">end</span>
   <span class="kwb">end</span>


   <span class="kwa">local</span>
      <span class="kwb">fun</span> <span class="sym">{</span>IubCodeComplements<span class="sym">}</span>
         Code <span class="sym">=</span> <span class="str">&quot;ABCDGHKMNRSTVWYabcdghkmnrstvwy&quot;</span>
         Comp <span class="sym">=</span> <span class="str">&quot;TVGHCDMKNYSABWRTVGHCDMKNYSABWR&quot;</span>
         A <span class="sym">= {</span>NewArray <span class="num">1</span> <span class="sym">&amp;</span>z <span class="sym">&amp;*}</span>
      <span class="kwb">in</span>
         <span class="sym">{</span>List.forAllInd
            <span class="sym">{</span>List.zip Code Comp <span class="kwb">fun</span><span class="sym">{</span>$ A B<span class="sym">}</span> A#B <span class="kwb">end</span><span class="sym">}</span>
               <span class="kwb">proc</span><span class="sym">{</span>$ I K#V<span class="sym">}</span> A.K <span class="sym">:=</span> V <span class="kwb">end</span><span class="sym">}</span>
         A
      <span class="kwb">end</span>

      IUB <span class="sym">= {</span>IubCodeComplements<span class="sym">}</span>

   <span class="kwb">in</span>
      <span class="kwb">proc</span> <span class="sym">{</span>WriteReverseComplement FOut ReversedLines<span class="sym">}</span>
         FirstLine<span class="sym">|</span>Lines <span class="sym">=</span> ReversedLines
         ShortestLength <span class="sym">= {</span>Length FirstLine<span class="sym">}</span>
      <span class="kwb">in</span>
         <span class="sym">{</span>FOut write<span class="sym">(</span>vs<span class="sym">: {</span>FoldL FirstLine <span class="kwb">fun</span><span class="sym">{</span>$ L C<span class="sym">}</span> IUB.C<span class="sym">|</span>L <span class="kwb">end</span> <span class="kwa">nil</span><span class="sym">}) }</span>

         <span class="sym">{</span>ForAll Lines
            <span class="kwb">proc</span><span class="sym">{</span>$ Line<span class="sym">}</span>
               S <span class="sym">= {</span>List.foldLInd
                  Line
                  <span class="kwb">fun</span><span class="sym">{</span>$ I L C<span class="sym">}</span>
                     <span class="kwb">if</span> I <span class="sym">==</span> ShortestLength <span class="kwb">then</span> <span class="sym">&amp;</span>\n<span class="sym">|</span>IUB.C<span class="sym">|</span>L
                     <span class="kwb">else</span> IUB.C<span class="sym">|</span>L <span class="kwb">end</span>
                  <span class="kwb">end</span>
                  <span class="kwa">nil</span><span class="sym">}</span>
            <span class="kwb">in</span>
               <span class="sym">{</span>FOut write<span class="sym">(</span>vs<span class="sym">:</span> S<span class="sym">)}</span>
            <span class="kwb">end</span>
         <span class="sym">}</span>
         <span class="sym">{</span>FOut write<span class="sym">(</span>vs<span class="sym">:</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)}</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>


   <span class="kwb">proc</span> <span class="sym">{</span>ReadRevCompWrite F Header FOut<span class="sym">}</span>
      <span class="kwb">if</span> Header \= false <span class="kwb">then</span>
         Lines # NextHeader <span class="sym">= {</span>ReversedLines F <span class="kwa">nil</span><span class="sym">}</span>
      <span class="kwb">in</span>
         <span class="sym">{</span>FOut write<span class="sym">(</span>vs<span class="sym">:</span> Header # <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)}</span>
         <span class="sym">{</span>WriteReverseComplement FOut Lines<span class="sym">}</span>
         <span class="sym">{</span>ReadRevCompWrite F NextHeader FOut<span class="sym">}</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>


   <span class="kwa">class</span> TextFile <span class="kwb">from</span> Open.file Open.text <span class="kwb">end</span>
   StdIn <span class="sym">= {</span>New TextFile init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}</span>
   StdOut <span class="sym">= {</span>New Open.file init<span class="sym">(</span>name<span class="sym">:</span>stdout<span class="sym">)}</span>
<span class="kwb">in</span>
   <span class="sym">{</span>ReadRevCompWrite StdIn <span class="sym">{</span>NextHeader StdIn<span class="sym">}</span> StdOut<span class="sym">}</span>
   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
