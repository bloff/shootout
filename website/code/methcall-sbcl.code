<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: methcall-sbcl.code,v 1.16 2006-09-20 05:51:57 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; with help from Rahul Jain</span>
<span class="slc">;;; Multi-lisp modifications by Brent Fulgham</span>

<span class="slc">;; OO with CLOS</span>
<span class="sym">(</span>proclaim <span class="str">'(optimize (speed 3)(safety 0)(space 0) #-gcl (debug 0)(compilation-speed 0)))</span>
<span class="str"></span>
<span class="str">(eval-when (:compile-toplevel :load-toplevel :execute)</span>
<span class="str">  (defstruct (toggle (:constructor make-toggle ()))</span>
<span class="str">    (state t :type boolean)))</span>
<span class="str"></span>
<span class="str">(defmethod activate ((this toggle))</span>
<span class="str">  (setf (toggle-state this) (not (toggle-state this)))</span>
<span class="str">  this)</span>
<span class="str"></span>
<span class="str">(eval-when (:compile-toplevel :load-toplevel :execute)</span>
<span class="str">  (defstruct (nth-toggle (:include toggle)</span>
<span class="str">                         (:constructor make-nth-toggle (count-max)))</span>
<span class="str">    (count-max 1 :type fixnum)</span>
<span class="str">    (counter 0 :type fixnum)))</span>
<span class="str"></span>
<span class="str">(defmethod activate ((this nth-toggle))</span>
<span class="str">  (incf (nth-toggle-counter this))</span>
<span class="str">  (cond ((&gt;= (nth-toggle-counter this)</span>
<span class="str">	     (nth-toggle-count-max this))</span>
<span class="str">	 (setf (toggle-state this) (not (toggle-state this)))</span>
<span class="str">	 (setf (nth-toggle-counter this) 0)))</span>
<span class="str">  this)</span>
<span class="str"></span>
<span class="str">(defun print-bool (b)</span>
<span class="str">  (format t (if b &quot;true~%&quot; &quot;false~%&quot;)))</span>
<span class="str"></span>
<span class="str">(defun main ()</span>
<span class="str">  (let ((n (parse-integer (or (car (last #+sbcl sb-ext:*posix-argv*</span>
<span class="str">                                         #+cmu  extensions:*command-line-strings*</span>
<span class="str">					 #+gcl  si::*command-args*)) &quot;1&quot;)))</span>
<span class="str">	(val))</span>
<span class="str">    #+cmu (declare (fixnum n val))</span>
<span class="str">    (let ((tog (make-toggle)))</span>
<span class="str">      (dotimes (i n)</span>
<span class="str">        #+cmu (declare (fixnum i))</span>
<span class="str">	(setq val (toggle-state (activate tog))))</span>
<span class="str">      (print-bool (toggle-state tog))</span>
<span class="str">    (let ((ntog (make-nth-toggle 3)))</span>
<span class="str">      (dotimes (i n)</span>
<span class="str">        #+cmu (declare (fixnum i))</span>
<span class="str">	(setq val (toggle-state (activate ntog))))</span>
<span class="str">      (print-bool (toggle-state ntog))))))</span>
