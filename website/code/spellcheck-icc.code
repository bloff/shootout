<span class="com">/* -*- mode: c -*-
 * $Id: spellcheck-icc.code,v 1.2 2005-03-15 06:18:20 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 * with help from Brad Knotwell
 */</span>

<span class="dir">#include &lt;ctype.h&gt;
</span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="dir">#include</span> <span class="dstr">&quot;simple_hash.h&quot;</span><span class="dir">
</span>
<span class="dir">#define MAXLINELEN 128
</span>
<span class="kwb">struct</span> ht_ht <span class="sym">*</span>dict <span class="sym">=</span> NULL<span class="sym">;

</span><span class="kwb">int</span> handleInput<span class="sym">(</span><span class="kwb">FILE</span> <span class="sym">*</span>input<span class="sym">,</span><span class="kwb">void</span> <span class="sym">(*</span>hashManipFn<span class="sym">)(</span><span class="kwb">char</span> <span class="sym">*))
{
</span>    <span class="kwb">int</span> wordbufsize <span class="sym">=</span> <span class="num">80</span><span class="sym">,</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwb">char</span> <span class="sym">*</span>cp<span class="sym">, *</span>wordbuf <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">*)</span>malloc<span class="sym">(</span>wordbufsize <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwb">char</span> line<span class="sym">[</span>MAXLINELEN<span class="sym">];

</span>    <span class="kwa">if</span><span class="sym">((</span>wordbuf <span class="sym">=</span> malloc<span class="sym">(</span>wordbufsize<span class="sym">+</span><span class="num">1</span><span class="sym">)) ==</span> NULL<span class="sym">)
</span>        <span class="kwa">return</span><span class="sym">(</span>fprintf<span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;malloc</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span><span class="num">0</span><span class="sym">);

</span>    <span class="kwa">while</span> <span class="sym">(</span>fgets<span class="sym">(</span>line<span class="sym">,</span> MAXLINELEN<span class="sym">,</span> input<span class="sym">))
</span>	<span class="kwa">for</span> <span class="sym">(</span>cp<span class="sym">=</span>line<span class="sym">; *</span>cp <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> cp<span class="sym">++) {
</span>	    <span class="kwa">if</span> <span class="sym">(</span>isspace<span class="sym">(*</span>cp<span class="sym">)) {
</span>		<span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">) {
</span>		    wordbuf<span class="sym">[</span>i<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span>                    hashManipFn<span class="sym">(</span>wordbuf<span class="sym">);
</span>		    i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
		}
	    }</span> <span class="kwa">else</span> <span class="sym">{
</span>		wordbuf<span class="sym">[</span>i<span class="sym">++] = *</span>cp<span class="sym">;
</span>		<span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> wordbufsize<span class="sym">) {
</span>		    wordbufsize <span class="sym">*=</span> <span class="num">2</span><span class="sym">;
</span>		    <span class="kwa">if</span><span class="sym">((</span>wordbuf <span class="sym">=</span> realloc<span class="sym">(</span>wordbuf<span class="sym">,</span> wordbufsize <span class="sym">+</span> <span class="num">1</span><span class="sym">)) ==</span> NULL<span class="sym">)
</span>                        <span class="kwa">return</span><span class="sym">(</span>fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;realloc</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span> <span class="num">0</span><span class="sym">);
		}
	    }
        }

</span>    free<span class="sym">(</span>wordbuf<span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
}

</span><span class="kwb">void</span> spellCheck<span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>key<span class="sym">) {
</span>    <span class="kwa">if</span> <span class="sym">(</span>ht_find_new<span class="sym">(</span>dict<span class="sym">,</span>key<span class="sym">)-&gt;</span>val <span class="sym">!=</span> <span class="num">1</span><span class="sym">)</span> printf<span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>key<span class="sym">);
}

</span><span class="kwb">void</span> hashLoad<span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>key<span class="sym">) {</span> ht_find_new<span class="sym">(</span>dict<span class="sym">,</span>key<span class="sym">)-&gt;</span>val <span class="sym">=</span> <span class="num">1</span><span class="sym">; }

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">FILE</span> <span class="sym">*</span>fh<span class="sym">;
</span>    <span class="kwb">int</span> rc<span class="sym">;

</span>    <span class="com">/*
        ht_create doesn't handle malloc and calloc failures
        so this is superfluous
    */</span>
    <span class="kwa">if</span><span class="sym">((</span>dict <span class="sym">=</span> ht_create<span class="sym">(</span><span class="num">40000</span><span class="sym">)) ==</span> NULL<span class="sym">)
</span>        <span class="kwa">return</span><span class="sym">(</span>fprintf<span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;hash creation failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span>EXIT_FAILURE<span class="sym">);

</span>    <span class="kwa">if</span> <span class="sym">((</span>fh <span class="sym">=</span> fopen<span class="sym">(</span><span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">,</span> <span class="str">&quot;r&quot;</span><span class="sym">)) ==</span> NULL<span class="sym">)
</span>        <span class="kwa">return</span><span class="sym">(</span>fprintf<span class="sym">(</span>stderr<span class="sym">,</span><span class="str">&quot;couldn't open dictionary</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">),</span>EXIT_FAILURE<span class="sym">);

</span>    rc <span class="sym">= ((</span>handleInput<span class="sym">(</span>fh<span class="sym">,</span>hashLoad<span class="sym">) &amp;&amp;</span> handleInput<span class="sym">(</span>stdin<span class="sym">,</span>spellCheck<span class="sym">))</span> ? EXIT_SUCCESS <span class="sym">:</span> EXIT_FAILURE<span class="sym">);

</span>    ht_destroy<span class="sym">(</span>dict<span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span>rc<span class="sym">);
}</span>
