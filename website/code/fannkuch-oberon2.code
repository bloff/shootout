<span class="com">(* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy (Oberon-2 novice)

   To run:   fannkuch 9
*)</span>


<span class="kwa">MODULE</span> Fannkuch<span class="sym">;
</span><span class="kwa">IMPORT</span> LangShootout<span class="sym">,</span> Out<span class="sym">;

</span><span class="kwa">VAR</span> n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;


</span><span class="kwa">PROCEDURE</span> F<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">):</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="kwa">VAR
</span>   perm<span class="sym">,</span> perm1<span class="sym">,</span> count<span class="sym">,</span> maxPerm<span class="sym">:</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY OF</span> <span class="kwb">LONGINT</span><span class="sym">;
</span>   m<span class="sym">,</span> r<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">,</span> temp<span class="sym">,</span> maxFlipsCount<span class="sym">,</span> flipsCount<span class="sym">,</span> perm0<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="kwa">BEGIN
   NEW</span><span class="sym">(</span>perm<span class="sym">,</span> n<span class="sym">);</span> <span class="kwa">NEW</span><span class="sym">(</span>perm1<span class="sym">,</span> n<span class="sym">);</span> <span class="kwa">NEW</span><span class="sym">(</span>count<span class="sym">,</span> n<span class="sym">);</span> <span class="kwa">NEW</span><span class="sym">(</span>maxPerm<span class="sym">,</span> n<span class="sym">);

</span>   maxFlipsCount <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>   m <span class="sym">:=</span> n <span class="num">- 1</span><span class="sym">;
</span>   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> m <span class="kwa">DO</span> perm1<span class="sym">[</span>i<span class="sym">] :=</span> i<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;

</span>   r <span class="sym">:=</span> n<span class="sym">;
</span>   <span class="kwa">LOOP
      WHILE</span> r # <span class="num">1</span> <span class="kwa">DO</span> count<span class="sym">[</span>r<span class="num">-1</span><span class="sym">] :=</span> r<span class="sym">;</span> <span class="kwa">DEC</span><span class="sym">(</span>r<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
</span>      <span class="kwa">IF</span> ~<span class="sym">((</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]=</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">OR</span> <span class="sym">(</span>perm1<span class="sym">[</span>m<span class="sym">]=</span>m<span class="sym">))</span> <span class="kwa">THEN
</span>         FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> m <span class="kwa">DO</span> perm<span class="sym">[</span>i<span class="sym">] :=</span> perm1<span class="sym">[</span>i<span class="sym">];</span> <span class="kwa">END</span><span class="sym">;
</span>         flipsCount <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">LOOP
</span>            k <span class="sym">:=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>            <span class="kwa">IF</span> k <span class="sym">=</span> <span class="num">0</span> <span class="kwa">THEN EXIT</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;
</span>            FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO ASH</span><span class="sym">(</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">,-</span><span class="num">1</span><span class="sym">) -</span> <span class="num">1</span> <span class="kwa">DO
</span>               temp <span class="sym">:=</span> perm<span class="sym">[</span>i<span class="sym">];</span> perm<span class="sym">[</span>i<span class="sym">] :=</span> perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">];</span> perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">] :=</span> temp<span class="sym">;
</span>            <span class="kwa">END</span><span class="sym">;
</span>            <span class="kwa">INC</span><span class="sym">(</span>flipsCount<span class="sym">);
</span>         <span class="kwa">END</span><span class="sym">;
</span>         <span class="kwa">IF</span> flipsCount <span class="sym">&gt;</span> maxFlipsCount <span class="kwa">THEN
</span>            maxFlipsCount <span class="sym">:=</span> flipsCount<span class="sym">;
</span>            FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> m <span class="kwa">DO</span> maxPerm<span class="sym">[</span>i<span class="sym">] :=</span> perm1<span class="sym">[</span>i<span class="sym">];</span> <span class="kwa">END</span><span class="sym">;
</span>         <span class="kwa">END</span><span class="sym">;
</span>      <span class="kwa">END</span><span class="sym">;

</span>      <span class="com">(* Use incremental change to generate another permutation *)</span>
      <span class="kwa">LOOP
         IF</span> r <span class="sym">=</span> n <span class="kwa">THEN RETURN</span> maxFlipsCount<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;
</span>         perm0 <span class="sym">:=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>         i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">WHILE</span> i <span class="sym">&lt;</span> r <span class="kwa">DO
</span>            k <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>            perm1<span class="sym">[</span>i<span class="sym">] :=</span> perm1<span class="sym">[</span>k<span class="sym">];
</span>            i <span class="sym">:=</span> k<span class="sym">;
</span>         <span class="kwa">END</span><span class="sym">;
</span>         perm1<span class="sym">[</span>r<span class="sym">] :=</span> perm0<span class="sym">;

</span>         <span class="kwa">DEC</span><span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">]);
</span>         <span class="kwa">IF</span> count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span> <span class="kwa">THEN EXIT</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;
</span>         <span class="kwa">INC</span><span class="sym">(</span>r<span class="sym">);
</span>      <span class="kwa">END</span><span class="sym">;
</span>   <span class="kwa">END</span><span class="sym">;
</span><span class="kwa">END</span> F<span class="sym">;


</span><span class="kwa">BEGIN
</span>   n <span class="sym">:=</span> LangShootout<span class="sym">.</span>Argi<span class="sym">();
</span>   Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>n<span class="sym">,</span><span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;) = &quot;</span><span class="sym">);
</span>   Out<span class="sym">.</span>Int<span class="sym">(</span> F<span class="sym">(</span>n<span class="sym">),</span> <span class="num">1</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="kwa">END</span> Fannkuch<span class="sym">.

</span><span class="com">(*
 * vim: ts=4 ft=oberon2
 *)</span>
