<span class="line">    1 </span><span class="slc">//
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// Contributed by John Skaller
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">//
</span><span class="line">    4 </span><span class="slc"></span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span><span class="line">    5 </span><span class="sym"></span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">open</span> Ulong<span class="sym">;
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">body</span> <span class="str">'''
</span><span class="line">    9 </span><span class="str">#include &lt;limits.h&gt;
</span><span class="line">   10 </span><span class="str">#include &lt;unistd.h&gt;
</span><span class="line">   11 </span><span class="str">#define BSIZE 4096
</span><span class="line">   12 </span><span class="str">unsigned long wds[UCHAR_MAX + 1];
</span><span class="line">   13 </span><span class="str">unsigned long nwds[UCHAR_MAX + 1];
</span><span class="line">   14 </span><span class="str">char sp=' ';
</span><span class="line">   15 </span><span class="str">char tab = '</span><span class="esc">\\</span><span class="str">t';
</span><span class="line">   16 </span><span class="str">char lf='</span><span class="esc">\\</span><span class="str">n';
</span><span class="line">   17 </span><span class="str">unsigned char buff[BSIZE];
</span><span class="line">   18 </span><span class="str">'''</span><span class="sym">;
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym"></span><span class="kwa">const</span> UCHAR_MAX<span class="sym">:</span><span class="kwb">int</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym"></span><span class="kwa">const</span> BSIZE<span class="sym">:</span><span class="kwb">int</span><span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span><span class="kwa">const</span> sp<span class="sym">:</span><span class="kwb">int</span><span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span><span class="kwa">const</span> lf<span class="sym">:</span><span class="kwb">int</span><span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span><span class="kwa">const</span> tab<span class="sym">:</span><span class="kwb">int</span><span class="sym">;
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span><span class="kwa">proc</span> setws<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">ulong</span> <span class="sym">=</span> <span class="str">&quot;wds[$1]=$2;&quot;</span><span class="sym">;
</span><span class="line">   27 </span><span class="sym"></span><span class="kwa">proc</span> setnws<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">ulong</span> <span class="sym">=</span> <span class="str">&quot;nwds[$1]=$2;&quot;</span><span class="sym">;
</span><span class="line">   28 </span><span class="sym"></span><span class="kwa">fun</span> getws<span class="sym">:</span> <span class="kwb">ulong</span> <span class="sym">-&gt;</span> <span class="kwb">ulong</span> <span class="sym">=</span> <span class="str">&quot;wds[$1]&quot;</span><span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span><span class="kwa">fun</span> getnws<span class="sym">:</span> <span class="kwb">ulong</span> <span class="sym">-&gt;</span> <span class="kwb">ulong</span> <span class="sym">=</span> <span class="str">&quot;nwds[$1]&quot;</span><span class="sym">;
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym"></span><span class="kwa">fun</span> readbuf<span class="sym">:</span> <span class="kwb">unit</span> <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="str">&quot;read(0,buff,BSIZE)&quot;</span><span class="sym">;
</span><span class="line">   32 </span><span class="sym">
</span><span class="line">   33 </span><span class="sym"></span><span class="kwa">var</span> prev_nws <span class="sym">=</span> <span class="num">0x1</span>_0000uL<span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span><span class="kwa">var</span> w_cnt <span class="sym">=</span> <span class="num">0uL</span><span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span><span class="kwa">var</span> l_cnt <span class="sym">=</span> <span class="num">0uL</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span><span class="kwa">var</span> b_cnt <span class="sym">=</span> <span class="num">0uL</span><span class="sym">;
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym"></span><span class="kwa">type</span> iterator <span class="sym">=</span> <span class="str">&quot;unsigned char *&quot;</span><span class="sym">;
</span><span class="line">   39 </span><span class="sym"></span><span class="kwa">fun</span> eq<span class="sym">:</span> iterator <span class="sym">*</span> iterator <span class="sym">-&gt;</span> <span class="kwb">bool</span> <span class="sym">=</span> <span class="str">&quot;$1 == $2&quot;</span><span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span><span class="kwa">fun</span> deref<span class="sym">:</span> iterator <span class="sym">-&gt;</span> <span class="kwb">ulong</span> <span class="sym">=</span> <span class="str">&quot;*$1&quot;</span><span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span><span class="kwa">fun</span> add<span class="sym">:</span> iterator <span class="sym">*</span> <span class="kwb">ulong</span> <span class="sym">-&gt;</span> iterator <span class="sym">=</span> <span class="str">&quot;$1 + $2&quot;</span><span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span><span class="kwa">proc</span> post_incr<span class="sym">:</span> iterator <span class="sym">=</span> <span class="str">&quot;$1++;&quot;</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym">
</span><span class="line">   44 </span><span class="sym"></span><span class="kwa">fun</span> band<span class="sym">:</span> <span class="kwb">ulong</span> <span class="sym">*</span> <span class="kwb">ulong</span> <span class="sym">-&gt;</span> <span class="kwb">ulong</span> <span class="sym">=</span> <span class="str">&quot;$1 &amp; $2&quot;</span><span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span><span class="kwa">fun</span> hi<span class="sym">:</span> <span class="kwb">ulong</span> <span class="sym">-&gt;</span> <span class="kwb">ulong</span> <span class="sym">=</span> <span class="str">&quot;$1 &gt;&gt; 16&quot;</span><span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span><span class="kwa">fun</span> lo<span class="sym">:</span> <span class="kwb">ulong</span> <span class="sym">-&gt;</span> <span class="kwb">ulong</span> <span class="sym">=</span> <span class="str">&quot;$1 &amp; 0xFFFFuL&quot;</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span><span class="kwa">fun</span> parity <span class="sym">:</span> <span class="kwb">ulong</span> <span class="sym">-&gt;</span> <span class="kwb">ulong</span> <span class="sym">=</span> <span class="str">&quot;$1 &amp; 1uL&quot;</span><span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span><span class="kwa">fun</span> neg<span class="sym">:</span> <span class="kwb">ulong</span> <span class="sym">-&gt;</span> <span class="kwb">ulong</span> <span class="sym">=</span> <span class="str">&quot;-$1&quot;</span><span class="sym">;
</span><span class="line">   49 </span><span class="sym">
</span><span class="line">   50 </span><span class="sym"></span><span class="kwa">const</span> buff<span class="sym">:</span> iterator <span class="sym">=</span> <span class="str">&quot;buff&quot;</span><span class="sym">;
</span><span class="line">   51 </span><span class="sym">
</span><span class="line">   52 </span><span class="sym"></span><span class="kwa">fun</span> iswhite<span class="sym">(</span>ch<span class="sym">:</span><span class="kwb">int</span><span class="sym">) =&gt;
</span><span class="line">   53 </span><span class="sym"></span>  ch <span class="sym">==</span> sp <span class="kwa">or</span> ch <span class="sym">==</span> tab <span class="kwa">or</span> ch <span class="sym">==</span> lf<span class="sym">;
</span><span class="line">   54 </span><span class="sym">
</span><span class="line">   55 </span><span class="sym"></span><span class="kwa">fun</span> islf<span class="sym">(</span>ch<span class="sym">:</span><span class="kwb">int</span><span class="sym">)=&gt;</span> ch <span class="sym">==</span> lf<span class="sym">;
</span><span class="line">   56 </span><span class="sym">
</span><span class="line">   57 </span><span class="sym"></span><span class="kwa">fun</span> ul<span class="sym">(</span>x<span class="sym">:</span><span class="kwb">bool</span><span class="sym">)=&gt;</span> C_hack<span class="sym">::</span>cast<span class="sym">[</span><span class="kwb">ulong</span><span class="sym">]</span>x<span class="sym">;
</span><span class="line">   58 </span><span class="sym">
</span><span class="line">   59 </span><span class="sym"></span><span class="com">/* Fill tables */</span>
<span class="line">   60 </span><span class="sym">{
</span><span class="line">   61 </span><span class="sym"></span>  <span class="kwa">var</span> ch <span class="sym">=</span> UCHAR_MAX<span class="sym">;</span> until ch <span class="sym">&lt;</span> <span class="num">0</span> do
<span class="line">   62 </span>    setws<span class="sym">(</span>ch<span class="sym">,</span> ul <span class="sym">(</span>iswhite ch<span class="sym">) +</span> band <span class="sym">(</span><span class="num">0x10000uL</span><span class="sym">,  -(</span>ul <span class="sym">(</span>islf ch<span class="sym">))));
</span><span class="line">   63 </span><span class="sym"></span>    setnws<span class="sym">(</span>ch<span class="sym">,</span> ul <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>iswhite ch<span class="sym">)) +</span>  <span class="num">0x10000uL</span><span class="sym">);
</span><span class="line">   64 </span><span class="sym">    --</span>ch<span class="sym">;
</span><span class="line">   65 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   66 </span><span class="sym">};
</span><span class="line">   67 </span><span class="sym">
</span><span class="line">   68 </span><span class="sym"></span><span class="com">/* Main loop */</span>
<span class="line">   69 </span><span class="sym">{
</span><span class="line">   70 </span><span class="sym"></span>  <span class="kwa">var</span> cnt<span class="sym">:</span> <span class="kwb">ulong</span><span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span>  <span class="kwa">proc</span> uread<span class="sym">() {
</span><span class="line">   72 </span><span class="sym"></span>    <span class="kwa">var</span> n <span class="sym">=</span> readbuf<span class="sym">();
</span><span class="line">   73 </span><span class="sym"></span>    <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">0</span> do System<span class="sym">::</span>exit <span class="num">1</span><span class="sym">;</span> done<span class="sym">;
</span><span class="line">   74 </span><span class="sym"></span>    cnt <span class="sym">=</span> C_hack<span class="sym">::</span>cast<span class="sym">[</span><span class="kwb">ulong</span><span class="sym">]</span>n<span class="sym">;
</span><span class="line">   75 </span><span class="sym">  }
</span><span class="line">   76 </span><span class="sym">
</span><span class="line">   77 </span><span class="sym"></span>  uread<span class="sym">;
</span><span class="line">   78 </span><span class="sym"></span>  whilst cnt <span class="sym">&gt;</span> <span class="num">0uL</span> do
<span class="line">   79 </span>    <span class="kwa">var</span> vect_count <span class="sym">=</span> <span class="num">0uL</span><span class="sym">;
</span><span class="line">   80 </span><span class="sym"></span>    <span class="kwa">var</span> pp<span class="sym">:</span>iterator<span class="sym">;
</span><span class="line">   81 </span><span class="sym"></span>    pe <span class="sym">:=</span> buff <span class="sym">+</span> cnt<span class="sym">;
</span><span class="line">   82 </span><span class="sym">
</span><span class="line">   83 </span><span class="sym"></span>    b_cnt <span class="sym">+=</span> cnt<span class="sym">;
</span><span class="line">   84 </span><span class="sym"></span>    pp <span class="sym">=</span> buff<span class="sym">;
</span><span class="line">   85 </span><span class="sym">
</span><span class="line">   86 </span><span class="sym"></span>    until pp <span class="sym">==</span> pe do
<span class="line">   87 </span>      vect_count <span class="sym">+=</span> band <span class="sym">(</span>getws<span class="sym">(</span>deref pp<span class="sym">),</span> prev_nws<span class="sym">);
</span><span class="line">   88 </span><span class="sym"></span>      prev_nws    <span class="sym">=</span> getnws<span class="sym">(</span>deref pp<span class="sym">);
</span><span class="line">   89 </span><span class="sym"></span>      pp<span class="sym">++;
</span><span class="line">   90 </span><span class="sym"></span>    done<span class="sym">;
</span><span class="line">   91 </span><span class="sym"></span>    w_cnt <span class="sym">+=</span> lo vect_count<span class="sym">;
</span><span class="line">   92 </span><span class="sym"></span>    l_cnt <span class="sym">+=</span> hi vect_count<span class="sym">;
</span><span class="line">   93 </span><span class="sym"></span>    uread<span class="sym">;
</span><span class="line">   94 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   95 </span><span class="sym">
</span><span class="line">   96 </span><span class="sym"></span>  w_cnt <span class="sym">+=</span> parity prev_nws<span class="sym">;
</span><span class="line">   97 </span><span class="sym">};
</span><span class="line">   98 </span><span class="sym">
</span><span class="line">   99 </span><span class="sym"></span><span class="kwa">print</span> l_cnt<span class="sym">;</span> <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;</span> <span class="kwa">print</span> w_cnt<span class="sym">;</span> <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;</span> <span class="kwa">print</span> b_cnt<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">  100 </span><span class="sym"></span>
