<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">//
</FONT></I><I><FONT COLOR="#B22222">// Contributed by John Skaller
</FONT></I><I><FONT COLOR="#B22222">//
</FONT></I>include <B><FONT COLOR="#BC8F8F">&quot;std&quot;</FONT></B>;
n := atoi(System::argv 1);
open Ulong;

body <B><FONT COLOR="#BC8F8F">'''</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;limits.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;unistd.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">define</FONT></B> <FONT COLOR="#B8860B">BSIZE</FONT> 4096
<B><FONT COLOR="#228B22">unsigned</FONT></B> <B><FONT COLOR="#228B22">long</FONT></B> wds[UCHAR_MAX + 1];
<B><FONT COLOR="#228B22">unsigned</FONT></B> <B><FONT COLOR="#228B22">long</FONT></B> nwds[UCHAR_MAX + 1];
<B><FONT COLOR="#228B22">char</FONT></B> sp=<B><FONT COLOR="#BC8F8F">' '</FONT></B>;
<B><FONT COLOR="#228B22">char</FONT></B> tab = '\\t';
<B><FONT COLOR="#228B22">char</FONT></B> lf='\\n';
<B><FONT COLOR="#228B22">unsigned</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B> buff[BSIZE];
<B><FONT COLOR="#BC8F8F">'''</FONT></B>;

<B><FONT COLOR="#228B22">const</FONT></B> UCHAR_MAX:<B><FONT COLOR="#228B22">int</FONT></B>;
<B><FONT COLOR="#228B22">const</FONT></B> BSIZE:<B><FONT COLOR="#228B22">int</FONT></B>;
<B><FONT COLOR="#228B22">const</FONT></B> sp:<B><FONT COLOR="#228B22">int</FONT></B>;
<B><FONT COLOR="#228B22">const</FONT></B> lf:<B><FONT COLOR="#228B22">int</FONT></B>;
<B><FONT COLOR="#228B22">const</FONT></B> tab:<B><FONT COLOR="#228B22">int</FONT></B>;

proc setws: <B><FONT COLOR="#228B22">int</FONT></B> * ulong = <B><FONT COLOR="#BC8F8F">&quot;wds[$1]=$2;&quot;</FONT></B>;
proc setnws: <B><FONT COLOR="#228B22">int</FONT></B> * ulong = <B><FONT COLOR="#BC8F8F">&quot;nwds[$1]=$2;&quot;</FONT></B>;
fun getws: ulong -&gt; ulong = <B><FONT COLOR="#BC8F8F">&quot;wds[$1]&quot;</FONT></B>;
fun getnws: ulong -&gt; ulong = <B><FONT COLOR="#BC8F8F">&quot;nwds[$1]&quot;</FONT></B>;

fun readbuf: unit -&gt; <B><FONT COLOR="#228B22">int</FONT></B> = <B><FONT COLOR="#BC8F8F">&quot;read(0,buff,BSIZE)&quot;</FONT></B>;

var prev_nws = 0x1_0000uL;
var w_cnt = 0uL;
var l_cnt = 0uL;
var b_cnt = 0uL;

type iterator = <B><FONT COLOR="#BC8F8F">&quot;unsigned char *&quot;</FONT></B>;
fun eq: iterator * iterator -&gt; bool = <B><FONT COLOR="#BC8F8F">&quot;$1 == $2&quot;</FONT></B>;
fun deref: iterator -&gt; ulong = <B><FONT COLOR="#BC8F8F">&quot;*$1&quot;</FONT></B>;
fun add: iterator * ulong -&gt; iterator = <B><FONT COLOR="#BC8F8F">&quot;$1 + $2&quot;</FONT></B>;
proc post_incr: iterator = <B><FONT COLOR="#BC8F8F">&quot;$1++;&quot;</FONT></B>;

fun band: ulong * ulong -&gt; ulong = <B><FONT COLOR="#BC8F8F">&quot;$1 &amp; $2&quot;</FONT></B>;
fun hi: ulong -&gt; ulong = <B><FONT COLOR="#BC8F8F">&quot;$1 &gt;&gt; 16&quot;</FONT></B>;
fun lo: ulong -&gt; ulong = <B><FONT COLOR="#BC8F8F">&quot;$1 &amp; 0xFFFFuL&quot;</FONT></B>;
fun parity : ulong -&gt; ulong = <B><FONT COLOR="#BC8F8F">&quot;$1 &amp; 1uL&quot;</FONT></B>;
fun neg: ulong -&gt; ulong = <B><FONT COLOR="#BC8F8F">&quot;-$1&quot;</FONT></B>;

<B><FONT COLOR="#228B22">const</FONT></B> buff: iterator = <B><FONT COLOR="#BC8F8F">&quot;buff&quot;</FONT></B>;

fun <B><FONT COLOR="#0000FF">iswhite</FONT></B>(ch:<B><FONT COLOR="#228B22">int</FONT></B>) =&gt;
  ch == sp or ch == tab or ch == lf;

fun <B><FONT COLOR="#0000FF">islf</FONT></B>(ch:<B><FONT COLOR="#228B22">int</FONT></B>)=&gt; ch == lf;

fun <B><FONT COLOR="#0000FF">ul</FONT></B>(x:bool)=&gt; C_hack::cast[ulong]x;

<I><FONT COLOR="#B22222">/* Fill tables */</FONT></I>
{
  var ch = UCHAR_MAX; until ch &lt; 0 <B><FONT COLOR="#A020F0">do</FONT></B>
    setws(ch, ul (iswhite ch) + band (0x10000uL,  -(ul (islf ch))));
    setnws(ch, ul (not (iswhite ch)) +  0x10000uL);
    --ch;
  done;
};

<I><FONT COLOR="#B22222">/* Main loop */</FONT></I>
{
  var cnt: ulong;
  proc uread() {
    var n = readbuf();
    <B><FONT COLOR="#A020F0">if</FONT></B> n &lt; 0 <B><FONT COLOR="#A020F0">do</FONT></B> System::exit 1; done;
    cnt = C_hack::cast[ulong]n;
  }

  uread;
  whilst cnt &gt; 0uL <B><FONT COLOR="#A020F0">do</FONT></B>
    var vect_count = 0uL;
    var pp:iterator;
    pe := buff + cnt;

    b_cnt += cnt;
    pp = buff;

    until pp == pe <B><FONT COLOR="#A020F0">do</FONT></B>
      vect_count += band (getws(deref pp), prev_nws);
      prev_nws    = getnws(deref pp);
      pp++;
    done;
    w_cnt += lo vect_count;
    l_cnt += hi vect_count;
    uread;
  done;

  w_cnt += parity prev_nws;
};

print l_cnt; print <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>; print w_cnt; print <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>; print b_cnt; endl;
</pre></td></tr></table>
