<span class="slc">#!/usr/bin/python</span>
<span class="slc">##   The Computer Language Shootout</span>
<span class="slc">##   http://shootout.alioth.debian.org/</span>
<span class="slc">##</span>
<span class="slc">##   benchmark implementation (not optimized)</span>
<span class="slc">##   contributed by Josh Goldfoot</span>

<span class="kwc">import</span> sys
<span class="kwc">import</span> Queue
<span class="kwc">import</span> bisect

n <span class="sym">=</span> mn <span class="sym">=</span> <span class="num">0</span>

<span class="kwa">class</span> <span class="kwd">PriorityQueue</span><span class="sym">(</span>Queue<span class="sym">.</span>Queue<span class="sym">):</span>
    <span class="kwb">def</span> <span class="kwd">_init</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> maxsize<span class="sym">):</span>
        <span class="kwc">self</span><span class="sym">.</span>maxsize <span class="sym">=</span> maxsize
        <span class="kwc">self</span><span class="sym">.</span>queue <span class="sym">= []</span>
    <span class="kwb">def</span> <span class="kwd">_put</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> item<span class="sym">):</span>
        bisect<span class="sym">.</span><span class="kwd">insort</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>queue<span class="sym">,</span> item<span class="sym">)</span>
    <span class="kwb">def</span> <span class="kwd">_get</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">):</span>
        <span class="kwb">return</span> <span class="kwc">self</span><span class="sym">.</span>queue<span class="sym">.</span><span class="kwd">pop</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>

<span class="kwa">class</span> <span class="kwd">square</span><span class="sym">(</span>object<span class="sym">):</span>
    __slots__ <span class="sym">= [</span><span class="str">'grid'</span><span class="sym">,</span> <span class="str">'ffm'</span><span class="sym">,</span> <span class="str">'__priority'</span><span class="sym">]</span>
    <span class="kwb">def</span> <span class="kwd">__init__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">):</span>
        <span class="kwc">self</span><span class="sym">.</span>grid <span class="sym">= [</span><span class="num">0</span> <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n <span class="sym">*</span> n<span class="sym">)]</span>
        <span class="kwc">self</span><span class="sym">.</span>ffm <span class="sym">=</span> None
        <span class="kwc">self</span><span class="sym">.</span>__priority <span class="sym">=</span> None
    <span class="kwb">def</span> <span class="kwd">copy</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">):</span>
        ret <span class="sym">=</span> <span class="kwd">square</span><span class="sym">()</span>
        ret<span class="sym">.</span>grid<span class="sym">[:] =</span> <span class="kwc">self</span><span class="sym">.</span>grid
        <span class="kwb">return</span> ret
    <span class="kwb">def</span> <span class="kwd">gridRow</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> y<span class="sym">):</span>
        <span class="kwb">return</span> <span class="sym">[</span> <span class="kwc">self</span><span class="sym">.</span>grid<span class="sym">[</span>x <span class="sym">+</span> y <span class="sym">*</span> n<span class="sym">]</span> <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">)]</span>
    <span class="kwb">def</span> <span class="kwd">gridCol</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> x<span class="sym">):</span>
        <span class="kwb">return</span> <span class="sym">[</span> <span class="kwc">self</span><span class="sym">.</span>grid<span class="sym">[</span>x <span class="sym">+</span> y <span class="sym">*</span> n<span class="sym">]</span> <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">)]</span>
    <span class="kwb">def</span> <span class="kwd">__str__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">):</span>
        <span class="kwb">return</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">( [</span><span class="str">&quot; &quot;</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">([</span><span class="kwa">str</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>grid<span class="sym">[</span>x <span class="sym">+</span> y <span class="sym">*</span> n<span class="sym">])</span>
                    <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">)])</span> <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">)])</span>
    <span class="kwb">def</span> <span class="kwd">possibleMoves</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> x<span class="sym">,</span>y<span class="sym">):</span>
<span class="slc">##Return all moves that can go in the cell x,y for a given</span>
<span class="slc">##grid.  A move is possible if the move (number) is not already</span>
<span class="slc">##in the grid, and if, after making that move, it is still possible to</span>
<span class="slc">##satisfy the magic square conditions (all rows, columns, diagonals adding</span>
<span class="slc">##up to mn, the magic number)</span>
        <span class="kwb">if</span> <span class="kwc">self</span><span class="sym">.</span>grid<span class="sym">[</span>x <span class="sym">+</span> y <span class="sym">*</span> n<span class="sym">] !=</span> <span class="num">0</span><span class="sym">:</span>
            <span class="kwb">return</span> <span class="sym">[]</span>
        cellGroups <span class="sym">= [</span><span class="kwc">self</span><span class="sym">.</span><span class="kwd">gridRow</span><span class="sym">(</span>y<span class="sym">),</span> <span class="kwc">self</span><span class="sym">.</span><span class="kwd">gridCol</span><span class="sym">(</span>x<span class="sym">)]</span>
        <span class="kwb">if</span> x <span class="sym">==</span> y<span class="sym">:</span>
            cellGroups<span class="sym">.</span><span class="kwd">append</span><span class="sym">([</span> <span class="kwc">self</span><span class="sym">.</span>grid<span class="sym">[</span>i <span class="sym">+</span> i <span class="sym">*</span> n<span class="sym">]</span> <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">) ])</span>
        <span class="kwb">if</span> x <span class="sym">+</span> y <span class="sym">==</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">:</span>
            cellGroups<span class="sym">.</span><span class="kwd">append</span><span class="sym">([</span> <span class="kwc">self</span><span class="sym">.</span>grid<span class="sym">[</span>i <span class="sym">+ (</span>n <span class="sym">-</span> <span class="num">1</span> <span class="sym">-</span> i<span class="sym">) *</span> n<span class="sym">]</span> <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">) ])</span>
        usedNumbers <span class="sym">=</span> <span class="kwd">set</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>grid<span class="sym">)</span>
        onePossible <span class="sym">=</span> <span class="kwd">set</span><span class="sym">()</span>
        <span class="kwb">for</span> g <span class="kwb">in</span> cellGroups<span class="sym">:</span>
            <span class="kwb">if</span> g<span class="sym">.</span><span class="kwd">count</span><span class="sym">(</span><span class="num">0</span><span class="sym">) ==</span> <span class="num">1</span><span class="sym">:</span>
                onePossible<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span>mn <span class="sym">-</span> <span class="kwd">sum</span><span class="sym">(</span>g<span class="sym">))</span>
        <span class="kwb">if</span> <span class="kwa">len</span><span class="sym">(</span>onePossible<span class="sym">) ==</span> <span class="num">1</span><span class="sym">:</span>
            onlyPossibleMove <span class="sym">=</span> onePossible<span class="sym">.</span><span class="kwd">pop</span><span class="sym">()</span>
            <span class="kwb">if</span> <span class="num">1</span> <span class="sym">&lt;=</span> onlyPossibleMove <span class="sym">&lt;=</span> n<span class="sym">*</span>n <span class="kwb">and</span> onlyPossibleMove <span class="kwb">not in</span> usedNumbers<span class="sym">:</span>
                <span class="kwb">return</span> <span class="sym">[</span>onlyPossibleMove<span class="sym">]</span>
            <span class="kwb">else</span><span class="sym">:</span>
                <span class="kwb">return</span> <span class="sym">[]</span>
        <span class="kwb">elif</span> <span class="kwa">len</span><span class="sym">(</span>onePossible<span class="sym">) &gt;</span> <span class="num">1</span><span class="sym">:</span>
            <span class="kwb">return</span> <span class="sym">[]</span>
        highestCandidates <span class="sym">= [</span>mn <span class="sym">-</span> <span class="kwd">sum</span><span class="sym">(</span>g<span class="sym">)</span> <span class="kwb">for</span> g <span class="kwb">in</span> cellGroups<span class="sym">]</span>
        highestCandidates<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>n <span class="sym">*</span> n<span class="sym">)</span>
        highest <span class="sym">=</span> <span class="kwa">min</span><span class="sym">(</span>highestCandidates<span class="sym">)</span>
        <span class="kwb">return</span> <span class="sym">[</span> i <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>highest <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="kwb">if</span> i <span class="kwb">not in</span> usedNumbers <span class="sym">]</span>
    <span class="kwb">def</span> <span class="kwd">findFewestMoves</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">):</span>
<span class="slc">##Go through the grid (starting at the top-left, and moving</span>
<span class="slc">##right and down), checking all 0 cells to find the cell with the fewest</span>
<span class="slc">##possible moves.</span>
        <span class="kwb">if</span> <span class="kwc">self</span><span class="sym">.</span>ffm<span class="sym">:</span>
            <span class="kwb">return</span> <span class="kwc">self</span><span class="sym">.</span>ffm
        minSoFar <span class="sym">= []</span>
        minX <span class="sym">=</span> minY <span class="sym">=</span> None
        minLenSoFar <span class="sym">=</span> <span class="num">0</span>
        <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">):</span>
            <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">):</span>
                ind <span class="sym">=</span> x <span class="sym">+</span> y <span class="sym">*</span> n
                <span class="kwb">if</span> <span class="kwc">self</span><span class="sym">.</span>grid<span class="sym">[</span>ind<span class="sym">] ==</span> <span class="num">0</span><span class="sym">:</span>
                    pm <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span><span class="kwd">possibleMoves</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">)</span>
                    <span class="kwb">if</span> minX <span class="sym">==</span> None <span class="kwb">or</span> <span class="kwa">len</span><span class="sym">(</span>pm<span class="sym">) &lt;</span> minLenSoFar<span class="sym">:</span>
                        minSoFar<span class="sym">[:] =</span> pm
                        minLenSoFar <span class="sym">=</span> <span class="kwa">len</span><span class="sym">(</span>pm<span class="sym">)</span>
                        minX <span class="sym">=</span> x
                        minY <span class="sym">=</span> y
        <span class="kwc">self</span><span class="sym">.</span>ffm <span class="sym">= (</span>minSoFar<span class="sym">,</span> minLenSoFar<span class="sym">,</span> minX<span class="sym">,</span> minY<span class="sym">)</span>
        <span class="kwb">return</span> <span class="kwc">self</span><span class="sym">.</span>ffm
        <span class="kwb">return</span> <span class="sym">(</span>minSoFar<span class="sym">,</span> minLenSoFar<span class="sym">,</span> minX<span class="sym">,</span> minY<span class="sym">)</span>

    <span class="kwb">def</span> <span class="kwd">successorNodes</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">):</span>
<span class="slc">##successorNodes: Find the cell with the fewest</span>
<span class="slc">##possible moves left, and then creates a new node for each possible move</span>
<span class="slc">##in that cell.</span>
        <span class="sym">(</span>pm<span class="sym">,</span> len_pm<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">) =</span> <span class="kwc">self</span><span class="sym">.</span><span class="kwd">findFewestMoves</span><span class="sym">()</span>
        node <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span><span class="kwd">copy</span><span class="sym">()</span>  <span class="slc"># Create a copy of yourself</span>
        ind <span class="sym">=</span> x <span class="sym">+</span> y <span class="sym">*</span> n
        <span class="kwb">for</span> move <span class="kwb">in</span> pm<span class="sym">:</span>
            node<span class="sym">.</span>grid<span class="sym">[</span>ind<span class="sym">] =</span> move
            yield node
    <span class="kwb">def</span> <span class="kwd">priority</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">):</span>
<span class="slc">##The priority function is:</span>
<span class="slc">##(number of zeros in the grid) plus</span>
<span class="slc">##(number of possible moves in the cell with the fewest possible moves)</span>
<span class="slc">##the lower the priority, the sooner the node will be popped from the queue.</span>
        <span class="kwb">if</span> <span class="kwc">self</span><span class="sym">.</span>__priority <span class="sym">==</span> None<span class="sym">:</span>
            <span class="sym">(</span>pm<span class="sym">,</span> len_pm<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">) =</span> <span class="kwc">self</span><span class="sym">.</span><span class="kwd">findFewestMoves</span><span class="sym">()</span>
            <span class="kwc">self</span><span class="sym">.</span>__priority <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>grid<span class="sym">.</span><span class="kwd">count</span><span class="sym">(</span><span class="num">0</span><span class="sym">) +</span> len_pm
        <span class="kwb">return</span> <span class="kwc">self</span><span class="sym">.</span>__priority
    <span class="kwb">def</span> <span class="kwd">__cmp__</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> other<span class="sym">):</span>
<span class="slc">##The priority queue is sorted first by</span>
<span class="slc">##the node's calculated priority; then, if the priorities</span>
<span class="slc">##are equal, by whichever node has the lowest numbers</span>
<span class="slc">##in the top-left of the array (or the next cell over,</span>
<span class="slc">##and so on).</span>
        c <span class="sym">=</span> <span class="kwa">cmp</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span><span class="kwd">priority</span><span class="sym">(),</span> other<span class="sym">.</span><span class="kwd">priority</span><span class="sym">())</span>
        <span class="kwb">if</span> c <span class="sym">==</span> <span class="num">0</span><span class="sym">:</span>
            i <span class="sym">=</span> <span class="num">0</span>
            <span class="kwb">while</span> c <span class="sym">==</span> <span class="num">0</span> <span class="kwb">and</span> i <span class="sym">&lt;</span> n <span class="sym">*</span> n<span class="sym">:</span>
                c <span class="sym">=</span> <span class="kwa">cmp</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>grid<span class="sym">[</span>i<span class="sym">],</span> other<span class="sym">.</span>grid<span class="sym">[</span>i<span class="sym">])</span>
                i <span class="sym">+=</span> <span class="num">1</span>
        <span class="kwb">return</span> c

<span class="kwb">def</span> <span class="kwd">main</span><span class="sym">():</span>
    <span class="kwa">global</span> n<span class="sym">,</span> mn
    n <span class="sym">=</span> <span class="kwa">len</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">) &gt;</span> <span class="num">1</span> <span class="kwb">and</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwb">or</span> <span class="num">3</span>
    mn <span class="sym">=</span> n <span class="sym">* (</span><span class="num">1</span> <span class="sym">+</span> n <span class="sym">*</span> n<span class="sym">) /</span> <span class="num">2</span>
    <span class="slc"># Initialize priority queue and push a square full of zeros on it</span>
    priorityQueue <span class="sym">=</span> <span class="kwd">PriorityQueue</span><span class="sym">()</span>
    priorityQueue<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span> <span class="kwd">square</span><span class="sym">() )</span>
    <span class="slc"># Loop through the priority queue...</span>
    <span class="kwb">while not</span> priorityQueue<span class="sym">.</span><span class="kwd">empty</span><span class="sym">():</span>
        node <span class="sym">=</span> priorityQueue<span class="sym">.</span><span class="kwd">get</span><span class="sym">()</span>
        <span class="slc"># if priority is 0, then this is a complete square; stop</span>
        <span class="kwb">if</span> node<span class="sym">.</span><span class="kwd">priority</span><span class="sym">() ==</span> <span class="num">0</span><span class="sym">:</span>
            <span class="kwb">break</span>
        <span class="slc"># otherwise, add to the queue all squares that can be derived by filling in</span>
        <span class="slc">#  one cell in this magic square</span>
        <span class="kwb">for</span> newnode <span class="kwb">in</span> node<span class="sym">.</span><span class="kwd">successorNodes</span><span class="sym">():</span>
            priorityQueue<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span>newnode<span class="sym">.</span><span class="kwd">copy</span><span class="sym">() )</span>
    <span class="kwb">if</span> node<span class="sym">.</span><span class="kwd">priority</span><span class="sym">() ==</span> <span class="num">0</span><span class="sym">:</span>
        <span class="kwb">print</span> node
<span class="kwd">main</span><span class="sym">()</span>
