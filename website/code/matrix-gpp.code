<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: matrix-gpp.code,v 1.1 2004-11-08 14:59:29 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://shootout.alioth.debian.org/
</FONT></I>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iostream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;stdlib.h&gt;</FONT></B>

using namespace std;

#<B><FONT COLOR="#5F9EA0">define</FONT></B> <FONT COLOR="#B8860B">SIZE</FONT> 30

<B><FONT COLOR="#228B22">int</FONT></B> **<B><FONT COLOR="#0000FF">mkmatrix</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> rows, <B><FONT COLOR="#228B22">int</FONT></B> cols) {
    <B><FONT COLOR="#228B22">int</FONT></B> i, j, count = 1;
    <B><FONT COLOR="#228B22">int</FONT></B> **m = (<B><FONT COLOR="#228B22">int</FONT></B> **) malloc(rows * <B><FONT COLOR="#A020F0">sizeof</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> *));
    <B><FONT COLOR="#A020F0">for</FONT></B> (i=0; i&lt;rows; i++) {
	m[i] = (<B><FONT COLOR="#228B22">int</FONT></B> *) malloc(cols * <B><FONT COLOR="#A020F0">sizeof</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B>));
	<B><FONT COLOR="#A020F0">for</FONT></B> (j=0; j&lt;cols; j++) {
	    m[i][j] = count++;
	}
    }
    <B><FONT COLOR="#A020F0">return</FONT></B>(m);
}

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">zeromatrix</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> rows, <B><FONT COLOR="#228B22">int</FONT></B> cols, <B><FONT COLOR="#228B22">int</FONT></B> **m) {
    <B><FONT COLOR="#228B22">int</FONT></B> i, j;
    <B><FONT COLOR="#A020F0">for</FONT></B> (i=0; i&lt;rows; i++)
	<B><FONT COLOR="#A020F0">for</FONT></B> (j=0; j&lt;cols; j++)
	    m[i][j] = 0;
}

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">freematrix</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> rows, <B><FONT COLOR="#228B22">int</FONT></B> **m) {
    <B><FONT COLOR="#A020F0">while</FONT></B> (--rows &gt; -1) { free(m[rows]); }
    free(m);
}

<B><FONT COLOR="#228B22">int</FONT></B> **<B><FONT COLOR="#0000FF">mmult</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> rows, <B><FONT COLOR="#228B22">int</FONT></B> cols, <B><FONT COLOR="#228B22">int</FONT></B> **m1, <B><FONT COLOR="#228B22">int</FONT></B> **m2, <B><FONT COLOR="#228B22">int</FONT></B> **m3) {
    <B><FONT COLOR="#228B22">int</FONT></B> i, j, k, val;
    <B><FONT COLOR="#A020F0">for</FONT></B> (i=0; i&lt;rows; i++) {
	<B><FONT COLOR="#A020F0">for</FONT></B> (j=0; j&lt;cols; j++) {
	    val = 0;
	    <B><FONT COLOR="#A020F0">for</FONT></B> (k=0; k&lt;cols; k++) {
		val += m1[i][k] * m2[k][j];
	    }
	    m3[i][j] = val;
	}
    }
    <B><FONT COLOR="#A020F0">return</FONT></B>(m3);
}

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> argc, <B><FONT COLOR="#228B22">char</FONT></B> *argv[]) {
    <B><FONT COLOR="#228B22">int</FONT></B> i, n = ((argc == 2) ? atoi(argv[1]) : 1);
	
    <B><FONT COLOR="#228B22">int</FONT></B> **m1 = mkmatrix(SIZE, SIZE);
    <B><FONT COLOR="#228B22">int</FONT></B> **m2 = mkmatrix(SIZE, SIZE);
    <B><FONT COLOR="#228B22">int</FONT></B> **mm = mkmatrix(SIZE, SIZE);

    <B><FONT COLOR="#A020F0">for</FONT></B> (i=0; i&lt;n; i++) {
	mm = mmult(SIZE, SIZE, m1, m2, mm);
    }
    cout &lt;&lt; mm[0][0] &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> &lt;&lt; mm[2][3] &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> &lt;&lt; mm[3][2] &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> &lt;&lt; mm[4][4] &lt;&lt; endl;

    freematrix(SIZE, m1);
    freematrix(SIZE, m2);
    freematrix(SIZE, mm);
    <B><FONT COLOR="#A020F0">return</FONT></B>(0);
}</pre></td></tr></table>
