<span class="dir">#!/usr/bin/env slsh</span>
<span class="sym">%</span> The Great Computer Language Shootout
<span class="sym">%</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
<span class="sym">%</span>
<span class="sym">%</span> contributed by John E Davis

<span class="kwc">private</span> define <span class="kwd">eval_A</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) {</span> <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">); }</span>

<span class="kwc">private</span> define <span class="kwd">eval_A_times_u</span> <span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> Au<span class="sym">)</span>
<span class="sym">{</span>
   variable j <span class="sym">= [</span><span class="num">0</span><span class="sym">:</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
   <span class="kwd">_for</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
     <span class="sym">{</span>
	variable i <span class="sym">= ();</span>
	Au<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">sum</span> <span class="sym">(</span><span class="kwd">eval_A</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>u<span class="sym">);</span>
     <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">private</span> define <span class="kwd">eval_At_times_u</span> <span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> Au<span class="sym">)</span>
<span class="sym">{</span>
   variable j <span class="sym">= [</span><span class="num">0</span><span class="sym">:</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
   <span class="kwd">_for</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
     <span class="sym">{</span>
	variable i <span class="sym">= ();</span>
	Au<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">sum</span> <span class="sym">(</span><span class="kwd">eval_A</span> <span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">)*</span>u<span class="sym">);</span>
     <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">private</span> define <span class="kwd">eval_AtA_times_u</span> <span class="sym">(</span>n<span class="sym">,</span> u<span class="sym">,</span> AtAu<span class="sym">)</span>
<span class="sym">{</span>
   variable v <span class="sym">=</span> Double_Type<span class="sym">[</span>n<span class="sym">];</span>
   <span class="kwd">eval_A_times_u</span> <span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">);</span> <span class="kwd">eval_At_times_u</span> <span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>AtAu<span class="sym">);</span>
<span class="sym">}</span>

define <span class="kwd">slsh_main</span> <span class="sym">()</span>
<span class="sym">{</span>
   variable n <span class="sym">=</span> <span class="num">2000</span><span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwd">integer</span> <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
   variable u <span class="sym">=</span> <span class="num">1</span><span class="sym">+</span>Double_Type<span class="sym">[</span>n<span class="sym">],</span> v <span class="sym">=</span> Double_Type<span class="sym">[</span>n<span class="sym">];</span>
   <span class="kwd">loop</span> <span class="sym">(</span><span class="num">10</span><span class="sym">)</span>
     <span class="sym">{</span>
	<span class="kwd">eval_AtA_times_u</span><span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">);</span>
	<span class="kwd">eval_AtA_times_u</span><span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);</span>
     <span class="sym">}</span>
   variable vBv <span class="sym">=</span> <span class="kwd">sum</span> <span class="sym">(</span>u<span class="sym">*</span>v<span class="sym">),</span> vv <span class="sym">=</span> <span class="kwd">sum</span><span class="sym">(</span>v<span class="sym">*</span>v<span class="sym">);</span>
   <span class="sym">() =</span> <span class="kwd">fprintf</span> <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%0.9f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">sqrt</span><span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">));</span>
<span class="sym">}</span>
