<span class="slc">// The Great Computer Language Shootout
</span><span class="slc">// http://shootout.alioth.debian.org/great/
</span><span class="slc">// by Andreas Bogk
</span>
<span class="kwb">module</span><span class="sym">:</span> fasta
<span class="kwa">use</span><span class="sym">-</span>libraries<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> io
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> standard<span class="sym">-</span>io<span class="sym">,</span> streams<span class="sym">,</span> format<span class="sym">-</span>out

<span class="kwa">define constant</span> $alu <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span> <span class="sym">=
</span>  <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
  <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
  <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
  <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
  <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
  <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
  <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;

</span><span class="kwa">define sealed class</span> <span class="kwa">&lt;frequency&gt;</span> <span class="sym">(</span><span class="kwa">&lt;object&gt;</span><span class="sym">)
</span>  <span class="kwa">slot</span> p <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> p<span class="sym">:;
</span>  <span class="kwa">constant slot</span> c <span class="sym">::</span> <span class="kwa">&lt;byte-character&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> c<span class="sym">:;
</span><span class="kwa">end class</span> <span class="kwa">&lt;frequency&gt;</span><span class="sym">;

</span><span class="kwa">define constant</span> $null<span class="sym">-</span>freq <span class="sym">::</span> <span class="kwa">&lt;frequency&gt;</span> <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'</span><span class="esc">\&lt;</span><span class="str">0&gt;'</span><span class="sym">,</span> p<span class="sym">:</span> <span class="num">0.0d0</span><span class="sym">);

</span><span class="kwa">define constant</span> <span class="kwa">&lt;freq-vector&gt;</span> <span class="sym">=</span> limited<span class="sym">(</span><span class="kwa">&lt;vector&gt;</span><span class="sym">,</span> of<span class="sym">:</span> <span class="kwa">&lt;frequency&gt;</span><span class="sym">);

</span><span class="kwa">define constant</span> $iub <span class="sym">::</span> <span class="kwa">&lt;freq-vector&gt;</span> <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;freq-vector&gt;</span><span class="sym">,</span>size<span class="sym">:</span> <span class="num">15</span><span class="sym">,</span>fill<span class="sym">:</span> $null<span class="sym">-</span>freq<span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">0</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'a'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.27d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'c'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.12d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">2</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'g'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.12d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">3</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'t'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.27d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">4</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'B'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">5</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'D'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">6</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'H'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">7</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'K'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">8</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'M'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">9</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'N'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">10</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'R'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">11</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'S'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">12</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'V'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">13</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'W'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);
</span>$iub<span class="sym">[</span><span class="num">14</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'Y'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.02d0</span><span class="sym">);

</span><span class="kwa">define constant</span> $homosapiens <span class="sym">::</span> <span class="kwa">&lt;freq-vector&gt;</span> <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;freq-vector&gt;</span><span class="sym">,</span>size<span class="sym">:</span> <span class="num">4</span><span class="sym">,</span>fill<span class="sym">:</span> $null<span class="sym">-</span>freq<span class="sym">);
</span>$homosapiens<span class="sym">[</span><span class="num">0</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'a'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.3029549426680d0</span><span class="sym">);
</span>$homosapiens<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'c'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.1979883004921d0</span><span class="sym">);
</span>$homosapiens<span class="sym">[</span><span class="num">2</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'g'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.1975473066391d0</span><span class="sym">);
</span>$homosapiens<span class="sym">[</span><span class="num">3</span><span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;frequency&gt;</span><span class="sym">,</span>c<span class="sym">:</span> <span class="str">'t'</span><span class="sym">,</span>p<span class="sym">:</span> <span class="num">0.3015094502008d0</span><span class="sym">);

</span><span class="kwa">define constant</span> $ia <span class="sym">=</span> <span class="num">3877</span><span class="sym">;
</span><span class="kwa">define constant</span> $ic <span class="sym">=</span> <span class="num">29573</span><span class="sym">;
</span><span class="kwa">define constant</span> $im <span class="sym">=</span> <span class="num">139968</span><span class="sym">;
</span><span class="kwa">define variable</span> <span class="sym">*</span>last<span class="sym">* ::</span> <span class="kwa">&lt;double-float&gt;</span> <span class="sym">=</span> <span class="num">42.0d0</span><span class="sym">;

</span><span class="kwa">define function</span> gen<span class="sym">-</span>random<span class="sym">(</span>max<span class="sym">-</span>value <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">)
 =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">;
  *</span>last<span class="sym">* :=</span> modulo<span class="sym">((*</span>last<span class="sym">* *</span> $ia <span class="sym">+</span> $ic<span class="sym">),</span> $im<span class="sym">);
  (</span>max<span class="sym">-</span>value <span class="sym">* *</span>last<span class="sym">*) /</span> $im<span class="sym">;
</span><span class="kwa">end function</span> gen<span class="sym">-</span>random<span class="sym">;

</span><span class="kwa">define function</span> make<span class="sym">-</span>cumulative<span class="sym">(</span>tbl <span class="sym">::</span> <span class="kwa">&lt;freq-vector&gt;</span><span class="sym">)
</span>  <span class="kwa">let</span> cp <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span> <span class="sym">=</span> <span class="num">0.0d0</span><span class="sym">;
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> size<span class="sym">(</span>tbl<span class="sym">))
</span>    cp <span class="sym">:=</span> cp <span class="sym">+</span> tbl<span class="sym">[</span>i<span class="sym">]</span>.p<span class="sym">;
</span>    tbl<span class="sym">[</span>i<span class="sym">]</span>.p <span class="sym">:=</span> cp<span class="sym">;
</span>  <span class="kwa">end for</span><span class="sym">;
</span><span class="kwa">end function</span> make<span class="sym">-</span>cumulative<span class="sym">;

</span><span class="kwa">define function</span> make<span class="sym">-</span>repeat<span class="sym">-</span>fasta
    <span class="sym">(</span>id <span class="sym">::</span> <span class="kwa">&lt;string&gt;</span><span class="sym">,</span> desc <span class="sym">::</span> <span class="kwa">&lt;string&gt;</span><span class="sym">,</span> src <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span><span class="sym">,</span> n <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)
</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>id<span class="sym">,</span>desc<span class="sym">);
</span>  <span class="kwa">let</span> width <span class="sym">=</span> <span class="num">60</span><span class="sym">;
</span>  <span class="kwa">let</span> length <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span>  size<span class="sym">(</span>src<span class="sym">);
</span>  <span class="kwa">let</span> count <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">let</span> k <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">while</span> <span class="sym">(</span>n &gt; <span class="num">0</span><span class="sym">)
</span>    count <span class="sym">:=</span> min<span class="sym">(</span>n<span class="sym">,</span>width<span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> count<span class="sym">)
</span>      <span class="kwa">if</span> <span class="sym">(</span>k <span class="sym">==</span> length<span class="sym">)
</span>        k <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">end if</span><span class="sym">;
</span>      write<span class="sym">-</span>element<span class="sym">(*</span>standard<span class="sym">-</span>output<span class="sym">*,</span>src<span class="sym">[</span>k<span class="sym">]);
</span>      k <span class="sym">:=</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">end for</span><span class="sym">;
</span>    write<span class="sym">(*</span>standard<span class="sym">-</span>output<span class="sym">*,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>    n <span class="sym">:=</span> n <span class="sym">-</span> width<span class="sym">;
</span>  <span class="kwa">end while</span><span class="sym">;
</span><span class="kwa">end function</span> make<span class="sym">-</span>repeat<span class="sym">-</span>fasta<span class="sym">;

</span><span class="kwa">define function select</span><span class="sym">-</span>random<span class="sym">-</span>char <span class="sym">(</span>tbl <span class="sym">::</span> <span class="kwa">&lt;freq-vector&gt;</span><span class="sym">,</span> last<span class="sym">-</span>index <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)
 =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;byte-character&gt;</span><span class="sym">;
</span>  <span class="kwa">let</span> rnd <span class="sym">=</span> gen<span class="sym">-</span>random<span class="sym">(</span><span class="num">1.0d0</span><span class="sym">);
</span>  <span class="kwa">let</span> result <span class="sym">=
</span>    <span class="kwa">block</span><span class="sym">(</span>break<span class="sym">)
</span>      <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> last<span class="sym">-</span>index<span class="sym">)
</span>        <span class="kwa">if</span> <span class="sym">(</span>rnd <span class="kwa">&lt; tbl[i].p)
          break(tbl[i].c);
        end if;
      end for;
      tbl[last-index].c;
    end block;
  result;
end function select-random-char;

define function make-random-fasta
    (id :: &lt;string&gt;</span><span class="sym">,</span> desc <span class="sym">::</span> <span class="kwa">&lt;string&gt;</span><span class="sym">,</span> tbl <span class="sym">::</span> <span class="kwa">&lt;freq-vector&gt;</span><span class="sym">,</span> n <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)
</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>id<span class="sym">,</span>desc<span class="sym">);
</span>  <span class="kwa">let</span> width <span class="sym">=</span> <span class="num">60</span><span class="sym">;
</span>  <span class="kwa">let</span> m <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">let</span> sz <span class="sym">=</span> size<span class="sym">(</span>tbl<span class="sym">) -</span> <span class="num">1</span><span class="sym">;
</span>  <span class="kwa">while</span> <span class="sym">(</span>n &gt; <span class="num">0</span><span class="sym">)
</span>    m <span class="sym">:=</span> min<span class="sym">(</span>n<span class="sym">,</span>width<span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> m<span class="sym">)
</span>      write<span class="sym">-</span>element<span class="sym">(*</span>standard<span class="sym">-</span>output<span class="sym">*,</span><span class="kwa">select</span><span class="sym">-</span>random<span class="sym">-</span>char<span class="sym">(</span>tbl<span class="sym">,</span>sz<span class="sym">));
</span>    <span class="kwa">end for</span><span class="sym">;
</span>    write<span class="sym">(*</span>standard<span class="sym">-</span>output<span class="sym">*,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>    n <span class="sym">:=</span> n <span class="sym">-</span> width<span class="sym">;
</span>  <span class="kwa">end while</span><span class="sym">;
</span><span class="kwa">end function</span> make<span class="sym">-</span>random<span class="sym">-</span>fasta<span class="sym">;

</span><span class="kwa">begin
  let</span> n <span class="sym">=</span> application<span class="sym">-</span>arguments<span class="sym">()[</span><span class="num">0</span><span class="sym">]</span>.string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">;
</span>  make<span class="sym">-</span>cumulative<span class="sym">(</span>$iub<span class="sym">);
</span>  make<span class="sym">-</span>cumulative<span class="sym">(</span>$homosapiens<span class="sym">);

</span>  make<span class="sym">-</span>repeat<span class="sym">-</span>fasta<span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> $alu<span class="sym">,</span> n <span class="sym">*</span> <span class="num">2</span><span class="sym">);
</span>  make<span class="sym">-</span>random<span class="sym">-</span>fasta<span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> $iub<span class="sym">,</span> n <span class="sym">*</span> <span class="num">3</span><span class="sym">);
</span>  make<span class="sym">-</span>random<span class="sym">-</span>fasta<span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> $homosapiens<span class="sym">,</span> n <span class="sym">*</span> <span class="num">5</span><span class="sym">);
</span><span class="kwa">end</span><span class="sym">;</span>
