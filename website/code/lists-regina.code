<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Uses compound variables [i.e. native associative arrays], and REXX */</span>
<span class="com">/* idiom of maintaining data structure size in the 0th element.       */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Current file contains kludges so as to properly run on Debian      */</span>
<span class="com">/* platform:                                                          */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* * 'nop' instructions near 'N'                                      */</span>
<span class="com">/* * 'do i_ = 1 for N' instead of: 'do N'                             */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">nop</span> <span class="sym">;</span> N <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> <span class="kwa">if</span> <span class="kwb">DATATYPE</span><span class="sym">(</span>N<span class="sym">)</span> \<span class="sym">=</span> <span class="str">'NUM'</span> <span class="sym">|</span> N <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> <span class="sym">;</span> N <span class="sym">=</span> <span class="num">1</span>

<span class="kwa">call</span> main N<span class="sym">,</span> <span class="num">10000</span>

<span class="kwa">exit</span> <span class="num">0</span>

<span class="com">/* ----------------------------- */</span>

main <span class="sym">:</span> <span class="kwa">procedure</span>
  <span class="kwa">nop</span> <span class="sym">;</span> N <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> <span class="kwb">SIZE</span> <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">)</span>

  <span class="kwa">do</span> i_ <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> N
    L1.0 <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> <span class="kwb">SIZE</span> <span class="sym">;</span> L1.i <span class="sym">=</span> i <span class="sym">;</span> L1.0 <span class="sym">=</span> L1.0 <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwa">end</span>
    L2.0 <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> <span class="kwb">SIZE</span> <span class="sym">;</span> L2.i <span class="sym">=</span> L1.i <span class="sym">;</span> L2.0 <span class="sym">=</span> L2.0 <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwa">end</span>

    L3.0 <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> j <span class="sym">=</span> <span class="kwb">SIZE</span> <span class="sym">;</span> <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> <span class="kwb">SIZE</span>
      L3.j <span class="sym">=</span> L2.i <span class="sym">;</span> L3.0 <span class="sym">=</span> L3.0 <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwa">drop</span> L2.i <span class="sym">;</span> L2.0 <span class="sym">=</span> L2.0 <span class="sym">-</span> <span class="num">1</span> <span class="sym">;</span> j <span class="sym">=</span> j <span class="sym">-</span> <span class="num">1</span>
    <span class="kwa">end</span>

    <span class="kwa">do</span> i <span class="sym">=</span> <span class="kwb">SIZE</span> <span class="kwa">to</span> <span class="num">1</span> <span class="kwa">by</span> <span class="sym">-</span><span class="num">1</span>
      L2.i <span class="sym">=</span> L3.i <span class="sym">;</span> L2.0 <span class="sym">=</span> L2.0 <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwa">drop</span> L3.i <span class="sym">;</span> L3.0 <span class="sym">=</span> L3.0 <span class="sym">-</span> <span class="num">1</span>
    <span class="kwa">end</span>

    k <span class="sym">=</span> <span class="kwb">SIZE</span> <span class="sym">%</span> <span class="num">2</span> <span class="sym">;</span> j <span class="sym">=</span> <span class="kwb">SIZE</span> <span class="sym">;</span> <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> k
      tmp <span class="sym">=</span> L1.j <span class="sym">;</span> L1.j <span class="sym">=</span> L1.i <span class="sym">;</span> L1.i <span class="sym">=</span> tmp <span class="sym">;</span> j <span class="sym">=</span> j <span class="sym">-</span> <span class="num">1</span>
    <span class="kwa">end</span>

    <span class="kwa">if</span> L1.<span class="com">1 \= SIZE then do ; say &quot;L1 &lt;=&gt; SIZE comparison error&quot; ; exit 1 ; end</span>
<span class="com"></span>
<span class="com">    if L1.0 \= L2.0 then do ; say &quot;L1 L2 sizes differ&quot; ; exit 1 ; end</span>
<span class="com"></span>
<span class="com">    do i = 1 to SIZE</span>
<span class="com">      if L1.i \= L2.i then do ; say &quot;Corresponding L1 L2 elements unequal&quot; ; exit 1 ; end</span>
<span class="com">    end</span>
<span class="com">  end</span>
<span class="com"></span>
<span class="com">  say L1.0</span>
<span class="com"></span>
<span class="com">  return</span>
<span class="com"></span>
