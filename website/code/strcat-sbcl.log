BUILD COMMANDS FOR: strcat.sbcl

Sun Apr  3 23:06:00 PDT 2005

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "strcat.sbcl_compile")'
### START strcat.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "strcat.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END strcat.sbcl_compile

; compiling file "/opt/shootout/shootout/bench/strcat/tmp/strcat.sbcl" (written 03 APR 2005 11:06:00 PM):
; compiling (DEFCONSTANT +STRING+ ...)
; compiling (DEFUN MAIN ...)

; file: /opt/shootout/shootout/bench/strcat/tmp/strcat.sbcl
; in: DEFUN MAIN
;     (LENGTH (STRING-CONCAT1 N))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

; compiling (DEFUN STRING-CONCAT1 ...)

; file: /opt/shootout/shootout/bench/strcat/tmp/strcat.sbcl
; in: DEFUN STRING-CONCAT1
;     (LET ((STR "") (USED-LEN 0) (STRING-LENG 0) (I (1+ N)))
;     (DECLARE (FIXNUM I USED-LEN STRING-LENG))
;     (DECLARE (SIMPLE-BASE-STRING STR))
;     (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 0) (SAFETY 0)))
;     (DOTIMES (I (1- I) (REPLACE (MAKE-STRING USED-LEN) STR))
;       (LET ((REQUIRED-LENGTH #))
;         (IF (EQ STRING-LENG 0)
;             (SETQ STR # STRING-LENG REQUIRED-LENGTH)
;             (IF # #))
;         (REPLACE STR +STRING+ :START1 USED-LEN)
;         (SETQ USED-LEN REQUIRED-LENGTH))))
; 
; note: deleting unreachable code

;     (MAKE-STRING USED-LEN)
; ==>
;   USED-LEN
; 
; note: deleting unreachable code

;     (MAKE-STRING REQUIRED-LENGTH)
; ==>
;   REQUIRED-LENGTH
; 
; note: deleting unreachable code

;     (1- I)
; --> - 
; ==>
;   I
; 
; note: deleting unreachable code

;     (DOTIMES (I (1- I) (REPLACE (MAKE-STRING USED-LEN) STR))
;     (LET ((REQUIRED-LENGTH (+ USED-LEN #)))
;       (IF (EQ STRING-LENG 0)
;           (SETQ STR (MAKE-STRING REQUIRED-LENGTH) STRING-LENG REQUIRED-LENGTH)
;           (IF (> REQUIRED-LENGTH STRING-LENG)
;               (LET #
;                 #)))
;       (REPLACE STR +STRING+ :START1 USED-LEN)
;       (SETQ USED-LEN REQUIRED-LENGTH)))
; --> DO BLOCK LET TAGBODY UNLESS COND IF NOT IF >= IF < 
; ==>
;   I
; 
; note: deleting unreachable code

;     (LET ((REQUIRED-LENGTH (+ USED-LEN (LENGTH +STRING+))))
;     (IF (EQ STRING-LENG 0)
;         (SETQ STR (MAKE-STRING REQUIRED-LENGTH) STRING-LENG REQUIRED-LENGTH)
;         (IF (> REQUIRED-LENGTH STRING-LENG)
;             (LET (#)
;               (LET #
;                 #
;                 #))))
;     (REPLACE STR +STRING+ :START1 USED-LEN)
;     (SETQ USED-LEN REQUIRED-LENGTH))
; 
; note: deleting unreachable code
; 
; note: deleting unreachable code

;     (> REQUIRED-LENGTH STRING-LENG)
; ==>
;   REQUIRED-LENGTH
; 
; note: deleting unreachable code

;     (LET ((NEW-LEN (+ STRING-LENG STRING-LENG)))
;     (LET ((NEW-STR (MAKE-STRING NEW-LEN)))
;       (REPLACE NEW-STR STR :END2 USED-LEN)
;       (SETQ STR NEW-STR STRING-LENG NEW-LEN)))
; 
; note: deleting unreachable code
; 
; note: deleting unreachable code

;     (LET ((NEW-STR (MAKE-STRING NEW-LEN)))
;     (REPLACE NEW-STR STR :END2 USED-LEN)
;     (SETQ STR NEW-STR STRING-LENG NEW-LEN))
; 
; note: deleting unreachable code

;     (REPLACE STR +STRING+ :START1 USED-LEN)
; ==>
;   STR
; 
; note: deleting unreachable code

;     (DOTIMES (I (1- I) (REPLACE (MAKE-STRING USED-LEN) STR))
;     (LET ((REQUIRED-LENGTH (+ USED-LEN #)))
;       (IF (EQ STRING-LENG 0)
;           (SETQ STR (MAKE-STRING REQUIRED-LENGTH) STRING-LENG REQUIRED-LENGTH)
;           (IF (> REQUIRED-LENGTH STRING-LENG)
;               (LET #
;                 #)))
;       (REPLACE STR +STRING+ :START1 USED-LEN)
;       (SETQ USED-LEN REQUIRED-LENGTH)))
; --> DO BLOCK LET TAGBODY PSETQ PSETF LET* MULTIPLE-VALUE-BIND LET 1+ + 
; ==>
;   I
; 
; note: deleting unreachable code

;     (LET ((STR "") (USED-LEN 0) (STRING-LENG 0) (I (1+ N)))
;     (DECLARE (FIXNUM I USED-LEN STRING-LENG))
;     (DECLARE (SIMPLE-BASE-STRING STR))
;     (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 0) (SAFETY 0)))
;     (DOTIMES (I (1- I) (REPLACE (MAKE-STRING USED-LEN) STR))
;       (LET ((REQUIRED-LENGTH #))
;         (IF (EQ STRING-LENG 0)
;             (SETQ STR # STRING-LENG REQUIRED-LENGTH)
;             (IF # #))
;         (REPLACE STR +STRING+ :START1 USED-LEN)
;         (SETQ USED-LEN REQUIRED-LENGTH))))
; 
; caught WARNING:
;   Asserted type SIMPLE-BASE-STRING conflicts with derived type
;   (VALUES (SIMPLE-ARRAY CHARACTER (0)) &OPTIONAL).
;   See also:
;     The SBCL Manual, Node "Handling of Types"
; 
; compilation unit finished
;   caught 1 WARNING condition
;   printed 15 notes

; /opt/shootout/shootout/bench/strcat/tmp/strcat.fasl written
; compilation finished in 0:00:00
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/strcat/tmp/sbcl.core:
writing 18463880 bytes from the read-only space at 0x01000000
writing 6334008 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START strcat.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END strcat.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load strcat.sbcl_run %A


PROGRAM OUTPUT
==============
