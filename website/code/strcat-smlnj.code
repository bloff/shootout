<span class="com">(* strcat.sml
 *
 *   Repeated string(-buffer) concatenation.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume&#64;tti-c.org)
 *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
    val</span> main <span class="sym">:</span> <span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list <span class="sym">-&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
    structure</span> S <span class="sym">=</span> CharArraySlice

    <span class="kwa">val</span> stuff <span class="sym">=</span> <span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span>
    <span class="kwa">val</span> stuffsz <span class="sym">=</span> size stuff
    <span class="kwa">val</span> new <span class="sym">=</span> Unsafe.CharArray.create

    <span class="kwa">fun</span> loop <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> _<span class="sym">,</span> pos<span class="sym">,</span> _<span class="sym">) =</span> pos
      <span class="sym">|</span> loop <span class="sym">(</span>n<span class="sym">,</span> a<span class="sym">,</span> pos<span class="sym">,</span> sz<span class="sym">) =
</span>	<span class="kwa">let val</span> pos' <span class="sym">=</span> pos <span class="sym">+</span> stuffsz
	<span class="kwa">in if</span> pos' <span class="sym">&gt;</span> sz <span class="kwa">then
	       let val</span> sz' <span class="sym">=</span> sz <span class="sym">+</span> sz
		   <span class="kwa">val</span> a' <span class="sym">=</span> new sz'
	       <span class="kwa">in</span> S.copy <span class="sym">{</span> dst <span class="sym">=</span> a'<span class="sym">,</span> di <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> src <span class="sym">=</span> S.slice <span class="sym">(</span>a<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> SOME pos<span class="sym">) };
</span>		  CharArray.copyVec <span class="sym">{</span> dst <span class="sym">=</span> a'<span class="sym">,</span> di <span class="sym">=</span> pos<span class="sym">,</span> src <span class="sym">=</span> stuff <span class="sym">};
</span>		  loop <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">,</span> a'<span class="sym">,</span> pos'<span class="sym">,</span> sz'<span class="sym">)
</span>	       <span class="kwa">end
	   else</span> <span class="sym">(</span>CharArray.copyVec <span class="sym">{</span> dst <span class="sym">=</span> a<span class="sym">,</span> di <span class="sym">=</span> pos<span class="sym">,</span> src <span class="sym">=</span> stuff <span class="sym">};
</span>		 loop <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">,</span> a<span class="sym">,</span> pos'<span class="sym">,</span> sz<span class="sym">))
</span>	<span class="kwa">end

    fun</span> main' n <span class="sym">= (</span>print <span class="sym">(</span><span class="kwa">Int</span>.toString <span class="sym">(</span>loop <span class="sym">(</span>n<span class="sym">,</span> new <span class="num">32</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">32</span><span class="sym">))</span> ^ <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>		   OS.Process.success<span class="sym">)
</span>    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1
</span>      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))
</span><span class="kwa">end</span>
