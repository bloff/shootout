<span class="slc">;;;; -O3 -disable-interrupts -lambda-lift -b</span>

<span class="sym">(</span>declare <span class="sym">(</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>uses format<span class="sym">))</span>

<span class="slc">; could we use more vectors here?</span>

<span class="slc">;; Moments.scm</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>sum <span class="num">0.0</span><span class="sym">)</span>
	 <span class="sym">(</span>numlist <span class="sym">(</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)) (</span>numlist <span class="str">'()))</span>
<span class="str">		    (cond ((eof-object? line) numlist)</span>
<span class="str">			  (else</span>
<span class="str">			   (let ((num (string-&gt;number line)))</span>
<span class="str">			     (set! sum (+ num sum))</span>
<span class="str">			     (loop (read-line) (cons num numlist))))))))</span>
<span class="str">    (let ((n (length numlist)))</span>
<span class="str">      (let ((mean (/ sum n))</span>
<span class="str">	    (average_deviation 0.0)</span>
<span class="str">	    (standard_deviation 0.0)</span>
<span class="str">	    (variance 0.0)</span>
<span class="str">	    (skew 0.0)</span>
<span class="str">	    (kurtosis 0.0)</span>
<span class="str">	    (median 0.0)</span>
<span class="str">	    (deviation 0.0))</span>
<span class="str">	(let loop ((nums numlist))</span>
<span class="str">	  (if (not (null? nums))</span>
<span class="str">	      (begin</span>
<span class="str">		(set! deviation (- (car nums) mean))</span>
<span class="str">		(set! average_deviation (+ average_deviation (abs deviation)))</span>
<span class="str">		(set! variance (+ variance (expt deviation 2.0)))</span>
<span class="str">		(set! skew (+ skew (expt deviation 3.0)))</span>
<span class="str">		(set! kurtosis (+ kurtosis (expt deviation 4)))</span>
<span class="str">		(loop (cdr nums)))))</span>
<span class="str"></span>
<span class="str">	(set! average_deviation (/ average_deviation (exact-&gt;inexact n)))</span>
<span class="str">	(set! variance (/ variance (- n 1)))</span>
<span class="str">	(set! standard_deviation (sqrt variance))</span>
<span class="str"></span>
<span class="str">	(cond ((&gt; variance 0.0)</span>
<span class="str">	       (set! skew (/ skew (* n variance standard_deviation)))</span>
<span class="str">	       (set! kurtosis (- (/ kurtosis (* n variance variance))</span>
<span class="str">				 3.0))))</span>
<span class="str"></span>
<span class="str">	(set! numlist (sort! numlist &lt;))</span>
<span class="str"></span>
<span class="str">	(let ((mid (quotient n 2)))</span>
<span class="str">	  (if (zero? (modulo n 2))</span>
<span class="str">	      (set! median (/ (+ (list-ref numlist mid)</span>
<span class="str">				 (list-ref numlist (- mid 1)))</span>
<span class="str">			      2.0))</span>
<span class="str">	      (set! median (list-ref  numlist mid))))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">	(set! standard_deviation (/ (round (* standard_deviation 1000000))</span>
<span class="str">				    1000000))</span>
<span class="str"></span>
<span class="str">         (format #t &quot;n:                  ~A~%&quot; n )</span>
<span class="str">	 (format #t &quot;median:             ~,6F~%&quot; median)</span>
<span class="str">	 (format #t &quot;mean:               ~,6F~%&quot; mean)</span>
<span class="str">	 (format #t &quot;average_deviation:  ~,6F~%&quot; average_deviation)</span>
<span class="str">	 (format #t &quot;standard_deviation: ~,6F~%&quot; standard_deviation)</span>
<span class="str">	 (format #t &quot;variance:           ~,6F~%&quot; variance)</span>
<span class="str">	 (format #t &quot;skew:               ~,6F~%&quot; skew)</span>
<span class="str">	 (format #t &quot;kurtosis:           ~,6F~%&quot; kurtosis) ))))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">(main (command-line-arguments))</span>
