<span class="com">{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Ian Osgood
}</span>
<span class="com">{$mode objfpc}</span>

<span class="kwa">program</span> wordFrequency<span class="sym">;
</span><span class="kwa">uses</span> Classes<span class="sym">,</span> StrUtils<span class="sym">,</span> SysUtils<span class="sym">;

</span><span class="kwa">const</span> WhiteSpace <span class="sym">= [</span><span class="esc">#0</span>..<span class="esc">#255</span><span class="sym">] - [</span><span class="str">'a'</span>..<span class="str">'z'</span><span class="sym">,</span><span class="str">'A'</span>..<span class="str">'Z'</span><span class="sym">];

</span><span class="kwa">type</span> TCount <span class="sym">=</span> <span class="kwa">class
</span>  count <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>  <span class="kwa">constructor</span> Create<span class="sym">;
</span>  <span class="kwa">procedure</span> Increment<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;
</span><span class="kwa">constructor</span> TCount.Create<span class="sym">;</span>  <span class="kwa">begin</span> count <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">procedure</span> TCount.Increment<span class="sym">;</span> <span class="kwa">begin</span> count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end</span><span class="sym">;

</span><span class="kwa">var</span> words <span class="sym">:</span> TStringList<span class="sym">;
</span>    line<span class="sym">,</span><span class="kwb">word</span> <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;
</span>    pos<span class="sym">,</span>i <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;

</span><span class="kwa">function</span> CountCompare<span class="sym">(</span>w<span class="sym">:</span> TStringList<span class="sym">;</span> i1<span class="sym">,</span>i2<span class="sym">:</span> <span class="kwb">integer</span><span class="sym">) :</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">var</span> diff <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">begin
</span>  diff <span class="sym">:= (</span>w.Objects<span class="sym">[</span>i2<span class="sym">]</span> <span class="kwa">as</span> TCount<span class="sym">)</span>.count <span class="sym">- (</span>w.Objects<span class="sym">[</span>i1<span class="sym">]</span> <span class="kwa">as</span> TCount<span class="sym">)</span>.count<span class="sym">;
</span>  <span class="kwa">if</span> diff <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> diff <span class="sym">:=</span> CompareStr<span class="sym">(</span>w<span class="sym">[</span>i2<span class="sym">],</span>w<span class="sym">[</span>i1<span class="sym">]);
</span>  CountCompare <span class="sym">:=</span> diff<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">begin
</span>  words <span class="sym">:=</span> TStringList.Create<span class="sym">;

</span>  <span class="kwa">while not</span> Eof <span class="kwa">do
  begin
</span>    readln<span class="sym">(</span>line<span class="sym">);
</span>    pos <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">repeat
</span>      <span class="kwb">word</span> <span class="sym">:=</span> lowercase<span class="sym">(</span>ExtractSubstr<span class="sym">(</span>line<span class="sym">,</span>pos<span class="sym">,</span>WhiteSpace<span class="sym">));
</span>      <span class="kwa">if</span> length<span class="sym">(</span><span class="kwb">word</span><span class="sym">) =</span> <span class="num">0</span> <span class="kwa">then</span> continue<span class="sym">;
</span>      <span class="kwa">if</span> words.Find<span class="sym">(</span><span class="kwb">word</span><span class="sym">,</span>i<span class="sym">)</span> <span class="kwa">then
</span>        <span class="sym">(</span>words.Objects<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">as</span> TCount<span class="sym">)</span>.Increment
      <span class="kwa">else
</span>        words.InsertObject<span class="sym">(</span>i<span class="sym">,</span> <span class="kwb">word</span><span class="sym">,</span> TCount.Create<span class="sym">);
</span>    <span class="kwa">until</span> pos <span class="sym">&gt;</span> length<span class="sym">(</span>line<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;

</span>  words.CustomSort<span class="sym">( &#64;</span>CountCompare <span class="sym">);

</span>  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> words.Count<span class="num">-1</span> <span class="kwa">do
</span>    writeln<span class="sym">( (</span>words.Objects<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">as</span> TCount<span class="sym">)</span>.count<span class="sym">:</span><span class="num">7</span><span class="sym">,</span><span class="str">' '</span><span class="sym">,</span>words<span class="sym">[</span>i<span class="sym">]);
</span><span class="kwa">end</span>.
