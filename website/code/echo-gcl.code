<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: echo-gcl.code,v 1.8 2006-09-20 05:51:07 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>
<span class="slc">;;; from Bulent Murtezaogl</span>

#<span class="sym">+</span>sbcl <span class="sym">(</span>in<span class="sym">-</span>package <span class="str">&quot;SB-UNIX&quot;</span><span class="sym">)</span>
#<span class="sym">+</span>cmu <span class="sym">(</span>in<span class="sym">-</span>package <span class="str">&quot;UNIX&quot;</span><span class="sym">)</span>
<span class="sym">(</span><span class="kwa">defun</span> unix<span class="sym">-</span>wait <span class="sym">()</span>
  <span class="str">&quot;Wait for a child to die. We don't care about the status&quot;</span>
  <span class="sym">(</span>int<span class="sym">-</span>syscall <span class="sym">(</span><span class="str">&quot;wait&quot;</span> <span class="sym">(*</span> int<span class="sym">))</span> nil<span class="sym">))</span> <span class="slc">;;  is lisp nil == C NULL ?? Dunno.</span>
#<span class="sym">+</span>sbcl <span class="sym">(</span>in<span class="sym">-</span>package <span class="str">&quot;COMMON-LISP-USER&quot;</span><span class="sym">)</span>
#<span class="sym">+</span>cmu <span class="sym">(</span>in<span class="sym">-</span>package <span class="str">&quot;COMMON-LISP-USER&quot;</span><span class="sym">)</span>
#<span class="sym">+</span>sbcl <span class="sym">(</span>require <span class="str">&quot;SB-BSD-SOCKETS&quot;</span><span class="sym">)</span>


<span class="sym">(</span>define<span class="sym">-</span>condition sigpipe <span class="sym">(</span>error<span class="sym">) () )</span>

<span class="sym">(</span><span class="kwa">defun</span> ih<span class="sym">-</span>sigpipe <span class="sym">(</span>signal code scp<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>ignore signal code scp<span class="sym">))</span>
  <span class="sym">(</span>signal <span class="str">'sigpipe))</span>
<span class="str"></span>
<span class="str">(defun main ()</span>
<span class="str">  (let ((lsock</span>
<span class="str">         #+cmu  (ext:create-inet-listener 0)</span>
<span class="str">	 #+sbcl (make-instance '</span>inet<span class="sym">-</span>socket <span class="sym">:</span><span class="kwa">type</span> <span class="sym">:</span>stream <span class="sym">:</span>protocol <span class="sym">(</span>get<span class="sym">-</span>protocol<span class="sym">-</span>by<span class="sym">-</span>name <span class="str">&quot;tcp&quot;</span><span class="sym">)</span>
	 <span class="sym">)</span>
	<span class="sym">(</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
	                                 #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">))))</span>
    <span class="sym">(</span>multiple<span class="sym">-</span>value<span class="sym">-</span>bind <span class="sym">(</span>host port<span class="sym">) (</span>get<span class="sym">-</span>socket<span class="sym">-</span>host<span class="sym">-</span><span class="kwa">and</span><span class="sym">-</span>port lsock<span class="sym">)</span>
      <span class="sym">(</span>declare <span class="sym">(</span>ignore host<span class="sym">))</span>
      <span class="sym">(</span>let <span class="sym">((</span>fork<span class="sym">-</span>res <span class="sym">(</span>#<span class="sym">+</span>sbcl sb<span class="sym">-</span>posix<span class="sym">:</span>fork
                       #<span class="sym">+</span>cmu     unix<span class="sym">:</span>unix<span class="sym">-</span>fork<span class="sym">)))</span>
	<span class="sym">(</span><span class="kwa">if</span> fork<span class="sym">-</span>res
	    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">zerop</span> fork<span class="sym">-</span>res<span class="sym">)</span>
		<span class="sym">(</span>echo<span class="sym">-</span>client port n<span class="sym">)</span>
	      <span class="sym">(</span>let <span class="sym">((</span>stream <span class="sym">(</span>sys<span class="sym">:</span>make<span class="sym">-</span>fd<span class="sym">-</span>stream
	                     #<span class="sym">+</span>cmu <span class="sym">(</span>ext<span class="sym">:</span>accept<span class="sym">-</span>tcp<span class="sym">-</span>connection lsock<span class="sym">)</span>
			     #<span class="sym">+</span>sbcl <span class="sym">(</span>sb<span class="sym">-</span>bsd<span class="sym">-</span>sockets<span class="sym">:</span>socket<span class="sym">-</span>accept lsock<span class="sym">)</span>
			     <span class="sym">:</span>output t <span class="sym">:</span>input t <span class="sym">:</span>buffering <span class="sym">:</span><span class="kwa">line</span><span class="sym">))</span>
		    <span class="sym">(</span>buffer <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">64</span><span class="sym">))</span>
		    <span class="sym">(</span>insize <span class="num">0</span><span class="sym">)</span>
		    <span class="sym">(</span>sum <span class="num">0</span><span class="sym">))</span>
		<span class="sym">(</span>declare <span class="sym">(</span>fixnum insize sum<span class="sym">))</span>
		<span class="sym">(</span>sys<span class="sym">:</span>enable<span class="sym">-</span>interrupt UNIX<span class="sym">:</span>sigpipe #<span class="str">'ih-sigpipe)</span>
<span class="str">		(handler-case</span>
<span class="str">		    (progn</span>
<span class="str">		      (loop ;; loop seems to chew up my declarations!?</span>
<span class="str">			while (not (zerop (setf (the fixnum insize)</span>
<span class="str">						(the fixnum (sys:read-n-bytes stream buffer 0 64 nil)))))</span>
<span class="str">			do (write-sequence buffer stream :start 0 :end insize)</span>
<span class="str">			(incf sum insize))</span>
<span class="str">		      (#+sbcl sb-unix::unix-wait</span>
<span class="str">		       #+cmu     unix::unix-wait)</span>
<span class="str">		      (format t &quot;server processed ~D bytes~%&quot; sum))</span>
<span class="str">		  (sigpipe (foo) (declare (ignore foo)) (error-return &quot;Kid died prematurely&quot;)) ;; as good as catching sigchild for this app</span>
<span class="str">		  (end-of-file (foo) (declare (ignore foo))(error-return &quot;EOF signalled.  Huh???&quot;))))))))))</span>
<span class="str"></span>
<span class="str">(defun error-return (str)</span>
<span class="str">  (format *standard-output* &quot;Error: ~s ~%&quot; str)</span>
<span class="str">  (quit))</span>
<span class="str"></span>
<span class="str">(defun echo-client (port iter)</span>
<span class="str">  (declare (fixnum iter))</span>
<span class="str">  (let* ((stream (sys:make-fd-stream</span>
<span class="str">		  #+sbcl (sb-bsd-sockets:socket-connect</span>
<span class="str">		      (make-instance '</span>inet<span class="sym">-</span>socket <span class="sym">:</span><span class="kwa">type</span> <span class="sym">:</span>stream <span class="sym">:</span>protocol <span class="sym">:</span>tcp<span class="sym">)</span>
		      #<span class="sym">(</span><span class="num">127 0 0 1</span><span class="sym">)</span> port<span class="sym">)</span>
		  #<span class="sym">+</span>cmu  <span class="sym">(</span>ext<span class="sym">:</span>connect<span class="sym">-</span>to<span class="sym">-</span>inet<span class="sym">-</span>socket <span class="str">&quot;127.0.0.1&quot;</span> port<span class="sym">)</span>
		  <span class="sym">:</span>output t <span class="sym">:</span>input t <span class="sym">:</span>buffering <span class="sym">:</span><span class="kwa">line</span><span class="sym">))</span>
	 <span class="sym">(</span>estr <span class="str">&quot;Hello there sailor</span>
<span class="str">&quot;</span><span class="sym">)</span>
	   <span class="sym">(</span>len <span class="sym">(</span><span class="kwa">length</span> estr<span class="sym">))</span>
	   <span class="sym">(</span>buffer <span class="sym">(</span>make<span class="sym">-</span>string len<span class="sym">)))</span>
    <span class="sym">(</span>dotimes <span class="sym">(</span>i iter<span class="sym">)</span>
      <span class="sym">(</span>declare <span class="sym">(</span>fixnum i len<span class="sym">) (</span>simple<span class="sym">-</span>base<span class="sym">-</span>string buffer<span class="sym">)</span>
	       <span class="sym">(</span>inline write<span class="sym">-</span>sequence sys<span class="sym">:</span><span class="kwa">read</span><span class="sym">-</span>n<span class="sym">-</span>bytes string<span class="sym">=))</span>
      <span class="sym">(</span>write<span class="sym">-</span>sequence estr stream <span class="sym">:</span>start <span class="num">0</span> <span class="sym">:</span>end len <span class="sym">)</span>
      <span class="sym">(</span>sys<span class="sym">:</span><span class="kwa">read</span><span class="sym">-</span>n<span class="sym">-</span>bytes stream buffer <span class="num">0</span> len nil<span class="sym">)</span>
      <span class="sym">(</span>unless <span class="sym">(</span>string<span class="sym">=</span> estr buffer<span class="sym">)</span>
	<span class="sym">(</span>format t <span class="str">&quot;client did not receive what it sent ~%&quot;</span><span class="sym">)))))</span>

