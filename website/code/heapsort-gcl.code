<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: heapsort-gcl.code,v 1.15 2006-09-20 05:51:32 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; with help with declarations from Chih-Chung Chang</span>
<span class="slc">;;; Multi-lisp modifications by Brent Fulgham</span>
<span class="slc">;;; Optimizations by Patrick Frankenberger</span>

<span class="sym">(</span>defconstant <span class="sym">+</span>IM<span class="sym">+</span>     <span class="num">139968</span><span class="sym">)</span>
<span class="sym">(</span>defconstant <span class="sym">+</span>IA<span class="sym">+</span>       <span class="num">3877</span><span class="sym">)</span>
<span class="sym">(</span>defconstant <span class="sym">+</span>IC<span class="sym">+</span>      <span class="num">29573</span><span class="sym">)</span>

<span class="sym">(</span>defvar <span class="sym">*</span>LAST<span class="sym">*</span> <span class="num">42</span><span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> gen_random <span class="sym">(</span><span class="kwa">max</span><span class="sym">)</span>
  <span class="slc">;(declare (type (mod 3877) *LAST*))</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>signed<span class="sym">-</span>byte <span class="num">32</span><span class="sym">) *</span>LAST<span class="sym">*))</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>signed<span class="sym">-</span>byte <span class="num">32</span><span class="sym">)</span> IM IA IC<span class="sym">))</span>
  <span class="sym">(</span>declare <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float max</span><span class="sym">))</span>
  <span class="sym">(</span><span class="kwa">setq</span> <span class="sym">*</span>LAST<span class="sym">* (</span>mod <span class="sym">(+ (* *</span>LAST<span class="sym">* +</span>IA<span class="sym">+) +</span>IC<span class="sym">+) +</span>IM<span class="sym">+))</span>
  <span class="sym">(/ (*</span> <span class="kwa">max</span> <span class="sym">*</span>LAST<span class="sym">*) +</span>IM<span class="sym">+))</span>

<span class="sym">(</span><span class="kwa">defun</span> heapsort <span class="sym">(</span>n ra<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>ir n<span class="sym">)</span>
	<span class="sym">(</span>l <span class="sym">(+ (</span>ash n <span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
	<span class="sym">(</span>i <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>j <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>rra <span class="num">0.0</span>d0<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span> <span class="sym">(*))</span> ra<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>fixnum ir l i j<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float</span> rra<span class="sym">))</span>
    <span class="sym">(</span>block here
      <span class="sym">(</span>loop
	<span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> l <span class="num">1</span><span class="sym">)</span>
	       <span class="sym">(</span><span class="kwa">setq</span> rra <span class="sym">(</span>aref ra <span class="sym">(</span><span class="kwa">setq</span> l <span class="sym">(-</span> l <span class="num">1</span><span class="sym">)))))</span>
	      <span class="sym">(</span>t
	       <span class="sym">(</span><span class="kwa">setq</span> rra <span class="sym">(</span>aref ra ir<span class="sym">))</span>
	       <span class="sym">(</span>setf <span class="sym">(</span>aref ra ir<span class="sym">) (</span>aref ra <span class="num">1</span><span class="sym">))</span>
	       <span class="sym">(</span><span class="kwa">setq</span> ir <span class="sym">(-</span> ir <span class="num">1</span><span class="sym">))</span>
	       <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> ir <span class="num">1</span><span class="sym">)</span>
		   <span class="sym">(</span><span class="kwa">progn</span>
		     <span class="sym">(</span>setf <span class="sym">(</span>aref ra <span class="num">1</span><span class="sym">)</span> rra<span class="sym">)</span>
		     <span class="sym">(</span>return<span class="sym">-</span>from here nil<span class="sym">)))))</span>
	<span class="sym">(</span><span class="kwa">setq</span> i l<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">setq</span> j <span class="sym">(</span>ash l <span class="num">1</span><span class="sym">))</span>
	<span class="sym">(</span>do <span class="sym">()</span>
	    <span class="sym">((&gt;</span> j ir<span class="sym">))</span>
	  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(&lt;</span> j ir<span class="sym">) (&lt; (</span>aref ra j<span class="sym">) (</span>aref ra <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))</span>
		 <span class="sym">(</span><span class="kwa">setq</span> j <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))</span>
	  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> rra <span class="sym">(</span>aref ra j<span class="sym">))</span>
		 <span class="sym">(</span>setf <span class="sym">(</span>aref ra i<span class="sym">) (</span>aref ra j<span class="sym">))</span>
		 <span class="sym">(</span><span class="kwa">setq</span> j <span class="sym">(+</span> j <span class="sym">(</span>the fixnum <span class="sym">(</span><span class="kwa">setq</span> i j<span class="sym">)))))</span>
		<span class="sym">(</span>t
		 <span class="sym">(</span><span class="kwa">setq</span> j <span class="sym">(+</span> ir <span class="num">1</span><span class="sym">)))))</span>
	<span class="sym">(</span>setf <span class="sym">(</span>aref ra i<span class="sym">)</span> rra<span class="sym">)))))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
                                          #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
					  #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">)))</span>
	 <span class="sym">(</span>ary <span class="sym">(</span>make<span class="sym">-</span>array <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> n<span class="sym">) :</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'double-float)))</span>
<span class="str">    (declare (fixnum n))</span>
<span class="str">    (loop for i fixnum from 0 below n do</span>
<span class="str">      (setf (aref ary i) (gen_random 1.0d0)))</span>
<span class="str">    (heapsort n ary)</span>
<span class="str">    (format t &quot;~,10F~%&quot; (aref ary n))))</span>
<span class="str"></span>
