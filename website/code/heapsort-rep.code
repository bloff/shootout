<span class="line">    1 </span>#<span class="sym">!/</span>bin<span class="sym">/</span>bash
<span class="line">    2 </span># <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-
</span><span class="line">    3 </span><span class="sym"></span>PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}
</span><span class="line">    4 </span><span class="sym">[</span> \<span class="sym">! -</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;
</span><span class="line">    5 </span><span class="sym"></span>    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0
</span><span class="line">    6 </span><span class="num"></span>exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="line">    7 </span><span class="sym">!</span>#
<span class="line">    8 </span>
<span class="line">    9 </span><span class="slc">;;; $Id: heapsort-rep.code,v 1.3 2004-11-13 08:28:17 bfulgham Exp $
</span><span class="line">   10 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">   11 </span><span class="slc"></span>
<span class="line">   12 </span><span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()
</span><span class="line">   13 </span><span class="sym">  (</span><span class="kwa">open</span> rep rep.system<span class="sym">)
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym">  (</span>define IM     <span class="num">139968</span><span class="sym">)
</span><span class="line">   16 </span><span class="sym">  (</span>define IA       <span class="num">3877</span><span class="sym">)
</span><span class="line">   17 </span><span class="sym">  (</span>define IC      <span class="num">29573</span><span class="sym">)
</span><span class="line">   18 </span><span class="sym">
</span><span class="line">   19 </span><span class="sym">  (</span>define LAST <span class="num">42</span><span class="sym">)
</span><span class="line">   20 </span><span class="sym">  (</span>define <span class="sym">(</span>gen_random <span class="kwa">max</span><span class="sym">)
</span><span class="line">   21 </span><span class="sym">    (/ (*</span> <span class="kwa">max</span> <span class="sym">(</span><span class="kwa">setq</span> LAST <span class="sym">(</span>modulo <span class="sym">(+ (*</span> LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">)))</span> IM<span class="sym">))
</span><span class="line">   22 </span><span class="sym">
</span><span class="line">   23 </span><span class="sym">  (</span>define <span class="sym">(</span>heapsort n ra<span class="sym">)
</span><span class="line">   24 </span><span class="sym">    (</span>let <span class="sym">((</span>ir n<span class="sym">)
</span><span class="line">   25 </span><span class="sym">          (</span>l <span class="sym">(+ (</span><span class="kwa">lsh</span> n <span class="num">-1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   26 </span><span class="sym">          (</span>i <span class="num">0</span><span class="sym">)
</span><span class="line">   27 </span><span class="sym">          (</span>j <span class="num">0</span><span class="sym">)
</span><span class="line">   28 </span><span class="sym">          (</span>rra <span class="num">0.0</span><span class="sym">))
</span><span class="line">   29 </span><span class="sym">      (</span>catch <span class="str">'return
</span><span class="line">   30 </span><span class="str">        (while #t
</span><span class="line">   31 </span><span class="str">          (cond ((&gt; l 1)
</span><span class="line">   32 </span><span class="str">                 (setq rra (aref ra (setq l (- l 1)))))
</span><span class="line">   33 </span><span class="str">                (t
</span><span class="line">   34 </span><span class="str">                 (setq rra (aref ra ir))
</span><span class="line">   35 </span><span class="str">                 (aset ra ir (aref ra 1))
</span><span class="line">   36 </span><span class="str">                 (setq ir (- ir 1))
</span><span class="line">   37 </span><span class="str">                 (cond ((= ir 1)
</span><span class="line">   38 </span><span class="str">                        (aset ra 1 rra)
</span><span class="line">   39 </span><span class="str">                        (throw '</span>return<span class="sym">)))))
</span><span class="line">   40 </span><span class="sym">          (</span><span class="kwa">setq</span> i l<span class="sym">)
</span><span class="line">   41 </span><span class="sym">          (</span><span class="kwa">setq</span> j <span class="sym">(</span><span class="kwa">lsh</span> l <span class="num">1</span><span class="sym">))
</span><span class="line">   42 </span><span class="sym">          (</span><span class="kwa">while</span> <span class="sym">(&lt;=</span> j ir<span class="sym">)
</span><span class="line">   43 </span><span class="sym">            (</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(&lt;</span> j ir<span class="sym">) (&lt; (</span>aref ra j<span class="sym">) (</span>aref ra <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))
</span><span class="line">   44 </span><span class="sym">                   (</span><span class="kwa">setq</span> j <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))
</span><span class="line">   45 </span><span class="sym">            (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> rra <span class="sym">(</span>aref ra j<span class="sym">))
</span><span class="line">   46 </span><span class="sym">                   (</span>aset ra i <span class="sym">(</span>aref ra j<span class="sym">))
</span><span class="line">   47 </span><span class="sym">                   (</span><span class="kwa">setq</span> j <span class="sym">(+</span> j <span class="sym">(</span><span class="kwa">setq</span> i j<span class="sym">))))
</span><span class="line">   48 </span><span class="sym">                  (</span>t
<span class="line">   49 </span>                   <span class="sym">(</span><span class="kwa">setq</span> j <span class="sym">(+</span> ir <span class="num">1</span><span class="sym">)))))
</span><span class="line">   50 </span><span class="sym">          (</span>aset ra i rra<span class="sym">)))))
</span><span class="line">   51 </span><span class="sym">
</span><span class="line">   52 </span><span class="sym">  (</span>let<span class="sym">* ((</span>arg <span class="sym">(</span>get<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>option <span class="str">&quot;--num&quot;</span> t<span class="sym">))
</span><span class="line">   53 </span><span class="sym">         (</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>from<span class="sym">-</span>string arg<span class="sym">)</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   54 </span><span class="sym">         (</span><span class="kwa">last</span> <span class="sym">(+</span> n <span class="num">1</span><span class="sym">))
</span><span class="line">   55 </span><span class="sym">         (</span>ary <span class="sym">(</span>make<span class="sym">-</span>vector <span class="kwa">last</span> <span class="num">0</span><span class="sym">)))
</span><span class="line">   56 </span><span class="sym">    (</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
</span><span class="line">   57 </span><span class="sym">        ((=</span> i <span class="kwa">last</span><span class="sym">))
</span><span class="line">   58 </span><span class="sym">      (</span>aset ary i <span class="sym">(</span>gen_random <span class="num">1.0</span><span class="sym">)))
</span><span class="line">   59 </span><span class="sym">    (</span>heapsort n ary<span class="sym">)
</span><span class="line">   60 </span><span class="sym">    (</span>let <span class="sym">((</span>result <span class="sym">(</span>aref ary n<span class="sym">)))
</span><span class="line">   61 </span><span class="sym">      (</span><span class="kwa">setq</span> result <span class="sym">(/ (</span>round <span class="sym">(*</span> result <span class="num">10000000000</span><span class="sym">))</span> <span class="num">10000000000</span><span class="sym">))
</span><span class="line">   62 </span><span class="sym">      (</span>format standard<span class="sym">-</span>output <span class="str">&quot;%12d</span><span class="esc">\n</span><span class="str">&quot;</span> result<span class="sym">))))</span>
