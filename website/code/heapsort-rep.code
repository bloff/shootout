<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &amp;&amp;
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep <B><FONT COLOR="#BC8F8F">&quot;$PROG.jlc&quot;</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;$@&quot;</FONT></B>
!#

<I><FONT COLOR="#B22222">;;; $Id: heapsort-rep.code,v 1.2 2004-11-08 08:15:14 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I>
(define-structure main ()
  (open rep rep.system)

  (<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">IM</FONT></B>     139968)
  (<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">IA</FONT></B>       3877)
  (<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">IC</FONT></B>      29573)

  (<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">LAST</FONT></B> 42)
  (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">gen_random</FONT></B> max)
    (/ (* max (setq LAST (modulo (+ (* LAST IA) IC) IM))) IM))

  (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">heapsort</FONT></B> n ra)
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((ir n)
	  (l (+ (lsh n -1) 1))
	  (i 0) 
	  (j 0)
	  (rra 0.0))
      (catch 'return
	(while #t
	  (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; l 1)
		 (setq rra (aref ra (setq l (- l 1)))))
		(t
		 (setq rra (aref ra ir))
		 (aset ra ir (aref ra 1))
		 (setq ir (- ir 1))
		 (<B><FONT COLOR="#A020F0">cond</FONT></B> ((= ir 1)
			(aset ra 1 rra)
			(throw 'return)))))
	  (setq i l)
	  (setq j (lsh l 1))
	  (while (&lt;= j ir)
	    (<B><FONT COLOR="#A020F0">cond</FONT></B> ((<B><FONT COLOR="#A020F0">and</FONT></B> (&lt; j ir) (&lt; (aref ra j) (aref ra (+ j 1))))
		   (setq j (+ j 1))))
	    (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&lt; rra (aref ra j))
		   (aset ra i (aref ra j))
		   (setq j (+ j (setq i j))))
		  (t
		   (setq j (+ ir 1)))))
	  (aset ra i rra)))))

  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((arg (get-command-line-option <B><FONT COLOR="#BC8F8F">&quot;--num&quot;</FONT></B> t))
	 (n (<B><FONT COLOR="#A020F0">if</FONT></B> arg (read-from-string arg) 1))
	 (last (+ n 1))
	 (ary (make-vector last 0)))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 1 (+ i 1)))
	((= i last))
      (aset ary i (gen_random 1.0)))
    (heapsort n ary)
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((result (aref ary n)))
      (setq result (/ (round (* result 10000000000)) 10000000000))
      (format standard-output <B><FONT COLOR="#BC8F8F">&quot;%12d\n&quot;</FONT></B> result))))</pre></td></tr></table>
