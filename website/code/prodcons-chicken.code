<span class="line">    1 </span><span class="slc">; prodcons.scm 
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">; Producer/consumer benchmark for http://www.bagley.org/~doug/shootout/ 
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">; Scheme implementation using SRFI 18, needs only the following subset: 
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">; make-thread, thread-start!, thread-join! 
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">; make-mutex, mutex-lock!, mutex-unlock! 
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">; make-condition-variable, condition-variable-signal! 
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span> <span class="slc">; (by Sven Hartrumpf) 
</span><span class="line">    9 </span><span class="slc"></span>
<span class="line">   10 </span> <span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>uses srfi<span class="num">-18</span><span class="sym">))
</span><span class="line">   11 </span><span class="sym"> 
</span><span class="line">   12 </span><span class="sym"> (</span>define <span class="sym">*</span>num <span class="num">1</span><span class="sym">)
</span><span class="line">   13 </span><span class="sym"> (</span>define <span class="sym">*</span>mutex <span class="sym">(</span>make<span class="sym">-</span>mutex<span class="sym">))
</span><span class="line">   14 </span><span class="sym"> (</span>define <span class="sym">*</span>nonzero<span class="sym">-</span>condition <span class="sym">(</span>make<span class="sym">-</span>condition<span class="sym">-</span>variable<span class="sym">))
</span><span class="line">   15 </span><span class="sym"> (</span>define <span class="sym">*</span>zero<span class="sym">-</span>condition <span class="sym">(</span>make<span class="sym">-</span>condition<span class="sym">-</span>variable<span class="sym">))
</span><span class="line">   16 </span><span class="sym"> (</span>define <span class="sym">*</span>buffer #f<span class="sym">)
</span><span class="line">   17 </span><span class="sym"> (</span>define <span class="sym">*</span>count <span class="num">0</span><span class="sym">)
</span><span class="line">   18 </span><span class="sym"> (</span>define <span class="sym">*</span>produced <span class="num">0</span><span class="sym">)
</span><span class="line">   19 </span><span class="sym"> (</span>define <span class="sym">*</span>consumed <span class="num">0</span><span class="sym">)
</span><span class="line">   20 </span><span class="sym"> 
</span><span class="line">   21 </span><span class="sym"> (</span>define producer
<span class="line">   22 </span>   <span class="sym">(</span>make<span class="sym">-</span>thread
<span class="line">   23 </span>    <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()
</span><span class="line">   24 </span><span class="sym">      (</span>do <span class="sym">((</span>i <span class="num">1</span><span class="sym">))
</span><span class="line">   25 </span><span class="sym">          ((&gt;</span> i <span class="sym">*</span>num<span class="sym">))
</span><span class="line">   26 </span><span class="sym">        (</span>mutex<span class="sym">-</span>lock<span class="sym">! *</span>mutex<span class="sym">)
</span><span class="line">   27 </span><span class="sym">        (</span><span class="kwa">cond</span> <span class="sym">((= *</span>count <span class="num">0</span><span class="sym">)
</span><span class="line">   28 </span><span class="sym">               (</span><span class="kwa">set</span><span class="sym">! *</span>buffer i<span class="sym">)
</span><span class="line">   29 </span><span class="sym">               (</span><span class="kwa">set</span><span class="sym">! *</span>count <span class="sym">(+ *</span>count <span class="num">1</span><span class="sym">))
</span><span class="line">   30 </span><span class="sym">               (</span>condition<span class="sym">-</span>variable<span class="sym">-</span>signal<span class="sym">! *</span>nonzero<span class="sym">-</span>condition<span class="sym">)
</span><span class="line">   31 </span><span class="sym">               (</span>mutex<span class="sym">-</span>unlock<span class="sym">! *</span>mutex <span class="sym">*</span>zero<span class="sym">-</span>condition<span class="sym">)
</span><span class="line">   32 </span><span class="sym">               (</span><span class="kwa">set</span><span class="sym">!</span> i <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))
</span><span class="line">   33 </span><span class="sym">               (</span><span class="kwa">set</span><span class="sym">! *</span>produced <span class="sym">(+ *</span>produced <span class="num">1</span><span class="sym">))
</span><span class="line">   34 </span><span class="sym">               )
</span><span class="line">   35 </span><span class="sym">              (</span>else
<span class="line">   36 </span>               <span class="sym">(</span>mutex<span class="sym">-</span>unlock<span class="sym">! *</span>mutex <span class="sym">*</span>zero<span class="sym">-</span>condition<span class="sym">))) )
</span><span class="line">   37 </span><span class="sym">      (</span>condition<span class="sym">-</span>variable<span class="sym">-</span>signal<span class="sym">! *</span>nonzero<span class="sym">-</span>condition<span class="sym">) ) ) )</span> <span class="slc">; to run consumer once more... 
</span><span class="line">   38 </span><span class="slc"></span>
<span class="line">   39 </span> <span class="sym">(</span>define consumer <span class="sym">(</span>make<span class="sym">-</span>thread <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()
</span><span class="line">   40 </span><span class="sym">   (</span>do <span class="sym">((</span>i <span class="num">0</span><span class="sym">))
</span><span class="line">   41 </span><span class="sym">     ((&gt;=</span> i <span class="sym">*</span>num<span class="sym">))
</span><span class="line">   42 </span><span class="sym">     (</span>mutex<span class="sym">-</span>lock<span class="sym">! *</span>mutex<span class="sym">)
</span><span class="line">   43 </span><span class="sym">     (</span><span class="kwa">cond</span> <span class="sym">((&gt; *</span>count <span class="num">0</span><span class="sym">)
</span><span class="line">   44 </span><span class="sym">            (</span><span class="kwa">set</span><span class="sym">!</span> i <span class="sym">*</span>buffer<span class="sym">)
</span><span class="line">   45 </span><span class="sym">            (</span><span class="kwa">set</span><span class="sym">! *</span>buffer #f<span class="sym">)
</span><span class="line">   46 </span><span class="sym">            (</span><span class="kwa">set</span><span class="sym">! *</span>count <span class="sym">(- *</span>count <span class="num">1</span><span class="sym">))
</span><span class="line">   47 </span><span class="sym">            (</span>condition<span class="sym">-</span>variable<span class="sym">-</span>signal<span class="sym">! *</span>zero<span class="sym">-</span>condition<span class="sym">)
</span><span class="line">   48 </span><span class="sym">            (</span>mutex<span class="sym">-</span>unlock<span class="sym">! *</span>mutex <span class="sym">*</span>nonzero<span class="sym">-</span>condition<span class="sym">)
</span><span class="line">   49 </span><span class="sym">            (</span><span class="kwa">set</span><span class="sym">! *</span>consumed <span class="sym">(+ *</span>consumed <span class="num">1</span><span class="sym">))
</span><span class="line">   50 </span><span class="sym">            )
</span><span class="line">   51 </span><span class="sym">           (</span>else
<span class="line">   52 </span>             <span class="sym">(</span>mutex<span class="sym">-</span>unlock<span class="sym">! *</span>mutex <span class="sym">*</span>nonzero<span class="sym">-</span>condition<span class="sym">)))
</span><span class="line">   53 </span><span class="sym">     ))))
</span><span class="line">   54 </span><span class="sym"> 
</span><span class="line">   55 </span><span class="sym"> (</span>define <span class="sym">(</span>main #<span class="sym">!</span>optional <span class="sym">(</span>n <span class="str">&quot;1&quot;</span><span class="sym">))
</span><span class="line">   56 </span><span class="sym">   (</span><span class="kwa">set</span><span class="sym">! *</span>num <span class="sym">(</span>string<span class="sym">-&gt;</span>number n<span class="sym">))
</span><span class="line">   57 </span><span class="sym">   (</span>thread<span class="sym">-</span>start<span class="sym">!</span> producer<span class="sym">)
</span><span class="line">   58 </span><span class="sym">   (</span>thread<span class="sym">-</span>start<span class="sym">!</span> consumer<span class="sym">)
</span><span class="line">   59 </span><span class="sym">   (</span>thread<span class="sym">-</span>join<span class="sym">!</span> producer<span class="sym">)
</span><span class="line">   60 </span><span class="sym">   (</span>thread<span class="sym">-</span>join<span class="sym">!</span> consumer<span class="sym">)
</span><span class="line">   61 </span><span class="sym">   (</span><span class="kwa">print</span> <span class="sym">*</span>produced <span class="str">&quot; &quot;</span> <span class="sym">*</span>consumed<span class="sym">))
</span><span class="line">   62 </span><span class="sym"> 
</span><span class="line">   63 </span><span class="sym"> 
</span><span class="line">   64 </span><span class="sym"> (</span><span class="kwa">apply</span> main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))
</span><span class="line">   65 </span><span class="sym"> </span> 
