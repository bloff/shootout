<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Mike Pall</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release -I../../Include/dlang/gmp4d -L-lgmp pidigits3.d</span>
<span class="com"></span>
<span class="com">   GMP for D library provided by Ben Hinkle (http://home.comcast.net/~benhinkle/gmp-d/)</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">,</span> gmp<span class="sym">;</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    ctx_t c<span class="sym">;</span>
    c<span class="sym">.</span>n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">27</span><span class="sym">;</span>
    <span class="kwd">pidigits</span><span class="sym">(&amp;</span>c<span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/* Generate successive digits of PI. */</span>
<span class="kwa">void</span> <span class="kwd">pidigits</span><span class="sym">(</span>ctx_t<span class="sym">*</span> c<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    c<span class="sym">.</span>d <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    c<span class="sym">.</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwd">mpz_init_set_ui</span><span class="sym">(</span>c<span class="sym">.</span>q<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwd">mpz_init_set_ui</span><span class="sym">(</span>c<span class="sym">.</span>r<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
    <span class="kwd">mpz_init_set_ui</span><span class="sym">(</span>c<span class="sym">.</span>s<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
    <span class="kwd">mpz_init_set_ui</span><span class="sym">(</span>c<span class="sym">.</span>t<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwd">mpz_init</span><span class="sym">(</span>c<span class="sym">.</span>u<span class="sym">);</span>
    <span class="kwd">mpz_init</span><span class="sym">(</span>c<span class="sym">.</span>v<span class="sym">);</span>
    <span class="kwd">mpz_init</span><span class="sym">(</span>c<span class="sym">.</span>w<span class="sym">);</span>
    <span class="kwa">for</span><span class="sym">(;;)</span>
    <span class="sym">{</span>
        <span class="kwa">int</span> y <span class="sym">=</span> <span class="kwd">extract</span><span class="sym">(</span>c<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
        <span class="kwa">if</span><span class="sym">(</span>y <span class="sym">==</span> <span class="kwd">extract</span><span class="sym">(</span>c<span class="sym">,</span> <span class="num">4</span><span class="sym">))</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span><span class="kwd">prdigit</span><span class="sym">(</span>c<span class="sym">,</span> y<span class="sym">))</span> <span class="kwa">return</span><span class="sym">;</span>
            <span class="kwd">compose_r</span><span class="sym">(</span>c<span class="sym">,</span> <span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>y<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
        <span class="sym">}</span>
        <span class="kwa">else</span>
        <span class="sym">{</span>
            <span class="kwd">compose_l</span><span class="sym">(</span>c<span class="sym">,</span> k<span class="sym">,</span> <span class="num">4</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
            k<span class="sym">++;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">struct</span> ctx_t
<span class="sym">{</span>
    mpz_t q<span class="sym">,</span> r<span class="sym">,</span> s<span class="sym">,</span> t<span class="sym">;</span>	<span class="com">/* Transformation matrix components. */</span>
    mpz_t u<span class="sym">,</span> v<span class="sym">,</span> w<span class="sym">;</span>	<span class="com">/* Temporary numbers. */</span>
    <span class="kwa">int</span> d<span class="sym">,</span> i<span class="sym">,</span> n<span class="sym">;</span>	<span class="com">/* Counters. */</span>
    <span class="kwa">char</span> digits<span class="sym">[</span><span class="num">10</span><span class="sym">];</span>	<span class="com">/* Accumulated digits for one line. */</span>
<span class="sym">}</span>

<span class="com">/* Print one digit. Returns 1 for the last digit. */</span>
<span class="kwa">int</span> <span class="kwd">prdigit</span><span class="sym">(</span>ctx_t<span class="sym">*</span> c<span class="sym">,</span> <span class="kwa">int</span> y<span class="sym">)</span>
<span class="sym">{</span>
    c<span class="sym">.</span>digits<span class="sym">[</span>c<span class="sym">.</span>d<span class="sym">++] =</span> <span class="str">'0'</span><span class="sym">+</span>y<span class="sym">;</span>
    <span class="kwa">if</span><span class="sym">(++</span>c<span class="sym">.</span>i <span class="sym">%</span> <span class="num">10</span> <span class="sym">==</span> <span class="num">0</span> <span class="sym">||</span> c<span class="sym">.</span>i <span class="sym">==</span> c<span class="sym">.</span>n<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;%-10s</span><span class="esc">\t</span><span class="str">:%d&quot;</span><span class="sym">,</span> c<span class="sym">.</span>digits<span class="sym">,</span> c<span class="sym">.</span>i<span class="sym">);</span>
        c<span class="sym">.</span>d <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> c<span class="sym">.</span>i <span class="sym">==</span> c<span class="sym">.</span>n<span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* Extract one digit. */</span>
<span class="kwa">int</span> <span class="kwd">extract</span><span class="sym">(</span>ctx_t<span class="sym">*</span> c<span class="sym">,</span> <span class="kwa">uint</span> j<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwd">mpz_mul_ui</span><span class="sym">(</span>c<span class="sym">.</span>u<span class="sym">,</span> c<span class="sym">.</span>q<span class="sym">,</span> j<span class="sym">);</span>
    <span class="kwd">mpz_add</span><span class="sym">(</span>c<span class="sym">.</span>u<span class="sym">,</span> c<span class="sym">.</span>u<span class="sym">,</span> c<span class="sym">.</span>r<span class="sym">);</span>
    <span class="kwd">mpz_mul_ui</span><span class="sym">(</span>c<span class="sym">.</span>v<span class="sym">,</span> c<span class="sym">.</span>s<span class="sym">,</span> j<span class="sym">);</span>
    <span class="kwd">mpz_add</span><span class="sym">(</span>c<span class="sym">.</span>v<span class="sym">,</span> c<span class="sym">.</span>v<span class="sym">,</span> c<span class="sym">.</span>t<span class="sym">);</span>
    <span class="kwd">mpz_tdiv_q</span><span class="sym">(</span>c<span class="sym">.</span>w<span class="sym">,</span> c<span class="sym">.</span>u<span class="sym">,</span> c<span class="sym">.</span>v<span class="sym">);</span>
    <span class="kwa">return</span> <span class="kwd">mpz_get_ui</span><span class="sym">(</span>c<span class="sym">.</span>w<span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/* Compose matrix with numbers on the right. */</span>
<span class="kwa">void</span> <span class="kwd">compose_r</span><span class="sym">(</span>ctx_t<span class="sym">*</span> c<span class="sym">,</span> <span class="kwa">int</span> bq<span class="sym">,</span> <span class="kwa">int</span> br<span class="sym">,</span> <span class="kwa">int</span> bs<span class="sym">,</span> <span class="kwa">int</span> <span class="kwc">bt</span><span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>u<span class="sym">,</span> c<span class="sym">.</span>r<span class="sym">,</span> bs<span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>r<span class="sym">,</span> c<span class="sym">.</span>r<span class="sym">,</span> bq<span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>v<span class="sym">,</span> c<span class="sym">.</span>t<span class="sym">,</span> br<span class="sym">);</span>
    <span class="kwd">mpz_add</span><span class="sym">(</span>c<span class="sym">.</span>r<span class="sym">,</span> c<span class="sym">.</span>r<span class="sym">,</span> c<span class="sym">.</span>v<span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>t<span class="sym">,</span> c<span class="sym">.</span>t<span class="sym">,</span> <span class="kwc">bt</span><span class="sym">);</span>
    <span class="kwd">mpz_add</span><span class="sym">(</span>c<span class="sym">.</span>t<span class="sym">,</span> c<span class="sym">.</span>t<span class="sym">,</span> c<span class="sym">.</span>u<span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>s<span class="sym">,</span> c<span class="sym">.</span>s<span class="sym">,</span> <span class="kwc">bt</span><span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>u<span class="sym">,</span> c<span class="sym">.</span>q<span class="sym">,</span> bs<span class="sym">);</span>
    <span class="kwd">mpz_add</span><span class="sym">(</span>c<span class="sym">.</span>s<span class="sym">,</span> c<span class="sym">.</span>s<span class="sym">,</span> c<span class="sym">.</span>u<span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>q<span class="sym">,</span> c<span class="sym">.</span>q<span class="sym">,</span> bq<span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/* Compose matrix with numbers on the left. */</span>
<span class="kwa">void</span> <span class="kwd">compose_l</span><span class="sym">(</span>ctx_t<span class="sym">*</span> c<span class="sym">,</span> <span class="kwa">int</span> bq<span class="sym">,</span> <span class="kwa">int</span> br<span class="sym">,</span> <span class="kwa">int</span> bs<span class="sym">,</span> <span class="kwa">int</span> <span class="kwc">bt</span><span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>r<span class="sym">,</span> c<span class="sym">.</span>r<span class="sym">,</span> <span class="kwc">bt</span><span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>u<span class="sym">,</span> c<span class="sym">.</span>q<span class="sym">,</span> br<span class="sym">);</span>
    <span class="kwd">mpz_add</span><span class="sym">(</span>c<span class="sym">.</span>r<span class="sym">,</span> c<span class="sym">.</span>r<span class="sym">,</span> c<span class="sym">.</span>u<span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>u<span class="sym">,</span> c<span class="sym">.</span>t<span class="sym">,</span> bs<span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>t<span class="sym">,</span> c<span class="sym">.</span>t<span class="sym">,</span> <span class="kwc">bt</span><span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>v<span class="sym">,</span> c<span class="sym">.</span>s<span class="sym">,</span> br<span class="sym">);</span>
    <span class="kwd">mpz_add</span><span class="sym">(</span>c<span class="sym">.</span>t<span class="sym">,</span> c<span class="sym">.</span>t<span class="sym">,</span> c<span class="sym">.</span>v<span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>s<span class="sym">,</span> c<span class="sym">.</span>s<span class="sym">,</span> bq<span class="sym">);</span>
    <span class="kwd">mpz_add</span><span class="sym">(</span>c<span class="sym">.</span>s<span class="sym">,</span> c<span class="sym">.</span>s<span class="sym">,</span> c<span class="sym">.</span>u<span class="sym">);</span>
    <span class="kwd">mpz_mul_si</span><span class="sym">(</span>c<span class="sym">.</span>q<span class="sym">,</span> c<span class="sym">.</span>q<span class="sym">,</span> bq<span class="sym">);</span>
<span class="sym">}</span>

<span class="slc">// Reset the GMP memory functions back to the GMP default.</span>
<span class="slc">//  This is needed because gmp4d/gmppool.d is linked in by the</span>
<span class="slc">//  Shootout build command (as needed by version 1 of pidigits.d).</span>
<span class="slc">//  gmp4d/gmppool.d overrides the GMP default if it is linked</span>
<span class="slc">//  w/ the application.</span>
<span class="kwa">static this</span><span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwd">mp_set_memory_functions</span><span class="sym">(&amp;</span>malloc<span class="sym">, &amp;</span>_realloc<span class="sym">, &amp;</span>_free<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">extern</span><span class="sym">(</span>C<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">void</span><span class="sym">*</span> <span class="kwd">malloc</span><span class="sym">(</span>size_t<span class="sym">);</span>
    <span class="kwa">void</span><span class="sym">*</span> <span class="kwd">realloc</span><span class="sym">(</span><span class="kwa">void</span><span class="sym">*,</span>size_t<span class="sym">);</span>
    <span class="kwa">void</span>  <span class="kwd">free</span><span class="sym">(</span><span class="kwa">void</span><span class="sym">*);</span>
    <span class="kwa">void</span><span class="sym">*</span> <span class="kwd">_realloc</span><span class="sym">(</span><span class="kwa">void</span><span class="sym">*</span> ptr<span class="sym">,</span> size_t old<span class="sym">,</span> size_t sz<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">return</span> <span class="kwd">realloc</span><span class="sym">(</span>ptr<span class="sym">,</span>sz<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">void</span>  <span class="kwd">_free</span><span class="sym">(</span><span class="kwa">void</span><span class="sym">*</span> ptr<span class="sym">,</span> size_t sz<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwd">free</span><span class="sym">(</span>ptr<span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>
