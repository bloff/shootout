<span class="com">(*</span>
<span class="com"> * $Id: methcall-ocaml.code,v 1.7 2006-09-20 05:51:57 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * from: Benedikt Rosenau</span>
<span class="com"> * with contributions from Markus Mottl</span>
<span class="com"> *)</span>

<span class="kwa">class</span> toggle start_state <span class="sym">=</span> <span class="kwa">object</span> <span class="sym">(</span>self<span class="sym">)</span>
  <span class="kwa">val mutable</span> state <span class="sym">=</span> start_state

  <span class="kwa">method</span> value <span class="sym">=</span> state
  <span class="kwa">method</span> activate <span class="sym">=</span> state <span class="sym">&lt;-</span> not state<span class="sym">;</span> self
<span class="kwa">end</span>

<span class="kwa">class</span> nth_toggle start_state max_counter <span class="sym">=</span> <span class="kwa">object</span> <span class="sym">(</span>self<span class="sym">)</span>
  <span class="kwa">inherit</span> toggle start_state

  <span class="kwa">val</span> count_max <span class="sym">=</span> max_counter
  <span class="kwa">val mutable</span> counter <span class="sym">=</span> <span class="num">0</span>

  <span class="kwa">method</span> activate <span class="sym">=</span>
    counter <span class="sym">&lt;-</span> counter <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">if</span> counter <span class="sym">&gt;=</span> count_max <span class="kwa">then begin</span> state <span class="sym">&lt;-</span> not state<span class="sym">;</span> counter <span class="sym">&lt;-</span> <span class="num">0</span> <span class="kwa">end</span><span class="sym">;</span>
    self
<span class="kwa">end</span>

<span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">if</span> Array.length Sys.argv <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">else</span> <span class="num">1</span>
<span class="kwa">let</span> tog <span class="sym">=</span> <span class="kwa">new</span> toggle <span class="kwa">true</span><span class="sym">;;</span>
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">2</span> <span class="kwa">to</span> n <span class="kwa">do</span> ignore tog#activate#value <span class="kwa">done</span><span class="sym">;</span>
Printf.printf <span class="str">&quot;%b</span><span class="esc">\n</span><span class="str">&quot;</span> tog#activate#value<span class="sym">;</span>
<span class="kwa">let</span> ntog <span class="sym">=</span> <span class="kwa">new</span> nth_toggle <span class="kwa">true</span> <span class="num">3</span> <span class="kwa">in</span>
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">2</span> <span class="kwa">to</span> n <span class="kwa">do</span> ignore ntog#activate#value <span class="kwa">done</span><span class="sym">;</span>
Printf.printf <span class="str">&quot;%b</span><span class="esc">\n</span><span class="str">&quot;</span> ntog#activate#value
