BUILD COMMANDS FOR: knucleotide.sbcl

Sun Dec  4 02:06:56 PST 2005

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "knucleotide.sbcl_compile")'
### START knucleotide.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "knucleotide.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END knucleotide.sbcl_compile

; compiling file "/opt/shootout/shootout/bench/knucleotide/tmp/knucleotide.sbcl" (written 04 DEC 2005 02:06:56 AM):
; compiling (DEFUN READ-DATA ...)
; compiling (DEFUN ACCUMULATE-FREQUENCIES ...)
; compiling (DEFUN CALCULATE-FREQUENCIES ...)
; compiling (DEFUN WRITE-FREQUENCIES ...)
; file: /opt/shootout/shootout/bench/knucleotide/tmp/knucleotide.sbcl
; in: DEFUN WRITE-FREQUENCIES
;     (STRING< (CAR V1) (CAR V2))
; ==>
;   (SB-KERNEL:STRING<* SB-C::STRING1
;                       SB-C::STRING2
;                       SB-C::START1
;                       SB-C::END1
;                       SB-C::START2
;                       SB-C::END2)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (VECTOR CHARACTER)
;                               (VECTOR NIL)
;                               BASE-STRING
;                               SYMBOL
;                               CHARACTER), not a SIMPLE-BASE-STRING.
;   The second argument is a (OR (VECTOR CHARACTER)
;                                (VECTOR NIL)
;                                BASE-STRING
;                                SYMBOL
;                                CHARACTER), not a SIMPLE-BASE-STRING.

;     (SORT SORTED-FREQUENCIES
;         #'(LAMBDA (V1 V2) (COND ((> # #) T) ((< # #) NIL) (T (STRING< # #)))))
; --> BLOCK LET TYPECASE LET COND IF COND IF PROGN LET 
; --> SB-KERNEL:WITH-ARRAY-DATA LET LET LET MULTIPLE-VALUE-BIND 
; --> MULTIPLE-VALUE-CALL IF 
; ==>
;   (SB-KERNEL:%WITH-ARRAY-DATA #:ONCE-ONLY-88 #:ONCE-ONLY-89 #:ONCE-ONLY-90)
; 
; note: unable to
;   inline non-SIMPLE-vector-handling logic
; because:
;   upgraded array element type not known at compile time

;     (* (/ (THE (INTEGER 0 999999) (CDR ENTRY)) SUM) 100.0)
; --> * FLOAT 
; ==>
;   (SB-KERNEL:%SINGLE-FLOAT SB-C::N)
; 
; note: forced to do full call
;       unable to do inline float coercion (cost 5) because:
;       The first argument is a RATIONAL, not a (SIGNED-BYTE 32).
;       unable to do inline float coercion (cost 6) because:
;       The first argument is a RATIONAL, not a (UNSIGNED-BYTE 32).

;     (FORMAT T
;           "~A ~,3F~%"
;           (CAR ENTRY)
;           (* (/ (THE (INTEGER 0 999999) (CDR ENTRY)) SUM) 100.0))
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM
;                            #:FORMAT-ARG-318
;                            #:G682
;                            #:G683
;                            #:G684
;                            #:G685
;                            #:G686
;                            NIL)
; 
; note: doing float to pointer coercion (cost 13)

; compiling (DEFUN MAIN ...); 
; compilation unit finished
;   printed 4 notes


; /opt/shootout/shootout/bench/knucleotide/tmp/knucleotide.fasl written
; compilation finished in 0:00:00
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/knucleotide/tmp/sbcl.core:
writing 20200680 bytes from the read-only space at 0x01000000
writing 6239056 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START knucleotide.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END knucleotide.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load knucleotide.sbcl_run %A


PROGRAM OUTPUT
==============
A 30.298
T 30.157
C 19.793
G 19.752

AA 9.177
TA 9.137
AT 9.136
TT 9.094
AC 6.000
CA 5.999
GA 5.986
AG 5.985
TC 5.970
CT 5.970
GT 5.957
TG 5.956
CC 3.915
CG 3.910
GC 3.908
GG 3.902

14717	GGT
4463	GGTA
472	GGTATT
9	GGTATTTTAATT
9	GGTATTTTAATTTATAGT
