<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: random-bigloo.code,v 1.7 2006-09-20 05:52:21 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; updated by dgym</span>

<span class="sym">(</span>module random
	<span class="sym">(</span>main main<span class="sym">)</span>
	<span class="sym">(</span>extern <span class="sym">(</span>macro printf<span class="sym">::</span>int <span class="sym">(</span>string double<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">)))</span>

<span class="sym">(</span>define IM   <span class="num">139968</span><span class="sym">)</span>
<span class="sym">(</span>define IA     <span class="num">3877</span><span class="sym">)</span>
<span class="sym">(</span>define IC    <span class="num">29573</span><span class="sym">)</span>
<span class="sym">(</span>define IM<span class="sym">-</span>f <span class="sym">(</span>fixnum<span class="sym">-&gt;</span>flonum IM<span class="sym">))</span>

<span class="sym">(</span>define LAST <span class="num">42</span><span class="sym">)</span>
<span class="sym">(</span>define <span class="sym">(</span>gen_random<span class="sym">::</span>double <span class="kwa">max</span><span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> LAST <span class="sym">(</span>modulo <span class="sym">(+</span>fx <span class="sym">(*</span>fx LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">))</span>
  <span class="sym">(/</span>fl <span class="sym">(*</span>fl <span class="kwa">max</span> <span class="sym">(</span>fixnum<span class="sym">-&gt;</span>flonum LAST<span class="sym">))</span> IM<span class="sym">-</span>f<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>let loop <span class="sym">((</span>iter<span class="sym">::</span>int n<span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span>fx iter <span class="num">1</span><span class="sym">)</span>
	     <span class="sym">(</span>gen_random <span class="num">100.0</span><span class="sym">)</span>
	     <span class="sym">(</span>loop <span class="sym">(-</span>fx iter <span class="num">1</span><span class="sym">)))))</span>
    <span class="sym">(</span>printf #<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>gen_random <span class="num">100.0</span><span class="sym">))))</span>
