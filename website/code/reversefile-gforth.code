\ <span class="sym">-*-</span> mode<span class="sym">:</span> forth <span class="sym">-*-
</span>\ $Id<span class="sym">:</span> reversefile<span class="sym">.</span>gforth<span class="sym">,</span>v <span class="num">1.2 2005</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">13 16</span><span class="sym">:</span><span class="num">24</span><span class="sym">:</span><span class="num">19</span> igouy<span class="sym">-</span>guest Exp $
\ http<span class="sym">:</span><span class="slc">//www.bagley.org/~doug/shootout/
</span>
\ TBD <span class="sym">-</span> we still need to start the size at <span class="num">4096</span> <span class="kwa">and</span> grow only
\ when necessary<span class="sym">.

</span>variable size    <span class="num">2000000</span>                  size <span class="sym">!
</span>variable sbuf    size &#64; allocate <span class="kwa">throw</span>    sbuf <span class="sym">!

</span><span class="num">10</span>   constant  nl_ch
<span class="num">4096</span> constant  MAXREAD

<span class="sym">:</span> add_terminal_newline <span class="sym">(</span> addr <span class="sym">--</span> addr <span class="sym">)
</span>    dup c&#64; nl_ch <span class="sym">&lt;&gt;
</span>    <span class="kwa">if
</span>	dup nl_ch swap c<span class="sym">!
</span>	<span class="num">1</span> <span class="sym">+
</span>    endif <span class="sym">;

:</span> reversefile <span class="sym">( -- )
</span>     nl_ch sbuf &#64; c<span class="sym">!
</span>    sbuf &#64; <span class="num">1</span> <span class="sym">+
</span>    dup dup
    begin
        MAXREAD stdin read<span class="sym">-</span>file <span class="kwa">throw</span> dup
    <span class="kwa">while
</span>	\ add number of bytes read to current buffer position
	<span class="sym">+</span> dup
	\ now stack has start<span class="sym">-</span>of<span class="sym">-</span>buffer end<span class="sym">-</span>of<span class="sym">-</span>buffer addresses
    repeat
    drop
    \ stack<span class="sym">:</span> start<span class="sym">-</span>of<span class="sym">-</span>buffer end<span class="sym">-</span>of<span class="sym">-</span>buffer

    \ <span class="kwa">if</span> input didn<span class="str">'t end in a newline, then add one
    add_terminal_newline

</span>    <span class="esc">\ </span><span class="str">adjust end pointer
    2 -

</span>    <span class="esc">\ </span><span class="str">adjust start pointer
    swap 2 - swap

</span>    <span class="esc">\ </span><span class="str">now scan the buffer backwards, printing out the lines
    tuck
    -do
</span>	<span class="esc">\ </span><span class="str">stack: pointer to end of buffer
	i c&#64; nl_ch =
	if
	    dup i 1 + swap i -
	    stdout write-file throw
	    drop
	    i
	endif
    1 -loop
    ;

reversefile

bye</span> <span class="esc">\ </span><span class="str">th-th-that'</span>s all folks<span class="sym">!</span>
