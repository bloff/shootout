<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: nestedloop-gcl.code,v 1.10 2006-03-30 16:07:17 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; from Friedrich Dominicus</span>
<span class="slc">;;; Multi-lisp modifications by Brent Fulgham</span>
<span class="slc">;;; Enhanced by Juho Snellman</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
                                         #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
					 #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">)))</span>
	<span class="sym">(</span>x <span class="num">0</span><span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>integer <span class="num">0</span> #.<span class="sym">(-</span> most<span class="sym">-</span>positive<span class="sym">-</span>fixnum <span class="num">1</span><span class="sym">))</span> n<span class="sym">)</span>
             <span class="sym">(</span>fixnum x<span class="sym">)</span>
             <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))</span>
    <span class="sym">(</span>dotimes <span class="sym">(</span>a n<span class="sym">)</span>
      <span class="sym">(</span>dotimes <span class="sym">(</span>b n<span class="sym">)</span>
        <span class="sym">(</span>dotimes <span class="sym">(</span>c n<span class="sym">)</span>
          <span class="sym">(</span>dotimes <span class="sym">(</span>d n<span class="sym">)</span>
            <span class="sym">(</span>dotimes <span class="sym">(</span>e n<span class="sym">)</span>
              <span class="sym">(</span>dotimes <span class="sym">(</span>f n<span class="sym">)</span>
                <span class="sym">(</span>incf x<span class="sym">)))))))</span>
   <span class="sym">(</span>format t <span class="str">&quot;~A~%&quot;</span> x<span class="sym">)))</span>
