<span class="dir">#!/bin/bash
</span>RXSYSTEM<span class="sym">=</span><span class="str">&quot;/usr/bin/regina -a -tO&quot;</span> <span class="sym">;</span> RXSCRIPT<span class="sym">=</span><span class="str">&quot;/tmp/$USER$$.rexx&quot;</span>
<span class="sym">(
</span><span class="dir">### Generate REXX script ###
</span>cat <span class="sym">&lt;&lt;</span><span class="str">'EOF'</span>
<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* % regina -v                                                        */</span>
<span class="com">/* REXX-Regina_3.3(MT) 5.00 25 Apr 2004                               */</span>
<span class="com">/* % uname -orvmp                                                     */</span>
<span class="com">/* 2.6.5-1.358 #1 Wed Oct 13 17:49:34 EST 2004 i686 i686 GNU/Linux    */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

NULL <span class="sym">=</span> <span class="str">&quot;&quot;</span>

TBLIN <span class="sym">=</span> <span class="str">&quot;!&quot;</span><span class="str">&quot;#$%&amp;`'()*+,-./0123456789:;&lt;=&gt;?&#64;&quot;</span><span class="sym">||,
</span>        <span class="str">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ[</span><span class="esc">\]</span><span class="str">^_{|}~&quot;</span>

TBLOUT <span class="sym">=</span> <span class="str">&quot;                                 &quot;</span><span class="sym">||,
</span>         <span class="str">&quot;abcdefghijklmnopqrstuvwxyz         &quot;</span>

N <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> <span class="kwa">if</span> DATATYPE<span class="sym">(</span>N<span class="sym">)</span> \<span class="sym">=</span> <span class="str">'NUM'</span> <span class="sym">|</span> N <span class="sym">&lt;</span> <span class="num">1</span> then <span class="sym">;</span> N <span class="sym">=</span> <span class="num">1

</span><span class="com">/* Build table of word frequencies from file data */</span>
D<span class="num">.0</span> <span class="sym">=</span> <span class="num">0

</span><span class="kwa">do while</span> LINES<span class="sym">() &gt;</span> <span class="num">0
</span>  line <span class="sym">=</span> TRANSLATE<span class="sym">(</span>LINEIN<span class="sym">(),</span> TBLOUT<span class="sym">,</span> TBLIN<span class="sym">)

</span>  <span class="kwa">do while</span> line <span class="sym">&lt;&gt;</span> NULL
    parse var line token line

    <span class="com">/* Update entry if it exists */</span>
    <span class="kwa">if</span> SYMBOL<span class="sym">(</span><span class="str">'N.token'</span><span class="sym">) ==</span> <span class="str">'VAR'</span> then <span class="kwa">do
</span>      i <span class="sym">=</span> N<span class="sym">.</span>token <span class="sym">;</span> D<span class="sym">.</span>i<span class="sym">.!</span>v <span class="sym">=</span> D<span class="sym">.</span>i<span class="sym">.!</span>v <span class="sym">+</span> <span class="num">1
</span>      iterate
    end

    <span class="com">/* otherwise add a new entry */</span>
    D<span class="num">.0</span> <span class="sym">=</span> D<span class="num">.0</span> <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> i <span class="sym">=</span> D<span class="num">.0</span> <span class="sym">;</span> D<span class="sym">.</span>i<span class="sym">.!</span>k <span class="sym">=</span> token <span class="sym">;</span> D<span class="sym">.</span>i<span class="sym">.!</span>v <span class="sym">=</span> <span class="num">1
</span>    N<span class="sym">.</span>token <span class="sym">=</span> i
  end

end

drop N<span class="sym">. ;</span> WF<span class="num">.0</span> <span class="sym">=</span> <span class="num">0

</span><span class="com">/* Build count -&gt; word mapping table */</span>
<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> D<span class="num">.0
</span>  v <span class="sym">=</span> D<span class="sym">.</span>i<span class="sym">.!</span>v <span class="sym">;</span> <span class="kwa">if</span> v <span class="sym">&gt;</span> WF<span class="num">.0</span> then <span class="sym">;</span> WF<span class="num">.0</span> <span class="sym">=</span> v
  <span class="kwa">if</span> SYMBOL<span class="sym">(</span><span class="str">'WF.v'</span><span class="sym">) ==</span> <span class="str">'VAR'</span> then
    WF<span class="sym">.</span>v <span class="sym">=</span> insertWordDescending<span class="sym">(</span>D<span class="sym">.</span>i<span class="sym">.!</span>k<span class="sym">,</span> WF<span class="sym">.</span>v<span class="sym">)
</span>  <span class="kwa">else
</span>    WF<span class="sym">.</span>v <span class="sym">=</span> D<span class="sym">.</span>i<span class="sym">.!</span>k
end

<span class="com">/* Print word count [descending] -&gt; word [descending] */</span>
<span class="kwa">do</span> i <span class="sym">=</span> WF<span class="num">.0</span> to <span class="num">1</span> by <span class="num">-1
</span>  <span class="kwa">if</span> SYMBOL<span class="sym">(</span><span class="str">'WF.i'</span><span class="sym">)</span> \<span class="sym">=</span> <span class="str">'VAR'</span> then <span class="sym">;</span> iterate
  nwords <span class="sym">=</span> WORDS<span class="sym">(</span>WF<span class="sym">.</span>i<span class="sym">)
</span>  <span class="kwa">do</span> j <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> nwords <span class="sym">;</span> say i WORD<span class="sym">(</span>WF<span class="sym">.</span>i<span class="sym">,</span> j<span class="sym">) ;</span> end
end

drop WF<span class="sym">.</span> D<span class="sym">. ;</span> exit <span class="num">0

</span><span class="com">/* ----------------------------- */</span>

insertWordDescending <span class="sym">:</span> procedure
  V <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> S <span class="sym">=</span> STRIP<span class="sym">(</span>ARG<span class="sym">(</span><span class="num">2</span><span class="sym">))
</span>  R <span class="sym">=</span> WORDS<span class="sym">(</span>S<span class="sym">) ;</span> <span class="kwa">if</span> R <span class="sym">&lt;</span> <span class="num">1</span> then <span class="sym">;</span> <span class="kwa">return</span> V

  L <span class="sym">=</span> <span class="num">1

</span>  <span class="kwa">do while</span> L <span class="sym">&lt;=</span> R
    M <span class="sym">= (</span>L <span class="sym">+</span> R<span class="sym">) %</span> <span class="num">2</span> <span class="sym">;</span> W <span class="sym">=</span> WORD<span class="sym">(</span>S<span class="sym">,</span> M<span class="sym">)
</span>    <span class="kwa">if</span> V <span class="sym">=</span> W then <span class="sym">;</span> <span class="kwa">return</span> S
    <span class="kwa">if</span> V <span class="sym">&gt;</span> W then <span class="sym">;</span> R <span class="sym">=</span> M <span class="num">- 1</span> <span class="sym">;</span> <span class="kwa">else</span> L <span class="sym">=</span> M <span class="sym">+</span> <span class="num">1
</span>  end

  <span class="com">/* insert [after] item here */</span>
  select
    when R <span class="sym">&lt;</span> <span class="num">1</span> then <span class="sym">;</span> insertAfter <span class="sym">=</span> <span class="num">0
</span>    when L <span class="sym">&gt;</span> WORDS<span class="sym">(</span>S<span class="sym">)</span> then <span class="sym">;</span> insertAfter <span class="sym">=</span> LENGTH<span class="sym">(</span>S<span class="sym">) +</span> <span class="num">1
</span>    otherwise
      <span class="kwa">if</span> M <span class="sym">=</span> R then <span class="sym">;</span> insertAfter <span class="sym">=</span> WORDINDEX<span class="sym">(</span>S<span class="sym">,</span> M <span class="sym">+</span> <span class="num">1</span><span class="sym">) -</span> <span class="num">1
</span>      <span class="kwa">else</span> <span class="sym">;</span> insertAfter <span class="sym">=</span> WORDINDEX<span class="sym">(</span>S<span class="sym">,</span> M<span class="sym">) -</span> <span class="num">1
</span>  end

  <span class="kwa">return</span> INSERT<span class="sym">(</span>V<span class="sym">,</span> S<span class="sym">,</span> insertAfter<span class="sym">,</span> LENGTH<span class="sym">(</span>V<span class="sym">) +</span> <span class="num">1</span><span class="sym">)

</span>EOF
<span class="sym">) &gt;</span> $RXSCRIPT

<span class="dir">### Execute REXX script, piping</span> <span class="dstr">'stdin'</span><span class="dir"> to interpreter if redirected ###
</span><span class="kwa">if</span> <span class="sym">[ -</span>t <span class="num">0</span> <span class="sym">] ;</span> then $RXSYSTEM $RXSCRIPT $<span class="sym">*
</span><span class="kwa">else</span> tee <span class="sym">|</span> $RXSYSTEM $RXSCRIPT $<span class="sym">*
</span>fi

RXEXIT<span class="sym">=</span>$? <span class="sym">;</span> rm <span class="sym">-</span>f $RXSCRIPT <span class="sym">;</span> exit $RXEXIT
