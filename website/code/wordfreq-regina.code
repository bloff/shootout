<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

NULL <span class="sym">=</span> <span class="str">&quot;&quot;</span>

TBLIN <span class="sym">=</span> <span class="str">&quot;!&quot;</span><span class="str">&quot;#$%&amp;`'()*+,-./0123456789:;&lt;=&gt;?&#64;&quot;</span><span class="sym">||,</span>
        <span class="str">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_{|}~&quot;</span>

TBLOUT <span class="sym">=</span> <span class="str">&quot;                                 &quot;</span><span class="sym">||,</span>
         <span class="str">&quot;abcdefghijklmnopqrstuvwxyz         &quot;</span>

N <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> <span class="kwa">if</span> <span class="kwb">DATATYPE</span><span class="sym">(</span>N<span class="sym">)</span> \<span class="sym">=</span> <span class="str">'NUM'</span> <span class="sym">|</span> N <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> <span class="sym">;</span> N <span class="sym">=</span> <span class="num">1</span>

<span class="com">/* Build table of word frequencies from file data */</span>
D<span class="num">.0</span> <span class="sym">=</span> <span class="num">0</span>

<span class="kwa">do while</span> <span class="kwb">LINES</span><span class="sym">() &gt;</span> <span class="num">0</span>
  <span class="kwb">line</span> <span class="sym">=</span> <span class="kwb">TRANSLATE</span><span class="sym">(</span><span class="kwb">LINEIN</span><span class="sym">(),</span> TBLOUT<span class="sym">,</span> TBLIN<span class="sym">)</span>

  <span class="kwa">do while</span> <span class="kwb">line</span> <span class="sym">&lt;&gt;</span> NULL
    <span class="kwa">parse</span> <span class="kwb">var line</span> token <span class="kwb">line</span>

    <span class="com">/* Update entry if it exists */</span>
    <span class="kwa">if</span> <span class="kwb">SYMBOL</span><span class="sym">(</span><span class="str">'N.token'</span><span class="sym">) ==</span> <span class="str">'VAR'</span> <span class="kwa">then do</span>
      i <span class="sym">=</span> N.token <span class="sym">;</span> D.i.<span class="sym">!</span>v <span class="sym">=</span> D.i.<span class="sym">!</span>v <span class="sym">+</span> <span class="num">1</span>
      <span class="kwa">iterate</span>
    <span class="kwa">end</span>

    <span class="com">/* otherwise add a new entry */</span>
    D<span class="num">.0</span> <span class="sym">=</span> D<span class="num">.0</span> <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> i <span class="sym">=</span> D<span class="num">.0</span> <span class="sym">;</span> D.i.<span class="sym">!</span>k <span class="sym">=</span> token <span class="sym">;</span> D.i.<span class="sym">!</span>v <span class="sym">=</span> <span class="num">1</span>
    N.token <span class="sym">=</span> i
  <span class="kwa">end</span>

<span class="kwa">end</span>

<span class="kwa">drop</span> N. <span class="sym">;</span> WF<span class="num">.0</span> <span class="sym">=</span> <span class="num">0</span>

<span class="com">/* Build count -&gt; word mapping table */</span>
<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> D<span class="num">.0</span>
  v <span class="sym">=</span> D.i.<span class="sym">!</span>v <span class="sym">;</span> <span class="kwa">if</span> v <span class="sym">&gt;</span> WF<span class="num">.0</span> <span class="kwa">then</span> <span class="sym">;</span> WF<span class="num">.0</span> <span class="sym">=</span> v
  <span class="kwa">if</span> <span class="kwb">SYMBOL</span><span class="sym">(</span><span class="str">'WF.v'</span><span class="sym">) ==</span> <span class="str">'VAR'</span> <span class="kwa">then</span>
    WF.v <span class="sym">=</span> insertWordDescending<span class="sym">(</span>D.i.<span class="sym">!</span>k<span class="sym">,</span> WF.v<span class="sym">)</span>
  <span class="kwa">else</span>
    WF.v <span class="sym">=</span> D.i.<span class="sym">!</span>k
<span class="kwa">end</span>

<span class="com">/* Print word count [descending] -&gt; word [descending] */</span>
<span class="kwa">do</span> i <span class="sym">=</span> WF<span class="num">.0</span> <span class="kwa">to</span> <span class="num">1</span> <span class="kwa">by</span> <span class="sym">-</span><span class="num">1</span>
  <span class="kwa">if</span> <span class="kwb">SYMBOL</span><span class="sym">(</span><span class="str">'WF.i'</span><span class="sym">)</span> \<span class="sym">=</span> <span class="str">'VAR'</span> <span class="kwa">then</span> <span class="sym">;</span> <span class="kwa">iterate</span>
  nwords <span class="sym">=</span> <span class="kwb">WORDS</span><span class="sym">(</span>WF.i<span class="sym">)</span>
  <span class="kwa">do</span> j <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> nwords <span class="sym">;</span> <span class="kwa">say</span> <span class="kwb">FORMAT</span><span class="sym">(</span>i<span class="sym">,</span> <span class="num">7</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span> <span class="kwb">WORD</span><span class="sym">(</span>WF.i<span class="sym">,</span> j<span class="sym">) ;</span> <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">drop</span> WF. D. <span class="sym">;</span> <span class="kwa">exit</span> <span class="num">0</span>

<span class="com">/* ----------------------------- */</span>

insertWordDescending <span class="sym">:</span> <span class="kwa">procedure</span>
  V <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> S <span class="sym">=</span> <span class="kwb">STRIP</span><span class="sym">(</span><span class="kwa">ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">))</span>
  R <span class="sym">=</span> <span class="kwb">WORDS</span><span class="sym">(</span>S<span class="sym">) ;</span> <span class="kwa">if</span> R <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> <span class="sym">;</span> <span class="kwa">return</span> V

  L <span class="sym">=</span> <span class="num">1</span>

  <span class="kwa">do while</span> L <span class="sym">&lt;=</span> R
    M <span class="sym">= (</span>L <span class="sym">+</span> R<span class="sym">) %</span> <span class="num">2</span> <span class="sym">;</span> W <span class="sym">=</span> <span class="kwb">WORD</span><span class="sym">(</span>S<span class="sym">,</span> M<span class="sym">)</span>
    <span class="kwa">if</span> V <span class="sym">=</span> W <span class="kwa">then</span> <span class="sym">;</span> <span class="kwa">return</span> S
    <span class="kwa">if</span> V <span class="sym">&gt;</span> W <span class="kwa">then</span> <span class="sym">;</span> R <span class="sym">=</span> M <span class="sym">-</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwa">else</span> L <span class="sym">=</span> M <span class="sym">+</span> <span class="num">1</span>
  <span class="kwa">end</span>

  <span class="com">/* insert [after] item here */</span>
  <span class="kwa">select</span>
    <span class="kwa">when</span> R <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> <span class="sym">;</span> insertAfter <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">when</span> L <span class="sym">&gt;</span> <span class="kwb">WORDS</span><span class="sym">(</span>S<span class="sym">)</span> <span class="kwa">then</span> <span class="sym">;</span> insertAfter <span class="sym">=</span> <span class="kwb">LENGTH</span><span class="sym">(</span>S<span class="sym">) +</span> <span class="num">1</span>
    <span class="kwa">otherwise</span>
      <span class="kwa">if</span> M <span class="sym">=</span> R <span class="kwa">then</span> <span class="sym">;</span> insertAfter <span class="sym">=</span> <span class="kwb">WORDINDEX</span><span class="sym">(</span>S<span class="sym">,</span> M <span class="sym">+</span> <span class="num">1</span><span class="sym">) -</span> <span class="num">1</span>
      <span class="kwa">else</span> <span class="sym">;</span> insertAfter <span class="sym">=</span> <span class="kwb">WORDINDEX</span><span class="sym">(</span>S<span class="sym">,</span> M<span class="sym">) -</span> <span class="num">1</span>
  <span class="kwa">end</span>

  <span class="kwa">return</span> <span class="kwb">INSERT</span><span class="sym">(</span>V<span class="sym">,</span> S<span class="sym">,</span> insertAfter<span class="sym">,</span> <span class="kwb">LENGTH</span><span class="sym">(</span>V<span class="sym">) +</span> <span class="num">1</span><span class="sym">)</span>
