<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local</span> co <span class="sym">=</span> coroutine
<span class="kwa">local</span> wrap<span class="sym">,</span> yield <span class="sym">=</span> co<span class="sym">.</span>wrap<span class="sym">,</span> co<span class="sym">.</span>yield
<span class="kwa">if</span> co<span class="sym">.</span>cstacksize <span class="kwa">then</span> co<span class="sym">.</span><span class="kwd">cstacksize</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">end</span> <span class="slc">-- Use minimum C stack.</span>

<span class="kwa">local function</span> <span class="kwd">link</span><span class="sym">(</span>n<span class="sym">)</span>
  <span class="kwa">if</span> n <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span>
    <span class="kwa">local</span> cofunc <span class="sym">=</span> <span class="kwd">wrap</span><span class="sym">(</span>link<span class="sym">)</span>
    <span class="kwd">cofunc</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
    <span class="kwd">yield</span><span class="sym">()</span>
    <span class="kwa">repeat</span> <span class="kwd">yield</span><span class="sym">(</span><span class="kwd">cofunc</span><span class="sym">() +</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">until false</span>
  <span class="kwa">else</span>
    <span class="kwa">repeat</span> <span class="kwd">yield</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">until false</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local</span> N <span class="sym">=</span> <span class="kwb">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">10</span>
<span class="kwa">local</span> cofunc <span class="sym">=</span> <span class="kwd">wrap</span><span class="sym">(</span>link<span class="sym">)</span>
<span class="kwd">cofunc</span><span class="sym">(</span><span class="num">500</span><span class="sym">)</span>
<span class="kwa">local</span> count <span class="sym">=</span> <span class="num">0</span>
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>N <span class="kwa">do</span> count <span class="sym">=</span> count <span class="sym">+</span> <span class="kwd">cofunc</span><span class="sym">()</span> <span class="kwa">end</span>
io<span class="sym">.</span><span class="kwb">write</span><span class="sym">(</span>count<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

