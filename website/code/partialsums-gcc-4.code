<span class="slc">//  The Computer Language Shootout</span>
<span class="slc">//  http://shootout.alioth.debian.org/</span>
<span class="slc">//  contributed by Greg Buchholz</span>
<span class="slc">//</span>
<span class="slc">//  compile with:  -O3 -msse2 -lm</span>

<span class="dir">#include&lt;math.h&gt;</span>
<span class="dir">#include&lt;stdio.h&gt;</span>

<span class="kwc">typedef</span> <span class="kwb">double</span> v2df <span class="kwd">__attribute__</span> <span class="sym">((</span><span class="kwd">vector_size</span> <span class="sym">(</span><span class="num">16</span><span class="sym">)));</span>

v2df <span class="kwd">make_vec</span><span class="sym">(</span><span class="kwb">double</span> a<span class="sym">,</span> <span class="kwb">double</span> b<span class="sym">)</span>
<span class="sym">{</span>
    v2df v<span class="sym">;</span>
    <span class="kwb">double</span> <span class="sym">*</span>tmp<span class="sym">;</span>
    tmp <span class="sym">= (</span><span class="kwb">double</span> <span class="sym">*)&amp;</span>v<span class="sym">; *(</span>tmp<span class="sym">) =</span> a<span class="sym">; *(</span>tmp<span class="sym">+</span><span class="num">1</span><span class="sym">) =</span> b<span class="sym">;</span>
    <span class="kwa">return</span> v<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">double</span> <span class="kwd">sum_vec</span><span class="sym">(</span>v2df x<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">double</span> <span class="sym">*</span>tmp <span class="sym">= (</span><span class="kwb">double</span> <span class="sym">*)&amp;</span>x<span class="sym">;</span>
    <span class="kwa">return</span> <span class="sym">*(</span>tmp<span class="sym">) + *(</span>tmp<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[])</span>
<span class="sym">{</span>
    <span class="kwb">double</span>  twoThrd <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> sqrts <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> Flint <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> Cookson <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    v2df    Harmonic<span class="sym">,</span> zeta<span class="sym">,</span> poly<span class="sym">,</span> alt<span class="sym">,</span> Gregory<span class="sym">;</span>
    v2df    zero<span class="sym">,</span> one<span class="sym">,</span> two<span class="sym">,</span> init<span class="sym">,</span> m_one<span class="sym">,</span> kv<span class="sym">,</span> av<span class="sym">;</span>

    <span class="kwb">double</span>  k<span class="sym">,</span> k3<span class="sym">,</span> s<span class="sym">,</span> c<span class="sym">;</span>
    <span class="kwb">int</span> n<span class="sym">;</span>  n <span class="sym">=</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>

    zero  <span class="sym">=</span> <span class="kwd">make_vec</span><span class="sym">(</span> <span class="num">0.0</span><span class="sym">,</span>  <span class="num">0.0</span><span class="sym">);</span>  one   <span class="sym">=</span> <span class="kwd">make_vec</span><span class="sym">(</span> <span class="num">1.0</span><span class="sym">,</span>  <span class="num">1.0</span><span class="sym">);</span>
    two   <span class="sym">=</span> <span class="kwd">make_vec</span><span class="sym">(</span> <span class="num">2.0</span><span class="sym">,</span>  <span class="num">2.0</span><span class="sym">);</span>  m_one <span class="sym">=</span> <span class="kwd">make_vec</span><span class="sym">(-</span><span class="num">1.0</span><span class="sym">, -</span><span class="num">1.0</span><span class="sym">);</span>
    init  <span class="sym">=</span> <span class="kwd">make_vec</span><span class="sym">(</span> <span class="num">1.0</span><span class="sym">,</span>  <span class="num">2.0</span><span class="sym">);</span>  av    <span class="sym">=</span> <span class="kwd">make_vec</span><span class="sym">(</span> <span class="num">1.0</span><span class="sym">, -</span><span class="num">1.0</span><span class="sym">);</span>

    Harmonic <span class="sym">=</span> zeta <span class="sym">=</span> poly <span class="sym">=</span> alt <span class="sym">=</span> Gregory <span class="sym">=</span> zero<span class="sym">;</span>

    <span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> k<span class="sym">&lt;=</span>n<span class="sym">;</span> k<span class="sym">++)</span>
    <span class="sym">{</span>
        twoThrd <span class="sym">+=</span> <span class="kwd">pow</span><span class="sym">(</span><span class="num">2.0</span><span class="sym">/</span><span class="num">3.0</span><span class="sym">,</span> k<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
        sqrts   <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/</span><span class="kwd">sqrt</span><span class="sym">(</span>k<span class="sym">);</span>
              k3 <span class="sym">=</span> k<span class="sym">*</span>k<span class="sym">*</span>k<span class="sym">;</span>
              s  <span class="sym">=</span> <span class="kwd">sin</span><span class="sym">(</span>k<span class="sym">);</span> c <span class="sym">=</span> <span class="kwd">cos</span><span class="sym">(</span>k<span class="sym">);</span>
        Flint   <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/(</span>k3 <span class="sym">*</span> s<span class="sym">*</span>s<span class="sym">);</span>
        Cookson <span class="sym">+=</span> <span class="num">1.0</span><span class="sym">/(</span>k3 <span class="sym">*</span> c<span class="sym">*</span>c<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">for</span> <span class="sym">(</span>kv<span class="sym">=</span>init<span class="sym">; *(</span><span class="kwb">double</span> <span class="sym">*)(&amp;</span>kv<span class="sym">)&lt;=</span>n<span class="sym">;</span> kv<span class="sym">+=</span>two<span class="sym">)</span>
    <span class="sym">{</span>
        poly    <span class="sym">+=</span> one <span class="sym">/(</span>kv<span class="sym">*(</span>kv<span class="sym">+</span>one<span class="sym">));</span>
        Harmonic<span class="sym">+=</span> one <span class="sym">/</span> kv<span class="sym">;</span>
        zeta    <span class="sym">+=</span> one <span class="sym">/(</span>kv<span class="sym">*</span>kv<span class="sym">);</span>
        alt     <span class="sym">+=</span>  av <span class="sym">/</span> kv<span class="sym">;</span>
        Gregory <span class="sym">+=</span>  av <span class="sym">/(</span>two<span class="sym">*</span>kv <span class="sym">-</span> one<span class="sym">);</span>
    <span class="sym">}</span>

<span class="dir">#define psum(name,num) printf(</span><span class="dstr">&quot;%.9f</span><span class="esc">\t</span><span class="dstr">%s</span><span class="esc">\n</span><span class="dstr">&quot;</span><span class="dir">,num,name)</span>
    <span class="kwd">psum</span><span class="sym">(</span><span class="str">&quot;(2/3)^k&quot;</span><span class="sym">,</span>           twoThrd<span class="sym">);</span> <span class="kwd">psum</span><span class="sym">(</span><span class="str">&quot;k^-0.5&quot;</span><span class="sym">,</span>      sqrts<span class="sym">);</span>
    <span class="kwd">psum</span><span class="sym">(</span><span class="str">&quot;1/k(k+1)&quot;</span><span class="sym">,</span>    <span class="kwd">sum_vec</span><span class="sym">(</span>poly<span class="sym">));</span> <span class="kwd">psum</span><span class="sym">(</span><span class="str">&quot;Flint Hills&quot;</span><span class="sym">,</span> Flint<span class="sym">);</span>
    <span class="kwd">psum</span><span class="sym">(</span><span class="str">&quot;Cookson Hills&quot;</span><span class="sym">,</span>     Cookson<span class="sym">);</span> <span class="kwd">psum</span><span class="sym">(</span><span class="str">&quot;Harmonic&quot;</span><span class="sym">,</span> <span class="kwd">sum_vec</span><span class="sym">(</span>Harmonic<span class="sym">));</span>
    <span class="kwd">psum</span><span class="sym">(</span><span class="str">&quot;Riemann Zeta&quot;</span><span class="sym">,</span><span class="kwd">sum_vec</span><span class="sym">(</span>zeta<span class="sym">));</span> <span class="kwd">psum</span><span class="sym">(</span><span class="str">&quot;Alternating Harmonic&quot;</span><span class="sym">,</span><span class="kwd">sum_vec</span><span class="sym">(</span>alt<span class="sym">));</span>
    <span class="kwd">psum</span><span class="sym">(</span><span class="str">&quot;Gregory&quot;</span><span class="sym">,</span>  <span class="kwd">sum_vec</span><span class="sym">(</span>Gregory<span class="sym">));</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
