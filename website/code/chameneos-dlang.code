<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Reference implementation in C# contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release chameneos.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">,</span> std<span class="sym">.</span>thread<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> meetings<span class="sym">,</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">M</span>eeting<span class="kwb">P</span>lace m <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">M</span>eeting<span class="kwb">P</span>lace<span class="sym">(</span>n<span class="sym">);</span>

    <span class="kwb">C</span>reature<span class="sym">[]</span> creatures <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">C</span>reature<span class="sym">[</span>colours<span class="sym">.</span>length<span class="sym">];</span>
    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">int</span> i<span class="sym">,</span> <span class="kwa">inout</span> <span class="kwb">C</span>reature c<span class="sym">;</span> creatures<span class="sym">)</span>
    <span class="sym">{</span>
        c <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">C</span>reature<span class="sym">(</span>m<span class="sym">,</span>colours<span class="sym">[</span>i<span class="sym">]);</span>
        c<span class="sym">.</span><span class="kwd">start</span><span class="sym">();</span>
    <span class="sym">}</span>
    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwb">C</span>reature c<span class="sym">;</span> creatures<span class="sym">)</span>
    <span class="sym">{</span>
        c<span class="sym">.</span><span class="kwc">wait</span><span class="sym">();</span>
        meetings <span class="sym">+=</span> c<span class="sym">.</span>creaturesMet<span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwd">writefln</span><span class="sym">(</span>meetings<span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">enum</span> <span class="kwb">C</span>olour <span class="sym">{</span> blue<span class="sym">,</span> red<span class="sym">,</span> yellow<span class="sym">,</span> faded <span class="sym">}</span>
<span class="kwb">C</span>olour<span class="sym">[]</span> colours <span class="sym">= [</span> <span class="kwb">C</span>olour<span class="sym">.</span>blue<span class="sym">,</span> <span class="kwb">C</span>olour<span class="sym">.</span>red<span class="sym">,</span> <span class="kwb">C</span>olour<span class="sym">.</span>yellow<span class="sym">,</span> <span class="kwb">C</span>olour<span class="sym">.</span>blue <span class="sym">];</span>

<span class="kwa">class</span> <span class="kwb">M</span>eeting<span class="kwb">P</span>lace
<span class="sym">{</span>
    <span class="kwa">private</span> <span class="kwb">C</span>olour first<span class="sym">,</span> second<span class="sym">;</span>
    <span class="kwa">private</span> bool firstCall <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
    <span class="kwa">private</span> bool mustWait <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
    <span class="kwa">private int</span> n<span class="sym">;</span>

    <span class="kwa">this</span><span class="sym">(</span><span class="kwa">int</span> maxMeetings<span class="sym">)</span>
    <span class="sym">{</span>
        n <span class="sym">=</span> maxMeetings<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">private</span> <span class="kwb">C</span>olour <span class="kwb">O</span>ther<span class="kwb">C</span>reatures<span class="kwb">C</span>olour<span class="sym">(</span><span class="kwb">C</span>olour me<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">while</span><span class="sym">(</span>mustWait<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwb">T</span>hread<span class="sym">.</span><span class="kwd">yield</span><span class="sym">();</span>
        <span class="sym">}</span>

        <span class="kwb">C</span>olour other <span class="sym">=</span> <span class="kwb">C</span>olour<span class="sym">.</span>faded<span class="sym">;</span>
        <span class="kwa">if</span><span class="sym">(</span>firstCall<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)</span>
            <span class="sym">{</span>
                first <span class="sym">=</span> me<span class="sym">;</span>
                firstCall <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
                <span class="kwa">while</span><span class="sym">(!</span>firstCall<span class="sym">)</span>
                <span class="sym">{</span>
                    <span class="kwb">T</span>hread<span class="sym">.</span><span class="kwd">yield</span><span class="sym">();</span>
                <span class="sym">}</span>
                mustWait <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
                other <span class="sym">=</span> second<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            second <span class="sym">=</span> me<span class="sym">;</span>
            other <span class="sym">=</span> first<span class="sym">;</span>
            firstCall <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
            mustWait <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">return</span> other<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">C</span>reature <span class="sym">:</span> <span class="kwb">T</span>hread
<span class="sym">{</span>
    <span class="kwa">private</span> <span class="kwb">M</span>eeting<span class="kwb">P</span>lace m<span class="sym">;</span>
    <span class="kwa">private int</span> creaturesMet <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">private</span> <span class="kwb">C</span>olour me<span class="sym">;</span>

    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">M</span>eeting<span class="kwb">P</span>lace m<span class="sym">,</span> <span class="kwb">C</span>olour c<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">this</span><span class="sym">.</span>m <span class="sym">=</span> m<span class="sym">;</span> <span class="kwa">this</span><span class="sym">.</span>me <span class="sym">=</span> c<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">int</span> <span class="kwd">run</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">while</span><span class="sym">(</span>me <span class="sym">!=</span> <span class="kwb">C</span>olour<span class="sym">.</span>faded<span class="sym">)</span> <span class="kwb">M</span>eet<span class="kwb">O</span>ther<span class="kwb">C</span>reature<span class="sym">();</span>
        <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">private synchronized void</span> <span class="kwb">M</span>eet<span class="kwb">O</span>ther<span class="kwb">C</span>reature<span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwb">C</span>olour other <span class="sym">=</span> m<span class="sym">.</span><span class="kwb">O</span>ther<span class="kwb">C</span>reatures<span class="kwb">C</span>olour<span class="sym">(</span>me<span class="sym">);</span>
        <span class="kwa">if</span><span class="sym">(</span>other <span class="sym">==</span> <span class="kwb">C</span>olour<span class="sym">.</span>faded<span class="sym">)</span>
        <span class="sym">{</span>
            me <span class="sym">=</span> other<span class="sym">;</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            creaturesMet<span class="sym">++;</span>
            me <span class="sym">=</span> <span class="kwb">C</span>omplement<span class="sym">(</span>other<span class="sym">);</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">private</span> <span class="kwb">C</span>olour <span class="kwb">C</span>omplement<span class="sym">(</span><span class="kwb">C</span>olour other<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>me <span class="sym">==</span> other<span class="sym">)</span> <span class="kwa">return</span> me<span class="sym">;</span>
        <span class="kwa">switch</span><span class="sym">(</span>me<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">case</span> <span class="kwb">C</span>olour<span class="sym">.</span>blue<span class="sym">:</span>
                <span class="kwa">return</span> other <span class="sym">==</span> <span class="kwb">C</span>olour<span class="sym">.</span>red ? <span class="kwb">C</span>olour<span class="sym">.</span>yellow <span class="sym">:</span> <span class="kwb">C</span>olour<span class="sym">.</span>red<span class="sym">;</span>
            <span class="kwa">case</span> <span class="kwb">C</span>olour<span class="sym">.</span>red<span class="sym">:</span>
                <span class="kwa">return</span> other <span class="sym">==</span> <span class="kwb">C</span>olour<span class="sym">.</span>blue ? <span class="kwb">C</span>olour<span class="sym">.</span>yellow <span class="sym">:</span> <span class="kwb">C</span>olour<span class="sym">.</span>blue<span class="sym">;</span>
            <span class="kwa">case</span> <span class="kwb">C</span>olour<span class="sym">.</span>yellow<span class="sym">:</span>
                <span class="kwa">return</span> other <span class="sym">==</span> <span class="kwb">C</span>olour<span class="sym">.</span>blue ? <span class="kwb">C</span>olour<span class="sym">.</span>red <span class="sym">:</span> <span class="kwb">C</span>olour<span class="sym">.</span>blue<span class="sym">;</span>
            <span class="kwa">default</span><span class="sym">:</span>
                <span class="kwa">break</span><span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwa">return</span> me<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>
