BUILD COMMANDS FOR: recursive.sbcl-3.sbcl

Sat Jun 10 16:31:48 PDT 2006

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "recursive.sbcl-3.sbcl_compile")'
### START recursive.sbcl-3.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(asdf:operate 'asdf:load-op 'cl-ppcre)
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "recursive.sbcl-3.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END recursive.sbcl-3.sbcl_compile

; loading system definition from /usr/share/common-lisp/systems/cl-ppcre.asd
; into #<PACKAGE "ASDF0">
; registering #<SYSTEM #:CL-PPCRE {A94F8F1}> as CL-PPCRE
; compiling file "/opt/shootout/shootout/bench/recursive/tmp/recursive.sbcl-3.sbcl" (written 10 JUN 2006 04:31:48 PM):
; compiling (DEFUN FIB ...)
; compiling (DEFUN FIB-D ...)
; file: /opt/shootout/shootout/bench/recursive/tmp/recursive.sbcl-3.sbcl
; in: DEFUN FIB-D
;     (FIB-NOBOX (- N 2))
; 
; note: *INLINE-EXPANSION-LIMIT* (200) was exceeded, probably trying to
;   inline a recursive function.

;     (COERCE N 'DOUBLE-FLOAT)
; --> THE 
; ==>
;   (SB-KERNEL:%DOUBLE-FLOAT SB-C::X)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: forced to do full call
;       unable to do inline float coercion (cost 2) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       unable to do inline float coercion (cost 5) because:
;       The first argument is a REAL, not a (SIGNED-BYTE 32).
;       etc.

;     (DEFUN FIB-D (N)
;     (LABELS ((FIB-NOBOX (N)
;                (DECLARE #)
;                (THE DOUBLE-FLOAT #)))
;       (DECLARE (INLINE FIB-NOBOX))
;       (FIB-NOBOX (COERCE N 'DOUBLE-FLOAT))))
; --> PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA FIB-D
;                          (N)
;                          (BLOCK FIB-D
;                            (LABELS ((FIB-NOBOX #
;                                       #
;                                       #))
;                              (DECLARE (INLINE FIB-NOBOX))
;                              (FIB-NOBOX (COERCE N 'DOUBLE-FLOAT)))))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; compiling (DEFUN ACK ...)
; compiling (DEFUN TAK ...)
; compiling (DEFUN TAK-D ...)
; file: /opt/shootout/shootout/bench/recursive/tmp/recursive.sbcl-3.sbcl
; in: DEFUN TAK-D
;     (DEFUN TAK-D (X Y Z)
;     (DECLARE (DOUBLE-FLOAT X Y Z))
;     (THE DOUBLE-FLOAT
;          (IF (< Y X) (TAK-D (TAK-D # Y Z) (TAK-D # Z X) (TAK-D # X Y)) Z)))
; --> PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA TAK-D
;                          (X Y Z)
;                          (DECLARE (DOUBLE-FLOAT X Y Z))
;                          (BLOCK TAK-D
;                            (THE DOUBLE-FLOAT (IF (< Y X) (TAK-D # # #) Z))))
; 
; note: doing float to pointer coercion (cost 13) from Z to "<return value>"

; compiling (DEFUN MAIN ...)
; file: /opt/shootout/shootout/bench/recursive/tmp/recursive.sbcl-3.sbcl
; in: DEFUN MAIN
;     (* 3 N)
; ==>
;   (* SB-C::Y 3)
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a (INTEGER -536870912
;                                    536870910), not a (UNSIGNED-BYTE 32).
;   The result is a (VALUES (INTEGER -1610612736 1610612730)
;                           &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32) &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The result is a (VALUES (INTEGER -1610612736 1610612730)
;                           &OPTIONAL), not a (VALUES FIXNUM &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a (INTEGER -536870912
;                                    536870910), not a (UNSIGNED-BYTE 32).
;   The result is a (VALUES (INTEGER -1610612736 1610612730)
;                           &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32) &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The result is a (VALUES (INTEGER -1610612736 1610612730)
;                           &OPTIONAL), not a (VALUES FIXNUM &REST T).

;     (FIB-D (+ 28.0d0 N))
; 
; note: doing float to pointer coercion (cost 13)

;     (FORMAT T "Fib(~,1F): ~,1F~%" (+ 28.0d0 N) (FIB-D (+ 28.0d0 N)))
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM
;                            #:FORMAT-ARG-49
;                            #:G682
;                            #:G683
;                            #:G684
;                            #:G685
;                            #:G686
;                            NIL)
; 
; note: doing float to pointer coercion (cost 13)

;     (FORMAT T "Tak(~A,~A,~A): ~A~%" (* 3 N) (* 2 N) N (TAK (* 3 N) (* 2 N) N))
; --> FORMAT FORMATTER FUNCTION BLOCK 
; ==>
;   (PRINC #:FORMAT-ARG-68 STREAM)
; 
; note: doing signed word to integer coercion (cost 20)

; ==>
;   (PRINC #:FORMAT-ARG-69 STREAM)
; 
; note: doing signed word to integer coercion (cost 20)
; 
; compilation unit finished
;   printed 13 notes


; /opt/shootout/shootout/bench/recursive/tmp/recursive.sbcl-3.fasl written
; compilation finished in 0:00:02
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/recursive/tmp/sbcl.core:
writing 22071376 bytes from the read-only space at 0x01000000
writing 5738672 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START recursive.sbcl-3.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END recursive.sbcl-3.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load recursive.sbcl-3.sbcl_run %A


PROGRAM OUTPUT
==============
Ack(3,11): 16381
Fib(38.0): 63245986.0
Tak(30,20,10): 11
Fib(3): 3
Tak(3.0,2.0,1.0): 2.0
