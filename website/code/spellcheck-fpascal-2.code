<span class="com">{  The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Micha Nelissen
}</span>

<span class="kwa">program</span> spellcheck<span class="sym">;

</span><span class="com">{$mode objfpc}</span><span class="com">{$H+}</span>

<span class="kwa">uses
</span>  simple_hash<span class="sym">,</span> strings<span class="sym">;

</span><span class="kwa">var
</span>  dict<span class="sym">:</span> ht_pht <span class="sym">=</span> <span class="kwa">nil</span><span class="sym">;

</span><span class="kwa">const
</span>  MAXLINELEN <span class="sym">=</span> <span class="num">128</span><span class="sym">;

</span><span class="kwa">type
</span>  thash_manip_func <span class="sym">=</span> <span class="kwa">procedure</span><span class="sym">(</span>key<span class="sym">:</span> pchar<span class="sym">);

</span><span class="kwa">procedure</span> handle_input<span class="sym">(</span><span class="kwa">var</span> stream<span class="sym">:</span> <span class="kwb">text</span><span class="sym">;</span> hash_manip_func<span class="sym">:</span> thash_manip_func<span class="sym">);
</span><span class="kwa">var
</span>  block<span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>..MAXLINELEN<span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">char</span><span class="sym">;
</span><span class="kwa">begin
  while not</span> eof<span class="sym">(</span>stream<span class="sym">)</span> <span class="kwa">do
  begin
</span>    readln<span class="sym">(</span>stream<span class="sym">,</span> block<span class="sym">);
</span>    hash_manip_func<span class="sym">(&#64;</span>block<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> spellcheck<span class="sym">(</span>key<span class="sym">:</span> pchar<span class="sym">);
</span><span class="kwa">begin
  if</span> ht_find_new<span class="sym">(</span>dict<span class="sym">,</span> key<span class="sym">)</span>^.val <span class="sym">&lt;&gt;</span> <span class="num">1</span> <span class="kwa">then
</span>    writeln<span class="sym">(</span>key<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> hashload<span class="sym">(</span>key<span class="sym">:</span> pchar<span class="sym">);
</span><span class="kwa">begin
</span>  ht_find_new<span class="sym">(</span>dict<span class="sym">,</span> key<span class="sym">)</span>^.val <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">var
</span>  fh<span class="sym">:</span> <span class="kwb">text</span><span class="sym">;
</span><span class="kwa">begin
</span>  dict <span class="sym">:=</span> ht_create<span class="sym">(</span><span class="num">40000</span><span class="sym">);
</span>  assign<span class="sym">(</span>fh<span class="sym">,</span> <span class="str">'Usr.Dict.Words'</span><span class="sym">);
</span>  reset<span class="sym">(</span>fh<span class="sym">);
</span>  handle_input<span class="sym">(</span>fh<span class="sym">, &#64;</span>hashload<span class="sym">);
</span>  close<span class="sym">(</span>fh<span class="sym">);
</span>  handle_input<span class="sym">(</span>input<span class="sym">, &#64;</span>spellcheck<span class="sym">);
</span>  ht_destroy<span class="sym">(</span>dict<span class="sym">);
</span><span class="kwa">end</span>.
