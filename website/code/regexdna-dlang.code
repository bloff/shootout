<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Sebasti√°n E. Peyrott - 16/01/2006 - v1</span>
<span class="com">   Compilation &amp; Linking: dmd -O -inline</span>
<span class="com">*/</span>

<span class="kwa">module</span> regex_dna<span class="sym">;</span>

<span class="kwa">import</span> std<span class="sym">.</span>cstream<span class="sym">;</span> <span class="slc">//Includes standard C I/O functions.</span>
<span class="kwa">import</span> std<span class="sym">.</span>regexp<span class="sym">;</span>  <span class="slc">//Regexp objects.</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
	<span class="slc">//We do static allocations once, to minimize GC cycles.</span>
	<span class="kwa">char</span><span class="sym">[]</span> <span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence <span class="sym">=</span> <span class="kwa">new char</span><span class="sym">[</span><span class="num">100000</span><span class="sym">];</span>
	<span class="kwa">uint</span> <span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">O</span>riginal<span class="sym">,</span> <span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">N</span>o<span class="kwb">FASTAI</span>nfo<span class="sym">,</span> <span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">IUB</span><span class="sym">;</span>
	<span class="kwa">uint</span><span class="sym">[</span><span class="num">9</span><span class="sym">]</span> <span class="kwb">V</span>ar_<span class="kwb">V</span>ar<span class="kwb">M</span>atches<span class="sym">;</span>
	<span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">[</span><span class="num">9</span><span class="sym">]</span> <span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">;</span>
	<span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">,</span> <span class="kwa">null</span><span class="sym">);</span>
	<span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span> <span class="kwa">null</span><span class="sym">);</span>
	<span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">[</span><span class="num">2</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span> <span class="kwa">null</span><span class="sym">);</span>
	<span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">[</span><span class="num">3</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span> <span class="kwa">null</span><span class="sym">);</span>
	<span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">[</span><span class="num">4</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span> <span class="kwa">null</span><span class="sym">);</span>
	<span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">[</span><span class="num">5</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span> <span class="kwa">null</span><span class="sym">);</span>
	<span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">[</span><span class="num">6</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span> <span class="kwa">null</span><span class="sym">);</span>
	<span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">[</span><span class="num">7</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span> <span class="kwa">null</span><span class="sym">);</span>
	<span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">[</span><span class="num">8</span><span class="sym">] =</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">,</span> <span class="kwa">null</span><span class="sym">);</span>
	<span class="kwb">R</span>eg<span class="kwb">E</span>xp <span class="kwb">R</span>egex_<span class="kwb">FASTAI</span>nfo <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="str">&quot;&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="str">&quot;gi&quot;</span><span class="sym">);</span>
	<span class="kwa">char</span><span class="sym">[][</span><span class="kwa">char</span><span class="sym">[]]</span> <span class="kwb">IUB</span><span class="sym">;</span>
	<span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;B&quot;</span><span class="sym">] =</span> <span class="str">&quot;(c|g|t)&quot;</span><span class="sym">;</span> <span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;D&quot;</span><span class="sym">] =</span> <span class="str">&quot;(a|g|t)&quot;</span><span class="sym">;</span> <span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;H&quot;</span><span class="sym">] =</span> <span class="str">&quot;(a|c|t)&quot;</span><span class="sym">;</span> <span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;K&quot;</span><span class="sym">] =</span> <span class="str">&quot;(g|t)&quot;</span><span class="sym">;</span>
	<span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;M&quot;</span><span class="sym">] =</span> <span class="str">&quot;(a|c)&quot;</span><span class="sym">;</span> <span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;N&quot;</span><span class="sym">] =</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">;</span> <span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;R&quot;</span><span class="sym">] =</span> <span class="str">&quot;(a|g)&quot;</span><span class="sym">;</span> <span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;S&quot;</span><span class="sym">] =</span> <span class="str">&quot;(c|g)&quot;</span><span class="sym">;</span>
	<span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;V&quot;</span><span class="sym">] =</span> <span class="str">&quot;(a|c|g)&quot;</span><span class="sym">;</span> <span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;W&quot;</span><span class="sym">] =</span> <span class="str">&quot;(a|t)&quot;</span><span class="sym">;</span> <span class="kwb">IUB</span><span class="sym">[</span><span class="str">&quot;Y&quot;</span><span class="sym">] =</span> <span class="str">&quot;(c|t)&quot;</span><span class="sym">;</span>

	<span class="com">/* The buffer is allocated in chunks and then truncated to minimize the impact</span>
<span class="com">	*  of dynamic allocations. It'd be useful to know the average size of FASTA Data.</span>
<span class="com">	*/</span>
	<span class="kwa">for</span><span class="sym">(</span><span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">O</span>riginal <span class="sym">=</span> <span class="num">0</span><span class="sym">; !</span>din<span class="sym">.</span>eof<span class="sym">;</span> <span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">O</span>riginal<span class="sym">++)</span>
	<span class="sym">{</span>
		<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">O</span>riginal <span class="sym">==</span> <span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">.</span>length<span class="sym">)</span>
			<span class="sym">{</span> <span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">.</span>length <span class="sym">=</span> <span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">.</span>length <span class="sym">*</span> <span class="num">2</span><span class="sym">; }</span>
		<span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">[</span><span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">O</span>riginal<span class="sym">] =</span> din<span class="sym">.</span><span class="kwd">getc</span><span class="sym">();</span>
	<span class="sym">}</span>

	<span class="slc">//The last iteration should be ignored, as it doesn't write anything.</span>
	<span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">O</span>riginal <span class="sym">-=</span> <span class="num">1</span><span class="sym">;</span>
	<span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">.</span>length <span class="sym">=</span> <span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">O</span>riginal<span class="sym">;</span>

	<span class="slc">//The new blank spaces generated by RegExp.replace are automatically removed.</span>
	<span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence <span class="sym">=</span> <span class="kwb">R</span>egex_<span class="kwb">FASTAI</span>nfo<span class="sym">.</span><span class="kwd">replace</span><span class="sym">(</span><span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">,</span> <span class="kwa">null</span><span class="sym">);</span>
	<span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">N</span>o<span class="kwb">FASTAI</span>nfo <span class="sym">=</span> <span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">.</span>length<span class="sym">;</span>

	<span class="slc">//We look for each sequence in the data provided.</span>
	<span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">int</span> <span class="kwb">I</span>ndex<span class="sym">,</span> <span class="kwa">inout</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp <span class="kwb">V</span>ariant<span class="sym">;</span> <span class="kwb">S</span>eq<span class="kwb">V</span>ariants<span class="sym">)</span>
	<span class="sym">{</span>
 		<span class="kwb">V</span>ariant<span class="sym">.</span><span class="kwc">test</span><span class="sym">(</span><span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>		<span class="slc">//Awful, but necessary.</span>
		<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">V</span>ariant<span class="sym">.</span>pmatch<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>rm_so <span class="sym">== -</span><span class="num">1</span><span class="sym">)</span>
		<span class="sym">{</span>
			<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%s %i</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, (</span><span class="kwb">V</span>ariant<span class="sym">.</span>pattern <span class="sym">~</span> <span class="str">&quot;</span><span class="esc">\0</span><span class="str">&quot;</span><span class="sym">).</span>ptr<span class="sym">,</span> <span class="kwb">V</span>ar_<span class="kwb">V</span>ar<span class="kwb">M</span>atches<span class="sym">[</span><span class="kwb">I</span>ndex<span class="sym">]);</span>
			<span class="kwa">continue</span><span class="sym">;</span>
		<span class="sym">}</span>
		<span class="kwb">V</span>ar_<span class="kwb">V</span>ar<span class="kwb">M</span>atches<span class="sym">[</span><span class="kwb">I</span>ndex<span class="sym">]++;</span>
		<span class="kwa">for</span><span class="sym">(;;)</span>
		<span class="sym">{</span>
			<span class="kwb">V</span>ariant<span class="sym">.</span><span class="kwc">test</span><span class="sym">(</span><span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">,</span> <span class="kwb">V</span>ariant<span class="sym">.</span>pmatch<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>rm_eo<span class="sym">);</span>
			<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">V</span>ariant<span class="sym">.</span>pmatch<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>rm_so <span class="sym">== -</span><span class="num">1</span><span class="sym">) {</span> <span class="kwa">break</span><span class="sym">; }</span>
			<span class="kwb">V</span>ar_<span class="kwb">V</span>ar<span class="kwb">M</span>atches<span class="sym">[</span><span class="kwb">I</span>ndex<span class="sym">]++;</span>
		<span class="sym">}</span>
		<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%s %i</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, (</span><span class="kwb">V</span>ariant<span class="sym">.</span>pattern <span class="sym">~</span> <span class="str">&quot;</span><span class="esc">\0</span><span class="str">&quot;</span><span class="sym">).</span>ptr<span class="sym">,</span> <span class="kwb">V</span>ar_<span class="kwb">V</span>ar<span class="kwb">M</span>atches<span class="sym">[</span><span class="kwb">I</span>ndex<span class="sym">]);</span>
	<span class="sym">}</span>

	<span class="slc">//IUB code replacement.</span>
	<span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> <span class="kwb">C</span>ode<span class="sym">,</span> <span class="kwa">inout char</span><span class="sym">[]</span> <span class="kwb">A</span>lternative<span class="sym">;</span> <span class="kwb">IUB</span><span class="sym">)</span>
	<span class="sym">{</span>
		<span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence <span class="sym">= (</span><span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span><span class="kwb">C</span>ode<span class="sym">,</span> <span class="str">&quot;g&quot;</span><span class="sym">)).</span><span class="kwd">replace</span><span class="sym">(</span><span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">,</span> <span class="kwb">A</span>lternative<span class="sym">);</span>
	<span class="sym">}</span>

	<span class="slc">//Output the length of each sequence.</span>
	<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">%i</span><span class="esc">\n</span><span class="str">%i</span><span class="esc">\n</span><span class="str">%i</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">O</span>riginal<span class="sym">,</span> <span class="kwb">V</span>ar_<span class="kwb">S</span>eq<span class="kwb">L</span>en_<span class="kwb">N</span>o<span class="kwb">FASTAI</span>nfo<span class="sym">,</span> <span class="kwb">B</span>uf_<span class="kwb">I</span>nput<span class="kwb">S</span>equence<span class="sym">.</span>length<span class="sym">);</span>
	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
