<span class="slc">// $Id: heapsort-kaffe.code,v 1.13 2006-09-30 16:39:17 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>

<span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>lang<span class="sym">.</span>reflect<span class="sym">.</span><span class="kwc">Array</span><span class="sym">;</span>

<span class="kwa">public class</span> heapsort <span class="sym">{</span>

    <span class="kwa">public static final</span> <span class="kwb">long</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>
    <span class="kwa">public static final</span> <span class="kwb">long</span> IA <span class="sym">=</span>   <span class="num">3877</span><span class="sym">;</span>
    <span class="kwa">public static final</span> <span class="kwb">long</span> IC <span class="sym">=</span>  <span class="num">29573</span><span class="sym">;</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {</span>
	<span class="kwb">int</span> N <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
	<span class="kwc">NumberFormat</span> nf <span class="sym">=</span> <span class="kwc">NumberFormat</span><span class="sym">.</span><span class="kwd">getInstance</span><span class="sym">();</span>
	nf<span class="sym">.</span><span class="kwd">setMaximumFractionDigits</span><span class="sym">(</span><span class="num">10</span><span class="sym">);</span>
	nf<span class="sym">.</span><span class="kwd">setMinimumFractionDigits</span><span class="sym">(</span><span class="num">10</span><span class="sym">);</span>
	nf<span class="sym">.</span><span class="kwd">setGroupingUsed</span><span class="sym">(</span>false<span class="sym">);</span>
	<span class="kwb">double</span> <span class="sym">[]</span>ary <span class="sym">= (</span><span class="kwb">double</span><span class="sym">[])</span><span class="kwc">Array</span><span class="sym">.</span><span class="kwd">newInstance</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">.</span><span class="kwa">class</span><span class="sym">,</span> N<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>N<span class="sym">;</span> i<span class="sym">++) {</span>
	    ary<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwd">heapsort</span><span class="sym">(</span>N<span class="sym">,</span> ary<span class="sym">);</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span>nf<span class="sym">.</span><span class="kwd">format</span><span class="sym">(</span>ary<span class="sym">[</span>N<span class="sym">]) +</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">long</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>
    <span class="kwa">public static</span> <span class="kwb">double</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="kwb">double</span> max<span class="sym">) {</span>
	<span class="kwa">return</span><span class="sym">(</span> max <span class="sym">* (</span>last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) /</span> IM <span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">heapsort</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span> ra<span class="sym">[]) {</span>
	<span class="kwb">int</span> l<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> i<span class="sym">;</span>
	<span class="kwb">double</span> rra<span class="sym">;</span>

	l <span class="sym">= (</span>n <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>
	ir <span class="sym">=</span> n<span class="sym">;</span>
	<span class="kwa">for</span> <span class="sym">(;;) {</span>
	    <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {</span>
		rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];</span>
	    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
		rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];</span>
		ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
		<span class="kwa">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">) {</span>
		    ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;</span>
		    <span class="kwa">return</span><span class="sym">;</span>
		<span class="sym">}</span>
	    <span class="sym">}</span>
	    i <span class="sym">=</span> l<span class="sym">;</span>
	    j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span>
	    <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">) {</span>
		<span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j<span class="sym">; }</span>
		<span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]) {</span>
		    ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];</span>
		    j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">);</span>
		<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
		    j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
		<span class="sym">}</span>
	    <span class="sym">}</span>
	    ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
