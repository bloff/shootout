<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; $Id: ary-sbcl.code,v 1.7 2005-02-19 17:05:40 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; Multi-lisp modifications by Brent Fulgham
</span>
<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span>                                         #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*
</span>					 #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">))))
    (</span>declare <span class="sym">(</span>fixnum n<span class="sym">))
    (</span>let <span class="sym">((</span>x <span class="sym">(</span>make<span class="sym">-</span>array n <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'fixnum))
	  (y (make-array n :element-type '</span>fixnum<span class="sym">))
	  (</span><span class="kwa">last</span> <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">)))
      (</span>declare <span class="sym">(</span>fixnum <span class="kwa">last</span><span class="sym">))
      (</span>dotimes <span class="sym">(</span>i n<span class="sym">)
	(</span>declare <span class="sym">(</span>fixnum i<span class="sym">))
	(</span>setf <span class="sym">(</span>aref x i<span class="sym">) (+</span> i <span class="num">1</span><span class="sym">)))
      (</span>dotimes <span class="sym">(</span>k <span class="num">1000</span><span class="sym">)
	(</span>do <span class="sym">((</span>i <span class="kwa">last</span> <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> i<span class="sym">)))
	    ((&lt;</span> i <span class="num">0</span><span class="sym">)</span> <span class="str">'nil)
	  (declare (fixnum i))
	  (incf (aref y i) (aref x i))))
      (format t &quot;~A ~A~%&quot; (aref y 0) (aref y last)))))</span>
