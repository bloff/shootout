<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Tested with PCRE [compiler must be built with PCRE already installed</span>
<span class="slc">;; else other regex routines (with different behaviours) will be used].</span>
<span class="slc">;; Regex performance appears reasonable, but file loading [of 'large'</span>
<span class="slc">;; files] performance requires tweaking to effect a significant improvement.</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>module regexdna mzscheme

  <span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;port.ss&quot;</span><span class="sym">))</span>

  <span class="slc">;; -------------------------------</span>

  <span class="sym">(</span>define VARIANTS
    <span class="str">'(#&quot;agggtaaa|tttaccct&quot; #&quot;[cgt]gggtaaa|tttaccc[acg]&quot; #&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
<span class="str">      #&quot;ag[act]gtaaa|tttac[agt]ct&quot; #&quot;agg[act]taaa|ttta[agt]cct&quot; #&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
<span class="str">      #&quot;agggt[cgt]aa|tt[acg]accct&quot; #&quot;agggta[cgt]a|t[acg]taccct&quot; #&quot;agggtaa[cgt]|[acg]ttaccct&quot;))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">  (define IUBS</span>
<span class="str">    '</span><span class="sym">((</span>#<span class="str">&quot;B&quot;</span> #<span class="str">&quot;(c|g|t)&quot;</span><span class="sym">) (</span>#<span class="str">&quot;D&quot;</span> #<span class="str">&quot;(a|g|t)&quot;</span><span class="sym">) (</span>#<span class="str">&quot;H&quot;</span> #<span class="str">&quot;(a|c|t)&quot;</span><span class="sym">)</span>
      <span class="sym">(</span>#<span class="str">&quot;K&quot;</span> #<span class="str">&quot;(g|t)&quot;</span><span class="sym">) (</span>#<span class="str">&quot;M&quot;</span> #<span class="str">&quot;(a|c)&quot;</span><span class="sym">) (</span>#<span class="str">&quot;N&quot;</span> #<span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">)</span>
      <span class="sym">(</span>#<span class="str">&quot;R&quot;</span> #<span class="str">&quot;(a|g)&quot;</span><span class="sym">) (</span>#<span class="str">&quot;S&quot;</span> #<span class="str">&quot;(c|g)&quot;</span><span class="sym">) (</span>#<span class="str">&quot;V&quot;</span> #<span class="str">&quot;(a|c|g)&quot;</span><span class="sym">)</span>
      <span class="sym">(</span>#<span class="str">&quot;W&quot;</span> #<span class="str">&quot;(a|t)&quot;</span><span class="sym">) (</span>#<span class="str">&quot;Y&quot;</span> #<span class="str">&quot;(c|t)&quot;</span><span class="sym">)))</span>

  <span class="slc">;; -------------------------------</span>

  <span class="sym">(</span>define <span class="sym">(</span>ci<span class="sym">-</span>byte<span class="sym">-</span>regexp s<span class="sym">)</span>
    <span class="sym">(</span>byte<span class="sym">-</span>regexp <span class="sym">(</span>ci<span class="sym">-</span>pattern s<span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">(</span>ci<span class="sym">-</span>pattern s<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">([</span>m <span class="sym">(</span>regexp<span class="sym">-</span>match #rx#<span class="str">&quot;^(.*)</span><span class="esc">\\</span><span class="str">[([^]]*)</span><span class="esc">\\</span><span class="str">](.*)$&quot;</span> s<span class="sym">)])</span>
      <span class="sym">(</span><span class="kwa">if</span> m
	  <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">append</span> <span class="sym">(</span>ci<span class="sym">-</span>pattern <span class="sym">(</span><span class="kwa">cadr</span> m<span class="sym">))</span>
			#<span class="str">&quot;[&quot;</span>
			<span class="sym">(</span>regexp<span class="sym">-</span>replace<span class="sym">*</span> #rx#<span class="str">&quot;[a-zA-Z]&quot;</span> <span class="sym">(</span><span class="kwa">caddr</span> m<span class="sym">)</span> both<span class="sym">-</span>cases<span class="sym">)</span>
			#<span class="str">&quot;]&quot;</span>
			<span class="sym">(</span>ci<span class="sym">-</span>pattern <span class="sym">(</span><span class="kwa">cadddr</span> m<span class="sym">)))</span>
	  <span class="sym">(</span>regexp<span class="sym">-</span>replace<span class="sym">*</span> #rx#<span class="str">&quot;[a-zA-Z]&quot;</span> s <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>s<span class="sym">)</span>
					      <span class="sym">(</span>string<span class="sym">-&gt;</span>bytes<span class="sym">/</span>latin<span class="sym">-</span><span class="num">1</span>
					       <span class="sym">(</span>format <span class="str">&quot;[~a]&quot;</span> <span class="sym">(</span>both<span class="sym">-</span>cases s<span class="sym">))))))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>both<span class="sym">-</span>cases s<span class="sym">)</span>
    <span class="sym">(</span>string<span class="sym">-&gt;</span>bytes<span class="sym">/</span>latin<span class="sym">-</span><span class="num">1</span>
     <span class="sym">(</span>format <span class="str">&quot;~a~a&quot;</span>
	     <span class="sym">(</span>string<span class="sym">-</span>downcase <span class="sym">(</span>bytes<span class="sym">-&gt;</span>string<span class="sym">/</span>latin<span class="sym">-</span><span class="num">1</span> s<span class="sym">))</span>
	     <span class="sym">(</span>string<span class="sym">-</span>upcase <span class="sym">(</span>bytes<span class="sym">-&gt;</span>string<span class="sym">/</span>latin<span class="sym">-</span><span class="num">1</span> s<span class="sym">)))))</span>

  <span class="slc">;; -------------------------------</span>

  <span class="sym">(</span>define <span class="sym">(</span>match<span class="sym">-</span>count str rx offset cnt<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">([</span>m <span class="sym">(</span>regexp<span class="sym">-</span>match<span class="sym">-</span>positions rx str offset<span class="sym">)])</span>
      <span class="sym">(</span><span class="kwa">if</span> m
	  <span class="sym">(</span>match<span class="sym">-</span>count str rx <span class="sym">(</span>cdar m<span class="sym">) (</span>add1 cnt<span class="sym">))</span>
	  cnt<span class="sym">)))</span>

  <span class="slc">;; --------------</span>

  <span class="sym">(</span>define <span class="sym">(</span>replace<span class="sym">-</span>all rx str new<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">([</span>out <span class="sym">(</span><span class="kwa">open</span><span class="sym">-</span>output<span class="sym">-</span>bytes<span class="sym">)]</span>
	  <span class="sym">[</span>in <span class="sym">(</span><span class="kwa">open</span><span class="sym">-</span>input<span class="sym">-</span>bytes str<span class="sym">)])</span>
      <span class="sym">(</span>let loop <span class="sym">()</span>
	<span class="sym">(</span>when <span class="sym">(</span>regexp<span class="sym">-</span>match rx in <span class="num">0</span> #f out<span class="sym">)</span>
	  <span class="sym">(</span>display new out<span class="sym">)</span>
	  <span class="sym">(</span>loop<span class="sym">)))</span>
      <span class="sym">(</span>get<span class="sym">-</span>output<span class="sym">-</span>bytes out<span class="sym">)))</span>

  <span class="slc">;; -------------------------------</span>

  <span class="sym">(</span>define <span class="sym">(</span>input<span class="sym">-&gt;</span>bytes<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">([</span>b <span class="sym">(</span><span class="kwa">open</span><span class="sym">-</span>output<span class="sym">-</span>bytes<span class="sym">)])</span>
      <span class="sym">(</span>copy<span class="sym">-</span>port <span class="sym">(</span>current<span class="sym">-</span>input<span class="sym">-</span>port<span class="sym">)</span> b<span class="sym">)</span>
      <span class="sym">(</span>get<span class="sym">-</span>output<span class="sym">-</span>bytes b<span class="sym">)))</span>

  <span class="slc">;; -------------------------------</span>

  <span class="slc">;; Load sequence and record its length</span>
  <span class="sym">(</span>let<span class="sym">* ([</span>orig <span class="sym">(</span>input<span class="sym">-&gt;</span>bytes<span class="sym">)]</span>
	 <span class="sym">[</span>filtered <span class="sym">(</span>replace<span class="sym">-</span>all #rx#<span class="str">&quot;(?:&gt;.*?</span><span class="esc">\n</span><span class="str">)|</span><span class="esc">\n</span><span class="str">&quot;</span> orig #<span class="str">&quot;&quot;</span><span class="sym">)])</span>

    <span class="slc">;; Perform regexp counts</span>
    <span class="sym">(</span>for<span class="sym">-</span>each
     <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>i<span class="sym">)</span>
       <span class="sym">(</span>printf <span class="str">&quot;~a ~a</span><span class="esc">\n</span><span class="str">&quot;</span> i <span class="sym">(</span>match<span class="sym">-</span>count filtered <span class="sym">(</span>ci<span class="sym">-</span>byte<span class="sym">-</span>regexp i<span class="sym">)</span> <span class="num">0 0</span><span class="sym">)))</span>
     VARIANTS<span class="sym">)</span>

    <span class="slc">;; Perform regexp replacements, and record sequence length</span>
    <span class="sym">(</span>let <span class="sym">([</span>replaced
	   <span class="sym">(</span>let loop <span class="sym">([</span>sequence filtered<span class="sym">]</span>
		      <span class="sym">[</span>IUBS IUBS<span class="sym">])</span>
	     <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? IUBS<span class="sym">)</span>
		 sequence
		 <span class="sym">(</span>loop <span class="sym">(</span>replace<span class="sym">-</span>all <span class="sym">(</span>ci<span class="sym">-</span>byte<span class="sym">-</span>regexp <span class="sym">(</span><span class="kwa">caar</span> IUBS<span class="sym">))</span> sequence <span class="sym">(</span>cadar IUBS<span class="sym">))</span>
		       <span class="sym">(</span><span class="kwa">cdr</span> IUBS<span class="sym">))))])</span>
      <span class="slc">;; Print statistics</span>
      <span class="sym">(</span>printf <span class="str">&quot;~%~A~%~A~%~A~%&quot;</span>
	      <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">length</span> orig<span class="sym">)</span>
	      <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">length</span> filtered<span class="sym">)</span>
	      <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">length</span> replaced<span class="sym">)))))</span>
