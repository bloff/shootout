<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by James McIlree</span>
<span class="com">*/</span>


<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;</span>

<span class="kwa">public class</span> message <span class="sym">{</span>
   <span class="kwa">public static final</span> <span class="kwb">int</span> numberOfThreads <span class="sym">=</span> <span class="num">500</span><span class="sym">;</span>
   <span class="kwa">public static</span> <span class="kwb">int</span> numberOfMessagesToSend<span class="sym">;</span>

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {</span>
     numberOfMessagesToSend <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

     MessageThread chain <span class="sym">=</span> null<span class="sym">;</span>
     <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>numberOfThreads<span class="sym">;</span> i<span class="sym">++){</span>
       chain <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">MessageThread</span><span class="sym">(</span>chain<span class="sym">);</span>
       <span class="kwa">new</span> <span class="kwc">Thread</span><span class="sym">(</span>chain<span class="sym">).</span><span class="kwd">start</span><span class="sym">();</span>
     <span class="sym">}</span>

     <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>numberOfMessagesToSend<span class="sym">;</span> i<span class="sym">++)</span> chain<span class="sym">.</span><span class="kwd">enqueue</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">));</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> MessageThread <span class="kwa">implements</span> <span class="kwc">Runnable</span> <span class="sym">{</span>
   MessageThread nextThread<span class="sym">;</span>
   <span class="kwc">List</span> list <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">(</span><span class="num">4</span><span class="sym">);</span>

   <span class="kwd">MessageThread</span><span class="sym">(</span>MessageThread nextThread<span class="sym">){</span>
     <span class="kwa">this</span><span class="sym">.</span>nextThread <span class="sym">=</span> nextThread<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
     <span class="kwa">if</span> <span class="sym">(</span>nextThread <span class="sym">!=</span> null<span class="sym">)</span>
       <span class="kwa">while</span> <span class="sym">(</span>true<span class="sym">)</span> nextThread<span class="sym">.</span><span class="kwd">enqueue</span><span class="sym">(</span><span class="kwd">dequeue</span><span class="sym">());</span>
     <span class="kwa">else</span> <span class="sym">{</span>
       <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
       <span class="kwb">int</span> finalSum <span class="sym">=</span> message<span class="sym">.</span>numberOfThreads <span class="sym">*</span> message<span class="sym">.</span>numberOfMessagesToSend<span class="sym">;</span>
       <span class="kwa">while</span> <span class="sym">(</span>sum <span class="sym">&lt;</span> finalSum<span class="sym">)</span>
         sum <span class="sym">+=</span> <span class="kwd">dequeue</span><span class="sym">().</span><span class="kwd">intValue</span><span class="sym">();</span>

       <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>sum<span class="sym">);</span>
       <span class="kwc">System</span><span class="sym">.</span><span class="kwd">exit</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
     <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">enqueue</span><span class="sym">(</span><span class="kwc">Integer</span> message<span class="sym">)</span>
   <span class="sym">{</span>
     <span class="kwa">synchronized</span><span class="sym">(</span>list<span class="sym">) {</span>
       list<span class="sym">.</span><span class="kwd">add</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span>message<span class="sym">.</span><span class="kwd">intValue</span><span class="sym">() +</span> <span class="num">1</span><span class="sym">));</span>
       <span class="kwa">if</span> <span class="sym">(</span>list<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ==</span> <span class="num">1</span><span class="sym">) {</span>
         list<span class="sym">.</span><span class="kwd">notify</span><span class="sym">();</span>
       <span class="sym">}</span>
     <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">public</span> <span class="kwc">Integer</span> <span class="kwd">dequeue</span><span class="sym">()</span>
   <span class="sym">{</span>
     <span class="kwa">synchronized</span><span class="sym">(</span>list<span class="sym">) {</span>
       <span class="kwa">while</span><span class="sym">(</span>list<span class="sym">.</span><span class="kwd">size</span><span class="sym">() ==</span> <span class="num">0</span><span class="sym">) {</span>
         <span class="kwa">try</span> <span class="sym">{</span> list<span class="sym">.</span><span class="kwd">wait</span><span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {}</span>
       <span class="sym">}</span>
       <span class="kwa">return</span> <span class="sym">(</span><span class="kwc">Integer</span><span class="sym">)</span>list<span class="sym">.</span><span class="kwd">remove</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
     <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>
