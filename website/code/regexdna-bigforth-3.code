\ The Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\ contributed by Bernd Paysan
\ run with <span class="str">&quot;-m 64M&quot;</span>

include locals<span class="sym">.</span>fs
include string<span class="sym">.</span>fs
include regexp<span class="sym">.</span>fs
include filehelp<span class="sym">.</span>fs

\ helper word <span class="kwa">for</span> regexp<span class="sym">:</span> Replace current pattern
\ This will be part of the next release of regexp<span class="sym">.</span>fs

<span class="sym">[</span>IFUNDEF<span class="sym">] &lt;&lt;</span><span class="str">&quot;</span>
<span class="str">    0 Value &gt;&gt;ptr</span>
<span class="str">    0 Value &lt;&lt;ptr</span>
<span class="str">    Variable &gt;&gt;string</span>
<span class="str">    : &gt;&gt;  ( addr -- addr )  dup to &gt;&gt;ptr ;</span>
<span class="str">    : &lt;&lt; ( run-addr addr u -- run-addr )</span>
<span class="str">	&lt;&lt;ptr 0= IF  start$ to &lt;&lt;ptr  THEN</span>
<span class="str">	&gt;&gt;string &#64; 0= IF  s&quot;</span> <span class="str">&quot; &gt;&gt;string $!  THEN</span>
<span class="str">	&lt;&lt;ptr &gt;&gt;ptr over - &gt;&gt;string $+!</span>
<span class="str">	&gt;&gt;string $+! dup to &lt;&lt;ptr ;</span>
<span class="str">    : &lt;&lt;&quot;</span>  <span class="str">'&quot; parse postpone SLiteral postpone &lt;&lt; ; immediate</span>
<span class="str">    : &gt;&gt;string&#64; ( -- addr u )</span>
<span class="str">	&gt;&gt;string $&#64;len dup allocate throw</span>
<span class="str">	swap 2dup &gt;&gt;string $&#64; drop -rot move</span>
<span class="str">	&gt;&gt;string $off  0 to &gt;&gt;ptr  0 to &lt;&lt;ptr ;</span>
<span class="str">    : &gt;&gt;next ( -- addr u ) &lt;&lt;ptr end$ over - ;</span>
<span class="str">[THEN]</span>
<span class="str"></span>
<span class="str">[IFUNDEF] s//</span>
<span class="str">: s//  ]] BEGIN [[ ; immediate</span>
<span class="str">: //g  ]] WHILE &gt;&gt;next REPEAT end$ [[</span>
<span class="str">    s&quot; &quot; ]] SLiteral &lt;&lt; &gt;&gt;string&#64; rot drop [[ ; immediate</span>
<span class="str">[THEN]</span>
<span class="str"></span>
<span class="str"></span><span class="esc">\ </span><span class="str">fast replacement for =&quot;</span>
<span class="str"></span><span class="esc">\ </span><span class="str">this replacement will be part of the next relase of regexp.fs</span>
<span class="str"></span>
<span class="str">: =&quot; '</span><span class="str">&quot; parse bounds ?DO</span>
<span class="str">	]] count [[ I c&#64; ]] Literal &lt;&gt; ?LEAVE [[</span>
<span class="str">    LOOP ; immediate</span>
<span class="str"></span>
<span class="str">Variable cnt1</span>
<span class="str">Variable cnt2</span>
<span class="str">Variable cnt3</span>
<span class="str">Variable cnt4</span>
<span class="str">Variable cnt5</span>
<span class="str">Variable cnt6</span>
<span class="str">Variable cnt7</span>
<span class="str">Variable cnt8</span>
<span class="str">Variable cnt9</span>
<span class="str">charclass [acg] 'a +char 'c +char 'g +char</span>
<span class="str">charclass [act] 'a +char 'c +char 't +char</span>
<span class="str">charclass [agt] 'a +char 'g +char 't +char</span>
<span class="str">charclass [cgt] 'c +char 'g +char 't +char</span>
<span class="str"></span>
<span class="str">: remove-newlines ( addr u -- addr u' )</span>
<span class="str">    s// (( // &gt;&gt; {{ ` &gt; {** .? **} || }} count #lf &lt;&gt; ?LEAVE &lt;&lt;&quot;</span> <span class="str">&quot; )) //g ;</span>
<span class="str"></span>
<span class="str">: patcount ( addr u -- n )  cnt1 off  cnt2 off  cnt3 off  cnt4 off</span>
<span class="str">    cnt5 off  cnt6 off  cnt7 off  cnt8 off  cnt9 off</span>
<span class="str">    (( // {{ {{ [cgt] c? =&quot;</span> gggtaaa<span class="str">&quot;  1 cnt2 +! ||</span>
<span class="str">                ` a {{ [act] c? =&quot;</span> ggtaaa<span class="str">&quot;  1 cnt3 +! ||</span>
<span class="str">                ` g {{ [act] c? =&quot;</span> gtaaa<span class="str">&quot;  1 cnt4 +! ||</span>
<span class="str">                ` g {{ [act] c? =&quot;</span> taaa<span class="str">&quot;  1 cnt5 +! ||</span>
<span class="str">                ` g {{ [acg] c? =&quot;</span> aaa<span class="str">&quot;  1 cnt6 +! ||</span>
<span class="str">                ` t {{ [cgt] c? =&quot;</span> aa<span class="str">&quot;  1 cnt7 +! ||</span>
<span class="str">                ` a {{ [cgt] c? ` a  1 cnt8 +! ||</span>
<span class="str">                ` a {{ [cgt] c?  1 cnt9 +! ||</span>
<span class="str">                ` a 1 cnt1 +! }} }} }} }} }} }} }} }}</span>
<span class="str">          || {{ [acg] c? =&quot;</span> ttaccct<span class="str">&quot; 1 cnt9 +! ||</span>
<span class="str">                ` t {{ [acg] c? =&quot;</span> taccct<span class="str">&quot; 1 cnt8 +! ||</span>
<span class="str">                ` t {{ [acg] c? =&quot;</span> accct<span class="str">&quot; 1 cnt7 +! ||</span>
<span class="str">                ` t {{ [cgt] c? =&quot;</span> ccct<span class="str">&quot; 1 cnt6 +! ||</span>
<span class="str">                ` a {{ [agt] c? =&quot;</span> cct<span class="str">&quot; 1 cnt5 +! ||</span>
<span class="str">                ` c {{ [agt] c? =&quot;</span> ct<span class="str">&quot; 1 cnt4 +! ||</span>
<span class="str">                ` c {{ [agt] c? ` t 1 cnt3 +! ||</span>
<span class="str">                ` c {{ [acg] c? 1 cnt2 +! ||</span>
<span class="str">                ` t 1 cnt1 +! }} }} }} }} }} }} }} }} }}</span> <span class="esc">\$</span> <span class="str">))</span>
<span class="str">    drop ;</span>
<span class="str"></span>
<span class="str">stdin slurp-fid dup Constant ilen</span>
<span class="str">remove-newlines dup Constant clen 2Constant 'stdin</span>
<span class="str">burp</span>
<span class="str"></span>
<span class="str">'stdin patcount</span>
<span class="str">.( agggtaaa|tttaccct ) 'stdin cnt1 &#64; 1 .r cr</span>
<span class="str">.( [cgt]gggtaaa|tttaccc[acg] ) 'stdin cnt2 &#64; 1 .r cr</span>
<span class="str">.( a[act]ggtaaa|tttacc[agt]t ) 'stdin cnt3 &#64; 1 .r cr</span>
<span class="str">.( ag[act]gtaaa|tttac[agt]ct ) 'stdin cnt4 &#64; 1 .r cr</span>
<span class="str">.( agg[act]taaa|ttta[agt]cct ) 'stdin cnt5 &#64; 1 .r cr</span>
<span class="str">.( aggg[acg]aaa|ttt[cgt]ccct ) 'stdin cnt6 &#64; 1 .r cr</span>
<span class="str">.( agggt[cgt]aa|tt[acg]accct ) 'stdin cnt7 &#64; 1 .r cr</span>
<span class="str">.( agggta[cgt]a|t[acg]taccct ) 'stdin cnt8 &#64; 1 .r cr</span>
<span class="str">.( agggtaa[cgt]|[acg]ttaccct ) 'stdin cnt9 &#64; 1 .r cr</span>
<span class="str"></span>
<span class="str">: replace-alternatives ( addr u -- )</span>
<span class="str">    s// (( // &gt;&gt;</span>
<span class="str">	{{ ` B &lt;&lt;&quot;</span> <span class="sym">(</span>c<span class="sym">|</span>g<span class="sym">|</span>t<span class="sym">)</span><span class="str">&quot; ||</span>
<span class="str">	   ` D &lt;&lt;&quot;</span> <span class="sym">(</span>a<span class="sym">|</span>g<span class="sym">|</span>t<span class="sym">)</span><span class="str">&quot; ||</span>
<span class="str">	   ` H &lt;&lt;&quot;</span> <span class="sym">(</span>a<span class="sym">|</span>c<span class="sym">|</span>t<span class="sym">)</span><span class="str">&quot; ||</span>
<span class="str">	   ` K &lt;&lt;&quot;</span> <span class="sym">(</span>g<span class="sym">|</span>t<span class="sym">)</span><span class="str">&quot; ||</span>
<span class="str">	   ` M &lt;&lt;&quot;</span> <span class="sym">(</span>a<span class="sym">|</span>c<span class="sym">)</span><span class="str">&quot; ||</span>
<span class="str">	   ` N &lt;&lt;&quot;</span> <span class="sym">(</span>a<span class="sym">|</span>c<span class="sym">|</span>g<span class="sym">|</span>t<span class="sym">)</span><span class="str">&quot; ||</span>
<span class="str">	   ` R &lt;&lt;&quot;</span> <span class="sym">(</span>a<span class="sym">|</span>g<span class="sym">)</span><span class="str">&quot; ||</span>
<span class="str">	   ` S &lt;&lt;&quot;</span> <span class="sym">(</span>c<span class="sym">|</span>t<span class="sym">)</span><span class="str">&quot; ||</span>
<span class="str">	   ` V &lt;&lt;&quot;</span> <span class="sym">(</span>a<span class="sym">|</span>c<span class="sym">|</span>g<span class="sym">)</span><span class="str">&quot; ||</span>
<span class="str">	   ` W &lt;&lt;&quot;</span> <span class="sym">(</span>a<span class="sym">|</span>t<span class="sym">)</span><span class="str">&quot; ||</span>
<span class="str">	   ` Y &lt;&lt;&quot;</span> <span class="sym">(</span>c<span class="sym">|</span>t<span class="sym">)</span><span class="str">&quot; }}</span>
<span class="str">	)) //g ;</span>
<span class="str"></span>
<span class="str">cr</span>
<span class="str">ilen 1 .r cr</span>
<span class="str">clen 1 .r cr</span>
<span class="str"></span>
<span class="str">'stdin replace-alternatives dup 1 .r cr</span>
<span class="str"></span>
<span class="str">bye</span>
