<span class="sym">!</span> Statistics access function implementation
<span class="sym">!</span> Simon Geard<span class="sym">,</span> <span class="num">1</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">04
</span><span class="sym">!
!</span> Building info<span class="sym">.
! ==============
!
!</span> Linux  <span class="sym">-</span> <span class="kwa">using</span> the Intel Fortran90 compiler<span class="sym">:
!
!</span>          ifort statistics<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span><span class="kwb">static</span><span class="sym">-</span>libcxa <span class="sym">-</span>o statistics
<span class="sym">!
!</span> WinXP  <span class="sym">-</span> Compaq Visual Fortran <span class="num">6.6c
</span><span class="sym">!
!</span>          f90 statistics<span class="sym">.</span>f90 <span class="sym">/</span>link <span class="sym">/</span>libpath<span class="sym">:</span><span class="str">&quot;d:</span><span class="esc">\P</span><span class="str">rogram Files</span><span class="esc">\M</span><span class="str">icrosoft Visual Studio</span><span class="esc">\d</span><span class="str">f98</span><span class="esc">\l</span><span class="str">ib&quot;</span>
<span class="sym">!
!</span> Cygwin <span class="sym">-</span> g95 compiler
<span class="sym">!
!</span>          g95 statistics<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span>o statistics<span class="sym">.</span>exe
<span class="sym">!
!!</span>$n<span class="sym">:</span>                  <span class="num">500
</span><span class="sym">!!</span>$median<span class="sym">:</span>             <span class="num">250.500000
</span><span class="sym">!!</span>$mean<span class="sym">:</span>               <span class="num">250.500000
</span><span class="sym">!!</span>$average_deviation<span class="sym">:</span>  <span class="num">125.000000
</span><span class="sym">!!</span>$standard_deviation<span class="sym">:</span> <span class="num">144.481833
</span><span class="sym">!!</span>$variance<span class="sym">:</span>           <span class="num">20875.000000
</span><span class="sym">!!</span>$skew<span class="sym">:</span>               <span class="num">0.000000
</span><span class="sym">!!</span>$kurtosis<span class="sym">:           -</span><span class="num">1.207202


</span>program statistics
  implicit none
  integer n<span class="sym">,</span> i<span class="sym">,</span> nrepeats<span class="sym">,</span> k
  real<span class="sym">*</span><span class="num">8</span> adev<span class="sym">,</span> sdev<span class="sym">,</span> var<span class="sym">,</span> sk<span class="sym">,</span> kur<span class="sym">,</span> mean<span class="sym">,</span> med<span class="sym">,</span> s1<span class="sym">,</span> s2<span class="sym">,</span> s3<span class="sym">,</span> s4
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> argv
  integer<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> data<span class="sym">,</span> buff
  integer<span class="sym">,</span> parameter <span class="sym">::</span> blocksize <span class="sym">=</span> <span class="num">512

</span>  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,*)</span> nrepeats
  nrepeats <span class="sym">=</span> max<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>nrepeats<span class="sym">)

  !</span> Read the data on standard input
  allocate<span class="sym">(</span>data<span class="sym">(</span>blocksize<span class="sym">))
</span>  n <span class="sym">=</span> <span class="num">0
</span>  <span class="kwa">do
</span>     n <span class="sym">=</span> n <span class="sym">+</span> <span class="num">1
</span>     <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;</span> size<span class="sym">(</span>data<span class="sym">))</span> then
        allocate<span class="sym">(</span>buff<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">)))
</span>        buff <span class="sym">=</span> data
        deallocate<span class="sym">(</span>data<span class="sym">)
</span>        allocate<span class="sym">(</span>data<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>size<span class="sym">(</span>buff<span class="sym">)))
</span>        data <span class="sym">=</span> buff
        deallocate<span class="sym">(</span>buff<span class="sym">)
</span>     end <span class="kwa">if
</span>     read<span class="sym">(*,*,</span> end<span class="sym">=</span><span class="num">10</span><span class="sym">)</span> data<span class="sym">(</span>n<span class="sym">)
</span>  end <span class="kwa">do
</span><span class="num">10</span> <span class="kwa">continue
</span>  n <span class="sym">=</span> n <span class="num">- 1
</span>  allocate<span class="sym">(</span>buff<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">)))
</span>  buff <span class="sym">=</span> data
  deallocate<span class="sym">(</span>data<span class="sym">)
</span>  allocate<span class="sym">(</span>data<span class="sym">(</span>n<span class="sym">))
</span>  data <span class="sym">=</span> buff
  deallocate<span class="sym">(</span>buff<span class="sym">)

  !</span> Process data nrepeats times
  <span class="kwa">do</span> k<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> nrepeats
     mean <span class="sym">=</span>  real<span class="sym">(</span>sum<span class="sym">(</span>data<span class="sym">))/</span>n
     s1 <span class="sym">=</span> <span class="num">0.0
</span>     s2 <span class="sym">=</span> <span class="num">0.0
</span>     s3 <span class="sym">=</span> <span class="num">0.0
</span>     s4 <span class="sym">=</span> <span class="num">0.0
</span>     <span class="kwa">do</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n
        s1 <span class="sym">=</span> s1 <span class="sym">+</span> abs<span class="sym">(</span>data<span class="sym">(</span>i<span class="sym">) -</span> mean<span class="sym">)
</span>        s2 <span class="sym">=</span> s2 <span class="sym">+ (</span>data<span class="sym">(</span>i<span class="sym">)-</span>mean<span class="sym">)**</span><span class="num">2
</span>        s3 <span class="sym">=</span> s3 <span class="sym">+ (</span>data<span class="sym">(</span>i<span class="sym">)-</span>mean<span class="sym">)**</span><span class="num">3
</span>        s4 <span class="sym">=</span> s4 <span class="sym">+ (</span>data<span class="sym">(</span>i<span class="sym">)-</span>mean<span class="sym">)**</span><span class="num">4
</span>     end <span class="kwa">do
</span>     adev <span class="sym">=</span> s1<span class="sym">/</span>n
     var <span class="sym">=</span> s2<span class="sym">/(</span>n<span class="num">-1</span><span class="sym">)
</span>     sdev <span class="sym">=</span> sqrt<span class="sym">(</span>var<span class="sym">)
</span>     sk <span class="sym">=</span> s3<span class="sym">*</span>n<span class="sym">/((</span>n<span class="num">-1</span><span class="sym">)*(</span>n<span class="num">-2</span><span class="sym">))
</span>     kur <span class="sym">=</span> s4<span class="sym">/(</span>n<span class="sym">*</span>var<span class="sym">**</span><span class="num">2</span><span class="sym">) -</span> <span class="num">3
</span>     med <span class="sym">=</span> median<span class="sym">(</span>data<span class="sym">)
</span>  end <span class="kwa">do

</span>  <span class="sym">!</span> Output the results
  write<span class="sym">(*,</span><span class="str">'(a,i0)'</span><span class="sym">)</span> <span class="str">'n:                  '</span><span class="sym">,</span>n
  write<span class="sym">(*,</span><span class="num">101</span><span class="sym">)</span> <span class="str">'median:             '</span><span class="sym">,</span> med
  write<span class="sym">(*,</span><span class="num">101</span><span class="sym">)</span> <span class="str">'mean:               '</span><span class="sym">,</span> mean
  write<span class="sym">(*,</span><span class="num">101</span><span class="sym">)</span> <span class="str">'average_deviation:  '</span><span class="sym">,</span> adev
  write<span class="sym">(*,</span><span class="num">101</span><span class="sym">)</span> <span class="str">'standard_deviation: '</span><span class="sym">,</span> sdev
  write<span class="sym">(*,</span><span class="str">'(a,f12.6)'</span><span class="sym">)</span> <span class="str">'variance:           '</span><span class="sym">,</span> var
  write<span class="sym">(*,</span><span class="str">'(a,f8.6)'</span><span class="sym">)</span> <span class="str">'skew:               '</span><span class="sym">,</span> sk
  write<span class="sym">(*,</span><span class="str">'(a,f9.6)'</span><span class="sym">)</span> <span class="str">'kurtosis:           '</span><span class="sym">,</span> kur
<span class="num">101</span> format<span class="sym">(</span>a<span class="sym">,</span>f10<span class="num">.6</span><span class="sym">)

</span>contains

  real<span class="sym">*</span><span class="num">8</span> function median<span class="sym">(</span>data<span class="sym">)
</span>    integer<span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> data
    integer<span class="sym">,</span> dimension<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">))    ::</span> work
    logical<span class="sym">,</span> dimension<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">))    ::</span> mask
    integer<span class="sym">,</span> dimension<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">))    ::</span> mnl
    integer i<span class="sym">,</span> n
    intrinsic minloc

    n <span class="sym">=</span> size<span class="sym">(</span>data<span class="sym">)
</span>    mask <span class="sym">= (/ (.</span><span class="kwa">true</span><span class="sym">.,</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">) /)
</span>    work <span class="sym">= (/ (-</span><span class="num">1</span><span class="sym">,</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">) /)
</span>    median <span class="sym">=</span> <span class="num">0.0
</span>    <span class="sym">!</span> Sort data <span class="sym">-</span> only need to <span class="kwa">do</span> the first half <span class="sym">+</span> <span class="num">1
</span>    <span class="kwa">do</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">+</span><span class="num">1
</span>       mnl <span class="sym">=</span> minloc<span class="sym">(</span>data<span class="sym">,</span>mask<span class="sym">)
</span>       work<span class="sym">(</span>i<span class="sym">) =</span> data<span class="sym">(</span>mnl<span class="sym">(</span><span class="num">1</span><span class="sym">))
</span>       mask<span class="sym">(</span>mnl<span class="sym">(</span><span class="num">1</span><span class="sym">)) = .</span><span class="kwa">false</span><span class="sym">.
</span>    end <span class="kwa">do
    if</span> <span class="sym">(</span>mod<span class="sym">(</span>n<span class="sym">,</span><span class="num">2</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">)</span> then
       median <span class="sym">=</span> <span class="num">0.5</span><span class="sym">*(</span>work<span class="sym">(</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">)+</span>work<span class="sym">((</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">)+</span><span class="num">1</span><span class="sym">))
</span>    <span class="kwa">else
</span>       median <span class="sym">=</span> real<span class="sym">(</span>work<span class="sym">((</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">))
</span>    end <span class="kwa">if
</span>  end function median


  integer function mode<span class="sym">(</span>data<span class="sym">)
</span>    integer<span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> data
    integer<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> work
    integer mind<span class="sym">,</span> maxd<span class="sym">,</span> i

    maxd <span class="sym">=</span> maxval<span class="sym">(</span>data<span class="sym">)
</span>    mind <span class="sym">=</span> minval<span class="sym">(</span>data<span class="sym">)
</span>    allocate<span class="sym">(</span>work<span class="sym">(</span>mind<span class="sym">:</span>maxd<span class="sym">))
</span>    <span class="kwa">do</span> i<span class="sym">=</span>mind<span class="sym">,</span> maxd
       work<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0
</span>    end <span class="kwa">do
    do</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>size<span class="sym">(</span>data<span class="sym">)
</span>       work<span class="sym">(</span>data<span class="sym">(</span>i<span class="sym">)) =</span> work<span class="sym">(</span>data<span class="sym">(</span>i<span class="sym">)) +</span> <span class="num">1
</span>    end <span class="kwa">do
</span>    mode <span class="sym">=</span> maxval<span class="sym">(</span>work<span class="sym">)
</span>    deallocate<span class="sym">(</span>work<span class="sym">)
</span>  end function mode

end program statistics
