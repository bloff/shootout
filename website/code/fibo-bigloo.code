<span class="slc">;;; -*- mode: scheme -*-
</span><span class="slc">;;; $Id: fibo-bigloo.code,v 1.5 2005-03-19 04:35:53 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span>
<span class="sym">(</span>module fibo
	<span class="sym">(</span>option <span class="sym">(</span><span class="kwa">set</span><span class="sym">! *</span>genericity<span class="sym">*</span> #f<span class="sym">))
	(</span>main main<span class="sym">))

(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))
    (</span>display <span class="sym">(</span>fib n<span class="sym">))
    (</span>newline<span class="sym">)))

(</span>define <span class="sym">(</span>fib<span class="sym">::</span>int n<span class="sym">::</span>int<span class="sym">)
  (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> n <span class="num">2</span><span class="sym">)</span> n<span class="sym">)
	(</span>else <span class="sym">(+ (</span>fib <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)) (</span>fib <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))))))
</span>
