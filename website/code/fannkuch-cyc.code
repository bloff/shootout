<span class="com">/*</span>
<span class="com"> * The Computer Lannguage Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * Contributed by Heiner Marxen</span>
<span class="com"> *</span>
<span class="com"> * &quot;fannkuch&quot;	for C gcc</span>
<span class="com"> *</span>
<span class="com"> * $Id: fannkuch-cyc.code,v 1.4 2006-09-20 05:51:12 bfulgham Exp $</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>

<span class="dir">#define Int	int</span>
<span class="dir">#define Aint	int</span>

    <span class="kwb">static long</span>
<span class="kwd">fannkuch</span><span class="sym">(</span> <span class="kwb">int</span> n <span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">long</span>	flips<span class="sym">;</span>
    <span class="kwb">long</span>	flipsMax<span class="sym">;</span>
    Int		r<span class="sym">;</span>
    Int		i<span class="sym">;</span>
    Int		k<span class="sym">;</span>
    Int		didpr<span class="sym">;</span>
    <span class="kwb">const</span> Int	n1	<span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">if</span><span class="sym">(</span> n <span class="sym">&lt;</span> <span class="num">1</span> <span class="sym">)</span> <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>

    _ perm  <span class="sym">=</span> <span class="kwd">calloc</span><span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>Aint<span class="sym">));</span>
    _ perm1 <span class="sym">=</span> <span class="kwd">calloc</span><span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>Aint<span class="sym">));</span>
    _ count <span class="sym">=</span> <span class="kwd">calloc</span><span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>Aint<span class="sym">));</span>

    <span class="kwa">for</span><span class="sym">(</span> i<span class="sym">=</span><span class="num">0</span> <span class="sym">;</span> i<span class="sym">&lt;</span>n <span class="sym">; ++</span>i <span class="sym">)</span> perm1<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>	<span class="com">/* initial (trivial) permu */</span>

    r <span class="sym">=</span> n<span class="sym">;</span> didpr <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> flipsMax <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(;;) {</span>
	<span class="kwa">if</span><span class="sym">(</span> didpr <span class="sym">&lt;</span> <span class="num">30</span> <span class="sym">) {</span>
	    <span class="kwa">for</span><span class="sym">(</span> i<span class="sym">=</span><span class="num">0</span> <span class="sym">;</span> i<span class="sym">&lt;</span>n <span class="sym">; ++</span>i <span class="sym">)</span> <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">, (</span><span class="kwb">int</span><span class="sym">)(</span><span class="num">1</span><span class="sym">+</span>perm1<span class="sym">[</span>i<span class="sym">]));</span>
	    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
	    <span class="sym">++</span>didpr<span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">for</span><span class="sym">( ;</span> r<span class="sym">!=</span><span class="num">1</span> <span class="sym">; --</span>r <span class="sym">) {</span>
	    count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span>
	<span class="sym">}</span>

<span class="dir">#define XCH(x,y)	{ Aint t_mp; t_mp=(x); (x)=(y); (y)=t_mp; }</span>

	<span class="kwa">if</span><span class="sym">( ! (</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]==</span><span class="num">0</span> <span class="sym">||</span> perm1<span class="sym">[</span>n1<span class="sym">]==</span>n1<span class="sym">) ) {</span>
	    flips <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	    <span class="kwa">for</span><span class="sym">(</span> i<span class="sym">=</span><span class="num">1</span> <span class="sym">;</span> i<span class="sym">&lt;</span>n <span class="sym">; ++</span>i <span class="sym">) {</span>	<span class="com">/* perm = perm1 */</span>
		perm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];</span>
	    <span class="sym">}</span>
	    k <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>		<span class="com">/* cache perm[0] in k */</span>
	    <span class="kwa">do</span> <span class="sym">{</span>			<span class="com">/* k!=0 ==&gt; k&gt;0 */</span>
		Int	j<span class="sym">;</span>
		<span class="kwa">for</span><span class="sym">(</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> j<span class="sym">=</span>k<span class="sym">-</span><span class="num">1</span> <span class="sym">;</span> i<span class="sym">&lt;</span>j <span class="sym">; ++</span>i<span class="sym">, --</span>j <span class="sym">) {</span>
		    <span class="kwd">XCH</span><span class="sym">(</span>perm<span class="sym">[</span>i<span class="sym">],</span> perm<span class="sym">[</span>j<span class="sym">])</span>
		<span class="sym">}</span>
		<span class="sym">++</span>flips<span class="sym">;</span>
		<span class="com">/*</span>
<span class="com">		 * Now exchange k (caching perm[0]) and perm[k]... with care!</span>
<span class="com">		 * XCH(k, perm[k]) does NOT work!</span>
<span class="com">		 */</span>
		j<span class="sym">=</span>perm<span class="sym">[</span>k<span class="sym">];</span> perm<span class="sym">[</span>k<span class="sym">]=</span>k <span class="sym">;</span> k<span class="sym">=</span>j<span class="sym">;</span>
	    <span class="sym">}</span><span class="kwa">while</span><span class="sym">(</span> k <span class="sym">);</span>
	    <span class="kwa">if</span><span class="sym">(</span> flipsMax <span class="sym">&lt;</span> flips <span class="sym">) {</span>
		flipsMax <span class="sym">=</span> flips<span class="sym">;</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>

	<span class="kwa">for</span><span class="sym">(;;) {</span>
	    <span class="kwa">if</span><span class="sym">(</span> r <span class="sym">==</span> n <span class="sym">) {</span>
		<span class="kwa">return</span> flipsMax<span class="sym">;</span>
	    <span class="sym">}</span>
	    <span class="com">/* rotate down perm[0..r] by one */</span>
	    <span class="sym">{</span>
		Int	perm0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
		i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwa">while</span><span class="sym">(</span> i <span class="sym">&lt;</span> r <span class="sym">) {</span>
		    k <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>
		    perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>k<span class="sym">];</span>
		    i <span class="sym">=</span> k<span class="sym">;</span>
		<span class="sym">}</span>
		perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0<span class="sym">;</span>
	    <span class="sym">}</span>
	    <span class="kwa">if</span><span class="sym">( (</span>count<span class="sym">[</span>r<span class="sym">] -=</span> <span class="num">1</span><span class="sym">) &gt;</span> <span class="num">0</span> <span class="sym">) {</span>
		<span class="kwa">break</span><span class="sym">;</span>
	    <span class="sym">}</span>
	    <span class="sym">++</span>r<span class="sym">;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span> <span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> ??argv <span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span>	n <span class="sym">= (</span>argc<span class="sym">&gt;</span><span class="num">1</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(%d) = %ld</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">));</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
