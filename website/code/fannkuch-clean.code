<span class="sym">/*</span>
	The Computer Language Shootout
	http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
	contributed by John van Groningen
<span class="sym">*/</span>

<span class="kwa">module</span> fannkuch

<span class="kwa">import</span> StdEnv<span class="sym">,</span>LanguageShootout

count_flips <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>{#<span class="kwb">Int</span>}<span class="sym">)</span>
count_flips n1 a a2
	#<span class="sym">!</span> k<span class="sym">=</span>a.<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
	<span class="sym">|</span> k<span class="sym">==</span><span class="num">0</span> <span class="sym">||</span> a.<span class="sym">[</span>n1<span class="sym">]==</span>n1
		<span class="sym">= (</span><span class="num">0</span><span class="sym">,</span>a<span class="sym">,</span>a2<span class="sym">)</span>
		# <span class="sym">(</span>a<span class="sym">,</span>a2<span class="sym">) =</span> copy2 <span class="num">0</span> n1 a a2
		  <span class="sym">(</span>n<span class="sym">,</span>a2<span class="sym">) =</span> count_flips2 k <span class="num">0</span> a2
		<span class="sym">= (</span>n<span class="sym">,</span>a<span class="sym">,</span>a2<span class="sym">)</span>

<span class="sym">//</span>copy2 <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">-&gt; (!*</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>{#<span class="kwb">Int</span>}<span class="sym">)</span>
copy2 i n1 a a2
	<span class="sym">|</span> i<span class="sym">&lt;=</span>n1
		#<span class="sym">!</span> e<span class="sym">=</span>a.<span class="sym">[</span>i<span class="sym">]</span>
		<span class="sym">=</span> copy2 <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> n1 a {a2 <span class="sym">&amp; [</span>i<span class="sym">] =</span> e}
		<span class="sym">= (</span>a<span class="sym">,</span>a2<span class="sym">)</span>

xchg i j a <span class="sym">:==</span> <span class="kwa">let</span> <span class="sym">(</span>ai<span class="sym">,</span>a1<span class="sym">)=</span>a<span class="sym">![</span>i<span class="sym">]; (</span>aj1<span class="sym">,</span>a2<span class="sym">)=</span>a1<span class="sym">![</span>j<span class="sym">]</span> <span class="kwa">in</span> {a2 <span class="sym">&amp; [</span>i<span class="sym">]=</span>aj1<span class="sym">,[</span>j<span class="sym">]=</span>ai}

count_flips2 <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>{#<span class="kwb">Int</span>}<span class="sym">)</span>
count_flips2 k n_flips a
	<span class="sym">|</span> k<span class="sym">&lt;&gt;</span><span class="num">0</span>
		# <span class="sym">(</span>ak<span class="sym">,</span>a<span class="sym">) =</span> a<span class="sym">![</span>k<span class="sym">]</span>
		  a <span class="sym">=</span> {a <span class="sym">&amp; [</span>k<span class="sym">]=</span>k}
		<span class="sym">|</span> k<span class="sym">&gt;</span><span class="num">2</span>
			<span class="sym">=</span> flip_p <span class="num">4</span> k ak n_flips a
			<span class="sym">=</span> count_flips2 ak <span class="sym">(</span>n_flips<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> a
		<span class="sym">= (</span>n_flips<span class="sym">,</span>a<span class="sym">)</span>

<span class="sym">//</span>flip_p <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">-&gt; (!</span><span class="kwb">Int</span><span class="sym">,!*</span>{#<span class="kwb">Int</span>}<span class="sym">)</span>
flip_p i j ak n_flips a
	#<span class="sym">!</span> a<span class="sym">=</span>xchg <span class="sym">(</span>i<span class="sym">-</span><span class="num">3</span><span class="sym">) (</span>j<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> a
	<span class="sym">|</span> i<span class="sym">&lt;</span>j	<span class="sym">=</span> flip_p <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>j<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> ak n_flips a
			<span class="sym">=</span> count_flips2 ak <span class="sym">(</span>n_flips<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> a

rotate i n a
	# <span class="sym">(</span>ai1<span class="sym">,</span>a<span class="sym">)=</span>a<span class="sym">![</span>i<span class="sym">]</span>
	#<span class="sym">!</span> a<span class="sym">=</span>{a <span class="sym">&amp; [</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">]=</span>ai1}
	<span class="sym">|</span> i<span class="sym">&lt;</span>n	<span class="sym">=</span> rotate <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> n a
			<span class="sym">=</span> a

next_permutation <span class="sym">:: !*</span>{#<span class="kwb">Int</span>} <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt; (!*</span>{#<span class="kwb">Int</span>}<span class="sym">,!*</span>{#<span class="kwb">Int</span>}<span class="sym">,!</span><span class="kwb">Int</span><span class="sym">)</span>
next_permutation perm count count_i n1
	#<span class="sym">!</span> p0 <span class="sym">=</span> perm.<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
	# perm <span class="sym">=</span> rotate <span class="num">1</span> count_i perm
	# perm <span class="sym">=</span> {perm <span class="sym">&amp; [</span>count_i<span class="sym">]=</span>p0}
	# <span class="sym">(</span>counti<span class="sym">,</span>count<span class="sym">) =</span> count<span class="sym">![</span>count_i<span class="sym">]</span>
	<span class="sym">|</span> counti<span class="sym">&gt;</span><span class="num">0</span>
		<span class="sym">= (</span>perm<span class="sym">,</span>{count <span class="sym">&amp; [</span>count_i<span class="sym">]=</span>counti<span class="sym">-</span><span class="num">1</span>}<span class="sym">,</span>count_i<span class="sym">)</span>
	# count <span class="sym">=</span> {count <span class="sym">&amp; [</span>count_i<span class="sym">]=</span>count_i}
	# count_i <span class="sym">=</span> count_i<span class="sym">+</span><span class="num">1</span>
	<span class="sym">|</span> count_i<span class="sym">&lt;=</span>n1
		<span class="sym">=</span> next_permutation perm count count_i n1
		<span class="sym">= (</span>perm<span class="sym">,</span>count<span class="sym">,</span>count_i<span class="sym">)</span>

copy <span class="sym">:: !</span>{#<span class="kwb">Int</span>} <span class="sym">-&gt; *</span>{#<span class="kwb">Int</span>}
copy a <span class="sym">=</span> {e \\ e<span class="sym">&lt;-:</span>a}

print_permutations <span class="sym">:: !*</span>{#<span class="kwb">Int</span>} <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>File <span class="sym">-&gt; *</span>File
print_permutations perm count perm_copy n1 perm_n max_flips file
	<span class="sym">|</span> perm_n<span class="sym">&lt;</span><span class="num">30</span>
		#<span class="sym">!</span> perm2 <span class="sym">=</span> copy perm
		# file <span class="sym">=</span> foldl <span class="sym">(&lt;&lt;&lt;)</span> file <span class="sym">[</span>e<span class="sym">+</span><span class="num">1</span>\\e<span class="sym">&lt;-:</span>perm2<span class="sym">] &lt;&lt;&lt;</span> <span class="str">'\n'</span>
		  <span class="sym">(</span>n_flips<span class="sym">,</span>perm<span class="sym">,</span>perm_copy<span class="sym">) =</span> count_flips n1 perm perm_copy
		  max_flips <span class="sym">=</span> if <span class="sym">(</span>n_flips<span class="sym">&gt;</span>max_flips<span class="sym">)</span> n_flips max_flips
		  <span class="sym">(</span>perm<span class="sym">,</span>count<span class="sym">,</span>count_i<span class="sym">) =</span> next_permutation perm count <span class="num">1</span> n1
		<span class="sym">|</span> count_i<span class="sym">&lt;=</span>n1
			<span class="sym">=</span> print_permutations perm count perm_copy n1 <span class="sym">(</span>perm_n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> max_flips file
			<span class="sym">=</span> file <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">&lt;&lt;&lt; (</span>n1<span class="sym">+</span><span class="num">1</span><span class="sym">) &lt;&lt;&lt;</span> <span class="str">&quot;) = &quot;</span> <span class="sym">&lt;&lt;&lt;</span> max_flips <span class="sym">&lt;&lt;&lt;</span> <span class="str">'\n'</span>
		# max_flips<span class="sym">=</span>compute_max_flips perm count perm_copy n1 max_flips
		<span class="sym">=</span> file <span class="sym">&lt;&lt;&lt;</span> <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">&lt;&lt;&lt; (</span>n1<span class="sym">+</span><span class="num">1</span><span class="sym">) &lt;&lt;&lt;</span> <span class="str">&quot;) = &quot;</span> <span class="sym">&lt;&lt;&lt;</span> max_flips <span class="sym">&lt;&lt;&lt;</span> <span class="str">'\n'</span>

compute_max_flips <span class="sym">:: !*</span>{#<span class="kwb">Int</span>} <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span>
compute_max_flips perm count perm_copy n1 max_flips
	# <span class="sym">(</span>n_flips<span class="sym">,</span>perm<span class="sym">,</span>perm_copy<span class="sym">) =</span> count_flips n1 perm perm_copy
	<span class="sym">|</span> n_flips<span class="sym">&lt;=</span>max_flips
		# <span class="sym">(</span>perm<span class="sym">,</span>count<span class="sym">,</span>count_i<span class="sym">) =</span> next_permutation perm count <span class="num">1</span> n1
		<span class="sym">|</span> count_i<span class="sym">&lt;=</span>n1
			<span class="sym">=</span> compute_max_flips perm count perm_copy n1 max_flips
			<span class="sym">=</span> max_flips
		# <span class="sym">(</span>perm<span class="sym">,</span>count<span class="sym">,</span>count_i<span class="sym">) =</span> next_permutation perm count <span class="num">1</span> n1
		<span class="sym">|</span> count_i<span class="sym">&lt;=</span>n1
			<span class="sym">=</span> compute_max_flips perm count perm_copy n1 n_flips
			<span class="sym">=</span> n_flips

Start world
	# n<span class="sym">=</span>argi
	  perm <span class="sym">=</span> {i\\i<span class="sym">&lt;-[</span><span class="num">0</span>..n<span class="sym">-</span><span class="num">1</span><span class="sym">]</span>}
	  count <span class="sym">=</span> {i\\i<span class="sym">&lt;-[</span><span class="num">0</span>..n<span class="sym">-</span><span class="num">1</span><span class="sym">]</span>}
	  <span class="sym">(</span>file<span class="sym">,</span>world<span class="sym">) =</span> stdio world
	  file <span class="sym">=</span> print_permutations perm count <span class="sym">(</span>createArray n <span class="num">0</span><span class="sym">) (</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="num">0 0</span> file
	<span class="sym">=</span> fclose file world
