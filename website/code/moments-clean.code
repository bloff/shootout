<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
/* The Great Computer Language Shootout 
   contributed by John van Groningen (Clean Guru!)

   http://shootout.alioth.debian.org/

To compile:	
   cleanIDE.exe <I><FONT COLOR="#B22222">--batch-force-build &quot;e:\shoot\contrib\clean\moments.prj&quot;
</FONT></I>
To run:
   moments.exe -con &lt; input.txt &gt; output.txt
*/


<B><FONT COLOR="#A020F0">module</FONT></B> moments
<B><FONT COLOR="#A020F0">import</FONT></B> StdEnv, StdOverloadedList, LanguageShootout, Heapsort

Start world  
   # (console, world) = stdio world
   # (a,suma) = sumNumbers console 0.0 [#!]
   # (median,n,a) = median a   
   # mean = suma / toReal n      
   # (adev,var,skew,kurt) = loop a mean 0.0 0.0 0.0 0.0 (n-1)
   = resultstring (toReal n) mean median adev var skew kurt    

   <B><FONT COLOR="#A020F0">where</FONT></B>         
   sumNumbers <B><FONT COLOR="#228B22">:: !*File !Real .[#Real!] -&gt; *(*{#Real},Real)   
</FONT></B>   sumNumbers f suma a
      #! (ok,r,f) = freadr f
      | not ok = (toArray a, suma)
      = sumNumbers f (suma+r) [# r:a !]
      
   toArray <B><FONT COLOR="#228B22">:: [#Real!] -&gt; *{#Real}
</FONT></B>   toArray a = {x \\ x &lt;|- a}           
                                        
   // Use modified Quicksort rather than Wirth's k select       
   median a
      # a = find_medians a  
      # (n,a) = usize a
      # m = middle a ((n/2)-1) (n/2) n
      = (m,n,a)
      
      <B><FONT COLOR="#A020F0">where</FONT></B> 
      middle a=:{[m0]=am0,[m]=am} m0 m n
         | isOdd n = am
                   = (am0 + am) / 2.0
                   
   loop <B><FONT COLOR="#228B22">:: !.{#Real} !Real Real Real Real Real Int -&gt; . (!Real,!Real,!Real,!Real) 
</FONT></B>   loop a mean adev var skew kurt i
      | i&lt;0
          = (adev,var,skew,kurt)
	  #! ai=a.[i]
	  # dev = ai - mean
	  # dev2 = dev*dev
	  # dev3 = dev2*dev
	  = loop a mean (adev + abs dev)(var + dev2)(skew + dev3)(kurt + dev3*dev)(i-1)
                            
find_medians <B><FONT COLOR="#228B22">:: *{#Real} -&gt; .{#Real}
</FONT></B>find_medians a0
    # (n_elements,a) = usize a0
    # k = (n_elements&gt;&gt;1) + (n_elements bitand 1)
    = quick_sort1 0 (n_elements-1) k a
    <B><FONT COLOR="#A020F0">where</FONT></B>
        quick_sort0 <B><FONT COLOR="#228B22">:: !Int !Int !Int !*{#Real} -&gt; *{#Real}
</FONT></B>        quick_sort0 b e k a
            | k&gt;=b &amp;&amp; k&lt;=e+1
                = quick_sort1 b e k a
                = a

        quick_sort1 b e k a
            | b&gt;=e
                = a
        quick_sort1 b e k a=:{[b]=ab}
            # m=(b+e)&gt;&gt;1
            # (am,a) = a![m]
            = find_large am (b+1) e e b k {a &amp; [m]=ab}
        <B><FONT COLOR="#A020F0">where</FONT></B>
            find_large am l e r b k a
                | l&lt;=e &amp;&amp; a.[l]&lt;=am
                    = find_large am (l+1) e r b k a
                    = find_small_or_equal am r b l e k a
           
            find_small_or_equal am r b l e k a
                | r&gt;b &amp;&amp; a.[r]&gt;am
                    = find_small_or_equal am (r-1) b l e k a
                | l&lt;r
                    # (al,a)=a![l]
                      (ar,a)=a![r]
                    = find_large am (l+1) e (r-1) b k {a &amp; [l]=ar,[r]=al}
           	| b==r
                    = quick_sort2 (r-1) (r+1) b e k {a &amp; [b]=am}
                    # (ar,a)=a![r]
                    = quick_sort2 (r-1) (r+1) b e k {a &amp; [r]=am,[b]=ar}

            quick_sort2 l r b e k a
                | l-b&gt;=e-r
                    = quick_sort0 b l k (quick_sort0 r e k a)
                    = quick_sort0 r e k (quick_sort0 b l k a)   

   resultstring n mean median ad v s k = 
      <B><FONT COLOR="#BC8F8F">&quot;n:                  &quot;</FONT></B> +++ (toString n) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B> +++ 
      <B><FONT COLOR="#BC8F8F">&quot;median:             &quot;</FONT></B> +++ (toStringWith 6 median) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B> +++ 
      <B><FONT COLOR="#BC8F8F">&quot;mean:               &quot;</FONT></B> +++ (toStringWith 6 mean) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B> +++            
      <B><FONT COLOR="#BC8F8F">&quot;average_deviation:  &quot;</FONT></B> +++ (toStringWith 6 adev) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B> +++ 
      <B><FONT COLOR="#BC8F8F">&quot;standard_deviation: &quot;</FONT></B> +++ (toStringWith 6 sdev) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B> +++ 
      <B><FONT COLOR="#BC8F8F">&quot;variance:           &quot;</FONT></B> +++ (toStringWith 6 var) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B> +++ 
      <B><FONT COLOR="#BC8F8F">&quot;skew:               &quot;</FONT></B> +++ (toStringWith 6 skew) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B> +++ 
      <B><FONT COLOR="#BC8F8F">&quot;kurtosis:           &quot;</FONT></B> +++ (toStringWith 6 kurt) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>     
      
      <B><FONT COLOR="#A020F0">where</FONT></B>                                                 
      adev = ad / n      
      var = v / (n-1.0)
      sdev = sqrt var
      skew = s / (n*var*sdev)
      kurt = k / (n*var*var)-3.0                                                 </pre></td></tr></table>
