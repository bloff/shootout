<span class="line">    1 </span><span class="sym">/*</span> The Great Computer Language Shootout
<span class="line">    2 </span>     contributed by John van Groningen <span class="sym">(</span>Clean Guru<span class="sym">!)
</span><span class="line">    3 </span><span class="sym"> 
</span><span class="line">    4 </span><span class="sym"> </span>   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/
</span><span class="line">    5 </span><span class="sym"> 
</span><span class="line">    6 </span><span class="sym"> </span>To compile<span class="sym">:
</span><span class="line">    7 </span><span class="sym">         </span>   cleanIDE.exe <span class="slc">--batch-force-build &quot;e:\shoot\contrib\clean\moments.prj&quot; 
</span><span class="line">    8 </span><span class="slc"></span>
<span class="line">    9 </span> To run<span class="sym">:
</span><span class="line">   10 </span><span class="sym"> </span>   moments.exe <span class="sym">-</span>con <span class="sym">&lt;</span> input.txt <span class="sym">&gt;</span> output.txt
<span class="line">   11 </span> <span class="sym">*/
</span><span class="line">   12 </span><span class="sym"> 
</span><span class="line">   13 </span><span class="sym"> 
</span><span class="line">   14 </span><span class="sym"> </span><span class="kwa">module</span> moments
<span class="line">   15 </span> <span class="kwa">import</span> StdEnv<span class="sym">,</span> StdOverloadedList<span class="sym">,</span> LanguageShootout<span class="sym">,</span> Heapsort
<span class="line">   16 </span>
<span class="line">   17 </span>  Start world
<span class="line">   18 </span>      # <span class="sym">(</span>console<span class="sym">,</span> world<span class="sym">) =</span> stdio world
<span class="line">   19 </span>    # <span class="sym">(</span>a<span class="sym">,</span>suma<span class="sym">) =</span> sumNumbers console <span class="num">0.0</span> <span class="sym">[</span>#<span class="sym">!]
</span><span class="line">   20 </span><span class="sym"> </span>   # <span class="sym">(</span>median<span class="sym">,</span>n<span class="sym">,</span>a<span class="sym">) =</span> median a
<span class="line">   21 </span>       # mean <span class="sym">=</span> suma <span class="sym">/</span> toReal n
<span class="line">   22 </span>          # <span class="sym">(</span>adev<span class="sym">,</span>var<span class="sym">,</span>skew<span class="sym">,</span>kurt<span class="sym">) =</span> loop a mean <span class="num">0.0 0.0 0.0 0.0</span> <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)
</span><span class="line">   23 </span><span class="sym">    =</span> resultstring <span class="sym">(</span>toReal n<span class="sym">)</span> mean median adev var skew kurt
<span class="line">   24 </span>
<span class="line">   25 </span>         <span class="kwa">where
</span><span class="line">   26 </span><span class="kwa">          </span>   sumNumbers <span class="sym">:: !*</span>File <span class="sym">!</span>Real .<span class="sym">[</span>#Real<span class="sym">!] -&gt; *(*</span>{#Real}<span class="sym">,</span>Real<span class="sym">)
</span><span class="line">   27 </span><span class="sym">    </span>   sumNumbers f suma a
<span class="line">   28 </span>       #<span class="sym">! (</span>ok<span class="sym">,</span>r<span class="sym">,</span>f<span class="sym">) =</span> freadr f
<span class="line">   29 </span>       <span class="sym">|</span> not ok <span class="sym">= (</span>toArray a<span class="sym">,</span> suma<span class="sym">)
</span><span class="line">   30 </span><span class="sym">       =</span> sumNumbers f <span class="sym">(</span>suma<span class="sym">+</span>r<span class="sym">) [</span># r<span class="sym">:</span>a <span class="sym">!]
</span><span class="line">   31 </span><span class="sym"> 
</span><span class="line">   32 </span><span class="sym">       </span>   toArray <span class="sym">:: [</span>#Real<span class="sym">!] -&gt; *</span>{#Real}
<span class="line">   33 </span>    toArray a <span class="sym">=</span> {x \\ x <span class="sym">&lt;|-</span> a}
<span class="line">   34 </span>
<span class="line">   35 </span>                                                        <span class="sym">//</span> Use modified Quicksort rather than Wirth<span class="str">'s k select
</span><span class="line">   36 </span><span class="str">           median a
</span><span class="line">   37 </span><span class="str">       # a = find_medians a
</span><span class="line">   38 </span><span class="str">         # (n,a) = usize a
</span><span class="line">   39 </span><span class="str">       # m = middle a ((n/2)-1) (n/2) n
</span><span class="line">   40 </span><span class="str">       = (m,n,a)
</span><span class="line">   41 </span><span class="str"> 
</span><span class="line">   42 </span><span class="str">             where
</span><span class="line">   43 </span><span class="str">        middle a=:{[m0]=am0,[m]=am} m0 m n
</span><span class="line">   44 </span><span class="str">          | isOdd n = am
</span><span class="line">   45 </span><span class="str">                    = (am0 + am) / 2.0
</span><span class="line">   46 </span><span class="str"> 
</span><span class="line">   47 </span><span class="str">                       loop :: !.{#Real} !Real Real Real Real Real Int -&gt; . (!Real,!Real,!Real,!Real)
</span><span class="line">   48 </span><span class="str">     loop a mean adev var skew kurt i
</span><span class="line">   49 </span><span class="str">       | i&lt;0
</span><span class="line">   50 </span><span class="str">           = (adev,var,skew,kurt)
</span><span class="line">   51 </span><span class="str">           #! ai=a.[i]
</span><span class="line">   52 </span><span class="str">           # dev = ai - mean
</span><span class="line">   53 </span><span class="str">           # dev2 = dev*dev
</span><span class="line">   54 </span><span class="str">           # dev3 = dev2*dev
</span><span class="line">   55 </span><span class="str">           = loop a mean (adev + abs dev)(var + dev2)(skew + dev3)(kurt + dev3*dev)(i-1)
</span><span class="line">   56 </span><span class="str"> 
</span><span class="line">   57 </span><span class="str">                             find_medians :: *{#Real} -&gt; .{#Real}
</span><span class="line">   58 </span><span class="str"> find_medians a0
</span><span class="line">   59 </span><span class="str">     # (n_elements,a) = usize a0
</span><span class="line">   60 </span><span class="str">     # k = (n_elements&gt;&gt;1) + (n_elements bitand 1)
</span><span class="line">   61 </span><span class="str">     = quick_sort1 0 (n_elements-1) k a
</span><span class="line">   62 </span><span class="str">     where
</span><span class="line">   63 </span><span class="str">         quick_sort0 :: !Int !Int !Int !*{#Real} -&gt; *{#Real}
</span><span class="line">   64 </span><span class="str">         quick_sort0 b e k a
</span><span class="line">   65 </span><span class="str">             | k&gt;=b &amp;&amp; k&lt;=e+1
</span><span class="line">   66 </span><span class="str">                 = quick_sort1 b e k a
</span><span class="line">   67 </span><span class="str">                 = a
</span><span class="line">   68 </span><span class="str"> 
</span><span class="line">   69 </span><span class="str">         quick_sort1 b e k a
</span><span class="line">   70 </span><span class="str">             | b&gt;=e
</span><span class="line">   71 </span><span class="str">                 = a
</span><span class="line">   72 </span><span class="str">         quick_sort1 b e k a=:{[b]=ab}
</span><span class="line">   73 </span><span class="str">             # m=(b+e)&gt;&gt;1
</span><span class="line">   74 </span><span class="str">             # (am,a) = a![m]
</span><span class="line">   75 </span><span class="str">             = find_large am (b+1) e e b k {a &amp; [m]=ab}
</span><span class="line">   76 </span><span class="str">         where
</span><span class="line">   77 </span><span class="str">             find_large am l e r b k a
</span><span class="line">   78 </span><span class="str">                 | l&lt;=e &amp;&amp; a.[l]&lt;=am
</span><span class="line">   79 </span><span class="str">                     = find_large am (l+1) e r b k a
</span><span class="line">   80 </span><span class="str">                     = find_small_or_equal am r b l e k a
</span><span class="line">   81 </span><span class="str"> 
</span><span class="line">   82 </span><span class="str">                        find_small_or_equal am r b l e k a
</span><span class="line">   83 </span><span class="str">                 | r&gt;b &amp;&amp; a.[r]&gt;am
</span><span class="line">   84 </span><span class="str">                     = find_small_or_equal am (r-1) b l e k a
</span><span class="line">   85 </span><span class="str">                 | l&lt;r
</span><span class="line">   86 </span><span class="str">                     # (al,a)=a![l]
</span><span class="line">   87 </span><span class="str">                       (ar,a)=a![r]
</span><span class="line">   88 </span><span class="str">                     = find_large am (l+1) e (r-1) b k {a &amp; [l]=ar,[r]=al}
</span><span class="line">   89 </span><span class="str">                    | b==r
</span><span class="line">   90 </span><span class="str">                     = quick_sort2 (r-1) (r+1) b e k {a &amp; [b]=am}
</span><span class="line">   91 </span><span class="str">                     # (ar,a)=a![r]
</span><span class="line">   92 </span><span class="str">                     = quick_sort2 (r-1) (r+1) b e k {a &amp; [r]=am,[b]=ar}
</span><span class="line">   93 </span><span class="str"> 
</span><span class="line">   94 </span><span class="str">             quick_sort2 l r b e k a
</span><span class="line">   95 </span><span class="str">                 | l-b&gt;=e-r
</span><span class="line">   96 </span><span class="str">                     = quick_sort0 b l k (quick_sort0 r e k a)
</span><span class="line">   97 </span><span class="str">                     = quick_sort0 r e k (quick_sort0 b l k a)
</span><span class="line">   98 </span><span class="str">    
</span><span class="line">   99 </span><span class="str">    resultstring n mean median ad v s k =
</span><span class="line">  100 </span><span class="str">        &quot;n:                  &quot; +++ (toString n) +++ &quot;\n&quot; +++
</span><span class="line">  101 </span><span class="str">        &quot;median:             &quot; +++ (toStringWith 6 median) +++ &quot;\n&quot; +++
</span><span class="line">  102 </span><span class="str">        &quot;mean:               &quot; +++ (toStringWith 6 mean) +++ &quot;\n&quot; +++
</span><span class="line">  103 </span><span class="str">                   &quot;average_deviation:  &quot; +++ (toStringWith 6 adev) +++ &quot;\n&quot; +++
</span><span class="line">  104 </span><span class="str">        &quot;standard_deviation: &quot; +++ (toStringWith 6 sdev) +++ &quot;\n&quot; +++
</span><span class="line">  105 </span><span class="str">        &quot;variance:           &quot; +++ (toStringWith 6 var) +++ &quot;\n&quot; +++
</span><span class="line">  106 </span><span class="str">        &quot;skew:               &quot; +++ (toStringWith 6 skew) +++ &quot;\n&quot; +++
</span><span class="line">  107 </span><span class="str">        &quot;kurtosis:           &quot; +++ (toStringWith 6 kurt) +++ &quot;\n&quot;
</span><span class="line">  108 </span><span class="str">      
</span><span class="line">  109 </span><span class="str">             where
</span><span class="line">  110 </span><span class="str">                                                        adev = ad / n
</span><span class="line">  111 </span><span class="str">             var = v / (n-1.0)
</span><span class="line">  112 </span><span class="str">       sdev = sqrt var
</span><span class="line">  113 </span><span class="str">       skew = s / (n*var*sdev)
</span><span class="line">  114 </span><span class="str">       kurt = k / (n*var*var)-3.0</span>                                                  
