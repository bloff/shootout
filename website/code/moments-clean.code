<span class="sym">/*</span> The Great Computer Language Shootout
   contributed by John van Groningen <span class="sym">(</span>Clean Guru<span class="sym">!)</span>

   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
<span class="sym">*/</span>

<span class="kwa">module</span> moments
<span class="kwa">import</span> StdEnv<span class="sym">,</span> StdOverloadedList<span class="sym">,</span> LanguageShootout<span class="sym">,</span> Heapsort

Start world
   # <span class="sym">(</span>console<span class="sym">,</span> world<span class="sym">) =</span> stdio world
   # <span class="sym">(</span>a<span class="sym">,</span>suma<span class="sym">) =</span> sumNumbers console <span class="num">0.0</span> <span class="sym">[</span>#<span class="sym">!]</span>
   # <span class="sym">(</span>median<span class="sym">,</span>n<span class="sym">,</span>a<span class="sym">) =</span> median a
   # mean <span class="sym">=</span> suma <span class="sym">/</span> toReal n
   # <span class="sym">(</span>adev<span class="sym">,</span>var<span class="sym">,</span>skew<span class="sym">,</span>kurt<span class="sym">) =</span> loop a mean <span class="num">0.0 0.0 0.0 0.0</span> <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
   <span class="sym">=</span> resultstring <span class="sym">(</span>toReal n<span class="sym">)</span> mean median adev var skew kurt

   <span class="kwa">where</span>
   sumNumbers <span class="sym">:: !*</span>File <span class="sym">!</span>Real .<span class="sym">[</span>#Real<span class="sym">!] -&gt; *(*</span>{#Real}<span class="sym">,</span>Real<span class="sym">)</span>
   sumNumbers f suma a
      #<span class="sym">! (</span>ok<span class="sym">,</span>r<span class="sym">,</span>f<span class="sym">) =</span> freadr f
      <span class="sym">|</span> not ok <span class="sym">= (</span>toArray a<span class="sym">,</span> suma<span class="sym">)</span>
      <span class="sym">=</span> sumNumbers f <span class="sym">(</span>suma<span class="sym">+</span>r<span class="sym">) [</span># r<span class="sym">:</span>a <span class="sym">!]</span>

   toArray <span class="sym">:: [</span>#Real<span class="sym">!] -&gt; *</span>{#Real}
   toArray a <span class="sym">=</span> {x \\ x <span class="sym">&lt;|-</span> a}

   <span class="sym">//</span> Use modified Quicksort rather than Wirth<span class="str">'s k select</span>
<span class="str">   median a</span>
<span class="str">      # a = find_medians a</span>
<span class="str">      # (n,a) = usize a</span>
<span class="str">      # m = middle a ((n/2)-1) (n/2) n</span>
<span class="str">      = (m,n,a)</span>
<span class="str"></span>
<span class="str">      where</span>
<span class="str">      middle a=:{[m0]=am0,[m]=am} m0 m n</span>
<span class="str">         | isOdd n = am</span>
<span class="str">                   = (am0 + am) / 2.0</span>
<span class="str"></span>
<span class="str">   loop :: !.{#Real} !Real Real Real Real Real Int -&gt; . (!Real,!Real,!Real,!Real)</span>
<span class="str">   loop a mean adev var skew kurt i</span>
<span class="str">      | i&lt;0</span>
<span class="str">          = (adev,var,skew,kurt)</span>
<span class="str">	  #! ai=a.[i]</span>
<span class="str">	  # dev = ai - mean</span>
<span class="str">	  # dev2 = dev*dev</span>
<span class="str">	  # dev3 = dev2*dev</span>
<span class="str">	  = loop a mean (adev + abs dev)(var + dev2)(skew + dev3)(kurt + dev3*dev)(i-1)</span>
<span class="str"></span>
<span class="str">find_medians :: *{#Real} -&gt; .{#Real}</span>
<span class="str">find_medians a0</span>
<span class="str">    # (n_elements,a) = usize a0</span>
<span class="str">    # k = (n_elements&gt;&gt;1) + (n_elements bitand 1)</span>
<span class="str">    = quick_sort1 0 (n_elements-1) k a</span>
<span class="str">    where</span>
<span class="str">        quick_sort0 :: !Int !Int !Int !*{#Real} -&gt; *{#Real}</span>
<span class="str">        quick_sort0 b e k a</span>
<span class="str">            | k&gt;=b &amp;&amp; k&lt;=e+1</span>
<span class="str">                = quick_sort1 b e k a</span>
<span class="str">                = a</span>
<span class="str"></span>
<span class="str">        quick_sort1 b e k a</span>
<span class="str">            | b&gt;=e</span>
<span class="str">                = a</span>
<span class="str">        quick_sort1 b e k a=:{[b]=ab}</span>
<span class="str">            # m=(b+e)&gt;&gt;1</span>
<span class="str">            # (am,a) = a![m]</span>
<span class="str">            = find_large am (b+1) e e b k {a &amp; [m]=ab}</span>
<span class="str">        where</span>
<span class="str">            find_large am l e r b k a</span>
<span class="str">                | l&lt;=e &amp;&amp; a.[l]&lt;=am</span>
<span class="str">                    = find_large am (l+1) e r b k a</span>
<span class="str">                    = find_small_or_equal am r b l e k a</span>
<span class="str"></span>
<span class="str">            find_small_or_equal am r b l e k a</span>
<span class="str">                | r&gt;b &amp;&amp; a.[r]&gt;am</span>
<span class="str">                    = find_small_or_equal am (r-1) b l e k a</span>
<span class="str">                | l&lt;r</span>
<span class="str">                    # (al,a)=a![l]</span>
<span class="str">                      (ar,a)=a![r]</span>
<span class="str">                    = find_large am (l+1) e (r-1) b k {a &amp; [l]=ar,[r]=al}</span>
<span class="str">           	| b==r</span>
<span class="str">                    = quick_sort2 (r-1) (r+1) b e k {a &amp; [b]=am}</span>
<span class="str">                    # (ar,a)=a![r]</span>
<span class="str">                    = quick_sort2 (r-1) (r+1) b e k {a &amp; [r]=am,[b]=ar}</span>
<span class="str"></span>
<span class="str">            quick_sort2 l r b e k a</span>
<span class="str">                | l-b&gt;=e-r</span>
<span class="str">                    = quick_sort0 b l k (quick_sort0 r e k a)</span>
<span class="str">                    = quick_sort0 r e k (quick_sort0 b l k a)</span>
<span class="str"></span>
<span class="str">   resultstring n mean median ad v s k =</span>
<span class="str">      &quot;n:                  &quot; +++ (toString n) +++ &quot;\n&quot; +++</span>
<span class="str">      &quot;median:             &quot; +++ (toStringWith 6 median) +++ &quot;\n&quot; +++</span>
<span class="str">      &quot;mean:               &quot; +++ (toStringWith 6 mean) +++ &quot;\n&quot; +++</span>
<span class="str">      &quot;average_deviation:  &quot; +++ (toStringWith 6 adev) +++ &quot;\n&quot; +++</span>
<span class="str">      &quot;standard_deviation: &quot; +++ (toStringWith 6 sdev) +++ &quot;\n&quot; +++</span>
<span class="str">      &quot;variance:           &quot; +++ (toStringWith 6 var) +++ &quot;\n&quot; +++</span>
<span class="str">      &quot;skew:               &quot; +++ (toStringWith 6 skew) +++ &quot;\n&quot; +++</span>
<span class="str">      &quot;kurtosis:           &quot; +++ (toStringWith 6 kurt) +++ &quot;\n&quot;</span>
<span class="str"></span>
<span class="str">      where</span>
<span class="str">      adev = ad / n</span>
<span class="str">      var = v / (n-1.0)</span>
<span class="str">      sdev = sqrt var</span>
<span class="str">      skew = s / (n*var*sdev)</span>
<span class="str">      kurt = k / (n*var*var)-3.0</span>
<span class="str"></span>
