<span class="sym">/*</span> The Great Computer Language Shootout
   contributed by John van Groningen <span class="sym">(</span>Clean Guru<span class="sym">!)</span>

   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
<span class="sym">*/</span>

<span class="kwa">module</span> moments
<span class="kwa">import</span> StdEnv<span class="sym">,</span> StdOverloadedList<span class="sym">,</span> LanguageShootout<span class="sym">,</span> Heapsort

Start world
   # <span class="sym">(</span>console<span class="sym">,</span> world<span class="sym">) =</span> stdio world
   # <span class="sym">(</span>a<span class="sym">,</span>suma<span class="sym">) =</span> sumNumbers console <span class="num">0.0</span> <span class="sym">[</span>#<span class="sym">!]</span>
   # <span class="sym">(</span>median<span class="sym">,</span>n<span class="sym">,</span>a<span class="sym">) =</span> median a
   # mean <span class="sym">=</span> suma <span class="sym">/</span> toReal n
   # <span class="sym">(</span>adev<span class="sym">,</span>var<span class="sym">,</span>skew<span class="sym">,</span>kurt<span class="sym">) =</span> loop a mean <span class="num">0.0 0.0 0.0 0.0</span> <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
   <span class="sym">=</span> resultstring <span class="sym">(</span>toReal n<span class="sym">)</span> mean median adev var skew kurt

   <span class="kwa">where</span>
   sumNumbers <span class="sym">:: !*</span>File <span class="sym">!</span>Real .<span class="sym">[</span>#Real<span class="sym">!] -&gt; *(*</span>{#Real}<span class="sym">,</span>Real<span class="sym">)</span>
   sumNumbers f suma a
      #<span class="sym">! (</span>ok<span class="sym">,</span>r<span class="sym">,</span>f<span class="sym">) =</span> freadr f
      <span class="sym">|</span> not ok <span class="sym">= (</span>toArray a<span class="sym">,</span> suma<span class="sym">)</span>
      <span class="sym">=</span> sumNumbers f <span class="sym">(</span>suma<span class="sym">+</span>r<span class="sym">) [</span># r<span class="sym">:</span>a <span class="sym">!]</span>

   toArray <span class="sym">:: [</span>#Real<span class="sym">!] -&gt; *</span>{#Real}
   toArray a <span class="sym">=</span> {x \\ x <span class="sym">&lt;|-</span> a}

   <span class="sym">//</span> Use modified Quicksort rather than Wirth's k select
   median a
      # a <span class="sym">=</span> find_medians a
      # <span class="sym">(</span>n<span class="sym">,</span>a<span class="sym">) =</span> usize a
      # m <span class="sym">=</span> middle a <span class="sym">((</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">)-</span><span class="num">1</span><span class="sym">) (</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">)</span> n
      <span class="sym">= (</span>m<span class="sym">,</span>n<span class="sym">,</span>a<span class="sym">)</span>

      <span class="kwa">where</span>
      middle a<span class="sym">=:</span>{<span class="sym">[</span>m0<span class="sym">]=</span>am0<span class="sym">,[</span>m<span class="sym">]=</span>am} m0 m n
         <span class="sym">|</span> isOdd n <span class="sym">=</span> am
                   <span class="sym">= (</span>am0 <span class="sym">+</span> am<span class="sym">) /</span> <span class="num">2.0</span>

   loop <span class="sym">:: !</span>.{#Real} <span class="sym">!</span>Real Real Real Real Real <span class="kwb">Int</span> <span class="sym">-&gt;</span> . <span class="sym">(!</span>Real<span class="sym">,!</span>Real<span class="sym">,!</span>Real<span class="sym">,!</span>Real<span class="sym">)</span>
   loop a mean adev var skew kurt i
      <span class="sym">|</span> i<span class="sym">&lt;</span><span class="num">0</span>
          <span class="sym">= (</span>adev<span class="sym">,</span>var<span class="sym">,</span>skew<span class="sym">,</span>kurt<span class="sym">)</span>
	  #<span class="sym">!</span> ai<span class="sym">=</span>a.<span class="sym">[</span>i<span class="sym">]</span>
	  # dev <span class="sym">=</span> ai <span class="sym">-</span> mean
	  # dev2 <span class="sym">=</span> dev<span class="sym">*</span>dev
	  # dev3 <span class="sym">=</span> dev2<span class="sym">*</span>dev
	  <span class="sym">=</span> loop a mean <span class="sym">(</span>adev <span class="sym">+</span> abs dev<span class="sym">)(</span>var <span class="sym">+</span> dev2<span class="sym">)(</span>skew <span class="sym">+</span> dev3<span class="sym">)(</span>kurt <span class="sym">+</span> dev3<span class="sym">*</span>dev<span class="sym">)(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>

find_medians <span class="sym">:: *</span>{#Real} <span class="sym">-&gt;</span> .{#Real}
find_medians a0
    # <span class="sym">(</span>n_elements<span class="sym">,</span>a<span class="sym">) =</span> usize a0
    # k <span class="sym">= (</span>n_elements<span class="sym">&gt;&gt;</span><span class="num">1</span><span class="sym">) + (</span>n_elements bitand <span class="num">1</span><span class="sym">)</span>
    <span class="sym">=</span> quick_sort1 <span class="num">0</span> <span class="sym">(</span>n_elements<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> k a
    <span class="kwa">where</span>
        quick_sort0 <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{#Real} <span class="sym">-&gt; *</span>{#Real}
        quick_sort0 b e k a
            <span class="sym">|</span> k<span class="sym">&gt;=</span>b <span class="sym">&amp;&amp;</span> k<span class="sym">&lt;=</span>e<span class="sym">+</span><span class="num">1</span>
                <span class="sym">=</span> quick_sort1 b e k a
                <span class="sym">=</span> a

        quick_sort1 b e k a
            <span class="sym">|</span> b<span class="sym">&gt;=</span>e
                <span class="sym">=</span> a
        quick_sort1 b e k a<span class="sym">=:</span>{<span class="sym">[</span>b<span class="sym">]=</span>ab}
            # m<span class="sym">=(</span>b<span class="sym">+</span>e<span class="sym">)&gt;&gt;</span><span class="num">1</span>
            # <span class="sym">(</span>am<span class="sym">,</span>a<span class="sym">) =</span> a<span class="sym">![</span>m<span class="sym">]</span>
            <span class="sym">=</span> find_large am <span class="sym">(</span>b<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> e e b k {a <span class="sym">&amp; [</span>m<span class="sym">]=</span>ab}
        <span class="kwa">where</span>
            find_large am l e r b k a
                <span class="sym">|</span> l<span class="sym">&lt;=</span>e <span class="sym">&amp;&amp;</span> a.<span class="sym">[</span>l<span class="sym">]&lt;=</span>am
                    <span class="sym">=</span> find_large am <span class="sym">(</span>l<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> e r b k a
                    <span class="sym">=</span> find_small_or_equal am r b l e k a

            find_small_or_equal am r b l e k a
                <span class="sym">|</span> r<span class="sym">&gt;</span>b <span class="sym">&amp;&amp;</span> a.<span class="sym">[</span>r<span class="sym">]&gt;</span>am
                    <span class="sym">=</span> find_small_or_equal am <span class="sym">(</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> b l e k a
                <span class="sym">|</span> l<span class="sym">&lt;</span>r
                    # <span class="sym">(</span>al<span class="sym">,</span>a<span class="sym">)=</span>a<span class="sym">![</span>l<span class="sym">]</span>
                      <span class="sym">(</span>ar<span class="sym">,</span>a<span class="sym">)=</span>a<span class="sym">![</span>r<span class="sym">]</span>
                    <span class="sym">=</span> find_large am <span class="sym">(</span>l<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> e <span class="sym">(</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> b k {a <span class="sym">&amp; [</span>l<span class="sym">]=</span>ar<span class="sym">,[</span>r<span class="sym">]=</span>al}
           	<span class="sym">|</span> b<span class="sym">==</span>r
                    <span class="sym">=</span> quick_sort2 <span class="sym">(</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>r<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> b e k {a <span class="sym">&amp; [</span>b<span class="sym">]=</span>am}
                    # <span class="sym">(</span>ar<span class="sym">,</span>a<span class="sym">)=</span>a<span class="sym">![</span>r<span class="sym">]</span>
                    <span class="sym">=</span> quick_sort2 <span class="sym">(</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>r<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> b e k {a <span class="sym">&amp; [</span>r<span class="sym">]=</span>am<span class="sym">,[</span>b<span class="sym">]=</span>ar}

            quick_sort2 l r b e k a
                <span class="sym">|</span> l<span class="sym">-</span>b<span class="sym">&gt;=</span>e<span class="sym">-</span>r
                    <span class="sym">=</span> quick_sort0 b l k <span class="sym">(</span>quick_sort0 r e k a<span class="sym">)</span>
                    <span class="sym">=</span> quick_sort0 r e k <span class="sym">(</span>quick_sort0 b l k a<span class="sym">)</span>

   resultstring n mean median ad v s k <span class="sym">=</span>
      <span class="str">&quot;n:                  &quot;</span> <span class="sym">+++ (</span>toString n<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span> <span class="sym">+++</span>
      <span class="str">&quot;median:             &quot;</span> <span class="sym">+++ (</span>toStringWith <span class="num">6</span> median<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span> <span class="sym">+++</span>
      <span class="str">&quot;mean:               &quot;</span> <span class="sym">+++ (</span>toStringWith <span class="num">6</span> mean<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span> <span class="sym">+++</span>
      <span class="str">&quot;average_deviation:  &quot;</span> <span class="sym">+++ (</span>toStringWith <span class="num">6</span> adev<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span> <span class="sym">+++</span>
      <span class="str">&quot;standard_deviation: &quot;</span> <span class="sym">+++ (</span>toStringWith <span class="num">6</span> sdev<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span> <span class="sym">+++</span>
      <span class="str">&quot;variance:           &quot;</span> <span class="sym">+++ (</span>toStringWith <span class="num">6</span> var<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span> <span class="sym">+++</span>
      <span class="str">&quot;skew:               &quot;</span> <span class="sym">+++ (</span>toStringWith <span class="num">6</span> skew<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span> <span class="sym">+++</span>
      <span class="str">&quot;kurtosis:           &quot;</span> <span class="sym">+++ (</span>toStringWith <span class="num">6</span> kurt<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span>

      <span class="kwa">where</span>
      adev <span class="sym">=</span> ad <span class="sym">/</span> n
      var <span class="sym">=</span> v <span class="sym">/ (</span>n<span class="sym">-</span><span class="num">1.0</span><span class="sym">)</span>
      sdev <span class="sym">=</span> sqrt var
      skew <span class="sym">=</span> s <span class="sym">/ (</span>n<span class="sym">*</span>var<span class="sym">*</span>sdev<span class="sym">)</span>
      kurt <span class="sym">=</span> k <span class="sym">/ (</span>n<span class="sym">*</span>var<span class="sym">*</span>var<span class="sym">)-</span><span class="num">3.0</span>

