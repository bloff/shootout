#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

#
# hash <span class="sym">-</span> benchmark
# create i<span class="sym">=</span><span class="num">1</span><span class="sym">-&gt;</span>n symbols with value i
# count all exsiting symbols in <span class="kwa">reverse</span>
#
# newLISP does <span class="kwa">not</span> have hashtables but can
# simlate hashes with symbols
#
# Contributed by Lutz Mueller

<span class="sym">(</span>context <span class="str">'HASH) ; create hash container</span>
<span class="str">(context '</span>MAIN<span class="sym">)</span> <span class="slc">; go back to MAIN context</span>

<span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))</span>
<span class="str"></span>
<span class="str">(for (i 1 n)</span>
<span class="str">	(set (symbol (format &quot;_%x&quot; (integer i)) HASH) i) )</span>
<span class="str"></span>
<span class="str">(set '</span>cnt <span class="num">0</span><span class="sym">)</span>
<span class="sym">(</span>for <span class="sym">(</span>i n <span class="num">1</span><span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>symbol <span class="sym">(</span>format <span class="str">&quot;_%d&quot;</span> <span class="sym">(</span>integer i<span class="sym">))</span> HASH nil<span class="sym">) (</span>inc <span class="str">'cnt)))</span>
<span class="str"></span>
<span class="str">(println cnt)</span>
<span class="str"></span>
<span class="str">(exit)</span>
<span class="str"></span>
