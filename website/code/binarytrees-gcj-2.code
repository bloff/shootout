<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Jarkko Miettinen
*/</span>

<span class="kwa">public class</span> binarytrees <span class="sym">{

</span>	<span class="kwa">private final static</span> <span class="kwb">int</span> minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;

</span>	<span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>		<span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>		<span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>		<span class="kwb">int</span> maxDepth <span class="sym">= (</span>minDepth <span class="sym">+</span> <span class="num">2</span> <span class="sym">&gt;</span> n<span class="sym">)</span> ? minDepth <span class="sym">+</span> <span class="num">2</span> <span class="sym">:</span> n<span class="sym">;
</span>		<span class="kwb">int</span> stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;

</span>		<span class="kwb">int</span> check <span class="sym">= (</span><span class="kwc">TreeNode</span><span class="sym">.</span>bottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>stretchDepth<span class="sym">)).</span>itemCheck<span class="sym">();
</span>		<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">+</span>stretchDepth<span class="sym">+</span><span class="str">&quot;</span><span class="esc">\t </span> <span class="str">check: &quot;</span> <span class="sym">+</span> check<span class="sym">);

</span>		<span class="kwc">TreeNode</span> longLivedTree <span class="sym">=</span> <span class="kwc">TreeNode</span><span class="sym">.</span>bottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">);

</span>		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> depth<span class="sym">=</span>minDepth<span class="sym">;</span> depth<span class="sym">&lt;=</span>maxDepth<span class="sym">;</span> depth<span class="sym">+=</span><span class="num">2</span><span class="sym">){
</span>			<span class="kwb">int</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);
</span>			check <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>			<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>iterations<span class="sym">;</span> i<span class="sym">++){
</span>				check <span class="sym">+= (</span><span class="kwc">TreeNode</span><span class="sym">.</span>bottomUpTree<span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">)).</span>itemCheck<span class="sym">();
</span>				check <span class="sym">+= (</span><span class="kwc">TreeNode</span><span class="sym">.</span>bottomUpTree<span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">)).</span>itemCheck<span class="sym">();
			}
</span>			<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">((</span>iterations<span class="sym">*</span><span class="num">2</span><span class="sym">) +</span> <span class="str">&quot;</span><span class="esc">\t </span> <span class="str">trees of depth &quot;</span> <span class="sym">+</span> depth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t </span> <span class="str">check: &quot;</span> <span class="sym">+</span> check<span class="sym">);
		}
</span>		<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;long lived tree of depth &quot;</span> <span class="sym">+</span> maxDepth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t </span> <span class="str">check: &quot;</span><span class="sym">+</span> longLivedTree<span class="sym">.</span>itemCheck<span class="sym">());
	}


</span>	<span class="kwa">private static class</span> <span class="kwc">TreeNode
</span>	<span class="sym">{
</span>		<span class="kwa">private</span> <span class="kwc">TreeNode</span> left<span class="sym">,</span> right<span class="sym">;
</span>		<span class="kwa">private</span> <span class="kwb">int</span> item<span class="sym">;

</span>		<span class="kwc">TreeNode</span><span class="sym">(</span><span class="kwb">int</span> item<span class="sym">){
</span>			<span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item<span class="sym">;
		}

</span>		<span class="kwa">private static</span> <span class="kwc">TreeNode</span> bottomUpTree<span class="sym">(</span><span class="kwb">int</span> item<span class="sym">,</span> <span class="kwb">int</span> depth<span class="sym">){
</span>			<span class="kwa">if</span> <span class="sym">(</span>depth<span class="sym">&gt;</span><span class="num">0</span><span class="sym">){
</span>				<span class="kwa">return new</span> <span class="kwc">TreeNode</span><span class="sym">(
</span>						bottomUpTree<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="num">-1</span><span class="sym">,</span> depth<span class="num">-1</span><span class="sym">)
						,</span> bottomUpTree<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span> depth<span class="num">-1</span><span class="sym">)
						,</span> item
				<span class="sym">);
			}
</span>			<span class="kwa">else</span> <span class="sym">{
</span>				<span class="kwa">return new</span> <span class="kwc">TreeNode</span><span class="sym">(</span>item<span class="sym">);
			}
		}

</span>		<span class="kwc">TreeNode</span><span class="sym">(</span><span class="kwc">TreeNode</span> left<span class="sym">,</span> <span class="kwc">TreeNode</span> right<span class="sym">,</span> <span class="kwb">int</span> item<span class="sym">){
</span>			<span class="kwa">this</span><span class="sym">.</span>left <span class="sym">=</span> left<span class="sym">;
</span>			<span class="kwa">this</span><span class="sym">.</span>right <span class="sym">=</span> right<span class="sym">;
</span>			<span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item<span class="sym">;
		}

</span>		<span class="kwa">private</span> <span class="kwb">int</span> itemCheck<span class="sym">(){
</span>			<span class="slc">// if necessary deallocate here
</span>			<span class="kwa">if</span> <span class="sym">(</span>left<span class="sym">==</span>null<span class="sym">)</span> <span class="kwa">return</span> item<span class="sym">;
</span>			<span class="kwa">else return</span> item <span class="sym">+</span> left<span class="sym">.</span>itemCheck<span class="sym">() -</span> right<span class="sym">.</span>itemCheck<span class="sym">();
		}
	}
}</span>
