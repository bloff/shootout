<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy */</span>

<span class="kwa">const</span> PI <span class="sym">=</span> <span class="num">3.141592653589793</span><span class="sym">;
</span><span class="kwa">const</span> SOLAR_MASS <span class="sym">=</span> <span class="num">4</span> <span class="sym">*</span> PI <span class="sym">*</span> PI<span class="sym">;
</span><span class="kwa">const</span> DAYS_PER_YEAR <span class="sym">=</span> <span class="num">365.24</span><span class="sym">;

</span><span class="kwa">function</span> Body<span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">,</span>vx<span class="sym">,</span>vy<span class="sym">,</span>vz<span class="sym">,</span>mass<span class="sym">){
</span>   <span class="kwa">this</span>.x <span class="sym">=</span> x<span class="sym">;
</span>   <span class="kwa">this</span>.y <span class="sym">=</span> y<span class="sym">;
</span>   <span class="kwa">this</span>.z <span class="sym">=</span> z<span class="sym">;
</span>   <span class="kwa">this</span>.vx <span class="sym">=</span> vx<span class="sym">;
</span>   <span class="kwa">this</span>.vy <span class="sym">=</span> vy<span class="sym">;
</span>   <span class="kwa">this</span>.vz <span class="sym">=</span> vz<span class="sym">;
</span>   <span class="kwa">this</span>.mass <span class="sym">=</span> mass<span class="sym">;
}

</span>Body.prototype.offsetMomentum <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>px<span class="sym">,</span>py<span class="sym">,</span>pz<span class="sym">) {
</span>   <span class="kwa">this</span>.vx <span class="sym">= -</span>px <span class="sym">/</span> SOLAR_MASS<span class="sym">;
</span>   <span class="kwa">this</span>.vy <span class="sym">= -</span>py <span class="sym">/</span> SOLAR_MASS<span class="sym">;
</span>   <span class="kwa">this</span>.vz <span class="sym">= -</span>pz <span class="sym">/</span> SOLAR_MASS<span class="sym">;
</span>   <span class="kwa">return this</span><span class="sym">;
}

</span><span class="kwa">function</span> Jupiter<span class="sym">(){
</span>   <span class="kwa">return new</span> Body<span class="sym">(
</span>      <span class="num">4.84143144246472090e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
      -</span><span class="num">1.16032004402742839e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
      -</span><span class="num">1.03622044471123109e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
</span>      <span class="num">1.66007664274403694e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
</span>      <span class="num">7.69901118419740425e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
      -</span><span class="num">6.90460016972063023e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
</span>      <span class="num">9.54791938424326609e</span><span class="sym">-</span><span class="num">04</span> <span class="sym">*</span> SOLAR_MASS
   <span class="sym">);
}

</span><span class="kwa">function</span> Saturn<span class="sym">(){
</span>   <span class="kwa">return new</span> Body<span class="sym">(
</span>      <span class="num">8.34336671824457987e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
</span>      <span class="num">4.12479856412430479e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
      -</span><span class="num">4.03523417114321381e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
      -</span><span class="num">2.76742510726862411e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
</span>      <span class="num">4.99852801234917238e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
</span>      <span class="num">2.30417297573763929e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
</span>      <span class="num">2.85885980666130812e</span><span class="sym">-</span><span class="num">04</span> <span class="sym">*</span> SOLAR_MASS
   <span class="sym">);
}

</span><span class="kwa">function</span> Uranus<span class="sym">(){
</span>   <span class="kwa">return new</span> Body<span class="sym">(
</span>      <span class="num">1.28943695621391310e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
      -</span><span class="num">1.51111514016986312e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
      -</span><span class="num">2.23307578892655734e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
</span>      <span class="num">2.96460137564761618e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
</span>      <span class="num">2.37847173959480950e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
      -</span><span class="num">2.96589568540237556e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
</span>      <span class="num">4.36624404335156298e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> SOLAR_MASS
   <span class="sym">);
}

</span><span class="kwa">function</span> Neptune<span class="sym">(){
</span>   <span class="kwa">return new</span> Body<span class="sym">(
</span>      <span class="num">1.53796971148509165e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
      -</span><span class="num">2.59193146099879641e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
</span>      <span class="num">1.79258772950371181e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
</span>      <span class="num">2.68067772490389322e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
</span>      <span class="num">1.62824170038242295e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
      -</span><span class="num">9.51592254519715870e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> DAYS_PER_YEAR<span class="sym">,
</span>      <span class="num">5.15138902046611451e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> SOLAR_MASS
   <span class="sym">);
}

</span><span class="kwa">function</span> Sun<span class="sym">(){
</span>   <span class="kwa">return new</span> Body<span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> SOLAR_MASS<span class="sym">);
}


</span><span class="kwa">function</span> NBodySystem<span class="sym">(</span>bodies<span class="sym">){
</span>   <span class="kwa">this</span>.bodies <span class="sym">=</span> bodies<span class="sym">;
</span>   <span class="kwa">var</span> px <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>   <span class="kwa">var</span> py <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>   <span class="kwa">var</span> pz <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>   <span class="kwa">var</span> size <span class="sym">=</span> <span class="kwa">this</span>.bodies.length<span class="sym">;
</span>   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>size<span class="sym">;</span> i<span class="sym">++){
</span>      <span class="kwa">var</span> b <span class="sym">=</span> <span class="kwa">this</span>.bodies<span class="sym">[</span>i<span class="sym">];
</span>      <span class="kwa">var</span> m <span class="sym">=</span> b.mass<span class="sym">;
</span>      px <span class="sym">+=</span> b.vx <span class="sym">*</span> m<span class="sym">;
</span>      py <span class="sym">+=</span> b.vy <span class="sym">*</span> m<span class="sym">;
</span>      pz <span class="sym">+=</span> b.vz <span class="sym">*</span> m<span class="sym">;
   }
</span>   <span class="kwa">this</span>.bodies<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>.offsetMomentum<span class="sym">(</span>px<span class="sym">,</span>py<span class="sym">,</span>pz<span class="sym">);
}

</span>NBodySystem.prototype.advance <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>dt<span class="sym">){
</span>   <span class="kwa">var</span> dx<span class="sym">,</span> dy<span class="sym">,</span> dz<span class="sym">,</span> distance<span class="sym">,</span> mag<span class="sym">;
</span>   <span class="kwa">var</span> size <span class="sym">=</span> <span class="kwa">this</span>.bodies.length<span class="sym">;

</span>   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>size<span class="sym">;</span> i<span class="sym">++) {
</span>      <span class="kwa">var</span> bodyi <span class="sym">=</span> <span class="kwa">this</span>.bodies<span class="sym">[</span>i<span class="sym">];
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> j<span class="sym">=</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">;</span> j<span class="sym">&lt;</span>size<span class="sym">;</span> j<span class="sym">++) {
</span>         <span class="kwa">var</span> bodyj <span class="sym">=</span> <span class="kwa">this</span>.bodies<span class="sym">[</span>j<span class="sym">];
</span>         dx <span class="sym">=</span> bodyi.x <span class="sym">-</span> bodyj.x<span class="sym">;
</span>         dy <span class="sym">=</span> bodyi.y <span class="sym">-</span> bodyj.y<span class="sym">;
</span>         dz <span class="sym">=</span> bodyi.z <span class="sym">-</span> bodyj.z<span class="sym">;

</span>         distance <span class="sym">=</span> Math.sqrt<span class="sym">(</span>dx<span class="sym">*</span>dx <span class="sym">+</span> dy<span class="sym">*</span>dy <span class="sym">+</span> dz<span class="sym">*</span>dz<span class="sym">);
</span>         mag <span class="sym">=</span> dt <span class="sym">/ (</span>distance <span class="sym">*</span> distance <span class="sym">*</span> distance<span class="sym">);

</span>         bodyi.vx <span class="sym">-=</span> dx <span class="sym">*</span> bodyj.mass <span class="sym">*</span> mag<span class="sym">;
</span>         bodyi.vy <span class="sym">-=</span> dy <span class="sym">*</span> bodyj.mass <span class="sym">*</span> mag<span class="sym">;
</span>         bodyi.vz <span class="sym">-=</span> dz <span class="sym">*</span> bodyj.mass <span class="sym">*</span> mag<span class="sym">;

</span>         bodyj.vx <span class="sym">+=</span> dx <span class="sym">*</span> bodyi.mass <span class="sym">*</span> mag<span class="sym">;
</span>         bodyj.vy <span class="sym">+=</span> dy <span class="sym">*</span> bodyi.mass <span class="sym">*</span> mag<span class="sym">;
</span>         bodyj.vz <span class="sym">+=</span> dz <span class="sym">*</span> bodyi.mass <span class="sym">*</span> mag<span class="sym">;
      }
   }

</span>   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>size<span class="sym">;</span> i<span class="sym">++) {
</span>      <span class="kwa">var</span> body <span class="sym">=</span> <span class="kwa">this</span>.bodies<span class="sym">[</span>i<span class="sym">];
</span>      body.x <span class="sym">+=</span> dt <span class="sym">*</span> body.vx<span class="sym">;
</span>      body.y <span class="sym">+=</span> dt <span class="sym">*</span> body.vy<span class="sym">;
</span>      body.z <span class="sym">+=</span> dt <span class="sym">*</span> body.vz<span class="sym">;
   }
}

</span>NBodySystem.prototype.energy <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(){
</span>   <span class="kwa">var</span> dx<span class="sym">,</span> dy<span class="sym">,</span> dz<span class="sym">,</span> distance<span class="sym">;
</span>   <span class="kwa">var</span> e <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>   <span class="kwa">var</span> size <span class="sym">=</span> <span class="kwa">this</span>.bodies.length<span class="sym">;

</span>   <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>size<span class="sym">;</span> i<span class="sym">++) {
</span>      <span class="kwa">var</span> bodyi <span class="sym">=</span> <span class="kwa">this</span>.bodies<span class="sym">[</span>i<span class="sym">];

</span>      e <span class="sym">+=</span> <span class="num">0.5</span> <span class="sym">*</span> bodyi.mass <span class="sym">*
         (</span> bodyi.vx <span class="sym">*</span> bodyi.vx
         <span class="sym">+</span> bodyi.vy <span class="sym">*</span> bodyi.vy
         <span class="sym">+</span> bodyi.vz <span class="sym">*</span> bodyi.vz <span class="sym">);

</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> j<span class="sym">=</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">;</span> j<span class="sym">&lt;</span>size<span class="sym">;</span> j<span class="sym">++) {
</span>         <span class="kwa">var</span> bodyj <span class="sym">=</span> <span class="kwa">this</span>.bodies<span class="sym">[</span>j<span class="sym">];
</span>         dx <span class="sym">=</span> bodyi.x <span class="sym">-</span> bodyj.x<span class="sym">;
</span>         dy <span class="sym">=</span> bodyi.y <span class="sym">-</span> bodyj.y<span class="sym">;
</span>         dz <span class="sym">=</span> bodyi.z <span class="sym">-</span> bodyj.z<span class="sym">;

</span>         distance <span class="sym">=</span> Math.sqrt<span class="sym">(</span>dx<span class="sym">*</span>dx <span class="sym">+</span> dy<span class="sym">*</span>dy <span class="sym">+</span> dz<span class="sym">*</span>dz<span class="sym">);
</span>         e <span class="sym">-= (</span>bodyi.mass <span class="sym">*</span> bodyj.mass<span class="sym">) /</span> distance<span class="sym">;
      }
   }
</span>   <span class="kwa">return</span> e<span class="sym">;
}


</span><span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="kwa">var</span> bodies <span class="sym">=</span> <span class="kwa">new</span> NBodySystem<span class="sym">(</span> Array<span class="sym">(
</span>   Sun<span class="sym">(),</span>Jupiter<span class="sym">(),</span>Saturn<span class="sym">(),</span>Uranus<span class="sym">(),</span>Neptune<span class="sym">()
));

</span>print<span class="sym">(</span>bodies.energy<span class="sym">()</span>.toFixed<span class="sym">(</span><span class="num">9</span><span class="sym">));
</span><span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){</span> bodies.advance<span class="sym">(</span><span class="num">0.01</span><span class="sym">); }
</span>print<span class="sym">(</span>bodies.energy<span class="sym">()</span>.toFixed<span class="sym">(</span><span class="num">9</span><span class="sym">));</span>
