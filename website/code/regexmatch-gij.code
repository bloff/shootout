<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Paul Lofte
*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">BufferedReader</span><span class="sym">;
</span><span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">IOException</span><span class="sym">;
</span><span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">InputStreamReader</span><span class="sym">;
</span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>regex<span class="sym">.</span><span class="kwc">Matcher</span><span class="sym">;
</span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>regex<span class="sym">.</span><span class="kwc">Pattern</span><span class="sym">;

</span><span class="kwa">public class</span> regexmatch
   <span class="sym">{
</span>   <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {
</span>      <span class="kwa">try</span> <span class="sym">{
</span>         <span class="kwc">String</span> regex <span class="sym">=</span> <span class="str">&quot;(^|^</span><span class="esc">\\</span><span class="str">D*[^</span><span class="esc">\\</span><span class="str">(</span><span class="esc">\\</span><span class="str">d])&quot;</span>    <span class="slc">// must be preceeded by non-digit
</span>            <span class="sym">+</span> <span class="str">&quot;((</span><span class="esc">\\</span><span class="str">(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">))|(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d))&quot;</span> <span class="slc">// match 2: Area Code inner match 3: area with perens,
</span>                                                <span class="slc">//inner match 4: without perens
</span>            <span class="sym">+</span> <span class="str">&quot;[ ]&quot;</span>                             <span class="slc">// area code followed by one space
</span>            <span class="sym">+</span> <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>                     <span class="slc">//match 5: prefix of 3 digits
</span>            <span class="sym">+</span> <span class="str">&quot;[ -]&quot;</span>                            <span class="slc">// prefix followed by space or dash
</span>            <span class="sym">+</span> <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>                  <span class="slc">// match 6: last 4 digits
</span>            <span class="sym">+</span> <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">D*$)&quot;</span><span class="sym">;</span>                        <span class="slc">// followed by non numeric chars
</span>
         <span class="kwc">Pattern</span> phonePattern <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span>compile<span class="sym">(</span>regex<span class="sym">);
</span>         <span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span>         <span class="kwc">String</span> line<span class="sym">;
</span>         <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> in<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">) {
</span>            <span class="kwc">Matcher</span> match <span class="sym">=</span> phonePattern<span class="sym">.</span>matcher<span class="sym">(</span>line<span class="sym">);
</span>            <span class="kwa">if</span> <span class="sym">(</span>match<span class="sym">.</span>matches<span class="sym">()) {
</span>               count<span class="sym">++;
</span>               <span class="kwa">if</span> <span class="sym">(</span>match<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">) !=</span> null<span class="sym">) {
</span>                     <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>count <span class="sym">+</span> <span class="str">&quot;: &quot;</span>
                                       <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">) +</span> <span class="str">&quot; &quot;</span>
                                       <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">5</span><span class="sym">) +</span> <span class="str">&quot;-&quot;</span>
                                       <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">6</span><span class="sym">));
               }</span> <span class="kwa">else</span> <span class="sym">{
</span>                     <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>count <span class="sym">+</span> <span class="str">&quot;: (&quot;</span>
                                       <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">4</span><span class="sym">) +</span> <span class="str">&quot;) &quot;</span>
                                       <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">5</span><span class="sym">) +</span> <span class="str">&quot;-&quot;</span>
                                       <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">6</span><span class="sym">));
               }
            }

         }
</span>         in<span class="sym">.</span>close<span class="sym">();

      }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span>         <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
      }
</span>      <span class="kwc">System</span><span class="sym">.</span>exit<span class="sym">(</span><span class="num">0</span><span class="sym">);
   }
}</span>
