<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: echo-smlnj.code,v 1.8 2006-09-22 02:38:38 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * from Daniel Wang</span>
<span class="com"> *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
 <span class="kwa">val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span>
 <span class="kwa">struct</span>
   <span class="kwa">exception</span> Error <span class="kwa">of</span> <span class="kwb">string</span>

   <span class="kwa">val</span> data <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span>

   <span class="kwa">fun</span> mkSocks <span class="sym">() =</span> <span class="kwa">let</span>
     <span class="kwa">val</span> server <span class="sym">=</span> INetSock.TCP.socket<span class="sym">()</span>
     <span class="kwa">val</span> client <span class="sym">=</span> INetSock.TCP.socket<span class="sym">()</span>
     <span class="kwa">val</span> _ <span class="sym">=</span> Socket.bind<span class="sym">(</span>server<span class="sym">,</span>INetSock.any <span class="num">0</span><span class="sym">)</span>
     <span class="kwa">val</span> saddr <span class="sym">=</span> INetSock.fromAddr<span class="sym">(</span>Socket.Ctl.getSockName server<span class="sym">)</span>
     <span class="kwa">val</span> _ <span class="sym">=</span> Socket.listen<span class="sym">(</span>server<span class="sym">,</span><span class="num">2</span><span class="sym">)</span>
     <span class="kwa">val</span> _ <span class="sym">=</span> Socket.connect<span class="sym">(</span>client<span class="sym">,</span>INetSock.toAddr saddr<span class="sym">)</span>
     <span class="kwa">val</span> _ <span class="sym">=</span> INetSock.TCP.setNODELAY<span class="sym">(</span>server<span class="sym">,</span><span class="kwa">true</span><span class="sym">)</span>
     <span class="kwa">val</span> _ <span class="sym">=</span> INetSock.TCP.setNODELAY<span class="sym">(</span>client<span class="sym">,</span><span class="kwa">true</span><span class="sym">)</span>
   <span class="kwa">in</span> <span class="sym">{</span>client<span class="sym">=</span>client<span class="sym">,</span>server<span class="sym">=</span>server<span class="sym">}</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> readString <span class="sym">(</span>s<span class="sym">,</span>n<span class="sym">) =</span> <span class="kwa">let</span>
     <span class="kwa">fun</span> loop<span class="sym">(</span><span class="num">0</span><span class="sym">) = []</span>
       <span class="sym">|</span> loop<span class="sym">(</span>n<span class="sym">) =</span> <span class="kwa">let</span>
	   <span class="kwa">val</span> data <span class="sym">=</span> Byte.unpackStringVec <span class="sym">(</span>Word8VectorSlice.full <span class="sym">(</span>Socket.recvVec<span class="sym">(</span>s<span class="sym">,</span>n<span class="sym">)))</span>
	   <span class="kwa">val</span> len <span class="sym">=</span> <span class="kwa">String</span>.size data
	 <span class="kwa">in if</span> len <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">[]</span>
	    <span class="kwa">else</span> <span class="sym">(</span>data<span class="sym">::(</span>loop<span class="sym">(</span>n <span class="sym">-</span> len<span class="sym">)))</span>
	 <span class="kwa">end</span>
   <span class="kwa">in String</span>.concat <span class="sym">(</span>loop n<span class="sym">)</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> writeString <span class="sym">(</span>out<span class="sym">,</span>str<span class="sym">) =</span>
     Socket.sendVec<span class="sym">(</span>out<span class="sym">,</span> Word8VectorSlice.full<span class="sym">(</span> Byte.stringToBytes str<span class="sym">))</span>
<span class="com">(*     Socket.sendVec(out,{buf=Byte.stringToBytes str,i=0,sz=NONE}) *)</span>

   <span class="kwa">fun</span> closeSock s <span class="sym">=</span>
     <span class="sym">(</span>Socket.shutdown<span class="sym">(</span>s<span class="sym">,</span>Socket.NO_RECVS_OR_SENDS<span class="sym">);</span>
      Socket.close s<span class="sym">)</span>

  <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">,</span>args<span class="sym">) =</span> <span class="kwa">let</span>
    <span class="kwa">val</span> num <span class="sym">=</span>
      <span class="kwa">case</span> args <span class="kwa">of</span>
	nil <span class="sym">=&gt;</span> <span class="num">1</span>
      <span class="sym">|</span> n<span class="sym">::</span>_ <span class="sym">=&gt;</span> valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString n<span class="sym">)</span>
    <span class="kwa">val</span> <span class="sym">{</span>client<span class="sym">=</span>client_sock<span class="sym">,</span>server<span class="sym">=</span>server_sock<span class="sym">} =</span> mkSocks<span class="sym">()</span>
    <span class="kwa">fun</span> server <span class="sym">() =</span> <span class="kwa">let</span>
      <span class="kwa">val</span> <span class="sym">(</span>sock<span class="sym">,</span>_<span class="sym">) =</span> Socket.accept<span class="sym">(</span>server_sock<span class="sym">)</span>
      <span class="kwa">fun</span> s b <span class="sym">=</span>
	<span class="kwa">case</span> readString<span class="sym">(</span>sock<span class="sym">,</span><span class="num">19</span><span class="sym">)</span> <span class="kwa">of</span>
	   <span class="str">&quot;&quot;</span> <span class="sym">=&gt; (</span>Posix.Process.wait <span class="sym">();</span>
		  <span class="kwa">TextIO</span>.output<span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,</span>
				concat <span class="sym">[</span><span class="str">&quot;server processed &quot;</span><span class="sym">,</span>
					<span class="kwa">Int</span>.toString b<span class="sym">,</span>
					<span class="str">&quot; bytes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">]);</span>
		  <span class="kwa">TextIO</span>.flushOut<span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">))</span>
	 <span class="sym">|</span> i <span class="sym">=&gt;(</span>writeString<span class="sym">(</span>sock<span class="sym">,</span>i<span class="sym">);</span>
		s <span class="sym">(</span>b <span class="sym">+</span> <span class="num">19</span><span class="sym">))</span>
    <span class="kwa">in</span> s <span class="num">0</span>
    <span class="kwa">end</span>
    <span class="kwa">fun</span> client <span class="sym">() =</span> <span class="kwa">let</span>
      <span class="kwa">fun</span> c <span class="num">0</span> <span class="sym">=</span> closeSock<span class="sym">(</span>client_sock<span class="sym">)</span>
	<span class="sym">|</span> c n <span class="sym">=</span> <span class="kwa">let</span>
	    <span class="kwa">val</span> _ <span class="sym">=</span> writeString<span class="sym">(</span>client_sock<span class="sym">,</span>data<span class="sym">);</span>
	    <span class="kwa">val</span> reply <span class="sym">=</span> readString<span class="sym">(</span>client_sock<span class="sym">,</span><span class="num">19</span><span class="sym">)</span>
	  <span class="kwa">in if</span> reply <span class="sym">=</span> data <span class="kwa">then</span> c<span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
	     <span class="kwa">else raise</span> Error <span class="str">&quot;Didn't receive the same data&quot;</span>
	  <span class="kwa">end</span>
    <span class="kwa">in</span> c num
    <span class="kwa">end</span>
  <span class="kwa">in</span>
    <span class="kwa">case</span> Posix.Process.fork <span class="sym">()</span> <span class="kwa">of</span>
      SOME pid <span class="sym">=&gt;</span> server <span class="sym">()</span>
    <span class="sym">|</span> NONE <span class="sym">=&gt;</span> client <span class="sym">();</span>
     OS.Process.success
  <span class="kwa">end</span>
<span class="kwa">end</span>
<span class="com">(* Warning use this at the interactive toplevel has unexpected effects. *)</span>
<span class="kwa">val</span> _ <span class="sym">=</span> SMLofNJ.exportFn<span class="sym">(</span><span class="str">&quot;echo&quot;</span><span class="sym">,</span>Test.main<span class="sym">);</span>
