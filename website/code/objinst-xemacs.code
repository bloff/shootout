<span class="slc">;;; -*- mode: emacs-lisp -*-
</span><span class="slc">;;; $Id: objinst-xemacs.code,v 1.5 2005-03-31 10:40:42 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="sym">(</span>require <span class="str">'eieio)

(defun print-bool (b)
  (if b (princ &quot;true</span><span class="esc">\n</span><span class="str">&quot;) (princ &quot;false</span><span class="esc">\n</span><span class="str">&quot;)))

(defclass toggle ()
  ((state :initarg state
	  :initform t)))

(defmethod toggle-value ((this toggle))
  (oref this state))

(defmethod activate ((this toggle))
  (oset this state (not (oref this state)))
  this)

(defclass nth-toggle (toggle)
    ((count-max :initarg :max-counter
		:initform 1)
     (counter :initform 0)))

(defmethod activate ((this nth-toggle))
  (oset this counter (+ 1 (oref this counter)))
  (cond ((&gt;= (oref this counter)
	     (oref this count-max))
	 (oset this state (not (oref this state)))
	 (oset this counter 0)))
  this)

(defun main ()
  (let* ((arg (car command-line-args-left))
	 (n (if arg (string-to-number arg) 1)))
    (let ((tog (toggle &quot;foo&quot;)))
      (dotimes (i 5)
	(print-bool (toggle-value (activate tog)))))
    (dotimes (i n)
      (toggle &quot;foo&quot;))

    (princ &quot;</span><span class="esc">\n</span><span class="str">&quot;)

    (let ((ntog (nth-toggle &quot;bar&quot; :max-counter 3)))
      (dotimes (i 8)
	(print-bool (toggle-value (activate ntog)))))
    (dotimes (i n)
      (nth-toggle &quot;bar&quot; :max-counter 3))))
</span>
