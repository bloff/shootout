<span class="slc">;;; -*- mode: emacs-lisp -*-</span>
<span class="slc">;;; $Id: objinst-xemacs.code,v 1.8 2006-09-20 05:52:14 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>require <span class="str">'eieio)</span>
<span class="str"></span>
<span class="str">(defun print-bool (b)</span>
<span class="str">  (if b (princ &quot;true</span><span class="esc">\n</span><span class="str">&quot;) (princ &quot;false</span><span class="esc">\n</span><span class="str">&quot;)))</span>
<span class="str"></span>
<span class="str">(defclass toggle ()</span>
<span class="str">  ((state :initarg state</span>
<span class="str">	  :initform t)))</span>
<span class="str"></span>
<span class="str">(defmethod toggle-value ((this toggle))</span>
<span class="str">  (oref this state))</span>
<span class="str"></span>
<span class="str">(defmethod activate ((this toggle))</span>
<span class="str">  (oset this state (not (oref this state)))</span>
<span class="str">  this)</span>
<span class="str"></span>
<span class="str">(defclass nth-toggle (toggle)</span>
<span class="str">    ((count-max :initarg :max-counter</span>
<span class="str">		:initform 1)</span>
<span class="str">     (counter :initform 0)))</span>
<span class="str"></span>
<span class="str">(defmethod activate ((this nth-toggle))</span>
<span class="str">  (oset this counter (+ 1 (oref this counter)))</span>
<span class="str">  (cond ((&gt;= (oref this counter)</span>
<span class="str">	     (oref this count-max))</span>
<span class="str">	 (oset this state (not (oref this state)))</span>
<span class="str">	 (oset this counter 0)))</span>
<span class="str">  this)</span>
<span class="str"></span>
<span class="str">(defun main ()</span>
<span class="str">  (let* ((arg (car command-line-args-left))</span>
<span class="str">	 (n (if arg (string-to-number arg) 1)))</span>
<span class="str">    (let ((tog (toggle &quot;foo&quot;)))</span>
<span class="str">      (dotimes (i 5)</span>
<span class="str">	(print-bool (toggle-value (activate tog)))))</span>
<span class="str">    (dotimes (i n)</span>
<span class="str">      (toggle &quot;foo&quot;))</span>
<span class="str"></span>
<span class="str">    (princ &quot;</span><span class="esc">\n</span><span class="str">&quot;)</span>
<span class="str"></span>
<span class="str">    (let ((ntog (nth-toggle &quot;bar&quot; :max-counter 3)))</span>
<span class="str">      (dotimes (i 8)</span>
<span class="str">	(print-bool (toggle-value (activate ntog)))))</span>
<span class="str">    (dotimes (i n)</span>
<span class="str">      (nth-toggle &quot;bar&quot; :max-counter 3))))</span>
<span class="str"></span>
