<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% An attempt at a faster [approx. 50% better] implementation via:</span>
<span class="slc">%</span>
<span class="slc">% * Utilising 4K read buffer [rather than reading line-by-line]</span>
<span class="slc">% * Computing results in a single traversal of the input data [rather</span>
<span class="slc">%   than multiply traversing, or otherwise manipulating, input data]</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit<span class="sym">)</span> Open<span class="sym">(</span>text file<span class="sym">)</span>

<span class="kwa">define</span>

<span class="slc">% ------------- %</span>

  LF <span class="sym">= &amp;\</span><span class="num">012</span> READSIZE <span class="sym">=</span> <span class="num">4096</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">class</span> TextFile_
    <span class="kwa">from</span> Open<span class="sym">.</span>file Open<span class="sym">.</span>text
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">fun</span> <span class="sym">{</span>CountLinesWordsChars FILE BufferSize<span class="sym">}</span>

    Lines <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span> Words <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span> Chars <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span> RemainingBytes

    <span class="slc">% ------------- %</span>

    <span class="kwa">proc</span> <span class="sym">{</span>ReadBuffer RemainingBytes<span class="sym">}</span>
      BytesRead Buffer ToRead
    <span class="kwa">in</span>
      <span class="kwa">if</span> RemainingBytes <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span>
        <span class="kwa">skip</span>
      <span class="kwa">else</span>
        ToRead <span class="sym">=</span> <span class="kwa">if</span> RemainingBytes <span class="sym">&lt;</span> BufferSize <span class="kwa">then</span> RemainingBytes <span class="kwa">else</span> BufferSize <span class="kwa">end</span>
        <span class="sym">{</span>FILE read<span class="sym">(</span>list<span class="sym">:</span>Buffer size<span class="sym">:</span>ToRead len<span class="sym">:</span>BytesRead<span class="sym">)}</span>
        <span class="sym">{</span>ProcessBuffer Buffer<span class="sym">}</span>
        <span class="sym">{</span>ReadBuffer <span class="sym">(</span>RemainingBytes <span class="sym">-</span> BytesRead<span class="sym">)}</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwa">local</span>

      CountingWordStatus <span class="sym">= {</span>NewCell <span class="kwa">false</span><span class="sym">}</span> FirstCall <span class="sym">= {</span>NewCell <span class="kwa">true</span><span class="sym">}</span>

      <span class="slc">% ------------- %</span>

      <span class="kwa">proc</span> <span class="sym">{</span>CheckBuffer_ X Xr CountingWord<span class="sym">}</span>
        Chars <span class="sym">:= &#64;</span>Chars <span class="sym">+</span> <span class="num">1</span>
        <span class="kwa">if</span> X <span class="sym">==</span> LF <span class="kwa">then</span> Lines <span class="sym">:= &#64;</span>Lines <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end</span>

        <span class="kwa">if</span> CountingWord <span class="kwa">then</span>
          <span class="kwa">if</span> <span class="sym">{</span>Char<span class="sym">.</span>isSpace X<span class="sym">}</span> <span class="kwa">then</span>
            <span class="sym">{</span>ProcessBuffer_ Xr <span class="kwa">false</span><span class="sym">}</span>
          <span class="kwa">else</span>
            <span class="sym">{</span>ProcessBuffer_ Xr CountingWord<span class="sym">}</span>
          <span class="kwa">end</span>
        <span class="kwa">else</span>
          <span class="kwa">if</span> <span class="sym">{</span>Not <span class="sym">{</span>Char<span class="sym">.</span>isSpace X<span class="sym">}}</span> <span class="kwa">then</span>
            Words <span class="sym">:= &#64;</span>Words <span class="sym">+</span> <span class="num">1</span>
            <span class="sym">{</span>ProcessBuffer_ Xr <span class="kwa">true</span><span class="sym">}</span>
          <span class="kwa">else</span>
            <span class="sym">{</span>ProcessBuffer_ Xr CountingWord<span class="sym">}</span>
          <span class="kwa">end</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>

      <span class="slc">% ------------- %</span>

      <span class="kwa">proc</span> <span class="sym">{</span>ProcessBuffer_ Buffer CountingWord<span class="sym">}</span>
        <span class="kwa">case</span> Buffer <span class="kwa">of</span> nil <span class="kwa">then</span>
          CountingWordStatus <span class="sym">:=</span> CountingWord
        elseof X<span class="sym">|</span>Xr <span class="kwa">then</span>
          <span class="sym">{</span>CheckBuffer_ X Xr CountingWord<span class="sym">}</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>

      <span class="slc">% ------------- %</span>

    <span class="kwa">in</span>

      <span class="kwa">proc</span> <span class="sym">{</span>ProcessBuffer Buffer<span class="sym">}</span>
        X<span class="sym">|</span>Xr <span class="sym">=</span> Buffer
      <span class="kwa">in</span>
        <span class="kwa">if</span> <span class="sym">&#64;</span>FirstCall <span class="kwa">then</span> CountingWord <span class="kwa">in</span>
          FirstCall <span class="sym">:=</span> <span class="kwa">false</span>
          <span class="kwa">if</span> <span class="sym">(</span>CountingWord <span class="sym">= {</span>Not <span class="sym">{</span>Char<span class="sym">.</span>isSpace X<span class="sym">}})</span> <span class="kwa">then</span> Words <span class="sym">:= &#64;</span>Words <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end</span>
          <span class="sym">{</span>CheckBuffer_ X Xr CountingWord<span class="sym">}</span>
        <span class="kwa">else</span>
          <span class="sym">{</span>CheckBuffer_ X Xr <span class="sym">&#64;</span>CountingWordStatus<span class="sym">}</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>

    <span class="kwa">end</span>

    <span class="slc">% ------------- %</span>

  <span class="kwa">in</span>
    <span class="sym">{</span>FILE seek<span class="sym">(</span>whence<span class="sym">:</span><span class="str">'end'</span> offset<span class="sym">:</span><span class="num">0</span><span class="sym">)}</span>
    <span class="sym">{</span>FILE tell<span class="sym">(</span>offset<span class="sym">:</span>RemainingBytes<span class="sym">)}</span>
    <span class="sym">{</span>FILE seek<span class="sym">(</span>whence<span class="sym">:</span>set offset<span class="sym">:</span><span class="num">0</span><span class="sym">)}</span>
    <span class="sym">{</span>ReadBuffer RemainingBytes<span class="sym">}</span>

    <span class="sym">[&#64;</span>Lines <span class="sym">&#64;</span>Words <span class="sym">&#64;</span>Chars<span class="sym">]</span>
  <span class="kwa">end</span>

<span class="slc">% ------------- %</span>

  LINES WORDS CHARS

<span class="slc">% ------------- %</span>

<span class="kwa">in</span>
  <span class="sym">[</span>LINES WORDS CHARS<span class="sym">] =</span>
    <span class="sym">{</span>CountLinesWordsChars
      <span class="sym">{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdin flags<span class="sym">:[</span>read text<span class="sym">])}</span> READSIZE<span class="sym">}</span>

  <span class="sym">{</span>System<span class="sym">.</span>showInfo LINES <span class="sym">#</span> &quot; &quot; <span class="sym">#</span> WORDS <span class="sym">#</span> &quot; &quot; <span class="sym">#</span> CHARS<span class="sym">}</span>

  <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>

