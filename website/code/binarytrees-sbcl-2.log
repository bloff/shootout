BUILD COMMANDS FOR: binarytrees.sbcl-2.sbcl

Sat Sep 17 19:33:49 PDT 2005

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "binarytrees.sbcl-2.sbcl_compile")'
### START binarytrees.sbcl-2.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "binarytrees.sbcl-2.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END binarytrees.sbcl-2.sbcl_compile


; compiling file "/opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.sbcl" (written 17 SEP 2005 07:33:50 PM):
; compiling (DEFSTRUCT NODE ...)
; compiling (DEFUN BUILD-BTREE ...)
; compiling (DEFUN CHECK-NODE ...)
; compiling (DEFUN LOOP-DEPTHS ...)
; file: /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.sbcl
; in: DEFUN LOOP-DEPTHS
;     (LOOP FOR
;         D
;         FROM
;         MIN-DEPTH
;         BY
;         2
;         UPTO
;         MAX-DEPTH
;         DO
;         (LET ((ITERATIONS (ASH 1 #)))
;           (FORMAT T
;                   "~A~T  trees of depth ~A~T  check: ~A~%"
;                   ITERATIONS
;                   D
;                   (LOOP FOR
;                         I
;                         FROM
;                         1
;                         UPTO
;                         ITERATIONS
;                         SUM
;                         (CHECK-NODE #)
;                         SUM
;                         (CHECK-NODE #)))))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> D #:LOOP-LIMIT-52)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.

;     (+ MAX-DEPTH MIN-DEPTH (- D))
; --> + 
; ==>
;   (+ MAX-DEPTH MIN-DEPTH)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a RATIONAL.
;   The second argument is a REAL, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.

; ==>
;   (+ (+ MAX-DEPTH MIN-DEPTH) (- D))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a RATIONAL.
;   The second argument is a REAL, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.

;     (LOOP FOR
;         D
;         FROM
;         MIN-DEPTH
;         BY
;         2
;         UPTO
;         MAX-DEPTH
;         DO
;         (LET ((ITERATIONS (ASH 1 #)))
;           (FORMAT T
;                   "~A~T  trees of depth ~A~T  check: ~A~%"
;                   ITERATIONS
;                   D
;                   (LOOP FOR
;                         I
;                         FROM
;                         1
;                         UPTO
;                         ITERATIONS
;                         SUM
;                         (CHECK-NODE #)
;                         SUM
;                         (CHECK-NODE #)))))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 
; ==>
;   (+ D 2)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (LOOP FOR
;         I
;         FROM
;         1
;         UPTO
;         ITERATIONS
;         SUM
;         (CHECK-NODE (BUILD-BTREE I D))
;         SUM
;         (CHECK-NODE (BUILD-BTREE (- I) D)))
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY SETQ THE 
; ==>
;   (+ #:LOOP-SUM-54 (CHECK-NODE (BUILD-BTREE I D)))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

; ==>
;   (+ #:LOOP-SUM-54 (CHECK-NODE (BUILD-BTREE (- I) D)))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (LOOP FOR
;         D
;         FROM
;         MIN-DEPTH
;         BY
;         2
;         UPTO
;         MAX-DEPTH
;         DO
;         (LET ((ITERATIONS (ASH 1 #)))
;           (FORMAT T
;                   "~A~T  trees of depth ~A~T  check: ~A~%"
;                   ITERATIONS
;                   D
;                   (LOOP FOR
;                         I
;                         FROM
;                         1
;                         UPTO
;                         ITERATIONS
;                         SUM
;                         (CHECK-NODE #)
;                         SUM
;                         (CHECK-NODE #)))))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> D #:LOOP-LIMIT-52)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       etc.

;     (+ MAX-DEPTH MIN-DEPTH (- D))
; --> + 
; ==>
;   (+ MAX-DEPTH MIN-DEPTH)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       The result is a (VALUES REAL
;                               &OPTIONAL), not a (VALUES DOUBLE-FLOAT &REST T).
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       The result is a (VALUES REAL
;                               &OPTIONAL), not a (VALUES SINGLE-FLOAT &REST T).
;       etc.

;     (- D)
; ==>
;   (SB-KERNEL:%NEGATE D)
; 
; note: forced to do GENERIC-NEGATE (cost 10)
;       unable to do inline float arithmetic (cost 1) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The result is a (VALUES REAL
;                               &OPTIONAL), not a (VALUES DOUBLE-FLOAT &REST T).
;       unable to do inline float arithmetic (cost 1) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The result is a (VALUES REAL
;                               &OPTIONAL), not a (VALUES SINGLE-FLOAT &REST T).
;       etc.

;     (+ MAX-DEPTH MIN-DEPTH (- D))
; ==>
;   (+ (+ MAX-DEPTH MIN-DEPTH) (- D))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a REAL, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a REAL, not a (SIGNED-BYTE 32).
;       The second argument is a REAL, not a (SIGNED-BYTE 32).
;       The result is a (VALUES INTEGER
;                               &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                         &REST
;                                                         T).
;       etc.

;     (ASH 1 (+ MAX-DEPTH MIN-DEPTH (- D)))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 3) because:
;       The second argument is a INTEGER, not a (UNSIGNED-BYTE 29).
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline ASH (cost 3) because:
;       The second argument is a INTEGER, not a (UNSIGNED-BYTE 29).
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (LOOP FOR
;         I
;         FROM
;         1
;         UPTO
;         ITERATIONS
;         SUM
;         (CHECK-NODE (BUILD-BTREE I D))
;         SUM
;         (CHECK-NODE (BUILD-BTREE (- I) D)))
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> I #:LOOP-LIMIT-53)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1 536870912), not a FIXNUM.
;       The second argument is a UNSIGNED-BYTE, not a FIXNUM.

;     (LOOP FOR
;         D
;         FROM
;         MIN-DEPTH
;         BY
;         2
;         UPTO
;         MAX-DEPTH
;         DO
;         (LET ((ITERATIONS (ASH 1 #)))
;           (FORMAT T
;                   "~A~T  trees of depth ~A~T  check: ~A~%"
;                   ITERATIONS
;                   D
;                   (LOOP FOR
;                         I
;                         FROM
;                         1
;                         UPTO
;                         ITERATIONS
;                         SUM
;                         (CHECK-NODE #)
;                         SUM
;                         (CHECK-NODE #)))))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 
; ==>
;   (+ D 2)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (LOOP FOR
;         I
;         FROM
;         1
;         UPTO
;         ITERATIONS
;         SUM
;         (CHECK-NODE (BUILD-BTREE I D))
;         SUM
;         (CHECK-NODE (BUILD-BTREE (- I) D)))
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY SETQ THE 
; ==>
;   (+ #:LOOP-SUM-54 (CHECK-NODE (BUILD-BTREE I D)))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a NUMBER, not a (SIGNED-BYTE 32).
;       The result is a (VALUES NUMBER
;                               &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                         &REST
;                                                         T).
;       etc.

; ==>
;   (+ #:LOOP-SUM-54 (CHECK-NODE (BUILD-BTREE (- I) D)))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a NUMBER, not a (SIGNED-BYTE 32).
;       The result is a (VALUES NUMBER
;                               &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                         &REST
;                                                         T).
;       etc.

; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ 
; ==>
;   (SETQ I (1+ I))
; 
; note: doing signed word to integer coercion (cost 20) to I
; 
; compilation unit aborted
;   caught 1 fatal ERROR condition
;   printed 28 notes
compilation aborted because of fatal error:
                                     READ failure in COMPILE-FILE:
                                       READER-ERROR at 1230 (line 39, column 78) on #<SB-SYS:FD-STREAM for "file /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.sbcl" {9031321}>:
package "EXT" not found

; /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.fasl written
; compilation finished in 0:00:01
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/binarytrees/tmp/sbcl.core:
writing 20886816 bytes from the read-only space at 0x01000000
writing 6863360 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START binarytrees.sbcl-2.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END binarytrees.sbcl-2.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load binarytrees.sbcl-2.sbcl_run %A
; in: LAMBDA NIL
;     (MAIN)
; 
; caught STYLE-WARNING:
;   undefined function: MAIN

; 
; caught STYLE-WARNING:
;   This function is undefined:
;     MAIN
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
unhandled SIMPLE-ERROR in thread #<SB-THREAD:THREAD "initial thread" {90035A9}>:
  Error during processing of --eval option "(|LOAD| \"binarytrees.sbcl-2.sbcl_run\")":

  The function MAIN is undefined.

0: (BACKTRACE 128 #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {514B549}>)
1: (SB-DEBUG::DEBUGGER-DISABLED-HOOK
    #<SIMPLE-ERROR {9026D79}>
    #<unavailable argument>)
2: (INVOKE-DEBUGGER #<SIMPLE-ERROR {9026D79}>)
3: (ERROR
    "Error during processing of --eval ~
                                              option ~S:~%~%  ~A")
4: ((LAMBDA (SB-IMPL::E)) #<UNDEFINED-FUNCTION MAIN {9026CD1}>)
5: ((LAMBDA (SB-IMPL::E)) #<UNDEFINED-FUNCTION MAIN {9026CD1}>)
6: (SIGNAL #<UNDEFINED-FUNCTION MAIN {9026CD1}>)
7: (ERROR UNDEFINED-FUNCTION)
8: (SB-KERNEL::UNDEFINED-FUN-ERROR-HANDLER
    #<unavailable argument>
    #.(SB-SYS:INT-SAP #XB7C19B20)
    #<SB-ALIEN-INTERNALS:ALIEN-VALUE :SAP #XB7C19810 :TYPE (*
                                                            (STRUCT
                                                             SB-VM::OS-CONTEXT-T-STRUCT))>
    (14))
9: (SB-KERNEL:INTERNAL-ERROR
    #.(SB-SYS:INT-SAP #XB7C19810)
    #<unavailable argument>)
10: ("foreign function: call_into_lisp")
11: ("foreign function: funcall2")
12: ("foreign function: interrupt_internal_error")
13: ("foreign function: sigtrap_handler")
14: ("bogus stack frame")
15: (SB-INT:EVAL-IN-LEXENV (MAIN) #<NULL-LEXENV>)
16: (SB-FASL::LOAD-AS-SOURCE
     #<SB-SYS:FD-STREAM for "file /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.sbcl_run" {900F341}>
     NIL
     NIL)
17: (SB-FASL::INTERNAL-LOAD
     #P"binarytrees.sbcl-2.sbcl_run"
     #P"/opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.sbcl_run"
     :ERROR
     NIL
     NIL
     :SOURCE
     :DEFAULT)
18: (SB-FASL::INTERNAL-LOAD
     #P"binarytrees.sbcl-2.sbcl_run"
     #P"/opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.sbcl_run"
     :ERROR
     NIL
     NIL
     NIL
     :DEFAULT)
19: (LOAD "binarytrees.sbcl-2.sbcl_run")
20: (SB-INT:EVAL-IN-LEXENV
     (LOAD "binarytrees.sbcl-2.sbcl_run")
     #S(SB-KERNEL:LEXENV
        :FUNS NIL
        :VARS NIL
        :BLOCKS NIL
        :TAGS NIL
        :TYPE-RESTRICTIONS NIL
        :LAMBDA NIL
        :CLEANUP NIL
        :HANDLED-CONDITIONS NIL
        :DISABLED-PACKAGE-LOCKS NIL
        :POLICY ((SPEED . 1) (SPACE . 1) (SAFETY . 1) (INHIBIT-WARNINGS . 1)
                 (DEBUG . 1) (COMPILATION-SPEED . 1))))
21: (SB-IMPL::PROCESS-EVAL-OPTIONS ("(|LOAD| \"binarytrees.sbcl-2.sbcl_run\")"))
22: (SB-IMPL::TOPLEVEL-INIT)
23: ((FLET SB-IMPL::RESTART-LISP))

unhandled condition in --disable-debugger mode, quitting
TEST FAILED - Child processed exited with error code (1)


PROGRAM OUTPUT
==============
