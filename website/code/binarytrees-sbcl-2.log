BUILD COMMANDS FOR: binarytrees.sbcl-2.sbcl

Thu Mar 30 00:13:13 PST 2006

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "binarytrees.sbcl-2.sbcl_compile")'
### START binarytrees.sbcl-2.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "binarytrees.sbcl-2.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END binarytrees.sbcl-2.sbcl_compile

; compiling file "/opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.sbcl" (written 30 MAR 2006 12:13:13 AM):
; compiling (DEFUN BUILD-BTREE ...)
; compiling (DEFUN CHECK-NODE ...)
; compiling (DEFUN LOOP-DEPTHS ...)
; file: /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.sbcl
; in: DEFUN LOOP-DEPTHS
;     (LOOP FOR
;         D
;         FROM
;         MIN-DEPTH
;         BY
;         2
;         UPTO
;         MAX-DEPTH
;         DO
;         (LET ((ITERATIONS (ASH 1 #)))
;           (FORMAT T
;                   "~D~C trees of depth ~D~C check: ~D~%"
;                   (* ITERATIONS 2)
;                   #\Tab
;                   D
;                   #\Tab
;                   (LOOP FOR
;                         I
;                         FROM
;                         1
;                         UPTO
;                         ITERATIONS
;                         SUM
;                         (CHECK-NODE #)
;                         SUM
;                         (CHECK-NODE #)))))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> D #:LOOP-LIMIT-5)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.

;     (+ MAX-DEPTH MIN-DEPTH (- D))
; --> + 
; ==>
;   (+ MAX-DEPTH MIN-DEPTH)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a RATIONAL.
;   The second argument is a REAL, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.

; ==>
;   (+ (+ MAX-DEPTH MIN-DEPTH) (- D))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a RATIONAL.
;   The second argument is a REAL, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.

;     (LOOP FOR
;         D
;         FROM
;         MIN-DEPTH
;         BY
;         2
;         UPTO
;         MAX-DEPTH
;         DO
;         (LET ((ITERATIONS (ASH 1 #)))
;           (FORMAT T
;                   "~D~C trees of depth ~D~C check: ~D~%"
;                   (* ITERATIONS 2)
;                   #\Tab
;                   D
;                   #\Tab
;                   (LOOP FOR
;                         I
;                         FROM
;                         1
;                         UPTO
;                         ITERATIONS
;                         SUM
;                         (CHECK-NODE #)
;                         SUM
;                         (CHECK-NODE #)))))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 
; ==>
;   (+ D 2)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (LOOP FOR
;         I
;         FROM
;         1
;         UPTO
;         ITERATIONS
;         SUM
;         (CHECK-NODE (BUILD-BTREE I D))
;         SUM
;         (CHECK-NODE (BUILD-BTREE (- I) D)))
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY SETQ THE 
; ==>
;   (+ #:LOOP-SUM-7 (CHECK-NODE (BUILD-BTREE I D)))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

; ==>
;   (+ #:LOOP-SUM-7 (CHECK-NODE (BUILD-BTREE (- I) D)))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (LOOP FOR
;         D
;         FROM
;         MIN-DEPTH
;         BY
;         2
;         UPTO
;         MAX-DEPTH
;         DO
;         (LET ((ITERATIONS (ASH 1 #)))
;           (FORMAT T
;                   "~D~C trees of depth ~D~C check: ~D~%"
;                   (* ITERATIONS 2)
;                   #\Tab
;                   D
;                   #\Tab
;                   (LOOP FOR
;                         I
;                         FROM
;                         1
;                         UPTO
;                         ITERATIONS
;                         SUM
;                         (CHECK-NODE #)
;                         SUM
;                         (CHECK-NODE #)))))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> D #:LOOP-LIMIT-5)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       etc.

;     (+ MAX-DEPTH MIN-DEPTH (- D))
; --> + 
; ==>
;   (+ MAX-DEPTH MIN-DEPTH)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       The result is a (VALUES REAL
;                               &OPTIONAL), not a (VALUES DOUBLE-FLOAT &REST T).
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       The result is a (VALUES REAL
;                               &OPTIONAL), not a (VALUES SINGLE-FLOAT &REST T).
;       etc.

;     (- D)
; ==>
;   (SB-KERNEL:%NEGATE D)
; 
; note: forced to do GENERIC-NEGATE (cost 10)
;       unable to do inline float arithmetic (cost 1) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The result is a (VALUES REAL
;                               &OPTIONAL), not a (VALUES DOUBLE-FLOAT &REST T).
;       unable to do inline float arithmetic (cost 1) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The result is a (VALUES REAL
;                               &OPTIONAL), not a (VALUES SINGLE-FLOAT &REST T).
;       etc.

;     (+ MAX-DEPTH MIN-DEPTH (- D))
; ==>
;   (+ (+ MAX-DEPTH MIN-DEPTH) (- D))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a REAL, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a REAL, not a (SIGNED-BYTE 32).
;       The second argument is a REAL, not a (SIGNED-BYTE 32).
;       The result is a (VALUES INTEGER
;                               &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                         &REST
;                                                         T).
;       etc.

;     (ASH 1 (+ MAX-DEPTH MIN-DEPTH (- D)))
; 
; note: forced to do full call
;       unable to do inline ASH (cost 3) because:
;       The second argument is a INTEGER, not a (UNSIGNED-BYTE 29).
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline ASH (cost 3) because:
;       The second argument is a INTEGER, not a (UNSIGNED-BYTE 29).
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (* ITERATIONS 2)
; ==>
;   (ASH SB-C::X 1)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a UNSIGNED-BYTE, not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32)
;                                                         &REST
;                                                         T).
;       etc.

;     (LOOP FOR
;         I
;         FROM
;         1
;         UPTO
;         ITERATIONS
;         SUM
;         (CHECK-NODE (BUILD-BTREE I D))
;         SUM
;         (CHECK-NODE (BUILD-BTREE (- I) D)))
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> I #:LOOP-LIMIT-6)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1 536870912), not a FIXNUM.
;       The second argument is a UNSIGNED-BYTE, not a FIXNUM.

;     (LOOP FOR
;         D
;         FROM
;         MIN-DEPTH
;         BY
;         2
;         UPTO
;         MAX-DEPTH
;         DO
;         (LET ((ITERATIONS (ASH 1 #)))
;           (FORMAT T
;                   "~D~C trees of depth ~D~C check: ~D~%"
;                   (* ITERATIONS 2)
;                   #\Tab
;                   D
;                   #\Tab
;                   (LOOP FOR
;                         I
;                         FROM
;                         1
;                         UPTO
;                         ITERATIONS
;                         SUM
;                         (CHECK-NODE #)
;                         SUM
;                         (CHECK-NODE #)))))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 
; ==>
;   (+ D 2)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a REAL, not a FIXNUM.
;       The result is a (VALUES REAL &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (LOOP FOR
;         I
;         FROM
;         1
;         UPTO
;         ITERATIONS
;         SUM
;         (CHECK-NODE (BUILD-BTREE I D))
;         SUM
;         (CHECK-NODE (BUILD-BTREE (- I) D)))
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY SETQ THE 
; ==>
;   (+ #:LOOP-SUM-7 (CHECK-NODE (BUILD-BTREE I D)))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a NUMBER, not a (SIGNED-BYTE 32).
;       The result is a (VALUES NUMBER
;                               &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                         &REST
;                                                         T).
;       etc.

; ==>
;   (+ #:LOOP-SUM-7 (CHECK-NODE (BUILD-BTREE (- I) D)))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The first argument is a NUMBER, not a (SIGNED-BYTE 32).
;       The result is a (VALUES NUMBER
;                               &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                         &REST
;                                                         T).
;       etc.

; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ 
; ==>
;   (SETQ I (1+ I))
; 
; note: doing signed word to integer coercion (cost 20) to I

; compiling (DEFUN MAIN ...)
; file: /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.sbcl
; in: DEFUN MAIN
;     (1+ N)
; ==>
;   (+ N 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       etc.
; 
; compilation unit finished
;   printed 37 notes


; /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.sbcl-2.fasl written
; compilation finished in 0:00:00
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/binarytrees/tmp/sbcl.core:
writing 19651008 bytes from the read-only space at 0x01000000
writing 4330216 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START binarytrees.sbcl-2.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END binarytrees.sbcl-2.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load binarytrees.sbcl-2.sbcl_run %A


PROGRAM OUTPUT
==============
stretch tree of depth 17	 check: -1
131072	 trees of depth 4	 check: -131072
32768	 trees of depth 6	 check: -32768
8192	 trees of depth 8	 check: -8192
2048	 trees of depth 10	 check: -2048
512	 trees of depth 12	 check: -512
128	 trees of depth 14	 check: -128
32	 trees of depth 16	 check: -32
long lived tree of depth 16	 check: -1
