<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by James McIlree
*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;

</span><span class="kwa">public class</span> knucleotide <span class="sym">{
</span>  <span class="kwc">String</span> sequence<span class="sym">;
</span>  <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;

</span>  knucleotide<span class="sym">(</span><span class="kwc">String</span> s<span class="sym">) {
</span>    sequence <span class="sym">=</span> s<span class="sym">;
  }

</span>  <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">Exception
</span>  <span class="sym">{
</span>    <span class="kwc">StringBuffer</span> sbuffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();
</span>    <span class="kwc">String</span> line<span class="sym">;

</span>    <span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span>    <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> in<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">) {
</span>      <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">.</span>startsWith<span class="sym">(</span><span class="str">&quot;&gt;THREE&quot;</span><span class="sym">))</span> <span class="kwa">break</span><span class="sym">;
    }

</span>    <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> in<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">) {
</span>      <span class="kwb">char</span> c <span class="sym">=</span> line<span class="sym">.</span>charAt<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>      <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">)
</span>        <span class="kwa">break</span><span class="sym">;
</span>      <span class="kwa">else if</span> <span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)
</span>        sbuffer<span class="sym">.</span>append<span class="sym">(</span>line<span class="sym">.</span>toUpperCase<span class="sym">());
    }

</span>    knucleotide kn <span class="sym">=</span> <span class="kwa">new</span> knucleotide<span class="sym">(</span>sbuffer<span class="sym">.</span>toString<span class="sym">());
</span>    kn<span class="sym">.</span>writeFrequencies<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span>    kn<span class="sym">.</span>writeFrequencies<span class="sym">(</span><span class="num">2</span><span class="sym">);

</span>    kn<span class="sym">.</span>writeCount<span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">);
</span>    kn<span class="sym">.</span>writeCount<span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">);
</span>    kn<span class="sym">.</span>writeCount<span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">);
</span>    kn<span class="sym">.</span>writeCount<span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);
</span>    kn<span class="sym">.</span>writeCount<span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);
  }

</span>  <span class="kwb">void</span> writeFrequencies<span class="sym">(</span><span class="kwb">int</span> nucleotideLength<span class="sym">) {
</span>    <span class="kwc">Map</span> frequencies <span class="sym">=</span> calculateFrequencies<span class="sym">(</span>nucleotideLength<span class="sym">);
</span>    <span class="kwc">ArrayList</span> list <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">(</span>frequencies<span class="sym">.</span>size<span class="sym">());
</span>    <span class="kwc">Iterator</span> it <span class="sym">=</span> frequencies<span class="sym">.</span>entrySet<span class="sym">().</span>iterator<span class="sym">();

</span>    <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwa">while</span> <span class="sym">(</span>it<span class="sym">.</span>hasNext<span class="sym">()) {
</span>      knucleotide fragment <span class="sym">= (</span>knucleotide<span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>it<span class="sym">.</span>next<span class="sym">()).</span>getValue<span class="sym">();
</span>      list<span class="sym">.</span>add<span class="sym">(</span>fragment<span class="sym">);
</span>      sum <span class="sym">+=</span> fragment<span class="sym">.</span>count<span class="sym">;
    }

</span>    <span class="kwc">Collections</span><span class="sym">.</span>sort<span class="sym">(</span>list<span class="sym">,</span> <span class="kwa">new</span> <span class="kwc">Comparator</span><span class="sym">() {
</span>        <span class="kwa">public</span> <span class="kwb">int</span> compare<span class="sym">(</span><span class="kwc">Object</span> o1<span class="sym">,</span> <span class="kwc">Object</span> o2<span class="sym">) {
</span>          <span class="kwb">int</span> c <span class="sym">= ((</span>knucleotide<span class="sym">)</span>o2<span class="sym">).</span>count <span class="sym">- ((</span>knucleotide<span class="sym">)</span>o1<span class="sym">).</span>count<span class="sym">;
</span>          <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="num">0</span><span class="sym">) {
</span>            c <span class="sym">= ((</span>knucleotide<span class="sym">)</span>o1<span class="sym">).</span>sequence<span class="sym">.</span>compareTo<span class="sym">(((</span>knucleotide<span class="sym">)</span>o2<span class="sym">).</span>sequence<span class="sym">);
          }
</span>          <span class="kwa">return</span> c<span class="sym">;
        }
      });

</span>    <span class="kwc">NumberFormat</span> nf <span class="sym">=</span> <span class="kwc">NumberFormat</span><span class="sym">.</span>getInstance<span class="sym">();
</span>    nf<span class="sym">.</span>setMaximumFractionDigits<span class="sym">(</span><span class="num">2</span><span class="sym">);
</span>    nf<span class="sym">.</span>setMinimumFractionDigits<span class="sym">(</span><span class="num">2</span><span class="sym">);

</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>list<span class="sym">.</span>size<span class="sym">();</span> i<span class="sym">++) {
</span>      knucleotide fragment <span class="sym">= (</span>knucleotide<span class="sym">)</span>list<span class="sym">.</span>get<span class="sym">(</span>i<span class="sym">);
</span>      <span class="kwb">double</span> percent <span class="sym">= (</span><span class="kwb">double</span><span class="sym">)</span>fragment<span class="sym">.</span>count<span class="sym">/(</span><span class="kwb">double</span><span class="sym">)</span>sum <span class="sym">*</span> <span class="num">100.0</span><span class="sym">;
</span>      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>fragment<span class="sym">.</span>sequence <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> nf<span class="sym">.</span>format<span class="sym">(</span>percent<span class="sym">));
    }
</span>    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);
  }

</span>  <span class="kwb">void</span> writeCount<span class="sym">(</span><span class="kwc">String</span> nucleotideFragment<span class="sym">) {
</span>    <span class="kwc">Map</span> frequencies <span class="sym">=</span> calculateFrequencies<span class="sym">(</span>nucleotideFragment<span class="sym">.</span>length<span class="sym">());

</span>    knucleotide found <span class="sym">= (</span>knucleotide<span class="sym">)</span>frequencies<span class="sym">.</span>get<span class="sym">(</span>nucleotideFragment<span class="sym">);
</span>    <span class="kwb">int</span> count <span class="sym">= (</span>found <span class="sym">==</span> null<span class="sym">)</span> ? <span class="num">0</span> <span class="sym">:</span> found<span class="sym">.</span>count<span class="sym">;
</span>    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>count <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> <span class="sym">+</span> nucleotideFragment<span class="sym">);
  }

</span>  <span class="kwc">Map</span> calculateFrequencies<span class="sym">(</span><span class="kwb">int</span> fragmentLength<span class="sym">) {
</span>    <span class="kwc">HashMap</span> map <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> offset<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> offset<span class="sym">&lt;</span>fragmentLength<span class="sym">;</span> offset<span class="sym">++)
</span>      calculateFrequencies<span class="sym">(</span>map<span class="sym">,</span> offset<span class="sym">,</span> fragmentLength<span class="sym">);

</span>    <span class="kwa">return</span> map<span class="sym">;
  }

</span>  <span class="slc">// Is this method really needed? The benchmark specification seems to
</span>  <span class="slc">// indicate so, but it is not entirely clear. This method could easily
</span>  <span class="slc">// be folded up.
</span>  <span class="kwb">void</span> calculateFrequencies<span class="sym">(</span><span class="kwc">Map</span> map<span class="sym">,</span> <span class="kwb">int</span> offset<span class="sym">,</span> <span class="kwb">int</span> fragmentLength<span class="sym">) {
</span>    <span class="kwb">int</span> lastIndex <span class="sym">=</span> sequence<span class="sym">.</span>length<span class="sym">() -</span> fragmentLength<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> index<span class="sym">=</span>offset<span class="sym">;</span> index<span class="sym">&lt;</span>lastIndex<span class="sym">;</span> index<span class="sym">+=</span>fragmentLength<span class="sym">) {
</span>      <span class="kwc">String</span> temp <span class="sym">=</span> sequence<span class="sym">.</span>substring<span class="sym">(</span>index<span class="sym">,</span> index <span class="sym">+</span> fragmentLength<span class="sym">);
</span>      knucleotide fragment <span class="sym">= (</span>knucleotide<span class="sym">)</span>map<span class="sym">.</span>get<span class="sym">(</span>temp<span class="sym">);
</span>      <span class="kwa">if</span> <span class="sym">(</span>fragment <span class="sym">!=</span> null<span class="sym">)
</span>        fragment<span class="sym">.</span>count<span class="sym">++;
</span>      <span class="kwa">else
</span>        map<span class="sym">.</span>put<span class="sym">(</span>temp<span class="sym">,</span> <span class="kwa">new</span> knucleotide<span class="sym">(</span>temp<span class="sym">));
    }
  }
}
</span>
