<span class="kwa">local</span> socket <span class="sym">=</span> require <span class="str">&quot;socket&quot;</span> <span class="slc">-- LuaSocket-2.0-beta2 or newer required
</span>
<span class="kwa">local</span> M<span class="sym">,</span> reply_size<span class="sym">,</span> request_size <span class="sym">=</span> <span class="num">100</span><span class="sym">,</span> <span class="num">4096</span><span class="sym">,</span> <span class="num">64
</span><span class="kwa">local</span> N <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1

</span><span class="kwa">local function</span> client<span class="sym">(</span>ls<span class="sym">,</span> coserver<span class="sym">)
</span>  <span class="kwa">local</span> repsize <span class="sym">=</span> reply_size
  <span class="kwa">local</span> request <span class="sym">=</span> <span class="kwb">string</span>.rep<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">,</span> request_size<span class="sym">)
</span>  <span class="kwa">local</span> resume<span class="sym">,</span> len <span class="sym">=</span> coroutine.resume<span class="sym">,</span> <span class="kwb">string</span>.len
  resume<span class="sym">(</span>coserver<span class="sym">,</span> ls<span class="sym">)
</span>  <span class="kwa">local</span> sk <span class="sym">=</span> socket.connect<span class="sym">(</span>ls<span class="sym">:</span>getsockname<span class="sym">())
</span>  sk<span class="sym">:</span>settimeout<span class="sym">(</span><span class="num">0</span><span class="sym">)
</span>  <span class="kwa">local</span> replies <span class="sym">=</span> <span class="num">0
</span>  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>N<span class="sym">*</span>M <span class="kwa">do
    local</span> ok<span class="sym">,</span> err<span class="sym">,</span> sent <span class="sym">=</span> sk<span class="sym">:</span>send<span class="sym">(</span>request<span class="sym">)
</span>    <span class="kwa">while not</span> ok <span class="kwa">do
</span>      resume<span class="sym">(</span>coserver<span class="sym">)
</span>      ok<span class="sym">,</span> err<span class="sym">,</span> sent <span class="sym">=</span> sk<span class="sym">:</span>send<span class="sym">(</span>request<span class="sym">,</span> <span class="num">1</span><span class="sym">+</span>sent<span class="sym">)
</span>    <span class="kwa">end
</span>    resume<span class="sym">(</span>coserver<span class="sym">)
</span>    <span class="kwa">local</span> msg<span class="sym">,</span> err<span class="sym">,</span> part <span class="sym">=</span> sk<span class="sym">:</span>receive<span class="sym">(</span>repsize<span class="sym">)
</span>    <span class="kwa">while not</span> msg <span class="kwa">do
</span>      resume<span class="sym">(</span>coserver<span class="sym">)
</span>      msg<span class="sym">,</span> err<span class="sym">,</span> part <span class="sym">=</span> sk<span class="sym">:</span>receive<span class="sym">(</span>repsize<span class="sym">-</span>len<span class="sym">(</span>part<span class="sym">),</span> part<span class="sym">)
</span>    <span class="kwa">end
</span>    replies <span class="sym">=</span> replies <span class="sym">+</span> <span class="num">1
</span>  <span class="kwa">end
</span>  io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;replies: &quot;</span><span class="sym">,</span> replies<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">bytes: &quot;</span><span class="sym">,</span> sk<span class="sym">:</span>getstats<span class="sym">(),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span>  sk<span class="sym">:</span>close<span class="sym">()
</span><span class="kwa">end

local function</span> server<span class="sym">(</span>ls<span class="sym">)
</span>  <span class="kwa">local</span> reqsize <span class="sym">=</span> request_size
  <span class="kwa">local</span> reply <span class="sym">=</span> <span class="kwb">string</span>.rep<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">,</span> reply_size<span class="sym">)
</span>  <span class="kwa">local</span> yield<span class="sym">,</span> len <span class="sym">=</span> coroutine.yield<span class="sym">,</span> <span class="kwb">string</span>.len
  ls<span class="sym">:</span>settimeout<span class="sym">(</span><span class="num">0</span><span class="sym">)
</span>  <span class="kwa">local</span> sk <span class="sym">=</span> ls<span class="sym">:</span>accept<span class="sym">()
</span>  <span class="kwa">while not</span> sk <span class="kwa">do
</span>    yield<span class="sym">()
</span>    sk <span class="sym">=</span> ls<span class="sym">:</span>accept<span class="sym">()
</span>  <span class="kwa">end
</span>  sk<span class="sym">:</span>settimeout<span class="sym">(</span><span class="num">0</span><span class="sym">)
</span>  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>N<span class="sym">*</span>M <span class="kwa">do
</span>    yield<span class="sym">()
</span>    <span class="kwa">local</span> msg<span class="sym">,</span> err<span class="sym">,</span> part <span class="sym">=</span> sk<span class="sym">:</span>receive<span class="sym">(</span>reqsize<span class="sym">)
</span>    <span class="kwa">while not</span> msg <span class="kwa">do
</span>      yield<span class="sym">()
</span>      msg<span class="sym">,</span> err<span class="sym">,</span> part <span class="sym">=</span> sk<span class="sym">:</span>receive<span class="sym">(</span>reqsize<span class="sym">-</span>len<span class="sym">(</span>part<span class="sym">),</span> part<span class="sym">)
</span>    <span class="kwa">end
    local</span> ok<span class="sym">,</span> err<span class="sym">,</span> sent <span class="sym">=</span> sk<span class="sym">:</span>send<span class="sym">(</span>reply<span class="sym">)
</span>    <span class="kwa">while not</span> ok <span class="kwa">do
</span>      yield<span class="sym">()
</span>      ok<span class="sym">,</span> err<span class="sym">,</span> sent <span class="sym">=</span> sk<span class="sym">:</span>send<span class="sym">(</span>reply<span class="sym">,</span> <span class="num">1</span><span class="sym">+</span>sent<span class="sym">)
</span>    <span class="kwa">end
  end
</span>  sk<span class="sym">:</span>close<span class="sym">()
</span><span class="kwa">end

</span>client<span class="sym">(</span>socket.bind<span class="sym">(</span><span class="str">&quot;127.0.0.1&quot;</span><span class="sym">,</span> <span class="num">0</span><span class="sym">),</span> coroutine.create<span class="sym">(</span>server<span class="sym">))</span>
