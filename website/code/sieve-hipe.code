<span class="line">    1 </span><span class="slc">%%% -*- mode: erlang -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">%%% $Id: sieve-hipe.code,v 1.4 2004-11-13 07:43:20 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">%%% http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">%%% Based on code by Maurice Castro (see bottom of file).
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">%%% Originally tweaked by Doug Bagley.
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">%%% Further tweaked and shrunk by James Hague.
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="sym">-</span>module<span class="sym">(</span>sieve<span class="sym">)</span>.
<span class="line">    9 </span><span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">,</span> test<span class="sym">/</span><span class="num">2</span><span class="sym">])</span>.
<span class="line">   10 </span>
<span class="line">   11 </span><span class="slc">% The sieve loop is spawned into its own process with a heap size of
</span><span class="line">   12 </span><span class="slc"></span><span class="slc">% 50,000 words.  With all of the list creation done by this benchmark,
</span><span class="line">   13 </span><span class="slc"></span><span class="slc">% much time is spent resizing the initially tiny heap.  Starting with
</span><span class="line">   14 </span><span class="slc"></span><span class="slc">% a larger heap improves execution time by ~20%.
</span><span class="line">   15 </span><span class="slc"></span>
<span class="line">   16 </span>main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">'1'</span><span class="sym">])</span>.
<span class="line">   17 </span>main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span><span class="line">   18 </span><span class="sym"></span>    Num <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Arg<span class="sym">)),
</span><span class="line">   19 </span><span class="sym"></span>    spawn_opt<span class="sym">(</span>sieve<span class="sym">,</span> test<span class="sym">, [</span><span class="kwb">self</span><span class="sym">(),</span> Num<span class="sym">], [{</span>min_heap_size<span class="sym">,</span> <span class="num">50000</span><span class="sym">}]),
</span><span class="line">   20 </span><span class="sym"></span>    <span class="kwa">receive</span> Num_primes <span class="sym">-&gt;</span> io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;Count: ~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>Num_primes<span class="sym">])</span> <span class="kwa">end</span><span class="sym">,
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwb">halt</span><span class="sym">()</span>.
<span class="line">   22 </span>
<span class="line">   23 </span>test<span class="sym">(</span>From<span class="sym">,</span> N<span class="sym">) -&gt;</span> test<span class="sym">(</span>From<span class="sym">,</span> N<span class="sym">,</span> <span class="kwb">math</span><span class="sym">:</span><span class="kwb">sqrt</span><span class="sym">(</span><span class="num">8192</span><span class="sym">),</span> lists<span class="sym">:</span>seq<span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="num">8192</span><span class="sym">))</span>.
<span class="line">   24 </span>
<span class="line">   25 </span>test<span class="sym">(</span>From<span class="sym">,</span> N<span class="sym">,</span> Max<span class="sym">,</span> Seq<span class="sym">) -&gt;
</span><span class="line">   26 </span><span class="sym"></span>    Num_primes <span class="sym">=</span> <span class="kwb">length</span><span class="sym">(</span>era<span class="sym">(</span>Max<span class="sym">,</span> Seq<span class="sym">)),
</span><span class="line">   27 </span><span class="sym"></span>    <span class="kwa">if
</span><span class="line">   28 </span><span class="kwa"></span>        N <span class="sym">&gt;</span> <span class="num">1</span> <span class="sym">-&gt;</span> test<span class="sym">(</span>From<span class="sym">,</span> N<span class="num">-1</span><span class="sym">,</span> Max<span class="sym">,</span> Seq<span class="sym">);
</span><span class="line">   29 </span><span class="sym"></span>        true  <span class="sym">-&gt;</span> From <span class="sym">!</span> Num_primes
<span class="line">   30 </span>    <span class="kwa">end</span>.
<span class="line">   31 </span>
<span class="line">   32 </span>era<span class="sym">(</span>Max<span class="sym">, [</span>H<span class="sym">|</span>T<span class="sym">])</span> <span class="kwa">when</span> H <span class="sym">=&lt;</span> Max <span class="sym">-&gt;
</span><span class="line">   33 </span><span class="sym">    [</span>H <span class="sym">|</span> era<span class="sym">(</span>Max<span class="sym">, [</span>X <span class="sym">||</span> X <span class="sym">&lt;-</span> T<span class="sym">,</span> X rem H <span class="sym">=/=</span> <span class="num">0</span><span class="sym">])];
</span><span class="line">   34 </span><span class="sym"></span>era<span class="sym">(</span>Max<span class="sym">,</span> L<span class="sym">) -&gt;</span>  L.
<span class="line">   35 </span>
<span class="line">   36 </span>
<span class="line">   37 </span><span class="slc">%%% Eratosthenes algorithm from Maurice Castro, with permission,
</span><span class="line">   38 </span><span class="slc"></span><span class="slc">%%% from his book, _Erlang in Real Time_, ISBN: 0864447434
</span><span class="line">   39 </span><span class="slc"></span><span class="slc">%%% http://www.serc.rmit.edu.au/~maurice/erlbk/eg/choice/erasto.erl
</span><span class="line">   40 </span><span class="slc"></span><span class="slc">%
</span><span class="line">   41 </span><span class="slc"></span><span class="slc">%era(Max, L) when hd(L) =&lt; Max -&gt;
</span><span class="line">   42 </span><span class="slc"></span><span class="slc">%    Prime = hd(L),
</span><span class="line">   43 </span><span class="slc"></span><span class="slc">%    [Prime | era(Max, sieve(Prime, L))];
</span><span class="line">   44 </span><span class="slc"></span><span class="slc">%era(Max, L) -&gt;
</span><span class="line">   45 </span><span class="slc"></span><span class="slc">%    L.
</span><span class="line">   46 </span><span class="slc"></span><span class="slc">%
</span><span class="line">   47 </span><span class="slc"></span><span class="slc">%sieve(N, []) -&gt;
</span><span class="line">   48 </span><span class="slc"></span><span class="slc">%    [];
</span><span class="line">   49 </span><span class="slc"></span><span class="slc">%sieve(N, [H|T]) when H rem N == 0 -&gt;
</span><span class="line">   50 </span><span class="slc"></span><span class="slc">%    sieve(N, T);
</span><span class="line">   51 </span><span class="slc"></span><span class="slc">%sieve(N, [H|T]) -&gt;
</span><span class="line">   52 </span><span class="slc"></span><span class="slc">%    [H | sieve(N, T)].
</span><span class="line">   53 </span><span class="slc"></span>
