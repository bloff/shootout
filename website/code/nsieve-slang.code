<span class="dir">#!/usr/bin/env slsh</span>
<span class="sym">%</span> The Computer Language Shootout Benchmarks
<span class="sym">%</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
<span class="sym">%</span>
<span class="sym">%</span> contributed by John E<span class="sym">.</span> Davis

<span class="kwc">private</span> define <span class="kwd">nsieve</span> <span class="sym">(</span>m<span class="sym">,</span> isprime<span class="sym">)</span>
<span class="sym">{</span>
   variable count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   variable i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;=</span> m<span class="sym">)</span>
     <span class="sym">{</span>
	i <span class="sym">=</span> <span class="kwd">wherefirst</span> <span class="sym">(</span>isprime<span class="sym">,</span> i<span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> NULL<span class="sym">)</span>
	  <span class="kwa">break</span><span class="sym">;</span>

	isprime<span class="sym">[[</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">::</span>i<span class="sym">]] =</span> <span class="num">0</span><span class="sym">;</span>
	i<span class="sym">++;</span>
	count<span class="sym">++;</span>
     <span class="sym">}</span>
   <span class="kwa">return</span> count<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">public</span> define <span class="kwd">slsh_main</span> <span class="sym">()</span>
<span class="sym">{</span>
   variable n <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwd">integer</span> <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
   <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>
   variable m<span class="sym">,</span> flags<span class="sym">;</span>

   foreach <span class="kwd">m</span> <span class="sym">(</span><span class="num">10000</span> <span class="sym">* (</span><span class="num">1</span> shl <span class="sym">[</span>n<span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">2</span><span class="sym">]))</span>
     <span class="sym">{</span>
	flags <span class="sym">=</span> <span class="kwa">not</span> <span class="sym">(</span>UChar_Type<span class="sym">[</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">]);</span>
	<span class="kwd">vmessage</span> <span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d&quot;</span><span class="sym">,</span> m<span class="sym">,</span> <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">,</span> flags<span class="sym">));</span>
     <span class="sym">}</span>
   <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

