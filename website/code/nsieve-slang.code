<span class="sym">%</span> nsieve<span class="sym">.</span>sl  <span class="sym">--</span> S<span class="sym">-</span>Lang
<span class="sym">%
%</span> Contributed by John E<span class="sym">.</span> Davis
<span class="kwb">static</span> define nsieve<span class="sym">(</span>m<span class="sym">,</span> isprime<span class="sym">)
{
</span>   isprime<span class="sym">[*] =</span> <span class="num">1</span><span class="sym">;
</span>   variable count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>   _for <span class="sym">(</span><span class="num">2</span><span class="sym">,</span>m<span class="sym">,</span><span class="num">1</span><span class="sym">)
     {
</span>        variable i <span class="sym">= ();
</span>        <span class="kwa">if</span> <span class="sym">(</span>isprime<span class="sym">[</span>i<span class="sym">])
          {
</span>             isprime<span class="sym">[[</span><span class="num">2</span><span class="sym">*</span>i<span class="sym">:</span>m<span class="sym">:</span>i<span class="sym">]] =</span> <span class="num">0</span><span class="sym">;
</span>             count<span class="sym">++;
          }
     }
</span>   <span class="kwa">return</span> count<span class="sym">;
}

</span><span class="kwc">public</span> define slsh_main <span class="sym">()
{
</span>   variable n <span class="sym">=</span> <span class="num">2</span><span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span>   <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">2</span><span class="sym">;
</span>   variable m<span class="sym">,</span> flags<span class="sym">;

</span>   m <span class="sym">= (</span><span class="num">1</span> shl n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;
</span>   flags <span class="sym">=</span> UChar_Type<span class="sym">[</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">];
   () =</span> fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">,</span> flags<span class="sym">));
</span>   m <span class="sym">= (</span><span class="num">1</span> shl <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">;
</span>   flags <span class="sym">=</span> UChar_Type<span class="sym">[</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">];
   () =</span> fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">,</span> flags<span class="sym">));
</span>   m <span class="sym">= (</span><span class="num">1</span> shl <span class="sym">(</span>n<span class="num">-2</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">;
</span>   flags <span class="sym">=</span> UChar_Type<span class="sym">[</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">];
   () =</span> fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">,</span> flags<span class="sym">));
</span>   <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}

%</span> vim<span class="sym">:</span> ts<span class="sym">=</span><span class="num">4</span> ft<span class="sym">=</span>slang
