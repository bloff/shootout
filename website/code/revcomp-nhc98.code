<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- contributed by Jeff Newbern
</span>
<span class="slc">-- Note: This code has not been optimized *at all*.  It is written to be clear
</span><span class="slc">-- and concise, using standard Haskell idioms.  Performance is decent with
</span><span class="slc">-- ghc -O2, but if it can be improved without sacrificing the clarity of the
</span><span class="slc">-- code, by all means go for it!
</span>
<span class="kwa">import</span> Data.<span class="kwb">Char</span><span class="sym">(</span>toLower<span class="sym">)

</span><span class="kwa">type</span> Base <span class="sym">=</span> <span class="kwb">Char
</span><span class="kwa">type</span> Sequence <span class="sym">= [</span>Base<span class="sym">]

</span>complement <span class="sym">::</span> Base <span class="sym">-&gt;</span> Base
complement <span class="str">'A'</span> <span class="sym">=</span> <span class="str">'T'</span>
complement <span class="str">'a'</span> <span class="sym">=</span> <span class="str">'T'</span>
complement <span class="str">'C'</span> <span class="sym">=</span> <span class="str">'G'</span>
complement <span class="str">'c'</span> <span class="sym">=</span> <span class="str">'G'</span>
complement <span class="str">'G'</span> <span class="sym">=</span> <span class="str">'C'</span>
complement <span class="str">'g'</span> <span class="sym">=</span> <span class="str">'C'</span>
complement <span class="str">'T'</span> <span class="sym">=</span> <span class="str">'A'</span>
complement <span class="str">'t'</span> <span class="sym">=</span> <span class="str">'A'</span>
complement <span class="str">'U'</span> <span class="sym">=</span> <span class="str">'A'</span>
complement <span class="str">'u'</span> <span class="sym">=</span> <span class="str">'A'</span>
complement <span class="str">'M'</span> <span class="sym">=</span> <span class="str">'K'</span>
complement <span class="str">'m'</span> <span class="sym">=</span> <span class="str">'K'</span>
complement <span class="str">'R'</span> <span class="sym">=</span> <span class="str">'Y'</span>
complement <span class="str">'r'</span> <span class="sym">=</span> <span class="str">'Y'</span>
complement <span class="str">'Y'</span> <span class="sym">=</span> <span class="str">'R'</span>
complement <span class="str">'y'</span> <span class="sym">=</span> <span class="str">'R'</span>
complement <span class="str">'K'</span> <span class="sym">=</span> <span class="str">'M'</span>
complement <span class="str">'k'</span> <span class="sym">=</span> <span class="str">'M'</span>
complement <span class="str">'V'</span> <span class="sym">=</span> <span class="str">'B'</span>
complement <span class="str">'v'</span> <span class="sym">=</span> <span class="str">'B'</span>
complement <span class="str">'H'</span> <span class="sym">=</span> <span class="str">'D'</span>
complement <span class="str">'h'</span> <span class="sym">=</span> <span class="str">'D'</span>
complement <span class="str">'D'</span> <span class="sym">=</span> <span class="str">'H'</span>
complement <span class="str">'d'</span> <span class="sym">=</span> <span class="str">'H'</span>
complement <span class="str">'B'</span> <span class="sym">=</span> <span class="str">'V'</span>
complement <span class="str">'b'</span> <span class="sym">=</span> <span class="str">'V'</span>
complement  x  <span class="sym">=</span> x

<span class="slc">-- write a sequence in Fasta format
</span>writeFasta <span class="sym">::</span> String <span class="sym">-&gt;</span> Sequence <span class="sym">-&gt;</span> IO <span class="sym">()
</span>writeFasta <span class="sym">[]</span>     _        <span class="sym">=</span> <span class="kwa">do</span> return <span class="sym">()
</span>writeFasta header sequence <span class="sym">=
</span>  <span class="kwa">do</span> putStrLn header
     writeWrapped <span class="num">60</span> sequence
  <span class="kwa">where</span> writeWrapped _   <span class="sym">[]  =</span> <span class="kwa">do</span> return <span class="sym">()
</span>        writeWrapped len str <span class="sym">=</span> <span class="kwa">do let</span> <span class="sym">(</span>s1<span class="sym">,</span>s2<span class="sym">) =</span> splitAt len str
                                  putStrLn s1
                                  writeWrapped len s2

<span class="slc">-- recurse over input stream, accumulating and writing processed sequences
</span>process <span class="sym">:: (</span>String<span class="sym">,[</span>Base<span class="sym">],</span>String<span class="sym">) -&gt;</span> IO<span class="sym">()
</span>process <span class="sym">(</span>header<span class="sym">,</span>bases<span class="sym">,[])         =</span> writeFasta header bases
process <span class="sym">(</span>header<span class="sym">,</span>bases<span class="sym">,</span>c&#64;<span class="sym">(</span><span class="str">'&gt;'</span><span class="sym">:</span>cs<span class="sym">)) =</span> <span class="kwa">do</span> writeFasta header bases
                                       <span class="kwa">let</span> <span class="sym">(</span>header<span class="str">',cs'</span><span class="sym">) =</span> break <span class="sym">(</span>\c<span class="sym">-&gt;</span>c <span class="sym">==</span> <span class="str">'\n'</span><span class="sym">)</span> c
                                       process <span class="sym">(</span>header<span class="str">',[],cs'</span><span class="sym">)
</span>process <span class="sym">(</span>header<span class="sym">,</span>bases<span class="sym">,(</span><span class="str">'\n'</span><span class="sym">:</span>cs<span class="sym">))  =</span> process <span class="sym">(</span>header<span class="sym">,</span>bases<span class="sym">,</span>cs<span class="sym">)
</span>process <span class="sym">(</span>header<span class="sym">,</span>bases<span class="sym">,(</span>c<span class="sym">:</span>cs<span class="sym">))     =</span> process <span class="sym">(</span>header<span class="sym">,((</span>complement c<span class="sym">):</span>bases<span class="sym">),</span>cs<span class="sym">)

</span>main <span class="sym">=</span> <span class="kwa">do</span> cs <span class="sym">&lt;-</span> getContents
          process <span class="sym">([],[],</span>cs<span class="sym">)
</span>
