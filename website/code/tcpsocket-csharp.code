<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy */</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Net<span class="sym">.</span>Sockets<span class="sym">;</span>

<span class="kwa">class</span> tcpsocket
<span class="sym">{</span>
   <span class="kwb">const string</span> HOST <span class="sym">=</span> <span class="str">&quot;127.0.0.1&quot;</span><span class="sym">;</span>
   <span class="kwb">const int</span> PORT <span class="sym">=</span> <span class="num">11000</span><span class="sym">,</span> REQUEST_SIZE <span class="sym">=</span> <span class="num">64</span><span class="sym">,</span> BUFFER_SIZE <span class="sym">=</span> <span class="num">1024</span><span class="sym">;</span>

   <span class="kwa">static</span> Reply<span class="sym">[]</span> replyTypes <span class="sym">=</span>
      <span class="sym">{</span> <span class="kwa">new</span> <span class="kwd">Reply</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="num">64</span><span class="sym">)</span>
      <span class="sym">,</span> <span class="kwa">new</span> <span class="kwd">Reply</span><span class="sym">(</span><span class="num">7</span><span class="sym">,</span><span class="num">4096</span><span class="sym">)</span>
      <span class="sym">,</span> <span class="kwa">new</span> <span class="kwd">Reply</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">409600</span><span class="sym">)</span>
      <span class="sym">};</span>


   <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">[]</span> args<span class="sym">){</span>
      <span class="kwb">int</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
      <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
         <span class="kwd">MakeRequests</span><span class="sym">(</span>n<span class="sym">);</span>
      <span class="kwa">else</span>
         <span class="kwd">ReplyToRequests</span><span class="sym">(</span>n<span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">MakeRequests</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
      <span class="kwb">byte</span><span class="sym">[]</span> requestContents <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>REQUEST_SIZE<span class="sym">];</span> <span class="slc">// use the same contents for every request</span>
      <span class="kwb">byte</span><span class="sym">[]</span> replyBuffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFFER_SIZE<span class="sym">];</span>
      <span class="kwb">int</span> replies <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> bytes <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

      <span class="kwa">using</span> <span class="sym">(</span>TcpClient client <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">TcpClient</span><span class="sym">()){</span>
         <span class="kwb">int</span> byteCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

         client<span class="sym">.</span><span class="kwd">Connect</span><span class="sym">(</span>HOST<span class="sym">,</span>PORT<span class="sym">);</span>
         NetworkStream s <span class="sym">=</span> client<span class="sym">.</span><span class="kwd">GetStream</span><span class="sym">();</span>

         <span class="kwa">foreach</span> <span class="sym">(</span>Reply reply in replyTypes<span class="sym">){</span>
            <span class="kwb">int</span> requests <span class="sym">=</span> n <span class="sym">*</span> reply<span class="sym">.</span>multiplier<span class="sym">;</span>
            <span class="kwa">while</span> <span class="sym">(</span>requests<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){</span>
               s<span class="sym">.</span><span class="kwd">Write</span><span class="sym">(</span>requestContents<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> requestContents<span class="sym">.</span>Length<span class="sym">);</span>
               <span class="kwa">while</span> <span class="sym">((</span>byteCount <span class="sym">+=</span> s<span class="sym">.</span><span class="kwd">Read</span><span class="sym">(</span>replyBuffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> replyBuffer<span class="sym">.</span>Length<span class="sym">)) &lt;</span> reply<span class="sym">.</span>size<span class="sym">){}</span>

               bytes <span class="sym">+=</span> byteCount<span class="sym">;</span>
               byteCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
               replies<span class="sym">++;</span>
            <span class="sym">}</span>
            s<span class="sym">.</span><span class="kwd">Write</span><span class="sym">(</span>requestContents<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> requestContents<span class="sym">.</span>Length<span class="sym">);</span> <span class="slc">// stop listener</span>
         <span class="sym">}</span>
         client<span class="sym">.</span><span class="kwd">Close</span><span class="sym">();</span>

         Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;replies: {0}</span><span class="esc">\t</span><span class="str">bytes: {1}&quot;</span><span class="sym">,</span> replies<span class="sym">,</span> bytes<span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">ReplyToRequests</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
      <span class="kwb">byte</span><span class="sym">[]</span> requestBuffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFFER_SIZE<span class="sym">];</span>

      TcpListener listener <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">TcpListener</span><span class="sym">(</span>PORT<span class="sym">);</span>
      listener<span class="sym">.</span><span class="kwd">Start</span><span class="sym">();</span>

      <span class="kwa">using</span> <span class="sym">(</span>TcpClient client <span class="sym">=</span> listener<span class="sym">.</span><span class="kwd">AcceptTcpClient</span><span class="sym">()){</span>
         NetworkStream s <span class="sym">=</span> client<span class="sym">.</span><span class="kwd">GetStream</span><span class="sym">();</span>

         <span class="kwa">foreach</span> <span class="sym">(</span>Reply reply in replyTypes<span class="sym">)</span>
         <span class="sym">{</span>
            reply<span class="sym">.</span>contents <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>reply<span class="sym">.</span>size<span class="sym">];</span>
            <span class="kwb">int</span> requests <span class="sym">=</span> n <span class="sym">*</span> reply<span class="sym">.</span>multiplier<span class="sym">;</span>

            <span class="kwa">while</span> <span class="sym">((</span>s<span class="sym">.</span><span class="kwd">Read</span><span class="sym">(</span>requestBuffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> REQUEST_SIZE<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">)&amp;&amp;(</span>requests<span class="sym">++ &lt;</span> <span class="num">0</span><span class="sym">))</span>
               s<span class="sym">.</span><span class="kwd">Write</span><span class="sym">(</span>reply<span class="sym">.</span>contents<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> reply<span class="sym">.</span>size<span class="sym">);</span>
         <span class="sym">}</span>
      <span class="sym">}</span>

      listener<span class="sym">.</span><span class="kwd">Stop</span><span class="sym">();</span>
   <span class="sym">}</span>


   <span class="kwa">class</span> Reply <span class="sym">{</span>
      <span class="kwa">internal</span> <span class="kwb">int</span> multiplier<span class="sym">,</span> size<span class="sym">;</span>
      <span class="kwa">internal</span> <span class="kwb">byte</span><span class="sym">[]</span> contents<span class="sym">;</span>

      <span class="kwa">internal</span> <span class="kwd">Reply</span><span class="sym">(</span><span class="kwb">int</span> multiplier<span class="sym">,</span> <span class="kwb">int</span> size<span class="sym">){</span>
         <span class="kwa">this</span><span class="sym">.</span>multiplier <span class="sym">=</span> multiplier<span class="sym">;</span>
         <span class="kwa">this</span><span class="sym">.</span>size <span class="sym">=</span> size<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>
