<span class="com">{-# OPTIONS -fbang-patterns #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Don Stewart</span>
<span class="slc">--</span>
<span class="kwa">import</span> Data.<span class="kwb">Char</span>
<span class="kwa">import</span> Data.ByteString.Base
<span class="kwa">import qualified</span> Data.ByteString.Char8      <span class="kwa">as</span> S
<span class="kwa">import qualified</span> Data.ByteString.Lazy.Char8 <span class="kwa">as</span> L

main <span class="sym">=</span> print . new <span class="num">0</span> . L.toChunks <span class="sym">=&lt;&lt;</span> L.getContents

new  i <span class="sym">[]      =</span> i
new <span class="sym">!</span>i <span class="sym">(!</span>s<span class="sym">:</span>t<span class="sym">:</span>ts<span class="sym">) |</span> S.last s <span class="sym">/=</span> '\n' <span class="sym">=</span> new <span class="sym">(</span>add i s'<span class="sym">)</span> ts'
  <span class="kwa">where</span>
    <span class="sym">(</span>s'<span class="sym">,</span>r<span class="sym">) =</span> S.breakEnd <span class="sym">(==</span>'\n'<span class="sym">)</span> s
    ts'    <span class="sym">= (</span>S.append r t<span class="sym">) :</span> ts
new  i <span class="sym">(</span>s<span class="sym">:</span> ss<span class="sym">) =</span> new <span class="sym">(</span>add i s<span class="sym">)</span> ss

<span class="slc">--</span>
<span class="slc">-- now jump into the fast path</span>
<span class="slc">--</span>
add <span class="sym">!</span>i <span class="sym">!</span>s    <span class="sym">|</span> S.null s  <span class="sym">=</span> i
             <span class="sym">|</span> x <span class="sym">==</span> '<span class="sym">-</span>'  <span class="sym">=</span> sub i <span class="num">0</span> xs
             <span class="sym">|</span> otherwise <span class="sym">=</span> pos i <span class="sym">(</span>parse x<span class="sym">)</span> xs
  <span class="kwa">where</span> <span class="sym">(</span>x<span class="sym">,</span>xs<span class="sym">) =</span> uncons s

sub <span class="sym">!</span>i <span class="sym">!</span>n <span class="sym">!</span>t <span class="sym">|</span> y <span class="sym">==</span> '\n'  <span class="sym">=</span> add <span class="sym">(</span>i<span class="sym">-</span>n<span class="sym">)</span> ys
             <span class="sym">|</span> otherwise  <span class="sym">=</span> sub i n' ys
  <span class="kwa">where</span> <span class="sym">(</span>y<span class="sym">,</span>ys<span class="sym">) =</span> uncons t
        n'     <span class="sym">=</span> parse y <span class="sym">+</span> <span class="num">10</span> <span class="sym">*</span> n

pos <span class="sym">!</span>i <span class="sym">!</span>n <span class="sym">!</span>t <span class="sym">|</span> y <span class="sym">==</span> '\n' <span class="sym">=</span> add <span class="sym">(</span>i<span class="sym">+</span>n<span class="sym">)</span> ys
             <span class="sym">|</span> otherwise <span class="sym">=</span> pos i n' ys
  <span class="kwa">where</span> <span class="sym">(</span>y<span class="sym">,</span>ys<span class="sym">) =</span> uncons t
        n'     <span class="sym">=</span> parse y <span class="sym">+</span> <span class="num">10</span> <span class="sym">*</span> n

parse c  <span class="sym">=</span> ord c <span class="sym">-</span> ord '<span class="num">0</span>'

uncons s <span class="sym">= (</span>w2c <span class="sym">(</span>unsafeHead s<span class="sym">),</span> unsafeTail s<span class="sym">)</span>
