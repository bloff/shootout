<span class="line">    1 </span><span class="sym">/*</span> The Great Computer Language Shootout
<span class="line">    2 </span>     contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)
</span><span class="line">    3 </span><span class="sym"> 
</span><span class="line">    4 </span><span class="sym"> </span>   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/
</span><span class="line">    5 </span><span class="sym"> 
</span><span class="line">    6 </span><span class="sym"> </span>To compile<span class="sym">:
</span><span class="line">    7 </span><span class="sym">         </span>   cleanIDE.exe <span class="slc">--batch-force-build &quot;e:\shoot\contrib\clean\lists2.prj&quot; 
</span><span class="line">    8 </span><span class="slc"></span>
<span class="line">    9 </span> To run<span class="sym">:
</span><span class="line">   10 </span><span class="sym"> </span>   lists2.exe <span class="sym">-</span>con <span class="num">16
</span><span class="line">   11 </span><span class="num"> </span><span class="sym">*/
</span><span class="line">   12 </span><span class="sym"> 
</span><span class="line">   13 </span><span class="sym"> 
</span><span class="line">   14 </span><span class="sym"> </span><span class="kwa">module</span> lists2
<span class="line">   15 </span> <span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout<span class="sym">,</span> StdOverloadedList
<span class="line">   16 </span>
<span class="line">   17 </span>  Start <span class="sym">=</span> toString <span class="sym">(</span>iter argi lists <span class="num">10000</span><span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span>
<span class="line">   18 </span>
<span class="line">   19 </span>  lists n
<span class="line">   20 </span>    #<span class="sym">!</span> l1 <span class="sym">= [</span>#<span class="num">1</span>..n<span class="sym">!]
</span><span class="line">   21 </span><span class="sym"> </span>   #<span class="sym">!</span> l2 <span class="sym">= [</span># x \\ x <span class="sym">&lt;|-</span> l1 <span class="sym">!]
</span><span class="line">   22 </span><span class="sym"> </span>   #<span class="sym">!</span> l3 <span class="sym">= [</span>#<span class="sym">!]
</span><span class="line">   23 </span><span class="sym"> </span>   #<span class="sym">! (</span>l2<span class="sym">,</span>l3<span class="sym">) =</span> mv l2 <span class="sym">(</span>Reverse l3<span class="sym">)
</span><span class="line">   24 </span><span class="sym"> </span>   #<span class="sym">! (</span>l3<span class="sym">,</span>l2<span class="sym">) =</span> mv <span class="sym">(</span>Reverse l3<span class="sym">) (</span>Reverse l2<span class="sym">)
</span><span class="line">   25 </span><span class="sym"> </span>   #<span class="sym">!</span> l1 <span class="sym">=</span> Reverse l1
<span class="line">   26 </span>    <span class="sym">=</span> if <span class="sym">(((</span>Hd l1<span class="sym">) ==</span> n<span class="sym">) &amp;&amp; (</span>l1 <span class="sym">==</span> l2<span class="sym">)) (</span>Length l1<span class="sym">) -</span><span class="num">1
</span><span class="line">   27 </span><span class="num"> 
</span><span class="line">   28 </span><span class="num">       </span>   <span class="kwa">where
</span><span class="line">   29 </span><span class="kwa"> </span>   mv a<span class="sym">=:[|]</span> b <span class="sym">= (</span>a<span class="sym">,</span>Reverse b<span class="sym">)
</span><span class="line">   30 </span><span class="sym"> </span>   mv <span class="sym">[|</span>h<span class="sym">:</span>t<span class="sym">]</span> b <span class="sym">=</span> mv t <span class="sym">[</span>#h<span class="sym">:</span>b<span class="sym">!]
</span><span class="line">   31 </span><span class="sym"> </span>    
