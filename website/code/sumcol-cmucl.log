BUILD COMMANDS FOR: sumcol.cmucl

Mon Dec  3 23:02:06 PST 2007

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "sumcol.cmucl_compile")'
### START sumcol.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(asdf:operate 'asdf:load-op 'cl-ppcre)
(compile-file "sumcol.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END sumcol.cmucl_compile

; Loading #P"/opt/shootout/shootout/bench/sumcol/tmp/sumcol.cmucl_compile".
; loading system definition from /usr/share/common-lisp/systems/cl-ppcre.asd
; into #<The ASDF0 package>
;; Loading #P"/usr/share/common-lisp/source/cl-ppcre/cl-ppcre.asd".
; registering #<SYSTEM :CL-PPCRE {5812A815}> as CL-PPCRE
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/packages.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/specials.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/util.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/errors.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/lexer.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/parser.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/regex-class.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/convert.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/optimize.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/closures.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/repetition-closures.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/scanner.x86f".
;; Loading #P"/var/cache/common-lisp-controller/1000/cmucl/cl-ppcre/api.x86f".
; [GC threshold exceeded with 12,012,856 bytes in use.  Commencing GC.]
; [GC completed with 1,373,720 bytes retained and 10,639,136 bytes freed.]
; [GC will next occur when at least 13,373,720 bytes are in use.]

; Python version 1.1, VM version Intel x86 on 03 DEC 07 11:02:12 pm.
; Compiling: /opt/shootout/shootout/bench/sumcol/tmp/sumcol.cmucl 03 DEC 07 11:02:06 pm

; Converted MAIN.
; Compiling DEFUN MAIN: 
; Compiling Creation Form for #<KERNEL::CLASS-CELL STREAM:SIMPLE-STREAM>: 
; Compiling Creation Form for #<KERNEL::CLASS-CELL FUNDAMENTAL-STREAM>: 

; 
; 
; File: /opt/shootout/shootout/bench/sumcol/tmp/sumcol.cmucl

; In: DEFUN MAIN

;   (LOOP FOR INT = #...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY IF SETQ 
; ==>
;   (+ RES (THE FIXNUM INT))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-DOUBLE-FLOAT.
; 
;   (READ-CHAR X NIL #\Null)
; Note: Return type not fixed values, so can't use known return convention:
;   *
; 
;   (LOOP FOR INT = #...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY IF SETQ 
; ==>
;   (+ RES (THE FIXNUM INT))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; 
;   (* INT SGN)
; Note: Doing signed word to integer coercion (cost 20) to "<return value>".
; 
; Byte Compiling Top-Level Form: 

; 
; 
; File: /opt/shootout/shootout/bench/sumcol/tmp/sumcol.cmucl

; In: DEFUN MAIN

;   (READ-CHAR X NIL #\Null)
; --> BLOCK LET LISP::STREAM-DISPATCH ETYPECASE LET COND IF COND IF PROGN 
; ==>
;   (STREAM::%READ-CHAR STREAM LISP::EOF-ERRORP LISP::EOF-VALUE
;    LISP::RECURSIVE-P ...)
; Warning: Undefined function STREAM::%READ-CHAR 
; 
; --> BLOCK LET LISP::STREAM-DISPATCH ETYPECASE LET COND IF COND IF COND IF 
; --> PROGN LET 
; ==>
;   (STREAM-READ-CHAR STREAM)
; Warning: Undefined function STREAM-READ-CHAR 
; ; 

; Warning: These functions are undefined:
;   STREAM::%READ-CHAR STREAM-READ-CHAR
; 

; Compilation unit finished.
;   3 warnings
;   8 notes


; sumcol.x86f written.
; Compilation finished in 0:00:00.
### START sumcol.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "sumcol.x86f" :verbose nil :print nil)
(main) (quit)
### END sumcol.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "sumcol.cmucl_run" :verbose nil :print nil)' %A


PROGRAM OUTPUT
==============
10500000
