<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * regexmatch.cyc</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> */</span>

<span class="dir">#include &lt;core.h&gt;</span>   <span class="com">/* these includes ensure we get Cyclone's libraries */</span><span class="dir"></span>
<span class="dir">#include &lt;stdio.h&gt;</span>  <span class="com">/* outside of the extern &quot;C include&quot;.               */</span><span class="dir"></span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;assert.h&gt;</span>
<span class="dir">#include &lt;sys/types.h&gt;</span>
<span class="dir">#include &lt;sys/stat.h&gt;</span>
<span class="dir">#include &lt;fcntl.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;assert.h&gt;</span>

<span class="com">/* Put the unsafe C interface in a separate namespace. */</span>
<span class="kwa">namespace</span> UnsafePcre <span class="sym">{</span>
<span class="kwc">extern</span> <span class="str">&quot;C include&quot;</span> <span class="sym">{</span>  <span class="com">/* tell Cyclone that &lt;pcre.h&gt; is C code */</span>
<span class="dir">#if defined(__CYGWIN__)</span>
<span class="dir">#include &lt;pcre.h&gt;</span>     <span class="com">/* include the pcre C interface */</span><span class="dir"></span>
<span class="dir">#else</span>
<span class="dir">#include</span> <span class="dstr">&quot;/usr/include/pcre.h&quot;</span><span class="dir"></span>
<span class="dir">#endif</span>
  <span class="kwc">extern</span> <span class="kwb">void</span> <span class="sym">*</span><span class="kwd">GC_malloc</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">);</span>
  <span class="kwc">extern</span> <span class="kwb">void</span> <span class="kwd">Cyc_Core_ufree</span><span class="sym">(</span><span class="kwb">void</span> <span class="sym">*);</span>
  <span class="kwb">void</span> <span class="kwd">pcre_init</span><span class="sym">() {</span>
    pcre_malloc <span class="sym">=</span> GC_malloc<span class="sym">;</span>
    pcre_free<span class="sym">=</span> Cyc_Core_ufree<span class="sym">;</span>
  <span class="sym">}</span>
<span class="sym">}</span> cyclone_override <span class="sym">{</span>
  pcre <span class="sym">*</span>`U <span class="kwd">pcre_compile</span><span class="sym">(</span><span class="kwb">const char</span> &#64;pattern<span class="sym">,</span> <span class="kwb">int</span> options<span class="sym">,</span>
            <span class="kwb">const char</span> <span class="sym">*</span>`H <span class="sym">*</span>errptr<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">*</span>erroffset<span class="sym">,</span>
            <span class="kwb">const unsigned char</span> <span class="sym">*</span>tableptr<span class="sym">);</span>
  <span class="kwb">int</span> <span class="kwd">pcre_exec</span><span class="sym">(</span><span class="kwb">const</span> pcre &#64;code<span class="sym">,</span> <span class="kwb">const</span> pcre_extra <span class="sym">*</span>extra<span class="sym">,</span>
                <span class="kwb">const char</span> <span class="sym">*</span>subject<span class="sym">,</span> <span class="kwb">int</span> length<span class="sym">,</span>
        <span class="kwb">int</span> startoffset<span class="sym">,</span> <span class="kwb">int</span> options<span class="sym">,</span>
        <span class="kwb">int</span> <span class="sym">*</span>ovector<span class="sym">,</span> <span class="kwb">int</span> ovecsize<span class="sym">);</span>
  pcre_extra <span class="sym">*</span><span class="kwd">pcre_study</span><span class="sym">(</span><span class="kwb">const</span> pcre &#64;code<span class="sym">,</span> <span class="kwb">int</span> options<span class="sym">,</span> <span class="kwb">const char</span> <span class="sym">*</span>`H <span class="sym">*</span>errptr<span class="sym">);</span>
  <span class="kwb">int</span> <span class="kwd">pcre_fullinfo</span><span class="sym">(</span><span class="kwb">const</span> pcre &#64;code<span class="sym">,</span> <span class="kwb">const</span> pcre_extra <span class="sym">*</span>extra<span class="sym">,</span> <span class="kwb">int</span> what<span class="sym">,</span>
            <span class="kwb">void</span> <span class="sym">*</span>where<span class="sym">);</span>
<span class="sym">}</span> export <span class="sym">{</span> pcre_compile<span class="sym">,</span> pcre_study<span class="sym">,</span> pcre_fullinfo<span class="sym">,</span> pcre_exec<span class="sym">,</span> pcre_init<span class="sym">,</span> pcre_malloc<span class="sym">,</span> pcre_free<span class="sym">; }</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">dummy_prevent_treeshake</span><span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>\U `H a<span class="sym">)</span> <span class="kwd">__attribute</span><span class="sym">((</span><span class="kwd">consume</span><span class="sym">(</span><span class="num">1</span><span class="sym">))) {</span>
  Core<span class="sym">::</span><span class="kwd">ufree</span><span class="sym">(</span>a<span class="sym">);</span>
  UnsafePcre<span class="sym">::</span>pcre_malloc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  UnsafePcre<span class="sym">::</span>pcre_free <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="com">/* Make a nice wrapper for the unsafe C code */</span>
<span class="kwa">namespace</span> Pcre <span class="sym">{</span>
  <span class="kwc">typedef</span> UnsafePcre<span class="sym">::</span>pcre pcre<span class="sym">;</span>
  <span class="kwc">typedef</span> UnsafePcre<span class="sym">::</span>pcre_extra pcre_extra<span class="sym">;</span>

  <span class="com">/* wrapper for pcre_compile -- doesn't do much */</span>
  pcre <span class="sym">*</span>`U <span class="kwd">pcre_compile</span><span class="sym">(</span><span class="kwb">const char</span> ?pattern<span class="sym">,</span> <span class="kwb">int</span> options<span class="sym">,</span>
            <span class="kwb">const char</span> <span class="sym">*</span>`H <span class="sym">*</span>errptr<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">*</span>erroffset<span class="sym">,</span>
            <span class="kwb">unsigned char</span> ?tableptr<span class="sym">) {</span>
    <span class="kwa">return</span> UnsafePcre<span class="sym">::</span><span class="kwd">pcre_compile</span><span class="sym">(</span>pattern<span class="sym">,</span> options<span class="sym">,</span> errptr<span class="sym">,</span> erroffset<span class="sym">,</span>
                                    tableptr<span class="sym">);</span>
  <span class="sym">}</span>

  <span class="com">/* wrapper for pcre_exec -- checks that sizes and offsets are in bounds */</span>
  <span class="kwb">int</span> <span class="kwd">pcre_exec</span><span class="sym">(</span><span class="kwb">const</span> pcre &#64;code<span class="sym">,</span> <span class="kwb">const</span> pcre_extra <span class="sym">*</span>extra<span class="sym">,</span>
                <span class="kwb">const char</span> ?subject<span class="sym">,</span> <span class="kwb">int</span> length<span class="sym">,</span> <span class="kwb">int</span> startoffset<span class="sym">,</span>
                <span class="kwb">int</span> options<span class="sym">,</span> <span class="kwb">int</span> ?ovector<span class="sym">,</span> <span class="kwb">int</span> ovecsize<span class="sym">) {</span>
    <span class="kwd">assert</span><span class="sym">(</span>length <span class="sym">&gt;=</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> <span class="kwd">numelts</span><span class="sym">(</span>subject<span class="sym">) &gt;=</span> length<span class="sym">);</span>
    <span class="kwd">assert</span><span class="sym">(</span>startoffset <span class="sym">==</span> <span class="num">0</span> <span class="sym">|| (</span>startoffset <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> startoffset <span class="sym">&lt;</span> length<span class="sym">));</span>
    <span class="kwd">assert</span><span class="sym">(</span>ovecsize <span class="sym">&gt;=</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> <span class="kwd">numelts</span><span class="sym">(</span>ovector<span class="sym">) &gt;=</span> ovecsize<span class="sym">);</span>
    <span class="kwa">return</span> UnsafePcre<span class="sym">::</span><span class="kwd">pcre_exec</span><span class="sym">(</span>code<span class="sym">,</span> extra<span class="sym">,</span> subject<span class="sym">,</span> length<span class="sym">,</span> startoffset<span class="sym">,</span>
                                 options<span class="sym">,</span> ovector<span class="sym">,</span> ovecsize<span class="sym">);</span>
  <span class="sym">}</span>

  pcre_extra <span class="sym">*</span><span class="kwd">pcre_study</span><span class="sym">(</span><span class="kwb">const</span> pcre &#64;code<span class="sym">,</span> <span class="kwb">int</span> options<span class="sym">,</span> <span class="kwb">const char</span><span class="sym">*</span>`H <span class="sym">*</span>errptr<span class="sym">) {</span>
    <span class="kwa">return</span> UnsafePcre<span class="sym">::</span><span class="kwd">pcre_study</span><span class="sym">(</span>code<span class="sym">,</span>options<span class="sym">,</span>errptr<span class="sym">);</span>
  <span class="sym">}</span>

  <span class="com">/* FIX: hack for now; should be a variant */</span>
  <span class="kwb">int</span> <span class="kwd">pcre_fullinfo</span><span class="sym">(</span><span class="kwb">const</span> pcre &#64;code<span class="sym">,</span> <span class="kwb">const</span> pcre_extra <span class="sym">*</span>extra<span class="sym">,</span> <span class="kwb">int</span> what<span class="sym">,</span> <span class="kwb">int</span> &#64;where<span class="sym">) {</span>
    <span class="kwa">return</span> UnsafePcre<span class="sym">::</span><span class="kwd">pcre_fullinfo</span><span class="sym">(</span>code<span class="sym">,</span>extra<span class="sym">,</span>what<span class="sym">,</span>where<span class="sym">);</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="com">/* Open up the safe Pcre namespace for the client */</span>
<span class="kwa">using</span> Pcre<span class="sym">;</span>
<span class="kwb">void</span> <span class="sym">*(*</span>pcre_malloc<span class="sym">)(</span><span class="kwb">size_t</span><span class="sym">);</span>
<span class="kwb">void</span> <span class="sym">(*</span>pcre_free<span class="sym">)(</span><span class="kwb">void</span> <span class="sym">*);</span>

<span class="dir">#define MAXLINES   100</span>
<span class="dir">#define MAXLINELEN 132</span>

<span class="kwb">const char</span> &#64;pattern <span class="sym">=</span>
<span class="str">&quot;(?:^|[^</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">(])&quot;</span>       <span class="com">/* must be preceeded by non-digit */</span>
<span class="str">&quot;(</span><span class="esc">\\</span><span class="str">()?&quot;</span>            <span class="com">/* match 1: possible initial left paren */</span>
<span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>           <span class="com">/* match 2: area code is 3 digits */</span>
<span class="str">&quot;(?(1)</span><span class="esc">\\</span><span class="str">))&quot;</span>         <span class="com">/* if match1 then match right paren */</span>
<span class="str">&quot;[ ]&quot;</span>               <span class="com">/* area code followed by one space */</span>
<span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>           <span class="com">/* match 3: prefix of 3 digits */</span>
<span class="str">&quot;[ -]&quot;</span>              <span class="com">/* separator is either space or dash */</span>
<span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span>        <span class="com">/* match 4: last 4 digits */</span>
<span class="str">&quot;</span><span class="esc">\\</span><span class="str">D&quot;</span>               <span class="com">/* must be followed by a non-digit */</span>
<span class="sym">;</span>


<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> ??argv<span class="sym">) {</span>
    <span class="kwb">int</span> NUM <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwb">int</span> count<span class="sym">;</span>
    <span class="kwb">char</span> ? &#64;nozeroterm cptr <span class="sym">=</span> NULL<span class="sym">;</span>
    <span class="kwb">char</span> ??phones<span class="sym">;</span>
    <span class="kwb">const</span> pcre <span class="sym">*</span>re<span class="sym">;</span>
    <span class="kwb">int</span> erroffset<span class="sym">;</span>
    <span class="kwb">const char</span> <span class="sym">*</span>errptr <span class="sym">=</span> NULL<span class="sym">;</span>
    <span class="kwb">int</span> n<span class="sym">,</span> lines <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">char</span> num<span class="sym">[</span><span class="num">256</span><span class="sym">];</span>
    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> matchlen<span class="sym">;</span>
    <span class="kwb">char</span> <span class="sym">*</span>matchoffset<span class="sym">;</span>
    <span class="kwb">int</span> nmatches<span class="sym">;</span>
    <span class="kwb">int</span> ?ovec<span class="sym">,</span> ovecsize<span class="sym">;</span>
    pcre_extra <span class="sym">*</span>study<span class="sym">;</span>

    UnsafePcre<span class="sym">::</span><span class="kwd">pcre_init</span><span class="sym">();</span>
    phones <span class="sym">=</span> <span class="kwd">malloc</span><span class="sym">(</span>MAXLINES <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">char</span> ?<span class="sym">));</span>
    <span class="kwa">if</span> <span class="sym">(!</span>phones<span class="sym">) {</span>
    <span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;malloc for phones array failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
    <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    lines <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">do</span> <span class="sym">{</span>
    phones<span class="sym">[</span>lines<span class="sym">] =</span> <span class="kwd">malloc</span><span class="sym">(</span>MAXLINELEN<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">(!</span>phones<span class="sym">[</span>lines<span class="sym">]) {</span>
        <span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;malloc to hold line #%d failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> lines<span class="sym">);</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    cptr <span class="sym">=</span> <span class="kwd">fgets</span><span class="sym">(</span>phones<span class="sym">[</span>lines<span class="sym">],</span> MAXLINELEN<span class="sym">,</span> stdin<span class="sym">);</span>
    lines<span class="sym">++;</span>
    <span class="kwa">if</span> <span class="sym">(</span>lines <span class="sym">&gt;</span> MAXLINES<span class="sym">) {</span>
        <span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;MAXLINES is too small</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
        <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>cptr<span class="sym">);</span>

    re <span class="sym">=</span> <span class="kwd">pcre_compile</span><span class="sym">(</span>pattern<span class="sym">,</span> <span class="num">0</span><span class="sym">, &amp;</span>errptr<span class="sym">, &amp;</span>erroffset<span class="sym">,</span> NULL<span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">(!</span>re<span class="sym">) {</span>
    <span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;can't open compile regexp</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
    <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>

    study <span class="sym">=</span> <span class="kwd">pcre_study</span><span class="sym">((</span><span class="kwb">const</span> pcre &#64;<span class="sym">)</span>re<span class="sym">,</span> <span class="num">0</span><span class="sym">, &amp;</span>errptr<span class="sym">);</span>

    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">pcre_fullinfo</span><span class="sym">((</span><span class="kwb">const</span> pcre &#64;<span class="sym">)</span>re<span class="sym">,</span> NULL<span class="sym">,</span> PCRE_INFO_CAPTURECOUNT<span class="sym">, &amp;</span>nmatches<span class="sym">) !=</span> <span class="num">0</span><span class="sym">) {</span>
    <span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;pcre_fullinfo failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
    <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    nmatches<span class="sym">++;</span>         <span class="com">/* add match of entire pattern */</span>

    ovecsize <span class="sym">=</span> nmatches <span class="sym">*</span> <span class="num">3</span><span class="sym">;</span>
    ovec <span class="sym">=</span> <span class="kwd">malloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">) *</span> ovecsize<span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">(!</span>ovec<span class="sym">) {</span>
    <span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;malloc for ovec array failed</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
    <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>

    count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>NUM<span class="sym">--) {</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>lines<span class="sym">;</span> i<span class="sym">++) {</span>
        n <span class="sym">=</span> <span class="kwd">pcre_exec</span><span class="sym">((</span><span class="kwb">const</span> pcre &#64;<span class="sym">)</span>re<span class="sym">,</span> study<span class="sym">,</span>
              phones<span class="sym">[</span>i<span class="sym">],</span> <span class="kwd">strlen</span><span class="sym">(</span>phones<span class="sym">[</span>i<span class="sym">]),</span> <span class="num">0</span><span class="sym">,</span>
              <span class="num">0</span><span class="sym">,</span> ovec<span class="sym">,</span> ovecsize<span class="sym">);</span>
        <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> nmatches<span class="sym">) {</span>
        <span class="com">/* stuff the match into the buffer &quot;num&quot; */</span>
        k <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span><span class="num">2</span><span class="sym">;</span>    <span class="com">/* initial offset into ovec */</span>
        <span class="com">/* areacode */</span>
        j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">'('</span><span class="sym">;</span>
        matchoffset <span class="sym">=</span> phones<span class="sym">[</span>i<span class="sym">] +</span> ovec<span class="sym">[</span>k<span class="sym">];</span>
        matchlen <span class="sym">=</span> ovec<span class="sym">[</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] -</span> ovec<span class="sym">[</span>k<span class="sym">];</span>
        <span class="kwd">strncpy</span><span class="sym">(</span>num<span class="sym">+</span>j<span class="sym">,</span> matchoffset<span class="sym">,</span> matchlen<span class="sym">);</span>
        j <span class="sym">+=</span> matchlen<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">;</span>
        num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">')'</span><span class="sym">;</span>
        <span class="com">/* space separator */</span>
        num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">' '</span><span class="sym">;</span>
        <span class="com">/* exchange */</span>
        matchoffset <span class="sym">=</span> phones<span class="sym">[</span>i<span class="sym">] +</span> ovec<span class="sym">[</span>k<span class="sym">];</span>
        matchlen <span class="sym">=</span> ovec<span class="sym">[</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] -</span> ovec<span class="sym">[</span>k<span class="sym">];</span>
        <span class="kwd">strncpy</span><span class="sym">(</span>num<span class="sym">+</span>j<span class="sym">,</span> matchoffset<span class="sym">,</span> matchlen<span class="sym">);</span>
        j <span class="sym">+=</span> matchlen<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">;</span>
        <span class="com">/* dash */</span>
        num<span class="sym">[</span>j<span class="sym">++] =</span> <span class="str">'-'</span><span class="sym">;</span>
        <span class="com">/* last 4 digits */</span>
        matchoffset <span class="sym">=</span> phones<span class="sym">[</span>i<span class="sym">] +</span> ovec<span class="sym">[</span>k<span class="sym">];</span>
        matchlen <span class="sym">=</span> ovec<span class="sym">[</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] -</span> ovec<span class="sym">[</span>k<span class="sym">];</span>
        <span class="kwd">strncpy</span><span class="sym">(</span>num<span class="sym">+</span>j<span class="sym">,</span> matchoffset<span class="sym">,</span> matchlen<span class="sym">);</span>
        j <span class="sym">+=</span> matchlen<span class="sym">;</span> k <span class="sym">+=</span> <span class="num">2</span><span class="sym">;</span>
        <span class="com">/* with a cherry on top */</span>
        num<span class="sym">[</span>j<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">==</span> NUM<span class="sym">) {</span>
            count<span class="sym">++;</span>
            <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%d: %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> count<span class="sym">,</span> num<span class="sym">);</span>
        <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>MAXLINES<span class="sym">;</span> i<span class="sym">++) {</span>
    <span class="kwd">free</span><span class="sym">(</span>phones<span class="sym">[</span>i<span class="sym">]);</span>
    <span class="sym">}</span>
    <span class="kwd">free</span><span class="sym">(</span>phones<span class="sym">);</span>
    <span class="kwd">free</span><span class="sym">(</span>ovec<span class="sym">);</span>

    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>

