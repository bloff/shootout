<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   http://www.bagley.org/~doug/shootout/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release heapsort.d</span>
<span class="com">*/</span>

import std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwb">double</span><span class="sym">[]</span> ary<span class="sym">;</span>

    ary<span class="sym">.</span>length <span class="sym">=</span> n <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    Random r <span class="sym">=</span> <span class="kwa">new</span> Random<span class="sym">();</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> n<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
       ary<span class="sym">[</span>i<span class="sym">] =</span> r<span class="sym">.</span>genRandom<span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>

    heapsort<span class="sym">(</span>ary<span class="sym">);</span>

    writefln<span class="sym">(</span><span class="str">&quot;%.10f&quot;</span><span class="sym">,</span>ary<span class="sym">[</span>n<span class="sym">]);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> heapsort<span class="sym">(</span><span class="kwb">double</span><span class="sym">[]</span> ra<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">;</span>
    <span class="kwb">int</span> ir <span class="sym">=</span> ra<span class="sym">.</span>length <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">int</span> l <span class="sym">= (</span>ir <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">double</span> rra<span class="sym">;</span>

    <span class="kwa">for</span><span class="sym">(;;)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span>
        <span class="sym">{</span>
            rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];</span>
        <span class="sym">}</span>
        <span class="kwa">else</span>
        <span class="sym">{</span>
            rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];</span>
            ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
            <span class="kwa">if</span><span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span>
            <span class="sym">{</span>
                ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;</span>
                <span class="kwa">return</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        i <span class="sym">=</span> l<span class="sym">;</span>
        j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j<span class="sym">; }</span>
            <span class="kwa">if</span><span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">])</span>
            <span class="sym">{</span>
                ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];</span>
                j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">);</span>
            <span class="sym">}</span>
            <span class="kwa">else</span>
            <span class="sym">{</span>
                j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">class</span> Random
<span class="sym">{</span>
<span class="kwc">private</span><span class="sym">:</span>
    <span class="kwb">int</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>
    <span class="kwb">const int</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>
    <span class="kwb">const int</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span>
    <span class="kwb">const int</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>
<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwb">double</span> genRandom<span class="sym">(</span><span class="kwb">double</span> max<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">return</span><span class="sym">(</span>max <span class="sym">* (</span>last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) /</span> IM<span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>
