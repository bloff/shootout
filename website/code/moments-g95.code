<span class="slc">! -*- mode: f90 -*-</span>
<span class="slc">!</span>
<span class="slc">! $Id: moments-g95.code,v 1.8 2006-06-08 12:22:35 bfulgham Exp $ ; $Name:  $</span>
<span class="slc">!</span>
<span class="slc">! The Great Computer Language Shootout</span>
<span class="slc">! http://shootout.alioth.debian.org/</span>
<span class="slc">!</span>
<span class="slc">! Simon Geard, 1/12/04</span>
<span class="slc">!</span>
<span class="slc">! Building info.</span>
<span class="slc">! ==============</span>
<span class="slc">!</span>
<span class="slc">! Linux  - using the Intel Fortran90 compiler:</span>
<span class="slc">!</span>
<span class="slc">!          ifort statistics.f90 -O3 -static-libcxa -o statistics</span>
<span class="slc">!</span>
<span class="slc">! WinXP  - Compaq Visual Fortran 6.6c</span>
<span class="slc">!</span>
<span class="slc">!          f90 statistics.f90 /link /libpath:&quot;d:\Program Files\Microsoft Visual Studio\df98\lib&quot;</span>
<span class="slc">!</span>
<span class="slc">! Cygwin - g95 compiler</span>
<span class="slc">!</span>
<span class="slc">!          g95 statistics.f90 -O3 -o statistics.exe</span>
<span class="slc">!</span>
<span class="slc">!!$n:                  500</span>
<span class="slc">!!$median:             250.500000</span>
<span class="slc">!!$mean:               250.500000</span>
<span class="slc">!!$average_deviation:  125.000000</span>
<span class="slc">!!$standard_deviation: 144.481833</span>
<span class="slc">!!$variance:           20875.000000</span>
<span class="slc">!!$skew:               0.000000</span>
<span class="slc">!!$kurtosis:           -1.207202</span>


program statistics
  implicit none
  integer n<span class="sym">,</span> i<span class="sym">,</span> nrepeats<span class="sym">,</span> k
  real<span class="sym">*</span><span class="num">8</span> adev<span class="sym">,</span> sdev<span class="sym">,</span> var<span class="sym">,</span> sk<span class="sym">,</span> kur<span class="sym">,</span> mean<span class="sym">,</span> med<span class="sym">,</span> s1<span class="sym">,</span> s2<span class="sym">,</span> s3<span class="sym">,</span> s4
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> argv
  integer<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> data<span class="sym">,</span> buff
  integer<span class="sym">,</span> parameter <span class="sym">::</span> blocksize <span class="sym">=</span> <span class="num">512</span>

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)</span>
  read<span class="sym">(</span>argv<span class="sym">,*)</span> nrepeats
  nrepeats <span class="sym">=</span> max<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>nrepeats<span class="sym">)</span>

  <span class="slc">! Read the data on standard input</span>
  allocate<span class="sym">(</span>data<span class="sym">(</span>blocksize<span class="sym">))</span>
  n <span class="sym">=</span> <span class="num">0</span>
  do
     n <span class="sym">=</span> n <span class="sym">+</span> <span class="num">1</span>
     if <span class="sym">(</span>n <span class="sym">&gt;</span> size<span class="sym">(</span>data<span class="sym">))</span> then
        allocate<span class="sym">(</span>buff<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">)))</span>
        buff <span class="sym">=</span> data
        deallocate<span class="sym">(</span>data<span class="sym">)</span>
        allocate<span class="sym">(</span>data<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>size<span class="sym">(</span>buff<span class="sym">)))</span>
        data<span class="sym">(</span><span class="num">1</span><span class="sym">:</span>size<span class="sym">(</span>buff<span class="sym">)) =</span> buff
        deallocate<span class="sym">(</span>buff<span class="sym">)</span>
     end if
     read<span class="sym">(*,*,</span> end<span class="sym">=</span><span class="num">10</span><span class="sym">)</span> data<span class="sym">(</span>n<span class="sym">)</span>
  end do
<span class="num">10</span> continue
  n <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span>
  allocate<span class="sym">(</span>buff<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">)))</span>
  buff <span class="sym">=</span> data
  deallocate<span class="sym">(</span>data<span class="sym">)</span>
  allocate<span class="sym">(</span>data<span class="sym">(</span>n<span class="sym">))</span>
  data <span class="sym">=</span> buff
  deallocate<span class="sym">(</span>buff<span class="sym">)</span>

  <span class="slc">! Process data nrepeats times</span>
  do k<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> nrepeats
     mean <span class="sym">=</span>  real<span class="sym">(</span>sum<span class="sym">(</span>data<span class="sym">))/</span>n
     s1 <span class="sym">=</span> <span class="num">0.0</span>
     s2 <span class="sym">=</span> <span class="num">0.0</span>
     s3 <span class="sym">=</span> <span class="num">0.0</span>
     s4 <span class="sym">=</span> <span class="num">0.0</span>
     do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n
        s1 <span class="sym">=</span> s1 <span class="sym">+</span> abs<span class="sym">(</span>data<span class="sym">(</span>i<span class="sym">) -</span> mean<span class="sym">)</span>
        s2 <span class="sym">=</span> s2 <span class="sym">+ (</span>data<span class="sym">(</span>i<span class="sym">)-</span>mean<span class="sym">)**</span><span class="num">2</span>
        s3 <span class="sym">=</span> s3 <span class="sym">+ (</span>data<span class="sym">(</span>i<span class="sym">)-</span>mean<span class="sym">)**</span><span class="num">3</span>
        s4 <span class="sym">=</span> s4 <span class="sym">+ (</span>data<span class="sym">(</span>i<span class="sym">)-</span>mean<span class="sym">)**</span><span class="num">4</span>
     end do
     adev <span class="sym">=</span> s1<span class="sym">/</span>n
     var <span class="sym">=</span> s2<span class="sym">/(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
     sdev <span class="sym">=</span> sqrt<span class="sym">(</span>var<span class="sym">)</span>
     sk <span class="sym">=</span> s3<span class="sym">*</span>n<span class="sym">/((</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)*(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">))</span>
     kur <span class="sym">=</span> s4<span class="sym">/(</span>n<span class="sym">*</span>var<span class="sym">**</span><span class="num">2</span><span class="sym">) -</span> <span class="num">3</span>
     med <span class="sym">=</span> median<span class="sym">(</span>data<span class="sym">)</span>
  end do

  <span class="slc">! Output the results</span>
  write<span class="sym">(*,</span><span class="str">'(a,i0)'</span><span class="sym">)</span> <span class="str">'n:                  '</span><span class="sym">,</span>n
  write<span class="sym">(*,</span><span class="num">101</span><span class="sym">)</span> <span class="str">'median:             '</span><span class="sym">,</span> med
  write<span class="sym">(*,</span><span class="num">101</span><span class="sym">)</span> <span class="str">'mean:               '</span><span class="sym">,</span> mean
  write<span class="sym">(*,</span><span class="num">101</span><span class="sym">)</span> <span class="str">'average_deviation:  '</span><span class="sym">,</span> adev
  write<span class="sym">(*,</span><span class="num">101</span><span class="sym">)</span> <span class="str">'standard_deviation: '</span><span class="sym">,</span> sdev
  write<span class="sym">(*,</span><span class="str">'(a,f12.6)'</span><span class="sym">)</span> <span class="str">'variance:           '</span><span class="sym">,</span> var
  write<span class="sym">(*,</span><span class="str">'(a,f8.6)'</span><span class="sym">)</span> <span class="str">'skew:               '</span><span class="sym">,</span> sk
  write<span class="sym">(*,</span><span class="str">'(a,f9.6)'</span><span class="sym">)</span> <span class="str">'kurtosis:           '</span><span class="sym">,</span> kur
<span class="num">101</span> format<span class="sym">(</span>a<span class="sym">,</span>f10.6<span class="sym">)</span>

contains

  real<span class="sym">*</span><span class="num">8</span> function median<span class="sym">(</span>data<span class="sym">)</span>
    integer<span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> data
    integer<span class="sym">,</span> dimension<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">))    ::</span> work
    logical<span class="sym">,</span> dimension<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">))    ::</span> mask
    integer<span class="sym">,</span> dimension<span class="sym">(</span>size<span class="sym">(</span>data<span class="sym">))    ::</span> mnl
    integer i<span class="sym">,</span> n
    intrinsic minloc

    n <span class="sym">=</span> size<span class="sym">(</span>data<span class="sym">)</span>
    mask <span class="sym">= (/ (</span>.true.<span class="sym">,</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">) /)</span>
    work <span class="sym">= (/ (-</span><span class="num">1</span><span class="sym">,</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">) /)</span>
    median <span class="sym">=</span> <span class="num">0.0</span>
    <span class="slc">! Sort data - only need to do the first half + 1</span>
    do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">+</span><span class="num">1</span>
       mnl <span class="sym">=</span> minloc<span class="sym">(</span>data<span class="sym">,</span>mask<span class="sym">)</span>
       work<span class="sym">(</span>i<span class="sym">) =</span> data<span class="sym">(</span>mnl<span class="sym">(</span><span class="num">1</span><span class="sym">))</span>
       mask<span class="sym">(</span>mnl<span class="sym">(</span><span class="num">1</span><span class="sym">)) =</span> .false.
    end do
    if <span class="sym">(</span>mod<span class="sym">(</span>n<span class="sym">,</span><span class="num">2</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">)</span> then
       median <span class="sym">=</span> <span class="num">0.5</span><span class="sym">*(</span>work<span class="sym">(</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">)+</span>work<span class="sym">((</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">)+</span><span class="num">1</span><span class="sym">))</span>
    else
       median <span class="sym">=</span> real<span class="sym">(</span>work<span class="sym">((</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">))</span>
    end if
  end function median


  integer function mode<span class="sym">(</span>data<span class="sym">)</span>
    integer<span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> data
    integer<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> work
    integer mind<span class="sym">,</span> maxd<span class="sym">,</span> i

    maxd <span class="sym">=</span> maxval<span class="sym">(</span>data<span class="sym">)</span>
    mind <span class="sym">=</span> minval<span class="sym">(</span>data<span class="sym">)</span>
    allocate<span class="sym">(</span>work<span class="sym">(</span>mind<span class="sym">:</span>maxd<span class="sym">))</span>
    do i<span class="sym">=</span>mind<span class="sym">,</span> maxd
       work<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0</span>
    end do
    do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>size<span class="sym">(</span>data<span class="sym">)</span>
       work<span class="sym">(</span>data<span class="sym">(</span>i<span class="sym">)) =</span> work<span class="sym">(</span>data<span class="sym">(</span>i<span class="sym">)) +</span> <span class="num">1</span>
    end do
    mode <span class="sym">=</span> maxval<span class="sym">(</span>work<span class="sym">)</span>
    deallocate<span class="sym">(</span>work<span class="sym">)</span>
  end function mode

end program statistics
