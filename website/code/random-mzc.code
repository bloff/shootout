<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/mzscheme -r

<I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">;;; Random implementation, by Jens Axel Sogaard
</FONT></I>
(module random mzscheme
   (provide main)
   <I><FONT COLOR="#B22222">; (define-constant name val) &quot;replaces&quot; all occurences
</FONT></I>   <I><FONT COLOR="#B22222">; of name with val.
</FONT></I>   (define-syntax (define-constant stx)
     (syntax-case stx ()
       ((define-constant id val)
        (syntax (define-syntax id (syntax-id-rules () (_ val)))))))

   (define-constant IM 139968)
   (define-constant IA   3877)
   (define-constant IC  29573)

   (<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">gen_random</FONT></B>
     (<B><FONT COLOR="#A020F0">let</FONT></B> ((LAST 42))
       (<B><FONT COLOR="#A020F0">lambda</FONT></B> (max)
         (<B><FONT COLOR="#A020F0">set!</FONT></B> LAST (modulo (+ (* LAST IA) IC) IM))
         (/ (* max LAST) IM))))

   (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
     (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (<B><FONT COLOR="#A020F0">if</FONT></B> (= (vector-length args) 0)
                  1
                  (string-&gt;number (vector-ref args 0)))))
       (<B><FONT COLOR="#A020F0">let</FONT></B> loop ((iter n))
         (<B><FONT COLOR="#A020F0">if</FONT></B> (&gt; iter 1)
             (<B><FONT COLOR="#A020F0">begin</FONT></B>
               (gen_random 100.0)
               (loop (- iter 1)))))
       (display (gen_random 100.0))
       (newline))))

(require random)
(main (current-command-line-arguments))
</pre></td></tr></table>
