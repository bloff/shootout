<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: ackermann-poplisp.code,v 1.7 2006-09-20 05:50:59 bfulgham Exp $</span>

<span class="sym">(</span><span class="kwa">defun</span> fast<span class="sym">-</span>ack <span class="sym">(</span>m n<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum n m<span class="sym">) (</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)))</span>
  <span class="sym">(</span>the fixnum
    <span class="sym">(</span><span class="kwa">cond</span>
     <span class="sym">((</span><span class="kwa">zerop</span> m<span class="sym">) (</span>the fixnum <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> n<span class="sym">)))</span>
     <span class="sym">((</span><span class="kwa">zerop</span> n<span class="sym">) (</span>the fixnum <span class="sym">(</span>fast<span class="sym">-</span>ack <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> m<span class="sym">)</span> <span class="num">1</span><span class="sym">)))</span>
     <span class="sym">(</span>t <span class="sym">(</span>the fixnum <span class="sym">(</span>fast<span class="sym">-</span>ack <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> m<span class="sym">) (</span>the fixnum <span class="sym">(</span>fast<span class="sym">-</span>ack m <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">)))))))))</span>

<span class="slc">;(defun ack (m n)</span>
<span class="slc">;  (cond</span>
<span class="slc">;   ((zerop m) (1+ n))</span>
<span class="slc">;   ((zerop n) (ack (1- m) 1))</span>
<span class="slc">;   (t (ack (1- m) (ack m (1- n))))))</span>

<span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> pop11<span class="sym">::</span>poparglist<span class="sym">)</span> <span class="str">&quot;1&quot;</span><span class="sym">))))</span>
    <span class="sym">(</span>format <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">*</span> <span class="str">&quot;Ack(3,~A): ~A~%&quot;</span> n <span class="sym">(</span>fast<span class="sym">-</span>ack <span class="num">3</span> n<span class="sym">))</span>
<span class="sym">)</span>
