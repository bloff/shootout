<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">(*
 * $Id: lists-ocamlb.code,v 1.2 2004-11-08 08:15:15 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 * from Benedict Rosenau
 * improved by Jean-Christophe Filliatre
 *)</FONT></I>

module Deque <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#5F9EA0">struct</FONT></B>
  <B><FONT COLOR="#A020F0">type</FONT></B> t <B><FONT COLOR="#5F9EA0">=</FONT></B> { size: <B><FONT COLOR="#228B22">int</FONT></B>; mutable first: <B><FONT COLOR="#228B22">int</FONT></B>; mutable last: <B><FONT COLOR="#228B22">int</FONT></B>; fld: <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#228B22">array</FONT></B> }

  <B><FONT COLOR="#A020F0">exception</FONT></B> Empty
  <B><FONT COLOR="#A020F0">exception</FONT></B> Full

  <B><FONT COLOR="#A020F0">let</FONT></B> empty n <B><FONT COLOR="#5F9EA0">=</FONT></B>
    <B><FONT COLOR="#A020F0">let</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> max (succ n) 1 <B><FONT COLOR="#A020F0">in</FONT></B>
    { size <B><FONT COLOR="#5F9EA0">=</FONT></B> n; first <B><FONT COLOR="#5F9EA0">=</FONT></B> 0; last <B><FONT COLOR="#5F9EA0">=</FONT></B> 0; fld <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.make n 0 }

  <B><FONT COLOR="#A020F0">let</FONT></B> iota n <B><FONT COLOR="#5F9EA0">=</FONT></B>
    <B><FONT COLOR="#A020F0">let</FONT></B> size <B><FONT COLOR="#5F9EA0">=</FONT></B> succ n <B><FONT COLOR="#A020F0">in</FONT></B>
    { size <B><FONT COLOR="#5F9EA0">=</FONT></B> size; first <B><FONT COLOR="#5F9EA0">=</FONT></B> 0; last <B><FONT COLOR="#5F9EA0">=</FONT></B> n; fld <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.init size succ }

  <B><FONT COLOR="#A020F0">let</FONT></B> up n s <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> n &lt; 0 <B><FONT COLOR="#A020F0">then</FONT></B> n <B><FONT COLOR="#5F9EA0">+</FONT></B> s <B><FONT COLOR="#A020F0">else</FONT></B> n
  <B><FONT COLOR="#A020F0">let</FONT></B> down n s <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> n <B><FONT COLOR="#5F9EA0">&gt;=</FONT></B> s <B><FONT COLOR="#A020F0">then</FONT></B> n <B><FONT COLOR="#5F9EA0">-</FONT></B> s <B><FONT COLOR="#A020F0">else</FONT></B> n
  <B><FONT COLOR="#A020F0">let</FONT></B> one_up n s <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> n <B><FONT COLOR="#5F9EA0">==</FONT></B> s <B><FONT COLOR="#5F9EA0">-</FONT></B> 1 <B><FONT COLOR="#A020F0">then</FONT></B> 0 <B><FONT COLOR="#A020F0">else</FONT></B> n <B><FONT COLOR="#5F9EA0">+</FONT></B> 1
  <B><FONT COLOR="#A020F0">let</FONT></B> one_down n s <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> n <B><FONT COLOR="#5F9EA0">==</FONT></B> 0 <B><FONT COLOR="#A020F0">then</FONT></B> s <B><FONT COLOR="#5F9EA0">-</FONT></B> 1 <B><FONT COLOR="#A020F0">else</FONT></B> n <B><FONT COLOR="#5F9EA0">-</FONT></B> 1

  <B><FONT COLOR="#A020F0">let</FONT></B> length q <B><FONT COLOR="#5F9EA0">=</FONT></B> up (q.last <B><FONT COLOR="#5F9EA0">-</FONT></B> q.first) q.size

  <B><FONT COLOR="#A020F0">let</FONT></B> <B><FONT COLOR="#A020F0">rec</FONT></B> array_eq q1 off1 q2 off2 n <B><FONT COLOR="#5F9EA0">=</FONT></B>
    n <B><FONT COLOR="#5F9EA0">==</FONT></B> 0 <B><FONT COLOR="#5F9EA0">|</FONT></B><B><FONT COLOR="#5F9EA0">|</FONT></B>
      q1.fld.(off1) <B><FONT COLOR="#5F9EA0">==</FONT></B> q2.fld.(off2) &amp;&amp;
      (array_eq q1 (one_up off1 q1.size) q2 (one_up off2 q2.size) (n <B><FONT COLOR="#5F9EA0">-</FONT></B> 1))

  <B><FONT COLOR="#A020F0">let</FONT></B> equal q1 q2 <B><FONT COLOR="#5F9EA0">=</FONT></B>
    <B><FONT COLOR="#A020F0">let</FONT></B> len1 <B><FONT COLOR="#5F9EA0">=</FONT></B> length q1 <B><FONT COLOR="#A020F0">in</FONT></B>
    len1 <B><FONT COLOR="#5F9EA0">==</FONT></B> length q2 &amp;&amp; array_eq q1 q1.first q2 q2.first len1

  <B><FONT COLOR="#A020F0">let</FONT></B> nth q n <B><FONT COLOR="#5F9EA0">=</FONT></B>
    <B><FONT COLOR="#A020F0">if</FONT></B> n &lt; 0 or n <B><FONT COLOR="#5F9EA0">&gt;=</FONT></B> length q <B><FONT COLOR="#A020F0">then</FONT></B> failwith <B><FONT COLOR="#BC8F8F">&quot;nth&quot;</FONT></B>;
    q.fld.(down (q.first <B><FONT COLOR="#5F9EA0">+</FONT></B> n) q.size)

  <B><FONT COLOR="#A020F0">let</FONT></B> push_back q elem <B><FONT COLOR="#5F9EA0">=</FONT></B>
    <B><FONT COLOR="#A020F0">let</FONT></B> last' <B><FONT COLOR="#5F9EA0">=</FONT></B> one_up q.last q.size <B><FONT COLOR="#A020F0">in</FONT></B>
    <B><FONT COLOR="#A020F0">if</FONT></B> last' <B><FONT COLOR="#5F9EA0">==</FONT></B> q.first <B><FONT COLOR="#A020F0">then</FONT></B> <B><FONT COLOR="#A020F0">raise</FONT></B> Full;
    q.fld.(q.last) &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> elem;
    q.last &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> last'

  <B><FONT COLOR="#A020F0">let</FONT></B> take_front q <B><FONT COLOR="#5F9EA0">=</FONT></B>
    <B><FONT COLOR="#A020F0">if</FONT></B> q.first <B><FONT COLOR="#5F9EA0">==</FONT></B> q.last <B><FONT COLOR="#A020F0">then</FONT></B> <B><FONT COLOR="#A020F0">raise</FONT></B> Empty;
    <B><FONT COLOR="#A020F0">let</FONT></B> old_first <B><FONT COLOR="#5F9EA0">=</FONT></B> q.first <B><FONT COLOR="#A020F0">in</FONT></B>
    q.first &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> one_up q.first q.size;
    q.fld.(old_first)

  <B><FONT COLOR="#A020F0">let</FONT></B> take_back q <B><FONT COLOR="#5F9EA0">=</FONT></B>
    <B><FONT COLOR="#A020F0">if</FONT></B> q.first <B><FONT COLOR="#5F9EA0">==</FONT></B> q.last <B><FONT COLOR="#A020F0">then</FONT></B> <B><FONT COLOR="#A020F0">raise</FONT></B> Empty;
    <B><FONT COLOR="#A020F0">let</FONT></B> new_last <B><FONT COLOR="#5F9EA0">=</FONT></B> one_down q.last q.size <B><FONT COLOR="#A020F0">in</FONT></B>
    q.last &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> new_last;
    q.fld.(new_last)

  <B><FONT COLOR="#A020F0">let</FONT></B> copy q <B><FONT COLOR="#5F9EA0">=</FONT></B>
    { size <B><FONT COLOR="#5F9EA0">=</FONT></B> q.size; first <B><FONT COLOR="#5F9EA0">=</FONT></B> q.first; last <B><FONT COLOR="#5F9EA0">=</FONT></B> q.last; fld <B><FONT COLOR="#5F9EA0">=</FONT></B> Array.copy q.fld }

  <B><FONT COLOR="#A020F0">let</FONT></B> reverse q <B><FONT COLOR="#5F9EA0">=</FONT></B>
    <B><FONT COLOR="#A020F0">let</FONT></B> w <B><FONT COLOR="#5F9EA0">=</FONT></B> length q <B><FONT COLOR="#A020F0">in</FONT></B>
    for i <B><FONT COLOR="#5F9EA0">=</FONT></B> 0 to (w lsr 1) <B><FONT COLOR="#5F9EA0">-</FONT></B> 1 <B><FONT COLOR="#A020F0">do</FONT></B>
      <B><FONT COLOR="#A020F0">let</FONT></B> i1 <B><FONT COLOR="#5F9EA0">=</FONT></B> down (q.first <B><FONT COLOR="#5F9EA0">+</FONT></B> i) q.size <B><FONT COLOR="#A020F0">and</FONT></B> i2 <B><FONT COLOR="#5F9EA0">=</FONT></B> up (q.last <B><FONT COLOR="#5F9EA0">-</FONT></B> 1 <B><FONT COLOR="#5F9EA0">-</FONT></B> i) q.size <B><FONT COLOR="#A020F0">in</FONT></B>
      <B><FONT COLOR="#A020F0">let</FONT></B> v1 <B><FONT COLOR="#5F9EA0">=</FONT></B> q.fld.(i1) <B><FONT COLOR="#A020F0">in</FONT></B>
      q.fld.(i1) &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> q.fld.(i2);
      q.fld.(i2) &lt;<B><FONT COLOR="#5F9EA0">-</FONT></B> v1
    done
<B><FONT COLOR="#A020F0">end</FONT></B>

<B><FONT COLOR="#A020F0">let</FONT></B> test_lists () <B><FONT COLOR="#5F9EA0">=</FONT></B>
  <B><FONT COLOR="#A020F0">let</FONT></B> size <B><FONT COLOR="#5F9EA0">=</FONT></B> 10000 <B><FONT COLOR="#A020F0">in</FONT></B>
  <B><FONT COLOR="#A020F0">let</FONT></B> d1 <B><FONT COLOR="#5F9EA0">=</FONT></B> Deque.iota size <B><FONT COLOR="#A020F0">in</FONT></B>
  <B><FONT COLOR="#A020F0">let</FONT></B> d2 <B><FONT COLOR="#5F9EA0">=</FONT></B> Deque.copy d1
  <B><FONT COLOR="#A020F0">and</FONT></B> d3 <B><FONT COLOR="#5F9EA0">=</FONT></B> Deque.empty size <B><FONT COLOR="#A020F0">in</FONT></B>
  for i <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 to Deque.length d2 <B><FONT COLOR="#A020F0">do</FONT></B> Deque.push_back d3 (Deque.take_front d2) done;
  for i <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 to Deque.length d3 <B><FONT COLOR="#A020F0">do</FONT></B> Deque.push_back d2 (Deque.take_back d3) done;
  Deque.reverse d1;
  <B><FONT COLOR="#A020F0">if</FONT></B> size <B><FONT COLOR="#5F9EA0">&lt;&gt;</FONT></B> Deque.nth d1 0 <B><FONT COLOR="#A020F0">then</FONT></B> failwith <B><FONT COLOR="#BC8F8F">&quot;First test failed&quot;</FONT></B>;
  <B><FONT COLOR="#A020F0">if</FONT></B> Deque.length d1 <B><FONT COLOR="#5F9EA0">&lt;&gt;</FONT></B> Deque.length d2 <B><FONT COLOR="#A020F0">then</FONT></B> failwith <B><FONT COLOR="#BC8F8F">&quot;Second test failed&quot;</FONT></B>;
  <B><FONT COLOR="#A020F0">if</FONT></B> not (Deque.equal d1 d2) <B><FONT COLOR="#A020F0">then</FONT></B> failwith <B><FONT COLOR="#BC8F8F">&quot;Third test failed&quot;</FONT></B>;
  Deque.length d1

<B><FONT COLOR="#A020F0">let</FONT></B> n <B><FONT COLOR="#5F9EA0">=</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> Array.length Sys.argv <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 1 <B><FONT COLOR="#A020F0">then</FONT></B> int_of_string Sys.argv.(1) <B><FONT COLOR="#A020F0">else</FONT></B> 1;;
for i <B><FONT COLOR="#5F9EA0">=</FONT></B> 2 to n <B><FONT COLOR="#A020F0">do</FONT></B> ignore (test_lists ()) done;
Printf.printf <B><FONT COLOR="#BC8F8F">&quot;%d\n&quot;</FONT></B> (test_lists ())</pre></td></tr></table>
