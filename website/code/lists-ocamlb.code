<span class="com">(*</span>
<span class="com"> * $Id: lists-ocamlb.code,v 1.8 2006-09-30 16:39:23 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * from Benedict Rosenau</span>
<span class="com"> * improved by Jean-Christophe Filliatre</span>
<span class="com"> *)</span>

<span class="kwa">module</span> Deque <span class="sym">=</span> <span class="kwa">struct</span>
  <span class="kwa">type</span> t <span class="sym">= {</span> size<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> <span class="kwa">mutable</span> first<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> <span class="kwa">mutable</span> last<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> fld<span class="sym">:</span> <span class="kwb">int</span> array <span class="sym">}</span>

  <span class="kwa">exception</span> Empty
  <span class="kwa">exception</span> Full

  <span class="kwa">let</span> empty n <span class="sym">=</span>
    <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwd">max</span> <span class="sym">(</span>succ n<span class="sym">)</span> <span class="num">1</span> <span class="kwa">in</span>
    <span class="sym">{</span> size <span class="sym">=</span> n<span class="sym">;</span> first <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> last <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> fld <span class="sym">=</span> Array.make n <span class="num">0</span> <span class="sym">}</span>

  <span class="kwa">let</span> iota n <span class="sym">=</span>
    <span class="kwa">let</span> size <span class="sym">=</span> succ n <span class="kwa">in</span>
    <span class="sym">{</span> size <span class="sym">=</span> size<span class="sym">;</span> first <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> last <span class="sym">=</span> n<span class="sym">;</span> fld <span class="sym">=</span> Array.init size succ <span class="sym">}</span>

  <span class="kwa">let</span> up n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">then</span> n <span class="sym">+</span> s <span class="kwa">else</span> n
  <span class="kwa">let</span> down n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">&gt;=</span> s <span class="kwa">then</span> n <span class="sym">-</span> s <span class="kwa">else</span> n
  <span class="kwa">let</span> one_up n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">==</span> s <span class="sym">-</span> <span class="num">1</span> <span class="kwa">then</span> <span class="num">0</span> <span class="kwa">else</span> n <span class="sym">+</span> <span class="num">1</span>
  <span class="kwa">let</span> one_down n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> s <span class="sym">-</span> <span class="num">1</span> <span class="kwa">else</span> n <span class="sym">-</span> <span class="num">1</span>

  <span class="kwa">let</span> length q <span class="sym">=</span> <span class="kwd">up</span> <span class="sym">(</span>q.last <span class="sym">-</span> q.first<span class="sym">)</span> q.size

  <span class="kwa">let rec</span> array_eq q1 off1 q2 off2 n <span class="sym">=</span>
    n <span class="sym">==</span> <span class="num">0</span> <span class="sym">||</span>
      q1.fld.<span class="sym">(</span>off1<span class="sym">) ==</span> q2.fld.<span class="sym">(</span>off2<span class="sym">) &amp;&amp;</span>
      <span class="sym">(</span>array_eq <span class="kwd">q1</span> <span class="sym">(</span>one_up off1 q1.size<span class="sym">)</span> <span class="kwd">q2</span> <span class="sym">(</span>one_up off2 q2.size<span class="sym">) (</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>

  <span class="kwa">let</span> equal q1 q2 <span class="sym">=</span>
    <span class="kwa">let</span> len1 <span class="sym">=</span> length q1 <span class="kwa">in</span>
    len1 <span class="sym">==</span> length q2 <span class="sym">&amp;&amp;</span> array_eq q1 q1.first q2 q2.first len1

  <span class="kwa">let</span> nth q n <span class="sym">=</span>
    <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">or</span> n <span class="sym">&gt;=</span> length q <span class="kwa">then</span> failwith <span class="str">&quot;nth&quot;</span><span class="sym">;</span>
    q.fld.<span class="sym">(</span><span class="kwd">down</span> <span class="sym">(</span>q.first <span class="sym">+</span> n<span class="sym">)</span> q.size<span class="sym">)</span>

  <span class="kwa">let</span> push_back q elem <span class="sym">=</span>
    <span class="kwa">let</span> last<span class="str">' = one_up q.last q.size in</span>
<span class="str">    if last'</span> <span class="sym">==</span> q.first <span class="kwa">then</span> raise Full<span class="sym">;</span>
    q.fld.<span class="sym">(</span>q.last<span class="sym">) &lt;-</span> elem<span class="sym">;</span>
    q.last <span class="sym">&lt;-</span> last<span class="str">'</span>
<span class="str"></span>
<span class="str">  let take_front q =</span>
<span class="str">    if q.first == q.last then raise Empty;</span>
<span class="str">    let old_first = q.first in</span>
<span class="str">    q.first &lt;- one_up q.first q.size;</span>
<span class="str">    q.fld.(old_first)</span>
<span class="str"></span>
<span class="str">  let take_back q =</span>
<span class="str">    if q.first == q.last then raise Empty;</span>
<span class="str">    let new_last = one_down q.last q.size in</span>
<span class="str">    q.last &lt;- new_last;</span>
<span class="str">    q.fld.(new_last)</span>
<span class="str"></span>
<span class="str">  let copy q =</span>
<span class="str">    { size = q.size; first = q.first; last = q.last; fld = Array.copy q.fld }</span>
<span class="str"></span>
<span class="str">  let reverse q =</span>
<span class="str">    let w = length q in</span>
<span class="str">    for i = 0 to (w lsr 1) - 1 do</span>
<span class="str">      let i1 = down (q.first + i) q.size and i2 = up (q.last - 1 - i) q.size in</span>
<span class="str">      let v1 = q.fld.(i1) in</span>
<span class="str">      q.fld.(i1) &lt;- q.fld.(i2);</span>
<span class="str">      q.fld.(i2) &lt;- v1</span>
<span class="str">    done</span>
<span class="str">end</span>
<span class="str"></span>
<span class="str">let test_lists () =</span>
<span class="str">  let size = 10000 in</span>
<span class="str">  let d1 = Deque.iota size in</span>
<span class="str">  let d2 = Deque.copy d1</span>
<span class="str">  and d3 = Deque.empty size in</span>
<span class="str">  for i = 1 to Deque.length d2 do Deque.push_back d3 (Deque.take_front d2) done;</span>
<span class="str">  for i = 1 to Deque.length d3 do Deque.push_back d2 (Deque.take_back d3) done;</span>
<span class="str">  Deque.reverse d1;</span>
<span class="str">  if size &lt;&gt; Deque.nth d1 0 then failwith &quot;First test failed&quot;;</span>
<span class="str">  if Deque.length d1 &lt;&gt; Deque.length d2 then failwith &quot;Second test failed&quot;;</span>
<span class="str">  if not (Deque.equal d1 d2) then failwith &quot;Third test failed&quot;;</span>
<span class="str">  Deque.length d1</span>
<span class="str"></span>
<span class="str">let n = if Array.length Sys.argv &gt; 1 then int_of_string Sys.argv.(1) else 1;;</span>
<span class="str">for i = 2 to n do ignore (test_lists ()) done;</span>
<span class="str">Printf.printf &quot;%d</span><span class="esc">\n</span><span class="str">&quot; (test_lists ())</span>
