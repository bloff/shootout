<span class="sym">;;; -*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
<span class="sym">;;;</span> $Id<span class="sym">:</span> ary<span class="sym">.</span>pop11<span class="sym">,</span>v <span class="num">1.3 2005</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">13 16</span><span class="sym">:</span><span class="num">24</span><span class="sym">:</span><span class="num">17</span> igouy<span class="sym">-</span>guest Exp $
<span class="sym">;;;</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
vars i<span class="sym">,</span>j<span class="sym">,</span>n<span class="sym">;</span>

define constant procedure <span class="kwd">get_args</span><span class="sym">();</span>
   <span class="kwa">if</span> <span class="kwd">null</span><span class="sym">(</span>poparglist<span class="sym">)</span> then <span class="num">1</span> <span class="kwa">else</span>
      <span class="kwd">strnumber</span><span class="sym">(</span> <span class="kwd">hd</span><span class="sym">(</span>poparglist<span class="sym">) )</span>
   endif
enddefine<span class="sym">;</span>

<span class="kwd">get_args</span><span class="sym">() -&gt;</span> n<span class="sym">;</span>

vars x <span class="sym">=</span> <span class="kwd">initintvec</span><span class="sym">(</span>n<span class="sym">);</span>
vars y <span class="sym">=</span> <span class="kwd">initintvec</span><span class="sym">(</span>n<span class="sym">);</span>

<span class="kwa">for</span> i from <span class="num">1</span> to n <span class="kwa">do</span>
    i <span class="sym">-&gt;</span> <span class="kwd">subscrintvec</span><span class="sym">(</span>i<span class="sym">,</span> x<span class="sym">);</span>
endfor<span class="sym">;</span>

repeat <span class="num">1000</span> times
    <span class="kwa">for</span> j from <span class="num">0</span> <span class="kwd">to</span> <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">do</span>
        <span class="kwd">subscrintvec</span><span class="sym">(</span>n <span class="sym">-</span> j<span class="sym">,</span>y<span class="sym">) +</span> <span class="kwd">subscrintvec</span><span class="sym">(</span>n <span class="sym">-</span> j<span class="sym">,</span>x<span class="sym">) -&gt;</span> <span class="kwd">subscrintvec</span><span class="sym">(</span>n <span class="sym">-</span> j<span class="sym">,</span> y<span class="sym">)</span>
    endfor<span class="sym">;</span>
endrepeat<span class="sym">;</span>

vars ans1 <span class="sym">=</span> <span class="kwd">subscrintvec</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">);</span>
vars ans2 <span class="sym">=</span> <span class="kwd">subscrintvec</span><span class="sym">(</span>n<span class="sym">,</span>y<span class="sym">);</span>
<span class="kwd">format_print</span><span class="sym">(</span><span class="str">'~D ~D</span><span class="esc">\n</span><span class="str">'</span><span class="sym">, [</span>^ans1 ^ans2<span class="sym">]);</span>
