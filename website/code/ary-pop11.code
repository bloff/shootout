<span class="line">    1 </span><span class="sym">;;; -*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-
</span><span class="line">    2 </span><span class="sym">;;;</span> $Id<span class="sym">:</span> ary<span class="sym">.</span>pop11<span class="sym">,</span>v <span class="num">1.1 2004</span><span class="sym">/</span><span class="num">10</span><span class="sym">/</span><span class="num">13 04</span><span class="sym">:</span><span class="num">47</span><span class="sym">:</span><span class="num">56</span> bfulgham Exp $
<span class="line">    3 </span><span class="sym">;;;</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span>vars i<span class="sym">,</span>j<span class="sym">,</span>n<span class="sym">;
</span><span class="line">    5 </span><span class="sym">
</span><span class="line">    6 </span><span class="sym"></span>define constant procedure get_args<span class="sym">();
</span><span class="line">    7 </span><span class="sym"></span>   <span class="kwa">if</span> null<span class="sym">(</span>poparglist<span class="sym">)</span> then <span class="num">1</span> <span class="kwa">else
</span><span class="line">    8 </span><span class="kwa"></span>      strnumber<span class="sym">(</span> hd<span class="sym">(</span>poparglist<span class="sym">) )
</span><span class="line">    9 </span><span class="sym"></span>   endif
<span class="line">   10 </span>enddefine<span class="sym">;
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym"></span>get_args<span class="sym">() -&gt;</span> n<span class="sym">;
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span>vars x <span class="sym">=</span> initintvec<span class="sym">(</span>n<span class="sym">);
</span><span class="line">   15 </span><span class="sym"></span>vars y <span class="sym">=</span> initintvec<span class="sym">(</span>n<span class="sym">);
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span><span class="kwa">for</span> i from <span class="num">1</span> to n <span class="kwa">do
</span><span class="line">   18 </span><span class="kwa"></span>    i <span class="sym">-&gt;</span> subscrintvec<span class="sym">(</span>i<span class="sym">,</span> x<span class="sym">);
</span><span class="line">   19 </span><span class="sym"></span>endfor<span class="sym">;
</span><span class="line">   20 </span><span class="sym">
</span><span class="line">   21 </span><span class="sym"></span>repeat <span class="num">1000</span> times
<span class="line">   22 </span>    <span class="kwa">for</span> j from <span class="num">0</span> to <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">)</span> <span class="kwa">do
</span><span class="line">   23 </span><span class="kwa"></span>        subscrintvec<span class="sym">(</span>n <span class="sym">-</span> j<span class="sym">,</span>y<span class="sym">) +</span> subscrintvec<span class="sym">(</span>n <span class="sym">-</span> j<span class="sym">,</span>x<span class="sym">) -&gt;</span> subscrintvec<span class="sym">(</span>n <span class="sym">-</span> j<span class="sym">,</span> y<span class="sym">)
</span><span class="line">   24 </span><span class="sym"></span>    endfor<span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>endrepeat<span class="sym">;
</span><span class="line">   26 </span><span class="sym">
</span><span class="line">   27 </span><span class="sym"></span>vars ans1 <span class="sym">=</span> subscrintvec<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">);
</span><span class="line">   28 </span><span class="sym"></span>vars ans2 <span class="sym">=</span> subscrintvec<span class="sym">(</span>n<span class="sym">,</span>y<span class="sym">);
</span><span class="line">   29 </span><span class="sym"></span>format_print<span class="sym">(</span><span class="str">'~D ~D</span><span class="esc">\n</span><span class="str">'</span><span class="sym">, [</span>^ans1 ^ans2<span class="sym">]);</span>
