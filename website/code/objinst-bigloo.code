<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: objinst-bigloo.code,v 1.5 2006-02-10 07:03:46 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>
<span class="slc">;;; based on code from Manuel Serrano</span>

<span class="sym">(</span>module method
	<span class="sym">(</span>main main<span class="sym">)</span>
	<span class="sym">(</span>static <span class="sym">(</span>class toggle
		       <span class="sym">(</span>state<span class="sym">::</span>bool <span class="sym">(</span>default #t<span class="sym">)))</span>
		<span class="sym">(</span>class nthtoggle<span class="sym">::</span>toggle
		       <span class="sym">(</span>count<span class="sym">-</span><span class="kwa">max</span><span class="sym">::</span>int <span class="sym">(</span>default <span class="num">0</span><span class="sym">))</span>
		       <span class="sym">(</span>counter<span class="sym">::</span>int <span class="sym">(</span>default <span class="num">0</span><span class="sym">)))))</span>

<span class="sym">(</span>define<span class="sym">-</span>generic <span class="sym">(</span>value o<span class="sym">::</span>toggle<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool b<span class="sym">)</span>
  <span class="sym">(</span>display <span class="sym">(</span><span class="kwa">if</span> b #<span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> #<span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)))</span>

<span class="sym">(</span>define<span class="sym">-</span>method <span class="sym">(</span>value o<span class="sym">::</span>toggle<span class="sym">)</span>
  <span class="sym">(</span>with<span class="sym">-</span>access<span class="sym">::</span>toggle o <span class="sym">(</span>state<span class="sym">)</span>
		       state<span class="sym">))</span>

<span class="sym">(</span>define<span class="sym">-</span>generic <span class="sym">(</span>activate o<span class="sym">::</span>toggle<span class="sym">))</span>

<span class="sym">(</span>define<span class="sym">-</span>method <span class="sym">(</span>activate o<span class="sym">::</span>toggle<span class="sym">)</span>
  <span class="sym">(</span>with<span class="sym">-</span>access<span class="sym">::</span>toggle o <span class="sym">(</span>state<span class="sym">)</span>
		       <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> state <span class="sym">(</span><span class="kwa">not</span> state<span class="sym">))</span>
		       o<span class="sym">))</span>

<span class="sym">(</span>define<span class="sym">-</span>method <span class="sym">(</span>activate o<span class="sym">::</span>nthtoggle<span class="sym">)</span>
  <span class="sym">(</span>with<span class="sym">-</span>access<span class="sym">::</span>nthtoggle o <span class="sym">(</span>counter count<span class="sym">-</span><span class="kwa">max</span> state<span class="sym">)</span>
			  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> counter <span class="sym">(+</span>fx <span class="num">1</span> counter<span class="sym">))</span>
			  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;=</span>fx counter count<span class="sym">-</span><span class="kwa">max</span><span class="sym">)</span>
			      <span class="sym">(</span>begin
				<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> state <span class="sym">(</span><span class="kwa">not</span> state<span class="sym">))</span>
				<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> counter <span class="num">0</span><span class="sym">)))</span>
			  o<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>let <span class="sym">((</span>tog <span class="sym">(</span>instantiate<span class="sym">::</span>toggle <span class="sym">(</span>state #t<span class="sym">))))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i <span class="num">5</span><span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>value <span class="sym">(</span>activate tog<span class="sym">)))))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i n<span class="sym">))</span>
      <span class="sym">(</span>instantiate<span class="sym">::</span>toggle <span class="sym">(</span>state #t<span class="sym">)))</span>
    <span class="sym">(</span>newline<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>ntog <span class="sym">(</span>instantiate<span class="sym">::</span>nthtoggle <span class="sym">(</span>state #t<span class="sym">) (</span>count<span class="sym">-</span><span class="kwa">max</span> <span class="num">3</span><span class="sym">))))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i <span class="num">8</span><span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>value <span class="sym">(</span>activate ntog<span class="sym">)))))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i n<span class="sym">))</span>
      <span class="sym">(</span>instantiate<span class="sym">::</span>nthtoggle <span class="sym">(</span>state #t<span class="sym">) (</span>count<span class="sym">-</span><span class="kwa">max</span> <span class="num">3</span><span class="sym">)))))</span>
