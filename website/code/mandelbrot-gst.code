<span class="str">&quot;  The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy

   To run: gst -QI /usr/share/gnu-smalltalk/gst.im mandelbrot.gst -a 200
&quot;</span>

<span class="sym">|</span> width height limit2 isOverLimit m bits bitnum s <span class="sym">|
</span>width <span class="sym">:=</span> Smalltalk arguments first asInteger.
height <span class="sym">:=</span> width.
limit2 <span class="sym">:=</span> <span class="num">4.0</span>.
isOverLimit <span class="sym">:=</span> False.
m <span class="sym">:=</span> <span class="num">50</span>.
bits <span class="sym">:=</span> <span class="num">0</span>.
bitnum <span class="sym">:=</span> <span class="num">0</span>.
s <span class="sym">:=</span> FileStream stdout bufferSize<span class="sym">:</span> <span class="num">4096</span>.
s nextPutAll<span class="sym">:</span> <span class="str">'P4'</span><span class="sym">;</span> nl<span class="sym">;</span> nextPutAll<span class="sym">:</span> width printString<span class="sym">,</span> <span class="str">' '</span><span class="sym">,</span> height printString<span class="sym">;</span> nl.

<span class="num">0</span> to<span class="sym">:</span> height <span class="num">- 1</span> <span class="kwa">do</span><span class="sym">: [:</span>y<span class="sym">|
</span>   <span class="num">0</span> to<span class="sym">:</span> width <span class="num">- 1</span> <span class="kwa">do</span><span class="sym">: [:</span>x<span class="sym">| |</span> zr zi cr ci i <span class="sym">|
</span>      zr <span class="sym">:=</span> <span class="num">0.0</span>. zi <span class="sym">:=</span> <span class="num">0.0</span>.
      cr <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> x asFloat <span class="sym">/</span> width asFloat <span class="num">- 1.5</span>.
      ci <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> y asFloat <span class="sym">/</span> height asFloat <span class="num">- 1.0</span>.

      i <span class="sym">:=</span> <span class="num">0</span>.
      <span class="sym">[ |</span> tr ti <span class="sym">|
</span>         tr <span class="sym">:= (</span>zr<span class="sym">*</span>zr<span class="sym">) - (</span>zi<span class="sym">*</span>zi<span class="sym">) +</span> cr.
         ti <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> zr <span class="sym">*</span> zi <span class="sym">+</span> ci.
         zr <span class="sym">:=</span> tr.
         zi <span class="sym">:=</span> ti.
         isOverLimit <span class="sym">:= (</span>zr<span class="sym">*</span>zr<span class="sym">) + (</span>zi<span class="sym">*</span>zi<span class="sym">) &gt;</span> limit2.
         <span class="sym">(</span>isOverLimit <span class="kwa">not</span><span class="sym">)</span> <span class="kwa">and</span><span class="sym">: [(</span>i <span class="sym">:=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">) &lt;</span> m<span class="sym">]
      ]</span> whileTrue.

      bits <span class="sym">:=</span> bits bitShift<span class="sym">:</span> <span class="num">1</span>.
      <span class="sym">(</span>isOverLimit <span class="kwa">not</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>bits <span class="sym">:=</span> bits <span class="sym">+</span> <span class="num">1</span><span class="sym">]</span>.
      bitnum <span class="sym">:=</span> bitnum <span class="sym">+</span> <span class="num">1</span>.

      <span class="sym">(</span>x <span class="sym">= (</span>width <span class="num">- 1</span><span class="sym">))</span> ifTrue<span class="sym">: [
</span>         bits <span class="sym">:=</span> bits bitShift<span class="sym">: (</span><span class="num">8</span> <span class="sym">-</span> bitnum<span class="sym">)</span>.
         bitnum <span class="sym">:=</span> <span class="num">8</span>.
         <span class="sym">]</span>.

      <span class="sym">(</span>bitnum <span class="sym">=</span> <span class="num">8</span><span class="sym">)</span> ifTrue<span class="sym">: [
</span>         s nextPutByte<span class="sym">:</span> bits.
         bits <span class="sym">:=</span> <span class="num">0</span>. bitnum <span class="sym">:=</span> <span class="num">0</span>.
         <span class="sym">]</span>.
      <span class="sym">]</span>.
   <span class="sym">] !</span>
