<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: sieve-ghc.code,v 1.2 2004-11-08 08:15:52 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- from Roland Dowdeswell
</FONT></I>
<B><FONT COLOR="#A020F0">module</FONT></B> Main <B><FONT COLOR="#A020F0">where</FONT></B>

<B><FONT COLOR="#A020F0">import</FONT></B> System(getArgs)

main = getArgs &gt;&gt;= putStrLn . (<B><FONT COLOR="#BC8F8F">&quot;Count: &quot;</FONT></B>++) . show . mytest . read . headOr1
  <B><FONT COLOR="#A020F0">where</FONT></B> headOr1 x = <B><FONT COLOR="#A020F0">if</FONT></B> length x /= 1 <B><FONT COLOR="#A020F0">then</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B> <B><FONT COLOR="#A020F0">else</FONT></B> head x

<I><FONT COLOR="#B22222">-- here we try to force it to recompute at each step.  Note
</FONT></I><I><FONT COLOR="#B22222">-- that we are not naming `sieve [2..8192]' and we are forcing
</FONT></I><I><FONT COLOR="#B22222">-- a comparison with -1.  Of course there is still no guarantee
</FONT></I><I><FONT COLOR="#B22222">-- that any particular Haskell implementation will actually
</FONT></I><I><FONT COLOR="#B22222">-- recompute the value.
</FONT></I>mytest <B><FONT COLOR="#228B22">:: Int -&gt; Int
</FONT></B>mytest 1 = length (sieve [2..8192])
mytest n | length (sieve [2..8192]) == -1 = error <B><FONT COLOR="#BC8F8F">&quot;doh&quot;</FONT></B>
         | otherwise                      = mytest (n-1)

<I><FONT COLOR="#B22222">-- we use Int rather than let Haskell default to Integer,
</FONT></I><I><FONT COLOR="#B22222">-- because we are trying to remain competetive with other
</FONT></I><I><FONT COLOR="#B22222">-- languages that do not do arbitrary precision math by
</FONT></I><I><FONT COLOR="#B22222">-- default...
</FONT></I>sieve <B><FONT COLOR="#228B22">:: [Int] -&gt; [Int]
</FONT></B>sieve [] = []
sieve (h:t) = h : sieve [x| x&lt;-t, x`mod`h /= 0]</pre></td></tr></table>
