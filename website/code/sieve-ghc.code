<span class="slc">-- $Id: sieve-ghc.code,v 1.7 2005-03-15 11:08:16 bfulgham Exp $
</span><span class="slc">-- http://www.bagley.org/~doug/shootout/
</span><span class="slc">-- from Roland Dowdeswell
</span><span class="slc">-- adjusted by Aaron Denney, borrowing strictness attempt
</span><span class="slc">-- from Malcom Wallace's matrix multiplication
</span><span class="kwa">module</span> Main <span class="kwa">where

import</span> System<span class="sym">(</span>getArgs<span class="sym">)

</span>main <span class="sym">=</span> getArgs <span class="sym">&gt;&gt;=</span> putStrLn . <span class="sym">(</span><span class="str">&quot;Count: &quot;</span><span class="sym">++)</span> . show . mytest . read . headOr1
  <span class="kwa">where</span> headOr1 x <span class="sym">=</span> if length x <span class="sym">/=</span> <span class="num">1</span> <span class="kwa">then</span> <span class="str">&quot;1&quot;</span> <span class="kwa">else</span> head x

<span class="slc">-- Here we try to force it to recompute at each step.
</span>mytest n <span class="sym">=</span> length $ strictlast $ map sieve $ replicate n <span class="sym">([</span><span class="num">2</span>.<span class="num">.8192</span><span class="sym">])

</span>strictlast <span class="sym">[</span>x<span class="sym">] =</span> x
strictlast <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) |</span> force x <span class="sym">=</span> strictlast xs
force <span class="sym">[] =</span> <span class="kwa">True
</span>force <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) =</span> x `seq` force xs

<span class="slc">-- we use Int rather than let Haskell default to Integer,
</span><span class="slc">-- because we are trying to remain competetive with other
</span><span class="slc">-- languages that do not do arbitrary precision math by
</span><span class="slc">-- default...
</span>sieve <span class="sym">:: [</span><span class="kwb">Int</span><span class="sym">] -&gt; [</span><span class="kwb">Int</span><span class="sym">]
</span>sieve <span class="sym">[] = []
</span>sieve <span class="sym">(</span>h<span class="sym">:</span>t<span class="sym">) =</span> h <span class="sym">:</span> sieve <span class="sym">[</span>x<span class="sym">|</span> x<span class="sym">&lt;-</span>t<span class="sym">,</span> x`mod`h <span class="sym">/=</span> <span class="num">0</span><span class="sym">]</span>
