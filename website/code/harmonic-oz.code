<span class="slc">%%% $Id: harmonic-oz.code,v 1.6 2006-10-02 01:08:41 bfulgham Exp $</span>
<span class="slc">%%%</span>
<span class="slc">%%% http://shootout.alioth.debian.org/</span>
<span class="slc">%%% Contributed by Brent Fulgham</span>
<span class="slc">%%% using String conversion routines proposed by Juergen Stuber</span>
<span class="slc">%%%   and Jorge Marques Pelizzoni</span>
<span class="kwa">functor</span>
<span class="kwa">import</span> System Application
<span class="kwa">define</span>
   <span class="kwa">fun</span> <span class="sym">{</span>FloatAbs X<span class="sym">}</span>
      <span class="kwa">if</span> X <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then</span> X <span class="kwa">else</span> <span class="sym">~</span>X <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>FloatSquare X<span class="sym">}</span>
      X <span class="sym">*</span> X
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>FloatPower X E<span class="sym">}</span>
      <span class="kwa">if</span> E<span class="sym">==</span><span class="num">0</span> <span class="kwa">then</span> <span class="num">1.0</span>
      <span class="kwa">elseif</span> E<span class="sym">&lt;</span><span class="num">0</span> <span class="kwa">then raise</span> negativeExponent<span class="sym">(</span>E<span class="sym">)</span> <span class="kwa">end</span>
      <span class="kwa">else</span>
	 <span class="kwa">if</span> E mod <span class="num">2</span> <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span> X <span class="kwa">else</span> <span class="num">1.0</span> <span class="kwa">end</span>
	 <span class="sym">* {</span>FloatSquare <span class="sym">{</span>FloatPower X E div <span class="num">2</span><span class="sym">}}</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>MakePadding Ch L<span class="sym">}</span>
      <span class="kwa">if</span> L <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
	 Padding <span class="sym">= {</span>MakeList L<span class="sym">}</span>
      <span class="kwa">in</span>
	 <span class="kwa">for</span> V <span class="kwa">in</span> Padding do V <span class="sym">=</span> Ch <span class="kwa">end</span>
	 Padding
      <span class="kwa">else</span>
	 nil
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>PadLeft Ch String L<span class="sym">}</span>
      PL <span class="sym">=</span> L <span class="sym">- {</span>List<span class="sym">.</span>length String<span class="sym">}</span>
   <span class="kwa">in</span>
      <span class="sym">{</span>MakePadding Ch PL<span class="sym">} #</span> String
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>FloatToVS F Prec<span class="sym">}</span>
      <span class="kwa">fun</span> <span class="sym">{</span>FractionToString Frac Prec<span class="sym">}</span>
	 <span class="kwa">if</span> Prec <span class="sym">=&lt;</span> <span class="num">0</span> <span class="kwa">then</span> &quot;&quot;
	 <span class="kwa">elseif</span> Prec <span class="sym">&gt;</span> <span class="num">9</span> <span class="kwa">then raise</span> excessivePrecision<span class="sym">(</span>Prec<span class="sym">)</span> <span class="kwa">end</span>
	 <span class="kwa">else</span>
	    Shifted <span class="sym">= {</span>FloatPower <span class="num">10.0</span> Prec<span class="sym">} *</span> Frac
	    Digits <span class="sym">= {</span>FloatToInt <span class="sym">{</span>Round Shifted<span class="sym">}}</span>
	 <span class="kwa">in</span>
	    <span class="sym">{</span>PadLeft <span class="sym">&amp;</span><span class="num">0</span> <span class="sym">{</span>IntToString Digits<span class="sym">}</span> Prec<span class="sym">}</span>
	 <span class="kwa">end</span>
      <span class="kwa">end</span>

      I <span class="sym">= {</span>FloatToInt <span class="sym">{</span><span class="kwa">if</span> F <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">then</span> Floor <span class="kwa">else</span> Ceil <span class="kwa">end</span> F<span class="sym">}}</span>
      Frac <span class="sym">= {</span>FloatAbs F <span class="sym">- {</span>IntToFloat I<span class="sym">}}</span>
   <span class="kwa">in</span>
      <span class="sym">{</span>IntToString I<span class="sym">} #</span> &quot;<span class="sym">.</span>&quot; <span class="sym"># {</span>FractionToString Frac Prec<span class="sym">}</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>FloatToString F Prec<span class="sym">}</span>
      <span class="sym">{</span>VirtualString<span class="sym">.</span>toString <span class="sym">{</span>FloatToVS F Prec<span class="sym">}}</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Sum_Harmonic Goal Curr Accum<span class="sym">}</span>
      <span class="kwa">if</span> Curr<span class="sym">&gt;</span>Goal <span class="kwa">then</span>
	 Accum
      <span class="kwa">else</span>
	 <span class="sym">{</span>Sum_Harmonic Goal <span class="sym">(</span>Curr <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span>Accum <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/ {</span>Int<span class="sym">.</span>toFloat Curr<span class="sym">})}</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>
<span class="kwa">in</span>
   <span class="kwa">local</span> A <span class="kwa">in</span>
      <span class="sym">[</span>A<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
      <span class="sym">{</span>System<span class="sym">.</span>printInfo <span class="sym">{</span>FloatToString <span class="sym">{</span>Sum_Harmonic <span class="sym">{</span>String<span class="sym">.</span>toInt A<span class="sym">}</span> <span class="num">1 0.0</span><span class="sym">}</span> <span class="num">9</span> <span class="sym">}}</span>
      <span class="sym">{</span>System<span class="sym">.</span>printInfo &quot;<span class="sym">\</span>n&quot;<span class="sym">}</span>
   <span class="kwa">end</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
