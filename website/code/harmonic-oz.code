<span class="slc">%%% $Id: harmonic-oz.code,v 1.3 2005-03-06 05:21:27 bfulgham Exp $
</span><span class="slc">%%%
</span><span class="slc">%%% http://shootout.alioth.debian.org/
</span><span class="slc">%%% Contributed by Brent Fulgham
</span><span class="slc">%%% using String conversion routines proposed by Juergen Stuber
</span><span class="slc">%%%   and Jorge Marques Pelizzoni
</span><span class="kwa">functor
import</span> System Application
<span class="kwb">define
   fun</span> <span class="sym">{</span>FloatAbs X<span class="sym">}
</span>      <span class="kwb">if</span> X <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwb">then</span> X <span class="kwb">else</span> ~X <span class="kwb">end
   end

   fun</span> <span class="sym">{</span>FloatSquare X<span class="sym">}
</span>      X <span class="sym">*</span> X
   <span class="kwb">end

   fun</span> <span class="sym">{</span>FloatPower X E<span class="sym">}
</span>      <span class="kwb">if</span> E<span class="sym">==</span><span class="num">0</span> <span class="kwb">then</span> <span class="num">1.0
</span>      <span class="kwb">elseif</span> E<span class="sym">&lt;</span><span class="num">0</span> <span class="kwb">then</span> <span class="kwa">raise</span> negativeExponent<span class="sym">(</span>E<span class="sym">)</span> <span class="kwb">end
      else
	 if</span> E mod <span class="num">2</span> <span class="sym">==</span> <span class="num">1</span> <span class="kwb">then</span> X <span class="kwb">else</span> <span class="num">1.0</span> <span class="kwb">end
</span>	 <span class="sym">* {</span>FloatSquare <span class="sym">{</span>FloatPower X E div <span class="num">2</span><span class="sym">}}
</span>      <span class="kwb">end
   end

   fun</span> <span class="sym">{</span>MakePadding Ch L<span class="sym">}
</span>      <span class="kwb">if</span> L <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then
</span>	 Padding <span class="sym">= {</span>MakeList L<span class="sym">}
</span>      <span class="kwb">in
	 for</span> V <span class="kwb">in</span> Padding <span class="kwb">do</span> V <span class="sym">=</span> Ch <span class="kwb">end
</span>	 Padding
      <span class="kwb">else
</span>	 <span class="kwa">nil
</span>      <span class="kwb">end
   end

   fun</span> <span class="sym">{</span>PadLeft Ch String L<span class="sym">}
</span>      PL <span class="sym">=</span> L <span class="sym">- {</span>List.length String<span class="sym">}
</span>   <span class="kwb">in
</span>      <span class="sym">{</span>MakePadding Ch PL<span class="sym">}</span> # String
   <span class="kwb">end

   fun</span> <span class="sym">{</span>FloatToVS F Prec<span class="sym">}
</span>      <span class="kwb">fun</span> <span class="sym">{</span>FractionToString Frac Prec<span class="sym">}
</span>	 <span class="kwb">if</span> Prec <span class="sym">=&lt;</span> <span class="num">0</span> <span class="kwb">then</span> <span class="str">&quot;&quot;</span>
	 <span class="kwb">elseif</span> Prec <span class="sym">&gt;</span> <span class="num">9</span> <span class="kwb">then</span> <span class="kwa">raise</span> excessivePrecision<span class="sym">(</span>Prec<span class="sym">)</span> <span class="kwb">end
	 else
</span>	    Shifted <span class="sym">= {</span>FloatPower <span class="num">10.0</span> Prec<span class="sym">} *</span> Frac
	    Digits <span class="sym">= {</span>FloatToInt <span class="sym">{</span>Round Shifted<span class="sym">}}
</span>	 <span class="kwb">in
</span>	    <span class="sym">{</span>PadLeft <span class="sym">&amp;</span><span class="num">0</span> <span class="sym">{</span>IntToString Digits<span class="sym">}</span> Prec<span class="sym">}
</span>	 <span class="kwb">end
      end

</span>      I <span class="sym">= {</span>FloatToInt <span class="sym">{</span><span class="kwb">if</span> F <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwb">then</span> Floor <span class="kwb">else</span> Ceil <span class="kwb">end</span> F<span class="sym">}}
</span>      Frac <span class="sym">= {</span>FloatAbs F <span class="sym">- {</span>IntToFloat I<span class="sym">}}
</span>   <span class="kwb">in
</span>      <span class="sym">{</span>IntToString I<span class="sym">}</span> # <span class="str">&quot;.&quot;</span> # <span class="sym">{</span>FractionToString Frac Prec<span class="sym">}
</span>   <span class="kwb">end

   fun</span> <span class="sym">{</span>FloatToString F Prec<span class="sym">}
      {</span>VirtualString.toString <span class="sym">{</span>FloatToVS F Prec<span class="sym">}}
</span>   <span class="kwb">end

   fun</span> <span class="sym">{</span>Sum_Harmonic Goal Curr Accum<span class="sym">}
</span>      <span class="kwb">if</span> Curr<span class="sym">&gt;</span>Goal <span class="kwb">then
</span>	 Accum
      <span class="kwb">else
</span>	 <span class="sym">{</span>Sum_Harmonic Goal <span class="sym">(</span>Curr <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span>Accum <span class="sym">+</span> <span class="num">1.0</span> <span class="sym">/ {</span>Int.toFloat Curr<span class="sym">})}
</span>      <span class="kwb">end
   end
in
</span>   <span class="kwa">local</span> A <span class="kwb">in
</span>      <span class="sym">[</span>A<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}
      {</span>System.printInfo <span class="sym">{</span>FloatToString <span class="sym">{</span>Sum_Harmonic <span class="sym">{</span>String.toInt A<span class="sym">}</span> <span class="num">1 0.0</span><span class="sym">}</span> <span class="num">9</span> <span class="sym">}}
      {</span>System.printInfo <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">}
</span>   <span class="kwb">end
</span>   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}
</span><span class="kwb">end</span>
