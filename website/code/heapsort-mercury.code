<span class="slc">% ---------------------------------------------------------------------------- %
</span><span class="slc">% heapsort.m
</span><span class="slc">% Ralph Becket &lt;rbeck&#64;microsoft.com&gt;
</span><span class="slc">% Tue Jan  9 14:18:19 GMT 2001
</span><span class="slc">% vim: ts=4 sw=4 et tw=0 wm=0 ff=unix
</span><span class="slc">%
</span><span class="slc">% ---------------------------------------------------------------------------- %
</span>
<span class="sym">:-</span> module mytest.

<span class="sym">:-</span> interface.

<span class="sym">:-</span> import_module io.


<span class="sym">:-</span> pred main<span class="sym">(</span>io__state<span class="sym">,</span> io__state<span class="sym">)</span>.
<span class="sym">:-</span> mode main<span class="sym">(</span>di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det.


<span class="sym">:-</span> implementation.


<span class="sym">:-</span> import_module <span class="kwb">float</span><span class="sym">,</span> int<span class="sym">,</span> array<span class="sym">,</span> random<span class="sym">,</span> list<span class="sym">,</span> string<span class="sym">,</span> require.


<span class="sym">:-</span> type heap <span class="sym">==</span> array<span class="sym">(</span><span class="kwb">float</span><span class="sym">)</span>.


main <span class="sym">--&gt;
</span>    io__command_line_arguments<span class="sym">(</span>ArgV<span class="sym">),
    (   {</span> ArgV <span class="sym">= [],</span>        N <span class="sym">=</span> <span class="num">1</span> <span class="sym">}
    ;   {</span> ArgV <span class="sym">= [</span>Arg<span class="sym">],</span>     N <span class="sym">=</span> string__det_to_int<span class="sym">(</span>Arg<span class="sym">) }
    ;   {</span> ArgV <span class="sym">= [</span>_<span class="sym">,</span>_<span class="sym">|</span>_<span class="sym">],</span>   error<span class="sym">(</span><span class="str">&quot;usage: heapsort [N]&quot;</span><span class="sym">) }
    ),
    {</span> A <span class="sym">=</span> heapsort<span class="sym">(</span>N <span class="num">- 1</span><span class="sym">,</span> random_heap<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> seed<span class="sym">,</span> array__init<span class="sym">(</span>N<span class="sym">,</span> <span class="num">0.0</span><span class="sym">))) },
</span>    io__format<span class="sym">(</span><span class="str">&quot;%.10f&quot;</span><span class="sym">, [</span>f<span class="sym">(</span>array__lookup<span class="sym">(</span>A<span class="sym">,</span> N <span class="num">- 1</span><span class="sym">))]),
</span>    io__nl.


<span class="sym">:-</span> func random_heap<span class="sym">(</span>int<span class="sym">,</span> int<span class="sym">,</span> heap<span class="sym">) =</span> heap.
<span class="sym">:-</span> mode random_heap<span class="sym">(</span>in<span class="sym">,</span> in<span class="sym">,</span> array_di<span class="sym">) =</span> array_uo <span class="kwa">is</span> det.

random_heap<span class="sym">(</span>I<span class="sym">,</span> S0<span class="sym">,</span> H0<span class="sym">) =</span> H <span class="sym">:-
    (</span> if I <span class="sym">=&lt;</span> array__max<span class="sym">(</span>H0<span class="sym">)</span> then
        gen_random<span class="sym">(</span>R<span class="sym">,</span> S0<span class="sym">,</span> S<span class="sym">),
</span>        H <span class="sym">=</span> random_heap<span class="sym">(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> S<span class="sym">,</span> up_heap<span class="sym">(</span>I<span class="sym">,</span> R<span class="sym">,</span> H0<span class="sym">))
</span>      else
        H <span class="sym">=</span> H0
    <span class="sym">)</span>.


<span class="sym">:-</span> func up_heap<span class="sym">(</span>int<span class="sym">,</span> <span class="kwb">float</span><span class="sym">,</span> heap<span class="sym">) =</span> heap.
<span class="sym">:-</span> mode up_heap<span class="sym">(</span>in<span class="sym">,</span> in<span class="sym">,</span> array_di<span class="sym">) =</span> array_uo <span class="kwa">is</span> det.

up_heap<span class="sym">(</span>N<span class="sym">,</span> Y<span class="sym">,</span> H<span class="sym">) =
    (</span> if <span class="num">0</span> <span class="sym">&lt;</span> N<span class="sym">,</span> X <span class="sym">&lt;</span> Y then
        up_heap<span class="sym">(</span>HalfN<span class="sym">,</span> Y<span class="sym">,</span> array__set<span class="sym">(</span>H<span class="sym">,</span> N<span class="sym">,</span> X<span class="sym">))
</span>      else
        array__set<span class="sym">(</span>H<span class="sym">,</span> N<span class="sym">,</span> Y<span class="sym">)
    )
 :-
</span>    HalfN <span class="sym">=</span> N <span class="sym">//</span> <span class="num">2</span><span class="sym">,
</span>    X <span class="sym">=</span> array__lookup<span class="sym">(</span>H<span class="sym">,</span> HalfN<span class="sym">)</span>.


<span class="sym">:-</span> func heapsort<span class="sym">(</span>int<span class="sym">,</span> heap<span class="sym">) =</span> heap.
<span class="sym">:-</span> mode heapsort<span class="sym">(</span>in<span class="sym">,</span> array_di<span class="sym">) =</span> array_uo <span class="kwa">is</span> det.

heapsort<span class="sym">(</span>N<span class="sym">,</span> H<span class="sym">) =
    (</span> if N <span class="sym">=</span> <span class="num">0</span> then H else heapsort<span class="sym">(</span>N <span class="num">- 1</span><span class="sym">,</span> remove_greatest<span class="sym">(</span>N<span class="sym">,</span> H<span class="sym">)) )</span>.


<span class="sym">:-</span> func remove_greatest<span class="sym">(</span>int<span class="sym">,</span> heap<span class="sym">) =</span> heap.
<span class="sym">:-</span> mode remove_greatest<span class="sym">(</span>in<span class="sym">,</span> array_di<span class="sym">) =</span> array_uo <span class="kwa">is</span> det.

remove_greatest<span class="sym">(</span>N<span class="sym">,</span> H<span class="sym">) =</span> down_heap<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> N <span class="num">- 1</span><span class="sym">,</span> Y<span class="sym">,</span> array__set<span class="sym">(</span>H<span class="sym">,</span> N<span class="sym">,</span> X<span class="sym">)) :-
</span>    X <span class="sym">=</span> array__lookup<span class="sym">(</span>H<span class="sym">,</span> <span class="num">0</span><span class="sym">),
</span>    Y <span class="sym">=</span> array__lookup<span class="sym">(</span>H<span class="sym">,</span> N<span class="sym">)</span>.


<span class="sym">:-</span> func down_heap<span class="sym">(</span>int<span class="sym">,</span> int<span class="sym">,</span> <span class="kwb">float</span><span class="sym">,</span> heap<span class="sym">) =</span> heap.
<span class="sym">:-</span> mode down_heap<span class="sym">(</span>in<span class="sym">,</span> in<span class="sym">,</span> in<span class="sym">,</span> array_di<span class="sym">) =</span> array_uo <span class="kwa">is</span> det.

down_heap<span class="sym">(</span>I<span class="sym">,</span> N<span class="sym">,</span> X<span class="sym">,</span> H0<span class="sym">) =</span> H <span class="sym">:-
</span>    L <span class="sym">=</span> I <span class="sym">+</span> I <span class="sym">+</span> <span class="num">1</span><span class="sym">,
</span>    R <span class="sym">=</span> L <span class="sym">+</span> <span class="num">1</span><span class="sym">,
    (</span> if N <span class="sym">&lt;</span> L then
        H <span class="sym">=</span> array__set<span class="sym">(</span>H0<span class="sym">,</span> I<span class="sym">,</span> X<span class="sym">)
</span>      else
        J <span class="sym">= (</span> if R <span class="sym">&lt;</span> N<span class="sym">,</span> array__lookup<span class="sym">(</span>H0<span class="sym">,</span> R<span class="sym">) &gt;</span> array__lookup<span class="sym">(</span>H0<span class="sym">,</span> L<span class="sym">)</span> then R
                                                                    else L <span class="sym">),
</span>        Y <span class="sym">=</span> array__lookup<span class="sym">(</span>H0<span class="sym">,</span> J<span class="sym">),
        (</span> if X <span class="sym">&gt;</span> Y then
            H <span class="sym">=</span> array__set<span class="sym">(</span>H0<span class="sym">,</span> I<span class="sym">,</span> X<span class="sym">)
</span>          else
            H <span class="sym">=</span> down_heap<span class="sym">(</span>J<span class="sym">,</span> N<span class="sym">,</span> X<span class="sym">,</span> array__set<span class="sym">(</span>H0<span class="sym">,</span> I<span class="sym">,</span> Y<span class="sym">))
        )
    )</span>.


<span class="sym">:-</span> pred gen_random<span class="sym">(</span><span class="kwb">float</span><span class="sym">,</span> int<span class="sym">,</span> int<span class="sym">)</span>.
<span class="sym">:-</span> mode gen_random<span class="sym">(</span>out<span class="sym">,</span> in<span class="sym">,</span> out<span class="sym">)</span> <span class="kwa">is</span> det.

gen_random<span class="sym">(</span>R<span class="sym">,</span> S0<span class="sym">,</span> S<span class="sym">) :-
</span>    S <span class="sym">= (</span>S0 <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> `<span class="kwa">mod</span>` im<span class="sym">,
</span>    R <span class="sym">=</span> <span class="kwb">float</span><span class="sym">(</span>S<span class="sym">) /</span> <span class="kwb">float</span><span class="sym">(</span>im<span class="sym">)</span>.

<span class="sym">:-</span> func im <span class="sym">=</span> int.   im <span class="sym">=</span> <span class="num">139968</span>.
<span class="sym">:-</span> func ia <span class="sym">=</span> int.   ia <span class="sym">=</span>   <span class="num">3877</span>.
<span class="sym">:-</span> func ic <span class="sym">=</span> int.   ic <span class="sym">=</span>  <span class="num">29573</span>.
<span class="sym">:-</span> func seed <span class="sym">=</span> int. seed <span class="sym">=</span>   <span class="num">42</span>.
