<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
% ---------------------------------------------------------------------------- %
% heapsort.m
% Ralph Becket &lt;rbeck@microsoft.com&gt;
% Tue Jan  9 14:18:19 GMT 2001
% vim: ts=4 sw=4 et tw=0 wm=0 ff=unix
%
% ---------------------------------------------------------------------------- %

:- module mytest.

:- <B><FONT COLOR="#A020F0">interface</FONT></B>.

:- import_module io.


:- pred main(io__state, io__state).
:- mode main(di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det.


:- <B><FONT COLOR="#A020F0">implementation</FONT></B>.


:- import_module float, int, <B><FONT COLOR="#A020F0">array</FONT></B>, random, list, <B><FONT COLOR="#A020F0">string</FONT></B>, require.


:- <B><FONT COLOR="#A020F0">type</FONT></B> heap == <B><FONT COLOR="#A020F0">array</FONT></B>(float).


main --&gt;
    io__command_line_arguments(ArgV),
    (   <I><FONT COLOR="#B22222">{ ArgV = [],        N = 1 }</FONT></I>
    ;   <I><FONT COLOR="#B22222">{ ArgV = [Arg],     N = string__det_to_int(Arg) }</FONT></I>
    ;   <I><FONT COLOR="#B22222">{ ArgV = [_,_|_],   error(&quot;usage: heapsort [N]&quot;) }</FONT></I>
    ),
    <I><FONT COLOR="#B22222">{ A = heapsort(N - 1, random_heap(0, seed, array__init(N, 0.0))) }</FONT></I>,
    io__format(&quot;%.10f&quot;, [f(array__lookup(A, N - 1))]),
    io__nl.


:- func random_heap(int, int, heap) = heap.
:- mode random_heap(<B><FONT COLOR="#A020F0">in</FONT></B>, <B><FONT COLOR="#A020F0">in</FONT></B>, array_di) = array_uo <B><FONT COLOR="#A020F0">is</FONT></B> det.

random_heap(I, S0, H0) = H :-
    ( <B><FONT COLOR="#A020F0">if</FONT></B> I =&lt; array__max(H0) <B><FONT COLOR="#A020F0">then</FONT></B>
        gen_random(R, S0, S),
        H = random_heap(I + 1, S, up_heap(I, R, H0))
      <B><FONT COLOR="#A020F0">else</FONT></B>
        H = H0
    ).


:- func up_heap(int, float, heap) = heap.
:- mode up_heap(<B><FONT COLOR="#A020F0">in</FONT></B>, <B><FONT COLOR="#A020F0">in</FONT></B>, array_di) = array_uo <B><FONT COLOR="#A020F0">is</FONT></B> det.

up_heap(N, Y, H) =
    ( <B><FONT COLOR="#A020F0">if</FONT></B> 0 &lt; N, X &lt; Y <B><FONT COLOR="#A020F0">then</FONT></B>
        up_heap(HalfN, Y, array__set(H, N, X))
      <B><FONT COLOR="#A020F0">else</FONT></B>
        array__set(H, N, Y)
    )
 :-
    HalfN = N <I><FONT COLOR="#B22222">// 2,
</FONT></I>    X = array__lookup(H, HalfN).


:- func heapsort(int, heap) = heap.
:- mode heapsort(<B><FONT COLOR="#A020F0">in</FONT></B>, array_di) = array_uo <B><FONT COLOR="#A020F0">is</FONT></B> det.

heapsort(N, H) =
    ( <B><FONT COLOR="#A020F0">if</FONT></B> N = 0 <B><FONT COLOR="#A020F0">then</FONT></B> H <B><FONT COLOR="#A020F0">else</FONT></B> heapsort(N - 1, remove_greatest(N, H)) ).


:- func remove_greatest(int, heap) = heap.
:- mode remove_greatest(<B><FONT COLOR="#A020F0">in</FONT></B>, array_di) = array_uo <B><FONT COLOR="#A020F0">is</FONT></B> det.

remove_greatest(N, H) = down_heap(0, N - 1, Y, array__set(H, N, X)) :-
    X = array__lookup(H, 0),
    Y = array__lookup(H, N).


:- func down_heap(int, int, float, heap) = heap.
:- mode down_heap(<B><FONT COLOR="#A020F0">in</FONT></B>, <B><FONT COLOR="#A020F0">in</FONT></B>, <B><FONT COLOR="#A020F0">in</FONT></B>, array_di) = array_uo <B><FONT COLOR="#A020F0">is</FONT></B> det.

down_heap(I, N, X, H0) = H :-
    L = I + I + 1,
    R = L + 1,
    ( <B><FONT COLOR="#A020F0">if</FONT></B> N &lt; L <B><FONT COLOR="#A020F0">then</FONT></B>
        H = array__set(H0, I, X)
      <B><FONT COLOR="#A020F0">else</FONT></B> 
        J = ( <B><FONT COLOR="#A020F0">if</FONT></B> R &lt; N, array__lookup(H0, R) &gt; array__lookup(H0, L) <B><FONT COLOR="#A020F0">then</FONT></B> R
                                                                    <B><FONT COLOR="#A020F0">else</FONT></B> L ),
        Y = array__lookup(H0, J),
        ( <B><FONT COLOR="#A020F0">if</FONT></B> X &gt; Y <B><FONT COLOR="#A020F0">then</FONT></B>
            H = array__set(H0, I, X)
          <B><FONT COLOR="#A020F0">else</FONT></B>
            H = down_heap(J, N, X, array__set(H0, I, Y))
        )
    ).


:- pred gen_random(float, int, int).
:- mode gen_random(out, <B><FONT COLOR="#A020F0">in</FONT></B>, out) <B><FONT COLOR="#A020F0">is</FONT></B> det.

gen_random(R, S0, S) :-
    S = (S0 * ia + ic) `<B><FONT COLOR="#A020F0">mod</FONT></B>` im,
    R = float(S) / float(im).

:- func im = int.   im = 139968.
:- func ia = int.   ia =   3877.
:- func ic = int.   ic =  29573.
:- func seed = int. seed =   42.</pre></td></tr></table>
