<span class="com">(* ary.sml</span>
<span class="com"> *</span>
<span class="com"> *   Testing array access.</span>
<span class="com"> *</span>
<span class="com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="com"> *</span>
<span class="com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="com"> *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
    <span class="kwa">val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>
    <span class="kwa">open</span> FormatComb
    <span class="kwa">fun</span> x <span class="sym">+</span> y <span class="sym">=</span> <span class="kwa">Word</span>.toIntX <span class="sym">(</span><span class="kwa">Word</span>.<span class="sym">+ (</span><span class="kwa">Word</span>.fromInt x<span class="sym">,</span> <span class="kwa">Word</span>.fromInt y<span class="sym">))</span>
    <span class="kwa">fun</span> x <span class="sym">-</span> y <span class="sym">=</span> <span class="kwa">Word</span>.toIntX <span class="sym">(</span><span class="kwa">Word</span>.<span class="sym">- (</span><span class="kwa">Word</span>.fromInt x<span class="sym">,</span> <span class="kwa">Word</span>.fromInt y<span class="sym">))</span>
    <span class="kwa">infix</span> <span class="num">8</span> $    <span class="kwa">val op</span> $ <span class="sym">=</span> Unsafe.Array.sub
    <span class="kwa">infix</span> <span class="num">1</span> <span class="sym">&lt;-</span>   <span class="kwa">fun</span> <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">) &lt;-</span> x <span class="sym">=</span> Unsafe.Array.update <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> x<span class="sym">)</span>

    <span class="kwa">fun</span> main' n <span class="sym">=</span>
	<span class="kwa">let val</span> x <span class="sym">=</span> Array.tabulate <span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
	    <span class="kwa">val</span> y <span class="sym">=</span> Array.array <span class="sym">(</span>n<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
	    <span class="kwa">fun</span> down <span class="num">0</span> <span class="sym">= ()</span>
	      <span class="sym">|</span> down i <span class="sym">=</span> <span class="kwa">let val</span> i <span class="sym">=</span> i <span class="sym">-</span> <span class="num">1</span> <span class="kwa">in</span> <span class="sym">(</span>y<span class="sym">,</span> i<span class="sym">) &lt;-</span> x$i <span class="sym">+</span> y$i<span class="sym">;</span> down i <span class="kwa">end</span>
	    <span class="kwa">fun</span> loop <span class="num">0</span> <span class="sym">= ()</span>
	      <span class="sym">|</span> loop i <span class="sym">= (</span>down n<span class="sym">;</span> loop <span class="sym">(</span>i <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
	<span class="kwa">in</span> loop <span class="num">1000</span><span class="sym">;</span>
	   print <span class="sym">(</span>format <span class="sym">(</span><span class="kwb">int</span> <span class="kwa">o</span> sp <span class="num">1</span> <span class="kwa">o</span> <span class="kwb">int</span> <span class="kwa">o</span> nl<span class="sym">) (</span>y$<span class="num">0</span><span class="sym">) (</span>y$<span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)));</span>
	   OS.Process.success
	<span class="kwa">end</span>

    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1</span>
      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
<span class="kwa">end</span>
