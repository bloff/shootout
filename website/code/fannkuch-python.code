<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># Contributed by Sokolov Yura</span>

<span class="kwc">from</span> sys <span class="kwc">import</span> argv
<span class="kwb">def</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">):</span>
   count <span class="sym">=</span> <span class="kwa">range</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
   maxFlipsCount<span class="sym">,</span> m<span class="sym">,</span> r<span class="sym">,</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="num">0</span>

   perm1 <span class="sym">=</span> <span class="kwa">range</span><span class="sym">(</span>n<span class="sym">)</span>
   perm  <span class="sym">=</span> <span class="kwa">range</span><span class="sym">(</span>n<span class="sym">)</span>
   perm1_ins <span class="sym">=</span> perm1<span class="sym">.</span>insert
   perm1_pop <span class="sym">=</span> perm1<span class="sym">.</span>pop
   <span class="kwb">while</span> True<span class="sym">:</span>
      <span class="kwb">if</span> check <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">:</span>
         <span class="kwb">print</span> <span class="str">&quot;&quot;</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span>`i<span class="sym">+</span><span class="num">1</span>` <span class="kwb">for</span> i <span class="kwb">in</span> perm1<span class="sym">)</span>
         check <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>

      <span class="kwb">while</span> r <span class="sym">!=</span> <span class="num">1</span><span class="sym">:</span>
         count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r
         r <span class="sym">-=</span> <span class="num">1</span>

      <span class="kwb">if</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> <span class="num">0</span> <span class="kwb">and</span> perm1<span class="sym">[</span>m<span class="sym">] !=</span> m<span class="sym">:</span>
         perm<span class="sym">[:]=</span>perm1
         flipsCount <span class="sym">=</span> <span class="num">0</span>
         k <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
         <span class="kwb">while</span> k<span class="sym">:</span>
            perm<span class="sym">[:</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">] =</span> perm<span class="sym">[</span>k<span class="sym">::-</span><span class="num">1</span><span class="sym">]</span>
            flipsCount <span class="sym">+=</span> <span class="num">1</span>
            k <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>

         <span class="kwb">if</span> flipsCount <span class="sym">&gt;</span> maxFlipsCount<span class="sym">:</span>
            maxFlipsCount <span class="sym">=</span> flipsCount
            maxPerm <span class="sym">=</span> <span class="kwa">list</span><span class="sym">(</span>perm1<span class="sym">)</span>

      <span class="kwb">while</span> True<span class="sym">:</span>
         <span class="kwb">if</span> r <span class="sym">==</span> n<span class="sym">:</span> <span class="kwb">return</span> maxFlipsCount
         <span class="kwd">perm1_ins</span><span class="sym">(</span>r<span class="sym">,</span><span class="kwd">perm1_pop</span><span class="sym">(</span><span class="num">0</span><span class="sym">))</span>
         count<span class="sym">[</span>r<span class="sym">] -=</span> <span class="num">1</span>
         <span class="kwb">if</span> count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">:</span> <span class="kwb">break</span>
         r <span class="sym">+=</span> <span class="num">1</span>

<span class="kwb">def</span> <span class="kwd">main</span><span class="sym">():</span>
    n <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>argv <span class="kwb">and</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span> <span class="kwb">or</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwb">print</span> <span class="str">&quot;Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">%(</span>n<span class="sym">,</span><span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">)),</span>

<span class="kwb">if</span> __name__<span class="sym">==</span><span class="str">&quot;__main__&quot;</span><span class="sym">:</span>
    <span class="kwd">main</span><span class="sym">()</span>

