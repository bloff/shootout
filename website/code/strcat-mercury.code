<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
% ---------------------------------------------------------------------------- %
% stringconcat.m
% Ralph Becket &lt;rbeck@microsoft.com&gt;
% Tue Jan  9 15:56:12 GMT 2001
% vim: ts=4 sw=4 et tw=0 wm=0 ff=unix
%
% NOTE: The C version simply appends <B><FONT COLOR="#A020F0">to</FONT></B> the <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">of</FONT></B> a preallocated
% buffer, doubling the buffer size when necessary.  <B><FONT COLOR="#A020F0">Not</FONT></B> what I would strictly
% call <B><FONT COLOR="#A020F0">string</FONT></B> concatenation.
%
% ---------------------------------------------------------------------------- %

:- module mytest.

:- <B><FONT COLOR="#A020F0">interface</FONT></B>.

:- import_module io.



:- pred main(io__state, io__state).
:- mode main(di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det.



:- <B><FONT COLOR="#A020F0">implementation</FONT></B>.


:- import_module <B><FONT COLOR="#A020F0">string</FONT></B>, int, list, require.



main --&gt;
    io__command_line_arguments(ArgV),
    (   <I><FONT COLOR="#B22222">{ ArgV = [],        N = 1 }</FONT></I>
    ;   <I><FONT COLOR="#B22222">{ ArgV = [Arg],     N = string__det_to_int(Arg) }</FONT></I>
    ;   <I><FONT COLOR="#B22222">{ ArgV = [_,_|_],   error(&quot;usage: nestedloops [N]&quot;) }</FONT></I>
    ),
    io__write_int(string__length(hellos(N, &quot;&quot;))),
    io__nl.



:- func hellos(int, <B><FONT COLOR="#A020F0">string</FONT></B>) = <B><FONT COLOR="#A020F0">string</FONT></B>.

hellos(I, S) = ( <B><FONT COLOR="#A020F0">if</FONT></B> I &gt; 0 <B><FONT COLOR="#A020F0">then</FONT></B> hellos(I - 1, S ++ &quot;hello\n&quot;) <B><FONT COLOR="#A020F0">else</FONT></B> S ).



</pre></td></tr></table>
