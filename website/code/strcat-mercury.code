<span class="slc">% ---------------------------------------------------------------------------- %</span>
<span class="slc">% stringconcat.m</span>
<span class="slc">% Ralph Becket &lt;rbeck&#64;microsoft.com&gt;</span>
<span class="slc">% Tue Jan  9 15:56:12 GMT 2001</span>
<span class="slc">% vim: ts=4 sw=4 et tw=0 wm=0 ff=unix</span>
<span class="slc">%</span>
<span class="slc">% NOTE: The C version simply appends to the end of a preallocated</span>
<span class="slc">% buffer, doubling the buffer size when necessary.  Not what I would strictly</span>
<span class="slc">% call string concatenation.</span>
<span class="slc">%</span>
<span class="slc">% ---------------------------------------------------------------------------- %</span>

<span class="sym">:-</span> module mytest.

<span class="sym">:-</span> interface.

<span class="sym">:-</span> import_module io.



<span class="sym">:-</span> pred main<span class="sym">(</span>io__state<span class="sym">,</span> io__state<span class="sym">)</span>.
<span class="sym">:-</span> mode main<span class="sym">(</span>di<span class="sym">,</span> uo<span class="sym">)</span> <span class="kwa">is</span> det.



<span class="sym">:-</span> implementation.


<span class="sym">:-</span> import_module string<span class="sym">,</span> int<span class="sym">,</span> list<span class="sym">,</span> require.



main <span class="sym">--&gt;</span>
    io__command_line_arguments<span class="sym">(</span>ArgV<span class="sym">),</span>
    <span class="sym">(   {</span> ArgV <span class="sym">= [],</span>        N <span class="sym">=</span> <span class="num">1</span> <span class="sym">}</span>
    <span class="sym">;   {</span> ArgV <span class="sym">= [</span>Arg<span class="sym">],</span>     N <span class="sym">=</span> string__det_to_int<span class="sym">(</span>Arg<span class="sym">) }</span>
    <span class="sym">;   {</span> ArgV <span class="sym">= [</span>_<span class="sym">,</span>_<span class="sym">|</span>_<span class="sym">],</span>   error<span class="sym">(</span><span class="str">&quot;usage: nestedloops [N]&quot;</span><span class="sym">) }</span>
    <span class="sym">),</span>
    io__write_int<span class="sym">(</span>string__length<span class="sym">(</span>hellos<span class="sym">(</span>N<span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">))),</span>
    io__nl.



<span class="sym">:-</span> func hellos<span class="sym">(</span>int<span class="sym">,</span> string<span class="sym">) =</span> string.

hellos<span class="sym">(</span>I<span class="sym">,</span> S<span class="sym">) = (</span> if I <span class="sym">&gt;</span> <span class="num">0</span> then hellos<span class="sym">(</span>I <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> S <span class="sym">++</span> <span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span> else S <span class="sym">)</span>.




