<span class="com">{-# OPTIONS -O3 #-}</span>
<span class="com">{-</span>
<span class="com">	The Computer Language Benchmarks Game</span>
<span class="com">   	http://shootout.alioth.debian.org/</span>
<span class="com">   	contributed by Bertram Felgenhauer</span>
<span class="com">-}</span>

<span class="kwa">import</span> Data.Word
<span class="kwa">import</span> Data.Array
<span class="kwa">import</span> Data.Bits
<span class="kwa">import</span> System

pieces <span class="sym">= [</span>
    <span class="sym">[(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">3</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">3</span><span class="sym">)],</span>
    <span class="sym">[(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">3</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">)],</span>
    <span class="sym">[(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">2</span><span class="sym">,</span><span class="num">1</span><span class="sym">)],</span>
    <span class="sym">[(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">2</span><span class="sym">,</span><span class="num">1</span><span class="sym">)],</span>
    <span class="sym">[(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">2</span><span class="sym">,</span><span class="num">1</span><span class="sym">)],</span>
    <span class="sym">[(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">)],</span>
    <span class="sym">[(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">2</span><span class="sym">,</span><span class="num">1</span><span class="sym">)],</span>
    <span class="sym">[(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">)],</span>
    <span class="sym">[(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">3</span><span class="sym">)],</span>
    <span class="sym">[(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">),(</span><span class="num">0</span><span class="sym">,</span><span class="num">3</span><span class="sym">),(</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">)]]</span>

transform p <span class="sym">=</span>
    <span class="sym">[</span> map <span class="sym">(</span>\<span class="sym">(</span>y<span class="sym">,</span>x<span class="sym">) -&gt; (</span>y<span class="sym">-</span>dy<span class="sym">,</span>x<span class="sym">-</span>dx<span class="sym">))</span> p''
    <span class="sym">|</span> p' <span class="sym">&lt;-</span> take <span class="num">6</span> <span class="sym">(</span>iterate <span class="sym">(</span>map <span class="sym">(</span>\<span class="sym">(</span>y<span class="sym">,</span>x<span class="sym">) -&gt; (</span>x<span class="sym">+</span>y<span class="sym">,-</span>y<span class="sym">)))</span> p<span class="sym">),</span>
      p'' <span class="sym">&lt;-</span> take <span class="num">2</span> <span class="sym">(</span>iterate <span class="sym">(</span>map <span class="sym">(</span>\<span class="sym">(</span>y<span class="sym">,</span>x<span class="sym">) -&gt; (</span>x<span class="sym">,</span>y<span class="sym">)))</span> p'<span class="sym">),</span>
      <span class="kwa">let</span> <span class="sym">(</span>dy<span class="sym">,</span>dx<span class="sym">) =</span> minimum p''<span class="sym">]</span>

pieceMasks <span class="sym">=</span> listArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">9</span><span class="sym">) (</span>map <span class="sym">(</span>pieceMasks' . transform<span class="sym">)</span> pieces<span class="sym">)</span> <span class="kwa">where</span>
    pieceMasks' ps <span class="sym">=</span> listArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">9</span><span class="sym">) [</span>pieceMasks'' ps <span class="sym">(</span>y<span class="sym">,</span>x<span class="sym">) |</span> y <span class="sym">&lt;- [</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">],</span> x <span class="sym">&lt;- [</span><span class="num">0</span>.<span class="num">.4</span><span class="sym">]]</span>
    pieceMasks'' ps pos <span class="sym">= [</span>m <span class="sym">|</span> p <span class="sym">&lt;-</span> ps<span class="sym">,</span> m <span class="sym">&lt;-</span> mask <span class="num">0</span> pos p<span class="sym">]</span>
    mask m <span class="sym">(</span>dy<span class="sym">,</span>dx<span class="sym">) [] = [</span>m<span class="sym">]</span>
    mask m <span class="sym">(</span>dy<span class="sym">,</span>dx<span class="sym">) ((</span>y<span class="sym">,</span>x<span class="sym">):</span>ps<span class="sym">)</span>
        <span class="sym">|</span> x' <span class="sym">&lt;</span> <span class="num">0</span> <span class="sym">||</span> x' <span class="sym">&gt;</span> <span class="num">4</span> <span class="sym">= []</span>
        <span class="sym">|</span> <span class="kwa">True</span> <span class="sym">=</span> mask <span class="sym">(</span>m .<span class="sym">|</span>. shiftL <span class="num">1</span> <span class="sym">((</span>dy<span class="sym">+</span>y<span class="sym">)*</span><span class="num">5</span><span class="sym">+</span>x'<span class="sym">)) (</span>dy<span class="sym">,</span>dx<span class="sym">)</span> ps
        <span class="kwa">where</span> x' <span class="sym">=</span> x <span class="sym">+</span> dx <span class="sym">+</span> div <span class="sym">(</span>y<span class="sym">+</span>dy<span class="sym">)</span> <span class="num">2</span>

search m <span class="num">50</span> p ps <span class="sym">= [</span>ps<span class="sym">]</span>
search m i p ps <span class="sym">| (</span>m .<span class="sym">&amp;</span>. shiftL <span class="num">1</span> i<span class="sym">) &gt;</span> <span class="num">0</span> <span class="sym">=</span> search m <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> p ps
search m i p ps <span class="sym">=</span> <span class="kwa">let</span> <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">) =</span> divMod i <span class="num">10</span> <span class="kwa">in</span>
    <span class="sym">[</span> ps'
    <span class="sym">|</span> p' <span class="sym">&lt;- [</span><span class="num">0</span>.<span class="num">.9</span><span class="sym">],</span> p .<span class="sym">&amp;</span>. shiftL <span class="num">1</span> p' <span class="sym">==</span> <span class="num">0</span><span class="sym">,</span>
      mask <span class="sym">&lt;-</span> pieceMasks <span class="sym">!</span> p' <span class="sym">!</span> r<span class="sym">,</span>
      <span class="kwa">let</span> mask' <span class="sym">=</span> shiftL mask <span class="sym">(</span><span class="num">10</span><span class="sym">*</span>q<span class="sym">),</span>
      m .<span class="sym">&amp;</span>. mask' <span class="sym">==</span> <span class="num">0</span><span class="sym">,</span>
      ps' <span class="sym">&lt;-</span> search <span class="sym">(</span>m .<span class="sym">|</span>. mask'<span class="sym">) (</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>p .<span class="sym">|</span>. shiftL <span class="num">1</span> p'<span class="sym">) ((</span>p'<span class="sym">,</span>mask'<span class="sym">):</span>ps<span class="sym">)]</span>

rows ps <span class="sym">= [[</span>i <span class="sym">|</span> x <span class="sym">&lt;- [</span><span class="num">0</span>.<span class="num">.4</span><span class="sym">], (</span>i<span class="sym">,</span>m<span class="sym">) &lt;-</span> ps<span class="sym">,</span> shiftL <span class="num">1</span> <span class="sym">(</span>y<span class="sym">*</span><span class="num">5</span><span class="sym">+</span>x<span class="sym">)</span> .<span class="sym">&amp;</span>. m <span class="sym">/=</span> <span class="num">0</span><span class="sym">] |</span> y <span class="sym">&lt;- [</span><span class="num">0</span>.<span class="num">.9</span><span class="sym">]]</span>

main <span class="sym">=</span> <span class="kwa">do</span>
    n <span class="sym">&lt;-</span> readIO . head <span class="sym">=&lt;&lt;</span> getArgs
    <span class="kwa">let</span> sols <span class="sym">=</span> map rows <span class="sym">(</span>take n <span class="sym">(</span>search <span class="sym">(-</span>shiftL <span class="num">1 50</span> <span class="sym">::</span> Word64<span class="sym">)</span> <span class="num">0</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">::</span> Word<span class="sym">) []))</span>
    putStrLn <span class="sym">(</span>show <span class="sym">(</span>length sols<span class="sym">) ++</span> <span class="str">&quot; solutions found\n&quot;</span><span class="sym">)</span>
    mapM <span class="sym">(</span>putStrLn . unlines . <span class="sym">(</span>zipWith <span class="sym">(++) (</span>cycle <span class="sym">[</span><span class="str">&quot;&quot;</span><span class="sym">,</span><span class="str">&quot; &quot;</span><span class="sym">]))</span>
         . map <span class="sym">((++</span> <span class="str">&quot; &quot;</span><span class="sym">)</span> . unwords . map show<span class="sym">)) [</span>minimum sols<span class="sym">,</span>maximum sols<span class="sym">]</span>
