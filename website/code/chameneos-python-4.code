<span class="slc">#-- The Computer Language Shootout</span>
<span class="slc">#-- http://shootout.alioth.debian.org/</span>
<span class="slc">#-- contributed by Tobias Polzin, translated from Mike Pall's Lua program</span>
<span class="slc">#-- modified by Josh Goldfoot to use ifs for the complement routine</span>

<span class="kwa">import</span> sys

N <span class="sym">=</span> <span class="kwb">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>
first <span class="sym">=</span> <span class="kwa">None</span>
second <span class="sym">=</span> <span class="kwa">None</span>
meetings <span class="sym">=</span> <span class="num">0</span>

RED<span class="sym">,</span> BLUE<span class="sym">,</span> YELLOW <span class="sym">=</span> <span class="kwb">xrange</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">4</span><span class="sym">)</span>

<span class="slc">#-- Create a very social creature.</span>
<span class="kwa">def</span> <span class="kwd">creature</span><span class="sym">(</span>me<span class="sym">):</span>
    <span class="kwa">global</span> N<span class="sym">,</span> first<span class="sym">,</span> second<span class="sym">,</span> meetings
    met <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">while</span> <span class="num">1</span><span class="sym">:</span>
        <span class="slc">#-- Meet another creature.</span>

        <span class="slc">#-- Wait until meeting place clears.</span>
        <span class="kwa">while</span> second<span class="sym">:</span>
            <span class="kwa">yield None</span>

        other <span class="sym">=</span> first
        <span class="kwa">if</span> other<span class="sym">:</span>
            <span class="slc">#-- Hey, I found a new friend!</span>
            second <span class="sym">=</span> me
        <span class="kwa">else</span><span class="sym">:</span>
            <span class="slc"># -- Sniff, nobody here (yet).</span>
            <span class="kwa">if</span> N <span class="sym">&lt;=</span> <span class="num">0</span><span class="sym">:</span>
                <span class="slc">#-- Uh oh, the mall is closed.</span>
                meetings <span class="sym">+=</span> met
                <span class="kwa">yield None</span>

                <span class="slc"># The mall was closed, so everyone is faded.</span>
                <span class="kwa">raise</span> <span class="kwc">StopIteration</span>
            N <span class="sym">-=</span> <span class="num">1</span>
            first <span class="sym">=</span> me
            <span class="kwa">while not</span> second<span class="sym">:</span>
                <span class="kwa">yield None</span> <span class="slc">#-- Wait for another creature.</span>
            other <span class="sym">=</span> second

            first <span class="sym">=</span> <span class="kwa">None</span>
            second <span class="sym">=</span> <span class="kwa">None</span>
            <span class="kwa">yield None</span>

        <span class="slc"># perform meeting</span>
        met <span class="sym">+=</span> <span class="num">1</span>
        <span class="kwa">if</span> me <span class="sym">!=</span> other<span class="sym">:</span>
            <span class="kwa">if</span> me <span class="sym">==</span> BLUE<span class="sym">:</span>
                me <span class="sym">=</span> other <span class="sym">==</span> RED <span class="kwa">and</span> YELLOW <span class="kwa">or</span> RED
            <span class="kwa">elif</span> me <span class="sym">==</span> RED<span class="sym">:</span>
                me <span class="sym">=</span> other <span class="sym">==</span> BLUE <span class="kwa">and</span> YELLOW <span class="kwa">or</span> BLUE
            <span class="kwa">elif</span> me <span class="sym">==</span> YELLOW<span class="sym">:</span>
                me <span class="sym">=</span> other <span class="sym">==</span> BLUE <span class="kwa">and</span> RED <span class="kwa">or</span> BLUE

<span class="slc">#-- Trivial round-robin scheduler.</span>
<span class="kwa">def</span> <span class="kwd">schedule</span><span class="sym">(</span>threads<span class="sym">):</span>
    <span class="kwa">global</span> meetings
    <span class="kwa">try</span><span class="sym">:</span>
        <span class="kwa">while</span> <span class="num">1</span><span class="sym">:</span>
            <span class="kwa">for</span> thread <span class="kwa">in</span> threads<span class="sym">:</span>
                thread<span class="sym">.</span><span class="kwd">next</span><span class="sym">()</span>
    <span class="kwa">except</span> <span class="kwc">StopIteration</span><span class="sym">:</span>
        <span class="kwa">return</span> meetings

<span class="kwa">def</span> <span class="kwd">main</span><span class="sym">():</span>
    <span class="slc">#-- A bunch of colorful creatures.</span>
    threads <span class="sym">= [</span>
        <span class="kwd">creature</span><span class="sym">(</span>BLUE<span class="sym">),</span>
        <span class="kwd">creature</span><span class="sym">(</span>RED<span class="sym">),</span>
        <span class="kwd">creature</span><span class="sym">(</span>YELLOW<span class="sym">),</span>
        <span class="kwd">creature</span><span class="sym">(</span>BLUE<span class="sym">) ]</span>

    <span class="kwa">print</span> <span class="kwd">schedule</span><span class="sym">(</span>threads<span class="sym">)</span>

<span class="kwd">main</span><span class="sym">()</span>
