<span class="com">(**</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by David Teller</span>
<span class="com"> *</span>
<span class="com"> * Inspired from the Python version</span>
<span class="com"> *)</span>

<span class="kwa">type</span> color <span class="sym">=</span> Blue <span class="sym">|</span> Red <span class="sym">|</span> Yellow

<span class="kwa">type</span> <span class="str">'a coroutine =</span>
<span class="str">  | Done    of '</span>a
  <span class="sym">|</span> Yield <span class="kwa">of</span> <span class="sym">(</span><span class="kwb">unit</span> <span class="sym">-&gt;</span> <span class="str">'a coroutine)</span>
<span class="str"></span>
<span class="str">let remaining_meetings      = ref 0</span>
<span class="str">let first_seat, second_seat = ref None, ref None</span>
<span class="str"></span>
<span class="str">let complement_color a b = match a,b with</span>
<span class="str">  | Blue, Red    | Red,    Blue -&gt; Yellow</span>
<span class="str">  | Blue, Yellow | Yellow, Blue -&gt; Red</span>
<span class="str">  | Red,  Yellow | Yellow, Red  -&gt; Blue</span>
<span class="str">  | _                           -&gt; a</span>
<span class="str"></span>
<span class="str">let creature =</span>
<span class="str">  let rec come_to_meeting met color  = match !second_seat with</span>
<span class="str">      | Some _ -&gt;                                  (*Both seats are taken, wait until meeting place clears*)</span>
<span class="str">	  Yield (fun () -&gt; come_to_meeting met color)</span>
<span class="str">      | None   -&gt;                                  (*At least one seat available.                         *)</span>
<span class="str">	  match !first_seat with</span>
<span class="str">	    | None when !remaining_meetings &lt;=0 -&gt; (*Oh, wait, everybody'</span>s gone <span class="sym">!</span>                         *)
		Done met
	    <span class="sym">|</span> None <span class="sym">-&gt;</span>
		first_seat <span class="sym">:=</span> Some color<span class="sym">;</span>
		<span class="kwa">let rec</span> <span class="kwd">loop</span> <span class="sym">() =</span>
		  <span class="kwa">match</span> <span class="sym">!</span>second_seat <span class="kwa">with</span>
		    <span class="sym">|</span> None       <span class="sym">-&gt;</span> <span class="kwd">Yield</span> <span class="sym">(</span><span class="kwa">fun</span> <span class="sym">() -&gt;</span> <span class="kwd">loop</span> <span class="sym">())</span>
		    <span class="sym">|</span> Some other <span class="sym">-&gt;</span>
			  second_seat <span class="sym">:=</span> None<span class="sym">;</span>     <span class="com">(*Yeah, that's a meeting                               *)</span>
			  first_seat  <span class="sym">:=</span> None<span class="sym">;</span>
			  decr remaining_meetings<span class="sym">;</span>
			  <span class="kwd">come_to_meeting</span> <span class="sym">(</span>met <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span>complement_color color other<span class="sym">)</span>
		<span class="kwa">in</span> <span class="kwd">loop</span> <span class="sym">()</span>
	    <span class="sym">|</span> Some other <span class="sym">-&gt;</span>
		second_seat <span class="sym">:=</span> Some color<span class="sym">;</span>
		<span class="kwd">Yield</span> <span class="sym">(</span><span class="kwa">fun</span> <span class="sym">() -&gt;</span> <span class="kwd">come_to_meeting</span> <span class="sym">(</span>met <span class="sym">+</span> <span class="num">1</span><span class="sym">) (</span>complement_color color other<span class="sym">))</span>
  <span class="kwa">in</span>
    come_to_meeting <span class="num">0</span>

<span class="kwa">let rec</span> schedule current next total <span class="sym">=</span>
  <span class="kwa">match</span> current <span class="kwa">with</span>
    <span class="sym">| []</span> <span class="kwa">when</span> next <span class="sym">= [] -&gt;</span> print_int total<span class="sym">;</span> <span class="kwd">print_newline</span> <span class="sym">()</span>
    <span class="sym">| []                -&gt;</span> schedule next <span class="sym">[]</span> total
    <span class="sym">|</span> Done d<span class="sym">::</span>t         <span class="sym">-&gt;</span> schedule t    <span class="kwd">next</span> <span class="sym">(</span>total <span class="sym">+</span> d<span class="sym">)</span>
    <span class="sym">| (</span>Yield h<span class="sym">)::</span>t      <span class="sym">-&gt;</span> schedule <span class="kwd">t</span>    <span class="sym">(</span><span class="kwd">h</span> <span class="sym">()::</span>next<span class="sym">)</span> total


<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="sym">(</span>remaining_meetings <span class="sym">:=</span>  <span class="kwa">try</span> <span class="kwd">int_of_string</span><span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">100</span><span class="sym">);</span>
  schedule <span class="sym">[</span>creature Blue<span class="sym">;</span> creature Red<span class="sym">;</span> creature Yellow<span class="sym">;</span> creature Blue<span class="sym">] []</span> <span class="num">0</span>





<span class="com">(*</span>
<span class="com"># Trivial round-robin scheduler.</span>
<span class="com">def schedule(threads):</span>
<span class="com">    while 1:</span>
<span class="com">        for thread in threads:</span>
<span class="com">            thread()</span>
<span class="com"></span>
<span class="com"># A bunch of colorful creatures.</span>
<span class="com">threads = [</span>
<span class="com">    creature(BLUE).next,</span>
<span class="com">    creature(RED).next,</span>
<span class="com">    creature(YELLOW).next,</span>
<span class="com">    creature(BLUE).next]</span>
<span class="com"></span>
<span class="com">schedule(threads)</span>
<span class="com">*)</span>
