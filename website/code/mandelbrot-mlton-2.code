<span class="com">(* mandelbrot.sml</span>
<span class="com"> *</span>
<span class="com"> *   Mandelbrot (fractal generation) benchmark.</span>
<span class="com"> *     (Loosely based on the C version.)</span>
<span class="com"> *</span>
<span class="com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="com"> *</span>
<span class="com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="com"> * Modified and ported to MLton by Vesa Karvonen.</span>
<span class="com"> *)</span>

<span class="kwa">val</span> <span class="sym">(</span>K<span class="sym">,</span> L2<span class="sym">) = (</span><span class="num">50</span><span class="sym">,</span> <span class="num">4.0</span><span class="sym">)</span>

<span class="kwa">fun</span> out b <span class="sym">=</span> <span class="kwa">TextIO</span>.output1 <span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,</span> Byte.byteToChar b<span class="sym">)</span>

<span class="kwa">fun</span> mandel <span class="sym">(</span>h<span class="sym">,</span> w<span class="sym">) =</span>
   <span class="kwa">let fun</span> p <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) =</span>
          <span class="kwa">let val</span> <span class="sym">(</span>Cr<span class="sym">,</span> Ci<span class="sym">) = (</span><span class="kwb">real</span> x<span class="sym">*</span><span class="num">2.0</span><span class="sym">/</span><span class="kwb">real</span> w<span class="sym">-</span><span class="num">1.5</span><span class="sym">,</span> <span class="kwb">real</span> y<span class="sym">*</span><span class="num">2.0</span><span class="sym">/</span><span class="kwb">real</span> h<span class="sym">-</span><span class="num">1.0</span><span class="sym">)</span>
              <span class="kwa">fun</span> lp <span class="sym">(</span>r<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">) =</span>
                  <span class="kwa">let val</span> <span class="sym">(</span>r2<span class="sym">,</span> i2<span class="sym">) = (</span>r<span class="sym">*</span>r<span class="sym">,</span> i<span class="sym">*</span>i<span class="sym">)</span>
                  <span class="kwa">in</span> r2<span class="sym">+</span>i2 <span class="sym">&lt;=</span> L2 <span class="kwa">andalso</span>
                     <span class="sym">(</span>k<span class="sym">=</span><span class="num">0</span> <span class="kwa">orelse</span> lp <span class="sym">(</span>r2<span class="sym">-</span>i2<span class="sym">+</span>Cr<span class="sym">, (</span>r<span class="sym">+</span>r<span class="sym">)*</span>i<span class="sym">+</span>Ci<span class="sym">,</span> k<span class="sym">-</span><span class="num">1</span><span class="sym">))</span> <span class="kwa">end</span>
          <span class="kwa">in</span> lp <span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> K<span class="sym">)</span> <span class="kwa">end</span>
       <span class="kwa">fun</span> xl <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> b<span class="sym">,</span> n<span class="sym">) =</span>
          <span class="kwa">if</span> x <span class="sym">=</span> w <span class="kwa">then</span> <span class="sym">(</span>out <span class="sym">(</span><span class="kwa">Word8</span>.<span class="sym">&lt;&lt; (</span>b<span class="sym">,</span> n<span class="sym">)) ;</span> yl <span class="sym">(</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
          <span class="kwa">else let val</span> <span class="sym">(</span>b<span class="sym">,</span> n<span class="sym">) =</span> <span class="kwa">if</span> n<span class="sym">=</span><span class="num">0</span>w0 <span class="kwa">then</span> <span class="sym">(</span>out b <span class="sym">; (</span><span class="num">0</span>w0<span class="sym">,</span> <span class="num">0</span>w8<span class="sym">))</span> <span class="kwa">else</span> <span class="sym">(</span>b<span class="sym">,</span> n<span class="sym">)</span>
               <span class="kwa">in</span> xl <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> b<span class="sym">+</span>b<span class="sym">+(</span><span class="kwa">if</span> p <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">)</span> <span class="kwa">then</span> <span class="num">0</span>w1 <span class="kwa">else</span> <span class="num">0</span>w0<span class="sym">),</span> n<span class="sym">-</span><span class="num">0</span>w1<span class="sym">)</span> <span class="kwa">end</span>
       <span class="kwa">and</span> yl y <span class="sym">=</span> <span class="kwa">if</span> y <span class="sym">&lt;</span> h <span class="kwa">then</span> xl <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> y<span class="sym">,</span> <span class="num">0</span>w0<span class="sym">,</span> <span class="num">0</span>w8<span class="sym">)</span> <span class="kwa">else</span> <span class="sym">()</span>
   <span class="kwa">in</span> app print <span class="sym">[</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString h<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString w<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">] ;</span> yl <span class="num">0</span> <span class="kwa">end</span>

<span class="kwa">val</span> n <span class="sym">=</span> valOf <span class="sym">(</span><span class="kwa">Int</span>.fromString <span class="sym">(</span>hd <span class="sym">(</span>CommandLine.arguments <span class="sym">())))</span> <span class="kwa">handle</span> _ <span class="sym">=&gt;</span> <span class="num">600</span>

<span class="kwa">val</span> _ <span class="sym">=</span> mandel <span class="sym">(</span>n<span class="sym">,</span> n<span class="sym">)</span>
