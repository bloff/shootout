<span class="slc">//</span>
<span class="slc">// Contributed by John Skaller</span>
<span class="slc">//</span>
<span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;</span>
n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);</span>
<span class="slc">//Adapted from C++ solution.</span>

<span class="kwa">body</span> <span class="str">&quot;&quot;&quot;</span>
<span class="str">int **mkmatrix(int rows, int cols) {</span>
<span class="str">  int i, j, count = 1;</span>
<span class="str">  int **m = (int **) malloc(rows * sizeof(int *));</span>
<span class="str">  for (i=0; i&lt;rows; i++) {</span>
<span class="str">    m[i] = (int *) malloc(cols * sizeof(int));</span>
<span class="str">    for (j=0; j&lt;cols; j++) m[i][j] = count++;</span>
<span class="str">  }</span>
<span class="str">  return(m);</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">void zeromatrix(int rows, int cols, int **m) {</span>
<span class="str">  int i, j;</span>
<span class="str">  for (i=0; i&lt;rows; i++)</span>
<span class="str">  for (j=0; j&lt;cols; j++)</span>
<span class="str">    m[i][j] = 0;</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">void freematrix(int rows, int **m) {</span>
<span class="str">  while (--rows &gt; -1) free(m[rows]);</span>
<span class="str">  free(m);</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">void mmult(int rows, int cols, int **m1, int **m2, int **m3) {</span>
<span class="str">  int i, j, k, val;</span>
<span class="str">  for (i=0; i&lt;rows; i++)</span>
<span class="str">  for (j=0; j&lt;cols; j++) {</span>
<span class="str">    val = 0;</span>
<span class="str">    for (k=0; k&lt;cols; k++) val += m1[i][k] * m2[k][j];</span>
<span class="str">    m3[i][j] = val;</span>
<span class="str">  }</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">int get(int **mm, int x, int y) { return mm[x][y];}</span>
<span class="str">&quot;&quot;&quot;</span><span class="sym">;</span>

<span class="kwa">type</span> matrix <span class="sym">=</span> <span class="str">&quot;int**&quot;</span><span class="sym">;</span>
<span class="kwa">fun</span> mkmatrix<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> matrix<span class="sym">;</span>
<span class="kwa">fun</span> get<span class="sym">:</span> matrix <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">int</span><span class="sym">;</span>
<span class="kwa">proc</span> zeromatrix<span class="sym">:</span> matrix<span class="sym">;</span>
<span class="kwa">proc</span> mmult<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">*</span> matrix <span class="sym">*</span> matrix <span class="sym">*</span> matrix<span class="sym">;</span>
<span class="kwa">proc</span> freematrix<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> matrix<span class="sym">;</span>

SIZE <span class="sym">:=</span> <span class="num">30</span><span class="sym">;</span>
m1 <span class="sym">:=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span>SIZE<span class="sym">);</span>
m2 <span class="sym">:=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span>SIZE<span class="sym">);</span>
mm <span class="sym">:=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span>SIZE<span class="sym">);</span>

<span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;</span>
until i <span class="sym">==</span> <span class="num">0</span> do
  mmult<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);</span>
  <span class="sym">--</span>i<span class="sym">;</span>
done<span class="sym">;</span>

<span class="kwa">print</span> <span class="sym">(</span>get<span class="sym">(</span>mm<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">));</span> <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;</span>
<span class="kwa">print</span> <span class="sym">(</span>get<span class="sym">(</span>mm<span class="sym">,</span><span class="num">2</span><span class="sym">,</span><span class="num">3</span><span class="sym">));</span> <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;</span>
<span class="kwa">print</span> <span class="sym">(</span>get<span class="sym">(</span>mm<span class="sym">,</span><span class="num">3</span><span class="sym">,</span><span class="num">2</span><span class="sym">));</span> <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;</span>
<span class="kwa">print</span> <span class="sym">(</span>get<span class="sym">(</span>mm<span class="sym">,</span><span class="num">4</span><span class="sym">,</span><span class="num">4</span><span class="sym">));</span> <span class="kwa">endl</span><span class="sym">;</span>

freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> m1<span class="sym">);</span>
freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> m2<span class="sym">);</span>
freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> mm<span class="sym">);</span>

