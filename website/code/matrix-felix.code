<span class="line">    1 </span><span class="slc">//
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// Contributed by John Skaller
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">//
</span><span class="line">    4 </span><span class="slc"></span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span><span class="line">    5 </span><span class="sym"></span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);
</span><span class="line">    6 </span><span class="sym"></span><span class="slc">//Adapted from C++ solution.
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="kwa">body</span> <span class="str">&quot;&quot;&quot;
</span><span class="line">    9 </span><span class="str">int **mkmatrix(int rows, int cols) {
</span><span class="line">   10 </span><span class="str">  int i, j, count = 1;
</span><span class="line">   11 </span><span class="str">  int **m = (int **) malloc(rows * sizeof(int *));
</span><span class="line">   12 </span><span class="str">  for (i=0; i&lt;rows; i++) {
</span><span class="line">   13 </span><span class="str">    m[i] = (int *) malloc(cols * sizeof(int));
</span><span class="line">   14 </span><span class="str">    for (j=0; j&lt;cols; j++) m[i][j] = count++;
</span><span class="line">   15 </span><span class="str">  }
</span><span class="line">   16 </span><span class="str">  return(m);
</span><span class="line">   17 </span><span class="str">}
</span><span class="line">   18 </span><span class="str">
</span><span class="line">   19 </span><span class="str">void zeromatrix(int rows, int cols, int **m) {
</span><span class="line">   20 </span><span class="str">  int i, j;
</span><span class="line">   21 </span><span class="str">  for (i=0; i&lt;rows; i++)
</span><span class="line">   22 </span><span class="str">  for (j=0; j&lt;cols; j++)
</span><span class="line">   23 </span><span class="str">    m[i][j] = 0;
</span><span class="line">   24 </span><span class="str">}
</span><span class="line">   25 </span><span class="str">
</span><span class="line">   26 </span><span class="str">void freematrix(int rows, int **m) {
</span><span class="line">   27 </span><span class="str">  while (--rows &gt; -1) free(m[rows]);
</span><span class="line">   28 </span><span class="str">  free(m);
</span><span class="line">   29 </span><span class="str">}
</span><span class="line">   30 </span><span class="str">
</span><span class="line">   31 </span><span class="str">void mmult(int rows, int cols, int **m1, int **m2, int **m3) {
</span><span class="line">   32 </span><span class="str">  int i, j, k, val;
</span><span class="line">   33 </span><span class="str">  for (i=0; i&lt;rows; i++)
</span><span class="line">   34 </span><span class="str">  for (j=0; j&lt;cols; j++) {
</span><span class="line">   35 </span><span class="str">    val = 0;
</span><span class="line">   36 </span><span class="str">    for (k=0; k&lt;cols; k++) val += m1[i][k] * m2[k][j];
</span><span class="line">   37 </span><span class="str">    m3[i][j] = val;
</span><span class="line">   38 </span><span class="str">  }
</span><span class="line">   39 </span><span class="str">}
</span><span class="line">   40 </span><span class="str">
</span><span class="line">   41 </span><span class="str">int get(int **mm, int x, int y) { return mm[x][y];}
</span><span class="line">   42 </span><span class="str">&quot;&quot;&quot;</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym">
</span><span class="line">   44 </span><span class="sym"></span><span class="kwa">type</span> matrix <span class="sym">=</span> <span class="str">&quot;int**&quot;</span><span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span><span class="kwa">fun</span> mkmatrix<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> matrix<span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span><span class="kwa">fun</span> get<span class="sym">:</span> matrix <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">int</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span><span class="kwa">proc</span> zeromatrix<span class="sym">:</span> matrix<span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span><span class="kwa">proc</span> mmult<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">*</span> matrix <span class="sym">*</span> matrix <span class="sym">*</span> matrix<span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span><span class="kwa">proc</span> freematrix<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> matrix<span class="sym">;
</span><span class="line">   50 </span><span class="sym">
</span><span class="line">   51 </span><span class="sym"></span>SIZE <span class="sym">:=</span> <span class="num">30</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>m1 <span class="sym">:=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span>SIZE<span class="sym">);
</span><span class="line">   53 </span><span class="sym"></span>m2 <span class="sym">:=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span>SIZE<span class="sym">);
</span><span class="line">   54 </span><span class="sym"></span>mm <span class="sym">:=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span>SIZE<span class="sym">);
</span><span class="line">   55 </span><span class="sym">
</span><span class="line">   56 </span><span class="sym"></span><span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>until i <span class="sym">==</span> <span class="num">0</span> do
<span class="line">   58 </span>  mmult<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);
</span><span class="line">   59 </span><span class="sym">  --</span>i<span class="sym">;
</span><span class="line">   60 </span><span class="sym"></span>done<span class="sym">;
</span><span class="line">   61 </span><span class="sym">
</span><span class="line">   62 </span><span class="sym"></span><span class="kwa">print</span> <span class="sym">(</span>get<span class="sym">(</span>mm<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">));</span> <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;
</span><span class="line">   63 </span><span class="sym"></span><span class="kwa">print</span> <span class="sym">(</span>get<span class="sym">(</span>mm<span class="sym">,</span><span class="num">2</span><span class="sym">,</span><span class="num">3</span><span class="sym">));</span> <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;
</span><span class="line">   64 </span><span class="sym"></span><span class="kwa">print</span> <span class="sym">(</span>get<span class="sym">(</span>mm<span class="sym">,</span><span class="num">3</span><span class="sym">,</span><span class="num">2</span><span class="sym">));</span> <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;
</span><span class="line">   65 </span><span class="sym"></span><span class="kwa">print</span> <span class="sym">(</span>get<span class="sym">(</span>mm<span class="sym">,</span><span class="num">4</span><span class="sym">,</span><span class="num">4</span><span class="sym">));</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">   66 </span><span class="sym">
</span><span class="line">   67 </span><span class="sym"></span>freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> m1<span class="sym">);
</span><span class="line">   68 </span><span class="sym"></span>freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> m2<span class="sym">);
</span><span class="line">   69 </span><span class="sym"></span>freematrix<span class="sym">(</span>SIZE<span class="sym">,</span> mm<span class="sym">);
</span><span class="line">   70 </span><span class="sym"></span>
