<span class="slc">// $Id: takfp-gpp.code,v 1.4 2005-03-21 08:36:50 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org
</span><span class="slc">// Contributed by Brent Fulgham
</span>
<span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;iomanip&gt;
</span><span class="dir">#include &lt;iostream&gt;
</span>
<span class="kwa">using namespace</span> std<span class="sym">;

</span><span class="kwb">float</span> Tak <span class="sym">(</span><span class="kwb">float</span> x<span class="sym">,</span> <span class="kwb">float</span> y<span class="sym">,</span> <span class="kwb">float</span> z<span class="sym">)
{
</span>	<span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&gt;=</span> x<span class="sym">)</span> <span class="kwa">return</span> z<span class="sym">;
</span>	<span class="kwa">return</span> Tak<span class="sym">(</span>Tak<span class="sym">(</span>x<span class="num">-1</span><span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">),</span> Tak<span class="sym">(</span>y<span class="num">-1</span><span class="sym">,</span>z<span class="sym">,</span>x<span class="sym">),</span> Tak<span class="sym">(</span>z<span class="num">-1</span><span class="sym">,</span>x<span class="sym">,</span>y<span class="sym">));
}

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[])
{
</span>	<span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>	cout <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>fixed <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>setprecision<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span>	cout <span class="sym">&lt;&lt;</span> Tak<span class="sym">(</span>n<span class="sym">*</span><span class="num">3.0</span><span class="sym">,</span> n<span class="sym">*</span><span class="num">2.0</span><span class="sym">,</span> n<span class="sym">*</span><span class="num">1.0</span><span class="sym">) &lt;&lt;</span> endl<span class="sym">;
</span>	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}

</span><span class="slc">// vim: ts=4 ft=c</span>
