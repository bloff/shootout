#<span class="sym">!/</span>bin<span class="sym">/</span>bash
# <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}</span>
<span class="sym">[</span> \! <span class="sym">-</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;</span>
    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0</span>
exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="sym">!</span>#

<span class="slc">;;; $Id: objinst-rep.code,v 1.4 2006-02-10 07:03:46 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()</span>
  <span class="sym">(</span><span class="kwa">open</span> rep rep.system rep.data.objects<span class="sym">)</span>

  <span class="sym">(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool b<span class="sym">)</span>
    <span class="sym">(</span>format standard<span class="sym">-</span>output <span class="sym">(</span><span class="kwa">if</span> b <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)))</span>

  <span class="sym">(</span>define toggle
    <span class="sym">(</span>object nil
	    <span class="sym">((</span>new obj state<span class="sym">)</span>
	     <span class="sym">(</span>put obj <span class="str">'state state)</span>
<span class="str">	     obj)</span>
<span class="str">	    ((value tog) (get tog '</span>state<span class="sym">))</span>
	    <span class="sym">((</span>activate tog<span class="sym">)</span>
	     <span class="sym">(</span>put tog <span class="str">'state (not (get tog '</span>state<span class="sym">)))</span>
	     tog<span class="sym">)))</span>

  <span class="sym">(</span>define <span class="kwa">nth</span><span class="sym">-</span>toggle
    <span class="sym">(</span>object toggle
	    <span class="sym">((</span>new obj state <span class="kwa">max</span><span class="sym">)</span>
	     <span class="sym">(</span>toggle <span class="str">'new obj state)</span>
<span class="str">	     (put obj '</span>count<span class="sym">-</span><span class="kwa">max max</span><span class="sym">)</span>
	     <span class="sym">(</span>put obj <span class="str">'counter 0)</span>
<span class="str">	     obj)</span>
<span class="str">	    ((activate obj)</span>
<span class="str">	     (let ((c (get obj '</span>counter<span class="sym">)))</span>
	       <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (+</span> c <span class="num">1</span><span class="sym">) (</span>get obj <span class="str">'count-max))</span>
<span class="str">		   (progn</span>
<span class="str">		     (put obj '</span>state <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>get obj <span class="str">'state)))</span>
<span class="str">		     (put obj '</span>counter <span class="num">0</span><span class="sym">))</span>
		 <span class="sym">(</span>put obj <span class="str">'counter (+ c 1)))</span>
<span class="str">	       obj))))</span>
<span class="str"></span>
<span class="str">  (let* ((arg (get-command-line-option &quot;--num&quot; t))</span>
<span class="str">	 (n (if arg (read-from-string arg) 1)))</span>
<span class="str">    (let ((tog (toggle '</span>new <span class="str">'my-tog '</span>t<span class="sym">)))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	  <span class="sym">((=</span> i <span class="num">5</span><span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>toggle <span class="str">'value (toggle '</span>activate tog<span class="sym">))))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	  <span class="sym">((=</span> i n<span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">setq</span> tog <span class="sym">(</span>toggle <span class="str">'new '</span>my<span class="sym">-</span>tog <span class="str">'t))))</span>
<span class="str"></span>
<span class="str">    (format standard-output &quot;</span><span class="esc">\n</span><span class="str">&quot;)</span>
<span class="str"></span>
<span class="str">    (let ((ntog (nth-toggle '</span>new <span class="str">'my-ntog '</span>t <span class="num">3</span><span class="sym">)))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	  <span class="sym">((=</span> i <span class="num">8</span><span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span><span class="kwa">nth</span><span class="sym">-</span>toggle <span class="str">'value (nth-toggle '</span>activate ntog<span class="sym">))))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	  <span class="sym">((=</span> i n<span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">setq</span> ntog <span class="sym">(</span><span class="kwa">nth</span><span class="sym">-</span>toggle <span class="str">'new '</span>my<span class="sym">-</span>ntog <span class="str">'t 3))))))</span>
