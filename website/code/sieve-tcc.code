<span class="com">/* -*- mode: c -*-
 * $Id: sieve-tcc.code,v 1.4 2005-09-25 23:29:43 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span>
<span class="kwb">int
</span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> NUM <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwb">static char</span> flags<span class="sym">[</span><span class="num">8192</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">];
</span>    <span class="kwb">long</span> i<span class="sym">,</span> k<span class="sym">;
</span>    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>    <span class="kwa">while</span> <span class="sym">(</span>NUM<span class="sym">--) {
</span>	count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">;</span> i<span class="sym">++) {
</span>	    flags<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">1</span><span class="sym">;
	}
</span>	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">;</span> i<span class="sym">++) {
</span>	    <span class="kwa">if</span> <span class="sym">(</span>flags<span class="sym">[</span>i<span class="sym">]) {
</span>		<span class="slc">// remove all multiples of prime: i
</span>		<span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> k <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">) {
</span>		    flags<span class="sym">[</span>k<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
		}
</span>		count<span class="sym">++;
	    }
	}
    }
</span>    printf<span class="sym">(</span><span class="str">&quot;Count: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> count<span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}
</span>
