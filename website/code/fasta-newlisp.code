#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp
#
# The Great Computer Language Shootout
# http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/
</span>#
# fasta <span class="sym">-</span> benchmark
#
# Contributed by Brent Fulgham <span class="sym">(</span>based on Lutz Mueller<span class="str">'s Random implementation)

# The usual pseudo-random number generator
(set '</span>IM <span class="num">139968</span><span class="sym">)
(</span><span class="kwa">set</span> <span class="str">'IA 3877)
(set '</span>IC <span class="num">29573</span><span class="sym">)
(</span><span class="kwa">set</span> <span class="str">'LAST 42)

(define (gen-random maximum)
	(set '</span>LAST <span class="sym">(</span>mod <span class="sym">(</span>add <span class="sym">(</span>mul LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">))
	(</span>div <span class="sym">(</span>mul maximum LAST<span class="sym">)</span> IM<span class="sym">))

</span><span class="slc">;;; Weighted selection from alphabet
</span><span class="sym">(</span>define <span class="sym">(</span>mkCumulative aslst<span class="sym">)
    (</span><span class="kwa">set</span> <span class="str">'cp 0.0)
    (dolist (curr aslst)
        (set '</span>cp <span class="sym">(</span>add cp <span class="sym">(</span><span class="kwa">last</span> curr<span class="sym">)))
	(</span>replace<span class="sym">-</span><span class="kwa">assoc</span> <span class="sym">(</span>first curr<span class="sym">)</span> aslst <span class="sym">(</span><span class="kwa">list</span> <span class="sym">(</span>first curr<span class="sym">)</span> cp<span class="sym">))))

(</span>define <span class="sym">(</span>selectRandomInternal lst r<span class="sym">)
    (</span><span class="kwa">cond</span> <span class="sym">((</span>empty? lst<span class="sym">)</span> <span class="str">&quot;error&quot;</span><span class="sym">)
          (</span>true
	      <span class="sym">(</span><span class="kwa">set</span> <span class="str">'curr (first lst))
              (if (&lt; r (last curr))
                  (first curr)
                  (selectRandomInternal (rest lst) r)))))

(define (selectRandom alphabet)
    (set '</span>r <span class="sym">(</span>gen<span class="sym">-</span>random <span class="num">1</span><span class="sym">))
    (</span>selectRandomInternal alphabet r<span class="sym">))

</span><span class="slc">;;; Generate and write FASTA format
</span>
<span class="sym">(</span>define <span class="sym">(</span>mkFastaFragment id description alphabet num<span class="sym">)
  (</span>println <span class="str">&quot;&gt;&quot;</span> id <span class="str">&quot; &quot;</span> description<span class="sym">)

  (</span><span class="kwa">set</span> <span class="str">'todo n)
  (set '</span>len <span class="num">60</span><span class="sym">)

  (</span><span class="kwa">while</span> <span class="sym">(&gt;</span> todo <span class="num">0</span><span class="sym">)
      (</span><span class="kwa">set</span> <span class="str">'m (if (&lt; todo len) todo len))
      (dotimes (x m)
          (print (selectRandom alphabet)))
      (println)
      (set '</span>todo <span class="sym">(-</span> todo len<span class="sym">))))


</span><span class="slc">;;; Define alphabets
</span><span class="sym">(</span><span class="kwa">set</span> <span class="str">'dna1
    '</span><span class="sym">((</span><span class="str">&quot;a&quot;</span> <span class="num">0.3029549426680</span><span class="sym">)
      (</span><span class="str">&quot;c&quot;</span> <span class="num">0.1979883004921</span><span class="sym">)
      (</span><span class="str">&quot;g&quot;</span> <span class="num">0.1975473066391</span><span class="sym">)
      (</span><span class="str">&quot;t&quot;</span> <span class="num">0.3015094502008</span><span class="sym">)))

(</span><span class="kwa">set</span> <span class="str">'dna2
    '</span><span class="sym">((</span><span class="str">&quot;a&quot;</span> <span class="num">0.25</span><span class="sym">)
      (</span><span class="str">&quot;c&quot;</span> <span class="num">0.125</span><span class="sym">)
      (</span><span class="str">&quot;g&quot;</span> <span class="num">0.125</span><span class="sym">)
      (</span><span class="str">&quot;t&quot;</span> <span class="num">0.25</span><span class="sym">)
      (</span><span class="str">&quot;U&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;R&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;Y&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;K&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;M&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;S&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;W&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;B&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;D&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;H&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;V&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;N&quot;</span> <span class="num">0.019230769231</span><span class="sym">)
      (</span><span class="str">&quot;-&quot;</span> <span class="num">0.019230769231</span><span class="sym">)))

(</span>define <span class="sym">(</span>main<span class="sym">)
    (</span>begin
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))

        (set '</span>dna1 <span class="sym">(</span>mkCumulative dna1<span class="sym">))
        (</span><span class="kwa">set</span> <span class="str">'dna2 (mkCumulative dna2))
	(mkFastaFragment &quot;TestOne&quot; &quot;test fragment&quot; dna2 n)
	(mkFastaFragment &quot;TestTwo&quot; &quot;test fragment&quot; dna1 n)
	(mkFastaFragment &quot;TestThree&quot; &quot;test fragment&quot; dna2 n)
	(mkFastaFragment &quot;TestFour&quot; &quot;test fragment&quot; dna1 n)
	(mkFastaFragment &quot;TestFive&quot; &quot;test fragment&quot; dna2 n)))

(main)
(exit)
</span>
