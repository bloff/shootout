<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> org<span class="sym">.</span>apache<span class="sym">.</span>oro<span class="sym">.</span>text<span class="sym">.</span>regex<span class="sym">.*;</span>

<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){</span>
   var n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
   <span class="kwa">let</span> <span class="kwc">ArrayList</span><span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">&gt;</span> lines <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">();</span>

   <span class="kwa">let</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));</span>
   var ?<span class="kwc">String</span> line<span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> in<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">)</span>
      lines<span class="sym">.</span>add<span class="sym">(</span>line<span class="sym">);</span>
   in<span class="sym">.</span>close<span class="sym">;</span>

   <span class="kwa">let</span> regex <span class="sym">=</span>
        <span class="str">&quot;(?: ^ | [^</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">(])   # must be preceeded by non-digit</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span>
        <span class="str">&quot;(?:                  # area code is 3 digits</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span>
        <span class="str">&quot;</span> <span class="esc">\\</span><span class="str">((</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)</span><span class="esc">\\</span><span class="str">)   # match 1: with parens</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span>
        <span class="str">&quot;|                    # or</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span>
        <span class="str">&quot; (</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)         # match 2: without parens</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span>
        <span class="str">&quot;)                    # if match1 then match right paren</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span>
        <span class="str">&quot;[ ]                  # area code followed by one space</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span>
        <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)          # match 3: prefix of 3 digits</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span>
        <span class="str">&quot;[ -]                 # separator is either space or dash</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span>
        <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)       # match 4: last 4 digits</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span>
        <span class="str">&quot;(?:</span><span class="esc">\\</span><span class="str">D|$)            # must be followed by a non-digit</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>

   <span class="kwa">let</span> compiler <span class="sym">=</span> <span class="kwa">new</span> Perl5Compiler<span class="sym">();</span>
   <span class="kwa">let</span> pattern <span class="sym">=</span> compiler<span class="sym">.</span>compile<span class="sym">(</span>regex<span class="sym">,</span> Perl5Compiler<span class="sym">.</span>EXTENDED_MASK<span class="sym">);</span>

   var matcher <span class="sym">=</span> <span class="kwa">new</span> Perl5Matcher<span class="sym">();</span>
   var <span class="kwc">ArrayList</span><span class="sym">&lt;</span><span class="kwc">String</span><span class="sym">&gt;</span> phoneNumbers <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">();</span>
   var <span class="kwc">String</span> s<span class="sym">;</span>
   var <span class="kwc">MatchResult</span> m<span class="sym">;</span>

   <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){</span>
      phoneNumbers<span class="sym">.</span>clear<span class="sym">;</span>

      <span class="kwa">for</span> <span class="sym">(</span>each <span class="sym">:</span> lines<span class="sym">){</span>
         <span class="kwa">if</span> <span class="sym">(</span>matcher<span class="sym">.</span>contains<span class="sym">(</span>each<span class="sym">,</span> pattern<span class="sym">)) {</span>
            m <span class="sym">=</span> matcher<span class="sym">.</span>getMatch<span class="sym">();</span>
            <span class="kwa">if</span> <span class="sym">(</span>m<span class="sym">.</span>group<span class="sym">(</span><span class="num">1</span><span class="sym">) !=</span> null<span class="sym">)</span>
               s <span class="sym">=</span> <span class="str">&quot;(&quot;</span> <span class="sym">+</span> m<span class="sym">.</span>group<span class="sym">(</span><span class="num">1</span><span class="sym">) +</span> <span class="str">&quot;) &quot;</span> <span class="sym">+</span>  m<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">) +</span> <span class="str">&quot;-&quot;</span> <span class="sym">+</span> m<span class="sym">.</span>group<span class="sym">(</span><span class="num">4</span><span class="sym">);</span>
            <span class="kwa">else</span>
               s <span class="sym">=</span> <span class="str">&quot;(&quot;</span> <span class="sym">+</span> m<span class="sym">.</span>group<span class="sym">(</span><span class="num">2</span><span class="sym">) +</span> <span class="str">&quot;) &quot;</span> <span class="sym">+</span>  m<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">) +</span> <span class="str">&quot;-&quot;</span> <span class="sym">+</span> m<span class="sym">.</span>group<span class="sym">(</span><span class="num">4</span><span class="sym">);</span>

            phoneNumbers<span class="sym">.</span>add<span class="sym">(</span>s<span class="sym">);</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   var count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">for</span> <span class="sym">(</span>each <span class="sym">:</span> phoneNumbers<span class="sym">)</span> println<span class="sym">( ++</span>count <span class="sym">+</span> <span class="str">&quot;: &quot;</span> <span class="sym">+</span> each<span class="sym">);</span>
<span class="sym">}</span>


