<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* The Great Computer Language Shootout 
   contributed by Isaac Gouy

   Transliterated from Java solution

To compile:   
   nicec --sourcepath .. -d . -a regexmatch.jar regexmatch

To run:
   java -jar regexmatch.jar &lt; input.txt 9000
*/</FONT></I>

<B><FONT COLOR="#A020F0">import</FONT></B> java.io.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.util.regex.*;
<B><FONT COLOR="#A020F0">import</FONT></B> ackermann; <I><FONT COLOR="#B22222">// reuse toSinglePositiveInt
</FONT></I>
<B><FONT COLOR="#A020F0">void</FONT></B> main(String[] args){
   var n = toSinglePositiveInt(args);    
   let lines = <B><FONT COLOR="#A020F0">new</FONT></B> LinkedList();

   let in = <B><FONT COLOR="#A020F0">new</FONT></B> BufferedReader(<B><FONT COLOR="#A020F0">new</FONT></B> InputStreamReader(System.in));
   var ?String line;
   <B><FONT COLOR="#A020F0">while</FONT></B> ((line = in.readLine()) != <B><FONT COLOR="#A020F0">null</FONT></B>) 
      lines.addLast(line);
   in.close;
   
   let pattern = Pattern.compile(
      <B><FONT COLOR="#BC8F8F">&quot;(?:^|[^\\d\\(])&quot;</FONT></B>+                    <I><FONT COLOR="#B22222">// must be preceeded by non-digit
</FONT></I>      <B><FONT COLOR="#BC8F8F">&quot;(?:\\((\\d\\d\\d)\\)|(\\d\\d\\d))&quot;</FONT></B>+  <I><FONT COLOR="#B22222">// area code is 3 digits (match 1&amp;2)
</FONT></I>      <B><FONT COLOR="#BC8F8F">&quot;[ ]&quot;</FONT></B>+                                <I><FONT COLOR="#B22222">// area code followed by one space
</FONT></I>      <B><FONT COLOR="#BC8F8F">&quot;(\\d\\d\\d)&quot;</FONT></B>+                        <I><FONT COLOR="#B22222">// match 3: prefix of 3 digits
</FONT></I>      <B><FONT COLOR="#BC8F8F">&quot;[ -]&quot;</FONT></B>+                               <I><FONT COLOR="#B22222">// separator is either space or dash
</FONT></I>      <B><FONT COLOR="#BC8F8F">&quot;(\\d\\d\\d\\d)&quot;</FONT></B>+                     <I><FONT COLOR="#B22222">// match 4: last 4 digits
</FONT></I>      <B><FONT COLOR="#BC8F8F">&quot;(?:\\D|$)&quot;</FONT></B>                           <I><FONT COLOR="#B22222">// must be followed by a non-digit
</FONT></I>   );
   
   var ?String areaCode;
   var m = pattern.matcher(<B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>);
   var count = 0;
   let buffer = <B><FONT COLOR="#A020F0">new</FONT></B> StringBuffer();

   <B><FONT COLOR="#A020F0">while</FONT></B> (n-- &gt; 0){          
      <B><FONT COLOR="#A020F0">for</FONT></B> (each : lines){
         m = pattern.matcher(each);
         <B><FONT COLOR="#A020F0">if</FONT></B> (m.find()) {
            buffer.setLength(0);
            buffer.append(<B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">if</FONT></B> ((areaCode = m.group(1)) != <B><FONT COLOR="#A020F0">null</FONT></B>) 
               buffer.append(areaCode);       
            <B><FONT COLOR="#A020F0">else</FONT></B> 
               buffer.append(m.group(2));               
            buffer.append(<B><FONT COLOR="#BC8F8F">&quot;) &quot;</FONT></B>).append(m.group(3)).append(<B><FONT COLOR="#BC8F8F">&quot;-&quot;</FONT></B>).append(m.group(4));
                                    
            <B><FONT COLOR="#A020F0">if</FONT></B> (n == 0)	println( ++count + <B><FONT COLOR="#BC8F8F">&quot;: &quot;</FONT></B> + buffer);  
         }      
      }
   }        
}

</pre></td></tr></table>
