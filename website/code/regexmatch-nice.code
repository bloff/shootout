<span class="com">/* The Great Computer Language Shootout
    contributed by Isaac Gouy

   Transliterated from Java solution

To compile:
      nicec --sourcepath .. -d . -a regexmatch.jar regexmatch

To run:
   java -jar regexmatch.jar &lt; input.txt 9000
*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>regex<span class="sym">.*;
</span><span class="kwa">import</span> ackermann<span class="sym">;</span> <span class="slc">// reuse toSinglePositiveInt
</span>
<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   var n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);
    </span>   <span class="kwa">let</span> lines <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();

</span>   <span class="kwa">let</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span>   var ?<span class="kwc">String</span> line<span class="sym">;
</span>   <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> in<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">)
 </span>      lines<span class="sym">.</span>addLast<span class="sym">(</span>line<span class="sym">);
</span>   in<span class="sym">.</span>close<span class="sym">;

   </span>   <span class="kwa">let</span> pattern <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span>compile<span class="sym">(
</span>      <span class="str">&quot;(?:^|[^</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">(])&quot;</span><span class="sym">+</span>                    <span class="slc">// must be preceeded by non-digit
</span>      <span class="str">&quot;(?:</span><span class="esc">\\</span><span class="str">((</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)</span><span class="esc">\\</span><span class="str">)|(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d))&quot;</span><span class="sym">+</span>  <span class="slc">// area code is 3 digits (match 1&amp;2)
</span>      <span class="str">&quot;[ ]&quot;</span><span class="sym">+</span>                                <span class="slc">// area code followed by one space
</span>      <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span><span class="sym">+</span>                        <span class="slc">// match 3: prefix of 3 digits
</span>      <span class="str">&quot;[ -]&quot;</span><span class="sym">+</span>                               <span class="slc">// separator is either space or dash
</span>      <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span><span class="sym">+</span>                     <span class="slc">// match 4: last 4 digits
</span>      <span class="str">&quot;(?:</span><span class="esc">\\</span><span class="str">D|$)&quot;</span>                           <span class="slc">// must be followed by a non-digit
</span>   <span class="sym">);

   </span>   var ?<span class="kwc">String</span> areaCode<span class="sym">;
</span>   var m <span class="sym">=</span> pattern<span class="sym">.</span>matcher<span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);
</span>   var count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>   <span class="kwa">let</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();

</span>   <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
          </span>      <span class="kwa">for</span> <span class="sym">(</span>each <span class="sym">:</span> lines<span class="sym">){
</span>         m <span class="sym">=</span> pattern<span class="sym">.</span>matcher<span class="sym">(</span>each<span class="sym">);
</span>         <span class="kwa">if</span> <span class="sym">(</span>m<span class="sym">.</span>find<span class="sym">()) {
</span>            buffer<span class="sym">.</span>setLength<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>            buffer<span class="sym">.</span>append<span class="sym">(</span><span class="str">&quot;(&quot;</span><span class="sym">);
</span>            <span class="kwa">if</span> <span class="sym">((</span>areaCode <span class="sym">=</span> m<span class="sym">.</span>group<span class="sym">(</span><span class="num">1</span><span class="sym">)) !=</span> null<span class="sym">)
 </span>               buffer<span class="sym">.</span>append<span class="sym">(</span>areaCode<span class="sym">);
       </span>            <span class="kwa">else
 </span>               buffer<span class="sym">.</span>append<span class="sym">(</span>m<span class="sym">.</span>group<span class="sym">(</span><span class="num">2</span><span class="sym">));
               </span>            buffer<span class="sym">.</span>append<span class="sym">(</span><span class="str">&quot;) &quot;</span><span class="sym">).</span>append<span class="sym">(</span>m<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">)).</span>append<span class="sym">(</span><span class="str">&quot;-&quot;</span><span class="sym">).</span>append<span class="sym">(</span>m<span class="sym">.</span>group<span class="sym">(</span><span class="num">4</span><span class="sym">));

                                    </span>            <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>	println<span class="sym">( ++</span>count <span class="sym">+</span> <span class="str">&quot;: &quot;</span> <span class="sym">+</span> buffer<span class="sym">);
           }
            }
   }
        }

</span>
