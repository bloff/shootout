<span class="line">    1 </span><span class="com">/* The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="com">     contributed by Isaac Gouy
</span><span class="line">    3 </span><span class="com"> 
</span><span class="line">    4 </span><span class="com">    Transliterated from Java solution
</span><span class="line">    5 </span><span class="com"> 
</span><span class="line">    6 </span><span class="com"> To compile:
</span><span class="line">    7 </span><span class="com">       nicec --sourcepath .. -d . -a regexmatch.jar regexmatch
</span><span class="line">    8 </span><span class="com"> 
</span><span class="line">    9 </span><span class="com"> To run:
</span><span class="line">   10 </span><span class="com">    java -jar regexmatch.jar &lt; input.txt 9000
</span><span class="line">   11 </span><span class="com"> */</span>
<span class="line">   12 </span>
<span class="line">   13 </span>  <span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="line">   14 </span><span class="sym"> </span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>regex<span class="sym">.*;
</span><span class="line">   15 </span><span class="sym"> </span><span class="kwa">import</span> ackermann<span class="sym">;</span> <span class="slc">// reuse toSinglePositiveInt 
</span><span class="line">   16 </span><span class="slc"></span>
<span class="line">   17 </span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span><span class="line">   18 </span><span class="sym"> </span>   var n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);
</span><span class="line">   19 </span><span class="sym">     </span>   <span class="kwa">let</span> lines <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   20 </span><span class="sym"> 
</span><span class="line">   21 </span><span class="sym"> </span>   <span class="kwa">let</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span><span class="line">   22 </span><span class="sym"> </span>   var ?<span class="kwc">String</span> line<span class="sym">;
</span><span class="line">   23 </span><span class="sym"> </span>   <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> in<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">)
</span><span class="line">   24 </span><span class="sym">  </span>      lines<span class="sym">.</span>addLast<span class="sym">(</span>line<span class="sym">);
</span><span class="line">   25 </span><span class="sym"> </span>   in<span class="sym">.</span>close<span class="sym">;
</span><span class="line">   26 </span><span class="sym"> 
</span><span class="line">   27 </span><span class="sym">    </span>   <span class="kwa">let</span> pattern <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span>compile<span class="sym">(
</span><span class="line">   28 </span><span class="sym"> </span>      <span class="str">&quot;(?:^|[^</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">(])&quot;</span><span class="sym">+</span>                    <span class="slc">// must be preceeded by non-digit 
</span><span class="line">   29 </span><span class="slc"></span>      <span class="str">&quot;(?:</span><span class="esc">\\</span><span class="str">((</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)</span><span class="esc">\\</span><span class="str">)|(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d))&quot;</span><span class="sym">+</span>  <span class="slc">// area code is 3 digits (match 1&amp;2) 
</span><span class="line">   30 </span><span class="slc"></span>      <span class="str">&quot;[ ]&quot;</span><span class="sym">+</span>                                <span class="slc">// area code followed by one space 
</span><span class="line">   31 </span><span class="slc"></span>      <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span><span class="sym">+</span>                        <span class="slc">// match 3: prefix of 3 digits 
</span><span class="line">   32 </span><span class="slc"></span>      <span class="str">&quot;[ -]&quot;</span><span class="sym">+</span>                               <span class="slc">// separator is either space or dash 
</span><span class="line">   33 </span><span class="slc"></span>      <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span><span class="sym">+</span>                     <span class="slc">// match 4: last 4 digits 
</span><span class="line">   34 </span><span class="slc"></span>      <span class="str">&quot;(?:</span><span class="esc">\\</span><span class="str">D|$)&quot;</span>                           <span class="slc">// must be followed by a non-digit 
</span><span class="line">   35 </span><span class="slc"></span>   <span class="sym">);
</span><span class="line">   36 </span><span class="sym"> 
</span><span class="line">   37 </span><span class="sym">    </span>   var ?<span class="kwc">String</span> areaCode<span class="sym">;
</span><span class="line">   38 </span><span class="sym"> </span>   var m <span class="sym">=</span> pattern<span class="sym">.</span>matcher<span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);
</span><span class="line">   39 </span><span class="sym"> </span>   var count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   40 </span><span class="sym"> </span>   <span class="kwa">let</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();
</span><span class="line">   41 </span><span class="sym"> 
</span><span class="line">   42 </span><span class="sym"> </span>   <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
</span><span class="line">   43 </span><span class="sym">           </span>      <span class="kwa">for</span> <span class="sym">(</span>each <span class="sym">:</span> lines<span class="sym">){
</span><span class="line">   44 </span><span class="sym"> </span>         m <span class="sym">=</span> pattern<span class="sym">.</span>matcher<span class="sym">(</span>each<span class="sym">);
</span><span class="line">   45 </span><span class="sym"> </span>         <span class="kwa">if</span> <span class="sym">(</span>m<span class="sym">.</span>find<span class="sym">()) {
</span><span class="line">   46 </span><span class="sym"> </span>            buffer<span class="sym">.</span>setLength<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   47 </span><span class="sym"> </span>            buffer<span class="sym">.</span>append<span class="sym">(</span><span class="str">&quot;(&quot;</span><span class="sym">);
</span><span class="line">   48 </span><span class="sym"> </span>            <span class="kwa">if</span> <span class="sym">((</span>areaCode <span class="sym">=</span> m<span class="sym">.</span>group<span class="sym">(</span><span class="num">1</span><span class="sym">)) !=</span> null<span class="sym">)
</span><span class="line">   49 </span><span class="sym">  </span>               buffer<span class="sym">.</span>append<span class="sym">(</span>areaCode<span class="sym">);
</span><span class="line">   50 </span><span class="sym">        </span>            <span class="kwa">else
</span><span class="line">   51 </span><span class="kwa">  </span>               buffer<span class="sym">.</span>append<span class="sym">(</span>m<span class="sym">.</span>group<span class="sym">(</span><span class="num">2</span><span class="sym">));
</span><span class="line">   52 </span><span class="sym">                </span>            buffer<span class="sym">.</span>append<span class="sym">(</span><span class="str">&quot;) &quot;</span><span class="sym">).</span>append<span class="sym">(</span>m<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">)).</span>append<span class="sym">(</span><span class="str">&quot;-&quot;</span><span class="sym">).</span>append<span class="sym">(</span>m<span class="sym">.</span>group<span class="sym">(</span><span class="num">4</span><span class="sym">));
</span><span class="line">   53 </span><span class="sym"> 
</span><span class="line">   54 </span><span class="sym">                                     </span>            <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>        println<span class="sym">( ++</span>count <span class="sym">+</span> <span class="str">&quot;: &quot;</span> <span class="sym">+</span> buffer<span class="sym">);
</span><span class="line">   55 </span><span class="sym">            }
</span><span class="line">   56 </span><span class="sym">             }
</span><span class="line">   57 </span><span class="sym">    }
</span><span class="line">   58 </span><span class="sym">         }
</span><span class="line">   59 </span><span class="sym"> 
</span><span class="line">   60 </span><span class="sym"> </span> 
