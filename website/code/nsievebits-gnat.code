<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span><span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span><span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span><span class="kwa">use</span> Ada.Text_Io<span class="sym">;
</span><span class="kwa">with</span> Ada.Integer_Text_Io<span class="sym">;</span><span class="kwa">use</span> Ada.Integer_Text_Io<span class="sym">;

</span><span class="kwa">procedure</span> Nsievebits <span class="kwa">is

   function</span> Count <span class="sym">(</span>M <span class="sym">:</span> <span class="kwa">in</span>     <span class="kwb">Natural</span> <span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is
      type</span> Boolean_Array <span class="kwa">is array</span> <span class="sym">(</span><span class="num">2</span> .. M<span class="sym">)</span> <span class="kwa">of</span> <span class="kwb">Boolean</span><span class="sym">;
</span>      <span class="kwa">pragma</span> Pack <span class="sym">(</span>Boolean_Array<span class="sym">);
</span>      C <span class="sym">:</span> <span class="kwb">Natural</span>       <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      S <span class="sym">:</span> Boolean_Array <span class="sym">:= (</span><span class="kwa">others</span> <span class="sym">=&gt;</span> True<span class="sym">);
</span>      I <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;
</span>   <span class="kwa">begin
      for</span> K <span class="kwa">in</span> S<span class="sym">'</span><span class="kwa">range loop
         if</span> S<span class="sym">(</span>K<span class="sym">)</span> <span class="kwa">then
</span>            C <span class="sym">:=</span> C <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>            I <span class="sym">:=</span> K<span class="sym">;
</span>            <span class="kwa">loop
</span>               I <span class="sym">:=</span> I <span class="sym">+</span> K<span class="sym">;
</span>               <span class="kwa">exit when</span> I <span class="sym">&gt;</span> M<span class="sym">;
</span>               S<span class="sym">(</span>I<span class="sym">) :=</span> False<span class="sym">;
</span>            <span class="kwa">end loop</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">return</span> C<span class="sym">;
</span>   <span class="kwa">end</span> Count<span class="sym">;

</span>   <span class="kwa">procedure</span> Run <span class="sym">(</span>N <span class="sym">:</span> <span class="kwa">in</span>     <span class="kwb">Natural</span> <span class="sym">)</span> <span class="kwa">is
</span>      M <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;
</span>   <span class="kwa">begin
</span>      M <span class="sym">:=</span> <span class="num">2</span> <span class="sym">**</span> N <span class="sym">*</span> <span class="num">10_000</span><span class="sym">;
</span>      Put <span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">);
</span>      Put <span class="sym">(</span>Item  <span class="sym">=&gt;</span> M<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">8</span><span class="sym">);
</span>      Put <span class="sym">(</span>Item  <span class="sym">=&gt;</span> Count <span class="sym">(</span>M<span class="sym">),</span> Width <span class="sym">=&gt;</span> <span class="num">8</span><span class="sym">);
</span>      New_Line<span class="sym">;
</span>   <span class="kwa">end</span> Run<span class="sym">;

</span>   N <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value <span class="sym">(</span>Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span><span class="kwa">begin
</span>   Run <span class="sym">(</span>N<span class="sym">);
</span>   Run <span class="sym">(</span>N <span class="num">- 1</span><span class="sym">);
</span>   Run <span class="sym">(</span>N <span class="num">- 2</span><span class="sym">);
</span><span class="kwa">end</span> Nsievebits<span class="sym">;</span>
