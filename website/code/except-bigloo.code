<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: except-bigloo.code,v 1.5 2006-02-10 07:03:36 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>module except
	<span class="sym">(</span>main main<span class="sym">))</span>

<span class="sym">(</span>define HI <span class="num">0</span><span class="sym">)</span>
<span class="sym">(</span>define LO <span class="num">0</span><span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>some_fun n<span class="sym">)</span>
  <span class="sym">(</span>try
   <span class="sym">(</span>hi_fun n<span class="sym">)</span>
   <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>escape proc msg obj<span class="sym">)</span>
     <span class="sym">(</span><span class="kwa">print</span> <span class="str">&quot;should not get here &quot;</span> proc <span class="str">&quot;:&quot;</span> msg <span class="str">&quot; -- &quot;</span> obj<span class="sym">)</span>
     <span class="sym">(</span>escape #f<span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span>hi_fun n<span class="sym">)</span>
  <span class="sym">(</span>try
   <span class="sym">(</span>lo_fun n<span class="sym">)</span>
   <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>escape proc msg obj<span class="sym">)</span>
     <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">not</span> <span class="sym">(</span><span class="kwa">equal</span>? obj <span class="str">'Hi))</span>
<span class="str">	    (error proc msg obj)) ; rethrow</span>
<span class="str">	   (else</span>
<span class="str">	    (set! HI (+ HI 1))</span>
<span class="str">	    (escape #t))))))</span>
<span class="str"></span>
<span class="str">(define (lo_fun n)</span>
<span class="str">  (try</span>
<span class="str">   (blowup n)</span>
<span class="str">   (lambda (escape proc msg obj)</span>
<span class="str">     (cond ((not (equal? obj '</span>Lo<span class="sym">))</span>
	    <span class="sym">(</span>error proc msg obj<span class="sym">))</span> <span class="slc">; rethrow</span>
	   <span class="sym">(</span>else
	    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> LO <span class="sym">(+</span> LO <span class="num">1</span><span class="sym">))</span>
	    <span class="sym">(</span>escape #t<span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>blowup n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> <span class="num">0</span> <span class="sym">(</span>modulo n <span class="num">2</span><span class="sym">))</span>
      <span class="sym">(</span>error <span class="str">'() &quot;Hi Exception&quot; '</span>Hi<span class="sym">)</span>
      <span class="sym">(</span>error <span class="str">'() &quot;Lo Exception&quot; '</span>Lo<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	<span class="sym">((=</span> i n<span class="sym">))</span>
      <span class="sym">(</span>some_fun i<span class="sym">)))</span>
  <span class="sym">(</span>display<span class="sym">*</span> <span class="str">&quot;Exceptions: HI=&quot;</span> HI <span class="str">&quot; / LO=&quot;</span> LO<span class="sym">)</span>
  <span class="sym">(</span>newline<span class="sym">))</span>
