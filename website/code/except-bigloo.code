<span class="line">    1 </span><span class="slc">;;; -*- mode: scheme -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: except-bigloo.code,v 1.4 2004-11-13 07:41:31 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">(</span>module except
<span class="line">    6 </span>        <span class="sym">(</span>main main<span class="sym">))
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym">(</span>define HI <span class="num">0</span><span class="sym">)
</span><span class="line">    9 </span><span class="sym">(</span>define LO <span class="num">0</span><span class="sym">)
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym">(</span>define <span class="sym">(</span>some_fun n<span class="sym">)
</span><span class="line">   12 </span><span class="sym">  (</span>try
<span class="line">   13 </span>   <span class="sym">(</span>hi_fun n<span class="sym">)
</span><span class="line">   14 </span><span class="sym">   (</span><span class="kwa">lambda</span> <span class="sym">(</span>escape proc msg obj<span class="sym">)
</span><span class="line">   15 </span><span class="sym">     (</span><span class="kwa">print</span> <span class="str">&quot;should not get here &quot;</span> proc <span class="str">&quot;:&quot;</span> msg <span class="str">&quot; -- &quot;</span> obj<span class="sym">)
</span><span class="line">   16 </span><span class="sym">     (</span>escape #f<span class="sym">))))
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym">(</span>define <span class="sym">(</span>hi_fun n<span class="sym">)
</span><span class="line">   19 </span><span class="sym">  (</span>try
<span class="line">   20 </span>   <span class="sym">(</span>lo_fun n<span class="sym">)
</span><span class="line">   21 </span><span class="sym">   (</span><span class="kwa">lambda</span> <span class="sym">(</span>escape proc msg obj<span class="sym">)
</span><span class="line">   22 </span><span class="sym">     (</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">not</span> <span class="sym">(</span><span class="kwa">equal</span>? obj <span class="str">'Hi))
</span><span class="line">   23 </span><span class="str">            (error proc msg obj)) ; rethrow
</span><span class="line">   24 </span><span class="str">           (else
</span><span class="line">   25 </span><span class="str">            (set! HI (+ HI 1))
</span><span class="line">   26 </span><span class="str">            (escape #t))))))
</span><span class="line">   27 </span><span class="str">
</span><span class="line">   28 </span><span class="str">(define (lo_fun n)
</span><span class="line">   29 </span><span class="str">  (try
</span><span class="line">   30 </span><span class="str">   (blowup n)
</span><span class="line">   31 </span><span class="str">   (lambda (escape proc msg obj)
</span><span class="line">   32 </span><span class="str">     (cond ((not (equal? obj '</span>Lo<span class="sym">))
</span><span class="line">   33 </span><span class="sym">            (</span>error proc msg obj<span class="sym">))</span> <span class="slc">; rethrow
</span><span class="line">   34 </span><span class="slc"></span>           <span class="sym">(</span>else
<span class="line">   35 </span>            <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> LO <span class="sym">(+</span> LO <span class="num">1</span><span class="sym">))
</span><span class="line">   36 </span><span class="sym">            (</span>escape #t<span class="sym">))))))
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym">(</span>define <span class="sym">(</span>blowup n<span class="sym">)
</span><span class="line">   39 </span><span class="sym">  (</span><span class="kwa">if</span> <span class="sym">(=</span> <span class="num">0</span> <span class="sym">(</span>modulo n <span class="num">2</span><span class="sym">))
</span><span class="line">   40 </span><span class="sym">      (</span>error <span class="str">'() &quot;Hi Exception&quot; '</span>Hi<span class="sym">)
</span><span class="line">   41 </span><span class="sym">      (</span>error <span class="str">'() &quot;Lo Exception&quot; '</span>Lo<span class="sym">)))
</span><span class="line">   42 </span><span class="sym">
</span><span class="line">   43 </span><span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
</span><span class="line">   44 </span><span class="sym">  (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))
</span><span class="line">   45 </span><span class="sym">    (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
</span><span class="line">   46 </span><span class="sym">        ((=</span> i n<span class="sym">))
</span><span class="line">   47 </span><span class="sym">      (</span>some_fun i<span class="sym">)))
</span><span class="line">   48 </span><span class="sym">  (</span>display<span class="sym">*</span> <span class="str">&quot;Exceptions: HI=&quot;</span> HI <span class="str">&quot; / LO=&quot;</span> LO<span class="sym">)
</span><span class="line">   49 </span><span class="sym">  (</span>newline<span class="sym">))</span>
