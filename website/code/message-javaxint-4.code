<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Graham Miller</span>
<span class="com">*/</span>

<span class="kwa">public class</span> message <span class="sym">{</span>
   <span class="kwa">public static final</span> <span class="kwb">int</span> numberOfThreads <span class="sym">=</span> <span class="num">500</span><span class="sym">;</span>

   <span class="kwa">public static</span> <span class="kwb">int</span> numberOfMessagesToSend<span class="sym">;</span>

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {</span>
      numberOfMessagesToSend <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

      RingBufferThread chain <span class="sym">=</span> null<span class="sym">;</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> numberOfThreads<span class="sym">;</span> i<span class="sym">++) {</span>
         chain <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">RingBufferThread</span><span class="sym">(</span>chain<span class="sym">,</span> numberOfMessagesToSend<span class="sym">*(</span>numberOfThreads<span class="sym">));</span>
         chain<span class="sym">.</span><span class="kwd">start</span><span class="sym">();</span>
       <span class="sym">}</span>


      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> numberOfMessagesToSend<span class="sym">;</span> i<span class="sym">++) {</span>
         chain<span class="sym">.</span><span class="kwd">enqueue</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
      <span class="sym">}</span>
      chain<span class="sym">.</span><span class="kwd">signalDoneSendingMessages</span><span class="sym">();</span>
    <span class="sym">}</span>

   <span class="kwa">public static class</span> RingBufferThread <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{</span>

      <span class="kwa">private static final</span> <span class="kwb">int</span> RING_BUFFER_CAPACITY <span class="sym">=</span> <span class="num">100</span><span class="sym">;</span>

      <span class="kwa">private volatile</span> RingNode loadNode<span class="sym">;</span>
      <span class="kwa">private volatile</span> RingNode consumeNode<span class="sym">;</span>

      RingBufferThread nextThread<span class="sym">;</span>
      <span class="kwa">private volatile</span> <span class="kwb">boolean</span> done <span class="sym">=</span> false<span class="sym">;</span>
      <span class="kwa">private final</span> <span class="kwb">int</span> finalSum<span class="sym">;</span>


      <span class="kwd">RingBufferThread</span><span class="sym">(</span>RingBufferThread nextThread<span class="sym">,</span> <span class="kwb">int</span> finalSum<span class="sym">) {</span>
         RingNode node <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">RingNode</span><span class="sym">();</span>
         RingNode tail <span class="sym">=</span> node<span class="sym">;</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> RING_BUFFER_CAPACITY<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">++){</span>
            RingNode newNode <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">RingNode</span><span class="sym">();</span>
            newNode<span class="sym">.</span>next <span class="sym">=</span> node<span class="sym">;</span>
            node <span class="sym">=</span> newNode<span class="sym">;</span>
         <span class="sym">}</span>
         <span class="slc">// complete the ring</span>
         tail<span class="sym">.</span>next <span class="sym">=</span> node<span class="sym">;</span>

         <span class="slc">// both load and consume start at the same node</span>
         loadNode <span class="sym">=</span> node<span class="sym">;</span>
         consumeNode <span class="sym">=</span> node<span class="sym">;</span>

         <span class="kwa">this</span><span class="sym">.</span>nextThread <span class="sym">=</span> nextThread<span class="sym">;</span>
         <span class="kwa">this</span><span class="sym">.</span>finalSum <span class="sym">=</span> finalSum<span class="sym">;</span>
      <span class="sym">}</span>

      <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
         <span class="kwa">if</span> <span class="sym">(</span>nextThread <span class="sym">!=</span> null<span class="sym">) {</span>
            <span class="kwa">while</span> <span class="sym">(!</span>done <span class="sym">|| !</span><span class="kwd">isEmpty</span><span class="sym">()) {</span>
               nextThread<span class="sym">.</span><span class="kwd">enqueue</span><span class="sym">(</span><span class="kwd">dequeue</span><span class="sym">());</span>
            <span class="sym">}</span>
            nextThread<span class="sym">.</span><span class="kwd">signalDoneSendingMessages</span><span class="sym">();</span>
         <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">while</span> <span class="sym">(</span>sum <span class="sym">&lt;</span> finalSum<span class="sym">) {</span>
               <span class="kwb">int</span> message <span class="sym">=</span> <span class="kwd">dequeue</span><span class="sym">();</span>
               sum <span class="sym">+=</span> message<span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>sum<span class="sym">);</span>
            <span class="kwc">System</span><span class="sym">.</span><span class="kwd">exit</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
         <span class="sym">}</span>
      <span class="sym">}</span>


      <span class="kwa">private</span> <span class="kwb">boolean</span> <span class="kwd">isEmpty</span><span class="sym">() {</span>
         <span class="kwa">return</span> consumeNode <span class="sym">==</span> loadNode<span class="sym">;</span>
      <span class="sym">}</span>

      <span class="com">/**</span>
<span class="com">       * &#64;param message</span>
<span class="com">       */</span>
      <span class="kwa">public final</span> <span class="kwb">void</span> <span class="kwd">enqueue</span><span class="sym">(</span><span class="kwb">int</span> message<span class="sym">) {</span>
         <span class="slc">// after this test becomes false, and the loop exits</span>
         <span class="slc">// the removal of an element by the &quot;other&quot; thread</span>
         <span class="slc">// cannot make it true again, so therefore it is invariant</span>
         <span class="slc">// for the rest of the execution of this method.</span>
         <span class="slc">// that is once we have some free space, we will always</span>
         <span class="slc">// have free space until the thread calling this method</span>
         <span class="slc">// adds an element.</span>
         <span class="kwa">do</span> <span class="sym">{</span> <span class="com">/* nothing */</span> <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>loadNode<span class="sym">.</span>next <span class="sym">==</span> consumeNode <span class="sym">&amp;&amp;</span> <span class="kwd">trueYield</span><span class="sym">());</span>

         loadNode<span class="sym">.</span>message <span class="sym">=</span> message<span class="sym">;</span>
         loadNode <span class="sym">=</span> loadNode<span class="sym">.</span>next<span class="sym">;</span>
      <span class="sym">}</span>

      <span class="kwa">public final</span> <span class="kwb">int</span> <span class="kwd">dequeue</span><span class="sym">() {</span>
         <span class="slc">// after this test becomes false, and the loop exits</span>
         <span class="slc">// the addition of an element by the &quot;other&quot; thread</span>
         <span class="slc">// cannot make it true again, therefore it is invariant</span>
         <span class="slc">// for the rest of the execution of this method</span>
         <span class="slc">// that is once we have at least one element, we will always</span>
         <span class="slc">// have at least one element until the thread calling this</span>
         <span class="slc">// method removes one.</span>
         <span class="kwa">do</span> <span class="sym">{</span> <span class="com">/* nothing */</span> <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(</span>loadNode <span class="sym">==</span> consumeNode <span class="sym">&amp;&amp;</span> <span class="kwd">trueYield</span><span class="sym">());</span>

         <span class="kwb">int</span> message <span class="sym">=</span> <span class="num">1</span> <span class="sym">+</span> consumeNode<span class="sym">.</span>message<span class="sym">;</span>
         consumeNode <span class="sym">=</span> consumeNode<span class="sym">.</span>next<span class="sym">;</span>

          <span class="kwa">return</span> message<span class="sym">;</span>
      <span class="sym">}</span>

      <span class="kwa">public final</span> <span class="kwb">void</span> <span class="kwd">signalDoneSendingMessages</span><span class="sym">() {</span>
         <span class="slc">// once done is true, I am the only</span>
         <span class="slc">// thread accessing any of my variables, so we have no</span>
         <span class="slc">// more threading issues</span>
         done <span class="sym">=</span> true<span class="sym">;</span>
      <span class="sym">}</span>

      <span class="kwa">private final</span> <span class="kwb">boolean</span> <span class="kwd">trueYield</span><span class="sym">() {</span>
         <span class="kwc">Thread</span><span class="sym">.</span><span class="kwd">yield</span><span class="sym">();</span>
         <span class="kwa">return</span> true<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwa">static class</span> RingNode <span class="sym">{</span>
      <span class="kwa">public volatile</span> <span class="kwb">int</span> message<span class="sym">;</span>
      <span class="kwa">public</span> RingNode next<span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>
