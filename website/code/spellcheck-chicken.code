<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Based on existing Shootout submission [Scheme Guile]. However hashing</span>
<span class="slc">;; tasks performed using only SRFI-69-compliant facilities. Use of</span>
<span class="slc">;; default hash function and predicate provides significantly better</span>
<span class="slc">;; performance than explicitly passing native implementations; thus, do</span>
<span class="slc">;; this:</span>
<span class="slc">;;</span>
<span class="slc">;;    ... (ht (make-hash-table)) ...</span>
<span class="slc">;;</span>
<span class="slc">;; not this:</span>
<span class="slc">;;</span>
<span class="slc">;;    ... (ht (make-hash-table string-ci=? string-ci-hash)) ...</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span><span class="kwa">lambda</span><span class="sym">-</span>lift<span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>ht <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table<span class="sym">)))</span>

    <span class="sym">(</span>with<span class="sym">-</span>input<span class="sym">-</span>from<span class="sym">-</span>file <span class="str">&quot;Usr.Dict.Words&quot;</span>
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
        <span class="sym">(</span>let loop <span class="sym">((</span>word <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
          <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>eof<span class="sym">-</span>object? word<span class="sym">) '()</span>
            <span class="sym">(</span>begin
              <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ht word #t<span class="sym">)</span>
              <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))))))</span>

    <span class="sym">(</span>with<span class="sym">-</span>input<span class="sym">-</span>from<span class="sym">-</span>port <span class="sym">(</span>current<span class="sym">-</span>input<span class="sym">-</span>port<span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
        <span class="sym">(</span>let loop <span class="sym">((</span>word <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
          <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>eof<span class="sym">-</span>object? word<span class="sym">) '()</span>
            <span class="sym">(</span>begin
              <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>exists? ht word<span class="sym">))</span>
                <span class="sym">(</span><span class="kwa">print</span> word<span class="sym">))</span>
              <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))))))))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>

