<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Hashing tasks performed using only SRFI-69-compliant facilities</span>
<span class="slc">;;</span>
<span class="slc">;; Utilises extension, 'format'. If not available can be installed by</span>
<span class="slc">;; issuing the following shell command [as 'root']:</span>
<span class="slc">;;</span>
<span class="slc">;; # chicken-setup format</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>require<span class="sym">-</span>extension format<span class="sym">)</span>

<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>ht <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table string<span class="sym">-</span>ci<span class="sym">=</span>? string<span class="sym">-</span>ci<span class="sym">-</span>hash<span class="sym">)))</span>

    <span class="sym">(</span>with<span class="sym">-</span>input<span class="sym">-</span>from<span class="sym">-</span>file <span class="str">&quot;Usr.Dict.Words&quot;</span>
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
        <span class="sym">(</span>let loop <span class="sym">((</span>word <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
          <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>eof<span class="sym">-</span>object? word<span class="sym">)</span> <span class="str">'()</span>
<span class="str">            (begin</span>
<span class="str">              (hash-table-set! ht word #t)</span>
<span class="str">              (loop (read-line)))))))</span>
<span class="str"></span>
<span class="str">    (with-input-from-port (current-input-port)</span>
<span class="str">      (lambda ()</span>
<span class="str">        (let loop ((word (read-line)))</span>
<span class="str">          (if (eof-object? word) '</span><span class="sym">()</span>
            <span class="sym">(</span>begin
              <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>exists? ht word<span class="sym">))</span>
                  <span class="sym">(</span>format #t <span class="str">&quot;~A~%&quot;</span> word<span class="sym">))</span>
              <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))))))))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>

