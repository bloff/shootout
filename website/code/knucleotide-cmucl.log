BUILD COMMANDS FOR: knucleotide.cmucl

Mon Apr 18 16:25:58 PDT 2005

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "knucleotide.cmucl_compile")'
### START knucleotide.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "knucleotide.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END knucleotide.cmucl_compile

; Loading #p"/opt/shootout/shootout/bench/knucleotide/tmp/knucleotide.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 18 APR 05 04:25:58 pm.
; Compiling: /opt/shootout/shootout/bench/knucleotide/tmp/knucleotide.cmucl 18 APR 05 04:25:58 pm

; Converted READ-DATA.
; Converted ACCUMULATE-FREQUENCIES.
; Converted CALCULATE-FREQUENCIES.
; Converted WRITE-FREQUENCIES.
; Converted MAIN.
; Compiling DEFUN ACCUMULATE-FREQUENCIES: 

; 
; 
; File: /opt/shootout/shootout/bench/knucleotide/tmp/knucleotide.cmucl

; In: DEFUN READ-DATA

;   (CONCATENATE 'STRING DATA)
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a BASE-STRING, not a SIMPLE-BASE-STRING.
; 
;   (STRING= ">THREE" LINE :START2 0 ...)
; ==>
;   (LISP::STRING=* C::STRING1 C::STRING2 C::START1 C::END1 ...)
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a (OR BASE-CHAR
;                                  BASE-STRING
;                                  SYMBOL), not a SIMPLE-BASE-STRING.
; 

; In: DEFUN WRITE-FREQUENCIES

;   (STRING< (CAR V1) (CAR V2))
; ==>
;   (LISP::STRING<* C::STRING1 C::STRING2 C::START1 C::END1 ...)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a (OR BASE-CHAR
;                                 BASE-STRING
;                                 SYMBOL), not a SIMPLE-BASE-STRING.
;     The second argument is a (OR BASE-CHAR
;                                  BASE-STRING
;                                  SYMBOL), not a SIMPLE-BASE-STRING.
; 
;   (* (/ # SUM) 100.0)
; --> * FLOAT 
; ==>
;   (KERNEL:%SINGLE-FLOAT C::N)
; Note: Forced to do full call.
;     Unable to do inline float coercion (cost 5) because:
;     The first argument is a RATIONAL, not a (SIGNED-BYTE 32).
;     Unable to do inline float coercion (cost 6) because:
;     The first argument is a RATIONAL, not a (UNSIGNED-BYTE 32).
; 

; In: DEFUN CALCULATE-FREQUENCIES

;   (DOTIMES (OFFSET FRAGMENT-LENGTH)
;     (ACCUMULATE-FREQUENCIES HASHMAP SEQUENCE OFFSET FRAGMENT-LENGTH))
; --> DO BLOCK LET TAGBODY UNLESS COND IF NOT IF >= IF 
; ==>
;   (< OFFSET #:G19)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a UNSIGNED-BYTE, not a FIXNUM.
; 
; --> DO BLOCK LET TAGBODY PSETQ PSETF LET* MULTIPLE-VALUE-BIND LET 1+ 
; ==>
;   (+ OFFSET 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;     The result is a (INTEGER 1), not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;     The result is a (INTEGER 1), not a FIXNUM.
;     etc.
; 

; In: DEFUN WRITE-FREQUENCIES

;   (FORMAT T "~A ~,3F~%" (CAR ENTRY) (* # 100.0))
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG-85 #:G3 #:G4 ...)
; Note: Doing float to pointer coercion (cost 13).
; 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   7 notes


; knucleotide.x86f written.
; Compilation finished in 0:00:00.
### START knucleotide.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "knucleotide.x86f" :verbose nil :print nil)
(main) (quit)
### END knucleotide.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "knucleotide.cmucl_run" :verbose nil :print nil)' %A


PROGRAM OUTPUT
==============
A 30.356
T 30.128
G 19.781
C 19.735

AA 9.200
AT 9.160
TA 9.145
TT 9.063
CA 6.008
GA 6.003
AC 6.000
AG 5.995
GT 5.970
TG 5.962
TC 5.957
CT 5.934
GG 3.920
CG 3.904
CC 3.889
GC 3.889

1781	GGT
538	GGTA
58	GGTATT
1	GGTATTTTAATT
1	GGTATTTTAATTTATAGT
