BUILD COMMANDS FOR: wordfreq.cmucl

Thu Mar 30 01:21:38 PST 2006

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "wordfreq.cmucl_compile")'
### START wordfreq.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "wordfreq.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END wordfreq.cmucl_compile

; Loading #P"/opt/shootout/shootout/bench/wordfreq/tmp/wordfreq.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 30 MAR 06 01:21:39 am.
; Compiling: /opt/shootout/shootout/bench/wordfreq/tmp/wordfreq.cmucl 30 MAR 06 01:21:38 am

; Converted MAIN.
; Compiling DEFUN MAIN: 

; 
; 
; File: /opt/shootout/shootout/bench/wordfreq/tmp/wordfreq.cmucl

; In: DEFUN MAIN

;   (> (CDR A) (CDR B))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
;     The second argument is a REAL, not a RATIONAL.
; 
;   (= (CDR A) (CDR B))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to open code because:
;     Operands might not be the same type.
; 
;   (INCF (GETHASH WORD TABLE 0))
; --> LET* 
; ==>
;   (+ (GETHASH #:G2 #:G3 #:G4) #:G6)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (STRING>= (CAR A) (CAR B))
; ==>
;   (LISP::STRING>=* C::STRING1 C::STRING2 C::START1 C::END1 ...)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a (OR BASE-CHAR
;                                 BASE-STRING
;                                 SYMBOL), not a SIMPLE-BASE-STRING.
;     The second argument is a (OR BASE-CHAR
;                                  BASE-STRING
;                                  SYMBOL), not a SIMPLE-BASE-STRING.
; 
;   (INCF (GETHASH WORD TABLE 0))
; --> LET* 
; ==>
;   (+ (GETHASH #:G2 #:G3 #:G4) #:G6)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
;   (> (CDR A) (CDR B))
; Note: Forced to do GENERIC-> (cost 10).
;     Unable to do inline float comparison (cost 3) because:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
;     Unable to do inline float comparison (cost 3) because:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
;     etc.
; 
;   (= (CDR A) (CDR B))
; Note: Forced to do GENERIC-= (cost 10).
;     Unable to do inline float comparison (cost 3) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float comparison (cost 3) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   20 notes


; wordfreq.x86f written.
; Compilation finished in 0:00:00.
### START wordfreq.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "wordfreq.x86f" :verbose nil :print nil)
(main) (quit)
### END wordfreq.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "wordfreq.cmucl_run" :verbose nil :print nil)' %A


PROGRAM OUTPUT
==============
  42425 the
  33175 to
  29725 and
  22375 of
  13775 in
  13725 he
  11975 that
  11050 a
   9850 it
   9000 his
   8975 not
   8675 be
   8475 is
   8250 by
   7575 have
   7500 they
   7425 for
   6800 him
   6300 them
   6250 who
   5975 with
   5975 one
   5875 are
   5550 which
   5475 as
   4975 but
   4825 this
   4500 prince
   4200 will
   4075 their
   3900 had
   3875 or
   3775 so
   3725 was
   3725 from
   3625 those
   3350 because
   3325 if
   3300 you
   3300 has
   3225 i
   3125 all
   3075 been
   3025 when
   2850 more
   2675 would
   2675 on
   2550 himself
   2475 were
   2475 there
===================================
!!! Note: Truncated to 50 lines !!!
===================================
