<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">contributed by Alkis Evlogimenos</span>
<span class="com">slightly modified by Pierre-Olivier Gaillard</span>
<span class="com">slightly modified by Klaus Friedel</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span><span class="kwc">Arrays</span><span class="sym">;</span>

<span class="kwa">public class</span> nsievebits <span class="sym">{</span>
  <span class="kwa">static class</span> MyBitSet <span class="sym">{</span>
    <span class="kwa">private final</span> <span class="kwb">int</span><span class="sym">[]</span> bits<span class="sym">;</span>
    <span class="kwa">private static final</span> <span class="kwb">int</span> mask <span class="sym">=</span> <span class="num">31</span><span class="sym">;</span>
    <span class="kwa">private static final</span> <span class="kwb">int</span> shift <span class="sym">=</span> <span class="num">5</span><span class="sym">;</span>

    <span class="kwa">public</span> <span class="kwd">MyBitSet</span><span class="sym">(</span><span class="kwb">int</span> m<span class="sym">) {</span>
      bits <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[(</span>m <span class="sym">&gt;&gt;</span> shift<span class="sym">) +</span> <span class="num">1</span><span class="sym">];</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">setAll</span><span class="sym">() {</span>
      <span class="kwc">Arrays</span><span class="sym">.</span><span class="kwd">fill</span><span class="sym">(</span>bits<span class="sym">, -</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">boolean</span> <span class="kwd">get</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">) {</span>
      <span class="kwa">return</span> <span class="sym">((</span>bits<span class="sym">[</span>i <span class="sym">&gt;&gt;</span> shift<span class="sym">] &gt;&gt;&gt; (</span>i <span class="sym">&amp;</span> mask<span class="sym">)) &amp;</span> <span class="num">1</span><span class="sym">) !=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">clear</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">) {</span>
      bits<span class="sym">[</span>i <span class="sym">&gt;&gt;</span> shift<span class="sym">] &amp;=</span> ~<span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>i <span class="sym">&amp;</span> mask<span class="sym">));</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  <span class="kwa">static</span> <span class="kwb">int</span> <span class="kwd">nsieve</span><span class="sym">(</span><span class="kwb">int</span> m<span class="sym">,</span> MyBitSet bits<span class="sym">) {</span>
    bits<span class="sym">.</span><span class="kwd">setAll</span><span class="sym">();</span>
    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;=</span> m<span class="sym">; ++</span>i<span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>bits<span class="sym">.</span><span class="kwd">get</span><span class="sym">(</span>i<span class="sym">)) {</span>
        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> i <span class="sym">+</span> i<span class="sym">;</span> j <span class="sym">&lt;=</span> m<span class="sym">;</span> j <span class="sym">+=</span> i<span class="sym">)</span> bits<span class="sym">.</span><span class="kwd">clear</span><span class="sym">(</span>j<span class="sym">);</span>
        <span class="sym">++</span>count<span class="sym">;</span>
      <span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">return</span> count<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">primes</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> MyBitSet bits<span class="sym">) {</span>
    <span class="kwb">int</span> m <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> <span class="kwd">nsieve</span><span class="sym">(</span>m<span class="sym">,</span> bits<span class="sym">));</span>
  <span class="sym">}</span>

  <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {</span>
    <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
      n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
    <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>

    <span class="kwb">int</span> m <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;</span>
    MyBitSet bits <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">MyBitSet</span><span class="sym">(</span>m <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwd">primes</span><span class="sym">(</span>n<span class="sym">,</span> bits<span class="sym">);</span>
    <span class="kwd">primes</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> bits<span class="sym">);</span>
    <span class="kwd">primes</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">,</span> bits<span class="sym">);</span>
  <span class="sym">}</span>
<span class="sym">}</span>
