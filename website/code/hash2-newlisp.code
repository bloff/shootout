#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

#
# hash2 <span class="sym">-</span> benchmark
#
# newLISP does <span class="kwa">not</span> have hashtables but can
# simulate hashes efficient with symbols
#
# Contributed by Lutz Mueller

<span class="sym">(</span>context <span class="str">'Hash1) ; create hash container</span>
<span class="str">(context '</span>MAIN<span class="sym">)</span> <span class="slc">; go back to MAIN context</span>
<span class="sym">(</span>context <span class="str">'Hash2) ; create hash container</span>
<span class="str">(context '</span>MAIN<span class="sym">)</span> <span class="slc">; go back to MAIN context</span>

<span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))</span>
<span class="str"></span>
<span class="str">(dotimes (i 10000)</span>
<span class="str">	(set (symbol (format &quot;foo_%d&quot; (integer i)) Hash1) i) )</span>
<span class="str"></span>
<span class="str">(dotimes (i n)</span>
<span class="str">	(dotree (k Hash1)</span>
<span class="str">		(set '</span>key <span class="sym">(</span>symbol <span class="sym">(</span>name k<span class="sym">)</span> Hash2 nil<span class="sym">))</span>
		<span class="sym">(</span><span class="kwa">if</span> key
			<span class="sym">(</span>inc key <span class="sym">(</span><span class="kwa">eval</span> k<span class="sym">))</span>
			<span class="sym">(</span><span class="kwa">set</span> <span class="sym">(</span>symbol <span class="sym">(</span>name k<span class="sym">)</span> Hash2<span class="sym">) (</span><span class="kwa">eval</span> k<span class="sym">)))))</span>

<span class="sym">(</span>println Hash1<span class="sym">:</span>foo_1 <span class="str">&quot; &quot;</span> Hash1<span class="sym">:</span>foo_9999 <span class="str">&quot; &quot;</span> Hash2<span class="sym">:</span>foo_1 <span class="str">&quot; &quot;</span> Hash2<span class="sym">:</span>foo_9999<span class="sym">)</span>

<span class="sym">(</span><span class="kwa">exit</span><span class="sym">)</span>

