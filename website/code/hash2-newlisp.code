<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp
<span class="line">    2 </span>
<span class="line">    3 </span>#
<span class="line">    4 </span># hash2 <span class="sym">-</span> benchmark
<span class="line">    5 </span>#
<span class="line">    6 </span># newLISP does <span class="kwa">not</span> have hashtables but can
<span class="line">    7 </span># simulate hashes efficient with symbols
<span class="line">    8 </span>#
<span class="line">    9 </span># Contributed by Lutz Mueller
<span class="line">   10 </span>
<span class="line">   11 </span><span class="sym">(</span>context <span class="str">'Hash1) ; create hash container
</span><span class="line">   12 </span><span class="str">(context '</span>MAIN<span class="sym">)</span> <span class="slc">; go back to MAIN context
</span><span class="line">   13 </span><span class="slc"></span><span class="sym">(</span>context <span class="str">'Hash2) ; create hash container
</span><span class="line">   14 </span><span class="str">(context '</span>MAIN<span class="sym">)</span> <span class="slc">; go back to MAIN context
</span><span class="line">   15 </span><span class="slc"></span>
<span class="line">   16 </span><span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))
</span><span class="line">   17 </span><span class="str">
</span><span class="line">   18 </span><span class="str">(dotimes (i 10000)
</span><span class="line">   19 </span><span class="str">        (set (symbol (format &quot;foo_%d&quot; (integer i)) Hash1) i) )
</span><span class="line">   20 </span><span class="str">
</span><span class="line">   21 </span><span class="str">(dotimes (i n)
</span><span class="line">   22 </span><span class="str">        (dotree (k Hash1)
</span><span class="line">   23 </span><span class="str">                (set '</span>key <span class="sym">(</span>symbol <span class="sym">(</span>name k<span class="sym">)</span> Hash2 nil<span class="sym">))
</span><span class="line">   24 </span><span class="sym">                (</span><span class="kwa">if</span> key
<span class="line">   25 </span>                        <span class="sym">(</span>inc key <span class="sym">(</span><span class="kwa">eval</span> k<span class="sym">))
</span><span class="line">   26 </span><span class="sym">                        (</span><span class="kwa">set</span> <span class="sym">(</span>symbol <span class="sym">(</span>name k<span class="sym">)</span> Hash2<span class="sym">) (</span><span class="kwa">eval</span> k<span class="sym">)))))
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym">(</span>println Hash1<span class="sym">:</span>foo_1 <span class="str">&quot; &quot;</span> Hash1<span class="sym">:</span>foo_9999 <span class="str">&quot; &quot;</span> Hash2<span class="sym">:</span>foo_1 <span class="str">&quot; &quot;</span> Hash2<span class="sym">:</span>foo_9999<span class="sym">)
</span><span class="line">   29 </span><span class="sym">
</span><span class="line">   30 </span><span class="sym">(</span><span class="kwa">exit</span><span class="sym">)
</span><span class="line">   31 </span><span class="sym"></span>
