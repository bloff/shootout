<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Greg Buchholz</span>
<span class="com">   compile:  g++ -O3 -ffast-math mandelbrot.gpp-2.gpp</span>
<span class="com">*/</span>

<span class="dir">#include&lt;iostream&gt;</span>
<span class="dir">#include&lt;complex&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwb">int</span> <span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">char</span> byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">const int</span> iter <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>
    <span class="kwb">const double</span> limit <span class="sym">=</span> <span class="num">2.0</span><span class="sym">;</span>

    <span class="kwb">int</span> w <span class="sym">=</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
    <span class="kwb">int</span> h <span class="sym">=</span> w<span class="sym">;</span>

    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">&lt;&lt;</span> w <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> h <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> y<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>y<span class="sym">&lt;</span>h<span class="sym">;</span>y<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>x<span class="sym">&lt;</span>w<span class="sym">;</span>x<span class="sym">++)</span>
        <span class="sym">{</span>
            <span class="kwb">complex</span><span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> <span class="kwd">Z</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span><span class="num">0.0</span><span class="sym">);</span>
            <span class="kwb">complex</span><span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> <span class="kwd">C</span><span class="sym">(</span><span class="num">2</span><span class="sym">*(</span><span class="kwb">double</span><span class="sym">)</span>x<span class="sym">/</span>w <span class="sym">-</span> <span class="num">1.5</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*(</span><span class="kwb">double</span><span class="sym">)</span>y<span class="sym">/</span>h <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>

            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>iter<span class="sym">;</span>i<span class="sym">++)</span>
            <span class="sym">{</span>
                Z <span class="sym">=</span> Z<span class="sym">*</span>Z <span class="sym">+</span> C<span class="sym">;</span>
                <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">norm</span><span class="sym">(</span>Z<span class="sym">) &gt;</span> limit<span class="sym">*</span>limit<span class="sym">)</span>
                    <span class="kwa">break</span><span class="sym">;</span>
            <span class="sym">}</span>

            byte_acc <span class="sym">= (</span>byte_acc <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">) | ((</span><span class="kwd">norm</span><span class="sym">(</span>Z<span class="sym">) &gt;</span> limit<span class="sym">*</span>limit<span class="sym">)</span> ? <span class="num">0x00</span><span class="sym">:</span><span class="num">0x01</span><span class="sym">);</span>
            bit_num<span class="sym">++;</span>

            <span class="kwa">if</span><span class="sym">(</span>bit_num <span class="sym">==</span> <span class="num">8</span><span class="sym">)</span>
            <span class="sym">{</span>
                cout <span class="sym">&lt;&lt;</span> byte_acc<span class="sym">;</span>
                byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">else if</span><span class="sym">(</span>x <span class="sym">==</span> w<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
            <span class="sym">{</span>
                byte_acc <span class="sym">=</span> byte_acc <span class="sym">&lt;&lt; (</span><span class="num">8</span><span class="sym">-</span>w<span class="sym">%</span><span class="num">8</span><span class="sym">);</span>
                cout <span class="sym">&lt;&lt;</span> byte_acc<span class="sym">;</span>
                byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
                bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
