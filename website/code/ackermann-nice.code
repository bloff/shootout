<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

To compile:
   nicec --sourcepath=.. -d=. -a ackermann.jar ackermann

To run:
   java -ea -jar ackermann.jar 8
*/</span>

<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   <span class="kwa">let</span> n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);
</span>   println<span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;): &quot;</span> <span class="sym">+</span> ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span>n<span class="sym">));
}

</span><span class="kwb">int</span> ack<span class="sym">(</span><span class="kwb">int</span> m<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)
</span>   <span class="kwa">requires</span> m <span class="sym">&gt;=</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> n <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> <span class="slc">// precondition
</span>
ack<span class="sym">(</span>m<span class="sym">,</span>n<span class="sym">) {
</span>   <span class="kwa">if</span> <span class="sym">(</span>m <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> n <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> ack<span class="sym">(</span>m<span class="num">-1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span>   <span class="kwa">return</span> ack<span class="sym">(</span>m<span class="num">-1</span><span class="sym">,</span> ack<span class="sym">(</span>m<span class="sym">,</span> n<span class="num">-1</span><span class="sym">));
}

</span><span class="kwb">int</span> toSinglePositiveInt<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> s<span class="sym">)
</span>   <span class="kwa">ensures</span> result <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> <span class="slc">// postcondition
</span>
toSinglePositiveInt<span class="sym">(</span>s<span class="sym">){
</span>   <span class="kwa">try</span> <span class="sym">{
</span>      <span class="kwb">int</span> i <span class="sym">=</span>  <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> i<span class="sym">;</span> <span class="kwa">else return</span> <span class="num">1</span><span class="sym">;
    }
</span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">){</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">; } }
</span>
