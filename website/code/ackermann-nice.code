<span class="line">    1 </span><span class="com">/* The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="com">     http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="com">    contributed by Isaac Gouy
</span><span class="line">    4 </span><span class="com"> 
</span><span class="line">    5 </span><span class="com"> To compile:
</span><span class="line">    6 </span><span class="com">            nicec --sourcepath=.. -d=. -a ackermann.jar ackermann
</span><span class="line">    7 </span><span class="com"> 
</span><span class="line">    8 </span><span class="com"> To run:
</span><span class="line">    9 </span><span class="com">    java -ea -jar ackermann.jar 8
</span><span class="line">   10 </span><span class="com"> */</span>
<span class="line">   11 </span>
<span class="line">   12 </span>
<span class="line">   13 </span>   <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span><span class="line">   14 </span><span class="sym"> </span>   <span class="kwa">let</span> n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);
</span><span class="line">   15 </span><span class="sym">    </span>   println<span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span> <span class="sym">+</span> n <span class="sym">+</span> <span class="str">&quot;): &quot;</span> <span class="sym">+</span> ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span>n<span class="sym">));
</span><span class="line">   16 </span><span class="sym">  }
</span><span class="line">   17 </span><span class="sym"> 
</span><span class="line">   18 </span><span class="sym"> 
</span><span class="line">   19 </span><span class="sym"> </span><span class="kwb">int</span> ack<span class="sym">(</span><span class="kwb">int</span> m<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)
</span><span class="line">   20 </span><span class="sym">  </span>   <span class="kwa">requires</span> m <span class="sym">&gt;=</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> n <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> <span class="slc">// precondition 
</span><span class="line">   21 </span><span class="slc"></span>
<span class="line">   22 </span> ack<span class="sym">(</span>m<span class="sym">,</span>n<span class="sym">) {
</span><span class="line">   23 </span><span class="sym"> </span>   <span class="kwa">if</span> <span class="sym">(</span>m <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> n <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   24 </span><span class="sym"> </span>   <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> ack<span class="sym">(</span>m<span class="num">-1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   25 </span><span class="sym"> </span>   <span class="kwa">return</span> ack<span class="sym">(</span>m<span class="num">-1</span><span class="sym">,</span> ack<span class="sym">(</span>m<span class="sym">,</span> n<span class="num">-1</span><span class="sym">));
</span><span class="line">   26 </span><span class="sym">  }
</span><span class="line">   27 </span><span class="sym"> 
</span><span class="line">   28 </span><span class="sym"> 
</span><span class="line">   29 </span><span class="sym"> </span><span class="kwb">int</span> toSinglePositiveInt<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> s<span class="sym">)
</span><span class="line">   30 </span><span class="sym">  </span>   <span class="kwa">ensures</span> result <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span> <span class="slc">// postcondition 
</span><span class="line">   31 </span><span class="slc"></span>
<span class="line">   32 </span> toSinglePositiveInt<span class="sym">(</span>s<span class="sym">){
</span><span class="line">   33 </span><span class="sym"> </span>   <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   34 </span><span class="sym">  </span>      <span class="kwb">int</span> i <span class="sym">=</span>  <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   35 </span><span class="sym"> </span>      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> i<span class="sym">;</span> <span class="kwa">else return</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym">     }
</span><span class="line">   37 </span><span class="sym"> </span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">){</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">; } }</span> 
