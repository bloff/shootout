<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">//
</FONT></I><I><FONT COLOR="#B22222">// Contributed by John Skaller
</FONT></I><I><FONT COLOR="#B22222">//
</FONT></I>include <B><FONT COLOR="#BC8F8F">&quot;std&quot;</FONT></B>;
n := atoi(System::argv 1);
<I><FONT COLOR="#B22222">// stolen from C implementation
</FONT></I>
fun gen_random: <B><FONT COLOR="#228B22">double</FONT></B> -&gt; <B><FONT COLOR="#228B22">double</FONT></B>
  requires body <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B><B><FONT COLOR="#BC8F8F">&quot;
    #define IM 139968
    #define IA   3877
    #define IC  29573
    static long last;
    double
    gen_random(double max) {
        static long last = 42;
        return( max * (last = (last * IA + IC) % IM) / IM );
    }
&quot;</FONT></B><B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>;
<B><FONT COLOR="#228B22">typedef</FONT></B> darray = C_hack::ptr[<B><FONT COLOR="#228B22">double</FONT></B>];

fun subscript: darray * <B><FONT COLOR="#228B22">int</FONT></B> -&gt; lvalue[<B><FONT COLOR="#228B22">double</FONT></B>] = <B><FONT COLOR="#BC8F8F">&quot;$1[$2]&quot;</FONT></B>;

val cows_jump_over_moon = false;

proc <B><FONT COLOR="#0000FF">heapsort</FONT></B>(n:<B><FONT COLOR="#228B22">int</FONT></B>, ra: darray) {
    var i:<B><FONT COLOR="#228B22">int</FONT></B>;
    var j:<B><FONT COLOR="#228B22">int</FONT></B>;
    var ir = n;
    var l = (n / 2) + 1;
    var rra:<B><FONT COLOR="#228B22">double</FONT></B>;

    until cows_jump_over_moon <B><FONT COLOR="#A020F0">do</FONT></B>
        <B><FONT COLOR="#A020F0">if</FONT></B> l &gt; 1 <B><FONT COLOR="#A020F0">do</FONT></B>
            --l;
            rra = ra.[l];
        <B><FONT COLOR="#A020F0">else</FONT></B>
            rra = ra.[ir];
            ra.[ir] = ra.[1];
            --ir;
            <B><FONT COLOR="#A020F0">if</FONT></B> ir == 1 <B><FONT COLOR="#A020F0">do</FONT></B>
                ra.[1] = rra;
                <B><FONT COLOR="#A020F0">return</FONT></B>;
            done;
        done;
        i = l;
        j = l * 2;
        whilst j &lt;= ir <B><FONT COLOR="#A020F0">do</FONT></B>
            <B><FONT COLOR="#A020F0">if</FONT></B> j &lt; ir and ra.[j] &lt; ra.[j+1] <B><FONT COLOR="#A020F0">do</FONT></B> ++j; done;
            <B><FONT COLOR="#A020F0">if</FONT></B> rra &lt; ra.[j] <B><FONT COLOR="#A020F0">do</FONT></B>
                ra.[i] = ra.[j];
                i = j;
                j *= 2;
            <B><FONT COLOR="#A020F0">else</FONT></B>
                j = ir + 1;
            done;
        done;
        ra.[i] = rra;
    done;
}

var ary = Carray::array_alloc[<B><FONT COLOR="#228B22">double</FONT></B>] (n+1);
var i = n; until i == 0 <B><FONT COLOR="#A020F0">do</FONT></B>
    ary.[i] = gen_random(1.0);
    --i;
done;

<B><FONT COLOR="#0000FF">heapsort</FONT></B>(n, ary);

proc print_10f: <B><FONT COLOR="#228B22">double</FONT></B> = 'printf(<B><FONT COLOR="#BC8F8F">&quot;%.10f\\n&quot;</FONT></B>, $1);';
print_10f ary.[n];

<B><FONT COLOR="#5F9EA0">Carray</FONT></B>::free ary;
</pre></td></tr></table>
