<span class="line">    1 </span><span class="slc">//
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// Contributed by John Skaller
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">//
</span><span class="line">    4 </span><span class="slc"></span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span><span class="line">    5 </span><span class="sym"></span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);
</span><span class="line">    6 </span><span class="sym"></span><span class="slc">// stolen from C implementation
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="kwa">fun</span> gen_random<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">-&gt;</span> <span class="kwb">double
</span><span class="line">    9 </span><span class="kwb"></span>  requires <span class="kwa">body</span> <span class="str">&quot;&quot;&quot;
</span><span class="line">   10 </span><span class="str">    #define IM 139968
</span><span class="line">   11 </span><span class="str">    #define IA   3877
</span><span class="line">   12 </span><span class="str">    #define IC  29573
</span><span class="line">   13 </span><span class="str">    static long last;
</span><span class="line">   14 </span><span class="str">    double
</span><span class="line">   15 </span><span class="str">    gen_random(double max) {
</span><span class="line">   16 </span><span class="str">        static long last = 42;
</span><span class="line">   17 </span><span class="str">        return( max * (last = (last * IA + IC) % IM) / IM );
</span><span class="line">   18 </span><span class="str">    }
</span><span class="line">   19 </span><span class="str">&quot;&quot;&quot;</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span><span class="kwa">typedef</span> darray <span class="sym">=</span> C_hack<span class="sym">::</span>ptr<span class="sym">[</span><span class="kwb">double</span><span class="sym">];
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span><span class="kwa">fun</span> subscript<span class="sym">:</span> darray <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> lvalue<span class="sym">[</span><span class="kwb">double</span><span class="sym">] =</span> <span class="str">&quot;$1[$2]&quot;</span><span class="sym">;
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span><span class="kwa">val</span> cows_jump_over_moon <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span><span class="kwa">proc</span> heapsort<span class="sym">(</span>n<span class="sym">:</span><span class="kwb">int</span><span class="sym">,</span> ra<span class="sym">:</span> darray<span class="sym">) {
</span><span class="line">   27 </span><span class="sym"></span>    <span class="kwa">var</span> i<span class="sym">:</span><span class="kwb">int</span><span class="sym">;
</span><span class="line">   28 </span><span class="sym"></span>    <span class="kwa">var</span> j<span class="sym">:</span><span class="kwb">int</span><span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>    <span class="kwa">var</span> ir <span class="sym">=</span> n<span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>    <span class="kwa">var</span> l <span class="sym">= (</span>n <span class="sym">/</span> <span class="num">2</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span>    <span class="kwa">var</span> rra<span class="sym">:</span><span class="kwb">double</span><span class="sym">;
</span><span class="line">   32 </span><span class="sym">
</span><span class="line">   33 </span><span class="sym"></span>    until cows_jump_over_moon do
<span class="line">   34 </span>        <span class="kwa">if</span> l <span class="sym">&gt;</span> <span class="num">1</span> do
<span class="line">   35 </span>            <span class="sym">--</span>l<span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>            rra <span class="sym">=</span> ra.<span class="sym">[</span>l<span class="sym">];
</span><span class="line">   37 </span><span class="sym"></span>        <span class="kwa">else
</span><span class="line">   38 </span><span class="kwa"></span>            rra <span class="sym">=</span> ra.<span class="sym">[</span>ir<span class="sym">];
</span><span class="line">   39 </span><span class="sym"></span>            ra.<span class="sym">[</span>ir<span class="sym">] =</span> ra.<span class="sym">[</span><span class="num">1</span><span class="sym">];
</span><span class="line">   40 </span><span class="sym">            --</span>ir<span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span>            <span class="kwa">if</span> ir <span class="sym">==</span> <span class="num">1</span> do
<span class="line">   42 </span>                ra.<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>                <span class="kwa">return</span><span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>            done<span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span>        done<span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span>        i <span class="sym">=</span> l<span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span>        j <span class="sym">=</span> l <span class="sym">*</span> <span class="num">2</span><span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span>        whilst j <span class="sym">&lt;=</span> ir do
<span class="line">   49 </span>            <span class="kwa">if</span> j <span class="sym">&lt;</span> ir <span class="kwa">and</span> ra.<span class="sym">[</span>j<span class="sym">] &lt;</span> ra.<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]</span> do <span class="sym">++</span>j<span class="sym">;</span> done<span class="sym">;
</span><span class="line">   50 </span><span class="sym"></span>            <span class="kwa">if</span> rra <span class="sym">&lt;</span> ra.<span class="sym">[</span>j<span class="sym">]</span> do
<span class="line">   51 </span>                ra.<span class="sym">[</span>i<span class="sym">] =</span> ra.<span class="sym">[</span>j<span class="sym">];
</span><span class="line">   52 </span><span class="sym"></span>                i <span class="sym">=</span> j<span class="sym">;
</span><span class="line">   53 </span><span class="sym"></span>                j <span class="sym">*=</span> <span class="num">2</span><span class="sym">;
</span><span class="line">   54 </span><span class="sym"></span>            <span class="kwa">else
</span><span class="line">   55 </span><span class="kwa"></span>                j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   56 </span><span class="sym"></span>            done<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>        done<span class="sym">;
</span><span class="line">   58 </span><span class="sym"></span>        ra.<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>    done<span class="sym">;
</span><span class="line">   60 </span><span class="sym">}
</span><span class="line">   61 </span><span class="sym">
</span><span class="line">   62 </span><span class="sym"></span><span class="kwa">var</span> ary <span class="sym">=</span> Carray<span class="sym">::</span>array_alloc<span class="sym">[</span><span class="kwb">double</span><span class="sym">] (</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span><span class="line">   63 </span><span class="sym"></span><span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;</span> until i <span class="sym">==</span> <span class="num">0</span> do
<span class="line">   64 </span>    ary.<span class="sym">[</span>i<span class="sym">] =</span> gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">);
</span><span class="line">   65 </span><span class="sym">    --</span>i<span class="sym">;
</span><span class="line">   66 </span><span class="sym"></span>done<span class="sym">;
</span><span class="line">   67 </span><span class="sym">
</span><span class="line">   68 </span><span class="sym"></span>heapsort<span class="sym">(</span>n<span class="sym">,</span> ary<span class="sym">);
</span><span class="line">   69 </span><span class="sym">
</span><span class="line">   70 </span><span class="sym"></span><span class="kwa">proc</span> print_10f<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="str">'printf(&quot;%.10f</span><span class="esc">\\</span><span class="str">n&quot;, $1);'</span><span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span>print_10f ary.<span class="sym">[</span>n<span class="sym">];
</span><span class="line">   72 </span><span class="sym">
</span><span class="line">   73 </span><span class="sym"></span>Carray<span class="sym">::</span>free ary<span class="sym">;
</span><span class="line">   74 </span><span class="sym"></span>
