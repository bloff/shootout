<span class="slc">//</span>
<span class="slc">// Contributed by John Skaller</span>
<span class="slc">//</span>
<span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;</span>
n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);</span>
<span class="slc">// stolen from C implementation</span>

<span class="kwa">fun</span> gen_random<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">-&gt;</span> <span class="kwb">double</span>
  requires <span class="kwa">body</span> <span class="str">&quot;&quot;&quot;</span>
<span class="str">    #define IM 139968</span>
<span class="str">    #define IA   3877</span>
<span class="str">    #define IC  29573</span>
<span class="str">    static long last;</span>
<span class="str">    double</span>
<span class="str">    gen_random(double max) {</span>
<span class="str">        static long last = 42;</span>
<span class="str">        return( max * (last = (last * IA + IC) % IM) / IM );</span>
<span class="str">    }</span>
<span class="str">&quot;&quot;&quot;</span><span class="sym">;</span>
<span class="kwa">typedef</span> darray <span class="sym">=</span> C_hack<span class="sym">::</span>ptr<span class="sym">[</span><span class="kwb">double</span><span class="sym">];</span>

<span class="kwa">fun</span> subscript<span class="sym">:</span> darray <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> lvalue<span class="sym">[</span><span class="kwb">double</span><span class="sym">] =</span> <span class="str">&quot;$1[$2]&quot;</span><span class="sym">;</span>

<span class="kwa">val</span> cows_jump_over_moon <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>

<span class="kwa">proc</span> heapsort<span class="sym">(</span>n<span class="sym">:</span><span class="kwb">int</span><span class="sym">,</span> ra<span class="sym">:</span> darray<span class="sym">) {</span>
    <span class="kwa">var</span> i<span class="sym">:</span><span class="kwb">int</span><span class="sym">;</span>
    <span class="kwa">var</span> j<span class="sym">:</span><span class="kwb">int</span><span class="sym">;</span>
    <span class="kwa">var</span> ir <span class="sym">=</span> n<span class="sym">;</span>
    <span class="kwa">var</span> l <span class="sym">= (</span>n <span class="sym">/</span> <span class="num">2</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">var</span> rra<span class="sym">:</span><span class="kwb">double</span><span class="sym">;</span>

    until cows_jump_over_moon do
        <span class="kwa">if</span> l <span class="sym">&gt;</span> <span class="num">1</span> do
            <span class="sym">--</span>l<span class="sym">;</span>
            rra <span class="sym">=</span> ra.<span class="sym">[</span>l<span class="sym">];</span>
        <span class="kwa">else</span>
            rra <span class="sym">=</span> ra.<span class="sym">[</span>ir<span class="sym">];</span>
            ra.<span class="sym">[</span>ir<span class="sym">] =</span> ra.<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
            <span class="sym">--</span>ir<span class="sym">;</span>
            <span class="kwa">if</span> ir <span class="sym">==</span> <span class="num">1</span> do
                ra.<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;</span>
                <span class="kwa">return</span><span class="sym">;</span>
            done<span class="sym">;</span>
        done<span class="sym">;</span>
        i <span class="sym">=</span> l<span class="sym">;</span>
        j <span class="sym">=</span> l <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span>
        whilst j <span class="sym">&lt;=</span> ir do
            <span class="kwa">if</span> j <span class="sym">&lt;</span> ir <span class="kwa">and</span> ra.<span class="sym">[</span>j<span class="sym">] &lt;</span> ra.<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]</span> do <span class="sym">++</span>j<span class="sym">;</span> done<span class="sym">;</span>
            <span class="kwa">if</span> rra <span class="sym">&lt;</span> ra.<span class="sym">[</span>j<span class="sym">]</span> do
                ra.<span class="sym">[</span>i<span class="sym">] =</span> ra.<span class="sym">[</span>j<span class="sym">];</span>
                i <span class="sym">=</span> j<span class="sym">;</span>
                j <span class="sym">*=</span> <span class="num">2</span><span class="sym">;</span>
            <span class="kwa">else</span>
                j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            done<span class="sym">;</span>
        done<span class="sym">;</span>
        ra.<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;</span>
    done<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">var</span> ary <span class="sym">=</span> Carray<span class="sym">::</span>array_alloc<span class="sym">[</span><span class="kwb">double</span><span class="sym">] (</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
<span class="kwa">var</span> i <span class="sym">=</span> n<span class="sym">;</span> until i <span class="sym">==</span> <span class="num">0</span> do
    ary.<span class="sym">[</span>i<span class="sym">] =</span> gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span>
    <span class="sym">--</span>i<span class="sym">;</span>
done<span class="sym">;</span>

heapsort<span class="sym">(</span>n<span class="sym">,</span> ary<span class="sym">);</span>

<span class="kwa">proc</span> print_10f<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="str">'printf(&quot;%.10f</span><span class="esc">\\</span><span class="str">n&quot;, $1);'</span><span class="sym">;</span>
print_10f ary.<span class="sym">[</span>n<span class="sym">];</span>

Carray<span class="sym">::</span>free ary<span class="sym">;</span>

