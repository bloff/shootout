<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">%% The Great Computer Language Shootout
</FONT></I><I><FONT COLOR="#B22222">%% http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">%% contributed by Isaac Gouy (Erlang novice)
</FONT></I><I><FONT COLOR="#B22222">%% 20040619: Nicolas Niclausse: use ets instead of tuples.
</FONT></I><I><FONT COLOR="#B22222">%% 20040721: Alexey Shchepin: use process dictionary instead of ets.
</FONT></I><I><FONT COLOR="#B22222">%%
</FONT></I><I><FONT COLOR="#B22222">%% Quick and Dirty transliteration from the Mercury solution
</FONT></I><I><FONT COLOR="#B22222">%% with +1 adjustment for array indexes.
</FONT></I><I><FONT COLOR="#B22222">%% Mercury uses 0..N-1 and Erlang uses 1..N
</FONT></I><I><FONT COLOR="#B22222">%%
</FONT></I><I><FONT COLOR="#B22222">%% Usage: start from command line with
</FONT></I><I><FONT COLOR="#B22222">%%     erlc heapsort.erl
</FONT></I><I><FONT COLOR="#B22222">%%     erl -noinput -s heapsort main 10000
</FONT></I>
<B><FONT COLOR="#5F9EA0">-module</FONT></B>(heapsort).
<B><FONT COLOR="#5F9EA0">-export</FONT></B>([main/1]).

<B><FONT COLOR="#0000FF">random_heap</FONT></B>(<FONT COLOR="#B8860B">I</FONT>, <FONT COLOR="#B8860B">Seed</FONT>, <FONT COLOR="#B8860B">N</FONT>) -&gt;
    <B><FONT COLOR="#A020F0">case</FONT></B> <FONT COLOR="#B8860B">I</FONT> &lt; <FONT COLOR="#B8860B">N</FONT> <B><FONT COLOR="#A020F0">of</FONT></B>
        true -&gt;
            {<FONT COLOR="#B8860B">NextSeed</FONT>, <FONT COLOR="#B8860B">R</FONT>} = gen_random(<FONT COLOR="#B8860B">Seed</FONT>),
	    up_heap(<FONT COLOR="#B8860B">I</FONT>, <FONT COLOR="#B8860B">R</FONT>),
            random_heap(<FONT COLOR="#B8860B">I</FONT>+1, <FONT COLOR="#B8860B">NextSeed</FONT>, <FONT COLOR="#B8860B">N</FONT>);
        false -&gt; ok
    <B><FONT COLOR="#A020F0">end</FONT></B>.

<B><FONT COLOR="#0000FF">up_heap</FONT></B>(<FONT COLOR="#B8860B">N</FONT>, <FONT COLOR="#B8860B">Y</FONT>) -&gt;
    <FONT COLOR="#B8860B">HalfN</FONT> = <FONT COLOR="#B8860B">N</FONT> div 2,
    <FONT COLOR="#B8860B">X</FONT> = <B><FONT COLOR="#A020F0">get</FONT></B>(<FONT COLOR="#B8860B">HalfN</FONT>+1), <I><FONT COLOR="#B22222">%%%% +1
</FONT></I>    <B><FONT COLOR="#A020F0">case</FONT></B> 0 &lt; <FONT COLOR="#B8860B">N</FONT> <B><FONT COLOR="#A020F0">andalso</FONT></B> <FONT COLOR="#B8860B">X</FONT> &lt; <FONT COLOR="#B8860B">Y</FONT> <B><FONT COLOR="#A020F0">of</FONT></B>
        true -&gt;
	    <B><FONT COLOR="#A020F0">put</FONT></B>(<FONT COLOR="#B8860B">N</FONT>+1, <FONT COLOR="#B8860B">X</FONT>), <I><FONT COLOR="#B22222">%%%% +1
</FONT></I>	    up_heap(<FONT COLOR="#B8860B">HalfN</FONT>, <FONT COLOR="#B8860B">Y</FONT>);
        false -&gt;
	    <B><FONT COLOR="#A020F0">put</FONT></B>(<FONT COLOR="#B8860B">N</FONT>+1, <FONT COLOR="#B8860B">Y</FONT>) <I><FONT COLOR="#B22222">%%%% +1
</FONT></I>    <B><FONT COLOR="#A020F0">end</FONT></B>.

<B><FONT COLOR="#0000FF">heapsort</FONT></B>(0) -&gt; ok;
<B><FONT COLOR="#0000FF">heapsort</FONT></B>(<FONT COLOR="#B8860B">N</FONT>) -&gt;
    remove_greatest(<FONT COLOR="#B8860B">N</FONT>),
    heapsort(<FONT COLOR="#B8860B">N</FONT>-1).

<B><FONT COLOR="#0000FF">remove_greatest</FONT></B>(<FONT COLOR="#B8860B">N</FONT>) -&gt;
    <FONT COLOR="#B8860B">X</FONT> = <B><FONT COLOR="#A020F0">get</FONT></B>(0+1), <I><FONT COLOR="#B22222">%%%% +1
</FONT></I>    <FONT COLOR="#B8860B">Y</FONT> = <B><FONT COLOR="#A020F0">get</FONT></B>(<FONT COLOR="#B8860B">N</FONT>+1), <I><FONT COLOR="#B22222">%%%% +1
</FONT></I>    <B><FONT COLOR="#A020F0">put</FONT></B>(<FONT COLOR="#B8860B">N</FONT>+1, <FONT COLOR="#B8860B">X</FONT>), <I><FONT COLOR="#B22222">%%%% +1
</FONT></I>    down_heap(0, <FONT COLOR="#B8860B">N</FONT>-1, <FONT COLOR="#B8860B">Y</FONT>).

<B><FONT COLOR="#0000FF">down_heap</FONT></B>(<FONT COLOR="#B8860B">I</FONT>, <FONT COLOR="#B8860B">N</FONT>, <FONT COLOR="#B8860B">X</FONT>) -&gt;
    <FONT COLOR="#B8860B">L</FONT> = <FONT COLOR="#B8860B">I</FONT> + <FONT COLOR="#B8860B">I</FONT> + 1,
    <FONT COLOR="#B8860B">R</FONT> = <FONT COLOR="#B8860B">L</FONT> + 1,
    <B><FONT COLOR="#A020F0">case</FONT></B> <FONT COLOR="#B8860B">N</FONT> &lt; <FONT COLOR="#B8860B">L</FONT> <B><FONT COLOR="#A020F0">of</FONT></B>
        true -&gt;
            <B><FONT COLOR="#A020F0">put</FONT></B>(<FONT COLOR="#B8860B">I</FONT>+1, <FONT COLOR="#B8860B">X</FONT>); <I><FONT COLOR="#B22222">%%%% +1
</FONT></I>        false -&gt;
	    {<FONT COLOR="#B8860B">J</FONT>, <FONT COLOR="#B8860B">Y</FONT>} = <B><FONT COLOR="#A020F0">if</FONT></B>
			 <FONT COLOR="#B8860B">R</FONT> &lt; <FONT COLOR="#B8860B">N</FONT> -&gt;
			     <FONT COLOR="#B8860B">RV</FONT> = <B><FONT COLOR="#A020F0">get</FONT></B>(<FONT COLOR="#B8860B">R</FONT>+1),
			     <FONT COLOR="#B8860B">LV</FONT> = <B><FONT COLOR="#A020F0">get</FONT></B>(<FONT COLOR="#B8860B">L</FONT>+1),
			     <B><FONT COLOR="#A020F0">if</FONT></B>
				 <FONT COLOR="#B8860B">RV</FONT> &gt; <FONT COLOR="#B8860B">LV</FONT> -&gt;
				     {<FONT COLOR="#B8860B">R</FONT>, <FONT COLOR="#B8860B">RV</FONT>};
				 true -&gt;
				     {<FONT COLOR="#B8860B">L</FONT>, <FONT COLOR="#B8860B">LV</FONT>}
			     <B><FONT COLOR="#A020F0">end</FONT></B>;
			 true -&gt;
			     {<FONT COLOR="#B8860B">L</FONT>, <B><FONT COLOR="#A020F0">get</FONT></B>(<FONT COLOR="#B8860B">L</FONT>+1)}
		     <B><FONT COLOR="#A020F0">end</FONT></B>,
            <B><FONT COLOR="#A020F0">case</FONT></B> <FONT COLOR="#B8860B">X</FONT> &gt; <FONT COLOR="#B8860B">Y</FONT> <B><FONT COLOR="#A020F0">of</FONT></B>
	        true -&gt; <B><FONT COLOR="#A020F0">put</FONT></B>(<FONT COLOR="#B8860B">I</FONT>+1, <FONT COLOR="#B8860B">X</FONT>); <I><FONT COLOR="#B22222">%%%% +1
</FONT></I>                false -&gt;
		    <B><FONT COLOR="#A020F0">put</FONT></B>(<FONT COLOR="#B8860B">I</FONT>+1, <FONT COLOR="#B8860B">Y</FONT>), <I><FONT COLOR="#B22222">%%%% +1
</FONT></I>		    down_heap(<FONT COLOR="#B8860B">J</FONT>, <FONT COLOR="#B8860B">N</FONT>, <FONT COLOR="#B8860B">X</FONT>)
            <B><FONT COLOR="#A020F0">end</FONT></B>
    <B><FONT COLOR="#A020F0">end</FONT></B>.

<B><FONT COLOR="#0000FF">clear_ets_array</FONT></B>(0) -&gt; ok;
<B><FONT COLOR="#0000FF">clear_ets_array</FONT></B>(<FONT COLOR="#B8860B">I</FONT>) -&gt;
    <B><FONT COLOR="#A020F0">put</FONT></B>(<FONT COLOR="#B8860B">I</FONT>, 0),
    clear_ets_array(<FONT COLOR="#B8860B">I</FONT> - 1).

<B><FONT COLOR="#0000FF">gen_random</FONT></B>(<FONT COLOR="#B8860B">Seed</FONT>) -&gt;
    <FONT COLOR="#B8860B">IM</FONT> = 139968, <FONT COLOR="#B8860B">IA</FONT> = 3877, <FONT COLOR="#B8860B">IC</FONT> = 29573,
    <FONT COLOR="#B8860B">S</FONT> = ((<FONT COLOR="#B8860B">Seed</FONT> * <FONT COLOR="#B8860B">IA</FONT>) + <FONT COLOR="#B8860B">IC</FONT>) rem <FONT COLOR="#B8860B">IM</FONT>,
    {<FONT COLOR="#B8860B">S</FONT>, <FONT COLOR="#B8860B">S</FONT>/<FONT COLOR="#B8860B">IM</FONT>}.

<B><FONT COLOR="#0000FF">main</FONT></B>([<FONT COLOR="#B8860B">Arg</FONT>]) -&gt;
    <FONT COLOR="#B8860B">N</FONT> = <B><FONT COLOR="#A020F0">list_to_integer</FONT></B>(<B><FONT COLOR="#A020F0">atom_to_list</FONT></B>(<FONT COLOR="#B8860B">Arg</FONT>)),
    clear_ets_array(<FONT COLOR="#B8860B">N</FONT>),
    random_heap(0, 42, <FONT COLOR="#B8860B">N</FONT>),
    heapsort(<FONT COLOR="#B8860B">N</FONT>-1),
    io:fwrite(<B><FONT COLOR="#BC8F8F">&quot;~.10f~n&quot;</FONT></B>, [<B><FONT COLOR="#A020F0">get</FONT></B>(<FONT COLOR="#B8860B">N</FONT>)]),
    <B><FONT COLOR="#A020F0">halt</FONT></B>(0).</pre></td></tr></table>
