<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Another one of my Oz concurrency 'explorations', this implementation</span>
<span class="slc">% [the first of several, all of which I hope will be improvements :)]</span>
<span class="slc">% is based on the MzScheme version which uses 'synchronous channels' to</span>
<span class="slc">% communicate between threads. Whilst this approach isn't particularly</span>
<span class="slc">% fast I quite like it because it is a very simple design which is</span>
<span class="slc">% readily comprehendable, and easily implemented with relatively</span>
<span class="slc">% little code.</span>
<span class="slc">%</span>
<span class="slc">% The current version uses a combination of Oz 'ports' and dataflow</span>
<span class="slc">% variables to mimic 'synchronous channels', and like the MzScheme</span>
<span class="slc">% version, isn't particularly fast.</span>
<span class="slc">%</span>
<span class="slc">% Please forgive any idiomatic blunders or other language misuses. I</span>
<span class="slc">% will need to reread CTM ['Concepts, Techniques and Models of Computer</span>
<span class="slc">% Programming' by P. van Roy, S. Haridi] a few more times to really get</span>
<span class="slc">% the hang of Oz-style concurrency :) !</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo show<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span>

<span class="kwb">define</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>Complement This That<span class="sym">}</span>
    <span class="kwb">case</span> This # That
      <span class="kwb">of</span> blue # blue <span class="kwb">then</span> blue
      <span class="sym">[]</span> blue # red <span class="kwb">then</span> yellow
      <span class="sym">[]</span> blue # yellow <span class="kwb">then</span> red
      <span class="sym">[]</span> red # blue <span class="kwb">then</span> yellow
      <span class="sym">[]</span> red # red <span class="kwb">then</span> red
      <span class="sym">[]</span> red # yellow <span class="kwb">then</span> blue
      <span class="sym">[]</span> yellow # blue <span class="kwb">then</span> red
      <span class="sym">[]</span> yellow # red <span class="kwb">then</span> blue
      <span class="sym">[]</span> yellow # yellow <span class="kwb">then</span> yellow
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>Meeting MeetingQueue N Counter<span class="sym">}</span>
    <span class="kwb">thread</span>
      <span class="kwb">proc</span> <span class="sym">{</span>Meeting_ N<span class="sym">}</span>
        <span class="kwb">if</span> N <span class="sym">==</span> <span class="num">0</span> <span class="kwb">then</span> LQ <span class="kwb">in</span>
          meeting<span class="sym">(</span>LQ _<span class="sym">) = {</span>MeetingQueue.delete<span class="sym">}</span>
          <span class="sym">{</span>LQ.insert <span class="kwa">nil</span><span class="sym">}</span>
          <span class="sym">{</span>Meeting_ <span class="num">0</span><span class="sym">}</span>
        <span class="kwb">else</span> LQ1 LQ2 C1 C2 <span class="kwb">in</span>
          meeting<span class="sym">(</span>LQ1 C1<span class="sym">) = {</span>MeetingQueue.delete<span class="sym">}</span>
          meeting<span class="sym">(</span>LQ2 C2<span class="sym">) = {</span>MeetingQueue.delete<span class="sym">}</span>
          <span class="sym">{</span>LQ1.insert C2<span class="sym">}</span>
          <span class="sym">{</span>LQ2.insert C1<span class="sym">}</span>
          <span class="sym">{</span>Meeting_ <span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)}</span>
        <span class="kwb">end</span>
      <span class="kwb">end</span>
    <span class="kwb">in</span>
      <span class="sym">{</span>Counter.increment<span class="sym">}</span>
      <span class="sym">{</span>Meeting_ N<span class="sym">}</span>
      <span class="sym">{</span>Counter.decrement<span class="sym">}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>Chameneos Colour MeetingQueue ResultQueue Counter<span class="sym">}</span>
    <span class="kwb">thread</span>
      LQ <span class="sym">= {</span>NewSyncQueue<span class="sym">}</span>

      <span class="kwb">proc</span> <span class="sym">{</span>Chameneos_ Colour OtherColour Meetings<span class="sym">}</span>
        <span class="sym">{</span>MeetingQueue.insert meeting<span class="sym">(</span>LQ Colour<span class="sym">)}</span>
        <span class="kwb">if</span> OtherColour <span class="sym">==</span> <span class="kwa">nil</span> <span class="kwb">then</span>
          <span class="sym">{</span>ResultQueue.insert Meetings<span class="sym">}</span>
        <span class="kwb">else</span>
          <span class="sym">{</span>Chameneos_ <span class="sym">{</span>Complement Colour OtherColour<span class="sym">} {</span>LQ.delete<span class="sym">} (</span>Meetings <span class="sym">+</span> <span class="num">1</span><span class="sym">)}</span>
        <span class="kwb">end</span>
      <span class="kwb">end</span>
    <span class="kwb">in</span>
      <span class="sym">{</span>Counter.increment<span class="sym">}</span>
      <span class="sym">{</span>Chameneos_ Colour Colour ~<span class="num">1</span><span class="sym">}</span>
      <span class="sym">{</span>Counter.decrement<span class="sym">}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>WaitForThreadExit Parent Counter<span class="sym">}</span>
    <span class="kwb">fun</span> <span class="sym">{</span>Skip<span class="sym">}</span> <span class="kwa">nil</span> <span class="kwb">end</span>
  <span class="kwb">in</span>
    <span class="kwb">for</span> _ <span class="kwb">in</span> <span class="sym">{</span>Skip<span class="sym">};({</span>Counter.current<span class="sym">} &gt;</span> <span class="num">0</span><span class="sym">);{</span>Skip<span class="sym">}</span> <span class="kwb">do</span>
      <span class="sym">{</span>Thread.preempt Parent<span class="sym">}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>NewCounter<span class="sym">}</span>
    Count <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>  Lock <span class="sym">= {</span>NewLock<span class="sym">}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>Increment<span class="sym">}</span> <span class="kwb">lock</span> Lock <span class="kwb">then</span> Count <span class="sym">:=</span> &#64;Count <span class="sym">+</span> <span class="num">1</span> <span class="kwb">end end</span>
    <span class="kwb">proc</span> <span class="sym">{</span>Decrement<span class="sym">}</span> <span class="kwb">lock</span> Lock <span class="kwb">then</span> Count <span class="sym">:=</span> &#64;Count <span class="sym">-</span> <span class="num">1</span> <span class="kwb">end end</span>
    <span class="kwb">fun</span> <span class="sym">{</span>Current<span class="sym">}</span> <span class="kwb">lock</span> Lock <span class="kwb">then</span> &#64;Count <span class="kwb">end end</span>

  <span class="kwb">in</span>
    ops<span class="sym">(</span>increment<span class="sym">:</span>Increment decrement<span class="sym">:</span>Decrement current<span class="sym">:</span>Current<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span>
    N Nt <span class="kwb">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String.toInt <span class="sym">{</span>Application.getArgs plain<span class="sym">}</span>.Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwb">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwb">then</span> Default <span class="kwb">else</span> Nt <span class="kwb">end</span>
    <span class="kwa">catch</span> error<span class="sym">(</span>...<span class="sym">)</span> <span class="kwb">then</span>
      N <span class="sym">=</span> Default
    <span class="kwb">end</span>
    N
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="slc">%% Port-based Concurrent Queue [modified CTM implementation]</span>

  <span class="kwb">fun</span> <span class="sym">{</span>NewPortQueue<span class="sym">}</span>
    Given GivePort <span class="sym">= {</span>NewPort Given<span class="sym">}</span>
    Taken TakePort <span class="sym">= {</span>NewPort Taken<span class="sym">}</span>
  <span class="kwb">in</span>
    <span class="kwb">thread</span> Given <span class="sym">=</span> Taken <span class="kwb">end</span>
    ops<span class="sym">(</span>insert<span class="sym">:</span><span class="kwb">proc</span> <span class="sym">{</span>$ X<span class="sym">} {</span>Send GivePort X<span class="sym">}</span> <span class="kwb">end</span>
        delete<span class="sym">:</span><span class="kwb">proc</span> <span class="sym">{</span>$ X<span class="sym">} {</span>Send TakePort X<span class="sym">}</span> <span class="kwb">end</span><span class="sym">)</span>
  <span class="kwb">end</span>

  <span class="slc">%% Synchronous Concurrent Queue [implemented as described in CTM text]</span>

  <span class="kwb">fun</span> <span class="sym">{</span>NewSyncQueue<span class="sym">}</span>
    C <span class="sym">= {</span>NewPortQueue<span class="sym">}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>Insert X<span class="sym">}</span>
      <span class="sym">{</span>Wait X<span class="sym">}</span>
      <span class="sym">{</span>C.insert X<span class="sym">}</span>
    <span class="kwb">end</span>

    <span class="kwb">fun</span> <span class="sym">{</span>Delete<span class="sym">}</span>
      X
    <span class="kwb">in</span>
      <span class="sym">{</span>C.delete X<span class="sym">}</span>
      <span class="sym">{</span>Wait X<span class="sym">}</span>
      X
    <span class="kwb">end</span>
  <span class="kwb">in</span>
    ops<span class="sym">(</span>insert<span class="sym">:</span>Insert delete<span class="sym">:</span>Delete<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  SetOfChameneos <span class="sym">= [</span>blue red yellow blue<span class="sym">]</span>

  MeetingQueue <span class="sym">= {</span>NewSyncQueue<span class="sym">}</span>  ResultQueue <span class="sym">= {</span>NewSyncQueue<span class="sym">}</span>  Counter <span class="sym">= {</span>NewCounter<span class="sym">}</span>

  N

<span class="slc">% ------------- %</span>

<span class="kwb">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1 1</span><span class="sym">}</span>

  <span class="sym">{</span>Meeting MeetingQueue N Counter<span class="sym">}</span>

  <span class="kwb">for</span> I <span class="kwb">in</span> SetOfChameneos <span class="kwb">do</span>
    <span class="sym">{</span>Chameneos I MeetingQueue ResultQueue Counter<span class="sym">}</span>
  <span class="kwb">end</span>

  <span class="sym">{</span>WaitForThreadExit <span class="sym">{</span>Thread.this<span class="sym">}</span> Counter<span class="sym">}</span>

  <span class="sym">{</span>System.showInfo
    <span class="sym">{</span>List.foldL SetOfChameneos <span class="kwb">fun</span> <span class="sym">{</span>$ A _<span class="sym">} (</span>A <span class="sym">+ {</span>ResultQueue.delete<span class="sym">})</span> <span class="kwb">end</span> <span class="num">0</span><span class="sym">}}</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

