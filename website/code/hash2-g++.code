<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: hash2-g++.code,v 1.1 2004-11-02 08:52:31 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://www.bagley.org/~doug/shootout/
</FONT></I>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;stdio.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iostream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;ext/hash_map&gt;</FONT></B>

using namespace std;
using namespace __gnu_cxx;

<B><FONT COLOR="#228B22">struct</FONT></B> eqstr {
   <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#A020F0">operator</FONT></B>()(<B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* s1, <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* s2) <B><FONT COLOR="#228B22">const</FONT></B> {
      <B><FONT COLOR="#A020F0">if</FONT></B> (s1 == s2) <B><FONT COLOR="#A020F0">return</FONT></B> true;
      <B><FONT COLOR="#A020F0">if</FONT></B> (!s1 || !s2) <B><FONT COLOR="#A020F0">return</FONT></B> false;
      <B><FONT COLOR="#A020F0">while</FONT></B> (*s1 != <B><FONT COLOR="#BC8F8F">'\0'</FONT></B> &amp;&amp; *s1 == *s2)
         s1++, s2++;
      <B><FONT COLOR="#A020F0">return</FONT></B> *s1 == *s2;
   }
};

<B><FONT COLOR="#228B22">struct</FONT></B> strhash {
   size_t <B><FONT COLOR="#A020F0">operator</FONT></B>()(<B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* s) <B><FONT COLOR="#228B22">const</FONT></B> {
      size_t i;
      <B><FONT COLOR="#A020F0">for</FONT></B> (i = 0; *s; s++)
         i = 31 * i + *s;
      <B><FONT COLOR="#A020F0">return</FONT></B> i;
   }
};

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> argc, <B><FONT COLOR="#228B22">char</FONT></B> *argv[]) {
    <B><FONT COLOR="#228B22">int</FONT></B> n = ((argc == 2) ? atoi(argv[1]) : 1);
    <B><FONT COLOR="#228B22">char</FONT></B> buf[16];
    <B><FONT COLOR="#228B22">typedef</FONT></B> hash_map&lt;<B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>*, <B><FONT COLOR="#228B22">int</FONT></B>, strhash, eqstr&gt; HM;
    HM hash1, hash2;

    <B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#228B22">int</FONT></B> i=0; i&lt;10000; i++) {
        sprintf(buf, <B><FONT COLOR="#BC8F8F">&quot;foo_%d&quot;</FONT></B>, i);
        hash1[strdup(buf)] = i;
    }
    <B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#228B22">int</FONT></B> i=0; i&lt;n; i++) {
        <B><FONT COLOR="#A020F0">for</FONT></B> (HM::iterator k = hash1.begin(); k != hash1.end(); ++k) {
            hash2[(*k).first] += k-&gt;second;
        }
    }
    cout &lt;&lt; hash1[<B><FONT COLOR="#BC8F8F">&quot;foo_1&quot;</FONT></B>] &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> &lt;&lt; hash1[<B><FONT COLOR="#BC8F8F">&quot;foo_9999&quot;</FONT></B>] &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>
         &lt;&lt; hash2[<B><FONT COLOR="#BC8F8F">&quot;foo_1&quot;</FONT></B>] &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> &lt;&lt; hash2[<B><FONT COLOR="#BC8F8F">&quot;foo_9999&quot;</FONT></B>] &lt;&lt; endl;
}</pre></td></tr></table>
