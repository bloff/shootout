<span class="slc">// The Great Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// contributed by Ian Osgood</span>

<span class="kwa">function</span> <span class="kwd">A</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) {</span>
  <span class="kwa">return</span> <span class="num">1</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">Au</span><span class="sym">(</span>u<span class="sym">,</span>v<span class="sym">) {</span>
  <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>u<span class="sym">.</span><span class="kwc">length</span><span class="sym">; ++</span>i<span class="sym">) {</span>
    <span class="kwa">var</span> t <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>u<span class="sym">.</span><span class="kwc">length</span><span class="sym">; ++</span>j<span class="sym">)</span>
      t <span class="sym">+=</span> <span class="kwd">A</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) *</span> u<span class="sym">[</span>j<span class="sym">];</span>
    v<span class="sym">[</span>i<span class="sym">] =</span> t<span class="sym">;</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">Atu</span><span class="sym">(</span>u<span class="sym">,</span>v<span class="sym">) {</span>
  <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>u<span class="sym">.</span><span class="kwc">length</span><span class="sym">; ++</span>i<span class="sym">) {</span>
    <span class="kwa">var</span> t <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>u<span class="sym">.</span><span class="kwc">length</span><span class="sym">; ++</span>j<span class="sym">)</span>
      t <span class="sym">+=</span> <span class="kwd">A</span><span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">) *</span> u<span class="sym">[</span>j<span class="sym">];</span>
    v<span class="sym">[</span>i<span class="sym">] =</span> t<span class="sym">;</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">AtAu</span><span class="sym">(</span>u<span class="sym">,</span>v<span class="sym">,</span>w<span class="sym">) {</span>
  <span class="kwd">Au</span><span class="sym">(</span>u<span class="sym">,</span>w<span class="sym">);</span>
  <span class="kwd">Atu</span><span class="sym">(</span>w<span class="sym">,</span>v<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">spectralnorm</span><span class="sym">(</span>n<span class="sym">) {</span>
  <span class="kwa">var</span> i<span class="sym">,</span> u<span class="sym">=[],</span> v<span class="sym">=[],</span> w<span class="sym">=[],</span> vv<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> vBv<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>
  <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">; ++</span>i<span class="sym">) {</span>
    u<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">1</span><span class="sym">;</span> v<span class="sym">[</span>i<span class="sym">] =</span> w<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
  <span class="sym">}</span>
  <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">; ++</span>i<span class="sym">) {</span>
    <span class="kwd">AtAu</span><span class="sym">(</span>u<span class="sym">,</span>v<span class="sym">,</span>w<span class="sym">);</span>
    <span class="kwd">AtAu</span><span class="sym">(</span>v<span class="sym">,</span>u<span class="sym">,</span>w<span class="sym">);</span>
  <span class="sym">}</span>
  <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">; ++</span>i<span class="sym">) {</span>
    vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];</span>
    vv  <span class="sym">+=</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];</span>
  <span class="sym">}</span>
  <span class="kwa">return</span> <span class="kwc">Math</span><span class="sym">.</span><span class="kwc">sqrt</span><span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwc">print</span><span class="sym">(</span><span class="kwd">spectralnorm</span><span class="sym">(</span>arguments<span class="sym">[</span><span class="num">0</span><span class="sym">]).</span><span class="kwd">toFixed</span><span class="sym">(</span><span class="num">9</span><span class="sym">));</span>
