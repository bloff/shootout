<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: strcat-mlton.code,v 1.9 2006-03-11 17:57:30 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * from Stephen Weeks</span>
<span class="com"> *)</span>

<span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span>
<span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">)</span>

<span class="kwa">val</span> stuff <span class="sym">=</span> <span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span>

<span class="kwa">structure</span> Buffer<span class="sym">:</span>
   <span class="kwa">sig</span>
      <span class="kwa">type</span> 'a t

      <span class="kwa">val</span> add<span class="sym">:</span> 'a t <span class="sym">*</span> 'a array <span class="sym">-&gt;</span> unit
      <span class="kwa">val</span> length<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> <span class="kwb">int</span>
      <span class="kwa">val</span> new<span class="sym">:</span> 'a <span class="sym">-&gt;</span> 'a t
   <span class="kwa">end</span> <span class="sym">=</span>
   <span class="kwa">struct</span>
      <span class="kwa">datatype</span> 'a t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>dummy<span class="sym">:</span> 'a<span class="sym">,</span>
			    length<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">,</span>
			    elts<span class="sym">:</span> 'a array ref<span class="sym">}</span>

      <span class="kwa">fun</span> add <span class="sym">(</span>T <span class="sym">{</span>dummy<span class="sym">,</span> elts<span class="sym">,</span> length<span class="sym">},</span> a<span class="sym">) =</span>
	 <span class="kwa">let</span>
	    <span class="kwa">val</span> l <span class="sym">= !</span>length
	    <span class="kwa">val</span> e <span class="sym">= !</span>elts
	    <span class="kwa">val</span> en <span class="sym">=</span> Array.length e
	    <span class="kwa">val</span> an <span class="sym">=</span> Array.length a
	    <span class="kwa">val</span> e <span class="sym">=</span>
	       <span class="kwa">if</span> l <span class="sym">+</span> an <span class="sym">&gt;=</span> en
		  <span class="kwa">then</span>
		     <span class="kwa">let</span>
			<span class="kwa">val</span> e <span class="sym">=</span> Array.tabulate <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> en<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span>
						<span class="kwa">if</span> i <span class="sym">&lt;</span> l
						   <span class="kwa">then</span> Array.sub <span class="sym">(</span>e<span class="sym">,</span> i<span class="sym">)</span>
						<span class="kwa">else</span> dummy<span class="sym">)</span>
			<span class="kwa">val</span> _ <span class="sym">=</span> elts <span class="sym">:=</span> e
		     <span class="kwa">in</span> e
		     <span class="kwa">end</span>
	       <span class="kwa">else</span> e
	    <span class="kwa">val</span> _ <span class="sym">=</span>
	       Array.copy <span class="sym">{</span>src <span class="sym">=</span> a<span class="sym">,</span> dst <span class="sym">=</span> e<span class="sym">,</span> di <span class="sym">=</span> l<span class="sym">}</span>
	    <span class="kwa">val</span> _ <span class="sym">=</span> length <span class="sym">:=</span> l <span class="sym">+</span> an
	 <span class="kwa">in</span> <span class="sym">()</span>
	 <span class="kwa">end</span>

      <span class="kwa">fun</span> new <span class="sym">(</span>dummy<span class="sym">:</span> 'a<span class="sym">) =</span> T <span class="sym">{</span>dummy <span class="sym">=</span> dummy<span class="sym">,</span>
			       length <span class="sym">=</span> ref <span class="num">0</span><span class="sym">,</span>
			       elts <span class="sym">=</span> ref <span class="sym">(</span>Array.array <span class="sym">(</span><span class="num">32</span><span class="sym">,</span> dummy<span class="sym">))}</span>

      <span class="kwa">fun</span> length <span class="sym">(</span>T <span class="sym">{</span>length<span class="sym">,</span> ...<span class="sym">}) = !</span>length
   <span class="kwa">end</span>

<span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> stuff <span class="sym">=</span>
	 Array.tabulate <span class="sym">(</span><span class="kwa">String</span>.size stuff<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> <span class="kwa">String</span>.sub <span class="sym">(</span>stuff<span class="sym">,</span> i<span class="sym">))</span>
      <span class="kwa">val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))</span>
      <span class="kwa">val</span> b <span class="sym">=</span> Buffer.new #<span class="str">&quot;</span><span class="esc">\0</span><span class="str">00&quot;</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> Buffer.add <span class="sym">(</span>b<span class="sym">,</span> stuff<span class="sym">))</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> printl <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(</span>Buffer.length b<span class="sym">)]</span>
   <span class="kwa">in</span>
      <span class="sym">()</span>
   <span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() )</span>
