<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: strcat-mlton.code,v 1.3 2004-11-11 07:14:19 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * from Stephen Weeks
</span><span class="line">    5 </span><span class="com"> *)</span>
<span class="line">    6 </span>
<span class="line">    7 </span><span class="kwa">fun</span> for <span class="sym">(</span>start<span class="sym">,</span> stop<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">    8 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">    9 </span><span class="kwa">      fun</span> loop i <span class="sym">=
</span><span class="line">   10 </span><span class="sym"></span>         <span class="kwa">if</span> i <span class="sym">&gt;</span> stop
<span class="line">   11 </span>            <span class="kwa">then</span> <span class="sym">()
</span><span class="line">   12 </span><span class="sym"></span>         <span class="kwa">else</span> <span class="sym">(</span>f i<span class="sym">;</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   13 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">   14 </span><span class="kwa"></span>      loop start
<span class="line">   15 </span>   <span class="kwa">end
</span><span class="line">   16 </span><span class="kwa">
</span><span class="line">   17 </span><span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0
</span><span class="line">   18 </span><span class="num"></span><span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">)
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym"></span><span class="kwa">val</span> stuff <span class="sym">=</span> <span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   21 </span>
<span class="line">   22 </span><span class="kwa">structure</span> Buffer<span class="sym">:
</span><span class="line">   23 </span><span class="sym"></span>   <span class="kwa">sig
</span><span class="line">   24 </span><span class="kwa">      type</span> 'a t
<span class="line">   25 </span>
<span class="line">   26 </span>      <span class="kwa">val</span> add<span class="sym">:</span> 'a t <span class="sym">*</span> 'a array <span class="sym">-&gt;</span> unit
<span class="line">   27 </span>      <span class="kwa">val</span> length<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> <span class="kwb">int
</span><span class="line">   28 </span><span class="kwb"></span>      <span class="kwa">val</span> new<span class="sym">:</span> 'a <span class="sym">-&gt;</span> 'a t
<span class="line">   29 </span>   <span class="kwa">end</span> <span class="sym">=
</span><span class="line">   30 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">   31 </span><span class="kwa">      datatype</span> 'a t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>dummy<span class="sym">:</span> 'a<span class="sym">,
</span><span class="line">   32 </span><span class="sym"></span>                            length<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">,
</span><span class="line">   33 </span><span class="sym"></span>                            elts<span class="sym">:</span> 'a array ref<span class="sym">}
</span><span class="line">   34 </span><span class="sym">
</span><span class="line">   35 </span><span class="sym"></span>      <span class="kwa">fun</span> add <span class="sym">(</span>T <span class="sym">{</span>dummy<span class="sym">,</span> elts<span class="sym">,</span> length<span class="sym">},</span> a<span class="sym">) =
</span><span class="line">   36 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">   37 </span><span class="kwa">            val</span> l <span class="sym">= !</span>length
<span class="line">   38 </span>            <span class="kwa">val</span> e <span class="sym">= !</span>elts
<span class="line">   39 </span>            <span class="kwa">val</span> en <span class="sym">=</span> Array.length e
<span class="line">   40 </span>            <span class="kwa">val</span> an <span class="sym">=</span> Array.length a
<span class="line">   41 </span>            <span class="kwa">val</span> e <span class="sym">=
</span><span class="line">   42 </span><span class="sym"></span>               <span class="kwa">if</span> l <span class="sym">+</span> an <span class="sym">&gt;=</span> en
<span class="line">   43 </span>                  <span class="kwa">then
</span><span class="line">   44 </span><span class="kwa">                     let
</span><span class="line">   45 </span><span class="kwa">                        val</span> e <span class="sym">=</span> Array.tabulate <span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> en<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span><span class="line">   46 </span><span class="sym"></span>                                                <span class="kwa">if</span> i <span class="sym">&lt;</span> l
<span class="line">   47 </span>                                                   <span class="kwa">then</span> Array.sub <span class="sym">(</span>e<span class="sym">,</span> i<span class="sym">)
</span><span class="line">   48 </span><span class="sym"></span>                                                <span class="kwa">else</span> dummy<span class="sym">)
</span><span class="line">   49 </span><span class="sym"></span>                        <span class="kwa">val</span> _ <span class="sym">=</span> elts <span class="sym">:=</span> e
<span class="line">   50 </span>                     <span class="kwa">in</span> e
<span class="line">   51 </span>                     <span class="kwa">end
</span><span class="line">   52 </span><span class="kwa">               else</span> e
<span class="line">   53 </span>            <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">   54 </span><span class="sym"></span>               Array.copy <span class="sym">{</span>src <span class="sym">=</span> a<span class="sym">,</span> dst <span class="sym">=</span> e<span class="sym">,</span> di <span class="sym">=</span> l<span class="sym">}
</span><span class="line">   55 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=</span> length <span class="sym">:=</span> l <span class="sym">+</span> an
<span class="line">   56 </span>         <span class="kwa">in</span> <span class="sym">()
</span><span class="line">   57 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">   58 </span><span class="kwa">
</span><span class="line">   59 </span><span class="kwa">      fun</span> new <span class="sym">(</span>dummy<span class="sym">:</span> 'a<span class="sym">) =</span> T <span class="sym">{</span>dummy <span class="sym">=</span> dummy<span class="sym">,
</span><span class="line">   60 </span><span class="sym"></span>                               length <span class="sym">=</span> ref <span class="num">0</span><span class="sym">,
</span><span class="line">   61 </span><span class="sym"></span>                               elts <span class="sym">=</span> ref <span class="sym">(</span>Array.array <span class="sym">(</span><span class="num">32</span><span class="sym">,</span> dummy<span class="sym">))}
</span><span class="line">   62 </span><span class="sym">
</span><span class="line">   63 </span><span class="sym"></span>      <span class="kwa">fun</span> length <span class="sym">(</span>T <span class="sym">{</span>length<span class="sym">,</span> ...<span class="sym">}) = !</span>length
<span class="line">   64 </span>   <span class="kwa">end
</span><span class="line">   65 </span><span class="kwa">
</span><span class="line">   66 </span><span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =
</span><span class="line">   67 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   68 </span><span class="kwa">      val</span> stuff <span class="sym">=
</span><span class="line">   69 </span><span class="sym"></span>         Array.tabulate <span class="sym">(</span><span class="kwa">String</span>.size stuff<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> <span class="kwa">String</span>.sub <span class="sym">(</span>stuff<span class="sym">,</span> i<span class="sym">))
</span><span class="line">   70 </span><span class="sym"></span>      <span class="kwa">val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))
</span><span class="line">   71 </span><span class="sym"></span>      <span class="kwa">val</span> b <span class="sym">=</span> Buffer.new #<span class="str">&quot;</span><span class="esc">\000</span><span class="str">&quot;</span>
<span class="line">   72 </span>      <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> Buffer.add <span class="sym">(</span>b<span class="sym">,</span> stuff<span class="sym">))
</span><span class="line">   73 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> printl <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(</span>Buffer.length b<span class="sym">)]
</span><span class="line">   74 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">   75 </span><span class="kwa"></span>      <span class="sym">()
</span><span class="line">   76 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">   77 </span><span class="kwa">
</span><span class="line">   78 </span><span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() )</span>
