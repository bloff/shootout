<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application System

<span class="kwb">define</span>
   <span class="kwb">fun</span> <span class="sym">{</span>NewMeetingPlace<span class="sym">}</span>
      ColourList
      ColourPort <span class="sym">= {</span>Port.new ColourList<span class="sym">}</span>
      OtherList
      OtherPort <span class="sym">= {</span>Port.new OtherList<span class="sym">}</span>
      CountDown <span class="sym">= {</span>NewCell N<span class="sym">}</span>

      <span class="kwb">proc</span> <span class="sym">{</span>Meetings C1<span class="sym">|</span>C2<span class="sym">|</span>C O1<span class="sym">|</span>O2<span class="sym">|</span>O<span class="sym">}</span>
         <span class="kwb">if</span> &#64;CountDown <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then</span>
            O1 <span class="sym">=</span> C2
            O2 <span class="sym">=</span> C1
            CountDown <span class="sym">:=</span> &#64;CountDown <span class="sym">-</span> <span class="num">1</span>
         <span class="kwb">else</span>
            O1 <span class="sym">=</span> faded
            O2 <span class="sym">=</span> faded
         <span class="kwb">end</span>
         <span class="sym">{</span>Meetings C O<span class="sym">}</span>
      <span class="kwb">end</span>

      <span class="kwb">fun</span> <span class="sym">{</span>OtherColour Me<span class="sym">}</span>
         Other
      <span class="kwb">in</span>
         <span class="sym">{</span>Port.send ColourPort Me<span class="sym">}</span>
         <span class="sym">{</span>Port.send OtherPort Other<span class="sym">}</span>
         Other
      <span class="kwb">end</span>

   <span class="kwb">in</span>
      <span class="kwb">thread</span> <span class="sym">{</span>Meetings ColourList OtherList<span class="sym">}</span> <span class="kwb">end</span>
      place<span class="sym">(</span>otherCreaturesColour<span class="sym">:</span> OtherColour<span class="sym">)</span>
   <span class="kwb">end</span>

   MeetingPlace <span class="sym">= {</span>NewMeetingPlace<span class="sym">}</span>


   <span class="kwa">class</span> Creature
      <span class="kwa">attr</span> creaturesMet<span class="sym">:</span><span class="num">0</span> colour

      <span class="kwb">meth</span> init<span class="sym">(</span>Colour<span class="sym">)</span> colour <span class="sym">:=</span> Colour <span class="kwb">end</span>
      <span class="kwb">meth</span> creaturesMet<span class="sym">(</span>$<span class="sym">)</span> &#64;creaturesMet <span class="kwb">end</span>

      <span class="kwb">meth</span> be<span class="sym">(</span>Done Marker<span class="sym">)</span>
         <span class="kwb">thread</span> <span class="sym">{</span>self meet<span class="sym">}</span> Done<span class="sym">=</span>Marker <span class="kwb">end</span>
      <span class="kwb">end</span>

      <span class="kwb">meth</span> meet<span class="sym">()</span>
         Other <span class="sym">= {</span>MeetingPlace.otherCreaturesColour &#64;colour<span class="sym">}</span>
      <span class="kwb">in</span>
         <span class="kwb">if</span> Other \= faded <span class="kwb">then</span>
            creaturesMet <span class="sym">:=</span> &#64;creaturesMet <span class="sym">+</span> <span class="num">1</span>
            colour <span class="sym">:= {</span>self complement<span class="sym">(</span>Other $<span class="sym">)}</span>
            <span class="sym">{</span>self meet<span class="sym">}</span>
         <span class="kwb">end</span>
      <span class="kwb">end</span>

      <span class="kwb">meth</span> complement<span class="sym">(</span>Other $<span class="sym">)</span>
         <span class="kwb">if</span> &#64;colour <span class="sym">==</span> Other <span class="kwb">then</span>
            Other
         <span class="kwb">else</span>
            <span class="kwb">case</span> Other
            <span class="kwb">of</span> blue <span class="kwb">then if</span> Other <span class="sym">==</span> red <span class="kwb">then</span> yellow <span class="kwb">else</span> red <span class="kwb">end</span>
            <span class="kwb">elseof</span> red <span class="kwb">then if</span> Other <span class="sym">==</span> blue <span class="kwb">then</span> yellow <span class="kwb">else</span> blue <span class="kwb">end</span>
            <span class="kwb">elseof</span> yellow <span class="kwb">then if</span> Other <span class="sym">==</span> blue <span class="kwb">then</span> red <span class="kwb">else</span> blue <span class="kwb">end</span>
            <span class="kwb">end</span>
         <span class="kwb">end</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>   <span class="slc">% Creature</span>


   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String.toInt Arg<span class="sym">}</span>

   Colours <span class="sym">= [</span>blue red yellow blue<span class="sym">]</span>
   Creatures <span class="sym">= {</span>Map Colours <span class="kwb">fun</span><span class="sym">{</span>$ C<span class="sym">} {</span>New Creature init<span class="sym">(</span>C<span class="sym">)}</span> <span class="kwb">end</span><span class="sym">}</span>

   <span class="kwb">proc</span> <span class="sym">{</span>WaitForMeetingsToEnd Creatures Marker<span class="sym">}</span>
      <span class="kwb">if</span> Creatures \= <span class="kwa">nil</span> <span class="kwb">then</span>
         C<span class="sym">|</span>Cs <span class="sym">=</span> Creatures
         Done
      <span class="kwb">in</span>
         <span class="sym">{</span>C be<span class="sym">(</span>Done Marker<span class="sym">)}</span>
         <span class="sym">{</span>WaitForMeetingsToEnd Cs Done<span class="sym">}</span>
      <span class="kwb">end</span>
      <span class="sym">{</span>Wait Marker<span class="sym">}</span>
   <span class="kwb">end</span>


<span class="kwb">in</span>
   <span class="sym">{</span>WaitForMeetingsToEnd Creatures unit<span class="sym">}</span>

   <span class="sym">{</span>System.show
      <span class="sym">{</span>FoldL
         Creatures
         <span class="kwb">fun</span><span class="sym">{</span>$ Count C<span class="sym">} {</span>C creaturesMet<span class="sym">(</span>$<span class="sym">)} +</span> Count <span class="kwb">end</span>
         <span class="num">0</span><span class="sym">} }</span>

   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
