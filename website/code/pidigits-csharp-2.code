<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> *    http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Alp Toker &lt;alp&#64;atoker.com&gt;</span>
<span class="com"> * Modified by Antti Lankila &lt;alankila&#64;bel.fi&gt;</span>
<span class="com"> */</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> UBigInteger <span class="sym">=</span> Mono<span class="sym">.</span>Math<span class="sym">.</span>BigInteger<span class="sym">;</span>

<span class="kwa">public class</span> pidigits
<span class="sym">{</span>
    <span class="kwb">const int</span> L <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span> <span class="sym">(</span><span class="kwb">string</span><span class="sym">[]</span> args<span class="sym">)</span>
    <span class="sym">{</span>
	<span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">!=</span> <span class="num">1</span><span class="sym">)</span>
	    <span class="kwa">return</span><span class="sym">;</span>

	<span class="kwb">int</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
	<span class="kwb">int</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

	PiDigitSpigot pds <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">PiDigitSpigot</span><span class="sym">();</span>
	<span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;</span> n<span class="sym">) {</span>
	    <span class="kwb">string</span> output <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span>
	    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">!=</span> L <span class="sym">&amp;&amp;</span> j <span class="sym">!=</span> n<span class="sym">;</span> i<span class="sym">++,</span> j<span class="sym">++)</span>
		output <span class="sym">+=</span> pds<span class="sym">.</span><span class="kwd">Next</span><span class="sym">();</span>
            Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0,-&quot;</span> <span class="sym">+</span> L <span class="sym">+</span> <span class="str">&quot;}</span><span class="esc">\t</span><span class="str">:{1}&quot;</span><span class="sym">,</span> output<span class="sym">,</span> j<span class="sym">);</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> PiDigitSpigot
<span class="sym">{</span>
    <span class="kwa">private</span> BigInteger z0 <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> z1 <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> z2 <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">private</span> <span class="kwb">int</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">private</span> <span class="kwb">int</span> <span class="kwd">ExtractDigit</span><span class="sym">(</span><span class="kwb">int</span> digit<span class="sym">)</span>
    <span class="sym">{</span>
	<span class="kwa">return</span> <span class="sym">((</span>z0 <span class="sym">*</span> digit <span class="sym">+</span> z1<span class="sym">) /</span> z2<span class="sym">).</span><span class="kwd">IntValue</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">private</span> <span class="kwb">void</span> <span class="kwd">Compose_k</span><span class="sym">(</span><span class="kwb">int</span> k<span class="sym">)</span>
    <span class="sym">{</span>
	<span class="kwb">int</span> k2 <span class="sym">=</span> <span class="num">2</span> <span class="sym">*</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
	z1 <span class="sym">=</span> k2 <span class="sym">*</span> z1 <span class="sym">+</span> <span class="num">2</span> <span class="sym">*</span> k2 <span class="sym">*</span> z0<span class="sym">;</span>
	z0 <span class="sym">*=</span> k<span class="sym">;</span>
	z2 <span class="sym">*=</span> k2<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">private</span> <span class="kwb">void</span> <span class="kwd">Compose_d</span><span class="sym">(</span><span class="kwb">int</span> d<span class="sym">)</span>
    <span class="sym">{</span>
	z1 <span class="sym">=</span> <span class="num">10</span> <span class="sym">*</span> z1 <span class="sym">+ -</span><span class="num">10</span> <span class="sym">*</span> d <span class="sym">*</span> z2<span class="sym">;</span>
	z0 <span class="sym">*=</span> <span class="num">10</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">Next</span><span class="sym">()</span>
    <span class="sym">{</span>
	<span class="kwb">int</span> d<span class="sym">;</span>
	<span class="kwa">while</span> <span class="sym">(</span>z0 <span class="sym">==</span> z2 <span class="sym">|| (</span>d <span class="sym">=</span> <span class="kwd">ExtractDigit</span><span class="sym">(</span><span class="num">3</span><span class="sym">)) !=</span> <span class="kwd">ExtractDigit</span><span class="sym">(</span><span class="num">4</span><span class="sym">))</span>
	    <span class="kwd">Compose_k</span><span class="sym">(++</span>k<span class="sym">);</span>
	<span class="kwd">Compose_d</span><span class="sym">(</span>d<span class="sym">);</span>
	<span class="kwa">return</span> d<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> BigInteger
<span class="sym">{</span>
    <span class="kwa">private</span> UBigInteger bi<span class="sym">;</span>
    <span class="kwa">private</span> <span class="kwb">int</span> sign <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">private static readonly</span> BigInteger zero <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">private</span> <span class="kwd">BigInteger</span> <span class="sym">() {}</span>

    <span class="kwa">public static implicit operator</span> <span class="kwd">BigInteger</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">)</span>
    <span class="sym">{</span>
	<span class="kwa">return new</span> <span class="kwd">BigInteger</span><span class="sym">(</span>i<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwd">BigInteger</span><span class="sym">(</span><span class="kwb">int</span> <span class="kwa">value</span><span class="sym">)</span>
    <span class="sym">{</span>
	<span class="kwa">if</span> <span class="sym">(</span><span class="kwa">value</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
	    sign <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">else if</span> <span class="sym">(</span><span class="kwa">value</span> <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">) {</span>
	    sign <span class="sym">= -</span><span class="num">1</span><span class="sym">;</span>
	    <span class="kwa">value</span> <span class="sym">= -</span><span class="kwa">value</span><span class="sym">;</span>
	<span class="sym">}</span>
	bi <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">UBigInteger</span><span class="sym">(</span><span class="kwa">value</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">IntValue</span><span class="sym">()</span>
    <span class="sym">{</span>
	<span class="kwa">return</span> sign <span class="sym">*</span> bi<span class="sym">.</span><span class="kwd">GetBytes</span><span class="sym">()[</span><span class="num">0</span><span class="sym">];</span>
    <span class="sym">}</span>

    <span class="kwa">public override</span> <span class="kwb">string</span> <span class="kwd">ToString</span> <span class="sym">()</span>
    <span class="sym">{</span>
	<span class="kwa">return</span> <span class="sym">(</span>sign <span class="sym">== -</span><span class="num">1</span> ? <span class="str">&quot;-&quot;</span> <span class="sym">:</span> <span class="str">&quot;&quot;</span><span class="sym">) +</span> bi<span class="sym">.</span><span class="kwd">ToString</span> <span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> BigInteger <span class="kwa">operator</span> <span class="sym">* (</span>BigInteger bi1<span class="sym">,</span> BigInteger bi2<span class="sym">)</span>
    <span class="sym">{</span>
	BigInteger ret <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">BigInteger</span><span class="sym">();</span>
	ret<span class="sym">.</span>bi <span class="sym">=</span> bi1<span class="sym">.</span>bi <span class="sym">*</span> bi2<span class="sym">.</span>bi<span class="sym">;</span>
	ret<span class="sym">.</span>sign <span class="sym">=</span> bi1<span class="sym">.</span>sign <span class="sym">*</span> bi2<span class="sym">.</span>sign<span class="sym">;</span>
	<span class="kwa">return</span> ret<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> BigInteger <span class="kwa">operator</span> <span class="sym">/ (</span>BigInteger bi1<span class="sym">,</span> BigInteger bi2<span class="sym">)</span>
    <span class="sym">{</span>
	BigInteger ret <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">BigInteger</span><span class="sym">();</span>
	ret<span class="sym">.</span>bi <span class="sym">=</span> bi1<span class="sym">.</span>bi <span class="sym">/</span> bi2<span class="sym">.</span>bi<span class="sym">;</span>
	ret<span class="sym">.</span>sign <span class="sym">=</span> bi1<span class="sym">.</span>sign <span class="sym">*</span> bi2<span class="sym">.</span>sign<span class="sym">;</span>
	<span class="kwa">return</span> ret<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> BigInteger <span class="kwa">operator</span> <span class="sym">+ (</span>BigInteger bi1<span class="sym">,</span> BigInteger bi2<span class="sym">)</span>
    <span class="sym">{</span>
	<span class="kwa">if</span> <span class="sym">(</span>bi1<span class="sym">.</span>sign <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
	    <span class="kwa">return</span> bi2<span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span>bi2<span class="sym">.</span>sign <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
	    <span class="kwa">return</span> bi1<span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span>bi1<span class="sym">.</span>sign <span class="sym">==</span> bi2<span class="sym">.</span>sign<span class="sym">) {</span>
	    BigInteger ret <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">BigInteger</span><span class="sym">();</span>
	    ret<span class="sym">.</span>bi <span class="sym">=</span> bi1<span class="sym">.</span>bi <span class="sym">+</span> bi2<span class="sym">.</span>bi<span class="sym">;</span>
	    ret<span class="sym">.</span>sign <span class="sym">=</span> bi1<span class="sym">.</span>sign<span class="sym">;</span>
	    <span class="kwa">return</span> ret<span class="sym">;</span>
	<span class="sym">}</span>


	<span class="kwa">if</span> <span class="sym">(</span>bi1<span class="sym">.</span>bi <span class="sym">==</span> bi2<span class="sym">.</span>bi<span class="sym">)</span>
	    <span class="kwa">return</span> zero<span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span>bi1<span class="sym">.</span>bi <span class="sym">&lt;</span> bi2<span class="sym">.</span>bi<span class="sym">) {</span>
	    BigInteger ret <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">BigInteger</span><span class="sym">();</span>
	    ret<span class="sym">.</span>bi <span class="sym">=</span> bi2<span class="sym">.</span>bi <span class="sym">-</span> bi1<span class="sym">.</span>bi<span class="sym">;</span>
	    ret<span class="sym">.</span>sign <span class="sym">=</span> bi2<span class="sym">.</span>sign<span class="sym">;</span>
	    <span class="kwa">return</span> ret<span class="sym">;</span>
	<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
	    BigInteger ret <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">BigInteger</span><span class="sym">();</span>
	    ret<span class="sym">.</span>bi <span class="sym">=</span> bi1<span class="sym">.</span>bi <span class="sym">-</span> bi2<span class="sym">.</span>bi<span class="sym">;</span>
	    ret<span class="sym">.</span>sign <span class="sym">= -</span><span class="num">1</span> <span class="sym">*</span> bi2<span class="sym">.</span>sign<span class="sym">;</span>
	    <span class="kwa">return</span> ret<span class="sym">;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
