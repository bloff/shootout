<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span><span class="dir">#include &lt;limits.h&gt;
</span>
<span class="kwb">static unsigned char</span> iubpairs<span class="sym">[][</span><span class="num">2</span><span class="sym">] = {
    {</span>    <span class="str">'A'</span><span class="sym">,</span>    <span class="str">'T'</span>    <span class="sym">},
    {</span>    <span class="str">'C'</span><span class="sym">,</span>    <span class="str">'G'</span>    <span class="sym">},
    {</span>    <span class="str">'B'</span><span class="sym">,</span>    <span class="str">'V'</span>    <span class="sym">},
    {</span>    <span class="str">'D'</span><span class="sym">,</span>    <span class="str">'H'</span>    <span class="sym">},
    {</span>    <span class="str">'K'</span><span class="sym">,</span>    <span class="str">'M'</span>    <span class="sym">},
    {</span>    <span class="str">'R'</span><span class="sym">,</span>    <span class="str">'Y'</span>    <span class="sym">},
    {</span>    <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span>   <span class="str">'</span><span class="esc">\0</span><span class="str">'</span>   <span class="sym">}
};

</span><span class="kwb">static unsigned char</span> iubComplement<span class="sym">[</span><span class="num">1</span><span class="sym">+</span>UCHAR_MAX<span class="sym">];

</span><span class="kwb">static void</span> buildIubComplement <span class="sym">(</span><span class="kwb">void</span><span class="sym">) {
</span>    <span class="kwb">int</span> i<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;=</span> UCHAR_MAX<span class="sym">;</span> i<span class="sym">++)</span> iubComplement<span class="sym">[</span>i<span class="sym">] = (</span><span class="kwb">unsigned char</span><span class="sym">)</span> i<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">0</span><span class="sym">] !=</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;</span> i<span class="sym">++) {
</span>    	iubComplement<span class="sym">[</span>iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">0</span><span class="sym">]] =</span> iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">1</span><span class="sym">];
</span>    	iubComplement<span class="sym">[</span>iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">1</span><span class="sym">]] =</span> iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">0</span><span class="sym">];
</span>    	iubComplement<span class="sym">[</span>tolower <span class="sym">(</span>iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">0</span><span class="sym">])] =</span> iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">1</span><span class="sym">];
</span>    	iubComplement<span class="sym">[</span>tolower <span class="sym">(</span>iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">1</span><span class="sym">])] =</span> iubpairs<span class="sym">[</span>i<span class="sym">][</span><span class="num">0</span><span class="sym">];
    }
}

</span><span class="kwb">static void</span> inPlaceReverse <span class="sym">(</span><span class="kwb">unsigned char</span> <span class="sym">*</span> strand<span class="sym">,</span> <span class="kwb">int</span> len<span class="sym">) {
</span>    <span class="kwb">int</span> i<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> len<span class="sym">--;</span> i <span class="sym">&lt;</span> len<span class="sym">;</span> i<span class="sym">++,</span>len<span class="sym">--) {
</span>    	<span class="kwb">unsigned char</span> c <span class="sym">=</span> strand<span class="sym">[</span>i<span class="sym">];
</span>    	strand<span class="sym">[</span>i<span class="sym">] =</span> iubComplement<span class="sym">[</span>strand<span class="sym">[</span>len<span class="sym">]];
</span>    	strand<span class="sym">[</span>len<span class="sym">] =</span> iubComplement<span class="sym">[</span>c<span class="sym">];
    }
</span>    <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> len<span class="sym">)</span> strand<span class="sym">[</span>i<span class="sym">] =</span> iubComplement<span class="sym">[</span>strand<span class="sym">[</span>i<span class="sym">]];
}

</span><span class="kwb">static void</span> process <span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span> strand<span class="sym">,</span> <span class="kwb">int</span> len<span class="sym">) {
</span>    <span class="kwb">char</span> <span class="sym">*</span> s<span class="sym">,</span> c<span class="sym">;

</span>    inPlaceReverse <span class="sym">((</span><span class="kwb">unsigned char</span> <span class="sym">*)</span> strand<span class="sym">,</span> len<span class="sym">);
</span>    s <span class="sym">=</span> strand<span class="sym">;

</span>    <span class="kwa">while</span> <span class="sym">(</span>len <span class="sym">&gt;</span> <span class="num">60</span><span class="sym">) {
</span>    	c <span class="sym">=</span> s<span class="sym">[</span><span class="num">60</span><span class="sym">];
</span>    	s<span class="sym">[</span><span class="num">60</span><span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span>    	puts <span class="sym">(</span>s<span class="sym">);
</span>    	s<span class="sym">[</span><span class="num">60</span><span class="sym">] =</span> c<span class="sym">;
</span>    	s <span class="sym">+=</span> <span class="num">60</span><span class="sym">;
</span>    	len <span class="sym">-=</span> <span class="num">60</span><span class="sym">;
    }

</span>    s<span class="sym">[</span>len<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span>    puts <span class="sym">(</span>s<span class="sym">);
}

</span><span class="kwb">int</span> main <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span> argv<span class="sym">[]) {
</span>    <span class="kwb">static char</span> buffer<span class="sym">[</span><span class="num">1024</span><span class="sym">];
</span>    <span class="kwb">char</span> <span class="sym">*</span> inp <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">*)</span> malloc <span class="sym">(</span><span class="num">129</span><span class="sym">);
</span>    <span class="kwb">int</span> mlen <span class="sym">=</span> <span class="num">128</span><span class="sym">;
</span>    <span class="kwb">int</span> slen <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>    buildIubComplement <span class="sym">();

</span>    <span class="kwa">while</span> <span class="sym">(</span>NULL <span class="sym">!=</span> fgets <span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">1023</span><span class="sym">,</span> stdin<span class="sym">)) {
</span>    	<span class="kwa">if</span> <span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span><span class="sym">) {
</span>    	    <span class="kwa">if</span> <span class="sym">(</span>slen <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>    	    	process <span class="sym">(</span>inp<span class="sym">,</span> slen<span class="sym">);
</span>    	    	slen <span class="sym">=</span> <span class="num">0</span><span class="sym">;
    	    }
</span>    	    printf <span class="sym">(</span><span class="str">&quot;%s&quot;</span><span class="sym">,</span> buffer<span class="sym">);
    	}</span> <span class="kwa">else</span> <span class="sym">{
</span>    	    <span class="kwb">int</span> l <span class="sym">=</span> strlen <span class="sym">(</span>buffer<span class="sym">);
</span>    	    <span class="kwa">while</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">&amp;&amp; !</span>isalpha <span class="sym">(</span>buffer<span class="sym">[</span>l<span class="num">-1</span><span class="sym">]))</span> l<span class="sym">--;
</span>    	    <span class="kwa">while</span> <span class="sym">(</span>slen <span class="sym">+</span> l <span class="sym">&gt;</span> mlen<span class="sym">) {
</span>    	    	mlen <span class="sym">+=</span> mlen<span class="sym">;
</span>    	    	inp <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">*)</span> realloc <span class="sym">(</span>inp<span class="sym">,</span> mlen <span class="sym">+</span> <span class="num">1</span><span class="sym">);
    	    }

</span>    	    memcpy <span class="sym">(</span>inp <span class="sym">+</span> slen<span class="sym">,</span> buffer<span class="sym">,</span> l<span class="sym">);
</span>    	    slen <span class="sym">+=</span> l<span class="sym">;
    	}
    }
</span>    <span class="kwa">if</span> <span class="sym">(</span>slen <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> process <span class="sym">(</span>inp<span class="sym">,</span> slen<span class="sym">);
</span>    free <span class="sym">(</span>inp<span class="sym">);
</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}
</span>
