#<span class="sym">!/</span>bin<span class="sym">/</span>bash
# <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}</span>
<span class="sym">[</span> \! <span class="sym">-</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;</span>
    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0</span>
exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="sym">!</span>#

<span class="slc">;;; $Id: ackermann-rep.code,v 1.6 2006-09-20 05:50:59 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()</span>
  <span class="sym">(</span><span class="kwa">open</span> rep rep.system<span class="sym">)</span>

  <span class="sym">(</span>define <span class="sym">(</span>ack M N<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((=</span> M <span class="num">0</span><span class="sym">) (+</span> N <span class="num">1</span><span class="sym">))</span>
	  <span class="sym">((=</span> N <span class="num">0</span><span class="sym">) (</span>ack <span class="sym">(-</span> M <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
	  <span class="sym">(</span>t <span class="sym">(</span>ack <span class="sym">(-</span> M <span class="num">1</span><span class="sym">) (</span>ack M <span class="sym">(-</span> N <span class="num">1</span><span class="sym">))))))</span>

  <span class="sym">(</span>let<span class="sym">* ((</span>arg <span class="sym">(</span>get<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>option <span class="str">&quot;--num&quot;</span> t<span class="sym">))</span>
	 <span class="sym">(</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>from<span class="sym">-</span>string arg<span class="sym">)</span> <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">max</span><span class="sym">-</span>lisp<span class="sym">-</span>depth <span class="num">2500</span><span class="sym">)</span>
    <span class="sym">(</span>format standard<span class="sym">-</span>output <span class="str">&quot;Ack(3,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span> n <span class="sym">(</span>ack <span class="num">3</span> n<span class="sym">))))</span>
