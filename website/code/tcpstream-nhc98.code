<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org
</span><span class="slc">-- tcp-stream benchmark
</span><span class="slc">-- contributed by: Kurt Hutchinson
</span>
<span class="kwa">import</span> Foreign
<span class="kwa">import</span> Foreign.C
<span class="kwa">import</span> Network
<span class="kwa">import</span> System.Environment
<span class="kwa">import</span> System.IO
<span class="kwa">import</span> System.Posix.Process

m <span class="sym">=</span> <span class="num">1
</span>replySize <span class="sym">=</span> <span class="num">409600

</span>hostname <span class="sym">=</span> <span class="str">&quot;localhost&quot;</span>
port <span class="sym">=</span> PortNumber <span class="num">12345

</span>main <span class="sym">::</span> IO <span class="sym">()
</span>main <span class="sym">=</span> withSocketsDo $ <span class="kwa">do
</span>    args <span class="sym">&lt;-</span> getArgs
    <span class="kwa">let</span> n <span class="sym">=</span> if null args
                <span class="kwa">then</span> <span class="num">10
</span>                <span class="kwa">else</span> read $ head args

    sock <span class="sym">&lt;-</span> listenOn port
    forkProcess $ client n
    server sock


<span class="slc">-- Server
</span>server <span class="sym">::</span> Socket <span class="sym">-&gt;</span> IO <span class="sym">()
</span>server sock <span class="sym">=</span> <span class="kwa">do
</span>    <span class="sym">(</span>hdl<span class="sym">,</span>_<span class="sym">,</span>_<span class="sym">) &lt;-</span> accept sock
    hSetBuffering hdl NoBuffering
    withCStringLen <span class="sym">(</span>replicate replySize <span class="str">'x'</span><span class="sym">)</span> $ \reply <span class="sym">-&gt;</span> <span class="kwa">do
</span>        replyLoop hdl reply

replyLoop <span class="sym">::</span> Handle <span class="sym">-&gt;</span> CStringLen <span class="sym">-&gt;</span> IO <span class="sym">()
</span>replyLoop hdl reply&#64;<span class="sym">(</span>str<span class="sym">,</span>len<span class="sym">) =</span> <span class="kwa">do
</span>    eof <span class="sym">&lt;-</span> hIsEOF hdl
    if eof
        <span class="kwa">then</span> return <span class="sym">()
</span>        <span class="kwa">else do
</span>            hGetChar hdl
            hPutBuf hdl str len
            replyLoop hdl reply


<span class="slc">-- Client
</span>client <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">()
</span>client n <span class="sym">=</span> <span class="kwa">do

</span>    hdl <span class="sym">&lt;-</span> connectTo hostname port
    hSetBuffering hdl NoBuffering

    <span class="kwa">let</span> iterations <span class="sym">=</span> m <span class="sym">*</span> n
    <span class="sym">(</span>Accum remaining bytes<span class="sym">) &lt;-</span> requestLoop hdl <span class="sym">(</span>Accum iterations <span class="num">0</span><span class="sym">)

</span>    <span class="kwa">let</span> replies <span class="sym">=</span> iterations <span class="sym">-</span> remaining
    putStrLn <span class="sym">(</span><span class="str">&quot;replies: &quot;</span> <span class="sym">++</span> show replies <span class="sym">++</span> <span class="str">&quot;\tbytes: &quot;</span> <span class="sym">++</span> show bytes<span class="sym">)


</span><span class="slc">-- Strict data type to keep memory use low
</span><span class="kwa">data</span> Accum <span class="sym">=</span> Accum <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int

</span>requestLoop <span class="sym">::</span> Handle <span class="sym">-&gt;</span> Accum <span class="sym">-&gt;</span> IO Accum
requestLoop _   <span class="sym">(</span>Accum <span class="num">0</span> bytes<span class="sym">) =</span> return $ Accum <span class="num">0</span> bytes
requestLoop hdl <span class="sym">(</span>Accum n bytes<span class="sym">) =</span> <span class="kwa">do
</span>    hPutChar hdl <span class="str">'x'</span>
    newbytes <span class="sym">&lt;-</span> allocaBytes replySize $ \buf <span class="sym">-&gt;</span> hGetBuf hdl buf replySize
    requestLoop hdl $ Accum <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">) (</span>bytes <span class="sym">+</span> newbytes<span class="sym">)</span>
