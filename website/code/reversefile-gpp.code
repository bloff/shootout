<span class="line">    1 </span><span class="slc">// -*- mode: c++ -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// $Id: reversefile-gpp.code,v 1.4 2004-11-13 07:42:42 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">//
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">// Based on the C version by Alan Post &lt;apost&#64;recalcitrant.org&gt;
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">// C++-ified by Brent Fulgham, based on an idea by Mark Fitzgerald
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="dir">#include &lt;assert.h&gt;
</span><span class="line">    9 </span><span class="dir"></span><span class="dir">#include &lt;sys/uio.h&gt;
</span><span class="line">   10 </span><span class="dir"></span><span class="dir">#include &lt;iostream&gt;
</span><span class="line">   11 </span><span class="dir"></span>
<span class="line">   12 </span><span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span><span class="slc">//
</span><span class="line">   15 </span><span class="slc"></span><span class="slc">// Note that malloc(3) seems happier with chunks of 4096
</span><span class="line">   16 </span><span class="slc"></span><span class="slc">//
</span><span class="line">   17 </span><span class="slc"></span><span class="kwb">const int</span> MAXREAD <span class="sym">= (</span><span class="num">4096</span> <span class="sym">-</span> <span class="kwa">sizeof</span><span class="sym">(</span> <span class="kwb">size_t</span> <span class="sym">) -</span> <span class="kwa">sizeof</span><span class="sym">(</span> <span class="kwb">void</span><span class="sym">* ));
</span><span class="line">   18 </span><span class="sym">
</span><span class="line">   19 </span><span class="sym"></span><span class="kwb">struct</span> buf_t
<span class="line">   20 </span><span class="sym">{
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwb">char</span> d<span class="sym">[</span>MAXREAD<span class="sym">];
</span><span class="line">   22 </span><span class="sym"></span>    <span class="kwb">size_t</span> len<span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>    buf_t <span class="sym">*</span>next<span class="sym">;
</span><span class="line">   24 </span><span class="sym">};
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span><span class="kwb">static</span> buf_t<span class="sym">*</span> read_lines<span class="sym">(</span> buf_t<span class="sym">*</span> tail <span class="sym">)
</span><span class="line">   27 </span><span class="sym">{
</span><span class="line">   28 </span><span class="sym"></span>    buf_t<span class="sym">*</span> curr <span class="sym">=</span> tail<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>    tail<span class="sym">-&gt;</span>next <span class="sym">=</span> NULL<span class="sym">;
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span> <span class="kwa">true</span> <span class="sym">)
</span><span class="line">   32 </span><span class="sym">    {
</span><span class="line">   33 </span><span class="sym"></span>        cin<span class="sym">.</span>read<span class="sym">(</span>curr<span class="sym">-&gt;</span>d<span class="sym">,</span> MAXREAD <span class="sym">);
</span><span class="line">   34 </span><span class="sym"></span>        <span class="kwb">int</span> nread <span class="sym">=</span> cin<span class="sym">.</span>gcount<span class="sym">();
</span><span class="line">   35 </span><span class="sym"></span>        curr<span class="sym">-&gt;</span>len <span class="sym">=</span> nread<span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span> nread <span class="sym">&lt;</span> MAXREAD <span class="sym">) {</span> <span class="kwa">return</span> curr<span class="sym">; }
</span><span class="line">   37 </span><span class="sym"></span>        buf_t<span class="sym">*</span> head <span class="sym">=</span> <span class="kwa">new</span> buf_t<span class="sym">;
</span><span class="line">   38 </span><span class="sym"></span>        head<span class="sym">-&gt;</span>next <span class="sym">=</span> curr<span class="sym">;
</span><span class="line">   39 </span><span class="sym"></span>        curr <span class="sym">=</span> head<span class="sym">;
</span><span class="line">   40 </span><span class="sym">    }
</span><span class="line">   41 </span><span class="sym">}
</span><span class="line">   42 </span><span class="sym">
</span><span class="line">   43 </span><span class="sym"></span><span class="dir">#define WRITEOUT( p_, l_ ) \
</span><span class="line">   44 </span><span class="dir">        do { \
</span><span class="line">   45 </span><span class="dir">            vec[ ivec ].iov_base = (char*) (p_); \
</span><span class="line">   46 </span><span class="dir">            vec[ ivec ].iov_len = (int) (l_); \
</span><span class="line">   47 </span><span class="dir">            ivec++; \
</span><span class="line">   48 </span><span class="dir">            if ( ivec == IOV_MAX ) \
</span><span class="line">   49 </span><span class="dir">            { \
</span><span class="line">   50 </span><span class="dir">                writev( STDOUT_FILENO, vec, ivec ); \
</span><span class="line">   51 </span><span class="dir">                ivec = 0; \
</span><span class="line">   52 </span><span class="dir">            } \
</span><span class="line">   53 </span><span class="dir">        } while (0)
</span><span class="line">   54 </span><span class="dir"></span>
<span class="line">   55 </span><span class="dir">#define LINEOUT \
</span><span class="line">   56 </span><span class="dir">        do { \
</span><span class="line">   57 </span><span class="dir">            WRITEOUT( pos, end - pos); \
</span><span class="line">   58 </span><span class="dir">            for (; loh != NULL; loh = loh-&gt;next ) \
</span><span class="line">   59 </span><span class="dir">                WRITEOUT( loh-&gt;d, loh-&gt;len ); \
</span><span class="line">   60 </span><span class="dir">        } while (0)
</span><span class="line">   61 </span><span class="dir"></span>
<span class="line">   62 </span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[])
</span><span class="line">   63 </span><span class="sym">{
</span><span class="line">   64 </span><span class="sym"></span>    buf_t tail<span class="sym">;
</span><span class="line">   65 </span><span class="sym"></span>    buf_t<span class="sym">*</span> head <span class="sym">=</span> read_lines<span class="sym">( &amp;</span>tail <span class="sym">);
</span><span class="line">   66 </span><span class="sym">
</span><span class="line">   67 </span><span class="sym"></span>    buf_t<span class="sym">*</span> loh <span class="sym">=</span> NULL<span class="sym">;
</span><span class="line">   68 </span><span class="sym"></span>    buf_t<span class="sym">*</span> curr <span class="sym">=</span> head<span class="sym">;
</span><span class="line">   69 </span><span class="sym">
</span><span class="line">   70 </span><span class="sym"></span>    <span class="kwb">struct</span> iovec vec<span class="sym">[</span> IOV_MAX <span class="sym">];
</span><span class="line">   71 </span><span class="sym"></span>    <span class="kwb">size_t</span> ivec <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   72 </span><span class="sym">
</span><span class="line">   73 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span> <span class="kwa">true</span> <span class="sym">)
</span><span class="line">   74 </span><span class="sym">    {
</span><span class="line">   75 </span><span class="sym"></span>        <span class="kwb">char</span><span class="sym">*</span> buf <span class="sym">=</span> curr<span class="sym">-&gt;</span>d<span class="sym">;
</span><span class="line">   76 </span><span class="sym"></span>        <span class="kwb">char</span><span class="sym">*</span> end <span class="sym">=</span> buf <span class="sym">+</span> curr<span class="sym">-&gt;</span>len<span class="sym">;
</span><span class="line">   77 </span><span class="sym"></span>        <span class="kwb">char</span><span class="sym">*</span> pos <span class="sym">=</span> end<span class="sym">;
</span><span class="line">   78 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(;;</span> pos<span class="sym">--)
</span><span class="line">   79 </span><span class="sym">        {
</span><span class="line">   80 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span> pos <span class="sym">&lt;=</span> buf <span class="sym">)
</span><span class="line">   81 </span><span class="sym">            {
</span><span class="line">   82 </span><span class="sym"></span>                buf_t<span class="sym">*</span> new_curr <span class="sym">=</span> curr<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">   83 </span><span class="sym">
</span><span class="line">   84 </span><span class="sym"></span>                <span class="kwa">if</span> <span class="sym">(</span> new_curr <span class="sym">==</span> NULL <span class="sym">)
</span><span class="line">   85 </span><span class="sym">                {
</span><span class="line">   86 </span><span class="sym"></span>                    LINEOUT<span class="sym">;
</span><span class="line">   87 </span><span class="sym"></span>                    writev<span class="sym">(</span> STDOUT_FILENO<span class="sym">,</span> vec<span class="sym">,</span> ivec <span class="sym">);
</span><span class="line">   88 </span><span class="sym"></span>                    <span class="kwa">return</span> EXIT_SUCCESS<span class="sym">;
</span><span class="line">   89 </span><span class="sym">                }
</span><span class="line">   90 </span><span class="sym">
</span><span class="line">   91 </span><span class="sym"></span>                curr<span class="sym">-&gt;</span>len <span class="sym">=</span> end <span class="sym">-</span> buf<span class="sym">;
</span><span class="line">   92 </span><span class="sym"></span>                curr<span class="sym">-&gt;</span>next <span class="sym">=</span> loh<span class="sym">;
</span><span class="line">   93 </span><span class="sym"></span>                loh <span class="sym">=</span> curr<span class="sym">;
</span><span class="line">   94 </span><span class="sym">
</span><span class="line">   95 </span><span class="sym"></span>                curr <span class="sym">=</span> new_curr<span class="sym">;
</span><span class="line">   96 </span><span class="sym"></span>                <span class="kwa">break</span><span class="sym">;
</span><span class="line">   97 </span><span class="sym">            }
</span><span class="line">   98 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">( *(</span>pos<span class="num">-1</span><span class="sym">) ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">)
</span><span class="line">   99 </span><span class="sym">            {
</span><span class="line">  100 </span><span class="sym"></span>                LINEOUT<span class="sym">;
</span><span class="line">  101 </span><span class="sym"></span>                end <span class="sym">=</span> pos<span class="sym">;
</span><span class="line">  102 </span><span class="sym">            }
</span><span class="line">  103 </span><span class="sym">        }
</span><span class="line">  104 </span><span class="sym">    }
</span><span class="line">  105 </span><span class="sym"></span>    assert<span class="sym">(</span> NULL <span class="sym">==</span> <span class="str">&quot;unreachable&quot;</span> <span class="sym">);
</span><span class="line">  106 </span><span class="sym"></span>    <span class="kwa">return</span> EXIT_FAILURE<span class="sym">;
</span><span class="line">  107 </span><span class="sym">}
</span><span class="line">  108 </span><span class="sym"></span>
