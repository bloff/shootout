<span class="slc">#!/usr/bin/python
</span><span class="slc"># $Id: prodcons-python.code,v 1.6 2005-04-04 14:56:54 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span>
<span class="kwc">import</span> sys
<span class="kwc">from</span> threading <span class="kwc">import</span> <span class="sym">*

</span>access <span class="sym">=</span> Condition<span class="sym">()
</span>count <span class="sym">=</span> <span class="num">0
</span>consumed <span class="sym">=</span> <span class="num">0
</span>produced <span class="sym">=</span> <span class="num">0
</span>data <span class="sym">=</span> <span class="num">0

</span><span class="kwb">def</span> consumer<span class="sym">(</span>n<span class="sym">):
</span>    <span class="kwa">global</span> count<span class="sym">,</span> data<span class="sym">,</span> consumed
    <span class="kwb">while</span> <span class="num">1</span><span class="sym">:
</span>        access<span class="sym">.</span>acquire<span class="sym">()
</span>        <span class="kwb">while</span> count <span class="sym">==</span> <span class="num">0</span><span class="sym">:
</span>            access<span class="sym">.</span>wait<span class="sym">()
</span>        i <span class="sym">=</span> data
        count <span class="sym">=</span> <span class="num">0
</span>        access<span class="sym">.</span>notify<span class="sym">()
</span>        access<span class="sym">.</span>release<span class="sym">()
</span>        consumed <span class="sym">+=</span> <span class="num">1
</span>        <span class="kwb">if</span> i <span class="sym">==</span> n<span class="sym">:
</span>            <span class="kwb">break

def</span> producer<span class="sym">(</span>n<span class="sym">):
</span>    <span class="kwa">global</span> count<span class="sym">,</span> data<span class="sym">,</span> produced
    <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">):
</span>        access<span class="sym">.</span>acquire<span class="sym">()
</span>        <span class="kwb">while</span> count <span class="sym">==</span> <span class="num">1</span><span class="sym">:
</span>            access<span class="sym">.</span>wait<span class="sym">()
</span>        data <span class="sym">=</span> i
        count <span class="sym">=</span> <span class="num">1
</span>        access<span class="sym">.</span>notify<span class="sym">()
</span>        access<span class="sym">.</span>release<span class="sym">()
</span>        produced <span class="sym">+=</span> <span class="num">1

</span><span class="kwb">def</span> main<span class="sym">(</span>n<span class="sym">):
</span>    t1 <span class="sym">=</span> Thread<span class="sym">(</span>target<span class="sym">=</span>producer<span class="sym">,</span> args<span class="sym">=(</span>n<span class="sym">,))
</span>    t2 <span class="sym">=</span> Thread<span class="sym">(</span>target<span class="sym">=</span>consumer<span class="sym">,</span> args<span class="sym">=(</span>n<span class="sym">,))
</span>    t1<span class="sym">.</span>start<span class="sym">()
</span>    t2<span class="sym">.</span>start<span class="sym">()
</span>    t1<span class="sym">.</span>join<span class="sym">()
</span>    t2<span class="sym">.</span>join<span class="sym">()
</span>    <span class="kwb">print</span> produced<span class="sym">,</span> consumed

main<span class="sym">(</span><span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]))

</span>
