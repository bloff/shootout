<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Algorithm (written in C#) contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   Converted to and optimized for D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release knucleotide.d</span>
<span class="com">*/</span>

import std<span class="sym">.</span>outbuffer<span class="sym">,</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwb">int</span> main<span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwb">char</span><span class="sym">[</span><span class="num">4096</span><span class="sym">]</span>      bufr<span class="sym">;</span>
    <span class="kwb">bool</span>            flag <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
    OutBuffer       ob <span class="sym">=</span> <span class="kwa">new</span> OutBuffer<span class="sym">();</span>

    <span class="slc">// extract nucleotide sequence</span>
    <span class="kwa">while</span><span class="sym">(</span>fgets<span class="sym">(</span>bufr<span class="sym">,</span>bufr<span class="sym">.</span>length<span class="sym">,</span>stdin<span class="sym">))</span>
    <span class="sym">{</span>
        <span class="kwb">char</span><span class="sym">[]</span> line <span class="sym">=</span> toString<span class="sym">(</span>bufr<span class="sym">);</span>
        <span class="kwa">if</span><span class="sym">(</span>line<span class="sym">.</span>length<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(!</span>flag<span class="sym">)</span>
            <span class="sym">{</span>
                flag <span class="sym">= !</span>icmp<span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">.</span><span class="num">.6</span><span class="sym">],</span><span class="str">&quot;&gt;THREE&quot;</span><span class="sym">);</span>
                <span class="kwa">continue</span><span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">else</span>
            <span class="sym">{</span>
                <span class="kwb">char</span> c <span class="sym">=</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
                <span class="kwa">if</span><span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
                <span class="kwa">else if</span><span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)</span> ob<span class="sym">.</span>write<span class="sym">(</span>toupper<span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">..</span>length<span class="sym">-</span><span class="num">1</span><span class="sym">]));</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="slc">// calculate nucleotide frequencies</span>
    KNucleotide kn <span class="sym">=</span> <span class="kwa">new</span> KNucleotide<span class="sym">(</span>ob<span class="sym">.</span>toString<span class="sym">());</span>
    kn<span class="sym">.</span>WriteFrequencies<span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    kn<span class="sym">.</span>WriteFrequencies<span class="sym">(</span><span class="num">2</span><span class="sym">);</span>

    kn<span class="sym">.</span>WriteCount<span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">);</span>
    kn<span class="sym">.</span>WriteCount<span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">);</span>
    kn<span class="sym">.</span>WriteCount<span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">);</span>
    kn<span class="sym">.</span>WriteCount<span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);</span>
    kn<span class="sym">.</span>WriteCount<span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwc">class</span> KNucleotide <span class="sym">{</span>
<span class="kwc">private</span><span class="sym">:</span>
    <span class="kwb">char</span><span class="sym">[]</span>          sequence<span class="sym">;</span>
    <span class="kwb">int</span><span class="sym">[</span><span class="kwb">char</span><span class="sym">[]]</span>     frequencies<span class="sym">;</span>
    <span class="kwb">int</span>             k<span class="sym">;</span>

<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">[]</span> s<span class="sym">)</span>
    <span class="sym">{</span>
        sequence <span class="sym">=</span> s<span class="sym">;</span>
        k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">void</span> WriteFrequencies<span class="sym">(</span><span class="kwb">int</span> nucleotideLength<span class="sym">)</span>
    <span class="sym">{</span>
        GenerateFrequencies<span class="sym">(</span>nucleotideLength<span class="sym">);</span>

        <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        foreach<span class="sym">(</span><span class="kwb">char</span><span class="sym">[]</span> key<span class="sym">,</span> <span class="kwb">int</span> val<span class="sym">;</span> frequencies<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>key<span class="sym">.</span>length <span class="sym">==</span> nucleotideLength<span class="sym">)</span> sum <span class="sym">+=</span> val<span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwb">int</span> last <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
        foreach<span class="sym">(</span><span class="kwb">int</span> vsr<span class="sym">;</span> frequencies<span class="sym">.</span>values<span class="sym">.</span>sort<span class="sym">.</span>reverse<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>vsr <span class="sym">!=</span> last<span class="sym">)</span>
            <span class="sym">{</span>
                foreach<span class="sym">(</span><span class="kwb">char</span><span class="sym">[]</span> key<span class="sym">,</span> <span class="kwb">int</span> val<span class="sym">;</span> frequencies<span class="sym">)</span>
                <span class="sym">{</span>
                    <span class="kwa">if</span><span class="sym">(</span>key<span class="sym">.</span>length <span class="sym">==</span> nucleotideLength<span class="sym">)</span>
                    <span class="sym">{</span>
                        <span class="kwb">double</span> ratio <span class="sym">=</span> sum ? val <span class="sym">/</span> cast<span class="sym">(</span><span class="kwb">double</span><span class="sym">)</span>sum <span class="sym">:</span> <span class="num">0</span><span class="sym">;</span>
                        <span class="kwa">if</span><span class="sym">(</span>val <span class="sym">==</span> vsr<span class="sym">)</span> std<span class="sym">.</span>stdio<span class="sym">.</span>writefln<span class="sym">(</span>key<span class="sym">,</span><span class="str">&quot; %2.3f&quot;</span><span class="sym">,</span>ratio <span class="sym">*</span> <span class="num">100.0</span><span class="sym">);</span>
                    <span class="sym">}</span>
                <span class="sym">}</span>
                last <span class="sym">=</span> vsr<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        std<span class="sym">.</span>stdio<span class="sym">.</span>writefln<span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwb">void</span> WriteCount<span class="sym">(</span><span class="kwb">char</span><span class="sym">[]</span> nucleotideFragment<span class="sym">)</span>
    <span class="sym">{</span>
        GenerateFrequencies<span class="sym">(</span>nucleotideFragment<span class="sym">.</span>length<span class="sym">);</span>
        <span class="kwb">int</span> count <span class="sym">=</span> frequencies<span class="sym">[</span>nucleotideFragment<span class="sym">];</span>
        std<span class="sym">.</span>stdio<span class="sym">.</span>writefln<span class="sym">(</span>count<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span><span class="sym">,</span>nucleotideFragment<span class="sym">);</span>
    <span class="sym">}</span>

<span class="kwc">private</span><span class="sym">:</span>
    <span class="kwb">void</span> GenerateFrequencies<span class="sym">(</span><span class="kwb">int</span> length<span class="sym">)</span>
    <span class="sym">{</span>
        k <span class="sym">=</span> length<span class="sym">;</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> frame <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> frame <span class="sym">&lt;</span> k<span class="sym">;</span> frame<span class="sym">++)</span> KFrequency<span class="sym">(</span>frame<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwb">void</span> KFrequency<span class="sym">(</span><span class="kwb">int</span> readingFrame<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwb">int</span> n <span class="sym">=</span> sequence<span class="sym">.</span>length <span class="sym">-</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> readingFrame<span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i <span class="sym">+=</span> k<span class="sym">)</span>
        <span class="sym">{</span>
            frequencies<span class="sym">[</span>sequence<span class="sym">[</span>i<span class="sym">..</span>i<span class="sym">+</span>k<span class="sym">]]++;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
