<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Josh Goldfoot</span>
<span class="com"></span>
<span class="com">   Converted to D by Dave Fladebo</span>
<span class="com">   Modified to use built-in associative arrays by Jascha Wetzel</span>
<span class="com">   compile: dmd -O -inline -release knucleotide.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">,</span> std<span class="sym">.</span>c<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwa">char</span><span class="sym">[]</span> line <span class="sym">=</span> <span class="kwa">new char</span><span class="sym">[</span><span class="num">256</span><span class="sym">];</span>
    <span class="kwa">while</span><span class="sym">(</span><span class="kwd">fgets</span><span class="sym">(</span>line<span class="sym">.</span>ptr<span class="sym">,</span> <span class="num">256</span><span class="sym">,</span> stdin<span class="sym">))</span>
        <span class="kwa">if</span><span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span> <span class="sym">&amp;&amp;</span> line<span class="sym">[</span><span class="num">1</span><span class="sym">] ==</span> <span class="str">'T'</span> <span class="sym">&amp;&amp;</span> line<span class="sym">[</span><span class="num">2</span><span class="sym">] ==</span> <span class="str">'H'</span><span class="sym">)</span>
            <span class="kwa">break</span><span class="sym">;</span>

    <span class="kwa">char</span><span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new char</span><span class="sym">[</span><span class="num">1024</span><span class="sym">];</span>
    <span class="kwa">char</span><span class="sym">[]</span> x <span class="sym">=</span> buffer<span class="sym">;</span>

    size_t seqlen <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span><span class="sym">(</span><span class="kwd">fgets</span><span class="sym">(</span>x<span class="sym">.</span>ptr<span class="sym">,</span> <span class="num">256</span><span class="sym">,</span> stdin<span class="sym">))</span>
    <span class="sym">{</span>
        size_t linelen <span class="sym">=</span> <span class="kwd">strlen</span><span class="sym">(</span>x<span class="sym">.</span>ptr<span class="sym">);</span>
        <span class="kwa">if</span><span class="sym">(</span>linelen<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>x<span class="sym">[</span>linelen <span class="sym">-</span> <span class="num">1</span><span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span>
	        linelen<span class="sym">--;</span>
	    <span class="kwa">char</span> c <span class="sym">=</span> x<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
	    <span class="kwa">if</span><span class="sym">(</span>c <span class="sym">==</span> <span class="str">'&gt;'</span><span class="sym">)</span>
            <span class="sym">{</span>
                <span class="kwa">break</span><span class="sym">;</span>
            <span class="sym">}</span>
	    <span class="kwa">else if</span><span class="sym">(</span>c <span class="sym">!=</span> <span class="str">';'</span><span class="sym">)</span>
	    <span class="sym">{</span>
	        seqlen <span class="sym">+=</span> linelen<span class="sym">;</span>
	        <span class="kwa">if</span><span class="sym">(</span>seqlen <span class="sym">+</span> <span class="num">512</span> <span class="sym">&gt;=</span> buffer<span class="sym">.</span>length<span class="sym">)</span>
	        <span class="sym">{</span>
                    buffer<span class="sym">.</span>length <span class="sym">=</span> buffer<span class="sym">.</span>length <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span>
		    x <span class="sym">=</span> buffer<span class="sym">[</span>seqlen <span class="sym">..</span> $<span class="sym">];</span>
		<span class="sym">}</span>
	        <span class="kwa">else</span>
		    x <span class="sym">=</span> x<span class="sym">[</span>linelen <span class="sym">..</span> $<span class="sym">];</span>
	        x<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
	    <span class="sym">}</span>
         <span class="sym">}</span>
      <span class="sym">}</span>

    buffer <span class="sym">=</span> <span class="kwd">toupper</span><span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span> <span class="sym">..</span> seqlen<span class="sym">]);</span>

    <span class="kwd">writeFrequency</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> buffer<span class="sym">);</span>
    <span class="kwd">writeFrequency</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> buffer<span class="sym">);</span>
    <span class="kwd">writeCount</span><span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">,</span> buffer<span class="sym">);</span>
    <span class="kwd">writeCount</span><span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">,</span> buffer<span class="sym">);</span>
    <span class="kwd">writeCount</span><span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">,</span> buffer<span class="sym">);</span>
    <span class="kwd">writeCount</span><span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">,</span> buffer<span class="sym">);</span>
    <span class="kwd">writeCount</span><span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">,</span> buffer<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">int</span><span class="sym">[</span><span class="kwa">char</span><span class="sym">[]]</span> <span class="kwd">genFrequency</span><span class="sym">(</span><span class="kwa">int</span> keyLen<span class="sym">,</span> <span class="kwa">char</span><span class="sym">[]</span> buffer<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">if</span><span class="sym">(</span>keyLen <span class="sym">&gt;</span> buffer<span class="sym">.</span>length<span class="sym">)</span>
        <span class="kwa">return null</span><span class="sym">;</span>

    <span class="kwa">int</span><span class="sym">[</span><span class="kwa">char</span><span class="sym">[]]</span> ht<span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> buffer<span class="sym">.</span>length <span class="sym">-</span> keyLen <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
          <span class="sym">++</span>ht<span class="sym">[</span>buffer<span class="sym">[</span>i <span class="sym">..</span> i <span class="sym">+</span> keyLen<span class="sym">]];</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> ht<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">writeFrequency</span><span class="sym">(</span><span class="kwa">int</span> keyLen<span class="sym">,</span> <span class="kwa">char</span><span class="sym">[]</span> buffer<span class="sym">)</span>
<span class="sym">{</span>
    size_t total <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> size <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">int</span><span class="sym">[</span><span class="kwa">char</span><span class="sym">[]]</span> ht <span class="sym">=</span> <span class="kwd">genFrequency</span><span class="sym">(</span>keyLen<span class="sym">,</span> buffer<span class="sym">);</span>
    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">int</span> v<span class="sym">;</span> ht<span class="sym">.</span>values<span class="sym">)</span>
    <span class="sym">{</span>
        total <span class="sym">+=</span> v<span class="sym">;</span>
        size<span class="sym">++;</span>
    <span class="sym">}</span>

    size_t si <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">struct</span> sorter
    <span class="sym">{</span>
        <span class="kwa">char</span><span class="sym">[]</span> string<span class="sym">;</span>
        size_t num<span class="sym">;</span>
    <span class="sym">}</span>
    sorter<span class="sym">[]</span> s <span class="sym">=</span> <span class="kwa">new</span> sorter<span class="sym">[</span>size<span class="sym">];</span>
    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> k<span class="sym">;</span> ht<span class="sym">.</span>keys<span class="sym">)</span>
    <span class="sym">{</span>
        s<span class="sym">[</span>si<span class="sym">].</span>string <span class="sym">=</span> k<span class="sym">;</span>
        s<span class="sym">[</span>si<span class="sym">].</span>num <span class="sym">=</span> ht<span class="sym">[</span>k<span class="sym">];</span>
        si<span class="sym">++;</span>
    <span class="sym">}</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> size <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;</span> size<span class="sym">;</span> j<span class="sym">++)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span>s<span class="sym">[</span>i<span class="sym">].</span>num <span class="sym">&lt;</span> s<span class="sym">[</span>j<span class="sym">].</span>num<span class="sym">)</span>
	    <span class="sym">{</span>
	        sorter tmp <span class="sym">=</span> s<span class="sym">[</span>i<span class="sym">];</span>
                s<span class="sym">[</span>i<span class="sym">..</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">] =</span> s<span class="sym">[</span>j<span class="sym">..</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
                s<span class="sym">[</span>j<span class="sym">] =</span> tmp<span class="sym">;</span>
	    <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> size<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;%s %.3f&quot;</span><span class="sym">,</span> s<span class="sym">[</span>i<span class="sym">].</span>string<span class="sym">,</span> <span class="num">100</span> <span class="sym">*</span> s<span class="sym">[</span>i<span class="sym">].</span>num <span class="sym">/</span> <span class="kwa">cast</span><span class="sym">(</span><span class="kwa">float</span><span class="sym">)</span>total<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwd">writefln</span><span class="sym">();</span>
<span class="sym">}</span>

<span class="kwa">void</span> <span class="kwd">writeCount</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> searchFor<span class="sym">,</span> <span class="kwa">char</span><span class="sym">[]</span> buffer<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span><span class="sym">[</span><span class="kwa">char</span><span class="sym">[]]</span> ht <span class="sym">=</span> <span class="kwd">genFrequency</span><span class="sym">(</span>searchFor<span class="sym">.</span>length<span class="sym">,</span> buffer<span class="sym">);</span>
	<span class="kwa">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">(</span> searchFor <span class="kwa">in</span> ht <span class="sym">)</span>
		count <span class="sym">=</span> ht<span class="sym">[</span>searchFor<span class="sym">];</span>
    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\t</span><span class="str">%s&quot;</span><span class="sym">,</span> count<span class="sym">,</span> searchFor<span class="sym">);</span>
<span class="sym">}</span>
