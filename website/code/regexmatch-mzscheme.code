#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">;;; $Id: regexmatch-mzscheme.code,v 1.5 2006-01-22 21:55:35 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; Based on the Chicken implementation</span>
<span class="slc">;;; Contributed by Brent Fulgham</span>
<span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;match.ss&quot;</span><span class="sym">))</span>

<span class="sym">(</span>define rx
  <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span>
   <span class="str">&quot;(^|[^0-9</span><span class="esc">\\</span><span class="str">(])&quot;</span>                      <span class="slc">; (1) preceeding non-digit or bol</span>
   <span class="str">&quot;(&quot;</span>                                  <span class="slc">; (2) area code</span>
   <span class="str">&quot;</span><span class="esc">\\</span><span class="str">(([0-9][0-9][0-9])</span><span class="esc">\\</span><span class="str">)&quot;</span>            <span class="slc">; (3) is either 3 digits in parens</span>
   <span class="str">&quot;|&quot;</span>                                  <span class="slc">; or</span>
   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>                  <span class="slc">; (4) just 3 digits</span>
   <span class="str">&quot;)&quot;</span>                                  <span class="slc">; end of area code</span>
   <span class="str">&quot; &quot;</span>                                  <span class="slc">; area code is followed by one space</span>
   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>                  <span class="slc">; (5) exchange is 3 digits</span>
   <span class="str">&quot;[ -]&quot;</span>                               <span class="slc">; separator is either space or dash</span>
   <span class="str">&quot;([0-9][0-9][0-9][0-9])&quot;</span>             <span class="slc">; (6) last 4 digits</span>
   <span class="str">&quot;([^0-9]|$)&quot;</span>                         <span class="slc">; must be followed by a non-digit</span>
   <span class="sym">))</span>


<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">0</span><span class="sym">)</span>
              <span class="str">&quot;1&quot;</span>
              <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">)))</span>
        <span class="sym">(</span>phonelines <span class="str">'())</span>
<span class="str">        (rx (regexp rx))</span>
<span class="str">	(count 0))</span>
<span class="str">    (let loop ((line (read-line)))</span>
<span class="str">      (cond ((eof-object? line) #f)</span>
<span class="str">	    (else</span>
<span class="str">	     (set! phonelines (cons line phonelines))</span>
<span class="str">	     (loop (read-line)))))</span>
<span class="str">    (set! phonelines (reverse! phonelines))</span>
<span class="str">    (do ([n (string-&gt;number n) (sub1 n)])</span>
<span class="str">	((negative? n))</span>
<span class="str">      (let loop ((phones phonelines)</span>
<span class="str">		 (count 0))</span>
<span class="str">	(if (null? phones)</span>
<span class="str">	    count</span>
<span class="str">	    (begin</span>
<span class="str">	      (match (regexp-match rx (car phones))</span>
<span class="str">		[(_ _ a1 a2 a3 exch numb _)</span>
<span class="str">		 (let ((area (and a1 (or a2 a3))))</span>
<span class="str">		   (when area</span>
<span class="str">		     (let ((num (string-append &quot;(&quot; area &quot;) &quot; exch &quot;-&quot; numb)))</span>
<span class="str">		       (set! count (add1 count))</span>
<span class="str">		       (when (zero? n) (printf &quot;~a: ~a~n&quot; count num))) ) ) ]</span>
<span class="str">		[_ #f] )</span>
<span class="str">	      (loop (cdr phones) count) ) ) ) ) ) )</span>
<span class="str"></span>
<span class="str">(main (current-command-line-arguments))</span>
