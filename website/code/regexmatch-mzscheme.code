#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu
<span class="slc">;;; $Id: regexmatch-mzscheme.code,v 1.12 2007-01-21 20:05:46 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; Based on the Chicken implementation</span>
<span class="slc">;;; Contributed by Brent Fulgham</span>

<span class="slc">;; Uses byte regexps instead of string regexps for a fairer comparison</span>

<span class="slc">;; NOTE: the running time of this benchmark is dominated by</span>
<span class="slc">;; construction of the `num' string.</span>

<span class="sym">(</span>module regexmatch mzscheme
  <span class="sym">(</span>define rx
    <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span>
     <span class="str">&quot;(?:^|[^0-9</span><span class="esc">\\</span><span class="str">(])&quot;</span>                      <span class="slc">; (1) preceeding non-digit or bol</span>
     <span class="str">&quot;(&quot;</span>                                  <span class="slc">; (2) area code</span>
     <span class="str">&quot;</span><span class="esc">\\</span><span class="str">(([0-9][0-9][0-9])</span><span class="esc">\\</span><span class="str">)&quot;</span>            <span class="slc">; (3) is either 3 digits in parens</span>
     <span class="str">&quot;|&quot;</span>                                  <span class="slc">; or</span>
     <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>                  <span class="slc">; (4) just 3 digits</span>
     <span class="str">&quot;)&quot;</span>                                  <span class="slc">; end of area code</span>
     <span class="str">&quot; &quot;</span>                                  <span class="slc">; area code is followed by one space</span>
     <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>                  <span class="slc">; (5) exchange is 3 digits</span>
     <span class="str">&quot;[ -]&quot;</span>                               <span class="slc">; separator is either space or dash</span>
     <span class="str">&quot;([0-9][0-9][0-9][0-9])&quot;</span>             <span class="slc">; (6) last 4 digits</span>
     <span class="str">&quot;(?:[^0-9]|$)&quot;</span>                         <span class="slc">; must be followed by a non-digit</span>
     <span class="sym">))</span>


  <span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">0</span><span class="sym">)</span>
		 <span class="str">&quot;1&quot;</span>
		 <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">)))</span>
	  <span class="sym">(</span>phonelines <span class="sym">'())</span>
	  <span class="sym">(</span>rx <span class="sym">(</span>byte<span class="sym">-</span>regexp <span class="sym">(</span>string<span class="sym">-&gt;</span>bytes<span class="sym">/</span>utf<span class="sym">-</span><span class="num">8</span> rx<span class="sym">)))</span>
	  <span class="sym">(</span>count <span class="num">0</span><span class="sym">))</span>
      <span class="sym">(</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>bytes<span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
	<span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span>eof<span class="sym">-</span>object? <span class="kwa">line</span><span class="sym">)</span> #f<span class="sym">)</span>
	      <span class="sym">(</span>else
	       <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> phonelines <span class="sym">(</span><span class="kwa">cons line</span> phonelines<span class="sym">))</span>
	       <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))))</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> phonelines <span class="sym">(</span><span class="kwa">reverse</span><span class="sym">!</span> phonelines<span class="sym">))</span>
      <span class="sym">(</span>do <span class="sym">([</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number n<span class="sym">) (</span>sub1 n<span class="sym">)])</span>
	  <span class="sym">((</span>negative? n<span class="sym">))</span>
	<span class="sym">(</span>let loop <span class="sym">((</span>phones phonelines<span class="sym">)</span>
		   <span class="sym">(</span>count <span class="num">0</span><span class="sym">))</span>
	  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? phones<span class="sym">)</span>
	      count
	      <span class="sym">(</span>let <span class="sym">([</span>m <span class="sym">(</span>regexp<span class="sym">-</span>match rx <span class="sym">(</span><span class="kwa">car</span> phones<span class="sym">))])</span>
		<span class="sym">(</span><span class="kwa">if</span> m
		    <span class="sym">(</span>let<span class="sym">-</span>values <span class="sym">([(</span>a1 a2 a3 exch numb<span class="sym">) (</span><span class="kwa">apply</span> values <span class="sym">(</span><span class="kwa">cdr</span> m<span class="sym">))])</span>
		      <span class="sym">(</span>let<span class="sym">* ([</span>area <span class="sym">(</span><span class="kwa">and</span> a1 <span class="sym">(</span><span class="kwa">or</span> a2 a3<span class="sym">))]</span>
			     <span class="sym">[</span>num <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">append</span> #<span class="str">&quot;(&quot;</span> area #<span class="str">&quot;) &quot;</span> exch #<span class="str">&quot;-&quot;</span> numb<span class="sym">)]</span>
			     <span class="sym">[</span>count <span class="sym">(</span>add1 count<span class="sym">)])</span>
			<span class="sym">(</span>when <span class="sym">(</span>zero? n<span class="sym">)</span>
			  <span class="sym">(</span>printf <span class="str">&quot;~a: ~a~n&quot;</span> count num<span class="sym">))</span>
			<span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">cdr</span> phones<span class="sym">)</span> count<span class="sym">)))</span>
		    <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">cdr</span> phones<span class="sym">)</span> count<span class="sym">))))))))</span>

  <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>

