<span class="com">/* -*- mode: c -*-
 * $Id: nestedloop-gcc.code,v 1.15 2005-10-01 21:59:14 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span>
<span class="kwb">int
</span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwb">int</span> a<span class="sym">,</span> b<span class="sym">,</span> c<span class="sym">,</span> d<span class="sym">,</span> e<span class="sym">,</span> f<span class="sym">,</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">;

</span>    <span class="kwa">for</span> <span class="sym">(</span>a<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> a<span class="sym">&lt;</span>n<span class="sym">;</span> a<span class="sym">++)
</span>	<span class="kwa">for</span> <span class="sym">(</span>b<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> b<span class="sym">&lt;</span>n<span class="sym">;</span> b<span class="sym">++)
</span>	    <span class="kwa">for</span> <span class="sym">(</span>c<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> c<span class="sym">&lt;</span>n<span class="sym">;</span> c<span class="sym">++)
</span>		<span class="kwa">for</span> <span class="sym">(</span>d<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> d<span class="sym">&lt;</span>n<span class="sym">;</span> d<span class="sym">++)
</span>		    <span class="kwa">for</span> <span class="sym">(</span>e<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> e<span class="sym">&lt;</span>n<span class="sym">;</span> e<span class="sym">++)
</span>			<span class="kwa">for</span> <span class="sym">(</span>f<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> f<span class="sym">&lt;</span>n<span class="sym">;</span> f<span class="sym">++)
</span>			    x<span class="sym">++;

</span>    printf<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> x<span class="sym">);
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}</span>
