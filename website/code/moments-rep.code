<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &amp;&amp;
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep <B><FONT COLOR="#BC8F8F">&quot;$PROG.jlc&quot;</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;$@&quot;</FONT></B>
!#

<I><FONT COLOR="#B22222">;;; TBD: figure out how to format results better
</FONT></I>
<I><FONT COLOR="#B22222">;;; $Id: moments-rep.code,v 1.2 2004-11-08 08:15:17 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I>
(define-structure main ()
  (open rep rep.system rep.regexp)

  <I><FONT COLOR="#B22222">;; I can't think of an easier way to format a floating point number
</FONT></I>  <I><FONT COLOR="#B22222">;; and be able to specify number of digits following decimal point.
</FONT></I>  (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">fltfmt</FONT></B> decpts number)
    (<B><FONT COLOR="#A020F0">let*</FONT></B> ((x (expt 10 decpts))
	   (pad (format #f <B><FONT COLOR="#BC8F8F">&quot;%d&quot;</FONT></B> x))
	   (numlist (string-split <B><FONT COLOR="#BC8F8F">&quot;\\.&quot;</FONT></B> (format #f <B><FONT COLOR="#BC8F8F">&quot;%d&quot;</FONT></B> (/ (round (* number x)) x))))
	   (zeros (substring pad (- (length pad) (- decpts (length (cadr numlist))))))
	   (numstr (concat (car numlist) <B><FONT COLOR="#BC8F8F">&quot;.&quot;</FONT></B> (cadr numlist) zeros)))
      numstr))

  <I><FONT COLOR="#B22222">;; eat the unused command line arg
</FONT></I>  (get-command-line-option <B><FONT COLOR="#BC8F8F">&quot;--num&quot;</FONT></B> t)

  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((sum 0.0)
	 (numlist (<B><FONT COLOR="#A020F0">let</FONT></B> loop ((line (read-line))
			     (numlist '()))
		       (<B><FONT COLOR="#A020F0">if</FONT></B> (not line)
			   numlist
			 (<B><FONT COLOR="#A020F0">let</FONT></B> ((num (read-from-string line)))
			   (setq sum (+ num sum))
			   (loop (read-line) (cons num numlist)))))))
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (length numlist)))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((mean (/ sum n))
	    (average_deviation 0.0)
	    (standard_deviation 0.0)
	    (variance 0.0)
	    (skew 0.0)
	    (kurtosis 0.0)
	    (median 0.0)
	    (deviation 0.0))
	(<B><FONT COLOR="#A020F0">let</FONT></B> loop ((nums numlist))
	     (<B><FONT COLOR="#A020F0">if</FONT></B> (not (null nums))
		 (progn
		   (setq deviation (- (car nums) mean))
		   (setq average_deviation (+ average_deviation (abs deviation)))
		   (setq variance (+ variance (expt deviation 2.0)))
		   (setq skew (+ skew (expt deviation 3.0)))
		   (setq kurtosis (+ kurtosis (expt deviation 4)))
		   (loop (cdr nums)))))

	(setq average_deviation (/ average_deviation n))
	(setq variance (/ variance (1- n)))
	(setq standard_deviation (sqrt variance))

	(<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; variance 0.0)
	       (setq skew (/ skew (* n variance standard_deviation)))
	       (setq kurtosis (- (/ kurtosis (* n variance variance))
				 3.0))))

	(setq numlist (sort numlist))
	(<B><FONT COLOR="#A020F0">let</FONT></B> ((mid (/ n 2)))
	  (<B><FONT COLOR="#A020F0">if</FONT></B> (zerop (mod n 2))
	      (setq median (/ (+ (elt numlist mid)
				 (elt numlist (1- mid)))
			      2.0))
	    (setq median (elt numlist mid))))
      
	
	(setq standard_deviation (/ (round (* standard_deviation 1000000)) 1000000))

	(format standard-output <B><FONT COLOR="#BC8F8F">&quot;n:                  %d\n&quot;</FONT></B> n)
	(format standard-output <B><FONT COLOR="#BC8F8F">&quot;median:             %s\n&quot;</FONT></B> (fltfmt 6 median))
	(format standard-output <B><FONT COLOR="#BC8F8F">&quot;mean:               %s\n&quot;</FONT></B> (fltfmt 6 mean))
	(format standard-output <B><FONT COLOR="#BC8F8F">&quot;average_deviation:  %s\n&quot;</FONT></B> (fltfmt 6 average_deviation))
	(format standard-output <B><FONT COLOR="#BC8F8F">&quot;standard_deviation: %s\n&quot;</FONT></B> (fltfmt 6 standard_deviation))
	(format standard-output <B><FONT COLOR="#BC8F8F">&quot;variance:           %s\n&quot;</FONT></B> (fltfmt 6 variance))
	(format standard-output <B><FONT COLOR="#BC8F8F">&quot;skew:               %s\n&quot;</FONT></B> (fltfmt 6 skew))
	(format standard-output <B><FONT COLOR="#BC8F8F">&quot;kurtosis:           %s\n&quot;</FONT></B> (fltfmt 6 kurtosis))))))</pre></td></tr></table>
