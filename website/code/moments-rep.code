#<span class="sym">!/</span>bin<span class="sym">/</span>bash
# <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}</span>
<span class="sym">[</span> \! <span class="sym">-</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;</span>
    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0</span>
exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="sym">!</span>#

<span class="slc">;;; TBD: figure out how to format results better</span>

<span class="slc">;;; $Id: moments-rep.code,v 1.6 2006-09-20 05:52:00 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()</span>
  <span class="sym">(</span><span class="kwa">open</span> rep rep.system rep.regexp<span class="sym">)</span>

  <span class="slc">;; I can't think of an easier way to format a floating point number</span>
  <span class="slc">;; and be able to specify number of digits following decimal point.</span>
  <span class="sym">(</span>define <span class="sym">(</span>fltfmt decpts number<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ((</span>x <span class="sym">(</span><span class="kwa">expt</span> <span class="num">10</span> decpts<span class="sym">))</span>
	   <span class="sym">(</span>pad <span class="sym">(</span>format #f <span class="str">&quot;%d&quot;</span> x<span class="sym">))</span>
	   <span class="sym">(</span>numlist <span class="sym">(</span>string<span class="sym">-</span>split <span class="str">&quot;</span><span class="esc">\\</span><span class="str">.&quot;</span> <span class="sym">(</span>format #f <span class="str">&quot;%d&quot;</span> <span class="sym">(/ (</span>round <span class="sym">(*</span> number x<span class="sym">))</span> x<span class="sym">))))</span>
	   <span class="sym">(</span>zeros <span class="sym">(</span>substring pad <span class="sym">(- (</span><span class="kwa">length</span> pad<span class="sym">) (-</span> decpts <span class="sym">(</span><span class="kwa">length</span> <span class="sym">(</span><span class="kwa">cadr</span> numlist<span class="sym">))))))</span>
	   <span class="sym">(</span>numstr <span class="sym">(</span>concat <span class="sym">(</span><span class="kwa">car</span> numlist<span class="sym">)</span> <span class="str">&quot;.&quot;</span> <span class="sym">(</span><span class="kwa">cadr</span> numlist<span class="sym">)</span> zeros<span class="sym">)))</span>
      numstr<span class="sym">))</span>

  <span class="slc">;; eat the unused command line arg</span>
  <span class="sym">(</span>get<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>option <span class="str">&quot;--num&quot;</span> t<span class="sym">)</span>

  <span class="sym">(</span>let<span class="sym">* ((</span>sum <span class="num">0.0</span><span class="sym">)</span>
	 <span class="sym">(</span>numlist <span class="sym">(</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">))</span>
			     <span class="sym">(</span>numlist <span class="str">'()))</span>
<span class="str">		       (if (not line)</span>
<span class="str">			   numlist</span>
<span class="str">			 (let ((num (read-from-string line)))</span>
<span class="str">			   (setq sum (+ num sum))</span>
<span class="str">			   (loop (read-line) (cons num numlist)))))))</span>
<span class="str">    (let ((n (length numlist)))</span>
<span class="str">      (let ((mean (/ sum n))</span>
<span class="str">	    (average_deviation 0.0)</span>
<span class="str">	    (standard_deviation 0.0)</span>
<span class="str">	    (variance 0.0)</span>
<span class="str">	    (skew 0.0)</span>
<span class="str">	    (kurtosis 0.0)</span>
<span class="str">	    (median 0.0)</span>
<span class="str">	    (deviation 0.0))</span>
<span class="str">	(let loop ((nums numlist))</span>
<span class="str">	     (if (not (null nums))</span>
<span class="str">		 (progn</span>
<span class="str">		   (setq deviation (- (car nums) mean))</span>
<span class="str">		   (setq average_deviation (+ average_deviation (abs deviation)))</span>
<span class="str">		   (setq variance (+ variance (expt deviation 2.0)))</span>
<span class="str">		   (setq skew (+ skew (expt deviation 3.0)))</span>
<span class="str">		   (setq kurtosis (+ kurtosis (expt deviation 4)))</span>
<span class="str">		   (loop (cdr nums)))))</span>
<span class="str"></span>
<span class="str">	(setq average_deviation (/ average_deviation n))</span>
<span class="str">	(setq variance (/ variance (1- n)))</span>
<span class="str">	(setq standard_deviation (sqrt variance))</span>
<span class="str"></span>
<span class="str">	(cond ((&gt; variance 0.0)</span>
<span class="str">	       (setq skew (/ skew (* n variance standard_deviation)))</span>
<span class="str">	       (setq kurtosis (- (/ kurtosis (* n variance variance))</span>
<span class="str">				 3.0))))</span>
<span class="str"></span>
<span class="str">	(setq numlist (sort numlist))</span>
<span class="str">	(let ((mid (/ n 2)))</span>
<span class="str">	  (if (zerop (mod n 2))</span>
<span class="str">	      (setq median (/ (+ (elt numlist mid)</span>
<span class="str">				 (elt numlist (1- mid)))</span>
<span class="str">			      2.0))</span>
<span class="str">	    (setq median (elt numlist mid))))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">	(setq standard_deviation (/ (round (* standard_deviation 1000000)) 1000000))</span>
<span class="str"></span>
<span class="str">	(format standard-output &quot;n:                  %d</span><span class="esc">\n</span><span class="str">&quot; n)</span>
<span class="str">	(format standard-output &quot;median:             %s</span><span class="esc">\n</span><span class="str">&quot; (fltfmt 6 median))</span>
<span class="str">	(format standard-output &quot;mean:               %s</span><span class="esc">\n</span><span class="str">&quot; (fltfmt 6 mean))</span>
<span class="str">	(format standard-output &quot;average_deviation:  %s</span><span class="esc">\n</span><span class="str">&quot; (fltfmt 6 average_deviation))</span>
<span class="str">	(format standard-output &quot;standard_deviation: %s</span><span class="esc">\n</span><span class="str">&quot; (fltfmt 6 standard_deviation))</span>
<span class="str">	(format standard-output &quot;variance:           %s</span><span class="esc">\n</span><span class="str">&quot; (fltfmt 6 variance))</span>
<span class="str">	(format standard-output &quot;skew:               %s</span><span class="esc">\n</span><span class="str">&quot; (fltfmt 6 skew))</span>
<span class="str">	(format standard-output &quot;kurtosis:           %s</span><span class="esc">\n</span><span class="str">&quot; (fltfmt 6 kurtosis))))))</span>
