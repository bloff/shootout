<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy (Clean novice)

To compile:	
   cleanIDE.exe <I><FONT COLOR="#B22222">--batch-force-build &quot;e:\shoot\contrib\clean\hash.prj&quot;
</FONT></I>
To run:
   hash.exe -con 80000
*/

<B><FONT COLOR="#A020F0">module</FONT></B> hash
<B><FONT COLOR="#A020F0">import</FONT></B> StdEnv, StdOverloadedList, LanguageShootout 
      
Start = toString(hashOps argi) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>

hashOps n
   # hashtable = htNew n
   # hashtable = addHexKeys n newHexConverter hashtable
   =  countDecimalKeys n hashtable 0 
   
   <B><FONT COLOR="#A020F0">where</FONT></B>
   addHexKeys i hc ht
      | i==0 = ht
      # hc = append i hc
      #! s = toHexString hc
      = addHexKeys (i-1) hc (htAdd s i ht) 
            
   countDecimalKeys i ht count 
      | i == 0    = count   
      = <B><FONT COLOR="#A020F0">if</FONT></B> (htHasKey (toString i) ht) 
         (countDecimalKeys (i-1) ht (count+1)) 
         (countDecimalKeys (i-1) ht count)
   
   
   
<B><FONT COLOR="#228B22">:: HexConverter = Hc !Int !Int !.String   
</FONT></B>   
newHexConverter <B><FONT COLOR="#228B22">:: *HexConverter   
</FONT></B>newHexConverter = Hc 31 32 {<B><FONT COLOR="#BC8F8F">' '</FONT></B> \\ i&lt;-[1..32]}

append n hc=:(Hc <B><FONT COLOR="#A020F0">_ </FONT></B>last <B><FONT COLOR="#A020F0">_)
 </FONT></B>  = append_ n last hc
   <B><FONT COLOR="#A020F0">where</FONT></B>
   append_ n i (Hc first last s) 
      | n==0 = (Hc i last s)
      # i = i-1
      # s = update s i hexchars.[n bitand 15]      
      = append_ (n&gt;&gt;4) i (Hc i last s)

   hexchars = <B><FONT COLOR="#BC8F8F">&quot;0123456789abcdef&quot;</FONT></B>
   
toHexString (Hc first last s) = s%(first,last)   
   
   

// SimpleHash implementation would normally be imported
   
primes =: [
   53,         97,         193,       389,       769,
   1543,       3079,       6151,      12289,     24593,
   49157,      98317,      196613,    93241,     786433,
   1572869,    3145739,    6291469,   12582917,  25165843,
   50331653,   100663319,  201326611, 402653189, 805306457
   ]

<B><FONT COLOR="#228B22">:: Item a = { key::!String
</FONT></B>            , val<B><FONT COLOR="#228B22">::a 
</FONT></B>            }

<B><FONT COLOR="#228B22">:: HashTable a = { nBuckets::Int
</FONT></B>                 , table<B><FONT COLOR="#228B22">::!.{![!Item a!]}
</FONT></B>                 }

hash <B><FONT COLOR="#228B22">:: !{#.Char} !(HashTable .a) -&gt; Int
</FONT></B>hash key ht=:{nBuckets}
   = (abs (loop key (size key - 1) 0)) rem nBuckets  
   <B><FONT COLOR="#A020F0">where</FONT></B>
   loop k n h
      | n&gt;(-1) = loop k (n-1) (11*h + toInt k.[n])       
               = h

htNew n = { nBuckets = nprime
        , table = {[|] \\ i &lt;- [0..nprime-1]}
        }
   <B><FONT COLOR="#A020F0">where</FONT></B>   
   nprime = hd (dropWhile (\x = x &lt; n) primes)        
     
htHasKey <B><FONT COLOR="#228B22">:: !{#.Char} !.(HashTable a) -&gt; .Bool             
</FONT></B>htHasKey k ht=:{table}= findIn k table.[hash k ht]   

htAdd k v ht=:{table}
   #! i = hash k ht
   #! (b,table) = uselect table i
   = <B><FONT COLOR="#A020F0">if</FONT></B> (findIn k b)
      {ht &amp; table = update ht.table i (addItem k v b [|])}
      {ht &amp; table = update ht.table i [|{key=k,val=v}:b]}
     
findIn k [|] = False
findIn k [|item:ls] = item.key == k || findIn k ls  
  
addItem k v [|] ls` = ls`
addItem k v [|item:ls] ls`
    | item.key == k  
        = [|{item &amp; val=v}:ls++|ls`]
        = addItem k v ls [|item:ls`] </pre></td></tr></table>
