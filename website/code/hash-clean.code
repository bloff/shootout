<span class="sym">/*</span> The Great Computer Language Shootout
   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>

   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)</span>
<span class="sym">*/</span>

<span class="kwa">module</span> hash
<span class="kwa">import</span> StdEnv<span class="sym">,</span> StdOverloadedList<span class="sym">,</span> LanguageShootout

Start <span class="sym">=</span> toString<span class="sym">(</span>hashOps argi<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span>

hashOps n
   # hashtable <span class="sym">=</span> htNew n
   # hashtable <span class="sym">=</span> addHexKeys n newHexConverter hashtable
   <span class="sym">=</span>  countDecimalKeys n hashtable <span class="num">0</span>
   <span class="kwa">where</span>

   addHexKeys i hc ht
      <span class="sym">|</span> i<span class="sym">==</span><span class="num">0</span> <span class="sym">=</span> ht
      # hc <span class="sym">=</span> append i hc
      #<span class="sym">!</span> s <span class="sym">=</span> toHexString hc
      <span class="sym">=</span> addHexKeys <span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> hc <span class="sym">(</span>htAdd s i ht<span class="sym">)</span>

   countDecimalKeys i ht count
      <span class="sym">|</span> i <span class="sym">==</span> <span class="num">0</span>    <span class="sym">=</span> count
      <span class="sym">=</span> if <span class="sym">(</span>htHasKey <span class="sym">(</span>toString i<span class="sym">)</span> ht<span class="sym">)</span>
         <span class="sym">(</span>countDecimalKeys <span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> ht <span class="sym">(</span>count<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
         <span class="sym">(</span>countDecimalKeys <span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> ht count<span class="sym">)</span>

<span class="sym">::</span> HexConverter <span class="sym">=</span> Hc <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.String
newHexConverter <span class="sym">:: *</span>HexConverter
newHexConverter <span class="sym">=</span> Hc <span class="num">31 32</span> {<span class="str">' '</span> \\ i<span class="sym">&lt;-[</span><span class="num">1</span>.<span class="num">.32</span><span class="sym">]</span>}

append n hc<span class="sym">=:(</span>Hc _ last _<span class="sym">)</span>
   <span class="sym">=</span> append_ n last hc
   <span class="kwa">where</span>

   append_ n i <span class="sym">(</span>Hc first last s<span class="sym">)</span>
      <span class="sym">|</span> n<span class="sym">==</span><span class="num">0</span> <span class="sym">= (</span>Hc i last s<span class="sym">)</span>
      # i <span class="sym">=</span> i<span class="sym">-</span><span class="num">1</span>
      # s <span class="sym">=</span> update s i hexchars.<span class="sym">[</span>n bitand <span class="num">15</span><span class="sym">]</span>
      <span class="sym">=</span> append_ <span class="sym">(</span>n<span class="sym">&gt;&gt;</span><span class="num">4</span><span class="sym">)</span> i <span class="sym">(</span>Hc i last s<span class="sym">)</span>

   hexchars <span class="sym">=</span> <span class="str">&quot;0123456789abcdef&quot;</span>

toHexString <span class="sym">(</span>Hc first last s<span class="sym">) =</span> s<span class="sym">%(</span>first<span class="sym">,</span>last<span class="sym">)</span>


<span class="sym">//</span> SimpleHash implementation would normally be imported

primes <span class="sym">=: [</span>
   <span class="num">53</span><span class="sym">,</span>         <span class="num">97</span><span class="sym">,</span>         <span class="num">193</span><span class="sym">,</span>       <span class="num">389</span><span class="sym">,</span>       <span class="num">769</span><span class="sym">,</span>
   <span class="num">1543</span><span class="sym">,</span>       <span class="num">3079</span><span class="sym">,</span>       <span class="num">6151</span><span class="sym">,</span>      <span class="num">12289</span><span class="sym">,</span>     <span class="num">24593</span><span class="sym">,</span>
   <span class="num">49157</span><span class="sym">,</span>      <span class="num">98317</span><span class="sym">,</span>      <span class="num">196613</span><span class="sym">,</span>    <span class="num">93241</span><span class="sym">,</span>     <span class="num">786433</span><span class="sym">,</span>
   <span class="num">1572869</span><span class="sym">,</span>    <span class="num">3145739</span><span class="sym">,</span>    <span class="num">6291469</span><span class="sym">,</span>   <span class="num">12582917</span><span class="sym">,</span>  <span class="num">25165843</span><span class="sym">,</span>
   <span class="num">50331653</span><span class="sym">,</span>   <span class="num">100663319</span><span class="sym">,</span>  <span class="num">201326611</span><span class="sym">,</span> <span class="num">402653189</span><span class="sym">,</span> <span class="num">805306457</span>
   <span class="sym">]</span>

<span class="sym">::</span> Item a <span class="sym">=</span> { key<span class="sym">::!</span>String
            <span class="sym">,</span> val<span class="sym">::</span>a
            }

<span class="sym">::</span> HashTable a <span class="sym">=</span> { nBuckets<span class="sym">::</span><span class="kwb">Int</span>
                 <span class="sym">,</span> table<span class="sym">::!</span>.{<span class="sym">![!</span>Item a<span class="sym">!]</span>}
                 }

hash <span class="sym">:: !</span>{#.<span class="kwb">Char</span>} <span class="sym">!(</span>HashTable .a<span class="sym">) -&gt;</span> <span class="kwb">Int</span>
hash key ht<span class="sym">=:</span>{nBuckets}
   <span class="sym">= (</span>abs <span class="sym">(</span>loop key <span class="sym">(</span>size key <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="num">0</span><span class="sym">))</span> rem nBuckets
   <span class="kwa">where</span>

   loop k n h
      <span class="sym">|</span> n<span class="sym">&gt;(-</span><span class="num">1</span><span class="sym">) =</span> loop k <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span><span class="num">11</span><span class="sym">*</span>h <span class="sym">+</span> toInt k.<span class="sym">[</span>n<span class="sym">])</span>
               <span class="sym">=</span> h

htNew n <span class="sym">=</span> { nBuckets <span class="sym">=</span> nprime
        <span class="sym">,</span> table <span class="sym">=</span> {<span class="sym">[|]</span> \\ i <span class="sym">&lt;- [</span><span class="num">0</span>..nprime<span class="sym">-</span><span class="num">1</span><span class="sym">]</span>}
        }
   <span class="kwa">where</span>
   nprime <span class="sym">=</span> hd <span class="sym">(</span>dropWhile <span class="sym">(</span>\x <span class="sym">=</span> x <span class="sym">&lt;</span> n<span class="sym">)</span> primes<span class="sym">)</span>

htHasKey <span class="sym">:: !</span>{#.<span class="kwb">Char</span>} <span class="sym">!</span>.<span class="sym">(</span>HashTable a<span class="sym">) -&gt;</span> .<span class="kwb">Bool</span>
htHasKey k ht<span class="sym">=:</span>{table}<span class="sym">=</span> findIn k table.<span class="sym">[</span>hash k ht<span class="sym">]</span>

htAdd k v ht<span class="sym">=:</span>{table}
   #<span class="sym">!</span> i <span class="sym">=</span> hash k ht
   #<span class="sym">! (</span>b<span class="sym">,</span>table<span class="sym">) =</span> uselect table i
   <span class="sym">=</span> if <span class="sym">(</span>findIn k b<span class="sym">)</span>
      {ht <span class="sym">&amp;</span> table <span class="sym">=</span> update ht.table i <span class="sym">(</span>addItem k v b <span class="sym">[|])</span>}
      {ht <span class="sym">&amp;</span> table <span class="sym">=</span> update ht.table i <span class="sym">[|</span>{key<span class="sym">=</span>k<span class="sym">,</span>val<span class="sym">=</span>v}<span class="sym">:</span>b<span class="sym">]</span>}

findIn k <span class="sym">[|] =</span> <span class="kwa">False</span>
findIn k <span class="sym">[|</span>item<span class="sym">:</span>ls<span class="sym">] =</span> item.key <span class="sym">==</span> k <span class="sym">||</span> findIn k ls

addItem k v <span class="sym">[|]</span> ls` <span class="sym">=</span> ls`
addItem k v <span class="sym">[|</span>item<span class="sym">:</span>ls<span class="sym">]</span> ls`
    <span class="sym">|</span> item.key <span class="sym">==</span> k
        <span class="sym">= [|</span>{item <span class="sym">&amp;</span> val<span class="sym">=</span>v}<span class="sym">:</span>ls<span class="sym">++|</span>ls`<span class="sym">]</span>
        <span class="sym">=</span> addItem k v ls <span class="sym">[|</span>item<span class="sym">:</span>ls`<span class="sym">]</span>
