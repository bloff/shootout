<span class="line">    1 </span><span class="sym">/*</span> The Great Computer Language Shootout
<span class="line">    2 </span>     http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/
</span><span class="line">    3 </span><span class="sym"> 
</span><span class="line">    4 </span><span class="sym"> </span>   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)
</span><span class="line">    5 </span><span class="sym"> 
</span><span class="line">    6 </span><span class="sym"> </span>To compile<span class="sym">:
</span><span class="line">    7 </span><span class="sym">         </span>   cleanIDE.exe <span class="slc">--batch-force-build &quot;e:\shoot\contrib\clean\hash.prj&quot; 
</span><span class="line">    8 </span><span class="slc"></span>
<span class="line">    9 </span> To run<span class="sym">:
</span><span class="line">   10 </span><span class="sym"> </span>   hash.exe <span class="sym">-</span>con <span class="num">80000
</span><span class="line">   11 </span><span class="num"> </span><span class="sym">*/
</span><span class="line">   12 </span><span class="sym"> 
</span><span class="line">   13 </span><span class="sym"> </span><span class="kwa">module</span> hash
<span class="line">   14 </span> <span class="kwa">import</span> StdEnv<span class="sym">,</span> StdOverloadedList<span class="sym">,</span> LanguageShootout
<span class="line">   15 </span>
<span class="line">   16 </span>         Start <span class="sym">=</span> toString<span class="sym">(</span>hashOps argi<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span>
<span class="line">   17 </span>
<span class="line">   18 </span>  hashOps n
<span class="line">   19 </span>    # hashtable <span class="sym">=</span> htNew n
<span class="line">   20 </span>    # hashtable <span class="sym">=</span> addHexKeys n newHexConverter hashtable
<span class="line">   21 </span>    <span class="sym">=</span>  countDecimalKeys n hashtable <span class="num">0
</span><span class="line">   22 </span><span class="num">  
</span><span class="line">   23 </span><span class="num">    </span>   <span class="kwa">where
</span><span class="line">   24 </span><span class="kwa"> </span>   addHexKeys i hc ht
<span class="line">   25 </span>       <span class="sym">|</span> i<span class="sym">==</span><span class="num">0</span> <span class="sym">=</span> ht
<span class="line">   26 </span>       # hc <span class="sym">=</span> append i hc
<span class="line">   27 </span>       #<span class="sym">!</span> s <span class="sym">=</span> toHexString hc
<span class="line">   28 </span>       <span class="sym">=</span> addHexKeys <span class="sym">(</span>i<span class="num">-1</span><span class="sym">)</span> hc <span class="sym">(</span>htAdd s i ht<span class="sym">)
</span><span class="line">   29 </span><span class="sym">  
</span><span class="line">   30 </span><span class="sym">             </span>   countDecimalKeys i ht count
<span class="line">   31 </span>        <span class="sym">|</span> i <span class="sym">==</span> <span class="num">0</span>    <span class="sym">=</span> count
<span class="line">   32 </span>          <span class="sym">=</span> if <span class="sym">(</span>htHasKey <span class="sym">(</span>toString i<span class="sym">)</span> ht<span class="sym">)
</span><span class="line">   33 </span><span class="sym">           (</span>countDecimalKeys <span class="sym">(</span>i<span class="num">-1</span><span class="sym">)</span> ht <span class="sym">(</span>count<span class="sym">+</span><span class="num">1</span><span class="sym">))
</span><span class="line">   34 </span><span class="sym">           (</span>countDecimalKeys <span class="sym">(</span>i<span class="num">-1</span><span class="sym">)</span> ht count<span class="sym">)
</span><span class="line">   35 </span><span class="sym"> 
</span><span class="line">   36 </span><span class="sym">    
</span><span class="line">   37 </span><span class="sym">    
</span><span class="line">   38 </span><span class="sym">    ::</span> HexConverter <span class="sym">=</span> Hc <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.String
<span class="line">   39 </span>
<span class="line">   40 </span>        newHexConverter <span class="sym">:: *</span>HexConverter
<span class="line">   41 </span>    newHexConverter <span class="sym">=</span> Hc <span class="num">31 32</span> {<span class="str">' '</span> \\ i<span class="sym">&lt;-[</span><span class="num">1</span>.<span class="num">.32</span><span class="sym">]</span>}
<span class="line">   42 </span>
<span class="line">   43 </span>  append n hc<span class="sym">=:(</span>Hc _ last _<span class="sym">)
</span><span class="line">   44 </span><span class="sym">    =</span> append_ n last hc
<span class="line">   45 </span>    <span class="kwa">where
</span><span class="line">   46 </span><span class="kwa"> </span>   append_ n i <span class="sym">(</span>Hc first last s<span class="sym">)
</span><span class="line">   47 </span><span class="sym">        |</span> n<span class="sym">==</span><span class="num">0</span> <span class="sym">= (</span>Hc i last s<span class="sym">)
</span><span class="line">   48 </span><span class="sym"> </span>      # i <span class="sym">=</span> i<span class="num">-1
</span><span class="line">   49 </span><span class="num"> </span>      # s <span class="sym">=</span> update s i hexchars.<span class="sym">[</span>n bitand <span class="num">15</span><span class="sym">]
</span><span class="line">   50 </span><span class="sym">             =</span> append_ <span class="sym">(</span>n<span class="sym">&gt;&gt;</span><span class="num">4</span><span class="sym">)</span> i <span class="sym">(</span>Hc i last s<span class="sym">)
</span><span class="line">   51 </span><span class="sym"> 
</span><span class="line">   52 </span><span class="sym"> </span>   hexchars <span class="sym">=</span> <span class="str">&quot;0123456789abcdef&quot;</span>
<span class="line">   53 </span>
<span class="line">   54 </span>     toHexString <span class="sym">(</span>Hc first last s<span class="sym">) =</span> s<span class="sym">%(</span>first<span class="sym">,</span>last<span class="sym">)
</span><span class="line">   55 </span><span class="sym">    
</span><span class="line">   56 </span><span class="sym">    
</span><span class="line">   57 </span><span class="sym">    
</span><span class="line">   58 </span><span class="sym"> //</span> SimpleHash implementation would normally be imported
<span class="line">   59 </span>
<span class="line">   60 </span>     primes <span class="sym">=: [
</span><span class="line">   61 </span><span class="sym"> </span>   <span class="num">53</span><span class="sym">,</span>         <span class="num">97</span><span class="sym">,</span>         <span class="num">193</span><span class="sym">,</span>       <span class="num">389</span><span class="sym">,</span>       <span class="num">769</span><span class="sym">,
</span><span class="line">   62 </span><span class="sym"> </span>   <span class="num">1543</span><span class="sym">,</span>       <span class="num">3079</span><span class="sym">,</span>       <span class="num">6151</span><span class="sym">,</span>      <span class="num">12289</span><span class="sym">,</span>     <span class="num">24593</span><span class="sym">,
</span><span class="line">   63 </span><span class="sym"> </span>   <span class="num">49157</span><span class="sym">,</span>      <span class="num">98317</span><span class="sym">,</span>      <span class="num">196613</span><span class="sym">,</span>    <span class="num">93241</span><span class="sym">,</span>     <span class="num">786433</span><span class="sym">,
</span><span class="line">   64 </span><span class="sym"> </span>   <span class="num">1572869</span><span class="sym">,</span>    <span class="num">3145739</span><span class="sym">,</span>    <span class="num">6291469</span><span class="sym">,</span>   <span class="num">12582917</span><span class="sym">,</span>  <span class="num">25165843</span><span class="sym">,
</span><span class="line">   65 </span><span class="sym"> </span>   <span class="num">50331653</span><span class="sym">,</span>   <span class="num">100663319</span><span class="sym">,</span>  <span class="num">201326611</span><span class="sym">,</span> <span class="num">402653189</span><span class="sym">,</span> <span class="num">805306457
</span><span class="line">   66 </span><span class="num"> </span>   <span class="sym">]
</span><span class="line">   67 </span><span class="sym"> 
</span><span class="line">   68 </span><span class="sym"> ::</span> Item a <span class="sym">=</span> { key<span class="sym">::!</span>String
<span class="line">   69 </span>             <span class="sym">,</span> val<span class="sym">::</span>a
<span class="line">   70 </span>              }
<span class="line">   71 </span>
<span class="line">   72 </span>  <span class="sym">::</span> HashTable a <span class="sym">=</span> { nBuckets<span class="sym">::</span><span class="kwb">Int
</span><span class="line">   73 </span><span class="kwb"> </span>                 <span class="sym">,</span> table<span class="sym">::!</span>.{<span class="sym">![!</span>Item a<span class="sym">!]</span>}
<span class="line">   74 </span>                  }
<span class="line">   75 </span>
<span class="line">   76 </span>  hash <span class="sym">:: !</span>{#.<span class="kwb">Char</span>} <span class="sym">!(</span>HashTable .a<span class="sym">) -&gt;</span> <span class="kwb">Int
</span><span class="line">   77 </span><span class="kwb"> </span>hash key ht<span class="sym">=:</span>{nBuckets}
<span class="line">   78 </span>    <span class="sym">= (</span>abs <span class="sym">(</span>loop key <span class="sym">(</span>size key <span class="num">- 1</span><span class="sym">)</span> <span class="num">0</span><span class="sym">))</span> rem nBuckets
<span class="line">   79 </span>      <span class="kwa">where
</span><span class="line">   80 </span><span class="kwa"> </span>   loop k n h
<span class="line">   81 </span>       <span class="sym">|</span> n<span class="sym">&gt;(-</span><span class="num">1</span><span class="sym">) =</span> loop k <span class="sym">(</span>n<span class="num">-1</span><span class="sym">) (</span><span class="num">11</span><span class="sym">*</span>h <span class="sym">+</span> toInt k.<span class="sym">[</span>n<span class="sym">])
</span><span class="line">   82 </span><span class="sym">                       =</span> h
<span class="line">   83 </span>
<span class="line">   84 </span>  htNew n <span class="sym">=</span> { nBuckets <span class="sym">=</span> nprime
<span class="line">   85 </span>         <span class="sym">,</span> table <span class="sym">=</span> {<span class="sym">[|]</span> \\ i <span class="sym">&lt;- [</span><span class="num">0</span>..nprime<span class="num">-1</span><span class="sym">]</span>}
<span class="line">   86 </span>         }
<span class="line">   87 </span>    <span class="kwa">where
</span><span class="line">   88 </span><span class="kwa">    </span>   nprime <span class="sym">=</span> hd <span class="sym">(</span>dropWhile <span class="sym">(</span>\x <span class="sym">=</span> x <span class="sym">&lt;</span> n<span class="sym">)</span> primes<span class="sym">)
</span><span class="line">   89 </span><span class="sym">         
</span><span class="line">   90 </span><span class="sym">      </span>htHasKey <span class="sym">:: !</span>{#.<span class="kwb">Char</span>} <span class="sym">!</span>.<span class="sym">(</span>HashTable a<span class="sym">) -&gt;</span> .<span class="kwb">Bool
</span><span class="line">   91 </span><span class="kwb">              </span>htHasKey k ht<span class="sym">=:</span>{table}<span class="sym">=</span> findIn k table.<span class="sym">[</span>hash k ht<span class="sym">]
</span><span class="line">   92 </span><span class="sym">    
</span><span class="line">   93 </span><span class="sym"> </span>htAdd k v ht<span class="sym">=:</span>{table}
<span class="line">   94 </span>    #<span class="sym">!</span> i <span class="sym">=</span> hash k ht
<span class="line">   95 </span>    #<span class="sym">! (</span>b<span class="sym">,</span>table<span class="sym">) =</span> uselect table i
<span class="line">   96 </span>    <span class="sym">=</span> if <span class="sym">(</span>findIn k b<span class="sym">)
</span><span class="line">   97 </span><span class="sym"> </span>      {ht <span class="sym">&amp;</span> table <span class="sym">=</span> update ht.table i <span class="sym">(</span>addItem k v b <span class="sym">[|])</span>}
<span class="line">   98 </span>       {ht <span class="sym">&amp;</span> table <span class="sym">=</span> update ht.table i <span class="sym">[|</span>{key<span class="sym">=</span>k<span class="sym">,</span>val<span class="sym">=</span>v}<span class="sym">:</span>b<span class="sym">]</span>}
<span class="line">   99 </span>
<span class="line">  100 </span>       findIn k <span class="sym">[|] =</span> <span class="kwa">False
</span><span class="line">  101 </span><span class="kwa"> </span>findIn k <span class="sym">[|</span>item<span class="sym">:</span>ls<span class="sym">] =</span> item.key <span class="sym">==</span> k <span class="sym">||</span> findIn k ls
<span class="line">  102 </span>
<span class="line">  103 </span>      addItem k v <span class="sym">[|]</span> ls` <span class="sym">=</span> ls`
<span class="line">  104 </span> addItem k v <span class="sym">[|</span>item<span class="sym">:</span>ls<span class="sym">]</span> ls`
<span class="line">  105 </span>     <span class="sym">|</span> item.key <span class="sym">==</span> k
<span class="line">  106 </span>           <span class="sym">= [|</span>{item <span class="sym">&amp;</span> val<span class="sym">=</span>v}<span class="sym">:</span>ls<span class="sym">++|</span>ls`<span class="sym">]
</span><span class="line">  107 </span><span class="sym">         =</span> addItem k v ls <span class="sym">[|</span>item<span class="sym">:</span>ls`<span class="sym">]</span>  
