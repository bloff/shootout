<span class="line">    1 </span><span class="slc">-- $Id: methcall-hugs.code,v 1.3 2004-11-11 07:14:00 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- Author: Einar Karttunen
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- compile with: ghc -O2 -o methcall methcall.hs
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="kwa">import</span> Control.Monad
<span class="line">    7 </span><span class="kwa">import</span> Data.IORef
<span class="line">    8 </span><span class="kwa">import</span> System
<span class="line">    9 </span>
<span class="line">   10 </span><span class="kwa">class</span> Toggle a <span class="kwa">where
</span><span class="line">   11 </span><span class="kwa"></span>    activate <span class="sym">::</span> a <span class="sym">-&gt;</span> IO <span class="sym">()
</span><span class="line">   12 </span><span class="sym"></span>    value <span class="sym">::</span> a <span class="sym">-&gt;</span> IO <span class="kwb">Bool
</span><span class="line">   13 </span><span class="kwb">
</span><span class="line">   14 </span><span class="kwb"></span><span class="kwa">newtype</span> ToggleC    <span class="sym">=</span> ToggleC <span class="sym">(</span>IORef <span class="kwb">Bool</span><span class="sym">)
</span><span class="line">   15 </span><span class="sym"></span><span class="kwa">newtype</span> NthToggleC <span class="sym">=</span> NthToggleC <span class="sym">(</span>IORef <span class="sym">(</span><span class="kwb">Bool</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">))
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span>newToggle s <span class="sym">=</span> newIORef s <span class="sym">&gt;&gt;=</span> return . ToggleC
<span class="line">   18 </span>newNthToggle s m <span class="sym">=</span> newIORef <span class="sym">(</span>s<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>m<span class="sym">) &gt;&gt;=</span> return . NthToggleC
<span class="line">   19 </span>
<span class="line">   20 </span><span class="kwa">instance</span> Toggle ToggleC <span class="kwa">where
</span><span class="line">   21 </span><span class="kwa"></span>    activate <span class="sym">(</span>ToggleC t<span class="sym">) =</span> modifyIORef t not
<span class="line">   22 </span>    value <span class="sym">(</span>ToggleC t<span class="sym">)    =</span> <span class="kwa">do</span> { v <span class="sym">&lt;-</span> readIORef t<span class="sym">;</span>  v `seq` return v }
<span class="line">   23 </span>
<span class="line">   24 </span><span class="kwa">instance</span> Toggle NthToggleC <span class="kwa">where
</span><span class="line">   25 </span><span class="kwa"></span>    activate <span class="sym">(</span>NthToggleC t<span class="sym">) =</span> modifyIORef t <span class="sym">(</span>\x&#64;<span class="sym">(</span>s<span class="sym">,</span>v<span class="sym">,</span>m<span class="sym">) -&gt;</span> x `seq` if v<span class="sym">+</span><span class="num">1</span> <span class="sym">==</span> m <span class="kwa">then</span> <span class="sym">(</span>not s<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>m<span class="sym">)</span> <span class="kwa">else</span> <span class="sym">(</span>s<span class="sym">,</span>v<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>m<span class="sym">))
</span><span class="line">   26 </span><span class="sym"></span>    value    <span class="sym">(</span>NthToggleC t<span class="sym">) =</span> <span class="kwa">do</span> { <span class="sym">(</span>s<span class="sym">,</span>_<span class="sym">,</span>_<span class="sym">) &lt;-</span> readIORef t<span class="sym">;</span> s `seq` return s }
<span class="line">   27 </span>
<span class="line">   28 </span>out b <span class="sym">=</span> putStrLn $ if b <span class="kwa">then</span> <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false&quot;</span>
<span class="line">   29 </span>
<span class="line">   30 </span>main <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">[</span>num<span class="sym">] &lt;-</span> getArgs
<span class="line">   31 </span>          toggle<span class="sym">&lt;-</span> newToggle <span class="kwa">True
</span><span class="line">   32 </span><span class="kwa"></span>          replicateM_ <span class="sym">(</span>read num<span class="sym">) (</span>activate toggle <span class="sym">&gt;&gt;</span> value toggle<span class="sym">)
</span><span class="line">   33 </span><span class="sym"></span>          value toggle<span class="sym">&gt;&gt;=</span> out
<span class="line">   34 </span>          ntoggle<span class="sym">&lt;-</span> newNthToggle <span class="kwa">True</span> <span class="num">3
</span><span class="line">   35 </span><span class="num"></span>          replicateM_ <span class="sym">(</span>read num<span class="sym">) (</span>activate ntoggle <span class="sym">&gt;&gt;</span> value ntoggle<span class="sym">)
</span><span class="line">   36 </span><span class="sym"></span>          value ntoggle<span class="sym">&gt;&gt;=</span> out
