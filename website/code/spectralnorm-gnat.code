<span class="slc">-----------------------------------------</span>
<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Jim Rogers</span>
<span class="slc">-----------------------------------------</span>
<span class="kwa">package</span> Spectral_Utils <span class="kwa">is</span>
   <span class="kwa">type</span> Matrix <span class="kwa">is array</span><span class="sym">(</span><span class="kwb">Natural</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> <span class="kwb">Long_Float</span><span class="sym">;</span>

   <span class="kwa">function</span> Eval_A<span class="sym">(</span>I<span class="sym">,</span> J <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Long_Float</span><span class="sym">;</span>
   <span class="kwa">procedure</span> Eval_A_Times<span class="sym">(</span>U <span class="sym">:</span> Matrix<span class="sym">;</span> Au <span class="sym">:</span> <span class="kwa">out</span> Matrix<span class="sym">);</span>
   <span class="kwa">procedure</span> Eval_At_Times<span class="sym">(</span>U <span class="sym">:</span> Matrix<span class="sym">;</span> Au <span class="sym">:</span> <span class="kwa">out</span> Matrix<span class="sym">);</span>
   <span class="kwa">procedure</span> Eval_Ata_Times_U<span class="sym">(</span>U <span class="sym">:</span> Matrix<span class="sym">;</span> Atau <span class="sym">:</span> <span class="kwa">out</span> Matrix<span class="sym">);</span>
<span class="kwa">end</span> Spectral_Utils<span class="sym">;</span>

<span class="slc">-----------------------------------------</span>
<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Jim Rogers</span>
<span class="slc">-----------------------------------------</span>
<span class="kwa">package body</span> Spectral_Utils <span class="kwa">is</span>

   <span class="kwa">function</span> Eval_A <span class="sym">(</span>I<span class="sym">,</span> J <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Long_Float</span> <span class="kwa">is</span>
   <span class="kwa">begin</span>
      <span class="kwa">return</span> <span class="num">1.0</span> <span class="sym">/</span> <span class="kwb">Long_Float</span><span class="sym">((</span>I <span class="sym">+</span> J<span class="sym">) * (</span>I <span class="sym">+</span> J <span class="sym">+</span> <span class="num">1</span><span class="sym">) /</span><span class="num">2</span> <span class="sym">+</span> I <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
   <span class="kwa">end</span> Eval_A<span class="sym">;</span>

   <span class="kwa">procedure</span> Eval_A_Times <span class="sym">(</span>U <span class="sym">:</span> Matrix<span class="sym">;</span> Au <span class="sym">:</span> <span class="kwa">out</span> Matrix<span class="sym">)</span> <span class="kwa">is</span>
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> Au<span class="sym">'</span><span class="kwa">range loop</span>
         Au<span class="sym">(</span>I<span class="sym">) :=</span> <span class="num">0.0</span><span class="sym">;</span>
         <span class="kwa">for</span> J <span class="kwa">in</span> U<span class="sym">'</span><span class="kwa">range loop</span>
            Au<span class="sym">(</span>I<span class="sym">) :=</span> Au<span class="sym">(</span>I<span class="sym">) +</span> Eval_A<span class="sym">(</span>I<span class="sym">,</span> J<span class="sym">) *</span> U<span class="sym">(</span>J<span class="sym">);</span>
         <span class="kwa">end loop</span><span class="sym">;</span>
      <span class="kwa">end loop</span><span class="sym">;</span>
   <span class="kwa">end</span> Eval_A_Times<span class="sym">;</span>

   <span class="kwa">procedure</span> Eval_At_Times <span class="sym">(</span>U <span class="sym">:</span> Matrix<span class="sym">;</span> Au <span class="sym">:</span> <span class="kwa">out</span> Matrix<span class="sym">)</span> <span class="kwa">is</span>
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> Au<span class="sym">'</span><span class="kwa">range loop</span>
         Au<span class="sym">(</span>I<span class="sym">) :=</span> <span class="num">0.0</span><span class="sym">;</span>
         <span class="kwa">for</span> J <span class="kwa">in</span> U<span class="sym">'</span><span class="kwa">range loop</span>
            Au<span class="sym">(</span>I<span class="sym">) :=</span> Au<span class="sym">(</span>I<span class="sym">) +</span> Eval_A<span class="sym">(</span>J<span class="sym">,</span> I<span class="sym">) *</span> U<span class="sym">(</span>J<span class="sym">);</span>
         <span class="kwa">end loop</span><span class="sym">;</span>
      <span class="kwa">end loop</span><span class="sym">;</span>
   <span class="kwa">end</span> Eval_At_Times<span class="sym">;</span>

   <span class="kwa">procedure</span> Eval_Ata_Times_U <span class="sym">(</span>U <span class="sym">:</span> Matrix<span class="sym">;</span> Atau <span class="sym">:</span> <span class="kwa">out</span> Matrix<span class="sym">)</span> <span class="kwa">is</span>
      V <span class="sym">:</span> Matrix<span class="sym">(</span><span class="num">0</span>..U<span class="sym">'</span>Length <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
   <span class="kwa">begin</span>
      Eval_A_Times<span class="sym">(</span>U<span class="sym">,</span> V<span class="sym">);</span>
      Eval_At_Times<span class="sym">(</span>V<span class="sym">,</span> Atau<span class="sym">);</span>
   <span class="kwa">end</span> Eval_Ata_Times_U<span class="sym">;</span>

<span class="kwa">end</span> Spectral_Utils<span class="sym">;</span>

<span class="slc">-----------------------------------------------------------</span>
<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Jim Rogers</span>
<span class="slc">-----------------------------------------------------------</span>

<span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span>
<span class="kwa">with</span> Ada.Numerics.Generic_Elementary_Functions <span class="sym">;</span>
<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;</span>
<span class="kwa">with</span> Spectral_Utils<span class="sym">;</span> <span class="kwa">use</span> Spectral_Utils<span class="sym">;</span>

<span class="kwa">procedure</span> SpectralNorm <span class="kwa">is</span>
   <span class="kwa">package</span> Long_Io <span class="kwa">is new</span> Ada.Text_Io.Float_Io<span class="sym">(</span><span class="kwb">Long_Float</span><span class="sym">);</span>
   <span class="kwa">package</span> Long_Funcs <span class="kwa">is new</span> Ada.Numerics.Generic_Elementary_Functions<span class="sym">(</span><span class="kwb">Long_Float</span><span class="sym">);</span>
   <span class="kwa">use</span> Long_Funcs<span class="sym">;</span>
   N <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">100</span><span class="sym">;</span>
   Vbv<span class="sym">,</span> vv <span class="sym">:</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">if</span> Argument_Count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span>
      N <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));</span>
   <span class="kwa">end if</span><span class="sym">;</span>

   <span class="kwa">declare</span>
      U <span class="sym">:</span> Matrix<span class="sym">(</span><span class="num">0</span>..N<span class="sym">-</span><span class="num">1</span><span class="sym">) := (</span><span class="kwa">Others</span> <span class="sym">=&gt;</span> <span class="num">1.0</span><span class="sym">);</span>
      V <span class="sym">:</span> Matrix<span class="sym">(</span><span class="num">0</span>..N<span class="sym">-</span><span class="num">1</span><span class="sym">) := (</span><span class="kwa">Others</span> <span class="sym">=&gt;</span> <span class="num">0.0</span><span class="sym">);</span>
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span>.<span class="num">.10</span> <span class="kwa">loop</span>
         Eval_Ata_Times_U<span class="sym">(</span>U<span class="sym">,</span> V<span class="sym">);</span>
         Eval_Ata_Times_U<span class="sym">(</span>V<span class="sym">,</span> U<span class="sym">);</span>
      <span class="kwa">end loop</span><span class="sym">;</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> V<span class="sym">'</span><span class="kwa">range loop</span>
         Vbv <span class="sym">:=</span> Vbv <span class="sym">+</span> U<span class="sym">(</span>I<span class="sym">) *</span> V<span class="sym">(</span>I<span class="sym">);</span>
         Vv <span class="sym">:=</span> Vv <span class="sym">+</span> V<span class="sym">(</span>I<span class="sym">)*</span>V<span class="sym">(</span>I<span class="sym">);</span>
      <span class="kwa">end loop</span><span class="sym">;</span>
   <span class="kwa">end</span><span class="sym">;</span>
   Long_Io.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Sqrt<span class="sym">(</span>Vbv<span class="sym">/</span>Vv<span class="sym">),</span> Fore <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">,</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);</span>
   Ada.Text_Io.New_Line<span class="sym">;</span>
<span class="kwa">end</span> SpectralNorm<span class="sym">;</span>





