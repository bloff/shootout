<span class="com">(* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy (Oberon-2 novice)

   To run:   Mandelbrot 200
*)</span>


<span class="kwa">MODULE</span> Mandelbrot<span class="sym">;
</span><span class="kwa">IMPORT</span> LangShootout<span class="sym">,</span> Out<span class="sym">;

</span><span class="kwa">CONST
</span>   m <span class="sym">=</span> <span class="num">50</span><span class="sym">;
</span>   limit2 <span class="sym">=</span> <span class="num">4.0</span><span class="sym">;

</span><span class="kwa">VAR
</span>   width<span class="sym">,</span> height<span class="sym">,</span> y<span class="sym">,</span> x<span class="sym">,</span> i<span class="sym">,</span> bits<span class="sym">,</span> bitnum<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span>   isOverLimit<span class="sym">:</span> <span class="kwb">BOOLEAN</span><span class="sym">;
</span>   Zr<span class="sym">,</span> Zi<span class="sym">,</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> Tr<span class="sym">,</span> Ti<span class="sym">:</span> <span class="kwb">REAL</span><span class="sym">;

</span><span class="kwa">BEGIN
</span>   width <span class="sym">:=</span> LangShootout<span class="sym">.</span>Argi<span class="sym">();
</span>   height <span class="sym">:=</span> width<span class="sym">;

</span>   Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;P4&quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span>   Out<span class="sym">.</span>Int<span class="sym">(</span>width<span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Char<span class="sym">(</span><span class="num">20X</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>width<span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;

</span>   FOR y <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> height<span class="num">-1</span> <span class="kwa">DO
</span>      FOR x <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> width<span class="num">-1</span> <span class="kwa">DO

</span>         Zr <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;</span> Zi <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>         Cr <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> x <span class="sym">/</span> width <span class="num">- 1.5</span><span class="sym">;
</span>	 Ci <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> y <span class="sym">/</span> height <span class="num">- 1.0</span><span class="sym">;

</span>         i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">REPEAT
</span>            Tr <span class="sym">:=</span> Zr<span class="sym">*</span>Zr <span class="sym">-</span> Zi<span class="sym">*</span>Zi <span class="sym">+</span> Cr<span class="sym">;
</span>            Ti <span class="sym">:=</span> <span class="num">2</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci<span class="sym">;
</span>            Zr <span class="sym">:=</span> Tr<span class="sym">;</span> Zi <span class="sym">:=</span> Ti<span class="sym">;
</span>	    <span class="kwa">INC</span><span class="sym">(</span>i<span class="sym">);
</span>	    isOverLimit <span class="sym">:=</span> Zr<span class="sym">*</span>Zr <span class="sym">+</span> Zi<span class="sym">*</span>Zi <span class="sym">&gt;</span> limit2<span class="sym">;
</span>         <span class="kwa">UNTIL</span> isOverLimit <span class="kwa">OR</span> <span class="sym">(</span>i <span class="sym">=</span> m<span class="sym">);

</span>	 bits <span class="sym">:=</span> <span class="kwa">ASH</span><span class="sym">(</span>bits<span class="sym">,</span><span class="num">1</span><span class="sym">);
</span>	 <span class="kwa">IF</span> ~isOverLimit <span class="kwa">THEN INC</span><span class="sym">(</span>bits<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
</span>	 <span class="kwa">INC</span><span class="sym">(</span>bitnum<span class="sym">);

</span>	 <span class="kwa">IF</span> x <span class="sym">=</span> width <span class="num">- 1</span> <span class="kwa">THEN
</span>	    bits <span class="sym">:=</span> <span class="kwa">ASH</span><span class="sym">(</span>bits<span class="sym">,</span><span class="num">8</span><span class="sym">-</span>bitnum<span class="sym">);</span> bitnum <span class="sym">:=</span> <span class="num">8</span><span class="sym">;
</span>	 <span class="kwa">END</span><span class="sym">;

</span>	 <span class="kwa">IF</span> bitnum <span class="sym">=</span> <span class="num">8</span> <span class="kwa">THEN
</span>	    Out<span class="sym">.</span>Char<span class="sym">(</span><span class="kwa">CHR</span><span class="sym">(</span>bits<span class="sym">));</span> bits <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span> bitnum <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	 <span class="kwa">END</span><span class="sym">;

</span>      <span class="kwa">END</span><span class="sym">;
</span>   <span class="kwa">END</span><span class="sym">;
</span><span class="kwa">END</span> Mandelbrot<span class="sym">.</span>
