<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;; strcat.scm
</FONT></I>
(declare (fixnum) (disable-interrupts))

<I><FONT COLOR="#B22222">;;; SPECIFICATION
</FONT></I>
<I><FONT COLOR="#B22222">;For this test, each program should be implemented in the same way, 
</FONT></I><I><FONT COLOR="#B22222">;according to the following specification. 
</FONT></I><I><FONT COLOR="#B22222">;
</FONT></I><I><FONT COLOR="#B22222">;    pseudocode for strcat test
</FONT></I><I><FONT COLOR="#B22222">;
</FONT></I><I><FONT COLOR="#B22222">;   s is initialized to the null string
</FONT></I><I><FONT COLOR="#B22222">;   repeat N times:
</FONT></I><I><FONT COLOR="#B22222">;     append &quot;hello\n&quot; to s
</FONT></I><I><FONT COLOR="#B22222">;   count the number of individual characters in s
</FONT></I><I><FONT COLOR="#B22222">;   print the count
</FONT></I>
<I><FONT COLOR="#B22222">;  There should be N distinct string append statements done in a loop. 
</FONT></I><I><FONT COLOR="#B22222">;  After each append the resultant string should be 6 characters 
</FONT></I><I><FONT COLOR="#B22222">;  longer (the length of &quot;hello\n&quot;). 
</FONT></I><I><FONT COLOR="#B22222">;  s should be a string, string buffer, or character array. 
</FONT></I><I><FONT COLOR="#B22222">;  The program should not construct a list of strings and join it. 
</FONT></I>
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">hello</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;hello\n&quot;</FONT></B>)

<I><FONT COLOR="#B22222">;; Simple slow version
</FONT></I><I><FONT COLOR="#B22222">;; This is surprisingly slow
</FONT></I>

<I><FONT COLOR="#B22222">;(define (main args)
</FONT></I><I><FONT COLOR="#B22222">;  (let* ((n (or (and (= (length args) 2) (string-&gt;number (cadr args))) 1))
</FONT></I><I><FONT COLOR="#B22222">;  (str &quot;&quot;))
</FONT></I><I><FONT COLOR="#B22222">;    (do ((i 0 (+ i 1)))
</FONT></I><I><FONT COLOR="#B22222">; ((= i n))
</FONT></I><I><FONT COLOR="#B22222">;      (set! str (string-append str hello)))
</FONT></I><I><FONT COLOR="#B22222">;    (display (string-length str))
</FONT></I><I><FONT COLOR="#B22222">;    (newline)))
</FONT></I>

<I><FONT COLOR="#B22222">;; Quote from Bigloo documentation
</FONT></I>
<I><FONT COLOR="#B22222">;; (blit-string! string1 o1 string2 o2 len)
</FONT></I><I><FONT COLOR="#B22222">;; Fill string s2 starting at position o2 with len characters 
</FONT></I><I><FONT COLOR="#B22222">;; taken out of string s1 from position o1.
</FONT></I><I><FONT COLOR="#B22222">;;
</FONT></I><I><FONT COLOR="#B22222">;; (let ((s (make-string 20 #\-)))
</FONT></I><I><FONT COLOR="#B22222">;;         (blit-string! &quot;toto&quot; 0 s 16 4)
</FONT></I><I><FONT COLOR="#B22222">;;         s)
</FONT></I><I><FONT COLOR="#B22222">;;    =&gt; &quot;----------------toto&quot;
</FONT></I>
 
(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">blit-string!</FONT></B> s1 o1 s2 o2 len)
  (<B><FONT COLOR="#A020F0">do</FONT></B> ((o1 o1 (+ o1 1))
       (o2 o2 (+ o2 1))
       (len len (- len 1)))
    
      ((= len 0))
    
    (string-set! s2 o2 (string-ref s1 o1))))

<I><FONT COLOR="#B22222">;; Serranos version (works like a charm)
</FONT></I>
(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((n (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (pair? args) (string-&gt;number (car args))) 
                1))
	 (i 0)
	 (buflen 32)
	 (strbuf (make-string buflen))
	 (stufflen (string-length hello))
	 (stuff hello)
	 (stuffstart 0))

    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (+ i 1)))
	((= i n))
      (<B><FONT COLOR="#A020F0">if</FONT></B> (&gt;= (+ stufflen stuffstart) buflen)
	  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((nbuflen (* 2 buflen))
		 (nstrbuf (make-string nbuflen)))
	    (blit-string! strbuf 0 nstrbuf 0 buflen)
	    (<B><FONT COLOR="#A020F0">set!</FONT></B> buflen nbuflen)
	    (<B><FONT COLOR="#A020F0">set!</FONT></B> strbuf nstrbuf)))
      (blit-string! stuff 0 strbuf stuffstart stufflen)
      (<B><FONT COLOR="#A020F0">set!</FONT></B> stuffstart (+ stuffstart stufflen)))
     
    (<B><FONT COLOR="#A020F0">set!</FONT></B> strbuf (substring strbuf 0 stuffstart))
     
    (display (string-length strbuf))
    (newline)))

(main (command-line-arguments))</pre></td></tr></table>
