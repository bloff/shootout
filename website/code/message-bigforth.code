\ The Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\
\ contributed by Ian Osgood
\ modified by Bernd Paysan

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

variable receiver  \ task being poked
variable data      \ data being poked
variable finished
variable sums

<span class="sym">:</span> <span class="kwd">poke</span> <span class="sym">(</span> task data <span class="sym">-- )</span>
  begin receiver &#64; <span class="kwa">while</span> pause repeat
  data <span class="sym">!</span> dup receiver <span class="sym">!</span> wake <span class="sym">;</span>

<span class="sym">:</span> peek? <span class="sym">(</span> task <span class="sym">--</span> data T <span class="sym">|</span> F <span class="sym">)</span>
  receiver &#64; <span class="sym">=</span> dup <span class="kwa">if</span> receiver off  data &#64; swap then <span class="sym">;</span>

Variable xtasks

<span class="sym">:</span> sum<span class="sym">-</span><span class="kwd">task</span> <span class="sym">( --</span> <span class="kwa">new</span><span class="sym">-</span>task <span class="sym">)</span>
  <span class="num">1</span> xtasks <span class="sym">+!</span>
  <span class="num">640 640</span> NewTask dup dup <span class="num">0 2</span> rot pass
  <span class="sym">(</span> <span class="kwa">this</span><span class="sym">-</span>task sum <span class="sym">-- )</span>
  begin
    begin pause over peek? until
    <span class="num">1</span><span class="sym">+ +</span>
  finished &#64; until
  sums <span class="sym">!</span> drop <span class="sym">-</span><span class="num">1</span> xtasks <span class="sym">+! ;</span>

<span class="sym">:</span> <span class="kwd">xtask</span> <span class="sym">(</span> next<span class="sym">-</span>task <span class="sym">--</span> <span class="kwa">new</span><span class="sym">-</span>task <span class="sym">)</span>
  <span class="num">1</span> xtasks <span class="sym">+!</span>
  <span class="num">64</span> dup NewTask tuck <span class="num">2</span> over pass
  <span class="sym">(</span> next<span class="sym">-</span>task <span class="kwa">this</span><span class="sym">-</span>task <span class="sym">-- )</span>
  begin
    over begin pause over peek? until
    <span class="num">1</span><span class="sym">+</span> poke
  finished &#64; until <span class="num">2</span>drop <span class="sym">-</span><span class="num">1</span> xtasks <span class="sym">+! ;</span>

<span class="sym">:</span> main   receiver off
  sum<span class="sym">-</span>task
  <span class="num">500 1</span> <span class="kwa">do</span> xtask loop
  NUM <span class="num">0</span> <span class="kwa">do</span> dup <span class="num">0</span> poke loop drop
  \ wait <span class="kwa">for</span> all tasks to finish
  finished on
  begin pause xtasks &#64; <span class="num">0</span><span class="sym">=</span> until
  sums &#64; <span class="num">1</span> u<span class="sym">.</span>r cr <span class="sym">;</span>

main bye  \ done<span class="sym">!</span>
