<span class="slc">;;; The Great Computer Language Shootout
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; contributed by Dima Dorfman, 2005
</span>
<span class="sym">(</span><span class="kwa">defun</span> nsieve <span class="sym">(</span>m<span class="sym">)
  (</span>declare <span class="sym">(</span><span class="kwa">type</span> integer m<span class="sym">))
  (</span>let <span class="sym">((</span>a <span class="sym">(</span>make<span class="sym">-</span>array <span class="sym">(</span><span class="kwa">list</span> m<span class="sym">) :</span>initial<span class="sym">-</span>element t
		       <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'boolean)))
    (flet ((clear (i)
	     (loop for j from (+ i i) to (1- m) by i
		   do (setf (aref a j) nil))))
      (loop for i from 2 to (1- m)
	    when (aref a i) do (clear i)
	    count (aref a i)))))

(defun test (n)
  (let ((m (* 10000 (expt 2 n))))
    (format t &quot;Primes up to~T~d~T~d~%&quot; m (nsieve m))))

(defun main ()
  (let* ((args #+sbcl sb-ext:*posix-argv*
	       #+cmu extensions:*command-line-strings*
	       #+gcl si::*command-args*)
	 (n (parse-integer (car (last args)))))
    (when (&gt;= n 0) (test n))
    (when (&gt;= n 1) (test (- n 1)))
    (when (&gt;= n 2) (test (- n 2)))))</span>
