<span class="line">    1 </span>
<span class="line">    2 </span><span class="slc">-- Implementation of 'wordfreq' benchmark optimised for time and memory
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- $Id: wordfreq-hugs.code,v 1.4 2004-11-13 07:43:33 bfulgham Exp $
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">-- Author: Tomasz Zielonka &lt;t.zielonka&#64;students.mimuw.edu.pl&gt;
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">-- compile with: ghc -O2 -o wordfreq wordfreq.hs
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="kwa">import</span> System.IO
<span class="line">    9 </span><span class="kwa">import</span> Data.Array.IO
<span class="line">   10 </span><span class="kwa">import</span> Data.Array.Base
<span class="line">   11 </span><span class="kwa">import</span> Data.Word
<span class="line">   12 </span><span class="kwa">import</span> Data.<span class="kwb">Int
</span><span class="line">   13 </span><span class="kwb"></span><span class="kwa">import</span> Data.HashTable <span class="kwa">as</span> HashTable
<span class="line">   14 </span><span class="kwa">import</span> Data.IORef
<span class="line">   15 </span><span class="kwa">import</span> List
<span class="line">   16 </span><span class="kwa">import</span> <span class="kwb">Char
</span><span class="line">   17 </span><span class="kwb">
</span><span class="line">   18 </span><span class="kwb"></span>myHashString <span class="sym">::</span> String <span class="sym">-&gt;</span> Int32
<span class="line">   19 </span>myHashString <span class="sym">=</span> fromIntegral . foldr f <span class="num">0
</span><span class="line">   20 </span><span class="num"></span>  <span class="kwa">where</span> f c m <span class="sym">=</span> ord c <span class="sym">+ (</span>m <span class="sym">*</span> <span class="num">67</span><span class="sym">)
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span>main <span class="sym">::</span> IO <span class="sym">()
</span><span class="line">   23 </span><span class="sym"></span>main <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   24 </span><span class="kwa"></span>    ht <span class="sym">&lt;-</span> HashTable.new <span class="sym">(==)</span> myHashString
<span class="line">   25 </span>
<span class="line">   26 </span>    <span class="kwa">let</span> handleReversedWord rw <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   27 </span><span class="kwa"></span>            l1 <span class="sym">&lt;-</span> HashTable.lookup ht rw
<span class="line">   28 </span>            <span class="kwa">case</span> l1 <span class="kwa">of
</span><span class="line">   29 </span><span class="kwa"></span>                Just ref <span class="sym">-&gt;</span> incr ref
<span class="line">   30 </span>                Nothing <span class="sym">-&gt;</span> <span class="kwa">do
</span><span class="line">   31 </span><span class="kwa"></span>                    ref <span class="sym">&lt;-</span> newIORef <span class="sym">(</span><span class="num">1</span> <span class="sym">::</span> <span class="kwb">Int</span><span class="sym">)
</span><span class="line">   32 </span><span class="sym"></span>                    HashTable.insert ht rw ref
<span class="line">   33 </span>
<span class="line">   34 </span>    iterateOnReversedWords stdin handleReversedWord
<span class="line">   35 </span>
<span class="line">   36 </span>    l <span class="sym">&lt;-</span> HashTable.toList ht
<span class="line">   37 </span>    l <span class="sym">&lt;-</span> mapM <span class="sym">(</span>\<span class="sym">(</span>rw<span class="sym">,</span> ref<span class="sym">) -&gt;</span> <span class="kwa">do</span> n <span class="sym">&lt;-</span> readIORef ref<span class="sym">;</span> return <span class="sym">(</span>n<span class="sym">,</span> reverse rw<span class="sym">))</span> l
<span class="line">   38 </span>
<span class="line">   39 </span>    mapM_ <span class="sym">(</span>putStrLn . pretty<span class="sym">) (</span>sortBy <span class="sym">(</span>flip compare<span class="sym">)</span> l<span class="sym">)
</span><span class="line">   40 </span><span class="sym">
</span><span class="line">   41 </span><span class="sym"></span>  <span class="kwa">where
</span><span class="line">   42 </span><span class="kwa"></span>    pretty <span class="sym">(</span>n<span class="sym">,</span>w<span class="sym">) =</span> pad <span class="num">7</span> <span class="sym">(</span>show n<span class="sym">) ++</span> <span class="str">&quot; &quot;</span> <span class="sym">++</span> w
<span class="line">   43 </span>    pad n s <span class="sym">=</span> replicate <span class="sym">(</span>n <span class="sym">-</span> length s<span class="sym">)</span> <span class="str">' '</span> <span class="sym">++</span> s
<span class="line">   44 </span>    incr ref <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   45 </span><span class="kwa"></span>        x <span class="sym">&lt;-</span> readIORef ref
<span class="line">   46 </span>        writeIORef ref $<span class="sym">! (</span>x <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   47 </span><span class="sym">
</span><span class="line">   48 </span><span class="sym"></span><span class="slc">------------------------------------------------------------------
</span><span class="line">   49 </span><span class="slc"></span>
<span class="line">   50 </span>iterateOnReversedWords <span class="sym">::</span> Handle <span class="sym">-&gt; (</span>String <span class="sym">-&gt;</span> IO <span class="sym">()) -&gt;</span> IO <span class="sym">()
</span><span class="line">   51 </span><span class="sym"></span>iterateOnReversedWords h f <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   52 </span><span class="kwa"></span>    cs <span class="sym">&lt;-</span> fileIterate h <span class="str">&quot;&quot;</span> aux
<span class="line">   53 </span>    aux cs <span class="str">' '</span>
<span class="line">   54 </span>    return <span class="sym">()
</span><span class="line">   55 </span><span class="sym"></span>  <span class="kwa">where
</span><span class="line">   56 </span><span class="kwa"></span>    aux cs c
<span class="line">   57 </span>        <span class="sym">|</span> isAlpha c <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   58 </span><span class="kwa">            let</span> c<span class="str">' = toLower c
</span><span class="line">   59 </span><span class="str">            return (c'</span> <span class="sym">:</span> cs<span class="sym">)
</span><span class="line">   60 </span><span class="sym">        |</span> not <span class="sym">(</span>null cs<span class="sym">) =</span> <span class="kwa">do
</span><span class="line">   61 </span><span class="kwa"></span>            f cs
<span class="line">   62 </span>            return <span class="sym">[]
</span><span class="line">   63 </span><span class="sym">        |</span> otherwise <span class="sym">=</span> return <span class="sym">[]
</span><span class="line">   64 </span><span class="sym">
</span><span class="line">   65 </span><span class="sym"></span><span class="com">{-# INLINE fileIterate #-}</span>
<span class="line">   66 </span>
<span class="line">   67 </span>fileIterate <span class="sym">::</span> Handle <span class="sym">-&gt;</span> a <span class="sym">-&gt; (</span>a <span class="sym">-&gt;</span> <span class="kwb">Char</span> <span class="sym">-&gt;</span> IO a<span class="sym">) -&gt;</span> IO a
<span class="line">   68 </span>fileIterate h a0 f <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   69 </span><span class="kwa"></span>    buf <span class="sym">&lt;-</span> newArray_ <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> bufSize <span class="num">- 1</span><span class="sym">) ::</span> IO <span class="sym">(</span>IOUArray <span class="kwb">Int</span> Word8<span class="sym">)
</span><span class="line">   70 </span><span class="sym"></span>    <span class="kwa">let</span> loop i n a
<span class="line">   71 </span>            <span class="sym">|</span> i <span class="sym">==</span> n <span class="sym">=
</span><span class="line">   72 </span><span class="sym"></span>                <span class="kwa">do</span>  n<span class="str">' &lt;- hGetArray h buf bufSize
</span><span class="line">   73 </span><span class="str">                    if n'</span> <span class="sym">==</span> <span class="num">0
</span><span class="line">   74 </span><span class="num"></span>                        <span class="kwa">then</span> return a
<span class="line">   75 </span>                        <span class="kwa">else</span> loop <span class="num">0</span> n<span class="str">' a
</span><span class="line">   76 </span><span class="str">            | otherwise =
</span><span class="line">   77 </span><span class="str">                do  c &lt;- fmap (toEnum . fromEnum) (readArray buf i)
</span><span class="line">   78 </span><span class="str">
</span><span class="line">   79 </span><span class="str">                    a'</span> <span class="sym">&lt;-</span> f a c
<span class="line">   80 </span>
<span class="line">   81 </span>                    loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> n a<span class="str">'
</span><span class="line">   82 </span><span class="str">    loop 0 0 a0
</span><span class="line">   83 </span><span class="str">  where
</span><span class="line">   84 </span><span class="str">    bufSize :: Int
</span><span class="line">   85 </span><span class="str">    bufSize = 4096
</span><span class="line">   86 </span><span class="str"></span>
