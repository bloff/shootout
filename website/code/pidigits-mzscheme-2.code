#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">; The Computer Language Shootout</span>
<span class="slc">; http://shootout.alioth.debian.org/</span>
<span class="slc">; Sven Hartrumpf 2005-04-12</span>
<span class="slc">; Implements 'Spigot' algorithm origionally due to Stanly Rabinowitz.</span>
<span class="slc">; This program is based on an implementation for SCM by Aubrey Jaffer and</span>
<span class="slc">; Jerry D. Hedden.</span>

<span class="sym">(</span>module pidigits mzscheme

  <span class="sym">(</span>define <span class="sym">(</span>pi n d<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ((</span>r <span class="sym">(</span>inexact<span class="sym">-&gt;</span>exact <span class="sym">(</span>floor <span class="sym">(</span><span class="kwa">exp</span> <span class="sym">(*</span> d <span class="sym">(</span><span class="kwa">log</span> <span class="num">10</span><span class="sym">))))))</span> <span class="slc">; 10^d</span>
           <span class="sym">(</span>p <span class="sym">(+ (</span>quotient n d<span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
           <span class="sym">(</span>m <span class="sym">(</span>quotient <span class="sym">(*</span> p d <span class="num">3322</span><span class="sym">)</span> <span class="num">1000</span><span class="sym">))</span>
           <span class="sym">(</span>a <span class="sym">(</span>make<span class="sym">-</span>vector <span class="sym">(+</span> m <span class="num">1</span><span class="sym">)</span> <span class="num">2</span><span class="sym">))</span>
	   <span class="sym">(</span>out <span class="sym">(</span>current<span class="sym">-</span>output<span class="sym">-</span>port<span class="sym">)))</span>
      <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a m <span class="num">4</span><span class="sym">)</span>
      <span class="sym">(</span>let j<span class="sym">-</span>loop <span class="sym">([</span>b <span class="num">2</span><span class="sym">][</span>digits <span class="num">0</span><span class="sym">])</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> digits n<span class="sym">)</span>
	    <span class="slc">;; Add whitespace for ungenerated digits</span>
	    <span class="sym">(</span>let <span class="sym">([</span>left <span class="sym">(</span>modulo digits <span class="num">10</span><span class="sym">)])</span>
	      <span class="sym">(</span>unless <span class="sym">(</span>zero? left<span class="sym">)</span>
		<span class="sym">(</span>fprintf out <span class="str">&quot;~a</span><span class="esc">\t</span><span class="str">:~a</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>make<span class="sym">-</span>string <span class="sym">(-</span> <span class="num">10</span> left<span class="sym">)</span> #\space<span class="sym">)</span> n<span class="sym">)))</span>
	    <span class="slc">;; Compute more digits</span>
	    <span class="sym">(</span>let loop <span class="sym">([</span>k m<span class="sym">][</span>q <span class="num">0</span><span class="sym">])</span>
	      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? k<span class="sym">)</span>
		  <span class="sym">(</span>let<span class="sym">* ((</span>s <span class="sym">(</span>let <span class="sym">([</span>s <span class="sym">(</span>number<span class="sym">-&gt;</span>string <span class="sym">(+</span> b <span class="sym">(</span>quotient q r<span class="sym">)))])</span>
			      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? digits<span class="sym">)</span>
				  s
				  <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> <span class="sym">(</span>make<span class="sym">-</span>string <span class="sym">(-</span> d <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> s<span class="sym">))</span> #\0<span class="sym">)</span> s<span class="sym">)))))</span>
		    <span class="sym">(</span>j<span class="sym">-</span>loop <span class="sym">(</span>remainder q r<span class="sym">)</span>
			    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>digits out s <span class="num">0</span> <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> s<span class="sym">)</span> digits n<span class="sym">)))</span>
		  <span class="sym">(</span>let <span class="sym">([</span>q <span class="sym">(+</span> q <span class="sym">(* (</span>vector<span class="sym">-</span>ref a k<span class="sym">)</span> r<span class="sym">))])</span>
		    <span class="sym">(</span>let <span class="sym">((</span>t <span class="sym">(+ (*</span> k <span class="num">2</span><span class="sym">)</span> <span class="num">1</span><span class="sym">)))</span>
		      <span class="sym">(</span>let<span class="sym">-</span>values <span class="sym">([(</span>qt rr<span class="sym">) (</span>quotient<span class="sym">/</span>remainder q t<span class="sym">)])</span>
			<span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a k rr<span class="sym">)</span>
			<span class="sym">(</span>loop <span class="sym">(</span>sub1 k<span class="sym">) (*</span> k qt<span class="sym">)))))))))))</span>

  <span class="sym">(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>digits out s start end digits n<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ([</span>len <span class="sym">(-</span> end start<span class="sym">)]</span>
	   <span class="sym">[</span>cnt <span class="sym">(</span><span class="kwa">min</span> len <span class="sym">(-</span> n digits<span class="sym">) (-</span> <span class="num">10</span> <span class="sym">(</span>modulo digits <span class="num">10</span><span class="sym">))</span> len<span class="sym">)])</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? cnt<span class="sym">)</span>
	  digits
	  <span class="sym">(</span>begin
	    <span class="sym">(</span>write<span class="sym">-</span>string s out start <span class="sym">(+</span> start cnt<span class="sym">))</span>
	    <span class="sym">(</span>let <span class="sym">([</span>digits <span class="sym">(+</span> digits cnt<span class="sym">)])</span>
	      <span class="sym">(</span>when <span class="sym">(</span>zero? <span class="sym">(</span>modulo digits <span class="num">10</span><span class="sym">))</span>
		<span class="sym">(</span>fprintf out <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:~a</span><span class="esc">\n</span><span class="str">&quot;</span> digits<span class="sym">))</span>
	      <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>digits out s <span class="sym">(+</span> start cnt<span class="sym">)</span> end digits n<span class="sym">))))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">0</span><span class="sym">)</span>
                 <span class="num">1</span>
                 <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">)))))</span>
      <span class="sym">(</span>pi n <span class="num">10</span><span class="sym">)))</span>

  <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
