<span class="com">/*</span>
<span class="com">The Computer Language Shootout</span>
<span class="com">http://shootout.alioth.debian.org/</span>
<span class="com">Contributed by Jesse Millikan</span>
<span class="com">*/</span>

<span class="slc">// Return hash t with frequency in &quot;n&quot;</span>
<span class="kwa">function</span> <span class="kwd">frequency</span><span class="sym">(</span>seq<span class="sym">,</span> <span class="kwc">length</span><span class="sym">){</span>
 <span class="kwa">var</span> m<span class="sym">,</span> i<span class="sym">,</span> t <span class="sym">= {},</span> n <span class="sym">=</span> seq<span class="sym">.</span><span class="kwc">length</span> <span class="sym">-</span> <span class="kwc">length</span> <span class="sym">+</span> <span class="num">1</span>

 <span class="kwa">for</span><span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++){</span>
  m <span class="sym">=</span> seq<span class="sym">.</span><span class="kwc">substr</span><span class="sym">(</span>i<span class="sym">,</span> <span class="kwc">length</span><span class="sym">)</span>
  t<span class="sym">[</span>m<span class="sym">] = (</span>t<span class="sym">[</span>m<span class="sym">] ||</span> <span class="num">0</span><span class="sym">) +</span> <span class="num">1</span>
 <span class="sym">}</span>

 t<span class="sym">.</span>n <span class="sym">=</span> n
 <span class="kwa">return</span> t
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwc">sort</span><span class="sym">(</span>seq<span class="sym">,</span> <span class="kwc">length</span><span class="sym">){</span>
 <span class="kwa">var</span> f <span class="sym">=</span> <span class="kwd">frequency</span><span class="sym">(</span>seq<span class="sym">,</span> <span class="kwc">length</span><span class="sym">),</span> keys <span class="sym">= [],</span> k<span class="sym">,</span> i

 <span class="slc">// Put all keys in key array in reverse</span>
 <span class="kwa">for</span><span class="sym">(</span>k <span class="kwa">in</span> f<span class="sym">)</span>
  <span class="kwa">if</span><span class="sym">(</span>k <span class="sym">!=</span> <span class="str">'n'</span><span class="sym">)</span> keys<span class="sym">.</span><span class="kwd">unshift</span><span class="sym">(</span>k<span class="sym">)</span>

 keys<span class="sym">.</span><span class="kwc">sort</span><span class="sym">(</span><span class="kwa">function</span><span class="sym">(</span>a<span class="sym">,</span> b<span class="sym">){</span> <span class="kwa">return</span> f<span class="sym">[</span>b<span class="sym">] -</span> f<span class="sym">[</span>a<span class="sym">] })</span>

 <span class="kwa">for</span><span class="sym">(</span>i <span class="kwa">in</span> keys<span class="sym">)</span>
  <span class="kwc">print</span><span class="sym">(</span>keys<span class="sym">[</span>i<span class="sym">].</span><span class="kwc">toUpperCase</span><span class="sym">() +</span> <span class="str">&quot; &quot;</span> <span class="sym">+ (</span>f<span class="sym">[</span>keys<span class="sym">[</span>i<span class="sym">]] *</span> <span class="num">100</span> <span class="sym">/</span> f<span class="sym">.</span>n<span class="sym">).</span><span class="kwd">toFixed</span><span class="sym">(</span><span class="num">3</span><span class="sym">))</span>

 <span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">)</span>
<span class="sym">}</span>

<span class="kwa">function</span> <span class="kwd">find</span><span class="sym">(</span>seq<span class="sym">,</span> s<span class="sym">){</span>
 <span class="kwa">var</span> f <span class="sym">=</span> <span class="kwd">frequency</span><span class="sym">(</span>seq<span class="sym">,</span> s<span class="sym">.</span><span class="kwc">length</span><span class="sym">)</span>
 <span class="kwc">print</span><span class="sym">((</span>f<span class="sym">[</span>s<span class="sym">] ||</span> <span class="num">0</span><span class="sym">) +</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> <span class="sym">+</span> s<span class="sym">.</span><span class="kwc">toUpperCase</span><span class="sym">())</span>
<span class="sym">}</span>

<span class="kwa">var</span> seq<span class="sym">=</span><span class="str">&quot;&quot;</span><span class="sym">,</span> l<span class="sym">,</span> others <span class="sym">= [</span><span class="str">&quot;ggt&quot;</span><span class="sym">,</span> <span class="str">&quot;ggta&quot;</span><span class="sym">,</span> <span class="str">&quot;ggtatt&quot;</span><span class="sym">,</span> <span class="str">&quot;ggtattttaatt&quot;</span><span class="sym">,</span> <span class="str">&quot;ggtattttaatttatagt&quot;</span><span class="sym">]</span>

<span class="kwa">while</span><span class="sym">(!</span><span class="kwd">readline</span><span class="sym">().</span><span class="kwc">match</span><span class="sym">(/</span>^<span class="sym">&gt;</span>THREE<span class="sym">/));</span> <span class="slc">// no body</span>

<span class="kwa">while</span><span class="sym">((</span>l <span class="sym">=</span> <span class="kwd">readline</span><span class="sym">()) &amp;&amp; !</span>l<span class="sym">.</span><span class="kwc">match</span><span class="sym">(/</span>^<span class="sym">&gt;/))</span>
 seq <span class="sym">+=</span> l

<span class="kwc">sort</span><span class="sym">(</span>seq<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
<span class="kwc">sort</span><span class="sym">(</span>seq<span class="sym">,</span> <span class="num">2</span><span class="sym">)</span>

<span class="kwa">for</span><span class="sym">(</span>i <span class="kwa">in</span> others<span class="sym">)</span>
 <span class="kwd">find</span><span class="sym">(</span>seq<span class="sym">,</span> others<span class="sym">[</span>i<span class="sym">])</span>

