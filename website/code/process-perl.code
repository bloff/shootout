<span class="slc">#!/usr/bin/perl</span>

<span class="slc"># perl thread benchmark for The Great Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># Contributed by Steve Clark</span>

<span class="slc"># perl threads creates an interpreter per thread so this won't</span>
<span class="slc"># be pretty.</span>
<span class="kwa">use</span> threads<span class="sym">;</span>

<span class="slc"># The thread code blocks til it gets a message, then sends it</span>
<span class="slc"># Argument is reference to last thread</span>
<span class="kwa">sub</span> inc_thread <span class="sym">{</span>
    <span class="kwc">my</span> <span class="kwb">$thr</span> <span class="sym">=</span> shift<span class="sym">;</span>
    <span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$num</span><span class="sym">) =</span> <span class="kwb">$thr</span><span class="sym">-&gt;</span>join<span class="sym">;</span>
    <span class="kwb">$num</span><span class="sym">++;</span>
    <span class="kwa">return</span> <span class="sym">(</span><span class="kwb">$num</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="slc"># special thread to kick off the chain</span>
<span class="kwa">sub</span> zero_thread <span class="sym">{</span>
    <span class="kwa">return</span> <span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>


<span class="slc"># Algorithm:</span>
<span class="slc">#   Create n threads from 1 to n</span>
<span class="slc">#   Each thread x has ref to thread x-1</span>
<span class="slc">#   Creates extra zero_thread to send 0 to start of chain</span>
<span class="slc">#   prints return of last thread created</span>

<span class="kwa">sub</span> dothread <span class="sym">{</span>
    <span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">=</span> shift<span class="sym">;</span>
    <span class="kwc">my</span> <span class="kwb">$thread</span> <span class="sym">=</span> threads<span class="sym">-&gt;</span><span class="kwd">new</span><span class="sym">(</span><span class="esc">\&amp;</span>zero_thread<span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span> <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="kwb">$n</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {</span>
	<span class="kwb">$thread</span> <span class="sym">=</span> threads<span class="sym">-&gt;</span><span class="kwd">new</span><span class="sym">(</span><span class="esc">\&amp;</span>inc_thread<span class="sym">,</span> <span class="kwb">$thread</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="slc"># Now wait for end</span>
    <span class="kwc">my</span> <span class="kwb">$num</span> <span class="sym">=</span> <span class="kwb">$thread</span><span class="sym">-&gt;</span>join<span class="sym">;</span>

    <span class="slc"># print the result</span>
    print <span class="str">&quot;$num</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
<span class="sym">}</span>


<span class="kwc">my</span> <span class="kwb">$NUM</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwb">$NUM</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$NUM</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">);</span>
<span class="kwd">dothread</span> <span class="sym">(</span><span class="kwb">$NUM</span><span class="sym">);</span>
