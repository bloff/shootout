<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: lisp -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: hash-poplisp.code,v 1.2 2004-11-08 08:15:13 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org/
</FONT></I>
(declaim (optimize (speed 3) (space 0) (safety 0) (debug 0) (compilation-speed 0)))
(defun command-line-argument ()
  (parse-integer (<B><FONT COLOR="#A020F0">or</FONT></B> (car pop11::poparglist) <B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B>)))

(defconstant +digit+ <B><FONT COLOR="#BC8F8F">&quot;0123456789ABCDEF&quot;</FONT></B>)

(defconstant +digits-needed+
  #(	(10 100 1000 10000 100000 10000000 100000000 536870911)
    	(16 256 4096 65536 1048576 16777216 268435456 4294967296 536870911)
    )
)

(defun fixnum-to-string (n base)
  (declare (fixnum n base))
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((size (position-if (<B><FONT COLOR="#A020F0">lambda</FONT></B> (x) (&gt; (the fixnum x) n))
			    (aref +digits-needed+ (ash base -4))))
	 (result (make-string (1+ size))))
    (loop for i fixnum from size downto 0 with q fixnum = n <B><FONT COLOR="#A020F0">and</FONT></B> r fixnum = 0
      <B><FONT COLOR="#A020F0">do</FONT></B> (multiple-value-setq (q r) (floor q base))
         (setf (schar result i) (aref +digit+ r)))
    result)
)

(defun main (&amp;optional (n (command-line-argument)))
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((hash (make-hash-table <B><FONT COLOR="#5F9EA0">:test</FONT></B> 'equal <B><FONT COLOR="#5F9EA0">:size</FONT></B> n)))
    (macrolet ((hash (i base) `(gethash (fixnum-to-string ,i ,base) hash)))
      (loop for i fixnum from 1 to n <B><FONT COLOR="#A020F0">do</FONT></B> (setf (hash i 16) i))
      (format t <B><FONT COLOR="#BC8F8F">&quot;~a~%&quot;</FONT></B> (loop for i fixnum from n downto 1 count (hash i 10))))))

(main)</pre></td></tr></table>
