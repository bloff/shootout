<span class="slc">#!/usr/bin/perl
</span>
<span class="slc"># The Great Computer Language Shootout
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># contributed by David Pyke
</span><span class="slc"># tweaked by Danny Sauer
</span>
<span class="kwa">use</span> constant IM <span class="sym">=&gt;</span> <span class="num">139968</span><span class="sym">;
</span><span class="kwa">use</span> constant IA <span class="sym">=&gt;</span> <span class="num">3877</span><span class="sym">;
</span><span class="kwa">use</span> constant IC <span class="sym">=&gt;</span> <span class="num">29573</span><span class="sym">;

</span><span class="kwa">use</span> constant LINELENGTH <span class="sym">=&gt;</span> <span class="num">60</span><span class="sym">;

</span><span class="kwc">my</span> <span class="kwb">$LAST</span> <span class="sym">=</span> <span class="num">42</span><span class="sym">;
</span><span class="kwa">sub</span> gen_random <span class="sym">(</span><span class="kwb">$</span><span class="sym">) {
</span>    <span class="kwa">return</span> <span class="sym">( (</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">] * (</span><span class="kwb">$LAST</span> <span class="sym">= (</span><span class="kwb">$LAST</span> <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> % IM<span class="sym">)) /</span> IM <span class="sym">);
}

</span><span class="kwa">sub</span> makeCumulative<span class="sym">(</span><span class="kwb">$</span><span class="sym">){
</span>    <span class="kwc">my</span><span class="sym">(</span><span class="kwb">$genelist</span><span class="sym">) =</span> &#64;_<span class="sym">;
</span>    <span class="kwb">$cp</span> <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;

</span>    <span class="kwa">foreach</span> <span class="sym">(</span>&#64;<span class="kwb">$genelist</span><span class="sym">){
</span>        <span class="kwb">$_</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">] =</span> <span class="kwb">$cp</span> <span class="sym">+=</span> <span class="kwb">$_</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">];
    }
}

</span><span class="kwa">sub</span> selectRandom<span class="sym">(</span><span class="kwb">$</span><span class="sym">){
</span>    <span class="kwc">my</span><span class="sym">(</span><span class="kwb">$genelist</span><span class="sym">) =</span> &#64;_<span class="sym">;
</span>    <span class="kwb">$r</span> <span class="sym">=</span> gen_random <span class="sym">(</span><span class="num">1</span><span class="sym">);

</span>    <span class="kwa">foreach</span> <span class="sym">(</span>&#64;<span class="kwb">$genelist</span><span class="sym">){
</span>        <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$r</span> <span class="sym">&lt;</span> <span class="kwb">$_</span><span class="sym">-&gt;[</span><span class="num">1</span><span class="sym">]){</span> <span class="kwa">return</span> <span class="kwb">$_</span><span class="sym">-&gt;[</span><span class="num">0</span><span class="sym">]; }
    }
}


</span><span class="kwa">sub</span> makeRandomFasta<span class="sym">(</span><span class="kwb">$$$$</span><span class="sym">){
</span><span class="slc">#void makeRandomFasta (const char * id, const char * desc, const struct aminoacids * genelist, int count, int n) {
</span>    <span class="kwc">my</span><span class="sym">(</span><span class="kwb">$id</span><span class="sym">,</span><span class="kwb">$desc</span><span class="sym">,</span><span class="kwb">$n</span><span class="sym">,</span><span class="kwb">$genelist</span><span class="sym">) =</span> &#64;_<span class="sym">;

</span>    print <span class="str">&quot;&gt;$id $desc</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span>    <span class="kwb">$pick</span><span class="sym">=</span><span class="str">''</span><span class="sym">;

</span>    <span class="slc"># print whole lines
</span>    <span class="kwa">foreach</span> <span class="sym">(</span><span class="num">1</span> .. int<span class="sym">(</span><span class="kwb">$n</span> <span class="sym">/</span> LINELENGTH<span class="sym">) ){
</span>        <span class="kwa">foreach</span> <span class="sym">(</span><span class="num">1</span> ..  LINELENGTH <span class="sym">){
</span>            <span class="kwb">$pick</span> .<span class="sym">=</span> selectRandom<span class="sym">(</span><span class="kwb">$genelist</span><span class="sym">);
        }
</span>        print <span class="str">&quot;$pick</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span>        <span class="kwb">$pick</span> <span class="sym">=</span> <span class="str">''</span><span class="sym">;
    }
</span>    <span class="slc">#print remaining line (if required)
</span>    <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$n</span> % LINELENGTH<span class="sym">){
</span>        <span class="kwa">foreach</span> <span class="sym">(</span><span class="num">1</span> ..  <span class="kwb">$n</span> % LINELENGTH <span class="sym">){
</span>            <span class="kwb">$pick</span> .<span class="sym">=</span> selectRandom<span class="sym">(</span><span class="kwb">$genelist</span><span class="sym">);
        }
</span>        print <span class="str">&quot;$pick</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
    }
}

</span><span class="kwa">sub</span> makeRepeatFasta<span class="sym">(</span><span class="kwb">$$$$</span><span class="sym">){
</span><span class="slc">#void makeRepeatFasta (const char * id, const char * desc, const char * s, int n) {
</span>    <span class="slc"># we want to print $n characters of $s (repeated if nessary) with newlines every LINELENGTH
</span>    <span class="kwc">my</span><span class="sym">(</span><span class="kwb">$id</span><span class="sym">,</span><span class="kwb">$desc</span><span class="sym">,</span><span class="kwb">$s</span><span class="sym">,</span><span class="kwb">$n</span><span class="sym">) =</span> &#64;_<span class="sym">;

</span>    print <span class="str">&quot;&gt;$id $desc</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;

</span>    <span class="slc"># what we need, and the extra (if any) will be discarded.
</span>    <span class="kwa">foreach</span> <span class="sym">(</span><span class="num">1</span> .. int<span class="sym">(</span><span class="kwb">$n</span> <span class="sym">/</span> LINELENGTH<span class="sym">) ){
</span>        <span class="kwa">while</span> <span class="sym">(</span>length <span class="kwb">$ss</span> <span class="sym">&lt;</span> LINELENGTH<span class="sym">){
</span>            <span class="kwb">$ss</span> .<span class="sym">=</span> <span class="kwb">$s</span><span class="sym">;
        }
</span>        print substr<span class="sym">(</span><span class="kwb">$ss</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span>LINELENGTH<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span>        <span class="kwb">$ss</span> <span class="sym">=</span> substr<span class="sym">(</span><span class="kwb">$ss</span><span class="sym">,</span>LINELENGTH<span class="sym">);
    }
</span>    <span class="slc">#final_line
</span>    <span class="kwa">while</span> <span class="sym">(</span>length <span class="kwb">$ss</span> <span class="sym">&lt;</span> LINELENGTH<span class="sym">){
</span>        <span class="kwb">$ss</span> .<span class="sym">=</span> <span class="kwb">$s</span><span class="sym">;
    }
</span>    print substr<span class="sym">(</span><span class="kwb">$ss</span><span class="sym">,</span> <span class="num">0</span><span class="sym">, (</span><span class="kwb">$n</span> % LINELENGTH<span class="sym">)),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span>print STDERR <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
}


</span><span class="kwc">my</span> <span class="kwb">$iub</span> <span class="sym">= [
    [</span> <span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span> <span class="sym">],
    [</span> <span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span> <span class="sym">],
    [</span> <span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span> <span class="sym">],
    [</span> <span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span> <span class="sym">],
    [</span> <span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">],
    [</span> <span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">],
    [</span> <span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">],
    [</span> <span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">],
    [</span> <span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">],
    [</span> <span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">],
    [</span> <span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">],
    [</span> <span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">],
    [</span> <span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">],
    [</span> <span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">],
    [</span> <span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">]
];

</span><span class="kwc">my</span> <span class="kwb">$homosapiens</span> <span class="sym">= [
    [</span> <span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span> <span class="sym">],
    [</span> <span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span> <span class="sym">],
    [</span> <span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span> <span class="sym">],
    [</span> <span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span> <span class="sym">]
];

</span><span class="kwb">$alu</span> <span class="sym">=
</span>    <span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span> .
    <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span> .
    <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span> .
    <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span> .
    <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span> .
    <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span> .
    <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span><span class="sym">;

</span><span class="slc">######################################################################
</span><span class="slc">#main
</span>
<span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">= (</span><span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">1000</span><span class="sym">) ;

</span>makeCumulative <span class="kwb">$iub</span><span class="sym">;
</span>makeCumulative <span class="kwb">$homosapiens</span><span class="sym">;

</span>makeRepeatFasta <span class="sym">(</span><span class="str">'ONE'</span><span class="sym">,</span> <span class="str">'Homo sapiens alu'</span><span class="sym">,</span> <span class="kwb">$alu</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">*</span><span class="num">2</span><span class="sym">);
</span>makeRandomFasta <span class="sym">(</span><span class="str">'TWO'</span><span class="sym">,</span> <span class="str">'IUB ambiguity codes'</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">*</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">$iub</span><span class="sym">);
</span>makeRandomFasta <span class="sym">(</span><span class="str">'THREE'</span><span class="sym">,</span> <span class="str">'Homo sapiens frequency'</span><span class="sym">,</span> <span class="kwb">$n</span><span class="sym">*</span><span class="num">5</span><span class="sym">,</span> <span class="kwb">$homosapiens</span><span class="sym">);

</span>exit <span class="num">0</span><span class="sym">;

</span><span class="slc">#END OF FILE</span>
