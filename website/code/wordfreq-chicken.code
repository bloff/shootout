<span class="slc">;;;; -Ob
</span>
<span class="slc">;
</span><span class="slc">;  Originally wordfreq.mzscheme by Grzegorz Chrupaa
</span><span class="slc">;
</span>
<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>uses format regex srfi<span class="num">-13</span><span class="sym">))

(</span>define <span class="sym">(</span>main . _<span class="sym">)
  (</span>define table <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table string<span class="sym">=</span>?<span class="sym">))
  (</span>let loop <span class="sym">()
    (</span>let <span class="sym">([</span>ln <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)])
      (</span>unless <span class="sym">(</span>eof<span class="sym">-</span>object? ln<span class="sym">)
	(</span>parse<span class="sym">-</span><span class="kwa">line</span> ln table<span class="sym">)
	(</span>loop<span class="sym">) ) ) )
  (</span>hash<span class="sym">-</span>table<span class="sym">-</span>remove<span class="sym">!</span> table <span class="str">&quot;&quot;</span><span class="sym">)
  (</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>pair<span class="sym">)
              (</span>let <span class="sym">((</span>word <span class="sym">(</span><span class="kwa">car</span> pair<span class="sym">))
                    (</span>count <span class="sym">(</span><span class="kwa">cdr</span> pair<span class="sym">)))
                 (</span>format #t <span class="str">&quot;~7D ~A~&amp;&quot;</span> count word<span class="sym">)))
            (</span>sort <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-&gt;</span><span class="kwa">list</span> table<span class="sym">)
                  (</span><span class="kwa">lambda</span> <span class="sym">(</span>pair1 pair2<span class="sym">)
                    (</span><span class="kwa">or</span> <span class="sym">(&gt; (</span><span class="kwa">cdr</span> pair1<span class="sym">) (</span><span class="kwa">cdr</span> pair2<span class="sym">))
                        (</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">cdr</span> pair1<span class="sym">) (</span><span class="kwa">cdr</span> pair2<span class="sym">))
                             (</span>string<span class="sym">&lt;</span>? <span class="sym">(</span><span class="kwa">car</span> pair2<span class="sym">) (</span><span class="kwa">car</span> pair1<span class="sym">))))))))

(</span>define rx <span class="sym">(</span>regexp <span class="str">&quot;[^a-zA-Z]+&quot;</span><span class="sym">))

(</span>define <span class="sym">(</span>parse<span class="sym">-</span><span class="kwa">line line</span> table<span class="sym">)
  (</span>string<span class="sym">-</span>downcase<span class="sym">!</span> <span class="kwa">line</span><span class="sym">)
  (</span>for<span class="sym">-</span>each
   <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>word<span class="sym">)
     (</span>let <span class="sym">((</span>count <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>ref table word <span class="num">0</span><span class="sym">)))
       (</span>hash<span class="sym">-</span>table<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> table word <span class="sym">(+</span> count <span class="num">1</span><span class="sym">))))
   (</span>string<span class="sym">-</span>split<span class="sym">-</span>fields rx <span class="kwa">line</span> #<span class="sym">:</span>infix<span class="sym">)))

(</span>main<span class="sym">)</span>
