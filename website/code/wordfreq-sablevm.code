<span class="line">    1 </span><span class="slc">// $Id: wordfreq-sablevm.code,v 1.4 2004-11-13 07:43:36 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// Collection class code is from my friend Phil Chu, Thanks Phil!
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span><span class="kwa">class</span> Counter <span class="sym">{
</span><span class="line">   10 </span><span class="sym"></span>    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   11 </span><span class="sym">}
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span><span class="kwa">public class</span> wordfreq <span class="sym">{
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {
</span><span class="line">   16 </span><span class="sym"></span>        wf<span class="sym">();
</span><span class="line">   17 </span><span class="sym">    }
</span><span class="line">   18 </span><span class="sym">
</span><span class="line">   19 </span><span class="sym"></span>    <span class="kwa">public static</span> <span class="kwc">String</span> padleft<span class="sym">(</span><span class="kwc">String</span> s<span class="sym">,</span><span class="kwb">int</span> n<span class="sym">,</span><span class="kwb">char</span> c<span class="sym">) {
</span><span class="line">   20 </span><span class="sym"></span>        <span class="kwb">int</span> len <span class="sym">=</span> s<span class="sym">.</span>length<span class="sym">();
</span><span class="line">   21 </span><span class="sym"></span>        <span class="kwa">if</span><span class="sym">(</span> len<span class="sym">&gt;=</span>n <span class="sym">)</span> <span class="kwa">return</span> s<span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>        <span class="kwb">char</span><span class="sym">[]</span> buf <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>n<span class="sym">];
</span><span class="line">   23 </span><span class="sym"></span>        <span class="kwa">for</span><span class="sym">(</span> <span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>n<span class="sym">-</span>len<span class="sym">;</span>i<span class="sym">++ )</span> buf<span class="sym">[</span>i<span class="sym">]=</span>c<span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span>        s<span class="sym">.</span>getChars<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>len<span class="sym">,</span>buf<span class="sym">,</span>n<span class="sym">-</span>len<span class="sym">);
</span><span class="line">   25 </span><span class="sym"></span>        <span class="kwa">return new</span> <span class="kwc">String</span><span class="sym">(</span>buf<span class="sym">);
</span><span class="line">   26 </span><span class="sym">    }
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym"></span>    <span class="kwa">public static</span> <span class="kwb">void</span> wf<span class="sym">() {
</span><span class="line">   29 </span><span class="sym"></span>        <span class="kwc">HashMap</span> map <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();
</span><span class="line">   30 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   31 </span><span class="sym"></span>            <span class="kwc">Reader</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span><span class="line">   32 </span><span class="sym"></span>            <span class="kwc">StreamTokenizer</span> st <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StreamTokenizer</span><span class="sym">(</span>r<span class="sym">);
</span><span class="line">   33 </span><span class="sym"></span>            st<span class="sym">.</span>lowerCaseMode<span class="sym">(</span>true<span class="sym">);
</span><span class="line">   34 </span><span class="sym"></span>            st<span class="sym">.</span>whitespaceChars<span class="sym">(</span> <span class="num">0</span><span class="sym">,</span> <span class="num">64</span> <span class="sym">);
</span><span class="line">   35 </span><span class="sym"></span>            st<span class="sym">.</span>wordChars<span class="sym">(</span><span class="num">65</span><span class="sym">,</span> <span class="num">90</span><span class="sym">);
</span><span class="line">   36 </span><span class="sym"></span>            st<span class="sym">.</span>whitespaceChars<span class="sym">(</span> <span class="num">91</span><span class="sym">,</span> <span class="num">96</span> <span class="sym">);
</span><span class="line">   37 </span><span class="sym"></span>            st<span class="sym">.</span>wordChars<span class="sym">(</span><span class="num">97</span><span class="sym">,</span> <span class="num">122</span><span class="sym">);
</span><span class="line">   38 </span><span class="sym"></span>            st<span class="sym">.</span>whitespaceChars<span class="sym">(</span> <span class="num">123</span><span class="sym">,</span> <span class="num">255</span> <span class="sym">);
</span><span class="line">   39 </span><span class="sym"></span>            <span class="kwb">int</span> tt <span class="sym">=</span> st<span class="sym">.</span>nextToken<span class="sym">();
</span><span class="line">   40 </span><span class="sym"></span>            <span class="kwa">while</span> <span class="sym">(</span>tt <span class="sym">!=</span> <span class="kwc">StreamTokenizer</span><span class="sym">.</span>TT_EOF<span class="sym">) {
</span><span class="line">   41 </span><span class="sym"></span>                <span class="kwa">if</span> <span class="sym">(</span>tt <span class="sym">==</span> <span class="kwc">StreamTokenizer</span><span class="sym">.</span>TT_WORD<span class="sym">) {
</span><span class="line">   42 </span><span class="sym"></span>                    <span class="kwa">if</span> <span class="sym">(</span>map<span class="sym">.</span>containsKey<span class="sym">(</span>st<span class="sym">.</span>sval<span class="sym">)) {
</span><span class="line">   43 </span><span class="sym">                        ((</span>Counter<span class="sym">)</span>map<span class="sym">.</span>get<span class="sym">(</span>st<span class="sym">.</span>sval<span class="sym">)).</span>count<span class="sym">++;
</span><span class="line">   44 </span><span class="sym">                    }</span> <span class="kwa">else</span> <span class="sym">{
</span><span class="line">   45 </span><span class="sym"></span>                        map<span class="sym">.</span>put<span class="sym">(</span>st<span class="sym">.</span>sval<span class="sym">,</span> <span class="kwa">new</span> Counter<span class="sym">());
</span><span class="line">   46 </span><span class="sym">                    }
</span><span class="line">   47 </span><span class="sym">                }
</span><span class="line">   48 </span><span class="sym"></span>                tt <span class="sym">=</span> st<span class="sym">.</span>nextToken<span class="sym">();
</span><span class="line">   49 </span><span class="sym">            }
</span><span class="line">   50 </span><span class="sym">        }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span><span class="line">   51 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
</span><span class="line">   52 </span><span class="sym"></span>            <span class="kwa">return</span><span class="sym">;
</span><span class="line">   53 </span><span class="sym">        }
</span><span class="line">   54 </span><span class="sym">
</span><span class="line">   55 </span><span class="sym"></span>        <span class="kwc">Collection</span> entries <span class="sym">=</span> map<span class="sym">.</span>entrySet<span class="sym">();
</span><span class="line">   56 </span><span class="sym"></span>        <span class="slc">// flatten the entries set into a vector for sorting
</span><span class="line">   57 </span><span class="slc"></span>        <span class="kwc">Vector</span> rev_wf <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Vector</span><span class="sym">(</span>entries<span class="sym">);
</span><span class="line">   58 </span><span class="sym">
</span><span class="line">   59 </span><span class="sym"></span>        <span class="slc">// Sort the vector according to its value
</span><span class="line">   60 </span><span class="slc"></span>        <span class="kwc">Collections</span><span class="sym">.</span>sort<span class="sym">(</span>rev_wf<span class="sym">,</span> <span class="kwa">new</span> <span class="kwc">Comparator</span><span class="sym">() {
</span><span class="line">   61 </span><span class="sym"></span>                <span class="kwa">public</span> <span class="kwb">int</span> compare<span class="sym">(</span><span class="kwc">Object</span> o1<span class="sym">,</span> <span class="kwc">Object</span> o2<span class="sym">) {
</span><span class="line">   62 </span><span class="sym"></span>                    <span class="slc">// First sort by frequency
</span><span class="line">   63 </span><span class="slc"></span>                    <span class="kwb">int</span> c <span class="sym">= ((</span>Counter<span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o2<span class="sym">).</span>getValue<span class="sym">()).</span>count <span class="sym">- ((</span>Counter<span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o1<span class="sym">).</span>getValue<span class="sym">()).</span>count<span class="sym">;
</span><span class="line">   64 </span><span class="sym"></span>                    <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span> <span class="slc">// Second sort by lexicographical order
</span><span class="line">   65 </span><span class="slc"></span>                        c <span class="sym">= ((</span><span class="kwc">String</span><span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o2<span class="sym">).</span>getKey<span class="sym">()).</span>compareTo<span class="sym">((</span><span class="kwc">String</span><span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o1<span class="sym">).</span>getKey<span class="sym">());
</span><span class="line">   66 </span><span class="sym">                    }
</span><span class="line">   67 </span><span class="sym"></span>                    <span class="kwa">return</span> c<span class="sym">;
</span><span class="line">   68 </span><span class="sym">                }
</span><span class="line">   69 </span><span class="sym">            }
</span><span class="line">   70 </span><span class="sym">                         );
</span><span class="line">   71 </span><span class="sym">
</span><span class="line">   72 </span><span class="sym"></span>        <span class="kwc">Iterator</span> it <span class="sym">=</span> rev_wf<span class="sym">.</span>iterator<span class="sym">();
</span><span class="line">   73 </span><span class="sym"></span>        <span class="kwc">Map</span><span class="sym">.</span>Entry ent<span class="sym">;
</span><span class="line">   74 </span><span class="sym"></span>        <span class="kwc">String</span> word<span class="sym">;
</span><span class="line">   75 </span><span class="sym"></span>        <span class="kwb">int</span> count<span class="sym">;
</span><span class="line">   76 </span><span class="sym"></span>        <span class="kwa">while</span><span class="sym">(</span>it<span class="sym">.</span>hasNext<span class="sym">()) {
</span><span class="line">   77 </span><span class="sym"></span>            ent <span class="sym">= (</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>it<span class="sym">.</span>next<span class="sym">();
</span><span class="line">   78 </span><span class="sym"></span>            word <span class="sym">= ((</span><span class="kwc">String</span><span class="sym">)</span>ent<span class="sym">.</span>getKey<span class="sym">());
</span><span class="line">   79 </span><span class="sym"></span>            count <span class="sym">= ((</span>Counter<span class="sym">)</span>ent<span class="sym">.</span>getValue<span class="sym">()).</span>count<span class="sym">;
</span><span class="line">   80 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>padleft<span class="sym">(</span><span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>count<span class="sym">),</span><span class="num">7</span><span class="sym">,</span><span class="str">' '</span><span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> word<span class="sym">);
</span><span class="line">   81 </span><span class="sym">        }
</span><span class="line">   82 </span><span class="sym">    }
</span><span class="line">   83 </span><span class="sym">}</span>
