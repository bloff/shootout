<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: regexmatch-g++.code,v 1.1 2004-11-02 08:52:40 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">// From Bill Lear
</FONT></I>

#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iostream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;zopyra/regx&gt;</FONT></B>

using namespace std;

<B><FONT COLOR="#228B22">typedef</FONT></B> pair&lt;<B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>*, <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>*&gt; span;

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> ac, <B><FONT COLOR="#228B22">char</FONT></B>* av[]) {
    <B><FONT COLOR="#5F9EA0">zopyra</FONT></B>::regx re(
	<B><FONT COLOR="#BC8F8F">&quot;(?x)	          # set extended flag for embedded comment fun\n&quot;</FONT></B>
        <B><FONT COLOR="#BC8F8F">&quot;(?:^|[^\\d(])    # must be preceded by non-digit\n&quot;</FONT></B>
        <B><FONT COLOR="#BC8F8F">&quot;([(])?           # match 1: possible initial left paren\n&quot;</FONT></B>
        <B><FONT COLOR="#BC8F8F">&quot;(\\d{3})         # match 2: area code is 3 digits\n&quot;</FONT></B>
        <B><FONT COLOR="#BC8F8F">&quot;(?(1)[)])        # if match1 then match right paren\n&quot;</FONT></B>
        <B><FONT COLOR="#BC8F8F">&quot;[ ]              # area code followed by one space\n&quot;</FONT></B>
        <B><FONT COLOR="#BC8F8F">&quot;(\\d{3})         # match 3: prefix of 3 digits\n&quot;</FONT></B>
        <B><FONT COLOR="#BC8F8F">&quot;[- ]             # separator is either space or dash\n&quot;</FONT></B>
        <B><FONT COLOR="#BC8F8F">&quot;(\\d{4})         # match 4: last 4 digits\n&quot;</FONT></B>
        <B><FONT COLOR="#BC8F8F">&quot;(?:\\D|\\b)      # followed by non-digit or break\n&quot;</FONT></B>
	);
    
    string line;
    vector&lt;span&gt; lines;
    <B><FONT COLOR="#A020F0">while</FONT></B> (getline(cin, line)) {
        <B><FONT COLOR="#228B22">char</FONT></B>* phone = <B><FONT COLOR="#A020F0">new</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>[line.size()];
        copy(line.begin(), line.end(), phone);
        lines.push_back(span(phone, phone + line.size()));
    }

    size_t ITER = (ac == 2 ? (atoi(av[1]) &lt; 1 ? 1 : atoi(av[1])): 1);

    <B><FONT COLOR="#228B22">char</FONT></B> num[13];
    num[0] = <B><FONT COLOR="#BC8F8F">'('</FONT></B>;
    num[4] = <B><FONT COLOR="#BC8F8F">')'</FONT></B>;
    num[5] = <B><FONT COLOR="#BC8F8F">' '</FONT></B>;
    num[9] = <B><FONT COLOR="#BC8F8F">'-'</FONT></B>;
    size_t count = 0;
    <B><FONT COLOR="#A020F0">while</FONT></B> (ITER--) {
        vector&lt;span&gt;::iterator end = lines.end();
        <B><FONT COLOR="#A020F0">for</FONT></B> (vector&lt;span&gt;::iterator i = lines.begin(); i != end; ++i) {
            <B><FONT COLOR="#5F9EA0">zopyra</FONT></B>::regx::iterator p = re.find(i-&gt;first, i-&gt;second);
            <B><FONT COLOR="#A020F0">if</FONT></B> (p++ != re.end()) {
                <B><FONT COLOR="#228B22">char</FONT></B>* num_p = &amp;num[1];
                ++p;
                copy(p-&gt;first, p-&gt;second, num_p);

                num_p = &amp;num[6];
                ++p;
                copy(p-&gt;first, p-&gt;second, num_p);

                num_p = &amp;num[10];
                ++p;
                copy(p-&gt;first, p-&gt;second, num_p);

                <B><FONT COLOR="#A020F0">if</FONT></B> (!ITER) {
                    cout &lt;&lt; ++count &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot;: &quot;</FONT></B>;
                    copy(num, num + 14, ostream_iterator&lt;<B><FONT COLOR="#228B22">char</FONT></B>&gt;(cout));
                    cout &lt;&lt; <B><FONT COLOR="#BC8F8F">'\n'</FONT></B>;
                }
            }
        }
    }
}</pre></td></tr></table>
