<span class="com">/* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * contributed by  Robert Brandner</span>
<span class="com"> * based on the Java version by Jarkko Miettinen</span>
<span class="com"> */</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">) {</span>

	<span class="kwb">int</span> minDepth <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>

	<span class="kwb">int</span> n <span class="sym">=</span> argc <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">] :</span> <span class="num">10</span><span class="sym">;</span>

	<span class="kwb">int</span> maxDepth <span class="sym">= (</span>minDepth <span class="sym">+</span> <span class="num">2</span> <span class="sym">&gt;</span> n<span class="sym">)</span> ? minDepth <span class="sym">+</span> <span class="num">2</span> <span class="sym">:</span> n<span class="sym">;</span>
	<span class="kwb">int</span> stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

	<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth &quot;</span> <span class="sym">+</span> stretchDepth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> <span class="sym">+</span> <span class="kwd">itemCheck</span><span class="sym">(</span><span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>stretchDepth<span class="sym">)) +</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

	TreeNode longLivedTree <span class="sym">=</span> <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">);</span>

	<span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> depth<span class="sym">=</span>minDepth<span class="sym">;</span> depth<span class="sym">&lt;=</span>maxDepth<span class="sym">;</span> depth<span class="sym">+=</span><span class="num">2</span><span class="sym">){</span>
		<span class="kwb">int</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);</span>
		<span class="kwb">int</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>iterations<span class="sym">;</span> i<span class="sym">++){</span>
			check <span class="sym">+=</span> <span class="kwd">itemCheck</span><span class="sym">(</span><span class="kwd">bottomUpTree</span><span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">));</span>
			check <span class="sym">+=</span> <span class="kwd">itemCheck</span><span class="sym">(</span><span class="kwd">bottomUpTree</span><span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">));</span>
		<span class="sym">}</span>
		<span class="kwa">write</span><span class="sym">((</span>iterations<span class="sym">*</span><span class="num">2</span><span class="sym">) +</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span> <span class="sym">+</span> depth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> <span class="sym">+</span> check<span class="sym">+</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth &quot;</span> <span class="sym">+</span> maxDepth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">+</span> <span class="kwd">itemCheck</span><span class="sym">(</span>longLivedTree<span class="sym">)+</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
<span class="sym">}</span>

TreeNode <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="kwb">int</span> item<span class="sym">,</span> <span class="kwb">int</span> depth<span class="sym">) {</span>
	<span class="kwd">if</span> <span class="sym">(</span>depth<span class="sym">&gt;</span><span class="num">0</span><span class="sym">) {</span>
		return <span class="kwd">TreeNode</span><span class="sym">(</span>item<span class="sym">,</span> <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">),</span> <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>
	<span class="sym">}</span>
	else <span class="sym">{</span>
		return <span class="kwd">TreeNode</span><span class="sym">(</span>item<span class="sym">);</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">itemCheck</span><span class="sym">(</span>TreeNode t<span class="sym">) {</span>
	<span class="kwd">if</span> <span class="sym">(</span>t<span class="sym">-&gt;</span>left<span class="sym">==</span><span class="num">0</span><span class="sym">) {</span>return t<span class="sym">-&gt;</span>item<span class="sym">;}</span>
	else <span class="sym">{</span>return t<span class="sym">-&gt;</span>item <span class="sym">+</span> <span class="kwd">itemCheck</span><span class="sym">(</span>t<span class="sym">-&gt;</span>left<span class="sym">) -</span> <span class="kwd">itemCheck</span><span class="sym">(</span>t<span class="sym">-&gt;</span>right<span class="sym">);}</span>
<span class="sym">}</span>

class TreeNode <span class="sym">{</span>
	TreeNode left<span class="sym">,</span> right<span class="sym">;</span>
	<span class="kwb">int</span> item<span class="sym">;</span>

	<span class="kwb">void</span> <span class="kwd">create</span><span class="sym">(</span><span class="kwb">int</span> it<span class="sym">,</span> TreeNode<span class="sym">|</span><span class="kwb">void</span> l<span class="sym">,</span> TreeNode<span class="sym">|</span><span class="kwb">void</span> r<span class="sym">) {</span>
		item <span class="sym">=</span> it<span class="sym">;</span>
		left <span class="sym">=</span> l<span class="sym">;</span>
		right <span class="sym">=</span> r<span class="sym">;</span>
	<span class="sym">}</span>
<span class="sym">}</span>
