<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>

<span class="sym">(</span>module chameneos mzscheme

  <span class="sym">(</span>define <span class="sym">(</span>change c1 c2<span class="sym">)</span>
    <span class="sym">(</span>case c1
      <span class="sym">[(</span>red<span class="sym">)</span>
       <span class="sym">(</span>case c2	 <span class="sym">[(</span>blue<span class="sym">)</span> <span class="str">'yellow] [(yellow) '</span>blue<span class="sym">] [</span>else c1<span class="sym">])]</span>
      <span class="sym">[(</span>yellow<span class="sym">)</span>
       <span class="sym">(</span>case c2 <span class="sym">[(</span>blue<span class="sym">)</span> <span class="str">'red] [(red) '</span>blue<span class="sym">] [</span>else c1<span class="sym">])]</span>
      <span class="sym">[(</span>blue<span class="sym">)</span>
       <span class="sym">(</span>case c2 <span class="sym">[(</span>yellow<span class="sym">)</span> <span class="str">'red] [(red) '</span>yellow<span class="sym">] [</span>else c1<span class="sym">])]))</span>

  <span class="sym">(</span>define <span class="sym">(</span>place meeting<span class="sym">-</span>ch n<span class="sym">)</span>
    <span class="sym">(</span>thread
     <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
       <span class="sym">(</span>let loop <span class="sym">([</span>n n<span class="sym">])</span>
	 <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? n<span class="sym">)</span>
	     <span class="slc">;; Fade all:</span>
	     <span class="sym">(</span>let loop <span class="sym">()</span>
	       <span class="sym">(</span>let <span class="sym">([</span>c <span class="sym">(</span>channel<span class="sym">-</span>get meeting<span class="sym">-</span>ch<span class="sym">)])</span>
		 <span class="sym">(</span>channel<span class="sym">-</span>put <span class="sym">(</span><span class="kwa">car</span> c<span class="sym">)</span> #f<span class="sym">)</span>
		 <span class="sym">(</span>loop<span class="sym">)))</span>
	     <span class="slc">;; Let two meet:</span>
	     <span class="sym">(</span>let <span class="sym">([</span>c1 <span class="sym">(</span>channel<span class="sym">-</span>get meeting<span class="sym">-</span>ch<span class="sym">)]</span>
		   <span class="sym">[</span>c2 <span class="sym">(</span>channel<span class="sym">-</span>get meeting<span class="sym">-</span>ch<span class="sym">)])</span>
	       <span class="sym">(</span>channel<span class="sym">-</span>put <span class="sym">(</span><span class="kwa">car</span> c1<span class="sym">) (</span><span class="kwa">cdr</span> c2<span class="sym">))</span>
	       <span class="sym">(</span>channel<span class="sym">-</span>put <span class="sym">(</span><span class="kwa">car</span> c2<span class="sym">) (</span><span class="kwa">cdr</span> c1<span class="sym">))</span>
	       <span class="sym">(</span>loop <span class="sym">(</span>sub1 n<span class="sym">))))))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>creature color meeting<span class="sym">-</span>ch result<span class="sym">-</span>ch<span class="sym">)</span>
    <span class="sym">(</span>thread
     <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
       <span class="sym">(</span>let <span class="sym">([</span>ch <span class="sym">(</span>make<span class="sym">-</span>channel<span class="sym">)])</span>
	 <span class="sym">(</span>let loop <span class="sym">([</span>color color<span class="sym">][</span>met <span class="num">0</span><span class="sym">])</span>
	   <span class="sym">(</span>channel<span class="sym">-</span>put meeting<span class="sym">-</span>ch <span class="sym">(</span><span class="kwa">cons</span> ch color<span class="sym">))</span>
	   <span class="sym">(</span>let <span class="sym">([</span>other<span class="sym">-</span>color <span class="sym">(</span>channel<span class="sym">-</span>get ch<span class="sym">)])</span>
	     <span class="sym">(</span><span class="kwa">if</span> other<span class="sym">-</span>color
		 <span class="slc">;; Meet:</span>
		 <span class="sym">(</span>loop <span class="sym">(</span>change color other<span class="sym">-</span>color<span class="sym">) (</span>add1 met<span class="sym">))</span>
		 <span class="slc">;; Done:</span>
		 <span class="sym">(</span>channel<span class="sym">-</span>put result<span class="sym">-</span>ch met<span class="sym">))))))))</span>

  <span class="sym">(</span>let <span class="sym">([</span>result<span class="sym">-</span>ch <span class="sym">(</span>make<span class="sym">-</span>channel<span class="sym">)]</span>
	<span class="sym">[</span>meeting<span class="sym">-</span>ch <span class="sym">(</span>make<span class="sym">-</span>channel<span class="sym">)])</span>
    <span class="sym">(</span>place meeting<span class="sym">-</span>ch <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)</span> <span class="num">0</span><span class="sym">)))</span>
    <span class="sym">(</span>creature <span class="str">'blue meeting-ch result-ch)</span>
<span class="str">    (creature '</span>red meeting<span class="sym">-</span>ch result<span class="sym">-</span>ch<span class="sym">)</span>
    <span class="sym">(</span>creature <span class="str">'yellow meeting-ch result-ch)</span>
<span class="str">    (creature '</span>blue meeting<span class="sym">-</span>ch result<span class="sym">-</span>ch<span class="sym">)</span>
    <span class="sym">(</span>printf <span class="str">&quot;~a</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(+ (</span>channel<span class="sym">-</span>get result<span class="sym">-</span>ch<span class="sym">)</span>
		      <span class="sym">(</span>channel<span class="sym">-</span>get result<span class="sym">-</span>ch<span class="sym">)</span>
		      <span class="sym">(</span>channel<span class="sym">-</span>get result<span class="sym">-</span>ch<span class="sym">)</span>
		      <span class="sym">(</span>channel<span class="sym">-</span>get result<span class="sym">-</span>ch<span class="sym">)))))</span>
