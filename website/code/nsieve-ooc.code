<span class="com">(* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy (Oberon-2 novice)
*)</span>

<span class="kwa">MODULE</span> nsieve<span class="sym">;
</span><span class="kwa">IMPORT</span> Shootout<span class="sym">,</span>Out<span class="sym">;

</span><span class="kwa">TYPE
</span>   FlagsType <span class="sym">=</span> <span class="kwa">ARRAY OF</span> <span class="kwb">BOOLEAN</span><span class="sym">;

</span><span class="kwa">VAR
</span>   n<span class="sym">,</span> m<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span>   flags<span class="sym">:</span> <span class="kwb">POINTER</span> <span class="kwa">TO</span> FlagsType<span class="sym">;


</span><span class="kwa">PROCEDURE</span> NSieve<span class="sym">(</span>m<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span> <span class="kwa">VAR</span> isPrime<span class="sym">:</span> FlagsType<span class="sym">):</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="kwa">VAR
</span>   count<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="kwa">BEGIN
</span>   FOR i <span class="sym">:=</span> <span class="num">2</span> <span class="kwa">TO</span> m <span class="kwa">DO</span> isPrime<span class="sym">[</span>i<span class="sym">] :=</span> TRUE<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;

</span>   count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>   FOR i <span class="sym">:=</span> <span class="num">2</span> <span class="kwa">TO</span> m <span class="kwa">DO
      IF</span> isPrime<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">THEN
	 INC</span><span class="sym">(</span>count<span class="sym">);
</span>         k <span class="sym">:=</span> i<span class="sym">+</span>i<span class="sym">;
</span>         <span class="kwa">WHILE</span> k <span class="sym">&lt;=</span> m <span class="kwa">DO
</span>            isPrime<span class="sym">[</span>k<span class="sym">] :=</span> FALSE<span class="sym">;
</span>	    <span class="kwa">INC</span><span class="sym">(</span>k<span class="sym">,</span> i<span class="sym">);
</span>         <span class="kwa">END</span><span class="sym">;
</span>      <span class="kwa">END</span><span class="sym">;
</span>   <span class="kwa">END</span><span class="sym">;
</span>   <span class="kwa">RETURN</span> count<span class="sym">;
</span><span class="kwa">END</span> NSieve<span class="sym">;

</span><span class="kwa">BEGIN
</span>   n <span class="sym">:=</span> Shootout<span class="sym">.</span>Argi<span class="sym">();
</span>   <span class="kwa">IF</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">THEN</span> n <span class="sym">:=</span> <span class="num">2</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;

</span>   m <span class="sym">:=</span> <span class="num">10000</span> <span class="sym">*</span> <span class="kwa">ASH</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">);
</span>   <span class="kwa">NEW</span><span class="sym">(</span>flags<span class="sym">,</span> m<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span>   Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>NSieve<span class="sym">(</span>m<span class="sym">,</span>flags^<span class="sym">),</span><span class="num">8</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;

</span>   m <span class="sym">:=</span> <span class="num">10000</span> <span class="sym">*</span> <span class="kwa">ASH</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span>n<span class="num">-1</span><span class="sym">);
</span>   Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>NSieve<span class="sym">(</span>m<span class="sym">,</span>flags^<span class="sym">),</span><span class="num">8</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;

</span>   m <span class="sym">:=</span> <span class="num">10000</span> <span class="sym">*</span> <span class="kwa">ASH</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span>n<span class="num">-2</span><span class="sym">);
</span>   Out<span class="sym">.</span>String<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">);</span> Out<span class="sym">.</span>Int<span class="sym">(</span>NSieve<span class="sym">(</span>m<span class="sym">,</span>flags^<span class="sym">),</span><span class="num">8</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="kwa">END</span> nsieve<span class="sym">.</span>
