<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Dennis Decker Jensen</span>
<span class="com">*/</span>

<span class="kwa">numeric digits</span> <span class="num">11</span> <span class="com">/* 15 digits precision not needed here */</span>
IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span> LAST <span class="sym">=</span> <span class="num">42</span>

<span class="kwa">arg</span> n . <span class="sym">;</span> <span class="kwa">if</span> n <span class="sym">=</span> <span class="str">''</span> <span class="kwa">then</span> n <span class="sym">=</span> <span class="num">1</span>

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> n
	ary.i <span class="sym">=</span> gen_random<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">call</span> heapsort n

<span class="kwa">say</span> <span class="kwb">format</span><span class="sym">(</span>ary.n<span class="sym">, ,</span> <span class="num">10</span><span class="sym">)</span>
<span class="kwa">exit</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>

gen_random<span class="sym">:</span> <span class="kwa">procedure expose</span> IM IA IC LAST
LAST <span class="sym">= (</span>LAST <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) //</span> IM
<span class="kwa">return arg</span><span class="sym">(</span><span class="num">1</span><span class="sym">) *</span> LAST <span class="sym">/</span> IM

heapsort<span class="sym">:</span> <span class="kwa">procedure expose</span> ary.
<span class="kwa">arg</span> n .
ir <span class="sym">=</span> n
l <span class="sym">=</span> <span class="kwb">trunc</span><span class="sym">(</span><span class="num">0.5</span> <span class="sym">+</span> n <span class="sym">%</span> <span class="num">2</span><span class="sym">) +</span> <span class="num">1</span>

<span class="kwa">do forever</span>
	<span class="kwa">if</span> l <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then do</span>
		l <span class="sym">=</span> l <span class="sym">-</span> <span class="num">1</span>
		rra <span class="sym">=</span> ary.l
	<span class="kwa">end</span>
	<span class="kwa">else do</span>
		rra <span class="sym">=</span> ary.ir
		ary.ir <span class="sym">=</span> ary<span class="num">.1</span>
		ir <span class="sym">=</span> ir <span class="sym">-</span> <span class="num">1</span>
		<span class="kwa">if</span> ir <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then do</span>
			ary<span class="num">.1</span> <span class="sym">=</span> rra
			<span class="kwa">return</span>
		<span class="kwa">end</span>
	<span class="kwa">end</span>
	i <span class="sym">=</span> l
	j <span class="sym">=</span> l <span class="sym">*</span> <span class="num">2</span>
	<span class="kwa">do while</span> j <span class="sym">&lt;=</span> ir
		k <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span>
		<span class="kwa">if</span> j <span class="sym">&lt;</span> ir <span class="sym">&amp;</span> ary.j <span class="sym">&lt;</span> ary.k <span class="kwa">then</span> j <span class="sym">=</span> k
		<span class="kwa">if</span> rra <span class="sym">&lt;</span> ary.j <span class="kwa">then do</span>
			ary.i <span class="sym">=</span> ary.j
			i <span class="sym">=</span> j
			j <span class="sym">=</span> j <span class="sym">+</span> j
		<span class="kwa">end</span>
		<span class="kwa">else</span> j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span>
	<span class="kwa">end</span>
	ary.i <span class="sym">=</span> rra
<span class="kwa">end</span>

