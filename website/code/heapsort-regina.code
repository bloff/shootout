<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Dennis Decker Jensen
*/</span>

numeric digits <span class="num">11</span> <span class="com">/* 15 digits precision not needed here */</span>
IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span> LAST <span class="sym">=</span> <span class="num">42

</span>arg n <span class="sym">. ;</span> <span class="kwa">if</span> n <span class="sym">=</span> <span class="str">''</span> then n <span class="sym">=</span> <span class="num">1

</span><span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> n
	ary<span class="sym">.</span>i <span class="sym">=</span> gen_random<span class="sym">(</span><span class="num">1</span><span class="sym">)
</span>end

call heapsort n

say format<span class="sym">(</span>ary<span class="sym">.</span>n<span class="sym">, ,</span> <span class="num">10</span><span class="sym">)
</span>exit<span class="sym">(</span><span class="num">0</span><span class="sym">)

</span>gen_random<span class="sym">:</span> procedure expose IM IA IC LAST
LAST <span class="sym">= (</span>LAST <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> <span class="slc">// IM
</span><span class="kwa">return</span> arg<span class="sym">(</span><span class="num">1</span><span class="sym">) *</span> LAST <span class="sym">/</span> IM

heapsort<span class="sym">:</span> procedure expose ary<span class="sym">.
</span>arg n <span class="sym">.
</span>ir <span class="sym">=</span> n
l <span class="sym">=</span> trunc<span class="sym">(</span><span class="num">0.5</span> <span class="sym">+</span> n <span class="sym">%</span> <span class="num">2</span><span class="sym">) +</span> <span class="num">1

</span><span class="kwa">do</span> forever
	<span class="kwa">if</span> l <span class="sym">&gt;</span> <span class="num">1</span> then <span class="kwa">do
</span>		l <span class="sym">=</span> l <span class="num">- 1
</span>		rra <span class="sym">=</span> ary<span class="sym">.</span>l
	end
	<span class="kwa">else do
</span>		rra <span class="sym">=</span> ary<span class="sym">.</span>ir
		ary<span class="sym">.</span>ir <span class="sym">=</span> ary<span class="num">.1
</span>		ir <span class="sym">=</span> ir <span class="num">- 1
</span>		<span class="kwa">if</span> ir <span class="sym">=</span> <span class="num">1</span> then <span class="kwa">do
</span>			ary<span class="num">.1</span> <span class="sym">=</span> rra
			<span class="kwa">return
</span>		end
	end
	i <span class="sym">=</span> l
	j <span class="sym">=</span> l <span class="sym">*</span> <span class="num">2
</span>	<span class="kwa">do while</span> j <span class="sym">&lt;=</span> ir
		k <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1
</span>		<span class="kwa">if</span> j <span class="sym">&lt;</span> ir <span class="sym">&amp;</span> ary<span class="sym">.</span>j <span class="sym">&lt;</span> ary<span class="sym">.</span>k then j <span class="sym">=</span> k
		<span class="kwa">if</span> rra <span class="sym">&lt;</span> ary<span class="sym">.</span>j then <span class="kwa">do
</span>			ary<span class="sym">.</span>i <span class="sym">=</span> ary<span class="sym">.</span>j
			i <span class="sym">=</span> j
			j <span class="sym">=</span> j <span class="sym">+</span> j
		end
		<span class="kwa">else</span> j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1
</span>	end
	ary<span class="sym">.</span>i <span class="sym">=</span> rra
end

