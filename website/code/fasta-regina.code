<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* % regina -v                                                        */</span>
<span class="com">/* REXX-Regina_3.3(MT) 5.00 25 Apr 2004                               */</span>
<span class="com">/* % uname -orvmp                                                     */</span>
<span class="com">/* 2.6.5-1.358 #1 Wed Oct 13 17:49:34 EST 2004 i686 i686 GNU/Linux    */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

NULL <span class="sym">=</span> <span class="str">&quot;&quot;</span> <span class="sym">;</span> IA <span class="sym">=</span> <span class="num">3877</span> <span class="sym">;</span> IC <span class="sym">=</span> <span class="num">29573</span> <span class="sym">;</span> IM <span class="sym">=</span> <span class="num">139968</span> <span class="sym">;</span> LAST <span class="sym">=</span> <span class="num">42</span> <span class="sym">;</span> LINELENGTH <span class="sym">=</span> <span class="num">60

</span>ALU <span class="sym">=</span> <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span><span class="sym">||,
</span>      <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span><span class="sym">||,
</span>      <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span><span class="sym">||,
</span>      <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span><span class="sym">||,
</span>      <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span><span class="sym">||,
</span>      <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span><span class="sym">||,
</span>      <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

IUB <span class="sym">=</span> <span class="str">&quot;a 0.27 c 0.12 g 0.12 t 0.27&quot;</span><span class="sym">,
</span>      <span class="str">&quot;B 0.02 D 0.02 H 0.02 K 0.02&quot;</span><span class="sym">,
</span>      <span class="str">&quot;M 0.02 N 0.02 R 0.02 S 0.02&quot;</span><span class="sym">,
</span>      <span class="str">&quot;V 0.02 W 0.02 Y 0.02&quot;</span>

HOMOSAPIENS <span class="sym">=</span> <span class="str">&quot;a 0.3029549426680&quot;</span><span class="sym">,
</span>              <span class="str">&quot;c 0.1979883004921&quot;</span><span class="sym">,
</span>              <span class="str">&quot;g 0.1975473066391&quot;</span><span class="sym">,
</span>              <span class="str">&quot;t 0.3015094502008&quot;</span>

N <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> <span class="kwa">if</span> DATATYPE<span class="sym">(</span>N<span class="sym">)</span> \<span class="sym">=</span> <span class="str">'NUM'</span> <span class="sym">|</span> N <span class="sym">&lt;</span> <span class="num">1</span> then <span class="sym">;</span> N <span class="sym">=</span> <span class="num">1000

</span>call make_repeat_fasta <span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> N <span class="sym">*</span> <span class="num">2
</span>call make_random_fasta <span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> N <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> make_cumulative<span class="sym">(</span>IUB<span class="sym">)
</span>call make_random_fasta <span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> N <span class="sym">*</span> <span class="num">5</span><span class="sym">,</span> make_cumulative<span class="sym">(</span>HOMOSAPIENS<span class="sym">)

</span>exit <span class="num">0

</span><span class="com">/* ----------------------------- */</span>

gen_random <span class="sym">:</span> procedure expose IA IC IM LAST
  LAST <span class="sym">= (</span>LAST <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> <span class="slc">// IM
</span>  <span class="kwa">return</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) *</span> LAST <span class="sym">/</span> IM

<span class="com">/* ----------------------------- */</span>

select_random <span class="sym">:</span> procedure expose IA IC IM LAST NULL
  ctbl <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> rvalue <span class="sym">=</span> gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">)

</span>  <span class="kwa">if</span> rvalue \<span class="sym">&lt;</span> <span class="num">1.0</span> then <span class="sym">;</span> <span class="kwa">return</span> WORD<span class="sym">(</span>ctbl<span class="sym">,</span> <span class="num">1</span><span class="sym">)

</span>  <span class="kwa">do while</span> ctbl <span class="sym">&lt;&gt;</span> NULL
    parse var ctbl key value ctbl
    <span class="kwa">if</span> rvalue <span class="sym">&lt;</span> value then <span class="sym">;</span> <span class="kwa">return</span> key
  end

<span class="com">/* ----------------------------- */</span>

make_cumulative <span class="sym">:</span> procedure expose NULL
  ptbl <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> cp <span class="sym">=</span> <span class="num">0.0</span> <span class="sym">;</span> ctbl <span class="sym">=</span> NULL

  <span class="kwa">do while</span> ptbl <span class="sym">&lt;&gt;</span> NULL
    parse var ptbl key value ptbl
    cp <span class="sym">=</span> cp <span class="sym">+</span> value
    ctbl <span class="sym">=</span> ctbl key cp
  end

  <span class="kwa">return</span> STRIP<span class="sym">(</span>ctbl<span class="sym">)

</span><span class="com">/* ----------------------------- */</span>

make_repeat_fasta <span class="sym">:</span> procedure expose LINELENGTH ALU NULL
  id <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> desc <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">2</span><span class="sym">) ;</span> n <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">3</span><span class="sym">)

</span>  alulen <span class="sym">=</span> LENGTH<span class="sym">(</span>ALU<span class="sym">) ;</span> lines <span class="sym">=</span>  n <span class="sym">%</span> LINELENGTH
  ALT <span class="sym">=</span> ALU<span class="sym">||</span>SUBSTR<span class="sym">(</span>ALU<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> LINELENGTH<span class="sym">)

</span>  say <span class="str">&quot;&gt;&quot;</span><span class="sym">||</span>id desc

  <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">for</span> lines
    p <span class="sym">=</span> i <span class="sym">*</span> LINELENGTH <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> q <span class="sym">=</span> p <span class="slc">// alulen
</span>    <span class="kwa">if</span> q <span class="sym">=</span> <span class="num">0</span> then <span class="sym">;</span> q <span class="sym">=</span> <span class="num">1
</span>    say SUBSTR<span class="sym">(</span>ALT<span class="sym">,</span> q<span class="sym">,</span> LINELENGTH<span class="sym">)
</span>  end

  p <span class="sym">=</span> lines <span class="sym">*</span> LINELENGTH <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> q <span class="sym">=</span> p <span class="slc">// alulen
</span>  <span class="kwa">if</span> q <span class="sym">=</span> <span class="num">0</span> then <span class="sym">;</span> q <span class="sym">=</span> <span class="num">1
</span>  say SUBSTR<span class="sym">(</span>ALU<span class="sym">,</span> q<span class="sym">,</span> q <span class="slc">// LINELENGTH + 1)
</span>
  <span class="kwa">return

</span><span class="com">/* ----------------------------- */</span>

make_random_fasta <span class="sym">:</span> procedure expose IA IC IM LAST LINELENGTH NULL
  id <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> desc <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">2</span><span class="sym">) ;</span> n <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">3</span><span class="sym">) ;</span> ctbl <span class="sym">=</span> ARG<span class="sym">(</span><span class="num">4</span><span class="sym">)

</span>  lines <span class="sym">=</span> n <span class="sym">%</span> LINELENGTH <span class="sym">;</span> LASTLINELEN <span class="sym">=</span> n <span class="slc">// LINELENGTH ; lineout = NULL
</span>
  say <span class="str">&quot;&gt;&quot;</span><span class="sym">||</span>id desc

  <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">for</span> lines
    <span class="kwa">do</span> j <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> LINELENGTH
      lineout <span class="sym">=</span> lineout <span class="sym">||</span> select_random<span class="sym">(</span>ctbl<span class="sym">)
</span>    end
    say lineout <span class="sym">;</span> lineout <span class="sym">=</span> NULL
  end

  <span class="kwa">if</span> LASTLINELEN <span class="sym">=</span> <span class="num">0</span> then <span class="sym">;</span> <span class="kwa">return

  do</span> j <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> LASTLINELEN
    lineout <span class="sym">=</span> lineout <span class="sym">||</span> select_random<span class="sym">(</span>ctbl<span class="sym">)
</span>  end
  say lineout

  <span class="kwa">return</span>
