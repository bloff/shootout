<span class="line">    1 </span><span class="slc">-- $Id: ary-ghc.code,v 1.3 2004-11-11 07:13:56 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://shootout.alioth.debian.org
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">--
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- By Simon Marlow
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">--
</span><span class="line">    6 </span><span class="slc"></span><span class="kwa">module</span> Main <span class="sym">(</span>main<span class="sym">)</span> <span class="kwa">where
</span><span class="line">    7 </span><span class="kwa">
</span><span class="line">    8 </span><span class="kwa">import</span> System
<span class="line">    9 </span><span class="kwa">import</span> Control.Monad.ST
<span class="line">   10 </span><span class="kwa">import</span> Data.Array.ST
<span class="line">   11 </span>
<span class="line">   12 </span>add_array <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> STUArray s <span class="kwb">Int Int</span> <span class="sym">-&gt;</span> STUArray s <span class="kwb">Int Int</span> <span class="sym">-&gt;</span> ST s <span class="sym">()
</span><span class="line">   13 </span><span class="sym"></span>add_array len a b <span class="sym">=</span> sequence_ <span class="sym">[</span> add i <span class="sym">|</span> i <span class="sym">&lt;- [</span><span class="num">1</span>..len<span class="sym">] ]
</span><span class="line">   14 </span><span class="sym"></span>  <span class="kwa">where</span> add i <span class="sym">=</span> <span class="kwa">do</span> ai <span class="sym">&lt;-</span> readArray a i
<span class="line">   15 </span>                   bi <span class="sym">&lt;-</span> readArray b i
<span class="line">   16 </span>                     writeArray b i <span class="sym">(</span>ai<span class="sym">+</span>bi<span class="sym">)
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span>ary <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> ST s <span class="sym">(</span><span class="kwb">Int</span><span class="sym">,</span><span class="kwb">Int</span><span class="sym">)
</span><span class="line">   19 </span><span class="sym"></span>ary len <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   20 </span><span class="kwa"></span>  a <span class="sym">&lt;-</span> newListArray <span class="sym">(</span><span class="num">1</span><span class="sym">,</span>len<span class="sym">) [</span><span class="num">1</span>..len<span class="sym">]
</span><span class="line">   21 </span><span class="sym"></span>  b <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">1</span><span class="sym">,</span>len<span class="sym">)</span> <span class="num">0
</span><span class="line">   22 </span><span class="num"></span>  sequence_ <span class="sym">(</span>take <span class="num">1000</span> <span class="sym">(</span>repeat <span class="sym">(</span>add_array len a b<span class="sym">)))
</span><span class="line">   23 </span><span class="sym"></span>  y1 <span class="sym">&lt;-</span> readArray b <span class="num">1
</span><span class="line">   24 </span><span class="num"></span>  yn <span class="sym">&lt;-</span> readArray b len
<span class="line">   25 </span>  return <span class="sym">(</span>y1<span class="sym">,</span>yn<span class="sym">)
</span><span class="line">   26 </span><span class="sym">
</span><span class="line">   27 </span><span class="sym"></span>main <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   28 </span><span class="kwa"></span>  ~<span class="sym">[</span>n<span class="sym">] &lt;-</span> getArgs
<span class="line">   29 </span>  <span class="kwa">let</span> <span class="sym">(</span>y1<span class="sym">,</span>yn<span class="sym">) =</span> runST <span class="sym">(</span>ary <span class="sym">(</span>read n<span class="sym">))
</span><span class="line">   30 </span><span class="sym"></span>  putStr <span class="sym">(</span>show y1<span class="sym">) ;</span> putStr <span class="str">&quot; &quot;</span> <span class="sym">;</span> putStrLn <span class="sym">(</span>show yn<span class="sym">)
</span><span class="line">   31 </span><span class="sym">
</span><span class="line">   32 </span><span class="sym"></span><span class="slc">--
</span><span class="line">   33 </span><span class="slc"></span><span class="slc">-- Note:  A shorter version, perhaps in a more &quot;typical&quot; Haskell style
</span><span class="line">   34 </span><span class="slc"></span><span class="slc">-- was contributed by JP Bernardy.
</span><span class="line">   35 </span><span class="slc"></span><span class="slc">-- Uses unboxed arrays, no destructive update, no ST monad.
</span><span class="line">   36 </span><span class="slc"></span><span class="slc">--
</span><span class="line">   37 </span><span class="slc"></span><span class="slc">--import System
</span><span class="line">   38 </span><span class="slc"></span><span class="slc">--import Data.Array.Unboxed
</span><span class="line">   39 </span><span class="slc"></span><span class="slc">--
</span><span class="line">   40 </span><span class="slc"></span><span class="slc">--add_array :: Int -&gt; UArray Int Int -&gt; UArray Int Int -&gt; UArray Int Int
</span><span class="line">   41 </span><span class="slc"></span><span class="slc">--add_array n a b = array (1,n) [(i, a!i + b!i) | i &lt;- [1..n]]
</span><span class="line">   42 </span><span class="slc"></span><span class="slc">--
</span><span class="line">   43 </span><span class="slc"></span><span class="slc">--ary n = iterate (add_array n a) b !! 1000
</span><span class="line">   44 </span><span class="slc"></span><span class="slc">--    where a = listArray (1,n) [1..n]
</span><span class="line">   45 </span><span class="slc"></span><span class="slc">--          b = listArray (1,n) (repeat 0)
</span><span class="line">   46 </span><span class="slc"></span><span class="slc">--
</span><span class="line">   47 </span><span class="slc"></span><span class="slc">--main = do [num] &lt;- getArgs
</span><span class="line">   48 </span><span class="slc"></span><span class="slc">--          let y = ary n
</span><span class="line">   49 </span><span class="slc"></span><span class="slc">--              n = read num
</span><span class="line">   50 </span><span class="slc"></span><span class="slc">--          putStrLn $ show (y!1) ++ &quot; &quot; ++ show (y!n)
</span><span class="line">   51 </span><span class="slc"></span>
