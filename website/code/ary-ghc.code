<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: ary-ghc.code,v 1.1 2004-11-02 08:52:29 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://shootout.alioth.debian.org
</FONT></I><I><FONT COLOR="#B22222">--
</FONT></I><I><FONT COLOR="#B22222">-- By Simon Marlow
</FONT></I><I><FONT COLOR="#B22222">--
</FONT></I><B><FONT COLOR="#A020F0">module</FONT></B> Main (main) <B><FONT COLOR="#A020F0">where</FONT></B>

<B><FONT COLOR="#A020F0">import</FONT></B> System
<B><FONT COLOR="#A020F0">import</FONT></B> Control.Monad.ST
<B><FONT COLOR="#A020F0">import</FONT></B> Data.Array.ST

add_array <B><FONT COLOR="#228B22">:: Int -&gt; STUArray s Int Int -&gt; STUArray s Int Int -&gt; ST s ()
</FONT></B>add_array len a b = sequence_ [ add i | i &lt;- [1..len] ]
  <B><FONT COLOR="#A020F0">where</FONT></B> add i = do ai &lt;- readArray a i
		   bi &lt;- readArray b i
	  	   writeArray b i (ai+bi)

ary <B><FONT COLOR="#228B22">:: Int -&gt; ST s (Int,Int)
</FONT></B>ary len = do 
  a &lt;- newListArray (1,len) [1..len]
  b &lt;- newArray (1,len) 0
  sequence_ (take 1000 (repeat (add_array len a b)))
  y1 &lt;- readArray b 1
  yn &lt;- readArray b len
  return (y1,yn)

main = do
  ~[n] &lt;- getArgs 
  <B><FONT COLOR="#A020F0">let</FONT></B> (y1,yn) = runST (ary (read n))
  putStr (show y1) ; putStr <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> ; putStrLn (show yn)

<I><FONT COLOR="#B22222">--
</FONT></I><I><FONT COLOR="#B22222">-- Note:  A shorter version, perhaps in a more &quot;typical&quot; Haskell style
</FONT></I><I><FONT COLOR="#B22222">-- was contributed by JP Bernardy.
</FONT></I><I><FONT COLOR="#B22222">-- Uses unboxed arrays, no destructive update, no ST monad.
</FONT></I><I><FONT COLOR="#B22222">--
</FONT></I><I><FONT COLOR="#B22222">--import System
</FONT></I><I><FONT COLOR="#B22222">--import Data.Array.Unboxed
</FONT></I><I><FONT COLOR="#B22222">--
</FONT></I><I><FONT COLOR="#B22222">--add_array :: Int -&gt; UArray Int Int -&gt; UArray Int Int -&gt; UArray Int Int
</FONT></I><I><FONT COLOR="#B22222">--add_array n a b = array (1,n) [(i, a!i + b!i) | i &lt;- [1..n]]
</FONT></I><I><FONT COLOR="#B22222">--
</FONT></I><I><FONT COLOR="#B22222">--ary n = iterate (add_array n a) b !! 1000
</FONT></I><I><FONT COLOR="#B22222">--    where a = listArray (1,n) [1..n]
</FONT></I><I><FONT COLOR="#B22222">--          b = listArray (1,n) (repeat 0)
</FONT></I><I><FONT COLOR="#B22222">--
</FONT></I><I><FONT COLOR="#B22222">--main = do [num] &lt;- getArgs
</FONT></I><I><FONT COLOR="#B22222">--          let y = ary n
</FONT></I><I><FONT COLOR="#B22222">--              n = read num
</FONT></I><I><FONT COLOR="#B22222">--          putStrLn $ show (y!1) ++ &quot; &quot; ++ show (y!n)
</FONT></I></pre></td></tr></table>
