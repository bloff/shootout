<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">\ $Id: prodcons-gforth.code,v 1.1 2004-11-02 08:52:39 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">\ http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">\ from Bernd Paysan
</FONT></I>
require tasker.fs

<I><FONT COLOR="#B22222">\ read NUM from last command line argument
</FONT></I>0. argc @ 1<B><FONT COLOR="#5F9EA0">-</FONT></B> arg <B><FONT COLOR="#5F9EA0">&gt;</FONT></B>number <B><FONT COLOR="#5F9EA0">2drop</FONT></B> <B><FONT COLOR="#5F9EA0">drop</FONT></B> <B><FONT COLOR="#A020F0">constant</FONT></B> NUM

Variable pcount
Variable data
Variable produced
Variable consumed

<I><FONT COLOR="#B22222">\ note: no mutex is needed here. bigFORTH's tasker is cooperative
</FONT></I><I><FONT COLOR="#B22222">\ and switches tasks only with PAUSE.
</FONT></I>
<B><FONT COLOR="#A020F0">: </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">producer</FONT></I></B></FONT></B> ( n <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B> )
  <B><FONT COLOR="#A020F0">next</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B>task <B><FONT COLOR="#5F9EA0">swap</FONT></B> 2 $1000 NewTask pass
  0 ?DO
     BEGIN  pcount @ 1 =  WHILE  pause  REPEAT
     1 pcount <B><FONT COLOR="#5F9EA0">!</FONT></B> I data <B><FONT COLOR="#5F9EA0">!</FONT></B>
     1 produced <B><FONT COLOR="#5F9EA0">+</FONT></B><B><FONT COLOR="#5F9EA0">!</FONT></B>
  LOOP wake ;

<B><FONT COLOR="#A020F0">: </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">consumer</FONT></I></B></FONT></B> ( n <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B> )
  <B><FONT COLOR="#A020F0">next</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B>task <B><FONT COLOR="#5F9EA0">swap</FONT></B> 2 $1000 NewTask pass
  0 <B><FONT COLOR="#5F9EA0">swap</FONT></B> 0 ?DO
     BEGIN  pcount @ 0=  WHILE  pause  REPEAT
     0 pcount <B><FONT COLOR="#5F9EA0">!</FONT></B> <B><FONT COLOR="#5F9EA0">drop</FONT></B> data @
     1 consumed <B><FONT COLOR="#5F9EA0">+</FONT></B><B><FONT COLOR="#5F9EA0">!</FONT></B>
  LOOP <B><FONT COLOR="#5F9EA0">drop</FONT></B> wake ;

NUM producer
NUM consumer

<I><FONT COLOR="#B22222">\ There is no &quot;main&quot; task - to synchronize, each of the two new
</FONT></I><I><FONT COLOR="#B22222">\ threads get the task address of the starting task, and wake it
</FONT></I><I><FONT COLOR="#B22222">\ when they are done. The main task therefore has to stop twice
</FONT></I><I><FONT COLOR="#B22222">\ (and wait to be woken up)
</FONT></I>
stop stop

produced @ .
consumed @ 1 u.r cr

<B><FONT COLOR="#5F9EA0">bye</FONT></B> <I><FONT COLOR="#B22222">\ th-th-that's all folks!
</FONT></I></pre></td></tr></table>
