<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/mzscheme -r

(require (lib <B><FONT COLOR="#BC8F8F">&quot;defmacro.ss&quot;</FONT></B>))
	
(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">sequence</FONT></B> start stop)
  (<B><FONT COLOR="#A020F0">if</FONT></B> (&gt; start stop)
      '()
      (cons start (sequence (+ start 1) stop))))

(define-macro (nest n expr)
  (<B><FONT COLOR="#A020F0">if</FONT></B> (&gt; n 0)
      `(for-each (<B><FONT COLOR="#A020F0">lambda</FONT></B> (i) (nest ,(- n 1) ,expr)) seq)
      expr))
		       

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B>)
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ([n (string-&gt;number (vector-ref argv 0))]
	 [x 0]
	 [seq (sequence 1 n)])
    (nest 6 (<B><FONT COLOR="#A020F0">set!</FONT></B> x (+ x 1)))
    (printf <B><FONT COLOR="#BC8F8F">&quot;~s~n&quot;</FONT></B> x)))

(main)
</pre></td></tr></table>
