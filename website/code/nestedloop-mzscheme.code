#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r

<span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;defmacro.ss&quot;</span><span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>sequence start stop<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> start stop<span class="sym">)</span>
      <span class="str">'()</span>
<span class="str">      (cons start (sequence (+ start 1) stop))))</span>
<span class="str"></span>
<span class="str">(define-macro (nest n expr)</span>
<span class="str">  (if (&gt; n 0)</span>
<span class="str">      `(for-each (lambda (i) (nest ,(- n 1) ,expr)) seq)</span>
<span class="str">      expr))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">(define (main)</span>
<span class="str">  (let* ([n (string-&gt;number (vector-ref argv 0))]</span>
<span class="str">	 [x 0]</span>
<span class="str">	 [seq (sequence 1 n)])</span>
<span class="str">    (nest 6 (set! x (+ x 1)))</span>
<span class="str">    (printf &quot;~s~n&quot; x)))</span>
<span class="str"></span>
<span class="str">(main)</span>
<span class="str"></span>
