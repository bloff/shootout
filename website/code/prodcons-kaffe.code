<span class="line">    1 </span><span class="slc">// $Id: prodcons-kaffe.code,v 1.3 2004-11-11 07:14:03 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// Producer-Consumer Example by Bill Lear
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">// Adapted from http://java.sun.com/docs/books/tutorial/essential/threads
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="kwa">public class</span> prodcons <span class="sym">{
</span><span class="line">    7 </span><span class="sym"></span>    <span class="kwa">private class</span> CubbyHole <span class="sym">{
</span><span class="line">    8 </span><span class="sym"></span>        <span class="kwa">private</span> <span class="kwb">int</span> m_contents<span class="sym">;
</span><span class="line">    9 </span><span class="sym"></span>        <span class="kwa">private</span> <span class="kwb">boolean</span> m_available <span class="sym">=</span> false<span class="sym">;
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span>        <span class="kwa">public synchronized</span> <span class="kwb">int</span> get<span class="sym">() {
</span><span class="line">   12 </span><span class="sym"></span>            <span class="kwa">while</span> <span class="sym">(</span>m_available <span class="sym">==</span> false<span class="sym">) {
</span><span class="line">   13 </span><span class="sym"></span>                <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   14 </span><span class="sym"></span>                    wait<span class="sym">();
</span><span class="line">   15 </span><span class="sym">                }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }
</span><span class="line">   16 </span><span class="sym">            }
</span><span class="line">   17 </span><span class="sym"></span>            m_available <span class="sym">=</span> false<span class="sym">;
</span><span class="line">   18 </span><span class="sym"></span>            notifyAll<span class="sym">();
</span><span class="line">   19 </span><span class="sym"></span>            <span class="kwa">return</span> m_contents<span class="sym">;
</span><span class="line">   20 </span><span class="sym">        }
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span>        <span class="kwa">public synchronized</span> <span class="kwb">void</span> put<span class="sym">(</span><span class="kwb">int</span> value<span class="sym">) {
</span><span class="line">   23 </span><span class="sym"></span>            <span class="kwa">while</span> <span class="sym">(</span>m_available <span class="sym">==</span> true<span class="sym">) {
</span><span class="line">   24 </span><span class="sym"></span>                <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   25 </span><span class="sym"></span>                    wait<span class="sym">();
</span><span class="line">   26 </span><span class="sym">                }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }
</span><span class="line">   27 </span><span class="sym">            }
</span><span class="line">   28 </span><span class="sym"></span>            m_contents <span class="sym">=</span> value<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>            m_available <span class="sym">=</span> true<span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>            notifyAll<span class="sym">();
</span><span class="line">   31 </span><span class="sym">        }
</span><span class="line">   32 </span><span class="sym">    }
</span><span class="line">   33 </span><span class="sym">
</span><span class="line">   34 </span><span class="sym"></span>    <span class="kwa">private class</span> Producer <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
</span><span class="line">   35 </span><span class="sym"></span>        <span class="kwa">private</span> CubbyHole m_cubbyhole<span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>        <span class="kwa">private</span> <span class="kwb">int</span> m_count<span class="sym">;
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym"></span>        <span class="kwa">public</span> Producer<span class="sym">(</span>CubbyHole c<span class="sym">,</span> <span class="kwb">int</span> count<span class="sym">) {
</span><span class="line">   39 </span><span class="sym"></span>            m_cubbyhole <span class="sym">=</span> c<span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>            m_count <span class="sym">=</span> count<span class="sym">;
</span><span class="line">   41 </span><span class="sym">        }
</span><span class="line">   42 </span><span class="sym">
</span><span class="line">   43 </span><span class="sym"></span>        <span class="kwa">public</span> <span class="kwb">void</span> run<span class="sym">() {
</span><span class="line">   44 </span><span class="sym"></span>            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> m_count<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   45 </span><span class="sym"></span>                m_cubbyhole<span class="sym">.</span>put<span class="sym">(</span>i<span class="sym">);
</span><span class="line">   46 </span><span class="sym">                ++</span>m_produced<span class="sym">;
</span><span class="line">   47 </span><span class="sym">            }
</span><span class="line">   48 </span><span class="sym">        }
</span><span class="line">   49 </span><span class="sym">    }
</span><span class="line">   50 </span><span class="sym">
</span><span class="line">   51 </span><span class="sym"></span>    <span class="kwa">private class</span> Consumer <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
</span><span class="line">   52 </span><span class="sym"></span>        <span class="kwa">private</span> CubbyHole m_cubbyhole<span class="sym">;
</span><span class="line">   53 </span><span class="sym"></span>        <span class="kwa">private</span> <span class="kwb">int</span> m_count<span class="sym">;
</span><span class="line">   54 </span><span class="sym">
</span><span class="line">   55 </span><span class="sym"></span>        <span class="kwa">public</span> Consumer<span class="sym">(</span>CubbyHole c<span class="sym">,</span> <span class="kwb">int</span> count<span class="sym">) {
</span><span class="line">   56 </span><span class="sym"></span>            m_cubbyhole <span class="sym">=</span> c<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>            m_count <span class="sym">=</span> count<span class="sym">;
</span><span class="line">   58 </span><span class="sym">        }
</span><span class="line">   59 </span><span class="sym">
</span><span class="line">   60 </span><span class="sym"></span>        <span class="kwa">public</span> <span class="kwb">void</span> run<span class="sym">() {
</span><span class="line">   61 </span><span class="sym"></span>            <span class="kwb">int</span> value <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   62 </span><span class="sym"></span>            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> m_count<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   63 </span><span class="sym"></span>                value <span class="sym">=</span> m_cubbyhole<span class="sym">.</span>get<span class="sym">();
</span><span class="line">   64 </span><span class="sym">                ++</span>m_consumed<span class="sym">;
</span><span class="line">   65 </span><span class="sym">            }
</span><span class="line">   66 </span><span class="sym">        }
</span><span class="line">   67 </span><span class="sym">    }
</span><span class="line">   68 </span><span class="sym">
</span><span class="line">   69 </span><span class="sym"></span>    <span class="kwa">public</span> <span class="kwb">void</span> run<span class="sym">() {
</span><span class="line">   70 </span><span class="sym"></span>        m_producer<span class="sym">.</span>start<span class="sym">();
</span><span class="line">   71 </span><span class="sym"></span>        m_consumer<span class="sym">.</span>start<span class="sym">();
</span><span class="line">   72 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{</span> m_producer<span class="sym">.</span>join<span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }
</span><span class="line">   73 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{</span> m_consumer<span class="sym">.</span>join<span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }
</span><span class="line">   74 </span><span class="sym"></span>        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>m_produced <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> m_consumed<span class="sym">);
</span><span class="line">   75 </span><span class="sym">    }
</span><span class="line">   76 </span><span class="sym">
</span><span class="line">   77 </span><span class="sym"></span>    <span class="kwa">public</span> prodcons<span class="sym">(</span><span class="kwb">int</span> count<span class="sym">) {
</span><span class="line">   78 </span><span class="sym"></span>        CubbyHole m_cubbyhole <span class="sym">=</span> <span class="kwa">new</span> CubbyHole<span class="sym">();
</span><span class="line">   79 </span><span class="sym"></span>        m_producer <span class="sym">=</span> <span class="kwa">new</span> Producer<span class="sym">(</span>m_cubbyhole<span class="sym">,</span> count<span class="sym">);
</span><span class="line">   80 </span><span class="sym"></span>        m_consumer <span class="sym">=</span> <span class="kwa">new</span> Consumer<span class="sym">(</span>m_cubbyhole<span class="sym">,</span> count<span class="sym">);
</span><span class="line">   81 </span><span class="sym">    }
</span><span class="line">   82 </span><span class="sym">
</span><span class="line">   83 </span><span class="sym"></span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {
</span><span class="line">   84 </span><span class="sym"></span>        <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   85 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{</span> count <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) { }
</span><span class="line">   86 </span><span class="sym"></span>        <span class="kwa">new</span> prodcons<span class="sym">(</span>count<span class="sym">).</span>run<span class="sym">();
</span><span class="line">   87 </span><span class="sym">    }
</span><span class="line">   88 </span><span class="sym">
</span><span class="line">   89 </span><span class="sym"></span>    <span class="kwa">private</span> Producer m_producer<span class="sym">;
</span><span class="line">   90 </span><span class="sym"></span>    <span class="kwa">private</span> Consumer m_consumer<span class="sym">;
</span><span class="line">   91 </span><span class="sym"></span>    <span class="kwa">private</span> <span class="kwb">int</span> m_produced <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   92 </span><span class="sym"></span>    <span class="kwa">private</span> <span class="kwb">int</span> m_consumed <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   93 </span><span class="sym">}</span>
