<span class="line">    1 </span><span class="slc">// $Id: echo-gcj.code,v 1.3 2004-11-11 07:13:56 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// author: Dirus&#64;programmer.net
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>net<span class="sym">.*;
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">public class</span> echo <span class="sym">{
</span><span class="line">    9 </span><span class="sym"></span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">Exception</span> <span class="sym">{
</span><span class="line">   10 </span><span class="sym"></span>        <span class="kwb">int</span> iIterations <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   12 </span><span class="sym"></span>            iIterations <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   13 </span><span class="sym">        }</span> <span class="kwa">catch</span><span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) { }
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym"></span>        EchoServer esServer <span class="sym">=</span> <span class="kwa">new</span> EchoServer<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   16 </span><span class="sym"></span>        <span class="kwa">new</span> EchoClient<span class="sym">(</span><span class="kwc">InetAddress</span><span class="sym">.</span>getLocalHost<span class="sym">(),</span> esServer<span class="sym">.</span>getPort<span class="sym">(),</span> iIterations<span class="sym">);
</span><span class="line">   17 </span><span class="sym">    }
</span><span class="line">   18 </span><span class="sym">}
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym"></span><span class="kwa">class</span> EchoClient <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
</span><span class="line">   21 </span><span class="sym"></span>    <span class="kwa">private static final</span> <span class="kwc">String</span> GREETING <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>    <span class="kwa">private final</span> <span class="kwc">InetAddress</span> inetaServer<span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>    <span class="kwa">private final</span> <span class="kwb">int</span>         iPort<span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span>    <span class="kwa">private final</span> <span class="kwb">int</span>         iIterations<span class="sym">;
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwa">public</span> EchoClient<span class="sym">(</span><span class="kwc">InetAddress</span> inetaServer<span class="sym">,</span> <span class="kwb">int</span> iPort<span class="sym">,</span> <span class="kwb">int</span> iIterations<span class="sym">) {
</span><span class="line">   27 </span><span class="sym"></span>        <span class="kwa">this</span><span class="sym">.</span>inetaServer <span class="sym">=</span> inetaServer<span class="sym">;
</span><span class="line">   28 </span><span class="sym"></span>        <span class="kwa">this</span><span class="sym">.</span>iPort <span class="sym">=</span> iPort<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>        <span class="kwa">this</span><span class="sym">.</span>iIterations <span class="sym">=</span> iIterations<span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>        start<span class="sym">();
</span><span class="line">   31 </span><span class="sym">    }
</span><span class="line">   32 </span><span class="sym">
</span><span class="line">   33 </span><span class="sym"></span>    <span class="kwa">public</span> <span class="kwb">void</span> run<span class="sym">() {
</span><span class="line">   34 </span><span class="sym"></span>        <span class="kwc">Socket</span> socketFromServer <span class="sym">=</span> null<span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   36 </span><span class="sym"></span>            socketFromServer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Socket</span><span class="sym">(</span>inetaServer<span class="sym">,</span> iPort<span class="sym">);
</span><span class="line">   37 </span><span class="sym"></span>            <span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span>socketFromServer<span class="sym">.</span>getInputStream<span class="sym">()));
</span><span class="line">   38 </span><span class="sym"></span>            <span class="kwc">OutputStream</span> out <span class="sym">=</span> socketFromServer<span class="sym">.</span>getOutputStream<span class="sym">();
</span><span class="line">   39 </span><span class="sym">
</span><span class="line">   40 </span><span class="sym"></span>            <span class="kwb">byte</span><span class="sym">[]</span> bytesOut <span class="sym">=</span> GREETING<span class="sym">.</span>getBytes<span class="sym">();
</span><span class="line">   41 </span><span class="sym"></span>            <span class="kwc">String</span> strIn <span class="sym">=</span> GREETING<span class="sym">.</span>trim<span class="sym">();
</span><span class="line">   42 </span><span class="sym"></span>            <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> iIterations<span class="sym">; ++</span>i<span class="sym">) {
</span><span class="line">   43 </span><span class="sym"></span>                out<span class="sym">.</span>write<span class="sym">(</span>bytesOut<span class="sym">);
</span><span class="line">   44 </span><span class="sym"></span>                out<span class="sym">.</span>flush<span class="sym">();
</span><span class="line">   45 </span><span class="sym"></span>                <span class="kwc">String</span> strRead <span class="sym">=</span> in<span class="sym">.</span>readLine<span class="sym">();
</span><span class="line">   46 </span><span class="sym"></span>                <span class="kwa">if</span><span class="sym">(!</span>strRead<span class="sym">.</span>equals<span class="sym">(</span>strIn<span class="sym">))
</span><span class="line">   47 </span><span class="sym"></span>                    <span class="kwa">throw new</span> <span class="kwc">RuntimeException</span><span class="sym">(</span><span class="str">&quot;client:</span> <span class="esc">\&quot;</span><span class="str">&quot;</span> <span class="sym">+</span> strIn <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\&quot; </span> <span class="str">ne</span> <span class="esc">\&quot;</span><span class="str">&quot;</span> <span class="sym">+</span> strRead <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\&quot;</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   48 </span><span class="sym">            }
</span><span class="line">   49 </span><span class="sym">        }</span> <span class="kwa">catch</span><span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {
</span><span class="line">   50 </span><span class="sym"></span>            e<span class="sym">.</span>printStackTrace<span class="sym">();
</span><span class="line">   51 </span><span class="sym">        }
</span><span class="line">   52 </span><span class="sym">
</span><span class="line">   53 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   54 </span><span class="sym"></span>            socketFromServer<span class="sym">.</span>close<span class="sym">();
</span><span class="line">   55 </span><span class="sym">        }</span> <span class="kwa">catch</span><span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) { }
</span><span class="line">   56 </span><span class="sym">    }
</span><span class="line">   57 </span><span class="sym">}
</span><span class="line">   58 </span><span class="sym">
</span><span class="line">   59 </span><span class="sym"></span><span class="kwa">class</span> EchoServer <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
</span><span class="line">   60 </span><span class="sym"></span>    <span class="kwa">private static final</span> <span class="kwb">int</span>   BUFFER_SIZE <span class="sym">=</span> <span class="num">1024</span><span class="sym">;
</span><span class="line">   61 </span><span class="sym"></span>    <span class="kwa">private final</span> <span class="kwc">ServerSocket</span> ssAccepting<span class="sym">;
</span><span class="line">   62 </span><span class="sym"></span>    <span class="kwa">private final</span> <span class="kwb">int</span>          iPort<span class="sym">;
</span><span class="line">   63 </span><span class="sym">
</span><span class="line">   64 </span><span class="sym"></span>    <span class="kwa">public</span> EchoServer<span class="sym">(</span><span class="kwb">int</span> iPort<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{
</span><span class="line">   65 </span><span class="sym"></span>        ssAccepting <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ServerSocket</span><span class="sym">(</span>iPort<span class="sym">);
</span><span class="line">   66 </span><span class="sym"></span>        <span class="kwa">this</span><span class="sym">.</span>iPort <span class="sym">=</span> ssAccepting<span class="sym">.</span>getLocalPort<span class="sym">();
</span><span class="line">   67 </span><span class="sym"></span>        start<span class="sym">();
</span><span class="line">   68 </span><span class="sym">    }
</span><span class="line">   69 </span><span class="sym">
</span><span class="line">   70 </span><span class="sym"></span>    <span class="kwa">public final</span> <span class="kwb">int</span> getPort<span class="sym">() {
</span><span class="line">   71 </span><span class="sym"></span>        <span class="kwa">return</span> iPort<span class="sym">;
</span><span class="line">   72 </span><span class="sym">    }
</span><span class="line">   73 </span><span class="sym">
</span><span class="line">   74 </span><span class="sym"></span>    <span class="kwa">public</span> <span class="kwb">void</span> run<span class="sym">() {
</span><span class="line">   75 </span><span class="sym"></span>        <span class="kwb">byte</span> bytesIn<span class="sym">[] =</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFFER_SIZE<span class="sym">];
</span><span class="line">   76 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   77 </span><span class="sym"></span>            <span class="kwc">Socket</span> socketClient <span class="sym">=</span> ssAccepting<span class="sym">.</span>accept<span class="sym">();
</span><span class="line">   78 </span><span class="sym"></span>            <span class="kwc">InputStream</span> in <span class="sym">=</span> socketClient<span class="sym">.</span>getInputStream<span class="sym">();
</span><span class="line">   79 </span><span class="sym"></span>            <span class="kwc">OutputStream</span> out <span class="sym">=</span> socketClient<span class="sym">.</span>getOutputStream<span class="sym">();
</span><span class="line">   80 </span><span class="sym"></span>            <span class="kwb">int</span> iLength<span class="sym">,</span> iCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   81 </span><span class="sym"></span>            <span class="kwa">while</span> <span class="sym">((</span>iLength <span class="sym">=</span> in<span class="sym">.</span>read<span class="sym">(</span>bytesIn<span class="sym">)) != -</span><span class="num">1</span><span class="sym">) {
</span><span class="line">   82 </span><span class="sym"></span>                out<span class="sym">.</span>write<span class="sym">(</span>bytesIn<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> iLength<span class="sym">);
</span><span class="line">   83 </span><span class="sym"></span>                out<span class="sym">.</span>flush<span class="sym">();
</span><span class="line">   84 </span><span class="sym"></span>                iCount <span class="sym">+=</span> iLength<span class="sym">;
</span><span class="line">   85 </span><span class="sym">            }
</span><span class="line">   86 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;server processed &quot;</span> <span class="sym">+</span> iCount <span class="sym">+</span> <span class="str">&quot; bytes&quot;</span><span class="sym">);
</span><span class="line">   87 </span><span class="sym">        }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {
</span><span class="line">   88 </span><span class="sym"></span>            e<span class="sym">.</span>printStackTrace<span class="sym">();
</span><span class="line">   89 </span><span class="sym">        }
</span><span class="line">   90 </span><span class="sym">    }
</span><span class="line">   91 </span><span class="sym">}</span>
