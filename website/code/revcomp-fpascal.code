<span class="com">{ The Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Marco van de Voort
}</span>

<span class="kwa">program</span> reverse_complement<span class="sym">;

</span><span class="com">{$mode objfpc}</span>

<span class="kwa">Uses</span> BaseUnix<span class="sym">;

</span><span class="kwa">var</span> lookupComplement <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="esc">#0</span>..<span class="esc">#255</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">char</span><span class="sym">;

</span><span class="kwa">Const</span> FASTAXLAT <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>.<span class="num">.11</span><span class="sym">]</span> <span class="kwa">of array</span><span class="sym">[</span><span class="num">0</span>.<span class="num">.1</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">char</span> <span class="sym">= (
		  (</span> <span class="str">'A'</span><span class="sym">,</span> <span class="str">'T'</span> <span class="sym">), (</span> <span class="str">'C'</span><span class="sym">,</span> <span class="str">'G'</span> <span class="sym">),
		  (</span> <span class="str">'B'</span><span class="sym">,</span> <span class="str">'V'</span> <span class="sym">), (</span> <span class="str">'D'</span><span class="sym">,</span> <span class="str">'H'</span> <span class="sym">),
	          (</span> <span class="str">'K'</span><span class="sym">,</span> <span class="str">'M'</span> <span class="sym">), (</span> <span class="str">'R'</span><span class="sym">,</span> <span class="str">'Y'</span> <span class="sym">),
		  (</span> <span class="str">'a'</span><span class="sym">,</span> <span class="str">'t'</span> <span class="sym">), (</span> <span class="str">'c'</span><span class="sym">,</span> <span class="str">'g'</span> <span class="sym">),
		  (</span> <span class="str">'b'</span><span class="sym">,</span> <span class="str">'v'</span> <span class="sym">), (</span> <span class="str">'d'</span><span class="sym">,</span> <span class="str">'h'</span> <span class="sym">),
	          (</span> <span class="str">'k'</span><span class="sym">,</span> <span class="str">'m'</span> <span class="sym">), (</span> <span class="str">'r'</span><span class="sym">,</span> <span class="str">'y'</span> <span class="sym">));

</span>      BufferIncrement <span class="sym">=</span> <span class="num">1024</span><span class="sym">;

</span><span class="kwa">procedure</span> flushbuffer<span class="sym">(</span>buffer<span class="sym">:</span>pchar<span class="sym">;</span>inbuf<span class="sym">:</span><span class="kwb">integer</span><span class="sym">);

</span><span class="kwa">var</span> p<span class="sym">,</span>p2 <span class="sym">:</span> pchar<span class="sym">;
</span>    c  <span class="sym">:</span> <span class="kwb">char</span><span class="sym">;

</span><span class="kwa">begin
  if</span> inbuf<span class="sym">&gt;</span><span class="num">0</span> <span class="kwa">then
   begin
</span>     p<span class="sym">:=</span>buffer<span class="sym">;
</span>     p2<span class="sym">:=&#64;</span>buffer<span class="sym">[</span>inbuf<span class="num">-1</span><span class="sym">];
</span>     <span class="kwa">while</span> p<span class="sym">&lt;</span>p2 <span class="kwa">do
      begin
</span>       c<span class="sym">:=</span>lookupcomplement<span class="sym">[</span>p^<span class="sym">];
</span>       p^<span class="sym">:=</span>lookupcomplement<span class="sym">[</span>p2^<span class="sym">];
</span>       p2^<span class="sym">:=</span>c<span class="sym">;
</span>       inc<span class="sym">(</span>p<span class="sym">);
</span>       dec<span class="sym">(</span>p2<span class="sym">);
</span>     <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">if</span> p2<span class="sym">=</span>p <span class="kwa">then
</span>      p^<span class="sym">:=</span>lookupcomplement<span class="sym">[</span>p^<span class="sym">];
</span>    p<span class="sym">[</span>inbuf<span class="sym">]:=</span><span class="esc">#0</span><span class="sym">;
</span>    p<span class="sym">:=</span>buffer<span class="sym">;

</span>   <span class="kwa">while</span> <span class="sym">(</span>inbuf <span class="sym">&gt;</span> <span class="num">60</span><span class="sym">)</span> <span class="kwa">do
     begin
</span>    	c <span class="sym">:=</span> p<span class="sym">[</span><span class="num">60</span><span class="sym">];
</span>	p<span class="sym">[</span><span class="num">60</span><span class="sym">]:=</span><span class="esc">#0</span><span class="sym">;
</span>        writeln<span class="sym">(</span>p<span class="sym">);
</span>        p<span class="sym">[</span><span class="num">60</span><span class="sym">]:=</span>c<span class="sym">;
</span>	inc<span class="sym">(</span>p<span class="sym">,</span><span class="num">60</span><span class="sym">);
</span>	dec<span class="sym">(</span>inbuf<span class="sym">,</span><span class="num">60</span><span class="sym">);
</span>     <span class="kwa">end</span><span class="sym">;
</span>     p<span class="sym">[</span>inbuf<span class="sym">]:=</span><span class="esc">#0</span><span class="sym">;
</span>     writeln<span class="sym">(</span>p<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> run<span class="sym">;

</span><span class="kwa">var</span> s  <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;
</span>    c  <span class="sym">:</span> <span class="kwb">char</span><span class="sym">;
</span>    buffersize<span class="sym">,
</span>    bufferptr<span class="sym">,
</span>    len		<span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>    p  <span class="sym">:</span>pchar<span class="sym">;


</span><span class="kwa">begin
  for</span> c<span class="sym">:=</span><span class="esc">#0 </span> <span class="kwa">to</span> <span class="esc">#255 </span> <span class="kwa">do
</span>    lookupcomplement<span class="sym">[</span>c<span class="sym">]:=</span>c<span class="sym">;
</span>  <span class="kwa">for</span> len<span class="sym">:=</span><span class="num">0</span> <span class="kwa">to</span> high<span class="sym">(</span>FASTAXLAT<span class="sym">)</span> <span class="kwa">do
    begin
</span>      lookupcomplement<span class="sym">[</span>FASTAXLAT<span class="sym">[</span>len<span class="sym">][</span><span class="num">0</span><span class="sym">]]:=</span>upcase<span class="sym">(</span>FASTAXLAT<span class="sym">[</span>len<span class="sym">][</span><span class="num">1</span><span class="sym">]);
</span>      lookupcomplement<span class="sym">[</span>FASTAXLAT<span class="sym">[</span>len<span class="sym">][</span><span class="num">1</span><span class="sym">]]:=</span>upcase<span class="sym">(</span>FASTAXLAT<span class="sym">[</span>len<span class="sym">][</span><span class="num">0</span><span class="sym">]);
</span>    <span class="kwa">end</span><span class="sym">;
</span>  buffersize<span class="sym">:=</span>bufferincrement<span class="sym">;
</span>  bufferptr <span class="sym">:=</span><span class="num">0</span><span class="sym">;
</span>  getmem<span class="sym">(</span>p<span class="sym">,</span>buffersize<span class="sym">);
</span>  <span class="kwa">while not</span> eof <span class="kwa">do
    begin
</span>      readln<span class="sym">(</span>s<span class="sym">);
</span>      len<span class="sym">:=</span>length<span class="sym">(</span>s<span class="sym">);
</span>      <span class="kwa">if</span> <span class="sym">(</span>len<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>s<span class="sym">[</span><span class="num">1</span><span class="sym">]=</span><span class="str">'&gt;'</span><span class="sym">)</span> <span class="kwa">then
          begin
</span>	    flushbuffer<span class="sym">(</span>p<span class="sym">,</span>bufferptr<span class="sym">);
</span>	    writeln<span class="sym">(</span>s<span class="sym">);
</span>	    bufferptr<span class="sym">:=</span><span class="num">0</span><span class="sym">;
</span>	  <span class="kwa">end
       else
         begin
           if</span> <span class="sym">(</span>bufferptr<span class="sym">+</span>len<span class="sym">+</span><span class="num">1</span><span class="sym">)&gt;</span>buffersize <span class="kwa">then
	     begin
</span>	        inc<span class="sym">(</span>buffersize<span class="sym">,</span>bufferincrement<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span>                reallocmem<span class="sym">(</span>p<span class="sym">,</span>buffersize<span class="sym">);
</span>	     <span class="kwa">end</span><span class="sym">;
</span>	   move <span class="sym">(</span>s<span class="sym">[</span><span class="num">1</span><span class="sym">],</span>p<span class="sym">[</span>bufferptr<span class="sym">],</span>len<span class="sym">);
</span>	   inc<span class="sym">(</span>bufferptr<span class="sym">,</span>len<span class="sym">);
</span>	 <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;
</span>    flushbuffer<span class="sym">(</span>p<span class="sym">,</span>bufferptr<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">begin
</span>  run<span class="sym">;
</span><span class="kwa">end</span>.
