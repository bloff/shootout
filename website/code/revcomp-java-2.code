<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Mehmet Soyturk
*/</span>

<span class="com">/*
  For an input size of n MB you need a direct memory of 3*n size.
  To ensure this, you must run java with the option: -XX:MaxDirectMemorySize=&lt;m&gt;M
  with &lt;m&gt; at least 3*n. Default for &lt;m&gt; is 64MB.
  (see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4879883)
*/</span>


<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>nio<span class="sym">.*;

</span><span class="kwa">public class</span> revcomp <span class="sym">{

</span>    <span class="kwa">static final</span>  <span class="kwb">byte</span><span class="sym">[]</span> chars <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span><span class="num">128</span><span class="sym">];
</span>    <span class="kwa">static</span> <span class="sym">{
</span>        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>chars<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)
</span>            chars<span class="sym">[</span>i<span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> i<span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'t'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'T'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'A'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'a'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'A'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'T'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'g'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'G'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'C'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'c'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'C'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'G'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'v'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'V'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'B'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'h'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'H'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'D'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'r'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'R'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'Y'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'m'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'M'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'K'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'y'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'Y'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'R'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'k'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'K'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'M'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'b'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'B'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'V'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'d'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'D'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'H'</span><span class="sym">;
</span>        chars<span class="sym">[</span><span class="str">'u'</span><span class="sym">] =</span> chars<span class="sym">[</span><span class="str">'U'</span><span class="sym">] = (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'A'</span><span class="sym">;
    }

</span>    <span class="kwa">private static</span> <span class="kwc">ByteBuffer</span> appendToBuffer<span class="sym">(</span><span class="kwc">ByteBuffer</span> buf<span class="sym">,</span> <span class="kwc">String</span> str<span class="sym">) {
</span>        <span class="kwb">byte</span><span class="sym">[]</span> bytes <span class="sym">=</span> str<span class="sym">.</span>getBytes<span class="sym">();
</span>        <span class="kwc">ByteBuffer</span> newBuffer<span class="sym">;
</span>        <span class="kwa">if</span><span class="sym">(</span>buf<span class="sym">.</span>position<span class="sym">() +</span> bytes<span class="sym">.</span>length <span class="sym">&gt;=</span> buf<span class="sym">.</span>capacity<span class="sym">()) {
</span>            newBuffer <span class="sym">=</span> <span class="kwc">ByteBuffer</span><span class="sym">.</span>allocateDirect<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>buf<span class="sym">.</span>capacity<span class="sym">());
</span>            buf<span class="sym">.</span>flip<span class="sym">();
</span>            newBuffer<span class="sym">.</span>put<span class="sym">(</span>buf<span class="sym">);
</span>            buf <span class="sym">=</span> null<span class="sym">;
        }</span> <span class="kwa">else</span> <span class="sym">{
</span>            newBuffer <span class="sym">=</span> buf<span class="sym">;
        }
</span>        newBuffer<span class="sym">.</span>put<span class="sym">(</span>bytes<span class="sym">);
</span>        <span class="kwa">return</span> newBuffer<span class="sym">;
    }

</span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{

</span>        <span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span>        <span class="kwc">String</span> header <span class="sym">=</span> in<span class="sym">.</span>readLine <span class="sym">();
</span>        <span class="kwa">while</span> <span class="sym">(</span>header <span class="sym">!=</span> null<span class="sym">) {
</span>            <span class="kwc">ByteBuffer</span> buf <span class="sym">=</span> <span class="kwc">ByteBuffer</span><span class="sym">.</span>allocateDirect<span class="sym">(</span><span class="num">7</span><span class="sym">*</span><span class="num">512</span><span class="sym">*</span><span class="num">1024</span><span class="sym">);

</span>            <span class="slc">// read the sequence into the StringBuffer
</span>            <span class="kwc">String</span> line <span class="sym">=</span> in<span class="sym">.</span>readLine <span class="sym">();
</span>            <span class="kwa">while</span> <span class="sym">(</span>line <span class="sym">!=</span> null <span class="sym">&amp;&amp; (</span>line<span class="sym">.</span>length<span class="sym">() ==</span> <span class="num">0</span> <span class="sym">||</span> line<span class="sym">.</span>charAt <span class="sym">(</span><span class="num">0</span><span class="sym">) !=</span> <span class="str">'&gt;'</span><span class="sym">)) {
</span>                buf <span class="sym">=</span> appendToBuffer<span class="sym">(</span>buf<span class="sym">,</span> line <span class="sym">+</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);
</span>                line <span class="sym">=</span> in<span class="sym">.</span>readLine <span class="sym">();
            }

</span>            <span class="slc">// reverse StringBuffer + find complements, don't touch '\n'
</span>            <span class="kwb">byte</span> NL <span class="sym">= (</span><span class="kwb">byte</span><span class="sym">)</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;
</span>            <span class="kwb">int</span> from <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> to <span class="sym">=</span> buf<span class="sym">.</span>position <span class="sym">() -</span> <span class="num">1</span><span class="sym">;
</span>            <span class="kwa">while</span> <span class="sym">(</span>from <span class="sym">&lt;=</span> to<span class="sym">) {

</span>                <span class="kwb">byte</span> fromCh <span class="sym">=</span> buf<span class="sym">.</span>get <span class="sym">(</span>from<span class="sym">);
</span>                <span class="kwa">if</span> <span class="sym">(</span>fromCh <span class="sym">==</span> NL<span class="sym">) {
</span>                    from<span class="sym">++;
</span>                    <span class="kwa">continue</span><span class="sym">;
                }

</span>                <span class="kwb">byte</span> toCh   <span class="sym">=</span> buf<span class="sym">.</span>get <span class="sym">(</span>to<span class="sym">);
</span>                <span class="kwa">if</span> <span class="sym">(</span>toCh <span class="sym">==</span> NL<span class="sym">) {
</span>                    to<span class="sym">--;
</span>                    <span class="kwa">continue</span><span class="sym">;
                }

</span>                buf<span class="sym">.</span>put <span class="sym">(</span>from<span class="sym">++,</span> chars<span class="sym">[</span>toCh<span class="sym">]);
</span>                buf<span class="sym">.</span>put <span class="sym">(</span>to<span class="sym">--,</span> chars<span class="sym">[</span>fromCh<span class="sym">]);
            }

</span>            <span class="slc">// print
</span>            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>print<span class="sym">(</span>header<span class="sym">);
</span>            <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>print<span class="sym">(</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">);

</span>            <span class="kwb">byte</span><span class="sym">[]</span> b <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span><span class="num">1024</span><span class="sym">];
</span>            buf<span class="sym">.</span>flip<span class="sym">();
</span>            <span class="kwa">while</span><span class="sym">(</span>buf<span class="sym">.</span>hasRemaining<span class="sym">()) {
</span>                <span class="kwb">int</span> len <span class="sym">=</span> b<span class="sym">.</span>length <span class="sym">&lt;=</span> buf<span class="sym">.</span>remaining<span class="sym">()</span> ? b<span class="sym">.</span>length <span class="sym">:
</span>                                                        buf<span class="sym">.</span>remaining<span class="sym">();
</span>                buf<span class="sym">.</span>get<span class="sym">(</span>b<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> len<span class="sym">);
</span>                <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>write<span class="sym">(</span>b<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> len<span class="sym">);
            }
</span>            header <span class="sym">=</span> line<span class="sym">;
</span>            buf <span class="sym">=</span> null<span class="sym">;
        }
    }
}</span>
