<span class="com">(*</span>
<span class="com"> * The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * compilation: ocamlopt -noassert -unsafe -ccopt -O3  str.cmxa regex-dna.ml -o regex-dna</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Matthieu Dubuget</span>
<span class="com"> *)</span>

<span class="kwa">let</span> eat s <span class="sym">=</span>
  <span class="kwa">let</span> b <span class="sym">=</span> Buffer.create <span class="num">0x19000</span> <span class="kwa">in</span>
    <span class="kwa">try</span>
      <span class="kwa">while true do</span>
	Buffer.add_string b <span class="sym">((</span>input_line s<span class="sym">)</span> ^ <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
      <span class="kwa">done</span><span class="sym">;</span>
      <span class="str">&quot;&quot;</span>
    <span class="kwa">with</span> End_of_file <span class="sym">-&gt;</span> Buffer.contents b

<span class="kwa">let</span> clean s <span class="sym">=</span>
  <span class="kwa">let</span> r <span class="sym">=</span> Str.regexp <span class="str">&quot;^&gt;.*$</span><span class="esc">\\</span><span class="str">|</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwa">in</span>
    Str.global_replace r <span class="str">&quot;&quot;</span> s

<span class="kwa">let</span> occurs s r <span class="sym">=</span>
  <span class="kwa">let rec</span> cpt_rec r s offset c <span class="sym">=</span>
    <span class="kwa">let</span> eos <span class="sym">=</span>
      <span class="kwa">try</span>
	ignore<span class="sym">(</span>Str.search_forward r s offset<span class="sym">);</span>
	<span class="kwa">false</span>
      <span class="kwa">with</span> Not_found <span class="sym">-&gt;</span> <span class="kwa">true in</span>
      <span class="kwa">if</span> eos <span class="kwa">then</span> c
      <span class="kwa">else</span>
	<span class="kwa">begin</span>
	  cpt_rec r s <span class="sym">(</span>Str.match_end <span class="sym">()) (</span>succ c<span class="sym">)</span>
	<span class="kwa">end in</span>
    cpt_rec r s <span class="num">0 0</span>

<span class="kwa">let</span> patterns <span class="sym">=  [</span><span class="str">&quot;agggtaaa</span><span class="esc">\\</span><span class="str">|tttaccct&quot;</span><span class="sym">;</span>
		 <span class="str">&quot;[cgt]gggtaaa</span><span class="esc">\\</span><span class="str">|tttaccc[acg]&quot;</span><span class="sym">;</span>
		 <span class="str">&quot;a[act]ggtaaa</span><span class="esc">\\</span><span class="str">|tttacc[agt]t&quot;</span><span class="sym">;</span>
		 <span class="str">&quot;ag[act]gtaaa</span><span class="esc">\\</span><span class="str">|tttac[agt]ct&quot;</span><span class="sym">;</span>
		 <span class="str">&quot;agg[act]taaa</span><span class="esc">\\</span><span class="str">|ttta[agt]cct&quot;</span><span class="sym">;</span>
		 <span class="str">&quot;aggg[acg]aaa</span><span class="esc">\\</span><span class="str">|ttt[cgt]ccct&quot;</span><span class="sym">;</span>
		 <span class="str">&quot;agggt[cgt]aa</span><span class="esc">\\</span><span class="str">|tt[acg]accct&quot;</span><span class="sym">;</span>
		 <span class="str">&quot;agggta[cgt]a</span><span class="esc">\\</span><span class="str">|t[acg]taccct&quot;</span><span class="sym">;</span>
		 <span class="str">&quot;agggtaa[cgt]</span><span class="esc">\\</span><span class="str">|[acg]ttaccct&quot;</span><span class="sym">]</span>

<span class="kwa">let</span> apply_pattern ch rs <span class="sym">=</span>
  <span class="kwa">let</span> rs_to_print <span class="sym">=</span> Str.global_replace <span class="sym">(</span>Str.regexp <span class="str">&quot;</span><span class="esc">\\</span><span class="str">&quot;</span><span class="sym">)</span> <span class="str">&quot;&quot;</span> rs <span class="kwa">in</span>
  Printf.printf <span class="str">&quot;%s %n</span><span class="esc">\n</span><span class="str">&quot;</span> rs_to_print <span class="sym">(</span>occurs ch <span class="sym">(</span>Str.regexp_case_fold rs<span class="sym">))</span>

<span class="kwa">let</span> alternatives <span class="sym">=   [</span><span class="str">&quot;B&quot;</span><span class="sym">,</span><span class="str">&quot;(c|g|t)&quot;</span><span class="sym">;</span> <span class="str">&quot;D&quot;</span><span class="sym">,</span><span class="str">&quot;(a|g|t)&quot;</span><span class="sym">;</span> <span class="str">&quot;H&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c|t)&quot;</span><span class="sym">;</span>
		      <span class="str">&quot;K&quot;</span><span class="sym">,</span><span class="str">&quot;(g|t)&quot;</span><span class="sym">;</span>   <span class="str">&quot;M&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c)&quot;</span><span class="sym">;</span>   <span class="str">&quot;N&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">;</span>
		      <span class="str">&quot;R&quot;</span><span class="sym">,</span><span class="str">&quot;(a|g)&quot;</span><span class="sym">;</span>   <span class="str">&quot;S&quot;</span><span class="sym">,</span><span class="str">&quot;(c|g)&quot;</span><span class="sym">;</span>   <span class="str">&quot;V&quot;</span><span class="sym">,</span><span class="str">&quot;(a|c|g)&quot;</span><span class="sym">;</span>
		      <span class="str">&quot;W&quot;</span><span class="sym">,</span><span class="str">&quot;(a|t)&quot;</span><span class="sym">;</span>   <span class="str">&quot;Y&quot;</span><span class="sym">,</span><span class="str">&quot;(c|t)&quot;</span><span class="sym">;]</span>

<span class="kwa">let</span> apply_alternatives ch <span class="sym">(</span>s<span class="sym">,</span>repl<span class="sym">) =</span>
  Str.global_replace <span class="sym">(</span>Str.regexp_string_case_fold s<span class="sym">)</span> repl ch

<span class="kwa">let</span> main <span class="sym">() =</span>
  <span class="kwa">let</span> ch <span class="sym">=</span> eat stdin <span class="kwa">in</span>
  <span class="kwa">let</span> sz1 <span class="sym">=</span> String.length ch <span class="kwa">in</span>
  <span class="kwa">let</span> ch <span class="sym">=</span> clean ch <span class="kwa">in</span>
  <span class="kwa">let</span> sz2 <span class="sym">=</span> String.length ch <span class="kwa">in</span>
  <span class="kwa">let</span> <span class="sym">() =</span> List.iter <span class="sym">(</span>apply_pattern ch<span class="sym">)</span> patterns <span class="kwa">in</span>
  <span class="kwa">let</span> ch <span class="sym">=</span> List.fold_left apply_alternatives ch alternatives <span class="kwa">in</span>
  <span class="kwa">let</span> sz3 <span class="sym">=</span> String.length ch <span class="kwa">in</span>
    Printf.printf <span class="str">&quot;</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">&quot;</span> sz1 sz2 sz3 <span class="sym">;;</span>

main <span class="sym">()</span>

