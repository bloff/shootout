<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- Simon Marlow
</span>
<span class="com">{-# OPTIONS_GHC -funbox-strict-fields #-}</span>
<span class="kwa">import</span> System
<span class="kwa">import</span> Text.Printf

<span class="kwa">data</span> Tree <span class="sym">=</span> Nil <span class="sym">|</span> Node <span class="sym">!</span><span class="kwb">Int</span> Tree Tree

main <span class="sym">=</span> <span class="kwa">do
</span>  <span class="sym">[</span>n<span class="sym">] &lt;-</span> getArgs
  <span class="kwa">let</span> max<span class="str">' = max (min'</span><span class="sym">+</span><span class="num">2</span><span class="sym">) (</span>read n<span class="sym">)
</span>  <span class="kwa">let</span> t <span class="sym">=</span> make <span class="num">0</span> <span class="sym">(</span>max<span class="str">'+1)
  printf &quot;stretch tree of depth %d\t check: %d\n&quot; (max'</span><span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>itemCheck t<span class="sym">)
</span>  <span class="kwa">let</span> longlived <span class="sym">=</span> make <span class="num">0</span> max<span class="str">'
  depthLoop min'</span> max<span class="str">'
  printf &quot;long lived tree of depth %d\t check: %d\n&quot; max'</span> <span class="sym">(</span>itemCheck longlived<span class="sym">)

</span>min<span class="str">' :: Int
min'</span> <span class="sym">=</span> <span class="num">4

</span>depthLoop d m <span class="sym">|</span> d <span class="sym">&gt;</span> m <span class="sym">=</span> return <span class="sym">()
</span>depthLoop d m <span class="sym">=</span> <span class="kwa">do
</span>   printf <span class="str">&quot;%d\t trees of depth %d\t check: %d\n&quot;</span> <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">)</span> d <span class="sym">(</span>sumLoop n d <span class="num">0</span><span class="sym">)
</span>   depthLoop <span class="sym">(</span>d<span class="sym">+</span><span class="num">2</span><span class="sym">)</span> m
   <span class="kwa">where</span> n <span class="sym">=</span> <span class="num">2</span>^<span class="sym">(</span>m <span class="sym">-</span> d <span class="sym">+</span> min<span class="str">')

sumLoop :: Int -&gt; Int -&gt; Int -&gt; Int
sumLoop 0 d acc = acc
sumLoop k d acc = c `seq` sumLoop (k-1) d (acc + c + c'</span><span class="sym">)
</span>    <span class="kwa">where</span> c  <span class="sym">=</span> itemCheck <span class="sym">(</span>make k d<span class="sym">)
</span>          c<span class="str">' = itemCheck (make (-1*k) d)

make :: Int -&gt; Int -&gt; Tree
make i 0 = i `seq` Nil
make i d = Node i (make ((2*i)-1) (d-1)) (make (2*i) (d-1))

itemCheck Nil = 0
itemCheck (Node x l r) = x + itemCheck l - itemCheck r</span>
