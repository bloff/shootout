<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; contributed by Greg Buchholz</span>

<span class="sym">(</span>defmacro psum <span class="sym">(</span>name f<span class="sym">)</span>
  `<span class="sym">(</span>format t <span class="str">&quot;~,9F~A~A~%&quot;</span>
     <span class="sym">(</span>do <span class="sym">((</span>k <span class="num">1.0</span>d0 <span class="sym">(+</span> k <span class="num">1.0</span>d0<span class="sym">))</span>
          <span class="sym">(</span>sum <span class="num">0.0</span>d0 <span class="sym">(+</span> sum <span class="sym">,</span>f<span class="sym">)))</span>
         <span class="sym">((&gt;</span> k n<span class="sym">)</span> sum<span class="sym">))</span>
     #\tab <span class="sym">,</span>name<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>args #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
               #<span class="sym">+</span>cmu extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
               #<span class="sym">+</span>gcl si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*)</span>
         <span class="sym">(</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> args<span class="sym">)))))</span>
    <span class="sym">(</span>psum <span class="str">&quot;(2/3)^k&quot;</span>       <span class="sym">(</span><span class="kwa">expt</span> <span class="sym">(/</span> <span class="num">2.0</span>d0 <span class="num">3.0</span>d0<span class="sym">) (-</span> k <span class="num">1.0</span>d0<span class="sym">)))</span>
    <span class="sym">(</span>psum <span class="str">&quot;k^-0.5&quot;</span>        <span class="sym">(/</span> <span class="num">1.0</span>d0 <span class="sym">(</span><span class="kwa">sqrt</span> k<span class="sym">)))</span>
    <span class="sym">(</span>psum <span class="str">&quot;1/k(k+1)&quot;</span>      <span class="sym">(/</span> <span class="num">1.0</span>d0 <span class="sym">(*</span> k <span class="sym">(+</span> <span class="num">1.0</span>d0 k<span class="sym">))))</span>
    <span class="sym">(</span>psum <span class="str">&quot;Flint Hills&quot;</span>   <span class="sym">(</span>let <span class="sym">((</span>s <span class="sym">(</span><span class="kwa">sin</span> k<span class="sym">)))</span>
                            <span class="sym">(/</span> <span class="num">1.0</span>d0 <span class="sym">(* (*</span> k k k<span class="sym">) (*</span> s s<span class="sym">)))))</span>
    <span class="sym">(</span>psum <span class="str">&quot;Cookson Hills&quot;</span> <span class="sym">(</span>let <span class="sym">((</span>c <span class="sym">(</span><span class="kwa">cos</span> k<span class="sym">)))</span>
                            <span class="sym">(/</span> <span class="num">1.0</span>d0 <span class="sym">(* (*</span> k k k<span class="sym">) (*</span> c c<span class="sym">)))))</span>
    <span class="sym">(</span>psum <span class="str">&quot;Harmonic&quot;</span>      <span class="sym">(/</span> <span class="num">1.0</span>d0 k<span class="sym">))</span>
    <span class="sym">(</span>psum <span class="str">&quot;Riemann Zeta&quot;</span>  <span class="sym">(/</span> <span class="num">1.0</span>d0 <span class="sym">(*</span> k k<span class="sym">)))</span>
    <span class="sym">(</span>let <span class="sym">((</span>a <span class="sym">-</span><span class="num">1.0</span>d0<span class="sym">))</span>
      <span class="sym">(</span>psum <span class="str">&quot;Alternating Harmonic&quot;</span>
            <span class="sym">(</span><span class="kwa">progn</span> <span class="sym">(</span>setf a <span class="sym">(-</span> a<span class="sym">))</span>
                   <span class="sym">(/</span> a k<span class="sym">))))</span>
    <span class="sym">(</span>let <span class="sym">((</span>a <span class="sym">-</span><span class="num">1.0</span>d0<span class="sym">))</span>
      <span class="sym">(</span>psum <span class="str">&quot;Gregory&quot;</span>
            <span class="sym">(</span><span class="kwa">progn</span> <span class="sym">(</span>setf a <span class="sym">(-</span> a<span class="sym">))</span>
                   <span class="sym">(/</span> a <span class="sym">(</span><span class="num">1</span><span class="sym">- (*</span> <span class="num">2.0</span>d0 k<span class="sym">))))))))</span>
