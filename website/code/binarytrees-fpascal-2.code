<span class="com">{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Ales Katona
}</span>

<span class="kwa">program</span> BinaryTrees<span class="sym">;

</span><span class="com">{$mode objfpc}</span>

<span class="kwa">uses
</span>  Math<span class="sym">;

</span><span class="kwa">type
</span>  PNode <span class="sym">=</span> ^TNode<span class="sym">;
</span>  TNode <span class="sym">=</span> <span class="kwa">record
</span>    l<span class="sym">,</span> r<span class="sym">:</span> PNode<span class="sym">;
</span>    i<span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>  <span class="kwa">end</span><span class="sym">;

</span><span class="kwa">function</span> CreateNode<span class="sym">(</span>l2<span class="sym">,</span> r2<span class="sym">:</span> PNode<span class="sym">;</span> <span class="kwa">const</span> i2<span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">):</span> PNode<span class="sym">;
</span><span class="kwa">begin
</span>  GetMem<span class="sym">(</span>Result<span class="sym">,</span> SizeOf<span class="sym">(</span>TNode<span class="sym">));
</span>  Result^.l<span class="sym">:=</span>l2<span class="sym">;
</span>  Result^.r<span class="sym">:=</span>r2<span class="sym">;
</span>  Result^.i<span class="sym">:=</span>i2<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> DestroyNode<span class="sym">(</span>ANode<span class="sym">:</span> PNode<span class="sym">);
</span><span class="kwa">begin
  if</span> ANode^.l <span class="sym">&lt;&gt;</span> <span class="kwa">nil then begin
</span>    DestroyNode<span class="sym">(</span>ANode^.l<span class="sym">);
</span>    DestroyNode<span class="sym">(</span>ANode^.r<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;
</span>  FreeMem<span class="sym">(</span>ANode<span class="sym">,</span> SizeOf<span class="sym">(</span>TNode<span class="sym">));
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">function</span> CheckNode<span class="sym">(</span>ANode<span class="sym">:</span> PNode<span class="sym">):</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="kwa">begin
  if</span> ANode^.l <span class="sym">=</span> <span class="kwa">nil then
</span>    Result<span class="sym">:=</span>ANode^.i
  <span class="kwa">else
</span>    Result<span class="sym">:=</span>CheckNode<span class="sym">(</span>ANode^.l<span class="sym">) +</span> ANode^.i <span class="sym">-</span> CheckNode<span class="sym">(</span>ANode^.r<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">function</span> Make<span class="sym">(</span>i<span class="sym">,</span> d<span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">):</span> PNode<span class="sym">;
</span><span class="kwa">begin
  if</span> d <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> Result<span class="sym">:=</span>CreateNode<span class="sym">(</span><span class="kwa">nil</span><span class="sym">,</span> <span class="kwa">nil</span><span class="sym">,</span> i<span class="sym">)
</span>  <span class="kwa">else</span> Result<span class="sym">:=</span>CreateNode<span class="sym">(</span>Make<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> i <span class="num">- 1</span><span class="sym">,</span> d <span class="num">- 1</span><span class="sym">),</span> Make<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> i<span class="sym">,</span> d <span class="num">- 1</span><span class="sym">),</span> i<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">const
</span>  mind <span class="sym">=</span> <span class="num">4</span><span class="sym">;

</span><span class="kwa">var
</span>  maxd        <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>  strd        <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>  c<span class="sym">,</span> d<span class="sym">,</span> i     <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>  iter        <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>  aa<span class="sym">,</span> bb<span class="sym">,</span> cc  <span class="sym">:</span> PNode<span class="sym">;
</span>  llt         <span class="sym">:</span> PNode<span class="sym">;

</span><span class="kwa">begin
  if</span> ParamCount <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span> Val<span class="sym">(</span>ParamStr<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> strd<span class="sym">,</span> maxd<span class="sym">)
</span>  <span class="kwa">else</span> strd<span class="sym">:=</span><span class="num">10</span><span class="sym">;
</span>  maxd<span class="sym">:=</span>Max<span class="sym">(</span>mind <span class="sym">+</span> <span class="num">2</span><span class="sym">,</span> strd<span class="sym">);
</span>  strd<span class="sym">:=</span>maxd <span class="sym">+</span> <span class="num">1</span><span class="sym">;


</span>  cc<span class="sym">:=</span>Make<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> strd<span class="sym">);
</span>  Writeln<span class="sym">(</span><span class="str">'stretch tree of depth '</span><span class="sym">,</span> strd<span class="sym">,</span> <span class="esc">#9</span><span class="str">' check: '</span><span class="sym">,</span> CheckNode<span class="sym">(</span>cc<span class="sym">));
</span>  DestroyNode<span class="sym">(</span>cc<span class="sym">);

</span>  llt<span class="sym">:=</span>Make<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxd<span class="sym">);

</span>  d<span class="sym">:=</span>mind<span class="sym">;
</span>  <span class="kwa">while</span> d <span class="sym">&lt;=</span> maxd <span class="kwa">do begin
</span>    iter<span class="sym">:=</span><span class="num">1</span> <span class="kwa">shl</span> <span class="sym">(</span>maxd <span class="sym">-</span> d <span class="sym">+</span> mind<span class="sym">);
</span>    c<span class="sym">:=</span><span class="num">0</span><span class="sym">;
</span>    <span class="kwa">for</span> i<span class="sym">:=</span><span class="num">1</span> <span class="kwa">to</span> Iter <span class="kwa">do begin
</span>      aa<span class="sym">:=</span>Make<span class="sym">(</span>i<span class="sym">,</span> d<span class="sym">);
</span>      bb<span class="sym">:=</span>Make<span class="sym">(-</span>i<span class="sym">,</span> d<span class="sym">);
</span>      c<span class="sym">:=</span>c <span class="sym">+</span> CheckNode<span class="sym">(</span>aa<span class="sym">) +</span> CheckNode<span class="sym">(</span>bb<span class="sym">);
</span>      DestroyNode<span class="sym">(</span>aa<span class="sym">);
</span>      DestroyNode<span class="sym">(</span>bb<span class="sym">);
</span>    <span class="kwa">end</span><span class="sym">;
</span>    Writeln<span class="sym">(</span><span class="num">2</span> <span class="sym">*</span> Iter<span class="sym">,</span> <span class="esc">#9</span><span class="str">'  trees of depth '</span><span class="sym">,</span> d<span class="sym">,</span> <span class="esc">#9</span><span class="str">' check: '</span><span class="sym">,</span> c<span class="sym">);
</span>    Inc<span class="sym">(</span>d<span class="sym">,</span> <span class="num">2</span><span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;

</span>  Writeln<span class="sym">(</span><span class="str">'long lived tree of depth '</span><span class="sym">,</span> maxd<span class="sym">,</span> <span class="esc">#9</span><span class="str">' check: '</span><span class="sym">,</span> CheckNode<span class="sym">(</span>llt<span class="sym">));
</span>  DestroyNode<span class="sym">(</span>llt<span class="sym">);
</span><span class="kwa">end</span>.
