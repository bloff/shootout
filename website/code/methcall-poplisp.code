<span class="line">    1 </span><span class="slc">;;; -*- mode: lisp -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: methcall-poplisp.code,v 1.3 2004-11-11 07:14:00 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="slc">;; OO with CLOS
</span><span class="line">    6 </span><span class="slc"></span><span class="sym">(</span>proclaim <span class="str">'(optimize (speed 3)(safety 0)(space 0)(debug 0)(compilation-speed 0)))
</span><span class="line">    7 </span><span class="str">
</span><span class="line">    8 </span><span class="str">(eval-when (:compile-toplevel :load-toplevel :execute)
</span><span class="line">    9 </span><span class="str">  (defstruct (toggle (:constructor make-toggle ()))
</span><span class="line">   10 </span><span class="str">    (state t :type boolean)))
</span><span class="line">   11 </span><span class="str">
</span><span class="line">   12 </span><span class="str">(defmethod activate ((this toggle))
</span><span class="line">   13 </span><span class="str">  (setf (toggle-state this) (not (toggle-state this)))
</span><span class="line">   14 </span><span class="str">  this)
</span><span class="line">   15 </span><span class="str">
</span><span class="line">   16 </span><span class="str">(eval-when (:compile-toplevel :load-toplevel :execute)
</span><span class="line">   17 </span><span class="str">  (defstruct (nth-toggle (:include toggle)
</span><span class="line">   18 </span><span class="str">                         (:constructor make-nth-toggle (count-max)))
</span><span class="line">   19 </span><span class="str">    (count-max 1 :type fixnum)
</span><span class="line">   20 </span><span class="str">    (counter 0 :type fixnum)))
</span><span class="line">   21 </span><span class="str">
</span><span class="line">   22 </span><span class="str">(defmethod activate ((this nth-toggle))
</span><span class="line">   23 </span><span class="str">  (incf (nth-toggle-counter this))
</span><span class="line">   24 </span><span class="str">  (cond ((&gt;= (nth-toggle-counter this)
</span><span class="line">   25 </span><span class="str">             (nth-toggle-count-max this))
</span><span class="line">   26 </span><span class="str">         (setf (toggle-state this) (not (toggle-state this)))
</span><span class="line">   27 </span><span class="str">         (setf (nth-toggle-counter this) 0)))
</span><span class="line">   28 </span><span class="str">  this)
</span><span class="line">   29 </span><span class="str">
</span><span class="line">   30 </span><span class="str">(defun print-bool (b)
</span><span class="line">   31 </span><span class="str">  (format t (if b &quot;true~%&quot; &quot;false~%&quot;)))
</span><span class="line">   32 </span><span class="str">
</span><span class="line">   33 </span><span class="str">(let ((n (parse-integer (or (car pop11::poparglist) &quot;1&quot;)))
</span><span class="line">   34 </span><span class="str">(val))
</span><span class="line">   35 </span><span class="str">(declare (fixnum n val))
</span><span class="line">   36 </span><span class="str">(let ((tog (make-toggle)))
</span><span class="line">   37 </span><span class="str">  (dotimes (i n)
</span><span class="line">   38 </span><span class="str">(declare (fixnum i))
</span><span class="line">   39 </span><span class="str">(setq val (toggle-state (activate tog))))
</span><span class="line">   40 </span><span class="str">  (print-bool (toggle-state tog))
</span><span class="line">   41 </span><span class="str">(let ((ntog (make-nth-toggle 3)))
</span><span class="line">   42 </span><span class="str">  (dotimes (i n)
</span><span class="line">   43 </span><span class="str">(declare (fixnum i))
</span><span class="line">   44 </span><span class="str">(setq val (toggle-state (activate ntog))))
</span><span class="line">   45 </span><span class="str">  (print-bool (toggle-state ntog)))))</span>
