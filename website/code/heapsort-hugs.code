<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: heapsort-hugs.code,v 1.2 2004-11-08 08:15:14 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- from Julian Assange, improved by Karl-Filip Faxen
</FONT></I>
<B><FONT COLOR="#A020F0">module</FONT></B> Main(main) <B><FONT COLOR="#A020F0">where</FONT></B>
<B><FONT COLOR="#A020F0">import</FONT></B> System(getArgs, exitWith, ExitCode(..))
<B><FONT COLOR="#A020F0">import</FONT></B> Numeric(showFFloat)

main = do
         arg &lt;- getArgs
	 <B><FONT COLOR="#A020F0">case</FONT></B> arg <B><FONT COLOR="#A020F0">of</FONT></B>
              [num] -&gt; putStrLn (showFFloat (Just 10) answer <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>)
	               <B><FONT COLOR="#A020F0">where</FONT></B>
		             answer = last . heapsort .
                                      take (read num) . random $ 1.0
	      <B><FONT COLOR="#A020F0">_ </FONT></B>    -&gt; exitWith (ExitFailure 1)

<I><FONT COLOR="#B22222">-- construct an infinite list of random numbers
</FONT></I>random <B><FONT COLOR="#228B22">:: Double -&gt; [Double]
</FONT></B>random max = map norm . rand $ 42
           <B><FONT COLOR="#A020F0">where</FONT></B> norm x = (fromIntegral x) * (max / (fromIntegral im))
                 rand x = (x' : (rand x'))
	            <B><FONT COLOR="#A020F0">where</FONT></B> x' = (x * ia + ic) `mod` im
	         im     = 139968
                 ia     = 3877
                 ic     = 29573 <B><FONT COLOR="#228B22">:: Int
</FONT></B>
<I><FONT COLOR="#B22222">-- fold up a list like a tree
</FONT></I>treefold f z []      = z
treefold f z [x]     = x
treefold f z (a:b:l) = w `seq` treefold f z (w : pairfold l)
                 <B><FONT COLOR="#A020F0">where</FONT></B> pairfold (x:y:rest) = v `seq` v : pairfold rest
                           <B><FONT COLOR="#A020F0">where</FONT></B> v = f x y
	               pairfold l          = l
                       w = f a b

<I><FONT COLOR="#B22222">-- heapfold using linked lists
</FONT></I><B><FONT COLOR="#A020F0">data</FONT></B> Heap a = Nil | Node !a !(Heap a) !(Heap a)
heapsort <B><FONT COLOR="#228B22">:: Ord a =&gt; [a] -&gt; [a]
</FONT></B>heapsort = flatten_heap . merge_heaps . map heapify

    <B><FONT COLOR="#A020F0">where</FONT></B> heapify x   = Node x Nil Nil

	  merge_heaps <B><FONT COLOR="#228B22">:: Ord a =&gt; [Heap a] -&gt; Heap a
</FONT></B>          merge_heaps = treefold merge_heap Nil

          flatten_heap Nil            = []
          flatten_heap (Node x h1 h2) = x:flatten_heap (merge_heap h1 h2)

          merge_heap Nil                     heap = heap
          merge_heap heap@(Node <B><FONT COLOR="#A020F0">_ </FONT></B><B><FONT COLOR="#A020F0">_ </FONT></B><B><FONT COLOR="#A020F0">_) </FONT></B>       Nil = heap
          merge_heap node_a@(Node l l1 l2) node_b@(Node r r1 r2)
                     | l &lt; r     = Node l (merge_heap l1 l2) node_b
                     | otherwise = Node r node_a (merge_heap r1 r2)</pre></td></tr></table>
