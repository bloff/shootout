<span class="slc">-- $Id: heapsort-hugs.code,v 1.9 2005-04-13 15:29:04 bfulgham Exp $
</span><span class="slc">-- http://www.bagley.org/~doug/shootout/
</span><span class="slc">-- from Julian Assange, improved by Karl-Filip Faxen
</span>
<span class="kwa">module</span> Main<span class="sym">(</span>main<span class="sym">)</span> <span class="kwa">where
import</span> System<span class="sym">(</span>getArgs<span class="sym">,</span> exitWith<span class="sym">,</span> ExitCode<span class="sym">(</span>..<span class="sym">))
</span><span class="kwa">import</span> Numeric<span class="sym">(</span>showFFloat<span class="sym">)

</span>main <span class="sym">=</span> <span class="kwa">do
</span>         arg <span class="sym">&lt;-</span> getArgs
	 <span class="kwa">case</span> arg <span class="kwa">of
</span>              <span class="sym">[</span>num<span class="sym">] -&gt;</span> putStrLn <span class="sym">(</span>showFFloat <span class="sym">(</span>Just <span class="num">10</span><span class="sym">)</span> answer <span class="str">&quot;&quot;</span><span class="sym">)
</span>	               <span class="kwa">where
</span>		             answer <span class="sym">=</span> last . heapsort .
                                      take <span class="sym">(</span>read num<span class="sym">)</span> . random $ <span class="num">1.0
</span>	      _     <span class="sym">-&gt;</span> exitWith <span class="sym">(</span>ExitFailure <span class="num">1</span><span class="sym">)

</span><span class="slc">-- construct an infinite list of random numbers
</span>random <span class="sym">::</span> <span class="kwb">Double</span> <span class="sym">-&gt; [</span><span class="kwb">Double</span><span class="sym">]
</span>random max <span class="sym">=</span> map norm . rand $ <span class="num">42
</span>           <span class="kwa">where</span> norm x <span class="sym">= (</span>fromIntegral x<span class="sym">) * (</span>max <span class="sym">/ (</span>fromIntegral im<span class="sym">))
</span>                 rand x <span class="sym">= (</span>x<span class="str">' : (rand x'</span><span class="sym">))
</span>	            <span class="kwa">where</span> x<span class="str">' = (x * ia + ic) `mod` im
	         im     = 139968
                 ia     = 3877
                 ic     = 29573 :: Int

-- fold up a list like a tree
treefold f z []      = z
treefold f z [x]     = x
treefold f z (a:b:l) = w `seq` treefold f z (w : pairfold l)
                 where pairfold (x:y:rest) = v `seq` v : pairfold rest
                           where v = f x y
	               pairfold l          = l
                       w = f a b

-- heapfold using linked lists
data Heap a = Nil | Node !a !(Heap a) !(Heap a)
heapsort :: Ord a =&gt; [a] -&gt; [a]
heapsort = flatten_heap . merge_heaps . map heapify

    where heapify x   = Node x Nil Nil

	  merge_heaps :: Ord a =&gt; [Heap a] -&gt; Heap a
          merge_heaps = treefold merge_heap Nil

          flatten_heap Nil            = []
          flatten_heap (Node x h1 h2) = x:flatten_heap (merge_heap h1 h2)

          merge_heap Nil                     heap = heap
          merge_heap heap&#64;(Node _ _ _)        Nil = heap
          merge_heap node_a&#64;(Node l l1 l2) node_b&#64;(Node r r1 r2)
                     | l &lt; r     = Node l (merge_heap l1 l2) node_b
                     | otherwise = Node r node_a (merge_heap r1 r2)</span>
