<span class="sym">&lt;</span>? <span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   php -q pidigits.php 27</span>
<span class="com">*/</span>


<span class="kwa">class</span> Transformation <span class="sym">{</span>
   var <span class="kwb">$q</span><span class="sym">,</span> <span class="kwb">$r</span><span class="sym">,</span> <span class="kwb">$s</span><span class="sym">,</span> <span class="kwb">$t</span><span class="sym">,</span> <span class="kwb">$k</span><span class="sym">;</span>

   <span class="kwa">function</span> Transformation<span class="sym">(</span><span class="kwb">$q</span><span class="sym">,</span> <span class="kwb">$r</span><span class="sym">,</span> <span class="kwb">$s</span><span class="sym">,</span> <span class="kwb">$t</span><span class="sym">){</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>q <span class="sym">=</span> <span class="kwb">$q</span><span class="sym">;</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>r <span class="sym">=</span> <span class="kwb">$r</span><span class="sym">;</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>s <span class="sym">=</span> <span class="kwb">$s</span><span class="sym">;</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>t <span class="sym">=</span> <span class="kwb">$t</span><span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> Unity<span class="sym">(){</span>
      <span class="kwa">return</span> new Transformation<span class="sym">(</span><span class="str">&quot;1&quot;</span><span class="sym">,</span> <span class="str">&quot;0&quot;</span><span class="sym">,</span> <span class="str">&quot;0&quot;</span><span class="sym">,</span> <span class="str">&quot;1&quot;</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> Zero<span class="sym">(){</span>
      <span class="kwa">return</span> new Transformation<span class="sym">(</span><span class="str">&quot;0&quot;</span><span class="sym">,</span> <span class="str">&quot;0&quot;</span><span class="sym">,</span> <span class="str">&quot;0&quot;</span><span class="sym">,</span> <span class="str">&quot;0&quot;</span><span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwa">function</span> Compose<span class="sym">(</span><span class="kwb">$a</span><span class="sym">){</span>
      <span class="kwb">$qq</span> <span class="sym">=</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>q<span class="sym">,</span> <span class="kwb">$a</span><span class="sym">-&gt;</span>q<span class="sym">);</span>
      <span class="kwb">$qrrt</span> <span class="sym">=</span> <span class="kwa">bcadd</span><span class="sym">(</span><span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>q<span class="sym">,</span> <span class="kwb">$a</span><span class="sym">-&gt;</span>r<span class="sym">),</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>r<span class="sym">,</span> <span class="kwb">$a</span><span class="sym">-&gt;</span>t<span class="sym">));</span>
      <span class="kwb">$sqts</span> <span class="sym">=</span> <span class="kwa">bcadd</span><span class="sym">(</span><span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>s<span class="sym">,</span> <span class="kwb">$a</span><span class="sym">-&gt;</span>q<span class="sym">),</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>t<span class="sym">,</span> <span class="kwb">$a</span><span class="sym">-&gt;</span>s<span class="sym">));</span>
      <span class="kwb">$srtt</span> <span class="sym">=</span> <span class="kwa">bcadd</span><span class="sym">(</span><span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>s<span class="sym">,</span> <span class="kwb">$a</span><span class="sym">-&gt;</span>r<span class="sym">),</span> <span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>t<span class="sym">,</span> <span class="kwb">$a</span><span class="sym">-&gt;</span>t<span class="sym">));</span>
      <span class="kwa">return</span> new Transformation<span class="sym">(</span><span class="kwb">$qq</span><span class="sym">,</span> <span class="kwb">$qrrt</span><span class="sym">,</span> <span class="kwb">$sqts</span><span class="sym">,</span> <span class="kwb">$srtt</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">function Extract</span><span class="sym">(</span><span class="kwb">$j</span><span class="sym">){</span>
      <span class="kwb">$bigj</span> <span class="sym">=</span> <span class="kwa">strval</span><span class="sym">(</span><span class="kwb">$j</span><span class="sym">);</span>
      <span class="kwb">$qjr</span> <span class="sym">=</span> <span class="kwa">bcadd</span><span class="sym">(</span><span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>q<span class="sym">,</span> <span class="kwb">$bigj</span><span class="sym">),</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>r<span class="sym">);</span>
      <span class="kwb">$sjt</span> <span class="sym">=</span> <span class="kwa">bcadd</span><span class="sym">(</span><span class="kwa">bcmul</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>s<span class="sym">,</span> <span class="kwb">$bigj</span><span class="sym">),</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>t<span class="sym">);</span>
      <span class="kwb">$d</span> <span class="sym">=</span> <span class="kwa">bcdiv</span><span class="sym">(</span><span class="kwb">$qjr</span><span class="sym">,</span> <span class="kwb">$sjt</span><span class="sym">);</span>
      <span class="kwa">return floor</span><span class="sym">(</span><span class="kwb">$d</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">function Next</span><span class="sym">(){</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>k <span class="sym">=</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>q <span class="sym">=</span> <span class="kwa">strval</span><span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>k<span class="sym">);</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>r <span class="sym">=</span> <span class="kwa">strval</span><span class="sym">(</span><span class="num">4</span><span class="sym">*</span><span class="kwb">$this</span><span class="sym">-&gt;</span>k <span class="sym">+</span> <span class="num">2</span><span class="sym">);</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>s <span class="sym">=</span> <span class="str">&quot;0&quot;</span><span class="sym">;</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>t <span class="sym">=</span> <span class="kwa">strval</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span><span class="kwb">$this</span><span class="sym">-&gt;</span>k <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
      <span class="kwa">return</span> <span class="kwb">$this</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>



<span class="kwa">class</span> PiDigitStream <span class="sym">{</span>
   var <span class="kwb">$z</span><span class="sym">,</span> <span class="kwb">$x</span><span class="sym">,</span> <span class="kwb">$inverse</span><span class="sym">;</span>

   <span class="kwa">function</span> PiDigitStream<span class="sym">(){</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>z <span class="sym">=</span> Transformation<span class="sym">::</span>Unity<span class="sym">();</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>x <span class="sym">=</span> Transformation<span class="sym">::</span>Zero<span class="sym">();</span>
      <span class="kwb">$this</span><span class="sym">-&gt;</span>inverse <span class="sym">=</span> Transformation<span class="sym">::</span>Zero<span class="sym">();</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> Produce<span class="sym">(</span><span class="kwb">$j</span><span class="sym">){</span>
      <span class="kwb">$i</span> <span class="sym">=</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>inverse<span class="sym">;</span>
      <span class="kwb">$i</span><span class="sym">-&gt;</span>q <span class="sym">=</span> <span class="str">&quot;10&quot;</span><span class="sym">;</span>
      <span class="kwb">$i</span><span class="sym">-&gt;</span>r <span class="sym">=</span> <span class="kwa">strval</span><span class="sym">(-</span><span class="num">10</span><span class="sym">*</span><span class="kwb">$j</span><span class="sym">);</span>
      <span class="kwb">$i</span><span class="sym">-&gt;</span>s <span class="sym">=</span> <span class="str">&quot;0&quot;</span><span class="sym">;</span>
      <span class="kwb">$i</span><span class="sym">-&gt;</span>t <span class="sym">=</span> <span class="str">&quot;1&quot;</span><span class="sym">;</span>
      <span class="kwa">return</span> <span class="kwb">$i</span><span class="sym">-&gt;</span>Compose<span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>z<span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> Consume<span class="sym">(</span><span class="kwb">$a</span><span class="sym">){</span>
      <span class="kwa">return</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>z <span class="sym">-&gt;</span>Compose<span class="sym">(</span><span class="kwb">$a</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> Digit<span class="sym">(){</span>
      <span class="kwa">return</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>z <span class="sym">-&gt;</span><span class="kwa">Extract</span><span class="sym">(</span><span class="num">3</span><span class="sym">);</span>
   <span class="sym">}</span>

   <span class="kwa">function</span> IsSafe<span class="sym">(</span><span class="kwb">$j</span><span class="sym">){</span>
      <span class="kwa">return</span> <span class="kwb">$j</span> <span class="sym">== (</span><span class="kwb">$this</span><span class="sym">-&gt;</span>z <span class="sym">-&gt;</span><span class="kwa">Extract</span><span class="sym">(</span><span class="num">4</span><span class="sym">));</span>
   <span class="sym">}</span>

   <span class="kwa">function Next</span><span class="sym">(){</span>
      <span class="kwb">$y</span> <span class="sym">=</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>Digit<span class="sym">();</span>
      <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>IsSafe<span class="sym">(</span><span class="kwb">$y</span><span class="sym">)){</span>
         <span class="kwb">$this</span><span class="sym">-&gt;</span>z <span class="sym">=</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>Produce<span class="sym">(</span><span class="kwb">$y</span><span class="sym">);</span>
         <span class="kwa">return</span> <span class="kwb">$y</span><span class="sym">;</span>
      <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
         <span class="kwb">$this</span><span class="sym">-&gt;</span>z <span class="sym">=</span> <span class="kwb">$this</span><span class="sym">-&gt;</span>Consume<span class="sym">(</span><span class="kwb">$this</span><span class="sym">-&gt;</span>x <span class="sym">-&gt;</span><span class="kwa">Next</span><span class="sym">());</span>
         <span class="kwa">return</span> <span class="kwb">$this</span><span class="sym">-&gt;</span><span class="kwa">Next</span><span class="sym">();</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwb">$n</span> <span class="sym">=</span> <span class="kwb">$argv</span><span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
<span class="kwb">$i</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwb">$length</span> <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
<span class="kwb">$pidigit</span> <span class="sym">=</span> new PiDigitStream<span class="sym">;</span>

<span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$n</span> <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){</span>
   <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$n</span> <span class="sym">&lt;</span> <span class="kwb">$length</span><span class="sym">){</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$j</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">&lt;</span><span class="kwb">$n</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">++)</span> <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span><span class="kwb">$pidigit</span><span class="sym">-&gt;</span><span class="kwa">Next</span><span class="sym">());</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$j</span><span class="sym">=</span><span class="kwb">$n</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">&lt;</span><span class="kwb">$length</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">++)</span>  <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;</span>
      <span class="kwb">$i</span> <span class="sym">+=</span> <span class="kwb">$n</span><span class="sym">;</span>
   <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$j</span><span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">&lt;</span><span class="kwb">$length</span><span class="sym">;</span> <span class="kwb">$j</span><span class="sym">++)</span> <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span><span class="kwb">$pidigit</span><span class="sym">-&gt;</span><span class="kwa">Next</span><span class="sym">());</span>
      <span class="kwb">$i</span> <span class="sym">+=</span> <span class="kwb">$length</span><span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwa">print</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:$i</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
   <span class="kwb">$n</span> <span class="sym">-=</span> <span class="kwb">$length</span><span class="sym">;</span>
<span class="sym">}</span>
?<span class="sym">&gt;</span>
