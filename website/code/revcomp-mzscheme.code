
<span class="sym">(</span>module revcomp mzscheme

  <span class="sym">(</span>define translation <span class="sym">(</span>make<span class="sym">-</span>vector <span class="num">128</span><span class="sym">))</span>

  <span class="sym">(</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>from<span class="sym">-</span>to<span class="sym">)</span>
	      <span class="sym">(</span>let <span class="sym">([</span>char <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>sym<span class="sym">)</span>
			    <span class="sym">(</span>string<span class="sym">-</span>ref <span class="sym">(</span>symbol<span class="sym">-&gt;</span>string sym<span class="sym">)</span> <span class="num">0</span><span class="sym">))])</span>
		<span class="sym">(</span>let <span class="sym">([</span>from <span class="sym">(</span>char <span class="sym">(</span><span class="kwa">car</span> from<span class="sym">-</span>to<span class="sym">))]</span>
		      <span class="sym">[</span>to <span class="sym">(</span>char<span class="sym">-&gt;</span>integer <span class="sym">(</span>char<span class="sym">-</span>upcase <span class="sym">(</span>char <span class="sym">(</span><span class="kwa">cadr</span> from<span class="sym">-</span>to<span class="sym">))))])</span>
		  <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> translation <span class="sym">(</span>char<span class="sym">-&gt;</span>integer from<span class="sym">)</span> to<span class="sym">)</span>
		  <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> translation <span class="sym">(</span>char<span class="sym">-&gt;</span>integer <span class="sym">(</span>char<span class="sym">-</span>upcase from<span class="sym">))</span> to<span class="sym">))))</span>
	    <span class="str">'([a t]</span>
<span class="str">	      [c g]</span>
<span class="str">	      [g c]</span>
<span class="str">	      [t a]</span>
<span class="str">	      [u a]</span>
<span class="str">	      [m k]</span>
<span class="str">	      [r y]</span>
<span class="str">	      [w w]</span>
<span class="str">	      [s s]</span>
<span class="str">	      [y R]</span>
<span class="str">	      [k M]</span>
<span class="str">	      [v b]</span>
<span class="str">	      [h d]</span>
<span class="str">	      [d h]</span>
<span class="str">	      [b v]</span>
<span class="str">	      [n n]))</span>
<span class="str"></span>
<span class="str">  (define (output lines)</span>
<span class="str">    (let* ([str (apply bytes-append lines)]</span>
<span class="str">	   [o (current-output-port)]</span>
<span class="str">	   [len (bytes-length str)])</span>
<span class="str">      (let loop ([offset 0])</span>
<span class="str">	(when (&lt; offset len)</span>
<span class="str">	  (write-bytes str o offset (min len (+ offset 60)))</span>
<span class="str">	  (newline o)</span>
<span class="str">	  (loop (+ offset 60))))))</span>
<span class="str"></span>
<span class="str">  (let ([in (current-input-port)])</span>
<span class="str">    (let loop ([accum null])</span>
<span class="str">      (let ([l (read-bytes-line in)])</span>
<span class="str">	(if (eof-object? l)</span>
<span class="str">	    (output accum)</span>
<span class="str">	    (cond</span>
<span class="str">	     [(regexp-match #rx#&quot;^&gt;&quot; l)</span>
<span class="str">	      (output accum)</span>
<span class="str">	      (printf &quot;~a</span><span class="esc">\n</span><span class="str">&quot; l)</span>
<span class="str">	      (loop null)]</span>
<span class="str">	     [else</span>
<span class="str">	      (let* ([len (bytes-length l)]</span>
<span class="str">		     [dest (make-bytes len)])</span>
<span class="str">		(let loop ([i 0][j (- len 1)])</span>
<span class="str">		  (unless (= i len)</span>
<span class="str">		    (bytes-set! dest</span>
<span class="str">				j</span>
<span class="str">				(vector-ref translation (bytes-ref l i)))</span>
<span class="str">		    (loop (add1 i) (sub1 j))))</span>
<span class="str">		(loop (cons dest accum)))]))))))</span>
<span class="str"></span>
