<span class="slc">-- $Id: ackermann-gnat.code,v 1.6 2005-03-13 23:29:13 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- by James S. Rogers
</span><span class="slc">--
</span><span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;
</span><span class="kwa">with</span> Ada.Integer_Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Integer_Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;

</span><span class="kwa">procedure</span> Ackermann <span class="kwa">is
  pragma</span> Suppress<span class="sym">(</span>All_Checks<span class="sym">);
</span>  <span class="kwa">function</span> Ack<span class="sym">(</span>M<span class="sym">,</span> N <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is
  begin
    if</span> M <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then
      return</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">elsif</span> N <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then
      return</span> Ack<span class="sym">(</span>M <span class="num">- 1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwa">else
      return</span> Ack<span class="sym">(</span>M <span class="num">- 1</span><span class="sym">,</span> Ack<span class="sym">(</span>M<span class="sym">,</span> N <span class="num">- 1</span><span class="sym">));
</span>    <span class="kwa">end if</span><span class="sym">;
</span>  <span class="kwa">end</span> Ack<span class="sym">;

</span>  Num <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;
</span><span class="kwa">begin
  if</span> Argument_Count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then
</span>    Num <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>  <span class="kwa">else
</span>    Num <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>  <span class="kwa">end if</span><span class="sym">;

</span>  Put<span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span><span class="sym">);
</span>  Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Num<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);
</span>  Put<span class="sym">(</span><span class="str">&quot;): &quot;</span><span class="sym">);
</span>  Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span> Num<span class="sym">),</span> Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);
</span><span class="kwa">end</span> Ackermann<span class="sym">;
</span>
