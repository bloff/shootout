<span class="line">    1 </span><span class="slc">-- $Id: ackermann-gnat.code,v 1.3 2004-11-11 07:13:56 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">--
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- by James S. Rogers
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">--
</span><span class="line">    6 </span><span class="slc"></span><span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">with</span> Ada.Integer_Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Integer_Text_IO<span class="sym">;
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym"></span><span class="kwa">procedure</span> Ackermann <span class="kwa">is
</span><span class="line">   11 </span><span class="kwa">  pragma</span> Suppress<span class="sym">(</span>All_Checks<span class="sym">);
</span><span class="line">   12 </span><span class="sym"></span>  <span class="kwa">function</span> Ack<span class="sym">(</span>M<span class="sym">,</span> N <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is
</span><span class="line">   13 </span><span class="kwa">  begin
</span><span class="line">   14 </span><span class="kwa">    if</span> M <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then
</span><span class="line">   15 </span><span class="kwa">      return</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   16 </span><span class="sym"></span>    <span class="kwa">elsif</span> N <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then
</span><span class="line">   17 </span><span class="kwa">      return</span> Ack<span class="sym">(</span>M <span class="num">- 1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   18 </span><span class="sym"></span>    <span class="kwa">else
</span><span class="line">   19 </span><span class="kwa">      return</span> Ack<span class="sym">(</span>M <span class="num">- 1</span><span class="sym">,</span> Ack<span class="sym">(</span>M<span class="sym">,</span> N <span class="num">- 1</span><span class="sym">));
</span><span class="line">   20 </span><span class="sym"></span>    <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym"></span>  <span class="kwa">end</span> Ack<span class="sym">;
</span><span class="line">   22 </span><span class="sym">
</span><span class="line">   23 </span><span class="sym"></span>  Num <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   25 </span><span class="kwa">  if</span> Argument_Count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then
</span><span class="line">   26 </span><span class="kwa"></span>    Num <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span><span class="line">   27 </span><span class="sym"></span>  <span class="kwa">else
</span><span class="line">   28 </span><span class="kwa"></span>    Num <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>  <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym"></span>  Put<span class="sym">(</span><span class="str">&quot;Ack(3,&quot;</span><span class="sym">);
</span><span class="line">   32 </span><span class="sym"></span>  Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Num<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   33 </span><span class="sym"></span>  Put<span class="sym">(</span><span class="str">&quot;): &quot;</span><span class="sym">);
</span><span class="line">   34 </span><span class="sym"></span>  Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span> Num<span class="sym">),</span> Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   35 </span><span class="sym"></span><span class="kwa">end</span> Ackermann<span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>
