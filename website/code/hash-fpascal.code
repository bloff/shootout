<span class="kwa">Program</span> hash<span class="sym">;</span>
<span class="com">{$MODE objfpc}</span>
<span class="kwa">uses</span> SysUtils<span class="sym">,</span> Classes<span class="sym">;</span>


<span class="kwa">type</span>
   THashEntryPtr <span class="sym">=</span> ^THashEntryRec<span class="sym">;</span>
   THashEntryRec <span class="sym">=</span> <span class="kwa">record</span>
	  name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;</span>
	  number <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
	  next <span class="sym">:</span> THashEntryPtr<span class="sym">;</span>
   <span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">const</span>
   TABLE_SIZE <span class="sym">=</span> <span class="num">100000</span><span class="sym">;</span>

<span class="kwa">type</span> THash <span class="sym">=</span> <span class="kwa">class</span>
	<span class="kwa">private</span>
		hashtable <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>..TABLE_SIZE <span class="sym">-</span> <span class="num">1</span><span class="sym">]</span> <span class="kwa">of</span> THashEntryRec<span class="sym">;</span>
		<span class="kwa">function</span> <span class="kwd">hash</span><span class="sym">(</span>s <span class="sym">:</span> <span class="kwa">string</span><span class="sym">) :</span> <span class="kwb">longint</span><span class="sym">;</span>
	<span class="kwa">public</span>
		<span class="kwa">constructor</span> Create<span class="sym">;</span>
		<span class="kwa">function</span> <span class="kwd">store</span><span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;</span> number <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span> <span class="kwa">var</span> error <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;</span>
		<span class="kwa">function</span> <span class="kwd">fetch</span><span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;</span> <span class="kwa">var</span> number <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;</span>
		<span class="kwa">function</span> <span class="kwd">exists</span><span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">constructor</span> THash.Create<span class="sym">;</span>
<span class="kwa">var</span>
   i <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> TABLE_SIZE <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
      hashtable<span class="sym">[</span>i<span class="sym">]</span>.next <span class="sym">:=</span> <span class="kwa">nil</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">function</span> THash.<span class="kwd">hash</span><span class="sym">(</span>s <span class="sym">:</span> <span class="kwa">string</span><span class="sym">) :</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">var</span>
   i<span class="sym">,</span> j <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
	<span class="kwa">if</span> <span class="kwd">length</span><span class="sym">(</span>s<span class="sym">) =</span> <span class="num">0</span> <span class="kwa">then</span> Result <span class="sym">:=</span> <span class="num">0</span>
	<span class="kwa">else</span>
	<span class="kwa">begin</span>
		j <span class="sym">:=</span> <span class="kwd">ord</span><span class="sym">(</span>s<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">mod</span> TABLE_SIZE<span class="sym">;</span>
		<span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">2</span> <span class="kwa">to</span> <span class="kwd">length</span><span class="sym">(</span>s<span class="sym">)</span> <span class="kwa">do</span>
			j <span class="sym">:= (</span>j <span class="kwa">shl</span> <span class="num">8</span> <span class="sym">+</span> <span class="kwd">ord</span><span class="sym">(</span>s<span class="sym">[</span>i<span class="sym">]))</span> <span class="kwa">mod</span> TABLE_SIZE<span class="sym">;</span>
		Result <span class="sym">:=</span> j<span class="sym">;</span>
	<span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">function</span> THash.<span class="kwd">store</span><span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;</span> number <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span> <span class="kwa">var</span> error <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;</span>
<span class="kwa">var</span>
   node<span class="sym">,</span> prev <span class="sym">:</span> THashEntryPtr<span class="sym">;</span>
<span class="kwa">begin</span>
   error <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>

   prev <span class="sym">:= &#64;</span>hashtable<span class="sym">[</span><span class="kwd">hash</span><span class="sym">(</span>name<span class="sym">)];</span>
   node <span class="sym">:=</span> prev^.next<span class="sym">;</span>

   <span class="kwa">while</span> <span class="sym">(</span>node <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>node^.name <span class="sym">&lt;&gt;</span> name<span class="sym">)</span> <span class="kwa">do</span>
   <span class="kwa">begin</span>
      prev <span class="sym">:=</span> node<span class="sym">;</span>
      node <span class="sym">:=</span> node^.next<span class="sym">;</span>
   <span class="kwa">end</span><span class="sym">;</span>

   <span class="kwa">if</span> node <span class="sym">&lt;&gt;</span> <span class="kwa">nil then</span> error <span class="sym">:=</span> <span class="num">1</span>
   <span class="kwa">else begin</span>
      <span class="kwd">new</span><span class="sym">(</span>prev^.next<span class="sym">);</span>
      node <span class="sym">:=</span> prev^.next<span class="sym">;</span>
      <span class="kwa">if</span> node <span class="sym">=</span> <span class="kwa">nil then</span> error <span class="sym">:= -</span><span class="num">1</span>
      <span class="kwa">else begin</span>
         node^.name <span class="sym">:=</span> name<span class="sym">;</span>
	 node^.number <span class="sym">:=</span> number<span class="sym">;</span>
	 node^.next <span class="sym">:=</span> <span class="kwa">nil</span><span class="sym">;</span>
      <span class="kwa">end</span><span class="sym">;</span>
   <span class="kwa">end</span><span class="sym">;</span>

   Result <span class="sym">:=</span> error <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">function</span> THash.<span class="kwd">fetch</span><span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;</span> <span class="kwa">var</span> number <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;</span>
<span class="kwa">var</span>
   node <span class="sym">:</span> THashEntryPtr<span class="sym">;</span>
<span class="kwa">begin</span>
   node <span class="sym">:=</span> hashtable<span class="sym">[</span><span class="kwd">hash</span><span class="sym">(</span>name<span class="sym">)]</span>.next<span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span>node <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>node^.name <span class="sym">&lt;&gt;</span> name<span class="sym">)</span> <span class="kwa">do</span>
      node <span class="sym">:=</span> node^.next<span class="sym">;</span>
   <span class="kwa">if</span> node <span class="sym">&lt;&gt;</span> <span class="kwa">nil then</span> number <span class="sym">:=</span> node^.number<span class="sym">;</span>
   Result <span class="sym">:=</span> node <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">function</span> THash.<span class="kwd">exists</span><span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;</span>
<span class="kwa">var</span>
   node <span class="sym">:</span> THashEntryPtr<span class="sym">;</span>
<span class="kwa">begin</span>
   node <span class="sym">:=</span> hashtable<span class="sym">[</span><span class="kwd">hash</span><span class="sym">(</span>name<span class="sym">)]</span>.next<span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span>node <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>node^.name <span class="sym">&lt;&gt;</span> name<span class="sym">)</span> <span class="kwa">do</span>
      node <span class="sym">:=</span> node^.next<span class="sym">;</span>
   Result <span class="sym">:=</span> node <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">var</span>
	n<span class="sym">,</span> i<span class="sym">,</span> c<span class="sym">,</span> err <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
	X <span class="sym">:</span> THash<span class="sym">;</span>
<span class="kwa">begin</span>
	<span class="kwa">if</span> ParamCount <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
		n <span class="sym">:=</span> <span class="num">1</span>
	<span class="kwa">else</span>
		n <span class="sym">:=</span> <span class="kwd">StrToInt</span><span class="sym">(</span><span class="kwd">ParamStr</span><span class="sym">(</span><span class="num">1</span><span class="sym">));</span>

	<span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> n <span class="sym">:=</span> <span class="num">1</span><span class="sym">;</span>

	X <span class="sym">:=</span> THash.<span class="kwd">Create</span><span class="sym">();</span>

	<span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">To</span> n <span class="kwa">do</span>
		X.<span class="kwd">store</span><span class="sym">(</span> <span class="kwd">Format</span><span class="sym">(</span><span class="str">'%x'</span><span class="sym">, [</span>i<span class="sym">]),</span> i<span class="sym">,</span> err <span class="sym">);</span>

	c <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">For</span> i<span class="sym">:=</span> n <span class="kwa">downto</span> <span class="num">1</span> <span class="kwa">do</span>
	<span class="kwa">begin</span>
		<span class="kwa">if</span> X.<span class="kwd">exists</span><span class="sym">(</span> <span class="kwd">IntToStr</span><span class="sym">(</span>i<span class="sym">) )</span> <span class="kwa">Then</span> <span class="kwd">Inc</span><span class="sym">(</span>c<span class="sym">);</span>
	<span class="kwa">end</span><span class="sym">;</span>

	<span class="kwd">Writeln</span> <span class="sym">(</span><span class="kwd">IntToStr</span><span class="sym">(</span>c<span class="sym">));</span>
<span class="kwa">end</span>.
