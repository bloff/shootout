<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<B><FONT COLOR="#A020F0">Program</FONT></B> hash;
<I><FONT COLOR="#B22222">{$MODE objfpc}</FONT></I>
<B><FONT COLOR="#A020F0">uses</FONT></B> SysUtils, Classes;


<B><FONT COLOR="#A020F0">type</FONT></B>
   THashEntryPtr = ^THashEntryRec;
   THashEntryRec = <B><FONT COLOR="#A020F0">record</FONT></B>
	  name : <B><FONT COLOR="#A020F0">string</FONT></B>;
	  number : longint;
	  next : THashEntryPtr;
   <B><FONT COLOR="#A020F0">end</FONT></B>;

<B><FONT COLOR="#A020F0">const</FONT></B>
   TABLE_SIZE = 100000;

<B><FONT COLOR="#A020F0">type</FONT></B> THash = class
	private
		hashtable : <B><FONT COLOR="#A020F0">array</FONT></B>[0..TABLE_SIZE - 1] <B><FONT COLOR="#A020F0">of</FONT></B> THashEntryRec;
		<B><FONT COLOR="#A020F0">function</FONT></B> hash(s : <B><FONT COLOR="#A020F0">string</FONT></B>) : longint;
	public
		<B><FONT COLOR="#A020F0">constructor</FONT></B> Create;
		<B><FONT COLOR="#A020F0">function</FONT></B> store(name : <B><FONT COLOR="#A020F0">string</FONT></B>; number : longint; <B><FONT COLOR="#A020F0">var</FONT></B> error : longint) : boolean;
		<B><FONT COLOR="#A020F0">function</FONT></B> fetch(name : <B><FONT COLOR="#A020F0">string</FONT></B>; <B><FONT COLOR="#A020F0">var</FONT></B> number : longint) : boolean;
		<B><FONT COLOR="#A020F0">function</FONT></B> exists(name : <B><FONT COLOR="#A020F0">string</FONT></B>) : boolean;
<B><FONT COLOR="#A020F0">end</FONT></B>;

<B><FONT COLOR="#A020F0">constructor</FONT></B> THash.Create;
<B><FONT COLOR="#A020F0">var</FONT></B>
   i : longint;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   <B><FONT COLOR="#A020F0">for</FONT></B> i := 0 <B><FONT COLOR="#A020F0">to</FONT></B> TABLE_SIZE - 1 <B><FONT COLOR="#A020F0">do</FONT></B>
      hashtable[i].next := <B><FONT COLOR="#A020F0">nil</FONT></B>;
<B><FONT COLOR="#A020F0">end</FONT></B>;


<B><FONT COLOR="#A020F0">function</FONT></B> THash.hash(s : <B><FONT COLOR="#A020F0">string</FONT></B>) : longint;
<B><FONT COLOR="#A020F0">var</FONT></B>
   i, j : longint;
<B><FONT COLOR="#A020F0">begin</FONT></B>
	<B><FONT COLOR="#A020F0">if</FONT></B> length(s) = 0 <B><FONT COLOR="#A020F0">then</FONT></B> Result := 0
	<B><FONT COLOR="#A020F0">else</FONT></B>
	<B><FONT COLOR="#A020F0">begin</FONT></B>
		j := ord(s[1]) <B><FONT COLOR="#A020F0">mod</FONT></B> TABLE_SIZE;
		<B><FONT COLOR="#A020F0">for</FONT></B> i := 2 <B><FONT COLOR="#A020F0">to</FONT></B> length(s) <B><FONT COLOR="#A020F0">do</FONT></B>
			j := (j shl 8 + ord(s[i])) <B><FONT COLOR="#A020F0">mod</FONT></B> TABLE_SIZE;
		Result := j;
	<B><FONT COLOR="#A020F0">end</FONT></B>;
<B><FONT COLOR="#A020F0">end</FONT></B>;

<B><FONT COLOR="#A020F0">function</FONT></B> THash.store(name : <B><FONT COLOR="#A020F0">string</FONT></B>; number : longint; <B><FONT COLOR="#A020F0">var</FONT></B> error : longint) : boolean;
<B><FONT COLOR="#A020F0">var</FONT></B>
   node, prev : THashEntryPtr;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   error := 0;

   prev := @hashtable[hash(name)];
   node := prev^.next;
   
   <B><FONT COLOR="#A020F0">while</FONT></B> (node &lt;&gt; <B><FONT COLOR="#A020F0">nil</FONT></B>) <B><FONT COLOR="#A020F0">and</FONT></B> (node^.name &lt;&gt; name) <B><FONT COLOR="#A020F0">do</FONT></B>
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      prev := node;
      node := node^.next;
   <B><FONT COLOR="#A020F0">end</FONT></B>;

   <B><FONT COLOR="#A020F0">if</FONT></B> node &lt;&gt; <B><FONT COLOR="#A020F0">nil</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B> error := 1
   <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">begin</FONT></B>
      new(prev^.next);
      node := prev^.next;
      <B><FONT COLOR="#A020F0">if</FONT></B> node = <B><FONT COLOR="#A020F0">nil</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B> error := -1
      <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">begin</FONT></B>
         node^.name := name;
	 node^.number := number;
	 node^.next := <B><FONT COLOR="#A020F0">nil</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B>;
   
   Result := error = 0;
<B><FONT COLOR="#A020F0">end</FONT></B>;

<B><FONT COLOR="#A020F0">function</FONT></B> THash.fetch(name : <B><FONT COLOR="#A020F0">string</FONT></B>; <B><FONT COLOR="#A020F0">var</FONT></B> number : longint) : boolean;
<B><FONT COLOR="#A020F0">var</FONT></B>
   node : THashEntryPtr;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   node := hashtable[hash(name)].next;
   <B><FONT COLOR="#A020F0">while</FONT></B> (node &lt;&gt; <B><FONT COLOR="#A020F0">nil</FONT></B>) <B><FONT COLOR="#A020F0">and</FONT></B> (node^.name &lt;&gt; name) <B><FONT COLOR="#A020F0">do</FONT></B>
      node := node^.next;
   <B><FONT COLOR="#A020F0">if</FONT></B> node &lt;&gt; <B><FONT COLOR="#A020F0">nil</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B> number := node^.number;
   Result := node &lt;&gt; <B><FONT COLOR="#A020F0">nil</FONT></B>;
<B><FONT COLOR="#A020F0">end</FONT></B>;

<B><FONT COLOR="#A020F0">function</FONT></B> THash.exists(name : <B><FONT COLOR="#A020F0">string</FONT></B>) : boolean;
<B><FONT COLOR="#A020F0">var</FONT></B>
   node : THashEntryPtr;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   node := hashtable[hash(name)].next;
   <B><FONT COLOR="#A020F0">while</FONT></B> (node &lt;&gt; <B><FONT COLOR="#A020F0">nil</FONT></B>) <B><FONT COLOR="#A020F0">and</FONT></B> (node^.name &lt;&gt; name) <B><FONT COLOR="#A020F0">do</FONT></B>
      node := node^.next;
   Result := node &lt;&gt; <B><FONT COLOR="#A020F0">nil</FONT></B>;
<B><FONT COLOR="#A020F0">end</FONT></B>;
	

<B><FONT COLOR="#A020F0">var</FONT></B>
	n, i, c, err : longint;
	X : THash;
<B><FONT COLOR="#A020F0">begin</FONT></B>
	<B><FONT COLOR="#A020F0">if</FONT></B> ParamCount = 0 <B><FONT COLOR="#A020F0">then</FONT></B>
		n := 1
	<B><FONT COLOR="#A020F0">else</FONT></B>
		n := StrToInt(ParamStr(1));
		
	<B><FONT COLOR="#A020F0">if</FONT></B> n &lt; 1 <B><FONT COLOR="#A020F0">then</FONT></B> n := 1;
	
	X := THash.Create();
	
	<B><FONT COLOR="#A020F0">For</FONT></B> i := 1 <B><FONT COLOR="#A020F0">To</FONT></B> n <B><FONT COLOR="#A020F0">do</FONT></B>
		X.store( Format(<B><FONT COLOR="#BC8F8F">'%x'</FONT></B>, [i]), i, err );
	
	c := 0;
	<B><FONT COLOR="#A020F0">For</FONT></B> i:= n <B><FONT COLOR="#A020F0">downto</FONT></B> 1 <B><FONT COLOR="#A020F0">do</FONT></B>
	<B><FONT COLOR="#A020F0">begin</FONT></B>
		<B><FONT COLOR="#A020F0">if</FONT></B> X.exists( IntToStr(i) ) <B><FONT COLOR="#A020F0">Then</FONT></B> Inc(c);
	<B><FONT COLOR="#A020F0">end</FONT></B>;
	
	Writeln (IntToStr(c));
<B><FONT COLOR="#A020F0">end</FONT></B>.</pre></td></tr></table>
