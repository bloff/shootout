<span class="line">    1 </span><span class="kwa">Program</span> hash<span class="sym">;
</span><span class="line">    2 </span><span class="sym"></span><span class="com">{$MODE objfpc}</span>
<span class="line">    3 </span><span class="kwa">uses</span> SysUtils<span class="sym">,</span> Classes<span class="sym">;
</span><span class="line">    4 </span><span class="sym">
</span><span class="line">    5 </span><span class="sym">
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">type
</span><span class="line">    7 </span><span class="kwa"></span>   THashEntryPtr <span class="sym">=</span> ^THashEntryRec<span class="sym">;
</span><span class="line">    8 </span><span class="sym"></span>   THashEntryRec <span class="sym">=</span> <span class="kwa">record
</span><span class="line">    9 </span><span class="kwa"></span>          name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;
</span><span class="line">   10 </span><span class="sym"></span>          number <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span>          next <span class="sym">:</span> THashEntryPtr<span class="sym">;
</span><span class="line">   12 </span><span class="sym"></span>   <span class="kwa">end</span><span class="sym">;
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span><span class="kwa">const
</span><span class="line">   15 </span><span class="kwa"></span>   TABLE_SIZE <span class="sym">=</span> <span class="num">100000</span><span class="sym">;
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span><span class="kwa">type</span> THash <span class="sym">=</span> <span class="kwa">class
</span><span class="line">   18 </span><span class="kwa">        private
</span><span class="line">   19 </span><span class="kwa"></span>                hashtable <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>..TABLE_SIZE <span class="num">- 1</span><span class="sym">]</span> <span class="kwa">of</span> THashEntryRec<span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>                <span class="kwa">function</span> hash<span class="sym">(</span>s <span class="sym">:</span> <span class="kwa">string</span><span class="sym">) :</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym"></span>        <span class="kwa">public
</span><span class="line">   22 </span><span class="kwa">                constructor</span> Create<span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>                <span class="kwa">function</span> store<span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;</span> number <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span> <span class="kwa">var</span> error <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span>                <span class="kwa">function</span> fetch<span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;</span> <span class="kwa">var</span> number <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>                <span class="kwa">function</span> exists<span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym"></span><span class="kwa">constructor</span> THash.Create<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span><span class="kwa">var
</span><span class="line">   30 </span><span class="kwa"></span>   i <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   32 </span><span class="kwa">   for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> TABLE_SIZE <span class="num">- 1</span> <span class="kwa">do
</span><span class="line">   33 </span><span class="kwa"></span>      hashtable<span class="sym">[</span>i<span class="sym">]</span>.next <span class="sym">:=</span> <span class="kwa">nil</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   35 </span><span class="sym">
</span><span class="line">   36 </span><span class="sym">
</span><span class="line">   37 </span><span class="sym"></span><span class="kwa">function</span> THash.hash<span class="sym">(</span>s <span class="sym">:</span> <span class="kwa">string</span><span class="sym">) :</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="line">   38 </span><span class="sym"></span><span class="kwa">var
</span><span class="line">   39 </span><span class="kwa"></span>   i<span class="sym">,</span> j <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   41 </span><span class="kwa">        if</span> length<span class="sym">(</span>s<span class="sym">) =</span> <span class="num">0</span> <span class="kwa">then</span> Result <span class="sym">:=</span> <span class="num">0
</span><span class="line">   42 </span><span class="num"></span>        <span class="kwa">else
</span><span class="line">   43 </span><span class="kwa">        begin
</span><span class="line">   44 </span><span class="kwa"></span>                j <span class="sym">:=</span> ord<span class="sym">(</span>s<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">mod</span> TABLE_SIZE<span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span>                <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">2</span> <span class="kwa">to</span> length<span class="sym">(</span>s<span class="sym">)</span> <span class="kwa">do
</span><span class="line">   46 </span><span class="kwa"></span>                        j <span class="sym">:= (</span>j <span class="kwa">shl</span> <span class="num">8</span> <span class="sym">+</span> ord<span class="sym">(</span>s<span class="sym">[</span>i<span class="sym">]))</span> <span class="kwa">mod</span> TABLE_SIZE<span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span>                Result <span class="sym">:=</span> j<span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   50 </span><span class="sym">
</span><span class="line">   51 </span><span class="sym"></span><span class="kwa">function</span> THash.store<span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;</span> number <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span> <span class="kwa">var</span> error <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span><span class="kwa">var
</span><span class="line">   53 </span><span class="kwa"></span>   node<span class="sym">,</span> prev <span class="sym">:</span> THashEntryPtr<span class="sym">;
</span><span class="line">   54 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   55 </span><span class="kwa"></span>   error <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   56 </span><span class="sym">
</span><span class="line">   57 </span><span class="sym"></span>   prev <span class="sym">:= &#64;</span>hashtable<span class="sym">[</span>hash<span class="sym">(</span>name<span class="sym">)];
</span><span class="line">   58 </span><span class="sym"></span>   node <span class="sym">:=</span> prev^.next<span class="sym">;
</span><span class="line">   59 </span><span class="sym">
</span><span class="line">   60 </span><span class="sym"></span>   <span class="kwa">while</span> <span class="sym">(</span>node <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>node^.name <span class="sym">&lt;&gt;</span> name<span class="sym">)</span> <span class="kwa">do
</span><span class="line">   61 </span><span class="kwa">   begin
</span><span class="line">   62 </span><span class="kwa"></span>      prev <span class="sym">:=</span> node<span class="sym">;
</span><span class="line">   63 </span><span class="sym"></span>      node <span class="sym">:=</span> node^.next<span class="sym">;
</span><span class="line">   64 </span><span class="sym"></span>   <span class="kwa">end</span><span class="sym">;
</span><span class="line">   65 </span><span class="sym">
</span><span class="line">   66 </span><span class="sym"></span>   <span class="kwa">if</span> node <span class="sym">&lt;&gt;</span> <span class="kwa">nil then</span> error <span class="sym">:=</span> <span class="num">1
</span><span class="line">   67 </span><span class="num"></span>   <span class="kwa">else begin
</span><span class="line">   68 </span><span class="kwa"></span>      new<span class="sym">(</span>prev^.next<span class="sym">);
</span><span class="line">   69 </span><span class="sym"></span>      node <span class="sym">:=</span> prev^.next<span class="sym">;
</span><span class="line">   70 </span><span class="sym"></span>      <span class="kwa">if</span> node <span class="sym">=</span> <span class="kwa">nil then</span> error <span class="sym">:= -</span><span class="num">1
</span><span class="line">   71 </span><span class="num"></span>      <span class="kwa">else begin
</span><span class="line">   72 </span><span class="kwa"></span>         node^.name <span class="sym">:=</span> name<span class="sym">;
</span><span class="line">   73 </span><span class="sym"></span>         node^.number <span class="sym">:=</span> number<span class="sym">;
</span><span class="line">   74 </span><span class="sym"></span>         node^.next <span class="sym">:=</span> <span class="kwa">nil</span><span class="sym">;
</span><span class="line">   75 </span><span class="sym"></span>      <span class="kwa">end</span><span class="sym">;
</span><span class="line">   76 </span><span class="sym"></span>   <span class="kwa">end</span><span class="sym">;
</span><span class="line">   77 </span><span class="sym">
</span><span class="line">   78 </span><span class="sym"></span>   Result <span class="sym">:=</span> error <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   79 </span><span class="sym"></span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   80 </span><span class="sym">
</span><span class="line">   81 </span><span class="sym"></span><span class="kwa">function</span> THash.fetch<span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">;</span> <span class="kwa">var</span> number <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;
</span><span class="line">   82 </span><span class="sym"></span><span class="kwa">var
</span><span class="line">   83 </span><span class="kwa"></span>   node <span class="sym">:</span> THashEntryPtr<span class="sym">;
</span><span class="line">   84 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   85 </span><span class="kwa"></span>   node <span class="sym">:=</span> hashtable<span class="sym">[</span>hash<span class="sym">(</span>name<span class="sym">)]</span>.next<span class="sym">;
</span><span class="line">   86 </span><span class="sym"></span>   <span class="kwa">while</span> <span class="sym">(</span>node <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>node^.name <span class="sym">&lt;&gt;</span> name<span class="sym">)</span> <span class="kwa">do
</span><span class="line">   87 </span><span class="kwa"></span>      node <span class="sym">:=</span> node^.next<span class="sym">;
</span><span class="line">   88 </span><span class="sym"></span>   <span class="kwa">if</span> node <span class="sym">&lt;&gt;</span> <span class="kwa">nil then</span> number <span class="sym">:=</span> node^.number<span class="sym">;
</span><span class="line">   89 </span><span class="sym"></span>   Result <span class="sym">:=</span> node <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">;
</span><span class="line">   90 </span><span class="sym"></span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   91 </span><span class="sym">
</span><span class="line">   92 </span><span class="sym"></span><span class="kwa">function</span> THash.exists<span class="sym">(</span>name <span class="sym">:</span> <span class="kwa">string</span><span class="sym">) :</span> <span class="kwb">boolean</span><span class="sym">;
</span><span class="line">   93 </span><span class="sym"></span><span class="kwa">var
</span><span class="line">   94 </span><span class="kwa"></span>   node <span class="sym">:</span> THashEntryPtr<span class="sym">;
</span><span class="line">   95 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">   96 </span><span class="kwa"></span>   node <span class="sym">:=</span> hashtable<span class="sym">[</span>hash<span class="sym">(</span>name<span class="sym">)]</span>.next<span class="sym">;
</span><span class="line">   97 </span><span class="sym"></span>   <span class="kwa">while</span> <span class="sym">(</span>node <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>node^.name <span class="sym">&lt;&gt;</span> name<span class="sym">)</span> <span class="kwa">do
</span><span class="line">   98 </span><span class="kwa"></span>      node <span class="sym">:=</span> node^.next<span class="sym">;
</span><span class="line">   99 </span><span class="sym"></span>   Result <span class="sym">:=</span> node <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">;
</span><span class="line">  100 </span><span class="sym"></span><span class="kwa">end</span><span class="sym">;
</span><span class="line">  101 </span><span class="sym">
</span><span class="line">  102 </span><span class="sym">
</span><span class="line">  103 </span><span class="sym"></span><span class="kwa">var
</span><span class="line">  104 </span><span class="kwa"></span>        n<span class="sym">,</span> i<span class="sym">,</span> c<span class="sym">,</span> err <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="line">  105 </span><span class="sym"></span>        X <span class="sym">:</span> THash<span class="sym">;
</span><span class="line">  106 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">  107 </span><span class="kwa">        if</span> ParamCount <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then
</span><span class="line">  108 </span><span class="kwa"></span>                n <span class="sym">:=</span> <span class="num">1
</span><span class="line">  109 </span><span class="num"></span>        <span class="kwa">else
</span><span class="line">  110 </span><span class="kwa"></span>                n <span class="sym">:=</span> StrToInt<span class="sym">(</span>ParamStr<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span><span class="line">  111 </span><span class="sym">
</span><span class="line">  112 </span><span class="sym"></span>        <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> n <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  113 </span><span class="sym">
</span><span class="line">  114 </span><span class="sym"></span>        X <span class="sym">:=</span> THash.Create<span class="sym">();
</span><span class="line">  115 </span><span class="sym">
</span><span class="line">  116 </span><span class="sym"></span>        <span class="kwa">For</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">To</span> n <span class="kwa">do
</span><span class="line">  117 </span><span class="kwa"></span>                X.store<span class="sym">(</span> Format<span class="sym">(</span><span class="str">'%x'</span><span class="sym">, [</span>i<span class="sym">]),</span> i<span class="sym">,</span> err <span class="sym">);
</span><span class="line">  118 </span><span class="sym">
</span><span class="line">  119 </span><span class="sym"></span>        c <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  120 </span><span class="sym"></span>        <span class="kwa">For</span> i<span class="sym">:=</span> n <span class="kwa">downto</span> <span class="num">1</span> <span class="kwa">do
</span><span class="line">  121 </span><span class="kwa">        begin
</span><span class="line">  122 </span><span class="kwa">                if</span> X.exists<span class="sym">(</span> IntToStr<span class="sym">(</span>i<span class="sym">) )</span> <span class="kwa">Then</span> Inc<span class="sym">(</span>c<span class="sym">);
</span><span class="line">  123 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">  124 </span><span class="sym">
</span><span class="line">  125 </span><span class="sym"></span>        Writeln <span class="sym">(</span>IntToStr<span class="sym">(</span>c<span class="sym">));
</span><span class="line">  126 </span><span class="sym"></span><span class="kwa">end</span>.
