<span class="slc">#!/usr/bin/tclsh
</span><span class="slc"># $Id: objinst-ruby-2.code,v 1.2 2005-05-23 06:14:23 bfulgham Exp $
</span>
<span class="slc"># The Great Computer Language Shootout
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># Contributed by Yahalom emet
</span><span class="slc"># Modified by Hemang Lavana
</span>
package require Itcl

<span class="sym">::</span>itcl<span class="sym">::</span><span class="kwa">class</span> Toggle <span class="sym">{
</span>    variable _state
    constructor <span class="sym">{</span>start_state<span class="sym">} {</span>set _state $start_state<span class="sym">}
</span>    public method value <span class="sym">{} {</span> <span class="kwa">return</span> <span class="sym">[</span>expr <span class="sym">{</span>$_state ? <span class="kwa">true</span> <span class="sym">:</span> <span class="kwa">false</span><span class="sym">}]}
</span>    public method activate <span class="sym">{} {
</span>        set _state <span class="sym">[</span>expr <span class="sym">{!</span>$_state<span class="sym">}]
</span>        <span class="kwa">return</span> $this
    <span class="sym">}
}

::</span>itcl<span class="sym">::</span><span class="kwa">class</span> NthToggle <span class="sym">{
</span>    inherit Toggle
    variable _counter
    variable _count_max

    constructor <span class="sym">{</span>start_state max_counter<span class="sym">} {</span>Toggle<span class="sym">::</span>constructor $start_state<span class="sym">} {
</span>        set _counter <span class="num">0
</span>        set _count_max $max_counter
    <span class="sym">}
</span>    method activate <span class="sym">{} {
</span>        incr _counter <span class="num">1
</span>        <span class="kwa">if</span> <span class="sym">{</span>$_counter <span class="sym">&gt;</span>= $_count_max<span class="sym">} {
</span>            set _state <span class="sym">[</span>expr <span class="sym">{!</span>$_state<span class="sym">}]
</span>            set _counter <span class="num">0
</span>        <span class="sym">}
</span>        <span class="kwa">return</span> $this
    <span class="sym">}
}

</span>proc main <span class="sym">{</span>n<span class="sym">} {

</span>    Toggle toggle <span class="kwa">TRUE
    for</span> <span class="sym">{</span>set i <span class="num">0</span><span class="sym">} {</span>$i<span class="sym">&lt;</span><span class="num">5</span><span class="sym">} {</span>incr i<span class="sym">} {
</span>        toggle activate
        puts <span class="sym">[</span>toggle value<span class="sym">]
    }
</span>    puts <span class="str">&quot;&quot;</span>

    <span class="kwa">for</span> <span class="sym">{</span>set i <span class="num">0</span><span class="sym">} {</span>$i<span class="sym">&lt;</span>$n<span class="sym">} {</span>incr i<span class="sym">} {</span>Toggle toggle$i <span class="kwa">FALSE</span><span class="sym">}

</span>    NthToggle ntoggle <span class="kwa">TRUE</span> <span class="num">3
</span>    <span class="kwa">for</span> <span class="sym">{</span>set i <span class="num">0</span><span class="sym">} {</span>$i<span class="sym">&lt;</span><span class="num">8</span><span class="sym">} {</span>incr i<span class="sym">} {
</span>        ntoggle activate
        puts <span class="sym">[</span>ntoggle value<span class="sym">]
    }

</span>    <span class="kwa">for</span> <span class="sym">{</span>set i <span class="num">0</span><span class="sym">} {</span>$i<span class="sym">&lt;</span>$n<span class="sym">} {</span>incr i<span class="sym">} {</span>NthToggle ntoggle$i <span class="kwa">TRUE</span> <span class="num">3</span><span class="sym">}
}
</span>main <span class="sym">[</span>lindex $<span class="kwa">argv</span> <span class="num">0</span><span class="sym">]</span>
