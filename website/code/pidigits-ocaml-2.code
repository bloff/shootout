<span class="com">(*</span>
<span class="com"> * The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Christophe TROESTLER</span>
<span class="com"> * modified by Matías Giovannini</span>
<span class="com"> *)</span>
<span class="kwa">open</span> Printf
<span class="kwa">open</span> Big_int

<span class="kwa">let</span> <span class="sym">( +</span>$ <span class="sym">) =</span> add_big_int
<span class="kwa">let</span> <span class="sym">( *</span>$ <span class="sym">) =</span> mult_int_big_int
<span class="kwa">let</span> <span class="sym">( /</span>$ <span class="sym">) =</span> div_big_int

<span class="com">(* Entier part of the linear fractional transform qrst of x *)</span>
<span class="kwa">let</span> <span class="kwd">ext</span> <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">)</span> x <span class="sym">=</span> <span class="kwd">int_of_big_int</span> <span class="sym">((</span>x <span class="sym">*</span>$ q <span class="sym">+</span>$ r<span class="sym">) /</span>$ <span class="sym">(</span>x <span class="sym">*</span>$ s <span class="sym">+</span>$ t<span class="sym">))</span>

<span class="com">(* Multiply small int matrix qrst by big int matrix qrst' (small on left) *)</span>
<span class="kwa">let</span> <span class="kwd">mml</span> <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">) (</span>q<span class="str">',r'</span><span class="sym">,</span>s<span class="str">',t'</span><span class="sym">) =</span>
  q <span class="sym">*</span>$ q<span class="str">'  +$  r *$ s'</span><span class="sym">,</span>  q <span class="sym">*</span>$ r<span class="str">'  +$  r *$ t'</span><span class="sym">,</span>
  s <span class="sym">*</span>$ q<span class="str">'  +$  t *$ s'</span><span class="sym">,</span>  s <span class="sym">*</span>$ r<span class="str">'  +$  t *$ t'</span>

<span class="com">(* Multiply big int matrix qrst by small int matrix qrst' (small on right) *)</span>
<span class="kwa">let</span> <span class="kwd">mmr</span> <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">) (</span>q<span class="str">',r'</span><span class="sym">,</span>s<span class="str">',t'</span><span class="sym">) =</span>
  q<span class="str">' *$ q  +$  s'</span> <span class="sym">*</span>$ r<span class="sym">,</span>  r<span class="str">' *$ q  +$  t'</span> <span class="sym">*</span>$ r<span class="sym">,</span>
  q<span class="str">' *$ s  +$  s'</span> <span class="sym">*</span>$ t<span class="sym">,</span>  r<span class="str">' *$ s  +$  t'</span> <span class="sym">*</span>$ t

<span class="kwa">let</span> <span class="kwb">unit</span> <span class="sym">= (</span>unit_big_int<span class="sym">,</span>zero_big_int<span class="sym">,</span>zero_big_int<span class="sym">,</span>unit_big_int<span class="sym">)</span>

<span class="kwa">let</span> next z   <span class="sym">=</span> ext z <span class="num">3</span>
<span class="kwa">and</span> safe z n <span class="sym">=</span> ext z <span class="num">4</span> <span class="sym">==</span> n
<span class="kwa">and</span> prod z n <span class="sym">=</span> <span class="kwd">mml</span> <span class="sym">(</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>n<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span> z
<span class="kwa">and</span> cons z k <span class="sym">=</span>
  <span class="kwa">let</span> den <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>k <span class="sym">+</span> <span class="num">1</span> <span class="kwa">in</span>
  mmr <span class="kwd">z</span> <span class="sym">(</span>k<span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>den<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> den<span class="sym">)</span>

<span class="kwa">let rec</span> digit k z n row col <span class="sym">=</span>
  <span class="kwa">if</span> n <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> printf <span class="str">&quot;%*s</span><span class="esc">\t</span><span class="str">:%i</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span><span class="num">10</span><span class="sym">-</span>col<span class="sym">)</span> <span class="str">&quot;&quot;</span> <span class="sym">(</span>row<span class="sym">+</span>col<span class="sym">)</span> <span class="kwa">else</span>
  <span class="kwa">let</span> d <span class="sym">=</span> next z <span class="kwa">in</span>
  <span class="kwa">if</span> safe z d <span class="kwa">then</span>
    <span class="kwa">if</span> col <span class="sym">=</span> <span class="num">10</span> <span class="kwa">then begin</span>
      <span class="kwa">let</span> row <span class="sym">=</span> row <span class="sym">+</span> <span class="num">10</span> <span class="kwa">in</span>
      printf <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:%i</span><span class="esc">\n</span><span class="str">%i&quot;</span> row d<span class="sym">;</span>
      digit <span class="kwd">k</span> <span class="sym">(</span>prod z d<span class="sym">) (</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> row <span class="num">1</span>
    <span class="kwa">end else begin</span>
      print_int d<span class="sym">;</span>
      digit <span class="kwd">k</span> <span class="sym">(</span>prod z d<span class="sym">) (</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="kwd">row</span> <span class="sym">(</span>col<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
    <span class="kwa">end</span>
  <span class="kwa">else</span> <span class="kwd">digit</span> <span class="sym">(</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>cons z k<span class="sym">)</span> n row col

<span class="kwa">let</span> digits n <span class="sym">=</span> digit <span class="num">1</span> <span class="kwb">unit</span> n <span class="num">0 0</span>

<span class="kwa">let</span> <span class="sym">() =</span> <span class="kwd">digits</span> <span class="sym">(</span><span class="kwa">try</span> <span class="kwd">int_of_string</span> <span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">27</span><span class="sym">)</span>
