<span class="sym">/*</span> The Great Computer Language Shootout
    http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/

</span>   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)

   </span>   Clean is a functional programming language.
    Existential <span class="kwa">type</span> variable have some vague similarity
   so NToggle delegates function calls to Toggle.

      NOTE The compiler seems to optimize away creation
         <span class="kwa">of</span> identical toggle records...

 To compile<span class="sym">:
	</span>   cleanIDE.exe <span class="slc">--batch-force-build &quot;e:\shoot\contrib\clean\objinst.prj&quot;
</span>
To run<span class="sym">:
</span>   objinst.exe <span class="sym">-</span>con <span class="num">1000000
</span><span class="sym">*/

</span><span class="kwa">module</span> objinst

<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

Start
	# toggle <span class="sym">=</span> makeToggleLoop argi <span class="sym">(</span>makeToggle <span class="kwa">True</span><span class="sym">)
</span>	# lines <span class="sym">=</span> printLoop <span class="num">5</span> toggle <span class="sym">[]
</span>	# lines <span class="sym">= [</span><span class="str">&quot;\n&quot;</span><span class="sym">:</span>lines<span class="sym">]
	</span>	# ntoggle <span class="sym">=</span> makeNToggleLoop argi <span class="sym">(</span>makeNToggle <span class="kwa">True</span> <span class="num">3</span><span class="sym">)
</span>	# lines <span class="sym">=</span> printLoop <span class="num">8</span> ntoggle lines
	<span class="sym">=</span> reverse lines

	<span class="kwa">where
 </span>	makeToggleLoop n t
		<span class="sym">|</span> n <span class="sym">==</span> <span class="num">0</span> <span class="sym">=</span> t
		<span class="sym">=</span> makeToggleLoop <span class="sym">(</span>n<span class="num">-1</span><span class="sym">) (</span>makeToggle <span class="kwa">True</span><span class="sym">)

		</span>	makeNToggleLoop n t
		<span class="sym">|</span> n <span class="sym">==</span> <span class="num">0</span> <span class="sym">=</span> t
		<span class="sym">=</span> makeNToggleLoop <span class="sym">(</span>n<span class="num">-1</span><span class="sym">) (</span>makeNToggle <span class="kwa">True</span> <span class="num">3</span><span class="sym">)

	</span>	printLoop n t ls
		<span class="sym">|</span> n <span class="sym">==</span> <span class="num">0</span> <span class="sym">=</span> ls
		# t <span class="sym">=</span> activate t
		<span class="sym">=</span> printLoop <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)</span> t <span class="sym">[</span>toLString <span class="sym">(</span>value t<span class="sym">) :</span>ls<span class="sym">]

		</span>		<span class="kwa">where
 </span>		toLString b
			<span class="sym">|</span> b <span class="sym">=</span> <span class="str">&quot;true\n&quot;</span>
				<span class="sym">=</span> <span class="str">&quot;false\n&quot;</span>


<span class="sym">::</span> Toggler <span class="sym">=</span> E.a<span class="sym">:</span> { state <span class="sym">::</span> a
                  <span class="sym">,</span> activate_ <span class="sym">::</span> a <span class="sym">-&gt;</span> a
                  <span class="sym">,</span> value_ <span class="sym">::</span> a <span class="sym">-&gt;</span> <span class="kwb">Bool
</span>                  }

                 value o<span class="sym">=:</span>{state<span class="sym">,</span>value_} <span class="sym">=</span> value_ state
activate o<span class="sym">=:</span>{state<span class="sym">,</span>activate_} <span class="sym">=</span> {o <span class="sym">&amp;</span> state <span class="sym">=</span> activate_ state}

makeToggle b <span class="sym">=
</span>	{ state <span class="sym">=</span> b

		<span class="sym">,</span> activate_ <span class="sym">=</span> \ state <span class="sym">-&gt;</span> not state

		<span class="sym">,</span> value_ <span class="sym">=</span> \ state <span class="sym">-&gt;</span> state
	}

makeNToggle b max <span class="sym">=
</span>	{ state <span class="sym">= (</span>makeToggle<span class="sym">(</span>b<span class="sym">),</span> max<span class="sym">,</span> <span class="num">0</span><span class="sym">)

		,</span> activate_ <span class="sym">=</span> \ <span class="sym">(</span>t<span class="sym">,</span> max<span class="sym">,</span> count<span class="sym">) -&gt;
 </span>		if <span class="sym">(</span>count<span class="sym">+</span><span class="num">1</span> <span class="sym">&gt;=</span> max<span class="sym">)
			(</span>activate t<span class="sym">,</span> max<span class="sym">,</span> <span class="num">0</span><span class="sym">) (</span>t<span class="sym">,</span> max<span class="sym">,</span> count<span class="sym">+</span><span class="num">1</span><span class="sym">)
	
				,</span> value_ <span class="sym">=</span> \ <span class="sym">(</span>t<span class="sym">,</span>_<span class="sym">,</span>_<span class="sym">) -&gt;</span> value t
	}
