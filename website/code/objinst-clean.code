<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy (Clean novice)
   
   Clean is a functional programming language. 
   Existential <B><FONT COLOR="#A020F0">type</FONT></B> variable have some vague similarity
   so NToggle delegates function calls <B><FONT COLOR="#A020F0">to</FONT></B> Toggle.
   
   NOTE The compiler seems <B><FONT COLOR="#A020F0">to</FONT></B> optimize away creation 
        <B><FONT COLOR="#A020F0">of</FONT></B> identical toggle records... 

To compile:	
   cleanIDE.exe <I><FONT COLOR="#B22222">--batch-force-build &quot;e:\shoot\contrib\clean\objinst.prj&quot;
</FONT></I>
To run:
   objinst.exe -con 1000000
*/

<B><FONT COLOR="#A020F0">module</FONT></B> objinst

<B><FONT COLOR="#A020F0">import</FONT></B> StdEnv, LanguageShootout

Start
	# toggle = makeToggleLoop argi (makeToggle True)
	# lines = printLoop 5 toggle []
	# lines = [<B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>:lines]	
	# ntoggle = makeNToggleLoop argi (makeNToggle True 3)
	# lines = printLoop 8 ntoggle lines
	= reverse lines

	<B><FONT COLOR="#A020F0">where</FONT></B> 
	makeToggleLoop n t
		| n == 0 = t
		= makeToggleLoop (n-1) (makeToggle True)
		
	makeNToggleLoop n t
		| n == 0 = t
		= makeNToggleLoop (n-1) (makeNToggle True 3)
	
	printLoop n t ls
		| n == 0 = ls
		# t = activate t
		= printLoop (n-1) t [toLString (value t) :ls]
		
		<B><FONT COLOR="#A020F0">where</FONT></B> 
		toLString b
			| b = <B><FONT COLOR="#BC8F8F">&quot;true\n&quot;</FONT></B>
				= <B><FONT COLOR="#BC8F8F">&quot;false\n&quot;</FONT></B>


<B><FONT COLOR="#228B22">:: Toggler = E.a: { state :: a
</FONT></B>                  , activate_ <B><FONT COLOR="#228B22">:: a -&gt; a
</FONT></B>                  , value_ <B><FONT COLOR="#228B22">:: a -&gt; Bool
</FONT></B>                  }
                 
value o=:{state,value_} = value_ state
activate o=:{state,activate_} = {o &amp; state = activate_ state}

makeToggle b =
	{ state = b
	
	, activate_ = \ state -&gt; not state
	
	, value_ = \ state -&gt; state
	}

makeNToggle b max =
	{ state = (makeToggle(b), max, 0)
	
	, activate_ = \ (t, max, count) -&gt; 
		<B><FONT COLOR="#A020F0">if</FONT></B> (count+1 &gt;= max)
			(activate t, max, 0) (t, max, count+1)	
			
	, value_ = \ (t,<B><FONT COLOR="#A020F0">_,_</FONT></B>) -&gt; value t
	}</pre></td></tr></table>
