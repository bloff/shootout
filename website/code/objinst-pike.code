<span class="line">    1 </span><span class="dir">#!/usr/bin/pike
</span><span class="line">    2 </span><span class="dir"></span><span class="slc">// -*- mode: pike -*-
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// $Id: objinst-pike.code,v 1.4 2004-11-13 07:42:25 bfulgham Exp $
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span>class Toggle <span class="sym">{
</span><span class="line">    7 </span><span class="sym"></span>    <span class="kwb">int</span> bool<span class="sym">;
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span>    <span class="kwb">object</span> create <span class="sym">(</span><span class="kwb">int</span> start_state<span class="sym">) {
</span><span class="line">   10 </span><span class="sym"></span>        bool <span class="sym">=</span> start_state<span class="sym">;
</span><span class="line">   11 </span><span class="sym">    }
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span>    <span class="kwb">int</span> value <span class="sym">() {
</span><span class="line">   14 </span><span class="sym"></span>        return<span class="sym">(</span>bool<span class="sym">);
</span><span class="line">   15 </span><span class="sym">    }
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span>    <span class="kwb">object</span> activate <span class="sym">() {
</span><span class="line">   18 </span><span class="sym"></span>        bool <span class="sym">= !</span>bool<span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>        return<span class="sym">(</span><span class="kwa">this_object</span><span class="sym">());
</span><span class="line">   20 </span><span class="sym">    }
</span><span class="line">   21 </span><span class="sym">}
</span><span class="line">   22 </span><span class="sym">
</span><span class="line">   23 </span><span class="sym"></span>class NthToggle <span class="sym">{
</span><span class="line">   24 </span><span class="sym"></span>    inherit Toggle<span class="sym">;
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwb">int</span> count_max<span class="sym">,</span> count<span class="sym">;
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym"></span>    <span class="kwb">object</span> create <span class="sym">(</span><span class="kwb">int</span> start_state<span class="sym">,</span> <span class="kwb">int</span> max_counter<span class="sym">) {
</span><span class="line">   29 </span><span class="sym">        ::</span>create<span class="sym">(</span>start_state<span class="sym">);
</span><span class="line">   30 </span><span class="sym"></span>        count_max <span class="sym">=</span> max_counter<span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span>        count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   32 </span><span class="sym">    }
</span><span class="line">   33 </span><span class="sym">
</span><span class="line">   34 </span><span class="sym"></span>    <span class="kwb">object</span> activate <span class="sym">() {
</span><span class="line">   35 </span><span class="sym"></span>        if <span class="sym">(++</span>count <span class="sym">&gt;=</span> count_max<span class="sym">) {
</span><span class="line">   36 </span><span class="sym"></span>            bool <span class="sym">= !</span>bool<span class="sym">;
</span><span class="line">   37 </span><span class="sym"></span>            count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   38 </span><span class="sym">        }
</span><span class="line">   39 </span><span class="sym"></span>        return<span class="sym">(</span><span class="kwa">this_object</span><span class="sym">());
</span><span class="line">   40 </span><span class="sym">    }
</span><span class="line">   41 </span><span class="sym">}
</span><span class="line">   42 </span><span class="sym">
</span><span class="line">   43 </span><span class="sym"></span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">) {
</span><span class="line">   44 </span><span class="sym"></span>    <span class="kwb">int</span> n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">];
</span><span class="line">   45 </span><span class="sym"></span>    if <span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   46 </span><span class="sym">
</span><span class="line">   47 </span><span class="sym"></span>    <span class="kwb">object</span> toggle <span class="sym">=</span> Toggle<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   48 </span><span class="sym"></span>    for <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">5</span><span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   49 </span><span class="sym"></span>        toggle<span class="sym">-&gt;</span>activate<span class="sym">();
</span><span class="line">   50 </span><span class="sym"></span>        <span class="kwa">write</span><span class="sym">((</span>toggle<span class="sym">-&gt;</span>value<span class="sym">())</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   51 </span><span class="sym">    }
</span><span class="line">   52 </span><span class="sym"></span>    for <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   53 </span><span class="sym"></span>        <span class="kwb">object</span> toggle <span class="sym">=</span> Toggle<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   54 </span><span class="sym">    }
</span><span class="line">   55 </span><span class="sym">
</span><span class="line">   56 </span><span class="sym"></span>    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   57 </span><span class="sym">
</span><span class="line">   58 </span><span class="sym"></span>    <span class="kwb">object</span> ntoggle <span class="sym">=</span> NthToggle<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span><span class="line">   59 </span><span class="sym"></span>    for <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">8</span><span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   60 </span><span class="sym"></span>        ntoggle<span class="sym">-&gt;</span>activate<span class="sym">();
</span><span class="line">   61 </span><span class="sym"></span>        <span class="kwa">write</span><span class="sym">((</span>ntoggle<span class="sym">-&gt;</span>value<span class="sym">())</span> ? <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">:</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   62 </span><span class="sym">    }
</span><span class="line">   63 </span><span class="sym"></span>    for <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   64 </span><span class="sym"></span>        <span class="kwb">object</span> ntoggle <span class="sym">=</span> NthToggle<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span><span class="line">   65 </span><span class="sym">    }
</span><span class="line">   66 </span><span class="sym">}
</span><span class="line">   67 </span><span class="sym">
</span><span class="line">   68 </span><span class="sym"></span>
