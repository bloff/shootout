<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   http://www.bagley.org/~doug/shootout/

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release objinst.d
*/</span>

import std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)
{
</span>	<span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;

</span>    Toggle toggle1 <span class="sym">=</span> <span class="kwa">new</span> Toggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">);
</span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">5</span><span class="sym">;</span> i<span class="sym">++)
    {
</span>        writefln<span class="sym">(</span>toggle1<span class="sym">.</span>activate<span class="sym">().</span>value<span class="sym">()</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);
    }

</span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)
    {
</span>        Toggle toggle <span class="sym">=</span> <span class="kwa">new</span> Toggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">);
    }

</span>    writefln<span class="sym">();

</span>    NthToggle ntoggle1 <span class="sym">=</span> <span class="kwa">new</span> NthToggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);
</span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">8</span><span class="sym">;</span> i<span class="sym">++)
    {
</span>        writefln<span class="sym">(</span>ntoggle1<span class="sym">.</span>activate<span class="sym">().</span>value<span class="sym">()</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);
    }

</span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)
    {
</span>        NthToggle ntoggle <span class="sym">=</span> <span class="kwa">new</span> NthToggle<span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">);
    }
}

</span><span class="kwc">class</span> Toggle
<span class="sym">{
</span>package<span class="sym">:
</span>    <span class="kwb">bool</span> state<span class="sym">;

</span>    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">bool</span> start_state<span class="sym">) {</span> state <span class="sym">=</span> start_state<span class="sym">; }

</span>    <span class="kwb">bool</span> value<span class="sym">()
    {
</span>        <span class="kwa">return</span><span class="sym">(</span>state<span class="sym">);
    }

</span>    Toggle activate<span class="sym">()
    {
</span>        state <span class="sym">= !</span>state<span class="sym">;
</span>        <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);
    }
}

</span><span class="kwc">class</span> NthToggle<span class="sym">:</span> Toggle
<span class="sym">{
</span>package<span class="sym">:
</span>    <span class="kwb">int</span> count_max<span class="sym">;
</span>    <span class="kwb">int</span> counter<span class="sym">;

</span>    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">bool</span> start_state<span class="sym">,</span> <span class="kwb">int</span> max_counter<span class="sym">) {</span> super<span class="sym">(</span>start_state<span class="sym">);</span> count_max <span class="sym">=</span> max_counter<span class="sym">; }

</span>    Toggle activate<span class="sym">()
    {
</span>        counter<span class="sym">++;
</span>        <span class="kwa">if</span><span class="sym">(</span>counter <span class="sym">&gt;=</span> count_max<span class="sym">)
        {
</span>            state <span class="sym">= !</span>state<span class="sym">;
</span>            counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;
        }
</span>        <span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);
    }
}</span>
