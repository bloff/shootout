<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">// $Id: prodcons-icpp.code,v 1.11 2006-09-30 16:39:37 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;unistd.h&gt;</span>
<span class="dir">#include &lt;signal.h&gt;</span>
<span class="dir">#include &lt;errno.h&gt;</span>
<span class="dir">#include &lt;sys/types.h&gt;</span>
<span class="dir">#include &lt;pthread.h&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

pthread_mutex_t mutex<span class="sym">;</span>
pthread_cond_t control<span class="sym">;</span>
<span class="kwb">void</span> <span class="kwd">producer</span><span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">);</span>
<span class="kwb">void</span> <span class="kwd">consumer</span><span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">);</span>
<span class="kwb">int</span> pcount<span class="sym">,</span> data<span class="sym">,</span> consumed<span class="sym">,</span> produced<span class="sym">;</span>


<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>
    pthread_t t1<span class="sym">,</span> t2<span class="sym">;</span>

    pcount <span class="sym">=</span> data <span class="sym">=</span> consumed <span class="sym">=</span> produced <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">pthread_mutex_init</span><span class="sym">(&amp;</span>mutex<span class="sym">,</span> NULL<span class="sym">)) {</span>
	<span class="kwd">perror</span><span class="sym">(</span><span class="str">&quot;pthread_mutex_init&quot;</span><span class="sym">);</span>
	<span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">pthread_cond_init</span><span class="sym">(&amp;</span>control<span class="sym">,</span> NULL<span class="sym">)) {</span>
	<span class="kwd">perror</span><span class="sym">(</span><span class="str">&quot;pthread_cond_init&quot;</span><span class="sym">);</span>
	<span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">pthread_create</span><span class="sym">(&amp;</span>t1<span class="sym">, (</span>pthread_attr_t <span class="sym">*)</span>NULL<span class="sym">,</span>
		       <span class="sym">(</span><span class="kwb">void</span> <span class="sym">* (*)(</span><span class="kwb">void</span> <span class="sym">*))</span>producer<span class="sym">, (</span><span class="kwb">void</span> <span class="sym">*)&amp;</span>n<span class="sym">)) {</span>
	<span class="kwd">perror</span><span class="sym">(</span><span class="str">&quot;pthread_create&quot;</span><span class="sym">);</span>
	<span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">pthread_create</span><span class="sym">(&amp;</span>t2<span class="sym">, (</span>pthread_attr_t <span class="sym">*)</span>NULL<span class="sym">,</span>
		       <span class="sym">(</span><span class="kwb">void</span> <span class="sym">* (*)(</span><span class="kwb">void</span> <span class="sym">*))</span>consumer<span class="sym">, (</span><span class="kwb">void</span> <span class="sym">*)&amp;</span>n<span class="sym">)) {</span>
	<span class="kwd">perror</span><span class="sym">(</span><span class="str">&quot;pthread_create&quot;</span><span class="sym">);</span>
	<span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwd">pthread_join</span><span class="sym">(</span>t1<span class="sym">,</span> NULL<span class="sym">);</span>
    <span class="kwd">pthread_join</span><span class="sym">(</span>t2<span class="sym">,</span> NULL<span class="sym">);</span>
    cout <span class="sym">&lt;&lt;</span> produced <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> consumed <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>


<span class="kwb">void</span> <span class="kwd">producer</span><span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">) {</span>
    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">= *</span>arg<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	<span class="kwd">pthread_mutex_lock</span><span class="sym">(&amp;</span>mutex<span class="sym">);</span>
	<span class="kwa">while</span> <span class="sym">(</span>pcount <span class="sym">==</span> <span class="num">1</span><span class="sym">) {</span>
	    <span class="kwd">pthread_cond_wait</span><span class="sym">(&amp;</span>control<span class="sym">, &amp;</span>mutex<span class="sym">);</span>
	<span class="sym">}</span>
	data <span class="sym">=</span> i<span class="sym">;</span>
	pcount <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
	<span class="kwd">pthread_cond_signal</span><span class="sym">(&amp;</span>control<span class="sym">);</span>
	<span class="kwd">pthread_mutex_unlock</span><span class="sym">(&amp;</span>mutex<span class="sym">);</span>
	produced<span class="sym">++;</span>
    <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwb">void</span> <span class="kwd">consumer</span><span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">) {</span>
    <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n <span class="sym">= *</span>arg<span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {</span>
	<span class="kwd">pthread_mutex_lock</span><span class="sym">(&amp;</span>mutex<span class="sym">);</span>
	<span class="kwa">while</span> <span class="sym">(</span>pcount <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
	    <span class="kwd">pthread_cond_wait</span><span class="sym">(&amp;</span>control<span class="sym">, &amp;</span>mutex<span class="sym">);</span>
	<span class="sym">}</span>
	i <span class="sym">=</span> data<span class="sym">;</span>
	pcount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwd">pthread_cond_signal</span><span class="sym">(&amp;</span>control<span class="sym">);</span>
	<span class="kwd">pthread_mutex_unlock</span><span class="sym">(&amp;</span>mutex<span class="sym">);</span>
	consumed<span class="sym">++;</span>
	<span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> n<span class="sym">)</span> <span class="kwa">return</span><span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

