<span class="com">/**</span>
<span class="com"> * The Computer Language Benchmarks game</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Rodney Drenth</span>
<span class="com"> *</span>
<span class="com"> */</span>


<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>

<span class="kwb">void</span> <span class="kwd">PrintPerm</span><span class="sym">(</span> <span class="kwb">int</span> <span class="sym">*</span>perm<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">-- &gt;</span><span class="num">0</span><span class="sym">)</span> <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span> <span class="num">1</span><span class="sym">+*</span>perm<span class="sym">++);</span>
   <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
<span class="sym">}</span>
<span class="dir">#define XCNG(a,b,t) {t=a;a=b;b=t;}</span>

<span class="kwb">int</span> <span class="kwd">fannkuch</span><span class="sym">(</span> <span class="kwb">int</span> n <span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">int</span>      <span class="sym">*</span>count<span class="sym">, *</span>perm<span class="sym">, *</span>perm1<span class="sym">, *</span>perm2<span class="sym">, *</span>p1<span class="sym">, *</span>pA<span class="sym">;</span>
   <span class="kwb">int</span>      <span class="sym">**</span>prmts<span class="sym">;</span>
   <span class="kwb">int</span>      flips<span class="sym">,</span> maxFlips<span class="sym">;</span>
   <span class="kwb">int</span>      r<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">,</span> m<span class="sym">,</span> nx<span class="sym">;</span>
   <span class="kwb">int</span>      check <span class="sym">=</span> <span class="num">30</span><span class="sym">;</span>

    <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;=</span> <span class="num">1</span><span class="sym">)</span>
      <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>

   prmts <span class="sym">=</span> <span class="kwd">calloc</span><span class="sym">(</span> n<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span> <span class="kwb">int</span> <span class="sym">*));</span>
   perm1 <span class="sym">=</span> pA <span class="sym">=</span> <span class="kwd">calloc</span><span class="sym">( (</span>n<span class="sym">+</span><span class="num">4</span><span class="sym">)*</span>n<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">));</span>
   perm2 <span class="sym">=</span> perm1 <span class="sym">+</span> n<span class="sym">;</span>
   count <span class="sym">=</span> perm1 <span class="sym">+</span> <span class="num">2</span><span class="sym">*</span>n<span class="sym">;</span>
   perm  <span class="sym">=</span> perm1 <span class="sym">+</span> <span class="num">3</span><span class="sym">*</span>n<span class="sym">;</span>
   p1 <span class="sym">=</span> perm1 <span class="sym">+</span> <span class="num">4</span><span class="sym">*</span>n<span class="sym">;</span>
   <span class="kwa">for</span> <span class="sym">(</span>r<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> r<span class="sym">&lt;</span>n<span class="sym">;</span> r<span class="sym">++) {</span>
      prmts<span class="sym">[</span>r<span class="sym">] =</span> perm1 <span class="sym">+ (</span><span class="num">4</span><span class="sym">+</span>r<span class="sym">)*</span>n<span class="sym">;</span>
      p1<span class="sym">[</span>r<span class="sym">] =</span> perm1<span class="sym">[</span>r<span class="sym">] =</span> r<span class="sym">;</span>
      count<span class="sym">[</span>r<span class="sym">] =</span> r<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwa">for</span> <span class="sym">(</span>nx<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> nx<span class="sym">&lt;</span>n<span class="sym">;</span> nx<span class="sym">++) {</span>   <span class="slc">// compute permutation operators</span>
      <span class="kwb">int</span> <span class="sym">*</span>p2 <span class="sym">=</span> prmts<span class="sym">[</span>nx<span class="sym">];</span>
      <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>nx<span class="sym">;</span> i<span class="sym">++)</span> p2<span class="sym">[</span>i<span class="sym">] =</span> p1<span class="sym">[</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
      p2<span class="sym">[</span>i<span class="sym">++] =</span> p1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
      <span class="kwa">for</span> <span class="sym">( ;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> p2<span class="sym">[</span>i<span class="sym">] =</span> p1<span class="sym">[</span>i<span class="sym">];</span>
      p1<span class="sym">=</span>p2<span class="sym">;</span>
   <span class="sym">}</span>

   m <span class="sym">=</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
   maxFlips <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
   r <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {</span>
      <span class="kwa">if</span> <span class="sym">(</span>check<span class="sym">&gt;</span><span class="num">0</span> <span class="sym">) {</span>
         <span class="kwd">PrintPerm</span><span class="sym">(</span> perm1<span class="sym">,</span> n<span class="sym">);</span>
         check<span class="sym">--;</span>
      <span class="sym">}</span>
      k <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
      <span class="kwa">if</span> <span class="sym">(</span> perm1<span class="sym">[</span>k<span class="sym">]!=</span><span class="num">0</span> <span class="sym">&amp;&amp; (</span>perm1<span class="sym">[</span>m<span class="sym">]!=</span> m<span class="sym">)) {</span>
         <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span>n<span class="sym">; --</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">; )</span>
            perm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];</span>
         perm<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> k<span class="sym">;</span>
         <span class="kwa">for</span> <span class="sym">(</span>flips<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> k<span class="sym">;</span> flips<span class="sym">++) {</span>
            <span class="kwb">int</span> l<span class="sym">, *</span>pk<span class="sym">;</span>
            l <span class="sym">= (</span>k<span class="sym">-</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">;</span>
            <span class="kwa">for</span><span class="sym">(</span> pk <span class="sym">=</span> perm<span class="sym">+</span>k<span class="sym">;</span> l<span class="sym">&gt;=</span><span class="num">0</span><span class="sym">; --</span>l<span class="sym">) {</span>
               <span class="kwd">XCNG</span><span class="sym">(*(</span>pk<span class="sym">-</span>l<span class="sym">), *(</span>perm<span class="sym">+</span>l<span class="sym">),</span> k<span class="sym">);</span>
            <span class="sym">};</span>
            <span class="slc">// Note: final exchange leaves perm[0] in k</span>
          <span class="sym">}</span>
         <span class="kwa">if</span> <span class="sym">(</span>maxFlips <span class="sym">&lt;</span> flips<span class="sym">)</span> maxFlips <span class="sym">=</span> flips<span class="sym">;</span>
      <span class="sym">}</span>
      r <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">while</span> <span class="sym">(--</span>count<span class="sym">[</span>r<span class="sym">] ==</span> <span class="num">0</span><span class="sym">) {</span>
         r <span class="sym">=</span> count<span class="sym">[</span>r<span class="sym">] =</span> r<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>
         <span class="kwa">if</span> <span class="sym">(</span>r<span class="sym">==</span> n<span class="sym">) {</span>
            <span class="kwd">free</span><span class="sym">(</span>prmts<span class="sym">);</span> <span class="kwd">free</span><span class="sym">(</span>pA<span class="sym">);</span>
            <span class="kwa">return</span> maxFlips<span class="sym">;</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      <span class="slc">// generate permutation nx=5 first time.</span>
      <span class="kwd">XCNG</span><span class="sym">(</span>perm1<span class="sym">,</span>perm2<span class="sym">,</span>p1<span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span>r<span class="sym">&gt;</span><span class="num">1</span><span class="sym">)</span> nx <span class="sym">=</span> r<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>
      p1 <span class="sym">=</span> prmts<span class="sym">[</span>r<span class="sym">];</span>
      <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span> nx<span class="sym">;</span> i<span class="sym">++)</span>
         perm1<span class="sym">[</span>i<span class="sym">] =</span> perm2<span class="sym">[</span>p1<span class="sym">[</span>i<span class="sym">]];</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span> <span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[] )</span>
<span class="sym">{</span>
    <span class="kwb">int</span>      n <span class="sym">= (</span>argc<span class="sym">&gt;</span><span class="num">1</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">));</span>
<span class="sym">}</span>
