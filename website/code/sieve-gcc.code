<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: sieve-gcc.code,v 1.20 2006-09-20 05:52:36 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>

<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> NUM <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwb">static char</span> flags<span class="sym">[</span><span class="num">8192</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">];</span>
    <span class="kwb">long</span> i<span class="sym">,</span> k<span class="sym">;</span>
    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>NUM<span class="sym">--) {</span>
	count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">;</span> i<span class="sym">++) {</span>
	    flags<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">1</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">;</span> i<span class="sym">++) {</span>
	    <span class="kwa">if</span> <span class="sym">(</span>flags<span class="sym">[</span>i<span class="sym">]) {</span>
		<span class="slc">// remove all multiples of prime: i</span>
		<span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> k <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">) {</span>
		    flags<span class="sym">[</span>k<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
		<span class="sym">}</span>
		count<span class="sym">++;</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Count: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> count<span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>

