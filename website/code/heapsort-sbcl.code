<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: lisp -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: heapsort-sbcl.code,v 1.2 2004-11-08 08:15:14 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">;;; with help with declarations from Chih-Chung Chang
</FONT></I><I><FONT COLOR="#B22222">;;; Multi-lisp modifications by Brent Fulgham
</FONT></I>
(defconstant IM     139968)
(defconstant IA       3877)
(defconstant IC      29573)

(defvar LAST 42)

(defun gen_random (max)
  (declare (optimize (speed 3) (debug 0) (safety 0))) 
  (declare (type (signed-byte 32) IM IA IC LAST))
  (declare (double-float max))
  (setq LAST (mod (+ (* LAST IA) IC) IM))
  (/ (* max LAST) IM))

(defun heapsort (n ra)
  (declare (optimize (speed 3) (debug 0) (safety 0))) 
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((ir n)
	(l (+ (ash n -1) 1))
	(i 0) 
	(j 0)
	(rra 0.0d0))
    (declare (type (simple-array double-float (*)) ra))
    (declare (fixnum ir l i j))
    (declare (double-float rra))
    (block here
      (loop
	(<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; l 1)
	       (setq rra (aref ra (setq l (- l 1)))))
	      (t
	       (setq rra (aref ra ir))
	       (setf (aref ra ir) (aref ra 1))
	       (setq ir (- ir 1))
	       (<B><FONT COLOR="#A020F0">if</FONT></B> (= ir 1)
		   (progn
		     (setf (aref ra 1) rra)
		     (return-from here nil)))))
	(setq i l)
	(setq j (ash l 1))
	(<B><FONT COLOR="#A020F0">do</FONT></B> ()
	    ((&gt; j ir))
	  (<B><FONT COLOR="#A020F0">cond</FONT></B> ((<B><FONT COLOR="#A020F0">and</FONT></B> (&lt; j ir) (&lt; (aref ra j) (aref ra (+ j 1))))
		 (setq j (+ j 1))))
	  (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&lt; rra (aref ra j))
		 (setf (aref ra i) (aref ra j))
		 (setq j (+ j (the fixnum (setq i j)))))
		(t
		 (setq j (+ ir 1)))))
	(setf (aref ra i) rra)))))

(defun main ()
  (declare (optimize (speed 3) (debug 0) (safety 0)))
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((n (parse-integer (<B><FONT COLOR="#A020F0">or</FONT></B> (car (last #+sbcl sb-ext:*posix-argv*
                                          #+cmu  extensions:*command-line-strings*)) <B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B>)))
	 (ary (make-array (1+ n) <B><FONT COLOR="#5F9EA0">:element-type</FONT></B> 'double-float)))
    (declare (fixnum n))
    (loop for i fixnum from 0 below n <B><FONT COLOR="#A020F0">do</FONT></B>
      (setf (aref ary i) (gen_random 1.0d0)))
    (heapsort n ary)
    (format t <B><FONT COLOR="#BC8F8F">&quot;~,10F~%&quot;</FONT></B> (aref ary n))))</pre></td></tr></table>
