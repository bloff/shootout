<span class="slc">#!/usr/bin/ruby
</span><span class="slc">#
</span><span class="slc"># The Great Computer Language Shootout
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># nsieve-bits in Ruby
</span><span class="slc"># Contributed by Glenn Parker, March 2005
</span>
CharExponent = <span class="num">3
</span>BitsPerChar = <span class="num">1</span> <span class="sym">&lt;&lt;</span> CharExponent
LowMask = BitsPerChar <span class="num">- 1

</span><span class="kwa">def</span> sieve<span class="sym">(</span>m<span class="sym">)
</span>  items = <span class="str">&quot;\xFF&quot;</span> <span class="sym">* ((</span>m <span class="sym">/</span> BitsPerChar<span class="sym">) +</span> <span class="num">1</span><span class="sym">)
</span>  masks = <span class="str">&quot;&quot;</span>
  BitsPerChar.times <span class="kwa">do</span> <span class="sym">|</span>b<span class="sym">|
</span>    masks <span class="sym">&lt;&lt; (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> b<span class="sym">)</span>.chr
  <span class="kwa">end

</span>  count = <span class="num">0
</span>  pmax = m <span class="num">- 1
  2</span>.step<span class="sym">(</span>pmax<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">do</span> <span class="sym">|</span>p<span class="sym">|
</span>    <span class="kwa">if</span> items<span class="sym">[</span>p <span class="sym">&gt;&gt;</span> CharExponent<span class="sym">][</span>p <span class="sym">&amp;</span> LowMask<span class="sym">]</span> == <span class="num">1
</span>      count <span class="sym">+</span>= <span class="num">1
</span>      p.step<span class="sym">(</span>pmax<span class="sym">,</span> p<span class="sym">)</span> <span class="kwa">do</span> <span class="sym">|</span>mult<span class="sym">|
</span>	a = mult <span class="sym">&gt;&gt;</span> CharExponent
	b = mult <span class="sym">&amp;</span> LowMask
	items<span class="sym">[</span>a<span class="sym">] -</span>= masks<span class="sym">[</span>b<span class="sym">]</span> <span class="kwa">if</span> items<span class="sym">[</span>a<span class="sym">][</span>b<span class="sym">] !</span>= <span class="num">0
</span>      <span class="kwa">end
    end
  end
</span>  count
<span class="kwa">end

</span>n = <span class="sym">(</span><span class="kwa">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">2</span><span class="sym">)</span>.to_i
n.step<span class="sym">(</span>n <span class="num">- 2</span><span class="sym">, -</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">do</span> <span class="sym">|</span>exponent<span class="sym">|
</span>  <span class="kwa">break if</span> exponent <span class="sym">&lt;</span> <span class="num">0
</span>  m = <span class="num">2</span> <span class="sym">**</span> exponent <span class="sym">*</span> <span class="num">10_000
</span>  count = sieve<span class="sym">(</span>m<span class="sym">)
</span>  printf <span class="str">&quot;Primes up to %8d %8d\n&quot;</span><span class="sym">,</span> m<span class="sym">,</span> count
<span class="kwa">end
</span>
