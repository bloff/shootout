<span class="com">/* -*- mode: objc -*-</span>
<span class="com"> * $Id: objinst-objc.code,v 1.11 2007-11-05 04:32:34 bfulgham Exp $</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * by Brent Fulgham</span>
<span class="com"> */</span>

<span class="dir">#include &lt;objc/Object.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>

<span class="kwa">&#64;interface</span> Toggle<span class="sym">:</span> Object
<span class="sym">{</span>
	<span class="kwa">BOOL</span> state<span class="sym">;</span>
<span class="sym">}</span>

<span class="sym">-(</span><span class="kwb">void</span><span class="sym">)</span> setTo<span class="sym">: (</span><span class="kwa">BOOL</span><span class="sym">)</span> s<span class="sym">;</span>
<span class="sym">-(</span><span class="kwa">BOOL</span><span class="sym">)</span> value<span class="sym">;</span>
<span class="sym">-(</span>Toggle<span class="sym">*)</span> activate<span class="sym">;</span>
<span class="sym">-(</span>Toggle<span class="sym">*)</span> initWith<span class="sym">: (</span><span class="kwa">BOOL</span><span class="sym">)</span> s<span class="sym">;</span>
<span class="kwa">&#64;end</span>

<span class="kwa">&#64;interface</span> NthToggle<span class="sym">:</span> Toggle
<span class="sym">{</span>
	<span class="kwb">int</span> counter<span class="sym">;</span>
	<span class="kwb">int</span> max_count<span class="sym">;</span>
<span class="sym">}</span>

<span class="sym">-(</span><span class="kwb">void</span><span class="sym">)</span> setTo<span class="sym">: (</span><span class="kwa">BOOL</span><span class="sym">)</span> s setCount<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> c<span class="sym">;</span>
<span class="sym">-(</span><span class="kwb">int</span><span class="sym">)</span> incCount<span class="sym">;</span>
<span class="sym">-(</span><span class="kwb">int</span><span class="sym">)</span> countMax<span class="sym">;</span>
<span class="sym">-(</span>NthToggle<span class="sym">*)</span> activate<span class="sym">;</span>
<span class="sym">-(</span>NthToggle<span class="sym">*)</span> initWith<span class="sym">: (</span><span class="kwa">BOOL</span><span class="sym">)</span> s maxCount<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> c<span class="sym">;</span>
<span class="kwa">&#64;end</span>

<span class="kwa">&#64;implementation</span> Toggle
<span class="sym">-(</span><span class="kwb">void</span><span class="sym">)</span> setTo<span class="sym">: (</span><span class="kwa">BOOL</span><span class="sym">)</span> s <span class="sym">{</span> state <span class="sym">=</span> s<span class="sym">; }</span>
<span class="sym">-(</span><span class="kwa">BOOL</span><span class="sym">)</span> value <span class="sym">{</span> <span class="kwa">return</span> state<span class="sym">; }</span>
<span class="sym">-(</span>Toggle<span class="sym">*)</span> activate <span class="sym">{</span>
	<span class="sym">[</span><span class="kwa">self</span> setTo<span class="sym">: ![</span><span class="kwa">self</span> value<span class="sym">]];</span>
	<span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="sym">-(</span>Toggle<span class="sym">*)</span> initWith<span class="sym">: (</span><span class="kwa">BOOL</span><span class="sym">)</span> s <span class="sym">{</span>
	<span class="kwa">self</span> <span class="sym">= [</span><span class="kwa">super</span> init<span class="sym">];</span>
	<span class="kwa">if</span> <span class="sym">(</span><span class="kwa">self</span><span class="sym">) {</span>
		<span class="sym">[</span><span class="kwa">self</span> setTo<span class="sym">:</span> s<span class="sym">];</span>
	<span class="sym">}</span>
	<span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="kwa">&#64;end</span>

<span class="kwa">&#64;implementation</span> NthToggle
<span class="sym">-(</span><span class="kwb">void</span><span class="sym">)</span> setTo<span class="sym">: (</span><span class="kwa">BOOL</span><span class="sym">)</span> s setCount<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> c <span class="sym">{</span>
	<span class="sym">[</span><span class="kwa">self</span> setTo<span class="sym">:</span> s<span class="sym">];</span>
	counter <span class="sym">=</span> c<span class="sym">;</span>
<span class="sym">}</span>
<span class="sym">-(</span><span class="kwb">void</span><span class="sym">)</span> setMaxCount<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> c <span class="sym">{</span>
	max_count <span class="sym">=</span> c<span class="sym">;</span>
<span class="sym">}</span>
<span class="sym">-(</span><span class="kwb">int</span><span class="sym">)</span> incCount <span class="sym">{</span>
	<span class="kwa">return</span> <span class="sym">++</span>counter<span class="sym">;</span>
<span class="sym">}</span>
<span class="sym">-(</span><span class="kwb">int</span><span class="sym">)</span> countMax <span class="sym">{</span> <span class="kwa">return</span> max_count<span class="sym">; }</span>
<span class="sym">-(</span>NthToggle<span class="sym">*)</span> activate <span class="sym">{</span>
	<span class="kwa">if</span> <span class="sym">([</span><span class="kwa">self</span> incCount<span class="sym">] &gt;= [</span><span class="kwa">self</span> countMax<span class="sym">]) {</span>
		<span class="sym">[</span><span class="kwa">self</span> setTo<span class="sym">: ! [</span><span class="kwa">self</span> value<span class="sym">]</span> setCount<span class="sym">:</span> <span class="num">0</span><span class="sym">];</span>
	<span class="sym">}</span>
	<span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="sym">-(</span>NthToggle<span class="sym">*)</span> initWith<span class="sym">: (</span><span class="kwa">BOOL</span><span class="sym">)</span> s maxCount<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> c
<span class="sym">{</span>
	<span class="kwa">self</span> <span class="sym">= [</span><span class="kwa">super</span> init<span class="sym">];</span>
	<span class="kwa">if</span> <span class="sym">(</span><span class="kwa">self</span><span class="sym">) {</span>
		<span class="sym">[</span><span class="kwa">self</span> setTo<span class="sym">:</span> s setCount<span class="sym">:</span> <span class="num">0</span><span class="sym">];</span>
		<span class="sym">[</span><span class="kwa">self</span> setMaxCount<span class="sym">:</span> c<span class="sym">];</span>
	<span class="sym">}</span>
	<span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>
<span class="kwa">&#64;end</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
	<span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>

	Toggle <span class="sym">*</span>toggle1 <span class="sym">= [[</span>Toggle alloc<span class="sym">]</span> initWith<span class="sym">:</span> YES<span class="sym">];</span>
	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">5</span><span class="sym">;</span> i<span class="sym">++) {</span>
		<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [[</span>toggle1 activate<span class="sym">]</span> value<span class="sym">]</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="sym">[</span>toggle1 free<span class="sym">];</span>

	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
		Toggle <span class="sym">*</span>toggle <span class="sym">= [[</span>Toggle alloc<span class="sym">]</span> initWith<span class="sym">:</span> YES<span class="sym">];</span>
		<span class="sym">[</span>toggle free<span class="sym">];</span>
	<span class="sym">}</span>

	<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

	NthToggle <span class="sym">*</span>ntoggle1 <span class="sym">= [[</span>NthToggle alloc<span class="sym">]</span> initWith<span class="sym">:</span> YES maxCount<span class="sym">:</span> <span class="num">3</span><span class="sym">];</span>
	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">8</span><span class="sym">;</span> i<span class="sym">++) {</span>
		<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [[</span>ntoggle1 activate<span class="sym">]</span> value<span class="sym">]</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);</span>
	<span class="sym">}</span>
	<span class="sym">[</span>ntoggle1 free<span class="sym">];</span>

	<span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
		NthToggle <span class="sym">*</span>ntoggle <span class="sym">= [[</span>NthToggle alloc<span class="sym">]</span> initWith<span class="sym">:</span> YES maxCount<span class="sym">:</span> <span class="num">3</span><span class="sym">];</span>
		<span class="sym">[</span>ntoggle free<span class="sym">];</span>
	<span class="sym">}</span>

	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
