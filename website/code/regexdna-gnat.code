<span class="slc">-----------------------------------------------------------------------</span>
<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- contributed bh Jim Rogers</span>
<span class="slc">-----------------------------------------------------------------------</span>
<span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span>
<span class="kwa">use</span> Ada.Text_Io<span class="sym">;</span>
<span class="kwa">with</span> Ada.Integer_Text_Io<span class="sym">;</span>
<span class="kwa">use</span> Ada.Integer_Text_Io<span class="sym">;</span>
<span class="kwa">with</span> Ada.Strings.Unbounded<span class="sym">;</span>
<span class="kwa">use</span> Ada.Strings.Unbounded<span class="sym">;</span>
<span class="kwa">with</span> Gnat.Regpat<span class="sym">;</span>
<span class="kwa">use</span> Gnat.Regpat<span class="sym">;</span>

<span class="kwa">procedure</span> Regexdna <span class="kwa">is</span>

   <span class="kwa">type</span> Sequence_Lines <span class="kwa">is array</span> <span class="sym">(</span><span class="kwb">Positive</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> Unbounded_String<span class="sym">;</span>
   <span class="kwa">function</span> Length <span class="sym">(</span>
         Item <span class="sym">:</span> <span class="kwa">in</span>     Sequence_Lines<span class="sym">)</span>
     <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is</span>
      Sum <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> Item<span class="sym">'</span><span class="kwa">range loop</span>
         Sum <span class="sym">:=</span> Sum <span class="sym">+</span> Length<span class="sym">(</span>Item<span class="sym">(</span>I<span class="sym">));</span>
      <span class="kwa">end loop</span><span class="sym">;</span>
      <span class="kwa">return</span> Sum<span class="sym">;</span>
   <span class="kwa">end</span> Length<span class="sym">;</span>

      <span class="kwa">function</span> Replace<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> Unbounded_String<span class="sym">;</span>
            Index <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;</span>
            Substitution <span class="sym">:</span> Unbounded_String<span class="sym">)</span> <span class="kwa">return</span> Unbounded_String <span class="kwa">is</span>
         Temp <span class="sym">:</span> Unbounded_String<span class="sym">;</span>
      <span class="kwa">begin</span>
         <span class="kwa">if</span> Index <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span>
            Temp <span class="sym">:=</span> Substitution <span class="sym">&amp;</span> Slice<span class="sym">(</span>Item<span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> Length<span class="sym">(</span>Item<span class="sym">));</span>
         <span class="kwa">else</span>
            Temp <span class="sym">:=</span> Slice<span class="sym">(</span>Item<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> Index <span class="sym">-</span> <span class="num">1</span><span class="sym">) &amp;</span>
               Substitution <span class="sym">&amp;</span> Slice<span class="sym">(</span>Item<span class="sym">,</span> Index <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> Length<span class="sym">(</span>Item<span class="sym">));</span>
         <span class="kwa">end if</span><span class="sym">;</span>
         <span class="kwa">return</span> Temp<span class="sym">;</span>
      <span class="kwa">end</span> Replace<span class="sym">;</span>

      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Replace<span class="sym">);</span>

   Variants <span class="sym">:</span> <span class="kwa">constant</span>
   <span class="kwa">array</span> <span class="sym">(</span><span class="kwb">Natural</span> <span class="kwa">range</span> <span class="sym">&lt;&gt;)</span> <span class="kwa">of</span> Unbounded_String <span class="sym">:= (</span>
      To_Unbounded_String<span class="sym">(</span><span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">),</span>
      To_Unbounded_String<span class="sym">(</span><span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">),</span>
      To_Unbounded_String<span class="sym">(</span><span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">),</span>
      To_Unbounded_String<span class="sym">(</span><span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">),</span>
      To_Unbounded_String<span class="sym">(</span><span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">),</span>
      To_Unbounded_String<span class="sym">(</span><span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">),</span>
      To_Unbounded_String<span class="sym">(</span><span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">),</span>
      To_Unbounded_String<span class="sym">(</span><span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">),</span>
      To_Unbounded_String<span class="sym">(</span><span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="sym">));</span>
   Count <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>

   <span class="kwa">type</span> Iub <span class="kwa">is</span>
      <span class="kwa">record</span>
         Code         <span class="sym">:</span> Unbounded_String<span class="sym">;</span>
         Alternatives <span class="sym">:</span> Unbounded_String<span class="sym">;</span>
   <span class="kwa">end record</span><span class="sym">;</span>
   <span class="kwa">subtype</span> Codes_Index <span class="kwa">is</span> <span class="kwb">Natural</span> <span class="kwa">range</span> <span class="num">0</span>.<span class="num">.10</span><span class="sym">;</span>
   <span class="kwa">type</span> Codes_Array <span class="kwa">is array</span> <span class="sym">(</span>Codes_Index<span class="sym">)</span> <span class="kwa">of</span> Iub<span class="sym">;</span>
   Codes <span class="sym">:</span> <span class="kwa">constant</span> Codes_Array <span class="sym">:= (</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;B&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(c|g|t)&quot;</span><span class="sym">)),</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;D&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(a|g|t)&quot;</span><span class="sym">)),</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;H&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(a|c|t)&quot;</span><span class="sym">)),</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;K&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(g|t)&quot;</span><span class="sym">)),</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;M&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(a|c)&quot;</span><span class="sym">)),</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;N&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">)),</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;R&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(a|g)&quot;</span><span class="sym">)),</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;S&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(c|g)&quot;</span><span class="sym">)),</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;V&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(a|c|g)&quot;</span><span class="sym">)),</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;W&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(a|t)&quot;</span><span class="sym">)),</span>
      <span class="sym">(</span>To_Unbounded_String <span class="sym">(</span><span class="str">&quot;Y&quot;</span><span class="sym">),</span> To_Unbounded_String <span class="sym">(</span><span class="str">&quot;(c|t)&quot;</span><span class="sym">)));</span>

   <span class="kwa">type</span> Matcher_Array <span class="kwa">is array</span><span class="sym">(</span>Codes_Index<span class="sym">)</span> <span class="kwa">of</span> Pattern_Matcher<span class="sym">(</span><span class="num">1024</span><span class="sym">);</span>
   Compiled_Codes <span class="sym">:</span> Matcher_Array<span class="sym">;</span>

   Sequence       <span class="sym">:</span> Sequence_Lines <span class="sym">(</span><span class="num">1</span> .. <span class="num">1</span>_000_000<span class="sym">) := (</span><span class="kwa">others</span> <span class="sym">=&gt;</span> Null_Unbounded_String<span class="sym">);</span>
   Continuous     <span class="sym">:</span> Unbounded_String<span class="sym">;</span>
   Initial_Length <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>
   Line_Length    <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>
   Line           <span class="sym">:</span> <span class="kwb">String</span> <span class="sym">(</span><span class="num">1</span> .. <span class="num">80</span><span class="sym">);</span>
   Num_Lines      <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   R              <span class="sym">:</span> Pattern_Matcher <span class="sym">(</span><span class="num">1024</span><span class="sym">);</span>
   Code_Length    <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;</span>
   Matches        <span class="sym">:</span> Match_Array <span class="sym">(</span><span class="num">0</span> .. <span class="num">79</span><span class="sym">);</span>
<span class="kwa">begin</span>
   <span class="slc">-- Read FASTA Sequence</span>
   <span class="kwa">while not</span> End_Of_File <span class="kwa">loop</span>
      Ada.Text_Io.Get_Line<span class="sym">(</span>
         Item <span class="sym">=&gt;</span> Line<span class="sym">,</span>
         Last <span class="sym">=&gt;</span> Line_Length<span class="sym">);</span>
      Num_Lines <span class="sym">:=</span> Num_Lines <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      Append<span class="sym">(</span>
         Source   <span class="sym">=&gt;</span> Sequence <span class="sym">(</span>Num_Lines<span class="sym">),</span>
         New_Item <span class="sym">=&gt;</span> Line <span class="sym">(</span><span class="num">1</span> .. Line_Length<span class="sym">));</span>
   <span class="kwa">end loop</span><span class="sym">;</span>
   Initial_Length <span class="sym">:=</span> Length<span class="sym">(</span>Sequence<span class="sym">(</span><span class="num">1</span>..Num_Lines<span class="sym">)) +</span> Num_Lines<span class="sym">;</span>

   <span class="slc">-- remove FASTA descriptions</span>
   Compile<span class="sym">(</span>
      Matcher    <span class="sym">=&gt;</span> R<span class="sym">,</span>
      Expression <span class="sym">=&gt;</span> <span class="str">&quot;&gt;.*&quot;</span><span class="sym">,</span>
      Flags      <span class="sym">=&gt;</span> Case_Insensitive<span class="sym">);</span>
   <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span>..Num_Lines <span class="kwa">loop</span>
      <span class="kwa">if</span> Match<span class="sym">(</span>R<span class="sym">,</span> To_String<span class="sym">(</span>Sequence<span class="sym">(</span>I<span class="sym">)))</span> <span class="kwa">then</span>
         Sequence<span class="sym">(</span>I<span class="sym">) :=</span> Null_Unbounded_String<span class="sym">;</span>
      <span class="kwa">end if</span><span class="sym">;</span>
      Append<span class="sym">(</span>
         Source   <span class="sym">=&gt;</span> Continuous<span class="sym">,</span>
         New_Item <span class="sym">=&gt;</span> Sequence <span class="sym">(</span>I<span class="sym">));</span>
   <span class="kwa">end loop</span><span class="sym">;</span>
   Code_Length <span class="sym">:=</span> Length<span class="sym">(</span>Sequence<span class="sym">);</span>

   <span class="slc">-- regex match</span>
   <span class="kwa">for</span> I <span class="kwa">in</span> Variants<span class="sym">'</span><span class="kwa">range loop</span>
      Count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
      Compile<span class="sym">(</span>
         Matcher    <span class="sym">=&gt;</span> R<span class="sym">,</span>
         Expression <span class="sym">=&gt;</span> To_String <span class="sym">(</span>Variants <span class="sym">(</span>I<span class="sym">)),</span>
         Flags      <span class="sym">=&gt;</span> Case_Insensitive<span class="sym">);</span>
      <span class="kwa">for</span> J <span class="kwa">in</span> <span class="num">1</span>..Length<span class="sym">(</span>Continuous<span class="sym">) -</span> <span class="num">8</span> <span class="kwa">loop</span>
         <span class="kwa">if</span> Match<span class="sym">(</span>R<span class="sym">,</span> Slice<span class="sym">(</span>Continuous<span class="sym">,</span> J<span class="sym">,</span> J <span class="sym">+</span> <span class="num">8</span><span class="sym">))</span> <span class="kwa">then</span>
            Count <span class="sym">:=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
         <span class="kwa">end if</span><span class="sym">;</span>
      <span class="kwa">end loop</span><span class="sym">;</span>
      Count <span class="sym">:=</span> Count <span class="sym">/</span> <span class="num">2</span><span class="sym">;</span>
      Put<span class="sym">(</span>To_String<span class="sym">(</span>Variants<span class="sym">(</span>I<span class="sym">) &amp;</span> <span class="str">&quot; &quot;</span><span class="sym">));</span>
      Put<span class="sym">(</span>
         Item  <span class="sym">=&gt;</span> Count<span class="sym">,</span>
         Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);</span>
      New_Line<span class="sym">;</span>
   <span class="kwa">end loop</span><span class="sym">;</span>

   <span class="slc">-- regex substitution</span>
   <span class="kwa">for</span> I <span class="kwa">in</span> Codes_Index <span class="kwa">loop</span>
      Compile<span class="sym">(</span>Matcher <span class="sym">=&gt;</span> Compiled_Codes<span class="sym">(</span>I<span class="sym">),</span>
         Expression <span class="sym">=&gt;</span> To_String<span class="sym">(</span>Codes<span class="sym">(</span>I<span class="sym">)</span>.Code<span class="sym">),</span>
         Flags <span class="sym">=&gt;</span> No_Flags<span class="sym">);</span>
   <span class="kwa">end loop</span><span class="sym">;</span>

   Continuous <span class="sym">:=</span> Null_Unbounded_String<span class="sym">;</span>

   <span class="kwa">for</span> J <span class="kwa">in</span> <span class="num">1</span>..Num_Lines <span class="kwa">loop</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> Codes_Index<span class="sym">'</span><span class="kwa">range loop</span>
         <span class="kwa">loop</span>
            Match<span class="sym">(</span>
               Self    <span class="sym">=&gt;</span> Compiled_Codes<span class="sym">(</span>I<span class="sym">),</span>
               Data    <span class="sym">=&gt;</span> To_String <span class="sym">(</span>Sequence<span class="sym">(</span>J<span class="sym">)),</span>
               Matches <span class="sym">=&gt;</span> Matches<span class="sym">);</span>
            <span class="kwa">exit when</span> Matches<span class="sym">(</span><span class="num">0</span><span class="sym">) =</span> No_Match<span class="sym">;</span>
            <span class="kwa">for</span> K <span class="kwa">in reverse</span> Matches<span class="sym">'</span><span class="kwa">range loop</span>
               <span class="kwa">if</span> Matches<span class="sym">(</span>K<span class="sym">)</span>.First <span class="sym">&gt;=</span> <span class="num">1</span> <span class="kwa">then</span>
                  Sequence<span class="sym">(</span>J<span class="sym">) :=</span> Replace<span class="sym">(</span>
                     Item <span class="sym">=&gt;</span> Sequence<span class="sym">(</span>J<span class="sym">),</span>
                     Index  <span class="sym">=&gt;</span> Matches<span class="sym">(</span>K<span class="sym">)</span>.First<span class="sym">,</span>
                     Substitution  <span class="sym">=&gt;</span> Codes<span class="sym">(</span>I<span class="sym">)</span>.Alternatives<span class="sym">);</span>
               <span class="kwa">end if</span><span class="sym">;</span>
            <span class="kwa">end loop</span><span class="sym">;</span>
         <span class="kwa">end loop</span><span class="sym">;</span>
      <span class="kwa">end loop</span><span class="sym">;</span>
      Append<span class="sym">(</span>Source <span class="sym">=&gt;</span> Continuous<span class="sym">,</span> New_Item <span class="sym">=&gt;</span> Sequence<span class="sym">(</span>J<span class="sym">));</span>
   <span class="kwa">end loop</span><span class="sym">;</span>

   New_Line<span class="sym">;</span>
   Put<span class="sym">(</span>
      Item  <span class="sym">=&gt;</span> Initial_Length<span class="sym">,</span>
      Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);</span>
   New_Line<span class="sym">;</span>
   Put<span class="sym">(</span>
      Item  <span class="sym">=&gt;</span> Code_Length<span class="sym">,</span>
      Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);</span>
   New_Line<span class="sym">;</span>
   Put<span class="sym">(</span>
      Item  <span class="sym">=&gt;</span> Length <span class="sym">(</span>Continuous<span class="sym">),</span>
      Width <span class="sym">=&gt;</span> <span class="num">1</span><span class="sym">);</span>
<span class="kwa">end</span> Regexdna<span class="sym">;</span>

