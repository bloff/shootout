define <span class="kwd">new_list</span> <span class="sym">(</span>n<span class="sym">)</span>
<span class="sym">{</span>
   variable l <span class="sym">=</span> <span class="kwb">struct</span>
     <span class="sym">{</span>
	root<span class="sym">,</span> tail<span class="sym">,</span> data<span class="sym">,</span> len
     <span class="sym">};</span>
   l<span class="sym">.</span>data <span class="sym">= [</span><span class="num">1</span><span class="sym">:</span>n<span class="sym">];</span>
   l<span class="sym">.</span>root <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   l<span class="sym">.</span>tail <span class="sym">=</span> n<span class="sym">;</span>
   l<span class="sym">.</span>len <span class="sym">=</span> n<span class="sym">;</span>
   <span class="kwa">return</span> l<span class="sym">;</span>
<span class="sym">}</span>

define <span class="kwd">expand_list</span> <span class="sym">(</span>l<span class="sym">,</span> len<span class="sym">)</span>
<span class="sym">{</span>
   len <span class="sym">+=</span> <span class="num">4096</span><span class="sym">;</span>
   variable data <span class="sym">=</span> Int_Type<span class="sym">[</span>len<span class="sym">];</span>
   variable root <span class="sym">=</span> l<span class="sym">.</span>root<span class="sym">;</span>
   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;</span>
   variable n <span class="sym">= (</span>tail <span class="sym">-</span> root<span class="sym">);</span>
   <span class="kwa">if</span> <span class="sym">(</span>n<span class="sym">)</span>
     data<span class="sym">[[</span><span class="num">0</span><span class="sym">:</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">]] =</span> l<span class="sym">.</span>data<span class="sym">[[</span>root<span class="sym">:</span>tail<span class="sym">-</span><span class="num">1</span><span class="sym">]];</span>
   l<span class="sym">.</span>data <span class="sym">=</span> data<span class="sym">;</span>
   l<span class="sym">.</span>root <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   l<span class="sym">.</span>tail <span class="sym">=</span> n<span class="sym">;</span>
   l<span class="sym">.</span>len <span class="sym">=</span> len<span class="sym">;</span>
<span class="sym">}</span>

define <span class="kwd">list_append</span> <span class="sym">(</span>l<span class="sym">,</span> value<span class="sym">)</span>
<span class="sym">{</span>
   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;</span>

   <span class="kwa">if</span> <span class="sym">(</span>l<span class="sym">.</span>tail <span class="sym">==</span> l<span class="sym">.</span>len<span class="sym">)</span>
     <span class="sym">{</span>
	<span class="kwd">expand_list</span> <span class="sym">(</span>l<span class="sym">,</span> l<span class="sym">.</span>len <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
	tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;</span>
     <span class="sym">}</span>

   l<span class="sym">.</span>data<span class="sym">[</span>tail<span class="sym">] =</span> value<span class="sym">;</span>
   tail<span class="sym">++;</span>
   l<span class="sym">.</span>tail <span class="sym">=</span> tail<span class="sym">;</span>
<span class="sym">}</span>

define <span class="kwd">list_pop_right</span> <span class="sym">(</span>l<span class="sym">)</span>
<span class="sym">{</span>
   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>tail <span class="sym">==</span> l<span class="sym">.</span>root<span class="sym">)</span>
     <span class="kwa">return</span> NULL<span class="sym">;</span>
   tail<span class="sym">--;</span>
   l<span class="sym">.</span>tail <span class="sym">=</span> tail<span class="sym">;</span>
   <span class="kwa">return</span> l<span class="sym">.</span>data<span class="sym">[</span>tail<span class="sym">];</span>
<span class="sym">}</span>

define <span class="kwd">list_pop_left</span> <span class="sym">(</span>l<span class="sym">)</span>
<span class="sym">{</span>
   variable root <span class="sym">=</span> l<span class="sym">.</span>root<span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>l<span class="sym">.</span>tail <span class="sym">==</span> root<span class="sym">)</span>
     <span class="kwa">return</span> NULL<span class="sym">;</span>
   l<span class="sym">.</span>root <span class="sym">=</span> root<span class="sym">+</span><span class="num">1</span><span class="sym">;</span>
   <span class="kwa">return</span> l<span class="sym">.</span>data<span class="sym">[</span>root<span class="sym">];</span>
<span class="sym">}</span>

define <span class="kwd">list_length</span> <span class="sym">(</span>l<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">return</span> l<span class="sym">.</span>tail <span class="sym">-</span> l<span class="sym">.</span>root<span class="sym">;</span>
<span class="sym">}</span>

define <span class="kwd">reverse_list</span> <span class="sym">(</span>l<span class="sym">)</span>
<span class="sym">{</span>
   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;</span>
   variable root <span class="sym">=</span> l<span class="sym">.</span>root<span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>tail <span class="sym">==</span> root<span class="sym">)</span>
     <span class="kwa">return</span><span class="sym">;</span>

   tail<span class="sym">--;</span>
   l<span class="sym">.</span>data<span class="sym">[[</span>root<span class="sym">:</span>tail<span class="sym">]] =</span> l<span class="sym">.</span>data<span class="sym">[[</span>tail<span class="sym">:</span>root<span class="sym">:-</span><span class="num">1</span><span class="sym">]];</span>
<span class="sym">}</span>

define <span class="kwd">dup_list</span> <span class="sym">(</span>l<span class="sym">)</span>
<span class="sym">{</span>
   variable new_l <span class="sym">=</span> &#64;l<span class="sym">;</span>
   new_l<span class="sym">.</span>data <span class="sym">=</span> &#64;l<span class="sym">.</span>data<span class="sym">;</span>
   <span class="kwa">return</span> new_l<span class="sym">;</span>
<span class="sym">}</span>

define <span class="kwd">list_to_array</span> <span class="sym">(</span>a<span class="sym">)</span>
<span class="sym">{</span>
   variable tail<span class="sym">,</span> root<span class="sym">;</span>
   tail <span class="sym">=</span> a<span class="sym">.</span>tail<span class="sym">;</span>
   root <span class="sym">=</span> a<span class="sym">.</span>root<span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>root <span class="sym">==</span> tail<span class="sym">)</span>
     <span class="kwa">return</span> NULL<span class="sym">;</span>
   tail<span class="sym">--;</span>
   <span class="kwa">return</span> a<span class="sym">.</span>data<span class="sym">[[</span>root<span class="sym">:</span>tail<span class="sym">]];</span>
<span class="sym">}</span>

define <span class="kwd">check_eqs</span> <span class="sym">(</span>a<span class="sym">,</span> b<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">list_length</span> <span class="sym">(</span>a<span class="sym">) !=</span> <span class="kwd">list_length</span> <span class="sym">(</span>b<span class="sym">))</span>
     <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
   variable data_a <span class="sym">=</span> <span class="kwd">list_to_array</span> <span class="sym">(</span>a<span class="sym">);</span>
   variable data_b <span class="sym">=</span> <span class="kwd">list_to_array</span> <span class="sym">(</span>b<span class="sym">);</span>
   <span class="kwa">if</span> <span class="sym">(</span>data_a <span class="sym">==</span> NULL<span class="sym">)</span>
     <span class="kwa">return</span> <span class="num">1</span><span class="sym">;			       %</span>  same length<span class="sym">,</span> but empty

   <span class="kwa">return not</span> <span class="kwd">length</span> <span class="sym">(</span><span class="kwd">where</span> <span class="sym">(</span>data_a <span class="sym">!=</span> data_b<span class="sym">));</span>
<span class="sym">}</span>

variable SIZE <span class="sym">=</span> <span class="num">10000</span><span class="sym">;</span>
define <span class="kwd">test_lists</span> <span class="sym">()</span>
<span class="sym">{</span>
   variable L1 <span class="sym">=</span> <span class="kwd">new_list</span> <span class="sym">(</span>SIZE<span class="sym">);</span>
   variable L2 <span class="sym">=</span> <span class="kwd">dup_list</span> <span class="sym">(</span>L1<span class="sym">);</span>
   variable L3 <span class="sym">=</span> <span class="kwd">new_list</span> <span class="sym">(</span><span class="num">0</span><span class="sym">);</span>

   forever
     <span class="sym">{</span>
	variable node <span class="sym">=</span> <span class="kwd">list_pop_left</span> <span class="sym">(</span>L2<span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(</span>node <span class="sym">==</span> NULL<span class="sym">)</span>
	  <span class="kwa">break</span><span class="sym">;</span>

	<span class="kwd">list_append</span> <span class="sym">(</span>L3<span class="sym">,</span> node<span class="sym">);</span>
     <span class="sym">}</span>

   forever
     <span class="sym">{</span>
	node <span class="sym">=</span> <span class="kwd">list_pop_right</span> <span class="sym">(</span>L3<span class="sym">);</span>
	<span class="kwa">if</span> <span class="sym">(</span>node <span class="sym">==</span> NULL<span class="sym">)</span>
	  <span class="kwa">break</span><span class="sym">;</span>

	<span class="kwd">list_append</span> <span class="sym">(</span>L2<span class="sym">,</span> node<span class="sym">);</span>
     <span class="sym">}</span>
   <span class="kwd">reverse_list</span> <span class="sym">(</span>L1<span class="sym">);</span>

   <span class="kwa">if</span> <span class="sym">(</span>L1<span class="sym">.</span>data<span class="sym">[</span>L1<span class="sym">.</span>root<span class="sym">] !=</span> SIZE<span class="sym">)</span>
     <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

   <span class="kwa">if</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">==</span> <span class="kwd">check_eqs</span> <span class="sym">(</span>L1<span class="sym">,</span> L2<span class="sym">))</span>
     <span class="kwa">return</span> <span class="sym">-</span><span class="num">2</span><span class="sym">;</span>

   <span class="kwa">return</span> <span class="kwd">list_length</span> <span class="sym">(</span>L1<span class="sym">);</span>
<span class="sym">}</span>


define <span class="kwd">main</span> <span class="sym">()</span>
<span class="sym">{</span>
   variable num <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> num <span class="sym">=</span> <span class="kwd">integer</span> <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
   <span class="kwd">loop</span> <span class="sym">(</span>num<span class="sym">)</span>
     num <span class="sym">=</span> <span class="kwd">test_lists</span> <span class="sym">();</span>

   <span class="kwd">fprintf</span> <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> num<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwd">main</span> <span class="sym">();</span>

