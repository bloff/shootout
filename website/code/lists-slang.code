define new_list <span class="sym">(</span>n<span class="sym">)
{
</span>   variable l <span class="sym">=</span> <span class="kwb">struct
</span>     <span class="sym">{
</span>	root<span class="sym">,</span> tail<span class="sym">,</span> data<span class="sym">,</span> len
     <span class="sym">};
</span>   l<span class="sym">.</span>data <span class="sym">= [</span><span class="num">1</span><span class="sym">:</span>n<span class="sym">];
</span>   l<span class="sym">.</span>root <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>   l<span class="sym">.</span>tail <span class="sym">=</span> n<span class="sym">;
</span>   l<span class="sym">.</span>len <span class="sym">=</span> n<span class="sym">;
</span>   <span class="kwa">return</span> l<span class="sym">;
}

</span>define expand_list <span class="sym">(</span>l<span class="sym">,</span> len<span class="sym">)
{
</span>   len <span class="sym">+=</span> <span class="num">4096</span><span class="sym">;
</span>   variable data <span class="sym">=</span> Int_Type<span class="sym">[</span>len<span class="sym">];
</span>   variable root <span class="sym">=</span> l<span class="sym">.</span>root<span class="sym">;
</span>   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;
</span>   variable n <span class="sym">= (</span>tail <span class="sym">-</span> root<span class="sym">);
</span>   <span class="kwa">if</span> <span class="sym">(</span>n<span class="sym">)
</span>     data<span class="sym">[[</span><span class="num">0</span><span class="sym">:</span>n<span class="num">-1</span><span class="sym">]] =</span> l<span class="sym">.</span>data<span class="sym">[[</span>root<span class="sym">:</span>tail<span class="num">-1</span><span class="sym">]];
</span>   l<span class="sym">.</span>data <span class="sym">=</span> data<span class="sym">;
</span>   l<span class="sym">.</span>root <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>   l<span class="sym">.</span>tail <span class="sym">=</span> n<span class="sym">;
</span>   l<span class="sym">.</span>len <span class="sym">=</span> len<span class="sym">;
}

</span>define list_append <span class="sym">(</span>l<span class="sym">,</span> value<span class="sym">)
{
</span>   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;

</span>   <span class="kwa">if</span> <span class="sym">(</span>l<span class="sym">.</span>tail <span class="sym">==</span> l<span class="sym">.</span>len<span class="sym">)
     {
</span>	expand_list <span class="sym">(</span>l<span class="sym">,</span> l<span class="sym">.</span>len <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span>	tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;
     }

</span>   l<span class="sym">.</span>data<span class="sym">[</span>tail<span class="sym">] =</span> value<span class="sym">;
</span>   tail<span class="sym">++;
</span>   l<span class="sym">.</span>tail <span class="sym">=</span> tail<span class="sym">;
}

</span>define list_pop_right <span class="sym">(</span>l<span class="sym">)
{
</span>   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>tail <span class="sym">==</span> l<span class="sym">.</span>root<span class="sym">)
</span>     <span class="kwa">return</span> NULL<span class="sym">;
</span>   tail<span class="sym">--;
</span>   l<span class="sym">.</span>tail <span class="sym">=</span> tail<span class="sym">;
</span>   <span class="kwa">return</span> l<span class="sym">.</span>data<span class="sym">[</span>tail<span class="sym">];
}

</span>define list_pop_left <span class="sym">(</span>l<span class="sym">)
{
</span>   variable root <span class="sym">=</span> l<span class="sym">.</span>root<span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>l<span class="sym">.</span>tail <span class="sym">==</span> root<span class="sym">)
</span>     <span class="kwa">return</span> NULL<span class="sym">;
</span>   l<span class="sym">.</span>root <span class="sym">=</span> root<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span>   <span class="kwa">return</span> l<span class="sym">.</span>data<span class="sym">[</span>root<span class="sym">];
}

</span>define list_length <span class="sym">(</span>l<span class="sym">)
{
</span>   <span class="kwa">return</span> l<span class="sym">.</span>tail <span class="sym">-</span> l<span class="sym">.</span>root<span class="sym">;
}

</span>define reverse_list <span class="sym">(</span>l<span class="sym">)
{
</span>   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;
</span>   variable root <span class="sym">=</span> l<span class="sym">.</span>root<span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>tail <span class="sym">==</span> root<span class="sym">)
</span>     <span class="kwa">return</span><span class="sym">;

</span>   tail<span class="sym">--;
</span>   l<span class="sym">.</span>data<span class="sym">[[</span>root<span class="sym">:</span>tail<span class="sym">]] =</span> l<span class="sym">.</span>data<span class="sym">[[</span>tail<span class="sym">:</span>root<span class="sym">:-</span><span class="num">1</span><span class="sym">]];
}

</span>define dup_list <span class="sym">(</span>l<span class="sym">)
{
</span>   variable new_l <span class="sym">=</span> &#64;l<span class="sym">;
</span>   new_l<span class="sym">.</span>data <span class="sym">=</span> &#64;l<span class="sym">.</span>data<span class="sym">;
</span>   <span class="kwa">return</span> new_l<span class="sym">;
}

</span>define list_to_array <span class="sym">(</span>a<span class="sym">)
{
</span>   variable tail<span class="sym">,</span> root<span class="sym">;
</span>   tail <span class="sym">=</span> a<span class="sym">.</span>tail<span class="sym">;
</span>   root <span class="sym">=</span> a<span class="sym">.</span>root<span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>root <span class="sym">==</span> tail<span class="sym">)
</span>     <span class="kwa">return</span> NULL<span class="sym">;
</span>   tail<span class="sym">--;
</span>   <span class="kwa">return</span> a<span class="sym">.</span>data<span class="sym">[[</span>root<span class="sym">:</span>tail<span class="sym">]];
}

</span>define check_eqs <span class="sym">(</span>a<span class="sym">,</span> b<span class="sym">)
{
</span>   <span class="kwa">if</span> <span class="sym">(</span>list_length <span class="sym">(</span>a<span class="sym">) !=</span> list_length <span class="sym">(</span>b<span class="sym">))
</span>     <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span>   variable data_a <span class="sym">=</span> list_to_array <span class="sym">(</span>a<span class="sym">);
</span>   variable data_b <span class="sym">=</span> list_to_array <span class="sym">(</span>b<span class="sym">);
</span>   <span class="kwa">if</span> <span class="sym">(</span>data_a <span class="sym">==</span> NULL<span class="sym">)
</span>     <span class="kwa">return</span> <span class="num">1</span><span class="sym">;			       %</span>  same length<span class="sym">,</span> but empty

   <span class="kwa">return not</span> length <span class="sym">(</span>where <span class="sym">(</span>data_a <span class="sym">!=</span> data_b<span class="sym">));
}

</span>variable SIZE <span class="sym">=</span> <span class="num">10000</span><span class="sym">;
</span>define test_lists <span class="sym">()
{
</span>   variable L1 <span class="sym">=</span> new_list <span class="sym">(</span>SIZE<span class="sym">);
</span>   variable L2 <span class="sym">=</span> dup_list <span class="sym">(</span>L1<span class="sym">);
</span>   variable L3 <span class="sym">=</span> new_list <span class="sym">(</span><span class="num">0</span><span class="sym">);

</span>   forever
     <span class="sym">{
</span>	variable node <span class="sym">=</span> list_pop_left <span class="sym">(</span>L2<span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>node <span class="sym">==</span> NULL<span class="sym">)
</span>	  <span class="kwa">break</span><span class="sym">;

</span>	list_append <span class="sym">(</span>L3<span class="sym">,</span> node<span class="sym">);
     }

</span>   forever
     <span class="sym">{
</span>	node <span class="sym">=</span> list_pop_right <span class="sym">(</span>L3<span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>node <span class="sym">==</span> NULL<span class="sym">)
</span>	  <span class="kwa">break</span><span class="sym">;

</span>	list_append <span class="sym">(</span>L2<span class="sym">,</span> node<span class="sym">);
     }
</span>   reverse_list <span class="sym">(</span>L1<span class="sym">);

</span>   <span class="kwa">if</span> <span class="sym">(</span>L1<span class="sym">.</span>data<span class="sym">[</span>L1<span class="sym">.</span>root<span class="sym">] !=</span> SIZE<span class="sym">)
</span>     <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;

</span>   <span class="kwa">if</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">==</span> check_eqs <span class="sym">(</span>L1<span class="sym">,</span> L2<span class="sym">))
</span>     <span class="kwa">return</span> <span class="num">-2</span><span class="sym">;

</span>   <span class="kwa">return</span> list_length <span class="sym">(</span>L1<span class="sym">);
}


</span>define main <span class="sym">()
{
</span>   variable num <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> num <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span>   loop <span class="sym">(</span>num<span class="sym">)
</span>     num <span class="sym">=</span> test_lists <span class="sym">();

</span>   fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> num<span class="sym">);
}

</span>main <span class="sym">();
</span>
